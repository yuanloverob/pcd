{
  "cve_id": "CVE-2021-21413",
  "cve_desc": "isolated-vm is a library for nodejs which gives you access to v8's Isolate interface. Versions of isolated-vm before v4.0.0 have API pitfalls which may make it easy for implementers to expose supposed secure isolates to the permissions of the main nodejs isolate. Reference objects allow access to the underlying reference's full prototype chain. In an environment where the implementer has exposed a Reference instance to an attacker they would be able to use it to acquire a Reference to the nodejs context's Function object. Similar application-specific attacks could be possible by modifying the local prototype of other API objects. Access to NativeModule objects could allow an attacker to load and run native code from anywhere on the filesystem. If combined with, for example, a file upload API this would allow for arbitrary code execution. This is addressed in v4.0.0 through a series of related changes.",
  "repo": "laverdet/isolated-vm",
  "patch_hash": "2646e6c1558bac66285daeab54c7d490ed332b15",
  "patch_info": {
    "commit_hash": "2646e6c1558bac66285daeab54c7d490ed332b15",
    "repo": "laverdet/isolated-vm",
    "commit_url": "https://github.com/laverdet/isolated-vm/commit/2646e6c1558bac66285daeab54c7d490ed332b15",
    "files": [
      "CHANGELOG.md",
      "README.md",
      "isolated-vm.d.ts",
      "src/isolate/strings.h",
      "src/module/reference_handle.cc",
      "src/module/reference_handle.h",
      "tests/reference.js"
    ],
    "message": "Don't invoke accessors or proxies via Reference functions",
    "before_after_code_files": [
      "isolated-vm.d.ts||isolated-vm.d.ts",
      "src/isolate/strings.h||src/isolate/strings.h",
      "src/module/reference_handle.cc||src/module/reference_handle.cc",
      "src/module/reference_handle.h||src/module/reference_handle.h",
      "tests/reference.js||tests/reference.js"
    ]
  },
  "patch_diff": {
    "isolated-vm.d.ts||isolated-vm.d.ts": [
      "File: isolated-vm.d.ts -> isolated-vm.d.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:   | Context",
      "10:   | Script",
      "11:   | ExternalCopy<any>",
      "12:   | Copy<any>",
      "13:   | Reference<any>",
      "14:   | Dereference<any>",
      "15:   | Module",
      "16:   | typeof import(\"isolated-vm\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:   | Callback<any>",
      "17:   | ((...args: any[]) => any)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "285:  export class Reference<T = any> {",
      "286:   private __ivm_reference: T;",
      "",
      "[Removed Lines]",
      "287:   constructor(value: T, options?: { inheritUnsafe?: boolean });",
      "",
      "[Added Lines]",
      "289:   constructor(value: T, options?: { unsafeInherit?: boolean });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "335:    deleteIgnored(property: keyof T): void;",
      "341:   get<Options extends TransferOptions, Key extends keyof T>(",
      "343:   getSync<Options extends TransferOptions, Key extends keyof T>(",
      "353:   set<Options extends TransferOptions, Key extends keyof T>(",
      "355:   setIgnored<Options extends TransferOptions, Key extends keyof T>(",
      "356:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): void;",
      "357:   setSync<Options extends TransferOptions, Key extends keyof T>(",
      "",
      "[Removed Lines]",
      "334:    delete(property: keyof T): Promise<boolean>;",
      "336:    deleteSync(property: keyof T): boolean;",
      "342:    property: Key, options?: Options): ResultTypeAsync<Options & AsReference, T[Key]>;",
      "344:    property: Key, options?: Options): ResultTypeSync<Options & AsReference, T[Key]>;",
      "354:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): Promise<boolean>;",
      "358:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): boolean;",
      "",
      "[Added Lines]",
      "336:    delete(property: keyof T): Promise<void>;",
      "338:    deleteSync(property: keyof T): void;",
      "346:    property: Key, options?: Options): ResultTypeAsync<Options & FallbackReference, T[Key]>;",
      "348:    property: Key, options?: Options): ResultTypeSync<Options & FallbackReference, T[Key]>;",
      "354:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): Promise<void>;",
      "358:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): void;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "366:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "367:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
      "368:    options?: Options",
      "370:   applyIgnored<Options extends ReferenceApplyOptions>(",
      "371:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "373:    options?: Options",
      "374:   ): void;",
      "375:   applySync<Options extends ReferenceApplyOptions>(",
      "376:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "377:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
      "378:    options?: Options",
      "",
      "[Removed Lines]",
      "369:   ): ResultTypeBidirectionalAsync<Options & ApplyAsReference, ApplyResult<T>>;",
      "372:    arguments?: ArgumentsTypeBidirectional<Options & ApplyAsReference, ApplyArguments<T>>,",
      "379:   ): ResultTypeBidirectionalSync<Options & ApplyAsReference, ApplyResult<T>>;",
      "",
      "[Added Lines]",
      "369:   ): ResultTypeBidirectionalAsync<Options & FallbackReference, ApplyResult<T>>;",
      "372:    arguments?: ArgumentsTypeBidirectional<Options & FallbackReference, ApplyArguments<T>>,",
      "379:   ): ResultTypeBidirectionalSync<Options & FallbackReference, ApplyResult<T>>;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "392:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "393:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
      "394:    options?: Options",
      "396:  }",
      "",
      "[Removed Lines]",
      "395:   ): ResultTypeBidirectionalSync<Options & ApplyAsReference, ApplyResult<T>>;",
      "",
      "[Added Lines]",
      "395:   ): ResultTypeBidirectionalSync<Options & FallbackReference, ApplyResult<T>>;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "707:  type AsCopy = { copy: true };",
      "708:  type AsExternal = { externalCopy: true };",
      "709:  type AsReference = { reference: true };",
      "710:  type ApplyAsReference = { result: AsReference };",
      "711:  type WithTransfer = AsCopy | AsExternal | AsReference;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:  type FallbackReference = { _reference: true };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "727:   Options extends AsReference ? Reference<Result> :",
      "728:   Result extends Transferable ? Result :",
      "729:   Result extends void ? void :",
      "730:   Transferable;",
      "731:  type ResultTypeAsync<Options extends TransferOptions, Result = any> = Promise<ResultTypeBase<Options, Result>>;",
      "732:  type ResultTypeSync<Options extends TransferOptions, Result = any> = CheckPromise<Options, ResultTypeBase<Options, Result>>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "731:   Options extends FallbackReference ? Reference<Result> :",
      "",
      "---------------"
    ],
    "src/isolate/strings.h||src/isolate/strings.h": [
      "File: src/isolate/strings.h -> src/isolate/strings.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:   String function{\"function\"};",
      "59:   String global{\"global\"};",
      "60:   String ignored{\"ignored\"};",
      "62:   String inspector{\"inspector\"};",
      "63:   String isolateIsDisposed{\"Isolate is disposed\"};",
      "64:   String isolatedVm{\"isolated-vm\"};",
      "",
      "[Removed Lines]",
      "61:   String inheritUnsafe{\"inheritUnsafe\"};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:   String transferList{\"transferList\"};",
      "83:   String transferOut{\"transferOut\"};",
      "84:   String undefined{\"undefined\"};",
      "86:   String does_zap_garbage{\"does_zap_garbage\"};",
      "87:   String externally_allocated_size{\"externally_allocated_size\"};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:   String unsafeInherit{\"unsafeInherit\"};",
      "",
      "---------------"
    ],
    "src/module/reference_handle.cc||src/module/reference_handle.cc": [
      "File: src/module/reference_handle.cc -> src/module/reference_handle.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "127: }",
      "129: auto ReferenceHandle::New(Local<Value> value, MaybeLocal<Object> options) -> unique_ptr<ReferenceHandle> {",
      "131:  return std::make_unique<ReferenceHandle>(value, inherit);",
      "132: }",
      "",
      "[Removed Lines]",
      "130:  auto inherit = ReadOption<bool>(options, StringTable::Get().inheritUnsafe, false);",
      "",
      "[Added Lines]",
      "130:  auto inherit = ReadOption<bool>(options, StringTable::Get().unsafeInherit, false);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "426: }",
      "432:  public:",
      "447:     throw RuntimeTypeError(\"Invalid `key`\");",
      "448:    }",
      "449:   }",
      "451:   void Phase2() final {",
      "465:     }",
      "472:   }",
      "474:   auto Phase3() -> Local<Value> final {",
      "",
      "[Removed Lines]",
      "431: class GetRunner : public ThreePhaseTask {",
      "433:   GetRunner(",
      "434:    const ReferenceHandle& that,",
      "435:    Local<Value> key_handle,",
      "436:    MaybeLocal<Object> maybe_options,",
      "437:    bool inherit",
      "438:   ) :",
      "439:     context{that.context},",
      "440:     reference{that.reference},",
      "441:     options{maybe_options, inherit ?",
      "442:      TransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
      "443:     inherit{inherit} {",
      "444:    that.CheckDisposed();",
      "445:    key = ExternalCopy::CopyIfPrimitive(key_handle);",
      "446:    if (!key) {",
      "452:    Local<Context> context_handle = Deref(context);",
      "453:    Context::Scope context_scope{context_handle};",
      "454:    Local<Value> key_inner = key->CopyInto();",
      "455:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
      "456:    bool allow = [&]() {",
      "457:     if (!inherit) {",
      "458:      if (key_inner->IsName()) {",
      "459:       return Unmaybe(object->HasRealNamedProperty(context_handle, key_inner.As<Name>()));",
      "460:      } else if (key_inner->IsNumber()) {",
      "461:       return Unmaybe(object->HasRealIndexedProperty(context_handle, HandleCast<uint32_t>(key_inner)));",
      "462:      } else {",
      "463:       return false;",
      "464:      }",
      "466:     return true;",
      "467:    }();",
      "468:    Local<Value> value = allow ?",
      "469:     Unmaybe(object->Get(context_handle, key_inner)) :",
      "470:     Undefined(Isolate::GetCurrent()).As<Value>();",
      "471:    ret = TransferOut(value, options);",
      "",
      "[Added Lines]",
      "431: class AccessorRunner : public ThreePhaseTask {",
      "433:   AccessorRunner(ReferenceHandle& target, Local<Value> key_handle) :",
      "434:   context{target.context},",
      "435:   target{target.reference},",
      "436:   key{ExternalCopy::CopyIfPrimitive(key_handle)} {",
      "437:    target.CheckDisposed();",
      "438:    if (!key || (!key_handle->IsName() && !key_handle->IsUint32())) {",
      "440:    } else if (target.type_of != decltype(target.type_of)::Object) {",
      "441:     throw RuntimeTypeError(\"Reference is not an object\");",
      "442:    }",
      "443:   }",
      "445:  protected:",
      "446:   auto GetTargetAndAlsoCheckForProxy() -> Local<Object> {",
      "447:    auto object = Local<Object>::Cast(Deref(target));",
      "448:    if (HasProxy(object)) {",
      "449:     throw RuntimeTypeError(\"Object is or has proxy\");",
      "450:    }",
      "451:    return object;",
      "452:   }",
      "454:   auto GetKey(Local<Context> context) -> Local<Name> {",
      "455:    auto key_inner = key->CopyInto();",
      "456:    return (key_inner->IsString() || key_inner->IsSymbol()) ?",
      "457:     key_inner.As<Name>() : Unmaybe(key_inner->ToString(context)).As<Name>();",
      "458:   }",
      "460:   RemoteHandle<Context> context;",
      "462:  private:",
      "463:   static auto HasProxy(Local<Object> object) -> bool {",
      "464:    if (object->IsProxy()) {",
      "465:     return true;",
      "466:    } else {",
      "467:     auto proto = object->GetPrototype();",
      "468:     if (proto->IsNullOrUndefined()) {",
      "469:      return false;",
      "470:     } else {",
      "471:      return HasProxy(proto.As<Object>());",
      "472:     }",
      "476:   RemoteHandle<Value> target;",
      "477:   unique_ptr<ExternalCopy> key;",
      "478: };",
      "483: class GetRunner final : public AccessorRunner {",
      "484:  public:",
      "485:   GetRunner(ReferenceHandle& target, Local<Value> key_handle, MaybeLocal<Object> maybe_options) :",
      "486:   AccessorRunner{target, key_handle},",
      "487:   options{maybe_options, target.inherit ?",
      "488:    TransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
      "489:   inherit{target.inherit} {}",
      "493:    auto* isolate = Isolate::GetCurrent();",
      "494:    auto context = Deref(this->context);",
      "495:    Context::Scope context_scope{context};",
      "496:    auto name = GetKey(context);",
      "497:    auto object = GetTargetAndAlsoCheckForProxy();",
      "500:    ret = TransferOut([&]() {",
      "501:     if (inherit) {",
      "503:      auto target = object;",
      "504:      do {",
      "505:       if (Unmaybe(target->HasOwnProperty(context, name))) {",
      "506:        if (Unmaybe(target->HasRealNamedCallbackProperty(context, name))) {",
      "507:         throw RuntimeTypeError(\"Property is getter\");",
      "508:        }",
      "509:        return Unmaybe(target->GetRealNamedProperty(context, name));",
      "510:       }",
      "511:       auto next = target->GetPrototype();",
      "512:       if (next->IsNullOrUndefined()) {",
      "513:        return Undefined(isolate).As<Value>();",
      "514:       }",
      "515:       target = next.As<Object>();",
      "516:      } while (true);",
      "517:     } else if (!Unmaybe(object->HasOwnProperty(context, name))) {",
      "518:      return Undefined(isolate).As<Value>();",
      "519:     } else if (Unmaybe(object->HasRealNamedCallbackProperty(context, name))) {",
      "520:      throw RuntimeTypeError(\"Property is getter\");",
      "521:     } else {",
      "522:      return Unmaybe(object->Get(context, name));",
      "524:    }(), options);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "476:   }",
      "478:  private:",
      "482:   unique_ptr<Transferable> ret;",
      "483:   TransferOptions options;",
      "484:   bool inherit;",
      "485: };",
      "486: template <int async>",
      "487: auto ReferenceHandle::Get(Local<Value> key_handle, MaybeLocal<Object> maybe_options) -> Local<Value> {",
      "489: }",
      "495:  public:",
      "496:   DeleteRunner(ReferenceHandle& that, Local<Value> key_handle) :",
      "506:   void Phase2() final {",
      "511:   }",
      "513:   auto Phase3() -> Local<Value> final {",
      "515:   }",
      "522: };",
      "523: template <int async>",
      "524: auto ReferenceHandle::Delete(Local<Value> key_handle) -> Local<Value> {",
      "",
      "[Removed Lines]",
      "479:   unique_ptr<ExternalCopy> key;",
      "480:   RemoteHandle<Context> context;",
      "481:   RemoteHandle<Value> reference;",
      "488:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options, inherit);",
      "494: class DeleteRunner : public ThreePhaseTask {",
      "497:     key{ExternalCopy::CopyIfPrimitive(key_handle)},",
      "498:     context{that.context},",
      "499:     reference{that.reference} {",
      "500:    that.CheckDisposed();",
      "501:    if (!key) {",
      "502:     throw RuntimeTypeError(\"Invalid `key`\");",
      "503:    }",
      "504:   }",
      "507:    Local<Context> context_handle = Deref(context);",
      "508:    Context::Scope context_scope{context_handle};",
      "509:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
      "510:    result = Unmaybe(object->Delete(context_handle, key->CopyInto()));",
      "514:    return Boolean::New(Isolate::GetCurrent(), result);",
      "517:  private:",
      "518:   unique_ptr<ExternalCopy> key;",
      "519:   RemoteHandle<Context> context;",
      "520:   RemoteHandle<Value> reference;",
      "521:   bool result = false;",
      "",
      "[Added Lines]",
      "538:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options);",
      "544: class DeleteRunner final : public AccessorRunner {",
      "547:   AccessorRunner{that, key_handle} {}",
      "550:    auto context = Deref(this->context);",
      "551:    Context::Scope context_scope{context};",
      "552:    auto object = GetTargetAndAlsoCheckForProxy();",
      "553:    if (!Unmaybe(object->Delete(context, GetKey(context)))) {",
      "554:     throw RuntimeTypeError(\"Delete failed\");",
      "555:    }",
      "559:    return Undefined(Isolate::GetCurrent());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "532:  public:",
      "533:   SetRunner(",
      "534:    ReferenceHandle& that,",
      "",
      "[Removed Lines]",
      "531: class SetRunner : public ThreePhaseTask {",
      "",
      "[Added Lines]",
      "570: class SetRunner final : public AccessorRunner {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "536:    Local<Value> val_handle,",
      "537:    MaybeLocal<Object> maybe_options",
      "538:   ) :",
      "549:   void Phase2() final {",
      "558:   }",
      "560:   auto Phase3() -> Local<Value> final {",
      "562:   }",
      "564:  private:",
      "566:   unique_ptr<Transferable> val;",
      "570: };",
      "571: template <int async>",
      "572: auto ReferenceHandle::Set(Local<Value> key_handle, Local<Value> val_handle, MaybeLocal<Object> maybe_options) -> Local<Value> {",
      "",
      "[Removed Lines]",
      "539:     key{ExternalCopy::CopyIfPrimitive(key_handle)},",
      "540:     val{TransferOut(val_handle, TransferOptions{maybe_options})},",
      "541:     context{that.context},",
      "542:     reference{that.reference} {",
      "543:    that.CheckDisposed();",
      "544:    if (!key) {",
      "545:     throw RuntimeTypeError(\"Invalid `key`\");",
      "546:    }",
      "547:   }",
      "550:    Local<Context> context_handle = Deref(context);",
      "551:    Context::Scope context_scope{context_handle};",
      "552:    Local<Value> key_inner = key->CopyInto();",
      "553:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
      "555:    Unmaybe(object->Delete(context_handle, key_inner));",
      "556:    Local<Value> val_inner = val->TransferIn();",
      "557:    did_set = Unmaybe(object->Set(context_handle, key_inner, val_inner));",
      "561:    return Boolean::New(Isolate::GetCurrent(), did_set);",
      "565:   unique_ptr<ExternalCopy> key;",
      "567:   RemoteHandle<Context> context;",
      "568:   RemoteHandle<Value> reference;",
      "569:   bool did_set = false;",
      "",
      "[Added Lines]",
      "578:   AccessorRunner{that, key_handle},",
      "579:   val{TransferOut(val_handle, TransferOptions{maybe_options})} {}",
      "582:    auto context = Deref(this->context);",
      "583:    Context::Scope context_scope{context};",
      "584:    auto name = GetKey(context);",
      "585:    auto object = GetTargetAndAlsoCheckForProxy();",
      "587:    Unmaybe(object->Delete(context, name));",
      "588:    auto val_inner = val->TransferIn();",
      "589:    if (!Unmaybe(object->CreateDataProperty(context, GetKey(context), val_inner))) {",
      "590:     throw RuntimeTypeError(\"Set failed\");",
      "591:    }",
      "595:    return Undefined(Isolate::GetCurrent());",
      "",
      "---------------"
    ],
    "src/module/reference_handle.h||src/module/reference_handle.h": [
      "File: src/module/reference_handle.h -> src/module/reference_handle.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: class ReferenceData {",
      "16:  public:",
      "17:   enum class TypeOf { Null, Undefined, Number, String, Boolean, Object, Function };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  friend class AccessorRunner;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41: class ReferenceHandle : public TransferableHandle, public detail::ReferenceData {",
      "42:  friend class ApplyRunner;",
      "43:  friend class CopyRunner;",
      "44:  friend class GetRunner;",
      "47:  public:",
      "48:   using TypeOf = detail::ReferenceData::TypeOf;",
      "",
      "[Removed Lines]",
      "45:  friend class DeleteRunner;",
      "46:  friend class SetRunner;",
      "",
      "[Added Lines]",
      "45:  friend class AccessorRunner;",
      "",
      "---------------"
    ],
    "tests/reference.js||tests/reference.js": [
      "File: tests/reference.js -> tests/reference.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const ivm = require('isolated-vm');",
      "9: {",
      "14: }",
      "15: {",
      "20: }",
      "22: console.log('pass');",
      "",
      "[Removed Lines]",
      "2: const { strictEqual } = require('assert');",
      "4: const foo = { foo: 1 };",
      "5: const bar = Object.create(foo);",
      "6: bar.bar = 2;",
      "7: const etc = Object.create(bar);",
      "8: etc.etc = bar;",
      "10:  const ref = new ivm.Reference(etc);",
      "11:  strictEqual(ref.getSync('bar'), undefined);",
      "12:  strictEqual(ref.getSync('etc').getSync('foo'), undefined);",
      "13:  strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "16:  const ref = new ivm.Reference(etc, { inheritUnsafe: true });",
      "17:  strictEqual(ref.getSync('bar'), 2);",
      "18:  strictEqual(ref.getSync('etc').getSync('foo'), 1);",
      "19:  strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "",
      "[Added Lines]",
      "1: 'use strict';",
      "3: const { strictEqual, throws } = require('assert');",
      "4: let trap = false;",
      "8:  const foo = { foo: 1 };",
      "9:  const bar = Object.create(foo);",
      "10:  bar.bar = 2;",
      "11:  const etc = Object.create(bar);",
      "12:  etc.etc = bar;",
      "14:  {",
      "16:   const ref = new ivm.Reference(etc);",
      "17:   strictEqual(ref.getSync('bar'), undefined);",
      "18:   strictEqual(ref.getSync('etc').getSync('foo'), undefined);",
      "19:   strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "20:   ref.setSync('prop', 1);",
      "21:   strictEqual(ref.getSync('prop'), 1);",
      "22:   ref.deleteSync('prop');",
      "23:   strictEqual(ref.getSync('prop'), undefined);",
      "24:  }",
      "26:  {",
      "28:   const ref = new ivm.Reference(etc, { unsafeInherit: true });",
      "29:   strictEqual(ref.getSync('bar'), 2);",
      "30:   strictEqual(ref.getSync('etc').getSync('foo'), 1);",
      "31:   strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "32:   ref.getSync('etc').setSync('prop', 1);",
      "33:   ref.setSync('prop', 2);",
      "34:   strictEqual(ref.getSync('prop'), 2);",
      "35:   ref.deleteSync('prop');",
      "36:   strictEqual(ref.getSync('prop'), 1);",
      "37:  }",
      "38: }",
      "40: {",
      "42:  let setter = 0;",
      "43:  const foo = {",
      "44:   get str() { trap = true; return 'got' },",
      "45:   set str(_) { trap = true },",
      "46:  };",
      "47:  Object.defineProperty(foo, 0, {",
      "48:   get() { trap = true; return 'got' },",
      "49:   set() { trap = true },",
      "50:  });",
      "52:  {",
      "54:   const ref = new ivm.Reference(foo);",
      "55:   throws(() => ref.getSync('str'));",
      "56:   throws(() => ref.getSync(0));",
      "57:   throws(() => ref.setSync(0, undefined));",
      "58:  }",
      "60:  {",
      "62:   const ref = new ivm.Reference(Object.create(foo), { unsafeInherit: true });",
      "63:   throws(() => ref.getSync('str'));",
      "64:   ref.setSync('str', undefined);",
      "65:   throws(() => ref.getSync(0));",
      "66:  }",
      "67: }",
      "69: {",
      "71:  const val = { prop: 1 };",
      "72:  const prox = new Proxy(val, {",
      "73:   get() { trap = true },",
      "74:     set() { trap = true },",
      "75:     getOwnPropertyDescriptor() { trap = true },",
      "76:     getPrototypeOf() { trap = true },",
      "77:     has() { trap = true },",
      "78:     ownKeys() { trap = true },",
      "79:  });",
      "80:  const inherited = Object.create(prox);",
      "82:  {",
      "84:   const ref = new ivm.Reference(prox);",
      "85:   throws(() => ref.getSync('prop'));",
      "86:  }",
      "88:  {",
      "90:   const ref = new ivm.Reference(inherited);",
      "91:   throws(() => ref.getSync('prop'),);",
      "92:  }",
      "94:  {",
      "96:   const ref = new ivm.Reference(inherited, { unsafeInherit: true });",
      "97:   throws(() => ref.getSync('prop'));",
      "98:  }",
      "103:  const val = [ 1, 2, 3 ];",
      "104:  Object.defineProperty(val, 1, { get() { trap = true; return 'got' }});",
      "105:  const ref = new ivm.Reference(val);",
      "106:  strictEqual(ref.getSync(0), 1);",
      "107:  throws(() => ref.getSync(1));",
      "110: {",
      "112:  const val = new Uint8Array([ 1, 2, 3 ]);",
      "113:  const ref = new ivm.Reference(val);",
      "114:  strictEqual(ref.getSync(0), 1);",
      "115: }",
      "117: if (trap) {",
      "118:  console.log('fail');",
      "119: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2bc3d7933a77b5e6191e38bd295617fe7ff2d30b",
      "candidate_info": {
        "commit_hash": "2bc3d7933a77b5e6191e38bd295617fe7ff2d30b",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/2bc3d7933a77b5e6191e38bd295617fe7ff2d30b",
        "files": [
          "isolated-vm.d.ts"
        ],
        "message": "Fix TypeScript {reference:true} defaults",
        "before_after_code_files": [
          "isolated-vm.d.ts||isolated-vm.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "isolated-vm.d.ts||isolated-vm.d.ts"
          ],
          "candidate": [
            "isolated-vm.d.ts||isolated-vm.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "isolated-vm.d.ts||isolated-vm.d.ts": [
          "File: isolated-vm.d.ts -> isolated-vm.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:   get<Options extends TransferOptions, Key extends keyof T>(",
          "352:   getSync<Options extends TransferOptions, Key extends keyof T>(",
          "",
          "[Removed Lines]",
          "351:    property: Key, options?: Options): ResultTypeAsync<Options, T[Key]>;",
          "353:    property: Key, options?: Options): ResultTypeSync<Options, T[Key]>;",
          "",
          "[Added Lines]",
          "351:    property: Key, options?: Options): ResultTypeAsync<Options & AsReference, T[Key]>;",
          "353:    property: Key, options?: Options): ResultTypeSync<Options & AsReference, T[Key]>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "376:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "377:    options?: Options",
          "379:   applyIgnored<Options extends ReferenceApplyOptions>(",
          "380:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "382:    options?: Options",
          "383:   ): void;",
          "384:   applySync<Options extends ReferenceApplyOptions>(",
          "385:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "386:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "387:    options?: Options",
          "",
          "[Removed Lines]",
          "378:   ): ResultTypeBidirectionalAsync<Options, ApplyResult<T>>;",
          "381:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "388:   ): ResultTypeBidirectionalSync<Options, ApplyResult<T>>;",
          "",
          "[Added Lines]",
          "378:   ): ResultTypeBidirectionalAsync<Options & ApplyAsReference, ApplyResult<T>>;",
          "381:    arguments?: ArgumentsTypeBidirectional<Options & ApplyAsReference, ApplyArguments<T>>,",
          "388:   ): ResultTypeBidirectionalSync<Options & ApplyAsReference, ApplyResult<T>>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "402:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "403:    options?: Options",
          "405:  }",
          "",
          "[Removed Lines]",
          "404:   ): ResultTypeBidirectionalSync<Options, ApplyResult<T>>;",
          "",
          "[Added Lines]",
          "404:   ): ResultTypeBidirectionalSync<Options & ApplyAsReference, ApplyResult<T>>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "656:  type AsCopy = { copy: true };",
          "657:  type AsExternal = { externalCopy: true };",
          "658:  type AsReference = { reference: true };",
          "659:  type WithTransfer = AsCopy | AsExternal | AsReference;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:  type ApplyAsReference = { result: AsReference };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc5331222b97f33d9fc7d7970785991489063e6a",
      "candidate_info": {
        "commit_hash": "dc5331222b97f33d9fc7d7970785991489063e6a",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/dc5331222b97f33d9fc7d7970785991489063e6a",
        "files": [
          "src/isolate/class_handle.h",
          "src/module/isolate.cc",
          "src/module/module_handle.h",
          "src/module/script_handle.h",
          "tests/immutable.js",
          "tests/reference.js"
        ],
        "message": "Freeze ivm object prototypes",
        "before_after_code_files": [
          "src/isolate/class_handle.h||src/isolate/class_handle.h",
          "src/module/isolate.cc||src/module/isolate.cc",
          "src/module/module_handle.h||src/module/module_handle.h",
          "src/module/script_handle.h||src/module/script_handle.h",
          "tests/immutable.js||tests/immutable.js",
          "tests/reference.js||tests/reference.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/reference.js||tests/reference.js"
          ],
          "candidate": [
            "tests/reference.js||tests/reference.js"
          ]
        }
      },
      "candidate_diff": {
        "src/isolate/class_handle.h||src/isolate/class_handle.h": [
          "File: src/isolate/class_handle.h -> src/isolate/class_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  template <class Type>",
          "32:  IsolateSpecific<v8::FunctionTemplate> TemplateHolder<Type>::specific;",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  template<class Type, class = void>",
          "35:  struct DontFreezeInstance:std::false_type{};",
          "37:  template<class Type>",
          "38:  struct DontFreezeInstance<Type, typename Type::DontFreezeInstance>: std::true_type {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     name_handle, {}, New.length",
          "153:    );",
          "154:    tmpl->SetClassName(name_handle);",
          "158:    v8::Local<v8::Signature> sig = v8::Signature::New(isolate, tmpl);",
          "159:    v8::Local<v8::AccessorSignature> asig = v8::AccessorSignature::New(isolate, tmpl);",
          "160:    TemplateDefinition def{isolate, tmpl, proto, sig, asig};",
          "",
          "[Removed Lines]",
          "155:    tmpl->InstanceTemplate()->SetInternalFieldCount(1);",
          "157:    v8::Local<v8::ObjectTemplate> proto = tmpl->PrototypeTemplate();",
          "",
          "[Added Lines]",
          "162:    auto instance_tmpl = tmpl->InstanceTemplate();",
          "163:    instance_tmpl->SetImmutableProto();",
          "164:    instance_tmpl->SetInternalFieldCount(1);",
          "166:    auto proto = tmpl->PrototypeTemplate();",
          "167:    proto->SetImmutableProto();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:    });",
          "203:   }",
          "208:   template <typename T, typename ...Args>",
          "209:   static auto NewInstance(Args&&... args) -> v8::Local<v8::Object> {",
          "211:    Wrap(std::make_unique<T>(std::forward<Args>(args)...), instance);",
          "212:    return instance;",
          "213:   }",
          "",
          "[Removed Lines]",
          "210:    v8::Local<v8::Object> instance = Unmaybe(GetFunctionTemplate<T>()->InstanceTemplate()->NewInstance(v8::Isolate::GetCurrent()->GetCurrentContext()));",
          "",
          "[Added Lines]",
          "218:   template <class Type>",
          "219:   static auto MaybeFreeze(v8::Local<v8::Object> handle) {",
          "220:    auto context = handle->GetIsolate()->GetCurrentContext();",
          "221:    handle->GetPrototype().As<v8::Object>()->SetIntegrityLevel(context, v8::IntegrityLevel::kFrozen);",
          "222:    if (!detail::DontFreezeInstance<Type>::value) {",
          "223:     handle->SetIntegrityLevel(context, v8::IntegrityLevel::kFrozen);",
          "224:    }",
          "225:   }",
          "232:    auto context = v8::Isolate::GetCurrent()->GetCurrentContext();",
          "233:    v8::Local<v8::Object> instance = Unmaybe(GetFunctionTemplate<T>()->InstanceTemplate()->NewInstance(context));",
          "234:    MaybeFreeze<T>(instance);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:   auto instance = Function(args...);",
          "269:   if (instance) {",
          "270:    v8::Local<v8::Object> handle = This.As<v8::Object>();",
          "271:    ClassHandle::Wrap(std::move(instance), handle);",
          "272:    return handle;",
          "273:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:    ClassHandle::MaybeFreeze<typename decltype(instance)::element_type>(handle);",
          "",
          "---------------"
        ],
        "src/module/isolate.cc||src/module/isolate.cc": [
          "File: src/module/isolate.cc -> src/module/isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   };",
          "35:  public:",
          "36:   static auto Definition() -> Local<FunctionTemplate> {",
          "37:    return Inherit<TransferableHandle>(MakeClass(",
          "38:     \"isolated_vm\", nullptr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   using DontFreezeInstance = void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   static auto Get() -> Local<Object> {",
          "54:    Local<Object> library = ClassHandle::NewInstance<LibraryHandle>().As<Object>();",
          "56:    return library;",
          "57:   }",
          "58: };",
          "",
          "[Removed Lines]",
          "55:    Unmaybe(library->Set(Isolate::GetCurrent()->GetCurrentContext(), v8_symbol(\"lib\"), ClassHandle::NewInstance<LibHandle>()));",
          "",
          "[Added Lines]",
          "57:    auto context = Isolate::GetCurrent()->GetCurrentContext();",
          "58:    Unmaybe(library->Set(context, v8_symbol(\"lib\"), ClassHandle::NewInstance<LibHandle>()));",
          "61:    auto prototype = HandleCast<Local<String>>(\"prototype\");",
          "62:    auto freeze = [&](const char* name) {",
          "63:     auto fn = Unmaybe(library->Get(context, HandleCast<Local<String>>(name))).As<Function>();",
          "64:     auto proto = Unmaybe(fn->Get(context, prototype)).As<Object>();",
          "65:     proto->SetIntegrityLevel(context, IntegrityLevel::kFrozen);",
          "66:    };",
          "67:    freeze(\"Callback\");",
          "68:    freeze(\"Context\");",
          "69:    freeze(\"ExternalCopy\");",
          "70:    freeze(\"Isolate\");",
          "71:    freeze(\"NativeModule\");",
          "72:    freeze(\"Reference\");",
          "73:    freeze(\"Script\");",
          "76:    library->SetIntegrityLevel(context, IntegrityLevel::kFrozen);",
          "77:    library->GetPrototype().As<Object>()->SetIntegrityLevel(context, IntegrityLevel::kFrozen);",
          "",
          "---------------"
        ],
        "src/module/module_handle.h||src/module/module_handle.h": [
          "File: src/module/module_handle.h -> src/module/module_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   std::shared_ptr<ModuleInfo> info;",
          "44:  public:",
          "45:   explicit ModuleHandle(std::shared_ptr<ModuleInfo> info);",
          "47:   static auto Definition() -> v8::Local<v8::FunctionTemplate>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   using DontFreezeInstance = void;",
          "",
          "---------------"
        ],
        "src/module/script_handle.h||src/module/script_handle.h": [
          "File: src/module/script_handle.h -> src/module/script_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: class ScriptHandle : public TransferableHandle {",
          "13:  public:",
          "14:   explicit ScriptHandle(RemoteHandle<v8::UnboundScript> script);",
          "15:   static auto Definition() -> v8::Local<v8::FunctionTemplate>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   using DontFreezeInstance = void;",
          "",
          "---------------"
        ],
        "tests/immutable.js||tests/immutable.js": [
          "File: tests/immutable.js -> tests/immutable.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const ivm = require('isolated-vm');",
          "2: const { strictEqual, throws } = require('assert');",
          "4: ivm.ExternalCopy = () => {};",
          "5: Object.getPrototypeOf(ivm).ExternalCopy = () => {};",
          "7: {",
          "8:  ivm.ExternalCopy.prototype.copy = 1;",
          "9:  const ref = new ivm.ExternalCopy(1);",
          "10:  throws(() => Object.setPrototypeOf(ref, {}));",
          "11:  strictEqual(ref.copy(), 1);",
          "12:  strictEqual(Object.getPrototypeOf(ref), ivm.ExternalCopy.prototype);",
          "13: }",
          "15: {",
          "16:  const isolate = new ivm.Isolate;",
          "17:  const context = isolate.createContextSync();",
          "18:  const result = context.evalClosureSync(`",
          "19:   $0.__proto__.copy = 1;",
          "20:   return $0.copy();",
          "21:  `, [ new ivm.ExternalCopy(1) ]);",
          "22:  strictEqual(result, 1);",
          "23: }",
          "25: {",
          "26:  const isolate = new ivm.Isolate;",
          "27:  const context = isolate.createContextSync();",
          "28:  const result = context.evalClosureSync(`",
          "29:   $0.ExternalCopy = () => {};",
          "30:   $0.__proto__.ExternalCopy = () => {};",
          "31:   return new $0.ExternalCopy(1).copy();",
          "32:  `, [ ivm ]);",
          "33:  strictEqual(result, 1);",
          "34: }",
          "36: console.log('pass');",
          "",
          "---------------"
        ],
        "tests/reference.js||tests/reference.js": [
          "File: tests/reference.js -> tests/reference.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const ivm = require('isolated-vm');",
          "2: const { strictEqual } = require('assert');",
          "4: const foo = { foo: 1 };",
          "5: const bar = Object.create(foo);",
          "6: bar.bar = 2;",
          "7: const etc = Object.create(bar);",
          "8: etc.etc = bar;",
          "9: {",
          "10:  const ref = new ivm.Reference(etc);",
          "11:  strictEqual(ref.getSync('bar'), undefined);",
          "12:  strictEqual(ref.getSync('etc').getSync('foo'), undefined);",
          "13:  strictEqual(ref.getSync('etc').getSync('bar'), 2);",
          "14: }",
          "15: {",
          "16:  const ref = new ivm.Reference(etc, { inheritUnsafe: true });",
          "17:  strictEqual(ref.getSync('bar'), 2);",
          "18:  strictEqual(ref.getSync('etc').getSync('foo'), 1);",
          "19:  strictEqual(ref.getSync('etc').getSync('bar'), 2);",
          "20: }",
          "22: console.log('pass');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "506a7f9621f361e2732fb76eb1ae48fd3d0e8cd3",
      "candidate_info": {
        "commit_hash": "506a7f9621f361e2732fb76eb1ae48fd3d0e8cd3",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/506a7f9621f361e2732fb76eb1ae48fd3d0e8cd3",
        "files": [
          "isolated-vm.d.ts"
        ],
        "message": "Default TypeScript generics for Reference and ExternalCopy",
        "before_after_code_files": [
          "isolated-vm.d.ts||isolated-vm.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "isolated-vm.d.ts||isolated-vm.d.ts"
          ],
          "candidate": [
            "isolated-vm.d.ts||isolated-vm.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "isolated-vm.d.ts||isolated-vm.d.ts": [
          "File: isolated-vm.d.ts -> isolated-vm.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   private __ivm_reference: undefined;",
          "295:   constructor(value: T);",
          "",
          "[Removed Lines]",
          "293:  export class Reference<T> {",
          "",
          "[Added Lines]",
          "293:  export class Reference<T = any> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:   private __ivm_external_copy: undefined;",
          "",
          "[Removed Lines]",
          "400:  export class ExternalCopy<T> {",
          "",
          "[Added Lines]",
          "400:  export class ExternalCopy<T = any> {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "190aad7dc38f77fae5d847d91944ea25d95d8b38",
      "candidate_info": {
        "commit_hash": "190aad7dc38f77fae5d847d91944ea25d95d8b38",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/190aad7dc38f77fae5d847d91944ea25d95d8b38",
        "files": [
          "README.md",
          "isolated-vm.d.ts",
          "src/module/reference_handle.cc",
          "src/module/reference_handle.h"
        ],
        "message": "`delete` family of functions on `Reference`",
        "before_after_code_files": [
          "isolated-vm.d.ts||isolated-vm.d.ts",
          "src/module/reference_handle.cc||src/module/reference_handle.cc",
          "src/module/reference_handle.h||src/module/reference_handle.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "isolated-vm.d.ts||isolated-vm.d.ts",
            "src/module/reference_handle.cc||src/module/reference_handle.cc",
            "src/module/reference_handle.h||src/module/reference_handle.h"
          ],
          "candidate": [
            "isolated-vm.d.ts||isolated-vm.d.ts",
            "src/module/reference_handle.cc||src/module/reference_handle.cc",
            "src/module/reference_handle.h||src/module/reference_handle.h"
          ]
        }
      },
      "candidate_diff": {
        "isolated-vm.d.ts||isolated-vm.d.ts": [
          "File: isolated-vm.d.ts -> isolated-vm.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   release(): void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:    delete(property: string): Promise<boolean>;",
          "343:    deleteIgnored(property: string): void;",
          "344:    deleteSync(property: string): boolean;",
          "",
          "---------------"
        ],
        "src/module/reference_handle.cc||src/module/reference_handle.cc": [
          "File: src/module/reference_handle.cc -> src/module/reference_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   \"release\", MemberFunction<decltype(&ReferenceHandle::Release), &ReferenceHandle::Release>{},",
          "108:   \"copy\", MemberFunction<decltype(&ReferenceHandle::Copy<1>), &ReferenceHandle::Copy<1>>{},",
          "109:   \"copySync\", MemberFunction<decltype(&ReferenceHandle::Copy<0>), &ReferenceHandle::Copy<0>>{},",
          "110:   \"get\", MemberFunction<decltype(&ReferenceHandle::Get<1>), &ReferenceHandle::Get<1>>{},",
          "111:   \"getSync\", MemberFunction<decltype(&ReferenceHandle::Get<0>), &ReferenceHandle::Get<0>>{},",
          "112:   \"set\", MemberFunction<decltype(&ReferenceHandle::Set<1>), &ReferenceHandle::Set<1>>{},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:   \"delete\", MemberFunction<decltype(&ReferenceHandle::Delete<1>), &ReferenceHandle::Delete<1>>{},",
          "111:   \"deleteIgnored\", MemberFunction<decltype(&ReferenceHandle::Delete<2>), &ReferenceHandle::Delete<2>>{},",
          "112:   \"deleteSync\", MemberFunction<decltype(&ReferenceHandle::Delete<0>), &ReferenceHandle::Delete<0>>{},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options);",
          "464: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472: class DeleteRunner : public ThreePhaseTask {",
          "473:  public:",
          "474:   DeleteRunner(ReferenceHandle& that, Local<Value> key_handle) :",
          "475:     key{ExternalCopy::CopyIfPrimitive(key_handle)},",
          "476:     context{that.context},",
          "477:     reference{that.reference} {",
          "478:    that.CheckDisposed();",
          "479:    if (!key) {",
          "480:     throw RuntimeTypeError(\"Invalid `key`\");",
          "481:    }",
          "482:   }",
          "484:   void Phase2() final {",
          "485:    Local<Context> context_handle = Deref(context);",
          "486:    Context::Scope context_scope{context_handle};",
          "487:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
          "488:    result = Unmaybe(object->Delete(context_handle, key->CopyInto()));",
          "489:   }",
          "491:   auto Phase3() -> Local<Value> final {",
          "492:    return Boolean::New(Isolate::GetCurrent(), result);",
          "493:   }",
          "495:  private:",
          "496:   unique_ptr<ExternalCopy> key;",
          "497:   RemoteHandle<Context> context;",
          "498:   RemoteHandle<Value> reference;",
          "499:   bool result = false;",
          "500: };",
          "501: template <int async>",
          "502: auto ReferenceHandle::Delete(Local<Value> key_handle) -> Local<Value> {",
          "503:  return ThreePhaseTask::Run<async, DeleteRunner>(*isolate, *this, key_handle);",
          "504: }",
          "",
          "---------------"
        ],
        "src/module/reference_handle.h||src/module/reference_handle.h": [
          "File: src/module/reference_handle.h -> src/module/reference_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  friend class ApplyRunner;",
          "42:  friend class CopyRunner;",
          "43:  friend class GetRunner;",
          "44:  friend class SetRunner;",
          "45:  public:",
          "46:   using TypeOf = detail::ReferenceData::TypeOf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  friend class DeleteRunner;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:    v8::Maybe<ArrayRange> maybe_arguments,",
          "64:    v8::MaybeLocal<v8::Object> maybe_options",
          "65:   ) -> v8::Local<v8::Value>;",
          "66:   template <int async>",
          "67:   auto Copy() -> v8::Local<v8::Value>;",
          "68:   template <int async>",
          "69:   auto Get(",
          "70:    v8::Local<v8::Value> key_handle,",
          "71:    v8::MaybeLocal<v8::Object> maybe_options",
          "72:   ) -> v8::Local<v8::Value>;",
          "73:   template <int async>",
          "74:   auto Set(",
          "75:    v8::Local<v8::Value> key_handle,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:   template <int async>",
          "78:   auto Delete(v8::Local<v8::Value> key_handle) -> v8::Local<v8::Value>;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc7c1c5592b26dee8a0a6d19727b489709b02ea7",
      "candidate_info": {
        "commit_hash": "bc7c1c5592b26dee8a0a6d19727b489709b02ea7",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/bc7c1c5592b26dee8a0a6d19727b489709b02ea7",
        "files": [
          "isolated-vm.d.ts"
        ],
        "message": "Richer TypeScript information in Reference",
        "before_after_code_files": [
          "isolated-vm.d.ts||isolated-vm.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "isolated-vm.d.ts||isolated-vm.d.ts"
          ],
          "candidate": [
            "isolated-vm.d.ts||isolated-vm.d.ts"
          ]
        }
      },
      "candidate_diff": {
        "isolated-vm.d.ts||isolated-vm.d.ts": [
          "File: isolated-vm.d.ts -> isolated-vm.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "173:   readonly global: Reference<Object>;",
          "",
          "[Added Lines]",
          "173:   readonly global: Reference<Record<number | string | symbol, any>>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:   evalClosure<Options extends ContextEvalClosureOptions>(",
          "194:   ): Promise<ContextEvalResult<ResultTypeBidirectionalSync<Options>>>; // `ResultTypeBidirectionalSync` used intentionally",
          "195:   evalClosureIgnored<Options extends ContextEvalClosureOptions>(",
          "197:   ): void",
          "198:   evalClosureSync<Options extends ContextEvalClosureOptions>(",
          "200:   ): ContextEvalResult<ResultTypeBidirectionalSync<Options>>;",
          "",
          "[Removed Lines]",
          "193:    code: string, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "196:    code: string, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "199:    code: string, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "",
          "[Added Lines]",
          "193:    code: string, arguments?: ArgumentsTypeBidirectional<Options>, options?: Options",
          "196:    code: string, arguments?: ArgumentsTypeBidirectional<Options>, options?: Options",
          "199:    code: string, arguments?: ArgumentsTypeBidirectional<Options>, options?: Options",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "343:    delete(property: string): Promise<boolean>;",
          "344:    deleteIgnored(property: string): void;",
          "345:    deleteSync(property: string): boolean;",
          "350:   get<Options extends TransferOptions>(property: string, options?: Options): ResultTypeAsync<Options>;",
          "351:   getSync<Options extends TransferOptions>(property: string, options?: Options): ResultTypeSync<Options>;",
          "",
          "[Added Lines]",
          "343:    delete(property: keyof T): Promise<boolean>;",
          "344:    deleteIgnored(property: keyof T): void;",
          "345:    deleteSync(property: keyof T): boolean;",
          "350:   get<Options extends TransferOptions, Key extends keyof T>(",
          "351:    property: Key, options?: Options): ResultTypeAsync<Options, T[Key]>;",
          "352:   getSync<Options extends TransferOptions, Key extends keyof T>(",
          "353:    property: Key, options?: Options): ResultTypeSync<Options, T[Key]>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "360:   set<Options extends TransferOptions>(property: string, value: ArgumentsType<Options>, options?: Options): Promise<boolean>;",
          "361:   setIgnored<Options extends TransferOptions>(property: string, value: ArgumentsType<Options>, options?: Options): void;",
          "362:   setSync<Options extends TransferOptions>(property: string, value: ArgumentsType<Options>, options?: Options): boolean;",
          "",
          "[Added Lines]",
          "362:   set<Options extends TransferOptions, Key extends keyof T>(",
          "363:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): Promise<boolean>;",
          "364:   setIgnored<Options extends TransferOptions, Key extends keyof T>(",
          "365:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): void;",
          "366:   setSync<Options extends TransferOptions, Key extends keyof T>(",
          "367:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): boolean;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:   apply<Options extends ReferenceApplyOptions>(",
          "372:   applyIgnored<Options extends ReferenceApplyOptions>(",
          "374:   ): void;",
          "375:   applySync<Options extends ReferenceApplyOptions>(",
          "",
          "[Removed Lines]",
          "370:    receiver?: Transferable, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "371:   ): ResultTypeBidirectionalAsync<Options>;",
          "373:    receiver?: Transferable, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "376:    receiver?: Transferable, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "377:   ): ResultTypeBidirectionalSync<Options>;",
          "",
          "[Added Lines]",
          "375:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "376:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "377:    options?: Options",
          "378:   ): ResultTypeBidirectionalAsync<Options, ApplyResult<T>>;",
          "380:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "381:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "382:    options?: Options",
          "385:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "386:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "387:    options?: Options",
          "388:   ): ResultTypeBidirectionalSync<Options, ApplyResult<T>>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "389:   applySyncPromise<Options extends ReferenceApplyOptions>(",
          "392:  }",
          "",
          "[Removed Lines]",
          "390:    receiver?: Transferable, arguments?: ArgumentsTypeBidirectional<Options>[], options?: Options",
          "391:   ): ResultTypeBidirectionalSync<Options>;",
          "",
          "[Added Lines]",
          "401:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
          "402:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
          "403:    options?: Options",
          "404:   ): ResultTypeBidirectionalSync<Options, ApplyResult<T>>;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "645:  type AsReference = { reference: true };",
          "646:  type WithTransfer = AsCopy | AsExternal | AsReference;",
          "659:   Transferable;",
          "674: }",
          "",
          "[Removed Lines]",
          "649:  type ArgumentsType<Options extends TransferOptions> =",
          "650:   Options extends WithTransfer ?",
          "651:    Options extends WithPromise ? Promise<any> : any :",
          "652:   Options extends WithPromise ? Promise<Transferable> : Transferable;",
          "655:  type ResultTypeBase<Options extends TransferOptions> =",
          "656:   Options extends AsCopy ? any :",
          "657:   Options extends AsExternal ? ExternalCopy<any> :",
          "658:   Options extends AsReference ? Reference<any> :",
          "660:  type ResultTypeAsync<Options extends TransferOptions> = Promise<ResultTypeBase<Options>>;",
          "661:  type ResultTypeSync<Options extends TransferOptions> =",
          "662:   Options extends WithPromise ? Promise<ResultTypeBase<Options>> : ResultTypeBase<Options>;",
          "665:  type ArgumentsTypeBidirectional<Options extends TransferOptionsBidirectional> =",
          "666:   ArgumentsType<Options['arguments'] extends TransferOptions ? Options['arguments'] : {}>;",
          "669:  type ResultTypeBidirectionalBase<Options extends TransferOptionsBidirectional> =",
          "670:   ResultTypeBase<Options['result'] extends TransferOptions ? Options['result'] : {}>;",
          "671:  type ResultTypeBidirectionalAsync<Options extends TransferOptionsBidirectional> = Promise<ResultTypeBidirectionalBase<Options>>;",
          "672:  type ResultTypeBidirectionalSync<Options extends TransferOptionsBidirectional> =",
          "673:   Options['result'] extends WithPromise ? Promise<ResultTypeBidirectionalBase<Options>> : ResultTypeBidirectionalBase<Options>;",
          "",
          "[Added Lines]",
          "662:  type CheckPromise<Options, Result> = Options extends WithPromise ? Promise<Result> : Result;",
          "665:  type ArgumentType<Options, Type> =",
          "666:   Options extends WithTransfer ? Type | CheckPromise<Options, Type> :",
          "667:   Type extends Transferable ? Type | CheckPromise<Options, Type> :",
          "668:   Transferable | CheckPromise<Options, Transferable>;",
          "671:  type ResultTypeBase<Options, Result> =",
          "672:   Options extends AsCopy ? Result :",
          "673:   Options extends AsExternal ? ExternalCopy<Result> :",
          "674:   Options extends AsReference ? Reference<Result> :",
          "675:   Result extends Transferable ? Result :",
          "676:   Result extends void ? void :",
          "678:  type ResultTypeAsync<Options extends TransferOptions, Result = any> = Promise<ResultTypeBase<Options, Result>>;",
          "679:  type ResultTypeSync<Options extends TransferOptions, Result = any> = CheckPromise<Options, ResultTypeBase<Options, Result>>;",
          "682:  type ArgumentsTypeBidirectional<Options extends TransferOptionsBidirectional, Args extends any[] = any[]> = {",
          "683:   [Key in keyof Args]: ArgumentType<Options['arguments'] extends TransferOptions ? Options['arguments'] : {}, Args[Key]>",
          "684:  };",
          "687:  type ResultTypeBidirectionalBase<Options extends TransferOptionsBidirectional, Result> =",
          "688:   ResultTypeBase<Options['result'] extends TransferOptions ? Options['result'] : {}, Result>;",
          "689:  type ResultTypeBidirectionalAsync<Options extends TransferOptionsBidirectional, Result = any> =",
          "690:   Promise<ResultTypeBidirectionalBase<Options, Result>>;",
          "691:  type ResultTypeBidirectionalSync<Options extends TransferOptionsBidirectional, Result = any> =",
          "692:   CheckPromise<Options['result'], ResultTypeBidirectionalBase<Options, Result>>;",
          "695:  type ApplyArguments<Value> = Value extends (...args: infer Args) => unknown ? Args : any[];",
          "696:  type ApplyArgumentThis<Value> = Value extends (this: infer This, ...args: unknown[]) => unknown ? This : never;",
          "697:  type ApplyResult<Value> = Value extends (...args: unknown[]) => infer Result ? Result : unknown;",
          "",
          "---------------"
        ]
      }
    }
  ]
}