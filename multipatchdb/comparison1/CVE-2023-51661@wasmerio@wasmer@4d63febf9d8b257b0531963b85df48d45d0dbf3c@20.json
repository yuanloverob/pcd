{
  "cve_id": "CVE-2023-51661",
  "cve_desc": "Wasmer is a WebAssembly runtime that enables containers to run anywhere: from Desktop to the Cloud, Edge and even the browser. Wasm programs can access the filesystem outside of the sandbox. Service providers running untrusted Wasm code on Wasmer can unexpectedly expose the host filesystem. This vulnerability has been patched in version 4.2.4.",
  "repo": "wasmerio/wasmer",
  "patch_hash": "4d63febf9d8b257b0531963b85df48d45d0dbf3c",
  "patch_info": {
    "commit_hash": "4d63febf9d8b257b0531963b85df48d45d0dbf3c",
    "repo": "wasmerio/wasmer",
    "commit_url": "https://github.com/wasmerio/wasmer/commit/4d63febf9d8b257b0531963b85df48d45d0dbf3c",
    "files": [
      "CHANGELOG.md",
      "Cargo.lock",
      "Cargo.toml",
      "lib/api/Cargo.toml",
      "lib/api/macro-wasmer-universal-test/Cargo.toml",
      "lib/c-api/Cargo.toml",
      "lib/c-api/examples/wasmer-capi-examples-runner/Cargo.toml",
      "lib/c-api/tests/wasmer-c-api-test-runner/Cargo.toml",
      "lib/cache/Cargo.toml",
      "lib/cli-compiler/Cargo.toml",
      "lib/cli/Cargo.toml",
      "lib/compiler-cranelift/Cargo.toml",
      "lib/compiler-llvm/Cargo.toml",
      "lib/compiler-singlepass/Cargo.toml",
      "lib/compiler/Cargo.toml",
      "lib/emscripten/Cargo.toml",
      "lib/middlewares/Cargo.toml",
      "lib/object/Cargo.toml",
      "lib/registry/Cargo.toml",
      "lib/sys-utils/Cargo.toml",
      "lib/virtual-fs/Cargo.toml",
      "lib/vm/Cargo.toml",
      "lib/wai-bindgen-wasmer/Cargo.toml",
      "lib/wasi-experimental-io-devices/Cargo.toml",
      "lib/wasi-types/Cargo.toml",
      "lib/wasi-web/Cargo.lock",
      "lib/wasi-web/Cargo.toml",
      "lib/wasix/Cargo.toml",
      "scripts/update-version.py",
      "scripts/windows-installer/wasmer.iss",
      "tests/integration/cli/Cargo.toml",
      "tests/integration/ios/Cargo.toml",
      "tests/lib/wast/Cargo.toml",
      "tests/wasi-wast/Cargo.toml"
    ],
    "message": "Release 4.2.4 (#4337)",
    "before_after_code_files": [
      "Cargo.lock||Cargo.lock",
      "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock",
      "scripts/update-version.py||scripts/update-version.py",
      "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
    ]
  },
  "patch_diff": {
    "Cargo.lock||Cargo.lock": [
      "File: Cargo.lock -> Cargo.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "2526: [[package]]",
      "2527: name = \"macro-wasmer-universal-test\"",
      "2529: dependencies = [",
      "2530:  \"proc-macro2\",",
      "2531:  \"proc-quote\",",
      "",
      "[Removed Lines]",
      "2528: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2528: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5140: [[package]]",
      "5141: name = \"virtual-fs\"",
      "5143: dependencies = [",
      "5144:  \"anyhow\",",
      "5145:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "5142: version = \"0.9.0\"",
      "",
      "[Added Lines]",
      "5142: version = \"0.10.0\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5327: [[package]]",
      "5328: name = \"wai-bindgen-wasmer\"",
      "5330: dependencies = [",
      "5331:  \"anyhow\",",
      "5332:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "5329: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "5329: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5406: [[package]]",
      "5407: name = \"wasi-test-generator\"",
      "5409: dependencies = [",
      "5410:  \"glob\",",
      "5411:  \"gumdrop\",",
      "",
      "[Removed Lines]",
      "5408: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5408: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5597: [[package]]",
      "5598: name = \"wasmer\"",
      "5600: dependencies = [",
      "5601:  \"anyhow\",",
      "5602:  \"bytes\",",
      "",
      "[Removed Lines]",
      "5599: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5599: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5672: [[package]]",
      "5673: name = \"wasmer-c-api\"",
      "5675: dependencies = [",
      "5676:  \"cbindgen\",",
      "5677:  \"cfg-if\",",
      "",
      "[Removed Lines]",
      "5674: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5674: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5701: [[package]]",
      "5702: name = \"wasmer-c-api-test-runner\"",
      "5704: dependencies = [",
      "5705:  \"cc\",",
      "5706:  \"regex\",",
      "",
      "[Removed Lines]",
      "5703: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5703: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5711: [[package]]",
      "5712: name = \"wasmer-cache\"",
      "5714: dependencies = [",
      "5715:  \"blake3\",",
      "5716:  \"criterion\",",
      "",
      "[Removed Lines]",
      "5713: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5713: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5725: [[package]]",
      "5726: name = \"wasmer-capi-examples-runner\"",
      "5728: dependencies = [",
      "5729:  \"cc\",",
      "5730:  \"regex\",",
      "",
      "[Removed Lines]",
      "5727: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5727: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5735: [[package]]",
      "5736: name = \"wasmer-cli\"",
      "5738: dependencies = [",
      "5739:  \"anyhow\",",
      "5740:  \"assert_cmd 2.0.12\",",
      "",
      "[Removed Lines]",
      "5737: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5737: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5798:  \"wasmer-edge-cli\",",
      "5799:  \"wasmer-emscripten\",",
      "5800:  \"wasmer-object\",",
      "5802:  \"wasmer-toml 0.9.2\",",
      "5803:  \"wasmer-types\",",
      "5804:  \"wasmer-vm\",",
      "",
      "[Removed Lines]",
      "5801:  \"wasmer-registry 5.9.0\",",
      "",
      "[Added Lines]",
      "5801:  \"wasmer-registry 5.10.0\",",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5811: [[package]]",
      "5812: name = \"wasmer-compiler\"",
      "5814: dependencies = [",
      "5815:  \"backtrace\",",
      "5816:  \"bytes\",",
      "",
      "[Removed Lines]",
      "5813: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5813: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5840: [[package]]",
      "5841: name = \"wasmer-compiler-cli\"",
      "5843: dependencies = [",
      "5844:  \"anyhow\",",
      "5845:  \"bytesize\",",
      "",
      "[Removed Lines]",
      "5842: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5842: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5861: [[package]]",
      "5862: name = \"wasmer-compiler-cranelift\"",
      "5864: dependencies = [",
      "5865:  \"cranelift-codegen\",",
      "5866:  \"cranelift-entity\",",
      "",
      "[Removed Lines]",
      "5863: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5863: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5880: [[package]]",
      "5881: name = \"wasmer-compiler-llvm\"",
      "5883: dependencies = [",
      "5884:  \"byteorder\",",
      "5885:  \"cc\",",
      "",
      "[Removed Lines]",
      "5882: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5882: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "5902: [[package]]",
      "5903: name = \"wasmer-compiler-singlepass\"",
      "5905: dependencies = [",
      "5906:  \"byteorder\",",
      "5907:  \"dynasm\",",
      "",
      "[Removed Lines]",
      "5904: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5904: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "5921: [[package]]",
      "5922: name = \"wasmer-derive\"",
      "5924: dependencies = [",
      "5925:  \"compiletest_rs\",",
      "5926:  \"proc-macro-error\",",
      "",
      "[Removed Lines]",
      "5923: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5923: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5965:  \"virtual-mio 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "5966:  \"virtual-net 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "5967:  \"wasmer-api\",",
      "5969:  \"wasmer-toml 0.9.2\",",
      "5970:  \"webc\",",
      "5971: ]",
      "5973: [[package]]",
      "5974: name = \"wasmer-emscripten\"",
      "5976: dependencies = [",
      "5977:  \"byteorder\",",
      "5978:  \"getrandom\",",
      "",
      "[Removed Lines]",
      "5968:  \"wasmer-registry 5.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "5975: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "5968:  \"wasmer-registry 5.9.0\",",
      "5975: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "6015: [[package]]",
      "6016: name = \"wasmer-integration-tests-cli\"",
      "6018: dependencies = [",
      "6019:  \"anyhow\",",
      "6020:  \"assert_cmd 2.0.12\",",
      "",
      "[Removed Lines]",
      "6017: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6017: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "6038:  \"target-lexicon 0.12.12\",",
      "6039:  \"tempfile\",",
      "6040:  \"tokio\",",
      "6042: ]",
      "6044: [[package]]",
      "6045: name = \"wasmer-integration-tests-ios\"",
      "6048: [[package]]",
      "6049: name = \"wasmer-middlewares\"",
      "6051: dependencies = [",
      "6052:  \"wasmer\",",
      "6053:  \"wasmer-types\",",
      "",
      "[Removed Lines]",
      "6041:  \"wasmer-registry 5.9.0\",",
      "6046: version = \"4.2.3\"",
      "6050: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6041:  \"wasmer-registry 5.10.0\",",
      "6046: version = \"4.2.4\"",
      "6050: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6057: [[package]]",
      "6058: name = \"wasmer-object\"",
      "6060: dependencies = [",
      "6061:  \"object 0.28.4\",",
      "6062:  \"thiserror\",",
      "",
      "[Removed Lines]",
      "6059: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6059: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6066: [[package]]",
      "6067: name = \"wasmer-registry\"",
      "6068: version = \"5.9.0\"",
      "6069: dependencies = [",
      "6070:  \"anyhow\",",
      "6072:  \"console\",",
      "6074:  \"dirs\",",
      "6075:  \"filetime\",",
      "6076:  \"flate2\",",
      "",
      "[Removed Lines]",
      "6071:  \"clap\",",
      "6073:  \"dialoguer 0.11.0\",",
      "",
      "[Added Lines]",
      "6069: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6070: checksum = \"0bb2ecfb16d793bfe1e2b98af07e6f344bd00ba0efea8e1b24737701d823a3ee\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6083:  \"log\",",
      "6084:  \"lzma-rs\",",
      "6085:  \"minisign\",",
      "6087:  \"regex\",",
      "6088:  \"reqwest\",",
      "6089:  \"rpassword\",",
      "",
      "[Removed Lines]",
      "6086:  \"pretty_assertions\",",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6098:  \"tldextract\",",
      "6099:  \"tokio\",",
      "6100:  \"toml 0.5.11\",",
      "6102:  \"url\",",
      "6104:  \"wasmer-wasm-interface 4.2.3\",",
      "6105:  \"wasmparser 0.51.4\",",
      "6106:  \"whoami\",",
      "",
      "[Removed Lines]",
      "6101:  \"tracing\",",
      "6103:  \"wasmer-toml 0.9.2\",",
      "",
      "[Added Lines]",
      "6101:  \"wasmer-toml 0.8.1\",",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6109: [[package]]",
      "6110: name = \"wasmer-registry\"",
      "6114: dependencies = [",
      "6115:  \"anyhow\",",
      "6116:  \"console\",",
      "6117:  \"dirs\",",
      "6118:  \"filetime\",",
      "6119:  \"flate2\",",
      "",
      "[Removed Lines]",
      "6111: version = \"5.9.0\"",
      "6112: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6113: checksum = \"0bb2ecfb16d793bfe1e2b98af07e6f344bd00ba0efea8e1b24737701d823a3ee\"",
      "",
      "[Added Lines]",
      "6109: version = \"5.10.0\"",
      "6112:  \"clap\",",
      "6114:  \"dialoguer 0.11.0\",",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6126:  \"log\",",
      "6127:  \"lzma-rs\",",
      "6128:  \"minisign\",",
      "6129:  \"regex\",",
      "6130:  \"reqwest\",",
      "6131:  \"rpassword\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6127:  \"pretty_assertions\",",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "6140:  \"tldextract\",",
      "6141:  \"tokio\",",
      "6142:  \"toml 0.5.11\",",
      "6143:  \"url\",",
      "6146:  \"wasmparser 0.51.4\",",
      "6147:  \"whoami\",",
      "6148: ]",
      "6150: [[package]]",
      "6151: name = \"wasmer-sys-utils\"",
      "6153: dependencies = [",
      "6154:  \"libc\",",
      "6155:  \"region\",",
      "",
      "[Removed Lines]",
      "6144:  \"wasmer-toml 0.8.1\",",
      "6145:  \"wasmer-wasm-interface 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",",
      "6152: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6142:  \"tracing\",",
      "6144:  \"wasmer-toml 0.9.2\",",
      "6145:  \"wasmer-wasm-interface 4.2.4\",",
      "6152: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "6200: [[package]]",
      "6201: name = \"wasmer-types\"",
      "6203: dependencies = [",
      "6204:  \"bytecheck\",",
      "6205:  \"enum-iterator\",",
      "",
      "[Removed Lines]",
      "6202: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6202: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "6217: [[package]]",
      "6218: name = \"wasmer-vm\"",
      "6220: dependencies = [",
      "6221:  \"backtrace\",",
      "6222:  \"cc\",",
      "",
      "[Removed Lines]",
      "6219: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6219: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "6245: [[package]]",
      "6246: name = \"wasmer-wasix\"",
      "6248: dependencies = [",
      "6249:  \"anyhow\",",
      "6250:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "6247: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6247: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "6315: [[package]]",
      "6316: name = \"wasmer-wasix-experimental-io-devices\"",
      "6318: dependencies = [",
      "6319:  \"minifb\",",
      "6320:  \"nix 0.25.1\",",
      "",
      "[Removed Lines]",
      "6317: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6317: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "6330: [[package]]",
      "6331: name = \"wasmer-wasix-types\"",
      "6333: dependencies = [",
      "6334:  \"anyhow\",",
      "6335:  \"bitflags 1.3.2\",",
      "",
      "[Removed Lines]",
      "6332: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "6332: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "6353: [[package]]",
      "6354: name = \"wasmer-wasm-interface\"",
      "6355: version = \"4.2.3\"",
      "6356: dependencies = [",
      "6358:  \"either\",",
      "6359:  \"nom 5.1.3\",",
      "6360:  \"serde\",",
      "6361:  \"wasmparser 0.51.4\",",
      "6363: ]",
      "6365: [[package]]",
      "6366: name = \"wasmer-wasm-interface\"",
      "6370: dependencies = [",
      "6371:  \"either\",",
      "6372:  \"nom 5.1.3\",",
      "6373:  \"serde\",",
      "6374:  \"wasmparser 0.51.4\",",
      "6375: ]",
      "6377: [[package]]",
      "6378: name = \"wasmer-wast\"",
      "6380: dependencies = [",
      "6381:  \"anyhow\",",
      "6382:  \"futures\",",
      "",
      "[Removed Lines]",
      "6357:  \"bincode\",",
      "6362:  \"wat\",",
      "6367: version = \"4.2.3\"",
      "6368: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6369: checksum = \"70759b128088ce07ab6f31b97d83ceb8642285c650677fc84f554d68dc534ac4\"",
      "6379: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6356: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
      "6357: checksum = \"70759b128088ce07ab6f31b97d83ceb8642285c650677fc84f554d68dc534ac4\"",
      "6367: version = \"4.2.4\"",
      "6369:  \"bincode\",",
      "6374:  \"wat\",",
      "6379: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "6393: [[package]]",
      "6394: name = \"wasmer-workspace\"",
      "6396: dependencies = [",
      "6397:  \"anyhow\",",
      "6398:  \"build-deps\",",
      "",
      "[Removed Lines]",
      "6395: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "6395: version = \"4.2.4\"",
      "",
      "---------------"
    ],
    "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock": [
      "File: lib/wasi-web/Cargo.lock -> lib/wasi-web/Cargo.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "2159: [[package]]",
      "2160: name = \"virtual-fs\"",
      "2162: dependencies = [",
      "2163:  \"anyhow\",",
      "2164:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "2161: version = \"0.9.0\"",
      "",
      "[Added Lines]",
      "2161: version = \"0.10.0\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2279: [[package]]",
      "2280: name = \"wai-bindgen-wasmer\"",
      "2282: dependencies = [",
      "2283:  \"anyhow\",",
      "2284:  \"bitflags 1.3.2\",",
      "",
      "[Removed Lines]",
      "2281: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2281: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2441: [[package]]",
      "2442: name = \"wasmer\"",
      "2444: dependencies = [",
      "2445:  \"bytes\",",
      "2446:  \"cfg-if\",",
      "",
      "[Removed Lines]",
      "2443: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2443: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2468: [[package]]",
      "2469: name = \"wasmer-compiler\"",
      "2471: dependencies = [",
      "2472:  \"backtrace\",",
      "2473:  \"bytes\",",
      "",
      "[Removed Lines]",
      "2470: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2470: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2492: [[package]]",
      "2493: name = \"wasmer-derive\"",
      "2495: dependencies = [",
      "2496:  \"proc-macro-error\",",
      "2497:  \"proc-macro2\",",
      "",
      "[Removed Lines]",
      "2494: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2494: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2520: [[package]]",
      "2521: name = \"wasmer-types\"",
      "2523: dependencies = [",
      "2524:  \"bytecheck\",",
      "2525:  \"enum-iterator\",",
      "",
      "[Removed Lines]",
      "2522: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2522: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2535: [[package]]",
      "2536: name = \"wasmer-vm\"",
      "2538: dependencies = [",
      "2539:  \"backtrace\",",
      "2540:  \"cc\",",
      "",
      "[Removed Lines]",
      "2537: version = \"4.2.3\"",
      "",
      "[Added Lines]",
      "2537: version = \"4.2.4\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2561: [[package]]",
      "2562: name = \"wasmer-wasix\"",
      "2564: dependencies = [",
      "2565:  \"anyhow\",",
      "2566:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "2563: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2563: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2618: [[package]]",
      "2619: name = \"wasmer-wasix-types\"",
      "2621: dependencies = [",
      "2622:  \"anyhow\",",
      "2623:  \"bitflags 1.3.2\",",
      "",
      "[Removed Lines]",
      "2620: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2620: version = \"0.17.0\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2640: [[package]]",
      "2641: name = \"wasmer-web\"",
      "2643: dependencies = [",
      "2644:  \"anyhow\",",
      "2645:  \"async-trait\",",
      "",
      "[Removed Lines]",
      "2642: version = \"0.16.0\"",
      "",
      "[Added Lines]",
      "2642: version = \"0.17.0\"",
      "",
      "---------------"
    ],
    "scripts/update-version.py||scripts/update-version.py": [
      "File: scripts/update-version.py -> scripts/update-version.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #!/usr/bin/python",
      "6: import os",
      "7: import re",
      "",
      "[Removed Lines]",
      "3: PREVIOUS_VERSION='4.2.2'",
      "4: NEXT_VERSION='4.2.3'",
      "",
      "[Added Lines]",
      "3: PREVIOUS_VERSION='4.2.3'",
      "4: NEXT_VERSION='4.2.4'",
      "",
      "---------------"
    ],
    "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss": [
      "File: scripts/windows-installer/wasmer.iss -> scripts/windows-installer/wasmer.iss",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: [Setup]",
      "2: AppName=Wasmer",
      "4: DefaultDirName={pf}\\Wasmer",
      "5: DefaultGroupName=Wasmer",
      "6: Compression=lzma2",
      "",
      "[Removed Lines]",
      "3: AppVersion=4.2.3",
      "",
      "[Added Lines]",
      "3: AppVersion=4.2.4",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01b1c4b7052bc55ed5bf59e9a7a7641e7074b648",
      "candidate_info": {
        "commit_hash": "01b1c4b7052bc55ed5bf59e9a7a7641e7074b648",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/01b1c4b7052bc55ed5bf59e9a7a7641e7074b648",
        "files": [
          "Cargo.lock",
          "Cargo.toml",
          "lib/c-api/Cargo.toml",
          "lib/cli/Cargo.toml",
          "lib/registry/Cargo.toml",
          "lib/sys-utils/Cargo.toml",
          "lib/virtual-fs/Cargo.toml",
          "lib/virtual-net/Cargo.toml",
          "lib/wai-bindgen-wasmer/Cargo.toml",
          "lib/wasi-experimental-io-devices/Cargo.toml",
          "lib/wasi-types/Cargo.toml",
          "lib/wasi-web/Cargo.toml",
          "lib/wasix/Cargo.toml",
          "tests/lib/wast/Cargo.toml"
        ],
        "message": "Bumped the 0.x wasmer crates",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "5018: [[package]]",
          "5019: name = \"virtual-fs\"",
          "5021: dependencies = [",
          "5022:  \"anyhow\",",
          "5023:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "5020: version = \"0.6.0\"",
          "",
          "[Added Lines]",
          "5020: version = \"0.7.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5058: [[package]]",
          "5059: name = \"virtual-net\"",
          "5061: dependencies = [",
          "5062:  \"async-trait\",",
          "5063:  \"bytes\",",
          "",
          "[Removed Lines]",
          "5060: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "5060: version = \"0.4.0\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5145: [[package]]",
          "5146: name = \"wai-bindgen-wasmer\"",
          "5148: dependencies = [",
          "5149:  \"anyhow\",",
          "5150:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "5147: version = \"0.9.0\"",
          "",
          "[Added Lines]",
          "5147: version = \"0.10.0\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5633:  \"wasmer-deploy-cli\",",
          "5634:  \"wasmer-emscripten\",",
          "5635:  \"wasmer-object\",",
          "5637:  \"wasmer-toml 0.6.0\",",
          "5638:  \"wasmer-types\",",
          "5639:  \"wasmer-vm\",",
          "",
          "[Removed Lines]",
          "5636:  \"wasmer-registry 5.2.0\",",
          "",
          "[Added Lines]",
          "5636:  \"wasmer-registry 5.3.0\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5895:  \"target-lexicon 0.12.10\",",
          "5896:  \"tempfile\",",
          "5897:  \"tokio\",",
          "5899: ]",
          "5901: [[package]]",
          "",
          "[Removed Lines]",
          "5898:  \"wasmer-registry 5.2.0\",",
          "",
          "[Added Lines]",
          "5898:  \"wasmer-registry 5.3.0\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5966: [[package]]",
          "5967: name = \"wasmer-registry\"",
          "5969: dependencies = [",
          "5970:  \"anyhow\",",
          "5971:  \"clap 4.3.19\",",
          "",
          "[Removed Lines]",
          "5968: version = \"5.2.0\"",
          "",
          "[Added Lines]",
          "5968: version = \"5.3.0\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6007: [[package]]",
          "6008: name = \"wasmer-sys-utils\"",
          "6010: dependencies = [",
          "6011:  \"libc\",",
          "6012:  \"region\",",
          "",
          "[Removed Lines]",
          "6009: version = \"0.9.0\"",
          "",
          "[Added Lines]",
          "6009: version = \"0.10.0\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6100: [[package]]",
          "6101: name = \"wasmer-wasix\"",
          "6103: dependencies = [",
          "6104:  \"anyhow\",",
          "6105:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "6102: version = \"0.9.0\"",
          "",
          "[Added Lines]",
          "6102: version = \"0.10.0\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6167: [[package]]",
          "6168: name = \"wasmer-wasix-experimental-io-devices\"",
          "6170: dependencies = [",
          "6171:  \"minifb\",",
          "6172:  \"nix 0.25.1\",",
          "",
          "[Removed Lines]",
          "6169: version = \"0.9.0\"",
          "",
          "[Added Lines]",
          "6169: version = \"0.10.0\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6182: [[package]]",
          "6183: name = \"wasmer-wasix-types\"",
          "6185: dependencies = [",
          "6186:  \"anyhow\",",
          "6187:  \"bitflags 1.3.2\",",
          "",
          "[Removed Lines]",
          "6184: version = \"0.9.0\"",
          "",
          "[Added Lines]",
          "6184: version = \"0.10.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03ca2dc7eaee84cf2b9d7353b6004c64bb6691d6",
      "candidate_info": {
        "commit_hash": "03ca2dc7eaee84cf2b9d7353b6004c64bb6691d6",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/03ca2dc7eaee84cf2b9d7353b6004c64bb6691d6",
        "files": [
          "Cargo.lock",
          "lib/c-api/Cargo.toml",
          "lib/cli/Cargo.toml",
          "lib/journal/Cargo.toml",
          "lib/registry/Cargo.toml",
          "lib/sys-utils/Cargo.toml",
          "lib/virtual-fs/Cargo.toml",
          "lib/virtual-net/Cargo.toml",
          "lib/wai-bindgen-wasmer/Cargo.toml",
          "lib/wasi-types/Cargo.toml",
          "lib/wasix/Cargo.toml",
          "tests/lib/wast/Cargo.toml"
        ],
        "message": "Update 0.x package versions",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "5650: [[package]]",
          "5651: name = \"virtual-fs\"",
          "5653: dependencies = [",
          "5654:  \"anyhow\",",
          "5655:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "5652: version = \"0.11.0\"",
          "",
          "[Added Lines]",
          "5652: version = \"0.11.1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5694: [[package]]",
          "5695: name = \"virtual-net\"",
          "5697: dependencies = [",
          "5698:  \"anyhow\",",
          "5699:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "5696: version = \"0.6.2\"",
          "",
          "[Added Lines]",
          "5696: version = \"0.6.3\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5795: [[package]]",
          "5796: name = \"wai-bindgen-wasmer\"",
          "5798: dependencies = [",
          "5799:  \"anyhow\",",
          "5800:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "5797: version = \"0.18.0\"",
          "",
          "[Added Lines]",
          "5797: version = \"0.18.1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6520: [[package]]",
          "6521: name = \"wasmer-registry\"",
          "6523: dependencies = [",
          "6524:  \"anyhow\",",
          "6525:  \"clap\",",
          "",
          "[Removed Lines]",
          "6522: version = \"5.10.1\"",
          "",
          "[Added Lines]",
          "6522: version = \"5.10.2\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6566: [[package]]",
          "6567: name = \"wasmer-sys-utils\"",
          "6569: dependencies = [",
          "6570:  \"libc\",",
          "6571:  \"region\",",
          "",
          "[Removed Lines]",
          "6568: version = \"0.18.0\"",
          "",
          "[Added Lines]",
          "6568: version = \"0.18.1\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6643: [[package]]",
          "6644: name = \"wasmer-wasix\"",
          "6646: dependencies = [",
          "6647:  \"anyhow\",",
          "6648:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "6645: version = \"0.18.0\"",
          "",
          "[Added Lines]",
          "6645: version = \"0.18.1\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6723: [[package]]",
          "6724: name = \"wasmer-wasix-types\"",
          "6726: dependencies = [",
          "6727:  \"anyhow\",",
          "6728:  \"bitflags 1.3.2\",",
          "",
          "[Removed Lines]",
          "6725: version = \"0.18.0\"",
          "",
          "[Added Lines]",
          "6725: version = \"0.18.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fab143f7d2befde88e4f6f795a97c976dcfbfbf",
      "candidate_info": {
        "commit_hash": "9fab143f7d2befde88e4f6f795a97c976dcfbfbf",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/9fab143f7d2befde88e4f6f795a97c976dcfbfbf",
        "files": [
          ".github/workflows/build.yml",
          "Cargo.lock",
          "Cargo.toml",
          "Makefile",
          "lib/wasi-web/.cargo/config.toml",
          "lib/wasi-web/.gitignore",
          "lib/wasi-web/Cargo.lock",
          "lib/wasi-web/Cargo.toml",
          "lib/wasi-web/README.md",
          "lib/wasi-web/build.rs",
          "lib/wasi-web/js/fit.ts",
          "lib/wasi-web/js/gl.js",
          "lib/wasi-web/js/index.js",
          "lib/wasi-web/js/time.js",
          "lib/wasi-web/js/workers-polyfill.js",
          "lib/wasi-web/package-lock.json",
          "lib/wasi-web/package.json",
          "lib/wasi-web/public/.gitignore",
          "lib/wasi-web/public/favicon-tok.png",
          "lib/wasi-web/public/favicon.png",
          "lib/wasi-web/public/index.html",
          "lib/wasi-web/public/wasmer.css",
          "lib/wasi-web/public/worker.js",
          "lib/wasi-web/rust-toolchain.toml",
          "lib/wasi-web/rustfmt.toml",
          "lib/wasi-web/src/common.rs",
          "lib/wasi-web/src/glue.rs",
          "lib/wasi-web/src/interval.rs",
          "lib/wasi-web/src/lib.rs",
          "lib/wasi-web/src/pool.rs",
          "lib/wasi-web/src/runtime.rs",
          "lib/wasi-web/src/webgl.rs",
          "lib/wasi-web/src/ws.rs",
          "lib/wasi-web/webpack.config.mjs",
          "lib/wasi/src/state/builder.rs"
        ],
        "message": "Added the wasmer.sh website to the main repo and a CI/CD build test",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock",
          "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock",
          "lib/wasi-web/build.rs||lib/wasi-web/build.rs",
          "lib/wasi-web/js/fit.ts||lib/wasi-web/js/fit.ts",
          "lib/wasi-web/js/gl.js||lib/wasi-web/js/gl.js",
          "lib/wasi-web/js/index.js||lib/wasi-web/js/index.js",
          "lib/wasi-web/js/time.js||lib/wasi-web/js/time.js",
          "lib/wasi-web/js/workers-polyfill.js||lib/wasi-web/js/workers-polyfill.js",
          "lib/wasi-web/public/index.html||lib/wasi-web/public/index.html",
          "lib/wasi-web/public/wasmer.css||lib/wasi-web/public/wasmer.css",
          "lib/wasi-web/public/worker.js||lib/wasi-web/public/worker.js",
          "lib/wasi-web/src/common.rs||lib/wasi-web/src/common.rs",
          "lib/wasi-web/src/glue.rs||lib/wasi-web/src/glue.rs",
          "lib/wasi-web/src/interval.rs||lib/wasi-web/src/interval.rs",
          "lib/wasi-web/src/lib.rs||lib/wasi-web/src/lib.rs",
          "lib/wasi-web/src/pool.rs||lib/wasi-web/src/pool.rs",
          "lib/wasi-web/src/runtime.rs||lib/wasi-web/src/runtime.rs",
          "lib/wasi-web/src/webgl.rs||lib/wasi-web/src/webgl.rs",
          "lib/wasi-web/src/ws.rs||lib/wasi-web/src/ws.rs",
          "lib/wasi-web/webpack.config.mjs||lib/wasi-web/webpack.config.mjs",
          "lib/wasi/src/state/builder.rs||lib/wasi/src/state/builder.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Cargo.lock||Cargo.lock",
            "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock"
          ],
          "candidate": [
            "Cargo.lock||Cargo.lock",
            "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:  \"cc\",",
          "241:  \"cfg-if 1.0.0\",",
          "242:  \"constant_time_eq\",",
          "244: ]",
          "246: [[package]]",
          "",
          "[Removed Lines]",
          "243:  \"digest\",",
          "",
          "[Added Lines]",
          "243:  \"digest 0.10.6\",",
          "244: ]",
          "246: [[package]]",
          "247: name = \"block-buffer\"",
          "248: version = \"0.9.0\"",
          "249: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "250: checksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"",
          "251: dependencies = [",
          "252:  \"generic-array\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1027: checksum = \"6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8\"",
          "1029: [[package]]",
          "1030: name = \"digest\"",
          "1031: version = \"0.10.6\"",
          "1032: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1033: checksum = \"8168378f4e5023e7218c89c891c0fd8ecdb5e5e4f18cb78f38cf245dd021e76f\"",
          "1034: dependencies = [",
          "1036:  \"crypto-common\",",
          "1037:  \"subtle\",",
          "1038: ]",
          "",
          "[Removed Lines]",
          "1035:  \"block-buffer\",",
          "",
          "[Added Lines]",
          "1038: [[package]]",
          "1039: name = \"digest\"",
          "1040: version = \"0.9.0\"",
          "1041: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1042: checksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"",
          "1043: dependencies = [",
          "1044:  \"generic-array\",",
          "1045: ]",
          "1053:  \"block-buffer 0.10.4\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1111: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1112: checksum = \"9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650\"",
          "1114: [[package]]",
          "1115: name = \"dynasm\"",
          "1116: version = \"1.2.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132: [[package]]",
          "1133: name = \"dummy-waker\"",
          "1134: version = \"1.1.0\"",
          "1135: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1136: checksum = \"8ea6672d73216c05740850c789368d371ca226dc8104d5f2e30c74252d5d6e5e\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1716: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1717: checksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"",
          "1718: dependencies = [",
          "1720: ]",
          "1722: [[package]]",
          "",
          "[Removed Lines]",
          "1719:  \"digest\",",
          "",
          "[Added Lines]",
          "1743:  \"digest 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2599: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2600: checksum = \"0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575\"",
          "2602: [[package]]",
          "2603: name = \"openssl\"",
          "2604: version = \"0.10.49\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2626: [[package]]",
          "2627: name = \"opaque-debug\"",
          "2628: version = \"0.3.0\"",
          "2629: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2630: checksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2752: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2753: checksum = \"f0ca0b5a68607598bf3bad68f32227a8164f6254833f84eafaac409cd6746c31\"",
          "2754: dependencies = [",
          "2756:  \"hmac\",",
          "2757: ]",
          "",
          "[Removed Lines]",
          "2755:  \"digest\",",
          "",
          "[Added Lines]",
          "2785:  \"digest 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2803: dependencies = [",
          "2804:  \"once_cell\",",
          "2805:  \"pest\",",
          "2807: ]",
          "2809: [[package]]",
          "",
          "[Removed Lines]",
          "2806:  \"sha2\",",
          "",
          "[Added Lines]",
          "2836:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3561: dependencies = [",
          "3562:  \"pbkdf2\",",
          "3563:  \"salsa20\",",
          "3565: ]",
          "3567: [[package]]",
          "",
          "[Removed Lines]",
          "3564:  \"sha2\",",
          "",
          "[Added Lines]",
          "3594:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3815: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3816: checksum = \"ae1a47186c03a32177042e55dbc5fd5aee900b8e0069a8d70fba96a9375cd012\"",
          "3818: [[package]]",
          "3819: name = \"sha2\"",
          "3820: version = \"0.10.6\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3848: [[package]]",
          "3849: name = \"sha2\"",
          "3850: version = \"0.9.9\"",
          "3851: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3852: checksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"",
          "3853: dependencies = [",
          "3854:  \"block-buffer 0.9.0\",",
          "3855:  \"cfg-if 1.0.0\",",
          "3856:  \"cpufeatures\",",
          "3857:  \"digest 0.9.0\",",
          "3858:  \"opaque-debug\",",
          "3859: ]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3823: dependencies = [",
          "3824:  \"cfg-if 1.0.0\",",
          "3825:  \"cpufeatures\",",
          "3827: ]",
          "3829: [[package]]",
          "",
          "[Removed Lines]",
          "3826:  \"digest\",",
          "",
          "[Added Lines]",
          "3869:  \"digest 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4499:  \"valuable\",",
          "4500: ]",
          "4502: [[package]]",
          "4503: name = \"tracing-log\"",
          "4504: version = \"0.1.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4545: [[package]]",
          "4546: name = \"tracing-futures\"",
          "4547: version = \"0.2.5\"",
          "4548: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "4549: checksum = \"97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2\"",
          "4550: dependencies = [",
          "4551:  \"pin-project\",",
          "4552:  \"tracing\",",
          "4553: ]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4958:  \"serde_cbor\",",
          "4959:  \"serde_derive\",",
          "4960:  \"serde_json\",",
          "4962:  \"tar\",",
          "4963:  \"toml\",",
          "4964:  \"tracing\",",
          "",
          "[Removed Lines]",
          "4961:  \"sha2\",",
          "",
          "[Added Lines]",
          "5014:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5035: checksum = \"31f8dcbc21f30d9b8f2ea926ecb58f6b91192c17e9d33594b3df58b2007ca53b\"",
          "5036: dependencies = [",
          "5037:  \"cfg-if 1.0.0\",",
          "5038:  \"wasm-bindgen-macro\",",
          "5039: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5091:  \"serde\",",
          "5092:  \"serde_json\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5363:  \"semver 1.0.17\",",
          "5364:  \"serde\",",
          "5365:  \"serde_json\",",
          "5367:  \"spinoff\",",
          "5368:  \"tar\",",
          "5369:  \"target-lexicon 0.12.6\",",
          "",
          "[Removed Lines]",
          "5366:  \"sha2\",",
          "",
          "[Added Lines]",
          "5421:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5784:  \"serde_derive\",",
          "5785:  \"serde_json\",",
          "5786:  \"serde_yaml 0.8.26\",",
          "5788:  \"shellexpand\",",
          "5789:  \"tempfile\",",
          "5790:  \"term_size\",",
          "",
          "[Removed Lines]",
          "5787:  \"sha2\",",
          "",
          "[Added Lines]",
          "5842:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5878:  \"wast 38.0.1\",",
          "5879: ]",
          "5881: [[package]]",
          "5882: name = \"wasmer-workspace\"",
          "5883: version = \"3.2.0-beta.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5936: [[package]]",
          "5937: name = \"wasmer-web\"",
          "5938: version = \"0.2.0\"",
          "5939: dependencies = [",
          "5940:  \"anyhow\",",
          "5941:  \"async-trait\",",
          "5942:  \"base64 0.13.1\",",
          "5943:  \"bincode\",",
          "5944:  \"build-deps\",",
          "5945:  \"bytes\",",
          "5946:  \"console_error_panic_hook\",",
          "5947:  \"derivative\",",
          "5948:  \"dummy-waker\",",
          "5949:  \"fastrand\",",
          "5950:  \"futures\",",
          "5951:  \"js-sys\",",
          "5952:  \"once_cell\",",
          "5953:  \"parking_lot 0.11.2\",",
          "5954:  \"regex\",",
          "5955:  \"serde\",",
          "5956:  \"serde_derive\",",
          "5957:  \"serde_json\",",
          "5958:  \"sha2 0.9.9\",",
          "5959:  \"tokio\",",
          "5960:  \"tracing\",",
          "5961:  \"tracing-futures\",",
          "5962:  \"tracing-subscriber 0.2.25\",",
          "5963:  \"tracing-wasm\",",
          "5964:  \"url\",",
          "5965:  \"wasm-bindgen\",",
          "5966:  \"wasm-bindgen-futures\",",
          "5967:  \"wasm-bindgen-test\",",
          "5968:  \"wasmer\",",
          "5969:  \"wasmer-wasix\",",
          "5970:  \"wat\",",
          "5971:  \"web-sys\",",
          "5972:  \"xterm-js-rs\",",
          "5973: ]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6112:  \"serde\",",
          "6113:  \"serde_cbor\",",
          "6114:  \"serde_json\",",
          "6116:  \"url\",",
          "6117:  \"walkdir\",",
          "6118: ]",
          "",
          "[Removed Lines]",
          "6115:  \"sha2\",",
          "",
          "[Added Lines]",
          "6209:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6135:  \"serde\",",
          "6136:  \"serde_cbor\",",
          "6137:  \"serde_json\",",
          "6139:  \"url\",",
          "6140:  \"walkdir\",",
          "6141: ]",
          "",
          "[Removed Lines]",
          "6138:  \"sha2\",",
          "",
          "[Added Lines]",
          "6232:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6160:  \"serde\",",
          "6161:  \"serde_cbor\",",
          "6162:  \"serde_json\",",
          "6164:  \"thiserror\",",
          "6165:  \"url\",",
          "6166:  \"walkdir\",",
          "",
          "[Removed Lines]",
          "6163:  \"sha2\",",
          "",
          "[Added Lines]",
          "6257:  \"sha2 0.10.6\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6503: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6504: checksum = \"d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3\"",
          "6506: [[package]]",
          "6507: name = \"yaml-rust\"",
          "6508: version = \"0.4.5\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6600: [[package]]",
          "6601: name = \"xterm-js-rs\"",
          "6602: version = \"0.1.2\"",
          "6603: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "6604: checksum = \"0d0b443ffea390a07e99ca563d943f2e56afb71e6543fc13216c5acf2e7341d7\"",
          "6605: dependencies = [",
          "6606:  \"js-sys\",",
          "6607:  \"wasm-bindgen\",",
          "6608:  \"web-sys\",",
          "6609: ]",
          "",
          "---------------"
        ],
        "lib/wasi-web/Cargo.lock||lib/wasi-web/Cargo.lock": [
          "File: lib/wasi-web/Cargo.lock -> lib/wasi-web/Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Cargo.",
          "2: # It is not intended for manual editing.",
          "3: version = 3",
          "5: [[package]]",
          "6: name = \"addr2line\"",
          "7: version = \"0.19.0\"",
          "8: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "9: checksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"",
          "10: dependencies = [",
          "11:  \"gimli\",",
          "12: ]",
          "14: [[package]]",
          "15: name = \"adler\"",
          "16: version = \"1.0.2\"",
          "17: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "18: checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"",
          "20: [[package]]",
          "21: name = \"ahash\"",
          "22: version = \"0.7.6\"",
          "23: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "24: checksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"",
          "25: dependencies = [",
          "26:  \"getrandom\",",
          "27:  \"once_cell\",",
          "28:  \"version_check\",",
          "29: ]",
          "31: [[package]]",
          "32: name = \"aho-corasick\"",
          "33: version = \"0.7.20\"",
          "34: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "35: checksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"",
          "36: dependencies = [",
          "37:  \"memchr\",",
          "38: ]",
          "40: [[package]]",
          "41: name = \"android_system_properties\"",
          "42: version = \"0.1.5\"",
          "43: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "44: checksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"",
          "45: dependencies = [",
          "46:  \"libc\",",
          "47: ]",
          "49: [[package]]",
          "50: name = \"ansi_term\"",
          "51: version = \"0.12.1\"",
          "52: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "53: checksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"",
          "54: dependencies = [",
          "55:  \"winapi\",",
          "56: ]",
          "58: [[package]]",
          "59: name = \"any_ascii\"",
          "60: version = \"0.1.7\"",
          "61: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "62: checksum = \"70033777eb8b5124a81a1889416543dddef2de240019b674c81285a2635a7e1e\"",
          "64: [[package]]",
          "65: name = \"anyhow\"",
          "66: version = \"1.0.69\"",
          "67: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "68: checksum = \"224afbd727c3d6e4b90103ece64b8d1b67fbb1973b1046c2281eed3f3803f800\"",
          "70: [[package]]",
          "71: name = \"async-trait\"",
          "72: version = \"0.1.66\"",
          "73: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "74: checksum = \"b84f9ebcc6c1f5b8cb160f6990096a5c127f423fcb6e1ccc46c370cbdfb75dfc\"",
          "75: dependencies = [",
          "76:  \"proc-macro2\",",
          "77:  \"quote\",",
          "78:  \"syn\",",
          "79: ]",
          "81: [[package]]",
          "82: name = \"atomic-polyfill\"",
          "83: version = \"0.1.11\"",
          "84: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "85: checksum = \"e3ff7eb3f316534d83a8a2c3d1674ace8a5a71198eba31e2e2b597833f699b28\"",
          "86: dependencies = [",
          "87:  \"critical-section\",",
          "88: ]",
          "90: [[package]]",
          "91: name = \"autocfg\"",
          "92: version = \"1.1.0\"",
          "93: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "94: checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"",
          "96: [[package]]",
          "97: name = \"backtrace\"",
          "98: version = \"0.3.67\"",
          "99: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "100: checksum = \"233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca\"",
          "101: dependencies = [",
          "102:  \"addr2line\",",
          "103:  \"cc\",",
          "104:  \"cfg-if\",",
          "105:  \"libc\",",
          "106:  \"miniz_oxide\",",
          "107:  \"object\",",
          "108:  \"rustc-demangle\",",
          "109: ]",
          "111: [[package]]",
          "112: name = \"base-x\"",
          "113: version = \"0.2.11\"",
          "114: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "115: checksum = \"4cbbc9d0964165b47557570cce6c952866c2678457aca742aafc9fb771d30270\"",
          "117: [[package]]",
          "118: name = \"base64\"",
          "119: version = \"0.13.1\"",
          "120: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "121: checksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"",
          "123: [[package]]",
          "124: name = \"base64\"",
          "125: version = \"0.21.0\"",
          "126: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "127: checksum = \"a4a4ddaa51a5bc52a6948f74c06d20aaaddb71924eab79b8c97a8c556e942d6a\"",
          "129: [[package]]",
          "130: name = \"bincode\"",
          "131: version = \"1.3.3\"",
          "132: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "133: checksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"",
          "134: dependencies = [",
          "135:  \"serde\",",
          "136: ]",
          "138: [[package]]",
          "139: name = \"bitflags\"",
          "140: version = \"1.3.2\"",
          "141: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "142: checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"",
          "144: [[package]]",
          "145: name = \"block-buffer\"",
          "146: version = \"0.9.0\"",
          "147: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "148: checksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"",
          "149: dependencies = [",
          "150:  \"generic-array\",",
          "151: ]",
          "153: [[package]]",
          "154: name = \"block-buffer\"",
          "155: version = \"0.10.4\"",
          "156: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "157: checksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"",
          "158: dependencies = [",
          "159:  \"generic-array\",",
          "160: ]",
          "162: [[package]]",
          "163: name = \"build-deps\"",
          "164: version = \"0.1.4\"",
          "165: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "166: checksum = \"64f14468960818ce4f3e3553c32d524446687884f8e7af5d3e252331d8a87e43\"",
          "167: dependencies = [",
          "168:  \"glob\",",
          "169: ]",
          "171: [[package]]",
          "172: name = \"bumpalo\"",
          "173: version = \"3.12.0\"",
          "174: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "175: checksum = \"0d261e256854913907f67ed06efbc3338dfe6179796deefc1ff763fc1aee5535\"",
          "177: [[package]]",
          "178: name = \"bytecheck\"",
          "179: version = \"0.6.10\"",
          "180: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "181: checksum = \"13fe11640a23eb24562225322cd3e452b93a3d4091d62fab69c70542fcd17d1f\"",
          "182: dependencies = [",
          "183:  \"bytecheck_derive\",",
          "184:  \"ptr_meta\",",
          "185:  \"simdutf8\",",
          "186: ]",
          "188: [[package]]",
          "189: name = \"bytecheck_derive\"",
          "190: version = \"0.6.10\"",
          "191: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "192: checksum = \"e31225543cb46f81a7e224762764f4a6a0f097b1db0b175f69e8065efaa42de5\"",
          "193: dependencies = [",
          "194:  \"proc-macro2\",",
          "195:  \"quote\",",
          "196:  \"syn\",",
          "197: ]",
          "199: [[package]]",
          "200: name = \"byteorder\"",
          "201: version = \"1.4.3\"",
          "202: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "203: checksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"",
          "205: [[package]]",
          "206: name = \"bytes\"",
          "207: version = \"1.4.0\"",
          "208: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "209: checksum = \"89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be\"",
          "210: dependencies = [",
          "211:  \"serde\",",
          "212: ]",
          "214: [[package]]",
          "215: name = \"cc\"",
          "216: version = \"1.0.79\"",
          "217: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "218: checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"",
          "220: [[package]]",
          "221: name = \"cfg-if\"",
          "222: version = \"1.0.0\"",
          "223: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "224: checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"",
          "226: [[package]]",
          "227: name = \"chrono\"",
          "228: version = \"0.4.24\"",
          "229: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "230: checksum = \"4e3c5919066adf22df73762e50cffcde3a758f2a848b113b586d1f86728b673b\"",
          "231: dependencies = [",
          "232:  \"iana-time-zone\",",
          "233:  \"js-sys\",",
          "234:  \"num-integer\",",
          "235:  \"num-traits\",",
          "236:  \"wasm-bindgen\",",
          "237:  \"winapi\",",
          "238: ]",
          "240: [[package]]",
          "241: name = \"codespan-reporting\"",
          "242: version = \"0.11.1\"",
          "243: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "244: checksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"",
          "245: dependencies = [",
          "246:  \"termcolor\",",
          "247:  \"unicode-width\",",
          "248: ]",
          "250: [[package]]",
          "251: name = \"console_error_panic_hook\"",
          "252: version = \"0.1.7\"",
          "253: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "254: checksum = \"a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc\"",
          "255: dependencies = [",
          "256:  \"cfg-if\",",
          "257:  \"wasm-bindgen\",",
          "258: ]",
          "260: [[package]]",
          "261: name = \"const_fn\"",
          "262: version = \"0.4.9\"",
          "263: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "264: checksum = \"fbdcdcb6d86f71c5e97409ad45898af11cbc995b4ee8112d59095a28d376c935\"",
          "266: [[package]]",
          "267: name = \"cooked-waker\"",
          "268: version = \"5.0.0\"",
          "269: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "270: checksum = \"147be55d677052dabc6b22252d5dd0fd4c29c8c27aa4f2fbef0f94aa003b406f\"",
          "272: [[package]]",
          "273: name = \"core-foundation-sys\"",
          "274: version = \"0.8.3\"",
          "275: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "276: checksum = \"5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc\"",
          "278: [[package]]",
          "279: name = \"corosensei\"",
          "280: version = \"0.1.3\"",
          "281: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "282: checksum = \"9847f90f32a50b0dcbd68bc23ff242798b13080b97b0569f6ed96a45ce4cf2cd\"",
          "283: dependencies = [",
          "284:  \"autocfg\",",
          "285:  \"cfg-if\",",
          "286:  \"libc\",",
          "287:  \"scopeguard\",",
          "288:  \"windows-sys 0.33.0\",",
          "289: ]",
          "291: [[package]]",
          "292: name = \"cpufeatures\"",
          "293: version = \"0.2.5\"",
          "294: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "295: checksum = \"28d997bd5e24a5928dd43e46dc529867e207907fe0b239c3477d924f7f2ca320\"",
          "296: dependencies = [",
          "297:  \"libc\",",
          "298: ]",
          "300: [[package]]",
          "301: name = \"critical-section\"",
          "302: version = \"1.1.1\"",
          "303: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "304: checksum = \"6548a0ad5d2549e111e1f6a11a6c2e2d00ce6a3dafe22948d67c2b443f775e52\"",
          "306: [[package]]",
          "307: name = \"crypto-common\"",
          "308: version = \"0.1.6\"",
          "309: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "310: checksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"",
          "311: dependencies = [",
          "312:  \"generic-array\",",
          "313:  \"typenum\",",
          "314: ]",
          "316: [[package]]",
          "317: name = \"cxx\"",
          "318: version = \"1.0.92\"",
          "319: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "320: checksum = \"9a140f260e6f3f79013b8bfc65e7ce630c9ab4388c6a89c71e07226f49487b72\"",
          "321: dependencies = [",
          "322:  \"cc\",",
          "323:  \"cxxbridge-flags\",",
          "324:  \"cxxbridge-macro\",",
          "325:  \"link-cplusplus\",",
          "326: ]",
          "328: [[package]]",
          "329: name = \"cxx-build\"",
          "330: version = \"1.0.92\"",
          "331: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "332: checksum = \"da6383f459341ea689374bf0a42979739dc421874f112ff26f829b8040b8e613\"",
          "333: dependencies = [",
          "334:  \"cc\",",
          "335:  \"codespan-reporting\",",
          "336:  \"once_cell\",",
          "337:  \"proc-macro2\",",
          "338:  \"quote\",",
          "339:  \"scratch\",",
          "340:  \"syn\",",
          "341: ]",
          "343: [[package]]",
          "344: name = \"cxxbridge-flags\"",
          "345: version = \"1.0.92\"",
          "346: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "347: checksum = \"90201c1a650e95ccff1c8c0bb5a343213bdd317c6e600a93075bca2eff54ec97\"",
          "349: [[package]]",
          "350: name = \"cxxbridge-macro\"",
          "351: version = \"1.0.92\"",
          "352: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "353: checksum = \"0b75aed41bb2e6367cae39e6326ef817a851db13c13e4f3263714ca3cfb8de56\"",
          "354: dependencies = [",
          "355:  \"proc-macro2\",",
          "356:  \"quote\",",
          "357:  \"syn\",",
          "358: ]",
          "360: [[package]]",
          "361: name = \"darling\"",
          "362: version = \"0.14.4\"",
          "363: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "364: checksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"",
          "365: dependencies = [",
          "366:  \"darling_core\",",
          "367:  \"darling_macro\",",
          "368: ]",
          "370: [[package]]",
          "371: name = \"darling_core\"",
          "372: version = \"0.14.4\"",
          "373: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "374: checksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"",
          "375: dependencies = [",
          "376:  \"fnv\",",
          "377:  \"ident_case\",",
          "378:  \"proc-macro2\",",
          "379:  \"quote\",",
          "380:  \"syn\",",
          "381: ]",
          "383: [[package]]",
          "384: name = \"darling_macro\"",
          "385: version = \"0.14.4\"",
          "386: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "387: checksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"",
          "388: dependencies = [",
          "389:  \"darling_core\",",
          "390:  \"quote\",",
          "391:  \"syn\",",
          "392: ]",
          "394: [[package]]",
          "395: name = \"derivative\"",
          "396: version = \"2.2.0\"",
          "397: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "398: checksum = \"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b\"",
          "399: dependencies = [",
          "400:  \"proc-macro2\",",
          "401:  \"quote\",",
          "402:  \"syn\",",
          "403: ]",
          "405: [[package]]",
          "406: name = \"digest\"",
          "407: version = \"0.9.0\"",
          "408: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "409: checksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"",
          "410: dependencies = [",
          "411:  \"generic-array\",",
          "412: ]",
          "414: [[package]]",
          "415: name = \"digest\"",
          "416: version = \"0.10.6\"",
          "417: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "418: checksum = \"8168378f4e5023e7218c89c891c0fd8ecdb5e5e4f18cb78f38cf245dd021e76f\"",
          "419: dependencies = [",
          "420:  \"block-buffer 0.10.4\",",
          "421:  \"crypto-common\",",
          "422: ]",
          "424: [[package]]",
          "425: name = \"dirs\"",
          "426: version = \"4.0.0\"",
          "427: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "428: checksum = \"ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059\"",
          "429: dependencies = [",
          "430:  \"dirs-sys\",",
          "431: ]",
          "433: [[package]]",
          "434: name = \"dirs-sys\"",
          "435: version = \"0.3.7\"",
          "436: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "437: checksum = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\"",
          "438: dependencies = [",
          "439:  \"libc\",",
          "440:  \"redox_users\",",
          "441:  \"winapi\",",
          "442: ]",
          "444: [[package]]",
          "445: name = \"discard\"",
          "446: version = \"1.0.4\"",
          "447: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "448: checksum = \"212d0f5754cb6769937f4501cc0e67f4f4483c8d2c3e1e922ee9edbe4ab4c7c0\"",
          "450: [[package]]",
          "451: name = \"dummy-waker\"",
          "452: version = \"1.1.0\"",
          "453: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "454: checksum = \"8ea6672d73216c05740850c789368d371ca226dc8104d5f2e30c74252d5d6e5e\"",
          "456: [[package]]",
          "457: name = \"enum-iterator\"",
          "458: version = \"0.7.0\"",
          "459: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "460: checksum = \"4eeac5c5edb79e4e39fe8439ef35207780a11f69c52cbe424ce3dfad4cb78de6\"",
          "461: dependencies = [",
          "462:  \"enum-iterator-derive\",",
          "463: ]",
          "465: [[package]]",
          "466: name = \"enum-iterator-derive\"",
          "467: version = \"0.7.0\"",
          "468: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "469: checksum = \"c134c37760b27a871ba422106eedbb8247da973a09e82558bf26d619c882b159\"",
          "470: dependencies = [",
          "471:  \"proc-macro2\",",
          "472:  \"quote\",",
          "473:  \"syn\",",
          "474: ]",
          "476: [[package]]",
          "477: name = \"enumset\"",
          "478: version = \"1.0.12\"",
          "479: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "480: checksum = \"19be8061a06ab6f3a6cf21106c873578bf01bd42ad15e0311a9c76161cb1c753\"",
          "481: dependencies = [",
          "482:  \"enumset_derive\",",
          "483: ]",
          "485: [[package]]",
          "486: name = \"enumset_derive\"",
          "487: version = \"0.6.1\"",
          "488: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "489: checksum = \"03e7b551eba279bf0fa88b83a46330168c1560a52a94f5126f892f0b364ab3e0\"",
          "490: dependencies = [",
          "491:  \"darling\",",
          "492:  \"proc-macro2\",",
          "493:  \"quote\",",
          "494:  \"syn\",",
          "495: ]",
          "497: [[package]]",
          "498: name = \"fastrand\"",
          "499: version = \"1.9.0\"",
          "500: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "501: checksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"",
          "502: dependencies = [",
          "503:  \"instant\",",
          "504: ]",
          "506: [[package]]",
          "507: name = \"fnv\"",
          "508: version = \"1.0.7\"",
          "509: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "510: checksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"",
          "512: [[package]]",
          "513: name = \"form_urlencoded\"",
          "514: version = \"1.1.0\"",
          "515: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "516: checksum = \"a9c384f161156f5260c24a097c56119f9be8c798586aecc13afbcbe7b7e26bf8\"",
          "517: dependencies = [",
          "518:  \"percent-encoding\",",
          "519: ]",
          "521: [[package]]",
          "522: name = \"futures\"",
          "523: version = \"0.3.27\"",
          "524: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "525: checksum = \"531ac96c6ff5fd7c62263c5e3c67a603af4fcaee2e1a0ae5565ba3a11e69e549\"",
          "526: dependencies = [",
          "527:  \"futures-channel\",",
          "528:  \"futures-core\",",
          "529:  \"futures-executor\",",
          "530:  \"futures-io\",",
          "531:  \"futures-sink\",",
          "532:  \"futures-task\",",
          "533:  \"futures-util\",",
          "534: ]",
          "536: [[package]]",
          "537: name = \"futures-channel\"",
          "538: version = \"0.3.27\"",
          "539: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "540: checksum = \"164713a5a0dcc3e7b4b1ed7d3b433cabc18025386f9339346e8daf15963cf7ac\"",
          "541: dependencies = [",
          "542:  \"futures-core\",",
          "543:  \"futures-sink\",",
          "544: ]",
          "546: [[package]]",
          "547: name = \"futures-core\"",
          "548: version = \"0.3.27\"",
          "549: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "550: checksum = \"86d7a0c1aa76363dac491de0ee99faf6941128376f1cf96f07db7603b7de69dd\"",
          "552: [[package]]",
          "553: name = \"futures-executor\"",
          "554: version = \"0.3.27\"",
          "555: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "556: checksum = \"1997dd9df74cdac935c76252744c1ed5794fac083242ea4fe77ef3ed60ba0f83\"",
          "557: dependencies = [",
          "558:  \"futures-core\",",
          "559:  \"futures-task\",",
          "560:  \"futures-util\",",
          "561: ]",
          "563: [[package]]",
          "564: name = \"futures-io\"",
          "565: version = \"0.3.27\"",
          "566: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "567: checksum = \"89d422fa3cbe3b40dca574ab087abb5bc98258ea57eea3fd6f1fa7162c778b91\"",
          "569: [[package]]",
          "570: name = \"futures-macro\"",
          "571: version = \"0.3.27\"",
          "572: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "573: checksum = \"3eb14ed937631bd8b8b8977f2c198443447a8355b6e3ca599f38c975e5a963b6\"",
          "574: dependencies = [",
          "575:  \"proc-macro2\",",
          "576:  \"quote\",",
          "577:  \"syn\",",
          "578: ]",
          "580: [[package]]",
          "581: name = \"futures-sink\"",
          "582: version = \"0.3.27\"",
          "583: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "584: checksum = \"ec93083a4aecafb2a80a885c9de1f0ccae9dbd32c2bb54b0c3a65690e0b8d2f2\"",
          "586: [[package]]",
          "587: name = \"futures-task\"",
          "588: version = \"0.3.27\"",
          "589: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "590: checksum = \"fd65540d33b37b16542a0438c12e6aeead10d4ac5d05bd3f805b8f35ab592879\"",
          "592: [[package]]",
          "593: name = \"futures-util\"",
          "594: version = \"0.3.27\"",
          "595: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "596: checksum = \"3ef6b17e481503ec85211fed8f39d1970f128935ca1f814cd32ac4a6842e84ab\"",
          "597: dependencies = [",
          "598:  \"futures-channel\",",
          "599:  \"futures-core\",",
          "600:  \"futures-io\",",
          "601:  \"futures-macro\",",
          "602:  \"futures-sink\",",
          "603:  \"futures-task\",",
          "604:  \"memchr\",",
          "605:  \"pin-project-lite\",",
          "606:  \"pin-utils\",",
          "607:  \"slab\",",
          "608: ]",
          "610: [[package]]",
          "611: name = \"generic-array\"",
          "612: version = \"0.14.6\"",
          "613: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "614: checksum = \"bff49e947297f3312447abdca79f45f4738097cc82b06e72054d2223f601f1b9\"",
          "615: dependencies = [",
          "616:  \"typenum\",",
          "617:  \"version_check\",",
          "618: ]",
          "620: [[package]]",
          "621: name = \"getrandom\"",
          "622: version = \"0.2.8\"",
          "623: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "624: checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"",
          "625: dependencies = [",
          "626:  \"cfg-if\",",
          "627:  \"js-sys\",",
          "628:  \"libc\",",
          "629:  \"wasi\",",
          "630:  \"wasm-bindgen\",",
          "631: ]",
          "633: [[package]]",
          "634: name = \"gimli\"",
          "635: version = \"0.27.2\"",
          "636: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "637: checksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"",
          "639: [[package]]",
          "640: name = \"glob\"",
          "641: version = \"0.3.1\"",
          "642: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "643: checksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"",
          "645: [[package]]",
          "646: name = \"half\"",
          "647: version = \"1.8.2\"",
          "648: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "649: checksum = \"eabb4a44450da02c90444cf74558da904edde8fb4e9035a9a6a4e15445af0bd7\"",
          "651: [[package]]",
          "652: name = \"hash32\"",
          "653: version = \"0.2.1\"",
          "654: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "655: checksum = \"b0c35f58762feb77d74ebe43bdbc3210f09be9fe6742234d573bacc26ed92b67\"",
          "656: dependencies = [",
          "657:  \"byteorder\",",
          "658: ]",
          "660: [[package]]",
          "661: name = \"hashbrown\"",
          "662: version = \"0.12.3\"",
          "663: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "664: checksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"",
          "665: dependencies = [",
          "666:  \"ahash\",",
          "667: ]",
          "669: [[package]]",
          "670: name = \"heapless\"",
          "671: version = \"0.7.16\"",
          "672: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "673: checksum = \"db04bc24a18b9ea980628ecf00e6c0264f3c1426dac36c00cb49b6fbad8b0743\"",
          "674: dependencies = [",
          "675:  \"atomic-polyfill\",",
          "676:  \"hash32\",",
          "677:  \"rustc_version 0.4.0\",",
          "678:  \"spin\",",
          "679:  \"stable_deref_trait\",",
          "680: ]",
          "682: [[package]]",
          "683: name = \"heck\"",
          "684: version = \"0.3.3\"",
          "685: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "686: checksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"",
          "687: dependencies = [",
          "688:  \"unicode-segmentation\",",
          "689: ]",
          "691: [[package]]",
          "692: name = \"hex\"",
          "693: version = \"0.4.3\"",
          "694: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "695: checksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"",
          "697: [[package]]",
          "698: name = \"http\"",
          "699: version = \"0.2.9\"",
          "700: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "701: checksum = \"bd6effc99afb63425aff9b05836f029929e345a6148a14b7ecd5ab67af944482\"",
          "702: dependencies = [",
          "703:  \"bytes\",",
          "704:  \"fnv\",",
          "705:  \"itoa\",",
          "706: ]",
          "708: [[package]]",
          "709: name = \"iana-time-zone\"",
          "710: version = \"0.1.53\"",
          "711: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "712: checksum = \"64c122667b287044802d6ce17ee2ddf13207ed924c712de9a66a5814d5b64765\"",
          "713: dependencies = [",
          "714:  \"android_system_properties\",",
          "715:  \"core-foundation-sys\",",
          "716:  \"iana-time-zone-haiku\",",
          "717:  \"js-sys\",",
          "718:  \"wasm-bindgen\",",
          "719:  \"winapi\",",
          "720: ]",
          "722: [[package]]",
          "723: name = \"iana-time-zone-haiku\"",
          "724: version = \"0.1.1\"",
          "725: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "726: checksum = \"0703ae284fc167426161c2e3f1da3ea71d94b21bedbcc9494e92b28e334e3dca\"",
          "727: dependencies = [",
          "728:  \"cxx\",",
          "729:  \"cxx-build\",",
          "730: ]",
          "732: [[package]]",
          "733: name = \"id-arena\"",
          "734: version = \"2.2.1\"",
          "735: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "736: checksum = \"25a2bc672d1148e28034f176e01fffebb08b35768468cc954630da77a1449005\"",
          "738: [[package]]",
          "739: name = \"ident_case\"",
          "740: version = \"1.0.1\"",
          "741: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "742: checksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"",
          "744: [[package]]",
          "745: name = \"idna\"",
          "746: version = \"0.3.0\"",
          "747: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "748: checksum = \"e14ddfc70884202db2244c223200c204c2bda1bc6e0998d11b5e024d657209e6\"",
          "749: dependencies = [",
          "750:  \"unicode-bidi\",",
          "751:  \"unicode-normalization\",",
          "752: ]",
          "754: [[package]]",
          "755: name = \"indexmap\"",
          "756: version = \"1.9.2\"",
          "757: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "758: checksum = \"1885e79c1fc4b10f0e172c475f458b7f7b93061064d98c3293e98c5ba0c8b399\"",
          "759: dependencies = [",
          "760:  \"autocfg\",",
          "761:  \"hashbrown\",",
          "762:  \"serde\",",
          "763: ]",
          "765: [[package]]",
          "766: name = \"instant\"",
          "767: version = \"0.1.12\"",
          "768: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "769: checksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"",
          "770: dependencies = [",
          "771:  \"cfg-if\",",
          "772:  \"js-sys\",",
          "773:  \"wasm-bindgen\",",
          "774:  \"web-sys\",",
          "775: ]",
          "777: [[package]]",
          "778: name = \"itoa\"",
          "779: version = \"1.0.6\"",
          "780: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "781: checksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"",
          "783: [[package]]",
          "784: name = \"js-sys\"",
          "785: version = \"0.3.61\"",
          "786: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "787: checksum = \"445dde2150c55e483f3d8416706b97ec8e8237c307e5b7b4b8dd15e6af2a0730\"",
          "788: dependencies = [",
          "789:  \"wasm-bindgen\",",
          "790: ]",
          "792: [[package]]",
          "793: name = \"lazy_static\"",
          "794: version = \"1.4.0\"",
          "795: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "796: checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"",
          "798: [[package]]",
          "799: name = \"leb128\"",
          "800: version = \"0.2.5\"",
          "801: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "802: checksum = \"884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67\"",
          "804: [[package]]",
          "805: name = \"lexical-sort\"",
          "806: version = \"0.3.1\"",
          "807: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "808: checksum = \"c09e4591611e231daf4d4c685a66cb0410cc1e502027a20ae55f2bb9e997207a\"",
          "809: dependencies = [",
          "810:  \"any_ascii\",",
          "811: ]",
          "813: [[package]]",
          "814: name = \"libc\"",
          "815: version = \"0.2.140\"",
          "816: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "817: checksum = \"99227334921fae1a979cf0bfdfcc6b3e5ce376ef57e16fb6fb3ea2ed6095f80c\"",
          "819: [[package]]",
          "820: name = \"link-cplusplus\"",
          "821: version = \"1.0.8\"",
          "822: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "823: checksum = \"ecd207c9c713c34f95a097a5b029ac2ce6010530c7b49d7fea24d977dede04f5\"",
          "824: dependencies = [",
          "825:  \"cc\",",
          "826: ]",
          "828: [[package]]",
          "829: name = \"linked-hash-map\"",
          "830: version = \"0.5.6\"",
          "831: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "832: checksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"",
          "834: [[package]]",
          "835: name = \"linked_hash_set\"",
          "836: version = \"0.1.4\"",
          "837: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "838: checksum = \"47186c6da4d81ca383c7c47c1bfc80f4b95f4720514d860a5407aaf4233f9588\"",
          "839: dependencies = [",
          "840:  \"linked-hash-map\",",
          "841: ]",
          "843: [[package]]",
          "844: name = \"lock_api\"",
          "845: version = \"0.4.9\"",
          "846: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "847: checksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"",
          "848: dependencies = [",
          "849:  \"autocfg\",",
          "850:  \"scopeguard\",",
          "851: ]",
          "853: [[package]]",
          "854: name = \"log\"",
          "855: version = \"0.4.17\"",
          "856: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "857: checksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"",
          "858: dependencies = [",
          "859:  \"cfg-if\",",
          "860: ]",
          "862: [[package]]",
          "863: name = \"mach\"",
          "864: version = \"0.3.2\"",
          "865: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "866: checksum = \"b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa\"",
          "867: dependencies = [",
          "868:  \"libc\",",
          "869: ]",
          "871: [[package]]",
          "872: name = \"matchers\"",
          "873: version = \"0.0.1\"",
          "874: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "875: checksum = \"f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1\"",
          "876: dependencies = [",
          "877:  \"regex-automata\",",
          "878: ]",
          "880: [[package]]",
          "881: name = \"memchr\"",
          "882: version = \"2.5.0\"",
          "883: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "884: checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"",
          "886: [[package]]",
          "887: name = \"memmap2\"",
          "888: version = \"0.5.10\"",
          "889: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "890: checksum = \"83faa42c0a078c393f6b29d5db232d8be22776a891f8f56e5284faee4a20b327\"",
          "891: dependencies = [",
          "892:  \"libc\",",
          "893: ]",
          "895: [[package]]",
          "896: name = \"memoffset\"",
          "897: version = \"0.6.5\"",
          "898: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "899: checksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"",
          "900: dependencies = [",
          "901:  \"autocfg\",",
          "902: ]",
          "904: [[package]]",
          "905: name = \"miniz_oxide\"",
          "906: version = \"0.6.2\"",
          "907: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "908: checksum = \"b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa\"",
          "909: dependencies = [",
          "910:  \"adler\",",
          "911: ]",
          "913: [[package]]",
          "914: name = \"more-asserts\"",
          "915: version = \"0.2.2\"",
          "916: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "917: checksum = \"7843ec2de400bcbc6a6328c958dc38e5359da6e93e72e37bc5246bf1ae776389\"",
          "919: [[package]]",
          "920: name = \"num-integer\"",
          "921: version = \"0.1.45\"",
          "922: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "923: checksum = \"225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9\"",
          "924: dependencies = [",
          "925:  \"autocfg\",",
          "926:  \"num-traits\",",
          "927: ]",
          "929: [[package]]",
          "930: name = \"num-traits\"",
          "931: version = \"0.2.15\"",
          "932: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "933: checksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"",
          "934: dependencies = [",
          "935:  \"autocfg\",",
          "936: ]",
          "938: [[package]]",
          "939: name = \"num_enum\"",
          "940: version = \"0.5.11\"",
          "941: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "942: checksum = \"1f646caf906c20226733ed5b1374287eb97e3c2a5c227ce668c1f2ce20ae57c9\"",
          "943: dependencies = [",
          "944:  \"num_enum_derive\",",
          "945: ]",
          "947: [[package]]",
          "948: name = \"num_enum_derive\"",
          "949: version = \"0.5.11\"",
          "950: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "951: checksum = \"dcbff9bc912032c62bf65ef1d5aea88983b420f4f839db1e9b0c281a25c9c799\"",
          "952: dependencies = [",
          "953:  \"proc-macro-crate\",",
          "954:  \"proc-macro2\",",
          "955:  \"quote\",",
          "956:  \"syn\",",
          "957: ]",
          "959: [[package]]",
          "960: name = \"object\"",
          "961: version = \"0.30.3\"",
          "962: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "963: checksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"",
          "964: dependencies = [",
          "965:  \"memchr\",",
          "966: ]",
          "968: [[package]]",
          "969: name = \"once_cell\"",
          "970: version = \"1.17.1\"",
          "971: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "972: checksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"",
          "974: [[package]]",
          "975: name = \"opaque-debug\"",
          "976: version = \"0.3.0\"",
          "977: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "978: checksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"",
          "980: [[package]]",
          "981: name = \"parking_lot\"",
          "982: version = \"0.11.2\"",
          "983: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "984: checksum = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\"",
          "985: dependencies = [",
          "986:  \"instant\",",
          "987:  \"lock_api\",",
          "988:  \"parking_lot_core\",",
          "989: ]",
          "991: [[package]]",
          "992: name = \"parking_lot_core\"",
          "993: version = \"0.8.6\"",
          "994: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "995: checksum = \"60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc\"",
          "996: dependencies = [",
          "997:  \"cfg-if\",",
          "998:  \"instant\",",
          "999:  \"libc\",",
          "1000:  \"redox_syscall\",",
          "1001:  \"smallvec\",",
          "1002:  \"winapi\",",
          "1003: ]",
          "1005: [[package]]",
          "1006: name = \"path-clean\"",
          "1007: version = \"0.1.0\"",
          "1008: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1009: checksum = \"ecba01bf2678719532c5e3059e0b5f0811273d94b397088b82e3bd0a78c78fdd\"",
          "1011: [[package]]",
          "1012: name = \"percent-encoding\"",
          "1013: version = \"2.2.0\"",
          "1014: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1015: checksum = \"478c572c3d73181ff3c2539045f6eb99e5491218eae919370993b890cdbdd98e\"",
          "1017: [[package]]",
          "1018: name = \"pin-project\"",
          "1019: version = \"1.0.12\"",
          "1020: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1021: checksum = \"ad29a609b6bcd67fee905812e544992d216af9d755757c05ed2d0e15a74c6ecc\"",
          "1022: dependencies = [",
          "1023:  \"pin-project-internal\",",
          "1024: ]",
          "1026: [[package]]",
          "1027: name = \"pin-project-internal\"",
          "1028: version = \"1.0.12\"",
          "1029: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1030: checksum = \"069bdb1e05adc7a8990dce9cc75370895fbe4e3d58b9b73bf1aee56359344a55\"",
          "1031: dependencies = [",
          "1032:  \"proc-macro2\",",
          "1033:  \"quote\",",
          "1034:  \"syn\",",
          "1035: ]",
          "1037: [[package]]",
          "1038: name = \"pin-project-lite\"",
          "1039: version = \"0.2.9\"",
          "1040: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1041: checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"",
          "1043: [[package]]",
          "1044: name = \"pin-utils\"",
          "1045: version = \"0.1.0\"",
          "1046: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1047: checksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"",
          "1049: [[package]]",
          "1050: name = \"ppv-lite86\"",
          "1051: version = \"0.2.17\"",
          "1052: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1053: checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"",
          "1055: [[package]]",
          "1056: name = \"proc-macro-crate\"",
          "1057: version = \"1.3.1\"",
          "1058: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1059: checksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"",
          "1060: dependencies = [",
          "1061:  \"once_cell\",",
          "1062:  \"toml_edit\",",
          "1063: ]",
          "1065: [[package]]",
          "1066: name = \"proc-macro-error\"",
          "1067: version = \"1.0.4\"",
          "1068: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1069: checksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"",
          "1070: dependencies = [",
          "1071:  \"proc-macro-error-attr\",",
          "1072:  \"proc-macro2\",",
          "1073:  \"quote\",",
          "1074:  \"syn\",",
          "1075:  \"version_check\",",
          "1076: ]",
          "1078: [[package]]",
          "1079: name = \"proc-macro-error-attr\"",
          "1080: version = \"1.0.4\"",
          "1081: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1082: checksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"",
          "1083: dependencies = [",
          "1084:  \"proc-macro2\",",
          "1085:  \"quote\",",
          "1086:  \"version_check\",",
          "1087: ]",
          "1089: [[package]]",
          "1090: name = \"proc-macro-hack\"",
          "1091: version = \"0.5.20+deprecated\"",
          "1092: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1093: checksum = \"dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068\"",
          "1095: [[package]]",
          "1096: name = \"proc-macro2\"",
          "1097: version = \"1.0.52\"",
          "1098: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1099: checksum = \"1d0e1ae9e836cc3beddd63db0df682593d7e2d3d891ae8c9083d2113e1744224\"",
          "1100: dependencies = [",
          "1101:  \"unicode-ident\",",
          "1102: ]",
          "1104: [[package]]",
          "1105: name = \"ptr_meta\"",
          "1106: version = \"0.1.4\"",
          "1107: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1108: checksum = \"0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1\"",
          "1109: dependencies = [",
          "1110:  \"ptr_meta_derive\",",
          "1111: ]",
          "1113: [[package]]",
          "1114: name = \"ptr_meta_derive\"",
          "1115: version = \"0.1.4\"",
          "1116: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1117: checksum = \"16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac\"",
          "1118: dependencies = [",
          "1119:  \"proc-macro2\",",
          "1120:  \"quote\",",
          "1121:  \"syn\",",
          "1122: ]",
          "1124: [[package]]",
          "1125: name = \"pulldown-cmark\"",
          "1126: version = \"0.8.0\"",
          "1127: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1128: checksum = \"ffade02495f22453cd593159ea2f59827aae7f53fa8323f756799b670881dcf8\"",
          "1129: dependencies = [",
          "1130:  \"bitflags\",",
          "1131:  \"memchr\",",
          "1132:  \"unicase\",",
          "1133: ]",
          "1135: [[package]]",
          "1136: name = \"quote\"",
          "1137: version = \"1.0.25\"",
          "1138: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1139: checksum = \"5308e8208729c3e1504a6cfad0d5daacc4614c9a2e65d1ea312a34b5cb00fe84\"",
          "1140: dependencies = [",
          "1141:  \"proc-macro2\",",
          "1142: ]",
          "1144: [[package]]",
          "1145: name = \"rand\"",
          "1146: version = \"0.8.5\"",
          "1147: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1148: checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"",
          "1149: dependencies = [",
          "1150:  \"libc\",",
          "1151:  \"rand_chacha\",",
          "1152:  \"rand_core\",",
          "1153: ]",
          "1155: [[package]]",
          "1156: name = \"rand_chacha\"",
          "1157: version = \"0.3.1\"",
          "1158: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1159: checksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"",
          "1160: dependencies = [",
          "1161:  \"ppv-lite86\",",
          "1162:  \"rand_core\",",
          "1163: ]",
          "1165: [[package]]",
          "1166: name = \"rand_core\"",
          "1167: version = \"0.6.4\"",
          "1168: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1169: checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"",
          "1170: dependencies = [",
          "1171:  \"getrandom\",",
          "1172: ]",
          "1174: [[package]]",
          "1175: name = \"redox_syscall\"",
          "1176: version = \"0.2.16\"",
          "1177: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1178: checksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"",
          "1179: dependencies = [",
          "1180:  \"bitflags\",",
          "1181: ]",
          "1183: [[package]]",
          "1184: name = \"redox_users\"",
          "1185: version = \"0.4.3\"",
          "1186: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1187: checksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"",
          "1188: dependencies = [",
          "1189:  \"getrandom\",",
          "1190:  \"redox_syscall\",",
          "1191:  \"thiserror\",",
          "1192: ]",
          "1194: [[package]]",
          "1195: name = \"regex\"",
          "1196: version = \"1.7.1\"",
          "1197: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1198: checksum = \"48aaa5748ba571fb95cd2c85c09f629215d3a6ece942baa100950af03a34f733\"",
          "1199: dependencies = [",
          "1200:  \"aho-corasick\",",
          "1201:  \"memchr\",",
          "1202:  \"regex-syntax\",",
          "1203: ]",
          "1205: [[package]]",
          "1206: name = \"regex-automata\"",
          "1207: version = \"0.1.10\"",
          "1208: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1209: checksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"",
          "1210: dependencies = [",
          "1211:  \"regex-syntax\",",
          "1212: ]",
          "1214: [[package]]",
          "1215: name = \"regex-syntax\"",
          "1216: version = \"0.6.28\"",
          "1217: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1218: checksum = \"456c603be3e8d448b072f410900c09faf164fbce2d480456f50eea6e25f9c848\"",
          "1220: [[package]]",
          "1221: name = \"region\"",
          "1222: version = \"3.0.0\"",
          "1223: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1224: checksum = \"76e189c2369884dce920945e2ddf79b3dff49e071a167dd1817fa9c4c00d512e\"",
          "1225: dependencies = [",
          "1226:  \"bitflags\",",
          "1227:  \"libc\",",
          "1228:  \"mach\",",
          "1229:  \"winapi\",",
          "1230: ]",
          "1232: [[package]]",
          "1233: name = \"rend\"",
          "1234: version = \"0.4.0\"",
          "1235: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1236: checksum = \"581008d2099240d37fb08d77ad713bcaec2c4d89d50b5b21a8bb1996bbab68ab\"",
          "1237: dependencies = [",
          "1238:  \"bytecheck\",",
          "1239: ]",
          "1241: [[package]]",
          "1242: name = \"rkyv\"",
          "1243: version = \"0.7.40\"",
          "1244: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1245: checksum = \"c30f1d45d9aa61cbc8cd1eb87705470892289bb2d01943e7803b873a57404dc3\"",
          "1246: dependencies = [",
          "1247:  \"bytecheck\",",
          "1248:  \"hashbrown\",",
          "1249:  \"indexmap\",",
          "1250:  \"ptr_meta\",",
          "1251:  \"rend\",",
          "1252:  \"rkyv_derive\",",
          "1253:  \"seahash\",",
          "1254: ]",
          "1256: [[package]]",
          "1257: name = \"rkyv_derive\"",
          "1258: version = \"0.7.40\"",
          "1259: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1260: checksum = \"ff26ed6c7c4dfc2aa9480b86a60e3c7233543a270a680e10758a507c5a4ce476\"",
          "1261: dependencies = [",
          "1262:  \"proc-macro2\",",
          "1263:  \"quote\",",
          "1264:  \"syn\",",
          "1265: ]",
          "1267: [[package]]",
          "1268: name = \"rustc-demangle\"",
          "1269: version = \"0.1.21\"",
          "1270: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1271: checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"",
          "1273: [[package]]",
          "1274: name = \"rustc_version\"",
          "1275: version = \"0.2.3\"",
          "1276: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1277: checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"",
          "1278: dependencies = [",
          "1279:  \"semver 0.9.0\",",
          "1280: ]",
          "1282: [[package]]",
          "1283: name = \"rustc_version\"",
          "1284: version = \"0.4.0\"",
          "1285: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1286: checksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"",
          "1287: dependencies = [",
          "1288:  \"semver 1.0.17\",",
          "1289: ]",
          "1291: [[package]]",
          "1292: name = \"ryu\"",
          "1293: version = \"1.0.13\"",
          "1294: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1295: checksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"",
          "1297: [[package]]",
          "1298: name = \"same-file\"",
          "1299: version = \"1.0.6\"",
          "1300: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1301: checksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"",
          "1302: dependencies = [",
          "1303:  \"winapi-util\",",
          "1304: ]",
          "1306: [[package]]",
          "1307: name = \"scoped-tls\"",
          "1308: version = \"1.0.1\"",
          "1309: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1310: checksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"",
          "1312: [[package]]",
          "1313: name = \"scopeguard\"",
          "1314: version = \"1.1.0\"",
          "1315: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1316: checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"",
          "1318: [[package]]",
          "1319: name = \"scratch\"",
          "1320: version = \"1.0.5\"",
          "1321: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1322: checksum = \"1792db035ce95be60c3f8853017b3999209281c24e2ba5bc8e59bf97a0c590c1\"",
          "1324: [[package]]",
          "1325: name = \"seahash\"",
          "1326: version = \"4.1.0\"",
          "1327: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1328: checksum = \"1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b\"",
          "1330: [[package]]",
          "1331: name = \"semver\"",
          "1332: version = \"0.9.0\"",
          "1333: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1334: checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"",
          "1335: dependencies = [",
          "1336:  \"semver-parser\",",
          "1337: ]",
          "1339: [[package]]",
          "1340: name = \"semver\"",
          "1341: version = \"1.0.17\"",
          "1342: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1343: checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"",
          "1345: [[package]]",
          "1346: name = \"semver-parser\"",
          "1347: version = \"0.7.0\"",
          "1348: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1349: checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"",
          "1351: [[package]]",
          "1352: name = \"serde\"",
          "1353: version = \"1.0.155\"",
          "1354: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1355: checksum = \"71f2b4817415c6d4210bfe1c7bfcf4801b2d904cb4d0e1a8fdb651013c9e86b8\"",
          "1356: dependencies = [",
          "1357:  \"serde_derive\",",
          "1358: ]",
          "1360: [[package]]",
          "1361: name = \"serde-wasm-bindgen\"",
          "1362: version = \"0.4.5\"",
          "1363: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1364: checksum = \"e3b4c031cd0d9014307d82b8abf653c0290fbdaeb4c02d00c63cf52f728628bf\"",
          "1365: dependencies = [",
          "1366:  \"js-sys\",",
          "1367:  \"serde\",",
          "1368:  \"wasm-bindgen\",",
          "1369: ]",
          "1371: [[package]]",
          "1372: name = \"serde_cbor\"",
          "1373: version = \"0.11.2\"",
          "1374: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1375: checksum = \"2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5\"",
          "1376: dependencies = [",
          "1377:  \"half\",",
          "1378:  \"serde\",",
          "1379: ]",
          "1381: [[package]]",
          "1382: name = \"serde_derive\"",
          "1383: version = \"1.0.155\"",
          "1384: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1385: checksum = \"d071a94a3fac4aff69d023a7f411e33f40f3483f8c5190b1953822b6b76d7630\"",
          "1386: dependencies = [",
          "1387:  \"proc-macro2\",",
          "1388:  \"quote\",",
          "1389:  \"syn\",",
          "1390: ]",
          "1392: [[package]]",
          "1393: name = \"serde_json\"",
          "1394: version = \"1.0.94\"",
          "1395: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1396: checksum = \"1c533a59c9d8a93a09c6ab31f0fd5e5f4dd1b8fc9434804029839884765d04ea\"",
          "1397: dependencies = [",
          "1398:  \"itoa\",",
          "1399:  \"ryu\",",
          "1400:  \"serde\",",
          "1401: ]",
          "1403: [[package]]",
          "1404: name = \"serde_yaml\"",
          "1405: version = \"0.8.26\"",
          "1406: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1407: checksum = \"578a7433b776b56a35785ed5ce9a7e777ac0598aac5a6dd1b4b18a307c7fc71b\"",
          "1408: dependencies = [",
          "1409:  \"indexmap\",",
          "1410:  \"ryu\",",
          "1411:  \"serde\",",
          "1412:  \"yaml-rust\",",
          "1413: ]",
          "1415: [[package]]",
          "1416: name = \"sha1\"",
          "1417: version = \"0.6.1\"",
          "1418: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1419: checksum = \"c1da05c97445caa12d05e848c4a4fcbbea29e748ac28f7e80e9b010392063770\"",
          "1420: dependencies = [",
          "1421:  \"sha1_smol\",",
          "1422: ]",
          "1424: [[package]]",
          "1425: name = \"sha1_smol\"",
          "1426: version = \"1.0.0\"",
          "1427: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1428: checksum = \"ae1a47186c03a32177042e55dbc5fd5aee900b8e0069a8d70fba96a9375cd012\"",
          "1430: [[package]]",
          "1431: name = \"sha2\"",
          "1432: version = \"0.9.9\"",
          "1433: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1434: checksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"",
          "1435: dependencies = [",
          "1436:  \"block-buffer 0.9.0\",",
          "1437:  \"cfg-if\",",
          "1438:  \"cpufeatures\",",
          "1439:  \"digest 0.9.0\",",
          "1440:  \"opaque-debug\",",
          "1441: ]",
          "1443: [[package]]",
          "1444: name = \"sha2\"",
          "1445: version = \"0.10.6\"",
          "1446: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1447: checksum = \"82e6b795fe2e3b1e845bafcb27aa35405c4d47cdfc92af5fc8d3002f76cebdc0\"",
          "1448: dependencies = [",
          "1449:  \"cfg-if\",",
          "1450:  \"cpufeatures\",",
          "1451:  \"digest 0.10.6\",",
          "1452: ]",
          "1454: [[package]]",
          "1455: name = \"sharded-slab\"",
          "1456: version = \"0.1.4\"",
          "1457: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1458: checksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"",
          "1459: dependencies = [",
          "1460:  \"lazy_static\",",
          "1461: ]",
          "1463: [[package]]",
          "1464: name = \"shellexpand\"",
          "1465: version = \"2.1.2\"",
          "1466: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1467: checksum = \"7ccc8076840c4da029af4f87e4e8daeb0fca6b87bbb02e10cb60b791450e11e4\"",
          "1468: dependencies = [",
          "1469:  \"dirs\",",
          "1470: ]",
          "1472: [[package]]",
          "1473: name = \"simdutf8\"",
          "1474: version = \"0.1.4\"",
          "1475: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1476: checksum = \"f27f6278552951f1f2b8cf9da965d10969b2efdea95a6ec47987ab46edfe263a\"",
          "1478: [[package]]",
          "1479: name = \"slab\"",
          "1480: version = \"0.4.8\"",
          "1481: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1482: checksum = \"6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d\"",
          "1483: dependencies = [",
          "1484:  \"autocfg\",",
          "1485: ]",
          "1487: [[package]]",
          "1488: name = \"smallvec\"",
          "1489: version = \"1.10.0\"",
          "1490: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1491: checksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"",
          "1493: [[package]]",
          "1494: name = \"spin\"",
          "1495: version = \"0.9.5\"",
          "1496: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1497: checksum = \"7dccf47db1b41fa1573ed27ccf5e08e3ca771cb994f776668c5ebda893b248fc\"",
          "1498: dependencies = [",
          "1499:  \"lock_api\",",
          "1500: ]",
          "1502: [[package]]",
          "1503: name = \"stable_deref_trait\"",
          "1504: version = \"1.2.0\"",
          "1505: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1506: checksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"",
          "1508: [[package]]",
          "1509: name = \"standback\"",
          "1510: version = \"0.2.17\"",
          "1511: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1512: checksum = \"e113fb6f3de07a243d434a56ec6f186dfd51cb08448239fe7bcae73f87ff28ff\"",
          "1513: dependencies = [",
          "1514:  \"version_check\",",
          "1515: ]",
          "1517: [[package]]",
          "1518: name = \"stdweb\"",
          "1519: version = \"0.4.20\"",
          "1520: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1521: checksum = \"d022496b16281348b52d0e30ae99e01a73d737b2f45d38fed4edf79f9325a1d5\"",
          "1522: dependencies = [",
          "1523:  \"discard\",",
          "1524:  \"rustc_version 0.2.3\",",
          "1525:  \"stdweb-derive\",",
          "1526:  \"stdweb-internal-macros\",",
          "1527:  \"stdweb-internal-runtime\",",
          "1528:  \"wasm-bindgen\",",
          "1529: ]",
          "1531: [[package]]",
          "1532: name = \"stdweb-derive\"",
          "1533: version = \"0.5.3\"",
          "1534: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1535: checksum = \"c87a60a40fccc84bef0652345bbbbbe20a605bf5d0ce81719fc476f5c03b50ef\"",
          "1536: dependencies = [",
          "1537:  \"proc-macro2\",",
          "1538:  \"quote\",",
          "1539:  \"serde\",",
          "1540:  \"serde_derive\",",
          "1541:  \"syn\",",
          "1542: ]",
          "1544: [[package]]",
          "1545: name = \"stdweb-internal-macros\"",
          "1546: version = \"0.2.9\"",
          "1547: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1548: checksum = \"58fa5ff6ad0d98d1ffa8cb115892b6e69d67799f6763e162a1c9db421dc22e11\"",
          "1549: dependencies = [",
          "1550:  \"base-x\",",
          "1551:  \"proc-macro2\",",
          "1552:  \"quote\",",
          "1553:  \"serde\",",
          "1554:  \"serde_derive\",",
          "1555:  \"serde_json\",",
          "1556:  \"sha1\",",
          "1557:  \"syn\",",
          "1558: ]",
          "1560: [[package]]",
          "1561: name = \"stdweb-internal-runtime\"",
          "1562: version = \"0.1.5\"",
          "1563: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1564: checksum = \"213701ba3370744dcd1a12960caa4843b3d68b4d1c0a5d575e0d65b2ee9d16c0\"",
          "1566: [[package]]",
          "1567: name = \"syn\"",
          "1568: version = \"1.0.109\"",
          "1569: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1570: checksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"",
          "1571: dependencies = [",
          "1572:  \"proc-macro2\",",
          "1573:  \"quote\",",
          "1574:  \"unicode-ident\",",
          "1575: ]",
          "1577: [[package]]",
          "1578: name = \"target-lexicon\"",
          "1579: version = \"0.12.6\"",
          "1580: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1581: checksum = \"8ae9980cab1db3fceee2f6c6f643d5d8de2997c58ee8d25fb0cc8a9e9e7348e5\"",
          "1583: [[package]]",
          "1584: name = \"term_size\"",
          "1585: version = \"0.3.2\"",
          "1586: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1587: checksum = \"1e4129646ca0ed8f45d09b929036bafad5377103edd06e50bf574b353d2b08d9\"",
          "1588: dependencies = [",
          "1589:  \"libc\",",
          "1590:  \"winapi\",",
          "1591: ]",
          "1593: [[package]]",
          "1594: name = \"termcolor\"",
          "1595: version = \"1.2.0\"",
          "1596: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1597: checksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"",
          "1598: dependencies = [",
          "1599:  \"winapi-util\",",
          "1600: ]",
          "1602: [[package]]",
          "1603: name = \"termios\"",
          "1604: version = \"0.3.3\"",
          "1605: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1606: checksum = \"411c5bf740737c7918b8b1fe232dca4dc9f8e754b8ad5e20966814001ed0ac6b\"",
          "1607: dependencies = [",
          "1608:  \"libc\",",
          "1609: ]",
          "1611: [[package]]",
          "1612: name = \"thiserror\"",
          "1613: version = \"1.0.39\"",
          "1614: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1615: checksum = \"a5ab016db510546d856297882807df8da66a16fb8c4101cb8b30054b0d5b2d9c\"",
          "1616: dependencies = [",
          "1617:  \"thiserror-impl\",",
          "1618: ]",
          "1620: [[package]]",
          "1621: name = \"thiserror-impl\"",
          "1622: version = \"1.0.39\"",
          "1623: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1624: checksum = \"5420d42e90af0c38c3290abcca25b9b3bdf379fc9f55c528f53a269d9c9a267e\"",
          "1625: dependencies = [",
          "1626:  \"proc-macro2\",",
          "1627:  \"quote\",",
          "1628:  \"syn\",",
          "1629: ]",
          "1631: [[package]]",
          "1632: name = \"thread_local\"",
          "1633: version = \"1.1.7\"",
          "1634: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1635: checksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"",
          "1636: dependencies = [",
          "1637:  \"cfg-if\",",
          "1638:  \"once_cell\",",
          "1639: ]",
          "1641: [[package]]",
          "1642: name = \"time\"",
          "1643: version = \"0.2.27\"",
          "1644: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1645: checksum = \"4752a97f8eebd6854ff91f1c1824cd6160626ac4bd44287f7f4ea2035a02a242\"",
          "1646: dependencies = [",
          "1647:  \"const_fn\",",
          "1648:  \"libc\",",
          "1649:  \"standback\",",
          "1650:  \"stdweb\",",
          "1651:  \"time-macros\",",
          "1652:  \"version_check\",",
          "1653:  \"winapi\",",
          "1654: ]",
          "1656: [[package]]",
          "1657: name = \"time-macros\"",
          "1658: version = \"0.1.1\"",
          "1659: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1660: checksum = \"957e9c6e26f12cb6d0dd7fc776bb67a706312e7299aed74c8dd5b17ebb27e2f1\"",
          "1661: dependencies = [",
          "1662:  \"proc-macro-hack\",",
          "1663:  \"time-macros-impl\",",
          "1664: ]",
          "1666: [[package]]",
          "1667: name = \"time-macros-impl\"",
          "1668: version = \"0.1.2\"",
          "1669: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1670: checksum = \"fd3c141a1b43194f3f56a1411225df8646c55781d5f26db825b3d98507eb482f\"",
          "1671: dependencies = [",
          "1672:  \"proc-macro-hack\",",
          "1673:  \"proc-macro2\",",
          "1674:  \"quote\",",
          "1675:  \"standback\",",
          "1676:  \"syn\",",
          "1677: ]",
          "1679: [[package]]",
          "1680: name = \"tinyvec\"",
          "1681: version = \"1.6.0\"",
          "1682: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1683: checksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"",
          "1684: dependencies = [",
          "1685:  \"tinyvec_macros\",",
          "1686: ]",
          "1688: [[package]]",
          "1689: name = \"tinyvec_macros\"",
          "1690: version = \"0.1.1\"",
          "1691: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1692: checksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"",
          "1694: [[package]]",
          "1695: name = \"tokio\"",
          "1696: version = \"1.26.0\"",
          "1697: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1698: checksum = \"03201d01c3c27a29c8a5cee5b55a93ddae1ccf6f08f65365c2c918f8c1b76f64\"",
          "1699: dependencies = [",
          "1700:  \"autocfg\",",
          "1701:  \"bytes\",",
          "1702:  \"memchr\",",
          "1703:  \"pin-project-lite\",",
          "1704:  \"tokio-macros\",",
          "1705:  \"windows-sys 0.45.0\",",
          "1706: ]",
          "1708: [[package]]",
          "1709: name = \"tokio-macros\"",
          "1710: version = \"1.8.2\"",
          "1711: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1712: checksum = \"d266c00fde287f55d3f1c3e96c500c362a2b8c695076ec180f27918820bc6df8\"",
          "1713: dependencies = [",
          "1714:  \"proc-macro2\",",
          "1715:  \"quote\",",
          "1716:  \"syn\",",
          "1717: ]",
          "1719: [[package]]",
          "1720: name = \"toml_datetime\"",
          "1721: version = \"0.6.1\"",
          "1722: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1723: checksum = \"3ab8ed2edee10b50132aed5f331333428b011c99402b5a534154ed15746f9622\"",
          "1725: [[package]]",
          "1726: name = \"toml_edit\"",
          "1727: version = \"0.19.5\"",
          "1728: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1729: checksum = \"7082a95d48029677a28f181e5f6422d0c8339ad8396a39d3f33d62a90c1f6c30\"",
          "1730: dependencies = [",
          "1731:  \"indexmap\",",
          "1732:  \"toml_datetime\",",
          "1733:  \"winnow\",",
          "1734: ]",
          "1736: [[package]]",
          "1737: name = \"tracing\"",
          "1738: version = \"0.1.37\"",
          "1739: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1740: checksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"",
          "1741: dependencies = [",
          "1742:  \"cfg-if\",",
          "1743:  \"log\",",
          "1744:  \"pin-project-lite\",",
          "1745:  \"tracing-attributes\",",
          "1746:  \"tracing-core\",",
          "1747: ]",
          "1749: [[package]]",
          "1750: name = \"tracing-attributes\"",
          "1751: version = \"0.1.23\"",
          "1752: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1753: checksum = \"4017f8f45139870ca7e672686113917c71c7a6e02d4924eda67186083c03081a\"",
          "1754: dependencies = [",
          "1755:  \"proc-macro2\",",
          "1756:  \"quote\",",
          "1757:  \"syn\",",
          "1758: ]",
          "1760: [[package]]",
          "1761: name = \"tracing-core\"",
          "1762: version = \"0.1.30\"",
          "1763: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1764: checksum = \"24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a\"",
          "1765: dependencies = [",
          "1766:  \"once_cell\",",
          "1767:  \"valuable\",",
          "1768: ]",
          "1770: [[package]]",
          "1771: name = \"tracing-futures\"",
          "1772: version = \"0.2.5\"",
          "1773: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1774: checksum = \"97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2\"",
          "1775: dependencies = [",
          "1776:  \"pin-project\",",
          "1777:  \"tracing\",",
          "1778: ]",
          "1780: [[package]]",
          "1781: name = \"tracing-log\"",
          "1782: version = \"0.1.3\"",
          "1783: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1784: checksum = \"78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922\"",
          "1785: dependencies = [",
          "1786:  \"lazy_static\",",
          "1787:  \"log\",",
          "1788:  \"tracing-core\",",
          "1789: ]",
          "1791: [[package]]",
          "1792: name = \"tracing-serde\"",
          "1793: version = \"0.1.3\"",
          "1794: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1795: checksum = \"bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1\"",
          "1796: dependencies = [",
          "1797:  \"serde\",",
          "1798:  \"tracing-core\",",
          "1799: ]",
          "1801: [[package]]",
          "1802: name = \"tracing-subscriber\"",
          "1803: version = \"0.2.25\"",
          "1804: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1805: checksum = \"0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71\"",
          "1806: dependencies = [",
          "1807:  \"ansi_term\",",
          "1808:  \"chrono\",",
          "1809:  \"lazy_static\",",
          "1810:  \"matchers\",",
          "1811:  \"regex\",",
          "1812:  \"serde\",",
          "1813:  \"serde_json\",",
          "1814:  \"sharded-slab\",",
          "1815:  \"smallvec\",",
          "1816:  \"thread_local\",",
          "1817:  \"tracing\",",
          "1818:  \"tracing-core\",",
          "1819:  \"tracing-log\",",
          "1820:  \"tracing-serde\",",
          "1821: ]",
          "1823: [[package]]",
          "1824: name = \"tracing-subscriber\"",
          "1825: version = \"0.3.16\"",
          "1826: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1827: checksum = \"a6176eae26dd70d0c919749377897b54a9276bd7061339665dd68777926b5a70\"",
          "1828: dependencies = [",
          "1829:  \"sharded-slab\",",
          "1830:  \"thread_local\",",
          "1831:  \"tracing-core\",",
          "1832: ]",
          "1834: [[package]]",
          "1835: name = \"tracing-wasm\"",
          "1836: version = \"0.2.1\"",
          "1837: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1838: checksum = \"4575c663a174420fa2d78f4108ff68f65bf2fbb7dd89f33749b6e826b3626e07\"",
          "1839: dependencies = [",
          "1840:  \"tracing\",",
          "1841:  \"tracing-subscriber 0.3.16\",",
          "1842:  \"wasm-bindgen\",",
          "1843: ]",
          "1845: [[package]]",
          "1846: name = \"typenum\"",
          "1847: version = \"1.16.0\"",
          "1848: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1849: checksum = \"497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba\"",
          "1851: [[package]]",
          "1852: name = \"unicase\"",
          "1853: version = \"2.6.0\"",
          "1854: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1855: checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"",
          "1856: dependencies = [",
          "1857:  \"version_check\",",
          "1858: ]",
          "1860: [[package]]",
          "1861: name = \"unicode-bidi\"",
          "1862: version = \"0.3.11\"",
          "1863: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1864: checksum = \"524b68aca1d05e03fdf03fcdce2c6c94b6daf6d16861ddaa7e4f2b6638a9052c\"",
          "1866: [[package]]",
          "1867: name = \"unicode-ident\"",
          "1868: version = \"1.0.8\"",
          "1869: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1870: checksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"",
          "1872: [[package]]",
          "1873: name = \"unicode-normalization\"",
          "1874: version = \"0.1.22\"",
          "1875: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1876: checksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"",
          "1877: dependencies = [",
          "1878:  \"tinyvec\",",
          "1879: ]",
          "1881: [[package]]",
          "1882: name = \"unicode-segmentation\"",
          "1883: version = \"1.10.1\"",
          "1884: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1885: checksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"",
          "1887: [[package]]",
          "1888: name = \"unicode-width\"",
          "1889: version = \"0.1.10\"",
          "1890: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1891: checksum = \"c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b\"",
          "1893: [[package]]",
          "1894: name = \"unicode-xid\"",
          "1895: version = \"0.2.4\"",
          "1896: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1897: checksum = \"f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c\"",
          "1899: [[package]]",
          "1900: name = \"url\"",
          "1901: version = \"2.3.1\"",
          "1902: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1903: checksum = \"0d68c799ae75762b8c3fe375feb6600ef5602c883c5d21eb51c09f22b83c4643\"",
          "1904: dependencies = [",
          "1905:  \"form_urlencoded\",",
          "1906:  \"idna\",",
          "1907:  \"percent-encoding\",",
          "1908:  \"serde\",",
          "1909: ]",
          "1911: [[package]]",
          "1912: name = \"urlencoding\"",
          "1913: version = \"2.1.2\"",
          "1914: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1915: checksum = \"e8db7427f936968176eaa7cdf81b7f98b980b18495ec28f1b5791ac3bfe3eea9\"",
          "1917: [[package]]",
          "1918: name = \"valuable\"",
          "1919: version = \"0.1.0\"",
          "1920: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1921: checksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"",
          "1923: [[package]]",
          "1924: name = \"version_check\"",
          "1925: version = \"0.9.4\"",
          "1926: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1927: checksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"",
          "1929: [[package]]",
          "1930: name = \"virtual-fs\"",
          "1931: version = \"0.1.1\"",
          "1932: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "1933: dependencies = [",
          "1934:  \"anyhow\",",
          "1935:  \"async-trait\",",
          "1936:  \"bytes\",",
          "1937:  \"derivative\",",
          "1938:  \"getrandom\",",
          "1939:  \"indexmap\",",
          "1940:  \"lazy_static\",",
          "1941:  \"pin-project-lite\",",
          "1942:  \"slab\",",
          "1943:  \"thiserror\",",
          "1944:  \"tokio\",",
          "1945:  \"tracing\",",
          "1946:  \"webc\",",
          "1947: ]",
          "1949: [[package]]",
          "1950: name = \"virtual-net\"",
          "1951: version = \"0.1.0\"",
          "1952: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "1953: dependencies = [",
          "1954:  \"async-trait\",",
          "1955:  \"bytes\",",
          "1956:  \"thiserror\",",
          "1957:  \"tracing\",",
          "1958: ]",
          "1960: [[package]]",
          "1961: name = \"wai-bindgen-gen-core\"",
          "1962: version = \"0.2.3\"",
          "1963: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1964: checksum = \"1aa3dc41b510811122b3088197234c27e08fcad63ef936306dd8e11e2803876c\"",
          "1965: dependencies = [",
          "1966:  \"anyhow\",",
          "1967:  \"wai-parser\",",
          "1968: ]",
          "1970: [[package]]",
          "1971: name = \"wai-bindgen-gen-rust\"",
          "1972: version = \"0.2.3\"",
          "1973: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1974: checksum = \"19bc05e8380515c4337c40ef03b2ff233e391315b178a320de8640703d522efe\"",
          "1975: dependencies = [",
          "1976:  \"heck\",",
          "1977:  \"wai-bindgen-gen-core\",",
          "1978: ]",
          "1980: [[package]]",
          "1981: name = \"wai-bindgen-gen-rust-wasm\"",
          "1982: version = \"0.2.3\"",
          "1983: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1984: checksum = \"d6f35ce5e74086fac87f3a7bd50f643f00fe3559adb75c88521ecaa01c8a6199\"",
          "1985: dependencies = [",
          "1986:  \"heck\",",
          "1987:  \"wai-bindgen-gen-core\",",
          "1988:  \"wai-bindgen-gen-rust\",",
          "1989: ]",
          "1991: [[package]]",
          "1992: name = \"wai-bindgen-gen-wasmer\"",
          "1993: version = \"0.2.3\"",
          "1994: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "1995: checksum = \"0f61484185d8c520a86d5a7f7f8265f446617c2f9774b2e20a52de19b6e53432\"",
          "1996: dependencies = [",
          "1997:  \"heck\",",
          "1998:  \"wai-bindgen-gen-core\",",
          "1999:  \"wai-bindgen-gen-rust\",",
          "2000: ]",
          "2002: [[package]]",
          "2003: name = \"wai-bindgen-rust\"",
          "2004: version = \"0.2.3\"",
          "2005: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2006: checksum = \"4e5601c6f448c063e83a5e931b8fefcdf7e01ada424ad42372c948d2e3d67741\"",
          "2007: dependencies = [",
          "2008:  \"bitflags\",",
          "2009:  \"wai-bindgen-rust-impl\",",
          "2010: ]",
          "2012: [[package]]",
          "2013: name = \"wai-bindgen-rust-impl\"",
          "2014: version = \"0.2.3\"",
          "2015: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2016: checksum = \"bdeeb5c1170246de8425a3e123e7ef260dc05ba2b522a1d369fe2315376efea4\"",
          "2017: dependencies = [",
          "2018:  \"proc-macro2\",",
          "2019:  \"syn\",",
          "2020:  \"wai-bindgen-gen-core\",",
          "2021:  \"wai-bindgen-gen-rust-wasm\",",
          "2022: ]",
          "2024: [[package]]",
          "2025: name = \"wai-bindgen-wasmer\"",
          "2026: version = \"0.2.5\"",
          "2027: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2028: dependencies = [",
          "2029:  \"anyhow\",",
          "2030:  \"bitflags\",",
          "2031:  \"once_cell\",",
          "2032:  \"thiserror\",",
          "2033:  \"tracing\",",
          "2034:  \"wai-bindgen-wasmer-impl\",",
          "2035:  \"wasmer\",",
          "2036: ]",
          "2038: [[package]]",
          "2039: name = \"wai-bindgen-wasmer-impl\"",
          "2040: version = \"0.2.3\"",
          "2041: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2042: checksum = \"4b3488ed88d4dd0e3bf85bad4e27dac6cb31aae5d122a5dda2424803c8dc863a\"",
          "2043: dependencies = [",
          "2044:  \"proc-macro2\",",
          "2045:  \"syn\",",
          "2046:  \"wai-bindgen-gen-core\",",
          "2047:  \"wai-bindgen-gen-wasmer\",",
          "2048: ]",
          "2050: [[package]]",
          "2051: name = \"wai-parser\"",
          "2052: version = \"0.2.3\"",
          "2053: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2054: checksum = \"9bd0acb6d70885ea0c343749019ba74f015f64a9d30542e66db69b49b7e28186\"",
          "2055: dependencies = [",
          "2056:  \"anyhow\",",
          "2057:  \"id-arena\",",
          "2058:  \"pulldown-cmark\",",
          "2059:  \"unicode-normalization\",",
          "2060:  \"unicode-xid\",",
          "2061: ]",
          "2063: [[package]]",
          "2064: name = \"waker-fn\"",
          "2065: version = \"1.1.0\"",
          "2066: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2067: checksum = \"9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca\"",
          "2069: [[package]]",
          "2070: name = \"walkdir\"",
          "2071: version = \"2.3.2\"",
          "2072: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2073: checksum = \"808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56\"",
          "2074: dependencies = [",
          "2075:  \"same-file\",",
          "2076:  \"winapi\",",
          "2077:  \"winapi-util\",",
          "2078: ]",
          "2080: [[package]]",
          "2081: name = \"wasi\"",
          "2082: version = \"0.11.0+wasi-snapshot-preview1\"",
          "2083: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2084: checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"",
          "2086: [[package]]",
          "2087: name = \"wasm-bindgen\"",
          "2088: version = \"0.2.84\"",
          "2089: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2090: checksum = \"31f8dcbc21f30d9b8f2ea926ecb58f6b91192c17e9d33594b3df58b2007ca53b\"",
          "2091: dependencies = [",
          "2092:  \"cfg-if\",",
          "2093:  \"serde\",",
          "2094:  \"serde_json\",",
          "2095:  \"wasm-bindgen-macro\",",
          "2096: ]",
          "2098: [[package]]",
          "2099: name = \"wasm-bindgen-backend\"",
          "2100: version = \"0.2.84\"",
          "2101: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2102: checksum = \"95ce90fd5bcc06af55a641a86428ee4229e44e07033963a2290a8e241607ccb9\"",
          "2103: dependencies = [",
          "2104:  \"bumpalo\",",
          "2105:  \"log\",",
          "2106:  \"once_cell\",",
          "2107:  \"proc-macro2\",",
          "2108:  \"quote\",",
          "2109:  \"syn\",",
          "2110:  \"wasm-bindgen-shared\",",
          "2111: ]",
          "2113: [[package]]",
          "2114: name = \"wasm-bindgen-downcast\"",
          "2115: version = \"0.1.1\"",
          "2116: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2117: checksum = \"5dac026d43bcca6e7ce1c0956ba68f59edf6403e8e930a5d891be72c31a44340\"",
          "2118: dependencies = [",
          "2119:  \"js-sys\",",
          "2120:  \"once_cell\",",
          "2121:  \"wasm-bindgen\",",
          "2122:  \"wasm-bindgen-downcast-macros\",",
          "2123: ]",
          "2125: [[package]]",
          "2126: name = \"wasm-bindgen-downcast-macros\"",
          "2127: version = \"0.1.1\"",
          "2128: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2129: checksum = \"c5020cfa87c7cecefef118055d44e3c1fc122c7ec25701d528ee458a0b45f38f\"",
          "2130: dependencies = [",
          "2131:  \"proc-macro2\",",
          "2132:  \"quote\",",
          "2133:  \"syn\",",
          "2134: ]",
          "2136: [[package]]",
          "2137: name = \"wasm-bindgen-futures\"",
          "2138: version = \"0.4.34\"",
          "2139: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2140: checksum = \"f219e0d211ba40266969f6dbdd90636da12f75bee4fc9d6c23d1260dadb51454\"",
          "2141: dependencies = [",
          "2142:  \"cfg-if\",",
          "2143:  \"js-sys\",",
          "2144:  \"wasm-bindgen\",",
          "2145:  \"web-sys\",",
          "2146: ]",
          "2148: [[package]]",
          "2149: name = \"wasm-bindgen-macro\"",
          "2150: version = \"0.2.84\"",
          "2151: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2152: checksum = \"4c21f77c0bedc37fd5dc21f897894a5ca01e7bb159884559461862ae90c0b4c5\"",
          "2153: dependencies = [",
          "2154:  \"quote\",",
          "2155:  \"wasm-bindgen-macro-support\",",
          "2156: ]",
          "2158: [[package]]",
          "2159: name = \"wasm-bindgen-macro-support\"",
          "2160: version = \"0.2.84\"",
          "2161: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2162: checksum = \"2aff81306fcac3c7515ad4e177f521b5c9a15f2b08f4e32d823066102f35a5f6\"",
          "2163: dependencies = [",
          "2164:  \"proc-macro2\",",
          "2165:  \"quote\",",
          "2166:  \"syn\",",
          "2167:  \"wasm-bindgen-backend\",",
          "2168:  \"wasm-bindgen-shared\",",
          "2169: ]",
          "2171: [[package]]",
          "2172: name = \"wasm-bindgen-shared\"",
          "2173: version = \"0.2.84\"",
          "2174: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2175: checksum = \"0046fef7e28c3804e5e38bfa31ea2a0f73905319b677e57ebe37e49358989b5d\"",
          "2177: [[package]]",
          "2178: name = \"wasm-bindgen-test\"",
          "2179: version = \"0.3.34\"",
          "2180: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2181: checksum = \"6db36fc0f9fb209e88fb3642590ae0205bb5a56216dabd963ba15879fe53a30b\"",
          "2182: dependencies = [",
          "2183:  \"console_error_panic_hook\",",
          "2184:  \"js-sys\",",
          "2185:  \"scoped-tls\",",
          "2186:  \"wasm-bindgen\",",
          "2187:  \"wasm-bindgen-futures\",",
          "2188:  \"wasm-bindgen-test-macro\",",
          "2189: ]",
          "2191: [[package]]",
          "2192: name = \"wasm-bindgen-test-macro\"",
          "2193: version = \"0.3.34\"",
          "2194: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2195: checksum = \"0734759ae6b3b1717d661fe4f016efcfb9828f5edb4520c18eaee05af3b43be9\"",
          "2196: dependencies = [",
          "2197:  \"proc-macro2\",",
          "2198:  \"quote\",",
          "2199: ]",
          "2201: [[package]]",
          "2202: name = \"wasm-encoder\"",
          "2203: version = \"0.25.0\"",
          "2204: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2205: checksum = \"4eff853c4f09eec94d76af527eddad4e9de13b11d6286a1ef7134bc30135a2b7\"",
          "2206: dependencies = [",
          "2207:  \"leb128\",",
          "2208: ]",
          "2210: [[package]]",
          "2211: name = \"wasmer\"",
          "2212: version = \"3.2.0-beta.2\"",
          "2213: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2214: dependencies = [",
          "2215:  \"bytes\",",
          "2216:  \"cfg-if\",",
          "2217:  \"derivative\",",
          "2218:  \"indexmap\",",
          "2219:  \"js-sys\",",
          "2220:  \"more-asserts\",",
          "2221:  \"serde\",",
          "2222:  \"serde-wasm-bindgen\",",
          "2223:  \"target-lexicon\",",
          "2224:  \"thiserror\",",
          "2225:  \"wasm-bindgen\",",
          "2226:  \"wasm-bindgen-downcast\",",
          "2227:  \"wasmer-compiler\",",
          "2228:  \"wasmer-derive\",",
          "2229:  \"wasmer-types\",",
          "2230:  \"wasmer-vm\",",
          "2231:  \"wat\",",
          "2232:  \"winapi\",",
          "2233: ]",
          "2235: [[package]]",
          "2236: name = \"wasmer-compiler\"",
          "2237: version = \"3.2.0-beta.2\"",
          "2238: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2239: dependencies = [",
          "2240:  \"backtrace\",",
          "2241:  \"cfg-if\",",
          "2242:  \"enum-iterator\",",
          "2243:  \"enumset\",",
          "2244:  \"lazy_static\",",
          "2245:  \"leb128\",",
          "2246:  \"memmap2\",",
          "2247:  \"more-asserts\",",
          "2248:  \"region\",",
          "2249:  \"rustc-demangle\",",
          "2250:  \"smallvec\",",
          "2251:  \"thiserror\",",
          "2252:  \"wasmer-types\",",
          "2253:  \"wasmer-vm\",",
          "2254:  \"winapi\",",
          "2255: ]",
          "2257: [[package]]",
          "2258: name = \"wasmer-derive\"",
          "2259: version = \"3.2.0-beta.2\"",
          "2260: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2261: dependencies = [",
          "2262:  \"proc-macro-error\",",
          "2263:  \"proc-macro2\",",
          "2264:  \"quote\",",
          "2265:  \"syn\",",
          "2266: ]",
          "2268: [[package]]",
          "2269: name = \"wasmer-types\"",
          "2270: version = \"3.2.0-beta.2\"",
          "2271: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2272: dependencies = [",
          "2273:  \"bytecheck\",",
          "2274:  \"enum-iterator\",",
          "2275:  \"enumset\",",
          "2276:  \"indexmap\",",
          "2277:  \"more-asserts\",",
          "2278:  \"rkyv\",",
          "2279:  \"target-lexicon\",",
          "2280:  \"thiserror\",",
          "2281: ]",
          "2283: [[package]]",
          "2284: name = \"wasmer-vm\"",
          "2285: version = \"3.2.0-beta.2\"",
          "2286: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2287: dependencies = [",
          "2288:  \"backtrace\",",
          "2289:  \"cc\",",
          "2290:  \"cfg-if\",",
          "2291:  \"corosensei\",",
          "2292:  \"derivative\",",
          "2293:  \"enum-iterator\",",
          "2294:  \"indexmap\",",
          "2295:  \"lazy_static\",",
          "2296:  \"libc\",",
          "2297:  \"mach\",",
          "2298:  \"memoffset\",",
          "2299:  \"more-asserts\",",
          "2300:  \"region\",",
          "2301:  \"scopeguard\",",
          "2302:  \"thiserror\",",
          "2303:  \"wasmer-types\",",
          "2304:  \"winapi\",",
          "2305: ]",
          "2307: [[package]]",
          "2308: name = \"wasmer-wasix\"",
          "2309: version = \"0.2.0\"",
          "2310: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2311: dependencies = [",
          "2312:  \"anyhow\",",
          "2313:  \"async-trait\",",
          "2314:  \"bincode\",",
          "2315:  \"bytes\",",
          "2316:  \"cfg-if\",",
          "2317:  \"chrono\",",
          "2318:  \"cooked-waker\",",
          "2319:  \"derivative\",",
          "2320:  \"futures\",",
          "2321:  \"getrandom\",",
          "2322:  \"heapless\",",
          "2323:  \"hex\",",
          "2324:  \"http\",",
          "2325:  \"lazy_static\",",
          "2326:  \"libc\",",
          "2327:  \"linked_hash_set\",",
          "2328:  \"once_cell\",",
          "2329:  \"pin-project\",",
          "2330:  \"rand\",",
          "2331:  \"serde\",",
          "2332:  \"serde_derive\",",
          "2333:  \"serde_json\",",
          "2334:  \"serde_yaml\",",
          "2335:  \"sha2 0.10.6\",",
          "2336:  \"shellexpand\",",
          "2337:  \"term_size\",",
          "2338:  \"termios\",",
          "2339:  \"thiserror\",",
          "2340:  \"tokio\",",
          "2341:  \"tracing\",",
          "2342:  \"urlencoding\",",
          "2343:  \"virtual-fs\",",
          "2344:  \"virtual-net\",",
          "2345:  \"wai-bindgen-wasmer\",",
          "2346:  \"waker-fn\",",
          "2347:  \"wasm-bindgen\",",
          "2348:  \"wasmer\",",
          "2349:  \"wasmer-types\",",
          "2350:  \"wasmer-wasix-types\",",
          "2351:  \"webc\",",
          "2352:  \"weezl\",",
          "2353:  \"winapi\",",
          "2354: ]",
          "2356: [[package]]",
          "2357: name = \"wasmer-wasix-types\"",
          "2358: version = \"0.2.0\"",
          "2359: source = \"git+https://github.com/wasmerio/wasmer?branch=deploy#14e2411d569f518f304667c43f2364e37d7069a6\"",
          "2360: dependencies = [",
          "2361:  \"anyhow\",",
          "2362:  \"bitflags\",",
          "2363:  \"byteorder\",",
          "2364:  \"cfg-if\",",
          "2365:  \"num_enum\",",
          "2366:  \"time\",",
          "2367:  \"wai-bindgen-gen-core\",",
          "2368:  \"wai-bindgen-gen-rust\",",
          "2369:  \"wai-bindgen-gen-rust-wasm\",",
          "2370:  \"wai-bindgen-rust\",",
          "2371:  \"wai-parser\",",
          "2372:  \"wasmer\",",
          "2373:  \"wasmer-derive\",",
          "2374:  \"wasmer-types\",",
          "2375: ]",
          "2377: [[package]]",
          "2378: name = \"wasmer-web\"",
          "2379: version = \"0.2.0\"",
          "2380: dependencies = [",
          "2381:  \"anyhow\",",
          "2382:  \"async-trait\",",
          "2383:  \"base64 0.13.1\",",
          "2384:  \"bincode\",",
          "2385:  \"build-deps\",",
          "2386:  \"bytes\",",
          "2387:  \"console_error_panic_hook\",",
          "2388:  \"derivative\",",
          "2389:  \"dummy-waker\",",
          "2390:  \"fastrand\",",
          "2391:  \"futures\",",
          "2392:  \"js-sys\",",
          "2393:  \"once_cell\",",
          "2394:  \"parking_lot\",",
          "2395:  \"regex\",",
          "2396:  \"serde\",",
          "2397:  \"serde_derive\",",
          "2398:  \"serde_json\",",
          "2399:  \"sha2 0.9.9\",",
          "2400:  \"tokio\",",
          "2401:  \"tracing\",",
          "2402:  \"tracing-futures\",",
          "2403:  \"tracing-subscriber 0.2.25\",",
          "2404:  \"tracing-wasm\",",
          "2405:  \"url\",",
          "2406:  \"wasm-bindgen\",",
          "2407:  \"wasm-bindgen-futures\",",
          "2408:  \"wasm-bindgen-test\",",
          "2409:  \"wasmer-wasix\",",
          "2410:  \"wat\",",
          "2411:  \"web-sys\",",
          "2412:  \"xterm-js-rs\",",
          "2413: ]",
          "2415: [[package]]",
          "2416: name = \"wast\"",
          "2417: version = \"55.0.0\"",
          "2418: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2419: checksum = \"4984d3e1406571f4930ba5cf79bd70f75f41d0e87e17506e0bd19b0e5d085f05\"",
          "2420: dependencies = [",
          "2421:  \"leb128\",",
          "2422:  \"memchr\",",
          "2423:  \"unicode-width\",",
          "2424:  \"wasm-encoder\",",
          "2425: ]",
          "2427: [[package]]",
          "2428: name = \"wat\"",
          "2429: version = \"1.0.61\"",
          "2430: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2431: checksum = \"af2b53f4da14db05d32e70e9c617abdf6620c575bd5dd972b7400037b4df2091\"",
          "2432: dependencies = [",
          "2433:  \"wast\",",
          "2434: ]",
          "2436: [[package]]",
          "2437: name = \"web-sys\"",
          "2438: version = \"0.3.61\"",
          "2439: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2440: checksum = \"e33b99f4b23ba3eec1a53ac264e35a755f00e966e0065077d6027c0f575b0b97\"",
          "2441: dependencies = [",
          "2442:  \"js-sys\",",
          "2443:  \"wasm-bindgen\",",
          "2444: ]",
          "2446: [[package]]",
          "2447: name = \"webc\"",
          "2448: version = \"5.0.0-rc.6\"",
          "2449: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2450: checksum = \"aa158c77bd41040f4b9a4b91be63446885ce9b04bc9a5bb457fa586e7a8c9815\"",
          "2451: dependencies = [",
          "2452:  \"anyhow\",",
          "2453:  \"base64 0.21.0\",",
          "2454:  \"byteorder\",",
          "2455:  \"bytes\",",
          "2456:  \"indexmap\",",
          "2457:  \"leb128\",",
          "2458:  \"lexical-sort\",",
          "2459:  \"once_cell\",",
          "2460:  \"path-clean\",",
          "2461:  \"rand\",",
          "2462:  \"serde\",",
          "2463:  \"serde_cbor\",",
          "2464:  \"serde_json\",",
          "2465:  \"sha2 0.10.6\",",
          "2466:  \"thiserror\",",
          "2467:  \"url\",",
          "2468:  \"walkdir\",",
          "2469: ]",
          "2471: [[package]]",
          "2472: name = \"weezl\"",
          "2473: version = \"0.1.7\"",
          "2474: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2475: checksum = \"9193164d4de03a926d909d3bc7c30543cecb35400c02114792c2cae20d5e2dbb\"",
          "2477: [[package]]",
          "2478: name = \"winapi\"",
          "2479: version = \"0.3.9\"",
          "2480: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2481: checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"",
          "2482: dependencies = [",
          "2483:  \"winapi-i686-pc-windows-gnu\",",
          "2484:  \"winapi-x86_64-pc-windows-gnu\",",
          "2485: ]",
          "2487: [[package]]",
          "2488: name = \"winapi-i686-pc-windows-gnu\"",
          "2489: version = \"0.4.0\"",
          "2490: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2491: checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"",
          "2493: [[package]]",
          "2494: name = \"winapi-util\"",
          "2495: version = \"0.1.5\"",
          "2496: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2497: checksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"",
          "2498: dependencies = [",
          "2499:  \"winapi\",",
          "2500: ]",
          "2502: [[package]]",
          "2503: name = \"winapi-x86_64-pc-windows-gnu\"",
          "2504: version = \"0.4.0\"",
          "2505: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2506: checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"",
          "2508: [[package]]",
          "2509: name = \"windows-sys\"",
          "2510: version = \"0.33.0\"",
          "2511: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2512: checksum = \"43dbb096663629518eb1dfa72d80243ca5a6aca764cae62a2df70af760a9be75\"",
          "2513: dependencies = [",
          "2514:  \"windows_aarch64_msvc 0.33.0\",",
          "2515:  \"windows_i686_gnu 0.33.0\",",
          "2516:  \"windows_i686_msvc 0.33.0\",",
          "2517:  \"windows_x86_64_gnu 0.33.0\",",
          "2518:  \"windows_x86_64_msvc 0.33.0\",",
          "2519: ]",
          "2521: [[package]]",
          "2522: name = \"windows-sys\"",
          "2523: version = \"0.45.0\"",
          "2524: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2525: checksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"",
          "2526: dependencies = [",
          "2527:  \"windows-targets\",",
          "2528: ]",
          "2530: [[package]]",
          "2531: name = \"windows-targets\"",
          "2532: version = \"0.42.1\"",
          "2533: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2534: checksum = \"8e2522491fbfcd58cc84d47aeb2958948c4b8982e9a2d8a2a35bbaed431390e7\"",
          "2535: dependencies = [",
          "2536:  \"windows_aarch64_gnullvm\",",
          "2537:  \"windows_aarch64_msvc 0.42.1\",",
          "2538:  \"windows_i686_gnu 0.42.1\",",
          "2539:  \"windows_i686_msvc 0.42.1\",",
          "2540:  \"windows_x86_64_gnu 0.42.1\",",
          "2541:  \"windows_x86_64_gnullvm\",",
          "2542:  \"windows_x86_64_msvc 0.42.1\",",
          "2543: ]",
          "2545: [[package]]",
          "2546: name = \"windows_aarch64_gnullvm\"",
          "2547: version = \"0.42.1\"",
          "2548: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2549: checksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"",
          "2551: [[package]]",
          "2552: name = \"windows_aarch64_msvc\"",
          "2553: version = \"0.33.0\"",
          "2554: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2555: checksum = \"cd761fd3eb9ab8cc1ed81e56e567f02dd82c4c837e48ac3b2181b9ffc5060807\"",
          "2557: [[package]]",
          "2558: name = \"windows_aarch64_msvc\"",
          "2559: version = \"0.42.1\"",
          "2560: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2561: checksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"",
          "2563: [[package]]",
          "2564: name = \"windows_i686_gnu\"",
          "2565: version = \"0.33.0\"",
          "2566: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2567: checksum = \"cab0cf703a96bab2dc0c02c0fa748491294bf9b7feb27e1f4f96340f208ada0e\"",
          "2569: [[package]]",
          "2570: name = \"windows_i686_gnu\"",
          "2571: version = \"0.42.1\"",
          "2572: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2573: checksum = \"de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640\"",
          "2575: [[package]]",
          "2576: name = \"windows_i686_msvc\"",
          "2577: version = \"0.33.0\"",
          "2578: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2579: checksum = \"8cfdbe89cc9ad7ce618ba34abc34bbb6c36d99e96cae2245b7943cd75ee773d0\"",
          "2581: [[package]]",
          "2582: name = \"windows_i686_msvc\"",
          "2583: version = \"0.42.1\"",
          "2584: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2585: checksum = \"bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605\"",
          "2587: [[package]]",
          "2588: name = \"windows_x86_64_gnu\"",
          "2589: version = \"0.33.0\"",
          "2590: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2591: checksum = \"b4dd9b0c0e9ece7bb22e84d70d01b71c6d6248b81a3c60d11869451b4cb24784\"",
          "2593: [[package]]",
          "2594: name = \"windows_x86_64_gnu\"",
          "2595: version = \"0.42.1\"",
          "2596: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2597: checksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"",
          "2599: [[package]]",
          "2600: name = \"windows_x86_64_gnullvm\"",
          "2601: version = \"0.42.1\"",
          "2602: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2603: checksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"",
          "2605: [[package]]",
          "2606: name = \"windows_x86_64_msvc\"",
          "2607: version = \"0.33.0\"",
          "2608: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2609: checksum = \"ff1e4aa646495048ec7f3ffddc411e1d829c026a2ec62b39da15c1055e406eaa\"",
          "2611: [[package]]",
          "2612: name = \"windows_x86_64_msvc\"",
          "2613: version = \"0.42.1\"",
          "2614: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2615: checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"",
          "2617: [[package]]",
          "2618: name = \"winnow\"",
          "2619: version = \"0.3.5\"",
          "2620: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2621: checksum = \"ee7b2c67f962bf5042bfd8b6a916178df33a26eec343ae064cb8e069f638fa6f\"",
          "2622: dependencies = [",
          "2623:  \"memchr\",",
          "2624: ]",
          "2626: [[package]]",
          "2627: name = \"xterm-js-rs\"",
          "2628: version = \"0.1.2\"",
          "2629: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2630: checksum = \"0d0b443ffea390a07e99ca563d943f2e56afb71e6543fc13216c5acf2e7341d7\"",
          "2631: dependencies = [",
          "2632:  \"js-sys\",",
          "2633:  \"wasm-bindgen\",",
          "2634:  \"web-sys\",",
          "2635: ]",
          "2637: [[package]]",
          "2638: name = \"yaml-rust\"",
          "2639: version = \"0.4.5\"",
          "2640: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "2641: checksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"",
          "2642: dependencies = [",
          "2643:  \"linked-hash-map\",",
          "2644: ]",
          "",
          "---------------"
        ],
        "lib/wasi-web/build.rs||lib/wasi-web/build.rs": [
          "File: lib/wasi-web/build.rs -> lib/wasi-web/build.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: extern crate build_deps;",
          "3: fn main() {",
          "4:     build_deps::rerun_if_changed_paths(\"public/bin/*\").unwrap();",
          "5:     build_deps::rerun_if_changed_paths(\"public/*\").unwrap();",
          "6:     build_deps::rerun_if_changed_paths(\"public/bin\").unwrap();",
          "7:     build_deps::rerun_if_changed_paths(\"public\").unwrap();",
          "8: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/js/fit.ts||lib/wasi-web/js/fit.ts": [
          "File: lib/wasi-web/js/fit.ts -> lib/wasi-web/js/fit.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  import { Terminal } from 'xterm';",
          "8:  const MINIMUM_COLS = 2;",
          "9:  const MINIMUM_ROWS = 1;",
          "15: export function termFit(terminal, front)",
          "16: {",
          "17:   if (!terminal) {",
          "18:     return undefined;",
          "19:   }",
          "21:   if (!terminal.element || !terminal.element.parentElement) {",
          "22:     return undefined;",
          "23:   }",
          "27:   let core = terminal._core;",
          "29:   if (core._renderService.dimensions.actualCellWidth === 0 || core._renderService.dimensions.actualCellHeight === 0) {",
          "30:     return undefined;",
          "31:   }",
          "37:   var parentElementHeight = document.body.clientHeight - 10;",
          "38:   var parentElementWidth = document.body.clientWidth - 10;",
          "40:   const elementStyle = window.getComputedStyle(terminal.element);",
          "41:   const elementPadding = {",
          "42:     top: parseInt(elementStyle.getPropertyValue('padding-top')),",
          "43:     bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),",
          "44:     right: parseInt(elementStyle.getPropertyValue('padding-right')),",
          "45:     left: parseInt(elementStyle.getPropertyValue('padding-left'))",
          "46:   };",
          "47:   const elementPaddingVer = elementPadding.top + elementPadding.bottom;",
          "48:   const elementPaddingHor = elementPadding.right + elementPadding.left;",
          "49:   const availableHeight = parentElementHeight - elementPaddingVer;",
          "50:   const availableWidth = parentElementWidth - elementPaddingHor - core.viewport.scrollBarWidth;",
          "51:   const dims = {",
          "52:     cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / core._renderService.dimensions.actualCellWidth)),",
          "53:     rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / core._renderService.dimensions.actualCellHeight))",
          "54:   };",
          "57:   front.width = document.body.clientWidth;",
          "58:   front.height = document.body.clientHeight;",
          "59:   document.getElementById(front.id).style.width = document.body.clientWidth + 'px';",
          "60:   document.getElementById(front.id).style.height = document.body.clientHeight + 'px';",
          "63:   if (terminal.rows !== dims.rows || terminal.cols !== dims.cols) {",
          "64:     terminal.resize(dims.cols, dims.rows);",
          "65:   }",
          "66: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/js/gl.js||lib/wasi-web/js/gl.js": [
          "File: lib/wasi-web/js/gl.js -> lib/wasi-web/js/gl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export function showCanvas() {",
          "2:   document.getElementById(\"terminal\").style.display='none';",
          "3:   document.getElementById(\"frontBuffer\").style.display='inline';",
          "4: }",
          "6: export function showTerminal() {",
          "7:   document.getElementById(\"terminal\").style.display='inline';",
          "8:   document.getElementById(\"frontBuffer\").style.display='none';",
          "9: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/js/index.js||lib/wasi-web/js/index.js": [
          "File: lib/wasi-web/js/index.js -> lib/wasi-web/js/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import init, { start } from '../pkg/index.js';",
          "2: import 'regenerator-runtime/runtime.js'",
          "3: import './workers-polyfill.js'",
          "5: async function run() {",
          "6:   Error.stackTraceLimit = 20;",
          "7:   await init();",
          "8:   await start();",
          "9: }",
          "11: run();",
          "",
          "---------------"
        ],
        "lib/wasi-web/js/time.js||lib/wasi-web/js/time.js": [
          "File: lib/wasi-web/js/time.js -> lib/wasi-web/js/time.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export function sleep(ms) {",
          "2:     return new Promise(resolve => setTimeout(resolve, ms));",
          "3: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/js/workers-polyfill.js||lib/wasi-web/js/workers-polyfill.js": [
          "File: lib/wasi-web/js/workers-polyfill.js -> lib/wasi-web/js/workers-polyfill.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: !function(e){if(!e||!0!==e._$P){if(e){var n,r=Object.defineProperty({},\"type\",{get:function(){n=!0}});try{var t=URL.createObjectURL(new Blob([\"\"],{type:\"text/javascript\"}));new e(t,r).terminate(),URL.revokeObjectURL(t)}catch(e){}if(!n)try{new e(\"data:text/javascript,\",r).terminate()}catch(e){}if(n)return;(self.Worker=function(n,r){return r&&\"module\"==r.type&&(r={name:n+\"\\n\"+(r.name||\"\")},n=\"undefined\"==typeof document?location.href:document.currentScript&&document.currentScript.src||(new Error).stack.match(/[(@]((file|https?):\\/\\/[^)]+?):\\d+(:\\d+)?(?:\\)|$)/m)[1]),new e(n,r)})._$P=!0}\"undefined\"==typeof document&&function(){var e={},n={};function r(e,n){for(n=n.replace(/^(\\.\\.\\/|\\.\\/)/,e.replace(/[^/]+$/g,\"\")+\"$1\");n!==(n=n.replace(/[^/]+\\/\\.\\.\\//g,\"\")););return n.replace(/\\.\\//g,\"\")}var t=[],s=t.push.bind(t);addEventListener(\"message\",s);var a=self.name.match(/^[^\\n]+/)[0];self.name=self.name.replace(/^[^\\n]*\\n/g,\"\"),function t(s,a){var u,o=s;return a&&(s=r(a,s)),e[s]||(e[s]=fetch(s).then((function(a){if((o=a.url)!==s){if(null!=e[o])return e[o];e[o]=e[s]}return a.text().then((function(e){if(!a.ok)throw e;var c={exports:{}};u=n[o]||(n[o]=c.exports);var i=function(e){return t(e,o)},f=[];return e=function(e,n){n=n||[];var r,t=[],a=0;function u(e,n){for(var s,a=/(?:^|,)\\s*([\\w$]+)(?:\\s+as\\s+([\\w$]+))?\\s*/g,u=[];s=a.exec(e);)n?t.push((s[2]||s[1])+\":\"+s[1]):u.push((s[2]||s[1])+\"=\"+r+\".\"+s[1]);return u}return(e=e.replace(/(^\\s*|[;}\\s\\n]\\s*)import\\s*(?:(?:([\\w$]+)(?:\\s*\\,\\s*\\{([^}]+)\\})?|(?:\\*\\s*as\\s+([\\w$]+))|\\{([^}]*)\\})\\s*from)?\\s*(['\"])(.+?)\\6/g,(function(e,t,s,o,c,i,f,p){return n.push(p),t+=\"var \"+(r=\"$im$\"+ ++a)+\"=$require(\"+f+p+f+\")\",s&&(t+=\";var \"+s+\" = 'default' in \"+r+\" ? \"+r+\".default : \"+r),c&&(t+=\";var \"+c+\" = \"+r),(o=o||i)&&(t+=\";var \"+u(o,!1)),t})).replace(/((?:^|[;}\\s\\n])\\s*)export\\s*(?:\\s+(default)\\s+|((?:async\\s+)?function\\s*\\*?|class|const\\s|let\\s|var\\s)\\s*([a-zA-Z0-9$_{[]+))/g,(function(e,n,r,s,u){if(r){var o=\"$im$\"+ ++a;return t.push(\"default:\"+o),n+\"var \"+o+\"=\"}return t.push(u+\":\"+u),n+s+\" \"+u})).replace(/((?:^|[;}\\s\\n])\\s*)export\\s*\\{([^}]+)\\}\\s*;?/g,(function(e,n,r){return u(r,!0),n})).replace(/((?:^|[^a-zA-Z0-9$_@`'\".])\\s*)(import\\s*\\([\\s\\S]+?\\))/g,\"$1$$$2\")).replace(/((?:^|[^a-zA-Z0-9$_@`'\".])\\s*)import\\.meta\\.url/g,\"$1\"+JSON.stringify(s))+\"\\n$module.exports={\"+t.join(\",\")+\"}\"}(e,f),Promise.all(f.map((function(e){var s=r(o,e);return s in n?n[s]:t(s)}))).then((function(n){e+=\"\\n//# sourceURL=\"+s;try{var r=new Function(\"$import\",\"$require\",\"$module\",\"$exports\",e)}catch(n){var t=n.line-1,a=n.column,o=e.split(\"\\n\"),p=(o[t-2]||\"\")+\"\\n\"+o[t-1]+\"\\n\"+(null==a?\"\":new Array(a).join(\"-\")+\"^\\n\")+(o[t]||\"\"),l=new Error(n.message+\"\\n\\n\"+p,s,t);throw l.sourceURL=l.fileName=s,l.line=t,l.column=a,l}var m=r(i,(function(e){return n[f.indexOf(e)]}),c,c.exports);return null!=m&&(c.exports=m),Object.assign(u,c.exports),c.exports}))}))})))}(a).then((function(){removeEventListener(\"message\",s),t.map(dispatchEvent)})).catch((function(e){setTimeout((function(){throw e}))}))}()}}(self.Worker);",
          "",
          "---------------"
        ],
        "lib/wasi-web/public/index.html||lib/wasi-web/public/index.html": [
          "File: lib/wasi-web/public/index.html -> lib/wasi-web/public/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!doctype html>",
          "2: <html>",
          "3:   <head>",
          "4:     <meta charset=\"utf-8\" />",
          "5:     <meta name=\"Description\" content=\"The Wasmer Shell is an browser based operating system powered by wasmer.io that integrates that allows the WebAssembly community to assembly and build browser hosted applications.\">",
          "6:     <meta property=\"og:url\" content=\"https://wasmer.sh\" />",
          "7:     <meta property=\"og:title\" content=\"wasmer.sh\" />",
          "8:     <meta property=\"og:description\" content=\"An browser based operating system powered by wasmer.io that integrates that allows the WebAssembly community to assembly and build browser hosted applications\" />",
          "9:     <meta property=\"og:image\" content=\"https://wasmer.sh/favicon.png\" />",
          "10:     <meta property=\"og:type\" content=\"website\" />",
          "11:     <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">",
          "12:     <meta name=\"mobile-web-app-capable\" content=\"yes\">",
          "13:     <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">",
          "14:     <link rel=\"stylesheet\" href=\"xterm.css\" />",
          "15:     <link rel=\"stylesheet\" href=\"wasmer.css\" />",
          "16:     <link rel=\"icon\" href=\"/favicon.png\">",
          "17:     <title>wasmer.sh</title>",
          "18:     <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />",
          "19:     <script type=\"module\" defer=\"defer\" src=\"main.js\"></script>",
          "20:   </head>",
          "22:   <body>",
          "23:     <canvas id=\"frontBuffer\"></canvas>",
          "24:     <div id=\"terminal\"></div>",
          "25:   </body>",
          "26: </html>",
          "",
          "---------------"
        ],
        "lib/wasi-web/public/wasmer.css||lib/wasi-web/public/wasmer.css": [
          "File: lib/wasi-web/public/wasmer.css -> lib/wasi-web/public/wasmer.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @import url('https://fonts.googleapis.com/css2?family=Fira+Mono&display=swap');",
          "3: html, body {",
          "4:   margin: 0px;",
          "5:   height: 100%;",
          "6:   width: 100%;",
          "7:   background: black;",
          "8: }",
          "10: #frontBuffer {",
          "11:   width: 1px;",
          "12:   height: 1px;",
          "13:   display: none;",
          "14: }",
          "16: #terminal {",
          "17:   width: 100%;",
          "18:   height: 100%;",
          "19:   font-size: 16px;",
          "20:   line-height: 17px;",
          "21:   background: black;",
          "22: }",
          "24: html {",
          "25:   overflow: hidden;",
          "26:   width: 100%;",
          "27: }",
          "29: body {",
          "30:   position: fixed;",
          "31:   overflow: hidden;",
          "32:   margin: 5px;",
          "33: }",
          "36:   box-sizing: border-box;",
          "37: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/public/worker.js||lib/wasi-web/public/worker.js": [
          "File: lib/wasi-web/public/worker.js -> lib/wasi-web/public/worker.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export function startWorker(module, memory, state, opts, helper) {",
          "6:     const worker = new Worker(new URL('./worker.js',",
          "7:         import.meta.url), opts);",
          "9:     try {",
          "10:         worker.postMessage([module, memory, state, helper.mainJS()]);",
          "11:     } catch(err) {",
          "12:         return new Promise((res, rej) => {",
          "13:             rej(err);",
          "14:         });",
          "15:     }",
          "17:     return new Promise((res, rej) => {",
          "18:       worker.onmessage = async ev => {",
          "19:         if (ev.data === 'started') res();",
          "20:         else {",
          "21:             const importFrom = (typeof __webpack_require__ === 'function') ? import('../../..') : import(mainJS);",
          "22:             const {",
          "23:                 worker_schedule_task,",
          "24:             } = await importFrom;",
          "26:             let [module, memory, state] = event.data;",
          "27:             worker_schedule_task(module, memory, state);",
          "28:         }",
          "29:       };",
          "30:       worker.onerror = rej;",
          "31:     });",
          "32: }",
          "33: export function startWasm(module, memory, ctx, opts, helper, wasm_module, wasm_memory) {",
          "34:     const worker = new Worker(new URL('./worker.js',",
          "35:         import.meta.url), opts);",
          "37:     try {",
          "38:         worker.postMessage([module, memory, ctx, helper.mainJS(), wasm_module, wasm_memory]);",
          "39:     } catch(err) {",
          "40:         return new Promise((res, rej) => {",
          "41:             rej(err);",
          "42:         });",
          "43:     }",
          "45:     return new Promise((res, rej) => {",
          "46:       worker.onmessage = async ev => {",
          "47:         if (ev.data === 'started') res();",
          "48:         else {",
          "49:             const importFrom = (typeof __webpack_require__ === 'function') ? import('../../..') : import(mainJS);",
          "50:             const {",
          "51:                 worker_schedule_task,",
          "52:             } = await importFrom;",
          "54:             let [module, memory, state] = event.data;",
          "55:             worker_schedule_task(module, memory, state);",
          "56:         }",
          "57:       };",
          "58:       worker.onerror = rej;",
          "59:     });",
          "60: }",
          "61: export function scheduleTask(task, module, memory) {",
          "62:     postMessage([task, module, memory]);",
          "63: }",
          "65: export function isWorker() {",
          "66:     return 'WorkerGlobalScope' in self && self instanceof WorkerGlobalScope;",
          "67: }",
          "70: if (isWorker()) {",
          "72:     Error.stackTraceLimit = 50;",
          "76:     self.onmessage = async event => {",
          "85:         if (event.data.length == 4) {",
          "86:             let [module, memory, state, mainJS] = event.data;",
          "87:             const importFrom = (typeof __webpack_require__ === 'function') ? import('../../..') : import(mainJS);",
          "88:             try {",
          "89:                 const {",
          "90:                     default: init,",
          "91:                     worker_entry_point,",
          "92:                     worker_entry_point_with_val",
          "93:                 } = await importFrom;",
          "94:                 await init(module, memory);",
          "96:                 worker_entry_point(state);",
          "97:                 postMessage('started');",
          "99:                 self.onmessage = event => {",
          "100:                     console.error(\"Unexpected message\", event);",
          "101:                 }",
          "102:             } catch (err) {",
          "104:                 setTimeout(() => {",
          "105:                     throw err;",
          "107:                     close();",
          "108:                 });",
          "109:                 throw err;",
          "110:             }",
          "111:         } else {",
          "112:             let [module, memory, ctx, mainJS, wasm_module, wasm_memory] = event.data;",
          "113:             const importFrom = (typeof __webpack_require__ === 'function') ? import('../../..') : import(mainJS);",
          "114:             try {",
          "115:                 const {",
          "116:                     default: init,",
          "117:                     wasm_entry_point,",
          "118:                 } = await importFrom;",
          "119:                 await init(module, memory);",
          "121:                 wasm_entry_point(ctx, wasm_module, wasm_memory);",
          "122:                 postMessage('started');",
          "124:                 self.onmessage = event => {",
          "125:                     console.error(\"Unexpected message\", event);",
          "126:                 }",
          "127:             } catch (err) {",
          "129:                 setTimeout(() => {",
          "130:                     throw err;",
          "132:                     close();",
          "133:                 });",
          "134:                 throw err;",
          "135:             }",
          "136:         }",
          "137:     }",
          "138: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/common.rs||lib/wasi-web/src/common.rs": [
          "File: lib/wasi-web/src/common.rs -> lib/wasi-web/src/common.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use std::cell::Cell;",
          "3: use js_sys::Function;",
          "4: #[allow(unused_imports, dead_code)]",
          "5: use tracing::{debug, error, info, trace, warn};",
          "6: use wasm_bindgen::{prelude::*, JsCast};",
          "7: use wasm_bindgen_futures::*;",
          "8: use web_sys::*;",
          "10: #[wasm_bindgen]",
          "11: #[derive(Default)]",
          "12: pub struct AnimationFrameCallbackWrapper {",
          "14:     handle: Box<Cell<Option<i32>>>,",
          "15:     func: Option<Box<dyn FnMut() -> bool + 'static>>,",
          "16: }",
          "18: #[allow(clippy::option_map_unit_fn)]",
          "19: impl Drop for AnimationFrameCallbackWrapper {",
          "20:     fn drop(&mut self) {",
          "21:         self.handle.get().map(cancel_animation_frame);",
          "22:     }",
          "23: }",
          "25: pub(crate) fn set_panic_hook() {",
          "26:     console_error_panic_hook::set_once();",
          "27: }",
          "29: pub(crate) fn cancel_animation_frame(handle: i32) {",
          "30:     debug!(\"Cancelling {}..\", handle);",
          "32:     web_sys::window()",
          "33:         .unwrap()",
          "34:         .cancel_animation_frame(handle)",
          "35:         .unwrap()",
          "36: }",
          "38: impl AnimationFrameCallbackWrapper /*<'a>*/ {",
          "39:     pub fn new() -> Self {",
          "40:         Self {",
          "41:             handle: Box::new(Cell::new(None)),",
          "42:             func: None,",
          "43:         }",
          "44:     }",
          "46:     pub fn leak(self) -> &'static mut Self {",
          "47:         Box::leak(Box::new(self))",
          "48:     }",
          "53:     pub fn safe_start(&'static mut self, func: impl FnMut() -> bool + 'static) {",
          "54:         unsafe { self.inner(func) }",
          "55:     }",
          "59:     #[inline(never)]",
          "60:     pub unsafe fn start<'s, 'f: 's>(&'s mut self, func: impl FnMut() -> bool + 'f) {",
          "61:         debug!(\"\"); // load bearing, somehow...",
          "62:         self.inner(func)",
          "63:     }",
          "65:     #[allow(unused_unsafe, clippy::borrowed_box)]",
          "66:     unsafe fn inner<'s, 'f: 's>(&'s mut self, func: impl FnMut() -> bool + 'f) {",
          "67:         if let Some(handle) = self.handle.get() {",
          "68:             cancel_animation_frame(handle)",
          "69:         }",
          "71:         let func: Box<dyn FnMut() -> bool + 'f> = Box::new(func);",
          "73:         let func: Box<dyn FnMut() -> bool + 'static> = unsafe { core::mem::transmute(func) };",
          "74:         self.func = Some(func);",
          "80:         let wrapper: &'static mut Self = unsafe { core::mem::transmute(self) };",
          "82:         let window = web_sys::window().unwrap();",
          "84:         fn recurse(",
          "85:             f: &'static mut Box<dyn FnMut() -> bool + 'static>,",
          "86:             h: &'static Cell<Option<i32>>,",
          "87:             window: Window,",
          "88:         ) -> Function {",
          "89:             let val = Closure::once_into_js(move || {",
          "91:                 let f = f;",
          "93:                 if h.get().is_none() {",
          "94:                     warn!(\"you should never see this...\");",
          "95:                     return;",
          "96:                 }",
          "98:                 if (f)() {",
          "99:                     let next = recurse(f, h, window.clone());",
          "100:                     let id = window.request_animation_frame(&next).unwrap();",
          "101:                     h.set(Some(id));",
          "102:                 } else {",
          "110:                     let _ = h.take();",
          "111:                 }",
          "112:             });",
          "114:             val.dyn_into().unwrap()",
          "115:         }",
          "117:         let func: &'static mut Box<dyn FnMut() -> bool + 'static> = wrapper.func.as_mut().unwrap();",
          "118:         let starting = recurse(func, &wrapper.handle, window.clone());",
          "119:         wrapper",
          "120:             .handle",
          "121:             .set(Some(window.request_animation_frame(&starting).unwrap()));",
          "122:     }",
          "123: }",
          "125: fn fetch_internal(request: &Request) -> JsFuture {",
          "126:     if is_worker() {",
          "127:         let global = js_sys::global();",
          "128:         JsFuture::from(",
          "129:             global",
          "130:                 .dyn_into::<WorkerGlobalScope>()",
          "131:                 .unwrap()",
          "132:                 .fetch_with_request(request),",
          "133:         )",
          "134:     } else {",
          "135:         JsFuture::from(web_sys::window().unwrap().fetch_with_request(request))",
          "136:     }",
          "137: }",
          "139: pub async fn fetch(",
          "140:     url: &str,",
          "141:     method: &str,",
          "142:     _gzip: bool,",
          "143:     cors_proxy: Option<String>,",
          "144:     headers: Vec<(String, String)>,",
          "145:     data: Option<Vec<u8>>,",
          "146: ) -> Result<Response, anyhow::Error> {",
          "147:     let mut opts = RequestInit::new();",
          "148:     opts.method(method);",
          "149:     opts.mode(RequestMode::Cors);",
          "151:     if let Some(data) = data {",
          "152:         let data_len = data.len();",
          "153:         let array = js_sys::Uint8Array::new_with_length(data_len as u32);",
          "154:         array.copy_from(&data[..]);",
          "156:         opts.body(Some(&array));",
          "157:     }",
          "159:     let request = {",
          "160:         let request = Request::new_with_str_and_init(&url, &opts)",
          "161:             .map_err(|_| anyhow::anyhow!(\"Could not construct request object\"))?;",
          "163:         let set_headers = request.headers();",
          "164:         for (name, val) in headers.iter() {",
          "165:             set_headers.set(name.as_str(), val.as_str()).map_err(|_| {",
          "166:                 anyhow::anyhow!(\"could not apply request header: '{name}': '{val}'\")",
          "167:             })?;",
          "168:         }",
          "169:         request",
          "170:     };",
          "172:     let resp_value = match fetch_internal(&request).await.ok() {",
          "173:         Some(a) => a,",
          "174:         None => {",
          "177:             let url_store;",
          "178:             let url = if let Some(cors_proxy) = cors_proxy {",
          "179:                 url_store = format!(\"https://{}/{}\", cors_proxy, url);",
          "180:                 url_store.as_str()",
          "181:             } else {",
          "183:                 return Err(anyhow::anyhow!(\"Could not fetch '{url}'\"));",
          "184:             };",
          "186:             let request = Request::new_with_str_and_init(url, &opts)",
          "187:                 .map_err(|_| anyhow::anyhow!(\"Could not construct request for url '{url}'\"))?;",
          "189:             let set_headers = request.headers();",
          "190:             for (name, val) in headers.iter() {",
          "191:                 set_headers.set(name.as_str(), val.as_str()).map_err(|_| {",
          "192:                     anyhow::anyhow!(\"Could not apply request header: '{name}': '{val}'\")",
          "193:                 })?;",
          "194:             }",
          "196:             fetch_internal(&request).await.map_err(|_| {",
          "198:                 anyhow::anyhow!(\"Could not fetch '{url}'\")",
          "199:             })?",
          "200:         }",
          "201:     };",
          "202:     assert!(resp_value.is_instance_of::<Response>());",
          "203:     let resp: Response = resp_value.dyn_into().unwrap();",
          "205:     if resp.status() < 200 || resp.status() >= 400 {",
          "206:         debug!(\"fetch-failed: {}\", resp.status_text());",
          "207:         return Err(anyhow::anyhow!(",
          "208:             \"Request to '{url}' failed with status {}\",",
          "209:             resp.status()",
          "210:         ));",
          "211:     }",
          "213:     Ok(resp)",
          "214: }",
          "217: pub async fn fetch_data(",
          "218:     url: &str,",
          "219:     method: &str,",
          "220:     gzip: bool,",
          "221:     cors_proxy: Option<String>,",
          "222:     headers: Vec<(String, String)>,",
          "223:     data: Option<Vec<u8>>,",
          "224: ) -> Result<Vec<u8>, u32> {",
          "225:     Ok(get_response_data(fetch(url, method, gzip, cors_proxy, headers, data).await?).await?)",
          "226: }",
          "229: pub async fn get_response_data(resp: Response) -> Result<Vec<u8>, anyhow::Error> {",
          "230:     let resp = { JsFuture::from(resp.array_buffer().unwrap()) };",
          "232:     let arrbuff_value = resp.await.map_err(|_| {",
          "234:         anyhow::anyhow!(\"Could not retrieve response body\")",
          "235:     })?;",
          "236:     assert!(arrbuff_value.is_instance_of::<js_sys::ArrayBuffer>());",
          "239:     let typebuff: js_sys::Uint8Array = js_sys::Uint8Array::new(&arrbuff_value);",
          "240:     let ret = typebuff.to_vec();",
          "241:     Ok(ret)",
          "242: }",
          "244: #[wasm_bindgen(module = \"/public/worker.js\")]",
          "245: extern \"C\" {",
          "246:     #[wasm_bindgen(js_name = \"isWorker\")]",
          "247:     pub fn is_worker() -> bool;",
          "248: }",
          "250: pub mod console {",
          "251:     use wasm_bindgen::prelude::*;",
          "253:     #[wasm_bindgen]",
          "254:     extern \"C\" {",
          "255:         #[wasm_bindgen(js_namespace = console)]",
          "256:         pub fn log(s: &str);",
          "257:     }",
          "258: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/glue.rs||lib/wasi-web/src/glue.rs": [
          "File: lib/wasi-web/src/glue.rs -> lib/wasi-web/src/glue.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: use std::{collections::HashMap, sync::Arc};",
          "7: use tokio::sync::mpsc;",
          "8: #[allow(unused_imports, dead_code)]",
          "9: use tracing::{debug, error, info, trace, warn};",
          "10: use wasm_bindgen::{prelude::*, JsCast};",
          "11: use wasmer_wasix::{",
          "12:     bin_factory::ModuleCache,",
          "13:     os::{Console, InputEvent, Tty, TtyOptions},",
          "14:     Pipe,",
          "15: };",
          "16: use web_sys::{HtmlCanvasElement, WebGl2RenderingContext};",
          "17: #[allow(unused_imports)]",
          "18: use xterm_js_rs::addons::fit::FitAddon;",
          "19: #[allow(unused_imports)]",
          "20: use xterm_js_rs::addons::web_links::WebLinksAddon;",
          "21: #[allow(unused_imports)]",
          "22: use xterm_js_rs::addons::webgl::WebglAddon;",
          "23: use xterm_js_rs::{LogLevel, OnKeyEvent, Terminal, TerminalOptions, Theme};",
          "25: use super::{common::*, pool::*};",
          "26: use crate::runtime::{TermStdout, TerminalCommandRx, WebRuntime};",
          "28: #[macro_export]",
          "29: #[doc(hidden)]",
          "30: macro_rules! csi {",
          "31:     ($( $l:expr ),*) => { concat!(\"\\x1B[\", $( $l ),*) };",
          "32: }",
          "34: #[wasm_bindgen(start)]",
          "35: pub fn main() {",
          "37:     set_panic_hook();",
          "38: }",
          "40: pub const DEFAULT_BOOT_WEBC: &'static str = \"sharrattj/bash\";",
          "42: pub const DEFAULT_BOOT_USES: [&'static str; 2] = [\"sharrattj/coreutils\", \"sharrattj/catsay\"];",
          "44: #[wasm_bindgen]",
          "45: pub fn start() -> Result<(), JsValue> {",
          "46:     #[wasm_bindgen]",
          "47:     extern \"C\" {",
          "48:         #[wasm_bindgen(js_namespace = navigator, js_name = userAgent)]",
          "49:         static USER_AGENT: String;",
          "50:     }",
          "53:     tracing_wasm::set_as_global_default_with_config(",
          "54:         tracing_wasm::WASMLayerConfigBuilder::new()",
          "55:             .set_report_logs_in_timings(false)",
          "56:             .set_max_level(tracing::Level::TRACE)",
          "57:             .build(),",
          "58:     );",
          "60:     info!(\"glue::start\");",
          "62:     let terminal = Terminal::new(",
          "63:         TerminalOptions::new()",
          "64:             .with_log_level(LogLevel::Info)",
          "65:             .with_rows(50)",
          "66:             .with_cursor_blink(true)",
          "67:             .with_cursor_width(10)",
          "68:             .with_font_size(16u32)",
          "69:             .with_draw_bold_text_in_bright_colors(true)",
          "70:             .with_right_click_selects_word(true)",
          "71:             .with_theme(&Theme::new()),",
          "72:     );",
          "74:     let window = web_sys::window().unwrap();",
          "75:     let location = window.location().href().unwrap();",
          "77:     let user_agent = USER_AGENT.clone();",
          "78:     let is_mobile = wasmer_wasix::os::common::is_mobile(&user_agent);",
          "79:     debug!(\"user_agent: {}\", user_agent);",
          "81:     let elem = window",
          "82:         .document()",
          "83:         .unwrap()",
          "84:         .get_element_by_id(\"terminal\")",
          "85:         .unwrap();",
          "87:     terminal.open(elem.clone().dyn_into()?);",
          "89:     let (term_tx, mut term_rx) = mpsc::unbounded_channel();",
          "90:     {",
          "91:         let terminal: Terminal = terminal.clone().dyn_into().unwrap();",
          "92:         wasm_bindgen_futures::spawn_local(async move {",
          "93:             while let Some(cmd) = term_rx.recv().await {",
          "94:                 match cmd {",
          "95:                     TerminalCommandRx::Print(text) => {",
          "96:                         terminal.write(text.as_str());",
          "97:                     }",
          "98:                     TerminalCommandRx::Cls => {",
          "99:                         terminal.clear();",
          "100:                     }",
          "101:                 }",
          "102:             }",
          "103:         });",
          "104:     }",
          "106:     let front_buffer = window",
          "107:         .document()",
          "108:         .unwrap()",
          "109:         .get_element_by_id(\"frontBuffer\")",
          "110:         .unwrap();",
          "111:     let front_buffer: HtmlCanvasElement = front_buffer",
          "112:         .dyn_into::<HtmlCanvasElement>()",
          "113:         .map_err(|_| ())",
          "114:         .unwrap();",
          "115:     let webgl2 = front_buffer",
          "116:         .get_context(\"webgl2\")?",
          "117:         .unwrap()",
          "118:         .dyn_into::<WebGl2RenderingContext>()?;",
          "120:     let pool = WebThreadPool::new_with_max_threads().unwrap();",
          "121:     let tty_options = TtyOptions::default();",
          "123:     let (stdin_tx, stdin_rx) = Pipe::channel();",
          "124:     let stdout = TermStdout::new(term_tx, tty_options.clone());",
          "125:     let stderr = stdout.clone();",
          "127:     let runtime = Arc::new(WebRuntime::new(pool.clone(), tty_options.clone(), webgl2));",
          "128:     let mut tty = Tty::new(",
          "129:         Box::new(stdin_tx),",
          "130:         Box::new(stdout.clone()),",
          "131:         is_mobile,",
          "132:         tty_options,",
          "133:     );",
          "135:     let compiled_modules = Arc::new(ModuleCache::new(None, None, false));",
          "137:     let location = url::Url::parse(location.as_str()).unwrap();",
          "138:     let mut console = if let Some(init) = location",
          "139:         .query_pairs()",
          "140:         .filter(|(key, _)| key == \"init\")",
          "141:         .next()",
          "142:         .map(|(_, val)| val.to_string())",
          "143:     {",
          "144:         let mut console = Console::new(init.as_str(), runtime.clone(), compiled_modules);",
          "145:         console = console.with_no_welcome(true);",
          "146:         console",
          "147:     } else {",
          "148:         let mut console = Console::new(DEFAULT_BOOT_WEBC, runtime.clone(), compiled_modules);",
          "149:         console = console.with_uses(DEFAULT_BOOT_USES.iter().map(|a| a.to_string()).collect());",
          "150:         console",
          "151:     };",
          "153:     let mut env = HashMap::new();",
          "154:     if let Some(origin) = location.domain().clone() {",
          "155:         env.insert(\"ORIGIN\".to_string(), origin.to_string());",
          "156:     }",
          "157:     env.insert(\"LOCATION\".to_string(), location.to_string());",
          "159:     if let Some(prompt) = location",
          "160:         .query_pairs()",
          "161:         .filter(|(key, _)| key == \"prompt\")",
          "162:         .next()",
          "163:         .map(|(_, val)| val.to_string())",
          "164:     {",
          "165:         console = console.with_prompt(prompt);",
          "166:     }",
          "168:     if location",
          "169:         .query_pairs()",
          "170:         .any(|(key, _)| key == \"no_welcome\" || key == \"no-welcome\")",
          "171:     {",
          "172:         console = console.with_no_welcome(true);",
          "173:     }",
          "175:     if let Some(token) = location",
          "176:         .query_pairs()",
          "177:         .filter(|(key, _)| key == \"token\")",
          "178:         .next()",
          "179:         .map(|(_, val)| val.to_string())",
          "180:     {",
          "181:         console = console.with_token(token);",
          "182:     }",
          "184:     console = console",
          "185:         .with_user_agent(user_agent.as_str())",
          "186:         .with_stdin(Box::new(stdin_rx))",
          "187:         .with_stdout(Box::new(stdout))",
          "188:         .with_stderr(Box::new(stderr))",
          "189:         .with_env(env);",
          "191:     let (tx, mut rx) = mpsc::unbounded_channel();",
          "193:     let tx_key = tx.clone();",
          "194:     let callback = {",
          "195:         Closure::wrap(Box::new(move |_e: OnKeyEvent| {",
          "197:             tx_key.send(InputEvent::Key).unwrap();",
          "198:         }) as Box<dyn FnMut(_)>)",
          "199:     };",
          "200:     terminal.on_key(callback.as_ref().unchecked_ref());",
          "201:     callback.forget();",
          "203:     let tx_data = tx.clone();",
          "204:     let callback = {",
          "205:         Closure::wrap(Box::new(move |data: String| {",
          "206:             tx_data.send(InputEvent::Data(data)).unwrap();",
          "207:         }) as Box<dyn FnMut(_)>)",
          "208:     };",
          "209:     terminal.on_data(callback.as_ref().unchecked_ref());",
          "210:     callback.forget();",
          "213:     {",
          "214:         let addon = FitAddon::new();",
          "215:         terminal.load_addon(addon.clone().dyn_into::<FitAddon>()?.into());",
          "216:         addon.fit();",
          "217:     }",
          "221:     {",
          "222:         let addon = WebLinksAddon::new();",
          "223:         terminal.load_addon(addon.clone().dyn_into::<WebLinksAddon>()?.into());",
          "224:         addon.fit();",
          "225:     }",
          "229:     {",
          "230:         let addon = WebglAddon::new(None);",
          "231:         terminal.load_addon(addon.clone().dyn_into::<WebglAddon>()?.into());",
          "232:     }",
          "235:     {",
          "236:         let front_buffer: HtmlCanvasElement = front_buffer.clone().dyn_into().unwrap();",
          "237:         let terminal: Terminal = terminal.clone().dyn_into().unwrap();",
          "240:         #[allow(unused_unsafe)]",
          "241:         unsafe {",
          "242:             term_fit(terminal, front_buffer)",
          "243:         };",
          "244:     }",
          "246:     {",
          "247:         let tty_options = tty.options();",
          "248:         let front_buffer: HtmlCanvasElement = front_buffer.clone().dyn_into().unwrap();",
          "249:         let terminal: Terminal = terminal.clone().dyn_into().unwrap();",
          "250:         let closure = {",
          "251:             Closure::wrap(Box::new(move || {",
          "252:                 let front_buffer: HtmlCanvasElement = front_buffer.clone().dyn_into().unwrap();",
          "253:                 let terminal: Terminal = terminal.clone().dyn_into().unwrap();",
          "255:                 #[allow(unused_unsafe)]",
          "256:                 unsafe {",
          "257:                     term_fit(",
          "258:                         terminal.clone().dyn_into().unwrap(),",
          "259:                         front_buffer.clone().dyn_into().unwrap(),",
          "260:                     );",
          "261:                 }",
          "263:                 let tty_options = tty_options.clone();",
          "264:                 wasm_bindgen_futures::spawn_local(async move {",
          "265:                     let cols = terminal.get_cols();",
          "266:                     let rows = terminal.get_rows();",
          "267:                     tty_options.set_cols(cols);",
          "268:                     tty_options.set_rows(rows);",
          "269:                 });",
          "270:             }) as Box<dyn FnMut()>)",
          "271:         };",
          "272:         window.add_event_listener_with_callback(\"resize\", closure.as_ref().unchecked_ref())?;",
          "273:         window.add_event_listener_with_callback(",
          "274:             \"orientationchange\",",
          "275:             closure.as_ref().unchecked_ref(),",
          "276:         )?;",
          "277:         closure.forget();",
          "278:     }",
          "280:     terminal.focus();",
          "283:     wasm_bindgen_futures::spawn_local(async move {",
          "285:         #[allow(unused_unsafe)]",
          "286:         unsafe {",
          "287:             crate::glue::show_terminal()",
          "288:         };",
          "290:         let (run_tx, mut run_rx) = tokio::sync::mpsc::channel(1);",
          "291:         runtime.pool.spawn_dedicated(Box::new(move || {",
          "292:             let (_, process) = console.run().unwrap();",
          "294:             tty.set_signaler(Box::new(process.clone()));",
          "295:             let _ = run_tx.blocking_send((tty, console));",
          "296:         }));",
          "297:         let (mut tty, console) = run_rx.recv().await.unwrap();",
          "299:         while let Some(event) = rx.recv().await {",
          "300:             tty = tty.on_event(event).await;",
          "301:         }",
          "303:         drop(tty);",
          "304:         drop(console);",
          "305:     });",
          "307:     Ok(())",
          "308: }",
          "310: #[wasm_bindgen(module = \"/js/fit.ts\")]",
          "311: extern \"C\" {",
          "312:     #[wasm_bindgen(js_name = \"termFit\")]",
          "313:     fn term_fit(terminal: Terminal, front: HtmlCanvasElement);",
          "314: }",
          "316: #[wasm_bindgen(module = \"/js/gl.js\")]",
          "317: extern \"C\" {",
          "318:     #[wasm_bindgen(js_name = \"showTerminal\")]",
          "319:     pub fn show_terminal();",
          "320:     #[wasm_bindgen(js_name = \"showCanvas\")]",
          "321:     pub fn show_canvas();",
          "322: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/interval.rs||lib/wasi-web/src/interval.rs": [
          "File: lib/wasi-web/src/interval.rs -> lib/wasi-web/src/interval.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use wasm_bindgen::prelude::*;",
          "3: #[wasm_bindgen]",
          "4: extern \"C\" {",
          "5:     fn setInterval(closure: &Closure<dyn FnMut()>, millis: u32) -> f64;",
          "6:     fn cancelInterval(token: f64);",
          "7: }",
          "9: #[wasm_bindgen]",
          "10: #[derive(Debug)]",
          "11: pub struct LeakyInterval {",
          "12:     token: f64,",
          "13: }",
          "15: impl LeakyInterval {",
          "16:     pub fn new<F: 'static>(duration: std::time::Duration, f: F) -> LeakyInterval",
          "17:     where",
          "18:         F: FnMut(),",
          "19:     {",
          "20:         let closure = { Closure::wrap(Box::new(f) as Box<dyn FnMut()>) };",
          "21:         let millis = duration.as_millis() as u32;",
          "23:         #[allow(unused_unsafe)]",
          "24:         let token = unsafe { setInterval(&closure, millis) };",
          "25:         closure.forget();",
          "27:         LeakyInterval { token }",
          "28:     }",
          "29: }",
          "31: impl Drop for LeakyInterval {",
          "32:     fn drop(&mut self) {",
          "33:         #[allow(unused_unsafe)]",
          "34:         unsafe {",
          "35:             cancelInterval(self.token);",
          "36:         }",
          "37:     }",
          "38: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/lib.rs||lib/wasi-web/src/lib.rs": [
          "File: lib/wasi-web/src/lib.rs -> lib/wasi-web/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: mod common;",
          "2: mod glue;",
          "3: mod interval;",
          "4: mod pool;",
          "5: mod runtime;",
          "7: pub use glue::start;",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/pool.rs||lib/wasi-web/src/pool.rs": [
          "File: lib/wasi-web/src/pool.rs -> lib/wasi-web/src/pool.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #![allow(unused_imports)]",
          "2: use std::{",
          "3:     borrow::Borrow,",
          "4:     cell::RefCell,",
          "5:     collections::{HashMap, VecDeque},",
          "6:     fmt::Debug,",
          "7:     future::Future,",
          "8:     num::NonZeroU32,",
          "9:     ops::{Deref, DerefMut},",
          "10:     pin::Pin,",
          "11:     rc::Rc,",
          "12:     sync::{",
          "13:         atomic::{AtomicBool, AtomicU32, AtomicUsize, Ordering},",
          "14:         Arc, Mutex,",
          "15:     },",
          "16: };",
          "18: use bytes::Bytes;",
          "19: use derivative::*;",
          "20: use js_sys::{JsString, Promise, Uint8Array};",
          "21: use once_cell::sync::Lazy;",
          "22: use tokio::{",
          "23:     select,",
          "24:     sync::{broadcast, mpsc, oneshot, Semaphore},",
          "25: };",
          "26: #[allow(unused_imports, dead_code)]",
          "27: use tracing::{debug, error, info, trace, warn};",
          "28: use wasm_bindgen::{prelude::*, JsCast};",
          "29: use wasm_bindgen_futures::JsFuture;",
          "30: use wasmer_wasix::{",
          "31:     runtime::SpawnType,",
          "32:     wasmer::{vm::VMMemory, MemoryType, Module, Store, WASM_MAX_PAGES},",
          "33:     VirtualTaskManager, WasiThreadError,",
          "34: };",
          "35: use web_sys::{DedicatedWorkerGlobalScope, WorkerOptions, WorkerType};",
          "36: use xterm_js_rs::Terminal;",
          "38: use super::{common::*, interval::*};",
          "39: use crate::runtime::{build_memory_internal, WebTaskManager};",
          "41: pub type BoxRun<'a> = Box<dyn FnOnce() + Send + 'a>;",
          "43: pub type BoxRunAsync<'a, T> =",
          "44:     Box<dyn FnOnce() -> Pin<Box<dyn Future<Output = T> + 'static>> + Send + 'a>;",
          "46: #[derive(Debug, Clone, Copy)]",
          "47: enum WasmRunType {",
          "48:     Create,",
          "49:     CreateWithMemory(MemoryType),",
          "50:     Existing(MemoryType),",
          "51: }",
          "53: #[derive(Derivative)]",
          "54: #[derivative(Debug)]",
          "55: struct WasmRunCommand {",
          "56:     #[derivative(Debug = \"ignore\")]",
          "57:     run: Box<dyn FnOnce(Store, Module, Option<VMMemory>) + Send + 'static>,",
          "58:     ty: WasmRunType,",
          "59:     store: Store,",
          "60:     module_bytes: Bytes,",
          "61: }",
          "63: enum WasmRunMemory {",
          "64:     WithoutMemory,",
          "65:     WithMemory(MemoryType),",
          "66: }",
          "68: struct WasmRunContext {",
          "69:     cmd: WasmRunCommand,",
          "70:     memory: WasmRunMemory,",
          "71: }",
          "73: trait AssertSendSync: Send + Sync {}",
          "74: impl AssertSendSync for WebThreadPool {}",
          "76: #[wasm_bindgen]",
          "77: #[derive(Debug)]",
          "78: pub struct WebThreadPoolInner {",
          "79:     pool_reactors: Arc<PoolState>,",
          "80:     pool_dedicated: Arc<PoolState>,",
          "81: }",
          "83: #[wasm_bindgen]",
          "84: #[derive(Debug, Clone)]",
          "85: pub struct WebThreadPool {",
          "86:     inner: Arc<WebThreadPoolInner>,",
          "87: }",
          "89: impl Deref for WebThreadPool {",
          "90:     type Target = WebThreadPoolInner;",
          "92:     fn deref(&self) -> &Self::Target {",
          "93:         self.inner.deref()",
          "94:     }",
          "95: }",
          "97: enum Message {",
          "98:     Run(BoxRun<'static>),",
          "99:     RunAsync(BoxRunAsync<'static, ()>),",
          "100: }",
          "102: impl Debug for Message {",
          "103:     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "104:         match self {",
          "105:             Message::Run(_) => write!(f, \"run\"),",
          "106:             Message::RunAsync(_) => write!(f, \"run-async\"),",
          "107:         }",
          "108:     }",
          "109: }",
          "111: #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]",
          "112: enum PoolType {",
          "113:     Shared,",
          "114:     Dedicated,",
          "115: }",
          "117: #[derive(Derivative)]",
          "118: #[derivative(Debug)]",
          "119: struct IdleThread {",
          "120:     idx: usize,",
          "121:     #[derivative(Debug = \"ignore\")]",
          "122:     work: mpsc::UnboundedSender<Message>,",
          "123: }",
          "125: impl IdleThread {",
          "126:     #[allow(dead_code)]",
          "127:     fn consume(self, msg: Message) {",
          "128:         let _ = self.work.send(msg);",
          "129:     }",
          "130: }",
          "132: #[derive(Derivative)]",
          "133: #[derivative(Debug)]",
          "134: pub struct PoolState {",
          "135:     #[derivative(Debug = \"ignore\")]",
          "136:     idle_rx: Mutex<mpsc::UnboundedReceiver<IdleThread>>,",
          "137:     idle_tx: mpsc::UnboundedSender<IdleThread>,",
          "138:     idx_seed: AtomicUsize,",
          "139:     idle_size: usize,",
          "140:     blocking: bool,",
          "141:     spawn: mpsc::UnboundedSender<Message>,",
          "142:     #[allow(dead_code)]",
          "143:     type_: PoolType,",
          "144: }",
          "146: pub struct ThreadState {",
          "147:     pool: Arc<PoolState>,",
          "148:     #[allow(dead_code)]",
          "149:     idx: usize,",
          "150:     tx: mpsc::UnboundedSender<Message>,",
          "151:     rx: Mutex<Option<mpsc::UnboundedReceiver<Message>>>,",
          "152:     init: Mutex<Option<Message>>,",
          "153: }",
          "155: #[wasm_bindgen]",
          "156: pub struct LoaderHelper {}",
          "157: #[wasm_bindgen]",
          "158: impl LoaderHelper {",
          "159:     #[wasm_bindgen(js_name = mainJS)]",
          "160:     pub fn main_js(&self) -> JsString {",
          "161:         #[wasm_bindgen]",
          "162:         extern \"C\" {",
          "163:             #[wasm_bindgen(js_namespace = [\"import\", \"meta\"], js_name = url)]",
          "164:             static URL: JsString;",
          "165:         }",
          "167:         URL.clone()",
          "168:     }",
          "169: }",
          "171: #[wasm_bindgen(module = \"/public/worker.js\")]",
          "172: extern \"C\" {",
          "173:     #[wasm_bindgen(js_name = \"startWorker\")]",
          "174:     fn start_worker(",
          "175:         module: JsValue,",
          "176:         memory: JsValue,",
          "177:         shared_data: JsValue,",
          "178:         opts: WorkerOptions,",
          "179:         builder: LoaderHelper,",
          "180:     ) -> Promise;",
          "182:     #[wasm_bindgen(js_name = \"startWasm\")]",
          "183:     fn start_wasm(",
          "184:         module: JsValue,",
          "185:         memory: JsValue,",
          "186:         ctx: JsValue,",
          "187:         opts: WorkerOptions,",
          "188:         builder: LoaderHelper,",
          "189:         wasm_module: JsValue,",
          "190:         wasm_memory: JsValue,",
          "191:     ) -> Promise;",
          "193:     #[wasm_bindgen(js_name = \"scheduleTask\")]",
          "194:     fn schedule_task(task: JsValue, module: JsValue, memory: JsValue);",
          "195: }",
          "197: impl WebThreadPool {",
          "198:     pub fn new(size: usize) -> Result<WebThreadPool, JsValue> {",
          "199:         info!(\"pool::create(size={})\", size);",
          "201:         let (idle_tx1, idle_rx1) = mpsc::unbounded_channel();",
          "202:         let (idle_tx3, idle_rx3) = mpsc::unbounded_channel();",
          "204:         let (spawn_tx1, mut spawn_rx1) = mpsc::unbounded_channel();",
          "205:         let (spawn_tx3, mut spawn_rx3) = mpsc::unbounded_channel();",
          "207:         let pool_reactors = PoolState {",
          "208:             idle_rx: Mutex::new(idle_rx1),",
          "209:             idle_tx: idle_tx1,",
          "210:             idx_seed: AtomicUsize::new(0),",
          "211:             blocking: false,",
          "212:             idle_size: 2usize.max(size),",
          "213:             type_: PoolType::Shared,",
          "214:             spawn: spawn_tx1,",
          "215:         };",
          "217:         let pool_dedicated = PoolState {",
          "218:             idle_rx: Mutex::new(idle_rx3),",
          "219:             idle_tx: idle_tx3,",
          "220:             idx_seed: AtomicUsize::new(0),",
          "221:             blocking: true,",
          "222:             idle_size: 1usize.max(size),",
          "223:             type_: PoolType::Dedicated,",
          "224:             spawn: spawn_tx3,",
          "225:         };",
          "227:         let inner = Arc::new(WebThreadPoolInner {",
          "228:             pool_dedicated: Arc::new(pool_dedicated),",
          "229:             pool_reactors: Arc::new(pool_reactors),",
          "230:         });",
          "232:         let inner1 = inner.clone();",
          "233:         let inner3 = inner.clone();",
          "237:         wasm_bindgen_futures::spawn_local(async move {",
          "238:             loop {",
          "239:                 select! {",
          "240:                     spawn = spawn_rx1.recv() => {",
          "241:                         if let Some(spawn) = spawn { inner1.pool_reactors.expand(spawn); } else { break; }",
          "242:                     }",
          "243:                     spawn = spawn_rx3.recv() => {",
          "244:                         if let Some(spawn) = spawn { inner3.pool_dedicated.expand(spawn); } else { break; }",
          "245:                     }",
          "246:                 }",
          "247:             }",
          "248:         });",
          "250:         let pool = WebThreadPool { inner };",
          "252:         Ok(pool)",
          "253:     }",
          "255:     pub fn new_with_max_threads() -> Result<WebThreadPool, JsValue> {",
          "256:         #[wasm_bindgen]",
          "257:         extern \"C\" {",
          "258:             #[wasm_bindgen(js_namespace = navigator, js_name = hardwareConcurrency)]",
          "259:             static HARDWARE_CONCURRENCY: usize;",
          "260:         }",
          "261:         let pool_size = std::cmp::max(*HARDWARE_CONCURRENCY, 1);",
          "262:         debug!(\"pool::max_threads={}\", pool_size);",
          "263:         Self::new(pool_size)",
          "264:     }",
          "266:     pub fn spawn_shared(&self, task: BoxRunAsync<'static, ()>) {",
          "267:         self.inner.pool_reactors.spawn(Message::RunAsync(task));",
          "268:     }",
          "270:     pub fn spawn_wasm(",
          "271:         &self,",
          "272:         run: impl FnOnce(Store, Module, Option<VMMemory>) + Send + 'static,",
          "273:         wasm_store: Store,",
          "274:         wasm_module: Module,",
          "275:         spawn_type: SpawnType,",
          "276:     ) -> Result<(), WasiThreadError> {",
          "277:         let mut wasm_memory = JsValue::null();",
          "278:         let run_type = match spawn_type {",
          "279:             SpawnType::Create => WasmRunType::Create,",
          "280:             SpawnType::CreateWithType(mem) => WasmRunType::CreateWithMemory(mem.ty),",
          "281:             SpawnType::NewThread(memory) => {",
          "282:                 let (mem, ty) = memory.clone().into();",
          "283:                 wasm_memory = mem;",
          "284:                 WasmRunType::Existing(ty)",
          "285:             }",
          "286:         };",
          "288:         let task = Box::new(WasmRunCommand {",
          "289:             run: Box::new(move |store, module, memory| {",
          "290:                 run(store, module, memory);",
          "291:             }),",
          "292:             ty: run_type,",
          "293:             store: wasm_store,",
          "294:             module_bytes: wasm_module.serialize().unwrap(),",
          "295:         });",
          "296:         let task = Box::into_raw(task);",
          "298:         schedule_task(",
          "299:             JsValue::from(task as u32),",
          "300:             JsValue::from(wasm_module),",
          "301:             wasm_memory,",
          "302:         );",
          "303:         Ok(())",
          "304:     }",
          "306:     pub fn spawn_dedicated(&self, task: BoxRun<'static>) {",
          "307:         self.inner.pool_dedicated.spawn(Message::Run(task));",
          "308:     }",
          "310:     pub fn spawn_dedicated_async(&self, task: BoxRunAsync<'static, ()>) {",
          "311:         self.inner.pool_dedicated.spawn(Message::RunAsync(task));",
          "312:     }",
          "313: }",
          "315: async fn _compile_module(bytes: &[u8]) -> Result<js_sys::WebAssembly::Module, anyhow::Error> {",
          "316:     let js_bytes = unsafe { Uint8Array::view(bytes) };",
          "317:     Ok(",
          "318:         match wasm_bindgen_futures::JsFuture::from(js_sys::WebAssembly::compile(&js_bytes.into()))",
          "319:             .await",
          "320:         {",
          "321:             Ok(a) => match a.dyn_into::<js_sys::WebAssembly::Module>() {",
          "322:                 Ok(a) => a,",
          "323:                 Err(err) => {",
          "324:                     return Err(anyhow::format_err!(",
          "325:                         \"Failed to compile module - {}\",",
          "326:                         err.as_string().unwrap_or_else(|| format!(\"{:?}\", err))",
          "327:                     ));",
          "328:                 }",
          "329:             },",
          "330:             Err(err) => {",
          "331:                 return Err(anyhow::format_err!(",
          "332:                     \"WebAssembly failed to compile - {}\",",
          "333:                     err.as_string().unwrap_or_else(|| format!(\"{:?}\", err))",
          "334:                 ));",
          "335:             }",
          "336:         }, //js_sys::WebAssembly::Module::new(&js_bytes.into()).unwrap()",
          "337:     )",
          "338: }",
          "340: impl PoolState {",
          "341:     fn spawn(&self, msg: Message) {",
          "342:         for _ in 0..10 {",
          "343:             if let Ok(mut guard) = self.idle_rx.try_lock() {",
          "344:                 if let Ok(thread) = guard.try_recv() {",
          "345:                     thread.consume(msg);",
          "346:                     return;",
          "347:                 }",
          "348:                 break;",
          "349:             }",
          "350:             std::thread::yield_now();",
          "351:         }",
          "353:         self.spawn.send(msg).unwrap();",
          "354:     }",
          "356:     fn expand(self: &Arc<Self>, init: Message) {",
          "357:         let (tx, rx) = mpsc::unbounded_channel();",
          "358:         let idx = self.idx_seed.fetch_add(1usize, Ordering::Release);",
          "359:         let state = Arc::new(ThreadState {",
          "360:             pool: Arc::clone(self),",
          "361:             idx,",
          "362:             tx,",
          "363:             rx: Mutex::new(Some(rx)),",
          "364:             init: Mutex::new(Some(init)),",
          "365:         });",
          "366:         Self::start_worker_now(idx, state, None);",
          "367:     }",
          "369:     pub fn start_worker_now(",
          "370:         idx: usize,",
          "371:         state: Arc<ThreadState>,",
          "372:         should_warn_on_error: Option<Terminal>,",
          "373:     ) {",
          "374:         let mut opts = WorkerOptions::new();",
          "375:         opts.type_(WorkerType::Module);",
          "376:         opts.name(&*format!(\"Worker-{:?}-{}\", state.pool.type_, idx));",
          "378:         let ptr = Arc::into_raw(state);",
          "380:         let result = wasm_bindgen_futures::JsFuture::from(start_worker(",
          "381:             wasm_bindgen::module(),",
          "382:             wasm_bindgen::memory(),",
          "383:             JsValue::from(ptr as u32),",
          "384:             opts,",
          "385:             LoaderHelper {},",
          "386:         ));",
          "388:         wasm_bindgen_futures::spawn_local(async move {",
          "389:             _process_worker_result(result, should_warn_on_error).await;",
          "390:         });",
          "391:     }",
          "392: }",
          "394: async fn _process_worker_result(result: JsFuture, should_warn_on_error: Option<Terminal>) {",
          "395:     let ret = result.await;",
          "396:     if let Err(err) = ret {",
          "397:         let err = err.as_string().unwrap_or_else(|| format!(\"{:?}\", err));",
          "398:         error!(\"failed to start worker thread - {}\", err);",
          "400:         if let Some(term) = should_warn_on_error {",
          "401:             term.write(",
          "402:                 wasmer_wasix::os::cconst::ConsoleConst::BAD_WORKER",
          "403:                     .replace(\"\\n\", \"\\r\\n\")",
          "404:                     .replace(\"\\\\x1B\", \"\\x1B\")",
          "405:                     .replace(\"{error}\", err.as_str())",
          "406:                     .as_str(),",
          "407:             );",
          "408:         }",
          "410:         return;",
          "411:     }",
          "412: }",
          "414: impl ThreadState {",
          "415:     fn work(state: Arc<ThreadState>) {",
          "416:         let thread_index = state.idx;",
          "417:         info!(",
          "418:             \"worker started (index={}, type={:?})\",",
          "419:             thread_index, state.pool.type_",
          "420:         );",
          "424:         let mut work_rx = {",
          "425:             let mut lock = state.rx.lock().unwrap();",
          "426:             lock.take().unwrap()",
          "427:         };",
          "430:         let mut work = {",
          "431:             let mut lock = state.init.lock().unwrap();",
          "432:             lock.take()",
          "433:         };",
          "436:         let work_tx = state.tx.clone();",
          "437:         let pool = Arc::clone(&state.pool);",
          "438:         let driver = async move {",
          "439:             let global = js_sys::global().unchecked_into::<DedicatedWorkerGlobalScope>();",
          "441:             loop {",
          "443:                 while let Some(task) = work {",
          "444:                     match task {",
          "445:                         Message::Run(task) => {",
          "446:                             task();",
          "447:                         }",
          "448:                         Message::RunAsync(task) => {",
          "449:                             let future = task();",
          "450:                             if pool.blocking {",
          "451:                                 future.await;",
          "452:                             } else {",
          "453:                                 wasm_bindgen_futures::spawn_local(async move {",
          "454:                                     future.await;",
          "455:                                 });",
          "456:                             }",
          "457:                         }",
          "458:                     }",
          "461:                     work = work_rx.try_recv().ok();",
          "462:                 }",
          "469:                 if let Ok(mut lock) = state.pool.idle_rx.try_lock() {",
          "470:                     let mut others = Vec::new();",
          "471:                     while let Ok(other) = lock.try_recv() {",
          "472:                         others.push(other);",
          "473:                     }",
          "476:                     others.sort_by_key(|k| k.idx);",
          "480:                     if others.len() + 1 > pool.idle_size {",
          "482:                         let existing = others",
          "483:                             .iter()",
          "484:                             .map(|a| a.idx)",
          "485:                             .filter(|a| *a < thread_index)",
          "486:                             .count();",
          "487:                         if existing >= pool.idle_size {",
          "488:                             for other in others {",
          "489:                                 state.pool.idle_tx.send(other).unwrap();",
          "490:                             }",
          "491:                             info!(",
          "492:                                 \"worker closed (index={}, type={:?})\",",
          "493:                                 thread_index, pool.type_",
          "494:                             );",
          "495:                             break;",
          "496:                         } else {",
          "498:                             let leftover_chairs = others.len() - 1;",
          "499:                             for other in others.into_iter().take(leftover_chairs) {",
          "500:                                 state.pool.idle_tx.send(other).unwrap();",
          "501:                             }",
          "502:                         }",
          "503:                     } else {",
          "505:                         for other in others {",
          "506:                             state.pool.idle_tx.send(other).unwrap();",
          "507:                         }",
          "508:                     }",
          "509:                 }",
          "513:                 trace!(",
          "514:                     \"pool is idle (thread_index={}, type={:?})\",",
          "515:                     thread_index,",
          "516:                     pool.type_",
          "517:                 );",
          "519:                 let idle = IdleThread {",
          "520:                     idx: thread_index,",
          "521:                     work: work_tx.clone(),",
          "522:                 };",
          "523:                 if let Err(_) = state.pool.idle_tx.send(idle) {",
          "524:                     info!(",
          "525:                         \"pool is closed (thread_index={}, type={:?})\",",
          "526:                         thread_index, pool.type_",
          "527:                     );",
          "528:                     break;",
          "529:                 }",
          "532:                 work = match work_rx.recv().await {",
          "533:                     Some(a) => Some(a),",
          "534:                     None => {",
          "535:                         info!(",
          "536:                             \"worker closed (index={}, type={:?})\",",
          "537:                             thread_index, pool.type_",
          "538:                         );",
          "539:                         break;",
          "540:                     }",
          "541:                 };",
          "542:             }",
          "544:             global.close();",
          "545:         };",
          "546:         wasm_bindgen_futures::spawn_local(driver);",
          "547:     }",
          "548: }",
          "550: #[wasm_bindgen(skip_typescript)]",
          "551: pub fn worker_entry_point(state_ptr: u32) {",
          "552:     let state = unsafe { Arc::<ThreadState>::from_raw(state_ptr as *const ThreadState) };",
          "554:     let name = js_sys::global()",
          "555:         .unchecked_into::<DedicatedWorkerGlobalScope>()",
          "556:         .name();",
          "557:     debug!(\"{}: Entry\", name);",
          "558:     ThreadState::work(state);",
          "559: }",
          "561: #[wasm_bindgen(skip_typescript)]",
          "562: pub fn wasm_entry_point(ctx_ptr: u32, wasm_module: JsValue, wasm_memory: JsValue) {",
          "564:     let ctx = ctx_ptr as *mut WasmRunContext;",
          "565:     let ctx = unsafe { Box::from_raw(ctx) };",
          "566:     let run_callback = (*ctx).cmd.run;",
          "569:     let wasm_store = ctx.cmd.store;",
          "570:     let wasm_module = match wasm_module.dyn_into::<js_sys::WebAssembly::Module>() {",
          "571:         Ok(a) => a,",
          "572:         Err(err) => {",
          "573:             error!(",
          "574:                 \"Failed to receive module - {}\",",
          "575:                 err.as_string().unwrap_or_else(|| format!(\"{:?}\", err))",
          "576:             );",
          "577:             return;",
          "578:         }",
          "579:     };",
          "580:     let wasm_module: Module = (wasm_module, ctx.cmd.module_bytes.clone()).into();",
          "583:     let wasm_memory = match ctx.memory {",
          "584:         WasmRunMemory::WithoutMemory => None,",
          "585:         WasmRunMemory::WithMemory(wasm_memory_type) => {",
          "586:             let wasm_memory = match wasm_memory.dyn_into::<js_sys::WebAssembly::Memory>() {",
          "587:                 Ok(a) => a,",
          "588:                 Err(err) => {",
          "589:                     error!(",
          "590:                         \"Failed to receive memory for module - {}\",",
          "591:                         err.as_string().unwrap_or_else(|| format!(\"{:?}\", err))",
          "592:                     );",
          "593:                     return;",
          "594:                 }",
          "595:             };",
          "596:             Some(VMMemory::new(wasm_memory, wasm_memory_type))",
          "597:         }",
          "598:     };",
          "600:     let name = js_sys::global()",
          "601:         .unchecked_into::<DedicatedWorkerGlobalScope>()",
          "602:         .name();",
          "603:     debug!(\"{}: Entry\", name);",
          "606:     run_callback(wasm_store, wasm_module, wasm_memory);",
          "607: }",
          "609: #[wasm_bindgen()]",
          "610: pub fn worker_schedule_task(task_ptr: u32, wasm_module: JsValue, mut wasm_memory: JsValue) {",
          "612:     let task = task_ptr as *mut WasmRunCommand;",
          "613:     let task = unsafe { Box::from_raw(task) };",
          "615:     let mut opts = WorkerOptions::new();",
          "616:     opts.type_(WorkerType::Module);",
          "617:     opts.name(&*format!(\"WasmWorker\"));",
          "619:     let result = match task.ty.clone() {",
          "620:         WasmRunType::Create => {",
          "621:             let ctx = WasmRunContext {",
          "622:                 cmd: *task,",
          "623:                 memory: WasmRunMemory::WithoutMemory,",
          "624:             };",
          "625:             let ctx = Box::into_raw(Box::new(ctx));",
          "627:             wasm_bindgen_futures::JsFuture::from(start_wasm(",
          "628:                 wasm_bindgen::module(),",
          "629:                 wasm_bindgen::memory(),",
          "630:                 JsValue::from(ctx as u32),",
          "631:                 opts,",
          "632:                 LoaderHelper {},",
          "633:                 wasm_module,",
          "634:                 wasm_memory,",
          "635:             ))",
          "636:         }",
          "637:         WasmRunType::CreateWithMemory(ty) => {",
          "638:             if ty.shared == false {",
          "640:                 error!(\"Failed to create WASM process with external memory as only shared memory is supported yet this web assembly binary imports non-shared memory.\");",
          "641:                 return;",
          "642:             }",
          "643:             if ty.maximum.is_none() {",
          "645:                 error!(\"Failed to create WASM process with external memory as shared memory must have a maximum size however this web assembly binary imports shared memory with no maximum defined.\");",
          "646:                 return;",
          "647:             }",
          "649:             if wasm_memory.is_null() {",
          "650:                 wasm_memory = match build_memory_internal(ty) {",
          "651:                     Ok(m) => JsValue::from(m),",
          "652:                     Err(err) => {",
          "653:                         error!(\"Failed to create WASM memory - {}\", err);",
          "654:                         return;",
          "655:                     }",
          "656:                 };",
          "657:             }",
          "659:             let ctx = WasmRunContext {",
          "660:                 cmd: *task,",
          "661:                 memory: WasmRunMemory::WithMemory(ty),",
          "662:             };",
          "663:             let ctx = Box::into_raw(Box::new(ctx));",
          "665:             wasm_bindgen_futures::JsFuture::from(start_wasm(",
          "666:                 wasm_bindgen::module(),",
          "667:                 wasm_bindgen::memory(),",
          "668:                 JsValue::from(ctx as u32),",
          "669:                 opts,",
          "670:                 LoaderHelper {},",
          "671:                 wasm_module,",
          "672:                 wasm_memory,",
          "673:             ))",
          "674:         }",
          "675:         WasmRunType::Existing(wasm_memory_type) => {",
          "676:             let ctx = WasmRunContext {",
          "677:                 cmd: *task,",
          "678:                 memory: WasmRunMemory::WithMemory(wasm_memory_type),",
          "679:             };",
          "680:             let ctx = Box::into_raw(Box::new(ctx));",
          "682:             wasm_bindgen_futures::JsFuture::from(start_wasm(",
          "683:                 wasm_bindgen::module(),",
          "684:                 wasm_bindgen::memory(),",
          "685:                 JsValue::from(ctx as u32),",
          "686:                 opts,",
          "687:                 LoaderHelper {},",
          "688:                 wasm_module,",
          "689:                 wasm_memory,",
          "690:             ))",
          "691:         }",
          "692:     };",
          "694:     wasm_bindgen_futures::spawn_local(async move { _process_worker_result(result, None).await });",
          "695: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/runtime.rs||lib/wasi-web/src/runtime.rs": [
          "File: lib/wasi-web/src/runtime.rs -> lib/wasi-web/src/runtime.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use std::time::Duration;",
          "6: use std::{future::Future, io, pin::Pin, sync::Arc, task::Poll};",
          "8: use futures::future::BoxFuture;",
          "9: use js_sys::Promise;",
          "10: use tokio::{",
          "11:     io::{AsyncRead, AsyncSeek, AsyncWrite},",
          "12:     runtime::{Builder, Handle, Runtime},",
          "13:     sync::mpsc,",
          "14: };",
          "15: #[allow(unused_imports, dead_code)]",
          "16: use tracing::{debug, error, info, trace, warn};",
          "17: use wasm_bindgen::prelude::*;",
          "18: use wasm_bindgen_futures::JsFuture;",
          "19: use wasmer_wasix::{",
          "20:     http::{DynHttpClient, HttpRequest, HttpResponse},",
          "21:     os::{TtyBridge, TtyOptions},",
          "22:     runtime::SpawnType,",
          "23:     wasmer::{vm::VMMemory, MemoryType, Module, Store},",
          "24:     VirtualFile, VirtualNetworking, VirtualTaskManager, WasiRuntime, WasiThreadError, WasiTtyState,",
          "25: };",
          "26: use web_sys::WebGl2RenderingContext;",
          "28: #[cfg(feature = \"webgl\")]",
          "29: use super::webgl::GlContext;",
          "30: #[cfg(feature = \"webgl\")]",
          "31: use super::webgl::WebGl;",
          "32: #[cfg(feature = \"webgl\")]",
          "33: use super::webgl::WebGlCommand;",
          "34: use super::{common::*, pool::WebThreadPool};",
          "36: #[derive(Debug)]",
          "37: pub(crate) enum TerminalCommandRx {",
          "38:     Print(String),",
          "39:     #[allow(dead_code)]",
          "40:     Cls,",
          "41: }",
          "43: #[derive(Debug)]",
          "44: pub(crate) struct WebRuntime {",
          "45:     pub(crate) pool: WebThreadPool,",
          "46:     #[cfg(feature = \"webgl\")]",
          "47:     webgl_tx: mpsc::UnboundedSender<WebGlCommand>,",
          "48:     tty: TtyOptions,",
          "50:     http_client: DynHttpClient,",
          "52:     net: wasmer_wasix::virtual_net::DynVirtualNetworking,",
          "53:     tasks: Arc<dyn VirtualTaskManager>,",
          "54: }",
          "56: impl WebRuntime {",
          "57:     #[allow(unused_variables)]",
          "58:     pub(crate) fn new(",
          "59:         pool: WebThreadPool,",
          "60:         tty_options: TtyOptions,",
          "61:         webgl2: WebGl2RenderingContext,",
          "62:     ) -> WebRuntime {",
          "63:         #[cfg(feature = \"webgl\")]",
          "64:         let webgl_tx = GlContext::init(webgl2);",
          "66:         let runtime: Arc<Runtime> = Arc::new(Builder::new_current_thread().build().unwrap());",
          "67:         let runtime = Arc::new(WebTaskManager {",
          "68:             pool: pool.clone(),",
          "69:             runtime,",
          "70:         });",
          "72:         WebRuntime {",
          "73:             pool: pool.clone(),",
          "74:             tasks: runtime,",
          "75:             tty: tty_options,",
          "76:             #[cfg(feature = \"webgl\")]",
          "77:             webgl_tx,",
          "78:             http_client: Arc::new(WebHttpClient { pool }),",
          "79:             net: Arc::new(WebVirtualNetworking),",
          "80:         }",
          "81:     }",
          "82: }",
          "84: #[derive(Clone, Debug)]",
          "85: struct WebVirtualNetworking;",
          "87: impl VirtualNetworking for WebVirtualNetworking {}",
          "89: #[derive(Debug, Clone)]",
          "90: pub(crate) struct WebTaskManager {",
          "91:     pool: WebThreadPool,",
          "92:     runtime: Arc<Runtime>,",
          "93: }",
          "95: struct WebRuntimeGuard<'g> {",
          "96:     #[allow(unused)]",
          "97:     inner: tokio::runtime::EnterGuard<'g>,",
          "98: }",
          "99: impl<'g> Drop for WebRuntimeGuard<'g> {",
          "100:     fn drop(&mut self) {}",
          "101: }",
          "103: pub fn build_memory_internal(ty: MemoryType) -> Result<VMMemory, WasiThreadError> {",
          "104:     let descriptor = js_sys::Object::new();",
          "105:     js_sys::Reflect::set(&descriptor, &\"initial\".into(), &ty.minimum.0.into()).unwrap();",
          "108:     if let Some(max) = ty.maximum {",
          "109:         js_sys::Reflect::set(&descriptor, &\"maximum\".into(), &max.0.into()).unwrap();",
          "110:     }",
          "111:     js_sys::Reflect::set(&descriptor, &\"shared\".into(), &ty.shared.into()).unwrap();",
          "113:     match js_sys::WebAssembly::Memory::new(&descriptor) {",
          "114:         Ok(a) => Ok(VMMemory::new(a, ty)),",
          "115:         Err(err) => {",
          "116:             error!(",
          "117:                 \"WebAssembly failed to create the memory - {}\",",
          "118:                 err.as_string().unwrap_or_else(|| format!(\"{:?}\", err))",
          "119:             );",
          "120:             return Err(WasiThreadError::MemoryCreateFailed);",
          "121:         }",
          "122:     }",
          "123: }",
          "125: #[async_trait::async_trait]",
          "126: #[allow(unused_variables)]",
          "127: impl VirtualTaskManager for WebTaskManager {",
          "131:     fn build_memory(&self, spawn_type: SpawnType) -> Result<Option<VMMemory>, WasiThreadError> {",
          "132:         match spawn_type {",
          "133:             SpawnType::Create => Ok(None),",
          "134:             SpawnType::CreateWithType(mem) => build_memory_internal(mem.ty).map(|a| Some(a)),",
          "135:             SpawnType::NewThread(mem) => Ok(Some(mem)),",
          "136:         }",
          "137:     }",
          "142:     async fn sleep_now(&self, time: Duration) {",
          "147:         let (tx, rx) = tokio::sync::oneshot::channel();",
          "148:         self.pool.spawn_shared(Box::new(move || {",
          "149:             Box::pin(async move {",
          "150:                 let promise = bindgen_sleep(time.as_millis() as i32);",
          "151:                 let js_fut = JsFuture::from(promise);",
          "152:                 let _ = js_fut.await;",
          "153:                 let _ = tx.send(());",
          "154:             })",
          "155:         }));",
          "156:         let _ = rx.await;",
          "157:     }",
          "161:     fn task_shared(",
          "162:         &self,",
          "163:         task: Box<",
          "164:             dyn FnOnce() -> Pin<Box<dyn Future<Output = ()> + Send + 'static>> + Send + 'static,",
          "165:         >,",
          "166:     ) -> Result<(), WasiThreadError> {",
          "167:         self.pool.spawn_shared(Box::new(move || {",
          "168:             Box::pin(async move {",
          "169:                 let fut = task();",
          "170:                 fut.await",
          "171:             })",
          "172:         }));",
          "173:         Ok(())",
          "174:     }",
          "177:     fn runtime(&self) -> &Handle {",
          "178:         self.runtime.handle()",
          "179:     }",
          "182:     #[allow(dyn_drop)]",
          "183:     fn runtime_enter<'g>(&'g self) -> Box<dyn std::ops::Drop + 'g> {",
          "184:         Box::new(WebRuntimeGuard {",
          "185:             inner: self.runtime.enter(),",
          "186:         })",
          "187:     }",
          "192:     fn task_wasm(",
          "193:         &self,",
          "194:         task: Box<dyn FnOnce(Store, Module, Option<VMMemory>) + Send + 'static>,",
          "195:         store: Store,",
          "196:         module: Module,",
          "197:         spawn_type: SpawnType,",
          "198:     ) -> Result<(), WasiThreadError> {",
          "199:         self.pool.spawn_wasm(task, store, module, spawn_type)?;",
          "200:         Ok(())",
          "201:     }",
          "206:     fn task_dedicated(",
          "207:         &self,",
          "208:         task: Box<dyn FnOnce() + Send + 'static>,",
          "209:     ) -> Result<(), WasiThreadError> {",
          "210:         self.pool.spawn_dedicated(task);",
          "211:         Ok(())",
          "212:     }",
          "214:     fn thread_parallelism(&self) -> Result<usize, WasiThreadError> {",
          "215:         Ok(8)",
          "216:     }",
          "217: }",
          "219: #[derive(Debug, Clone)]",
          "220: pub struct TermStdout {",
          "221:     term_tx: mpsc::UnboundedSender<TerminalCommandRx>,",
          "222:     tty: TtyOptions,",
          "223: }",
          "225: impl TermStdout {",
          "226:     pub(crate) fn new(tx: mpsc::UnboundedSender<TerminalCommandRx>, tty: TtyOptions) -> Self {",
          "227:         Self { term_tx: tx, tty }",
          "228:     }",
          "230:     fn term_write(&self, data: &[u8]) {",
          "231:         let data = match self.tty.line_feeds() {",
          "232:             true => data",
          "233:                 .to_vec()",
          "234:                 .into_iter()",
          "235:                 .flat_map(|a| match a {",
          "236:                     b'\\n' => vec![b'\\r', b'\\n'].into_iter(),",
          "237:                     a => vec![a].into_iter(),",
          "238:                 })",
          "239:                 .collect::<Vec<_>>(),",
          "240:             false => data.to_vec(),",
          "241:         };",
          "242:         if let Ok(text) = String::from_utf8(data) {",
          "243:             self.term_tx.send(TerminalCommandRx::Print(text)).unwrap();",
          "244:         }",
          "245:     }",
          "246: }",
          "248: impl AsyncRead for TermStdout {",
          "249:     fn poll_read(",
          "250:         self: Pin<&mut Self>,",
          "251:         _cx: &mut std::task::Context<'_>,",
          "252:         _buf: &mut tokio::io::ReadBuf<'_>,",
          "253:     ) -> Poll<io::Result<()>> {",
          "254:         Poll::Pending",
          "255:     }",
          "256: }",
          "258: impl AsyncWrite for TermStdout {",
          "259:     fn poll_write(",
          "260:         self: Pin<&mut Self>,",
          "261:         _cx: &mut std::task::Context<'_>,",
          "262:         buf: &[u8],",
          "263:     ) -> Poll<Result<usize, io::Error>> {",
          "264:         self.term_write(buf);",
          "265:         Poll::Ready(Ok(buf.len()))",
          "266:     }",
          "268:     fn poll_flush(",
          "269:         self: Pin<&mut Self>,",
          "270:         _cx: &mut std::task::Context<'_>,",
          "271:     ) -> Poll<Result<(), io::Error>> {",
          "272:         Poll::Ready(Ok(()))",
          "273:     }",
          "275:     fn poll_shutdown(",
          "276:         self: Pin<&mut Self>,",
          "277:         _cx: &mut std::task::Context<'_>,",
          "278:     ) -> Poll<Result<(), io::Error>> {",
          "279:         Poll::Ready(Ok(()))",
          "280:     }",
          "281: }",
          "283: impl AsyncSeek for TermStdout {",
          "284:     fn start_seek(self: Pin<&mut Self>, _position: io::SeekFrom) -> io::Result<()> {",
          "285:         Ok(())",
          "286:     }",
          "288:     fn poll_complete(",
          "289:         self: Pin<&mut Self>,",
          "290:         _cx: &mut std::task::Context<'_>,",
          "291:     ) -> Poll<io::Result<u64>> {",
          "292:         Poll::Ready(Ok(0))",
          "293:     }",
          "294: }",
          "296: impl VirtualFile for TermStdout {",
          "297:     fn last_accessed(&self) -> u64 {",
          "298:         0",
          "299:     }",
          "301:     fn last_modified(&self) -> u64 {",
          "302:         0",
          "303:     }",
          "305:     fn created_time(&self) -> u64 {",
          "306:         0",
          "307:     }",
          "309:     fn size(&self) -> u64 {",
          "310:         0",
          "311:     }",
          "313:     fn set_len(&mut self, _new_size: u64) -> wasmer_wasix::virtual_fs::Result<()> {",
          "314:         Ok(())",
          "315:     }",
          "317:     fn unlink(&mut self) -> wasmer_wasix::virtual_fs::Result<()> {",
          "318:         Ok(())",
          "319:     }",
          "321:     fn poll_read_ready(",
          "322:         self: Pin<&mut Self>,",
          "323:         _cx: &mut std::task::Context<'_>,",
          "324:     ) -> std::task::Poll<io::Result<usize>> {",
          "325:         Poll::Pending",
          "326:     }",
          "328:     fn poll_write_ready(",
          "329:         self: Pin<&mut Self>,",
          "330:         _cx: &mut std::task::Context<'_>,",
          "331:     ) -> std::task::Poll<io::Result<usize>> {",
          "332:         Poll::Ready(Ok(8192))",
          "333:     }",
          "334: }",
          "336: #[derive(Debug, Clone)]",
          "337: pub struct TermLog {",
          "338:     pool: WebThreadPool,",
          "339: }",
          "341: impl TermLog {",
          "342:     #[allow(dead_code)]",
          "343:     pub(crate) fn new(pool: WebThreadPool) -> Self {",
          "344:         Self { pool }",
          "345:     }",
          "347:     fn log_write(&self, data: &[u8]) {",
          "348:         let text = String::from_utf8_lossy(data).to_string();",
          "349:         self.pool.spawn_shared(Box::new(move || {",
          "350:             Box::pin(async move {",
          "352:                 #[allow(unused_unsafe)]",
          "353:                 unsafe {",
          "354:                     console::log(text.as_str())",
          "355:                 };",
          "356:             })",
          "357:         }));",
          "358:     }",
          "359: }",
          "361: impl AsyncRead for TermLog {",
          "362:     fn poll_read(",
          "363:         self: Pin<&mut Self>,",
          "364:         _cx: &mut std::task::Context<'_>,",
          "365:         _buf: &mut tokio::io::ReadBuf<'_>,",
          "366:     ) -> Poll<io::Result<()>> {",
          "367:         Poll::Pending",
          "368:     }",
          "369: }",
          "371: impl AsyncWrite for TermLog {",
          "372:     fn poll_write(",
          "373:         self: Pin<&mut Self>,",
          "374:         _cx: &mut std::task::Context<'_>,",
          "375:         buf: &[u8],",
          "376:     ) -> Poll<Result<usize, io::Error>> {",
          "377:         self.log_write(buf);",
          "378:         Poll::Ready(Ok(buf.len()))",
          "379:     }",
          "381:     fn poll_flush(",
          "382:         self: Pin<&mut Self>,",
          "383:         _cx: &mut std::task::Context<'_>,",
          "384:     ) -> Poll<Result<(), io::Error>> {",
          "385:         Poll::Ready(Ok(()))",
          "386:     }",
          "388:     fn poll_shutdown(",
          "389:         self: Pin<&mut Self>,",
          "390:         _cx: &mut std::task::Context<'_>,",
          "391:     ) -> Poll<Result<(), io::Error>> {",
          "392:         Poll::Ready(Ok(()))",
          "393:     }",
          "394: }",
          "396: impl AsyncSeek for TermLog {",
          "397:     fn start_seek(self: Pin<&mut Self>, _position: io::SeekFrom) -> io::Result<()> {",
          "398:         Ok(())",
          "399:     }",
          "401:     fn poll_complete(",
          "402:         self: Pin<&mut Self>,",
          "403:         _cx: &mut std::task::Context<'_>,",
          "404:     ) -> Poll<io::Result<u64>> {",
          "405:         Poll::Ready(Ok(0))",
          "406:     }",
          "407: }",
          "409: impl VirtualFile for TermLog {",
          "410:     fn last_accessed(&self) -> u64 {",
          "411:         0",
          "412:     }",
          "414:     fn last_modified(&self) -> u64 {",
          "415:         0",
          "416:     }",
          "418:     fn created_time(&self) -> u64 {",
          "419:         0",
          "420:     }",
          "422:     fn size(&self) -> u64 {",
          "423:         0",
          "424:     }",
          "426:     fn set_len(&mut self, _new_size: u64) -> wasmer_wasix::virtual_fs::Result<()> {",
          "427:         Ok(())",
          "428:     }",
          "430:     fn unlink(&mut self) -> wasmer_wasix::virtual_fs::Result<()> {",
          "431:         Ok(())",
          "432:     }",
          "434:     fn poll_read_ready(",
          "435:         self: Pin<&mut Self>,",
          "436:         _cx: &mut std::task::Context<'_>,",
          "437:     ) -> std::task::Poll<io::Result<usize>> {",
          "438:         Poll::Pending",
          "439:     }",
          "441:     fn poll_write_ready(",
          "442:         self: Pin<&mut Self>,",
          "443:         _cx: &mut std::task::Context<'_>,",
          "444:     ) -> std::task::Poll<io::Result<usize>> {",
          "445:         Poll::Ready(Ok(8192))",
          "446:     }",
          "447: }",
          "449: impl WasiRuntime for WebRuntime {",
          "450:     fn networking(&self) -> &wasmer_wasix::virtual_net::DynVirtualNetworking {",
          "451:         &self.net",
          "452:     }",
          "454:     fn task_manager(&self) -> &Arc<dyn VirtualTaskManager> {",
          "455:         &self.tasks",
          "456:     }",
          "458:     fn tty(&self) -> Option<&(dyn TtyBridge + Send + Sync)> {",
          "459:         Some(self)",
          "460:     }",
          "462:     fn http_client(&self) -> Option<&DynHttpClient> {",
          "463:         Some(&self.http_client)",
          "464:     }",
          "465: }",
          "467: impl TtyBridge for WebRuntime {",
          "468:     fn reset(&self) {",
          "469:         self.tty.set_echo(true);",
          "470:         self.tty.set_line_buffering(true);",
          "471:         self.tty.set_line_feeds(true);",
          "472:     }",
          "474:     fn tty_get(&self) -> WasiTtyState {",
          "475:         WasiTtyState {",
          "476:             cols: self.tty.cols(),",
          "477:             rows: self.tty.rows(),",
          "478:             width: 800,",
          "479:             height: 600,",
          "480:             stdin_tty: true,",
          "481:             stdout_tty: true,",
          "482:             stderr_tty: true,",
          "483:             echo: self.tty.echo(),",
          "484:             line_buffered: self.tty.line_buffering(),",
          "485:             line_feeds: self.tty.line_feeds(),",
          "486:         }",
          "487:     }",
          "489:     fn tty_set(&self, tty_state: WasiTtyState) {",
          "490:         self.tty.set_cols(tty_state.cols);",
          "491:         self.tty.set_rows(tty_state.rows);",
          "492:         self.tty.set_echo(tty_state.echo);",
          "493:         self.tty.set_line_buffering(tty_state.line_buffered);",
          "494:         self.tty.set_line_feeds(tty_state.line_feeds);",
          "495:     }",
          "498:     fn cls(&self) -> Pin<Box<dyn Future<Output = io::Result<()>>>> {",
          "499:         let tx = self.term_tx.clone();",
          "500:         Box::pin(async move {",
          "501:             let _ = tx.send(TerminalCommandRx::Cls);",
          "502:             Ok(())",
          "503:         })",
          "504:     }",
          "506: }",
          "508: #[derive(Clone, Debug)]",
          "509: struct WebHttpClient {",
          "510:     pool: WebThreadPool,",
          "511: }",
          "513: impl WebHttpClient {",
          "514:     async fn do_request(request: HttpRequest) -> Result<HttpResponse, anyhow::Error> {",
          "515:         let resp = crate::common::fetch(",
          "516:             &request.url,",
          "517:             &request.method,",
          "518:             request.options.gzip,",
          "519:             request.options.cors_proxy,",
          "520:             request.headers,",
          "521:             request.body,",
          "522:         )",
          "523:         .await?;",
          "525:         let ok = resp.ok();",
          "526:         let redirected = resp.redirected();",
          "527:         let status = resp.status();",
          "528:         let status_text = resp.status_text();",
          "530:         let data = crate::common::get_response_data(resp).await?;",
          "532:         let headers = Vec::new();",
          "536:         debug!(\"received {} bytes\", data.len());",
          "537:         let resp = HttpResponse {",
          "538:             pos: 0,",
          "539:             ok,",
          "540:             redirected,",
          "541:             status,",
          "542:             status_text,",
          "543:             headers,",
          "544:             body: Some(data),",
          "545:         };",
          "546:         debug!(\"response status {}\", status);",
          "548:         Ok(resp)",
          "549:     }",
          "550: }",
          "552: impl wasmer_wasix::http::HttpClient for WebHttpClient {",
          "553:     fn request(",
          "554:         &self,",
          "555:         request: wasmer_wasix::http::HttpRequest,",
          "556:     ) -> BoxFuture<Result<wasmer_wasix::http::HttpResponse, anyhow::Error>> {",
          "557:         let (tx, rx) = tokio::sync::oneshot::channel();",
          "562:         self.pool.spawn_shared(Box::new(move || {",
          "563:             Box::pin(async move {",
          "564:                 let res = Self::do_request(request).await;",
          "565:                 let _ = tx.send(res);",
          "566:             })",
          "567:         }));",
          "568:         Box::pin(async move { rx.await.unwrap() })",
          "569:     }",
          "570: }",
          "572: #[wasm_bindgen(module = \"/js/time.js\")]",
          "573: extern \"C\" {",
          "574:     #[wasm_bindgen(js_name = \"sleep\")]",
          "575:     pub fn bindgen_sleep(ms: i32) -> Promise;",
          "576: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/webgl.rs||lib/wasi-web/src/webgl.rs": [
          "File: lib/wasi-web/src/webgl.rs -> lib/wasi-web/src/webgl.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use std::{collections::HashMap, convert::*};",
          "3: use tokio::sync::mpsc;",
          "4: #[allow(unused_imports, dead_code)]",
          "5: use tracing::{debug, error, info, trace, warn};",
          "6: use wasm_bindgen::prelude::*;",
          "7: use wasmer_wasix::api::{",
          "8:     glenum::*, AsyncResult, BufferId, FrameBufferId, ProgramId, ProgramLocationId,",
          "9:     ProgramParameterId, RenderingContextAbi, SerializationFormat, ShaderId, System, SystemAbiExt,",
          "10:     TextureId, UniformLocationId, VertexArrayId, WebGlAbi,",
          "11: };",
          "12: use web_sys::{",
          "13:     WebGl2RenderingContext, WebGlBuffer, WebGlFramebuffer, WebGlProgram, WebGlShader, WebGlTexture,",
          "14:     WebGlUniformLocation, WebGlVertexArrayObject,",
          "15: };",
          "17: use super::glue::{show_canvas, show_terminal};",
          "19: pub enum WebGlCommand {",
          "20:     CreateProgram(ProgramId),",
          "21:     CreateBuffer(BufferId),",
          "22:     CreateVertexArray(VertexArrayId),",
          "23:     CreateTexture(TextureId),",
          "24:     BindBuffer {",
          "25:         buffer: BufferId,",
          "26:         kind: BufferKind,",
          "27:     },",
          "28:     UnbindBuffer {",
          "29:         kind: BufferKind,",
          "30:     },",
          "31:     DeleteBuffer {",
          "32:         buffer: BufferId,",
          "33:     },",
          "34:     DeleteTexture {",
          "35:         texture: TextureId,",
          "36:     },",
          "37:     ActiveTexture {",
          "38:         active: u32,",
          "39:     },",
          "40:     BindTexture {",
          "41:         texture: TextureId,",
          "42:         target: TextureKind,",
          "43:     },",
          "44:     BindTextureCube {",
          "45:         texture: TextureId,",
          "46:         target: TextureKind,",
          "47:     },",
          "48:     UnbindTexture {",
          "49:         target: u32,",
          "50:     },",
          "51:     UnbindTextureCube {",
          "52:         target: u32,",
          "53:     },",
          "54:     FramebufferTexture2D {",
          "55:         texture: TextureId,",
          "56:         target: Buffers,",
          "57:         attachment: Buffers,",
          "58:         textarget: TextureBindPoint,",
          "59:         level: i32,",
          "60:     },",
          "61:     ClearColor {",
          "62:         red: f32,",
          "63:         green: f32,",
          "64:         blue: f32,",
          "65:         alpha: f32,",
          "66:     },",
          "67:     Clear {",
          "68:         bit: BufferBit,",
          "69:     },",
          "70:     ClearDepth {",
          "71:         value: f32,",
          "72:     },",
          "73:     DrawArrays {",
          "74:         mode: Primitives,",
          "75:         first: i32,",
          "76:         count: i32,",
          "77:     },",
          "78:     DrawElements {",
          "79:         mode: Primitives,",
          "80:         count: i32,",
          "81:         kind: DataType,",
          "82:         offset: u32,",
          "83:     },",
          "84:     Enable {",
          "85:         flag: Flag,",
          "86:     },",
          "87:     Disable {",
          "88:         flag: Flag,",
          "89:     },",
          "90:     CullFace {",
          "91:         culling: Culling,",
          "92:     },",
          "93:     DepthMask {",
          "94:         val: bool,",
          "95:     },",
          "96:     DepthFunct {",
          "97:         val: DepthTest,",
          "98:     },",
          "99:     Viewport {",
          "100:         x: i32,",
          "101:         y: i32,",
          "102:         width: u32,",
          "103:         height: u32,",
          "104:     },",
          "105:     BufferData {",
          "106:         kind: BufferKind,",
          "107:         data: Vec<u8>,",
          "108:         draw: DrawMode,",
          "109:     },",
          "110:     ReadPixels {",
          "111:         x: u32,",
          "112:         y: u32,",
          "113:         width: u32,",
          "114:         height: u32,",
          "115:         format: PixelFormat,",
          "116:         kind: PixelType,",
          "117:         tx: mpsc::Sender<Result<Vec<u8>, String>>,",
          "118:     },",
          "119:     PixelStorei {",
          "120:         storage: PixelStorageMode,",
          "121:         value: i32,",
          "122:     },",
          "123:     GenerateMipMap,",
          "124:     GenerateMipMapCube,",
          "125:     TexImage2D {",
          "126:         target: TextureBindPoint,",
          "127:         level: u8,",
          "128:         width: u32,",
          "129:         height: u32,",
          "130:         format: PixelFormat,",
          "131:         kind: PixelType,",
          "132:         pixels: Vec<u8>,",
          "133:     },",
          "134:     TexSubImage2D {",
          "135:         target: TextureBindPoint,",
          "136:         level: u8,",
          "137:         xoffset: u32,",
          "138:         yoffset: u32,",
          "139:         width: u32,",
          "140:         height: u32,",
          "141:         format: PixelFormat,",
          "142:         kind: PixelType,",
          "143:         pixels: Vec<u8>,",
          "144:     },",
          "145:     CompressedTexImage2D {",
          "146:         target: TextureBindPoint,",
          "147:         level: u8,",
          "148:         compression: TextureCompression,",
          "149:         width: u32,",
          "150:         height: u32,",
          "151:         data: Vec<u8>,",
          "152:     },",
          "153:     BlendEquation {",
          "154:         eq: BlendEquation,",
          "155:     },",
          "156:     BlendFunc {",
          "157:         b1: BlendMode,",
          "158:         b2: BlendMode,",
          "159:     },",
          "160:     BlendColor {",
          "161:         red: f32,",
          "162:         green: f32,",
          "163:         blue: f32,",
          "164:         alpha: f32,",
          "165:     },",
          "166:     TexParameteri {",
          "167:         kind: TextureKind,",
          "168:         pname: TextureParameter,",
          "169:         param: i32,",
          "170:     },",
          "171:     TexParameterfv {",
          "172:         kind: TextureKind,",
          "173:         pname: TextureParameter,",
          "174:         param: f32,",
          "175:     },",
          "176:     DrawBuffers {",
          "177:         buffers: Vec<ColorBuffer>,",
          "178:     },",
          "179:     CreateFramebuffer(FrameBufferId),",
          "180:     DeleteFramebuffer {",
          "181:         framebuffer: FrameBufferId,",
          "182:     },",
          "183:     BindFramebuffer {",
          "184:         framebuffer: FrameBufferId,",
          "185:         buffer: Buffers,",
          "186:     },",
          "187:     UnbindFramebuffer {",
          "188:         buffer: Buffers,",
          "189:     },",
          "190:     DeleteProgram {",
          "191:         program: ProgramId,",
          "192:     },",
          "193:     LinkProgram {",
          "194:         program: ProgramId,",
          "195:         tx: mpsc::Sender<Result<(), String>>,",
          "196:     },",
          "197:     UseProgram {",
          "198:         program: ProgramId,",
          "199:     },",
          "200:     GetAttribLocation {",
          "201:         program: ProgramId,",
          "202:         name: String,",
          "203:         id: ProgramLocationId,",
          "204:     },",
          "205:     DeleteAttribLocation {",
          "206:         id: ProgramLocationId,",
          "207:     },",
          "208:     GetUniformLocation {",
          "209:         program: ProgramId,",
          "210:         name: String,",
          "211:         id: UniformLocationId,",
          "212:     },",
          "213:     GetProgramParameter {",
          "214:         program: ProgramId,",
          "215:         pname: ShaderParameter,",
          "216:         id: ProgramParameterId,",
          "217:     },",
          "218:     VertexAttribPointer {",
          "219:         location: ProgramLocationId,",
          "220:         size: AttributeSize,",
          "221:         kind: DataType,",
          "222:         normalized: bool,",
          "223:         stride: u32,",
          "224:         offset: u32,",
          "225:     },",
          "226:     EnableVertexAttribArray {",
          "227:         location: ProgramLocationId,",
          "228:     },",
          "229:     DeleteVertexArray {",
          "230:         vertex_array: VertexArrayId,",
          "231:     },",
          "232:     BindVertexArray {",
          "233:         vertex_array: VertexArrayId,",
          "234:     },",
          "235:     UnbindVertexArray,",
          "236:     UniformMatrix4fv {",
          "237:         location: UniformLocationId,",
          "238:         transpose: bool,",
          "239:         value: [[f32; 4]; 4],",
          "240:     },",
          "241:     UniformMatrix3fv {",
          "242:         location: UniformLocationId,",
          "243:         transpose: bool,",
          "244:         value: [[f32; 3]; 3],",
          "245:     },",
          "246:     UniformMatrix2fv {",
          "247:         location: UniformLocationId,",
          "248:         transpose: bool,",
          "249:         value: [[f32; 2]; 2],",
          "250:     },",
          "251:     Uniform1i {",
          "252:         location: UniformLocationId,",
          "253:         value: i32,",
          "254:     },",
          "255:     Uniform1f {",
          "256:         location: UniformLocationId,",
          "257:         value: f32,",
          "258:     },",
          "259:     Uniform2f {",
          "260:         location: UniformLocationId,",
          "261:         value: (f32, f32),",
          "262:     },",
          "263:     Uniform3f {",
          "264:         location: UniformLocationId,",
          "265:         value: (f32, f32, f32),",
          "266:     },",
          "267:     Uniform4f {",
          "268:         location: UniformLocationId,",
          "269:         value: (f32, f32, f32, f32),",
          "270:     },",
          "271:     CreateShader {",
          "272:         kind: ShaderKind,",
          "273:         id: ShaderId,",
          "274:     },",
          "275:     DeleteShader {",
          "276:         shader: ShaderId,",
          "277:     },",
          "278:     ShaderSource {",
          "279:         shader: ShaderId,",
          "280:         source: String,",
          "281:     },",
          "282:     ShaderCompile {",
          "283:         shader: ShaderId,",
          "284:         tx: mpsc::Sender<Result<(), String>>,",
          "285:     },",
          "286:     AttachShader {",
          "287:         program: ProgramId,",
          "288:         shader: ShaderId,",
          "289:         tx: mpsc::Sender<Result<(), String>>,",
          "290:     },",
          "291:     ShowCanvas,",
          "292:     ShowTerminal,",
          "293:     Sync {",
          "294:         tx: mpsc::Sender<()>,",
          "295:     },",
          "296: }",
          "298: pub struct WebGl {",
          "299:     tx: mpsc::Sender<WebGlCommand>,",
          "300: }",
          "302: impl WebGl {",
          "303:     pub fn new(tx: &mpsc::Sender<WebGlCommand>) -> WebGl {",
          "304:         WebGl { tx: tx.clone() }",
          "305:     }",
          "306: }",
          "308: impl WebGlAbi for WebGl {",
          "309:     fn context(&self) -> Box<dyn RenderingContextAbi> {",
          "310:         let ctx = GlContext::new(&self.tx);",
          "311:         Box::new(ctx)",
          "312:     }",
          "313: }",
          "315: #[allow(dead_code)]",
          "316: type Reference = i32;",
          "318: pub struct GlContextInner {",
          "319:     ctx: WebGl2RenderingContext,",
          "320:     programs: HashMap<ProgramId, WebGlProgram>,",
          "321:     buffers: HashMap<BufferId, WebGlBuffer>,",
          "322:     vertex_arrays: HashMap<VertexArrayId, WebGlVertexArrayObject>,",
          "323:     textures: HashMap<TextureId, WebGlTexture>,",
          "324:     shaders: HashMap<ShaderId, WebGlShader>,",
          "325:     uniform_locations: HashMap<UniformLocationId, WebGlUniformLocation>,",
          "326:     program_parameters: HashMap<ProgramParameterId, JsValue>,",
          "327:     program_locations: HashMap<ProgramLocationId, i32>,",
          "328:     framebuffers: HashMap<FrameBufferId, WebGlFramebuffer>,",
          "329: }",
          "331: impl GlContextInner {",
          "332:     pub fn new(ctx: WebGl2RenderingContext) -> GlContextInner {",
          "333:         GlContextInner {",
          "334:             ctx,",
          "335:             programs: HashMap::default(),",
          "336:             buffers: HashMap::default(),",
          "337:             vertex_arrays: HashMap::default(),",
          "338:             textures: HashMap::default(),",
          "339:             shaders: HashMap::default(),",
          "340:             uniform_locations: HashMap::default(),",
          "341:             program_parameters: HashMap::default(),",
          "342:             program_locations: HashMap::default(),",
          "343:             framebuffers: HashMap::default(),",
          "344:         }",
          "345:     }",
          "346: }",
          "348: pub struct GlContext {",
          "349:     tx: mpsc::Sender<WebGlCommand>,",
          "350: }",
          "352: impl GlContext {",
          "353:     pub fn init(webgl2: WebGl2RenderingContext) -> mpsc::Sender<WebGlCommand> {",
          "354:         let (webgl_tx, mut webgl_rx) = mpsc::unbounded_channel();",
          "355:         {",
          "356:             wasm_bindgen_futures::spawn_local(async move {",
          "357:                 let mut inner = GlContextInner::new(webgl2);",
          "358:                 while let Some(cmd) = webgl_rx.recv().await {",
          "359:                     GlContext::process(&mut inner, cmd).await;",
          "360:                 }",
          "361:             })",
          "362:         }",
          "363:         webgl_tx",
          "364:     }",
          "366:     pub fn new(tx: &mpsc::Sender<WebGlCommand>) -> GlContext {",
          "367:         System::default().fire_and_forget(&tx, WebGlCommand::ShowCanvas);",
          "368:         GlContext { tx: tx.clone() }",
          "369:     }",
          "371:     pub async fn process(inner: &mut GlContextInner, cmd: WebGlCommand) {",
          "372:         match cmd {",
          "373:             WebGlCommand::CreateProgram(id) => {",
          "374:                 if let Some(r) = inner.ctx.create_program() {",
          "375:                     inner.programs.insert(id, r);",
          "376:                 } else {",
          "377:                     warn!(\"failed to create program\");",
          "378:                 }",
          "379:             }",
          "380:             WebGlCommand::CreateBuffer(id) => {",
          "381:                 if let Some(r) = inner.ctx.create_buffer() {",
          "382:                     inner.buffers.insert(id, r);",
          "383:                 } else {",
          "384:                     warn!(\"failed to create buffer\");",
          "385:                 }",
          "386:             }",
          "387:             WebGlCommand::CreateVertexArray(id) => {",
          "388:                 if let Some(r) = inner.ctx.create_vertex_array() {",
          "389:                     inner.vertex_arrays.insert(id, r);",
          "390:                 } else {",
          "391:                     warn!(\"failed to create vertex array\");",
          "392:                 }",
          "393:             }",
          "394:             WebGlCommand::CreateTexture(id) => {",
          "395:                 if let Some(r) = inner.ctx.create_texture() {",
          "396:                     inner.textures.insert(id, r);",
          "397:                 } else {",
          "398:                     warn!(\"failed to create texture\");",
          "399:                 }",
          "400:             }",
          "401:             WebGlCommand::BindBuffer { buffer, kind } => {",
          "402:                 let buffer = inner.buffers.get(&buffer);",
          "403:                 inner.ctx.bind_buffer(kind as u32, buffer);",
          "404:             }",
          "405:             WebGlCommand::UnbindBuffer { kind } => {",
          "406:                 inner.ctx.bind_buffer(kind as u32, None);",
          "407:             }",
          "408:             WebGlCommand::DeleteBuffer { buffer: buffer_id } => {",
          "409:                 let buffer = inner.buffers.remove(&buffer_id);",
          "410:                 if buffer.is_some() {",
          "411:                     inner.ctx.delete_buffer(buffer.as_ref());",
          "412:                 } else {",
          "413:                     warn!(\"orphaned buffer - {}\", buffer_id);",
          "414:                 }",
          "415:             }",
          "416:             WebGlCommand::DeleteTexture {",
          "417:                 texture: texture_id,",
          "418:             } => {",
          "419:                 let texture = inner.textures.remove(&texture_id);",
          "420:                 if texture.is_some() {",
          "421:                     inner.ctx.delete_texture(texture.as_ref());",
          "422:                 } else {",
          "423:                     warn!(\"orphaned texture - {}\", texture_id);",
          "424:                 }",
          "425:             }",
          "426:             WebGlCommand::ActiveTexture { active } => {",
          "427:                 inner.ctx.active_texture(active);",
          "428:             }",
          "429:             WebGlCommand::BindTexture { texture, target } => {",
          "430:                 let texture = inner.textures.get(&texture);",
          "431:                 inner.ctx.bind_texture(target as u32, texture);",
          "432:             }",
          "433:             WebGlCommand::BindTextureCube { texture, target } => {",
          "434:                 let texture = inner.textures.get(&texture);",
          "435:                 inner.ctx.bind_texture(target as u32, texture);",
          "436:             }",
          "437:             WebGlCommand::UnbindTexture { target } => {",
          "438:                 inner.ctx.bind_texture(target, None);",
          "439:             }",
          "440:             WebGlCommand::UnbindTextureCube { target } => {",
          "441:                 inner.ctx.bind_texture(target, None);",
          "442:             }",
          "443:             WebGlCommand::FramebufferTexture2D {",
          "444:                 texture,",
          "445:                 target,",
          "446:                 attachment,",
          "447:                 textarget,",
          "448:                 level,",
          "449:             } => {",
          "450:                 let texture = inner.textures.get(&texture);",
          "451:                 inner.ctx.framebuffer_texture_2d(",
          "452:                     target as u32,",
          "453:                     attachment as u32,",
          "454:                     textarget as u32,",
          "455:                     texture,",
          "456:                     level,",
          "457:                 );",
          "458:             }",
          "459:             WebGlCommand::ClearColor {",
          "460:                 red,",
          "461:                 green,",
          "462:                 blue,",
          "463:                 alpha,",
          "464:             } => {",
          "465:                 inner.ctx.clear_color(red, green, blue, alpha);",
          "466:             }",
          "467:             WebGlCommand::Clear { bit } => {",
          "468:                 inner.ctx.clear(bit as u32);",
          "469:             }",
          "470:             WebGlCommand::ClearDepth { value } => {",
          "471:                 inner.ctx.clear_depth(value);",
          "472:             }",
          "473:             WebGlCommand::DrawArrays { mode, first, count } => {",
          "474:                 inner.ctx.draw_arrays(mode as u32, first, count);",
          "475:             }",
          "476:             WebGlCommand::DrawElements {",
          "477:                 mode,",
          "478:                 count,",
          "479:                 kind,",
          "480:                 offset,",
          "481:             } => {",
          "482:                 inner",
          "483:                     .ctx",
          "484:                     .draw_elements_with_i32(mode as u32, count, kind as u32, offset as i32);",
          "485:             }",
          "486:             WebGlCommand::Enable { flag } => {",
          "487:                 inner.ctx.enable(flag as u32);",
          "488:             }",
          "489:             WebGlCommand::Disable { flag } => {",
          "490:                 inner.ctx.disable(flag as u32);",
          "491:             }",
          "492:             WebGlCommand::CullFace { culling } => {",
          "493:                 inner.ctx.cull_face(culling as u32);",
          "494:             }",
          "495:             WebGlCommand::DepthMask { val } => {",
          "496:                 inner.ctx.depth_mask(val);",
          "497:             }",
          "498:             WebGlCommand::DepthFunct { val } => {",
          "499:                 inner.ctx.depth_func(val as u32);",
          "500:             }",
          "501:             WebGlCommand::Viewport {",
          "502:                 x,",
          "503:                 y,",
          "504:                 width,",
          "505:                 height,",
          "506:             } => {",
          "507:                 inner.ctx.viewport(x, y, width as i32, height as i32);",
          "508:             }",
          "509:             WebGlCommand::BufferData { kind, data, draw } => {",
          "510:                 inner",
          "511:                     .ctx",
          "512:                     .buffer_data_with_u8_array(kind as u32, &data[..], draw as u32);",
          "513:             }",
          "514:             WebGlCommand::ReadPixels {",
          "515:                 x,",
          "516:                 y,",
          "517:                 width,",
          "518:                 height,",
          "519:                 format,",
          "520:                 kind,",
          "521:                 tx,",
          "522:             } => {",
          "523:                 let multiplier = match format {",
          "524:                     PixelFormat::DepthComponent => 1,",
          "525:                     PixelFormat::Alpha => 1,",
          "526:                     PixelFormat::Rgb => 3,",
          "527:                     PixelFormat::Rgba => 4,",
          "528:                     PixelFormat::Luminance => 1,",
          "529:                     PixelFormat::LuminanceAlpha => 1,",
          "530:                 };",
          "531:                 let unit_size: usize = match (kind, format) {",
          "532:                     (PixelType::UnsignedByte, _) => multiplier,",
          "533:                     (PixelType::UnsignedShort4444, PixelFormat::Rgba) => 2,",
          "534:                     (PixelType::UnsignedShort5551, PixelFormat::Rgba) => 2,",
          "535:                     (PixelType::UnsignedShort565, PixelFormat::Rgb) => 2,",
          "536:                     (PixelType::UnsignedShort, _) => multiplier * 2,",
          "537:                     (PixelType::UnsignedInt, _) => multiplier * 4,",
          "538:                     (PixelType::UnsignedInt24, _) => multiplier * 3,",
          "539:                     (PixelType::Float, _) => multiplier * 4,",
          "540:                     (_, _) => {",
          "541:                         let _ = tx.send(Err(\"invalid pixel type\".to_string())).await;",
          "542:                         return;",
          "543:                     }",
          "544:                 };",
          "545:                 let size = (width as usize) * (height as usize) * unit_size;",
          "547:                 let mut data = vec![0u8; size];",
          "548:                 let ret = inner",
          "549:                     .ctx",
          "550:                     .read_pixels_with_opt_u8_array(",
          "551:                         x as i32,",
          "552:                         y as i32,",
          "553:                         width as i32,",
          "554:                         height as i32,",
          "555:                         format as u32,",
          "556:                         kind as u32,",
          "557:                         Some(&mut data[..]),",
          "558:                     )",
          "559:                     .map_err(|err| err.as_string().unwrap_or_else(|| format!(\"{:?}\", err)));",
          "560:                 let ret = ret.map(|_| data);",
          "561:                 let _ = tx.send(ret).await;",
          "562:             }",
          "563:             WebGlCommand::PixelStorei { storage, value } => {",
          "564:                 inner.ctx.pixel_storei(storage as u32, value as i32);",
          "565:             }",
          "566:             WebGlCommand::GenerateMipMap => {",
          "567:                 inner",
          "568:                     .ctx",
          "569:                     .generate_mipmap(WebGl2RenderingContext::TEXTURE_2D);",
          "570:             }",
          "571:             WebGlCommand::GenerateMipMapCube => inner",
          "572:                 .ctx",
          "573:                 .generate_mipmap(WebGl2RenderingContext::TEXTURE_CUBE_MAP),",
          "574:             WebGlCommand::TexImage2D {",
          "575:                 target,",
          "576:                 level,",
          "577:                 width,",
          "578:                 height,",
          "579:                 format,",
          "580:                 kind,",
          "581:                 pixels,",
          "582:             } => {",
          "583:                 let _ = inner",
          "584:                     .ctx",
          "585:                     .tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array(",
          "586:                         target as u32,",
          "587:                         level as i32,",
          "588:                         format as i32,",
          "589:                         width as i32,",
          "590:                         height as i32,",
          "591:                         0,",
          "592:                         format as u32,",
          "593:                         kind as u32,",
          "594:                         Some(&pixels[..]),",
          "595:                     );",
          "596:             }",
          "597:             WebGlCommand::TexSubImage2D {",
          "598:                 target,",
          "599:                 level,",
          "600:                 xoffset,",
          "601:                 yoffset,",
          "602:                 width,",
          "603:                 height,",
          "604:                 format,",
          "605:                 kind,",
          "606:                 pixels,",
          "607:             } => {",
          "608:                 let _ = inner",
          "609:                     .ctx",
          "610:                     .tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array(",
          "611:                         target as u32,",
          "612:                         level as i32,",
          "613:                         xoffset as i32,",
          "614:                         yoffset as i32,",
          "615:                         width as i32,",
          "616:                         height as i32,",
          "617:                         format as u32,",
          "618:                         kind as u32,",
          "619:                         Some(&pixels[..]),",
          "620:                     );",
          "621:             }",
          "622:             WebGlCommand::CompressedTexImage2D {",
          "623:                 target,",
          "624:                 level,",
          "625:                 compression,",
          "626:                 width,",
          "627:                 height,",
          "628:                 data: pixels,",
          "629:             } => {",
          "630:                 inner.ctx.compressed_tex_image_2d_with_u8_array(",
          "631:                     target as u32,",
          "632:                     level as i32,",
          "633:                     compression as u32,",
          "634:                     width as i32,",
          "635:                     height as i32,",
          "636:                     0,",
          "637:                     &pixels[..],",
          "638:                 );",
          "639:             }",
          "640:             WebGlCommand::BlendEquation { eq } => {",
          "641:                 inner.ctx.blend_equation(eq as u32);",
          "642:             }",
          "643:             WebGlCommand::BlendFunc { b1, b2 } => {",
          "644:                 inner.ctx.blend_func(b1 as u32, b2 as u32);",
          "645:             }",
          "646:             WebGlCommand::BlendColor {",
          "647:                 red,",
          "648:                 green,",
          "649:                 blue,",
          "650:                 alpha,",
          "651:             } => {",
          "652:                 inner.ctx.blend_color(red, green, blue, alpha);",
          "653:             }",
          "654:             WebGlCommand::TexParameteri { kind, pname, param } => {",
          "655:                 inner.ctx.tex_parameteri(kind as u32, pname as u32, param);",
          "656:             }",
          "657:             WebGlCommand::TexParameterfv { kind, pname, param } => {",
          "658:                 inner.ctx.tex_parameterf(kind as u32, pname as u32, param);",
          "659:             }",
          "660:             WebGlCommand::DrawBuffers { buffers } => {",
          "661:                 let vals = js_sys::Array::new();",
          "662:                 for cb in buffers {",
          "663:                     let cb = cb as u32;",
          "664:                     vals.push(&wasm_bindgen::JsValue::from(cb));",
          "665:                 }",
          "666:                 inner.ctx.draw_buffers(&vals);",
          "667:             }",
          "668:             WebGlCommand::CreateFramebuffer(id) => {",
          "669:                 if let Some(r) = inner.ctx.create_framebuffer() {",
          "670:                     inner.framebuffers.insert(id, r);",
          "671:                 } else {",
          "672:                     warn!(\"failed to create frame buffer\");",
          "673:                 }",
          "674:             }",
          "675:             WebGlCommand::DeleteFramebuffer {",
          "676:                 framebuffer: framebuffer_id,",
          "677:             } => {",
          "678:                 let framebuffer = inner.framebuffers.remove(&framebuffer_id);",
          "679:                 if framebuffer.is_some() {",
          "680:                     inner.ctx.delete_framebuffer(framebuffer.as_ref());",
          "681:                 } else {",
          "682:                     warn!(\"orphaned frame buffer - {}\", framebuffer_id);",
          "683:                 }",
          "684:             }",
          "685:             WebGlCommand::BindFramebuffer {",
          "686:                 framebuffer,",
          "687:                 buffer,",
          "688:             } => {",
          "689:                 let framebuffer = inner.framebuffers.get(&framebuffer);",
          "690:                 inner.ctx.bind_framebuffer(buffer as u32, framebuffer);",
          "691:             }",
          "692:             WebGlCommand::UnbindFramebuffer { buffer } => {",
          "693:                 inner.ctx.bind_framebuffer(buffer as u32, None);",
          "694:             }",
          "695:             WebGlCommand::DeleteProgram {",
          "696:                 program: program_id,",
          "697:             } => {",
          "698:                 let program = inner.programs.remove(&program_id);",
          "699:                 if program.is_some() {",
          "700:                     inner.ctx.delete_program(program.as_ref());",
          "701:                 } else {",
          "702:                     warn!(\"orphaned program - {}\", program_id);",
          "703:                 }",
          "704:             }",
          "705:             WebGlCommand::LinkProgram { program, tx } => {",
          "706:                 let program = inner.programs.get(&program);",
          "707:                 if let Some(program) = program {",
          "708:                     inner.ctx.link_program(program);",
          "709:                     if inner",
          "710:                         .ctx",
          "711:                         .get_program_parameter(program, WebGl2RenderingContext::LINK_STATUS)",
          "712:                         .as_bool()",
          "713:                         .unwrap_or(false)",
          "714:                     {",
          "715:                         let _ = tx.send(Ok(())).await;",
          "716:                     } else {",
          "717:                         let err = inner.ctx.get_program_info_log(program);",
          "718:                         let err = err",
          "719:                             .unwrap_or_else(|| \"Unknown error creating program object\".to_string());",
          "720:                         let _ = tx.send(Err(err)).await;",
          "721:                     }",
          "722:                 } else {",
          "723:                     let _ = tx.send(Err(\"Invalid program ID\".to_string())).await;",
          "724:                 }",
          "725:             }",
          "726:             WebGlCommand::UseProgram { program } => {",
          "727:                 let program = inner.programs.get(&program);",
          "728:                 inner.ctx.use_program(program);",
          "729:             }",
          "730:             WebGlCommand::GetAttribLocation {",
          "731:                 program: program_id,",
          "732:                 name,",
          "733:                 id,",
          "734:             } => {",
          "735:                 let program = inner.programs.get(&program_id);",
          "736:                 if let Some(program) = program {",
          "737:                     let location = inner.ctx.get_attrib_location(program, name.as_str());",
          "738:                     inner.program_locations.insert(id, location);",
          "739:                 } else {",
          "740:                     warn!(\"orphaned program - {}\", program_id)",
          "741:                 }",
          "742:             }",
          "743:             WebGlCommand::DeleteAttribLocation { id } => {",
          "744:                 inner.program_locations.remove(&id);",
          "745:             }",
          "746:             WebGlCommand::GetUniformLocation {",
          "747:                 program: program_id,",
          "748:                 name,",
          "749:                 id,",
          "750:             } => {",
          "751:                 let program = inner.programs.get(&program_id);",
          "752:                 if let Some(program) = program {",
          "753:                     if let Some(r) = inner.ctx.get_uniform_location(program, name.as_str()) {",
          "754:                         inner.uniform_locations.insert(id, r);",
          "755:                     } else {",
          "756:                         warn!(\"failed to get uniform location\");",
          "757:                     }",
          "758:                 } else {",
          "759:                     warn!(\"orphaned program - {}\", program_id)",
          "760:                 }",
          "761:             }",
          "762:             WebGlCommand::GetProgramParameter {",
          "763:                 program: program_id,",
          "764:                 pname,",
          "765:                 id,",
          "766:             } => {",
          "767:                 let program = inner.programs.get(&program_id);",
          "768:                 if let Some(program) = program {",
          "769:                     let r = inner.ctx.get_program_parameter(program, pname as u32);",
          "770:                     if r.is_null() == false && r.is_undefined() == false {",
          "771:                         inner.program_parameters.insert(id, r);",
          "772:                     } else {",
          "773:                         warn!(\"failed to get program parameter\");",
          "774:                     }",
          "775:                 } else {",
          "776:                     warn!(\"orphaned program - {}\", program_id)",
          "777:                 }",
          "778:             }",
          "779:             WebGlCommand::VertexAttribPointer {",
          "780:                 location: location_id,",
          "781:                 size,",
          "782:                 kind,",
          "783:                 normalized,",
          "784:                 stride,",
          "785:                 offset,",
          "786:             } => {",
          "787:                 let location = inner.program_locations.get(&location_id);",
          "788:                 if let Some(location) = location {",
          "789:                     inner.ctx.vertex_attrib_pointer_with_i32(",
          "791:                         size as i32,",
          "792:                         kind as u32,",
          "793:                         normalized,",
          "794:                         stride as i32,",
          "795:                         offset as i32,",
          "796:                     );",
          "797:                 } else {",
          "798:                     warn!(\"orphaned program location - {}\", location_id)",
          "799:                 }",
          "800:             }",
          "801:             WebGlCommand::EnableVertexAttribArray {",
          "802:                 location: location_id,",
          "803:             } => {",
          "804:                 let location = inner.program_locations.get(&location_id);",
          "805:                 if let Some(location) = location {",
          "806:                     inner.ctx.enable_vertex_attrib_array(*location as u32);",
          "807:                 } else {",
          "808:                     warn!(\"orphaned program location - {}\", location_id)",
          "809:                 }",
          "810:             }",
          "811:             WebGlCommand::DeleteVertexArray {",
          "812:                 vertex_array: vertex_array_id,",
          "813:             } => {",
          "814:                 let vertex_array = inner.vertex_arrays.remove(&vertex_array_id);",
          "815:                 if vertex_array.is_some() {",
          "816:                     inner.ctx.delete_vertex_array(vertex_array.as_ref());",
          "817:                 } else {",
          "818:                     warn!(\"orphaned vertex array - {}\", vertex_array_id);",
          "819:                 }",
          "820:             }",
          "821:             WebGlCommand::BindVertexArray { vertex_array } => {",
          "822:                 let vertex_array = inner.vertex_arrays.get(&vertex_array);",
          "823:                 inner.ctx.bind_vertex_array(vertex_array);",
          "824:             }",
          "825:             WebGlCommand::UnbindVertexArray => {",
          "826:                 inner.ctx.bind_vertex_array(None);",
          "827:             }",
          "828:             WebGlCommand::UniformMatrix4fv {",
          "829:                 location: location_id,",
          "830:                 transpose,",
          "831:                 value,",
          "832:             } => {",
          "833:                 let location = inner.uniform_locations.get(&location_id);",
          "834:                 if let Some(location) = location {",
          "835:                     unsafe {",
          "836:                         let array =",
          "837:                             std::mem::transmute::<&[[f32; 4]; 4], &[f32; 16]>(&value) as &[f32];",
          "838:                         inner.ctx.uniform_matrix4fv_with_f32_array(",
          "839:                             Some(location),",
          "840:                             transpose,",
          "841:                             array,",
          "842:                         );",
          "843:                     }",
          "844:                 } else {",
          "845:                     warn!(\"orphaned location - {}\", location_id);",
          "846:                 }",
          "847:             }",
          "848:             WebGlCommand::UniformMatrix3fv {",
          "849:                 location: location_id,",
          "850:                 transpose,",
          "851:                 value,",
          "852:             } => {",
          "853:                 let location = inner.uniform_locations.get(&location_id);",
          "854:                 if let Some(location) = location {",
          "855:                     unsafe {",
          "856:                         let array =",
          "857:                             std::mem::transmute::<&[[f32; 3]; 3], &[f32; 9]>(&value) as &[f32];",
          "858:                         inner.ctx.uniform_matrix3fv_with_f32_array(",
          "859:                             Some(location),",
          "860:                             transpose,",
          "861:                             array,",
          "862:                         );",
          "863:                     }",
          "864:                 } else {",
          "865:                     warn!(\"orphaned location - {}\", location_id);",
          "866:                 }",
          "867:             }",
          "868:             WebGlCommand::UniformMatrix2fv {",
          "869:                 location: location_id,",
          "870:                 transpose,",
          "871:                 value,",
          "872:             } => {",
          "873:                 let location = inner.uniform_locations.get(&location_id);",
          "874:                 if let Some(location) = location {",
          "875:                     unsafe {",
          "876:                         let array =",
          "877:                             std::mem::transmute::<&[[f32; 2]; 2], &[f32; 4]>(&value) as &[f32];",
          "878:                         inner.ctx.uniform_matrix2fv_with_f32_array(",
          "879:                             Some(location),",
          "880:                             transpose,",
          "881:                             array,",
          "882:                         );",
          "883:                     }",
          "884:                 } else {",
          "885:                     warn!(\"orphaned location - {}\", location_id);",
          "886:                 }",
          "887:             }",
          "888:             WebGlCommand::Uniform1i { location, value } => {",
          "889:                 let location = inner.uniform_locations.get(&location);",
          "890:                 inner.ctx.uniform1i(location, value);",
          "891:             }",
          "892:             WebGlCommand::Uniform1f { location, value } => {",
          "893:                 let location = inner.uniform_locations.get(&location);",
          "894:                 inner.ctx.uniform1f(location, value);",
          "895:             }",
          "896:             WebGlCommand::Uniform2f { location, value } => {",
          "897:                 let location = inner.uniform_locations.get(&location);",
          "898:                 inner.ctx.uniform2f(location, value.0, value.1);",
          "899:             }",
          "900:             WebGlCommand::Uniform3f { location, value } => {",
          "901:                 let location = inner.uniform_locations.get(&location);",
          "902:                 inner.ctx.uniform3f(location, value.0, value.1, value.2);",
          "903:             }",
          "904:             WebGlCommand::Uniform4f { location, value } => {",
          "905:                 let location = inner.uniform_locations.get(&location);",
          "906:                 inner",
          "907:                     .ctx",
          "908:                     .uniform4f(location, value.0, value.1, value.2, value.3);",
          "909:             }",
          "910:             WebGlCommand::CreateShader { kind, id } => {",
          "911:                 if let Some(r) = inner.ctx.create_shader(kind as u32) {",
          "912:                     inner.shaders.insert(id, r);",
          "913:                 } else {",
          "914:                     warn!(\"failed to create shader\");",
          "915:                 }",
          "916:             }",
          "917:             WebGlCommand::DeleteShader { shader: shader_id } => {",
          "918:                 let shader = inner.shaders.remove(&shader_id);",
          "919:                 if shader.is_some() {",
          "920:                     inner.ctx.delete_shader(shader.as_ref());",
          "921:                 } else {",
          "922:                     warn!(\"orphaned shader - {}\", shader_id);",
          "923:                 }",
          "924:             }",
          "925:             WebGlCommand::ShaderSource {",
          "926:                 shader: shader_id,",
          "927:                 source,",
          "928:             } => {",
          "929:                 let shader = inner.shaders.get(&shader_id);",
          "930:                 if let Some(shader) = shader {",
          "931:                     inner.ctx.shader_source(shader, source.as_str());",
          "932:                 } else {",
          "933:                     warn!(\"orphaned shader - {}\", shader_id);",
          "934:                 }",
          "935:             }",
          "936:             WebGlCommand::ShaderCompile { shader, tx } => {",
          "937:                 let shader = inner.shaders.get(&shader);",
          "938:                 if let Some(shader) = shader {",
          "939:                     inner.ctx.compile_shader(shader);",
          "940:                     if inner",
          "941:                         .ctx",
          "942:                         .get_shader_parameter(shader, WebGl2RenderingContext::COMPILE_STATUS)",
          "943:                         .as_bool()",
          "944:                         .unwrap_or(false)",
          "945:                     {",
          "946:                         let _ = tx.send(Ok(())).await;",
          "947:                     } else {",
          "948:                         let err = inner.ctx.get_shader_info_log(shader);",
          "949:                         let err =",
          "950:                             err.unwrap_or_else(|| \"Unknown error compiling the shader\".to_string());",
          "951:                         let _ = tx.send(Err(err)).await;",
          "952:                     }",
          "953:                 } else {",
          "954:                     let _ = tx.send(Err(\"The shader is not valid\".to_string())).await;",
          "955:                 }",
          "956:             }",
          "957:             WebGlCommand::AttachShader {",
          "958:                 program,",
          "959:                 shader,",
          "960:                 tx,",
          "961:             } => {",
          "962:                 let program = inner.programs.get(&program);",
          "963:                 let shader = inner.shaders.get(&shader);",
          "964:                 if let (Some(program), Some(shader)) = (program, shader) {",
          "965:                     inner.ctx.attach_shader(program, shader);",
          "966:                     let _ = tx.send(Ok(())).await;",
          "967:                 } else {",
          "968:                     let _ = tx.send(Err(\"The shader is not valid\".to_string())).await;",
          "969:                 }",
          "970:             }",
          "971:             WebGlCommand::ShowCanvas => {",
          "972:                 show_canvas();",
          "973:             }",
          "974:             WebGlCommand::ShowTerminal => {",
          "975:                 show_terminal();",
          "976:             }",
          "977:             WebGlCommand::Sync { tx } => {",
          "978:                 let _ = tx.send(()).await;",
          "979:             }",
          "980:         };",
          "981:     }",
          "982: }",
          "984: impl RenderingContextAbi for GlContext {",
          "985:     fn create_program(&self) -> ProgramId {",
          "986:         let id = ProgramId::new();",
          "987:         System::default().fire_and_forget(&self.tx, WebGlCommand::CreateProgram(id));",
          "988:         id",
          "989:     }",
          "991:     fn create_buffer(&self) -> BufferId {",
          "992:         let id = BufferId::new();",
          "993:         System::default().fire_and_forget(&self.tx, WebGlCommand::CreateBuffer(id));",
          "994:         id",
          "995:     }",
          "997:     fn create_vertex_array(&self) -> VertexArrayId {",
          "998:         let id = VertexArrayId::new();",
          "999:         System::default().fire_and_forget(&self.tx, WebGlCommand::CreateVertexArray(id));",
          "1000:         id",
          "1001:     }",
          "1003:     fn create_texture(&self) -> TextureId {",
          "1004:         let id = TextureId::new();",
          "1005:         System::default().fire_and_forget(&self.tx, WebGlCommand::CreateTexture(id));",
          "1006:         id",
          "1007:     }",
          "1009:     fn bind_buffer(&self, buffer: BufferId, kind: BufferKind) {",
          "1010:         System::default().fire_and_forget(&self.tx, WebGlCommand::BindBuffer { buffer, kind });",
          "1011:     }",
          "1013:     fn delete_buffer(&self, buffer: BufferId) {",
          "1014:         System::default().fire_and_forget(&self.tx, WebGlCommand::DeleteBuffer { buffer });",
          "1015:     }",
          "1017:     fn delete_texture(&self, texture: TextureId) {",
          "1018:         System::default().fire_and_forget(&self.tx, WebGlCommand::DeleteTexture { texture });",
          "1019:     }",
          "1021:     fn active_texture(&self, active: u32) {",
          "1022:         System::default().fire_and_forget(&self.tx, WebGlCommand::ActiveTexture { active });",
          "1023:     }",
          "1025:     fn bind_texture(&self, texture: TextureId, target: TextureKind) {",
          "1026:         System::default().fire_and_forget(&self.tx, WebGlCommand::BindTexture { texture, target });",
          "1027:     }",
          "1029:     fn bind_texture_cube(&self, texture: TextureId, target: TextureKind) {",
          "1030:         System::default()",
          "1031:             .fire_and_forget(&self.tx, WebGlCommand::BindTextureCube { texture, target });",
          "1032:     }",
          "1034:     fn framebuffer_texture2d(",
          "1035:         &self,",
          "1036:         texture: TextureId,",
          "1037:         target: Buffers,",
          "1038:         attachment: Buffers,",
          "1039:         textarget: TextureBindPoint,",
          "1040:         level: i32,",
          "1041:     ) {",
          "1042:         System::default().fire_and_forget(",
          "1043:             &self.tx,",
          "1044:             WebGlCommand::FramebufferTexture2D {",
          "1045:                 texture,",
          "1046:                 target,",
          "1047:                 attachment,",
          "1048:                 textarget,",
          "1049:                 level,",
          "1050:             },",
          "1051:         );",
          "1052:     }",
          "1054:     fn clear_color(&self, red: f32, green: f32, blue: f32, alpha: f32) {",
          "1055:         System::default().fire_and_forget(",
          "1056:             &self.tx,",
          "1057:             WebGlCommand::ClearColor {",
          "1058:                 red,",
          "1059:                 green,",
          "1060:                 blue,",
          "1061:                 alpha,",
          "1062:             },",
          "1063:         );",
          "1064:     }",
          "1066:     fn clear(&self, bit: BufferBit) {",
          "1067:         System::default().fire_and_forget(&self.tx, WebGlCommand::Clear { bit });",
          "1068:     }",
          "1070:     fn clear_depth(&self, value: f32) {",
          "1071:         System::default().fire_and_forget(&self.tx, WebGlCommand::ClearDepth { value });",
          "1072:     }",
          "1074:     fn draw_arrays(&self, mode: Primitives, first: i32, count: i32) {",
          "1075:         System::default()",
          "1076:             .fire_and_forget(&self.tx, WebGlCommand::DrawArrays { mode, first, count });",
          "1077:     }",
          "1079:     fn draw_elements(&self, mode: Primitives, count: i32, kind: DataType, offset: u32) {",
          "1080:         System::default().fire_and_forget(",
          "1081:             &self.tx,",
          "1082:             WebGlCommand::DrawElements {",
          "1083:                 mode,",
          "1084:                 count,",
          "1085:                 kind,",
          "1086:                 offset,",
          "1087:             },",
          "1088:         );",
          "1089:     }",
          "1091:     fn enable(&self, flag: Flag) {",
          "1092:         System::default().fire_and_forget(&self.tx, WebGlCommand::Enable { flag });",
          "1093:     }",
          "1095:     fn disable(&self, flag: Flag) {",
          "1096:         System::default().fire_and_forget(&self.tx, WebGlCommand::Disable { flag });",
          "1097:     }",
          "1099:     fn cull_face(&self, culling: Culling) {",
          "1100:         System::default().fire_and_forget(&self.tx, WebGlCommand::CullFace { culling });",
          "1101:     }",
          "1103:     fn depth_mask(&self, val: bool) {",
          "1104:         System::default().fire_and_forget(&self.tx, WebGlCommand::DepthMask { val });",
          "1105:     }",
          "1107:     fn depth_funct(&self, val: DepthTest) {",
          "1108:         System::default().fire_and_forget(&self.tx, WebGlCommand::DepthFunct { val });",
          "1109:     }",
          "1111:     fn viewport(&self, x: i32, y: i32, width: u32, height: u32) {",
          "1112:         System::default().fire_and_forget(",
          "1113:             &self.tx,",
          "1114:             WebGlCommand::Viewport {",
          "1115:                 x,",
          "1116:                 y,",
          "1117:                 width,",
          "1118:                 height,",
          "1119:             },",
          "1120:         );",
          "1121:     }",
          "1123:     fn buffer_data(&self, kind: BufferKind, data: Vec<u8>, draw: DrawMode) {",
          "1124:         System::default().fire_and_forget(&self.tx, WebGlCommand::BufferData { kind, data, draw });",
          "1125:     }",
          "1127:     fn unbind_buffer(&self, kind: BufferKind) {",
          "1128:         System::default().fire_and_forget(&self.tx, WebGlCommand::UnbindBuffer { kind });",
          "1129:     }",
          "1131:     fn read_pixels(",
          "1132:         &self,",
          "1133:         x: u32,",
          "1134:         y: u32,",
          "1135:         width: u32,",
          "1136:         height: u32,",
          "1137:         format: PixelFormat,",
          "1138:         kind: PixelType,",
          "1139:         serialization_format: SerializationFormat,",
          "1140:     ) -> AsyncResult<Result<Vec<u8>, String>> {",
          "1141:         let (tx, rx) = mpsc::channel(1);",
          "1142:         System::default().fire_and_forget(",
          "1143:             &self.tx,",
          "1144:             WebGlCommand::ReadPixels {",
          "1145:                 x,",
          "1146:                 y,",
          "1147:                 width,",
          "1148:                 height,",
          "1149:                 format,",
          "1150:                 kind,",
          "1151:                 tx,",
          "1152:             },",
          "1153:         );",
          "1154:         AsyncResult::new(serialization_format, rx)",
          "1155:     }",
          "1157:     fn pixel_storei(&self, storage: PixelStorageMode, value: i32) {",
          "1158:         System::default().fire_and_forget(&self.tx, WebGlCommand::PixelStorei { storage, value });",
          "1159:     }",
          "1161:     fn generate_mipmap(&self) {",
          "1162:         System::default().fire_and_forget(&self.tx, WebGlCommand::GenerateMipMap);",
          "1163:     }",
          "1165:     fn generate_mipmap_cube(&self) {",
          "1166:         System::default().fire_and_forget(&self.tx, WebGlCommand::GenerateMipMapCube);",
          "1167:     }",
          "1169:     fn tex_image2d(",
          "1170:         &self,",
          "1171:         target: TextureBindPoint,",
          "1172:         level: u8,",
          "1173:         width: u32,",
          "1174:         height: u32,",
          "1175:         format: PixelFormat,",
          "1176:         kind: PixelType,",
          "1177:         pixels: Vec<u8>,",
          "1178:     ) {",
          "1179:         System::default().fire_and_forget(",
          "1180:             &self.tx,",
          "1181:             WebGlCommand::TexImage2D {",
          "1182:                 target,",
          "1183:                 level,",
          "1184:                 width,",
          "1185:                 height,",
          "1186:                 format,",
          "1187:                 kind,",
          "1188:                 pixels,",
          "1189:             },",
          "1190:         );",
          "1191:     }",
          "1193:     fn tex_sub_image2d(",
          "1194:         &self,",
          "1195:         target: TextureBindPoint,",
          "1196:         level: u8,",
          "1197:         xoffset: u32,",
          "1198:         yoffset: u32,",
          "1199:         width: u32,",
          "1200:         height: u32,",
          "1201:         format: PixelFormat,",
          "1202:         kind: PixelType,",
          "1203:         pixels: Vec<u8>,",
          "1204:     ) {",
          "1205:         System::default().fire_and_forget(",
          "1206:             &self.tx,",
          "1207:             WebGlCommand::TexSubImage2D {",
          "1208:                 target,",
          "1209:                 level,",
          "1210:                 xoffset,",
          "1211:                 yoffset,",
          "1212:                 width,",
          "1213:                 height,",
          "1214:                 format,",
          "1215:                 kind,",
          "1216:                 pixels,",
          "1217:             },",
          "1218:         );",
          "1219:     }",
          "1221:     fn compressed_tex_image2d(",
          "1222:         &self,",
          "1223:         target: TextureBindPoint,",
          "1224:         level: u8,",
          "1225:         compression: TextureCompression,",
          "1226:         width: u32,",
          "1227:         height: u32,",
          "1228:         data: Vec<u8>,",
          "1229:     ) {",
          "1230:         System::default().fire_and_forget(",
          "1231:             &self.tx,",
          "1232:             WebGlCommand::CompressedTexImage2D {",
          "1233:                 target,",
          "1234:                 level,",
          "1235:                 compression,",
          "1236:                 width,",
          "1237:                 height,",
          "1238:                 data,",
          "1239:             },",
          "1240:         );",
          "1241:     }",
          "1243:     fn unbind_texture(&self, target: u32) {",
          "1244:         System::default().fire_and_forget(&self.tx, WebGlCommand::UnbindTexture { target });",
          "1245:     }",
          "1247:     fn unbind_texture_cube(&self, target: u32) {",
          "1248:         System::default().fire_and_forget(&self.tx, WebGlCommand::UnbindTextureCube { target });",
          "1249:     }",
          "1251:     fn blend_equation(&self, eq: BlendEquation) {",
          "1252:         System::default().fire_and_forget(&self.tx, WebGlCommand::BlendEquation { eq });",
          "1253:     }",
          "1255:     fn blend_func(&self, b1: BlendMode, b2: BlendMode) {",
          "1256:         System::default().fire_and_forget(&self.tx, WebGlCommand::BlendFunc { b1, b2 });",
          "1257:     }",
          "1259:     fn blend_color(&self, red: f32, green: f32, blue: f32, alpha: f32) {",
          "1260:         System::default().fire_and_forget(",
          "1261:             &self.tx,",
          "1262:             WebGlCommand::BlendColor {",
          "1263:                 red,",
          "1264:                 green,",
          "1265:                 blue,",
          "1266:                 alpha,",
          "1267:             },",
          "1268:         );",
          "1269:     }",
          "1271:     fn tex_parameteri(&self, kind: TextureKind, pname: TextureParameter, param: i32) {",
          "1272:         System::default()",
          "1273:             .fire_and_forget(&self.tx, WebGlCommand::TexParameteri { kind, pname, param });",
          "1274:     }",
          "1276:     fn tex_parameterfv(&self, kind: TextureKind, pname: TextureParameter, param: f32) {",
          "1277:         System::default().fire_and_forget(",
          "1278:             &self.tx,",
          "1279:             WebGlCommand::TexParameterfv { kind, pname, param },",
          "1280:         );",
          "1281:     }",
          "1283:     fn draw_buffers(&self, buffers: Vec<ColorBuffer>) {",
          "1284:         System::default().fire_and_forget(&self.tx, WebGlCommand::DrawBuffers { buffers });",
          "1285:     }",
          "1287:     fn create_framebuffer(&self) -> FrameBufferId {",
          "1288:         let id = FrameBufferId::new();",
          "1289:         System::default().fire_and_forget(&self.tx, WebGlCommand::CreateFramebuffer(id));",
          "1290:         id",
          "1291:     }",
          "1293:     fn unbind_framebuffer(&self, buffer: Buffers) {",
          "1294:         System::default().fire_and_forget(&self.tx, WebGlCommand::UnbindFramebuffer { buffer });",
          "1295:     }",
          "1297:     fn delete_framebuffer(&self, framebuffer: FrameBufferId) {",
          "1298:         System::default()",
          "1299:             .fire_and_forget(&self.tx, WebGlCommand::DeleteFramebuffer { framebuffer });",
          "1300:     }",
          "1302:     fn bind_framebuffer(&self, framebuffer: FrameBufferId, buffer: Buffers) {",
          "1303:         System::default().fire_and_forget(",
          "1304:             &self.tx,",
          "1305:             WebGlCommand::BindFramebuffer {",
          "1306:                 framebuffer,",
          "1307:                 buffer,",
          "1308:             },",
          "1309:         );",
          "1310:     }",
          "1312:     fn delete_program(&self, program: ProgramId) {",
          "1313:         System::default().fire_and_forget(&self.tx, WebGlCommand::DeleteProgram { program });",
          "1314:     }",
          "1316:     fn link_program(",
          "1317:         &self,",
          "1318:         program: ProgramId,",
          "1319:         serialization_format: SerializationFormat,",
          "1320:     ) -> AsyncResult<Result<(), String>> {",
          "1321:         let (tx, rx) = mpsc::channel(1);",
          "1322:         System::default().fire_and_forget(&self.tx, WebGlCommand::LinkProgram { program, tx });",
          "1323:         AsyncResult::new(serialization_format, rx)",
          "1324:     }",
          "1326:     fn use_program(&self, program: ProgramId) {",
          "1327:         System::default().fire_and_forget(&self.tx, WebGlCommand::UseProgram { program });",
          "1328:     }",
          "1330:     fn get_attrib_location(&self, program: ProgramId, name: String) -> ProgramLocationId {",
          "1331:         let id = ProgramLocationId::new();",
          "1332:         System::default().fire_and_forget(",
          "1333:             &self.tx,",
          "1334:             WebGlCommand::GetAttribLocation { program, name, id },",
          "1335:         );",
          "1336:         id",
          "1337:     }",
          "1339:     fn delete_attrib_location(&self, location: ProgramLocationId) {",
          "1340:         System::default().fire_and_forget(",
          "1341:             &self.tx,",
          "1342:             WebGlCommand::DeleteAttribLocation { id: location },",
          "1343:         );",
          "1344:     }",
          "1346:     fn get_uniform_location(&self, program: ProgramId, name: String) -> UniformLocationId {",
          "1347:         let id = UniformLocationId::new();",
          "1348:         System::default().fire_and_forget(",
          "1349:             &self.tx,",
          "1350:             WebGlCommand::GetUniformLocation { program, name, id },",
          "1351:         );",
          "1352:         id",
          "1353:     }",
          "1355:     fn get_program_parameter(",
          "1356:         &self,",
          "1357:         program: ProgramId,",
          "1358:         pname: ShaderParameter,",
          "1359:     ) -> ProgramParameterId {",
          "1360:         let id = ProgramParameterId::new();",
          "1361:         System::default().fire_and_forget(",
          "1362:             &self.tx,",
          "1363:             WebGlCommand::GetProgramParameter { program, pname, id },",
          "1364:         );",
          "1365:         id",
          "1366:     }",
          "1368:     fn vertex_attrib_pointer(",
          "1369:         &self,",
          "1370:         location: ProgramLocationId,",
          "1371:         size: AttributeSize,",
          "1372:         kind: DataType,",
          "1373:         normalized: bool,",
          "1374:         stride: u32,",
          "1375:         offset: u32,",
          "1376:     ) {",
          "1377:         System::default().fire_and_forget(",
          "1378:             &self.tx,",
          "1379:             WebGlCommand::VertexAttribPointer {",
          "1380:                 location,",
          "1381:                 size,",
          "1382:                 kind,",
          "1383:                 normalized,",
          "1384:                 stride,",
          "1385:                 offset,",
          "1386:             },",
          "1387:         );",
          "1388:     }",
          "1390:     fn enable_vertex_attrib_array(&self, location: ProgramLocationId) {",
          "1391:         System::default()",
          "1392:             .fire_and_forget(&self.tx, WebGlCommand::EnableVertexAttribArray { location });",
          "1393:     }",
          "1395:     fn delete_vertex_array(&self, vertex_array: VertexArrayId) {",
          "1396:         System::default()",
          "1397:             .fire_and_forget(&self.tx, WebGlCommand::DeleteVertexArray { vertex_array });",
          "1398:     }",
          "1400:     fn bind_vertex_array(&self, vertex_array: VertexArrayId) {",
          "1401:         System::default().fire_and_forget(&self.tx, WebGlCommand::BindVertexArray { vertex_array });",
          "1402:     }",
          "1404:     fn unbind_vertex_array(&self) {",
          "1405:         System::default().fire_and_forget(&self.tx, WebGlCommand::UnbindVertexArray);",
          "1406:     }",
          "1408:     fn uniform_matrix_4fv(",
          "1409:         &self,",
          "1410:         location: UniformLocationId,",
          "1411:         transpose: bool,",
          "1412:         value: [[f32; 4]; 4],",
          "1413:     ) {",
          "1414:         System::default().fire_and_forget(",
          "1415:             &self.tx,",
          "1416:             WebGlCommand::UniformMatrix4fv {",
          "1417:                 location,",
          "1418:                 transpose,",
          "1419:                 value,",
          "1420:             },",
          "1421:         );",
          "1422:     }",
          "1424:     fn uniform_matrix_3fv(",
          "1425:         &self,",
          "1426:         location: UniformLocationId,",
          "1427:         transpose: bool,",
          "1428:         value: [[f32; 3]; 3],",
          "1429:     ) {",
          "1430:         System::default().fire_and_forget(",
          "1431:             &self.tx,",
          "1432:             WebGlCommand::UniformMatrix3fv {",
          "1433:                 location,",
          "1434:                 transpose,",
          "1435:                 value,",
          "1436:             },",
          "1437:         );",
          "1438:     }",
          "1440:     fn uniform_matrix_2fv(",
          "1441:         &self,",
          "1442:         location: UniformLocationId,",
          "1443:         transpose: bool,",
          "1444:         value: [[f32; 2]; 2],",
          "1445:     ) {",
          "1446:         System::default().fire_and_forget(",
          "1447:             &self.tx,",
          "1448:             WebGlCommand::UniformMatrix2fv {",
          "1449:                 location,",
          "1450:                 transpose,",
          "1451:                 value,",
          "1452:             },",
          "1453:         );",
          "1454:     }",
          "1456:     fn uniform_1i(&self, location: UniformLocationId, value: i32) {",
          "1457:         System::default().fire_and_forget(&self.tx, WebGlCommand::Uniform1i { location, value });",
          "1458:     }",
          "1460:     fn uniform_1f(&self, location: UniformLocationId, value: f32) {",
          "1461:         System::default().fire_and_forget(&self.tx, WebGlCommand::Uniform1f { location, value });",
          "1462:     }",
          "1464:     fn uniform_2f(&self, location: UniformLocationId, value: (f32, f32)) {",
          "1465:         System::default().fire_and_forget(&self.tx, WebGlCommand::Uniform2f { location, value });",
          "1466:     }",
          "1468:     fn uniform_3f(&self, location: UniformLocationId, value: (f32, f32, f32)) {",
          "1469:         System::default().fire_and_forget(&self.tx, WebGlCommand::Uniform3f { location, value });",
          "1470:     }",
          "1472:     fn uniform_4f(&self, location: UniformLocationId, value: (f32, f32, f32, f32)) {",
          "1473:         System::default().fire_and_forget(&self.tx, WebGlCommand::Uniform4f { location, value });",
          "1474:     }",
          "1476:     fn create_shader(&self, kind: ShaderKind) -> ShaderId {",
          "1477:         let id = ShaderId::new();",
          "1478:         System::default().fire_and_forget(&self.tx, WebGlCommand::CreateShader { kind, id });",
          "1479:         id",
          "1480:     }",
          "1482:     fn delete_shader(&self, shader: ShaderId) {",
          "1483:         System::default().fire_and_forget(&self.tx, WebGlCommand::DeleteShader { shader });",
          "1484:     }",
          "1486:     fn shader_source(&self, shader: ShaderId, source: String) {",
          "1487:         System::default().fire_and_forget(&self.tx, WebGlCommand::ShaderSource { shader, source });",
          "1488:     }",
          "1490:     fn shader_compile(",
          "1491:         &self,",
          "1492:         shader: ShaderId,",
          "1493:         serialization_format: SerializationFormat,",
          "1494:     ) -> AsyncResult<Result<(), String>> {",
          "1495:         let (tx, rx) = mpsc::channel(1);",
          "1496:         System::default().fire_and_forget(&self.tx, WebGlCommand::ShaderCompile { shader, tx });",
          "1497:         AsyncResult::new(serialization_format, rx)",
          "1498:     }",
          "1500:     fn attach_shader(",
          "1501:         &self,",
          "1502:         program: ProgramId,",
          "1503:         shader: ShaderId,",
          "1504:         serialization_format: SerializationFormat,",
          "1505:     ) -> AsyncResult<Result<(), String>> {",
          "1506:         let (tx, rx) = mpsc::channel(1);",
          "1507:         System::default().fire_and_forget(",
          "1508:             &self.tx,",
          "1509:             WebGlCommand::AttachShader {",
          "1510:                 program,",
          "1511:                 shader,",
          "1512:                 tx,",
          "1513:             },",
          "1514:         );",
          "1515:         AsyncResult::new(serialization_format, rx)",
          "1516:     }",
          "1518:     fn sync(&self, serialization_format: SerializationFormat) -> AsyncResult<()> {",
          "1519:         let (tx, rx) = mpsc::channel(1);",
          "1520:         System::default().fire_and_forget(&self.tx, WebGlCommand::Sync { tx });",
          "1521:         AsyncResult::new(serialization_format, rx)",
          "1522:     }",
          "1523: }",
          "1525: impl Drop for GlContext {",
          "1526:     fn drop(&mut self) {",
          "1527:         System::default().fire_and_forget(&self.tx, WebGlCommand::ShowTerminal);",
          "1528:     }",
          "1529: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/src/ws.rs||lib/wasi-web/src/ws.rs": [
          "File: lib/wasi-web/src/ws.rs -> lib/wasi-web/src/ws.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use std::{ops::*, sync::Arc};",
          "3: #[allow(unused_imports, dead_code)]",
          "4: use tracing::{debug, error, info, trace, warn};",
          "5: use wasm_bindgen::{prelude::*, JsCast};",
          "6: use web_sys::{MessageEvent, WebSocket as WebSocketSys};",
          "8: #[derive(Clone)]",
          "10: pub struct WebSocket {",
          "11:     sys: WebSocketSys,",
          "12: }",
          "14: impl WebSocket {",
          "15:     pub fn new(url: &str) -> Result<Self, String> {",
          "17:         let ws_sys = WebSocketSys::new(url).map_err(|err| format!(\"{:?}\", err))?;",
          "19:         Ok(Box::new(Self { sys: ws_sys }))",
          "20:     }",
          "21: }",
          "23: impl WebSocket {",
          "24:     fn set_onopen(&mut self, mut callback: Box<dyn FnMut()>) {",
          "25:         let callback = Closure::wrap(Box::new(move |_e: web_sys::ProgressEvent| {",
          "26:             callback.deref_mut()();",
          "27:         }) as Box<dyn FnMut(web_sys::ProgressEvent)>);",
          "28:         self.sys.set_onopen(Some(callback.as_ref().unchecked_ref()));",
          "29:         callback.forget();",
          "30:     }",
          "32:     fn set_onclose(&mut self, callback: Box<dyn Fn() + Send + 'static>) {",
          "33:         let callback = Closure::wrap(Box::new(move |_e: web_sys::ProgressEvent| {",
          "34:             callback.deref()();",
          "35:         }) as Box<dyn FnMut(web_sys::ProgressEvent)>);",
          "36:         self.sys",
          "37:             .set_onclose(Some(callback.as_ref().unchecked_ref()));",
          "38:         callback.forget();",
          "39:     }",
          "41:     fn set_onmessage(",
          "42:         &mut self,",
          "43:         callback: Box<dyn Fn(Vec<u8>) + Send + 'static>,",
          "44:     ) {",
          "45:         let callback = Arc::new(callback);",
          "47:         let fr = web_sys::FileReader::new().unwrap();",
          "48:         let fr_c = fr.clone();",
          "49:         let onloadend_cb = {",
          "50:             let callback = callback.clone();",
          "51:             Closure::wrap(Box::new(move |_e: web_sys::ProgressEvent| {",
          "52:                 let array = js_sys::Uint8Array::new(&fr_c.result().unwrap());",
          "53:                 let data = array.to_vec();",
          "54:                 callback.deref()(data);",
          "55:             }) as Box<dyn FnMut(web_sys::ProgressEvent)>)",
          "56:         };",
          "57:         fr.set_onloadend(Some(onloadend_cb.as_ref().unchecked_ref()));",
          "58:         onloadend_cb.forget();",
          "61:         let onmessage_callback = {",
          "62:             let callback = callback.clone();",
          "63:             Closure::wrap(Box::new(move |e: MessageEvent| {",
          "64:                 if let Ok(abuf) = e.data().dyn_into::<js_sys::ArrayBuffer>() {",
          "65:                     let data = js_sys::Uint8Array::new(&abuf).to_vec();",
          "66:                     callback.deref()(data);",
          "67:                 } else if let Ok(blob) = e.data().dyn_into::<web_sys::Blob>() {",
          "68:                     fr.read_as_array_buffer(&blob).expect(\"blob not readable\");",
          "69:                 } else if let Ok(txt) = e.data().dyn_into::<js_sys::JsString>() {",
          "70:                     debug!(\"message event, received Text: {:?}\", txt);",
          "71:                 } else {",
          "72:                     debug!(\"websocket received unknown message type\");",
          "73:                 }",
          "74:             }) as Box<dyn FnMut(MessageEvent)>)",
          "75:         };",
          "76:         self.sys.set_binary_type(web_sys::BinaryType::Arraybuffer);",
          "77:         self.sys",
          "78:             .set_onmessage(Some(onmessage_callback.as_ref().unchecked_ref()));",
          "79:         onmessage_callback.forget();",
          "80:     }",
          "82:     fn send(&mut self, data: Vec<u8>) -> Result<(), String> {",
          "83:         let data_len = data.len();",
          "84:         let array = js_sys::Uint8Array::new_with_length(data_len as u32);",
          "85:         array.copy_from(&data[..]);",
          "86:         self.sys",
          "87:             .send_with_array_buffer(&array.buffer())",
          "88:             .map_err(|err| format!(\"{:?}\", err))",
          "89:     }",
          "90: }",
          "",
          "---------------"
        ],
        "lib/wasi-web/webpack.config.mjs||lib/wasi-web/webpack.config.mjs": [
          "File: lib/wasi-web/webpack.config.mjs -> lib/wasi-web/webpack.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { dirname, resolve } from 'path';",
          "2: import { fileURLToPath } from 'url';",
          "3: import WasmPackPlugin from '@wasm-tool/wasm-pack-plugin';",
          "4: import CopyPlugin from 'copy-webpack-plugin';",
          "6: const __dirname = dirname(fileURLToPath(import.meta.url));",
          "8: export default {",
          "9:   mode: 'production',",
          "10:   entry: resolve(__dirname, './js/index.js'),",
          "11:   plugins: [",
          "12:     new CopyPlugin({",
          "13:       patterns: [",
          "14:         { from: resolve(__dirname, \"node_modules/xterm/css/xterm.css\") },",
          "15:         { from: resolve(__dirname, \"node_modules/xterm/lib/xterm.js.map\") },",
          "16:         { from: resolve(__dirname, \"public/index.html\") },",
          "17:         { from: resolve(__dirname, \"public/wasmer.css\") },",
          "18:         { from: resolve(__dirname, \"public/worker.js\") },",
          "19:       ],",
          "20:     }),",
          "21:     new WasmPackPlugin({",
          "22:         crateDirectory: resolve(__dirname, './'),",
          "29:         args: '--log-level warn',",
          "31:         extraArgs: '--target web',",
          "63:     }),",
          "64:   ],",
          "65:   devServer: {",
          "66:     compress: true,",
          "67:     client: {",
          "68:       overlay: {",
          "69:         errors: true,",
          "70:         warnings: false,",
          "71:       },",
          "72:     },",
          "73:     headers: {",
          "76:       'cross-origin-embedder-policy': 'require-corp',",
          "77:       'cross-origin-opener-policy': 'same-origin'",
          "78:     },",
          "80:     port: 9000,",
          "81:   },",
          "82:   output: {",
          "83:     filename: 'main.js',",
          "84:     path: resolve(__dirname, 'dist'),",
          "85:   },",
          "86:   optimization: {",
          "87:     minimize: false",
          "88:   },",
          "89: };",
          "",
          "---------------"
        ],
        "lib/wasi/src/state/builder.rs||lib/wasi/src/state/builder.rs": [
          "File: lib/wasi/src/state/builder.rs -> lib/wasi/src/state/builder.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use wasmer::{AsStoreMut, Instance, Module};",
          "13: use wasmer_wasix_types::wasi::Errno;",
          "15: use crate::{",
          "16:     bin_factory::{BinFactory, ModuleCache},",
          "17:     capabilities::Capabilities,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #[cfg(feature = \"sys\")]",
          "16: use crate::PluggableRuntime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     parse_static_webc,",
          "21:     state::WasiState,",
          "22:     syscalls::types::{__WASI_STDERR_FILENO, __WASI_STDIN_FILENO, __WASI_STDOUT_FILENO},",
          "24: };",
          "26: use super::env::WasiEnvInit;",
          "",
          "[Removed Lines]",
          "23:     PluggableRuntime, WasiEnv, WasiFunctionEnv, WasiRuntime, WasiRuntimeError,",
          "",
          "[Added Lines]",
          "25:     WasiEnv, WasiFunctionEnv, WasiRuntime, WasiRuntimeError,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2afcb78d4596e22c625ce5660267533ef94945a0",
      "candidate_info": {
        "commit_hash": "2afcb78d4596e22c625ce5660267533ef94945a0",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/2afcb78d4596e22c625ce5660267533ef94945a0",
        "files": [
          "Cargo.toml",
          "lib/api/Cargo.toml",
          "lib/api/macro-wasmer-universal-test/Cargo.toml",
          "lib/c-api/Cargo.toml",
          "lib/c-api/examples/wasmer-capi-examples-runner/Cargo.toml",
          "lib/c-api/tests/wasmer-c-api-test-runner/Cargo.toml",
          "lib/cache/Cargo.toml",
          "lib/cli-compiler/Cargo.toml",
          "lib/cli/Cargo.toml",
          "lib/compiler-cranelift/Cargo.toml",
          "lib/compiler-llvm/Cargo.toml",
          "lib/compiler-singlepass/Cargo.toml",
          "lib/compiler/Cargo.toml",
          "lib/emscripten/Cargo.toml",
          "lib/journal/Cargo.toml",
          "lib/middlewares/Cargo.toml",
          "lib/object/Cargo.toml",
          "lib/registry/Cargo.toml",
          "lib/sys-utils/Cargo.toml",
          "lib/vm/Cargo.toml",
          "lib/wai-bindgen-wasmer/Cargo.toml",
          "lib/wasi-types/Cargo.toml",
          "lib/wasix/Cargo.toml",
          "scripts/update-version.py",
          "scripts/windows-installer/wasmer.iss",
          "tests/integration/cli/Cargo.toml",
          "tests/integration/ios/Cargo.toml",
          "tests/lib/wast/Cargo.toml",
          "tests/wasi-wast/Cargo.toml",
          "tests/wasmer-argus/Cargo.toml"
        ],
        "message": "Release 4.3.6",
        "before_after_code_files": [
          "scripts/update-version.py||scripts/update-version.py",
          "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "scripts/update-version.py||scripts/update-version.py",
            "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
          ],
          "candidate": [
            "scripts/update-version.py||scripts/update-version.py",
            "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
          ]
        }
      },
      "candidate_diff": {
        "scripts/update-version.py||scripts/update-version.py": [
          "File: scripts/update-version.py -> scripts/update-version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/python",
          "6: import os",
          "7: import re",
          "",
          "[Removed Lines]",
          "3: PREVIOUS_VERSION='4.3.4'",
          "4: NEXT_VERSION='4.3.5'",
          "",
          "[Added Lines]",
          "3: PREVIOUS_VERSION='4.3.5'",
          "4: NEXT_VERSION='4.3.6'",
          "",
          "---------------"
        ],
        "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss": [
          "File: scripts/windows-installer/wasmer.iss -> scripts/windows-installer/wasmer.iss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [Setup]",
          "2: AppName=Wasmer",
          "4: DefaultDirName={pf}\\Wasmer",
          "5: DefaultGroupName=Wasmer",
          "6: Compression=lzma2",
          "",
          "[Removed Lines]",
          "3: AppVersion=4.3.5",
          "",
          "[Added Lines]",
          "3: AppVersion=4.3.6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dc135fbdcad857a25fbbfabdbb9986c068355f3",
      "candidate_info": {
        "commit_hash": "2dc135fbdcad857a25fbbfabdbb9986c068355f3",
        "repo": "wasmerio/wasmer",
        "commit_url": "https://github.com/wasmerio/wasmer/commit/2dc135fbdcad857a25fbbfabdbb9986c068355f3",
        "files": [
          "Cargo.toml",
          "lib/api/Cargo.toml",
          "lib/api/macro-wasmer-universal-test/Cargo.toml",
          "lib/c-api/Cargo.toml",
          "lib/c-api/examples/wasmer-capi-examples-runner/Cargo.toml",
          "lib/c-api/tests/wasmer-c-api-test-runner/Cargo.toml",
          "lib/cache/Cargo.toml",
          "lib/cli-compiler/Cargo.toml",
          "lib/cli/Cargo.toml",
          "lib/compiler-cranelift/Cargo.toml",
          "lib/compiler-llvm/Cargo.toml",
          "lib/compiler-singlepass/Cargo.toml",
          "lib/compiler/Cargo.toml",
          "lib/emscripten/Cargo.toml",
          "lib/journal/Cargo.toml",
          "lib/middlewares/Cargo.toml",
          "lib/object/Cargo.toml",
          "lib/registry/Cargo.toml",
          "lib/sys-utils/Cargo.toml",
          "lib/vm/Cargo.toml",
          "lib/wai-bindgen-wasmer/Cargo.toml",
          "lib/wasi-types/Cargo.toml",
          "lib/wasix/Cargo.toml",
          "scripts/update-version.py",
          "scripts/windows-installer/wasmer.iss",
          "tests/integration/cli/Cargo.toml",
          "tests/integration/ios/Cargo.toml",
          "tests/lib/wast/Cargo.toml",
          "tests/wasi-wast/Cargo.toml",
          "tests/wasmer-argus/Cargo.toml"
        ],
        "message": "Release 4.3.2",
        "before_after_code_files": [
          "scripts/update-version.py||scripts/update-version.py",
          "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "scripts/update-version.py||scripts/update-version.py",
            "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
          ],
          "candidate": [
            "scripts/update-version.py||scripts/update-version.py",
            "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss"
          ]
        }
      },
      "candidate_diff": {
        "scripts/update-version.py||scripts/update-version.py": [
          "File: scripts/update-version.py -> scripts/update-version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/python",
          "6: import os",
          "7: import re",
          "",
          "[Removed Lines]",
          "3: PREVIOUS_VERSION='4.3.0'",
          "4: NEXT_VERSION='4.3.1'",
          "",
          "[Added Lines]",
          "3: PREVIOUS_VERSION='4.3.1'",
          "4: NEXT_VERSION='4.3.2'",
          "",
          "---------------"
        ],
        "scripts/windows-installer/wasmer.iss||scripts/windows-installer/wasmer.iss": [
          "File: scripts/windows-installer/wasmer.iss -> scripts/windows-installer/wasmer.iss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [Setup]",
          "2: AppName=Wasmer",
          "4: DefaultDirName={pf}\\Wasmer",
          "5: DefaultGroupName=Wasmer",
          "6: Compression=lzma2",
          "",
          "[Removed Lines]",
          "3: AppVersion=4.3.1",
          "",
          "[Added Lines]",
          "3: AppVersion=4.3.2",
          "",
          "---------------"
        ]
      }
    }
  ]
}