{
  "cve_id": "CVE-2023-6134",
  "cve_desc": "A flaw was found in Keycloak that prevents certain schemes in redirects, but permits them if a wildcard is appended to the token. This issue could allow an attacker to submit a specially crafted request leading to cross-site scripting (XSS) or further attacks. This flaw is the result of an incomplete fix for CVE-2020-10748.",
  "repo": "keycloak/keycloak",
  "patch_hash": "15a21bf8e4fb71f006ba9caf25b9c9d1d152cd20",
  "patch_info": {
    "commit_hash": "15a21bf8e4fb71f006ba9caf25b9c9d1d152cd20",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/15a21bf8e4fb71f006ba9caf25b9c9d1d152cd20",
    "files": [
      "docs/documentation/upgrading/topics/keycloak/changes-22_0_7.adoc",
      "docs/documentation/upgrading/topics/keycloak/changes.adoc",
      "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
      "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
    ],
    "message": "CVE-2023-6291 keycloak: redirect_uri validation logic that allows for a bypass of otherwise explicitly allowed hosts (#57)\n\n* Remove lowercase for the hostname as recommended/advised by OAuth spec\nCloses https://github.com/keycloak/keycloak/issues/25001\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>\n\n* Strip off user-info from redirect URI when validating using wildcard\nCloses https://issues.redhat.com/browse/RHBK-679\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>\n\n---------\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
    "before_after_code_files": [
      "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
      "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
    ]
  },
  "patch_diff": {
    "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
      "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:             if (validRedirect.startsWith(\"/\")) {",
      "73:                 validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);",
      "74:                 logger.debugv(\"replacing relative valid redirect with: {0}\", validRedirect);",
      "78:             }",
      "79:         }",
      "80:         return resolveValidRedirects;",
      "81:     }",
      "",
      "[Removed Lines]",
      "75:                 resolveValidRedirects.add(validRedirect);",
      "76:             } else {",
      "77:                 resolveValidRedirects.add(validRedirect);",
      "",
      "[Added Lines]",
      "76:             resolveValidRedirects.add(validRedirect);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
      "149:             }",
      "152:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
      "153:             }",
      "",
      "[Removed Lines]",
      "151:             if (valid != null && redirectUri.startsWith(\"/\")) {",
      "",
      "[Added Lines]",
      "149:             if (valid != null && !originalRedirect.isAbsolute()) {",
      "151:                 if (!redirectUri.startsWith(\"/\")) {",
      "152:                     redirectUri = \"/\" + redirectUri;",
      "153:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "174:     private static URI toUri(String redirectUri) {",
      "175:         URI uri = null;",
      "176:         if (redirectUri != null) {",
      "178:                 uri = URI.create(redirectUri);",
      "179:             } catch (IllegalArgumentException cause) {",
      "180:                 logger.debug(\"Invalid redirect uri\", cause);",
      "",
      "[Removed Lines]",
      "177:         try {",
      "",
      "[Added Lines]",
      "179:             try {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "189:         String redirectUri = null;",
      "190:         if (uri != null) {",
      "191:             redirectUri = uri.normalize().toString();",
      "193:         }",
      "194:         return redirectUri;",
      "195:     }",
      "",
      "[Removed Lines]",
      "192:             redirectUri = lowerCaseHostname(redirectUri);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "204:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
      "205:             String origQuery = uriBuilder.getQuery();",
      "206:             String origFragment = uriBuilder.getFragment();",
      "207:             String encodedRedirectUri = uriBuilder",
      "208:                     .replaceQuery(null)",
      "209:                     .fragment(null)",
      "210:                     .buildAsString();",
      "211:             String decodedRedirectUri = null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:             String origUserInfo = uriBuilder.getUserInfo();",
      "212:                     .userInfo(null)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "217:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort()",
      "218:                             .replaceQuery(origQuery)",
      "219:                             .fragment(origFragment)",
      "220:                             .buildAsString();",
      "221:                 } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:                             .userInfo(origUserInfo)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "230:         return null;",
      "231:     }",
      "242:     private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {",
      "243:         if (rootUrl != null) {",
      "244:             rootUrl = ResolveRelative.resolveRootUrl(session, rootUrl);",
      "",
      "[Removed Lines]",
      "233:     private static String lowerCaseHostname(String redirectUri) {",
      "234:         int n = redirectUri.indexOf('/', 7);",
      "235:         if (n == -1) {",
      "236:             return redirectUri.toLowerCase();",
      "237:         } else {",
      "238:             return redirectUri.substring(0, n).toLowerCase() + redirectUri.substring(n);",
      "239:         }",
      "240:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "253:         return sb.toString();",
      "254:     }",
      "257:     private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
      "258:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
      "259:         for (String validRedirect : validRedirects) {",
      "260:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
      "264:                 int length = validRedirect.length() - 1;",
      "265:                 validRedirect = validRedirect.substring(0, length);",
      "",
      "[Removed Lines]",
      "262:                 String r = redirect.contains(\"?\") ? redirect.substring(0, redirect.indexOf(\"?\")) : redirect;",
      "",
      "[Added Lines]",
      "253:     private static String stripOffRedirectForWildcard(String redirect) {",
      "254:         return KeycloakUriBuilder.fromUri(redirect, false)",
      "255:                 .preserveDefaultPort()",
      "256:                 .userInfo(null)",
      "257:                 .replaceQuery(null)",
      "258:                 .fragment(null)",
      "259:                 .buildAsString();",
      "260:     }",
      "268:                 String r = stripOffRedirectForWildcard(redirect);",
      "",
      "---------------"
    ],
    "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
      "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "142:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path<less/\", set, false));",
      "143:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path/index.jsp?param=v1 v2\", set, false));",
      "144:     }",
      "145: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:     @Test",
      "149:     public void testverifyCaseIsSensitive() {",
      "150:         Set<String> set = Stream.of(",
      "151:                 \"https://keycloak.org/*\",",
      "152:                 \"http://KeyCloak.org/*\",",
      "153:                 \"no.host.Name.App:/Test\"",
      "154:         ).collect(Collectors.toSet());",
      "156:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
      "157:         Assert.assertEquals(\"http://KeyCloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"http://KeyCloak.org/index.html\", set, false));",
      "158:         Assert.assertEquals(\"no.host.Name.App:/Test\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/Test\", set, false));",
      "160:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://KeyCloak.org/index.html\", set, false));",
      "161:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/index.html\", set, false));",
      "162:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"HTTPS://keycloak.org/index.html\", set, false));",
      "163:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.app:/Test\", set, false));",
      "164:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/test\", set, false));",
      "165:     }",
      "167:     @Test",
      "168:     public void testRelativeRedirectUri() {",
      "169:         Set<String> set = Stream.of(",
      "170:                 \"*\"",
      "171:         ).collect(Collectors.toSet());",
      "173:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"/path\", set, false));",
      "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
      "175:     }",
      "177:     @Test",
      "178:     public void testUserInfo() {",
      "179:         Set<String> set = Stream.of(",
      "180:                 \"https://keycloak.org/*\",",
      "181:                 \"https://test*\",",
      "182:                 \"https://something@keycloak.com/exact\"",
      "183:         ).collect(Collectors.toSet());",
      "185:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
      "186:         Assert.assertEquals(\"https://test.com/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://test.com/index.html\", set, false));",
      "187:         Assert.assertEquals(\"https://something@keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.org/path\", set, false));",
      "188:         Assert.assertEquals(\"https://some%20thing@test.com/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://some%20thing@test.com/path\", set, false));",
      "189:         Assert.assertEquals(\"https://something@keycloak.com/exact\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.com/exact\", set, false));",
      "191:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://something@other.com/\", set, false));",
      "192:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org@other.com\", set, false));",
      "193:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2F@other.com\", set, false));",
      "194:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test@other.com\", set, false));",
      "195:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test.com@other.com\", set, false));",
      "196:     }",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
      "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "382:         oauth.clientId(\"test-dash\");",
      "384:         checkRedirectUri(\"http://with-dash.example.local\", true);",
      "386:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
      "388:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
      "390:         checkRedirectUri(\"http://wiTh-dAsh.example.local/Foo\", false);",
      "391:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foO\", false);",
      "392:     }",
      "",
      "[Removed Lines]",
      "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", true);",
      "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
      "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
      "",
      "[Added Lines]",
      "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", false);",
      "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
      "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "395:     public void testDifferentCaseInScheme() throws IOException {",
      "396:         oauth.clientId(\"test-dash\");",
      "400:     }",
      "402:     @Test",
      "",
      "[Removed Lines]",
      "398:         checkRedirectUri(\"HTTP://with-dash.example.local\", true);",
      "399:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", true);",
      "",
      "[Added Lines]",
      "398:         checkRedirectUri(\"http://with-dash.example.local\", true);",
      "399:         checkRedirectUri(\"HTTP://with-dash.example.local\", false);",
      "400:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "942aa38ea7a2e74ae3bbcfcb6432be361a11cf6c",
      "candidate_info": {
        "commit_hash": "942aa38ea7a2e74ae3bbcfcb6432be361a11cf6c",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/942aa38ea7a2e74ae3bbcfcb6432be361a11cf6c",
        "files": [
          "docs/documentation/upgrading/topics/keycloak/changes-23_0_2.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes.adoc",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
        ],
        "message": "Remove lowercase for the hostname as recommended/advised by OAuth spec Closes https://github.com/keycloak/keycloak/issues/25001\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:             if (validRedirect.startsWith(\"/\")) {",
          "73:                 validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);",
          "74:                 logger.debugv(\"replacing relative valid redirect with: {0}\", validRedirect);",
          "78:             }",
          "79:         }",
          "80:         return resolveValidRedirects;",
          "81:     }",
          "",
          "[Removed Lines]",
          "75:                 resolveValidRedirects.add(validRedirect);",
          "76:             } else {",
          "77:                 resolveValidRedirects.add(validRedirect);",
          "",
          "[Added Lines]",
          "76:             resolveValidRedirects.add(validRedirect);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
          "149:             }",
          "152:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
          "153:             }",
          "",
          "[Removed Lines]",
          "151:             if (valid != null && redirectUri.startsWith(\"/\")) {",
          "",
          "[Added Lines]",
          "149:             if (valid != null && !originalRedirect.isAbsolute()) {",
          "151:                 if (!redirectUri.startsWith(\"/\")) {",
          "152:                     redirectUri = \"/\" + redirectUri;",
          "153:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     private static URI toUri(String redirectUri) {",
          "175:         URI uri = null;",
          "176:         if (redirectUri != null) {",
          "178:                 uri = URI.create(redirectUri);",
          "179:             } catch (IllegalArgumentException cause) {",
          "180:                 logger.debug(\"Invalid redirect uri\", cause);",
          "",
          "[Removed Lines]",
          "177:         try {",
          "",
          "[Added Lines]",
          "179:             try {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:         String redirectUri = null;",
          "190:         if (uri != null) {",
          "191:             redirectUri = uri.normalize().toString();",
          "193:         }",
          "194:         return redirectUri;",
          "195:     }",
          "",
          "[Removed Lines]",
          "192:             redirectUri = lowerCaseHostname(redirectUri);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
          "205:             String origQuery = uriBuilder.getQuery();",
          "206:             String origFragment = uriBuilder.getFragment();",
          "207:             String encodedRedirectUri = uriBuilder",
          "208:                     .replaceQuery(null)",
          "209:                     .fragment(null)",
          "210:                     .buildAsString();",
          "211:             String decodedRedirectUri = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:             String origUserInfo = uriBuilder.getUserInfo();",
          "212:                     .userInfo(null)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort()",
          "218:                             .replaceQuery(origQuery)",
          "219:                             .fragment(origFragment)",
          "220:                             .buildAsString();",
          "221:                 } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:                             .userInfo(origUserInfo)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230:         return null;",
          "231:     }",
          "242:     private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {",
          "243:         if (rootUrl != null) {",
          "244:             rootUrl = ResolveRelative.resolveRootUrl(session, rootUrl);",
          "",
          "[Removed Lines]",
          "233:     private static String lowerCaseHostname(String redirectUri) {",
          "234:         int n = redirectUri.indexOf('/', 7);",
          "235:         if (n == -1) {",
          "236:             return redirectUri.toLowerCase();",
          "237:         } else {",
          "238:             return redirectUri.substring(0, n).toLowerCase() + redirectUri.substring(n);",
          "239:         }",
          "240:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path<less/\", set, false));",
          "143:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path/index.jsp?param=v1 v2\", set, false));",
          "144:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     @Test",
          "149:     public void testverifyCaseIsSensitive() {",
          "150:         Set<String> set = Stream.of(",
          "151:                 \"https://keycloak.org/*\",",
          "152:                 \"http://KeyCloak.org/*\",",
          "153:                 \"no.host.Name.App:/Test\"",
          "154:         ).collect(Collectors.toSet());",
          "156:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
          "157:         Assert.assertEquals(\"http://KeyCloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"http://KeyCloak.org/index.html\", set, false));",
          "158:         Assert.assertEquals(\"no.host.Name.App:/Test\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/Test\", set, false));",
          "160:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://KeyCloak.org/index.html\", set, false));",
          "161:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/index.html\", set, false));",
          "162:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"HTTPS://keycloak.org/index.html\", set, false));",
          "163:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.app:/Test\", set, false));",
          "164:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/test\", set, false));",
          "165:     }",
          "167:     @Test",
          "168:     public void testRelativeRedirectUri() {",
          "169:         Set<String> set = Stream.of(",
          "170:                 \"*\"",
          "171:         ).collect(Collectors.toSet());",
          "173:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"/path\", set, false));",
          "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
          "175:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:         oauth.clientId(\"test-dash\");",
          "384:         checkRedirectUri(\"http://with-dash.example.local\", true);",
          "386:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
          "388:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
          "390:         checkRedirectUri(\"http://wiTh-dAsh.example.local/Foo\", false);",
          "391:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foO\", false);",
          "392:     }",
          "",
          "[Removed Lines]",
          "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", true);",
          "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
          "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
          "",
          "[Added Lines]",
          "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", false);",
          "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
          "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     public void testDifferentCaseInScheme() throws IOException {",
          "396:         oauth.clientId(\"test-dash\");",
          "400:     }",
          "402:     @Test",
          "",
          "[Removed Lines]",
          "398:         checkRedirectUri(\"HTTP://with-dash.example.local\", true);",
          "399:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", true);",
          "",
          "[Added Lines]",
          "398:         checkRedirectUri(\"http://with-dash.example.local\", true);",
          "399:         checkRedirectUri(\"HTTP://with-dash.example.local\", false);",
          "400:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32a70cbedd096d7057b72edf6c20ed2e951e7b08",
      "candidate_info": {
        "commit_hash": "32a70cbedd096d7057b72edf6c20ed2e951e7b08",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/32a70cbedd096d7057b72edf6c20ed2e951e7b08",
        "files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
        ],
        "message": "Strip off user-info from redirect URI when validating using wildcard (#61) Closes keycloak/keycloak-private#58 Closes https://issues.redhat.com/browse/RHBK-679\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         return sb.toString();",
          "249:     }",
          "252:     private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
          "253:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
          "254:         for (String validRedirect : validRedirects) {",
          "255:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
          "259:                 int length = validRedirect.length() - 1;",
          "260:                 validRedirect = validRedirect.substring(0, length);",
          "",
          "[Removed Lines]",
          "257:                 String r = redirect.contains(\"?\") ? redirect.substring(0, redirect.indexOf(\"?\")) : redirect;",
          "",
          "[Added Lines]",
          "253:     private static String stripOffRedirectForWildcard(String redirect) {",
          "254:         return KeycloakUriBuilder.fromUri(redirect, false)",
          "255:                 .preserveDefaultPort()",
          "256:                 .userInfo(null)",
          "257:                 .replaceQuery(null)",
          "258:                 .fragment(null)",
          "259:                 .buildAsString();",
          "260:     }",
          "268:                 String r = stripOffRedirectForWildcard(redirect);",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
          "175:     }",
          "177: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     @Test",
          "178:     public void testUserInfo() {",
          "179:         Set<String> set = Stream.of(",
          "180:                 \"https://keycloak.org/*\",",
          "181:                 \"https://test*\",",
          "182:                 \"https://something@keycloak.com/exact\"",
          "183:         ).collect(Collectors.toSet());",
          "185:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
          "186:         Assert.assertEquals(\"https://test.com/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://test.com/index.html\", set, false));",
          "187:         Assert.assertEquals(\"https://something@keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.org/path\", set, false));",
          "188:         Assert.assertEquals(\"https://some%20thing@test.com/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://some%20thing@test.com/path\", set, false));",
          "189:         Assert.assertEquals(\"https://something@keycloak.com/exact\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.com/exact\", set, false));",
          "191:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://something@other.com/\", set, false));",
          "192:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org@other.com\", set, false));",
          "193:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2F@other.com\", set, false));",
          "194:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test@other.com\", set, false));",
          "195:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test.com@other.com\", set, false));",
          "196:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1241bd291901667a13506d6fb123ba4344e618ee",
      "candidate_info": {
        "commit_hash": "1241bd291901667a13506d6fb123ba4344e618ee",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/1241bd291901667a13506d6fb123ba4344e618ee",
        "files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
        ],
        "message": "Fix lowerCaseHostname to lower-case scheme and host properly Closes https://github.com/keycloak/keycloak/issues/24792\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:             if (validRedirect.startsWith(\"/\")) {",
          "73:                 validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);",
          "74:                 logger.debugv(\"replacing relative valid redirect with: {0}\", validRedirect);",
          "78:             }",
          "79:         }",
          "80:         return resolveValidRedirects;",
          "81:     }",
          "",
          "[Removed Lines]",
          "75:                 resolveValidRedirects.add(validRedirect);",
          "76:             } else {",
          "77:                 resolveValidRedirects.add(validRedirect);",
          "",
          "[Added Lines]",
          "76:             resolveValidRedirects.add(lowerCaseHostname(validRedirect));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:             String decodedRedirectUri = decodeRedirectUri(redirectUri);",
          "118:             URI decodedRedirect = toUri(decodedRedirectUri);",
          "120:             if (decodedRedirectUri == null) return null;",
          "122:             String r = decodedRedirectUri;",
          "",
          "[Removed Lines]",
          "119:             decodedRedirectUri = getNormalizedRedirectUri(decodedRedirect);",
          "",
          "[Added Lines]",
          "117:             decodedRedirectUri = getNormalizedRedirectUri(decodedRedirect, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:             }",
          "147:             if (valid == null) {",
          "148:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
          "149:             }",
          "152:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
          "153:             }",
          "155:             String scheme = decodedRedirect.getScheme();",
          "156:             if (valid != null && scheme != null) {",
          "159:                     logger.debugf(\"Invalid URI because scheme is not allowed: %s\", redirectUri);",
          "160:                     valid = null;",
          "161:                 }",
          "",
          "[Removed Lines]",
          "144:             redirectUri = getNormalizedRedirectUri(originalRedirect);",
          "151:             if (valid != null && redirectUri.startsWith(\"/\")) {",
          "158:                 if (!valid.startsWith(scheme + \":\") && !\"http\".equalsIgnoreCase(scheme) && !\"https\".equalsIgnoreCase(scheme)) {",
          "",
          "[Added Lines]",
          "142:             redirectUri = getNormalizedRedirectUri(originalRedirect, false);",
          "149:             if (valid != null && !originalRedirect.isAbsolute()) {",
          "151:                 if (!redirectUri.startsWith(\"/\")) {",
          "152:                     redirectUri = \"/\" + redirectUri;",
          "153:                 }",
          "160:                 if (!valid.startsWith(scheme.toLowerCase() + \":\") && !\"http\".equalsIgnoreCase(scheme) && !\"https\".equalsIgnoreCase(scheme)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:     private static URI toUri(String redirectUri) {",
          "175:         URI uri = null;",
          "176:         if (redirectUri != null) {",
          "178:                 uri = URI.create(redirectUri);",
          "179:             } catch (IllegalArgumentException cause) {",
          "180:                 logger.debug(\"Invalid redirect uri\", cause);",
          "",
          "[Removed Lines]",
          "177:         try {",
          "",
          "[Added Lines]",
          "179:             try {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:         return uri;",
          "186:     }",
          "189:         String redirectUri = null;",
          "190:         if (uri != null) {",
          "191:             redirectUri = uri.normalize().toString();",
          "193:         }",
          "194:         return redirectUri;",
          "195:     }",
          "",
          "[Removed Lines]",
          "188:     private static String getNormalizedRedirectUri(URI uri) {",
          "192:             redirectUri = lowerCaseHostname(redirectUri);",
          "",
          "[Added Lines]",
          "190:     private static String getNormalizedRedirectUri(URI uri, boolean lower) {",
          "194:             if (lower) {",
          "195:                 redirectUri = lowerCaseHostname(redirectUri);",
          "196:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "204:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
          "205:             String origQuery = uriBuilder.getQuery();",
          "206:             String origFragment = uriBuilder.getFragment();",
          "207:             String encodedRedirectUri = uriBuilder",
          "208:                     .replaceQuery(null)",
          "209:                     .fragment(null)",
          "210:                     .buildAsString();",
          "211:             String decodedRedirectUri = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:             String origUserInfo = uriBuilder.getUserInfo();",
          "215:                     .userInfo(null)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "217:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort()",
          "218:                             .replaceQuery(origQuery)",
          "219:                             .fragment(origFragment)",
          "220:                             .buildAsString();",
          "221:                 } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:                             .userInfo(origUserInfo)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "231:     }",
          "233:     private static String lowerCaseHostname(String redirectUri) {",
          "239:         }",
          "240:     }",
          "242:     private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {",
          "",
          "[Removed Lines]",
          "234:         int n = redirectUri.indexOf('/', 7);",
          "235:         if (n == -1) {",
          "236:             return redirectUri.toLowerCase();",
          "237:         } else {",
          "238:             return redirectUri.substring(0, n).toLowerCase() + redirectUri.substring(n);",
          "",
          "[Added Lines]",
          "242:         KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
          "243:         if (uriBuilder.getScheme() != null) {",
          "244:             uriBuilder.scheme(uriBuilder.getScheme().toLowerCase());",
          "245:         }",
          "246:         if (uriBuilder.getHost() != null) {",
          "247:             uriBuilder.host(uriBuilder.getHost().toLowerCase());",
          "249:         return uriBuilder.buildAsString();",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path<less/\", set, false));",
          "143:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path/index.jsp?param=v1 v2\", set, false));",
          "144:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     @Test",
          "147:     public void testRelativeRedirectUri() {",
          "148:         Set<String> set = Stream.of(",
          "149:                 \"*\"",
          "150:         ).collect(Collectors.toSet());",
          "152:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"/path\", set, false));",
          "153:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
          "154:     }",
          "156:     @Test",
          "157:     public void testVerifyDifferentCase() {",
          "158:         Set<String> set = Stream.of(",
          "159:                 \"no.host.Name.App://TEST\",",
          "160:                 \"no.host.Name.App:/Path/*\",",
          "161:                 \"HTTPS://KeyCloak.org/*\",",
          "162:                 \"HTTP://KeyCloak.org/with%20space/*\",",
          "163:                 \"HTTP://KeyCloak.org/\u00e1\u00e9\u00ed\u00f3\u00fa\",",
          "164:                 \"custom:*\"",
          "165:         ).collect(Collectors.toSet());",
          "167:         Assert.assertEquals(\"no.host.Name.App://test\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App://test\", set, false));",
          "168:         Assert.assertEquals(\"no.host.name.app://Test\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.name.app://Test\", set, false));",
          "169:         Assert.assertEquals(\"no.host.name.app:/Path\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.name.app:/Path\", set, false));",
          "170:         Assert.assertEquals(\"https://KEYCLOAK.ORG/Test\", RedirectUtils.verifyRedirectUri(session, null, \"https://KEYCLOAK.ORG/Test\", set, false));",
          "171:         Assert.assertEquals(\"https://KEYCLOAK.ORG\", RedirectUtils.verifyRedirectUri(session, null, \"https://KEYCLOAK.ORG\", set, false));",
          "172:         Assert.assertEquals(\"CUSTOM:test\", RedirectUtils.verifyRedirectUri(session, null, \"CUSTOM:test\", set, false));",
          "173:         Assert.assertEquals(\"Custom://userInfo@KeyCLOAK.org/Path\", RedirectUtils.verifyRedirectUri(session, null, \"Custom://userInfo@KeyCLOAK.org/Path\", set, false));",
          "174:         Assert.assertEquals(\"Custom://user%20Info@keycloak.ORG\", RedirectUtils.verifyRedirectUri(session, null, \"Custom://user%20Info@keycloak.ORG\", set, false));",
          "175:         Assert.assertEquals(\"http://keycloak.org/\u00e1\u00e9\u00ed\u00f3\u00fa\", RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/\u00e1\u00e9\u00ed\u00f3\u00fa\", set, false));",
          "176:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bc028fe2d4aa2477d227365dd270a999bd50c44",
      "candidate_info": {
        "commit_hash": "3bc028fe2d4aa2477d227365dd270a999bd50c44",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/3bc028fe2d4aa2477d227365dd270a999bd50c44",
        "files": [
          "docs/documentation/upgrading/topics/keycloak/changes-23_0_2.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes.adoc",
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
        ],
        "message": "Remove lowercase for the hostname as recommended/advised by OAuth spec Closes https://github.com/keycloak/keycloak/issues/25001\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:             if (validRedirect.startsWith(\"/\")) {",
          "73:                 validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);",
          "74:                 logger.debugv(\"replacing relative valid redirect with: {0}\", validRedirect);",
          "78:             }",
          "79:         }",
          "80:         return resolveValidRedirects;",
          "81:     }",
          "",
          "[Removed Lines]",
          "75:                 resolveValidRedirects.add(validRedirect);",
          "76:             } else {",
          "77:                 resolveValidRedirects.add(validRedirect);",
          "",
          "[Added Lines]",
          "76:             resolveValidRedirects.add(validRedirect);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                 valid = matchesRedirects(resolveValidRedirects, redirectUri, false);",
          "149:             }",
          "152:                 redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);",
          "153:             }",
          "",
          "[Removed Lines]",
          "151:             if (valid != null && redirectUri.startsWith(\"/\")) {",
          "",
          "[Added Lines]",
          "149:             if (valid != null && !originalRedirect.isAbsolute()) {",
          "151:                 if (!redirectUri.startsWith(\"/\")) {",
          "152:                     redirectUri = \"/\" + redirectUri;",
          "153:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     private static URI toUri(String redirectUri) {",
          "175:         URI uri = null;",
          "176:         if (redirectUri != null) {",
          "178:                 uri = URI.create(redirectUri);",
          "179:             } catch (IllegalArgumentException cause) {",
          "180:                 logger.debug(\"Invalid redirect uri\", cause);",
          "",
          "[Removed Lines]",
          "177:         try {",
          "",
          "[Added Lines]",
          "179:             try {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:         String redirectUri = null;",
          "190:         if (uri != null) {",
          "191:             redirectUri = uri.normalize().toString();",
          "193:         }",
          "194:         return redirectUri;",
          "195:     }",
          "",
          "[Removed Lines]",
          "192:             redirectUri = lowerCaseHostname(redirectUri);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:             KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();",
          "205:             String origQuery = uriBuilder.getQuery();",
          "206:             String origFragment = uriBuilder.getFragment();",
          "207:             String encodedRedirectUri = uriBuilder",
          "208:                     .replaceQuery(null)",
          "209:                     .fragment(null)",
          "210:                     .buildAsString();",
          "211:             String decodedRedirectUri = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:             String origUserInfo = uriBuilder.getUserInfo();",
          "212:                     .userInfo(null)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:                     return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort()",
          "218:                             .replaceQuery(origQuery)",
          "219:                             .fragment(origFragment)",
          "220:                             .buildAsString();",
          "221:                 } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:                             .userInfo(origUserInfo)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230:         return null;",
          "231:     }",
          "242:     private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {",
          "243:         if (rootUrl != null) {",
          "244:             rootUrl = ResolveRelative.resolveRootUrl(session, rootUrl);",
          "",
          "[Removed Lines]",
          "233:     private static String lowerCaseHostname(String redirectUri) {",
          "234:         int n = redirectUri.indexOf('/', 7);",
          "235:         if (n == -1) {",
          "236:             return redirectUri.toLowerCase();",
          "237:         } else {",
          "238:             return redirectUri.substring(0, n).toLowerCase() + redirectUri.substring(n);",
          "239:         }",
          "240:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path<less/\", set, false));",
          "143:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/path/index.jsp?param=v1 v2\", set, false));",
          "144:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     @Test",
          "149:     public void testverifyCaseIsSensitive() {",
          "150:         Set<String> set = Stream.of(",
          "151:                 \"https://keycloak.org/*\",",
          "152:                 \"http://KeyCloak.org/*\",",
          "153:                 \"no.host.Name.App:/Test\"",
          "154:         ).collect(Collectors.toSet());",
          "156:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
          "157:         Assert.assertEquals(\"http://KeyCloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"http://KeyCloak.org/index.html\", set, false));",
          "158:         Assert.assertEquals(\"no.host.Name.App:/Test\", RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/Test\", set, false));",
          "160:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://KeyCloak.org/index.html\", set, false));",
          "161:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"http://keycloak.org/index.html\", set, false));",
          "162:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"HTTPS://keycloak.org/index.html\", set, false));",
          "163:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.app:/Test\", set, false));",
          "164:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"no.host.Name.App:/test\", set, false));",
          "165:     }",
          "167:     @Test",
          "168:     public void testRelativeRedirectUri() {",
          "169:         Set<String> set = Stream.of(",
          "170:                 \"*\"",
          "171:         ).collect(Collectors.toSet());",
          "173:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"/path\", set, false));",
          "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
          "175:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuthRedirectUriTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:         oauth.clientId(\"test-dash\");",
          "384:         checkRedirectUri(\"http://with-dash.example.local\", true);",
          "386:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
          "388:         checkRedirectUri(\"http://with-dash.example.local/foo\", true);",
          "390:         checkRedirectUri(\"http://wiTh-dAsh.example.local/Foo\", false);",
          "391:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foO\", false);",
          "392:     }",
          "",
          "[Removed Lines]",
          "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", true);",
          "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
          "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", true);",
          "",
          "[Added Lines]",
          "385:         checkRedirectUri(\"http://wiTh-dAsh.example.local\", false);",
          "387:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
          "389:         checkRedirectUri(\"http://wiTh-dAsh.example.local/foo\", false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     public void testDifferentCaseInScheme() throws IOException {",
          "396:         oauth.clientId(\"test-dash\");",
          "400:     }",
          "402:     @Test",
          "",
          "[Removed Lines]",
          "398:         checkRedirectUri(\"HTTP://with-dash.example.local\", true);",
          "399:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", true);",
          "",
          "[Added Lines]",
          "398:         checkRedirectUri(\"http://with-dash.example.local\", true);",
          "399:         checkRedirectUri(\"HTTP://with-dash.example.local\", false);",
          "400:         checkRedirectUri(\"Http://wiTh-dAsh.example.local\", false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2e91105315ccf2c1df549b4f6c5948322cbfd1b",
      "candidate_info": {
        "commit_hash": "b2e91105315ccf2c1df549b4f6c5948322cbfd1b",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/b2e91105315ccf2c1df549b4f6c5948322cbfd1b",
        "files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
        ],
        "message": "Strip off user-info from redirect URI when validating using wildcard (#61)\n\nCloses https://issues.redhat.com/browse/RHBK-679\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ],
          "candidate": [
            "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
            "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java||services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java": [
          "File: services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java -> services/src/main/java/org/keycloak/protocol/oidc/utils/RedirectUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         return sb.toString();",
          "249:     }",
          "252:     private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {",
          "253:         logger.tracef(\"matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s\", redirect, allowWildcards, validRedirects);",
          "254:         for (String validRedirect : validRedirects) {",
          "255:             if (validRedirect.endsWith(\"*\") && !validRedirect.contains(\"?\") && allowWildcards) {",
          "259:                 int length = validRedirect.length() - 1;",
          "260:                 validRedirect = validRedirect.substring(0, length);",
          "",
          "[Removed Lines]",
          "257:                 String r = redirect.contains(\"?\") ? redirect.substring(0, redirect.indexOf(\"?\")) : redirect;",
          "",
          "[Added Lines]",
          "253:     private static String stripOffRedirectForWildcard(String redirect) {",
          "254:         return KeycloakUriBuilder.fromUri(redirect, false)",
          "255:                 .preserveDefaultPort()",
          "256:                 .userInfo(null)",
          "257:                 .replaceQuery(null)",
          "258:                 .fragment(null)",
          "259:                 .buildAsString();",
          "260:     }",
          "268:                 String r = stripOffRedirectForWildcard(redirect);",
          "",
          "---------------"
        ],
        "services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java||services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java": [
          "File: services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java -> services/src/test/java/org/keycloak/protocol/oidc/utils/RedirectUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         Assert.assertEquals(\"https://keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, \"https://keycloak.org\", \"path\", set, false));",
          "175:     }",
          "177: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     @Test",
          "178:     public void testUserInfo() {",
          "179:         Set<String> set = Stream.of(",
          "180:                 \"https://keycloak.org/*\",",
          "181:                 \"https://test*\",",
          "182:                 \"https://something@keycloak.com/exact\"",
          "183:         ).collect(Collectors.toSet());",
          "185:         Assert.assertEquals(\"https://keycloak.org/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org/index.html\", set, false));",
          "186:         Assert.assertEquals(\"https://test.com/index.html\", RedirectUtils.verifyRedirectUri(session, null, \"https://test.com/index.html\", set, false));",
          "187:         Assert.assertEquals(\"https://something@keycloak.org/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.org/path\", set, false));",
          "188:         Assert.assertEquals(\"https://some%20thing@test.com/path\", RedirectUtils.verifyRedirectUri(session, null, \"https://some%20thing@test.com/path\", set, false));",
          "189:         Assert.assertEquals(\"https://something@keycloak.com/exact\", RedirectUtils.verifyRedirectUri(session, null, \"https://something@keycloak.com/exact\", set, false));",
          "191:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://something@other.com/\", set, false));",
          "192:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org@other.com\", set, false));",
          "193:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://keycloak.org%2F@other.com\", set, false));",
          "194:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test@other.com\", set, false));",
          "195:         Assert.assertNull(RedirectUtils.verifyRedirectUri(session, null, \"https://test.com@other.com\", set, false));",
          "196:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}