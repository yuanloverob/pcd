{
  "cve_id": "CVE-2019-1141",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
  "patch_info": {
    "commit_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/329d9d213e7b286349c0b156be4b5a088555de90",
    "files": [
      "lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOpt.h",
      "lib/Backend/GlobOptFields.cpp"
    ],
    "message": "[CVE-2019-1141] Chakra JIT Type Confusion\n\nDuring the loop prepass the index variable is not fully constructed, so we can't rely it being negative\nSo we need to kiil the object type.",
    "before_after_code_files": [
      "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
      "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
    ]
  },
  "patch_diff": {
    "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
      "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2695: }",
      "2697: bool",
      "2699: {",
      "2700:     if (opnd == nullptr)",
      "2701:     {",
      "",
      "[Removed Lines]",
      "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const",
      "",
      "[Added Lines]",
      "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass /*=nullptr*/) const",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2725:         {",
      "2726:             return true;",
      "2727:         }",
      "2728:         if (this->prePassLoop->preservesNumberValue->Test(opnd->m_sym->m_id))",
      "2729:         {",
      "2730:             return false;",
      "2731:         }",
      "2734:     }",
      "2736:     return true;",
      "",
      "[Removed Lines]",
      "2733:         return !this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
      "",
      "[Added Lines]",
      "2729:         bool isSafeToTransfer = this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
      "2730:         if (isSafeToTransferInPrepass != nullptr)",
      "2731:         {",
      "2733:         }",
      "2739:         return !isSafeToTransfer;",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
      "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "773:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
      "774:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
      "775:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
      "778: public:",
      "779:     static bool             IsTypeSpecPhaseOff(Func const * func);",
      "",
      "[Removed Lines]",
      "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
      "",
      "[Added Lines]",
      "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass = nullptr) const;",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
      "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "229:     {",
      "230:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
      "231:         SetAnyPropertyMayBeWrittenTo();",
      "",
      "[Removed Lines]",
      "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
      "",
      "[Added Lines]",
      "228:     bool isSafeToTransfer = true;",
      "229:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt, &isSafeToTransfer))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "236:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
      "237:         int indexLowerBound = 0;",
      "240:         {",
      "242:             this->KillAllObjectTypes(bv);",
      "",
      "[Removed Lines]",
      "239:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
      "",
      "[Added Lines]",
      "240:         if (!isSafeToTransfer || indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
      "candidate_info": {
        "commit_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "test/Debugger/rlexe.xml"
        ],
        "message": "Handling exception while GetJSONObject in script debugger.\n\nDuring GetChildren phase when we try to build JSON object we might throw exception. That skipped calling .Detach on the AutoPtr - which leads to release\nthe debugger property again.\nFixed that by catching and discarding the exception.",
        "before_after_code_files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp": [
          "File: lib/Jsrt/JsrtDebuggerObject.cpp -> lib/Jsrt/JsrtDebuggerObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                 if (resolvedObjectDisplay != nullptr)",
          "86:                 {",
          "87:                     JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectProperty::Make(this->GetDebuggerObjectsManager(), objectDisplayWeakRef);",
          "91:                     {",
          "93:                     }",
          "95:                     {",
          "97:                     }",
          "98:                     objectDisplayWeakRef->ReleaseStrongReference();",
          "99:                     objectDisplayWeakRef.Detach();",
          "",
          "[Removed Lines]",
          "88:                     Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "89:                     Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "90:                     if (resolvedObjectDisplay->IsFake())",
          "92:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "94:                     else",
          "96:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "",
          "[Added Lines]",
          "88:                     try",
          "90:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "91:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "92:                         if (resolvedObjectDisplay->IsFake())",
          "93:                         {",
          "94:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "95:                         }",
          "96:                         else",
          "97:                         {",
          "98:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "99:                         }",
          "101:                     catch (const Js::JavascriptException& err)",
          "103:                         err.GetAndClear();   // discard exception object",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                     {",
          "416:                         AutoPtr<WeakArenaReference<Js::IDiagObjectModelDisplay>> objectDisplayWeakRef(resolvedObject.GetObjectDisplay());",
          "417:                         JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectScope::Make(debuggerObjectsManager, objectDisplayWeakRef, scopesCount);",
          "423:                         objectDisplayWeakRef.Detach();",
          "424:                     }",
          "425:                 }",
          "",
          "[Removed Lines]",
          "418:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "419:                         Assert(object != nullptr);",
          "420:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "421:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "422:                         scopesCount++;",
          "",
          "[Added Lines]",
          "425:                         try",
          "426:                         {",
          "427:                             Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "428:                             Assert(object != nullptr);",
          "429:                             Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "430:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "431:                             scopesCount++;",
          "432:                         }",
          "433:                         catch (const Js::JavascriptException& err)",
          "434:                         {",
          "435:                             err.GetAndClear();   // discard exception object",
          "436:                         }",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js": [
          "File: test/Debugger/exceptionWhileFetchingProp.js -> test/Debugger/exceptionWhileFetchingProp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var p = new Proxy({x:10}, {",
          "7:     getOwnPropertyDescriptor: function (oTarget, sKey) {",
          "8:         throw new Error('');",
          "9:         return { configurable: true, enumerable: true, value: 5 };",
          "10:     }",
          "11:   });",
          "13:   function f() {",
          "15:   }",
          "16:   f();",
          "17:   print('Pass');",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline": [
          "File: test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline -> test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [",
          "2:   {",
          "3:     \"evaluate\": {",
          "4:       \"p\": {",
          "5:         \"#__proto__\": \"Object {...}\",",
          "6:         \"[Proxy]\": \"Proxy {...}\"",
          "7:       }",
          "8:     }",
          "9:   }",
          "10: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
      "candidate_info": {
        "commit_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/450a349fda1b153d758a9e01698b977e60870e4c",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h"
        ],
        "message": "Update version to 1.11.12",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 11",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 12",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33c0b9763c231e53e630c0d89d6cb6b0c6139b8e",
      "candidate_info": {
        "commit_hash": "33c0b9763c231e53e630c0d89d6cb6b0c6139b8e",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/33c0b9763c231e53e630c0d89d6cb6b0c6139b8e",
        "files": [
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-0605] [CVE-2019-0591]",
        "before_after_code_files": [
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "238:         SetAnyPropertyMayBeWrittenTo();",
          "239:     }",
          "240: }",
          "242: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     else if (inGlobOpt && indexOpnd && !indexOpnd->GetValueType().IsInt() && !currentBlock->globOptData.IsInt32TypeSpecialized(indexOpnd->m_sym))",
          "241:     {",
          "243:         this->KillAllObjectTypes(bv);",
          "244:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35ee5053bfc3186da193b9cd85e9a5916580bf80",
      "candidate_info": {
        "commit_hash": "35ee5053bfc3186da193b9cd85e9a5916580bf80",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/35ee5053bfc3186da193b9cd85e9a5916580bf80",
        "files": [
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "CVE-2019-0810 Type Confusion with DeleteElemI_A & DeleteElemIStrict_A - 360Vulcan",
        "before_after_code_files": [
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "238:         SetAnyPropertyMayBeWrittenTo();",
          "239:     }",
          "241:     {",
          "244:     }",
          "245: }",
          "",
          "[Removed Lines]",
          "240:     else if (inGlobOpt && indexOpnd && !indexOpnd->GetValueType().IsInt() && !currentBlock->globOptData.IsInt32TypeSpecialized(indexOpnd->m_sym))",
          "243:         this->KillAllObjectTypes(bv);",
          "",
          "[Added Lines]",
          "240:     else if (inGlobOpt)",
          "242:         Value * indexValue = indexOpnd ? this->currentBlock->globOptData.FindValue(indexOpnd->GetSym()) : nullptr;",
          "243:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
          "244:         int indexLowerBound = 0;",
          "246:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "247:         {",
          "249:             this->KillAllObjectTypes(bv);",
          "250:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53b75c5f4a206740375f6a8a96934242d556e7c4",
      "candidate_info": {
        "commit_hash": "53b75c5f4a206740375f6a8a96934242d556e7c4",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/53b75c5f4a206740375f6a8a96934242d556e7c4",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Opnd.cpp",
          "lib/Backend/Opnd.h",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h"
        ],
        "message": "CVE-2019-0992",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp",
          "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Opnd.cpp||lib/Backend/Opnd.cpp",
          "lib/Backend/Opnd.h||lib/Backend/Opnd.h",
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
            "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
            "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
            "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5004:         return;",
          "5005:     }",
          "5007:     IR::BailOutKind includeBailOutKinds = IR::BailOutInvalid;",
          "5008:     if (!baseValueType.IsNotNativeArray() &&",
          "5010:         !currentBlock->noImplicitCallNativeArrayUses->IsEmpty() &&",
          "5011:         !(instr->GetBailOutKind() & IR::BailOutOnArrayAccessHelperCall))",
          "5012:     {",
          "5017:     }",
          "5019:     if(baseOpnd->IsArrayRegOpnd() && baseOpnd->AsArrayRegOpnd()->EliminatedUpperBoundCheck())",
          "",
          "[Removed Lines]",
          "5009:         (!baseValueType.IsLikelyNativeArray() || instr->GetSrc1()->IsVar()) &&",
          "5016:         includeBailOutKinds |= IR::BailOutConvertedNativeArray;",
          "",
          "[Added Lines]",
          "5007:     instr->GetDst()->AsIndirOpnd()->AllowConversion(true);",
          "5016:         if (!baseValueType.IsLikelyNativeArray() || instr->GetSrc1()->IsVar())",
          "5017:         {",
          "5018:             includeBailOutKinds |= IR::BailOutConvertedNativeArray;",
          "5019:         }",
          "5020:         else",
          "5021:         {",
          "5023:             instr->GetDst()->AsIndirOpnd()->AllowConversion(false);",
          "5024:         }",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2694:     return instrNext;",
          "2695: }",
          "2697: bool",
          "2698: GlobOpt::OptTagChecks(IR::Instr *instr)",
          "2699: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2697: bool",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const",
          "2699: {",
          "2700:     if (opnd == nullptr)",
          "2701:     {",
          "2702:         return false;",
          "2703:     }",
          "2705:     if (opnd->m_sym->m_isNotNumber)",
          "2706:     {",
          "2707:         return true;",
          "2708:     }",
          "2710:     if (!inGlobOpt)",
          "2711:     {",
          "2712:         return false;",
          "2713:     }",
          "2715:     if (opnd->GetValueType().IsNumber() || currentBlock->globOptData.IsTypeSpecialized(opnd->m_sym))",
          "2716:     {",
          "2717:         if (!this->IsLoopPrePass())",
          "2718:         {",
          "2719:             return false;",
          "2720:         }",
          "2722:         Value * opndValue = this->currentBlock->globOptData.FindValue(opnd->m_sym);",
          "2723:         ValueInfo * opndValueInfo = opndValue ? opndValue->GetValueInfo() : nullptr;",
          "2724:         return !opndValueInfo || !this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "2725:     }",
          "2727:     return true;",
          "2728: }",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
          "774:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
          "775:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
          "776: public:",
          "777:     static bool             IsTypeSpecPhaseOff(Func const * func);",
          "778:     static bool             DoAggressiveIntTypeSpec(Func const * func);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     {",
          "237:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "238:         SetAnyPropertyMayBeWrittenTo();",
          "",
          "[Removed Lines]",
          "228:     if (func->GetThisOrParentInlinerHasArguments() ||",
          "229:         (",
          "230:             indexOpnd &&",
          "231:             (",
          "232:                 indexOpnd->m_sym->m_isNotNumber ||",
          "233:                 (inGlobOpt && !indexOpnd->GetValueType().IsNumber() && !currentBlock->globOptData.IsTypeSpecialized(indexOpnd->m_sym))",
          "234:             )",
          "235:         ))",
          "",
          "[Added Lines]",
          "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
          "",
          "---------------"
        ],
        "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
          "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: HELPERCALLCHK(Op_SetNativeFloatElementI_Int32, Js::JavascriptOperators::OP_SetNativeFloatElementI_Int32, AttrCanThrow)",
          "206: HELPERCALLCHK(Op_SetNativeIntElementI_UInt32, Js::JavascriptOperators::OP_SetNativeIntElementI_UInt32, AttrCanThrow)",
          "207: HELPERCALLCHK(Op_SetNativeFloatElementI_UInt32, Js::JavascriptOperators::OP_SetNativeFloatElementI_UInt32, AttrCanThrow)",
          "208: HELPERCALLCHK(ScrArr_SetNativeIntElementC, Js::JavascriptArray::OP_SetNativeIntElementC, AttrCanNotBeReentrant)",
          "209: HELPERCALLCHK(ScrArr_SetNativeFloatElementC, Js::JavascriptArray::OP_SetNativeFloatElementC, AttrCanNotBeReentrant)",
          "210: HELPERCALLCHK(Op_DeleteElementI, Js::JavascriptOperators::OP_DeleteElementI, AttrCanThrow)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: HELPERCALLCHK(Op_SetNativeIntElementI_NoConvert, Js::JavascriptOperators::OP_SetNativeIntElementI_NoConvert, AttrCanThrow)",
          "209: HELPERCALLCHK(Op_SetNativeFloatElementI_NoConvert, Js::JavascriptOperators::OP_SetNativeFloatElementI_NoConvert, AttrCanThrow)",
          "210: HELPERCALLCHK(Op_SetNativeIntElementI_Int32_NoConvert, Js::JavascriptOperators::OP_SetNativeIntElementI_Int32_NoConvert, AttrCanThrow)",
          "211: HELPERCALLCHK(Op_SetNativeFloatElementI_Int32_NoConvert, Js::JavascriptOperators::OP_SetNativeFloatElementI_Int32_NoConvert, AttrCanThrow)",
          "212: HELPERCALLCHK(Op_SetNativeIntElementI_UInt32_NoConvert, Js::JavascriptOperators::OP_SetNativeIntElementI_UInt32_NoConvert, AttrCanThrow)",
          "213: HELPERCALLCHK(Op_SetNativeFloatElementI_UInt32_NoConvert, Js::JavascriptOperators::OP_SetNativeFloatElementI_UInt32_NoConvert, AttrCanThrow)",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9002:     AssertMsg(dst->IsIndirOpnd(), \"Expected indirOpnd on StElementI\");",
          "9004: #if !FLOATVAR",
          "9005:     if (dst->AsIndirOpnd()->GetBaseOpnd()->GetValueType().IsLikelyOptimizedTypedArray() && src1->IsRegOpnd())",
          "9006:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9004:     bool allowConvert = dst->AsIndirOpnd()->ConversionAllowed();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9085:         {",
          "9086:             helperMethod =",
          "9087:                 srcType == TyVar ? IR::HelperOp_SetElementI_Int32 :",
          "9090:         }",
          "9091:         else if (indexOpnd->GetType() == TyUint32)",
          "9092:         {",
          "9093:             helperMethod =",
          "9094:                 srcType == TyVar ? IR::HelperOp_SetElementI_UInt32 :",
          "9097:         }",
          "9098:         else",
          "9099:         {",
          "",
          "[Removed Lines]",
          "9088:                 srcType == TyInt32 ? IR::HelperOp_SetNativeIntElementI_Int32 :",
          "9089:                 IR::HelperOp_SetNativeFloatElementI_Int32;",
          "9095:                 srcType == TyInt32 ? IR::HelperOp_SetNativeIntElementI_UInt32 :",
          "9096:                 IR::HelperOp_SetNativeFloatElementI_UInt32;",
          "",
          "[Added Lines]",
          "9090:                 srcType == TyInt32 ?",
          "9091:                     (allowConvert ? IR::HelperOp_SetNativeIntElementI_Int32 : IR::HelperOp_SetNativeIntElementI_Int32_NoConvert) :",
          "9092:                     (allowConvert ? IR::HelperOp_SetNativeFloatElementI_Int32 : IR::HelperOp_SetNativeFloatElementI_Int32_NoConvert) ;",
          "9098:                 srcType == TyInt32 ?",
          "9099:                     (allowConvert ? IR::HelperOp_SetNativeIntElementI_UInt32 : IR::HelperOp_SetNativeIntElementI_UInt32_NoConvert) :",
          "9100:                     (allowConvert ? IR::HelperOp_SetNativeFloatElementI_UInt32 : IR::HelperOp_SetNativeFloatElementI_UInt32_NoConvert) ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9112:         if (srcType != TyVar)",
          "9113:         {",
          "9116:         }",
          "9117:     }",
          "",
          "[Removed Lines]",
          "9114:             helperMethod =",
          "9115:                 srcType == TyInt32 ? IR::HelperOp_SetNativeIntElementI : IR::HelperOp_SetNativeFloatElementI;",
          "",
          "[Added Lines]",
          "9118:             helperMethod = srcType == TyInt32 ?",
          "9119:                 (allowConvert ? IR::HelperOp_SetNativeIntElementI : IR::HelperOp_SetNativeIntElementI_NoConvert) :",
          "9120:                 (allowConvert ? IR::HelperOp_SetNativeFloatElementI : IR::HelperOp_SetNativeFloatElementI_NoConvert);",
          "",
          "---------------"
        ],
        "lib/Backend/Opnd.cpp||lib/Backend/Opnd.cpp": [
          "File: lib/Backend/Opnd.cpp -> lib/Backend/Opnd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2538:     indirOpnd->m_type = type;",
          "2539:     indirOpnd->SetIsJITOptimizedReg(false);",
          "2542:     indirOpnd->m_kind = OpndKindIndir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2541:     indirOpnd->m_conversionAllowed = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2596:     newOpnd->canStoreTemp = this->canStoreTemp;",
          "2597:     newOpnd->SetOffset(m_offset, m_dontEncode);",
          "2598:     newOpnd->SetIsJITOptimizedReg(this->GetIsJITOptimizedReg());",
          "2600: #if DBG_DUMP",
          "2601:     newOpnd->m_addrKind = m_addrKind;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2600:     newOpnd->m_conversionAllowed = this->m_conversionAllowed;",
          "",
          "---------------"
        ],
        "lib/Backend/Opnd.h||lib/Backend/Opnd.h": [
          "File: lib/Backend/Opnd.h -> lib/Backend/Opnd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1662:     byte                    GetScale() const;",
          "1663:     void                    SetScale(byte scale);",
          "1664:     bool                    TryGetIntConstIndexValue(bool trySym, IntConstType *pValue, bool *pIsNotInt);",
          "1665: #if DBG_DUMP || defined(ENABLE_IR_VIEWER)",
          "1666:     const char16 *         GetDescription();",
          "1667:     IR::AddrOpndKind        GetAddrKind() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1665:     void                    AllowConversion(bool value) { m_conversionAllowed = value; }",
          "1666:     bool                    ConversionAllowed() const   { return m_conversionAllowed; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1678:     RegOpnd *               m_indexOpnd;",
          "1679:     int32                   m_offset;",
          "1680:     byte                    m_scale;",
          "1681:     Func *                  m_func;  // We need the allocator to copy the base and index...",
          "1683: #if DBG_DUMP || defined(ENABLE_IR_VIEWER)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:     bool                    m_conversionAllowed;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4644:         return JavascriptOperators::SetProperty(receiver, object, propertyRecord->GetPropertyId(), value, scriptContext, flags);",
          "4645:     }",
          "4647:     BOOL JavascriptOperators::OP_SetNativeIntElementI(",
          "4648:         Var instance,",
          "4649:         Var aElementIndex,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4647:     BOOL JavascriptOperators::OP_SetNativeIntElementI_NoConvert(",
          "4648:         Var instance,",
          "4649:         Var aElementIndex,",
          "4650:         int32 iValue,",
          "4651:         ScriptContext* scriptContext,",
          "4652:         PropertyOperationFlags flags)",
          "4653:     {",
          "4654:         JIT_HELPER_REENTRANT_HEADER(Op_SetNativeIntElementI_NoConvert);",
          "4655:         JIT_HELPER_SAME_ATTRIBUTES(Op_SetNativeIntElementI_NoConvert, Op_SetNativeIntElementI);",
          "4656:         BOOL converted = OP_SetNativeIntElementI(instance, aElementIndex, iValue, scriptContext, flags);",
          "4657:         if (converted)",
          "4658:         {",
          "4659:             AssertMsg(false, \"Unexpected native array conversion\");",
          "4660:             Js::Throw::FatalInternalError();",
          "4661:         }",
          "4662:         return FALSE;",
          "4663:         JIT_HELPER_END(Op_SetNativeIntElementI_NoConvert);",
          "4664:     }",
          "4666:     BOOL JavascriptOperators::OP_SetNativeIntElementI_UInt32_NoConvert(",
          "4667:         Var instance,",
          "4668:         uint32 aElementIndex,",
          "4669:         int32 iValue,",
          "4670:         ScriptContext* scriptContext,",
          "4671:         PropertyOperationFlags flags)",
          "4672:     {",
          "4673:         JIT_HELPER_REENTRANT_HEADER(Op_SetNativeIntElementI_UInt32_NoConvert);",
          "4674:         JIT_HELPER_SAME_ATTRIBUTES(Op_SetNativeIntElementI_UInt32_NoConvert, Op_SetNativeIntElementI_UInt32);",
          "4675:         BOOL converted = OP_SetNativeIntElementI_UInt32(instance, aElementIndex, iValue, scriptContext, flags);",
          "4676:         if (converted)",
          "4677:         {",
          "4678:             AssertMsg(false, \"Unexpected native array conversion\");",
          "4679:             Js::Throw::FatalInternalError();",
          "4680:         }",
          "4681:         return FALSE;",
          "4682:         JIT_HELPER_END(Op_SetNativeIntElementI_UInt32_NoConvert);",
          "4683:     }",
          "4685:     BOOL JavascriptOperators::OP_SetNativeIntElementI_Int32_NoConvert(",
          "4686:         Var instance,",
          "4687:         int32 aElementIndex,",
          "4688:         int32 iValue,",
          "4689:         ScriptContext* scriptContext,",
          "4690:         PropertyOperationFlags flags)",
          "4691:     {",
          "4692:         JIT_HELPER_REENTRANT_HEADER(Op_SetNativeIntElementI_Int32_NoConvert);",
          "4693:         JIT_HELPER_SAME_ATTRIBUTES(Op_SetNativeIntElementI_Int32_NoConvert, Op_SetNativeIntElementI_Int32);",
          "4694:         BOOL converted = OP_SetNativeIntElementI_Int32(instance, aElementIndex, iValue, scriptContext, flags);",
          "4695:         if (converted)",
          "4696:         {",
          "4697:             AssertMsg(false, \"Unexpected native array conversion\");",
          "4698:             Js::Throw::FatalInternalError();",
          "4699:         }",
          "4700:         return FALSE;",
          "4701:         JIT_HELPER_END(Op_SetNativeIntElementI_Int32_NoConvert);",
          "4702:     }",
          "4704:     BOOL JavascriptOperators::OP_SetNativeFloatElementI_NoConvert(",
          "4705:         Var instance,",
          "4706:         Var aElementIndex,",
          "4707:         ScriptContext* scriptContext,",
          "4708:         PropertyOperationFlags flags,",
          "4709:         double dValue)",
          "4710:     {",
          "4711:         JIT_HELPER_REENTRANT_HEADER(Op_SetNativeFloatElementI_NoConvert);",
          "4712:         JIT_HELPER_SAME_ATTRIBUTES(Op_SetNativeFloatElementI_NoConvert, Op_SetNativeFloatElementI);",
          "4713:         BOOL converted = OP_SetNativeFloatElementI(instance, aElementIndex, scriptContext, flags, dValue);",
          "4714:         if (converted)",
          "4715:         {",
          "4716:             AssertMsg(false, \"Unexpected native array conversion\");",
          "4717:             Js::Throw::FatalInternalError();",
          "4718:         }",
          "4719:         return FALSE;",
          "4720:         JIT_HELPER_END(Op_SetNativeFloatElementI_NoConvert);",
          "4721:     }",
          "4723:     BOOL JavascriptOperators::OP_SetNativeFloatElementI_UInt32_NoConvert(",
          "4724:         Var instance,",
          "4725:         uint32 aElementIndex,",
          "4726:         ScriptContext* scriptContext,",
          "4727:         PropertyOperationFlags flags,",
          "4728:         double dValue)",
          "4729:     {",
          "4730:         JIT_HELPER_REENTRANT_HEADER(Op_SetNativeFloatElementI_UInt32_NoConvert);",
          "4731:         JIT_HELPER_SAME_ATTRIBUTES(Op_SetNativeFloatElementI_NoConvert, Op_SetNativeFloatElementI_UInt32);",
          "4732:         BOOL converted = OP_SetNativeFloatElementI_UInt32(instance, aElementIndex, scriptContext, flags, dValue);",
          "4733:         if (converted)",
          "4734:         {",
          "4735:             AssertMsg(false, \"Unexpected native array conversion\");",
          "4736:             Js::Throw::FatalInternalError();",
          "4737:         }",
          "4738:         return FALSE;",
          "4739:         JIT_HELPER_END(Op_SetNativeFloatElementI_UInt32_NoConvert);",
          "4740:     }",
          "4742:     BOOL JavascriptOperators::OP_SetNativeFloatElementI_Int32_NoConvert(",
          "4743:         Var instance,",
          "4744:         int32 aElementIndex,",
          "4745:         ScriptContext* scriptContext,",
          "4746:         PropertyOperationFlags flags,",
          "4747:         double dValue)",
          "4748:     {",
          "4749:         JIT_HELPER_REENTRANT_HEADER(Op_SetNativeFloatElementI_Int32_NoConvert);",
          "4750:         JIT_HELPER_SAME_ATTRIBUTES(Op_SetNativeFloatElementI_NoConvert, Op_SetNativeFloatElementI_Int32);",
          "4751:         BOOL converted = OP_SetNativeFloatElementI_Int32(instance, aElementIndex, scriptContext, flags, dValue);",
          "4752:         if (converted)",
          "4753:         {",
          "4754:             AssertMsg(false, \"Unexpected native array conversion\");",
          "4755:             Js::Throw::FatalInternalError();",
          "4756:         }",
          "4757:         return FALSE;",
          "4758:         JIT_HELPER_END(Op_SetNativeFloatElementI_Int32_NoConvert);",
          "4759:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:         static BOOL OP_SetElementI_UInt32(Var instance, uint32 aElementIndex, Var aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "393:         static BOOL OP_SetElementI_Int32(Var instance, int32 aElementIndex, Var aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "394:         static BOOL SetElementIHelper(Var receiver, RecyclableObject* object, Var index, Var value, ScriptContext* scriptContext, PropertyOperationFlags flags);",
          "395:         static BOOL OP_SetNativeIntElementI(Var instance, Var aElementIndex, int32 aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "396:         static BOOL OP_SetNativeIntElementI_UInt32(Var instance, uint32 aElementIndex, int32 aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "397:         static BOOL OP_SetNativeIntElementI_Int32(Var instance, int aElementIndex, int32 aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:         static BOOL OP_SetNativeIntElementI_NoConvert(Var instance, Var aElementIndex, int32 aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "396:         static BOOL OP_SetNativeIntElementI_UInt32_NoConvert(Var instance, uint32 aElementIndex, int32 aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "397:         static BOOL OP_SetNativeIntElementI_Int32_NoConvert(Var instance, int aElementIndex, int32 aValue, ScriptContext* scriptContext, PropertyOperationFlags flags = PropertyOperation_None);",
          "398:         static BOOL OP_SetNativeFloatElementI_NoConvert(Var instance, Var aElementIndex, ScriptContext* scriptContext, PropertyOperationFlags flags, double value);",
          "399:         static BOOL OP_SetNativeFloatElementI_UInt32_NoConvert(Var instance, uint32 aElementIndex, ScriptContext* scriptContext, PropertyOperationFlags flags, double value);",
          "400:         static BOOL OP_SetNativeFloatElementI_Int32_NoConvert(Var instance, int aElementIndex, ScriptContext* scriptContext, PropertyOperationFlags flags, double value);",
          "",
          "---------------"
        ]
      }
    }
  ]
}