{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "585f307ffdd3624645355b1cc7cf21e497238458",
      "candidate_info": {
        "commit_hash": "585f307ffdd3624645355b1cc7cf21e497238458",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/585f307ffdd3624645355b1cc7cf21e497238458",
        "files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js"
        ],
        "message": "AMBARI-24246. Ambari does not pick the existing hive database from the jdbc url set",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js": [
          "File: ambari-web/app/mixins/common/configs/config_recommendation_parser.js -> ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         value = Em.get(config, 'value'),",
          "161:         prevRecommeneded = config.get('recommendedValue');",
          "162:     Em.set(config, 'recommendedValue', recommendedValue);",
          "164:     if (this.allowUpdateProperty(parentProperties, name, fileName, group, value)) {",
          "165:       var allowConfigUpdate = true;",
          "",
          "[Removed Lines]",
          "163:     console.log('test123', config, recommendedValue)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b35e2a58e9481f404ea41d1bf4fc0ff5dc3fb670",
      "candidate_info": {
        "commit_hash": "b35e2a58e9481f404ea41d1bf4fc0ff5dc3fb670",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b35e2a58e9481f404ea41d1bf4fc0ff5dc3fb670",
        "files": [
          "ambari-web/app/styles/application.less",
          "ambari-web/app/templates/main/service/services/hive.hbs",
          "ambari-web/app/views/main/service/services/hive.js"
        ],
        "message": "AMBARI-24297. Show full JDBC URL's for Hive",
        "before_after_code_files": [
          "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less",
          "ambari-web/app/templates/main/service/services/hive.hbs||ambari-web/app/templates/main/service/services/hive.hbs",
          "ambari-web/app/views/main/service/services/hive.js||ambari-web/app/views/main/service/services/hive.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less": [
          "File: ambari-web/app/styles/application.less -> ambari-web/app/styles/application.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "903:     color: #333333;",
          "904:     span {",
          "905:       display: inline-block;",
          "906:     }",
          "907:   }",
          "908:   .master-group-title {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "906:       &.endpoint-value {",
          "907:         padding-left: 30px;",
          "908:       }",
          "909:       .clip-board{",
          "910:         margin-left: 5px;",
          "911:       }",
          "",
          "---------------"
        ],
        "ambari-web/app/templates/main/service/services/hive.hbs||ambari-web/app/templates/main/service/services/hive.hbs": [
          "File: ambari-web/app/templates/main/service/services/hive.hbs -> ambari-web/app/templates/main/service/services/hive.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: {{#each endpoint in hiveServerEndPoints}}",
          "33:   {{#if endpoint.isVisible}}",
          "34:     <div {{bindAttr class=\":row :component endpoint.componentName\"}}>",
          "38:           {{endpoint.value}}",
          "43:       </div>",
          "44:     </div>",
          "45:   {{/if}}",
          "",
          "[Removed Lines]",
          "35:       <div class=\"col-md-2 col-lg-3 summary-label\" style=\"margin-top: 0px;\">{{endpoint.label}}</div>",
          "36:       <div class=\"col-md-9 col-lg-9 summary-value\">",
          "37:         {{#view view.summaryValueView titleBinding=\"endpoint.tooltipText\" data-toggle=\"tooltip\"}}",
          "39:         {{/view}}",
          "40:         {{#view view.clipBoardView data-clipboard-action= \"copy\" data-clipboard-textBinding=\"endpoint.value\"}}",
          "41:           <img src=\"/img/clippy.svg\" alt=\"Copy\" rel=\"clipboard-tooltip\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Copied!\"/>",
          "42:         {{/view}}",
          "",
          "[Added Lines]",
          "35:       <div class=\"col-md-2 col-lg-2 summary-label\" style=\"margin-top: 0px;\">{{endpoint.label}}</div>",
          "36:       <div class=\"col-md-10 col-lg-10 summary-value\">",
          "37:         <span class=\"endpoint-value\">",
          "39:           {{#view view.clipBoardView data-clipboard-action= \"copy\" data-clipboard-textBinding=\"endpoint.value\"}}",
          "40:             <img src=\"/img/clippy.svg\" alt=\"Copy\" rel=\"clipboard-tooltip\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Copied!\"/>",
          "41:           {{/view}}",
          "42:         </span>",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/service/services/hive.js||ambari-web/app/views/main/service/services/hive.js": [
          "File: ambari-web/app/views/main/service/services/hive.js -> ambari-web/app/views/main/service/services/hive.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     this.get('controller.hiveServerEndPoints').clear();",
          "56:   },",
          "99:   clipBoardView: Em.View.extend({",
          "100:     tagName: 'a',",
          "101:     href: \"javascript:void(null)\",",
          "102:     attributeBindings: ['data-clipboard-text', 'data-clipboard-action', \"href\"],",
          "103:     didInsertElement: function() {",
          "",
          "[Removed Lines]",
          "61:   summaryValueView: Em.View.extend({",
          "62:     tagName: 'span',",
          "63:     attributeBindings: ['title'],",
          "65:     didInsertElement: function() {",
          "66:       this.setEllipsis();",
          "67:       this.setTooltip();",
          "68:     },",
          "73:     setEllipsis: function() {",
          "74:       var $ = this.$();",
          "75:       var text = $.text();",
          "76:       var MAX_LENGTH = 96;",
          "77:       var ellipsis = '...';",
          "78:       var length = MAX_LENGTH > text.length ? text.length : MAX_LENGTH;",
          "79:       var start = Math.max(length - ellipsis.length, ellipsis.length);",
          "80:       text = text.slice(0, start);",
          "81:       text += ellipsis;",
          "82:       $.text(text);",
          "83:     },",
          "88:     setTooltip: function() {",
          "89:       var $ = this.$();",
          "90:       Em.run.next(function () {",
          "91:         $.tooltip();",
          "92:       });",
          "93:     }",
          "94:   }),",
          "",
          "[Added Lines]",
          "63:     classNames: ['clip-board'],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24147b6191801fba23e2dfaf9ef6cf9a51d4670c",
      "candidate_info": {
        "commit_hash": "24147b6191801fba23e2dfaf9ef6cf9a51d4670c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/24147b6191801fba23e2dfaf9ef6cf9a51d4670c",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ActionQueue.py",
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/test/python/ambari_agent/TestAlerts.py",
          "ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py"
        ],
        "message": "AMBARI-25471. After node reboot autostart of components takes too much time. (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ActionQueue.py||ambari-agent/src/main/python/ambari_agent/ActionQueue.py",
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/test/python/ambari_agent/TestAlerts.py||ambari-agent/src/test/python/ambari_agent/TestAlerts.py",
          "ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py||ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ActionQueue.py||ambari-agent/src/main/python/ambari_agent/ActionQueue.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ActionQueue.py -> ambari-agent/src/main/python/ambari_agent/ActionQueue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   # How much time(in seconds) we need wait for new incoming execution command before checking status command queue",
          "59:   EXECUTION_COMMAND_WAIT_TIME = 2",
          "61:   def __init__(self, initializer_module):",
          "62:     super(ActionQueue, self).__init__()",
          "63:     self.commandQueue = Queue.Queue()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   # key name in command dictionary",
          "62:   IS_RECOVERY_COMMAND = \"isRecoveryCommand\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:             if command is None:",
          "135:               break",
          "138:           else:",
          "139:             # If parallel execution is enabled, just kick off all available",
          "140:             # commands using separate threads",
          "",
          "[Removed Lines]",
          "137:             self.process_command(command)",
          "",
          "[Added Lines]",
          "140:             # Recovery commands should be run in parallel (since we don't know the ordering on agent)",
          "141:             if self.IS_RECOVERY_COMMAND in command and command[self.IS_RECOVERY_COMMAND]:",
          "142:               self.start_parallel_command(command)",
          "143:             else:",
          "144:               self.process_command(command)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:               if 'commandParams' in command and 'command_retry_enabled' in command['commandParams']:",
          "151:                 retry_able = command['commandParams']['command_retry_enabled'] == \"true\"",
          "152:               if retry_able:",
          "157:               else:",
          "158:                 self.process_command(command)",
          "159:                 break",
          "",
          "[Removed Lines]",
          "153:                 logger.info(\"Kicking off a thread for the command, id={} taskId={}\".format(command['commandId'], command['taskId']))",
          "154:                 t = threading.Thread(target=self.process_command, args=(command,))",
          "155:                 t.daemon = True",
          "156:                 t.start()",
          "",
          "[Added Lines]",
          "160:                 self.start_parallel_command(command)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:         logger.exception(\"ActionQueue thread failed with exception. Re-running it\")",
          "166:     logger.info(\"ActionQueue thread has successfully finished\")",
          "168:   def fill_recovery_commands(self):",
          "169:     if self.recovery_manager.enabled() and not self.tasks_in_progress_or_pending():",
          "170:       self.put(self.recovery_manager.get_recovery_commands())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   def start_parallel_command(self, command):",
          "173:     logger.info(\"Kicking off a thread for the command, id={} taskId={}\".format(command['commandId'], command['taskId']))",
          "174:     t = threading.Thread(target=self.process_command, args=(command,))",
          "175:     t.daemon = True",
          "176:     t.start()",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py -> ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:               if result:",
          "113:                 cluster_reports[cluster_id].append(result)",
          "116:         cluster_reports = self.discard_stale_reports(cluster_reports)",
          "117:         self.send_updates_to_server(cluster_reports)",
          "118:       except ConnectionIsAlreadyClosed: # server and agent disconnected during sending data. Not an issue",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:         self.recovery_manager.statuses_computed_at_least_once = True",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py": [
          "File: ambari-agent/src/main/python/ambari_agent/RecoveryManager.py -> ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   HAS_STALE_CONFIG = \"hasStaleConfigs\"",
          "46:   EXECUTION_COMMAND_DETAILS = \"executionCommandDetails\"",
          "47:   ROLE_COMMAND = \"roleCommand\"",
          "48:   COMMAND_ID = \"commandId\"",
          "49:   PAYLOAD_LEVEL_DEFAULT = \"DEFAULT\"",
          "50:   PAYLOAD_LEVEL_MINIMAL = \"MINIMAL\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   IS_RECOVERY_COMMAND = \"isRecoveryCommand\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     self.actions = {}",
          "103:     self.update_config(6, 60, 5, 12, recovery_enabled, auto_start_only, auto_install_start)",
          "105:   def on_execution_command_start(self):",
          "106:     with self.__active_command_lock:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     self.statuses_computed_at_least_once = False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:     INSTALLED_FAILED --> INSTALLED",
          "275:     INSTALLED_FAILED --> STARTED",
          "276:     \"\"\"",
          "277:     commands = []",
          "278:     for component in self.statuses.keys():",
          "279:       if self.configured_for_recovery(component) and self.requires_recovery(component) and self.may_execute(component):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     # wait until all component statuses are computed",
          "280:     if not self.statuses_computed_at_least_once:",
          "281:       return []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "659:         self.COMMAND_TYPE: AgentCommand.auto_execution,",
          "660:         self.TASK_ID: command_id,",
          "661:         self.ROLE: component,",
          "663:       }",
          "665:       if component in self.__component_to_service_map:",
          "",
          "[Removed Lines]",
          "662:         self.COMMAND_ID: command_id",
          "",
          "[Added Lines]",
          "668:         self.COMMAND_ID: command_id,",
          "669:         self.IS_RECOVERY_COMMAND: True",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestAlerts.py||ambari-agent/src/test/python/ambari_agent/TestAlerts.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestAlerts.py -> ambari-agent/src/test/python/ambari_agent/TestAlerts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1403:     \"\"\"",
          "1404:     with patch(\"__builtin__.open\") as open_mock:",
          "1405:       open_mock.side_effect = self.open_side_effect",
          "1407:       return cluster_configuration",
          "",
          "[Removed Lines]",
          "1406:       cluster_configuration = ClusterConfigurationCache(\"/tmp/test_cache\")",
          "",
          "[Added Lines]",
          "1406:       cluster_configuration = ClusterConfigurationCache(\"/tmp/test_cache\", None)",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py||ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py -> ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:       [1000, 1001, 1104, 1105, 1106, 1807, 1808, 1809, 1810, 1811, 1812]",
          "349:     rm = RecoveryManager(MagicMock())",
          "350:     rm.update_config(5, 5, 0, 11, True, False, False)",
          "352:     command1 = copy.deepcopy(self.command)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:     rm.statuses_computed_at_least_once = True",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a33f457ff819175be856d34906faad900a336665",
      "candidate_info": {
        "commit_hash": "a33f457ff819175be856d34906faad900a336665",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a33f457ff819175be856d34906faad900a336665",
        "files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py"
        ],
        "message": "AMBARI-24272. OneFS service check fails with 'dfs_type' is not set. (amagyar) (#1772) (#1787)",
        "before_after_code_files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py||contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py||contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py": [
          "File: contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py -> contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: hdfs_tmp_dir = config['configurations']['hadoop-env']['hdfs_tmp_dir']",
          "37: security_enabled = config['configurations']['cluster-env']['security_enabled']",
          "40: kinit_path_local = get_kinit_path(default('/configurations/kerberos-env/executable_search_paths', None))",
          "41: hadoop_bin_dir = stack_select.get_hadoop_dir(\"bin\")",
          "42: hadoop_conf_dir = conf_select.get_hadoop_conf_dir()",
          "",
          "[Removed Lines]",
          "39: dfs_type = default(\"/commandParams/dfs_type\", \"\")",
          "",
          "[Added Lines]",
          "39: dfs_type = default(\"/clusterLevelParams/dfs_type\", \"\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e14a0ddf46c682e58c86bd5cc911abde20f4307",
      "candidate_info": {
        "commit_hash": "2e14a0ddf46c682e58c86bd5cc911abde20f4307",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/2e14a0ddf46c682e58c86bd5cc911abde20f4307",
        "files": [
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java"
        ],
        "message": "AMBARI-24750 NPE when trying to set loglevel in logsearch (#2432)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     for (Map.Entry<String, LogLevelFilter> e : filters.getFilter().entrySet()) {",
          "84:       String nodePath = String.format(\"/%s/loglevelfilter/%s\", clusterName, e.getKey());",
          "85:       String logLevelFilterJson = gson.toJson(e.getValue());",
          "87:       if (!logLevelFilterJson.equals(currentLogLevelFilterJson)) {",
          "88:         client.setData().forPath(nodePath, logLevelFilterJson.getBytes());",
          "89:         LOG.info(\"Set log level filter for the log \" + e.getKey() + \" for cluster \" + clusterName);",
          "",
          "[Removed Lines]",
          "86:       String currentLogLevelFilterJson = new String(serverCache.getCurrentData(nodePath).getData());",
          "",
          "[Added Lines]",
          "86:       ChildData childData = serverCache.getCurrentData(nodePath);",
          "87:       String currentLogLevelFilterJson = childData != null ? new String(childData.getData()) : null;",
          "",
          "---------------"
        ]
      }
    }
  ]
}