{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "469caf6ee600ab6709ad5e8a06f371fe2ef3b8dd",
  "patch_info": {
    "commit_hash": "469caf6ee600ab6709ad5e8a06f371fe2ef3b8dd",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/469caf6ee600ab6709ad5e8a06f371fe2ef3b8dd",
    "files": [
      "src/main/java/graphql/Assert.java",
      "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "src/main/java/graphql/analysis/QueryTransformer.java",
      "src/main/java/graphql/analysis/QueryTraversalContext.java",
      "src/main/java/graphql/analysis/QueryTraverser.java",
      "src/main/java/graphql/execution/ConditionalNodes.java",
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/execution/FieldCollector.java",
      "src/main/java/graphql/execution/FieldCollectorParameters.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Cherry pick PR 3539 and update ConditionalNodes and related files to v21 equivalent",
    "before_after_code_files": [
      "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java",
      "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
      "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
      "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
      "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java",
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
      "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java": [
      "File: src/main/java/graphql/Assert.java -> src/main/java/graphql/Assert.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:         throw new AssertException(\"condition expected to be true\");",
      "86:     }",
      "88:     public static void assertFalse(boolean condition, Supplier<String> msg) {",
      "89:         if (!condition) {",
      "90:             return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:     public static void assertTrue(boolean condition, String constantMsg) {",
      "89:         if (condition) {",
      "90:             return;",
      "91:         }",
      "92:         throwAssert(constantMsg);",
      "93:     }",
      "95:     public static void assertTrue(boolean condition, String msgFmt, Object arg1) {",
      "96:         if (condition) {",
      "97:             return;",
      "98:         }",
      "99:         throwAssert(msgFmt, arg1);",
      "100:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:         throw new AssertException(String.format(invalidNameErrorMessage, name));",
      "118:     }",
      "120: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:     private static <T> T throwAssert(String format, Object... args) {",
      "135:         throw new AssertException(format(format, args));",
      "136:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java": [
      "File: src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java -> src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.GraphQLContext;",
      "4: import graphql.Internal;",
      "5: import graphql.execution.CoercedVariables;",
      "7: import graphql.execution.ValuesResolver;",
      "8: import graphql.introspection.Introspection;",
      "9: import graphql.language.Argument;",
      "10: import graphql.language.Directive;",
      "",
      "[Removed Lines]",
      "6: import graphql.execution.ConditionalNodes;",
      "",
      "[Added Lines]",
      "7: import graphql.execution.conditional.ConditionalNodes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:     @Override",
      "70:     public TraversalControl visitInlineFragment(InlineFragment inlineFragment, TraverserContext<Node> context) {",
      "72:             return TraversalControl.ABORT;",
      "73:         }",
      "",
      "[Removed Lines]",
      "71:         if (!conditionalNodes.shouldInclude(variables, inlineFragment.getDirectives())) {",
      "",
      "[Added Lines]",
      "71:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "72:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "73:         if (!conditionalNodes.shouldInclude(inlineFragment, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "82:         preOrderCallback.visitInlineFragment(inlineFragmentEnvironment);",
      "87:         GraphQLCompositeType fragmentCondition;",
      "88:         if (inlineFragment.getTypeCondition() != null) {",
      "",
      "[Removed Lines]",
      "85:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "92:             fragmentCondition = parentEnv.getUnwrappedOutputType();",
      "93:         }",
      "96:         return TraversalControl.CONTINUE;",
      "97:     }",
      "99:     @Override",
      "102:             return TraversalControl.ABORT;",
      "103:         }",
      "107:         if (context.getPhase() == LEAVE) {",
      "108:             postOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
      "",
      "[Removed Lines]",
      "95:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment));",
      "100:     public TraversalControl visitFragmentDefinition(FragmentDefinition node, TraverserContext<Node> context) {",
      "101:         if (!conditionalNodes.shouldInclude(variables, node.getDirectives())) {",
      "105:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(node, context, schema);",
      "",
      "[Added Lines]",
      "96:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment, graphQLContext));",
      "101:     public TraversalControl visitFragmentDefinition(FragmentDefinition fragmentDefinition, TraverserContext<Node> context) {",
      "102:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "103:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "104:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
      "108:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(fragmentDefinition, context, schema);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "110:         }",
      "111:         preOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
      "116:         return TraversalControl.CONTINUE;",
      "117:     }",
      "119:     @Override",
      "120:     public TraversalControl visitFragmentSpread(FragmentSpread fragmentSpread, TraverserContext<Node> context) {",
      "122:             return TraversalControl.ABORT;",
      "123:         }",
      "125:         FragmentDefinition fragmentDefinition = fragmentsByName.get(fragmentSpread.getName());",
      "127:             return TraversalControl.ABORT;",
      "128:         }",
      "",
      "[Removed Lines]",
      "113:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "114:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(node.getTypeCondition().getName());",
      "115:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), node));",
      "121:         if (!conditionalNodes.shouldInclude(variables, fragmentSpread.getDirectives())) {",
      "126:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition.getDirectives())) {",
      "",
      "[Added Lines]",
      "116:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
      "117:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
      "123:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "124:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "125:         if (!conditionalNodes.shouldInclude(fragmentSpread, variables, null, graphQLContext)) {",
      "130:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "136:         preOrderCallback.visitFragmentSpread(fragmentSpreadEnvironment);",
      "140:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
      "141:         assertNotNull(typeCondition,",
      "142:                 () -> format(\"Invalid type condition '%s' in fragment '%s'\", fragmentDefinition.getTypeCondition().getName(),",
      "143:                         fragmentDefinition.getName()));",
      "145:         return TraversalControl.CONTINUE;",
      "146:     }",
      "148:     @Override",
      "149:     public TraversalControl visitField(Field field, TraverserContext<Node> context) {",
      "150:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "152:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(schema, (GraphQLCompositeType) unwrapAll(parentEnv.getOutputType()), field.getName());",
      "153:         boolean isTypeNameIntrospectionField = fieldDefinition == schema.getIntrospectionTypenameFieldDefinition();",
      "",
      "[Removed Lines]",
      "138:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "144:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition));",
      "",
      "[Added Lines]",
      "147:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
      "154:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "174:             return TraversalControl.CONTINUE;",
      "175:         }",
      "178:             return TraversalControl.ABORT;",
      "179:         }",
      "",
      "[Removed Lines]",
      "177:         if (!conditionalNodes.shouldInclude(variables, field.getDirectives())) {",
      "",
      "[Added Lines]",
      "181:         if (!conditionalNodes.shouldInclude(field, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "183:         GraphQLUnmodifiedType unmodifiedType = unwrapAll(fieldDefinition.getType());",
      "184:         QueryTraversalContext fieldEnv = (unmodifiedType instanceof GraphQLCompositeType)",
      "189:         context.setVar(QueryTraversalContext.class, fieldEnv);",
      "",
      "[Removed Lines]",
      "185:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field)",
      "186:                 : new QueryTraversalContext(null, environment, field);// Terminal (scalar) node, EMPTY FRAME",
      "",
      "[Added Lines]",
      "189:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field, graphQLContext)",
      "190:                 : new QueryTraversalContext(null, environment, field, graphQLContext);// Terminal (scalar) node, EMPTY FRAME",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "259:         }",
      "260:         return preOrderCallback.visitArgumentValue(environment);",
      "261:     }",
      "",
      "[Removed Lines]",
      "262: }",
      "",
      "[Added Lines]",
      "266: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java": [
      "File: src/main/java/graphql/analysis/QueryTransformer.java -> src/main/java/graphql/analysis/QueryTransformer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.PublicApi;",
      "4: import graphql.language.FragmentDefinition;",
      "5: import graphql.language.Node;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         NodeVisitorWithTypeTracking nodeVisitor = new NodeVisitorWithTypeTracking(queryVisitor, noOp, variables, schema, fragmentsByName);",
      "69:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
      "72:         TraverserVisitor<Node> nodeTraverserVisitor = new TraverserVisitor<Node>() {",
      "",
      "[Removed Lines]",
      "70:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
      "",
      "[Added Lines]",
      "71:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163:             return new QueryTransformer(schema, root, rootParentType, fragmentsByName, variables);",
      "164:         }",
      "165:     }",
      "",
      "[Removed Lines]",
      "166: }",
      "",
      "[Added Lines]",
      "167: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java": [
      "File: src/main/java/graphql/analysis/QueryTraversalContext.java -> src/main/java/graphql/analysis/QueryTraversalContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.Internal;",
      "4: import graphql.language.SelectionSetContainer;",
      "5: import graphql.schema.GraphQLCompositeType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     private final GraphQLOutputType outputType;",
      "18:     private final QueryVisitorFieldEnvironment environment;",
      "21:     QueryTraversalContext(GraphQLOutputType outputType,",
      "22:                           QueryVisitorFieldEnvironment environment,",
      "24:         this.outputType = outputType;",
      "25:         this.environment = environment;",
      "26:         this.selectionSetContainer = selectionSetContainer;",
      "27:     }",
      "29:     public GraphQLOutputType getOutputType() {",
      "",
      "[Removed Lines]",
      "19:     private final SelectionSetContainer selectionSetContainer;",
      "23:                           SelectionSetContainer selectionSetContainer) {",
      "",
      "[Added Lines]",
      "20:     private final SelectionSetContainer<?> selectionSetContainer;",
      "21:     private final GraphQLContext graphQLContext;",
      "25:                           SelectionSetContainer<?> selectionSetContainer,",
      "26:                           GraphQLContext graphQLContext) {",
      "30:         this.graphQLContext = graphQLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:         return (GraphQLCompositeType) GraphQLTypeUtil.unwrapAll(outputType);",
      "35:     }",
      "38:     public QueryVisitorFieldEnvironment getEnvironment() {",
      "39:         return environment;",
      "40:     }",
      "44:         return selectionSetContainer;",
      "45:     }",
      "",
      "[Removed Lines]",
      "42:     public SelectionSetContainer getSelectionSetContainer() {",
      "46: }",
      "",
      "[Added Lines]",
      "45:     public SelectionSetContainer<?> getSelectionSetContainer() {",
      "49:     public GraphQLContext getGraphQLContext() {",
      "50:         return graphQLContext;",
      "51:     }",
      "52: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java": [
      "File: src/main/java/graphql/analysis/QueryTraverser.java -> src/main/java/graphql/analysis/QueryTraverser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     private Object visitImpl(QueryVisitor visitFieldCallback, Boolean preOrder) {",
      "179:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
      "182:         QueryVisitor preOrderCallback;",
      "183:         QueryVisitor postOrderCallback;",
      "",
      "[Removed Lines]",
      "180:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
      "",
      "[Added Lines]",
      "180:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "343:         }",
      "345:     }",
      "",
      "[Removed Lines]",
      "346: }",
      "",
      "[Added Lines]",
      "346: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java": [
      "File: src/main/java/graphql/execution/ConditionalNodes.java -> src/main/java/graphql/execution/ConditionalNodes.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:         this.errors.set(builder.errors);",
      "82:         this.localContext = builder.localContext;",
      "83:         this.executionInput = builder.executionInput;",
      "85:     }",
      "",
      "[Removed Lines]",
      "84:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "84:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java": [
      "File: src/main/java/graphql/execution/FieldCollector.java -> src/main/java/graphql/execution/FieldCollector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import graphql.Internal;",
      "5: import graphql.language.Field;",
      "6: import graphql.language.FragmentDefinition;",
      "7: import graphql.language.FragmentSpread;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: import graphql.execution.conditional.ConditionalNodes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:         if (visitedFragments.contains(fragmentSpread.getName())) {",
      "77:             return;",
      "78:         }",
      "80:             return;",
      "81:         }",
      "82:         visitedFragments.add(fragmentSpread.getName());",
      "83:         FragmentDefinition fragmentDefinition = parameters.getFragmentsByName().get(fragmentSpread.getName());",
      "86:             return;",
      "87:         }",
      "88:         if (!doesFragmentConditionMatch(parameters, fragmentDefinition)) {",
      "",
      "[Removed Lines]",
      "79:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentSpread.getDirectives())) {",
      "85:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentDefinition.getDirectives())) {",
      "",
      "[Added Lines]",
      "80:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "81:                 parameters.getVariables(),",
      "82:                 parameters.getGraphQLSchema(),",
      "83:                 parameters.getGraphQLContext())) {",
      "89:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "90:                 parameters.getVariables(),",
      "91:                 parameters.getGraphQLSchema(),",
      "92:                 parameters.getGraphQLContext())) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92:     }",
      "94:     private void collectInlineFragment(FieldCollectorParameters parameters, Set<String> visitedFragments, Map<String, MergedField> fields, InlineFragment inlineFragment) {",
      "96:                 !doesFragmentConditionMatch(parameters, inlineFragment)) {",
      "97:             return;",
      "98:         }",
      "",
      "[Removed Lines]",
      "95:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), inlineFragment.getDirectives()) ||",
      "",
      "[Added Lines]",
      "102:         if (!conditionalNodes.shouldInclude(inlineFragment,",
      "103:                 parameters.getVariables(),",
      "104:                 parameters.getGraphQLSchema(),",
      "105:                 parameters.getGraphQLContext()) ||",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "100:     }",
      "102:     private void collectField(FieldCollectorParameters parameters, Map<String, MergedField> fields, Field field) {",
      "104:             return;",
      "105:         }",
      "106:         String name = field.getResultKey();",
      "",
      "[Removed Lines]",
      "103:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), field.getDirectives())) {",
      "",
      "[Added Lines]",
      "113:         if (!conditionalNodes.shouldInclude(field,",
      "114:                 parameters.getVariables(),",
      "115:                 parameters.getGraphQLSchema(),",
      "116:                 parameters.getGraphQLContext())) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:     }",
      "",
      "[Removed Lines]",
      "146: }",
      "",
      "[Added Lines]",
      "159: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java": [
      "File: src/main/java/graphql/execution/FieldCollectorParameters.java -> src/main/java/graphql/execution/FieldCollectorParameters.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.execution;",
      "3: import graphql.Assert;",
      "4: import graphql.Internal;",
      "5: import graphql.language.FragmentDefinition;",
      "6: import graphql.schema.GraphQLObjectType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     private final Map<String, FragmentDefinition> fragmentsByName;",
      "18:     private final Map<String, Object> variables;",
      "19:     private final GraphQLObjectType objectType;",
      "21:     public GraphQLSchema getGraphQLSchema() {",
      "22:         return graphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:     private final GraphQLContext graphQLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:         return objectType;",
      "35:     }",
      "42:     }",
      "44:     public static Builder newParameters() {",
      "",
      "[Removed Lines]",
      "37:     private FieldCollectorParameters(GraphQLSchema graphQLSchema, Map<String, Object> variables, Map<String, FragmentDefinition> fragmentsByName, GraphQLObjectType objectType) {",
      "38:         this.fragmentsByName = fragmentsByName;",
      "39:         this.graphQLSchema = graphQLSchema;",
      "40:         this.variables = variables;",
      "41:         this.objectType = objectType;",
      "",
      "[Added Lines]",
      "39:     public GraphQLContext getGraphQLContext() {",
      "40:         return graphQLContext;",
      "41:     }",
      "43:     private FieldCollectorParameters(Builder builder) {",
      "44:         this.fragmentsByName = builder.fragmentsByName;",
      "45:         this.graphQLSchema = builder.graphQLSchema;",
      "46:         this.variables = builder.variables;",
      "47:         this.objectType = builder.objectType;",
      "48:         this.graphQLContext = builder.graphQLContext;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "50:         private Map<String, FragmentDefinition> fragmentsByName;",
      "51:         private Map<String, Object> variables;",
      "52:         private GraphQLObjectType objectType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60:         private GraphQLContext graphQLContext = GraphQLContext.getDefault();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "68:             return this;",
      "69:         }",
      "71:         public Builder fragments(Map<String, FragmentDefinition> fragmentsByName) {",
      "72:             this.fragmentsByName = fragmentsByName;",
      "73:             return this;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:         public Builder graphQLContext(GraphQLContext graphQLContext) {",
      "80:             this.graphQLContext = graphQLContext;",
      "81:             return this;",
      "82:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "81:         public FieldCollectorParameters build() {",
      "82:             Assert.assertNotNull(graphQLSchema, () -> \"You must provide a schema\");",
      "84:         }",
      "86:     }",
      "",
      "[Removed Lines]",
      "83:             return new FieldCollectorParameters(graphQLSchema, variables, fragmentsByName, objectType);",
      "87: }",
      "",
      "[Added Lines]",
      "96:             return new FieldCollectorParameters(this);",
      "100: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java": [
      "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package graphql.execution.conditional;",
      "3: import graphql.ExperimentalApi;",
      "11: @ExperimentalApi",
      "12: public interface ConditionalNodeDecision {",
      "21:     boolean shouldInclude(ConditionalNodeDecisionEnvironment decisionEnv);",
      "22: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java": [
      "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package graphql.execution.conditional;",
      "3: import graphql.GraphQLContext;",
      "4: import graphql.execution.CoercedVariables;",
      "5: import graphql.language.Directive;",
      "6: import graphql.language.DirectivesContainer;",
      "7: import graphql.schema.GraphQLSchema;",
      "8: import org.jetbrains.annotations.Nullable;",
      "10: import java.util.List;",
      "15: public interface ConditionalNodeDecisionEnvironment {",
      "25:     DirectivesContainer<?> getDirectivesContainer();",
      "30:     default List<Directive> getDirectives() {",
      "31:         return getDirectivesContainer().getDirectives();",
      "32:     }",
      "37:     CoercedVariables getVariables();",
      "42:     @Nullable GraphQLSchema getGraphQlSchema();",
      "47:     GraphQLContext getGraphQLContext();",
      "48: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
      "File: src/main/java/graphql/execution/conditional/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package graphql.execution.conditional;",
      "3: import graphql.Assert;",
      "4: import graphql.GraphQLContext;",
      "5: import graphql.Internal;",
      "6: import graphql.execution.CoercedVariables;",
      "7: import graphql.execution.ValuesResolver;",
      "8: import graphql.language.Directive;",
      "9: import graphql.language.DirectivesContainer;",
      "10: import graphql.language.NodeUtil;",
      "11: import graphql.schema.GraphQLSchema;",
      "13: import java.util.List;",
      "14: import java.util.Locale;",
      "15: import java.util.Map;",
      "17: import static graphql.Directives.IncludeDirective;",
      "18: import static graphql.Directives.SkipDirective;",
      "20: @Internal",
      "21: public class ConditionalNodes {",
      "24:     public boolean shouldInclude(DirectivesContainer<?> element,",
      "25:                                  Map<String, Object> variables,",
      "26:                                  GraphQLSchema graphQLSchema,",
      "27:                                  GraphQLContext graphQLContext",
      "28:     ) {",
      "31:         if (!shouldInclude(variables, element.getDirectives())) {",
      "32:             return false;",
      "33:         }",
      "37:         if (graphQLContext != null) {",
      "38:             ConditionalNodeDecision conditionalDecision = graphQLContext.get(ConditionalNodeDecision.class);",
      "39:             if (conditionalDecision != null) {",
      "40:                 return customShouldInclude(variables, element, graphQLSchema, graphQLContext, conditionalDecision);",
      "41:             }",
      "42:         }",
      "44:         return true;",
      "45:     }",
      "47:     private boolean customShouldInclude(Map<String, Object> variables,",
      "48:                                         DirectivesContainer<?> element,",
      "49:                                         GraphQLSchema graphQLSchema,",
      "50:                                         GraphQLContext graphQLContext,",
      "51:                                         ConditionalNodeDecision conditionalDecision",
      "52:     ) {",
      "53:         CoercedVariables coercedVariables = CoercedVariables.of(variables);",
      "54:         return conditionalDecision.shouldInclude(new ConditionalNodeDecisionEnvironment() {",
      "55:             @Override",
      "56:             public DirectivesContainer<?> getDirectivesContainer() {",
      "57:                 return element;",
      "58:             }",
      "60:             @Override",
      "61:             public CoercedVariables getVariables() {",
      "62:                 return coercedVariables;",
      "63:             }",
      "65:             @Override",
      "66:             public GraphQLSchema getGraphQlSchema() {",
      "67:                 return graphQLSchema;",
      "68:             }",
      "70:             @Override",
      "71:             public GraphQLContext getGraphQLContext() {",
      "72:                 return graphQLContext;",
      "73:             }",
      "74:         });",
      "75:     }",
      "78:     private boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
      "80:         if (directives.isEmpty()) {",
      "81:             return true;",
      "82:         }",
      "83:         boolean skip = getDirectiveResult(variables, directives, SkipDirective.getName(), false);",
      "84:         if (skip) {",
      "85:             return false;",
      "86:         }",
      "88:         return getDirectiveResult(variables, directives, IncludeDirective.getName(), true);",
      "89:     }",
      "91:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {",
      "92:         Directive foundDirective = NodeUtil.findNodeByName(directives, directiveName);",
      "93:         if (foundDirective != null) {",
      "94:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), CoercedVariables.of(variables), GraphQLContext.getDefault(), Locale.getDefault());",
      "95:             Object flag = argumentValues.get(\"if\");",
      "96:             Assert.assertTrue(flag instanceof Boolean, \"The '%s' directive MUST have a value for the 'if' argument\", directiveName);",
      "97:             return (Boolean) flag;",
      "98:         }",
      "99:         return defaultValue;",
      "100:     }",
      "102: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.util.Optional;",
      "20: import java.util.concurrent.atomic.AtomicBoolean;",
      "22: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "23: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "47:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "57:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "79:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "81:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "82:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "83:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "80:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "90:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "92:         return Optional.empty();",
      "93:     }",
      "95:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "96:         if (!isEnabledJvmWide()) {",
      "97:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "114:         Options options = Options.defaultOptions()",
      "115:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "116:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "117:                 .locale(executionContext.getLocale())",
      "118:                 .graphQLContext(executionContext.getGraphQLContext());",
      "120:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "121:                 executionContext.getOperationDefinition(),",
      "122:                 executionContext.getFragmentsByName(),",
      "123:                 executionContext.getCoercedVariables(),",
      "124:                 options);",
      "126:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import com.google.common.collect.ImmutableListMultimap;",
      "4: import graphql.Assert;",
      "6: import graphql.execution.MergedField;",
      "7: import graphql.execution.ResultPath;",
      "8: import graphql.language.Field;",
      "9: import graphql.language.OperationDefinition;",
      "10: import graphql.schema.FieldCoordinates;",
      "",
      "[Removed Lines]",
      "5: import graphql.Internal;",
      "",
      "[Added Lines]",
      "5: import graphql.PublicApi;",
      "8: import graphql.execution.directives.QueryDirectives;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: import java.util.List;",
      "14: import java.util.Map;",
      "17: public class ExecutableNormalizedOperation {",
      "18:     private final OperationDefinition.Operation operation;",
      "19:     private final String operationName;",
      "20:     private final List<ExecutableNormalizedField> topLevelFields;",
      "21:     private final ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField;",
      "22:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "23:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "25:     public ExecutableNormalizedOperation(",
      "26:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "16: @Internal",
      "",
      "[Added Lines]",
      "25: @PublicApi",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "28:             List<ExecutableNormalizedField> topLevelFields,",
      "29:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "30:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "33:         this.operation = operation;",
      "34:         this.operationName = operationName;",
      "35:         this.topLevelFields = topLevelFields;",
      "36:         this.fieldToNormalizedField = fieldToNormalizedField;",
      "37:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "38:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "39:     }",
      "41:     public OperationDefinition.Operation getOperation() {",
      "42:         return operation;",
      "43:     }",
      "45:     public String getOperationName() {",
      "46:         return operationName;",
      "47:     }",
      "49:     public ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> getCoordinatesToNormalizedFields() {",
      "50:         return coordinatesToNormalizedFields;",
      "51:     }",
      "53:     public List<ExecutableNormalizedField> getTopLevelFields() {",
      "54:         return topLevelFields;",
      "55:     }",
      "62:     public ImmutableListMultimap<Field, ExecutableNormalizedField> getFieldToNormalizedField() {",
      "63:         return fieldToNormalizedField;",
      "64:     }",
      "66:     public List<ExecutableNormalizedField> getNormalizedFields(Field field) {",
      "67:         return fieldToNormalizedField.get(field);",
      "68:     }",
      "70:     public Map<ExecutableNormalizedField, MergedField> getNormalizedFieldToMergedField() {",
      "71:         return normalizedFieldToMergedField;",
      "72:     }",
      "74:     public MergedField getMergedField(ExecutableNormalizedField executableNormalizedField) {",
      "75:         return normalizedFieldToMergedField.get(executableNormalizedField);",
      "76:     }",
      "78:     public ExecutableNormalizedField getNormalizedField(MergedField mergedField, GraphQLFieldsContainer fieldsContainer, ResultPath resultPath) {",
      "79:         List<ExecutableNormalizedField> executableNormalizedFields = fieldToNormalizedField.get(mergedField.getSingleField());",
      "80:         List<String> keysOnlyPath = resultPath.getKeysOnly();",
      "",
      "[Removed Lines]",
      "31:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "32:     ) {",
      "",
      "[Added Lines]",
      "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "52:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "143:     public Map<ExecutableNormalizedField, QueryDirectives> getNormalizedFieldToQueryDirectives() {",
      "144:         return normalizedFieldToQueryDirectives;",
      "146:     }",
      "155:     public QueryDirectives getQueryDirectives(ExecutableNormalizedField executableNormalizedField) {",
      "156:         return normalizedFieldToQueryDirectives.get(executableNormalizedField);",
      "157:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "87:         }",
      "88:         return Assert.assertShouldNeverHappen(\"normalized field not found\");",
      "89:     }",
      "",
      "[Removed Lines]",
      "90: }",
      "",
      "[Added Lines]",
      "180: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import com.google.common.collect.ImmutableMap;",
      "6: import com.google.common.collect.ImmutableSet;",
      "7: import graphql.GraphQLContext;",
      "9: import graphql.collect.ImmutableKit;",
      "10: import graphql.execution.CoercedVariables;",
      "12: import graphql.execution.MergedField;",
      "13: import graphql.execution.RawVariables;",
      "14: import graphql.execution.ValuesResolver;",
      "15: import graphql.introspection.Introspection;",
      "16: import graphql.language.Document;",
      "17: import graphql.language.Field;",
      "",
      "[Removed Lines]",
      "8: import graphql.Internal;",
      "11: import graphql.execution.ConditionalNodes;",
      "",
      "[Added Lines]",
      "8: import graphql.PublicApi;",
      "10: import graphql.execution.AbortExecutionException;",
      "12: import graphql.execution.conditional.ConditionalNodes;",
      "16: import graphql.execution.directives.QueryDirectives;",
      "17: import graphql.execution.directives.QueryDirectivesImpl;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: import graphql.schema.GraphQLCompositeType;",
      "28: import graphql.schema.GraphQLFieldDefinition;",
      "29: import graphql.schema.GraphQLInterfaceType;",
      "30: import graphql.schema.GraphQLObjectType;",
      "31: import graphql.schema.GraphQLSchema;",
      "32: import graphql.schema.GraphQLType;",
      "34: import graphql.schema.GraphQLUnionType;",
      "35: import graphql.schema.GraphQLUnmodifiedType;",
      "36: import graphql.schema.impl.SchemaUtil;",
      "",
      "[Removed Lines]",
      "33: import graphql.schema.GraphQLTypeUtil;",
      "",
      "[Added Lines]",
      "33: import graphql.schema.GraphQLNamedOutputType;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "47: import static graphql.Assert.assertNotNull;",
      "48: import static graphql.Assert.assertShouldNeverHappen;",
      "49: import static graphql.collect.ImmutableKit.map;",
      "51: import static graphql.schema.GraphQLTypeUtil.unwrapAll;",
      "52: import static graphql.util.FpKit.filterSet;",
      "53: import static graphql.util.FpKit.groupingBy;",
      "",
      "[Removed Lines]",
      "50: import static graphql.execution.MergedField.newMergedField;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "55: import static java.util.Collections.singleton;",
      "56: import static java.util.Collections.singletonList;",
      "59: public class ExecutableNormalizedOperationFactory {",
      "67:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "69:     }",
      "71:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "72:                                                                                     OperationDefinition operationDefinition,",
      "73:                                                                                     Map<String, FragmentDefinition> fragments,",
      "74:                                                                                     CoercedVariables coercedVariableValues) {",
      "76:     }",
      "78:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
      "79:                                                                                                     Document document,",
      "80:                                                                                                     String operationName,",
      "81:                                                                                                     RawVariables rawVariables) {",
      "83:     }",
      "85:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
      "86:                                                                                                     Document document,",
      "87:                                                                                                     String operationName,",
      "88:                                                                                                     RawVariables rawVariables,",
      "91:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "102:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "106:     }",
      "185:         }",
      "193:         }",
      "200:         }",
      "221:         }",
      "233:         }",
      "239:             }",
      "248:         }",
      "262:         }",
      "297:                 }",
      "300:                 }",
      "305:             }",
      "306:         }",
      "345:         }",
      "352:         }",
      "357:         }",
      "362:         }",
      "380:             }",
      "381:         }",
      "401:         }",
      "412:         }",
      "432:         }",
      "440:         }",
      "452:         }",
      "456:         }",
      "467:         }",
      "480:             }",
      "481:         }",
      "496:         }",
      "497:     }",
      "",
      "[Removed Lines]",
      "58: @Internal",
      "61:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "63:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "64:                                                                                     Document document,",
      "65:                                                                                     String operationName,",
      "66:                                                                                     CoercedVariables coercedVariableValues) {",
      "68:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, coercedVariableValues, null);",
      "75:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, null);",
      "82:         return createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, operationName, rawVariables, GraphQLContext.getDefault(), Locale.getDefault());",
      "89:                                                                                                     GraphQLContext graphQLContext,",
      "90:                                                                                                     Locale locale) {",
      "92:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, rawVariables, graphQLContext, locale);",
      "93:     }",
      "95:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
      "96:                                                                                                   OperationDefinition operationDefinition,",
      "97:                                                                                                   Map<String, FragmentDefinition> fragments,",
      "98:                                                                                                   RawVariables rawVariables,",
      "99:                                                                                                   GraphQLContext graphQLContext,",
      "100:                                                                                                   Locale locale) {",
      "103:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema, variableDefinitions, rawVariables, graphQLContext, locale);",
      "104:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema, variableDefinitions, rawVariables, graphQLContext, locale);",
      "105:         return createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, normalizedVariableValues);",
      "111:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
      "112:                                                                     OperationDefinition operationDefinition,",
      "113:                                                                     Map<String, FragmentDefinition> fragments,",
      "114:                                                                     CoercedVariables coercedVariableValues,",
      "115:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues) {",
      "116:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
      "117:                 .newParameters()",
      "118:                 .fragments(fragments)",
      "119:                 .schema(graphQLSchema)",
      "120:                 .coercedVariables(coercedVariableValues.toMap())",
      "121:                 .normalizedVariables(normalizedVariableValues)",
      "122:                 .build();",
      "124:         GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "126:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
      "128:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "129:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "130:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "132:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "133:             ImmutableList<FieldAndAstParent> mergedField = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "134:             normalizedFieldToMergedField.put(topLevel, newMergedField(map(mergedField, fieldAndAstParent -> fieldAndAstParent.field)).build());",
      "135:             updateFieldToNFMap(topLevel, mergedField, fieldToNormalizedField);",
      "136:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
      "138:             buildFieldWithChildren(topLevel,",
      "139:                     mergedField,",
      "140:                     parameters,",
      "141:                     fieldToNormalizedField,",
      "142:                     normalizedFieldToMergedField,",
      "143:                     coordinatesToNormalizedFields,",
      "144:                     1);",
      "146:         }",
      "147:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.possibleMergerList) {",
      "148:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "149:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "150:         }",
      "151:         return new ExecutableNormalizedOperation(",
      "152:                 operationDefinition.getOperation(),",
      "153:                 operationDefinition.getName(),",
      "154:                 new ArrayList<>(collectFromOperationResult.children),",
      "155:                 fieldToNormalizedField.build(),",
      "156:                 normalizedFieldToMergedField.build(),",
      "157:                 coordinatesToNormalizedFields.build()",
      "158:         );",
      "159:     }",
      "162:     private void buildFieldWithChildren(ExecutableNormalizedField field,",
      "163:                                         ImmutableList<FieldAndAstParent> mergedField,",
      "164:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
      "165:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
      "166:                                         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "167:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "168:                                         int curLevel) {",
      "169:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, field, mergedField, curLevel + 1);",
      "171:         for (ExecutableNormalizedField child : nextLevel.children) {",
      "172:             field.addChild(child);",
      "173:             ImmutableList<FieldAndAstParent> mergedFieldForChild = nextLevel.normalizedFieldToAstFields.get(child);",
      "174:             normalizedFieldToMergedField.put(child, newMergedField(map(mergedFieldForChild, fieldAndAstParent -> fieldAndAstParent.field)).build());",
      "175:             updateFieldToNFMap(child, mergedFieldForChild, fieldNormalizedField);",
      "176:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, child);",
      "178:             buildFieldWithChildren(child,",
      "179:                     mergedFieldForChild,",
      "180:                     fieldCollectorNormalizedQueryParams,",
      "181:                     fieldNormalizedField,",
      "182:                     normalizedFieldToMergedField,",
      "183:                     coordinatesToNormalizedFields,",
      "184:                     curLevel + 1);",
      "186:     }",
      "188:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "189:                                     ImmutableList<FieldAndAstParent> mergedField,",
      "190:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
      "191:         for (FieldAndAstParent astField : mergedField) {",
      "192:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "194:     }",
      "196:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
      "197:         for (String objectType : topLevel.getObjectTypeNames()) {",
      "198:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "199:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "201:     }",
      "203:     private static class FieldAndAstParent {",
      "204:         final Field field;",
      "205:         final GraphQLCompositeType astParentType;",
      "207:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "208:             this.field = field;",
      "209:             this.astParentType = astParentType;",
      "210:         }",
      "211:     }",
      "214:     public static class CollectNFResult {",
      "215:         private final Collection<ExecutableNormalizedField> children;",
      "216:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "218:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "219:             this.children = children;",
      "220:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "222:     }",
      "225:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
      "226:                                                   ExecutableNormalizedField executableNormalizedField,",
      "227:                                                   ImmutableList<FieldAndAstParent> mergedField,",
      "228:                                                   int level) {",
      "229:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
      "230:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
      "231:         if (possibleObjects.isEmpty()) {",
      "232:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "235:         List<CollectedField> collectedFields = new ArrayList<>();",
      "236:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "237:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "238:                 continue;",
      "240:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "241:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "242:             this.collectFromSelectionSet(parameters,",
      "243:                     fieldAndAstParent.field.getSelectionSet(),",
      "244:                     collectedFields,",
      "245:                     (GraphQLCompositeType) astParentType,",
      "246:                     possibleObjects",
      "247:             );",
      "249:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "250:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "251:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "253:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "255:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "256:     }",
      "258:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "259:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "260:         for (CollectedField collectedField : collectedFields) {",
      "261:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "263:         return fieldsByName;",
      "264:     }",
      "266:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
      "267:                                                 OperationDefinition operationDefinition,",
      "268:                                                 GraphQLObjectType rootType) {",
      "271:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "272:         List<CollectedField> collectedFields = new ArrayList<>();",
      "273:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "275:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "276:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "277:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "279:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "281:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "282:     }",
      "284:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "285:                            FieldCollectorNormalizedQueryParams parameters,",
      "286:                            Map<String, List<CollectedField>> fieldsByName,",
      "287:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "288:                            int level,",
      "289:                            ExecutableNormalizedField parent) {",
      "290:         for (String resultKey : fieldsByName.keySet()) {",
      "291:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "292:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "293:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "294:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
      "295:                 if (nf == null) {",
      "296:                     continue;",
      "298:                 for (CollectedField collectedField : fieldGroup.fields) {",
      "299:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "301:                 nfListBuilder.add(nf);",
      "302:             }",
      "303:             if (commonParentsGroups.size() > 1) {",
      "304:                 parameters.addPossibleMergers(parent, resultKey);",
      "307:     }",
      "309:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
      "310:                                                CollectedFieldGroup collectedFieldGroup,",
      "311:                                                int level,",
      "312:                                                ExecutableNormalizedField parent) {",
      "313:         Field field;",
      "314:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "315:         field = collectedFieldGroup.fields.iterator().next().field;",
      "316:         String fieldName = field.getName();",
      "317:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
      "319:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(parameters.getCoercedVariableValues()), parameters.getGraphQLContext(), parameters.getLocale());",
      "320:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "321:         if (parameters.getNormalizedVariableValues() != null) {",
      "322:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
      "323:         }",
      "324:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "326:         return ExecutableNormalizedField.newNormalizedField()",
      "327:                 .alias(field.getAlias())",
      "328:                 .resolvedArguments(argumentValues)",
      "329:                 .normalizedArguments(normalizedArgumentValues)",
      "330:                 .astArguments(field.getArguments())",
      "331:                 .objectTypeNames(objectTypeNames)",
      "332:                 .fieldName(fieldName)",
      "333:                 .level(level)",
      "334:                 .parent(parent)",
      "335:                 .build();",
      "336:     }",
      "338:     private static class CollectedFieldGroup {",
      "339:         Set<GraphQLObjectType> objectTypes;",
      "340:         Set<CollectedField> fields;",
      "342:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "343:             this.fields = fields;",
      "344:             this.objectTypes = objectTypes;",
      "346:     }",
      "348:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "349:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "350:         for (CollectedField collectedField : fields) {",
      "351:             objectTypes.addAll(collectedField.objectTypes);",
      "353:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "354:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "355:         if (groupByAstParent.size() == 1) {",
      "356:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "358:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "359:         for (GraphQLObjectType objectType : allRelevantObjects) {",
      "360:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "361:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "363:         return result.build();",
      "364:     }",
      "367:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
      "368:                                          SelectionSet selectionSet,",
      "369:                                          List<CollectedField> result,",
      "370:                                          GraphQLCompositeType astTypeCondition,",
      "371:                                          Set<GraphQLObjectType> possibleObjects",
      "372:     ) {",
      "373:         for (Selection<?> selection : selectionSet.getSelections()) {",
      "374:             if (selection instanceof Field) {",
      "375:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
      "376:             } else if (selection instanceof InlineFragment) {",
      "377:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "378:             } else if (selection instanceof FragmentSpread) {",
      "379:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects, astTypeCondition);",
      "382:     }",
      "384:     private static class CollectedField {",
      "385:         Field field;",
      "386:         Set<GraphQLObjectType> objectTypes;",
      "387:         GraphQLCompositeType astTypeCondition;",
      "389:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "390:             this.field = field;",
      "391:             this.objectTypes = objectTypes;",
      "392:             this.astTypeCondition = astTypeCondition;",
      "393:         }",
      "395:         public boolean isAbstract() {",
      "396:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
      "397:         }",
      "399:         public boolean isConcrete() {",
      "400:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
      "402:     }",
      "404:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
      "405:                                        List<CollectedField> result,",
      "406:                                        FragmentSpread fragmentSpread,",
      "407:                                        Set<GraphQLObjectType> possibleObjects,",
      "408:                                        GraphQLCompositeType astTypeCondition",
      "409:     ) {",
      "410:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentSpread.getDirectives())) {",
      "411:             return;",
      "413:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
      "415:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentDefinition.getDirectives())) {",
      "416:             return;",
      "417:         }",
      "418:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
      "419:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "420:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "421:     }",
      "424:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
      "425:                                        List<CollectedField> result,",
      "426:                                        InlineFragment inlineFragment,",
      "427:                                        Set<GraphQLObjectType> possibleObjects,",
      "428:                                        GraphQLCompositeType astTypeCondition",
      "429:     ) {",
      "430:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), inlineFragment.getDirectives())) {",
      "431:             return;",
      "433:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "434:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "436:         if (inlineFragment.getTypeCondition() != null) {",
      "437:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
      "438:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "441:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "442:     }",
      "444:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
      "445:                               List<CollectedField> result,",
      "446:                               Field field,",
      "447:                               Set<GraphQLObjectType> possibleObjectTypes,",
      "448:                               GraphQLCompositeType astTypeCondition",
      "449:     ) {",
      "450:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), field.getDirectives())) {",
      "451:             return;",
      "454:         if (possibleObjectTypes.isEmpty()) {",
      "455:             return;",
      "457:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "458:     }",
      "460:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "461:                                                              GraphQLCompositeType typeCondition,",
      "462:                                                              GraphQLSchema graphQLSchema) {",
      "464:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
      "465:         if (currentOnes.isEmpty()) {",
      "466:             return resolvedTypeCondition;",
      "470:         return intersection(currentOnes, resolvedTypeCondition);",
      "471:     }",
      "473:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
      "474:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "476:         for (GraphQLFieldDefinition def : defs) {",
      "477:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "478:             if (outputType instanceof GraphQLCompositeType) {",
      "479:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
      "483:         return builder.build();",
      "484:     }",
      "486:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
      "487:         if (type instanceof GraphQLObjectType) {",
      "488:             return ImmutableSet.of((GraphQLObjectType) type);",
      "489:         } else if (type instanceof GraphQLInterfaceType) {",
      "490:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "491:         } else if (type instanceof GraphQLUnionType) {",
      "492:             List types = ((GraphQLUnionType) type).getTypes();",
      "493:             return ImmutableSet.copyOf(types);",
      "494:         } else {",
      "495:             return assertShouldNeverHappen();",
      "498: }",
      "",
      "[Added Lines]",
      "64: @PublicApi",
      "67:     public static class Options {",
      "68:         private final GraphQLContext graphQLContext;",
      "69:         private final Locale locale;",
      "70:         private final int maxChildrenDepth;",
      "71:         private final int maxFieldsCount;",
      "73:         private Options(GraphQLContext graphQLContext,",
      "74:                         Locale locale,",
      "75:                         int maxChildrenDepth,",
      "76:                         int maxFieldsCount) {",
      "77:             this.graphQLContext = graphQLContext;",
      "78:             this.locale = locale;",
      "79:             this.maxChildrenDepth = maxChildrenDepth;",
      "80:             this.maxFieldsCount = maxFieldsCount;",
      "81:         }",
      "83:         public static Options defaultOptions() {",
      "84:             return new Options(",
      "85:                     GraphQLContext.getDefault(),",
      "86:                     Locale.getDefault(),",
      "87:                     Integer.MAX_VALUE,",
      "88:                     Integer.MAX_VALUE);",
      "89:         }",
      "99:         public Options locale(Locale locale) {",
      "100:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount);",
      "101:         }",
      "110:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "111:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount);",
      "112:         }",
      "121:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "122:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount);",
      "123:         }",
      "132:         public Options maxFieldsCount(int maxFieldsCount) {",
      "133:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount);",
      "134:         }",
      "140:         public GraphQLContext getGraphQLContext() {",
      "141:             return graphQLContext;",
      "142:         }",
      "148:         public Locale getLocale() {",
      "149:             return locale;",
      "150:         }",
      "156:         public int getMaxChildrenDepth() {",
      "157:             return maxChildrenDepth;",
      "158:         }",
      "160:         public int getMaxFieldsCount() {",
      "161:             return maxFieldsCount;",
      "162:         }",
      "164:     }",
      "166:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "168:     private ExecutableNormalizedOperationFactory() {",
      "170:     }",
      "182:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "183:             GraphQLSchema graphQLSchema,",
      "184:             Document document,",
      "185:             String operationName,",
      "186:             CoercedVariables coercedVariableValues",
      "187:     ) {",
      "188:         return createExecutableNormalizedOperation(",
      "189:                 graphQLSchema,",
      "190:                 document,",
      "191:                 operationName,",
      "192:                 coercedVariableValues,",
      "193:                 Options.defaultOptions());",
      "194:     }",
      "207:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "208:             GraphQLSchema graphQLSchema,",
      "209:             Document document,",
      "210:             String operationName,",
      "211:             CoercedVariables coercedVariableValues,",
      "212:             Options options",
      "213:     ) {",
      "216:         return new ExecutableNormalizedOperationFactoryImpl(",
      "217:                 graphQLSchema,",
      "218:                 getOperationResult.operationDefinition,",
      "219:                 getOperationResult.fragmentsByName,",
      "220:                 coercedVariableValues,",
      "221:                 null,",
      "222:                 options",
      "223:         ).createNormalizedQueryImpl();",
      "240:         return createExecutableNormalizedOperation(graphQLSchema,",
      "241:                 operationDefinition,",
      "242:                 fragments,",
      "243:                 coercedVariableValues,",
      "244:                 Options.defaultOptions());",
      "245:     }",
      "257:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "258:                                                                                     OperationDefinition operationDefinition,",
      "259:                                                                                     Map<String, FragmentDefinition> fragments,",
      "260:                                                                                     CoercedVariables coercedVariableValues,",
      "261:                                                                                     Options options) {",
      "262:         return new ExecutableNormalizedOperationFactoryImpl(",
      "263:                 graphQLSchema,",
      "264:                 operationDefinition,",
      "265:                 fragments,",
      "266:                 coercedVariableValues,",
      "267:                 null,",
      "268:                 options",
      "269:         ).createNormalizedQueryImpl();",
      "286:         return createExecutableNormalizedOperationWithRawVariables(graphQLSchema,",
      "287:                 document,",
      "288:                 operationName,",
      "289:                 rawVariables,",
      "290:                 Options.defaultOptions());",
      "306:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(",
      "307:             GraphQLSchema graphQLSchema,",
      "308:             Document document,",
      "309:             String operationName,",
      "310:             RawVariables rawVariables,",
      "311:             GraphQLContext graphQLContext,",
      "312:             Locale locale",
      "313:     ) {",
      "314:         return createExecutableNormalizedOperationWithRawVariables(",
      "315:                 graphQLSchema,",
      "316:                 document,",
      "317:                 operationName,",
      "318:                 rawVariables,",
      "319:                 Options.defaultOptions().graphQLContext(graphQLContext).locale(locale));",
      "320:     }",
      "338:                                                                                                     Options options) {",
      "340:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
      "343:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
      "344:                 variableDefinitions,",
      "345:                 rawVariables,",
      "346:                 options.getGraphQLContext(),",
      "347:                 options.getLocale());",
      "348:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema,",
      "349:                 variableDefinitions,",
      "350:                 rawVariables,",
      "351:                 options.getGraphQLContext(),",
      "352:                 options.getLocale());",
      "354:         return new ExecutableNormalizedOperationFactoryImpl(",
      "355:                 graphQLSchema,",
      "356:                 operationDefinition,",
      "357:                 getOperationResult.fragmentsByName,",
      "358:                 coercedVariableValues,",
      "359:                 normalizedVariableValues,",
      "360:                 options",
      "361:         ).createNormalizedQueryImpl();",
      "365:     private static class ExecutableNormalizedOperationFactoryImpl {",
      "366:         private final GraphQLSchema graphQLSchema;",
      "367:         private final OperationDefinition operationDefinition;",
      "368:         private final Map<String, FragmentDefinition> fragments;",
      "369:         private final CoercedVariables coercedVariableValues;",
      "370:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
      "371:         private final Options options;",
      "373:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
      "375:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "376:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "377:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "378:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "379:         private int fieldCount = 0;",
      "380:         private int maxDepthSeen = 0;",
      "382:         private ExecutableNormalizedOperationFactoryImpl(",
      "383:                 GraphQLSchema graphQLSchema,",
      "384:                 OperationDefinition operationDefinition,",
      "385:                 Map<String, FragmentDefinition> fragments,",
      "386:                 CoercedVariables coercedVariableValues,",
      "387:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "388:                 Options options",
      "389:         ) {",
      "390:             this.graphQLSchema = graphQLSchema;",
      "391:             this.operationDefinition = operationDefinition;",
      "392:             this.fragments = fragments;",
      "393:             this.coercedVariableValues = coercedVariableValues;",
      "394:             this.normalizedVariableValues = normalizedVariableValues;",
      "395:             this.options = options;",
      "401:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
      "402:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "404:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
      "406:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "407:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "408:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
      "410:                 captureMergedField(topLevel, mergedField);",
      "412:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "413:                 updateCoordinatedToNFMap(topLevel);",
      "415:                 int depthSeen = buildFieldWithChildren(",
      "416:                         topLevel,",
      "417:                         fieldAndAstParents,",
      "418:                         1);",
      "419:                 maxDepthSeen = Math.max(maxDepthSeen, depthSeen);",
      "420:             }",
      "422:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "423:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "424:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "425:             }",
      "426:             return new ExecutableNormalizedOperation(",
      "427:                     operationDefinition.getOperation(),",
      "428:                     operationDefinition.getName(),",
      "429:                     new ArrayList<>(collectFromOperationResult.children),",
      "430:                     fieldToNormalizedField.build(),",
      "431:                     normalizedFieldToMergedField.build(),",
      "432:                     normalizedFieldToQueryDirectives.build(),",
      "433:                     coordinatesToNormalizedFields.build(),",
      "434:                     fieldCount,",
      "435:                     maxDepthSeen",
      "436:             );",
      "439:         private void captureMergedField(ExecutableNormalizedField enf, MergedField mergedFld) {",
      "441:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
      "442:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "443:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "446:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "447:                                            ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "448:                                            int curLevel) {",
      "449:             checkMaxDepthExceeded(curLevel);",
      "451:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "453:             int maxDepthSeen = curLevel;",
      "454:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "455:                 executableNormalizedField.addChild(childENF);",
      "456:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "458:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "459:                 captureMergedField(childENF, mergedField);",
      "461:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "462:                 updateCoordinatedToNFMap(childENF);",
      "464:                 int depthSeen = buildFieldWithChildren(childENF,",
      "465:                         childFieldAndAstParents,",
      "466:                         curLevel + 1);",
      "467:                 maxDepthSeen = Math.max(maxDepthSeen, depthSeen);",
      "469:                 checkMaxDepthExceeded(maxDepthSeen);",
      "470:             }",
      "471:             return maxDepthSeen;",
      "474:         private void checkMaxDepthExceeded(int depthSeen) {",
      "475:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "476:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "477:             }",
      "478:         }",
      "480:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "481:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "484:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "485:                                         ImmutableList<FieldAndAstParent> mergedField) {",
      "486:             for (FieldAndAstParent astField : mergedField) {",
      "487:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "491:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
      "492:             for (String objectType : topLevel.getObjectTypeNames()) {",
      "493:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "494:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "495:             }",
      "496:         }",
      "498:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
      "499:                                                       ImmutableList<FieldAndAstParent> mergedField,",
      "500:                                                       int level) {",
      "501:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
      "502:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
      "503:             if (possibleObjects.isEmpty()) {",
      "504:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "505:             }",
      "507:             List<CollectedField> collectedFields = new ArrayList<>();",
      "508:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "509:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "510:                     continue;",
      "511:                 }",
      "512:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "513:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "514:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
      "515:                         collectedFields,",
      "516:                         (GraphQLCompositeType) astParentType,",
      "517:                         possibleObjects",
      "518:                 );",
      "519:             }",
      "520:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "521:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "522:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "524:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "526:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "529:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "530:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "531:             for (CollectedField collectedField : collectedFields) {",
      "532:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "533:             }",
      "534:             return fieldsByName;",
      "535:         }",
      "537:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
      "540:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "541:             List<CollectedField> collectedFields = new ArrayList<>();",
      "542:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "544:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "545:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "546:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "548:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "550:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "551:         }",
      "553:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "554:                                Map<String, List<CollectedField>> fieldsByName,",
      "555:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "556:                                int level,",
      "557:                                ExecutableNormalizedField parent) {",
      "558:             for (String resultKey : fieldsByName.keySet()) {",
      "559:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "560:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "561:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "562:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
      "563:                     if (nf == null) {",
      "564:                         continue;",
      "565:                     }",
      "566:                     for (CollectedField collectedField : fieldGroup.fields) {",
      "567:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "568:                     }",
      "569:                     nfListBuilder.add(nf);",
      "571:                 if (commonParentsGroups.size() > 1) {",
      "572:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
      "577:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "578:                                                    int level,",
      "579:                                                    ExecutableNormalizedField parent) {",
      "581:             this.fieldCount++;",
      "582:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "583:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "584:             }",
      "585:             Field field;",
      "586:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "587:             field = collectedFieldGroup.fields.iterator().next().field;",
      "588:             String fieldName = field.getName();",
      "589:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
      "591:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()), this.options.graphQLContext, this.options.locale);",
      "592:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "593:             if (this.normalizedVariableValues != null) {",
      "594:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
      "595:             }",
      "596:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "597:             return ExecutableNormalizedField.newNormalizedField()",
      "598:                     .alias(field.getAlias())",
      "599:                     .resolvedArguments(argumentValues)",
      "600:                     .normalizedArguments(normalizedArgumentValues)",
      "601:                     .astArguments(field.getArguments())",
      "602:                     .objectTypeNames(objectTypeNames)",
      "603:                     .fieldName(fieldName)",
      "604:                     .level(level)",
      "605:                     .parent(parent)",
      "606:                     .build();",
      "609:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "610:             return groupByCommonParentsNoDeferSupport(fields);",
      "613:         private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
      "614:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "615:             for (CollectedField collectedField : fields) {",
      "616:                 objectTypes.addAll(collectedField.objectTypes);",
      "617:             }",
      "618:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "619:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "620:             if (groupByAstParent.size() == 1) {",
      "621:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "622:             }",
      "623:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "624:             for (GraphQLObjectType objectType : allRelevantObjects) {",
      "625:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "626:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "627:             }",
      "628:             return result.build();",
      "631:         private void collectFromSelectionSet(SelectionSet selectionSet,",
      "632:                                              List<CollectedField> result,",
      "633:                                              GraphQLCompositeType astTypeCondition,",
      "634:                                              Set<GraphQLObjectType> possibleObjects",
      "635:         ) {",
      "636:             for (Selection<?> selection : selectionSet.getSelections()) {",
      "637:                 if (selection instanceof Field) {",
      "638:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
      "639:                 } else if (selection instanceof InlineFragment) {",
      "640:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "641:                 } else if (selection instanceof FragmentSpread) {",
      "642:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
      "643:                 }",
      "644:             }",
      "647:         private void collectFragmentSpread(List<CollectedField> result,",
      "648:                                            FragmentSpread fragmentSpread,",
      "649:                                            Set<GraphQLObjectType> possibleObjects",
      "650:         ) {",
      "651:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "652:                     this.coercedVariableValues.toMap(),",
      "653:                     this.graphQLSchema,",
      "654:                     this.options.graphQLContext)) {",
      "655:                 return;",
      "656:             }",
      "657:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
      "659:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "660:                     this.coercedVariableValues.toMap(),",
      "661:                     this.graphQLSchema,",
      "662:                     this.options.graphQLContext)) {",
      "663:                 return;",
      "665:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
      "666:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "668:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "671:         private void collectInlineFragment(List<CollectedField> result,",
      "672:                                            InlineFragment inlineFragment,",
      "673:                                            Set<GraphQLObjectType> possibleObjects,",
      "674:                                            GraphQLCompositeType astTypeCondition",
      "675:         ) {",
      "676:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
      "677:                 return;",
      "678:             }",
      "679:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "680:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "682:             if (inlineFragment.getTypeCondition() != null) {",
      "683:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
      "684:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "686:             }",
      "688:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "691:         private void collectField(List<CollectedField> result,",
      "692:                                   Field field,",
      "693:                                   Set<GraphQLObjectType> possibleObjectTypes,",
      "694:                                   GraphQLCompositeType astTypeCondition",
      "695:         ) {",
      "696:             if (!conditionalNodes.shouldInclude(field,",
      "697:                     this.coercedVariableValues.toMap(),",
      "698:                     this.graphQLSchema,",
      "699:                     this.options.graphQLContext)) {",
      "700:                 return;",
      "701:             }",
      "703:             if (possibleObjectTypes.isEmpty()) {",
      "704:                 return;",
      "705:             }",
      "706:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "709:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "710:                                                                  GraphQLCompositeType typeCondition) {",
      "712:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
      "713:             if (currentOnes.isEmpty()) {",
      "714:                 return resolvedTypeCondition;",
      "715:             }",
      "718:             return intersection(currentOnes, resolvedTypeCondition);",
      "721:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
      "722:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "724:             for (GraphQLFieldDefinition def : defs) {",
      "725:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "726:                 if (outputType instanceof GraphQLCompositeType) {",
      "727:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
      "728:                 }",
      "729:             }",
      "731:             return builder.build();",
      "734:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
      "735:             if (type instanceof GraphQLObjectType) {",
      "736:                 return ImmutableSet.of((GraphQLObjectType) type);",
      "737:             } else if (type instanceof GraphQLInterfaceType) {",
      "738:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "739:             } else if (type instanceof GraphQLUnionType) {",
      "740:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "741:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "742:             } else {",
      "743:                 return assertShouldNeverHappen();",
      "744:             }",
      "747:         private static class PossibleMerger {",
      "748:             ExecutableNormalizedField parent;",
      "749:             String resultKey;",
      "751:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
      "752:                 this.parent = parent;",
      "753:                 this.resultKey = resultKey;",
      "754:             }",
      "757:         private static class CollectedField {",
      "758:             Field field;",
      "759:             Set<GraphQLObjectType> objectTypes;",
      "760:             GraphQLCompositeType astTypeCondition;",
      "762:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "763:                 this.field = field;",
      "764:                 this.objectTypes = objectTypes;",
      "765:                 this.astTypeCondition = astTypeCondition;",
      "766:             }",
      "769:         public static class CollectNFResult {",
      "770:             private final Collection<ExecutableNormalizedField> children;",
      "771:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "773:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "774:                 this.children = children;",
      "775:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "776:             }",
      "777:         }",
      "779:         private static class FieldAndAstParent {",
      "780:             final Field field;",
      "781:             final GraphQLCompositeType astParentType;",
      "783:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "784:                 this.field = field;",
      "785:                 this.astParentType = astParentType;",
      "789:         private static class CollectedFieldGroup {",
      "790:             Set<GraphQLObjectType> objectTypes;",
      "791:             Set<CollectedField> fields;",
      "793:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "794:                 this.fields = fields;",
      "795:                 this.objectTypes = objectTypes;",
      "796:             }",
      "800: }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "893:         given:",
      "894:         def graphQLSchema = createComplexSchema()",
      "896:         when:",
      "898:             {",
      "899:                 nodeType: __type(name: \"Node\") {",
      "900:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "899:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "902:                         name",
      "903:                     }",
      "904:                 }",
      "906:                     possibleTypes {",
      "907:                         kind",
      "908:                         name",
      "",
      "[Removed Lines]",
      "905:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "907:             }",
      "908:         \"\"\"",
      "909:         def result = graphQL.execute(query)",
      "911:         then:",
      "912:         !result.errors",
      "913:         result.data == [",
      "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "915:         ]",
      "917:         when:",
      "918:         query = \"\"\"",
      "919:         {",
      "920:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "911:                         kind",
      "912:                         name",
      "913:                     }",
      "916:                     interfaces {",
      "917:                         kind",
      "918:                         name",
      "919:                     }",
      "920:                 }",
      "924:         then:",
      "925:         !result.errors",
      "926:         result.data == [",
      "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "930:         ]",
      "931:     }",
      "",
      "[Removed Lines]",
      "914:                 }",
      "915:                 imageType: __type(name: \"Image\") {",
      "921:             }",
      "922:         \"\"\")",
      "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "929:                 }",
      "930:         }",
      "931:         \"\"\"",
      "932:         result = graphQL.execute(query)",
      "934:         then:",
      "935:         !result.errors",
      "936:         result.data == [",
      "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "938:         ]",
      "940:         when:",
      "942:         query = \"\"\"",
      "943:         {",
      "944:             imageType: __type(name: \"Image\") {",
      "950:         }",
      "951:         \"\"\"",
      "952:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "8:         def query = \"\"\"",
      "9:             {",
      "10:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "7:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:                   possibleTypes { name }",
      "16:                   enumValues { name }",
      "17:                   inputFields { name }",
      "27:                 }",
      "28:             }",
      "29:             \"\"\"",
      "",
      "[Removed Lines]",
      "18:             }",
      "19:                 Pet: __type(name: \"Pet\") {",
      "20:                   kind",
      "21:                   name",
      "22:                   fields { name }",
      "23:                   interfaces { name }",
      "24:                   possibleTypes { name }",
      "25:                   enumValues { name }",
      "26:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:                 ],",
      "43:                 enumValues   : null,",
      "44:                 inputFields  : null",
      "47:                                       kind         : 'UNION',",
      "48:                                       name         : 'Pet',",
      "49:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "45:         ],",
      "46:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy": [
      "File: src/test/groovy/graphql/execution/ConditionalNodesTest.groovy -> src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.execution",
      "4: import graphql.language.Argument",
      "5: import graphql.language.BooleanValue",
      "6: import graphql.language.Directive",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.execution.conditional.ConditionalNodes",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.GraphQL",
      "5: import graphql.TestUtil",
      "6: import graphql.execution.CoercedVariables",
      "7: import graphql.execution.MergedField",
      "8: import graphql.execution.RawVariables",
      "9: import graphql.language.Document",
      "10: import graphql.language.Field",
      "11: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "10: import graphql.execution.directives.QueryAppliedDirective",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "18: import graphql.util.TraverserVisitorStub",
      "19: import spock.lang.Specification",
      "21: import static graphql.TestUtil.schema",
      "22: import static graphql.language.AstPrinter.printAst",
      "23: import static graphql.parser.Parser.parseValue",
      "24: import static graphql.schema.FieldCoordinates.coordinates",
      "26: class ExecutableNormalizedOperationFactoryTest extends Specification {",
      "28:     def \"test\"() {",
      "29:         String schema = \"\"\"",
      "30: type Query{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import java.util.stream.Collectors",
      "25: import java.util.stream.IntStream",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "709:         ]",
      "710:     }",
      "712:     def \"query with interface in between\"() {",
      "713:         def graphQLSchema = schema(\"\"\"",
      "714:         type Query {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "717:     def \"query with fragment and type condition merged together 2\"() {",
      "718:         def graphQLSchema = TestUtil.schema(\"\"\"",
      "719:             type Query {",
      "720:                 pet : Pet",
      "721:             }",
      "722:             interface Pet {",
      "723:                 name : String",
      "724:             }",
      "726:             type Dog implements Pet {",
      "727:                 name : String",
      "728:             }",
      "730:             type Bird implements Pet {",
      "731:                 name : String",
      "732:             }",
      "734:             type Cat implements Pet {",
      "735:                 name : String",
      "736:             }",
      "737:         \"\"\")",
      "738:         def query = \"\"\"",
      "739:         {",
      "740:             pet {",
      "741:                 name",
      "742:                 ... on Dog {",
      "743:                     name",
      "744:                 }",
      "745:                 ... CatFrag",
      "746:             }",
      "747:          }",
      "749:         fragment CatFrag on Cat {",
      "750:             name",
      "751:         }",
      "752:             \"\"\"",
      "753:         assertValidQuery(graphQLSchema, query)",
      "755:         Document document = TestUtil.parseQuery(query)",
      "757:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "758:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "759:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "761:         expect:",
      "762:         printedTree == ['-Query.pet: Pet',",
      "763:                         '--[Bird, Cat, Dog].name: String'",
      "764:         ]",
      "765:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "896:         result",
      "897:     }",
      "899:     static List<String> printTreeWithLevelInfo(ExecutableNormalizedOperation queryExecutionTree, GraphQLSchema schema) {",
      "900:         def result = []",
      "901:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "955:     List<String> printTreeAndDirectives(ExecutableNormalizedOperation queryExecutionTree) {",
      "956:         def result = []",
      "957:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "958:         traverser.traverse(queryExecutionTree.getTopLevelFields(), new TraverserVisitorStub<ExecutableNormalizedField>() {",
      "959:             @Override",
      "960:             TraversalControl enter(TraverserContext<ExecutableNormalizedField> context) {",
      "961:                 ExecutableNormalizedField queryExecutionField = context.thisNode()",
      "962:                 def queryDirectives = queryExecutionTree.getQueryDirectives(queryExecutionField)",
      "964:                 def fieldDetails = queryExecutionField.printDetails()",
      "965:                 if (queryDirectives != null) {",
      "966:                     def appliedDirectivesByName = queryDirectives.getImmediateAppliedDirectivesByName()",
      "967:                     if (!appliedDirectivesByName.isEmpty()) {",
      "968:                         fieldDetails += \" \" + printDirectives(appliedDirectivesByName)",
      "969:                     }",
      "970:                 }",
      "971:                 result << fieldDetails",
      "972:                 return TraversalControl.CONTINUE",
      "973:             }",
      "975:             String printDirectives(Map<String, List<QueryAppliedDirective>> stringListMap) {",
      "976:                 String s = stringListMap.collect { entry ->",
      "977:                     entry.value.collect {",
      "978:                         \" @\" + it.name + \"(\" + it.getArguments().collect {",
      "979:                             it.name + \" : \" + '\"' + it.value + '\"'",
      "980:                         }.join(\",\") + \")\"",
      "981:                     }.join(' ')",
      "982:                 }.join(\" \")",
      "983:                 return s",
      "984:             }",
      "985:         })",
      "986:         result",
      "987:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1654:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1655:         when:",
      "1656:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "1664:         then:",
      "1665:         tree.normalizedFieldToMergedField.size() == 5",
      "1666:         tree.fieldToNormalizedField.size() == 7",
      "1667:     }",
      "",
      "[Removed Lines]",
      "1657:         println String.join(\"\\n\", printTree(tree))",
      "",
      "[Added Lines]",
      "1747:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1751:         printedTree == ['-Query.pets: Pet',",
      "1752:                         '--friend: Cat.catFriend: CatFriend',",
      "1753:                         '---CatFriend.catFriendName: String',",
      "1754:                         '--friend: Dog.dogFriend: DogFriend',",
      "1755:                         '---DogFriend.dogFriendName: String']",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2384:         ]",
      "2385:     }",
      "2387:     def \"missing argument\"() {",
      "2388:         given:",
      "2389:         String schema = \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2485:     def \"query directives are captured is respected\"() {",
      "2486:         given:",
      "2487:         String schema = \"\"\"",
      "2488:         directive @fieldDirective(target : String!) on FIELD",
      "2489:         directive @fieldXDirective(target : String!) on FIELD",
      "2491:         type Query {",
      "2492:           pets: Pet",
      "2493:         }",
      "2494:         interface Pet {",
      "2495:           name: String",
      "2496:         }",
      "2497:         type Cat implements Pet {",
      "2498:           name: String",
      "2499:         }",
      "2500:         type Dog implements Pet {",
      "2501:             name: String",
      "2502:         }",
      "2503:         \"\"\"",
      "2504:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2506:         String query = '''",
      "2507:           query q {",
      "2508:               pets {",
      "2509:                 ... on Cat {",
      "2510:                     cName : name @fieldDirective(target : \"Cat.name\")",
      "2511:               }",
      "2512:                 ... on Dog {",
      "2513:                     dName : name @fieldDirective(target : \"Dog.name\") @fieldXDirective(target : \"Dog.name\")",
      "2514:               }",
      "2515:               ... on Pet {",
      "2516:                     pName : name @fieldDirective(target : \"Pet.name\")",
      "2517:               }",
      "2518:           }}",
      "2519:         '''",
      "2521:         def variables = [:]",
      "2522:         assertValidQuery(graphQLSchema, query, variables)",
      "2523:         Document document = TestUtil.parseQuery(query)",
      "2524:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2525:         when:",
      "2526:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "2527:         def printedTree = printTreeAndDirectives(tree)",
      "2529:         then:",
      "2530:         printedTree == ['Query.pets',",
      "2531:                         'cName: Cat.name  @fieldDirective(target : \"Cat.name\")',",
      "2532:                         'dName: Dog.name  @fieldDirective(target : \"Dog.name\")  @fieldXDirective(target : \"Dog.name\")',",
      "2533:                         'pName: [Cat, Dog].name  @fieldDirective(target : \"Pet.name\")',",
      "2534:         ]",
      "2535:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2406:         printedTree == ['Query.hello']",
      "2407:         tree.getTopLevelFields().get(0).getNormalizedArguments().isEmpty()",
      "2408:     }",
      "2409: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:     def \"reused field via fragments\"() {",
      "2561:         String schema = \"\"\"",
      "2562:         type Query {",
      "2563:           pet: Pet",
      "2564:         }",
      "2565:         type Pet {",
      "2566:           owner: Person",
      "2567:           emergencyContact: Person",
      "2568:         }",
      "2569:         type Person {",
      "2570:           name: String",
      "2571:         }",
      "2572:         \"\"\"",
      "2573:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2575:         String query = \"\"\"",
      "2576: { pet {",
      "2577:   owner { ...personName }",
      "2578:   emergencyContact { ...personName }",
      "2579: }}",
      "2580: fragment personName on Person {",
      "2581:   name",
      "2583:         \"\"\"",
      "2585:         assertValidQuery(graphQLSchema, query)",
      "2587:         Document document = TestUtil.parseQuery(query)",
      "2589:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2590:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2591:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2593:         expect:",
      "2594:         printedTree == ['-Query.pet: Pet',",
      "2595:                         '--Pet.owner: Person',",
      "2596:                         '---Person.name: String',",
      "2597:                         '--Pet.emergencyContact: Person',",
      "2598:                         '---Person.name: String'",
      "2599:         ]",
      "2601:     }",
      "2604:     def \"test interface fields with three different output types (covariance) on the implementations\"() {",
      "2605:         def graphQLSchema = schema(\"\"\"",
      "2606:         interface Animal {",
      "2607:             parent: Animal",
      "2608:             name: String",
      "2609:         }",
      "2610:         type Cat implements Animal {",
      "2611:             name: String",
      "2612:             parent: Cat",
      "2613:         }",
      "2614:         type Dog implements Animal {",
      "2615:             name: String",
      "2616:             parent: Dog",
      "2617:             isGoodBoy: Boolean",
      "2618:         }",
      "2619:         type Bird implements Animal {",
      "2620:             name: String",
      "2621:             parent: Bird",
      "2622:         }",
      "2623:         type Query {",
      "2624:             animal: Animal",
      "2625:         }",
      "2626:         \"\"\")",
      "2628:         def query = \"\"\"",
      "2629:         {",
      "2630:             animal {",
      "2631:                 parent {",
      "2632:                     name",
      "2633:                 }",
      "2634:             }",
      "2635:         }",
      "2636:         \"\"\"",
      "2638:         assertValidQuery(graphQLSchema, query)",
      "2640:         Document document = TestUtil.parseQuery(query)",
      "2642:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2643:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2644:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2646:         expect:",
      "2647:         printedTree == [",
      "2648:                 \"-Query.animal: Animal\",",
      "2649:                 \"--[Bird, Cat, Dog].parent: Bird, Cat, Dog\",",
      "2650:                 \"---[Bird, Cat, Dog].name: String\",",
      "2651:         ]",
      "2652:     }",
      "2654:     def \"covariants with union fields\"() {",
      "2655:         def graphQLSchema = schema(\"\"\"",
      "2656:         type Query {",
      "2657:             animal: Animal",
      "2658:         }",
      "2659:         interface Animal {",
      "2660:             parent: DogOrCat",
      "2661:             name: String",
      "2662:         }",
      "2663:         type Cat implements Animal {",
      "2664:             name: String",
      "2665:             parent: Cat",
      "2666:         }",
      "2667:         type Dog implements Animal {",
      "2668:             name: String",
      "2669:             parent: Dog",
      "2670:             isGoodBoy: Boolean",
      "2671:         }",
      "2672:         union DogOrCat = Dog | Cat",
      "2673:         \"\"\")",
      "2675:         def query = \"\"\"",
      "2676:         {",
      "2677:             animal {",
      "2678:                 parent {",
      "2679:                   __typename",
      "2680:                 }",
      "2681:             }",
      "2682:         }",
      "2683:         \"\"\"",
      "2685:         assertValidQuery(graphQLSchema, query)",
      "2687:         Document document = TestUtil.parseQuery(query)",
      "2689:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2690:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2691:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2693:         expect:",
      "2694:         printedTree == [",
      "2695:                 \"-Query.animal: Animal\",",
      "2696:                 \"--[Cat, Dog].parent: Cat, Dog\",",
      "2697:                 \"---[Cat, Dog].__typename: String!\",",
      "2698:         ]",
      "2699:     }",
      "2701:     def \"query cannot exceed max depth\"() {",
      "2702:         String schema = \"\"\"",
      "2703:         type Query {",
      "2704:             animal: Animal",
      "2705:         }",
      "2706:         interface Animal {",
      "2707:             name: String",
      "2708:             friends: [Animal]",
      "2709:         }",
      "2710:         type Bird implements Animal {",
      "2711:             name: String",
      "2712:             friends: [Animal]",
      "2713:         }",
      "2714:         type Cat implements Animal {",
      "2715:             name: String",
      "2716:             friends: [Animal]",
      "2717:             breed: String",
      "2718:         }",
      "2719:         type Dog implements Animal {",
      "2720:             name: String",
      "2721:             breed: String",
      "2722:             friends: [Animal]",
      "2723:         }",
      "2724:         \"\"\"",
      "2725:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2730:         def animalSubselection = IntStream.rangeClosed(1, queryDepth - 2)",
      "2731:                 .mapToObj {",
      "2732:                     \"\"",
      "2733:                 }",
      "2734:                 .reduce(\"CHILD\") { acc, value ->",
      "2735:                     acc.replace(\"CHILD\", \"friends { CHILD }\")",
      "2736:                 }",
      "2737:                 .replace(\"CHILD\", \"name\")",
      "2740:         String query = \"\"\"",
      "2741:         {",
      "2742:             animal {",
      "2743:                 $animalSubselection",
      "2744:             }",
      "2745:         }",
      "2746:         \"\"\"",
      "2748:         def limit = 50",
      "2750:         assertValidQuery(graphQLSchema, query)",
      "2752:         Document document = TestUtil.parseQuery(query)",
      "2754:         when:",
      "2755:         Exception exception",
      "2756:         try {",
      "2757:             ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2758:                     graphQLSchema,",
      "2759:                     document,",
      "2760:                     null,",
      "2761:                     RawVariables.emptyVariables(),",
      "2762:                     ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(limit))",
      "2763:         } catch (Exception e) {",
      "2764:             exception = e",
      "2765:         }",
      "2767:         then:",
      "2768:         if (queryDepth > limit) {",
      "2769:             assert exception != null",
      "2770:             assert exception.message.contains(\"depth exceeded\")",
      "2771:             assert exception.message.contains(\"> 50\")",
      "2772:         } else {",
      "2773:             assert exception == null",
      "2774:         }",
      "2776:         where:",
      "2777:         _ | queryDepth",
      "2778:         _ | 49",
      "2779:         _ | 50",
      "2780:         _ | 51",
      "2781:     }",
      "2783:     def \"big query is fine as long as depth is under limit\"() {",
      "2784:         String schema = \"\"\"",
      "2785:         type Query {",
      "2786:             animal: Animal",
      "2787:         }",
      "2788:         interface Animal {",
      "2789:             name: String",
      "2790:             friends: [Friend]",
      "2791:         }",
      "2792:         union Pet = Dog | Cat",
      "2793:         type Friend {",
      "2794:             name: String",
      "2795:             isBirdOwner: Boolean",
      "2796:             isCatOwner: Boolean",
      "2797:             pets: [Pet]",
      "2798:         }",
      "2799:         type Bird implements Animal {",
      "2800:             name: String",
      "2801:             friends: [Friend]",
      "2802:         }",
      "2803:         type Cat implements Animal {",
      "2804:             name: String",
      "2805:             friends: [Friend]",
      "2806:             breed: String",
      "2807:         }",
      "2808:         type Dog implements Animal {",
      "2809:             name: String",
      "2810:             breed: String",
      "2811:             friends: [Friend]",
      "2812:         }",
      "2813:         \"\"\"",
      "2815:         def garbageFields = IntStream.range(0, 1000)",
      "2816:                 .mapToObj {",
      "2817:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2818:                 }",
      "2819:                 .collect(Collectors.joining(\"\\n\"))",
      "2821:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2823:         String query = \"\"\"",
      "2824:         {",
      "2825:             animal {",
      "2826:                 name",
      "2827:                 otherName: name",
      "2828:                 ... on Animal {",
      "2829:                     name",
      "2830:                 }",
      "2831:                 ... on Cat {",
      "2832:                     name",
      "2833:                     friends {",
      "2834:                         ... on Friend {",
      "2835:                             isCatOwner",
      "2836:                             pets {",
      "2837:                                 ... on Dog {",
      "2838:                                     name",
      "2839:                                 }",
      "2840:                             }",
      "2841:                         }",
      "2842:                     }",
      "2843:                 }",
      "2844:                 ... on Bird {",
      "2845:                     friends {",
      "2846:                         isBirdOwner",
      "2847:                     }",
      "2848:                     friends {",
      "2849:                         name",
      "2850:                         pets {",
      "2851:                             ... on Cat {",
      "2852:                                 breed",
      "2853:                             }",
      "2854:                         }",
      "2855:                     }",
      "2856:                 }",
      "2857:                 ... on Dog {",
      "2858:                     name",
      "2859:                 }",
      "2860:                 $garbageFields",
      "2861:             }",
      "2862:         }",
      "2863:         \"\"\"",
      "2865:         assertValidQuery(graphQLSchema, query)",
      "2867:         Document document = TestUtil.parseQuery(query)",
      "2869:         when:",
      "2870:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2871:                 graphQLSchema,",
      "2872:                 document,",
      "2873:                 null,",
      "2874:                 RawVariables.emptyVariables(),",
      "2875:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(5))",
      "2877:         then:",
      "2878:         noExceptionThrown()",
      "2879:     }",
      "2881:     def \"big query exceeding fields count\"() {",
      "2882:         String schema = \"\"\"",
      "2883:         type Query {",
      "2884:             animal: Animal",
      "2885:         }",
      "2886:         interface Animal {",
      "2887:             name: String",
      "2888:             friends: [Friend]",
      "2889:         }",
      "2890:         union Pet = Dog | Cat",
      "2891:         type Friend {",
      "2892:             name: String",
      "2893:             isBirdOwner: Boolean",
      "2894:             isCatOwner: Boolean",
      "2895:             pets: [Pet]",
      "2896:         }",
      "2897:         type Bird implements Animal {",
      "2898:             name: String",
      "2899:             friends: [Friend]",
      "2900:         }",
      "2901:         type Cat implements Animal {",
      "2902:             name: String",
      "2903:             friends: [Friend]",
      "2904:             breed: String",
      "2905:         }",
      "2906:         type Dog implements Animal {",
      "2907:             name: String",
      "2908:             breed: String",
      "2909:             friends: [Friend]",
      "2910:         }",
      "2911:         \"\"\"",
      "2913:         def garbageFields = IntStream.range(0, 1000)",
      "2914:                 .mapToObj {",
      "2915:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2916:                 }",
      "2917:                 .collect(Collectors.joining(\"\\n\"))",
      "2919:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2921:         String query = \"\"\"",
      "2922:         {",
      "2923:             animal {",
      "2924:                 name",
      "2925:                 otherName: name",
      "2926:                 ... on Animal {",
      "2927:                     name",
      "2928:                 }",
      "2929:                 ... on Cat {",
      "2930:                     name",
      "2931:                     friends {",
      "2932:                         ... on Friend {",
      "2933:                             isCatOwner",
      "2934:                             pets {",
      "2935:                                 ... on Dog {",
      "2936:                                     name",
      "2937:                                 }",
      "2938:                             }",
      "2939:                         }",
      "2940:                     }",
      "2941:                 }",
      "2942:                 ... on Bird {",
      "2943:                     friends {",
      "2944:                         isBirdOwner",
      "2945:                     }",
      "2946:                     friends {",
      "2947:                         name",
      "2948:                         pets {",
      "2949:                             ... on Cat {",
      "2950:                                 breed",
      "2951:                             }",
      "2952:                         }",
      "2953:                     }",
      "2954:                 }",
      "2955:                 ... on Dog {",
      "2956:                     name",
      "2957:                 }",
      "2958:                 $garbageFields",
      "2959:             }",
      "2960:         }",
      "2961:         \"\"\"",
      "2963:         assertValidQuery(graphQLSchema, query)",
      "2965:         Document document = TestUtil.parseQuery(query)",
      "2967:         when:",
      "2968:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2969:                 graphQLSchema,",
      "2970:                 document,",
      "2971:                 null,",
      "2972:                 RawVariables.emptyVariables(),",
      "2973:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2975:         then:",
      "2976:         def e = thrown(AbortExecutionException)",
      "2977:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2978:     }",
      "2980:     def \"small query exceeding fields count\"() {",
      "2981:         String schema = \"\"\"",
      "2982:         type Query {",
      "2983:             hello: String",
      "2984:         }",
      "2985:         \"\"\"",
      "2987:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2989:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2991:         assertValidQuery(graphQLSchema, query)",
      "2993:         Document document = TestUtil.parseQuery(query)",
      "2995:         when:",
      "2996:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2997:                 graphQLSchema,",
      "2998:                 document,",
      "2999:                 null,",
      "3000:                 RawVariables.emptyVariables(),",
      "3001:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3003:         then:",
      "3004:         def e = thrown(AbortExecutionException)",
      "3005:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3008:     }",
      "3010:     def \"query not exceeding fields count\"() {",
      "3011:         String schema = \"\"\"",
      "3012:         type Query {",
      "3013:             dogs: [Dog]",
      "3014:         }",
      "3015:         type Dog {",
      "3016:             name: String",
      "3017:             breed: String",
      "3018:         }",
      "3019:         \"\"\"",
      "3021:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3023:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3025:         assertValidQuery(graphQLSchema, query)",
      "3027:         Document document = TestUtil.parseQuery(query)",
      "3029:         when:",
      "3030:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3031:                 graphQLSchema,",
      "3032:                 document,",
      "3033:                 null,",
      "3034:                 RawVariables.emptyVariables(),",
      "3035:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3037:         then:",
      "3038:         notThrown(AbortExecutionException)",
      "3041:     }",
      "3043:     def \"query with meta fields exceeding fields count\"() {",
      "3044:         String schema = \"\"\"",
      "3045:         type Query {",
      "3046:             hello: String",
      "3047:         }",
      "3048:         \"\"\"",
      "3050:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3052:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3054:         assertValidQuery(graphQLSchema, query)",
      "3056:         Document document = TestUtil.parseQuery(query)",
      "3058:         when:",
      "3059:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3060:                 graphQLSchema,",
      "3061:                 document,",
      "3062:                 null,",
      "3063:                 RawVariables.emptyVariables(),",
      "3065:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(187))",
      "3066:         println result.normalizedFieldToMergedField.size()",
      "3068:         then:",
      "3069:         def e = thrown(AbortExecutionException)",
      "3071:         e.message == \"Maximum field count exceeded. 188 > 187\"",
      "3072:     }",
      "3074:     def \"can capture depth and field count\"() {",
      "3075:         String schema = \"\"\"",
      "3076:         type Query {",
      "3077:             foo: Foo",
      "3078:         }",
      "3080:         type Foo {",
      "3081:             stop : String",
      "3082:             bar : Bar",
      "3083:         }",
      "3085:         type Bar {",
      "3086:             stop : String",
      "3087:             foo : Foo",
      "3088:         }",
      "3089:         \"\"\"",
      "3091:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3093:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3095:         assertValidQuery(graphQLSchema, query)",
      "3097:         Document document = TestUtil.parseQuery(query)",
      "3099:         when:",
      "3100:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3101:                 graphQLSchema,",
      "3102:                 document,",
      "3103:                 null,",
      "3104:                 RawVariables.emptyVariables()",
      "3105:         )",
      "3107:         then:",
      "3108:         result.getOperationDepth() == 7",
      "3109:         result.getOperationFieldCount() == 8",
      "3110:     }",
      "3112:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "3113:             GraphQLSchema graphQLSchema,",
      "3114:             Document document,",
      "3115:             String operationName,",
      "3116:             CoercedVariables coercedVariableValues",
      "3117:     ) {",
      "3119:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3121:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
      "3122:     }",
      "3124:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
      "3125:             GraphQLSchema graphQLSchema,",
      "3126:             Document document,",
      "3127:             String operationName,",
      "3128:             RawVariables rawVariables",
      "3129:     ) {",
      "3131:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3133:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3134:                 graphQLSchema,",
      "3135:                 document,",
      "3136:                 operationName,",
      "3137:                 rawVariables,",
      "3138:                 options",
      "3139:         )",
      "3140:     }",
      "3141: }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
      "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package benchmark;",
      "7: import java.net.URL;",
      "8: import java.nio.charset.Charset;",
      "9: import java.util.concurrent.Callable;",
      "11: public class BenchmarkUtils {",
      "",
      "[Removed Lines]",
      "3: import com.google.common.io.Files;",
      "4: import graphql.Assert;",
      "6: import java.io.File;",
      "",
      "[Added Lines]",
      "3: import com.google.common.io.ByteStreams;",
      "5: import java.io.BufferedReader;",
      "6: import java.io.IOException;",
      "7: import java.io.InputStream;",
      "8: import java.io.InputStreamReader;",
      "11: import java.time.LocalDateTime;",
      "12: import java.time.format.DateTimeFormatter;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:             if (resource == null) {",
      "18:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
      "19:             }",
      "21:         });",
      "22:     }",
      "",
      "[Removed Lines]",
      "20:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "24:             byte[] bytes;",
      "25:             try (InputStream inputStream = resource.openStream()) {",
      "27:                 bytes = ByteStreams.toByteArray(inputStream);",
      "28:             }",
      "29:             return new String(bytes, Charset.defaultCharset());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "29:         }",
      "30:     }",
      "",
      "[Removed Lines]",
      "32: }",
      "",
      "[Added Lines]",
      "41:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
      "42:         int runForMillis = getRunForMillis();",
      "43:         if (runForMillis <= 0) {",
      "44:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
      "45:             return;",
      "46:         }",
      "47:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
      "48:         System.out.print(\"Get your tooling in order and press enter...\");",
      "49:         readLine();",
      "50:         System.out.print(\"Lets go...\\n\");",
      "51:         setup.run();",
      "53:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
      "54:         long now, then = System.currentTimeMillis();",
      "55:         do {",
      "56:             now = System.currentTimeMillis();",
      "57:             long msLeft = runForMillis - (now - then);",
      "58:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
      "59:             r.run();",
      "60:             now = System.currentTimeMillis();",
      "61:         } while ((now - then) < runForMillis);",
      "63:         tearDown.run();",
      "65:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
      "66:         System.exit(0);",
      "67:     }",
      "69:     private static void readLine() {",
      "70:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
      "71:         try {",
      "72:             br.readLine();",
      "73:         } catch (IOException e) {",
      "74:             throw new RuntimeException(e);",
      "75:         }",
      "76:     }",
      "78:     private static int getRunForMillis() {",
      "79:         String runFor = System.getenv(\"runForMillis\");",
      "80:         try {",
      "81:             return Integer.parseInt(runFor);",
      "82:         } catch (NumberFormatException e) {",
      "83:             return -1;",
      "84:         }",
      "85:     }",
      "87: }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "127f6a16bcc5f8635e09a9b9fed34026aa51f453",
      "candidate_info": {
        "commit_hash": "127f6a16bcc5f8635e09a9b9fed34026aa51f453",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/127f6a16bcc5f8635e09a9b9fed34026aa51f453",
        "files": [
          "src/test/java/benchmark/BenchmarkUtils.java",
          "src/test/java/benchmark/ComplexQueryBenchmark.java"
        ],
        "message": "Updated helper code for profiler attachment",
        "before_after_code_files": [
          "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
          "src/test/java/benchmark/ComplexQueryBenchmark.java||src/test/java/benchmark/ComplexQueryBenchmark.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java"
          ],
          "candidate": [
            "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
          "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package benchmark;",
          "3: import java.io.InputStream;",
          "4: import java.net.URL;",
          "5: import java.nio.charset.Charset;",
          "6: import java.util.concurrent.Callable;",
          "8: public class BenchmarkUtils {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import java.io.BufferedReader;",
          "4: import java.io.IOException;",
          "6: import java.io.InputStreamReader;",
          "9: import java.time.LocalDateTime;",
          "10: import java.time.format.DateTimeFormatter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         }",
          "31:     }",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
          "39:         int runForMillis = getRunForMillis();",
          "40:         if (runForMillis <= 0) {",
          "41:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
          "42:             return;",
          "43:         }",
          "44:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
          "45:         System.out.print(\"Get your tooling in order and press enter...\");",
          "46:         readLine();",
          "47:         System.out.print(\"Lets go...\\n\");",
          "48:         setup.run();",
          "50:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
          "51:         long now, then = System.currentTimeMillis();",
          "52:         do {",
          "53:             now = System.currentTimeMillis();",
          "54:             long msLeft = runForMillis - (now - then);",
          "55:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
          "56:             r.run();",
          "57:             now = System.currentTimeMillis();",
          "58:         } while ((now - then) < runForMillis);",
          "60:         tearDown.run();",
          "62:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
          "63:         System.exit(0);",
          "64:     }",
          "66:     private static void readLine() {",
          "67:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
          "68:         try {",
          "69:             br.readLine();",
          "70:         } catch (IOException e) {",
          "71:             throw new RuntimeException(e);",
          "72:         }",
          "73:     }",
          "75:     private static int getRunForMillis() {",
          "76:         String runFor = System.getenv(\"runForMillis\");",
          "77:         try {",
          "78:             return Integer.parseInt(runFor);",
          "79:         } catch (NumberFormatException e) {",
          "80:             return -1;",
          "81:         }",
          "82:     }",
          "",
          "---------------"
        ],
        "src/test/java/benchmark/ComplexQueryBenchmark.java||src/test/java/benchmark/ComplexQueryBenchmark.java": [
          "File: src/test/java/benchmark/ComplexQueryBenchmark.java -> src/test/java/benchmark/ComplexQueryBenchmark.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     @SuppressWarnings({\"ConstantValue\", \"LoopConditionNotUpdatedInsideLoop\"})",
          "106:     private static void runAtStartup() {",
          "119:         ComplexQueryBenchmark complexQueryBenchmark = new ComplexQueryBenchmark();",
          "141:     }",
          "152:     @SuppressWarnings(\"UnnecessaryLocalVariable\")",
          "153:     private Void runManyQueriesToCompletion() {",
          "",
          "[Removed Lines]",
          "108:         int runForMillis = getRunForMillis();",
          "110:         if (runForMillis <= 0) {",
          "111:             return;",
          "112:         }",
          "113:         System.out.printf(\"Running initial code before starting the benchmark - runForMillis=%d  \\n\", runForMillis);",
          "114:         System.out.print(\"Get your profiler in order and press enter...  \\n\");",
          "115:         readLine();",
          "116:         System.out.print(\"Lets go...\\n\");",
          "118:         long now, then = System.currentTimeMillis();",
          "120:         complexQueryBenchmark.setUp();",
          "121:         do {",
          "122:             System.out.printf(\"Running queries for %d millis....\\n\", System.currentTimeMillis() - then);",
          "123:             complexQueryBenchmark.howManyItems = 100;",
          "124:             complexQueryBenchmark.runManyQueriesToCompletion();",
          "125:             now = System.currentTimeMillis();",
          "126:         } while ((now - then) < runForMillis);",
          "127:         complexQueryBenchmark.tearDown();",
          "129:         System.out.printf(\"This took %d millis\\n\", System.currentTimeMillis() - then);",
          "130:         System.exit(0);",
          "132:     }",
          "134:     private static void readLine() {",
          "135:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
          "136:         try {",
          "137:             br.readLine();",
          "138:         } catch (IOException e) {",
          "139:             throw new RuntimeException(e);",
          "140:         }",
          "143:     private static int getRunForMillis() {",
          "144:         String runFor = System.getenv(\"runForMillis\");",
          "145:         try {",
          "146:             return Integer.parseInt(runFor);",
          "147:         } catch (NumberFormatException e) {",
          "148:             return -1;",
          "149:         }",
          "150:     }",
          "",
          "[Added Lines]",
          "109:         complexQueryBenchmark.howManyQueries = 5;",
          "110:         complexQueryBenchmark.howManyItems = 10;",
          "112:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
          "113:                 complexQueryBenchmark::setUp,",
          "114:                 complexQueryBenchmark::runManyQueriesToCompletion,",
          "115:                 complexQueryBenchmark::tearDown",
          "117:         );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab8c544f40eb3069982cbe94a292fadf1bf580f7",
      "candidate_info": {
        "commit_hash": "ab8c544f40eb3069982cbe94a292fadf1bf580f7",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/ab8c544f40eb3069982cbe94a292fadf1bf580f7",
        "files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ],
        "message": "some more ENF test + comments",
        "before_after_code_files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         ]",
          "711:     }",
          "713:     def \"query with interface in between\"() {",
          "714:         def graphQLSchema = schema(\"\"\"",
          "715:         type Query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     def \"query with fragment and type condition merged together 2\"() {",
          "714:         def graphQLSchema = TestUtil.schema(\"\"\"",
          "715:             type Query {",
          "716:                 pet : Pet",
          "717:             }",
          "718:             interface Pet {",
          "719:                 name : String",
          "720:             }",
          "722:             type Dog implements Pet {",
          "723:                 name : String",
          "724:             }",
          "726:             type Bird implements Pet {",
          "727:                 name : String",
          "728:             }",
          "730:             type Cat implements Pet {",
          "731:                 name : String",
          "732:             }",
          "733:         \"\"\")",
          "734:         def query = \"\"\"",
          "735:         {",
          "736:             pet {",
          "737:                 name",
          "738:                 ... on Dog {",
          "739:                     name",
          "740:                 }",
          "741:                 ... CatFrag",
          "742:             }",
          "743:          }",
          "745:         fragment CatFrag on Cat {",
          "746:             name",
          "747:         }",
          "748:             \"\"\"",
          "749:         assertValidQuery(graphQLSchema, query)",
          "751:         Document document = TestUtil.parseQuery(query)",
          "753:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "754:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "755:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "757:         expect:",
          "758:         printedTree == ['-Query.pet: Pet',",
          "759:                         '--[Bird, Cat, Dog].name: String'",
          "760:         ]",
          "761:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1689:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1690:         when:",
          "1691:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "1699:         then:",
          "1700:         tree.normalizedFieldToMergedField.size() == 5",
          "1701:         tree.fieldToNormalizedField.size() == 7",
          "1702:     }",
          "",
          "[Removed Lines]",
          "1692:         println String.join(\"\\n\", printTree(tree))",
          "",
          "[Added Lines]",
          "1743:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1747:         printedTree == ['-Query.pets: Pet',",
          "1748:                         '--friend: Cat.catFriend: CatFriend',",
          "1749:                         '---CatFriend.catFriendName: String',",
          "1750:                         '--friend: Dog.dogFriend: DogFriend',",
          "1751:                         '---DogFriend.dogFriendName: String']",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2494:         printedTree == ['Query.hello']",
          "2495:         tree.getTopLevelFields().get(0).getNormalizedArguments().isEmpty()",
          "2496:     }",
          "2497: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2556:     def \"reused field via fragments\"() {",
          "2557:         String schema = \"\"\"",
          "2558:         type Query {",
          "2559:           pet: Pet",
          "2560:         }",
          "2561:         type Pet {",
          "2562:           owner: Person",
          "2563:           emergencyContact: Person",
          "2564:         }",
          "2565:         type Person {",
          "2566:           name: String",
          "2567:         }",
          "2568:         \"\"\"",
          "2569:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2571:         String query = \"\"\"",
          "2572: { pet {",
          "2573:   owner { ...personName }",
          "2574:   emergencyContact { ...personName }",
          "2575: }}",
          "2576: fragment personName on Person {",
          "2577:   name",
          "2578: }",
          "2579:         \"\"\"",
          "2581:         assertValidQuery(graphQLSchema, query)",
          "2583:         Document document = TestUtil.parseQuery(query)",
          "2585:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2586:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2587:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2589:         expect:",
          "2590:         printedTree == ['-Query.pet: Pet',",
          "2591:                         '--Pet.owner: Person',",
          "2592:                         '---Person.name: String',",
          "2593:                         '--Pet.emergencyContact: Person',",
          "2594:                         '---Person.name: String'",
          "2595:         ]",
          "2597:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}