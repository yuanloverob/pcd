{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "693405bbeb5997648c8c5c401d6669b2b95623e0",
      "candidate_info": {
        "commit_hash": "693405bbeb5997648c8c5c401d6669b2b95623e0",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/693405bbeb5997648c8c5c401d6669b2b95623e0",
        "files": [
          "package.json",
          "packages/locale/lang/en-US.ts",
          "packages/locale/lang/es-ES.ts",
          "packages/locale/lang/hu-HU.ts",
          "packages/locale/lang/ja-JP.ts",
          "packages/locale/lang/ko-KR.ts",
          "packages/locale/lang/pt-BR.ts",
          "packages/locale/lang/ru-RU.ts",
          "packages/locale/lang/uk-UA.ts",
          "packages/locale/lang/vi-VN.ts",
          "packages/locale/lang/zh-CHT.ts",
          "packages/locale/lang/zh-CN.ts"
        ],
        "message": "releases 3.10.11",
        "before_after_code_files": [
          "packages/locale/lang/en-US.ts||packages/locale/lang/en-US.ts",
          "packages/locale/lang/es-ES.ts||packages/locale/lang/es-ES.ts",
          "packages/locale/lang/hu-HU.ts||packages/locale/lang/hu-HU.ts",
          "packages/locale/lang/ja-JP.ts||packages/locale/lang/ja-JP.ts",
          "packages/locale/lang/ko-KR.ts||packages/locale/lang/ko-KR.ts",
          "packages/locale/lang/pt-BR.ts||packages/locale/lang/pt-BR.ts",
          "packages/locale/lang/ru-RU.ts||packages/locale/lang/ru-RU.ts",
          "packages/locale/lang/uk-UA.ts||packages/locale/lang/uk-UA.ts",
          "packages/locale/lang/vi-VN.ts||packages/locale/lang/vi-VN.ts",
          "packages/locale/lang/zh-CHT.ts||packages/locale/lang/zh-CHT.ts",
          "packages/locale/lang/zh-CN.ts||packages/locale/lang/zh-CN.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/locale/lang/en-US.ts||packages/locale/lang/en-US.ts": [
          "File: packages/locale/lang/en-US.ts -> packages/locale/lang/en-US.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: 'The operation cannot be performed on merged cells',",
          "488:           multiErr: 'The operation cannot be performed on multiple selection areas',",
          "489:           extendErr: 'If the extended area contains merged cells, all merged cells need to be the same size',",
          "490:           pasteMultiErr: 'Cannot paste, copied area and pasted area of the same size are required to perform this operation',",
          "491:           cpInvalidErr: 'This operation cannot be performed because there are prohibited columns in the area you selected ({0})'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: 'Unable to operate the cells in the designated area.',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.ts||packages/locale/lang/es-ES.ts": [
          "File: packages/locale/lang/es-ES.ts -> packages/locale/lang/es-ES.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:         area: {",
          "491:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "492:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "493:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "494:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "495:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/hu-HU.ts||packages/locale/lang/hu-HU.ts": [
          "File: packages/locale/lang/hu-HU.ts -> packages/locale/lang/hu-HU.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: 'Ez a m\u0171velet nem hajthat\u00f3 v\u00e9gre egyes\u00edtett cell\u00e1kon',",
          "488:           multiErr: 'Ez a m\u0171velet nem hajthat\u00f3 v\u00e9gre t\u00f6bb kiv\u00e1laszt\u00e1si ter\u00fcleten',",
          "489:           extendErr: 'Ha a kiterjesztett tartom\u00e1ny egyes\u00edtett cell\u00e1kat tartalmaz, az \u00f6sszes egyes\u00edtett cell\u00e1nak azonos m\u00e9ret\u0171nek kell lennie',",
          "490:           pasteMultiErr: 'Nem lehet beilleszteni, a m\u00e1solt \u00e9s beillesztett ter\u00fcleteknek azonos m\u00e9ret\u0171nek kell lenni\u00fck a m\u0171velet v\u00e9grehajt\u00e1s\u00e1hoz',",
          "491:           cpInvalidErr: 'A m\u0171velet nem hajthat\u00f3 v\u00e9gre. Tiltott oszlopok ({0}) vannak a kiv\u00e1lasztott tartom\u00e1nyban.'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: 'Unable to operate the cells in the designated area.',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.ts||packages/locale/lang/ja-JP.ts": [
          "File: packages/locale/lang/ja-JP.ts -> packages/locale/lang/ja-JP.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u8a72\u5f53\u30bb\u30eb\u306b\u64cd\u4f5c\u3067\u304d\u307e\u305b\u3093',",
          "488:           multiErr: '\u8907\u6570\u306e\u9078\u629e\u7b87\u6240\u306b\u64cd\u4f5c\u3067\u304d\u307e\u305b\u3093',",
          "489:           extendErr: '\u7d50\u5408\u30bb\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u7d50\u5408\u30bb\u30eb\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093',",
          "490:           pasteMultiErr: '\u30da\u30fc\u30b9\u30c8\u3067\u304d\u307e\u305b\u3093\u3002\u540c\u3058\u30b5\u30fc\u30ba\u306e\u9818\u57df\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044',",
          "491:           cpInvalidErr: '\u64cd\u4f5c\u3067\u304d\u307e\u305b\u3093\u3002\u9078\u629e\u7981\u6b62\u306e\u5217\uff08{0}\uff09\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u307e\u3059'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ko-KR.ts||packages/locale/lang/ko-KR.ts": [
          "File: packages/locale/lang/ko-KR.ts -> packages/locale/lang/ko-KR.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "488:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "489:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "490:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "491:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.ts||packages/locale/lang/pt-BR.ts": [
          "File: packages/locale/lang/pt-BR.ts -> packages/locale/lang/pt-BR.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "488:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "489:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "490:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "491:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ru-RU.ts||packages/locale/lang/ru-RU.ts": [
          "File: packages/locale/lang/ru-RU.ts -> packages/locale/lang/ru-RU.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u042d\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u0435\u043b\u044c\u0437\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u044f\u0447\u0435\u0439\u043a\u0430\u043c\u0438.',",
          "488:           multiErr: '\u042d\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u0435\u043b\u044c\u0437\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u043c\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f.',",
          "489:           extendErr: '\u0415\u0441\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438, \u0432\u0441\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430.',",
          "490:           pasteMultiErr: '\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c. \u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430.',",
          "491:           cpInvalidErr: '\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e. \u0412 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c \u0432\u0430\u043c\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0435\u0441\u0442\u044c \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b ({0}).'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/uk-UA.ts||packages/locale/lang/uk-UA.ts": [
          "File: packages/locale/lang/uk-UA.ts -> packages/locale/lang/uk-UA.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "488:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "489:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "490:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "491:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/vi-VN.ts||packages/locale/lang/vi-VN.ts": [
          "File: packages/locale/lang/vi-VN.ts -> packages/locale/lang/vi-VN.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "488:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "489:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "490:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "491:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CHT.ts||packages/locale/lang/zh-CHT.ts": [
          "File: packages/locale/lang/zh-CHT.ts -> packages/locale/lang/zh-CHT.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u7121\u6cd5\u5c0d\u5408\u4f75\u5132\u5b58\u683c\u9032\u884c\u8a72\u64cd\u4f5c',",
          "488:           multiErr: '\u7121\u6cd5\u5c0d\u591a\u91cd\u9078\u64c7\u5340\u57df\u9032\u884c\u6b64\u64cd\u4f5c',",
          "489:           extendErr: '\u82e5\u5ef6\u4f38\u7684\u5340\u57df\u5305\u542b\u88ab\u5408\u4f75\u7684\u5132\u5b58\u683c\uff0c\u6240\u6709\u5408\u4f75\u7684\u5132\u5b58\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "490:           pasteMultiErr: '\u7121\u6cd5\u8cbc\u4e0a\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u8907\u88fd\u7684\u5340\u57df\u548c\u8cbc\u4e0a\u7684\u5340\u57df\u624d\u80fd\u57f7\u884c\u6b64\u64cd\u4f5c',",
          "491:           cpInvalidErr: '\u6b64\u64cd\u4f5c\u7121\u6cd5\u9032\u884c\uff0c\u60a8\u9078\u64c7\u7684\u5340\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.ts||packages/locale/lang/zh-CN.ts": [
          "File: packages/locale/lang/zh-CN.ts -> packages/locale/lang/zh-CN.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:         area: {",
          "487:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "488:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "489:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "490:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "491:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:           selectErr: '\u65e0\u6cd5\u64cd\u4f5c\u6307\u5b9a\u533a\u57df\u7684\u5355\u5143\u683c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa0f04f9d0f51cb67294c1845142bade131a3aa1",
      "candidate_info": {
        "commit_hash": "aa0f04f9d0f51cb67294c1845142bade131a3aa1",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/aa0f04f9d0f51cb67294c1845142bade131a3aa1",
        "files": [
          "package.json",
          "packages/table/src/methods.ts",
          "packages/table/src/util.ts"
        ],
        "message": "releases 3.9.8",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/util.ts||packages/table/src/util.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return { rowHeight: 0, visibleSize: 8 }",
          "134: }",
          "137:   for (let mcIndex = 0, len = list.length; mcIndex < len; mcIndex++) {",
          "138:     const mergeItem = list[mcIndex]",
          "139:     const { startIndex, endIndex } = offsetItem",
          "",
          "[Removed Lines]",
          "136: function calculateMergerOffserIndex (list: any, offsetItem: any, type: any) {",
          "",
          "[Added Lines]",
          "136: function calculateMergerOffsetIndex (list: any, offsetItem: any, type: any) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1384:   handleVirtualTreeToList () {",
          "1385:     const { treeOpts, treeConfig, treeExpandedMaps, afterTreeFullData, afterFullData } = this",
          "1386:     if (treeConfig && treeOpts.transform) {",
          "1387:       const fullData: any[] = []",
          "1388:       const expandMaps: any = {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1386:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1393:           expandMaps[rowid] = 1",
          "1394:           fullData.push(row)",
          "1395:         }",
          "1397:       this.afterFullData = fullData",
          "1398:       this.updateScrollYStatus(fullData)",
          "1399:       return fullData",
          "",
          "[Removed Lines]",
          "1396:       }, { children: treeOpts.mapChildrenField })",
          "",
          "[Added Lines]",
          "1397:       }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1409:     const { remote: allRemoteFilter, filterMethod: allFilterMethod } = filterOpts",
          "1410:     const { remote: allRemoteSort, sortMethod: allSortMethod, multiple: sortMultiple, chronological } = sortOpts",
          "1411:     const { transform } = treeOpts",
          "1412:     let tableData: any[] = []",
          "1413:     let tableTree: any[] = []",
          "1414:     const filterColumns: any[] = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1413:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1460:       }",
          "1461:       if (treeConfig && transform) {",
          "1464:         tableData = tableTree",
          "1465:       } else {",
          "1466:         tableData = treeConfig ? tableFullTreeData.filter(handleFilter) : tableFullData.filter(handleFilter)",
          "",
          "[Removed Lines]",
          "1463:         tableTree = XEUtils.searchTree(tableFullTreeData, handleFilter, { ...treeOpts, original: true })",
          "",
          "[Added Lines]",
          "1465:         tableTree = XEUtils.searchTree(tableFullTreeData, handleFilter, {",
          "1466:           original: true,",
          "1467:           isEvery: true,",
          "1468:           children: treeOpts.mapChildrenField,",
          "1469:           mapChildren: childrenField",
          "1470:         })",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1469:     } else {",
          "1470:       if (treeConfig && transform) {",
          "1473:         tableData = tableTree",
          "1474:       } else {",
          "1475:         tableData = treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0)",
          "",
          "[Removed Lines]",
          "1472:         tableTree = XEUtils.searchTree(tableFullTreeData, () => true, { ...treeOpts, original: true })",
          "",
          "[Added Lines]",
          "1479:         tableTree = XEUtils.searchTree(tableFullTreeData, () => true, {",
          "1480:           original: true,",
          "1481:           isEvery: true,",
          "1482:           children: treeOpts.mapChildrenField,",
          "1483:           mapChildren: childrenField",
          "1484:         })",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5135:       startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),",
          "5136:       endIndex: toVisibleIndex + visibleSize + offsetSize",
          "5137:     }",
          "5139:     const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem",
          "5140:     if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {",
          "5141:       if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {",
          "",
          "[Removed Lines]",
          "5138:     calculateMergerOffserIndex(mergeList.concat(mergeFooterList), offsetItem, 'col')",
          "",
          "[Added Lines]",
          "5150:     calculateMergerOffsetIndex(mergeList.concat(mergeFooterList), offsetItem, 'col')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5175:       startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),",
          "5176:       endIndex: toVisibleIndex + visibleSize + offsetSize",
          "5177:     }",
          "5179:     const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem",
          "5180:     if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {",
          "5181:       if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {",
          "",
          "[Removed Lines]",
          "5178:     calculateMergerOffserIndex(mergeList, offsetItem, 'row')",
          "",
          "[Added Lines]",
          "5190:     calculateMergerOffsetIndex(mergeList, offsetItem, 'row')",
          "",
          "---------------"
        ],
        "packages/table/src/util.ts||packages/table/src/util.ts": [
          "File: packages/table/src/util.ts -> packages/table/src/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:   return Promise.resolve()",
          "375: }",
          "379:   const bodyElem = tableBody ? tableBody.$el : null",
          "380:   if (bodyElem) {",
          "381:     const tdElem = bodyElem.querySelector(`.${column.id}`)",
          "382:     if (tdElem) {",
          "385:       const tdOffsetLeft = tdElem.offsetLeft + (tdElem.offsetParent ? tdElem.offsetParent.offsetLeft : 0)",
          "386:       const tdWidth = tdElem.clientWidth",
          "394:       }",
          "395:     } else {",
          "399:         let scrollLeft = 0",
          "400:         for (let index = 0; index < visibleColumn.length; index++) {",
          "401:           if (visibleColumn[index] === column) {",
          "",
          "[Removed Lines]",
          "377: export function colToVisible ($xetable: any, column: any) {",
          "378:   const { tableBody } = $xetable.$refs",
          "383:       const bodyWidth = bodyElem.clientWidth",
          "384:       const bodySrcollLeft = bodyElem.scrollLeft",
          "388:       if (tdOffsetLeft < bodySrcollLeft || tdOffsetLeft > bodySrcollLeft + bodyWidth) {",
          "390:         return $xetable.scrollTo(tdOffsetLeft)",
          "391:       } else if (tdOffsetLeft + tdWidth >= bodyWidth + bodySrcollLeft) {",
          "393:         return $xetable.scrollTo(bodySrcollLeft + tdWidth)",
          "397:       if ($xetable.scrollXLoad) {",
          "398:         const visibleColumn = $xetable.visibleColumn",
          "",
          "[Added Lines]",
          "377: export function colToVisible ($xeTable: any, column: any) {",
          "378:   const { columnStore, scrollXLoad, visibleColumn } = $xeTable",
          "379:   const { tableBody } = $xeTable.$refs",
          "380:   const { leftList, rightList } = columnStore",
          "382:   let offsetFixedLeft = 0",
          "383:   leftList.forEach((item: any) => {",
          "384:     offsetFixedLeft += item.renderWidth",
          "385:   })",
          "386:   let offsetFixedRight = 0",
          "387:   rightList.forEach((item: any) => {",
          "388:     offsetFixedRight += item.renderWidth",
          "389:   })",
          "391:     const bodyWidth = bodyElem.clientWidth",
          "392:     const bodySrcollLeft = bodyElem.scrollLeft",
          "398:       if (tdOffsetLeft < (bodySrcollLeft + offsetFixedLeft)) {",
          "399:         return $xeTable.scrollTo(tdOffsetLeft - offsetFixedLeft - 1)",
          "400:       } else if ((tdOffsetLeft + tdWidth) >= (bodyWidth + bodySrcollLeft - offsetFixedRight)) {",
          "401:         return $xeTable.scrollTo(tdOffsetLeft - offsetFixedLeft - offsetFixedRight + 1)",
          "405:       if (scrollXLoad) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:           }",
          "404:           scrollLeft += visibleColumn[index].renderWidth",
          "405:         }",
          "407:       }",
          "408:     }",
          "409:   }",
          "",
          "[Removed Lines]",
          "406:         return $xetable.scrollTo(scrollLeft)",
          "",
          "[Added Lines]",
          "413:         if (scrollLeft < bodySrcollLeft) {",
          "414:           return $xeTable.scrollTo(scrollLeft - offsetFixedLeft - 1)",
          "415:         }",
          "416:         return $xeTable.scrollTo(scrollLeft - offsetFixedLeft - offsetFixedRight + 1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a396faa68fb19cda0f71400509a970c017b8d05e",
      "candidate_info": {
        "commit_hash": "a396faa68fb19cda0f71400509a970c017b8d05e",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/a396faa68fb19cda0f71400509a970c017b8d05e",
        "files": [
          "package.json",
          "packages/custom/src/panel.js",
          "packages/table/src/methods.js"
        ],
        "message": "\u4fee\u590d\u81ea\u5b9a\u4e49\u5217\u8bbe\u7f6e\u7f13\u5b58\u6392\u5e8f\u72b6\u6001\u65e0\u6548\u95ee\u9898",
        "before_after_code_files": [
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:       removeClass(trEl, 'active--drag-target')",
          "587:       removeClass(trEl, 'active--drag-origin')",
          "592:     },",
          "593:     sortDragoverEvent  (evnt) {",
          "594:       const { $xetable, prevDropTrEl } = this",
          "",
          "[Removed Lines]",
          "589:       customColumnList.forEach((column, index) => {",
          "590:         column.renderSortNumber = index",
          "591:       })",
          "",
          "[Added Lines]",
          "589:       this.updateColumnSort()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:         this.prevDropTrEl = trEl",
          "609:       }",
          "610:       updateDropHint(this, evnt)",
          "611:     }",
          "612:   }",
          "613: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609:     },",
          "610:     updateColumnSort () {",
          "611:       const { $xetable } = this",
          "612:       const { customColumnList } = $xetable",
          "614:       customColumnList.forEach((column, index) => {",
          "615:         const sortIndex = index + 1",
          "616:         column.renderSortNumber = sortIndex",
          "617:       })",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:       return this.loadColumn(columns)",
          "568:     })",
          "569:   },",
          "570:   handleColumn (collectColumn) {",
          "571:     this.collectColumn = collectColumn",
          "572:     const tableFullColumn = getColumnList(collectColumn)",
          "573:     this.tableFullColumn = tableFullColumn",
          "575:     this.restoreCustomStorage()",
          "576:     this.parseColumns().then(() => {",
          "577:       if (this.scrollXLoad) {",
          "578:         this.loadScrollXData(true)",
          "",
          "[Removed Lines]",
          "574:     this.cacheColumnMap(true)",
          "",
          "[Added Lines]",
          "570:   initColumnSort  () {",
          "571:     const { collectColumn } = this",
          "572:     collectColumn.forEach((column, index) => {",
          "573:       const sortIndex = index + 1",
          "574:       column.sortNumber = sortIndex",
          "575:       column.renderSortNumber = sortIndex",
          "576:     })",
          "577:   },",
          "582:     this.initColumnSort()",
          "584:     this.cacheColumnMap()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "703:     const { tableFullColumn, collectColumn, fullColumnMap, showOverflow, columnOpts, rowOpts } = this",
          "704:     const fullColumnIdData = this.fullColumnIdData = {}",
          "705:     const fullColumnFieldData = this.fullColumnFieldData = {}",
          "",
          "[Removed Lines]",
          "702:   cacheColumnMap (isInit) {",
          "",
          "[Added Lines]",
          "711:   cacheColumnMap () {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:       if (fullColumnIdData[colid]) {",
          "796:         errLog('vxe.error.colRepet', ['colId', colid])",
          "797:       }",
          "801:       fullColumnIdData[colid] = rest",
          "802:       fullColumnMap.set(column, rest)",
          "803:     }",
          "",
          "[Removed Lines]",
          "798:       if (isInit) {",
          "799:         column.sortNumber = index",
          "800:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1575:     if (opts.resizable) {",
          "1576:       this.saveCustomResizable(true)",
          "1577:     }",
          "1578:     if (opts.fixed) {",
          "1579:       this.saveCustomFixed()",
          "1580:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584:     if (opts.sort) {",
          "1585:       this.saveCustomSort(true)",
          "1586:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1592:       }",
          "1593:     }",
          "1594:     this.saveCustomVisible()",
          "1595:     this.analyColumnWidth()",
          "1596:     return this.refreshColumn(true)",
          "1597:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1604:     this.saveCustomSort()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1601:   restoreCustomStorage () {",
          "1603:     const { storage } = customOpts",
          "1604:     const isAllStorage = storage === true",
          "1605:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "",
          "[Removed Lines]",
          "1602:     const { id, collectColumn, customConfig, customOpts } = this",
          "",
          "[Added Lines]",
          "1612:     const { id, customConfig, customOpts } = this",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1637:         }",
          "1638:       }",
          "1640:       if (isCustomSort) {",
          "1641:         const columnSortStorage = getCustomStorageMap(sortStorageKey)[id]",
          "1642:         if (columnSortStorage) {",
          "1646:             if (customMap[colKey]) {",
          "1648:             } else {",
          "1650:             }",
          "1651:           })",
          "1652:         }",
          "",
          "[Removed Lines]",
          "1643:           const colOrderSeqs = columnSortStorage.split(',')",
          "1644:           colOrderSeqs.forEach((orderConf) => {",
          "1645:             const [colKey, sortNumber] = orderConf.split('|')",
          "1647:               customMap[colKey].sortNumber = sortNumber",
          "1649:               customMap[colKey] = { sortNumber }",
          "",
          "[Added Lines]",
          "1650:       let hasCustomSort = false",
          "1654:           XEUtils.each(columnSortStorage, (renderSortNumber, colKey) => {",
          "1656:               customMap[colKey].renderSortNumber = renderSortNumber",
          "1658:               customMap[colKey] = { renderSortNumber }",
          "1659:             }",
          "1660:             if (!hasCustomSort) {",
          "1661:               hasCustomSort = true",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1673:           })",
          "1674:         }",
          "1675:       }",
          "1676:       const keyMap = {}",
          "1677:       XEUtils.eachTree(collectColumn, column => {",
          "1678:         const colKey = column.getKey()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1688:       let { collectColumn } = this",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1680:           keyMap[colKey] = column",
          "1681:         }",
          "1682:       })",
          "1684:         const column = keyMap[field]",
          "1685:         if (column) {",
          "1686:           if (XEUtils.isNumber(resizeWidth)) {",
          "",
          "[Removed Lines]",
          "1683:       XEUtils.each(customMap, ({ visible, resizeWidth, fixed, sortNumber }, field) => {",
          "",
          "[Added Lines]",
          "1696:       XEUtils.each(customMap, ({ visible, resizeWidth, fixed, renderSortNumber }, field) => {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1692:           if (fixed) {",
          "1693:             column.fixed = fixed",
          "1694:           }",
          "1697:           }",
          "1698:         }",
          "1699:       })",
          "1700:     }",
          "1701:   },",
          "1702:   saveCustomFixed () {",
          "",
          "[Removed Lines]",
          "1695:           if (sortNumber) {",
          "1696:             column.colSeq = Number(sortNumber)",
          "",
          "[Added Lines]",
          "1708:           if (renderSortNumber) {",
          "1709:             column.renderSortNumber = Number(renderSortNumber)",
          "1714:       if (hasCustomSort) {",
          "1715:         collectColumn = XEUtils.orderBy(collectColumn, 'renderSortNumber')",
          "1716:         this.collectColumn = collectColumn",
          "1717:         this.tableFullColumn = getColumnList(collectColumn)",
          "1718:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1785:       localStorage.setItem(resizableStorageKey, XEUtils.toJSONString(columnWidthStorageMap))",
          "1786:     }",
          "1787:   },",
          "1788:   handleUpdateDataQueue () {",
          "1789:     this.upDataFlag++",
          "1790:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1807:   saveCustomSort (isReset) {",
          "1808:     const { id, collectColumn, customConfig, customOpts } = this",
          "1809:     const { storage } = customOpts",
          "1810:     const isAllStorage = storage === true",
          "1811:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1812:     const isSort = isAllStorage || storageOpts.sort",
          "1813:     if (customConfig && isSort) {",
          "1814:       const columnSortStorageMap = getCustomStorageMap(sortStorageKey)",
          "1815:       let columnWidthStorage",
          "1816:       if (!id) {",
          "1817:         errLog('vxe.error.reqProp', ['id'])",
          "1818:         return",
          "1819:       }",
          "1820:       if (!isReset) {",
          "1821:         columnWidthStorage = XEUtils.isPlainObject(columnSortStorageMap[id]) ? columnSortStorageMap[id] : {}",
          "1823:         collectColumn.forEach(column => {",
          "1824:           if (column.sortNumber !== column.renderSortNumber) {",
          "1825:             const colKey = column.getKey()",
          "1826:             if (colKey) {",
          "1827:               columnWidthStorage[colKey] = column.renderSortNumber",
          "1828:             }",
          "1829:           }",
          "1830:         })",
          "1831:       }",
          "1832:       columnSortStorageMap[id] = XEUtils.isEmpty(columnWidthStorage) ? undefined : columnWidthStorage",
          "1833:       localStorage.setItem(sortStorageKey, XEUtils.toJSONString(columnSortStorageMap))",
          "1834:     }",
          "1835:   },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "341a867e2484e1066d6a685527c173c4e3db7c12",
      "candidate_info": {
        "commit_hash": "341a867e2484e1066d6a685527c173c4e3db7c12",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/341a867e2484e1066d6a685527c173c4e3db7c12",
        "files": [
          "package.json",
          "packages/table/index.ts",
          "packages/table/render/index.ts",
          "packages/ui/src/vn.ts"
        ],
        "message": "\u91cd\u6784v3\u7248\u672c",
        "before_after_code_files": [
          "packages/table/index.ts||packages/table/index.ts",
          "packages/table/render/index.ts||packages/table/render/index.ts",
          "packages/ui/src/vn.ts||packages/ui/src/vn.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/index.ts||packages/table/index.ts": [
          "File: packages/table/index.ts -> packages/table/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { VxeUI } from '../ui'",
          "3: import VxeTableComponent from './src/table'",
          "4: import './render'",
          "6: export const VxeTable = Object.assign({}, VxeTableComponent, {",
          "7:   install (app: VueConstructor) {",
          "8:     app.component(VxeTableComponent.name as string, VxeTableComponent)",
          "9:   }",
          "10: })",
          "16: VxeUI.component(VxeTableComponent)",
          "18: export const Table = VxeTable",
          "",
          "[Removed Lines]",
          "1: import { VueConstructor } from 'vue'",
          "12: if (VxeUI.dynamicApp) {",
          "13:   VxeUI.dynamicApp.component(VxeTableComponent.name as string, VxeTableComponent)",
          "14: }",
          "",
          "[Added Lines]",
          "1: import Vue, { VueConstructor } from 'vue'",
          "6: let isReg = false",
          "10:     if (typeof window !== 'undefined' && (window as any).VXETableMixin) {",
          "11:       VxeTableComponent.mixins.push((window as any).VXETableMixin)",
          "12:       delete (window as any).VXETableMixin",
          "13:     }",
          "15:     if (typeof window !== 'undefined' && (window as any).VxeTableExtendCellArea && (window as any).VxeTableExtendCellArea.init) {",
          "16:       (window as any).VxeTableExtendCellArea.init(VxeUI)",
          "17:       delete (window as any).VxeTableExtendCellArea",
          "18:       delete (window as any).VXETablePro",
          "19:     } else if (typeof window !== 'undefined' && (window as any).VXETablePro && (window as any).VXETablePro.init) {",
          "20:       (window as any).VXETablePro.init(VxeUI)",
          "21:       delete (window as any).VXETablePro",
          "22:     }",
          "23:     if (!Vue.prototype.$vxe) {",
          "24:       Vue.prototype.$vxe = { t: VxeUI.t, _t: VxeUI._t }",
          "25:     } else {",
          "26:       Vue.prototype.$vxe.t = VxeUI.t",
          "27:       Vue.prototype.$vxe._t = VxeUI._t",
          "28:     }",
          "29:     if (!isReg) {",
          "30:       isReg = true",
          "31:       if (VxeUI.dynamicApp) {",
          "32:         VxeUI.dynamicApp.component(VxeTableComponent.name as string, VxeTableComponent)",
          "33:       }",
          "34:     }",
          "",
          "---------------"
        ],
        "packages/table/render/index.ts||packages/table/render/index.ts": [
          "File: packages/table/render/index.ts -> packages/table/render/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { VxeUI } from '../../ui'",
          "4: import { getCellValue, setCellValue } from '../src/util'",
          "5: import { getFuncText, formatText, isEmptyValue } from '../../ui/src/utils'",
          "7: import { errLog } from '../../ui/src/log'",
          "9: import type { VxeGlobalRendererHandles, VxeColumnPropTypes } from '../../../types'",
          "11: const { getConfig, renderer, getI18n } = VxeUI",
          "15: const defaultCompProps = { transfer: true }",
          "40: function parseDate (value: any, props: any) {",
          "41:   return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value",
          "42: }",
          "",
          "[Removed Lines]",
          "6: import { getOnName } from '../../ui/src/vn'",
          "13: const componentDefaultModelProp = 'modelValue'",
          "17: function getModelEvent (renderOpts: any) {",
          "18:   switch (renderOpts.name) {",
          "19:     case 'input':",
          "20:     case 'textarea':",
          "21:       return 'input'",
          "22:   }",
          "23:   return 'update:modelValue'",
          "24: }",
          "26: function getChangeEvent (renderOpts: any) {",
          "27:   switch (renderOpts.name) {",
          "28:     case 'input':",
          "29:     case 'textarea':",
          "30:     case 'VxeInput':",
          "31:     case 'VxeNumberInput':",
          "32:     case 'VxeTextarea':",
          "33:     case '$input':",
          "34:     case '$textarea':",
          "35:       return 'input'",
          "36:   }",
          "37:   return 'change'",
          "38: }",
          "",
          "[Added Lines]",
          "6: import { getOnName, getModelEvent, getChangeEvent } from '../../ui/src/vn'",
          "13: const componentDefaultModelProp = 'value'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   const { events } = renderOpts",
          "137:   const modelEvent = getModelEvent(renderOpts)",
          "138:   const changeEvent = getChangeEvent(renderOpts)",
          "",
          "[Removed Lines]",
          "135: function getElementOns (renderOpts: any, params: any, modelFunc?: any, changeFunc?: any) {",
          "",
          "[Added Lines]",
          "112: function getNativeElementOns (renderOpts: any, params: any, modelFunc?: any, changeFunc?: any) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245: function getNativeEditOns (renderOpts: any, params: any) {",
          "246:   const { $table, row, column } = params",
          "247:   const { model } = column",
          "250:     const cellValue = evnt.target.value",
          "251:     if (isImmediateCell(renderOpts, params)) {",
          "",
          "[Removed Lines]",
          "248:   return getElementOns(renderOpts, params, (evnt: any) => {",
          "",
          "[Added Lines]",
          "225:   return getNativeElementOns(renderOpts, params, (evnt: any) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262: }",
          "264: function getNativeFilterOns (renderOpts: any, params: any, option: any) {",
          "267:     option.data = evnt.target.value",
          "268:   }, () => {",
          "",
          "[Removed Lines]",
          "265:   return getElementOns(renderOpts, params, (evnt: any) => {",
          "",
          "[Added Lines]",
          "242:   return getNativeElementOns(renderOpts, params, (evnt: any) => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "368:   return optionGroups.map((group: any, gIndex: any) => {",
          "369:     return h('optgroup', {",
          "370:       key: gIndex,",
          "372:         label: group[groupLabel]",
          "373:       }",
          "374:     }, renderOptionsMethods(h, group[groupOptions], renderOpts, params))",
          "",
          "[Removed Lines]",
          "371:       props: {",
          "",
          "[Added Lines]",
          "348:       attrs: {",
          "",
          "---------------"
        ],
        "packages/ui/src/vn.ts||packages/ui/src/vn.ts": [
          "File: packages/ui/src/vn.ts -> packages/ui/src/vn.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import type { VxeComponentSlotType } from '../../../types'",
          "5: export function getOnName (type: string) {",
          "7: }",
          "9: export function getSlotVNs (vns: VxeComponentSlotType | VxeComponentSlotType[]) {",
          "",
          "[Removed Lines]",
          "6:   return 'on' + type.substring(0, 1).toLocaleUpperCase() + type.substring(1)",
          "",
          "[Added Lines]",
          "6:   return type",
          "7: }",
          "9: export function getModelEvent (renderOpts: any) {",
          "10:   switch (renderOpts.name) {",
          "11:     case 'input':",
          "12:     case 'textarea':",
          "13:       return 'input'",
          "14:     case 'select':",
          "15:       return 'change'",
          "16:   }",
          "17:   return 'modelValue'",
          "18: }",
          "20: export function getChangeEvent (renderOpts: any) {",
          "21:   switch (renderOpts.name) {",
          "22:     case 'input':",
          "23:     case 'textarea':",
          "24:     case 'VxeInput':",
          "25:     case 'VxeNumberInput':",
          "26:     case 'VxeTextarea':",
          "27:     case '$input':",
          "28:     case '$textarea':",
          "29:       return 'input'",
          "30:   }",
          "31:   return 'change'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe221b25d7a6bf49fe7157b3270a8fd9157a95bd",
      "candidate_info": {
        "commit_hash": "fe221b25d7a6bf49fe7157b3270a8fd9157a95bd",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/fe221b25d7a6bf49fe7157b3270a8fd9157a95bd",
        "files": [
          "package.json",
          "packages/grid/src/grid.ts",
          "packages/table/src/table.ts",
          "packages/toolbar/src/toolbar.ts"
        ],
        "message": "\u4f18\u5316\u9ed8\u8ba4\u53c2\u6570",
        "before_after_code_files": [
          "packages/grid/src/grid.ts||packages/grid/src/grid.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/toolbar/src/toolbar.ts||packages/toolbar/src/toolbar.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/grid/src/grid.ts||packages/grid/src/grid.ts": [
          "File: packages/grid/src/grid.ts -> packages/grid/src/grid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:       return this.computeProxyOpts",
          "405:     },",
          "406:     computeProxyOpts () {",
          "408:     },",
          "409:     pagerOpts () {",
          "410:       return this.computePagerOpts",
          "411:     },",
          "412:     computePagerOpts () {",
          "414:     },",
          "415:     formOpts () {",
          "416:       return this.computeFormOpts",
          "417:     },",
          "418:     computeFormOpts () {",
          "420:     },",
          "421:     toolbarOpts () {",
          "422:       return this.computeToolbarOpts",
          "423:     },",
          "424:     computeToolbarOpts () {",
          "426:     },",
          "427:     zoomOpts () {",
          "428:       return this.computeZoomOpts",
          "429:     },",
          "430:     computeZoomOpts () {",
          "432:     },",
          "433:     renderStyle () {",
          "434:       return this.isZMax ? { zIndex: this.tZindex } : null",
          "",
          "[Removed Lines]",
          "407:       return XEUtils.merge({}, getConfig().grid.proxyConfig, this.proxyConfig)",
          "413:       return Object.assign({}, getConfig().grid.pagerConfig, this.pagerConfig)",
          "419:       return Object.assign({}, getConfig().grid.formConfig, this.formConfig)",
          "425:       return Object.assign({}, getConfig().grid.toolbarConfig, this.toolbarConfig || this.toolbar)",
          "431:       return Object.assign({}, getConfig().grid.zoomConfig, this.zoomConfig)",
          "",
          "[Added Lines]",
          "407:       return XEUtils.merge({}, XEUtils.clone(getConfig().grid.proxyConfig, true), this.proxyConfig)",
          "413:       return Object.assign({}, XEUtils.clone(getConfig().grid.pagerConfig, true), this.pagerConfig)",
          "419:       return Object.assign({}, XEUtils.clone(getConfig().grid.formConfig, true), this.formConfig)",
          "425:       return Object.assign({}, XEUtils.clone(getConfig().grid.toolbarConfig, true), this.toolbarConfig || this.toolbar)",
          "431:       return Object.assign({}, XEUtils.clone(getConfig().grid.zoomConfig, true), this.zoomConfig)",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:       return this.computeValidOpts",
          "368:     },",
          "369:     computeValidOpts () {",
          "371:     },",
          "372:     sXOpts () {",
          "373:       return this.computeSXOpts",
          "374:     },",
          "375:     computeSXOpts () {",
          "377:     },",
          "378:     sYOpts () {",
          "379:       return this.computeSYOpts",
          "380:     },",
          "381:     computeSYOpts () {",
          "383:     },",
          "384:     rowHeightMaps () {",
          "385:       return {",
          "",
          "[Removed Lines]",
          "370:       return Object.assign({ message: 'default' }, getConfig().table.validConfig, this.validConfig)",
          "376:       return Object.assign({}, getConfig().table.scrollX, this.scrollX)",
          "382:       return Object.assign({}, getConfig().table.scrollY, this.scrollY)",
          "",
          "[Added Lines]",
          "370:       return Object.assign({ message: 'default' }, XEUtils.clone(getConfig().table.validConfig, true), this.validConfig)",
          "376:       return Object.assign({}, XEUtils.clone(getConfig().table.scrollX, true), this.scrollX)",
          "382:       return Object.assign({}, XEUtils.clone(getConfig().table.scrollY, true), this.scrollY)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:       return this.computeColumnOpts",
          "394:     },",
          "395:     computeColumnOpts () {",
          "397:     },",
          "398:     rowOpts () {",
          "399:       return this.computeRowOpts",
          "400:     },",
          "401:     computeRowOpts () {",
          "403:     },",
          "404:     resizeOpts () {",
          "405:       return this.computeResizeOpts",
          "406:     },",
          "407:     computeResizeOpts () {",
          "409:     },",
          "410:     resizableOpts () {",
          "411:       return this.computeResizableOpts",
          "412:     },",
          "413:     computeResizableOpts () {",
          "415:     },",
          "416:     seqOpts () {",
          "417:       return this.computeSeqOpts",
          "418:     },",
          "419:     computeSeqOpts () {",
          "421:     },",
          "422:     radioOpts () {",
          "423:       return this.computeRadioOpts",
          "424:     },",
          "425:     computeRadioOpts () {",
          "427:     },",
          "428:     checkboxOpts () {",
          "429:       return this.computeCheckboxOpts",
          "430:     },",
          "431:     computeCheckboxOpts () {",
          "433:     },",
          "434:     tooltipOpts () {",
          "435:       return this.computeTooltipOpts",
          "436:     },",
          "437:     computeTooltipOpts () {",
          "439:     },",
          "440:     tipConfig () {",
          "441:       return { ...this.tooltipOpts }",
          "",
          "[Removed Lines]",
          "396:       return Object.assign({}, getConfig().table.columnConfig, this.columnConfig)",
          "402:       return Object.assign({}, getConfig().table.rowConfig, this.rowConfig)",
          "408:       return Object.assign({}, getConfig().table.resizeConfig, this.resizeConfig)",
          "414:       return Object.assign({}, getConfig().table.resizableConfig, this.resizableConfig)",
          "420:       return Object.assign({ startIndex: 0 }, getConfig().table.seqConfig, this.seqConfig)",
          "426:       return Object.assign({}, getConfig().table.radioConfig, this.radioConfig)",
          "432:       return Object.assign({}, getConfig().table.checkboxConfig, this.checkboxConfig)",
          "438:       return Object.assign({}, getConfig().tooltip, getConfig().table.tooltipConfig, this.tooltipConfig)",
          "",
          "[Added Lines]",
          "396:       return Object.assign({}, XEUtils.clone(getConfig().table.columnConfig, true), this.columnConfig)",
          "402:       return Object.assign({}, XEUtils.clone(getConfig().table.rowConfig, true), this.rowConfig)",
          "408:       return Object.assign({}, XEUtils.clone(getConfig().table.resizeConfig, true), this.resizeConfig)",
          "414:       return Object.assign({}, XEUtils.clone(getConfig().table.resizableConfig, true), this.resizableConfig)",
          "420:       return Object.assign({ startIndex: 0 }, XEUtils.clone(getConfig().table.seqConfig, true), this.seqConfig)",
          "426:       return Object.assign({}, XEUtils.clone(getConfig().table.radioConfig, true), this.radioConfig)",
          "432:       return Object.assign({}, XEUtils.clone(getConfig().table.checkboxConfig, true), this.checkboxConfig)",
          "438:       return Object.assign({}, XEUtils.clone(getConfig().tooltip, true), XEUtils.clone(getConfig().table.tooltipConfig, true), this.tooltipConfig)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:       return this.computeEditOpts",
          "448:     },",
          "449:     computeEditOpts () {",
          "451:     },",
          "452:     sortOpts () {",
          "453:       return this.computeSortOpts",
          "454:     },",
          "455:     computeSortOpts () {",
          "457:     },",
          "458:     filterOpts () {",
          "459:       return this.computeFilterOpts",
          "460:     },",
          "461:     computeFilterOpts () {",
          "463:     },",
          "464:     mouseOpts () {",
          "465:       return this.computeMouseOpts",
          "466:     },",
          "467:     computeMouseOpts () {",
          "469:     },",
          "470:     areaOpts () {",
          "471:       return this.computeAreaOpts",
          "472:     },",
          "473:     computeAreaOpts () {",
          "475:     },",
          "476:     keyboardOpts () {",
          "477:       return this.computeKeyboardOpts",
          "478:     },",
          "479:     computeKeyboardOpts () {",
          "481:     },",
          "482:     clipOpts () {",
          "483:       return this.computeClipOpts",
          "484:     },",
          "485:     computeClipOpts () {",
          "487:     },",
          "488:     fnrOpts () {",
          "489:       return this.computeFNROpts",
          "490:     },",
          "491:     computeFNROpts () {",
          "493:     },",
          "494:     headerCtxMenu () {",
          "495:       const headerOpts = this.ctxMenuOpts.header",
          "",
          "[Removed Lines]",
          "450:       return Object.assign({}, getConfig().table.editConfig, this.editConfig)",
          "456:       return Object.assign({ orders: ['asc', 'desc', null] }, getConfig().table.sortConfig, this.sortConfig)",
          "462:       return Object.assign({}, getConfig().table.filterConfig, this.filterConfig)",
          "468:       return Object.assign({}, getConfig().table.mouseConfig, this.mouseConfig)",
          "474:       return Object.assign({}, getConfig().table.areaConfig, this.areaConfig)",
          "480:       return Object.assign({}, getConfig().table.keyboardConfig, this.keyboardConfig)",
          "486:       return Object.assign({}, getConfig().table.clipConfig, this.clipConfig)",
          "492:       return Object.assign({}, getConfig().table.fnrConfig, this.fnrConfig)",
          "",
          "[Added Lines]",
          "450:       return Object.assign({}, XEUtils.clone(getConfig().table.editConfig, true), this.editConfig)",
          "456:       return Object.assign({ orders: ['asc', 'desc', null] }, XEUtils.clone(getConfig().table.sortConfig, true), this.sortConfig)",
          "462:       return Object.assign({}, XEUtils.clone(getConfig().table.filterConfig, true), this.filterConfig)",
          "468:       return Object.assign({}, XEUtils.clone(getConfig().table.mouseConfig, true), this.mouseConfig)",
          "474:       return Object.assign({}, XEUtils.clone(getConfig().table.areaConfig, true), this.areaConfig)",
          "480:       return Object.assign({}, XEUtils.clone(getConfig().table.keyboardConfig, true), this.keyboardConfig)",
          "486:       return Object.assign({}, XEUtils.clone(getConfig().table.clipConfig, true), this.clipConfig)",
          "492:       return Object.assign({}, XEUtils.clone(getConfig().table.fnrConfig, true), this.fnrConfig)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "519:       return this.computeMenuOpts",
          "520:     },",
          "521:     computeMenuOpts () {",
          "523:     },",
          "524:     exportOpts () {",
          "525:       return this.computeExportOpts",
          "526:     },",
          "527:     computeExportOpts () {",
          "529:     },",
          "530:     importOpts () {",
          "531:       return this.computeImportOpts",
          "532:     },",
          "533:     computeImportOpts () {",
          "535:     },",
          "536:     printOpts () {",
          "537:       return this.computePrintOpts",
          "538:     },",
          "539:     computePrintOpts () {",
          "541:     },",
          "542:     expandOpts () {",
          "543:       return this.computeExpandOpts",
          "544:     },",
          "545:     computeExpandOpts () {",
          "547:     },",
          "548:     treeOpts () {",
          "549:       return this.computeTreeOpts",
          "550:     },",
          "551:     computeTreeOpts () {",
          "553:     },",
          "554:     emptyOpts () {",
          "555:       return this.computeEmptyOpts",
          "556:     },",
          "557:     computeEmptyOpts () {",
          "559:     },",
          "560:     loadingOpts () {",
          "561:       return this.computeLoadingOpts",
          "562:     },",
          "563:     computeLoadingOpts () {",
          "565:     },",
          "566:     cellOffsetWidth () {",
          "567:       return this.border ? Math.max(2, Math.ceil(this.scrollbarWidth / this.tableColumn.length)) : 1",
          "",
          "[Removed Lines]",
          "522:       return Object.assign({}, getConfig().table.menuConfig, this.contextMenu, this.menuConfig)",
          "528:       return Object.assign({}, getConfig().table.exportConfig, this.exportConfig)",
          "534:       return Object.assign({}, getConfig().table.importConfig, this.importConfig)",
          "540:       return Object.assign({}, getConfig().table.printConfig, this.printConfig)",
          "546:       return Object.assign({}, getConfig().table.expandConfig, this.expandConfig)",
          "552:       return Object.assign({}, getConfig().table.treeConfig, this.treeConfig)",
          "558:       return Object.assign({}, getConfig().table.emptyRender, this.emptyRender)",
          "564:       return Object.assign({}, getConfig().table.loadingConfig, this.loadingConfig)",
          "",
          "[Added Lines]",
          "522:       return Object.assign({}, XEUtils.clone(getConfig().table.menuConfig, true), this.contextMenu, this.menuConfig)",
          "528:       return Object.assign({}, XEUtils.clone(getConfig().table.exportConfig, true), this.exportConfig)",
          "534:       return Object.assign({}, XEUtils.clone(getConfig().table.importConfig, true), this.importConfig)",
          "540:       return Object.assign({}, XEUtils.clone(getConfig().table.printConfig, true), this.printConfig)",
          "546:       return Object.assign({}, XEUtils.clone(getConfig().table.expandConfig, true), this.expandConfig)",
          "552:       return Object.assign({}, XEUtils.clone(getConfig().table.treeConfig, true), this.treeConfig)",
          "558:       return Object.assign({}, XEUtils.clone(getConfig().table.emptyRender, true), this.emptyRender)",
          "564:       return Object.assign({}, XEUtils.clone(getConfig().table.loadingConfig, true), this.loadingConfig)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "570:       return this.computeCustomOpts",
          "571:     },",
          "572:     computeCustomOpts () {",
          "574:     },",
          "575:     autoWidthColumnList () {",
          "576:       const { tableColumn, visibleColumn } = this",
          "",
          "[Removed Lines]",
          "573:       return Object.assign({}, getConfig().table.customConfig, this.customConfig)",
          "",
          "[Added Lines]",
          "573:       return Object.assign({}, XEUtils.clone(getConfig().table.customConfig, true), this.customConfig)",
          "",
          "---------------"
        ],
        "packages/toolbar/src/toolbar.ts||packages/toolbar/src/toolbar.ts": [
          "File: packages/toolbar/src/toolbar.ts -> packages/toolbar/src/toolbar.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       const $xeToolbar = this",
          "72:       const props = $xeToolbar",
          "75:     },",
          "76:     computeImportOpts () {",
          "77:       const $xeToolbar = this",
          "78:       const props = $xeToolbar",
          "81:     },",
          "82:     computeExportOpts () {",
          "83:       const $xeToolbar = this",
          "84:       const props = $xeToolbar",
          "87:     },",
          "88:     computePrintOpts () {",
          "89:       const $xeToolbar = this",
          "90:       const props = $xeToolbar",
          "93:     },",
          "94:     computeZoomOpts () {",
          "95:       const $xeToolbar = this",
          "96:       const props = $xeToolbar",
          "99:     },",
          "100:     computeCustomOpts () {",
          "101:       const $xeToolbar = this",
          "102:       const props = $xeToolbar",
          "105:     },",
          "106:     computeTableCustomOpts (this: any) {",
          "107:       const $xeToolbar = this",
          "",
          "[Removed Lines]",
          "74:       return Object.assign({}, getConfig().toolbar.refresh, props.refresh) as VxeToolbarPropTypes.RefreshOpts",
          "80:       return Object.assign({}, getConfig().toolbar.import, props.import) as VxeToolbarPropTypes.ImportOpts",
          "86:       return Object.assign({}, getConfig().toolbar.export, props.export) as VxeToolbarPropTypes.ExportOpts",
          "92:       return Object.assign({}, getConfig().toolbar.print, props.print) as VxeToolbarPropTypes.PrintOpts",
          "98:       return Object.assign({}, getConfig().toolbar.zoom, props.zoom) as VxeToolbarPropTypes.ZoomOpts",
          "104:       return Object.assign({}, getConfig().toolbar.custom, props.custom) as VxeToolbarPropTypes.CustomOpts",
          "",
          "[Added Lines]",
          "74:       return Object.assign({}, XEUtils.clone(getConfig().toolbar.refresh, true), props.refresh) as VxeToolbarPropTypes.RefreshOpts",
          "80:       return Object.assign({}, XEUtils.clone(getConfig().toolbar.import, true), props.import) as VxeToolbarPropTypes.ImportOpts",
          "86:       return Object.assign({}, XEUtils.clone(getConfig().toolbar.export, true), props.export) as VxeToolbarPropTypes.ExportOpts",
          "92:       return Object.assign({}, XEUtils.clone(getConfig().toolbar.print, true), props.print) as VxeToolbarPropTypes.PrintOpts",
          "98:       return Object.assign({}, XEUtils.clone(getConfig().toolbar.zoom, true), props.zoom) as VxeToolbarPropTypes.ZoomOpts",
          "104:       return Object.assign({}, XEUtils.clone(getConfig().toolbar.custom, true), props.custom) as VxeToolbarPropTypes.CustomOpts",
          "",
          "---------------"
        ]
      }
    }
  ]
}