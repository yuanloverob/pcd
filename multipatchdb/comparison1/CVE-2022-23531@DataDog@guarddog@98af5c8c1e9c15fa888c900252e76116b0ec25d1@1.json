{
  "cve_id": "CVE-2022-23531",
  "cve_desc": "GuardDog is a CLI tool to identify malicious PyPI packages. Versions prior to 0.1.5 are vulnerable to Relative Path Traversal when scanning a specially-crafted local PyPI package. Running GuardDog against a specially-crafted package can allow an attacker to write an arbitrary file on the machine where GuardDog is executed due to a path traversal vulnerability when extracting the .tar.gz file of the package being scanned, which exists by design in the tarfile.TarFile.extractall function. This issue is patched in version 0.1.5.",
  "repo": "DataDog/guarddog",
  "patch_hash": "98af5c8c1e9c15fa888c900252e76116b0ec25d1",
  "patch_info": {
    "commit_hash": "98af5c8c1e9c15fa888c900252e76116b0ec25d1",
    "repo": "DataDog/guarddog",
    "commit_url": "https://github.com/DataDog/guarddog/commit/98af5c8c1e9c15fa888c900252e76116b0ec25d1",
    "files": [
      "guarddog/scanners/package_scanner.py",
      "poetry.lock",
      "pyproject.toml",
      "requirements.txt"
    ],
    "message": "Use tarsafe instead of built-in tarfile to extract archives (#89)\n\n* Use tarsafe instead of built-in tarfile to extract archives\n\n* Bump down Semgrep version to 0.112.1\n\nSee also https://github.com/returntocorp/semgrep/issues/6631",
    "before_after_code_files": [
      "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
      "poetry.lock||poetry.lock"
    ]
  },
  "patch_diff": {
    "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py": [
      "File: guarddog/scanners/package_scanner.py -> guarddog/scanners/package_scanner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import os",
      "3: import shutil",
      "4: import sys",
      "6: import tempfile",
      "7: import requests",
      "",
      "[Removed Lines]",
      "5: import tarfile",
      "",
      "[Added Lines]",
      "5: import tarsafe",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:         if os.path.exists(path):",
      "45:             if path.endswith('.tar.gz'):",
      "46:                 with tempfile.TemporaryDirectory() as tmpdirname:",
      "48:                     return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)",
      "49:             elif os.path.isdir(path):",
      "50:                 return self.analyzer.analyze_sourcecode(path, rules=rules)",
      "",
      "[Removed Lines]",
      "47:                     tarfile.open(path).extractall(tmpdirname)",
      "",
      "[Added Lines]",
      "47:                     tarsafe.open(path).extractall(tmpdirname)",
      "",
      "---------------"
    ],
    "poetry.lock||poetry.lock": [
      "File: poetry.lock -> poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "477: [[package]]",
      "478: name = \"semgrep\"",
      "480: description = \"Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.\"",
      "481: category = \"main\"",
      "482: optional = false",
      "",
      "[Removed Lines]",
      "479: version = \"0.122.0\"",
      "",
      "[Added Lines]",
      "479: version = \"0.112.1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "496: python-lsp-jsonrpc = \">=1.0.0,<1.1.0\"",
      "497: requests = \">=2.22,<3.0\"",
      "498: \"ruamel.yaml\" = \">=0.16.0,<0.18\"",
      "500: tqdm = \">=4.46,<5.0\"",
      "501: typing-extensions = \">=4.2,<5.0\"",
      "502: urllib3 = \">=1.26,<2.0\"",
      "",
      "[Removed Lines]",
      "499: tomli = \">=2.0.1,<2.1.0\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "526: optional = false",
      "527: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"",
      "529: [[package]]",
      "530: name = \"termcolor\"",
      "531: version = \"2.1.1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "528: [[package]]",
      "529: name = \"tarsafe\"",
      "530: version = \"0.0.4\"",
      "531: description = \"A safe subclass of the TarFile class for interacting with tar files. Can be used as a direct drop-in replacement for safe usage of extractall()\"",
      "532: category = \"main\"",
      "533: optional = false",
      "534: python-versions = \">=3.6\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "618: [metadata]",
      "619: lock-version = \"1.1\"",
      "620: python-versions = \">=3.9, <4\"",
      "623: [metadata.files]",
      "624: attrs = [",
      "",
      "[Removed Lines]",
      "621: content-hash = \"a2ee2a3bf8cdebfd91939977044d2a626e5b54500965da9d66a70c3c9b71ca2c\"",
      "",
      "[Added Lines]",
      "628: content-hash = \"0faf892801caefce1e994f6fdee7254ac4e2e95ad947d7459b75113af80eed74\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "867:     {file = \"ruamel.yaml.clib-0.2.7.tar.gz\", hash = \"sha256:1f08fd5a2bea9c4180db71678e850b995d2a5f4537be0e94557668cf0f5f9497\"},",
      "868: ]",
      "869: semgrep = [",
      "874: ]",
      "875: setuptools = [",
      "876:     {file = \"setuptools-65.6.3-py3-none-any.whl\", hash = \"sha256:57f6f22bde4e042978bcd50176fdb381d7c21a9efa4041202288d3737a0c6a54\"},",
      "",
      "[Removed Lines]",
      "870:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:c7002b9aba97deb6677f4cabfa5dcc8faef2808ce6a6f28ecdd70cd8e90b01b5\"},",
      "871:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:e3fb9956e2bb926cfeff52deafe4cec24d5f1e91fe6d3fc4f81e86ec452b2ad5\"},",
      "872:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:6116391b0c8c87581d9d72113702b6f8c2938d799cdae7d71a845ec89249566c\"},",
      "873:     {file = \"semgrep-0.122.0.tar.gz\", hash = \"sha256:a4c7400eb8bec9fe8df25520d1ffcb5d78b87c73dc654f1c2aec1195789bc611\"},",
      "",
      "[Added Lines]",
      "877:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:2a62bc6321d371dadc41df2c68678e87df807ddfa3d1faafb40bd0998abfe503\"},",
      "878:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:b690a84cbaa6a4670ff6c11a674818b8ad99736e89520a3c47d1542cc45e6d05\"},",
      "879:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:bc2437f12e41ac5e28a303e463098565a3d948c7744f6745bdb0fea341ccdae1\"},",
      "880:     {file = \"semgrep-0.112.1.tar.gz\", hash = \"sha256:2140a0fd16f3ac0a0e330980613ba65fe58faea7808a965e219c4199bab96102\"},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "880:     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},",
      "881:     {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},",
      "882: ]",
      "883: termcolor = [",
      "884:     {file = \"termcolor-2.1.1-py3-none-any.whl\", hash = \"sha256:fa852e957f97252205e105dd55bbc23b419a70fec0085708fc0515e399f304fd\"},",
      "885:     {file = \"termcolor-2.1.1.tar.gz\", hash = \"sha256:67cee2009adc6449c650f6bcf3bdeed00c8ba53a8cda5362733c53e0a39fb70b\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "890: tarsafe = [",
      "891:     {file = \"tarsafe-0.0.4-py3-none-any.whl\", hash = \"sha256:12903a81f2612c09d22117115301ea510944af5caa1e358636e0fc1d0e6134df\"},",
      "892:     {file = \"tarsafe-0.0.4.tar.gz\", hash = \"sha256:a376f4138005298c11c30cb60a5081fa2c09f44384c966106fbaeee3059e9ec5\"},",
      "893: ]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70cf065240acb98d3d5124a57e21cdcc213e5505",
      "candidate_info": {
        "commit_hash": "70cf065240acb98d3d5124a57e21cdcc213e5505",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/70cf065240acb98d3d5124a57e21cdcc213e5505",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump click-option-group from 0.5.3 to 0.5.5\n\nBumps [click-option-group](https://github.com/click-contrib/click-option-group) from 0.5.3 to 0.5.5.\n- [Release notes](https://github.com/click-contrib/click-option-group/releases)\n- [Changelog](https://github.com/click-contrib/click-option-group/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/click-contrib/click-option-group/compare/v0.5.3...v0.5.5)\n\n---\nupdated-dependencies:\n- dependency-name: click-option-group\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: [[package]]",
          "165: name = \"click-option-group\"",
          "167: description = \"Option groups missing in Click\"",
          "168: category = \"main\"",
          "169: optional = false",
          "170: python-versions = \">=3.6,<4\"",
          "171: files = [",
          "174: ]",
          "176: [package.dependencies]",
          "177: Click = \">=7.0,<9\"",
          "179: [package.extras]",
          "183: [[package]]",
          "184: name = \"colorama\"",
          "",
          "[Removed Lines]",
          "166: version = \"0.5.3\"",
          "172:     {file = \"click-option-group-0.5.3.tar.gz\", hash = \"sha256:a6e924f3c46b657feb5b72679f7e930f8e5b224b766ab35c91ae4019b4e0615e\"},",
          "173:     {file = \"click_option_group-0.5.3-py3-none-any.whl\", hash = \"sha256:9653a2297357335d7325a1827e71ac1245d91c97d959346a7decabd4a52d5354\"},",
          "180: docs = [\"Pallets-Sphinx-Themes\", \"m2r\", \"sphinx (>=2.3,<3)\"]",
          "181: tests = [\"coverage (<6)\", \"coveralls\", \"pytest\", \"pytest-cov\"]",
          "",
          "[Added Lines]",
          "166: version = \"0.5.5\"",
          "172:     {file = \"click-option-group-0.5.5.tar.gz\", hash = \"sha256:78ee474f07a0ca0ef6c0317bb3ebe79387aafb0c4a1e03b1d8b2b0be1e42fc78\"},",
          "173:     {file = \"click_option_group-0.5.5-py3-none-any.whl\", hash = \"sha256:0f8ca79bc9b1d6fcaafdbe194b17ba1a2dde44ddf19087235c3efed2ad288143\"},",
          "180: docs = [\"Pallets-Sphinx-Themes\", \"m2r2\", \"sphinx (>=3.0,<6)\"]",
          "181: tests = [\"pytest\"]",
          "182: tests-cov = [\"coverage (<6)\", \"coveralls\", \"pytest\", \"pytest-cov\"]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1236: [metadata]",
          "1237: lock-version = \"2.0\"",
          "1238: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1239: content-hash = \"c46ffcbd59bee2228ddf42c444704cece762bb26209f9fc9b013dcacb3c61eae\"",
          "",
          "[Added Lines]",
          "1240: content-hash = \"460b516c9c1d589aca1802650759bdbe497fc835644238e04c188111d342ac58\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2da2ac9ec2282772afcdb16660250af3de7fcc95",
      "candidate_info": {
        "commit_hash": "2da2ac9ec2282772afcdb16660250af3de7fcc95",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/2da2ac9ec2282772afcdb16660250af3de7fcc95",
        "files": [
          "Dockerfile",
          "README.md",
          "guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/npm/empty_information.py",
          "guarddog/analyzer/metadata/npm/release_zero.py",
          "guarddog/analyzer/metadata/npm/typosquatting.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/pypi/__init__.py",
          "guarddog/analyzer/metadata/pypi/empty_information.py",
          "guarddog/analyzer/metadata/pypi/release_zero.py",
          "guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py",
          "guarddog/analyzer/metadata/pypi/typosquatting.py",
          "guarddog/analyzer/metadata/repository_integrity_mismatch.py",
          "guarddog/cli.py",
          "guarddog/scanners/scanner.py",
          "notebooks/repository_integrity_missmatch.ipynb",
          "notebooks/resources/all_package_info/build.py",
          "poetry.lock",
          "pyproject.toml",
          "requirements.txt",
          "scripts/evaluator/evaluator.py",
          "tests/analyzer/metadata/test_empty_information.py",
          "tests/analyzer/metadata/test_release_zero.py",
          "tests/analyzer/metadata/test_repository_integrity_mismatch.py"
        ],
        "message": "Pypi to Github files integrity (#114)\n\n* save commit\n\n* save commit\n\n* save commit\n\n* v0 of missmatch files detector\n\n* update notes\n\n* update hash algorithm\n\n* fix issue in versionning\n\n* ignore egg_info in setup.cfg\n\n* save commit before mistakes are made\n\n* do not rely on github api\n\n* update version choice\n\n* highlight last issue\n\n* ensure we use a proper one\n\n* add analysis of new detector performances + updates\n\n* remove costly piece of the notebook\n\n* u[date notebook\n\n* move best candidate choice from 23% failure to 16%\n\n* fix repo missmatch issue\n\n* add a couple tests\n\n* fix code quality\n\n* add instructions for notebook\n\n* fix requirements\n\n* fix tests\n\n* remove run.py\n\n* add libgit2 to the docker\n\n* add libgit2 to the docker\n\n* add libgit2 to the docker\n\n* apply review comments\n\n* Typo: replace 'missmatch' by 'mismatch' in new heuristic\n\n* Rename detector and add docs\n\n* Add description of new heuristic to README\n\n* fix package name issue\n\n* fix issues\n\nCo-authored-by: Christophe Tafani-Dereeper <christophe.tafanidereeper@datadoghq.com>",
        "before_after_code_files": [
          "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/npm/empty_information.py||guarddog/analyzer/metadata/npm/empty_information.py",
          "guarddog/analyzer/metadata/npm/release_zero.py||guarddog/analyzer/metadata/npm/release_zero.py",
          "guarddog/analyzer/metadata/npm/typosquatting.py||guarddog/analyzer/metadata/npm/typosquatting.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/pypi/__init__.py||guarddog/analyzer/metadata/pypi/__init__.py",
          "guarddog/analyzer/metadata/pypi/empty_information.py||guarddog/analyzer/metadata/pypi/empty_information.py",
          "guarddog/analyzer/metadata/pypi/release_zero.py||guarddog/analyzer/metadata/pypi/release_zero.py",
          "guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py||guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py",
          "guarddog/analyzer/metadata/pypi/typosquatting.py||guarddog/analyzer/metadata/pypi/typosquatting.py",
          "guarddog/analyzer/metadata/repository_integrity_mismatch.py||guarddog/analyzer/metadata/repository_integrity_mismatch.py",
          "guarddog/cli.py||guarddog/cli.py",
          "guarddog/scanners/scanner.py||guarddog/scanners/scanner.py",
          "notebooks/repository_integrity_missmatch.ipynb||notebooks/repository_integrity_missmatch.ipynb",
          "notebooks/resources/all_package_info/build.py||notebooks/resources/all_package_info/build.py",
          "poetry.lock||poetry.lock",
          "scripts/evaluator/evaluator.py||scripts/evaluator/evaluator.py",
          "tests/analyzer/metadata/test_empty_information.py||tests/analyzer/metadata/test_empty_information.py",
          "tests/analyzer/metadata/test_release_zero.py||tests/analyzer/metadata/test_release_zero.py",
          "tests/analyzer/metadata/test_repository_integrity_mismatch.py||tests/analyzer/metadata/test_repository_integrity_mismatch.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py": [
          "File: guarddog/analyzer/analyzer.py -> guarddog/analyzer/analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from pathlib import Path",
          "4: from semgrep.semgrep_main import invoke_semgrep  # type: ignore",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: from typing import Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:             \".semgrep_logs\",",
          "58:         ]",
          "61:         \"\"\"",
          "62:         Analyzes a package in the given path",
          "",
          "[Removed Lines]",
          "60:     def analyze(self, path, info=None, rules=None) -> dict:",
          "",
          "[Added Lines]",
          "61:     def analyze(self, path, info=None, rules=None, name: Optional[str] = None, version: Optional[str] = None) -> dict:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:                 else:",
          "93:                     raise Exception(f\"{rule} is not a valid rule.\")",
          "96:         sourcecode_results = self.analyze_sourcecode(path, sourcecode_rules)",
          "98:         # Concatenate dictionaries together",
          "",
          "[Removed Lines]",
          "95:         metadata_results = self.analyze_metadata(path, info, metadata_rules)",
          "",
          "[Added Lines]",
          "96:         metadata_results = self.analyze_metadata(path, info, metadata_rules, name, version)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:         return {\"issues\": issues, \"errors\": errors, \"results\": results, \"path\": path}",
          "106:         \"\"\"",
          "107:         Analyzes the metadata of a given package",
          "",
          "[Removed Lines]",
          "105:     def analyze_metadata(self, path: str, info, rules=None) -> dict:",
          "",
          "[Added Lines]",
          "106:     def analyze_metadata(self, path: str, info, rules=None, name: Optional[str] = None,",
          "107:                          version: Optional[str] = None) -> dict:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:         for rule in all_rules:",
          "124:             try:",
          "126:                 if rule_matches:",
          "127:                     issues += 1",
          "128:                     results[rule] = message",
          "",
          "[Removed Lines]",
          "125:                 rule_matches, message = self.metadata_detectors[rule].detect(info, path)",
          "",
          "[Added Lines]",
          "127:                 rule_matches, message = self.metadata_detectors[rule].detect(info, path, name, version)",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py": [
          "File: guarddog/analyzer/metadata/detector.py -> guarddog/analyzer/metadata/detector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     # returns (ruleMatches, message)",
          "13:     @abstractmethod",
          "15:         pass  # pragma: no cover",
          "",
          "[Removed Lines]",
          "14:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "",
          "[Added Lines]",
          "14:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "15:                version: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py": [
          "File: guarddog/analyzer/metadata/empty_information.py -> guarddog/analyzer/metadata/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     RULE_NAME = \"empty_information\"",
          "20:     @abstractmethod",
          "22:         \"\"\"",
          "23:         Uses a package's information from PyPI's JSON API to determine",
          "24:         if the package has an empty description",
          "",
          "[Removed Lines]",
          "21:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "21:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "22:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         Returns:",
          "31:             bool: True if package description is empty",
          "32:         \"\"\"",
          "33:         pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:             @param **kwargs:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/npm/empty_information.py||guarddog/analyzer/metadata/npm/empty_information.py": [
          "File: guarddog/analyzer/metadata/npm/empty_information.py -> guarddog/analyzer/metadata/npm/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: class NPMEmptyInfoDetector(EmptyInfoDetector):",
          "16:         if path is None:",
          "17:             raise TypeError(\"path must be a string\")",
          "18:         package_path = os.path.join(path, \"package\")",
          "",
          "[Removed Lines]",
          "15:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "15:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "16:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/npm/release_zero.py||guarddog/analyzer/metadata/npm/release_zero.py": [
          "File: guarddog/analyzer/metadata/npm/release_zero.py -> guarddog/analyzer/metadata/npm/release_zero.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: class NPMReleaseZeroDetector(ReleaseZeroDetector):",
          "13:         return package_info[\"dist-tags\"][\"latest\"] in [\"0.0.0\", \"0.0\", \"0\"],\\",
          "14:             ReleaseZeroDetector.MESSAGE_TEMPLATE % package_info[\"dist-tags\"][\"latest\"]",
          "",
          "[Removed Lines]",
          "12:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "12:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "13:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/npm/typosquatting.py||guarddog/analyzer/metadata/npm/typosquatting.py": [
          "File: guarddog/analyzer/metadata/npm/typosquatting.py -> guarddog/analyzer/metadata/npm/typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:         return list(map(lambda x: x[\"project\"], top_packages_data))",
          "26:         \"\"\"",
          "27:         Uses a package's information from PyPI's JSON API to determine the",
          "28:         package is attempting a typosquatting attack",
          "",
          "[Removed Lines]",
          "25:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "",
          "[Added Lines]",
          "25:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "26:                version: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py": [
          "File: guarddog/analyzer/metadata/potentially_compromised_email_domain.py -> guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         return creation_dates, True",
          "57:         \"\"\"",
          "58:         Uses a package's information from PyPI's JSON API to determine",
          "59:         if the package's email domain might have been compromised",
          "",
          "[Removed Lines]",
          "56:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "56:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "57:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/__init__.py||guarddog/analyzer/metadata/pypi/__init__.py": [
          "File: guarddog/analyzer/metadata/pypi/__init__.py -> guarddog/analyzer/metadata/pypi/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from guarddog.analyzer.metadata.pypi.potentially_compromised_email_domain import \\",
          "3:     PypiPotentiallyCompromisedEmailDomainDetector",
          "4: from guarddog.analyzer.metadata.pypi.release_zero import PypiReleaseZeroDetector",
          "5: from guarddog.analyzer.metadata.pypi.typosquatting import PypiTyposquatDetector",
          "7: PYPI_METADATA_RULES = {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from guarddog.analyzer.metadata.pypi.repository_integrity_mismatch import PypiIntegrityMismatchDetector",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     PypiEmptyInfoDetector,",
          "11:     PypiReleaseZeroDetector,",
          "12:     PypiTyposquatDetector,",
          "14: ]",
          "16: for cls in classes:",
          "",
          "[Removed Lines]",
          "13:     PypiPotentiallyCompromisedEmailDomainDetector",
          "",
          "[Added Lines]",
          "14:     PypiPotentiallyCompromisedEmailDomainDetector,",
          "15:     PypiIntegrityMismatchDetector",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/empty_information.py||guarddog/analyzer/metadata/pypi/empty_information.py": [
          "File: guarddog/analyzer/metadata/pypi/empty_information.py -> guarddog/analyzer/metadata/pypi/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: class PypiEmptyInfoDetector(EmptyInfoDetector):",
          "14:         return len(package_info[\"info\"][\"description\"].strip()) == 0, EmptyInfoDetector.MESSAGE_TEMPLATE % \"PyPI\"",
          "",
          "[Removed Lines]",
          "13:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "13:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "14:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/release_zero.py||guarddog/analyzer/metadata/pypi/release_zero.py": [
          "File: guarddog/analyzer/metadata/pypi/release_zero.py -> guarddog/analyzer/metadata/pypi/release_zero.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: class PypiReleaseZeroDetector(ReleaseZeroDetector):",
          "13:         return (package_info[\"info\"][\"version\"] in [\"0.0.0\", \"0.0\"],",
          "14:                 ReleaseZeroDetector.MESSAGE_TEMPLATE % package_info[\"info\"][\"version\"])",
          "",
          "[Removed Lines]",
          "12:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "12:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "13:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py||guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py": [
          "File: guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py -> guarddog/analyzer/metadata/pypi/repository_integrity_mismatch.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\" Empty Information Detector",
          "3: Detects if a package contains an empty description",
          "4: \"\"\"",
          "5: import configparser",
          "6: import hashlib",
          "7: import os",
          "8: import re",
          "9: from typing import Optional, Tuple",
          "11: import pygit2  # type: ignore",
          "12: import urllib3.util",
          "14: from guarddog.analyzer.metadata.repository_integrity_mismatch import IntegrityMismatch",
          "16: GH_REPO_REGEX = r'(?:https?://)?(?:www\\.)?github\\.com/(?:[\\w-]+/)(?:[\\w-]+)'",
          "17: GH_REPO_OWNER_REGEX = r'(?:https?://)?(?:www\\.)?github\\.com/([\\w-]+)/([\\w-]+)'",
          "20: def extract_owner_and_repo(url) -> Tuple[Optional[str], Optional[str]]:",
          "21:     match = re.search(GH_REPO_OWNER_REGEX, url)",
          "22:     if match:",
          "23:         owner = match.group(1)",
          "24:         repo = match.group(2)",
          "25:         return owner, repo",
          "26:     return None, None",
          "29: def find_best_github_candidate(all_candidates_and_highlighted_link, name):",
          "30:     \"\"\"",
          "31:     This method goes through multiple URLs and checks which one is the most suitable to be used as GitHub URL for",
          "32:     the project repository.",
          "33:     If the repository homepage is a GitHub URL, it is used in priority",
          "34:     \"\"\"",
          "35:     candidates, best_github_candidate = all_candidates_and_highlighted_link",
          "36:     # if the project url is a GitHub repository, we should follow this as an instruction. Users will click on it",
          "37:     if best_github_candidate is not None:",
          "38:         best_github_candidate = best_github_candidate.replace(\"http://\", \"https://\")",
          "39:         url = urllib3.util.parse_url(best_github_candidate)",
          "40:         if url.host == \"github.com\":",
          "41:             return best_github_candidate",
          "42:     clean_candidates = []",
          "43:     for entry in candidates:",
          "44:         # let's do some cleanup",
          "45:         url = urllib3.util.parse_url(entry)",
          "46:         if url.host != \"github.com\":",
          "47:             continue",
          "48:         if url.scheme == \"http\":",
          "49:             entry = entry.replace(\"http://\", \"https://\")",
          "50:         clean_candidates.append(entry)",
          "51:     for entry in clean_candidates:",
          "52:         if f\"/{name.lower()}\" in entry.lower():",
          "53:             return entry",
          "54:     # solution 1 did not work, let's be a bit more aggressive",
          "55:     for entry in clean_candidates:",
          "56:         owner, repo = extract_owner_and_repo(entry)",
          "57:         if repo is not None and (",
          "58:                 # Idea: replace by if two strings have a Levenshtein distance < X% of string length",
          "59:                 repo.lower() in name.lower() or name.lower() in repo.lower()):",
          "60:             return entry",
          "61:     return None",
          "64: def dict_generator(indict, pre=None):",
          "65:     \"\"\"",
          "66:     This generator recursively go through an arbitrary dict",
          "67:     Each iteration will be an array containing the path of all leaves of the dict",
          "68:     \"\"\"",
          "69:     pre = pre[:] if pre else []",
          "70:     if isinstance(indict, dict):",
          "71:         for key, value in indict.items():",
          "72:             if isinstance(value, dict):",
          "73:                 for d in dict_generator(value, pre + [key]):",
          "74:                     yield d",
          "75:             elif isinstance(value, list) or isinstance(value, tuple):",
          "76:                 for v in value:",
          "77:                     for d in dict_generator(v, pre + [key]):",
          "78:                         yield d",
          "79:             else:",
          "80:                 yield pre + [key, value]",
          "81:     else:",
          "82:         yield pre + [indict]",
          "85: def get_file_hash(path):",
          "86:     with open(path, 'rb') as f:",
          "87:         # Read the contents of the file",
          "88:         file_contents = f.read()",
          "89:         # Create a hash object",
          "90:         hash_object = hashlib.sha256()",
          "91:         # Feed the file contents to the hash object",
          "92:         hash_object.update(file_contents)",
          "93:         # Get the hexadecimal hash value",
          "94:         return hash_object.hexdigest(), str(file_contents).strip().splitlines()",
          "97: def _ensure_proper_url(url):",
          "98:     parsed = urllib3.util.parse_url(url)",
          "99:     if parsed.scheme is None:",
          "100:         url = f\"https://{url}\"",
          "101:     return url",
          "104: def find_github_candidates(package_info) -> Tuple[set[str], Optional[str]]:",
          "105:     infos = package_info[\"info\"]",
          "106:     homepage = None",
          "107:     if \"Homepage\" in package_info[\"info\"][\"project_urls\"]:",
          "108:         homepage = package_info[\"info\"][\"project_urls\"][\"Homepage\"]",
          "109:     github_urls = set()",
          "110:     for dict_path in dict_generator(infos):",
          "111:         leaf = dict_path[-1]",
          "112:         if type(leaf) is not str:",
          "113:             continue",
          "114:         res = re.findall(GH_REPO_REGEX, leaf)",
          "115:         if len(res) > 0:",
          "116:             for cd in res:",
          "117:                 github_urls.add(_ensure_proper_url(cd.strip()))",
          "118:     best = None",
          "119:     if homepage in github_urls:",
          "120:         best = _ensure_proper_url(homepage)",
          "121:     return github_urls, best",
          "124: EXCLUDED_EXTENSIONS = [\".rst\", \".md\", \".txt\"]",
          "127: def exclude_result(file_name, repo_root, pkg_root):",
          "128:     \"\"\"",
          "129:     This method filters out some results that are known false positives:",
          "132:     \"\"\"",
          "133:     for extension in EXCLUDED_EXTENSIONS:",
          "134:         if file_name.endswith(extension):",
          "135:             return True",
          "136:     if file_name.endswith(\"setup.cfg\"):",
          "137:         repo_cfg = configparser.ConfigParser()",
          "138:         repo_cfg.read(os.path.join(repo_root, file_name))",
          "139:         pkg_cfg = configparser.ConfigParser()",
          "140:         pkg_cfg.read(os.path.join(pkg_root, file_name))",
          "141:         repo_sections = list(repo_cfg.keys())",
          "142:         pkg_sections = list(pkg_cfg.keys())",
          "143:         if \"egg_info\" in pkg_sections and \"egg_info\" not in repo_sections:",
          "144:             return True",
          "145:     return False",
          "148: def find_mismatch_for_tag(repo, tag, base_path, repo_path):",
          "149:     repo.checkout(tag)",
          "150:     mismatch = []",
          "151:     for root, dirs, files in os.walk(base_path):",
          "152:         relative_path = os.path.relpath(root, base_path)",
          "153:         repo_root = os.path.join(repo_path, relative_path)",
          "154:         if not os.path.exists(repo_root):",
          "155:             continue",
          "156:         repo_files = list(filter(",
          "157:             lambda x: os.path.isfile(os.path.join(repo_root, x)),",
          "158:             os.listdir(repo_root)",
          "159:         ))",
          "160:         for file_name in repo_files:",
          "161:             if file_name not in files:  # ignore files we don't have in the distribution",
          "162:                 continue",
          "163:             repo_hash, repo_content = get_file_hash(os.path.join(repo_root, file_name))",
          "164:             pkg_hash, pkg_content = get_file_hash(os.path.join(root, file_name))",
          "165:             if repo_hash != pkg_hash:",
          "166:                 if exclude_result(file_name, repo_root, root):",
          "167:                     continue",
          "168:                 res = {",
          "169:                     \"file\": os.path.join(relative_path, file_name),",
          "170:                     \"repo_sha256\": repo_hash,",
          "171:                     \"pkg_sha256\": pkg_hash",
          "172:                 }",
          "173:                 mismatch.append(res)",
          "174:     return mismatch",
          "177: def find_suitable_tags_in_list(tags, version):",
          "178:     tag_candidates = []",
          "179:     for tag_name in tags:",
          "180:         if tag_name.endswith(version):",
          "181:             tag_candidates.append(tag_name)",
          "182:     return tag_candidates",
          "185: def find_suitable_tags(repo, version):",
          "186:     tags_regex = re.compile('^refs/tags/(.*)')",
          "187:     tags = []",
          "188:     for ref in repo.references:",
          "189:         match = tags_regex.match(ref)",
          "190:         if match is not None:",
          "191:             tags.append(match.group(0))",
          "193:     return find_suitable_tags_in_list(tags, version)",
          "196: # Note: we should have the GitHub related logic factored out as we will need it when we check for signed commits",
          "197: class PypiIntegrityMismatchDetector(IntegrityMismatch):",
          "198:     \"\"\"",
          "199:     This heuristic compares source code available on the package source code repository (e.g. GitHub), and source code",
          "200:     published on PyPI. If a file is on both sides but has a different content, this heuristic will flag the package.",
          "202:     This helps identify packages whose release artifacts were modified directly on PyPI.",
          "204:     Current gaps:",
          "207:     \"\"\"",
          "208:     RULE_NAME = \"repository_integrity_mismatch\"",
          "210:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "211:                version: Optional[str] = None) -> tuple[bool, str]:",
          "212:         if name is None:",
          "213:             raise Exception(\"Detector needs the name of the package\")",
          "214:         if path is None:",
          "215:             raise Exception(\"Detector needs the path of the package\")",
          "216:         # let's extract a source repository (GitHub only for now) if we can",
          "217:         github_urls, best_github_candidate = find_github_candidates(package_info)",
          "218:         if len(github_urls) == 0:",
          "219:             return False, \"Could not find any GitHub url in the project's description\"",
          "220:         # now, let's find the right url",
          "222:         github_url = find_best_github_candidate((github_urls, best_github_candidate), name)",
          "224:         if github_url is None:",
          "225:             return False, \"Could not find a good GitHub url in the project's description\"",
          "227:         # ok, now let's try to find the version! (I need to know which version we are scanning)",
          "228:         if version is None:",
          "229:             version = package_info[\"info\"][\"version\"]",
          "230:         if version is None:",
          "231:             raise Exception(\"Could not find suitable version to scan\")",
          "232:         tmp_dir = os.path.dirname(path)",
          "233:         if tmp_dir is None:",
          "234:             raise Exception(\"no current scanning directory\")",
          "236:         repo_path = os.path.join(tmp_dir, \"sources\", name)",
          "237:         repo = pygit2.clone_repository(url=github_url, path=repo_path)",
          "239:         tag_candidates = find_suitable_tags(repo, version)",
          "241:         if len(tag_candidates) == 0:",
          "242:             return False, \"Could not find any suitable tag in repository\"",
          "244:         target_tag = None",
          "245:         # TODO: this one is a bit weak. let's find something stronger - maybe use the closest string?",
          "246:         for tag in tag_candidates:",
          "247:             target_tag = tag",
          "249:         # Idea: parse the code of the package to find the real version - we can grep the project files for",
          "250:         #  the version, git biscect until we have a file with the same version? will not work if main has not",
          "251:         #  been bumped yet in version so tags and releases are out only solutions here print(tag_candidates)",
          "252:         #  Well, that works if we run integrity check for multiple commits",
          "254:         #  should be good, let's open the sources",
          "255:         base_dir_name = None",
          "256:         for entry in os.listdir(path):",
          "257:             if entry.lower().startswith(name.lower().replace('-', '_')) or entry.lower().startswith(name.lower()):",
          "258:                 base_dir_name = entry",
          "259:         if base_dir_name is None or base_dir_name == \"sources\":  # I am not sure how we can get there",
          "260:             raise Exception(\"something went wrong when opening the package\")",
          "261:         base_path = os.path.join(path, base_dir_name)",
          "263:         mismatch = find_mismatch_for_tag(repo, target_tag, base_path, repo_path)",
          "264:         message = \"\\n\".join(map(",
          "265:             lambda x: \"* \" + x[\"file\"],",
          "266:             mismatch",
          "267:         ))",
          "268:         return len(mismatch) > 0, f\"Some files present in the package are different from the ones on GitHub for \" \\",
          "269:                                   f\"the same version of the package: \\n{message}\"",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/typosquatting.py||guarddog/analyzer/metadata/pypi/typosquatting.py": [
          "File: guarddog/analyzer/metadata/pypi/typosquatting.py -> guarddog/analyzer/metadata/pypi/typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         return list(map(get_safe_name, top_packages_information))",
          "66:         \"\"\"",
          "67:         Uses a package's information from PyPI's JSON API to determine the",
          "68:         package is attempting a typosquatting attack",
          "",
          "[Removed Lines]",
          "65:     def detect(self, package_info, path: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "",
          "[Added Lines]",
          "65:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "66:                version: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/repository_integrity_mismatch.py||guarddog/analyzer/metadata/repository_integrity_mismatch.py": [
          "File: guarddog/analyzer/metadata/repository_integrity_mismatch.py -> guarddog/analyzer/metadata/repository_integrity_mismatch.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\" Empty Information Detector",
          "3: Detects if a package contains an empty description",
          "4: \"\"\"",
          "5: from abc import abstractmethod",
          "6: from typing import Optional",
          "8: from guarddog.analyzer.metadata.detector import Detector",
          "11: class IntegrityMismatch(Detector):",
          "12:     \"\"\"This package contains files that have been tampered with between the source repository and the package CDN\"\"\"",
          "13:     RULE_NAME = \"repository_integrity_mismatch\"",
          "15:     @abstractmethod",
          "16:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "17:                version: Optional[str] = None) -> tuple[bool, str]:",
          "18:         pass",
          "",
          "---------------"
        ],
        "guarddog/cli.py||guarddog/cli.py": [
          "File: guarddog/cli.py -> guarddog/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     Args:",
          "110:         identifier (str): name or path to the package",
          "111:         version (str): version of the package (ex. 1.0.0), defaults to most recent",
          "113:     \"\"\"",
          "115:     rule_param = _get_rule_pram(rules, exclude_rules)",
          "",
          "[Removed Lines]",
          "112:         rules (str): specific rules to run, defaults to all",
          "",
          "[Added Lines]",
          "112:         rules (list[str]): specific rules to run, defaults to all",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     if output_format == \"json\":",
          "132:         import json as js",
          "134:     else:",
          "135:         print_scan_results(results, identifier)",
          "",
          "[Removed Lines]",
          "133:         print(js.dumps(results))",
          "",
          "[Added Lines]",
          "133:         # print(js.dumps(results))",
          "134:         return js.dumps(results)",
          "",
          "---------------"
        ],
        "guarddog/scanners/scanner.py||guarddog/scanners/scanner.py": [
          "File: guarddog/scanners/scanner.py -> guarddog/scanners/scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         package_info = self.download_and_get_package_info(directory, name, version)",
          "215:         if write_package_info:",
          "216:             suffix = f\"{name}-{version}\" if version is not None else name",
          "217:             with open(os.path.join(results[\"path\"], f'package_info-{suffix}.json'), \"w\") as file:",
          "",
          "[Removed Lines]",
          "214:         results = self.analyzer.analyze(file_path, package_info, rules)",
          "",
          "[Added Lines]",
          "214:         results = self.analyzer.analyze(file_path, package_info, rules, name, version)",
          "",
          "---------------"
        ],
        "notebooks/repository_integrity_missmatch.ipynb||notebooks/repository_integrity_missmatch.ipynb": [
          "File: notebooks/repository_integrity_missmatch.ipynb -> notebooks/repository_integrity_missmatch.ipynb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {",
          "2:  \"cells\": [",
          "3:   {",
          "4:    \"cell_type\": \"markdown\",",
          "5:    \"metadata\": {},",
          "6:    \"source\": [",
          "7:     \"# Repository integrity mismatch\\n\",",
          "8:     \"\\n\",",
          "9:     \"Note: You'll need to run the build script in ./resources first\"",
          "10:    ]",
          "11:   },",
          "12:   {",
          "13:    \"cell_type\": \"code\",",
          "14:    \"execution_count\": 25,",
          "15:    \"metadata\": {},",
          "16:    \"outputs\": [],",
          "17:    \"source\": [",
          "18:     \"import json\\n\",",
          "19:     \"import os\\n\",",
          "20:     \"import requests\\n\",",
          "21:     \"\\n\",",
          "22:     \"import numpy\\n\",",
          "23:     \"from matplotlib import pyplot as plt\\n\",",
          "24:     \"\\n\",",
          "25:     \"import guarddog.analyzer.metadata.pypi.repository_integrity_mismatch as repository_integrity_mismatch\\n\",",
          "26:     \"data_path = os.path.join(\\\".\\\", \\\"resources\\\", \\\"all_package_info\\\", \\\"all_info.json\\\")\\n\",",
          "27:     \"if not os.path.exists(data_path):\\n\",",
          "28:     \"    import resources.all_package_info.build\\n\",",
          "29:     \"\\n\",",
          "30:     \"with open(data_path, \\\"r\\\") as fd:\\n\",",
          "31:     \"    ALL_PACKAGE_INFO = json.load(fd)\"",
          "32:    ]",
          "33:   },",
          "34:   {",
          "35:    \"cell_type\": \"markdown\",",
          "36:    \"metadata\": {},",
          "37:    \"source\": [",
          "38:     \"## Find GitHub candidates\\n\",",
          "39:     \"\\n\"",
          "40:    ]",
          "41:   },",
          "42:   {",
          "43:    \"cell_type\": \"code\",",
          "44:    \"execution_count\": 26,",
          "45:    \"metadata\": {},",
          "46:    \"outputs\": [",
          "47:     {",
          "48:      \"data\": {",
          "49:       \"image/png\": \"\\n\",",
          "50:       \"text/plain\": [",
          "51:        \"<Figure size 640x480 with 1 Axes>\"",
          "52:       ]",
          "53:      },",
          "54:      \"metadata\": {},",
          "55:      \"output_type\": \"display_data\"",
          "56:     }",
          "57:    ],",
          "58:    \"source\": [",
          "59:     \"all_candidates = {}\\n\",",
          "60:     \"build_candidates = [0, 0]\\n\",",
          "61:     \"for name in list(ALL_PACKAGE_INFO.keys()):\\n\",",
          "62:     \"    candidates, best = repository_integrity_mismatch.find_github_candidates(ALL_PACKAGE_INFO[name])\\n\",",
          "63:     \"    if len(candidates) > 0:\\n\",",
          "64:     \"        build_candidates[0] += 1\\n\",",
          "65:     \"        all_candidates[name] = (candidates, best)\\n\",",
          "66:     \"    else:\\n\",",
          "67:     \"        build_candidates[1] += 1\\n\",",
          "68:     \"\\n\",",
          "69:     \"y = numpy.array(build_candidates)\\n\",",
          "70:     \"labels = [\\\"found\\\", \\\"missed\\\"]\\n\",",
          "71:     \"plt.pie(y, labels = labels, autopct = \\\"%1.2f%%\\\")\\n\",",
          "72:     \"plt.show()\"",
          "73:    ]",
          "74:   },",
          "75:   {",
          "76:    \"cell_type\": \"markdown\",",
          "77:    \"metadata\": {},",
          "78:    \"source\": [",
          "79:     \"## Find best candidate\\n\"",
          "80:    ]",
          "81:   },",
          "82:   {",
          "83:    \"cell_type\": \"code\",",
          "84:    \"execution_count\": 27,",
          "85:    \"metadata\": {},",
          "86:    \"outputs\": [",
          "87:     {",
          "88:      \"data\": {",
          "89:       \"image/png\": \"\\n\",",
          "90:       \"text/plain\": [",
          "91:        \"<Figure size 640x480 with 1 Axes>\"",
          "92:       ]",
          "93:      },",
          "94:      \"metadata\": {},",
          "95:      \"output_type\": \"display_data\"",
          "96:     }",
          "97:    ],",
          "98:    \"source\": [",
          "99:     \"find_repo = [0, 0]\\n\",",
          "100:     \"repo_urls = {}\\n\",",
          "101:     \"for name in all_candidates.keys():\\n\",",
          "102:     \"    repo = repository_integrity_mismatch.find_best_github_candidate(all_candidates[name], name)\\n\",",
          "103:     \"    if repo is not None:\\n\",",
          "104:     \"        find_repo[0] += 1\\n\",",
          "105:     \"        repo_urls[name] = repo\\n\",",
          "106:     \"    else:\\n\",",
          "107:     \"        find_repo[1] += 1\\n\",",
          "108:     \"\\n\",",
          "109:     \"y2 = numpy.array(find_repo)\\n\",",
          "110:     \"plt.pie(y2, labels = labels, autopct = \\\"%1.2f%%\\\")\\n\",",
          "111:     \"plt.show()\"",
          "112:    ]",
          "113:   },",
          "114:   {",
          "115:    \"cell_type\": \"markdown\",",
          "116:    \"metadata\": {},",
          "117:    \"source\": [",
          "118:     \"## Find suitable tag\\n\",",
          "119:     \"\\n\",",
          "120:     \"TODO\\n\"",
          "121:    ]",
          "122:   }",
          "123:  ],",
          "124:  \"metadata\": {",
          "125:   \"kernelspec\": {",
          "126:    \"display_name\": \"Python 3 (ipykernel)\",",
          "127:    \"language\": \"python\",",
          "128:    \"name\": \"python3\"",
          "129:   },",
          "130:   \"language_info\": {",
          "131:    \"codemirror_mode\": {",
          "132:     \"name\": \"ipython\",",
          "133:     \"version\": 3",
          "134:    },",
          "135:    \"file_extension\": \".py\",",
          "136:    \"mimetype\": \"text/x-python\",",
          "137:    \"name\": \"python\",",
          "138:    \"nbconvert_exporter\": \"python\",",
          "139:    \"pygments_lexer\": \"ipython3\",",
          "140:    \"version\": \"3.10.8\"",
          "141:   }",
          "142:  },",
          "143:  \"nbformat\": 4,",
          "144:  \"nbformat_minor\": 1",
          "145: }",
          "",
          "---------------"
        ],
        "notebooks/resources/all_package_info/build.py||notebooks/resources/all_package_info/build.py": [
          "File: notebooks/resources/all_package_info/build.py -> notebooks/resources/all_package_info/build.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "2: import os",
          "4: from guarddog.utils.package_info import get_package_info",
          "6: dir_name = os.path.dirname(__file__)",
          "7: with open(os.path.join(dir_name, \"../../../guarddog/analyzer/metadata/resources/top_pypi_packages.json\"), \"r\") as fd:",
          "8:     raw = json.load(fd)",
          "9:     PACKAGES = list(",
          "10:         map(",
          "11:             lambda x: x[\"project\"],",
          "12:             raw[\"rows\"]",
          "13:         )",
          "14:     )",
          "15: ALL_INFO = {}",
          "16: i = 0",
          "17: l = len(PACKAGES)",
          "18: for name in PACKAGES:",
          "19:     i += 1",
          "20:     try:",
          "21:         ALL_INFO[name] = get_package_info(name)",
          "22:         print(name, \"ok\", i, \"/\", l)",
          "23:     except Exception:",
          "24:         print(name, \"nok\", i, \"/\", l)",
          "26: with open(os.path.join(dir_name, 'all_info.json'), \"w\") as file:",
          "27:     json.dump(ALL_INFO, file)",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: [[package]]",
          "32: name = \"certifi\"",
          "34: description = \"Python package for providing Mozilla's CA Bundle.\"",
          "35: category = \"main\"",
          "36: optional = false",
          "37: python-versions = \">=3.6\"",
          "39: [[package]]",
          "40: name = \"charset-normalizer\"",
          "41: version = \"2.1.0\"",
          "",
          "[Removed Lines]",
          "33: version = \" 2022.12.07\"",
          "",
          "[Added Lines]",
          "33: version = \"2022.12.7\"",
          "39: [[package]]",
          "40: name = \"cffi\"",
          "41: version = \"1.15.1\"",
          "42: description = \"Foreign Function Interface for Python calling C code.\"",
          "43: category = \"main\"",
          "44: optional = false",
          "45: python-versions = \"*\"",
          "47: [package.dependencies]",
          "48: pycparser = \"*\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: optional = false",
          "82: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"",
          "84: [[package]]",
          "85: name = \"defusedxml\"",
          "86: version = \"0.7.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: [[package]]",
          "96: name = \"configparser\"",
          "97: version = \"5.3.0\"",
          "98: description = \"Updated configparser from stdlib for earlier Pythons.\"",
          "99: category = \"main\"",
          "100: optional = false",
          "101: python-versions = \">=3.7\"",
          "103: [package.extras]",
          "104: docs = [\"jaraco.packaging (>=9)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx\"]",
          "105: testing = [\"flake8 (<5)\", \"pytest (>=6)\", \"pytest-black (>=0.3.7)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=1.3)\", \"pytest-flake8\", \"pytest-mypy (>=0.9.1)\", \"types-backports\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328: optional = false",
          "329: python-versions = \">=3.6\"",
          "331: [[package]]",
          "332: name = \"pyflakes\"",
          "333: version = \"2.5.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354: [[package]]",
          "355: name = \"pycparser\"",
          "356: version = \"2.21\"",
          "357: description = \"C parser in Python\"",
          "358: category = \"main\"",
          "359: optional = false",
          "360: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336: optional = false",
          "337: python-versions = \">=3.6\"",
          "339: [[package]]",
          "340: name = \"pyparsing\"",
          "341: version = \"3.0.9\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370: [[package]]",
          "371: name = \"pygit2\"",
          "372: version = \"1.11.1\"",
          "373: description = \"Python bindings for libgit2.\"",
          "374: category = \"main\"",
          "375: optional = false",
          "376: python-versions = \">=3.8\"",
          "378: [package.dependencies]",
          "379: cffi = \">=1.9.1\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "645: [metadata]",
          "646: lock-version = \"1.1\"",
          "647: python-versions = \">=3.10,<4\"",
          "650: [metadata.files]",
          "651: attrs = [",
          "",
          "[Removed Lines]",
          "648: content-hash = \"47bd547f13e855be6e75848c35dd03ba16830662e50b30a8576fa60a508d5556\"",
          "",
          "[Added Lines]",
          "690: content-hash = \"c7f45b60abe8b102c46f2b34d7386bfc8951b5fbee2ca5195b07b592a7d788f2\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "661:     {file = \"bracex-2.3.post1.tar.gz\", hash = \"sha256:e7b23fc8b2cd06d3dec0692baabecb249dda94e06a617901ff03a6c56fd71693\"},",
          "662: ]",
          "663: certifi = [",
          "666: ]",
          "667: charset-normalizer = [",
          "668:     {file = \"charset-normalizer-2.1.0.tar.gz\", hash = \"sha256:575e708016ff3a5e3681541cb9d79312c416835686d054a23accb873b254f413\"},",
          "",
          "[Removed Lines]",
          "664:     {file = \"certifi-2022.9.24-py3-none-any.whl\", hash = \"sha256:90c1a32f1d68f940488354e36370f6cca89f0f106db09518524c88d6ed83f382\"},",
          "665:     {file = \"certifi-2022.9.24.tar.gz\", hash = \"sha256:0d9c601124e5a6ba9712dbc60d9c53c21e34f5f641fe83002317394311bdce14\"},",
          "",
          "[Added Lines]",
          "706:     {file = \"certifi-2022.12.7-py3-none-any.whl\", hash = \"sha256:4ad3232f5e926d6718ec31cfc1fcadfde020920e278684144551c91769c7bc18\"},",
          "707:     {file = \"certifi-2022.12.7.tar.gz\", hash = \"sha256:35824b4c3a97115964b408844d64aa14db1cc518f6562e8d7261699d1350a9e3\"},",
          "708: ]",
          "709: cffi = [",
          "710:     {file = \"cffi-1.15.1-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:a66d3508133af6e8548451b25058d5812812ec3798c886bf38ed24a98216fab2\"},",
          "711:     {file = \"cffi-1.15.1-cp27-cp27m-manylinux1_i686.whl\", hash = \"sha256:470c103ae716238bbe698d67ad020e1db9d9dba34fa5a899b5e21577e6d52ed2\"},",
          "712:     {file = \"cffi-1.15.1-cp27-cp27m-manylinux1_x86_64.whl\", hash = \"sha256:9ad5db27f9cabae298d151c85cf2bad1d359a1b9c686a275df03385758e2f914\"},",
          "713:     {file = \"cffi-1.15.1-cp27-cp27m-win32.whl\", hash = \"sha256:b3bbeb01c2b273cca1e1e0c5df57f12dce9a4dd331b4fa1635b8bec26350bde3\"},",
          "714:     {file = \"cffi-1.15.1-cp27-cp27m-win_amd64.whl\", hash = \"sha256:e00b098126fd45523dd056d2efba6c5a63b71ffe9f2bbe1a4fe1716e1d0c331e\"},",
          "715:     {file = \"cffi-1.15.1-cp27-cp27mu-manylinux1_i686.whl\", hash = \"sha256:d61f4695e6c866a23a21acab0509af1cdfd2c013cf256bbf5b6b5e2695827162\"},",
          "716:     {file = \"cffi-1.15.1-cp27-cp27mu-manylinux1_x86_64.whl\", hash = \"sha256:ed9cb427ba5504c1dc15ede7d516b84757c3e3d7868ccc85121d9310d27eed0b\"},",
          "717:     {file = \"cffi-1.15.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:39d39875251ca8f612b6f33e6b1195af86d1b3e60086068be9cc053aa4376e21\"},",
          "718:     {file = \"cffi-1.15.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:285d29981935eb726a4399badae8f0ffdff4f5050eaa6d0cfc3f64b857b77185\"},",
          "719:     {file = \"cffi-1.15.1-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3eb6971dcff08619f8d91607cfc726518b6fa2a9eba42856be181c6d0d9515fd\"},",
          "720:     {file = \"cffi-1.15.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:21157295583fe8943475029ed5abdcf71eb3911894724e360acff1d61c1d54bc\"},",
          "721:     {file = \"cffi-1.15.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5635bd9cb9731e6d4a1132a498dd34f764034a8ce60cef4f5319c0541159392f\"},",
          "722:     {file = \"cffi-1.15.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2012c72d854c2d03e45d06ae57f40d78e5770d252f195b93f581acf3ba44496e\"},",
          "723:     {file = \"cffi-1.15.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dd86c085fae2efd48ac91dd7ccffcfc0571387fe1193d33b6394db7ef31fe2a4\"},",
          "724:     {file = \"cffi-1.15.1-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:fa6693661a4c91757f4412306191b6dc88c1703f780c8234035eac011922bc01\"},",
          "725:     {file = \"cffi-1.15.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:59c0b02d0a6c384d453fece7566d1c7e6b7bae4fc5874ef2ef46d56776d61c9e\"},",
          "726:     {file = \"cffi-1.15.1-cp310-cp310-win32.whl\", hash = \"sha256:cba9d6b9a7d64d4bd46167096fc9d2f835e25d7e4c121fb2ddfc6528fb0413b2\"},",
          "727:     {file = \"cffi-1.15.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:ce4bcc037df4fc5e3d184794f27bdaab018943698f4ca31630bc7f84a7b69c6d\"},",
          "728:     {file = \"cffi-1.15.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:3d08afd128ddaa624a48cf2b859afef385b720bb4b43df214f85616922e6a5ac\"},",
          "729:     {file = \"cffi-1.15.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:3799aecf2e17cf585d977b780ce79ff0dc9b78d799fc694221ce814c2c19db83\"},",
          "730:     {file = \"cffi-1.15.1-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a591fe9e525846e4d154205572a029f653ada1a78b93697f3b5a8f1f2bc055b9\"},",
          "731:     {file = \"cffi-1.15.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3548db281cd7d2561c9ad9984681c95f7b0e38881201e157833a2342c30d5e8c\"},",
          "732:     {file = \"cffi-1.15.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:91fc98adde3d7881af9b59ed0294046f3806221863722ba7d8d120c575314325\"},",
          "733:     {file = \"cffi-1.15.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:94411f22c3985acaec6f83c6df553f2dbe17b698cc7f8ae751ff2237d96b9e3c\"},",
          "734:     {file = \"cffi-1.15.1-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:03425bdae262c76aad70202debd780501fabeaca237cdfddc008987c0e0f59ef\"},",
          "735:     {file = \"cffi-1.15.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:cc4d65aeeaa04136a12677d3dd0b1c0c94dc43abac5860ab33cceb42b801c1e8\"},",
          "736:     {file = \"cffi-1.15.1-cp311-cp311-win32.whl\", hash = \"sha256:a0f100c8912c114ff53e1202d0078b425bee3649ae34d7b070e9697f93c5d52d\"},",
          "737:     {file = \"cffi-1.15.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:04ed324bda3cda42b9b695d51bb7d54b680b9719cfab04227cdd1e04e5de3104\"},",
          "738:     {file = \"cffi-1.15.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:50a74364d85fd319352182ef59c5c790484a336f6db772c1a9231f1c3ed0cbd7\"},",
          "739:     {file = \"cffi-1.15.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e263d77ee3dd201c3a142934a086a4450861778baaeeb45db4591ef65550b0a6\"},",
          "740:     {file = \"cffi-1.15.1-cp36-cp36m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:cec7d9412a9102bdc577382c3929b337320c4c4c4849f2c5cdd14d7368c5562d\"},",
          "741:     {file = \"cffi-1.15.1-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:4289fc34b2f5316fbb762d75362931e351941fa95fa18789191b33fc4cf9504a\"},",
          "742:     {file = \"cffi-1.15.1-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:173379135477dc8cac4bc58f45db08ab45d228b3363adb7af79436135d028405\"},",
          "743:     {file = \"cffi-1.15.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:6975a3fac6bc83c4a65c9f9fcab9e47019a11d3d2cf7f3c0d03431bf145a941e\"},",
          "744:     {file = \"cffi-1.15.1-cp36-cp36m-win32.whl\", hash = \"sha256:2470043b93ff09bf8fb1d46d1cb756ce6132c54826661a32d4e4d132e1977adf\"},",
          "745:     {file = \"cffi-1.15.1-cp36-cp36m-win_amd64.whl\", hash = \"sha256:30d78fbc8ebf9c92c9b7823ee18eb92f2e6ef79b45ac84db507f52fbe3ec4497\"},",
          "746:     {file = \"cffi-1.15.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:198caafb44239b60e252492445da556afafc7d1e3ab7a1fb3f0584ef6d742375\"},",
          "747:     {file = \"cffi-1.15.1-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:5ef34d190326c3b1f822a5b7a45f6c4535e2f47ed06fec77d3d799c450b2651e\"},",
          "748:     {file = \"cffi-1.15.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8102eaf27e1e448db915d08afa8b41d6c7ca7a04b7d73af6514df10a3e74bd82\"},",
          "749:     {file = \"cffi-1.15.1-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5df2768244d19ab7f60546d0c7c63ce1581f7af8b5de3eb3004b9b6fc8a9f84b\"},",
          "750:     {file = \"cffi-1.15.1-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a8c4917bd7ad33e8eb21e9a5bbba979b49d9a97acb3a803092cbc1133e20343c\"},",
          "751:     {file = \"cffi-1.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0e2642fe3142e4cc4af0799748233ad6da94c62a8bec3a6648bf8ee68b1c7426\"},",
          "752:     {file = \"cffi-1.15.1-cp37-cp37m-win32.whl\", hash = \"sha256:e229a521186c75c8ad9490854fd8bbdd9a0c9aa3a524326b55be83b54d4e0ad9\"},",
          "753:     {file = \"cffi-1.15.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:a0b71b1b8fbf2b96e41c4d990244165e2c9be83d54962a9a1d118fd8657d2045\"},",
          "754:     {file = \"cffi-1.15.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:320dab6e7cb2eacdf0e658569d2575c4dad258c0fcc794f46215e1e39f90f2c3\"},",
          "755:     {file = \"cffi-1.15.1-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1e74c6b51a9ed6589199c787bf5f9875612ca4a8a0785fb2d4a84429badaf22a\"},",
          "756:     {file = \"cffi-1.15.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a5c84c68147988265e60416b57fc83425a78058853509c1b0629c180094904a5\"},",
          "757:     {file = \"cffi-1.15.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3b926aa83d1edb5aa5b427b4053dc420ec295a08e40911296b9eb1b6170f6cca\"},",
          "758:     {file = \"cffi-1.15.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:87c450779d0914f2861b8526e035c5e6da0a3199d8f1add1a665e1cbc6fc6d02\"},",
          "759:     {file = \"cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4f2c9f67e9821cad2e5f480bc8d83b8742896f1242dba247911072d4fa94c192\"},",
          "760:     {file = \"cffi-1.15.1-cp38-cp38-win32.whl\", hash = \"sha256:8b7ee99e510d7b66cdb6c593f21c043c248537a32e0bedf02e01e9553a172314\"},",
          "761:     {file = \"cffi-1.15.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:00a9ed42e88df81ffae7a8ab6d9356b371399b91dbdf0c3cb1e84c03a13aceb5\"},",
          "762:     {file = \"cffi-1.15.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:54a2db7b78338edd780e7ef7f9f6c442500fb0d41a5a4ea24fff1c929d5af585\"},",
          "763:     {file = \"cffi-1.15.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:fcd131dd944808b5bdb38e6f5b53013c5aa4f334c5cad0c72742f6eba4b73db0\"},",
          "764:     {file = \"cffi-1.15.1-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7473e861101c9e72452f9bf8acb984947aa1661a7704553a9f6e4baa5ba64415\"},",
          "765:     {file = \"cffi-1.15.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6c9a799e985904922a4d207a94eae35c78ebae90e128f0c4e521ce339396be9d\"},",
          "766:     {file = \"cffi-1.15.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3bcde07039e586f91b45c88f8583ea7cf7a0770df3a1649627bf598332cb6984\"},",
          "767:     {file = \"cffi-1.15.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:33ab79603146aace82c2427da5ca6e58f2b3f2fb5da893ceac0c42218a40be35\"},",
          "768:     {file = \"cffi-1.15.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5d598b938678ebf3c67377cdd45e09d431369c3b1a5b331058c338e201f12b27\"},",
          "769:     {file = \"cffi-1.15.1-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:db0fbb9c62743ce59a9ff687eb5f4afbe77e5e8403d6697f7446e5f609976f76\"},",
          "770:     {file = \"cffi-1.15.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:98d85c6a2bef81588d9227dde12db8a7f47f639f4a17c9ae08e773aa9c697bf3\"},",
          "771:     {file = \"cffi-1.15.1-cp39-cp39-win32.whl\", hash = \"sha256:40f4774f5a9d4f5e344f31a32b5096977b5d48560c5592e2f3d2c4374bd543ee\"},",
          "772:     {file = \"cffi-1.15.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:70df4e3b545a17496c9b3f41f5115e69a4f2e77e94e1d2a8e1070bc0c38c8a3c\"},",
          "773:     {file = \"cffi-1.15.1.tar.gz\", hash = \"sha256:d400bfb9a37b1351253cb402671cea7e89bdecc294e8016a707f6d1d8ac934f9\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "680:     {file = \"colorama-0.4.5-py2.py3-none-any.whl\", hash = \"sha256:854bf444933e37f5824ae7bfc1e98d5bce2ebe4160d46b5edf346a89358e99da\"},",
          "681:     {file = \"colorama-0.4.5.tar.gz\", hash = \"sha256:e6c6b4334fc50988a639d9b98aa429a0b57da6e17b9a44f0451f930b6967b7a4\"},",
          "682: ]",
          "683: defusedxml = [",
          "684:     {file = \"defusedxml-0.7.1-py2.py3-none-any.whl\", hash = \"sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61\"},",
          "685:     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791: configparser = [",
          "792:     {file = \"configparser-5.3.0-py3-none-any.whl\", hash = \"sha256:b065779fd93c6bf4cee42202fa4351b4bb842e96a3fb469440e484517a49b9fa\"},",
          "793:     {file = \"configparser-5.3.0.tar.gz\", hash = \"sha256:8be267824b541c09b08db124917f48ab525a6c3e837011f3130781a224c57090\"},",
          "794: ]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "783:     {file = \"pycodestyle-2.9.1-py2.py3-none-any.whl\", hash = \"sha256:d1735fc58b418fd7c5f658d28d943854f8a849b01a5d0a1e6f3f3fdd0166804b\"},",
          "784:     {file = \"pycodestyle-2.9.1.tar.gz\", hash = \"sha256:2c9607871d58c76354b697b42f5d57e1ada7d261c261efac224b664affdc5785\"},",
          "785: ]",
          "786: pyflakes = [",
          "787:     {file = \"pyflakes-2.5.0-py2.py3-none-any.whl\", hash = \"sha256:4579f67d887f804e67edb544428f264b7b24f435b263c4614f384135cea553d2\"},",
          "788:     {file = \"pyflakes-2.5.0.tar.gz\", hash = \"sha256:491feb020dca48ccc562a8c0cbe8df07ee13078df59813b83959cbdada312ea3\"},",
          "789: ]",
          "790: pyparsing = [",
          "791:     {file = \"pyparsing-3.0.9-py3-none-any.whl\", hash = \"sha256:5026bae9a10eeaefb61dab2f09052b9f4307d44aee4eda64b309723d8d206bbc\"},",
          "792:     {file = \"pyparsing-3.0.9.tar.gz\", hash = \"sha256:2b020ecf7d21b687f219b71ecad3631f644a47f01403fa1d1036b0c6416d70fb\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "898: pycparser = [",
          "899:     {file = \"pycparser-2.21-py2.py3-none-any.whl\", hash = \"sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9\"},",
          "900:     {file = \"pycparser-2.21.tar.gz\", hash = \"sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206\"},",
          "901: ]",
          "906: pygit2 = [",
          "907:     {file = \"pygit2-1.11.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:263e05ac655a4ce0a1083aaaedfd0a900b8dee2c3bb3ecf4f4e504a404467d1f\"},",
          "908:     {file = \"pygit2-1.11.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ee6b4a0e181c576cdb64b1568bfbff3d1c2cd7e99808f578c8b08875c0f43739\"},",
          "909:     {file = \"pygit2-1.11.1-cp310-cp310-manylinux_2_24_aarch64.whl\", hash = \"sha256:d1b5fcaac1f29337f2d1465fa095e2e375b76a06385bda9391cb418c7937fb54\"},",
          "910:     {file = \"pygit2-1.11.1-cp310-cp310-manylinux_2_24_x86_64.whl\", hash = \"sha256:96ff745d3199909d06cab5e419a6b953be99992414a08ec4dddb682f395de8f1\"},",
          "911:     {file = \"pygit2-1.11.1-cp310-cp310-win32.whl\", hash = \"sha256:b3c8726f0c9a2b0e04aac37b18027c58c2697b9c021d3458b28bc250b9b6aecf\"},",
          "912:     {file = \"pygit2-1.11.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:f42409d25bbfc090fd1af1f5f47584d7e0c4212b037a7f86639a02c30420c6ee\"},",
          "913:     {file = \"pygit2-1.11.1-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:29f89d96bbb404ca1566418463521039903094fad2f81a76d7083810d2ea3aad\"},",
          "914:     {file = \"pygit2-1.11.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:d5c158b9430c5e76ca728b1a214bf21d355af6ac6e2da86ed17775b870b6c6eb\"},",
          "915:     {file = \"pygit2-1.11.1-cp311-cp311-manylinux_2_24_aarch64.whl\", hash = \"sha256:6c3434b143e7570ec45cd1a0e344fe7a12e64b99e7155fa38b74f724c8fc243c\"},",
          "916:     {file = \"pygit2-1.11.1-cp311-cp311-manylinux_2_24_x86_64.whl\", hash = \"sha256:550aa503c86ef0061ce64d61c3672b15b500c2b1e4224c405acecfac2211b5d9\"},",
          "917:     {file = \"pygit2-1.11.1-cp311-cp311-win32.whl\", hash = \"sha256:f270f86a0185ca2064e1aa6b8db3bb677b1bf76ee35f48ca5ce28a921fad5632\"},",
          "918:     {file = \"pygit2-1.11.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:56b9deeab214653805214f05337f5e9552b47bf268c285551f20ea51a6056c3e\"},",
          "919:     {file = \"pygit2-1.11.1-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:3c5838e6516abc4384498f4b4c7f88578221596dc2ba8db2320ff2cfebe9787e\"},",
          "920:     {file = \"pygit2-1.11.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a886aab5aae8d8db572e20b9f56c13cd506775265222ea7f35b2c781e4fa3a5e\"},",
          "921:     {file = \"pygit2-1.11.1-cp38-cp38-manylinux_2_24_aarch64.whl\", hash = \"sha256:3be4534180edd53e3e1da93c5b091975566bfdffdc73f21930d79fef096a25d2\"},",
          "922:     {file = \"pygit2-1.11.1-cp38-cp38-manylinux_2_24_x86_64.whl\", hash = \"sha256:4d6209c703764ae0ba57b17038482f3e54f432f80f88ccd490d7f8b70b167db6\"},",
          "923:     {file = \"pygit2-1.11.1-cp38-cp38-win32.whl\", hash = \"sha256:ddb032fa71d4b4a64bf101e37eaa21f5369f20a862b5e34bbc33854a3a35f641\"},",
          "924:     {file = \"pygit2-1.11.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:f8de0091e5eeaea2004f63f7dcb4540780f2124f68c0bcb670ae0fa9ada8bf66\"},",
          "925:     {file = \"pygit2-1.11.1-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:9b44674e53efa9eca36e44f2f3d1a29e53e78649ba13105ae0b037d557f2c076\"},",
          "926:     {file = \"pygit2-1.11.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:0170f31c2efb15f6779689df328c05a8005ecb2b92784a37ff967d713cdafe82\"},",
          "927:     {file = \"pygit2-1.11.1-cp39-cp39-manylinux_2_24_aarch64.whl\", hash = \"sha256:960a55ff78f48887a7aa8ece952aad0f52f0a2ba1ad7bddd7064fbbefd85dfbb\"},",
          "928:     {file = \"pygit2-1.11.1-cp39-cp39-manylinux_2_24_x86_64.whl\", hash = \"sha256:df722c90fb54a42fa019dcf8d8f82961c3099c3024f1fda46c53e0886ff8f0f3\"},",
          "929:     {file = \"pygit2-1.11.1-cp39-cp39-win32.whl\", hash = \"sha256:3b091e7fd00dd2a2cd3a6b5e235b6cbfbc1c07f15ee83a5cb3f188e1d6d1bca1\"},",
          "930:     {file = \"pygit2-1.11.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:da040dc28800831bcbefef0850466739f103bfc769d952bd10c449646d52ce8f\"},",
          "931:     {file = \"pygit2-1.11.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:585daa3956f1dc10d08e3459c20b57be42c7f9c0fbde21e797b3a00b5948f061\"},",
          "932:     {file = \"pygit2-1.11.1-pp38-pypy38_pp73-manylinux_2_24_aarch64.whl\", hash = \"sha256:273878adeced2aec7885745b73fffb91a8e67868c105bf881b61008d42497ad6\"},",
          "933:     {file = \"pygit2-1.11.1-pp38-pypy38_pp73-manylinux_2_24_x86_64.whl\", hash = \"sha256:48cfd72283a08a9226aca115870799ee92898d692699f541a3b3f519805108ec\"},",
          "934:     {file = \"pygit2-1.11.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:a9ca4cb2481d2df14d23c765facef325f717d9a3966a986b86e88d92eef11929\"},",
          "935:     {file = \"pygit2-1.11.1-pp39-pypy39_pp73-manylinux_2_24_aarch64.whl\", hash = \"sha256:d5f64a424d9123b047458b0107c5dd33559184b56a1f58b10056ea5cbac74360\"},",
          "936:     {file = \"pygit2-1.11.1-pp39-pypy39_pp73-manylinux_2_24_x86_64.whl\", hash = \"sha256:f13e190cc080bde093138e12bcb609500276227e3e8e8bd8765a2fd49ae2efb8\"},",
          "937:     {file = \"pygit2-1.11.1.tar.gz\", hash = \"sha256:793f583fd33620f0ac38376db0f57768ef2922b89b459e75b1ac440377eb64ec\"},",
          "938: ]",
          "",
          "---------------"
        ],
        "scripts/evaluator/evaluator.py||scripts/evaluator/evaluator.py": [
          "File: scripts/evaluator/evaluator.py -> scripts/evaluator/evaluator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         for name in package_names:",
          "130:             package_path = os.path.join(path, name)",
          "131:             package_info = {\"info\": {\"name\": name}}",
          "133:             scan_results[name] = package_results",
          "135:             progress_bar.update()",
          "",
          "[Removed Lines]",
          "132:             package_results = self.analyzer.analyze(package_path, package_info, rules)[\"results\"]",
          "",
          "[Added Lines]",
          "132:             package_results = self.analyzer.analyze(package_path, package_info, rules, name)[\"results\"]",
          "",
          "---------------"
        ],
        "tests/analyzer/metadata/test_empty_information.py||tests/analyzer/metadata/test_empty_information.py": [
          "File: tests/analyzer/metadata/test_empty_information.py -> tests/analyzer/metadata/test_empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import pytest",
          "7: from guarddog.analyzer.metadata.npm import NPMEmptyInfoDetector",
          "8: from guarddog.analyzer.metadata.pypi import PypiEmptyInfoDetector",
          "9: from tests.analyzer.metadata.resources.sample_project_info import (",
          "",
          "[Removed Lines]",
          "6: from guarddog.analyzer.metadata.empty_information import EmptyInfoDetector",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/analyzer/metadata/test_release_zero.py||tests/analyzer/metadata/test_release_zero.py": [
          "File: tests/analyzer/metadata/test_release_zero.py -> tests/analyzer/metadata/test_release_zero.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from guarddog.analyzer.metadata.npm import NPMReleaseZeroDetector",
          "9: from guarddog.analyzer.metadata.pypi import PypiReleaseZeroDetector",
          "11: from tests.analyzer.metadata.resources.sample_project_info import (",
          "12:     PACKAGE_INFO,",
          "13:     generate_project_info,",
          "",
          "[Removed Lines]",
          "10: from guarddog.analyzer.metadata.release_zero import ReleaseZeroDetector",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/analyzer/metadata/test_repository_integrity_mismatch.py||tests/analyzer/metadata/test_repository_integrity_mismatch.py": [
          "File: tests/analyzer/metadata/test_repository_integrity_mismatch.py -> tests/analyzer/metadata/test_repository_integrity_mismatch.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from copy import deepcopy",
          "3: from guarddog.analyzer.metadata.pypi import PypiIntegrityMismatchDetector",
          "4: from tests.analyzer.metadata.resources.sample_project_info import PACKAGE_INFO",
          "7: def test_no_github_links():",
          "8:     current_info = deepcopy(PACKAGE_INFO)",
          "9:     current_info[\"info\"][\"home_page\"] = \"\"",
          "10:     current_info[\"info\"][\"project_urls\"][\"Homepage\"] = \"\"",
          "11:     detector = PypiIntegrityMismatchDetector()",
          "12:     match, message = detector.detect(current_info, name=\"\", path=\"\")",
          "13:     assert not match",
          "14:     assert message == \"Could not find any GitHub url in the project's description\"",
          "17: def test_no_good_github_links():",
          "18:     current_info = deepcopy(PACKAGE_INFO)",
          "19:     current_info[\"info\"][\"home_page\"] = \"\"",
          "20:     current_info[\"info\"][\"project_urls\"][\"Homepage\"] = \"\"",
          "21:     current_info[\"info\"][\"summary\"] = \"https://github.com/pypa/sampleproject\"",
          "22:     detector = PypiIntegrityMismatchDetector()",
          "23:     match, message = detector.detect(current_info, name=\"mypackage\", path=\"\")",
          "24:     assert not match",
          "25:     assert message == \"Could not find a good GitHub url in the project's description\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2b1a986ee952c37feac8eadc96847bf3af4f55e",
      "candidate_info": {
        "commit_hash": "a2b1a986ee952c37feac8eadc96847bf3af4f55e",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/a2b1a986ee952c37feac8eadc96847bf3af4f55e",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump requests from 2.28.2 to 2.29.0\n\nBumps [requests](https://github.com/psf/requests) from 2.28.2 to 2.29.0.\n- [Release notes](https://github.com/psf/requests/releases)\n- [Changelog](https://github.com/psf/requests/blob/main/HISTORY.md)\n- [Commits](https://github.com/psf/requests/compare/v2.28.2...v2.29.0)\n\n---\nupdated-dependencies:\n- dependency-name: requests\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "862: [[package]]",
          "863: name = \"requests\"",
          "865: description = \"Python HTTP for Humans.\"",
          "866: category = \"main\"",
          "867: optional = false",
          "869: files = [",
          "872: ]",
          "874: [package.dependencies]",
          "",
          "[Removed Lines]",
          "864: version = \"2.28.2\"",
          "868: python-versions = \">=3.7, <4\"",
          "870:     {file = \"requests-2.28.2-py3-none-any.whl\", hash = \"sha256:64299f4909223da747622c030b781c0d7811e359c37124b4bd368fb8c6518baa\"},",
          "871:     {file = \"requests-2.28.2.tar.gz\", hash = \"sha256:98b1b2782e3c6c4904938b84c0eb932721069dfdb9134313beff7c83c2df24bf\"},",
          "",
          "[Added Lines]",
          "864: version = \"2.29.0\"",
          "868: python-versions = \">=3.7\"",
          "870:     {file = \"requests-2.29.0-py3-none-any.whl\", hash = \"sha256:e8f3c9be120d3333921d213eef078af392fba3933ab7ed2d1cba3b56f2568c3b\"},",
          "871:     {file = \"requests-2.29.0.tar.gz\", hash = \"sha256:f2e34a75f4749019bb0e3effb66683630e4ffeaf75819fb51bebef1bf5aef059\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1238: [metadata]",
          "1239: lock-version = \"2.0\"",
          "1240: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1241: content-hash = \"0fba08aee8ab0e8718b9e8a57319f8d9b9d72c7a78c779e02590d4ea1c3c74cb\"",
          "",
          "[Added Lines]",
          "1241: content-hash = \"700ef42411b1f2fad81236a918465c64af3c2a2d267a02567410797b0abd44af\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b266ece0d8c1c479c49289c27a6da00f1fa8f47",
      "candidate_info": {
        "commit_hash": "4b266ece0d8c1c479c49289c27a6da00f1fa8f47",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/4b266ece0d8c1c479c49289c27a6da00f1fa8f47",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump pathspec from 0.11.0 to 0.11.1\n\nBumps [pathspec](https://github.com/cpburnz/python-pathspec) from 0.11.0 to 0.11.1.\n- [Release notes](https://github.com/cpburnz/python-pathspec/releases)\n- [Changelog](https://github.com/cpburnz/python-pathspec/blob/master/CHANGES.rst)\n- [Commits](https://github.com/cpburnz/python-pathspec/compare/v0.11.0...v0.11.1)\n\n---\nupdated-dependencies:\n- dependency-name: pathspec\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: [[package]]",
          "469: name = \"pathspec\"",
          "471: description = \"Utility library for gitignore style pattern matching of file paths.\"",
          "472: category = \"main\"",
          "473: optional = false",
          "474: python-versions = \">=3.7\"",
          "475: files = [",
          "478: ]",
          "480: [[package]]",
          "",
          "[Removed Lines]",
          "470: version = \"0.11.0\"",
          "476:     {file = \"pathspec-0.11.0-py3-none-any.whl\", hash = \"sha256:3a66eb970cbac598f9e5ccb5b2cf58930cd8e3ed86d393d541eaf2d8b1705229\"},",
          "477:     {file = \"pathspec-0.11.0.tar.gz\", hash = \"sha256:64d338d4e0914e91c1792321e6907b5a593f1ab1851de7fc269557a21b30ebbc\"},",
          "",
          "[Added Lines]",
          "470: version = \"0.11.1\"",
          "476:     {file = \"pathspec-0.11.1-py3-none-any.whl\", hash = \"sha256:d8af70af76652554bd134c22b3e8a1cc46ed7d91edcdd721ef1a0c51a84a5293\"},",
          "477:     {file = \"pathspec-0.11.1.tar.gz\", hash = \"sha256:2798de800fa92780e33acca925945e9a19a133b715067cf165b8866c15a31687\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1239: [metadata]",
          "1240: lock-version = \"2.0\"",
          "1241: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1242: content-hash = \"2d601a33ef39dce7e46de7b3062854b3717981a76d9a466af3ae22515c0c7f73\"",
          "",
          "[Added Lines]",
          "1242: content-hash = \"427b2f5dac940a7e52b9d574adda9532fe5e3e089d25bf5a45a9af934ce8ce18\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5dcf8b649d23079cff2b030e8c50339bea0c5f99",
      "candidate_info": {
        "commit_hash": "5dcf8b649d23079cff2b030e8c50339bea0c5f99",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/5dcf8b649d23079cff2b030e8c50339bea0c5f99",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump pathos from 0.2.9 to 0.3.0\n\nBumps [pathos](https://github.com/uqfoundation/pathos) from 0.2.9 to 0.3.0.\n- [Release notes](https://github.com/uqfoundation/pathos/releases)\n- [Commits](https://github.com/uqfoundation/pathos/compare/pathos-0.2.9...pathos-0.3.0)\n\n---\nupdated-dependencies:\n- dependency-name: pathos\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "449: [[package]]",
          "450: name = \"pathos\"",
          "452: description = \"parallel graph management and execution in heterogeneous computing\"",
          "453: category = \"main\"",
          "454: optional = false",
          "456: files = [",
          "460: ]",
          "462: [package.dependencies]",
          "468: [[package]]",
          "469: name = \"pathspec\"",
          "",
          "[Removed Lines]",
          "451: version = \"0.2.9\"",
          "455: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"",
          "457:     {file = \"pathos-0.2.9-py2-none-any.whl\", hash = \"sha256:6a6ddb514ce2719f63fb88d5ec4f4490e436b636b54f1102d952c9f7c52f18e2\"},",
          "458:     {file = \"pathos-0.2.9-py3-none-any.whl\", hash = \"sha256:1c44373d8692897d5d15a8aa3b3a442ddc0814c5e848f4ff0ded5491f34b1dac\"},",
          "459:     {file = \"pathos-0.2.9.tar.gz\", hash = \"sha256:a8dbddcd3d9af32ada7c6dc088d845588c513a29a0ba19ab9f64c5cd83692934\"},",
          "463: dill = \">=0.3.5.1\"",
          "464: multiprocess = \">=0.70.13\"",
          "465: pox = \">=0.3.1\"",
          "466: ppft = \">=1.7.6.5\"",
          "",
          "[Added Lines]",
          "451: version = \"0.3.0\"",
          "455: python-versions = \">=3.7\"",
          "457:     {file = \"pathos-0.3.0-py3-none-any.whl\", hash = \"sha256:b1f5a79b1c79a594330d451832642ee5bb61dd77dc75ba9e5c72087c77e8994c\"},",
          "458:     {file = \"pathos-0.3.0.tar.gz\", hash = \"sha256:24fa8db51fbd9284da8e191794097c4bb2aa3fce411090e57af6385e61b97e09\"},",
          "462: dill = \">=0.3.6\"",
          "463: multiprocess = \">=0.70.14\"",
          "464: pox = \">=0.3.2\"",
          "465: ppft = \">=1.7.6.6\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1237: [metadata]",
          "1238: lock-version = \"2.0\"",
          "1239: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1240: content-hash = \"d2bd7a63feeb667e7e36b646d97fdbc24929a49e77f27b45c3d1b95b6017a8a6\"",
          "",
          "[Added Lines]",
          "1239: content-hash = \"c46ffcbd59bee2228ddf42c444704cece762bb26209f9fc9b013dcacb3c61eae\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}