{
  "cve_id": "CVE-2020-35873",
  "cve_desc": "An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated because sessions.rs has a use-after-free.",
  "repo": "rusqlite/rusqlite",
  "patch_hash": "ac30e169ae51b262bc8cf7026469851ce39b23c6",
  "patch_info": {
    "commit_hash": "ac30e169ae51b262bc8cf7026469851ce39b23c6",
    "repo": "rusqlite/rusqlite",
    "commit_url": "https://github.com/rusqlite/rusqlite/commit/ac30e169ae51b262bc8cf7026469851ce39b23c6",
    "files": [
      "src/inner_connection.rs",
      "src/lib.rs",
      "src/session.rs"
    ],
    "message": "Use SmallCString in most places",
    "before_after_code_files": [
      "src/inner_connection.rs||src/inner_connection.rs",
      "src/lib.rs||src/lib.rs",
      "src/session.rs||src/session.rs"
    ]
  },
  "patch_diff": {
    "src/inner_connection.rs||src/inner_connection.rs": [
      "File: src/inner_connection.rs -> src/inner_connection.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: use std::os::raw::{c_char, c_int};",
      "3: #[cfg(feature = \"load_extension\")]",
      "4: use std::path::Path;",
      "",
      "[Removed Lines]",
      "1: use std::ffi::CString;",
      "",
      "[Added Lines]",
      "1: use std::ffi::CStr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8: use std::sync::{Arc, Mutex};",
      "10: use super::ffi;",
      "12: use super::{Connection, InterruptHandle, OpenFlags, Result};",
      "13: use crate::error::{error_from_handle, error_from_sqlite_code, Error};",
      "14: use crate::raw_statement::RawStatement;",
      "",
      "[Removed Lines]",
      "11: use super::{str_for_sqlite, str_to_cstring};",
      "",
      "[Added Lines]",
      "11: use super::str_for_sqlite;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "51:     }",
      "53:     pub fn open_with_flags(",
      "55:         flags: OpenFlags,",
      "57:     ) -> Result<InnerConnection> {",
      "58:         #[cfg(not(feature = \"bundled\"))]",
      "59:         ensure_valid_sqlite_version();",
      "",
      "[Removed Lines]",
      "54:         c_path: &CString,",
      "56:         vfs: Option<&CString>,",
      "",
      "[Added Lines]",
      "54:         c_path: &CStr,",
      "56:         vfs: Option<&CStr>,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "171:     }",
      "173:     pub fn execute_batch(&mut self, sql: &str) -> Result<()> {",
      "175:         unsafe {",
      "176:             let r = ffi::sqlite3_exec(",
      "177:                 self.db(),",
      "",
      "[Removed Lines]",
      "174:         let c_sql = str_to_cstring(sql)?;",
      "",
      "[Added Lines]",
      "175:         let c_sql = std::ffi::CString::new(sql)?;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "196:         unsafe {",
      "197:             let mut errmsg: *mut c_char = ptr::null_mut();",
      "198:             let r = if let Some(entry_point) = entry_point {",
      "200:                 ffi::sqlite3_load_extension(",
      "201:                     self.db,",
      "202:                     dylib_str.as_ptr(),",
      "",
      "[Removed Lines]",
      "199:                 let c_entry = str_to_cstring(entry_point)?;",
      "",
      "[Added Lines]",
      "200:                 let c_entry = crate::str_to_cstring(entry_point)?;",
      "",
      "---------------"
    ],
    "src/lib.rs||src/lib.rs": [
      "File: src/lib.rs -> src/lib.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: pub mod vtab;",
      "131: pub(crate) mod util;",
      "134: const STATEMENT_CACHE_DEFAULT_CAPACITY: usize = 16;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132: pub(crate) use util::SmallCString;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "233:     String::from_utf8_lossy(c_slice).into_owned()",
      "234: }",
      "238: }",
      "",
      "[Removed Lines]",
      "236: fn str_to_cstring(s: &str) -> Result<CString> {",
      "237:     Ok(CString::new(s)?)",
      "",
      "[Added Lines]",
      "237: fn str_to_cstring(s: &str) -> Result<SmallCString> {",
      "238:     Ok(SmallCString::new(s)?)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "301:     feature = \"modern_sqlite\"",
      "302: ))]",
      "303: impl DatabaseName<'_> {",
      "305:         use self::DatabaseName::{Attached, Main, Temp};",
      "306:         match *self {",
      "307:             Main => str_to_cstring(\"main\"),",
      "",
      "[Removed Lines]",
      "304:     fn to_cstring(&self) -> Result<CString> {",
      "",
      "[Added Lines]",
      "305:     fn to_cstring(&self) -> Result<util::SmallCString> {",
      "",
      "---------------"
    ],
    "src/session.rs||src/session.rs": [
      "File: src/session.rs -> src/session.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:     pub fn attach(&mut self, table: Option<&str>) -> Result<()> {",
      "104:         let table = if let Some(table) = table {",
      "106:         } else {",
      "108:         };",
      "109:         unsafe { check!(ffi::sqlite3session_attach(self.s, table)) };",
      "110:         Ok(())",
      "111:     }",
      "",
      "[Removed Lines]",
      "105:             str_to_cstring(table)?.as_ptr()",
      "107:             ptr::null()",
      "",
      "[Added Lines]",
      "105:             Some(str_to_cstring(table)?)",
      "107:             None",
      "109:         let table = table.as_ref().map(|s| s.as_ptr()).unwrap_or(ptr::null());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "157:     pub fn diff(&mut self, from: DatabaseName<'_>, table: &str) -> Result<()> {",
      "158:         let from = from.to_cstring()?;",
      "160:         unsafe {",
      "161:             let mut errmsg = ptr::null_mut();",
      "162:             let r =",
      "",
      "[Removed Lines]",
      "159:         let table = str_to_cstring(table)?.as_ptr();",
      "",
      "[Added Lines]",
      "160:         let table = str_to_cstring(table)?;",
      "161:         let table = table.as_ptr();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "abbab7216a8b47108a0e1b7a26e429d6a990d7a6",
      "candidate_info": {
        "commit_hash": "abbab7216a8b47108a0e1b7a26e429d6a990d7a6",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/abbab7216a8b47108a0e1b7a26e429d6a990d7a6",
        "files": [
          "src/util/small_cstr.rs"
        ],
        "message": "Better docs and cleaner SmallCString",
        "before_after_code_files": [
          "src/util/small_cstr.rs||src/util/small_cstr.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rusqlite/rusqlite/pull/705"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/util/small_cstr.rs||src/util/small_cstr.rs": [
          "File: src/util/small_cstr.rs -> src/util/small_cstr.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use smallvec::{smallvec, SmallVec};",
          "2: use std::ffi::{CStr, CString, NulError};",
          "4: #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]",
          "7: impl SmallCString {",
          "8:     #[inline]",
          "",
          "[Removed Lines]",
          "5: pub struct SmallCString(smallvec::SmallVec<[u8; 16]>);",
          "",
          "[Added Lines]",
          "8: pub(crate) struct SmallCString(smallvec::SmallVec<[u8; 16]>);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:         let mut buf = SmallVec::with_capacity(s.len() + 1);",
          "14:         buf.extend_from_slice(s.as_bytes());",
          "15:         buf.push(0);",
          "17:     }",
          "19:     #[inline]",
          "20:     pub fn as_str(&self) -> &str {",
          "24:     }",
          "26:     #[inline]",
          "27:     pub fn as_bytes_without_nul(&self) -> &[u8] {",
          "29:     }",
          "31:     #[inline]",
          "32:     pub fn len(&self) -> usize {",
          "33:         debug_assert_ne!(self.0.len(), 0);",
          "",
          "[Removed Lines]",
          "16:         Ok(Self(buf))",
          "21:         debug_assert!(std::str::from_utf8(&self.as_bytes_without_nul()).is_ok());",
          "23:         unsafe { std::str::from_utf8_unchecked(&self.as_bytes_without_nul()) }",
          "28:         &self.0[..self.0.len() - 1]",
          "",
          "[Added Lines]",
          "19:         let res = Self(buf);",
          "20:         res.debug_checks();",
          "21:         Ok(res)",
          "26:         self.debug_checks();",
          "28:         unsafe { std::str::from_utf8_unchecked(self.as_bytes_without_nul()) }",
          "37:         self.debug_checks();",
          "38:         &self.0[..self.len()]",
          "43:     #[inline]",
          "44:     pub fn as_bytes_with_nul(&self) -> &[u8] {",
          "45:         self.debug_checks();",
          "46:         &self.0",
          "47:     }",
          "49:     #[inline]",
          "50:     #[cfg(debug_assertions)]",
          "51:     fn debug_checks(&self) {",
          "52:         debug_assert_ne!(self.0.len(), 0);",
          "53:         debug_assert_eq!(self.0[self.0.len() - 1], 0);",
          "54:         let strbytes = &self.0[..(self.0.len() - 1)];",
          "55:         debug_assert!(!strbytes.contains(&0));",
          "56:         debug_assert!(std::str::from_utf8(strbytes).is_ok());",
          "57:     }",
          "59:     #[inline]",
          "60:     #[cfg(not(debug_assertions))]",
          "61:     fn debug_checks(&self) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:     }",
          "37:     #[inline]",
          "38:     pub fn is_empty(&self) -> bool {",
          "39:         self.len() == 0",
          "40:     }",
          "42:     #[inline]",
          "43:     pub fn as_cstr(&self) -> &CStr {",
          "46:     }",
          "48:     #[cold]",
          "",
          "[Removed Lines]",
          "44:         debug_assert!(CStr::from_bytes_with_nul(&self.0).is_ok());",
          "45:         unsafe { CStr::from_bytes_with_nul_unchecked(&self.0) }",
          "",
          "[Added Lines]",
          "70:     #[allow(unused)] // clippy wants this function.",
          "77:         let bytes = self.as_bytes_with_nul();",
          "78:         debug_assert!(CStr::from_bytes_with_nul(bytes).is_ok());",
          "79:         unsafe { CStr::from_bytes_with_nul_unchecked(bytes) }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         assert_eq!(SmallCString::default().0, SmallCString::new(\"\").unwrap().0);",
          "105:         assert_eq!(SmallCString::new(\"foo\").unwrap().len(), 3);",
          "107:         assert_eq!(",
          "108:             SmallCString::new(\"foo\").unwrap().as_bytes_without_nul(),",
          "109:             b\"foo\",",
          "",
          "[Removed Lines]",
          "106:         assert_eq!(SmallCString::new(\"foo\").unwrap().0.as_slice(), b\"foo\\0\");",
          "",
          "[Added Lines]",
          "140:         assert_eq!(",
          "141:             SmallCString::new(\"foo\").unwrap().as_bytes_with_nul(),",
          "142:             b\"foo\\0\"",
          "143:         );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "552416039ec700471167c22f32e07d7d2126cea1",
      "candidate_info": {
        "commit_hash": "552416039ec700471167c22f32e07d7d2126cea1",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/552416039ec700471167c22f32e07d7d2126cea1",
        "files": [
          "Cargo.toml",
          "src/lib.rs",
          "src/raw_statement.rs",
          "src/statement.rs",
          "src/util/mod.rs",
          "src/util/param_cache.rs",
          "src/util/small_cstr.rs"
        ],
        "message": "Optimize named params via caching and use of smallvec",
        "before_after_code_files": [
          "src/lib.rs||src/lib.rs",
          "src/raw_statement.rs||src/raw_statement.rs",
          "src/statement.rs||src/statement.rs",
          "src/util/mod.rs||src/util/mod.rs",
          "src/util/param_cache.rs||src/util/param_cache.rs",
          "src/util/small_cstr.rs||src/util/small_cstr.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rusqlite/rusqlite/pull/705"
        ],
        "olp_code_files": {
          "patch": [
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: #[cfg(feature = \"vtab\")]",
          "129: pub mod vtab;",
          "132: const STATEMENT_CACHE_DEFAULT_CAPACITY: usize = 16;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: pub(crate) mod util;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274: #[cfg(not(unix))]",
          "275: fn path_to_cstring(p: &Path) -> Result<CString> {",
          "276:     let s = p.to_str().ok_or_else(|| Error::InvalidPath(p.to_owned()))?;",
          "278: }",
          "",
          "[Removed Lines]",
          "277:     str_to_cstring(s)",
          "",
          "[Added Lines]",
          "279:     Ok(CString::new(s)?)",
          "",
          "---------------"
        ],
        "src/raw_statement.rs||src/raw_statement.rs": [
          "File: src/raw_statement.rs -> src/raw_statement.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #[derive(Debug)]",
          "12: impl RawStatement {",
          "13:     pub unsafe fn new(stmt: *mut ffi::sqlite3_stmt, tail: bool) -> RawStatement {",
          "15:     }",
          "17:     pub fn is_null(&self) -> bool {",
          "",
          "[Removed Lines]",
          "10: pub struct RawStatement(*mut ffi::sqlite3_stmt, bool);",
          "14:         RawStatement(stmt, tail)",
          "",
          "[Added Lines]",
          "10: pub struct RawStatement(*mut ffi::sqlite3_stmt, bool, crate::util::ParamIndexCache);",
          "14:         RawStatement(stmt, tail, Default::default())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         unsafe { ffi::sqlite3_bind_parameter_count(self.0) as usize }",
          "88:     }",
          "96:     }",
          "98:     pub fn clear_bindings(&self) -> c_int {",
          "",
          "[Removed Lines]",
          "90:     pub fn bind_parameter_index(&self, name: &CStr) -> Option<usize> {",
          "91:         let r = unsafe { ffi::sqlite3_bind_parameter_index(self.0, name.as_ptr()) };",
          "92:         match r {",
          "93:             0 => None,",
          "94:             i => Some(i as usize),",
          "95:         }",
          "",
          "[Added Lines]",
          "90:     pub fn bind_parameter_index(&self, name: &str) -> Option<usize> {",
          "91:         self.2.get_or_insert_with(name, |param_cstr| {",
          "92:             let r = unsafe { ffi::sqlite3_bind_parameter_index(self.0, param_cstr.as_ptr()) };",
          "93:             match r {",
          "94:                 0 => None,",
          "95:                 i => Some(i as usize),",
          "96:             }",
          "97:         })",
          "",
          "---------------"
        ],
        "src/statement.rs||src/statement.rs": [
          "File: src/statement.rs -> src/statement.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use std::{convert, fmt, mem, ptr, str};",
          "8: use super::ffi;",
          "10: use super::{",
          "11:     AndThenRows, Connection, Error, MappedRows, RawStatement, Result, Row, Rows, ValueRef,",
          "12: };",
          "",
          "[Removed Lines]",
          "9: use super::{len_as_c_int, str_for_sqlite, str_to_cstring};",
          "",
          "[Added Lines]",
          "9: use super::{len_as_c_int, str_for_sqlite};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:     pub fn parameter_index(&self, name: &str) -> Result<Option<usize>> {",
          "437:     }",
          "439:     fn bind_parameters<P>(&mut self, params: P) -> Result<()>",
          "",
          "[Removed Lines]",
          "435:         let c_name = str_to_cstring(name)?;",
          "436:         Ok(self.stmt.bind_parameter_index(&c_name))",
          "",
          "[Added Lines]",
          "435:         Ok(self.stmt.bind_parameter_index(name))",
          "",
          "---------------"
        ],
        "src/util/mod.rs||src/util/mod.rs": [
          "File: src/util/mod.rs -> src/util/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: pub(crate) mod param_cache;",
          "3: mod small_cstr;",
          "4: pub(crate) use param_cache::ParamIndexCache;",
          "5: pub(crate) use small_cstr::SmallCString;",
          "",
          "---------------"
        ],
        "src/util/param_cache.rs||src/util/param_cache.rs": [
          "File: src/util/param_cache.rs -> src/util/param_cache.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use super::SmallCString;",
          "2: use std::cell::RefCell;",
          "3: use std::collections::BTreeMap;",
          "6: #[derive(Default, Clone, Debug)]",
          "9: pub(crate) struct ParamIndexCache(RefCell<BTreeMap<SmallCString, usize>>);",
          "11: impl ParamIndexCache {",
          "12:     pub fn get_or_insert_with<F>(&self, s: &str, func: F) -> Option<usize>",
          "13:     where",
          "14:         F: FnOnce(&std::ffi::CStr) -> Option<usize>,",
          "15:     {",
          "16:         let mut cache = self.0.borrow_mut();",
          "18:         if let Some(v) = cache.get(s) {",
          "19:             return Some(*v);",
          "20:         }",
          "23:         let name = SmallCString::new(s).ok()?;",
          "24:         let val = func(&name)?;",
          "25:         cache.insert(name, val);",
          "26:         Some(val)",
          "27:     }",
          "28: }",
          "30: #[cfg(test)]",
          "31: mod test {",
          "32:     use super::*;",
          "33:     #[test]",
          "34:     fn test_cache() {",
          "35:         let p = ParamIndexCache::default();",
          "36:         let v = p.get_or_insert_with(\"foo\", |cstr| {",
          "37:             assert_eq!(cstr.to_str().unwrap(), \"foo\");",
          "38:             Some(3)",
          "39:         });",
          "40:         assert_eq!(v, Some(3));",
          "41:         let v = p.get_or_insert_with(\"foo\", |_| {",
          "42:             panic!(\"shouldn't be called this time\");",
          "43:         });",
          "44:         assert_eq!(v, Some(3));",
          "45:         let v = p.get_or_insert_with(\"gar\\0bage\", |_| {",
          "46:             panic!(\"shouldn't be called here either\");",
          "47:         });",
          "48:         assert_eq!(v, None);",
          "49:         let v = p.get_or_insert_with(\"bar\", |cstr| {",
          "50:             assert_eq!(cstr.to_str().unwrap(), \"bar\");",
          "51:             None",
          "52:         });",
          "53:         assert_eq!(v, None);",
          "54:         let v = p.get_or_insert_with(\"bar\", |cstr| {",
          "55:             assert_eq!(cstr.to_str().unwrap(), \"bar\");",
          "56:             Some(30)",
          "57:         });",
          "58:         assert_eq!(v, Some(30));",
          "59:     }",
          "60: }",
          "",
          "---------------"
        ],
        "src/util/small_cstr.rs||src/util/small_cstr.rs": [
          "File: src/util/small_cstr.rs -> src/util/small_cstr.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use smallvec::{smallvec, SmallVec};",
          "2: use std::ffi::{CStr, CString, NulError};",
          "4: #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]",
          "5: pub struct SmallCString(smallvec::SmallVec<[u8; 16]>);",
          "7: impl SmallCString {",
          "8:     #[inline]",
          "9:     pub fn new(s: &str) -> Result<Self, NulError> {",
          "10:         if s.as_bytes().contains(&0u8) {",
          "11:             return Err(Self::fabricate_nul_error(s));",
          "12:         }",
          "13:         let mut buf = SmallVec::with_capacity(s.len() + 1);",
          "14:         buf.extend_from_slice(s.as_bytes());",
          "15:         buf.push(0);",
          "16:         Ok(Self(buf))",
          "17:     }",
          "19:     #[inline]",
          "20:     pub fn as_str(&self) -> &str {",
          "21:         debug_assert!(std::str::from_utf8(&self.as_bytes_without_nul()).is_ok());",
          "23:         unsafe { std::str::from_utf8_unchecked(&self.as_bytes_without_nul()) }",
          "24:     }",
          "26:     #[inline]",
          "27:     pub fn as_bytes_without_nul(&self) -> &[u8] {",
          "28:         &self.0[..self.0.len() - 1]",
          "29:     }",
          "31:     #[inline]",
          "32:     pub fn len(&self) -> usize {",
          "33:         debug_assert_ne!(self.0.len(), 0);",
          "34:         self.0.len() - 1",
          "35:     }",
          "37:     #[inline]",
          "38:     pub fn is_empty(&self) -> bool {",
          "39:         self.len() == 0",
          "40:     }",
          "42:     #[inline]",
          "43:     pub fn as_cstr(&self) -> &CStr {",
          "44:         debug_assert!(CStr::from_bytes_with_nul(&self.0).is_ok());",
          "45:         unsafe { CStr::from_bytes_with_nul_unchecked(&self.0) }",
          "46:     }",
          "48:     #[cold]",
          "49:     fn fabricate_nul_error(b: &str) -> NulError {",
          "50:         CString::new(b).unwrap_err()",
          "51:     }",
          "52: }",
          "54: impl Default for SmallCString {",
          "55:     #[inline]",
          "56:     fn default() -> Self {",
          "57:         Self(smallvec![0])",
          "58:     }",
          "59: }",
          "61: impl std::fmt::Debug for SmallCString {",
          "62:     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "63:         f.debug_tuple(\"SmallCString\").field(&self.as_str()).finish()",
          "64:     }",
          "65: }",
          "67: impl std::ops::Deref for SmallCString {",
          "68:     type Target = CStr;",
          "69:     #[inline]",
          "70:     fn deref(&self) -> &CStr {",
          "71:         self.as_cstr()",
          "72:     }",
          "73: }",
          "75: impl PartialEq<SmallCString> for str {",
          "76:     #[inline]",
          "77:     fn eq(&self, s: &SmallCString) -> bool {",
          "78:         s.as_bytes_without_nul() == self.as_bytes()",
          "79:     }",
          "80: }",
          "82: impl PartialEq<str> for SmallCString {",
          "83:     #[inline]",
          "84:     fn eq(&self, s: &str) -> bool {",
          "85:         self.as_bytes_without_nul() == s.as_bytes()",
          "86:     }",
          "87: }",
          "89: impl std::borrow::Borrow<str> for SmallCString {",
          "90:     #[inline]",
          "91:     fn borrow(&self) -> &str {",
          "92:         self.as_str()",
          "93:     }",
          "94: }",
          "96: #[cfg(test)]",
          "97: mod test {",
          "98:     use super::*;",
          "100:     #[test]",
          "101:     fn test_small_cstring() {",
          "104:         assert_eq!(SmallCString::default().0, SmallCString::new(\"\").unwrap().0);",
          "105:         assert_eq!(SmallCString::new(\"foo\").unwrap().len(), 3);",
          "106:         assert_eq!(SmallCString::new(\"foo\").unwrap().0.as_slice(), b\"foo\\0\");",
          "107:         assert_eq!(",
          "108:             SmallCString::new(\"foo\").unwrap().as_bytes_without_nul(),",
          "109:             b\"foo\",",
          "110:         );",
          "112:         assert_eq!(SmallCString::new(\"\ud83d\ude00\").unwrap().len(), 4);",
          "113:         assert_eq!(",
          "114:             SmallCString::new(\"\ud83d\ude00\").unwrap().0.as_slice(),",
          "115:             b\"\\xf0\\x9f\\x98\\x80\\0\",",
          "116:         );",
          "117:         assert_eq!(",
          "118:             SmallCString::new(\"\ud83d\ude00\").unwrap().as_bytes_without_nul(),",
          "119:             b\"\\xf0\\x9f\\x98\\x80\",",
          "120:         );",
          "122:         assert_eq!(SmallCString::new(\"\").unwrap().len(), 0);",
          "123:         assert!(SmallCString::new(\"\").unwrap().is_empty());",
          "125:         assert_eq!(SmallCString::new(\"\").unwrap().0.as_slice(), b\"\\0\");",
          "126:         assert_eq!(SmallCString::new(\"\").unwrap().as_bytes_without_nul(), b\"\");",
          "128:         assert!(SmallCString::new(\"\\0\").is_err());",
          "129:         assert!(SmallCString::new(\"\\0abc\").is_err());",
          "130:         assert!(SmallCString::new(\"abc\\0\").is_err());",
          "131:     }",
          "132: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ae02726cf1a7daf4caf4632f95059417f05e272",
      "candidate_info": {
        "commit_hash": "1ae02726cf1a7daf4caf4632f95059417f05e272",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/1ae02726cf1a7daf4caf4632f95059417f05e272",
        "files": [
          "src/inner_connection.rs",
          "src/lib.rs"
        ],
        "message": "add ability to open with specified vfs",
        "before_after_code_files": [
          "src/inner_connection.rs||src/inner_connection.rs",
          "src/lib.rs||src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/inner_connection.rs||src/inner_connection.rs",
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/inner_connection.rs||src/inner_connection.rs",
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/inner_connection.rs||src/inner_connection.rs": [
          "File: src/inner_connection.rs -> src/inner_connection.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         }",
          "58:     }",
          "61:         #[cfg(not(feature = \"bundled\"))]",
          "62:         ensure_valid_sqlite_version();",
          "63:         ensure_safe_sqlite_threading_mode()?;",
          "",
          "[Removed Lines]",
          "60:     pub fn open_with_flags(c_path: &CString, flags: OpenFlags) -> Result<InnerConnection> {",
          "",
          "[Added Lines]",
          "60:     pub fn open_with_flags(c_path: &CString, flags: OpenFlags, vfs: Option(&CString)) -> Result<InnerConnection> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:             ));",
          "78:         }",
          "80:         unsafe {",
          "81:             let mut db: *mut ffi::sqlite3 = mem::uninitialized();",
          "83:             if r != ffi::SQLITE_OK {",
          "84:                 let e = if db.is_null() {",
          "85:                     error_from_sqlite_code(r, None)",
          "",
          "[Removed Lines]",
          "82:             let r = ffi::sqlite3_open_v2(c_path.as_ptr(), &mut db, flags.bits(), ptr::null());",
          "",
          "[Added Lines]",
          "80:         z_vfs = match(vfs) {",
          "81:             Some(c_vfs) => c_vfs.as_ptr(),",
          "82:             None => ptr::null()",
          "83:         }",
          "87:             let r = ffi::sqlite3_open_v2(c_path.as_ptr(), &mut db, flags.bits(), z_vfs);",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:     pub fn open<P: AsRef<Path>>(path: P) -> Result<Connection> {",
          "344:         let flags = OpenFlags::default();",
          "346:     }",
          "",
          "[Removed Lines]",
          "345:         Connection::open_with_flags(path, flags)",
          "",
          "[Added Lines]",
          "345:         Connection::open_with_flags(path, flags, None)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:     pub fn open_with_flags<P: AsRef<Path>>(path: P, flags: OpenFlags) -> Result<Connection> {",
          "368:         let c_path = path_to_cstring(path.as_ref())?;",
          "370:             db: RefCell::new(db),",
          "371:             cache: StatementCache::with_capacity(STATEMENT_CACHE_DEFAULT_CAPACITY),",
          "372:             path: Some(path.as_ref().to_path_buf()),",
          "",
          "[Removed Lines]",
          "369:         InnerConnection::open_with_flags(&c_path, flags).map(|db| Connection {",
          "",
          "[Added Lines]",
          "369:         InnerConnection::open_with_flags(&c_path, flags, None).map(|db| Connection {",
          "370:             db: RefCell::new(db),",
          "371:             cache: StatementCache::with_capacity(STATEMENT_CACHE_DEFAULT_CAPACITY),",
          "372:             path: Some(path.as_ref().to_path_buf()),",
          "373:         })",
          "374:     }",
          "385:     pub fn open_with_flags_and_vfs<P: AsRef<Path>>(path: P, flags: OpenFlags, vfs: &str) -> Result<Connection> {",
          "386:         let c_path = path_to_cstring(path.as_ref())?;",
          "387:         let c_vfs = str_to_cstring(vfs)?;",
          "388:         InnerConnection::open_with_flags(&c_path, flags, Some(c_vfs)).map(|db| Connection {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:     pub fn open_in_memory_with_flags(flags: OpenFlags) -> Result<Connection> {",
          "385:         let c_memory = str_to_cstring(\":memory:\")?;",
          "387:             db: RefCell::new(db),",
          "388:             cache: StatementCache::with_capacity(STATEMENT_CACHE_DEFAULT_CAPACITY),",
          "389:             path: None,",
          "",
          "[Removed Lines]",
          "386:         InnerConnection::open_with_flags(&c_memory, flags).map(|db| Connection {",
          "",
          "[Added Lines]",
          "405:         InnerConnection::open_with_flags(&c_memory, flags, None).map(|db| Connection {",
          "406:             db: RefCell::new(db),",
          "407:             cache: StatementCache::with_capacity(STATEMENT_CACHE_DEFAULT_CAPACITY),",
          "408:             path: None,",
          "409:         })",
          "410:     }",
          "421:     pub fn open_in_memory_with_flags_and_vfs(flags: OpenFlags, vfs: &str) -> Result<Connection> {",
          "422:         let c_memory = str_to_cstring(\":memory:\")?;",
          "423:         let c_vfs = str_to_cstring(vfs)?;",
          "424:         InnerConnection::open_with_flags(&c_memory, flags, Some(c_vfs)).map(|db| Connection {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d58a43b381c7bef1052d18b406c0c1bbab36ca0",
      "candidate_info": {
        "commit_hash": "4d58a43b381c7bef1052d18b406c0c1bbab36ca0",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/4d58a43b381c7bef1052d18b406c0c1bbab36ca0",
        "files": [
          "src/inner_connection.rs",
          "src/lib.rs"
        ],
        "message": "Fix compilation errors",
        "before_after_code_files": [
          "src/inner_connection.rs||src/inner_connection.rs",
          "src/lib.rs||src/lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/inner_connection.rs||src/inner_connection.rs",
            "src/lib.rs||src/lib.rs"
          ],
          "candidate": [
            "src/inner_connection.rs||src/inner_connection.rs",
            "src/lib.rs||src/lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/inner_connection.rs||src/inner_connection.rs": [
          "File: src/inner_connection.rs -> src/inner_connection.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         }",
          "60:     }",
          "63:         #[cfg(not(feature = \"bundled\"))]",
          "64:         ensure_valid_sqlite_version();",
          "65:         ensure_safe_sqlite_threading_mode()?;",
          "",
          "[Removed Lines]",
          "62:     pub fn open_with_flags(c_path: &CString, flags: OpenFlags, vfs: Option(&CString)) -> Result<InnerConnection> {",
          "",
          "[Added Lines]",
          "62:     pub fn open_with_flags(",
          "63:         c_path: &CString,",
          "64:         flags: OpenFlags,",
          "65:         vfs: Option<&CString>,",
          "66:     ) -> Result<InnerConnection> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:             ));",
          "80:         }",
          "83:             Some(c_vfs) => c_vfs.as_ptr(),",
          "87:         unsafe {",
          "88:             let mut db = MaybeUninit::uninit();",
          "91:             let db: *mut ffi::sqlite3 = db.assume_init();",
          "92:             if r != ffi::SQLITE_OK {",
          "93:                 let e = if db.is_null() {",
          "",
          "[Removed Lines]",
          "82:         z_vfs = match(vfs) {",
          "84:             None => ptr::null()",
          "85:         }",
          "89:             let r =",
          "90:                 ffi::sqlite3_open_v2(c_path.as_ptr(), db.as_mut_ptr(), flags.bits(), z_vfs);",
          "",
          "[Added Lines]",
          "86:         let z_vfs = match vfs {",
          "88:             None => ptr::null(),",
          "89:         };",
          "93:             let r = ffi::sqlite3_open_v2(c_path.as_ptr(), db.as_mut_ptr(), flags.bits(), z_vfs);",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     pub fn open<P: AsRef<Path>>(path: P) -> Result<Connection> {",
          "349:         let flags = OpenFlags::default();",
          "351:     }",
          "",
          "[Removed Lines]",
          "350:         Connection::open_with_flags(path, flags, None)",
          "",
          "[Added Lines]",
          "350:         Connection::open_with_flags(path, flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:         })",
          "379:     }",
          "391:         let c_path = path_to_cstring(path.as_ref())?;",
          "392:         let c_vfs = str_to_cstring(vfs)?;",
          "394:             db: RefCell::new(db),",
          "395:             cache: StatementCache::with_capacity(STATEMENT_CACHE_DEFAULT_CAPACITY),",
          "396:             path: Some(path.as_ref().to_path_buf()),",
          "",
          "[Removed Lines]",
          "390:     pub fn open_with_flags_and_vfs<P: AsRef<Path>>(path: P, flags: OpenFlags, vfs: &str) -> Result<Connection> {",
          "393:         InnerConnection::open_with_flags(&c_path, flags, Some(c_vfs)).map(|db| Connection {",
          "",
          "[Added Lines]",
          "391:     pub fn open_with_flags_and_vfs<P: AsRef<Path>>(",
          "392:         path: P,",
          "393:         flags: OpenFlags,",
          "394:         vfs: &str,",
          "395:     ) -> Result<Connection> {",
          "398:         InnerConnection::open_with_flags(&c_path, flags, Some(&c_vfs)).map(|db| Connection {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:     pub fn open_in_memory_with_flags_and_vfs(flags: OpenFlags, vfs: &str) -> Result<Connection> {",
          "427:         let c_memory = str_to_cstring(\":memory:\")?;",
          "428:         let c_vfs = str_to_cstring(vfs)?;",
          "430:             db: RefCell::new(db),",
          "431:             cache: StatementCache::with_capacity(STATEMENT_CACHE_DEFAULT_CAPACITY),",
          "432:             path: None,",
          "",
          "[Removed Lines]",
          "429:         InnerConnection::open_with_flags(&c_memory, flags, Some(c_vfs)).map(|db| Connection {",
          "",
          "[Added Lines]",
          "435:         InnerConnection::open_with_flags(&c_memory, flags, Some(&c_vfs)).map(|db| Connection {",
          "",
          "---------------"
        ]
      }
    }
  ]
}