{
  "cve_id": "CVE-2021-21683",
  "cve_desc": "The file browser in Jenkins 2.314 and earlier, LTS 2.303.1 and earlier may interpret some paths to files as absolute on Windows, resulting in a path traversal vulnerability allowing attackers with Overall/Read permission (Windows controller) or Job/Workspace permission (Windows agents) to obtain the contents of arbitrary files.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "3f679fc12d073676a4441d3fa8b5fff34c07662f",
  "patch_info": {
    "commit_hash": "3f679fc12d073676a4441d3fa8b5fff34c07662f",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/3f679fc12d073676a4441d3fa8b5fff34c07662f",
    "files": [
      "core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java"
    ],
    "message": "[SECURITY-2481]",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java": [
      "File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java -> core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "27: import hudson.FilePath;",
      "28: import hudson.Util;",
      "29: import java.io.IOException;",
      "30: import java.io.InputStream;",
      "31: import java.io.OutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import java.io.File;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Accessible via System Groovy Scripts\")",
      "83:     public static boolean ALLOW_SYMLINK_ESCAPE = SystemProperties.getBoolean(DirectoryBrowserSupport.class.getName() + \".allowSymlinkEscape\");",
      "85:     public final ModelObject owner;",
      "87:     public final String title;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:     static final String ALLOW_ABSOLUTE_PATH_PROPERTY_NAME = DirectoryBrowserSupport.class.getName() + \".allowAbsolutePath\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "243:         String rest = _rest.toString();",
      "248:         if (baseFile.hasSymlink(getNoFollowLinks())) {",
      "249:             rsp.sendError(HttpServletResponse.SC_NOT_FOUND);",
      "",
      "[Removed Lines]",
      "246:         VirtualFile baseFile = base.isEmpty() ? root : root.child(base);",
      "",
      "[Added Lines]",
      "254:         VirtualFile baseFile;",
      "255:         if (base.isEmpty()) {",
      "256:             baseFile = root;",
      "257:         } else {",
      "258:             if (!SystemProperties.getBoolean(ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, false)) {",
      "259:                 boolean isAbsolute = root.run(new IsAbsolute(base));",
      "260:                 if (isAbsolute) {",
      "261:                     LOGGER.info(() -> \"SECURITY-2481 The path provided in the URL (\" + base + \") is absolute and thus is refused.\");",
      "262:                     rsp.sendError(HttpServletResponse.SC_NOT_FOUND);",
      "263:                     return;",
      "264:                 }",
      "265:             }",
      "266:             baseFile = root.child(base);",
      "267:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "397:         }",
      "398:     }",
      "400:     private List<List<Path>> keepReadabilityOnlyOnDescendants(VirtualFile root, boolean patternUsed, List<List<Path>> pathFragmentsList){",
      "401:         Stream<List<Path>> pathFragmentsStream = pathFragmentsList.stream().map((List<Path> pathFragments) -> {",
      "402:             List<Path> mappedFragments = new ArrayList<>(pathFragments.size());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:     private static final class IsAbsolute extends MasterToSlaveCallable<Boolean, IOException> {",
      "422:         private final String fragment;",
      "424:         IsAbsolute(String fragment) {",
      "425:             this.fragment = fragment;",
      "426:         }",
      "428:         @Override",
      "429:         public Boolean call() throws IOException {",
      "430:             return new File(fragment).isAbsolute();",
      "431:         }",
      "432:     }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java": [
      "File: test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java -> test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import hudson.Functions;",
      "28: import org.apache.commons.io.FileUtils;",
      "29: import org.hamcrest.CoreMatchers;",
      "30: import org.hamcrest.MatcherAssert;",
      "31: import org.junit.Assume;",
      "32: import org.junit.Rule;",
      "33: import org.junit.Test;",
      "34: import org.jvnet.hudson.test.Issue;",
      "35: import org.jvnet.hudson.test.JenkinsRule;",
      "37: import java.io.File;",
      "38: import java.nio.charset.StandardCharsets;",
      "41: public class DirectoryBrowserSupportSEC2481Test {",
      "43:     @Rule",
      "44:     public JenkinsRule j = new JenkinsRule();",
      "46:     @Test",
      "47:     @Issue(\"SECURITY-2481\")",
      "48:     public void windows_cannotViewAbsolutePath() throws Exception {",
      "49:         Assume.assumeTrue(\"can only be tested this on Windows\", Functions.isWindows());",
      "51:         File targetTmpFile = File.createTempFile(\"sec2481\", \"tmp\");",
      "52:         String content = \"random data provided as fixed value\";",
      "53:         FileUtils.writeStringToFile(targetTmpFile, content, StandardCharsets.UTF_8);",
      "55:         JenkinsRule.WebClient wc = j.createWebClient().withThrowExceptionOnFailingStatusCode(false);",
      "56:         Page page = wc.goTo(\"userContent/\" + targetTmpFile.getAbsolutePath() + \"/*view*\", null);",
      "58:         MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), CoreMatchers.equalTo(404));",
      "59:     }",
      "61:     @Test",
      "62:     @Issue(\"SECURITY-2481\")",
      "63:     public void windows_canViewAbsolutePath_withEscapeHatch() throws Exception {",
      "64:         Assume.assumeTrue(\"can only be tested this on Windows\", Functions.isWindows());",
      "66:         String originalValue = System.getProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME);",
      "67:         System.setProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, \"true\");",
      "68:         try {",
      "69:             File targetTmpFile = File.createTempFile(\"sec2481\", \"tmp\");",
      "70:             String content = \"random data provided as fixed value\";",
      "71:             FileUtils.writeStringToFile(targetTmpFile, content, StandardCharsets.UTF_8);",
      "73:             JenkinsRule.WebClient wc = j.createWebClient().withThrowExceptionOnFailingStatusCode(false);",
      "74:             Page page = wc.goTo(\"userContent/\" + targetTmpFile.getAbsolutePath() + \"/*view*\", null);",
      "76:             MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), CoreMatchers.equalTo(200));",
      "77:             MatcherAssert.assertThat(page.getWebResponse().getContentAsString(), CoreMatchers.containsString(content));",
      "78:         } finally {",
      "79:             if (originalValue == null) {",
      "80:                 System.clearProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME);",
      "81:             } else {",
      "82:                 System.setProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, originalValue);",
      "83:             }",
      "84:         }",
      "86:     }",
      "88:     @Test",
      "89:     public void canViewRelativePath() throws Exception {",
      "90:         File testFile = new File(j.jenkins.getRootDir(), \"userContent/test.txt\");",
      "91:         String content = \"random data provided as fixed value\";",
      "93:         FileUtils.writeStringToFile(testFile, content, StandardCharsets.UTF_8);",
      "95:         JenkinsRule.WebClient wc = j.createWebClient().withThrowExceptionOnFailingStatusCode(false);",
      "96:         Page page = wc.goTo(\"userContent/test.txt/*view*\", null);",
      "98:         MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), CoreMatchers.equalTo(200));",
      "99:         MatcherAssert.assertThat(page.getWebResponse().getContentAsString(), CoreMatchers.containsString(content));",
      "100:     }",
      "101: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e7b3a4c025b3dfb6398e84a93622848e5104363",
      "candidate_info": {
        "commit_hash": "2e7b3a4c025b3dfb6398e84a93622848e5104363",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/2e7b3a4c025b3dfb6398e84a93622848e5104363",
        "files": [
          "core/src/main/java/hudson/model/Cause.java",
          "core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly",
          "core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties",
          "core/src/main/resources/hudson/model/Cause/description.jelly",
          "test/src/test/java/hudson/model/CauseSECURITY2452Test.java"
        ],
        "message": "[SECURITY-2452]",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Cause.java||core/src/main/java/hudson/model/Cause.java",
          "core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly||core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly",
          "core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties||core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties",
          "core/src/main/resources/hudson/model/Cause/description.jelly||core/src/main/resources/hudson/model/Cause/description.jelly",
          "test/src/test/java/hudson/model/CauseSECURITY2452Test.java||test/src/test/java/hudson/model/CauseSECURITY2452Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/5790"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Cause.java||core/src/main/java/hudson/model/Cause.java": [
          "File: core/src/main/java/hudson/model/Cause.java -> core/src/main/java/hudson/model/Cause.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import hudson.console.ModelHyperlinkNote;",
          "31: import hudson.diagnosis.OldDataMonitor;",
          "32: import hudson.util.XStream2;",
          "34: import java.util.ArrayList;",
          "35: import java.util.Arrays;",
          "36: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "33: import java.io.IOException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:         @Override",
          "484:         public String getShortDescription() {",
          "485:             if(note != null) {",
          "491:             }",
          "493:         }",
          "495:         @Exported(visibility = 3)",
          "",
          "[Removed Lines]",
          "486:                 try {",
          "487:                     return Messages.Cause_RemoteCause_ShortDescriptionWithNote(Util.xmlEscape(addr), Jenkins.get().getMarkupFormatter().translate(note));",
          "488:                 } catch (IOException x) {",
          "490:                 }",
          "492:             return Messages.Cause_RemoteCause_ShortDescription(Util.xmlEscape(addr));",
          "",
          "[Added Lines]",
          "487:                 return Messages.Cause_RemoteCause_ShortDescriptionWithNote(addr, note);",
          "489:             return Messages.Cause_RemoteCause_ShortDescription(addr);",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly||core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly": [
          "File: core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly -> core/src/main/resources/hudson/model/Cause/RemoteCause/description.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!--",
          "2: The MIT License",
          "4: Copyright (c) 2021 CloudBees, Inc.",
          "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
          "7: of this software and associated documentation files (the \"Software\"), to deal",
          "8: in the Software without restriction, including without limitation the rights",
          "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "10: copies of the Software, and to permit persons to whom the Software is",
          "11: furnished to do so, subject to the following conditions:",
          "13: The above copyright notice and this permission notice shall be included in",
          "14: all copies or substantial portions of the Software.",
          "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "22: THE SOFTWARE.",
          "23: -->",
          "24: <?jelly escape-by-default='true'?>",
          "25: <j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\">",
          "26:     <span>${%blurb(it.addr, it.note)}</span>",
          "27: </j:jelly>",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties||core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties": [
          "File: core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties -> core/src/main/resources/hudson/model/Cause/RemoteCause/description.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: blurb = Started by remote host {0} with note: {1}",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/model/Cause/description.jelly||core/src/main/resources/hudson/model/Cause/description.jelly": [
          "File: core/src/main/resources/hudson/model/Cause/description.jelly -> core/src/main/resources/hudson/model/Cause/description.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: -->",
          "24: <?jelly escape-by-default='true'?>",
          "25: <j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\">",
          "27: </j:jelly>",
          "",
          "[Removed Lines]",
          "26:     <span><j:out value=\"${it.shortDescription}\" /></span>",
          "",
          "[Added Lines]",
          "26:     <span>${it.shortDescription}</span>",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/CauseSECURITY2452Test.java||test/src/test/java/hudson/model/CauseSECURITY2452Test.java": [
          "File: test/src/test/java/hudson/model/CauseSECURITY2452Test.java -> test/src/test/java/hudson/model/CauseSECURITY2452Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.model;",
          "3: import org.junit.Assert;",
          "4: import org.junit.Rule;",
          "5: import org.junit.Test;",
          "6: import org.jvnet.hudson.test.Issue;",
          "7: import org.jvnet.hudson.test.JenkinsRule;",
          "10: public class CauseSECURITY2452Test {",
          "12:     @Rule",
          "13:     public JenkinsRule j = new JenkinsRule();",
          "15:     @Test",
          "16:     @Issue(\"SECURITY-2452\")",
          "17:     public void basicCauseIsSafe() throws Exception {",
          "18:         final FreeStyleProject fs = j.createFreeStyleProject();",
          "19:         {",
          "20:             final FreeStyleBuild build = j.waitForCompletion(fs.scheduleBuild2(0, new SimpleCause(\"safe\")).get());",
          "22:             final JenkinsRule.WebClient wc = j.createWebClient();",
          "23:             final String content = wc.getPage(build).getWebResponse().getContentAsString();",
          "24:             Assert.assertTrue(content.contains(\"Simple cause: safe\"));",
          "25:         }",
          "26:         {",
          "27:             final FreeStyleBuild build = j.waitForCompletion(fs.scheduleBuild2(0, new SimpleCause(\"<img src=x onerror=alert(1)>\")).get());",
          "29:             final JenkinsRule.WebClient wc = j.createWebClient();",
          "30:             final String content = wc.getPage(build).getWebResponse().getContentAsString();",
          "31:             Assert.assertFalse(content.contains(\"Simple cause: <img\"));",
          "32:             Assert.assertTrue(content.contains(\"Simple cause: &lt;img\"));",
          "33:         }",
          "34:     }",
          "36:     public static class SimpleCause extends Cause {",
          "37:         private final String description;",
          "39:         public SimpleCause(String description) {",
          "40:             this.description = description;",
          "41:         }",
          "43:         @Override",
          "44:         public String getShortDescription() {",
          "45:             return \"Simple cause: \" + description;",
          "46:         }",
          "47:     }",
          "48: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2c2b59071265aea07f88d5e95297c0a433921c3",
      "candidate_info": {
        "commit_hash": "c2c2b59071265aea07f88d5e95297c0a433921c3",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/c2c2b59071265aea07f88d5e95297c0a433921c3",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/resources/hudson/model/Messages.properties",
          "core/src/test/java/jenkins/model/JenkinsSEC2424Test.java",
          "test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java",
          "test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java",
          "test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java",
          "test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java",
          "test/src/test/java/jenkins/model/NodesSEC2424Test.java"
        ],
        "message": "[SECURITY-2424]",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/resources/hudson/model/Messages.properties||core/src/main/resources/hudson/model/Messages.properties",
          "core/src/test/java/jenkins/model/JenkinsSEC2424Test.java||core/src/test/java/jenkins/model/JenkinsSEC2424Test.java",
          "test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java||test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java",
          "test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java||test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java",
          "test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java||test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java",
          "test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java||test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java",
          "test/src/test/java/jenkins/model/NodesSEC2424Test.java||test/src/test/java/jenkins/model/NodesSEC2424Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/5790"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4161:                 throw new Failure(Messages.Hudson_UnsafeChar(ch));",
          "4162:         }",
          "4165:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4164:         if (SystemProperties.getBoolean(NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP, true)) {",
          "4166:             if (name.trim().endsWith(\".\")) {",
          "4167:                 throw new Failure(Messages.Hudson_TrailingDot());",
          "4168:             }",
          "4169:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5414:     private static final String WORKSPACE_DIRNAME = SystemProperties.getString(Jenkins.class.getName() + \".\" + \"workspaceDirName\", \"workspace\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5433:     @Restricted(NoExternalUse.class)",
          "5434:     public static final String NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP = Jenkins.class.getName() + \".\" + \"nameValidationRejectsTrailingDot\";",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/model/Messages.properties||core/src/main/resources/hudson/model/Messages.properties": [
          "File: core/src/main/resources/hudson/model/Messages.properties -> core/src/main/resources/hudson/model/Messages.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: Hudson.Permissions.Title=Overall",
          "140: Hudson.USER_CONTENT_README=Files in this directory will be served under your http://yourjenkins/userContent/",
          "141: Hudson.UnsafeChar=\\u2018{0}\\u2019 is an unsafe character",
          "142: Hudson.ViewAlreadyExists=A view already exists with the name \"{0}\"",
          "143: Hudson.ViewName=All",
          "144: Hudson.NotANumber=Not a number",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: Hudson.TrailingDot=A name cannot end with \\u2018.\\u2019",
          "",
          "---------------"
        ],
        "core/src/test/java/jenkins/model/JenkinsSEC2424Test.java||core/src/test/java/jenkins/model/JenkinsSEC2424Test.java": [
          "File: core/src/test/java/jenkins/model/JenkinsSEC2424Test.java -> core/src/test/java/jenkins/model/JenkinsSEC2424Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.model;",
          "26: import static org.junit.Assert.assertEquals;",
          "27: import static org.junit.Assert.fail;",
          "29: import hudson.model.Failure;",
          "30: import hudson.model.Messages;",
          "31: import org.junit.Test;",
          "32: import org.jvnet.hudson.test.Issue;",
          "34: public class JenkinsSEC2424Test {",
          "35:     @Test",
          "36:     @Issue(\"SECURITY-2424\")",
          "37:     public void doesNotAcceptNameWithTrailingDot_regular() {",
          "38:         try {",
          "39:             Jenkins.checkGoodName(\"job.\");",
          "40:             fail(\"Names with dot should not be accepted\");",
          "41:         } catch (Failure e) {",
          "42:             assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());",
          "43:         }",
          "44:     }",
          "46:     @Test",
          "47:     @Issue(\"SECURITY-2424\")",
          "48:     public void doesNotAcceptNameWithTrailingDot_withSpaces() {",
          "49:         try {",
          "50:             Jenkins.checkGoodName(\"job.   \");",
          "51:             fail(\"Names with dot should not be accepted\");",
          "52:         } catch (Failure e) {",
          "53:             assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());",
          "54:         }",
          "55:     }",
          "57:     @Test",
          "58:     @Issue(\"SECURITY-2424\")",
          "59:     public void doesNotAcceptNameWithTrailingDot_exceptIfEscapeHatchIsSet() {",
          "60:         String propName = Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;",
          "61:         String initialValue = System.getProperty(propName);",
          "62:         System.setProperty(propName, \"false\");",
          "63:         try {",
          "64:             Jenkins.checkGoodName(\"job.\");",
          "65:         } finally {",
          "66:             if (initialValue == null) {",
          "67:                 System.clearProperty(propName);",
          "68:             } else {",
          "69:                 System.setProperty(propName, initialValue);",
          "70:             }",
          "71:         }",
          "72:     }",
          "73: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java||test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java": [
          "File: test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java -> test/src/test/java/hudson/cli/CopyJobCommandSEC2424Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.cli;",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
          "28: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
          "29: import static org.hamcrest.MatcherAssert.assertThat;",
          "30: import static org.hamcrest.Matchers.containsString;",
          "32: import hudson.model.Messages;",
          "33: import jenkins.model.Jenkins;",
          "34: import org.hamcrest.Matchers;",
          "35: import org.junit.Before;",
          "36: import org.junit.Rule;",
          "37: import org.junit.Test;",
          "38: import org.jvnet.hudson.test.Issue;",
          "39: import org.jvnet.hudson.test.JenkinsRule;",
          "42: public class CopyJobCommandSEC2424Test {",
          "44:     @Rule public JenkinsRule j = new JenkinsRule();",
          "45:     private CLICommand copyJobCommand;",
          "46:     private CLICommandInvoker command;",
          "48:     @Before public void setUp() {",
          "49:         copyJobCommand = new CopyJobCommand();",
          "50:         command = new CLICommandInvoker(j, copyJobCommand);",
          "51:     }",
          "53:     @Issue(\"SECURITY-2424\")",
          "54:     @Test public void cannotCopyJobWithTrailingDot_regular() throws Exception {",
          "55:         assertThat(j.jenkins.getItems(), Matchers.hasSize(0));",
          "56:         j.createFreeStyleProject(\"job1\");",
          "57:         assertThat(j.jenkins.getItems(), Matchers.hasSize(1));",
          "59:         CLICommandInvoker.Result result = command.invokeWithArgs(\"job1\", \"job1.\");",
          "60:         assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));",
          "61:         assertThat(result, failedWith(1));",
          "63:         assertThat(j.jenkins.getItems(), Matchers.hasSize(1));",
          "64:     }",
          "66:     @Issue(\"SECURITY-2424\")",
          "67:     @Test public void cannotCopyJobWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {",
          "68:         String propName = Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;",
          "69:         String initialValue = System.getProperty(propName);",
          "70:         System.setProperty(propName, \"false\");",
          "71:         try {",
          "72:             assertThat(j.jenkins.getItems(), Matchers.hasSize(0));",
          "73:             j.createFreeStyleProject(\"job1\");",
          "74:             assertThat(j.jenkins.getItems(), Matchers.hasSize(1));",
          "76:             CLICommandInvoker.Result result = command.invokeWithArgs(\"job1\", \"job1.\");",
          "77:             assertThat(result, succeededSilently());",
          "79:             assertThat(j.jenkins.getItems(), Matchers.hasSize(2));",
          "80:         }",
          "81:         finally {",
          "82:             if (initialValue == null) {",
          "83:                 System.clearProperty(propName);",
          "84:             } else {",
          "85:                 System.setProperty(propName, initialValue);",
          "86:             }",
          "87:         }",
          "88:     }",
          "89: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java||test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java": [
          "File: test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java -> test/src/test/java/hudson/cli/CreateJobCommandSEC2424Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.cli;",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
          "28: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
          "29: import static org.hamcrest.MatcherAssert.assertThat;",
          "30: import static org.hamcrest.Matchers.containsString;",
          "32: import hudson.model.Messages;",
          "33: import java.io.ByteArrayInputStream;",
          "34: import java.nio.charset.StandardCharsets;",
          "35: import jenkins.model.Jenkins;",
          "36: import org.hamcrest.Matchers;",
          "37: import org.junit.Rule;",
          "38: import org.junit.Test;",
          "39: import org.jvnet.hudson.test.Issue;",
          "40: import org.jvnet.hudson.test.JenkinsRule;",
          "44: public class CreateJobCommandSEC2424Test {",
          "46:     @Rule public JenkinsRule r = new JenkinsRule();",
          "48:     @Issue(\"SECURITY-2424\")",
          "49:     @Test public void cannotCreateJobWithTrailingDot_withoutOtherJob() {",
          "50:         CLICommand cmd = new CreateJobCommand();",
          "51:         CLICommandInvoker invoker = new CLICommandInvoker(r, cmd);",
          "52:         assertThat(r.jenkins.getItems(), Matchers.hasSize(0));",
          "54:         CLICommandInvoker.Result result = invoker.withStdin(new ByteArrayInputStream(\"<project/>\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1.\");",
          "55:         assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));",
          "56:         assertThat(result, failedWith(1));",
          "58:         assertThat(r.jenkins.getItems(), Matchers.hasSize(0));",
          "59:     }",
          "61:     @Issue(\"SECURITY-2424\")",
          "62:     @Test public void cannotCreateJobWithTrailingDot_withExistingJob() {",
          "63:         CLICommand cmd = new CreateJobCommand();",
          "64:         CLICommandInvoker invoker = new CLICommandInvoker(r, cmd);",
          "65:         assertThat(r.jenkins.getItems(), Matchers.hasSize(0));",
          "66:         assertThat(invoker.withStdin(new ByteArrayInputStream(\"<project/>\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1\"), succeededSilently());",
          "67:         assertThat(r.jenkins.getItems(), Matchers.hasSize(1));",
          "69:         CLICommandInvoker.Result result = invoker.withStdin(new ByteArrayInputStream(\"<project/>\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1.\");",
          "70:         assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));",
          "71:         assertThat(result, failedWith(1));",
          "73:         assertThat(r.jenkins.getItems(), Matchers.hasSize(1));",
          "74:     }",
          "76:     @Issue(\"SECURITY-2424\")",
          "77:     @Test public void cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet() {",
          "78:         String propName = Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;",
          "79:         String initialValue = System.getProperty(propName);",
          "80:         System.setProperty(propName, \"false\");",
          "81:         try {",
          "82:             CLICommand cmd = new CreateJobCommand();",
          "83:             CLICommandInvoker invoker = new CLICommandInvoker(r, cmd);",
          "84:             assertThat(r.jenkins.getItems(), Matchers.hasSize(0));",
          "85:             assertThat(invoker.withStdin(new ByteArrayInputStream(\"<project/>\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1.\"), succeededSilently());",
          "86:             assertThat(r.jenkins.getItems(), Matchers.hasSize(1));",
          "87:         }",
          "88:         finally {",
          "89:             if (initialValue == null) {",
          "90:                 System.clearProperty(propName);",
          "91:             } else {",
          "92:                 System.setProperty(propName, initialValue);",
          "93:             }",
          "94:         }",
          "95:     }",
          "96: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java||test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java": [
          "File: test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java -> test/src/test/java/hudson/cli/CreateNodeCommandSEC2424Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.cli;",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
          "28: import static hudson.cli.CLICommandInvoker.Matcher.hasNoStandardOutput;",
          "29: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
          "30: import static org.hamcrest.MatcherAssert.assertThat;",
          "31: import static org.hamcrest.Matchers.containsString;",
          "32: import static org.junit.Assert.assertEquals;",
          "34: import hudson.model.Messages;",
          "35: import java.io.ByteArrayInputStream;",
          "36: import java.nio.charset.StandardCharsets;",
          "37: import jenkins.model.Jenkins;",
          "38: import org.junit.Before;",
          "39: import org.junit.Rule;",
          "40: import org.junit.Test;",
          "41: import org.jvnet.hudson.test.Issue;",
          "42: import org.jvnet.hudson.test.JenkinsRule;",
          "46: public class CreateNodeCommandSEC2424Test {",
          "48:     private CLICommandInvoker command;",
          "50:     @Rule public final JenkinsRule j = new JenkinsRule();",
          "52:     @Before public void setUp() {",
          "54:         command = new CLICommandInvoker(j, new CreateNodeCommand());",
          "55:     }",
          "57:     @Test",
          "58:     @Issue(\"SECURITY-2424\")",
          "59:     public void cannotCreateNodeWithTrailingDot_withoutOtherNode() {",
          "60:         int nodeListSizeBefore = j.jenkins.getNodes().size();",
          "62:         CLICommandInvoker.Result result = command",
          "63:                 .withStdin(new ByteArrayInputStream(\"<slave/>\".getBytes(StandardCharsets.UTF_8)))",
          "64:                 .invokeWithArgs(\"nodeA.\")",
          "65:                 ;",
          "67:         assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));",
          "68:         assertThat(result, hasNoStandardOutput());",
          "69:         assertThat(result, failedWith(1));",
          "72:         assertEquals(nodeListSizeBefore, j.jenkins.getNodes().size());",
          "73:     }",
          "75:     @Test",
          "76:     @Issue(\"SECURITY-2424\")",
          "77:     public void cannotCreateNodeWithTrailingDot_withExistingNode() {",
          "78:         int nodeListSizeBefore = j.jenkins.getNodes().size();",
          "80:         assertThat(command.withStdin(new ByteArrayInputStream(\"<slave/>\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"nodeA\"), succeededSilently());",
          "81:         assertEquals(nodeListSizeBefore + 1, j.jenkins.getNodes().size());",
          "83:         CLICommandInvoker.Result result = command",
          "84:                 .withStdin(new ByteArrayInputStream(\"<slave/>\".getBytes(StandardCharsets.UTF_8)))",
          "85:                 .invokeWithArgs(\"nodeA.\")",
          "86:                 ;",
          "88:         assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));",
          "89:         assertThat(result, hasNoStandardOutput());",
          "90:         assertThat(result, failedWith(1));",
          "93:         assertEquals(nodeListSizeBefore + 1, j.jenkins.getNodes().size());",
          "94:     }",
          "96:     @Test",
          "97:     @Issue(\"SECURITY-2424\")",
          "98:     public void cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet() {",
          "99:         String propName = Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;",
          "100:         String initialValue = System.getProperty(propName);",
          "101:         System.setProperty(propName, \"false\");",
          "102:         try {",
          "103:             int nodeListSizeBefore = j.jenkins.getNodes().size();",
          "105:             assertThat(command.withStdin(new ByteArrayInputStream(\"<slave/>\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"nodeA\"), succeededSilently());",
          "106:             assertEquals(nodeListSizeBefore + 1, j.jenkins.getNodes().size());",
          "108:             CLICommandInvoker.Result result = command",
          "109:                     .withStdin(new ByteArrayInputStream(\"<slave/>\".getBytes(StandardCharsets.UTF_8)))",
          "110:                     .invokeWithArgs(\"nodeA.\")",
          "111:                     ;",
          "113:             assertThat(result, succeededSilently());",
          "115:             assertEquals(nodeListSizeBefore + 2, j.jenkins.getNodes().size());",
          "116:         }",
          "117:         finally {",
          "118:             if (initialValue == null) {",
          "119:                 System.clearProperty(propName);",
          "120:             } else {",
          "121:                 System.setProperty(propName, initialValue);",
          "122:             }",
          "123:         }",
          "124:     }",
          "125: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java||test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java": [
          "File: test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java -> test/src/test/java/hudson/model/FreeStyleProjectSEC2424Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.model;",
          "26: import static org.hamcrest.MatcherAssert.assertThat;",
          "27: import static org.hamcrest.Matchers.hasSize;",
          "28: import static org.junit.Assert.assertEquals;",
          "29: import static org.junit.Assert.fail;",
          "31: import java.io.ByteArrayInputStream;",
          "32: import jenkins.model.Jenkins;",
          "33: import org.junit.Rule;",
          "34: import org.junit.Test;",
          "35: import org.jvnet.hudson.test.Issue;",
          "36: import org.jvnet.hudson.test.JenkinsRule;",
          "39: public class FreeStyleProjectSEC2424Test {",
          "41:     @Rule",
          "42:     public JenkinsRule j = new JenkinsRule();",
          "44:     @Test",
          "45:     @Issue(\"SECURITY-2424\")",
          "46:     public void cannotCreateJobWithTrailingDot_withoutOtherJob() throws Exception {",
          "47:         assertThat(j.jenkins.getItems(), hasSize(0));",
          "48:         try {",
          "49:             j.jenkins.createProjectFromXML(\"jobA.\", new ByteArrayInputStream(\"<project/>\".getBytes()));",
          "50:             fail(\"Adding the job should have thrown an exception during checkGoodName\");",
          "51:         }",
          "52:         catch (Failure e) {",
          "53:             assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());",
          "54:         }",
          "55:         assertThat(j.jenkins.getItems(), hasSize(0));",
          "56:     }",
          "58:     @Test",
          "59:     @Issue(\"SECURITY-2424\")",
          "60:     public void cannotCreateJobWithTrailingDot_withExistingJob() throws Exception {",
          "61:         assertThat(j.jenkins.getItems(), hasSize(0));",
          "62:         j.createFreeStyleProject(\"jobA\");",
          "63:         assertThat(j.jenkins.getItems(), hasSize(1));",
          "64:         try {",
          "65:             j.jenkins.createProjectFromXML(\"jobA.\", new ByteArrayInputStream(\"<project/>\".getBytes()));",
          "66:             fail(\"Adding the job should have thrown an exception during checkGoodName\");",
          "67:         }",
          "68:         catch (Failure e) {",
          "69:             assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());",
          "70:         }",
          "71:         assertThat(j.jenkins.getItems(), hasSize(1));",
          "72:     }",
          "74:     @Issue(\"SECURITY-2424\")",
          "75:     @Test public void cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {",
          "76:         String propName = Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;",
          "77:         String initialValue = System.getProperty(propName);",
          "78:         System.setProperty(propName, \"false\");",
          "79:         try {",
          "80:             assertThat(j.jenkins.getItems(), hasSize(0));",
          "81:             j.jenkins.createProjectFromXML(\"jobA.\", new ByteArrayInputStream(\"<project/>\".getBytes()));",
          "82:         }",
          "83:         finally {",
          "84:             if (initialValue == null) {",
          "85:                 System.clearProperty(propName);",
          "86:             } else {",
          "87:                 System.setProperty(propName, initialValue);",
          "88:             }",
          "89:         }",
          "90:         assertThat(j.jenkins.getItems(), hasSize(1));",
          "91:     }",
          "92: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/model/NodesSEC2424Test.java||test/src/test/java/jenkins/model/NodesSEC2424Test.java": [
          "File: test/src/test/java/jenkins/model/NodesSEC2424Test.java -> test/src/test/java/jenkins/model/NodesSEC2424Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.model;",
          "27: import static org.hamcrest.MatcherAssert.assertThat;",
          "28: import static org.hamcrest.Matchers.hasSize;",
          "29: import static org.junit.Assert.assertEquals;",
          "30: import static org.junit.Assert.fail;",
          "32: import hudson.model.Failure;",
          "33: import hudson.model.Messages;",
          "34: import hudson.slaves.DumbSlave;",
          "35: import org.junit.Rule;",
          "36: import org.junit.Test;",
          "37: import org.jvnet.hudson.test.Issue;",
          "38: import org.jvnet.hudson.test.JenkinsRule;",
          "41: public class NodesSEC2424Test {",
          "43:     @Rule",
          "44:     public JenkinsRule r = new JenkinsRule();",
          "46:     @Test",
          "47:     @Issue(\"SECURITY-2424\")",
          "48:     public void cannotCreateNodeWithTrailingDot_withoutOtherNode() throws Exception {",
          "49:         assertThat(r.jenkins.getNodes(), hasSize(0));",
          "51:         DumbSlave node = new DumbSlave(\"nodeA.\", \"temp\", r.createComputerLauncher(null));",
          "52:         try {",
          "53:             r.jenkins.addNode(node);",
          "54:             fail(\"Adding the node should have thrown an exception during checkGoodName\");",
          "55:         } catch (Failure e) {",
          "56:             assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());",
          "57:         }",
          "59:         assertThat(r.jenkins.getNodes(), hasSize(0));",
          "60:     }",
          "62:     @Test",
          "63:     @Issue(\"SECURITY-2424\")",
          "64:     public void cannotCreateNodeWithTrailingDot_withExistingNode() throws Exception {",
          "65:         assertThat(r.jenkins.getNodes(), hasSize(0));",
          "66:         r.createSlave(\"nodeA\", \"\", null);",
          "67:         assertThat(r.jenkins.getNodes(), hasSize(1));",
          "69:         DumbSlave node = new DumbSlave(\"nodeA.\", \"temp\", r.createComputerLauncher(null));",
          "70:         try {",
          "71:             r.jenkins.addNode(node);",
          "72:             fail(\"Adding the node should have thrown an exception during checkGoodName\");",
          "73:         } catch (Failure e) {",
          "74:             assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());",
          "75:         }",
          "77:         assertThat(r.jenkins.getNodes(), hasSize(1));",
          "78:     }",
          "80:     @Test",
          "81:     @Issue(\"SECURITY-2424\")",
          "82:     public void cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {",
          "83:         String propName = Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;",
          "84:         String initialValue = System.getProperty(propName);",
          "85:         System.setProperty(propName, \"false\");",
          "86:         try {",
          "87:             assertThat(r.jenkins.getNodes(), hasSize(0));",
          "89:             DumbSlave node = new DumbSlave(\"nodeA.\", \"temp\", r.createComputerLauncher(null));",
          "90:             r.jenkins.addNode(node);",
          "92:             assertThat(r.jenkins.getNodes(), hasSize(1));",
          "93:         } finally {",
          "94:             if (initialValue == null) {",
          "95:                 System.clearProperty(propName);",
          "96:             } else {",
          "97:                 System.setProperty(propName, initialValue);",
          "98:             }",
          "99:         }",
          "100:     }",
          "101: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29d3ca577b4c26dd1534487e34fe85a3f76cf0e8",
      "candidate_info": {
        "commit_hash": "29d3ca577b4c26dd1534487e34fe85a3f76cf0e8",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/29d3ca577b4c26dd1534487e34fe85a3f76cf0e8",
        "files": [
          "core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java"
        ],
        "message": "[SECURITY-2481]",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
            "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
            "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java": [
          "File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java -> core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "27: import hudson.FilePath;",
          "28: import hudson.Util;",
          "29: import java.io.IOException;",
          "30: import java.io.InputStream;",
          "31: import java.io.OutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.io.File;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Accessible via System Groovy Scripts\")",
          "83:     public static boolean ALLOW_SYMLINK_ESCAPE = SystemProperties.getBoolean(DirectoryBrowserSupport.class.getName() + \".allowSymlinkEscape\");",
          "85:     public final ModelObject owner;",
          "87:     public final String title;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     static final String ALLOW_ABSOLUTE_PATH_PROPERTY_NAME = DirectoryBrowserSupport.class.getName() + \".allowAbsolutePath\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:         String rest = _rest.toString();",
          "248:         if (baseFile.hasSymlink(getNoFollowLinks())) {",
          "249:             rsp.sendError(HttpServletResponse.SC_NOT_FOUND);",
          "",
          "[Removed Lines]",
          "246:         VirtualFile baseFile = base.isEmpty() ? root : root.child(base);",
          "",
          "[Added Lines]",
          "254:         VirtualFile baseFile;",
          "255:         if (base.isEmpty()) {",
          "256:             baseFile = root;",
          "257:         } else {",
          "258:             if (!SystemProperties.getBoolean(ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, false)) {",
          "259:                 boolean isAbsolute = root.run(new IsAbsolute(base));",
          "260:                 if (isAbsolute) {",
          "261:                     LOGGER.info(() -> \"SECURITY-2481 The path provided in the URL (\" + base + \") is absolute and thus is refused.\");",
          "262:                     rsp.sendError(HttpServletResponse.SC_NOT_FOUND);",
          "263:                     return;",
          "264:                 }",
          "265:             }",
          "266:             baseFile = root.child(base);",
          "267:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:         }",
          "398:     }",
          "400:     private List<List<Path>> keepReadabilityOnlyOnDescendants(VirtualFile root, boolean patternUsed, List<List<Path>> pathFragmentsList){",
          "401:         Stream<List<Path>> pathFragmentsStream = pathFragmentsList.stream().map((List<Path> pathFragments) -> {",
          "402:             List<Path> mappedFragments = new ArrayList<>(pathFragments.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:     private static final class IsAbsolute extends MasterToSlaveCallable<Boolean, IOException> {",
          "422:         private final String fragment;",
          "424:         IsAbsolute(String fragment) {",
          "425:             this.fragment = fragment;",
          "426:         }",
          "428:         @Override",
          "429:         public Boolean call() throws IOException {",
          "430:             return new File(fragment).isAbsolute();",
          "431:         }",
          "432:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java": [
          "File: test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java -> test/src/test/java/hudson/model/DirectoryBrowserSupportSEC2481Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.model;",
          "26: import com.gargoylesoftware.htmlunit.Page;",
          "27: import hudson.Functions;",
          "28: import org.apache.commons.io.FileUtils;",
          "29: import org.hamcrest.CoreMatchers;",
          "30: import org.hamcrest.MatcherAssert;",
          "31: import org.junit.Assume;",
          "32: import org.junit.Rule;",
          "33: import org.junit.Test;",
          "34: import org.jvnet.hudson.test.Issue;",
          "35: import org.jvnet.hudson.test.JenkinsRule;",
          "37: import java.io.File;",
          "38: import java.nio.charset.StandardCharsets;",
          "41: public class DirectoryBrowserSupportSEC2481Test {",
          "43:     @Rule",
          "44:     public JenkinsRule j = new JenkinsRule();",
          "46:     @Test",
          "47:     @Issue(\"SECURITY-2481\")",
          "48:     public void windows_cannotViewAbsolutePath() throws Exception {",
          "49:         Assume.assumeTrue(\"can only be tested this on Windows\", Functions.isWindows());",
          "51:         File targetTmpFile = File.createTempFile(\"sec2481\", \"tmp\");",
          "52:         String content = \"random data provided as fixed value\";",
          "53:         FileUtils.writeStringToFile(targetTmpFile, content, StandardCharsets.UTF_8);",
          "55:         JenkinsRule.WebClient wc = j.createWebClient().withThrowExceptionOnFailingStatusCode(false);",
          "56:         Page page = wc.goTo(\"userContent/\" + targetTmpFile.getAbsolutePath() + \"/*view*\", null);",
          "58:         MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), CoreMatchers.equalTo(404));",
          "59:     }",
          "61:     @Test",
          "62:     @Issue(\"SECURITY-2481\")",
          "63:     public void windows_canViewAbsolutePath_withEscapeHatch() throws Exception {",
          "64:         Assume.assumeTrue(\"can only be tested this on Windows\", Functions.isWindows());",
          "66:         String originalValue = System.getProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME);",
          "67:         System.setProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, \"true\");",
          "68:         try {",
          "69:             File targetTmpFile = File.createTempFile(\"sec2481\", \"tmp\");",
          "70:             String content = \"random data provided as fixed value\";",
          "71:             FileUtils.writeStringToFile(targetTmpFile, content, StandardCharsets.UTF_8);",
          "73:             JenkinsRule.WebClient wc = j.createWebClient().withThrowExceptionOnFailingStatusCode(false);",
          "74:             Page page = wc.goTo(\"userContent/\" + targetTmpFile.getAbsolutePath() + \"/*view*\", null);",
          "76:             MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), CoreMatchers.equalTo(200));",
          "77:             MatcherAssert.assertThat(page.getWebResponse().getContentAsString(), CoreMatchers.containsString(content));",
          "78:         } finally {",
          "79:             if (originalValue == null) {",
          "80:                 System.clearProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME);",
          "81:             } else {",
          "82:                 System.setProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, originalValue);",
          "83:             }",
          "84:         }",
          "86:     }",
          "88:     @Test",
          "89:     public void canViewRelativePath() throws Exception {",
          "90:         File testFile = new File(j.jenkins.getRootDir(), \"userContent/test.txt\");",
          "91:         String content = \"random data provided as fixed value\";",
          "93:         FileUtils.writeStringToFile(testFile, content, StandardCharsets.UTF_8);",
          "95:         JenkinsRule.WebClient wc = j.createWebClient().withThrowExceptionOnFailingStatusCode(false);",
          "96:         Page page = wc.goTo(\"userContent/test.txt/*view*\", null);",
          "98:         MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), CoreMatchers.equalTo(200));",
          "99:         MatcherAssert.assertThat(page.getWebResponse().getContentAsString(), CoreMatchers.containsString(content));",
          "100:     }",
          "101: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}