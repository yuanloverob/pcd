{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d9b0a9b1b2171a3ab05f248da34fc63fb320668",
      "candidate_info": {
        "commit_hash": "3d9b0a9b1b2171a3ab05f248da34fc63fb320668",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3d9b0a9b1b2171a3ab05f248da34fc63fb320668",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.2+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.12;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191025)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.13;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191030)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e4a9ed8544af3657cced293ed1faed7fcd762da",
      "candidate_info": {
        "commit_hash": "8e4a9ed8544af3657cced293ed1faed7fcd762da",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8e4a9ed8544af3657cced293ed1faed7fcd762da",
        "files": [
          "comment/classes/external.php",
          "comment/tests/externallib_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-64588 comment: New WebService core_comment_add_comment",
        "before_after_code_files": [
          "comment/classes/external.php||comment/classes/external.php",
          "comment/tests/externallib_test.php||comment/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "comment/classes/external.php||comment/classes/external.php": [
          "File: comment/classes/external.php -> comment/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:             )",
          "171:         );",
          "172:     }",
          "173: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:     protected static function get_comment_structure() {",
          "180:         return new external_single_structure(",
          "181:             array(",
          "182:                 'id'             => new external_value(PARAM_INT,  'Comment ID'),",
          "183:                 'content'        => new external_value(PARAM_RAW,  'The content text formatted'),",
          "184:                 'format'         => new external_format_value('content'),",
          "185:                 'timecreated'    => new external_value(PARAM_INT,  'Time created (timestamp)'),",
          "186:                 'strftimeformat' => new external_value(PARAM_NOTAGS, 'Time format'),",
          "187:                 'profileurl'     => new external_value(PARAM_URL,  'URL profile'),",
          "188:                 'fullname'       => new external_value(PARAM_NOTAGS, 'fullname'),",
          "189:                 'time'           => new external_value(PARAM_NOTAGS, 'Time in human format'),",
          "190:                 'avatar'         => new external_value(PARAM_RAW,  'HTML user picture'),",
          "191:                 'userid'         => new external_value(PARAM_INT,  'User ID'),",
          "192:                 'delete'         => new external_value(PARAM_BOOL, 'Permission to delete=true/false', VALUE_OPTIONAL)",
          "193:             ), 'comment'",
          "194:         );",
          "195:     }",
          "202:     public static function add_comments_parameters() {",
          "203:         return new external_function_parameters(",
          "204:             [",
          "205:                 'comments' => new external_multiple_structure(",
          "206:                     new external_single_structure(",
          "207:                         [",
          "208:                             'contextlevel' => new external_value(PARAM_ALPHA, 'contextlevel system, course, user...'),",
          "209:                             'instanceid'   => new external_value(PARAM_INT, 'the id of item associated with the contextlevel'),",
          "210:                             'component'    => new external_value(PARAM_COMPONENT, 'component'),",
          "211:                             'content'      => new external_value(PARAM_RAW, 'component'),",
          "212:                             'itemid'       => new external_value(PARAM_INT, 'associated id'),",
          "213:                             'area'         => new external_value(PARAM_AREA, 'string comment area', VALUE_DEFAULT, ''),",
          "214:                         ]",
          "215:                     )",
          "216:                 )",
          "217:             ]",
          "218:         );",
          "219:     }",
          "228:     public static function add_comments($comments) {",
          "229:         global $CFG, $SITE;",
          "231:         if (empty($CFG->usecomments)) {",
          "232:             throw new comment_exception('commentsnotenabled', 'moodle');",
          "233:         }",
          "235:         $params = self::validate_parameters(self::add_comments_parameters(), ['comments' => $comments]);",
          "238:         foreach ($params['comments'] as $index => $comment) {",
          "239:             $context = self::get_context_from_params($comment);",
          "240:             self::validate_context($context);",
          "242:             list($context, $course, $cm) = get_context_info_array($context->id);",
          "243:             if ($context->id == SYSCONTEXTID) {",
          "244:                 $course = $SITE;",
          "245:             }",
          "248:             $args = new stdClass();",
          "249:             $args->context   = $context;",
          "250:             $args->course    = $course;",
          "251:             $args->cm        = $cm;",
          "252:             $args->component = $comment['component'];",
          "253:             $args->itemid    = $comment['itemid'];",
          "254:             $args->area      = $comment['area'];",
          "256:             $manager = new comment($args);",
          "257:             if (!$manager->can_post()) {",
          "258:                 throw new comment_exception('nopermissiontocomment');",
          "259:             }",
          "261:             $params['comments'][$index]['preparedcomment'] = $manager;",
          "262:         }",
          "265:         $results = [];",
          "266:         foreach ($params['comments'] as $comment) {",
          "267:             $manager = $comment['preparedcomment'];",
          "268:             $newcomment = $manager->add($comment['content']);",
          "269:             if (!empty($newcomment) && is_object($newcomment)) {",
          "270:                 $results[] = $newcomment;",
          "271:             }",
          "272:             $newcomment->delete = true; // USER created the comment, so they can delete it.",
          "273:         }",
          "275:         return $results;",
          "276:     }",
          "283:     public static function add_comments_returns() {",
          "284:         return new external_multiple_structure(",
          "285:             self::get_comment_structure()",
          "286:         );",
          "287:     }",
          "",
          "---------------"
        ],
        "comment/tests/externallib_test.php||comment/tests/externallib_test.php": [
          "File: comment/tests/externallib_test.php -> comment/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     protected function setUp() {",
          "50:         require_once($CFG->dirroot . '/comment/lib.php');",
          "61:         $CFG->usecomments = true;",
          "65:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
          "68:         $record = new stdClass();",
          "70:         $record->name = \"Mod data  test\";",
          "71:         $record->intro = \"Some intro of some sort\";",
          "72:         $record->comments = 1;",
          "77:         $fielddetail = new stdClass();",
          "78:         $fielddetail->name = 'Name';",
          "",
          "[Removed Lines]",
          "48:         global $CFG;",
          "51:     }",
          "56:     public function test_get_comments() {",
          "57:         global $DB, $CFG;",
          "59:         $this->resetAfterTest(true);",
          "63:         $user = $this->getDataGenerator()->create_user();",
          "64:         $course = $this->getDataGenerator()->create_course(array('enablecomment' => 1));",
          "66:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $studentrole->id);",
          "69:         $record->course = $course->id;",
          "74:         $module = $this->getDataGenerator()->create_module('data', $record);",
          "75:         $field = data_get_field_new('text', $module);",
          "",
          "[Added Lines]",
          "48:         global $CFG, $DB;",
          "54:         $this->student = $this->getDataGenerator()->create_user();",
          "55:         $this->course = $this->getDataGenerator()->create_course(array('enablecomment' => 1));",
          "57:         $this->getDataGenerator()->enrol_user($this->student->id, $this->course->id, $studentrole->id);",
          "60:         $record->course = $this->course->id;",
          "65:         $this->module = $this->getDataGenerator()->create_module('data', $record);",
          "66:         $field = data_get_field_new('text', $this->module);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         $field->define_field($fielddetail);",
          "82:         $field->insert_field();",
          "85:         $datacontent = array();",
          "86:         $datacontent['fieldid'] = $field->field->id;",
          "88:         $datacontent['content'] = 'Asterix';",
          "90:         $contentid = $DB->insert_record('data_content', $datacontent);",
          "98:         $newcmt = new stdClass;",
          "100:         $newcmt->commentarea  = 'database_entry';",
          "102:         $newcmt->content      = 'New comment';",
          "103:         $newcmt->format       = 0;",
          "105:         $newcmt->timecreated  = time();",
          "106:         $cmtid1 = $DB->insert_record('comments', $newcmt);",
          "",
          "[Removed Lines]",
          "83:         $recordid = data_add_record($module);",
          "87:         $datacontent['recordid'] = $recordid;",
          "91:         $cm = get_coursemodule_from_instance('data', $module->id, $course->id);",
          "93:         $context = context_module::instance($module->cmid);",
          "95:         $this->setUser($user);",
          "99:         $newcmt->contextid    = $context->id;",
          "101:         $newcmt->itemid       = $recordid;",
          "104:         $newcmt->userid       = $user->id;",
          "",
          "[Added Lines]",
          "74:         $this->recordid = data_add_record($this->module);",
          "78:         $datacontent['recordid'] = $this->recordid;",
          "82:         $this->cm = get_coursemodule_from_instance('data', $this->module->id, $this->course->id);",
          "84:         $this->context = context_module::instance($this->module->cmid);",
          "85:     }",
          "90:     public function test_get_comments() {",
          "91:         global $DB;",
          "93:         $this->resetAfterTest(true);",
          "95:         $this->setUser($this->student);",
          "99:         $newcmt->contextid    = $this->context->id;",
          "101:         $newcmt->itemid       = $this->recordid;",
          "104:         $newcmt->userid       = $this->student->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         $cmtid2 = $DB->insert_record('comments', $newcmt);",
          "112:         $contextlevel = 'module';",
          "114:         $component = 'mod_data';",
          "116:         $area = 'database_entry';",
          "117:         $page = 0;",
          "",
          "[Removed Lines]",
          "113:         $instanceid = $cm->id;",
          "115:         $itemid = $recordid;",
          "",
          "[Added Lines]",
          "113:         $instanceid = $this->cm->id;",
          "115:         $itemid = $this->recordid;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:         $this->assertEquals(15, $result['perpage']);",
          "128:         $this->assertTrue($result['canpost']);",
          "133:         $this->assertEquals($cmtid2, $result['comments'][0]['id']); // Default ordering newer first.",
          "134:         $this->assertEquals($cmtid1, $result['comments'][1]['id']);",
          "",
          "[Removed Lines]",
          "130:         $this->assertEquals($user->id, $result['comments'][0]['userid']);",
          "131:         $this->assertEquals($user->id, $result['comments'][1]['userid']);",
          "",
          "[Added Lines]",
          "130:         $this->assertEquals($this->student->id, $result['comments'][0]['userid']);",
          "131:         $this->assertEquals($this->student->id, $result['comments'][1]['userid']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:         $this->assertEquals($CFG->commentsperpage, $result['perpage']);",
          "155:         $this->assertEquals($cmtid2, $result['comments'][0]['id']);",
          "156:     }",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     public function test_add_comments_not_enabled_site_level() {",
          "162:         global $CFG;",
          "163:         $this->resetAfterTest(true);",
          "165:         $CFG->usecomments = false;",
          "166:         $this->setUser($this->student);",
          "167:         $this->expectException(comment_exception::class);",
          "168:         core_comment_external::add_comments([",
          "169:             [",
          "170:                 'contextlevel' => 'module',",
          "171:                 'instanceid' => $this->cm->id,",
          "172:                 'component' => 'mod_data',",
          "173:                 'content' => 'abc',",
          "174:                 'itemid' => $this->recordid,",
          "175:                 'area' => 'database_entry'",
          "176:             ]",
          "177:         ]);",
          "178:     }",
          "183:     public function test_add_comments_not_enabled_module_level() {",
          "184:         global $DB;",
          "185:         $this->resetAfterTest(true);",
          "187:         $DB->set_field('data', 'comments', 0, array('id' => $this->module->id));",
          "188:         $this->setUser($this->student);",
          "189:         $this->expectException(comment_exception::class);",
          "190:         core_comment_external::add_comments([",
          "191:             [",
          "192:                 'contextlevel' => 'module',",
          "193:                 'instanceid' => $this->cm->id,",
          "194:                 'component' => 'mod_data',",
          "195:                 'content' => 'abc',",
          "196:                 'itemid' => $this->recordid,",
          "197:                 'area' => 'database_entry'",
          "198:             ]",
          "199:         ]);",
          "200:     }",
          "205:     public function test_add_comments_single() {",
          "206:         $this->resetAfterTest(true);",
          "207:         $this->setUser($this->student);",
          "209:         $result = core_comment_external::add_comments([",
          "210:             [",
          "211:                 'contextlevel' => 'module',",
          "212:                 'instanceid' => $this->cm->id,",
          "213:                 'component' => 'mod_data',",
          "214:                 'content' => 'abc',",
          "215:                 'itemid' => $this->recordid,",
          "216:                 'area' => 'database_entry'",
          "217:             ]",
          "218:         ]);",
          "219:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "221:         $expectedkeys = [",
          "222:             'id',",
          "223:             'content',",
          "224:             'format',",
          "225:             'timecreated',",
          "226:             'strftimeformat',",
          "227:             'profileurl',",
          "228:             'fullname',",
          "229:             'time',",
          "230:             'avatar',",
          "231:             'userid',",
          "232:             'delete',",
          "233:         ];",
          "236:         $this->assertCount(1, $result);",
          "237:         foreach ($expectedkeys as $key) {",
          "238:             $this->assertArrayHasKey($key, $result[0]);",
          "239:         }",
          "240:     }",
          "247:     public function test_add_comments_multiple_contains_invalid() {",
          "248:         $this->resetAfterTest(true);",
          "249:         $this->setUser($this->student);",
          "251:         $this->expectException(comment_exception::class);",
          "252:         core_comment_external::add_comments([",
          "253:             [",
          "254:                 'contextlevel' => 'module',",
          "255:                 'instanceid' => $this->cm->id,",
          "256:                 'component' => 'mod_data',",
          "257:                 'content' => 'abc',",
          "258:                 'itemid' => $this->recordid,",
          "259:                 'area' => 'database_entry'",
          "260:             ],",
          "261:             [",
          "262:                 'contextlevel' => 'module',",
          "263:                 'instanceid' => $this->cm->id,",
          "264:                 'component' => 'mod_data',",
          "265:                 'content' => 'abc',",
          "266:                 'itemid' => $this->recordid,",
          "267:                 'area' => 'areanotfound'",
          "268:             ],",
          "269:         ]);",
          "270:     }",
          "277:     public function test_add_comments_multiple_all_valid() {",
          "278:         $this->resetAfterTest(true);",
          "279:         $this->setUser($this->student);",
          "281:         $inputdata = [",
          "282:             [",
          "283:                 'contextlevel' => 'module',",
          "284:                 'instanceid' => $this->cm->id,",
          "285:                 'component' => 'mod_data',",
          "286:                 'content' => 'cat',",
          "287:                 'itemid' => $this->recordid,",
          "288:                 'area' => 'database_entry'",
          "289:             ],",
          "290:             [",
          "291:                 'contextlevel' => 'module',",
          "292:                 'instanceid' => $this->cm->id,",
          "293:                 'component' => 'mod_data',",
          "294:                 'content' => 'dog',",
          "295:                 'itemid' => $this->recordid,",
          "296:                 'area' => 'database_entry'",
          "297:             ]",
          "298:         ];",
          "299:         $result = core_comment_external::add_comments($inputdata);",
          "300:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "303:         $this->assertCount(2, $result);",
          "306:         foreach ($result as $index => $comment) {",
          "307:             $formatoptions = array('overflowdiv' => true, 'blanktarget' => true);",
          "308:             $expectedcontent = format_text($inputdata[$index]['content'], FORMAT_MOODLE, $formatoptions);",
          "309:             $this->assertEquals($expectedcontent, $comment['content']);",
          "310:         }",
          "311:     }",
          "316:     public function test_add_comments_invalid_area() {",
          "317:         $this->resetAfterTest(true);",
          "318:         $this->setUser($this->student);",
          "320:         $comments = [",
          "321:             [",
          "322:                 'contextlevel' => 'module',",
          "323:                 'instanceid' => $this->cm->id,",
          "324:                 'component' => 'mod_data',",
          "325:                 'content' => 'abc',",
          "326:                 'itemid' => $this->recordid,",
          "327:                 'area' => 'rhomboid'",
          "328:             ]",
          "329:         ];",
          "330:         $this->expectException(comment_exception::class);",
          "331:         core_comment_external::add_comments($comments);",
          "332:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         'capabilities' => 'moodle/comment:view',",
          "335:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "336:     ),",
          "337:     'core_completion_get_activities_completion_status' => array(",
          "338:         'classname' => 'core_completion_external',",
          "339:         'methodname' => 'get_activities_completion_status',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:     ),",
          "337:     'core_comment_add_comments' => array(",
          "338:         'classname' => 'core_comment_external',",
          "339:         'methodname' => 'add_comments',",
          "340:         'description' => 'Adds a comment or comments.',",
          "341:         'type' => 'write',",
          "342:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019092700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019092700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1542213b00f48718fdc5dfece961e62a9ef2d6c2",
      "candidate_info": {
        "commit_hash": "1542213b00f48718fdc5dfece961e62a9ef2d6c2",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1542213b00f48718fdc5dfece961e62a9ef2d6c2",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.2+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.02;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2 (Build: 20190909)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.03;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20190913)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0616f045c392f774812f3d79ca8936a0274296be",
      "candidate_info": {
        "commit_hash": "0616f045c392f774812f3d79ca8936a0274296be",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0616f045c392f774812f3d79ca8936a0274296be",
        "files": [
          "cohort/lib.php",
          "course/classes/category.php",
          "lang/en/role.php",
          "lib/accesslib.php",
          "lib/classes/user.php",
          "lib/db/access.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/filebrowser/file_info_context_course.php",
          "lib/phpunit/classes/advanced_testcase.php",
          "lib/setuplib.php",
          "lib/tests/accesslib_has_capability_test.php",
          "lib/tests/moodlelib_test.php",
          "lib/tests/session_manager_test.php",
          "lib/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-53566 core: Add support for context locking\n\nThis chagne adds support for a new feature known as Context Locking.\nThis allows a context to be locked, thereby removing all write\ncapabilities for all users (including admin) for that context, and all\nchild contexts.",
        "before_after_code_files": [
          "cohort/lib.php||cohort/lib.php",
          "course/classes/category.php||course/classes/category.php",
          "lang/en/role.php||lang/en/role.php",
          "lib/accesslib.php||lib/accesslib.php",
          "lib/classes/user.php||lib/classes/user.php",
          "lib/db/access.php||lib/db/access.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/filebrowser/file_info_context_course.php||lib/filebrowser/file_info_context_course.php",
          "lib/phpunit/classes/advanced_testcase.php||lib/phpunit/classes/advanced_testcase.php",
          "lib/setuplib.php||lib/setuplib.php",
          "lib/tests/accesslib_has_capability_test.php||lib/tests/accesslib_has_capability_test.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php",
          "lib/tests/session_manager_test.php||lib/tests/session_manager_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "cohort/lib.php||cohort/lib.php": [
          "File: cohort/lib.php -> cohort/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:         }",
          "635:     }",
          "636:     return $themes;",
          "",
          "[Removed Lines]",
          "637: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "course/classes/category.php||course/classes/category.php": [
          "File: course/classes/category.php -> course/classes/category.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:                 $record->visible = 1;",
          "239:                 $record->depth = 0;",
          "240:                 $record->path = '';",
          "241:                 self::$coursecat0 = new self($record);",
          "242:             }",
          "243:             return self::$coursecat0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:                 $record->locked = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2458:         $context = $this->get_context();",
          "2459:         $a['xi'] = $context->id;",
          "2460:         $a['xp'] = $context->path;",
          "2461:         return $a;",
          "2462:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2462:         $a['xl'] = $context->locked;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2486:         $record->ctxdepth = $record->depth + 1;",
          "2487:         $record->ctxlevel = CONTEXT_COURSECAT;",
          "2488:         $record->ctxinstance = $record->id;",
          "2489:         return new self($record, true);",
          "2490:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:         $record->ctxlocked = $a['xl'];",
          "",
          "---------------"
        ],
        "lang/en/role.php||lang/en/role.php": [
          "File: lang/en/role.php -> lang/en/role.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "411: $string['site:manageallmessaging'] = 'Add, remove, block and unblock contacts for any user';",
          "412: $string['site:manageblocks'] = 'Manage blocks on a page';",
          "413: $string['site:messageanyuser'] = 'Bypass user privacy preferences for messaging any user';",
          "414: $string['site:mnetloginfromremote'] = 'Login from a remote application via MNet';",
          "415: $string['site:mnetlogintoremote'] = 'Roam to a remote application via MNet';",
          "416: $string['site:readallmessages'] = 'Read all messages on site';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: $string['site:managecontextlocks'] = 'Manage locking of site contexts';",
          "",
          "---------------"
        ],
        "lib/accesslib.php||lib/accesslib.php": [
          "File: lib/accesslib.php -> lib/accesslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:         }",
          "479:     }",
          "482:     if ($userid != 0) {",
          "483:         if ($userid == $USER->id and isset($USER->deleted)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     if (!empty($CFG->contextlocking)) {",
          "483:         if ($capinfo->captype === 'write' && $context->locked && $capinfo->name !== 'moodle/site:managecontextlocks') {",
          "484:             return false;",
          "485:         }",
          "486:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4728:     protected $_depth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4744:     protected $_locked;",
          "4753:     protected $_ancestorlocked;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4865:      protected static function preload_from_record(stdClass $rec) {",
          "4866:          if (empty($rec->ctxid) or empty($rec->ctxlevel) or !isset($rec->ctxinstance) or empty($rec->ctxpath) or empty($rec->ctxdepth)) {",
          "4868:              return;",
          "4869:          }",
          "4872:          $record = new stdClass();",
          "4873:          $record->id           = $rec->ctxid;       unset($rec->ctxid);",
          "4874:          $record->contextlevel = $rec->ctxlevel;    unset($rec->ctxlevel);",
          "4875:          $record->instanceid   = $rec->ctxinstance; unset($rec->ctxinstance);",
          "4876:          $record->path         = $rec->ctxpath;     unset($rec->ctxpath);",
          "4877:          $record->depth        = $rec->ctxdepth;    unset($rec->ctxdepth);",
          "4879:          return context::create_instance_from_record($record);",
          "4880:      }",
          "",
          "[Added Lines]",
          "4890:     protected static function preload_from_record(stdClass $rec) {",
          "4891:         $notenoughdata = false;",
          "4892:         $notenoughdata = $notenoughdata || empty($rec->ctxid);",
          "4893:         $notenoughdata = $notenoughdata || empty($rec->ctxlevel);",
          "4894:         $notenoughdata = $notenoughdata || !isset($rec->ctxinstance);",
          "4895:         $notenoughdata = $notenoughdata || empty($rec->ctxpath);",
          "4896:         $notenoughdata = $notenoughdata || empty($rec->ctxdepth);",
          "4897:         $notenoughdata = $notenoughdata || !isset($rec->ctxlocked);",
          "4898:         if ($notenoughdata) {",
          "4900:             if (isset($rec->ctxid) && !isset($rec->ctxlocked)) {",
          "4901:                 debugging('Locked value missing. Code is possibly not usings the getter properly.', DEBUG_DEVELOPER);",
          "4902:             }",
          "4903:             return;",
          "4904:         }",
          "4906:         $record = (object) [",
          "4907:             'id'            => $rec->ctxid,",
          "4908:             'contextlevel'  => $rec->ctxlevel,",
          "4909:             'instanceid'    => $rec->ctxinstance,",
          "4910:             'path'          => $rec->ctxpath,",
          "4911:             'depth'         => $rec->ctxdepth,",
          "4912:             'locked'        => $rec->ctxlocked,",
          "4913:         ];",
          "4915:         unset($rec->ctxid);",
          "4916:         unset($rec->ctxlevel);",
          "4917:         unset($rec->ctxinstance);",
          "4918:         unset($rec->ctxpath);",
          "4919:         unset($rec->ctxdepth);",
          "4920:         unset($rec->ctxlocked);",
          "4922:         return context::create_instance_from_record($record);",
          "4923:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4899:     public function __get($name) {",
          "4900:         switch ($name) {",
          "4907:             default:",
          "4908:                 debugging('Invalid context property accessed! '.$name);",
          "",
          "[Removed Lines]",
          "4901:             case 'id':           return $this->_id;",
          "4902:             case 'contextlevel': return $this->_contextlevel;",
          "4903:             case 'instanceid':   return $this->_instanceid;",
          "4904:             case 'path':         return $this->_path;",
          "4905:             case 'depth':        return $this->_depth;",
          "",
          "[Added Lines]",
          "4944:             case 'id':",
          "4945:                 return $this->_id;",
          "4946:             case 'contextlevel':",
          "4947:                 return $this->_contextlevel;",
          "4948:             case 'instanceid':",
          "4949:                 return $this->_instanceid;",
          "4950:             case 'path':",
          "4951:                 return $this->_path;",
          "4952:             case 'depth':",
          "4953:                 return $this->_depth;",
          "4954:             case 'locked':",
          "4955:                 return $this->is_locked();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4918:     public function __isset($name) {",
          "4919:         switch ($name) {",
          "4927:         }",
          "4929:     }",
          "4935:     public function __unset($name) {",
          "",
          "[Removed Lines]",
          "4920:             case 'id':           return isset($this->_id);",
          "4921:             case 'contextlevel': return isset($this->_contextlevel);",
          "4922:             case 'instanceid':   return isset($this->_instanceid);",
          "4923:             case 'path':         return isset($this->_path);",
          "4924:             case 'depth':        return isset($this->_depth);",
          "4926:             default: return false;",
          "",
          "[Added Lines]",
          "4970:             case 'id':",
          "4971:                 return isset($this->_id);",
          "4972:             case 'contextlevel':",
          "4973:                 return isset($this->_contextlevel);",
          "4974:             case 'instanceid':",
          "4975:                 return isset($this->_instanceid);",
          "4976:             case 'path':",
          "4977:                 return isset($this->_path);",
          "4978:             case 'depth':",
          "4979:                 return isset($this->_depth);",
          "4980:             case 'locked':",
          "4982:                 return true;",
          "4983:             default:",
          "4984:                 return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4950:             'contextlevel' => $this->contextlevel,",
          "4951:             'instanceid'   => $this->instanceid,",
          "4952:             'path'         => $this->path,",
          "4954:         );",
          "4955:         return new ArrayIterator($ret);",
          "4956:     }",
          "",
          "[Removed Lines]",
          "4953:             'depth'        => $this->depth",
          "",
          "[Added Lines]",
          "5010:             'depth'        => $this->depth,",
          "5011:             'locked'       => $this->locked,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4969:         $this->_instanceid   = $record->instanceid;",
          "4970:         $this->_path         = $record->path;",
          "4971:         $this->_depth        = $record->depth;",
          "4972:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5031:         if (isset($record->locked)) {",
          "5032:             $this->_locked = $record->locked;",
          "5033:         } else if (!during_initial_install() && !moodle_needs_upgrading()) {",
          "5034:             debugging('Locked value missing. Code is possibly not usings the getter properly.', DEBUG_DEVELOPER);",
          "5035:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5011:         if ($dbfamily == 'mysql') {",
          "5012:             $updatesql = \"UPDATE {context} ct, {context_temp} temp",
          "5013:                              SET ct.path     = temp.path,",
          "5015:                            WHERE ct.id = temp.id\";",
          "5016:         } else if ($dbfamily == 'oracle') {",
          "5017:             $updatesql = \"UPDATE {context} ct",
          "5020:                                     FROM {context_temp} temp",
          "5021:                                    WHERE temp.id=ct.id)",
          "5022:                            WHERE EXISTS (SELECT 'x'",
          "",
          "[Removed Lines]",
          "5014:                                  ct.depth    = temp.depth",
          "5018:                              SET (ct.path, ct.depth) =",
          "5019:                                  (SELECT temp.path, temp.depth",
          "",
          "[Added Lines]",
          "5078:                                  ct.depth    = temp.depth,",
          "5079:                                  ct.locked   = temp.locked",
          "5083:                              SET (ct.path, ct.depth, ct.locked) =",
          "5084:                                  (SELECT temp.path, temp.depth, temp.locked",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5025:         } else if ($dbfamily == 'postgres' or $dbfamily == 'mssql') {",
          "5026:             $updatesql = \"UPDATE {context}",
          "5027:                              SET path     = temp.path,",
          "5029:                             FROM {context_temp} temp",
          "5030:                            WHERE temp.id={context}.id\";",
          "5031:         } else {",
          "5033:             $updatesql = \"UPDATE {context}",
          "5034:                              SET path     = (SELECT path FROM {context_temp} WHERE id = {context}.id),",
          "5036:                              WHERE id IN (SELECT id FROM {context_temp})\";",
          "5037:         }",
          "",
          "[Removed Lines]",
          "5028:                                  depth    = temp.depth",
          "5035:                                  depth    = (SELECT depth FROM {context_temp} WHERE id = {context}.id)",
          "",
          "[Added Lines]",
          "5093:                                  depth    = temp.depth,",
          "5094:                                  locked   = temp.locked",
          "5101:                                  depth    = (SELECT depth FROM {context_temp} WHERE id = {context}.id),",
          "5102:                                  locked   = (SELECT locked FROM {context_temp} WHERE id = {context}.id)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5118:         $trans->allow_commit();",
          "5119:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5194:     public function set_locked(bool $locked) {",
          "5195:         global $DB;",
          "5197:         if ($this->_locked == $locked) {",
          "5198:             return $this;",
          "5199:         }",
          "5201:         $this->_locked = $locked;",
          "5202:         $DB->set_field('context', 'locked', (int) $locked, ['id' => $this->id]);",
          "5203:         $this->mark_dirty();",
          "5204:         self::reset_caches();",
          "5206:         return $this;",
          "5207:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5239:         $record->instanceid   = $instanceid;",
          "5240:         $record->depth        = 0;",
          "5241:         $record->path         = null; //not known before insert",
          "5243:         $record->id = $DB->insert_record('context', $record);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5330:         $record->locked       = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5266:         throw new coding_exception('can not get name of abstract context');",
          "5267:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5363:     public function is_locked() {",
          "5364:         if ($this->_locked) {",
          "5365:             return true;",
          "5366:         }",
          "5368:         if ($parent = $this->get_parent_context()) {",
          "5369:             $this->_ancestorlocked = $parent->is_locked();",
          "5370:             return $this->_ancestorlocked;",
          "5371:         }",
          "5373:         return false;",
          "5374:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5726:     public static function get_preload_record_columns($tablealias) {",
          "5728:     }",
          "",
          "[Removed Lines]",
          "5727:         return array(\"$tablealias.id\"=>\"ctxid\", \"$tablealias.path\"=>\"ctxpath\", \"$tablealias.depth\"=>\"ctxdepth\", \"$tablealias.contextlevel\"=>\"ctxlevel\", \"$tablealias.instanceid\"=>\"ctxinstance\");",
          "",
          "[Added Lines]",
          "5834:         return [",
          "5835:             \"$tablealias.id\" => \"ctxid\",",
          "5836:             \"$tablealias.path\" => \"ctxpath\",",
          "5837:             \"$tablealias.depth\" => \"ctxdepth\",",
          "5838:             \"$tablealias.contextlevel\" => \"ctxlevel\",",
          "5839:             \"$tablealias.instanceid\" => \"ctxinstance\",",
          "5840:             \"$tablealias.locked\" => \"ctxlocked\",",
          "5841:         ];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5739:     public static function get_preload_record_columns_sql($tablealias) {",
          "5741:     }",
          "",
          "[Removed Lines]",
          "5740:         return \"$tablealias.id AS ctxid, $tablealias.path AS ctxpath, $tablealias.depth AS ctxdepth, $tablealias.contextlevel AS ctxlevel, $tablealias.instanceid AS ctxinstance\";",
          "",
          "[Added Lines]",
          "5854:         return \"$tablealias.id AS ctxid, \" .",
          "5855:                \"$tablealias.path AS ctxpath, \" .",
          "5856:                \"$tablealias.depth AS ctxdepth, \" .",
          "5857:                \"$tablealias.contextlevel AS ctxlevel, \" .",
          "5858:                \"$tablealias.instanceid AS ctxinstance, \" .",
          "5859:                \"$tablealias.locked AS ctxlocked\";",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5920:                 $record->instanceid   = 0;",
          "5921:                 $record->path         = '/'.SYSCONTEXTID;",
          "5922:                 $record->depth        = 1;",
          "5923:                 context::$systemcontext = new context_system($record);",
          "5924:             }",
          "5925:             return context::$systemcontext;",
          "5926:         }",
          "5929:         try {",
          "5931:             $record = $DB->get_record('context', array('contextlevel'=>CONTEXT_SYSTEM), '*', MUST_EXIST);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6042:                 $record->locked       = 0;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5943:             $record->contextlevel = CONTEXT_SYSTEM;",
          "5944:             $record->instanceid   = 0;",
          "5945:             $record->depth        = 1;",
          "5948:             try {",
          "5949:                 if ($DB->count_records('context')) {",
          "",
          "[Removed Lines]",
          "5946:             $record->path         = null; //not known before insert",
          "",
          "[Added Lines]",
          "6065:             $record->path         = null; // Not known before insert.",
          "6066:             $record->locked       = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5976:             $DB->update_record('context', $record);",
          "5977:         }",
          "5979:         if (!defined('SYSCONTEXTID')) {",
          "5980:             define('SYSCONTEXTID', $record->id);",
          "5981:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6099:         if (empty($record->locked)) {",
          "6100:             $record->locked = 0;",
          "6101:         }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6056:             $DB->update_record('context', $record);",
          "6057:         }",
          "6058:     }",
          "6059: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6190:     public function set_locked(bool $locked) {",
          "6191:         throw new \\coding_exception('It is not possible to lock the system context');",
          "6193:         return $this;",
          "6194:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6459:             $maxdepth = $DB->get_field_sql(\"SELECT MAX(depth) FROM {course_categories}\");",
          "6460:             for ($n=2; $n<=$maxdepth; $n++) {",
          "6463:                           FROM {context} ctx",
          "6464:                           JOIN {course_categories} cc ON (cc.id = ctx.instanceid AND ctx.contextlevel = \".CONTEXT_COURSECAT.\" AND cc.depth = $n)",
          "6465:                           JOIN {context} pctx ON (pctx.instanceid = cc.parent AND pctx.contextlevel = \".CONTEXT_COURSECAT.\")",
          "",
          "[Removed Lines]",
          "6461:                 $sql = \"INSERT INTO {context_temp} (id, path, depth)",
          "6462:                         SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1",
          "",
          "[Added Lines]",
          "6597:                 $sql = \"INSERT INTO {context_temp} (id, path, depth, locked)",
          "6598:                         SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1, ctx.locked",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6682:             $DB->execute($sql);",
          "6687:                       FROM {context} ctx",
          "6688:                       JOIN {course} c ON (c.id = ctx.instanceid AND ctx.contextlevel = \".CONTEXT_COURSE.\" AND c.category <> 0)",
          "6689:                       JOIN {context} pctx ON (pctx.instanceid = c.category AND pctx.contextlevel = \".CONTEXT_COURSECAT.\")",
          "",
          "[Removed Lines]",
          "6685:             $sql = \"INSERT INTO {context_temp} (id, path, depth)",
          "6686:                     SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1",
          "",
          "[Added Lines]",
          "6821:             $sql = \"INSERT INTO {context_temp} (id, path, depth, locked)",
          "6822:                     SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1, ctx.locked",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6951:                 $ctxemptyclause = \"AND (ctx.path IS NULL OR ctx.depth = 0)\";",
          "6952:             }",
          "6956:                       FROM {context} ctx",
          "6957:                       JOIN {course_modules} cm ON (cm.id = ctx.instanceid AND ctx.contextlevel = \".CONTEXT_MODULE.\")",
          "6958:                       JOIN {context} pctx ON (pctx.instanceid = cm.course AND pctx.contextlevel = \".CONTEXT_COURSE.\")",
          "",
          "[Removed Lines]",
          "6954:             $sql = \"INSERT INTO {context_temp} (id, path, depth)",
          "6955:                     SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1",
          "",
          "[Added Lines]",
          "7090:             $sql = \"INSERT INTO {context_temp} (id, path, depth, locked)",
          "7091:                     SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1, ctx.locked",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7172:             }",
          "7177:                       FROM {context} ctx",
          "7178:                       JOIN {block_instances} bi ON (bi.id = ctx.instanceid AND ctx.contextlevel = \".CONTEXT_BLOCK.\")",
          "7179:                       JOIN {context} pctx ON (pctx.id = bi.parentcontextid)",
          "",
          "[Removed Lines]",
          "7175:             $sql = \"INSERT INTO {context_temp} (id, path, depth)",
          "7176:                     SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1",
          "",
          "[Added Lines]",
          "7311:             $sql = \"INSERT INTO {context_temp} (id, path, depth, locked)",
          "7312:                     SELECT ctx.id, \".$DB->sql_concat('pctx.path', \"'/'\", 'ctx.id').\", pctx.depth+1, ctx.locked",
          "",
          "---------------"
        ],
        "lib/classes/user.php||lib/classes/user.php": [
          "File: lib/classes/user.php -> lib/classes/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:     protected static function get_enrolled_sql_on_courses_with_capability($capability) {",
          "384:         $courses = get_user_capability_course($capability, null, true,",
          "386:         if (!$courses) {",
          "387:             return [null, null];",
          "388:         }",
          "",
          "[Removed Lines]",
          "385:                 'ctxid, ctxpath, ctxdepth, ctxlevel, ctxinstance');",
          "",
          "[Added Lines]",
          "385:                 implode(',', array_values(context_helper::get_preload_record_columns('ctx'))));",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2432:         )",
          "2433:     ),",
          "2435: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2436:     'moodle/site:managecontextlocks' => [",
          "2437:         'captype' => 'write',",
          "2438:         'contextlevel' => CONTEXT_SYSTEM,",
          "2439:         'archetypes' => [",
          "2440:         ],",
          "2441:     ],",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2658:         $field = new xmldb_field('predictionsprocessor', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'timesplitting');",
          "2666:         upgrade_main_savepoint(true, 2018102900.00);",
          "2667:     }",
          "",
          "[Removed Lines]",
          "2661:         if (!$dbman->field_exists($table, $field)) {",
          "2662:             $dbman->add_field($table, $field);",
          "2663:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2771:         upgrade_main_savepoint(true, 2018110700.01);",
          "2772:     }",
          "2774:     return true;",
          "2775: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2770:     if ($oldversion < 2018111300.00) {",
          "2772:         $table = new xmldb_table('context');",
          "2773:         $field = new xmldb_field('locked', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0', 'depth');",
          "2776:         if (!$dbman->field_exists($table, $field)) {",
          "2777:             $dbman->add_field($table, $field);",
          "2778:         }",
          "2781:         $table = new xmldb_table('context_temp');",
          "2782:         $field = new xmldb_field('locked', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0', 'depth');",
          "2785:         if (!$dbman->field_exists($table, $field)) {",
          "2786:             $dbman->add_field($table, $field);",
          "2787:         }",
          "2790:         upgrade_main_savepoint(true, 2018111300.00);",
          "2791:     }",
          "",
          "---------------"
        ],
        "lib/filebrowser/file_info_context_course.php||lib/filebrowser/file_info_context_course.php": [
          "File: lib/filebrowser/file_info_context_course.php -> lib/filebrowser/file_info_context_course.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:             'contextlevel' => CONTEXT_MODULE,",
          "531:             'depth' => $this->context->depth + 1,",
          "532:             'pathmask' => $this->context->path . '/%'];",
          "535:             FROM {files} f",
          "536:             INNER JOIN {context} ctx ON ctx.id = f.contextid",
          "537:             WHERE f.filename <> :emptyfilename",
          "538:               AND ctx.contextlevel = :contextlevel",
          "539:               AND ctx.depth = :depth",
          "540:               AND \" . $DB->sql_like('ctx.path', ':pathmask') . \" \";",
          "544:         list($sql2, $params2) = $this->build_search_files_sql($extensions);",
          "545:         $areas = [];",
          "546:         if ($rs = $DB->get_recordset_sql($sql1. $sql2 . $sql3, array_merge($params1, $params2))) {",
          "",
          "[Removed Lines]",
          "533:         $sql1 = \"SELECT ctx.id AS contextid, f.component, f.filearea, f.itemid, ctx.instanceid AS cmid, \" .",
          "534:                 context_helper::get_preload_record_columns_sql('ctx') . \"",
          "541:         $sql3 = ' GROUP BY ctx.id, f.component, f.filearea, f.itemid, ctx.instanceid,",
          "542:               ctx.path, ctx.depth, ctx.contextlevel",
          "543:             ORDER BY ctx.id, f.component, f.filearea, f.itemid';",
          "",
          "[Added Lines]",
          "533:         $ctxfieldsas = context_helper::get_preload_record_columns_sql('ctx');",
          "534:         $ctxfields = implode(', ', array_keys(context_helper::get_preload_record_columns('ctx')));",
          "535:         $sql1 = \"SELECT",
          "536:                     ctx.id AS contextid,",
          "537:                     f.component,",
          "538:                     f.filearea,",
          "539:                     f.itemid,",
          "540:                     ctx.instanceid AS cmid,",
          "541:                     {$ctxfieldsas}",
          "548:         $sql3 = \"",
          "549:             GROUP BY ctx.id, f.component, f.filearea, f.itemid, {$ctxfields}",
          "550:             ORDER BY ctx.id, f.component, f.filearea, f.itemid\";",
          "",
          "---------------"
        ],
        "lib/phpunit/classes/advanced_testcase.php||lib/phpunit/classes/advanced_testcase.php": [
          "File: lib/phpunit/classes/advanced_testcase.php -> lib/phpunit/classes/advanced_testcase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:             self::resetAllData(true);",
          "133:         }",
          "136:         if ($DB->is_transaction_started()) {",
          "137:             self::resetAllData();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:         context_helper::reset_caches();",
          "",
          "---------------"
        ],
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1396: function is_major_upgrade_required() {",
          "1397:     global $CFG;",
          "1400:     $required = empty($CFG->version);",
          "1401:     $required = $required || (float)$CFG->version < $lastmajordbchanges;",
          "",
          "[Removed Lines]",
          "1398:     $lastmajordbchanges = 2017092900.00;",
          "",
          "[Added Lines]",
          "1398:     $lastmajordbchanges = 2018111300.00;",
          "",
          "---------------"
        ],
        "lib/tests/accesslib_has_capability_test.php||lib/tests/accesslib_has_capability_test.php": [
          "File: lib/tests/accesslib_has_capability_test.php -> lib/tests/accesslib_has_capability_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "34: class accesslib_has_capability_testcase extends \\advanced_testcase {",
          "46:     public function test_locked_contexts($lockedcontexts, $blocked) {",
          "47:         global $DB;",
          "49:         $this->resetAfterTest();",
          "50:         set_config('contextlocking', 1);",
          "52:         $generator = $this->getDataGenerator();",
          "53:         $otheruser = $generator->create_user();",
          "93:         $adminuser = \\core_user::get_user_by_username('admin');",
          "94:         $contexts = (object) [",
          "95:             'system' => \\context_system::instance(),",
          "96:             'adminuser' => \\context_user::instance($adminuser->id),",
          "97:         ];",
          "99:         $cat1 = $generator->create_category();",
          "100:         $cat1a = $generator->create_category(['parent' => $cat1->id]);",
          "101:         $cat1b = $generator->create_category(['parent' => $cat1->id]);",
          "103:         $contexts->cat1 = \\context_coursecat::instance($cat1->id);",
          "104:         $contexts->cat1a = \\context_coursecat::instance($cat1a->id);",
          "105:         $contexts->cat1b = \\context_coursecat::instance($cat1b->id);",
          "107:         $cat1course1 = $generator->create_course(['category' => $cat1->id]);",
          "108:         $cat1course2 = $generator->create_course(['category' => $cat1->id]);",
          "109:         $cat1acourse1 = $generator->create_course(['category' => $cat1a->id]);",
          "110:         $cat1acourse2 = $generator->create_course(['category' => $cat1a->id]);",
          "111:         $cat1bcourse1 = $generator->create_course(['category' => $cat1b->id]);",
          "112:         $cat1bcourse2 = $generator->create_course(['category' => $cat1b->id]);",
          "114:         $contexts->cat1course1 = \\context_course::instance($cat1course1->id);",
          "115:         $contexts->cat1acourse1 = \\context_course::instance($cat1acourse1->id);",
          "116:         $contexts->cat1bcourse1 = \\context_course::instance($cat1bcourse1->id);",
          "117:         $contexts->cat1course2 = \\context_course::instance($cat1course2->id);",
          "118:         $contexts->cat1acourse2 = \\context_course::instance($cat1acourse2->id);",
          "119:         $contexts->cat1bcourse2 = \\context_course::instance($cat1bcourse2->id);",
          "121:         $cat1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1->id]);",
          "122:         $cat1ablock = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1a->id]);",
          "123:         $cat1bblock = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1b->id]);",
          "124:         $cat1course1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1course1->id]);",
          "125:         $cat1course2block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1course2->id]);",
          "126:         $cat1acourse1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1acourse1->id]);",
          "127:         $cat1acourse2block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1acourse2->id]);",
          "128:         $cat1bcourse1block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1bcourse1->id]);",
          "129:         $cat1bcourse2block = $generator->create_block('online_users', ['parentcontextid' => $contexts->cat1bcourse2->id]);",
          "131:         $contexts->cat1block = \\context_block::instance($cat1block->id);",
          "132:         $contexts->cat1ablock = \\context_block::instance($cat1ablock->id);",
          "133:         $contexts->cat1bblock = \\context_block::instance($cat1bblock->id);",
          "134:         $contexts->cat1course1block = \\context_block::instance($cat1course1block->id);",
          "135:         $contexts->cat1course2block = \\context_block::instance($cat1course2block->id);",
          "136:         $contexts->cat1acourse1block = \\context_block::instance($cat1acourse1block->id);",
          "137:         $contexts->cat1acourse2block = \\context_block::instance($cat1acourse2block->id);",
          "138:         $contexts->cat1bcourse1block = \\context_block::instance($cat1bcourse1block->id);",
          "139:         $contexts->cat1bcourse2block = \\context_block::instance($cat1bcourse2block->id);",
          "141:         $writecapability = 'moodle/block:edit';",
          "142:         $readcapability = 'moodle/block:view';",
          "143:         $managecapability = 'moodle/site:managecontextlocks';",
          "145:         $this->setAdminUser();",
          "146:         $totest = (array) $contexts;",
          "147:         foreach ($totest as $context) {",
          "148:             $this->assertTrue(has_capability($writecapability, $context));",
          "149:             $this->assertTrue(has_capability($readcapability, $context));",
          "150:             $this->assertTrue(has_capability($managecapability, $context));",
          "151:         }",
          "154:         foreach ($lockedcontexts as $contextname => $value) {",
          "155:             $contexts->$contextname->set_locked($value);",
          "156:         }",
          "159:         foreach ((array) $contexts as $context) {",
          "160:             $this->assertTrue(has_capability($readcapability, $context));",
          "161:             $this->assertTrue(has_capability($managecapability, $context));",
          "162:         }",
          "165:         foreach ((array) $contexts as $contextname => $context) {",
          "166:             if (false !== array_search($contextname, $blocked)) {",
          "167:                 $this->assertFalse(has_capability($writecapability, $context));",
          "168:             } else {",
          "169:                 $this->assertTrue(has_capability($writecapability, $context));",
          "170:             }",
          "171:         }",
          "173:         $this->setUser($otheruser);",
          "175:         foreach ((array) $contexts as $contextname => $context) {",
          "176:             $this->assertFalse(has_capability($writecapability, $context));",
          "177:         }",
          "180:         set_config('contextlocking', 0);",
          "182:         $this->setAdminUser();",
          "184:         foreach ((array) $contexts as $context) {",
          "185:             $this->assertTrue(has_capability($readcapability, $context));",
          "186:             $this->assertTrue(has_capability($managecapability, $context));",
          "187:         }",
          "190:         foreach ((array) $contexts as $contextname => $context) {",
          "191:             $this->assertTrue(has_capability($writecapability, $context));",
          "192:         }",
          "194:         $this->setUser($otheruser);",
          "196:         foreach ((array) $contexts as $contextname => $context) {",
          "197:             $this->assertFalse(has_capability($writecapability, $context));",
          "198:         }",
          "199:     }",
          "206:     public function locked_context_provider() {",
          "207:         return [",
          "208:             'All unlocked' => [",
          "209:                 'locked' => [",
          "210:                 ],",
          "211:                 'blockedwrites' => [",
          "212:                 ],",
          "213:             ],",
          "214:             'User is locked (yes, this is weird)' => [",
          "215:                 'locked' => [",
          "216:                     'adminuser' => true,",
          "217:                 ],",
          "218:                 'blockedwrites' => [",
          "219:                     'adminuser',",
          "220:                 ],",
          "221:             ],",
          "222:             'Cat1/Block locked' => [",
          "223:                 'locked' => [",
          "224:                     'cat1block' => true,",
          "225:                 ],",
          "226:                 'blockedwrites' => [",
          "227:                     'cat1block',",
          "228:                 ],",
          "229:             ],",
          "230:             'Cat1' => [",
          "231:                 'locked' => [",
          "232:                     'cat1' => true,",
          "233:                 ],",
          "234:                 'blockedwrites' => [",
          "235:                     'cat1',",
          "236:                     'cat1block',",
          "237:                     'cat1a',",
          "238:                     'cat1ablock',",
          "239:                     'cat1b',",
          "240:                     'cat1bblock',",
          "241:                     'cat1course1',",
          "242:                     'cat1course1block',",
          "243:                     'cat1course2',",
          "244:                     'cat1course2block',",
          "245:                     'cat1acourse1',",
          "246:                     'cat1acourse1block',",
          "247:                     'cat1acourse2',",
          "248:                     'cat1acourse2block',",
          "249:                     'cat1bcourse1',",
          "250:                     'cat1bcourse1block',",
          "251:                     'cat1bcourse2',",
          "252:                     'cat1bcourse2block',",
          "253:                 ],",
          "254:             ],",
          "255:             'Cat1 locked and a child explicitly unlocked' => [",
          "256:                 'locked' => [",
          "257:                     'cat1' => true,",
          "258:                     'cat1a' => false,",
          "259:                 ],",
          "260:                 'blockedwrites' => [",
          "261:                     'cat1',",
          "262:                     'cat1block',",
          "263:                     'cat1a',",
          "264:                     'cat1ablock',",
          "265:                     'cat1b',",
          "266:                     'cat1bblock',",
          "267:                     'cat1course1',",
          "268:                     'cat1course1block',",
          "269:                     'cat1course2',",
          "270:                     'cat1course2block',",
          "271:                     'cat1acourse1',",
          "272:                     'cat1acourse1block',",
          "273:                     'cat1acourse2',",
          "274:                     'cat1acourse2block',",
          "275:                     'cat1bcourse1',",
          "276:                     'cat1bcourse1block',",
          "277:                     'cat1bcourse2',",
          "278:                     'cat1bcourse2block',",
          "279:                 ],",
          "280:             ],",
          "281:         ];",
          "282:     }",
          "283: }",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2429:             'contextlevel' => $obj->contextlevel,",
          "2430:             'instanceid'   => $obj->instanceid,",
          "2431:             'path'         => $obj->path,",
          "2433:         );",
          "2434:         $this->assertEquals(convert_to_array($obj), $ar);",
          "2435:     }",
          "",
          "[Removed Lines]",
          "2432:             'depth'        => $obj->depth",
          "",
          "[Added Lines]",
          "2432:             'depth'        => $obj->depth,",
          "2433:             'locked'       => $obj->locked,",
          "",
          "---------------"
        ],
        "lib/tests/session_manager_test.php||lib/tests/session_manager_test.php": [
          "File: lib/tests/session_manager_test.php -> lib/tests/session_manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:         \\core\\session\\manager::loginas($user->id, context_system::instance());",
          "573:         $this->assertSame($user->id, $USER->id);",
          "575:         $this->assertSame($adminuser->id, $USER->realuser);",
          "576:         $this->assertSame($GLOBALS['USER'], $_SESSION['USER']);",
          "577:         $this->assertSame($GLOBALS['USER'], $USER);",
          "",
          "[Removed Lines]",
          "574:         $this->assertSame(context_system::instance(), $USER->loginascontext);",
          "",
          "[Added Lines]",
          "574:         $this->assertEquals(context_system::instance(), $USER->loginascontext);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018111300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d9614b3416634d3ca9168ea86a624e75729e34d",
      "candidate_info": {
        "commit_hash": "8d9614b3416634d3ca9168ea86a624e75729e34d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8d9614b3416634d3ca9168ea86a624e75729e34d",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019071200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190712)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019071800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190718)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}