{
  "cve_id": "CVE-2019-6802",
  "cve_desc": "CRLF Injection in pypiserver 1.2.5 and below allows attackers to set arbitrary HTTP headers and possibly conduct XSS attacks via a %0d%0a in a URI.",
  "repo": "pypiserver/pypiserver",
  "patch_hash": "1375a67c55a9b8d4619df30d2a1c0b239d7357e6",
  "patch_info": {
    "commit_hash": "1375a67c55a9b8d4619df30d2a1c0b239d7357e6",
    "repo": "pypiserver/pypiserver",
    "commit_url": "https://github.com/pypiserver/pypiserver/commit/1375a67c55a9b8d4619df30d2a1c0b239d7357e6",
    "files": [
      "pypiserver/_app.py",
      "pypiserver/core.py",
      "tests/doubles.py",
      "tests/test_app.py",
      "tests/test_core.py",
      "tests/test_server.py"
    ],
    "message": "CRLF Injection Mitigation\n\nResolves #237\n\nPreviously, we were not running any sort of URL escaping on values\npassed in from the client that were used for redirects. This allowed\ninjection attacks via URL encoded newlines in the original request.\n\nThis update ensures that all user-supplied paths that are used as\ncomponents of redirects are passed through `urllib.parse.quote()`\n(or the python 2 equivalent) prior to being used in a redirect\nresponse.\n\nAlso specified 127.0.0.1 rather than 0.0.0.0 (the default) in server\ntests to avoid triggering firewall dialogs when testing on MacOS",
    "before_after_code_files": [
      "pypiserver/_app.py||pypiserver/_app.py",
      "pypiserver/core.py||pypiserver/core.py",
      "tests/doubles.py||tests/doubles.py",
      "tests/test_app.py||tests/test_app.py",
      "tests/test_core.py||tests/test_core.py",
      "tests/test_server.py||tests/test_server.py"
    ]
  },
  "patch_diff": {
    "pypiserver/_app.py||pypiserver/_app.py": [
      "File: pypiserver/_app.py -> pypiserver/_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "250: @auth(\"list\")",
      "251: def simple(prefix=\"\"):",
      "252:     # PEP 503: require normalized prefix",
      "254:     if prefix != normalized:",
      "255:         return redirect('/simple/{0}/'.format(normalized), 301)",
      "",
      "[Removed Lines]",
      "253:     normalized = core.normalize_pkgname(prefix)",
      "",
      "[Added Lines]",
      "253:     normalized = core.normalize_pkgname_for_url(prefix)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "327: @app.route('/:prefix')",
      "328: @app.route('/:prefix/')",
      "329: def bad_url(prefix):",
      "",
      "[Removed Lines]",
      "330:     p = request.fullpath",
      "331:     if p.endswith(\"/\"):",
      "332:         p = p[:-1]",
      "333:     p = p.rsplit('/', 1)[0]",
      "334:     p += \"/simple/%s/\" % prefix",
      "336:     return redirect(p)",
      "",
      "[Added Lines]",
      "330:     \"\"\"Redirect unknown root URLs to /simple/.\"\"\"",
      "331:     return redirect(core.get_bad_url_redirect_path(request, prefix))",
      "",
      "---------------"
    ],
    "pypiserver/core.py||pypiserver/core.py": [
      "File: pypiserver/core.py -> pypiserver/core.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import re",
      "12: import sys",
      "14: import pkg_resources",
      "16: from . import Configuration",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: try:  # PY3",
      "15:     from urllib.parse import quote",
      "16: except ImportError:  # PY2",
      "17:     from urllib import quote",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "183:     return re.sub(r\"[-_.]+\", \"-\", name).lower()",
      "186: def is_allowed_path(path_part):",
      "187:     p = path_part.replace(\"\\\\\", \"/\")",
      "188:     return not (p.startswith(\".\") or \"/.\" in p)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191: def normalize_pkgname_for_url(name):",
      "192:     \"\"\"Perform PEP 503 normalization and ensure the value is safe for URLs.\"\"\"",
      "193:     return quote(re.sub(r\"[-_.]+\", \"-\", name).lower())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "273:     save_method(dest_fn, overwrite=True)  # Overwite check earlier.",
      "276: def _digest_file(fpath, hash_algo):",
      "277:     \"\"\"",
      "278:     Reads and digests a file according to specified hashing-algorith.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "286: def get_bad_url_redirect_path(request, prefix):",
      "287:     \"\"\"Get the path for a bad root url.\"\"\"",
      "288:     p = request.fullpath",
      "289:     if p.endswith(\"/\"):",
      "290:         p = p[:-1]",
      "291:     p = p.rsplit('/', 1)[0]",
      "292:     prefix = quote(prefix)",
      "293:     p += \"/simple/{}/\".format(prefix)",
      "294:     return p",
      "",
      "---------------"
    ],
    "tests/doubles.py||tests/doubles.py": [
      "File: tests/doubles.py -> tests/doubles.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"Test doubles.\"\"\"",
      "4: class Namespace(object):",
      "5:     \"\"\"Simple namespace.\"\"\"",
      "7:     def __init__(self, **kwargs):",
      "8:         \"\"\"Instantiate the namespace with the provided kwargs.\"\"\"",
      "9:         for k, v in kwargs.items():",
      "10:             setattr(self, k, v)",
      "",
      "---------------"
    ],
    "tests/test_app.py||tests/test_app.py": [
      "File: tests/test_app.py -> tests/test_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "430: def test_remove_pkg_missingNaveVersion(name, version, root, testapp):",
      "431:     msg = \"Missing 'name'/'version' fields: name=%s, version=%s\"",
      "432:     params = {':action': 'remove_pkg', 'name': name, 'version': version}",
      "434:     resp = testapp.post(\"/\", expect_errors=1, params=params)",
      "436:     assert resp.status == '400 Bad Request'",
      "440: def test_remove_pkg_notFound(root, testapp):",
      "",
      "[Removed Lines]",
      "433:     params = dict((k, v) for k,v in params.items() if v is not None)",
      "437:     assert msg %(name, version) in hp.unescape(resp.text)",
      "",
      "[Added Lines]",
      "434:     params = dict((k, v) for k, v in params.items() if v is not None)",
      "438:     assert msg % (name, version) in hp.unescape(resp.text)",
      "",
      "---------------"
    ],
    "tests/test_core.py||tests/test_core.py": [
      "File: tests/test_core.py -> tests/test_core.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import pytest",
      "9: from pypiserver import __main__, core",
      "12: ## Enable logging to detect any problems with it",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: from tests.doubles import Namespace",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:     f = tmpdir.join(\"empty\")",
      "91:     f.ensure()",
      "92:     assert core.digest_file(f.strpath, algo) == digest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: def test_redirect_prefix_encodes_newlines():",
      "97:     \"\"\"Ensure raw newlines are url encoded in the generated redirect.\"\"\"",
      "98:     request = Namespace(",
      "99:         fullpath='/\\nSet-Cookie:malicious=1;'",
      "100:     )",
      "101:     prefix = '\\nSet-Cookie:malicious=1;'",
      "102:     newpath = core.get_bad_url_redirect_path(request, prefix)",
      "103:     assert '\\n' not in newpath",
      "106: def test_normalize_pkgname_for_url_encodes_newlines():",
      "107:     \"\"\"Ensure newlines are url encoded in package names for urls.\"\"\"",
      "108:     assert '\\n' not in core.normalize_pkgname_for_url(",
      "109:         '/\\nSet-Cookie:malicious=1;'",
      "110:     )",
      "",
      "---------------"
    ],
    "tests/test_server.py||tests/test_server.py": [
      "File: tests/test_server.py -> tests/test_server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:         'partial': \"-Ptests/htpasswd.a.a -a update\",",
      "62:     }",
      "63:     pswd_opts = pswd_opt_choices[authed]",
      "66:     proc = subprocess.Popen(cmd.split(), bufsize=_BUFF_SIZE)",
      "67:     time.sleep(SLEEP_AFTER_SRV)",
      "68:     assert proc.poll() is None",
      "",
      "[Removed Lines]",
      "64:     cmd = \"%s -m pypiserver.__main__ -vvv --overwrite -p %s %s %s %s\" % (",
      "65:         sys.executable, port, pswd_opts, other_cli, packdir)",
      "",
      "[Added Lines]",
      "64:     cmd = (",
      "65:         \"%s -m pypiserver.__main__ -vvv --overwrite -i 127.0.0.1 \"",
      "66:         \"-p %s %s %s %s\" % (",
      "67:             sys.executable,",
      "68:             port,",
      "69:             pswd_opts,",
      "70:             other_cli,",
      "71:             packdir,",
      "72:         )",
      "73:     )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "569929c95b86159d7661de2a10ff42a02109758d",
      "candidate_info": {
        "commit_hash": "569929c95b86159d7661de2a10ff42a02109758d",
        "repo": "pypiserver/pypiserver",
        "commit_url": "https://github.com/pypiserver/pypiserver/commit/569929c95b86159d7661de2a10ff42a02109758d",
        "files": [
          "pypiserver/_app.py",
          "pypiserver/core.py"
        ],
        "message": "support changing the prefix of the path of the url",
        "before_after_code_files": [
          "pypiserver/_app.py||pypiserver/_app.py",
          "pypiserver/core.py||pypiserver/core.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pypiserver/_app.py||pypiserver/_app.py",
            "pypiserver/core.py||pypiserver/core.py"
          ],
          "candidate": [
            "pypiserver/_app.py||pypiserver/_app.py",
            "pypiserver/core.py||pypiserver/core.py"
          ]
        }
      },
      "candidate_diff": {
        "pypiserver/_app.py||pypiserver/_app.py": [
          "File: pypiserver/_app.py -> pypiserver/_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: @app.route('/')",
          "82: def root():",
          "85:     try:",
          "86:         numpkgs = len(list(packages()))",
          "87:     except:",
          "",
          "[Removed Lines]",
          "83:     fp = request.fullpath",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:                     URL=request.url,",
          "94:                     VERSION=__version__,",
          "95:                     NUMPKGS=numpkgs,",
          "98:                     )",
          "100: _bottle_upload_filename_re = re.compile(r'^[a-z0-9_.!+-]+$', re.I)",
          "",
          "[Removed Lines]",
          "96:                     PACKAGES=urljoin(fp, \"packages/\"),",
          "97:                     SIMPLE=urljoin(fp, \"simple/\")",
          "",
          "[Added Lines]",
          "94:                     PACKAGES=urljoin(request.url, \"packages/\"),",
          "95:                     SIMPLE=urljoin(request.url, \"simple/\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197: @app.route('/packages')",
          "198: @auth(\"list\")",
          "199: def pep_503_redirects(prefix=None):",
          "203: @app.post('/RPC2')",
          "",
          "[Removed Lines]",
          "200:     return redirect(request.fullpath + \"/\", 301)",
          "",
          "[Added Lines]",
          "198:     return redirect(request.url + \"/\", 301)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:             return redirect(\"%s/%s/\" % (config.fallback_url.rstrip(\"/\"), prefix))",
          "262:         return HTTPError(404, 'Not Found (%s does not exist)\\n\\n' % normalized)",
          "265:     links = [(os.path.basename(f.relfn),",
          "267:              for f in files]",
          "268:     tmpl = \"\"\"\\",
          "269:     <html>",
          "",
          "[Removed Lines]",
          "264:     fp = request.fullpath",
          "266:               urljoin(fp, \"../../packages/%s\" % f.fname_and_hash(config.hash_algo)))",
          "",
          "[Added Lines]",
          "263:               urljoin(request.url, \"../../packages/%s\" % f.fname_and_hash(config.hash_algo)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284: @app.route('/packages/')",
          "285: @auth(\"list\")",
          "286: def list_packages():",
          "288:     files = sorted(core.find_packages(packages()),",
          "289:                    key=lambda x: (os.path.dirname(x.relfn),",
          "290:                                   x.pkgname,",
          "291:                                   x.parsed_version))",
          "293:              for f in files]",
          "294:     tmpl = \"\"\"\\",
          "295:     <html>",
          "",
          "[Removed Lines]",
          "287:     fp = request.fullpath",
          "292:     links = [(f.relfn_unix, urljoin(fp, f.fname_and_hash(config.hash_algo)))",
          "",
          "[Added Lines]",
          "288:     links = [(f.relfn_unix, urljoin(request.url, f.fname_and_hash(config.hash_algo)))",
          "",
          "---------------"
        ],
        "pypiserver/core.py||pypiserver/core.py": [
          "File: pypiserver/core.py -> pypiserver/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: def get_bad_url_redirect_path(request, prefix):",
          "287:     \"\"\"Get the path for a bad root url.\"\"\"",
          "289:     if p.endswith(\"/\"):",
          "290:         p = p[:-1]",
          "291:     p = p.rsplit('/', 1)[0]",
          "",
          "[Removed Lines]",
          "288:     p = request.fullpath",
          "",
          "[Added Lines]",
          "288:     p = request.url",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a060e99a253af1a201ce5f041fe2fd6b1cd8a897",
      "candidate_info": {
        "commit_hash": "a060e99a253af1a201ce5f041fe2fd6b1cd8a897",
        "repo": "pypiserver/pypiserver",
        "commit_url": "https://github.com/pypiserver/pypiserver/commit/a060e99a253af1a201ce5f041fe2fd6b1cd8a897",
        "files": [
          "pypiserver/_app.py",
          "tests/test_core.py"
        ],
        "message": "implement \"supporting changing the prefix of the path of url\" again, using before_request hook.",
        "before_after_code_files": [
          "pypiserver/_app.py||pypiserver/_app.py",
          "tests/test_core.py||tests/test_core.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pypiserver/_app.py||pypiserver/_app.py",
            "tests/test_core.py||tests/test_core.py"
          ],
          "candidate": [
            "pypiserver/_app.py||pypiserver/_app.py",
            "tests/test_core.py||tests/test_core.py"
          ]
        }
      },
      "candidate_diff": {
        "pypiserver/_app.py||pypiserver/_app.py": [
          "File: pypiserver/_app.py -> pypiserver/_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     from StringIO import StringIO as BytesIO",
          "23: try:  # PY3",
          "25: except ImportError:  # PY2",
          "29: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "24:     from urllib.parse import urljoin",
          "26:     from urlparse import urljoin",
          "",
          "[Added Lines]",
          "24:     from urllib.parse import urljoin, urlparse",
          "26:     from urlparse import urljoin, urlparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     log.info(config.log_req_frmt, request.environ)",
          "62: @app.hook('after_request')",
          "63: def log_response():",
          "64:     log.info(config.log_res_frmt, {  # vars(response))  ## DOES NOT WORK!",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: @app.hook('before_request')",
          "63: def print_request():",
          "64:     parsed = urlparse(request.urlparts.scheme + \"://\" + request.urlparts.netloc)",
          "65:     request.custom_host = parsed.netloc",
          "66:     request.custom_fullpath = parsed.path.rstrip('/') + '/' + request.fullpath.lstrip('/')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81: @app.route('/')",
          "82: def root():",
          "85:     try:",
          "86:         numpkgs = len(list(packages()))",
          "",
          "[Removed Lines]",
          "83:     fp = request.fullpath",
          "",
          "[Added Lines]",
          "90:     fp = request.custom_fullpath",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197: @app.route('/packages')",
          "198: @auth(\"list\")",
          "199: def pep_503_redirects(prefix=None):",
          "203: @app.post('/RPC2')",
          "",
          "[Removed Lines]",
          "200:     return redirect(request.fullpath + \"/\", 301)",
          "",
          "[Added Lines]",
          "207:     return redirect(request.custom_fullpath + \"/\", 301)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:             return redirect(\"%s/%s/\" % (config.fallback_url.rstrip(\"/\"), prefix))",
          "262:         return HTTPError(404, 'Not Found (%s does not exist)\\n\\n' % normalized)",
          "265:     links = [(os.path.basename(f.relfn),",
          "266:               urljoin(fp, \"../../packages/%s\" % f.fname_and_hash(config.hash_algo)))",
          "267:              for f in files]",
          "",
          "[Removed Lines]",
          "264:     fp = request.fullpath",
          "",
          "[Added Lines]",
          "271:     fp = request.custom_fullpath",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284: @app.route('/packages/')",
          "285: @auth(\"list\")",
          "286: def list_packages():",
          "288:     files = sorted(core.find_packages(packages()),",
          "289:                    key=lambda x: (os.path.dirname(x.relfn),",
          "290:                                   x.pkgname,",
          "",
          "[Removed Lines]",
          "287:     fp = request.fullpath",
          "",
          "[Added Lines]",
          "294:     fp = request.custom_fullpath",
          "",
          "---------------"
        ],
        "tests/test_core.py||tests/test_core.py": [
          "File: tests/test_core.py -> tests/test_core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: def test_redirect_prefix_encodes_newlines():",
          "97:     \"\"\"Ensure raw newlines are url encoded in the generated redirect.\"\"\"",
          "98:     request = Namespace(",
          "100:     )",
          "101:     prefix = '\\nSet-Cookie:malicious=1;'",
          "102:     newpath = core.get_bad_url_redirect_path(request, prefix)",
          "",
          "[Removed Lines]",
          "99:         fullpath='/\\nSet-Cookie:malicious=1;'",
          "",
          "[Added Lines]",
          "99:         custom_fullpath='/\\nSet-Cookie:malicious=1;'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad8db21b18f588febbf9fa2d74da9238a3f1bd4b",
      "candidate_info": {
        "commit_hash": "ad8db21b18f588febbf9fa2d74da9238a3f1bd4b",
        "repo": "pypiserver/pypiserver",
        "commit_url": "https://github.com/pypiserver/pypiserver/commit/ad8db21b18f588febbf9fa2d74da9238a3f1bd4b",
        "files": [
          "pypiserver/core.py"
        ],
        "message": "fix request.fullpath -> request.custom_fullpath on core.py",
        "before_after_code_files": [
          "pypiserver/core.py||pypiserver/core.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pypiserver/core.py||pypiserver/core.py"
          ],
          "candidate": [
            "pypiserver/core.py||pypiserver/core.py"
          ]
        }
      },
      "candidate_diff": {
        "pypiserver/core.py||pypiserver/core.py": [
          "File: pypiserver/core.py -> pypiserver/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: def get_bad_url_redirect_path(request, prefix):",
          "287:     \"\"\"Get the path for a bad root url.\"\"\"",
          "289:     if p.endswith(\"/\"):",
          "290:         p = p[:-1]",
          "291:     p = p.rsplit('/', 1)[0]",
          "",
          "[Removed Lines]",
          "288:     p = request.fullpath",
          "",
          "[Added Lines]",
          "288:     p = request.custom_fullpath",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d154fc09cabd4f8cb78856206c703e545e01419f",
      "candidate_info": {
        "commit_hash": "d154fc09cabd4f8cb78856206c703e545e01419f",
        "repo": "pypiserver/pypiserver",
        "commit_url": "https://github.com/pypiserver/pypiserver/commit/d154fc09cabd4f8cb78856206c703e545e01419f",
        "files": [
          "pypiserver/_app.py",
          "pypiserver/bottle.py",
          "pypiserver/core.py"
        ],
        "message": "Fix BaseRequest.urlparts.host and path correctly when the server is behind the reverse proxy",
        "before_after_code_files": [
          "pypiserver/_app.py||pypiserver/_app.py",
          "pypiserver/bottle.py||pypiserver/bottle.py",
          "pypiserver/core.py||pypiserver/core.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pypiserver/_app.py||pypiserver/_app.py",
            "pypiserver/core.py||pypiserver/core.py"
          ],
          "candidate": [
            "pypiserver/_app.py||pypiserver/_app.py",
            "pypiserver/core.py||pypiserver/core.py"
          ]
        }
      },
      "candidate_diff": {
        "pypiserver/_app.py||pypiserver/_app.py": [
          "File: pypiserver/_app.py -> pypiserver/_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: @app.route('/')",
          "82: def root():",
          "83:     try:",
          "84:         numpkgs = len(list(packages()))",
          "85:     except:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     fp = request.fullpath",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     # Ensure template() does not consider `msg` as filename!",
          "89:     msg = config.welcome_msg + '\\n'",
          "90:     return template(msg,",
          "92:                     VERSION=__version__,",
          "93:                     NUMPKGS=numpkgs,",
          "96:                     )",
          "98: _bottle_upload_filename_re = re.compile(r'^[a-z0-9_.!+-]+$', re.I)",
          "",
          "[Removed Lines]",
          "91:                     URL=request.url,",
          "94:                     PACKAGES=urljoin(request.url, \"packages/\"),",
          "95:                     SIMPLE=urljoin(request.url, \"simple/\")",
          "",
          "[Added Lines]",
          "93:                     URL=request.url.rstrip(\"/\") + '/',",
          "96:                     PACKAGES=fp.rstrip(\"/\") + \"/packages/\",",
          "97:                     SIMPLE=fp.rstrip(\"/\") + \"/simple/\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195: @app.route('/packages')",
          "196: @auth(\"list\")",
          "197: def pep_503_redirects(prefix=None):",
          "201: @app.post('/RPC2')",
          "",
          "[Removed Lines]",
          "198:     return redirect(request.url + \"/\", 301)",
          "",
          "[Added Lines]",
          "200:     return redirect(request.fullpath + \"/\", 301)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259:             return redirect(\"%s/%s/\" % (config.fallback_url.rstrip(\"/\"), prefix))",
          "260:         return HTTPError(404, 'Not Found (%s does not exist)\\n\\n' % normalized)",
          "262:     links = [(os.path.basename(f.relfn),",
          "264:              for f in files]",
          "265:     tmpl = \"\"\"\\",
          "266:     <html>",
          "",
          "[Removed Lines]",
          "263:               urljoin(request.url, \"../../packages/%s\" % f.fname_and_hash(config.hash_algo)))",
          "",
          "[Added Lines]",
          "264:     fp = request.fullpath",
          "266:               urljoin(fp, \"../../packages/%s\" % f.fname_and_hash(config.hash_algo)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "281: @app.route('/packages/')",
          "282: @auth(\"list\")",
          "283: def list_packages():",
          "284:     files = sorted(core.find_packages(packages()),",
          "285:                    key=lambda x: (os.path.dirname(x.relfn),",
          "286:                                   x.pkgname,",
          "287:                                   x.parsed_version))",
          "289:              for f in files]",
          "290:     tmpl = \"\"\"\\",
          "291:     <html>",
          "",
          "[Removed Lines]",
          "288:     links = [(f.relfn_unix, urljoin(request.url, f.fname_and_hash(config.hash_algo)))",
          "",
          "[Added Lines]",
          "287:     fp = request.fullpath",
          "292:     links = [(f.relfn_unix, urljoin(fp, f.fname_and_hash(config.hash_algo)))",
          "",
          "---------------"
        ],
        "pypiserver/bottle.py||pypiserver/bottle.py": [
          "File: pypiserver/bottle.py -> pypiserver/bottle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: if py3k:",
          "118:     import http.client as httplib",
          "119:     import _thread as thread",
          "121:     from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote",
          "122:     urlunquote = functools.partial(urlunquote, encoding='latin1')",
          "123:     from http.cookies import SimpleCookie",
          "",
          "[Removed Lines]",
          "120:     from urllib.parse import urljoin, SplitResult as UrlSplitResult",
          "",
          "[Added Lines]",
          "120:     from urllib.parse import urlparse, urljoin, SplitResult as UrlSplitResult",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136: else:  # 2.x",
          "137:     import httplib",
          "138:     import thread",
          "140:     from urllib import urlencode, quote as urlquote, unquote as urlunquote",
          "141:     from Cookie import SimpleCookie",
          "142:     from itertools import imap",
          "",
          "[Removed Lines]",
          "139:     from urlparse import urljoin, SplitResult as UrlSplitResult",
          "",
          "[Added Lines]",
          "139:     from urlparse import urlparse, urljoin, SplitResult as UrlSplitResult",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1330:         http = env.get('HTTP_X_FORWARDED_PROTO') \\",
          "1331:              or env.get('wsgi.url_scheme', 'http')",
          "1332:         host = env.get('HTTP_X_FORWARDED_HOST') or env.get('HTTP_HOST')",
          "1333:         if not host:",
          "1334:             # HTTP 1.1 requires a Host-header. This is for HTTP/1.0 clients.",
          "1335:             host = env.get('SERVER_NAME', '127.0.0.1')",
          "1336:             port = env.get('SERVER_PORT')",
          "1337:             if port and port != ('80' if http == 'http' else '443'):",
          "1338:                 host += ':' + port",
          "1340:         return UrlSplitResult(http, host, path, env.get('QUERY_STRING'), '')",
          "1342:     @property",
          "1344:         \"\"\" Request path including :attr:`script_name` (if present). \"\"\"",
          "1345:         return urljoin(self.script_name, self.path.lstrip('/'))",
          "1347:     @property",
          "1348:     def query_string(self):",
          "1349:         \"\"\" The raw :attr:`query` part of the URL (everything in between ``?``",
          "",
          "[Removed Lines]",
          "1339:         path = urlquote(self.fullpath)",
          "1343:     def fullpath(self):",
          "",
          "[Added Lines]",
          "1334:         path = urlquote(self.scriptpath)",
          "1335:         if host:",
          "1336:             parsed = urlparse(http + \"://\" + host)",
          "1337:             path = parsed.path.rstrip('/') + '/' + path.lstrip('/')",
          "1338:             host = parsed.netloc",
          "1350:     def scriptpath(self):",
          "1354:     @property",
          "1355:     def fullpath(self):",
          "1356:         \"\"\" The path including :attr:`scriptpath`, the prefix of the url \"\"\"",
          "1357:         return self.urlparts.path",
          "",
          "---------------"
        ],
        "pypiserver/core.py||pypiserver/core.py": [
          "File: pypiserver/core.py -> pypiserver/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: def get_bad_url_redirect_path(request, prefix):",
          "287:     \"\"\"Get the path for a bad root url.\"\"\"",
          "289:     if p.endswith(\"/\"):",
          "290:         p = p[:-1]",
          "291:     p = p.rsplit('/', 1)[0]",
          "",
          "[Removed Lines]",
          "288:     p = request.url",
          "",
          "[Added Lines]",
          "288:     p = request.fullpath",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91a5ebd8b11bc0fef42614dcf539b2910239c8af",
      "candidate_info": {
        "commit_hash": "91a5ebd8b11bc0fef42614dcf539b2910239c8af",
        "repo": "pypiserver/pypiserver",
        "commit_url": "https://github.com/pypiserver/pypiserver/commit/91a5ebd8b11bc0fef42614dcf539b2910239c8af",
        "files": [
          "pypiserver/cache.py",
          "pypiserver/core.py",
          "tests/test_app.py",
          "tests/test_core.py",
          "tests/test_server.py"
        ],
        "message": "[#265] Resolve issue with non-md5 hashing algorithms (#266)",
        "before_after_code_files": [
          "pypiserver/cache.py||pypiserver/cache.py",
          "pypiserver/core.py||pypiserver/core.py",
          "tests/test_app.py||tests/test_app.py",
          "tests/test_core.py||tests/test_core.py",
          "tests/test_server.py||tests/test_server.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pypiserver/core.py||pypiserver/core.py",
            "tests/test_app.py||tests/test_app.py",
            "tests/test_core.py||tests/test_core.py",
            "tests/test_server.py||tests/test_server.py"
          ],
          "candidate": [
            "pypiserver/core.py||pypiserver/core.py",
            "tests/test_app.py||tests/test_app.py",
            "tests/test_core.py||tests/test_core.py",
            "tests/test_server.py||tests/test_server.py"
          ]
        }
      },
      "candidate_diff": {
        "pypiserver/cache.py||pypiserver/cache.py": [
          "File: pypiserver/cache.py -> pypiserver/cache.py"
        ],
        "pypiserver/core.py||pypiserver/core.py": [
          "File: pypiserver/core.py -> pypiserver/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     def fname_and_hash(self, hash_algo):",
          "229:         if not hasattr(self, '_fname_and_hash'):",
          "230:             if hash_algo:",
          "233:             else:",
          "234:                 self._fname_and_hash = self.relfn_unix",
          "235:         return self._fname_and_hash",
          "",
          "[Removed Lines]",
          "231:                 self._fname_and_hash = '%s#%s=%.32s' % (self.relfn_unix, hash_algo,",
          "232:                                                         digest_file(self.fn, hash_algo))",
          "",
          "[Added Lines]",
          "231:                 self._fname_and_hash = '%s#%s=%s' % (",
          "232:                     self.relfn_unix, hash_algo, digest_file(self.fn, hash_algo)",
          "233:                 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     with open(fpath, 'rb') as f:",
          "309:         for block in iter(lambda: f.read(blocksize), b''):",
          "310:             digester.update(block)",
          "314: try:",
          "",
          "[Removed Lines]",
          "311:     return digester.hexdigest()[:32]",
          "",
          "[Added Lines]",
          "312:     return digester.hexdigest()",
          "",
          "---------------"
        ],
        "tests/test_app.py||tests/test_app.py": [
          "File: tests/test_app.py -> tests/test_app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # Builtin imports",
          "4: import logging",
          "7:     from html.parser import HTMLParser",
          "8: except ImportError:",
          "9:     from HTMLParser import HTMLParser",
          "11: try:",
          "12:     import xmlrpc.client as xmlrpclib",
          "",
          "[Removed Lines]",
          "6: try:",
          "",
          "[Added Lines]",
          "7: try:  # python 3",
          "9:     from html import unescape",
          "12:     unescape = HTMLParser().unescape",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: # Enable logging to detect any problems with it",
          "28: ##",
          "29: __main__.init_logging(level=logging.NOTSET)",
          "33: @pytest.fixture()",
          "",
          "[Removed Lines]",
          "30: hp = HTMLParser()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400: def test_upload_noAction(root, testapp):",
          "401:     resp = testapp.post(\"/\", expect_errors=1)",
          "402:     assert resp.status == '400 Bad Request'",
          "406: def test_upload_badAction(root, testapp):",
          "407:     resp = testapp.post(\"/\", params={':action': 'BAD'}, expect_errors=1)",
          "408:     assert resp.status == '400 Bad Request'",
          "412: @pytest.mark.parametrize(\"package\", [f[0]",
          "",
          "[Removed Lines]",
          "403:     assert \"Missing ':action' field!\" in hp.unescape(resp.text)",
          "409:     assert \"Unsupported ':action' field: BAD\" in hp.unescape(resp.text)",
          "",
          "[Added Lines]",
          "405:     assert \"Missing ':action' field!\" in unescape(resp.text)",
          "411:     assert \"Unsupported ':action' field: BAD\" in unescape(resp.text)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:     resp = testapp.post(\"/\", expect_errors=1, params=params)",
          "465:     assert resp.status == '400 Bad Request'",
          "469: def test_remove_pkg_notFound(root, testapp):",
          "",
          "[Removed Lines]",
          "466:     assert msg % (name, version) in hp.unescape(resp.text)",
          "",
          "[Added Lines]",
          "468:     assert msg % (name, version) in unescape(resp.text)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "474:                     'version': '123',",
          "475:     })",
          "476:     assert resp.status == '404 Not Found'",
          "480: @pytest.mark.parametrize('pkgs,matches', [",
          "",
          "[Removed Lines]",
          "477:     assert \"foo (123) not found\" in hp.unescape(resp.text)",
          "",
          "[Added Lines]",
          "479:     assert \"foo (123) not found\" in unescape(resp.text)",
          "",
          "---------------"
        ],
        "tests/test_core.py||tests/test_core.py": [
          "File: tests/test_core.py -> tests/test_core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     res = list(core.listdir(tmpdir.strpath))",
          "83:     assert res == []",
          "89: @pytest.mark.parametrize((\"algo\", \"digest\"), hashes)",
          "90: def test_hashfile(tmpdir, algo, digest):",
          "91:     f = tmpdir.join(\"empty\")",
          "",
          "[Removed Lines]",
          "85: hashes = [",
          "86:         ('sha256',   'e3b0c44298fc1c149afbf4c8996fb924'), # empty-sha256",
          "87:         ('md5',      'd41d8cd98f00b204e9800998ecf8427e'), # empty-md5",
          "88: ]",
          "",
          "[Added Lines]",
          "85: hashes = (",
          "86:     # empty-sha256",
          "87:     ('sha256', 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'),",
          "88:     # empty-md5",
          "89:     ('md5', 'd41d8cd98f00b204e9800998ecf8427e'),",
          "90: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     assert core.digest_file(f.strpath, algo) == digest",
          "96: def test_redirect_prefix_encodes_newlines():",
          "97:     \"\"\"Ensure raw newlines are url encoded in the generated redirect.\"\"\"",
          "98:     request = Namespace(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: @pytest.mark.parametrize(\"hash_algo\", (\"md5\", \"sha256\", \"sha512\"))",
          "99: def test_fname_and_hash(tmpdir, hash_algo):",
          "100:     \"\"\"Ensure we are returning the expected hashes for files.\"\"\"",
          "101:     f = tmpdir.join(\"tmpfile\")",
          "102:     f.ensure()",
          "103:     pkgfile = core.PkgFile(",
          "104:         \"tmp\", \"1.0.0\", f.strpath, f.dirname, f.basename",
          "105:     )",
          "106:     assert pkgfile.fname_and_hash(hash_algo) == \"{}#{}={}\".format(",
          "107:         f.basename, hash_algo, str(f.computehash(hashtype=hash_algo))",
          "108:     )",
          "",
          "---------------"
        ],
        "tests/test_server.py||tests/test_server.py": [
          "File: tests/test_server.py -> tests/test_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: def _run_pip(cmd):",
          "185:     ncmd = (",
          "187:     ) % cmd",
          "188:     print('PIP: %s' % ncmd)",
          "189:     proc = Popen(split(ncmd))",
          "",
          "[Removed Lines]",
          "186:         \"pip --disable-pip-version-check --retries 0 --timeout 5 --no-input %s\"",
          "",
          "[Added Lines]",
          "186:         \"pip --no-cache-dir --disable-pip-version-check \"",
          "187:         \"--retries 0 --timeout 5 --no-input %s\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390:         with pypirc_tmpfile(port, user, pswd) as rcfile:",
          "391:             twine_upload([package.strpath], repository='test', conf=rcfile)",
          "392:         time.sleep(SLEEP_AFTER_SRV)",
          "393:     assert len(empty_packdir.listdir()) == 1",
          "396: def test_twine_upload_authed(empty_packdir, port, package):",
          "397:     \"\"\"Test authenticated twine upload\"\"\"",
          "398:     user, pswd = 'a', 'a'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398: @pytest.mark.parametrize(\"hash_algo\", (\"md5\", \"sha256\", \"sha512\"))",
          "399: def test_hash_algos(empty_packdir, port, package, pipdir, hash_algo):",
          "400:     \"\"\"Test twine upload with no authentication\"\"\"",
          "401:     user, pswd = 'foo', 'bar'",
          "402:     with new_server(",
          "403:         empty_packdir, port, other_cli=\"--hash-algo {}\".format(hash_algo)",
          "404:     ):",
          "405:         with pypirc_tmpfile(port, user, pswd) as rcfile:",
          "406:             twine_upload([package.strpath], repository='test', conf=rcfile)",
          "407:         time.sleep(SLEEP_AFTER_SRV)",
          "409:         assert _run_pip_install(\"centodeps\", port, pipdir) == 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}