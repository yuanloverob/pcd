{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b595d96f4356ce09eb329ba8f945857cb50171e",
      "candidate_info": {
        "commit_hash": "2b595d96f4356ce09eb329ba8f945857cb50171e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2b595d96f4356ce09eb329ba8f945857cb50171e",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-36941 core: added new mark notification as read webservice",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "990:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "991:         'ajax' => true,",
          "992:     ),",
          "993:     'core_message_message_processor_config_form' => array(",
          "994:         'classname' => 'core_message_external',",
          "995:         'methodname' => 'message_processor_config_form',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993:     'core_message_mark_notification_read' => array(",
          "994:         'classname' => 'core_message_external',",
          "995:         'methodname' => 'mark_notification_read',",
          "996:         'classpath' => 'message/externallib.php',",
          "997:         'description' => 'Mark a single notification as read, trigger notification_viewed event.',",
          "998:         'type' => 'write',",
          "999:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1000:         'ajax' => true,",
          "1001:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1871:     public static function mark_message_read_parameters() {",
          "1872:         return new external_function_parameters(",
          "1873:             array(",
          "1875:                 'timeread' => new external_value(PARAM_INT, 'timestamp for when the message should be marked read',",
          "1876:                     VALUE_DEFAULT, 0)",
          "1877:             )",
          "",
          "[Removed Lines]",
          "1874:                 'messageid' => new external_value(PARAM_INT, 'id of the message (in the message table)'),",
          "",
          "[Added Lines]",
          "1874:                 'messageid' => new external_value(PARAM_INT, 'id of the message in the messages table'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1948:     public static function mark_message_read_returns() {",
          "1949:         return new external_single_structure(",
          "1950:             array(",
          "1952:                 'warnings' => new external_warnings()",
          "1953:             )",
          "1954:         );",
          "",
          "[Removed Lines]",
          "1951:                 'messageid' => new external_value(PARAM_INT, 'the id of the message in the message_read table'),",
          "",
          "[Added Lines]",
          "1951:                 'messageid' => new external_value(PARAM_INT, 'the id of the message in the messages table'),",
          "1952:                 'warnings' => new external_warnings()",
          "1953:             )",
          "1954:         );",
          "1955:     }",
          "1962:     public static function mark_notification_read_parameters() {",
          "1963:         return new external_function_parameters(",
          "1964:             array(",
          "1965:                 'notificationid' => new external_value(PARAM_INT, 'id of the notification'),",
          "1966:                 'timeread' => new external_value(PARAM_INT, 'timestamp for when the notification should be marked read',",
          "1967:                     VALUE_DEFAULT, 0)",
          "1968:             )",
          "1969:         );",
          "1970:     }",
          "1983:     public static function mark_notification_read($notificationid, $timeread) {",
          "1984:         global $CFG, $DB, $USER;",
          "1987:         if (empty($CFG->messaging)) {",
          "1988:             throw new moodle_exception('disabled', 'message');",
          "1989:         }",
          "1992:         $warnings = array();",
          "1995:         $params = array(",
          "1996:             'notificationid' => $notificationid,",
          "1997:             'timeread' => $timeread",
          "1998:         );",
          "1999:         $params = self::validate_parameters(self::mark_notification_read_parameters(), $params);",
          "2001:         if (empty($params['timeread'])) {",
          "2002:             $timeread = time();",
          "2003:         } else {",
          "2004:             $timeread = $params['timeread'];",
          "2005:         }",
          "2008:         $context = context_system::instance();",
          "2009:         self::validate_context($context);",
          "2011:         $notification = $DB->get_record('notifications', ['id' => $params['notificationid']], '*', MUST_EXIST);",
          "2013:         if ($notification->useridto != $USER->id) {",
          "2014:             throw new invalid_parameter_exception('Invalid notificationid, you don\\'t have permissions to mark this ' .",
          "2015:                 'notification as read');",
          "2016:         }",
          "2018:         \\core_message\\api::mark_notification_as_read($notification, $timeread);",
          "2020:         $results = array(",
          "2021:             'notificationid' => $notification->id,",
          "2022:             'warnings' => $warnings",
          "2023:         );",
          "2025:         return $results;",
          "2026:     }",
          "2033:     public static function mark_notification_read_returns() {",
          "2034:         return new external_single_structure(",
          "2035:             array(",
          "2036:                 'notificationid' => new external_value(PARAM_INT, 'id of the notification'),",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:         } catch (invalid_parameter_exception $e) {",
          "774:             $this->assertEquals('invalidparameter', $e->errorcode);",
          "775:         }",
          "777:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:     }",
          "781:     public function test_mark_notification_read() {",
          "782:         $this->resetAfterTest(true);",
          "784:         $user1 = self::getDataGenerator()->create_user();",
          "785:         $user2 = self::getDataGenerator()->create_user();",
          "786:         $user3 = self::getDataGenerator()->create_user();",
          "789:         $this->setUser($user1);",
          "790:         $this->assertEquals(array(), core_message_external::create_contacts(",
          "791:             array($user2->id, $user3->id)));",
          "794:         $this->send_message($user2, $user1, 'Hello there!', 1);",
          "795:         $this->send_message($user2, $user1, 'How you goin?', 1);",
          "796:         $this->send_message($user3, $user1, 'How you goin?', 1);",
          "797:         $this->send_message($user3, $user2, 'How you goin?', 1);",
          "800:         $lastnotifications = message_get_messages($user1->id, $user2->id, 1, false);",
          "802:         $notificationids = array();",
          "803:         foreach ($lastnotifications as $n) {",
          "804:             $notificationid = core_message_external::mark_notification_read($n->id, time());",
          "805:             $notificationids[] = external_api::clean_returnvalue(core_message_external::mark_notification_read_returns(),",
          "806:                 $notificationid);",
          "807:         }",
          "810:         $lastnotifications = message_get_messages($user1->id, $user2->id, 1, true);",
          "811:         $this->assertCount(2, $lastnotifications);",
          "812:         $this->assertArrayHasKey($notificationids[1]['notificationid'], $lastnotifications);",
          "813:         $this->assertArrayHasKey($notificationids[0]['notificationid'], $lastnotifications);",
          "816:         $lastnotifications = message_get_messages($user1->id, 0, 1, false);",
          "817:         $this->assertCount(1, $lastnotifications);",
          "820:         try {",
          "821:             $notificationid = core_message_external::mark_notification_read(1337, time());",
          "822:             $this->fail('Exception expected due invalid notificationid.');",
          "823:         } catch (dml_missing_record_exception $e) {",
          "824:             $this->assertEquals('invalidrecord', $e->errorcode);",
          "825:         }",
          "828:         $lastnotifications = message_get_messages($user2->id, $user3->id, 1, false);",
          "829:         $notificationid = array_pop($lastnotifications)->id;",
          "830:         try {",
          "831:             $notificationid = core_message_external::mark_notification_read($notificationid, time());",
          "832:             $this->fail('Exception expected due invalid notificationid.');",
          "833:         } catch (invalid_parameter_exception $e) {",
          "834:             $this->assertEquals('invalidparameter', $e->errorcode);",
          "835:         }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018032200.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018032200.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5315acb47c8603f064cf133ed66342f3c7e69cad",
      "candidate_info": {
        "commit_hash": "5315acb47c8603f064cf133ed66342f3c7e69cad",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5315acb47c8603f064cf133ed66342f3c7e69cad",
        "files": [
          "h5p/classes/autoloader.php",
          "h5p/classes/core.php",
          "h5p/tests/generator/lib.php",
          "h5p/tests/h5p_core_test.php",
          "lang/en/admin.php",
          "lang/en/h5p.php",
          "lib/classes/task/h5p_get_content_types_task.php",
          "lib/db/tasks.php",
          "lib/tests/h5p_get_content_types_task_test.php",
          "version.php"
        ],
        "message": "MDL-67058 core_h5p: task to get latest content types version from H5P",
        "before_after_code_files": [
          "h5p/classes/autoloader.php||h5p/classes/autoloader.php",
          "h5p/classes/core.php||h5p/classes/core.php",
          "h5p/tests/generator/lib.php||h5p/tests/generator/lib.php",
          "h5p/tests/h5p_core_test.php||h5p/tests/h5p_core_test.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lang/en/h5p.php||lang/en/h5p.php",
          "lib/classes/task/h5p_get_content_types_task.php||lib/classes/task/h5p_get_content_types_task.php",
          "lib/db/tasks.php||lib/db/tasks.php",
          "lib/tests/h5p_get_content_types_task_test.php||lib/tests/h5p_get_content_types_task_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "h5p/classes/autoloader.php||h5p/classes/autoloader.php": [
          "File: h5p/classes/autoloader.php -> h5p/classes/autoloader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         $classes = [",
          "45:             'H5PCore' => '/lib/h5p/h5p.classes.php',",
          "46:             'H5PFrameworkInterface' => '/lib/h5p/h5p.classes.php',",
          "47:             'H5PContentValidator' => 'lib/h5p/h5p.classes.php',",
          "48:             'H5PValidator' => '/lib/h5p/h5p.classes.php',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:             'H5PHubEndpoints' => '/lib/h5p/h5p.classes.php',",
          "",
          "---------------"
        ],
        "h5p/classes/core.php||h5p/classes/core.php": [
          "File: h5p/classes/core.php -> h5p/classes/core.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: namespace core_h5p;",
          "27: use H5PCore;",
          "28: use H5PFrameworkInterface;",
          "29: use stdClass;",
          "30: use moodle_url;",
          "",
          "[Removed Lines]",
          "32: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Added Lines]",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: require_once(\"$CFG->libdir/filelib.php\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:         return $urls;",
          "155:     }",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     public function fetch_latest_content_types(): ?\\stdClass {",
          "166:         $contenttypes = self::get_latest_content_types();",
          "167:         if (!empty($contenttypes->error)) {",
          "168:             return $contenttypes;",
          "169:         }",
          "171:         $typesinstalled = [];",
          "173:         foreach ($contenttypes->contentTypes as $type) {",
          "174:             $library = [",
          "175:                 'machineName' => $type->id,",
          "176:                 'majorVersion' => $type->version->major,",
          "177:                 'minorVersion' => $type->version->minor,",
          "178:                 'patchVersion' => $type->version->patch,",
          "179:             ];",
          "181:             $factory = new \\core_h5p\\factory();",
          "182:             $framework = $factory->get_framework();",
          "184:             $shoulddownload = true;",
          "185:             if ($framework->getLibraryId($type->id, $type->version->major, $type->version->minor)) {",
          "186:                 if (!$framework->isPatchedLibrary($library)) {",
          "187:                     $shoulddownload = false;",
          "188:                 }",
          "189:             }",
          "191:             if ($shoulddownload) {",
          "192:                 $installed['id'] = $this->fetch_content_type($library);",
          "193:                 if ($installed['id']) {",
          "194:                     $installed['name'] = $librarykey = \\H5PCore::libraryToString($library);",
          "195:                     $typesinstalled[] = $installed;",
          "196:                 }",
          "197:             }",
          "198:         }",
          "200:         $result = new stdClass();",
          "201:         $result->error = '';",
          "202:         $result->typesinstalled = $typesinstalled;",
          "204:         return $result;",
          "205:     }",
          "213:     public function fetch_content_type(array $library): ?int {",
          "215:         $factory = new \\core_h5p\\factory();",
          "216:         $framework = $factory->get_framework();",
          "219:         $temppath = make_request_directory();",
          "220:         $tempfile = \"{$temppath}/\" . $library['machineName'] . \".h5p\";",
          "223:         $endpoint = $this->get_api_endpoint($library['machineName']);",
          "224:         $result = download_file_content(",
          "225:             $endpoint,",
          "226:             null,",
          "227:             null,",
          "228:             true,",
          "229:             300,",
          "230:             20,",
          "231:             false,",
          "232:             $tempfile",
          "233:         );",
          "235:         if (!empty($result->error) || $result->status == '404') {",
          "236:             return null;",
          "237:         }",
          "239:         $framework->getUploadedH5pPath($tempfile);",
          "240:         $framework->getUploadedH5pFolderPath($temppath);",
          "242:         $validator = $factory->get_validator();",
          "245:         if ($validator->isValidPackage(false, false)) {",
          "246:             $h5pstorage = $factory->get_storage();",
          "247:             $h5pstorage->savePackage([], null, true);",
          "248:             $librarykey = \\H5PCore::libraryToString($library);",
          "249:             return $h5pstorage->h5pC->librariesJsonData[$librarykey][\"libraryId\"];",
          "250:         }",
          "252:         return null;",
          "253:     }",
          "264:     public function get_api_endpoint(?string $library): moodle_url {",
          "265:         $h5purl = \\H5PHubEndpoints::createURL(\\H5PHubEndpoints::CONTENT_TYPES ) . $library;",
          "266:         return new moodle_url($h5purl);",
          "267:     }",
          "276:     public function get_latest_content_types(): \\stdClass {",
          "278:         $postdata = ['uuid' => 'foo'];",
          "279:         $endpoint = $this->get_api_endpoint(null);",
          "280:         $request = download_file_content($endpoint, null, $postdata, true);",
          "282:         if (!empty($request->error) || $request->status != '200' || empty($request->results)) {",
          "283:             if (empty($request->error)) {",
          "284:                 $request->error = get_string('fetchtypesfailure', 'core_h5p');",
          "285:             }",
          "286:             return $request;",
          "287:         }",
          "289:         $contenttypes = json_decode($request->results);",
          "290:         $contenttypes->error = '';",
          "292:         return $contenttypes;",
          "293:     }",
          "",
          "---------------"
        ],
        "h5p/tests/generator/lib.php||h5p/tests/generator/lib.php": [
          "File: h5p/tests/generator/lib.php -> h5p/tests/generator/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: use core_h5p\\factory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:             )",
          "340:         );",
          "341:     }",
          "342: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:     public function create_content_types(int $pending): array {",
          "352:         global $DB;",
          "354:         $factory = new factory();",
          "355:         $core = $factory->get_core();",
          "358:         $contenttypes = $core->get_latest_content_types()->contentTypes;",
          "360:         $size = count($contenttypes) - $pending;",
          "363:         $chunks = array_chunk($contenttypes, $size);",
          "365:         $contenttypes = $chunks[0];",
          "366:         $pendingtypes = $chunks[1];",
          "369:         foreach ($contenttypes as $contenttype) {",
          "370:             $library = [",
          "371:                 'machinename' => $contenttype->id,",
          "372:                 'majorversion' => $contenttype->version->major,",
          "373:                 'minorversion' => $contenttype->version->minor,",
          "374:                 'patchversion' => $contenttype->version->patch,",
          "375:                 'runnable' => 1",
          "376:             ];",
          "377:             $DB->insert_record('h5p_libraries', (object) $library);",
          "378:         }",
          "380:         return [$contenttypes, $pendingtypes];",
          "381:     }",
          "",
          "---------------"
        ],
        "h5p/tests/h5p_core_test.php||h5p/tests/h5p_core_test.php": [
          "File: h5p/tests/h5p_core_test.php -> h5p/tests/h5p_core_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: namespace core_h5p\\local\\tests;",
          "28: use core_h5p\\factory;",
          "30: defined('MOODLE_INTERNAL') || die();",
          "41: class h5p_core_test extends \\advanced_testcase {",
          "43:     protected function setup() {",
          "44:         parent::setUp();",
          "46:         $factory = new factory();",
          "47:         $this->core = $factory->get_core();",
          "48:     }",
          "60:     public function test_fetch_content_type(): void {",
          "61:         global $DB;",
          "63:         $this->resetAfterTest(true);",
          "65:         if (!defined('PHPUNIT_LONGTEST')) {",
          "66:             $this->markTestSkipped('PHPUNIT_LONGTEST is not defined');",
          "67:         }",
          "69:         $library = [",
          "70:                 'machineName' => 'H5P.Accordion',",
          "71:                 'majorVersion' => 1,",
          "72:                 'minorVersion' => 0,",
          "73:                 'patchVersion' => 0,",
          "74:         ];",
          "76:         $sql = 'SELECT count(id)",
          "77:                   FROM {files}",
          "78:                  WHERE ' . $DB->sql_like('filepath', ':filepath');",
          "79:         $params['filepath'] = \"/{$library['machineName']}-%\";",
          "81:         $contentfiles = $DB->count_records_sql($sql, $params);",
          "83:         $this->assertEquals(0, $contentfiles);",
          "85:         $this->core->fetch_content_type($library);",
          "87:         $contentfiles = $DB->count_records_sql($sql, $params);",
          "88:         $this->assertGreaterThan(0, $contentfiles);",
          "89:     }",
          "101:     public function test_fetch_latest_content_types(): void {",
          "102:         global $DB;",
          "104:         $this->resetAfterTest(true);",
          "106:         if (!defined('PHPUNIT_LONGTEST')) {",
          "107:             $this->markTestSkipped('PHPUNIT_LONGTEST is not defined');",
          "108:         }",
          "110:         $contentfiles = $DB->count_records('h5p_libraries');",
          "113:         $this->assertEquals(0, $contentfiles);",
          "116:         $generator = \\testing_util::get_data_generator();",
          "117:         $h5pgenerator = $generator->get_plugin_generator('core_h5p');",
          "120:         [$contenttypes, $contenttoinstall] = $h5pgenerator->create_content_types(1);",
          "122:         $numcontenttypes = count($contenttypes) + count($contenttoinstall);",
          "124:         $contenttoinstall = $contenttoinstall[0];",
          "127:         $conditions = ['runnable' => 1];",
          "128:         $contentfiles = $DB->get_records('h5p_libraries', $conditions, '', 'machinename');",
          "131:         $this->assertEquals($numcontenttypes - 1, count($contentfiles));",
          "132:         $this->assertArrayNotHasKey($contenttoinstall->id, $contentfiles);",
          "134:         $result = $this->core->fetch_latest_content_types();",
          "136:         $contentfiles = $DB->get_records('h5p_libraries', $conditions, '', 'machinename');",
          "139:         $this->assertCount($numcontenttypes, $contentfiles);",
          "140:         $this->assertArrayHasKey($contenttoinstall->id, $contentfiles);",
          "141:         $this->assertCount(1, $result->typesinstalled);",
          "142:         $this->assertStringStartsWith($contenttoinstall->id, $result->typesinstalled[0]['name']);",
          "145:         $result = $this->core->fetch_latest_content_types();",
          "147:         $contentfiles = $DB->get_records('h5p_libraries', $conditions, '', 'machinename');",
          "149:         $this->assertEquals($numcontenttypes, count($contentfiles));",
          "150:         $this->assertCount(0, $result->typesinstalled);",
          "151:     }",
          "152: }",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "647: $string['checkboxno'] = 'No';",
          "648: $string['checkboxyes'] = 'Yes';",
          "649: $string['choosefiletoedit'] = 'Choose file to edit';",
          "650: $string['iconvrequired'] = 'Installing ICONV extension is required.';",
          "651: $string['ignore'] = 'Ignore';",
          "652: $string['includemoduleuserdata'] = 'Include module user data';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650: $string['h5pgetcontenttypestask'] = 'Download available H5P content types from h5p.org';",
          "",
          "---------------"
        ],
        "lang/en/h5p.php||lang/en/h5p.php": [
          "File: lang/en/h5p.php -> lang/en/h5p.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: $string['editor'] = 'Editor';",
          "72: $string['embed'] = 'Embed';",
          "73: $string['embedtitle'] = 'View the embed code for this content.';",
          "74: $string['fileExceedsMaxSize'] = 'One of the files inside the package exceeds the maximum file size allowed. ({$a->%file} {$a->%used} > {$a->%max})';",
          "75: $string['fullscreen'] = 'Fullscreen';",
          "76: $string['gpl'] = 'General Public License v3';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: $string['fetchtypesfailure'] = 'No information could be obtained on the H5P content types available. H5P repository connection failure';",
          "",
          "---------------"
        ],
        "lib/classes/task/h5p_get_content_types_task.php||lib/classes/task/h5p_get_content_types_task.php": [
          "File: lib/classes/task/h5p_get_content_types_task.php -> lib/classes/task/h5p_get_content_types_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core\\task;",
          "26: use core_h5p\\factory;",
          "28: defined('MOODLE_INTERNAL') || die();",
          "36: class h5p_get_content_types_task extends scheduled_task {",
          "43:     public function get_name() {",
          "44:         return get_string('h5pgetcontenttypestask', 'admin');",
          "45:     }",
          "50:     public function execute() {",
          "52:         $factory = new factory();",
          "53:         $core = $factory->get_core();",
          "55:         $result = $core->fetch_latest_content_types();",
          "57:         if (!empty($result->error)) {",
          "58:             mtrace($result->error);",
          "59:         } else {",
          "60:             $numtypesinstalled = count($result->typesinstalled);",
          "61:             mtrace(\"{$numtypesinstalled} new content types installed\");",
          "62:         }",
          "63:     }",
          "64: }",
          "",
          "---------------"
        ],
        "lib/db/tasks.php||lib/db/tasks.php": [
          "File: lib/db/tasks.php -> lib/db/tasks.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:         'dayofweek' => '*',",
          "393:         'month' => '*'",
          "394:     ),",
          "395: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     array(",
          "396:         'classname' => 'core\\task\\h5p_get_content_types_task',",
          "397:         'blocking' => 0,",
          "398:         'minute' => 'R',",
          "399:         'hour' => 'R',",
          "400:         'day' => '1',",
          "401:         'dayofweek' => '*',",
          "402:         'month' => '*'",
          "403:     ),",
          "",
          "---------------"
        ],
        "lib/tests/h5p_get_content_types_task_test.php||lib/tests/h5p_get_content_types_task_test.php": [
          "File: lib/tests/h5p_get_content_types_task_test.php -> lib/tests/h5p_get_content_types_task_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "36: class h5p_get_content_types_task_test extends advanced_testcase {",
          "47:     public function test_task_execution(): void {",
          "49:         if (!defined('PHPUNIT_LONGTEST')) {",
          "50:             $this->markTestSkipped('PHPUNIT_LONGTEST is not defined');",
          "51:         }",
          "53:         $this->resetAfterTest();",
          "56:         $generator = \\testing_util::get_data_generator();",
          "57:         $h5pgenerator = $generator->get_plugin_generator('core_h5p');",
          "59:         $h5pgenerator->create_content_types(2);",
          "61:         $task = new \\core\\task\\h5p_get_content_types_task();",
          "62:         $task->execute();",
          "63:         $this->expectOutputRegex('/2 new content types/');",
          "64:     }",
          "65: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019110500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019110500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1de4baf1f1946753032712045c2667b0ca3ddcea",
      "candidate_info": {
        "commit_hash": "1de4baf1f1946753032712045c2667b0ca3ddcea",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1de4baf1f1946753032712045c2667b0ca3ddcea",
        "files": [
          "enrol/externallib.php",
          "enrol/tests/course_enrolment_manager_test.php",
          "mod/forum/classes/local/vaults/post.php",
          "mod/forum/export.php",
          "version.php"
        ],
        "message": "MDL-66075 core: various fixes & code polishing\n\n* Removes unnecessary comment in search_users() WS.\n* Replaces DB call by get_course() in search_users() WS.\n* Fix discussionids handling on export.php.\n* Coding style fix in test_search_users unit test.\n* Add missing version bump.\n* phpDOc fixes in post vault.\n* Fix in the dataformat callback to handle different data types.",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/tests/course_enrolment_manager_test.php||enrol/tests/course_enrolment_manager_test.php",
          "mod/forum/classes/local/vaults/post.php||mod/forum/classes/local/vaults/post.php",
          "mod/forum/export.php||mod/forum/export.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "639:         }",
          "640:         course_require_view_participants($context);",
          "643:         $manager = new course_enrolment_manager($PAGE, $course);",
          "645:         $users = $manager->search_users($params['search'],",
          "",
          "[Removed Lines]",
          "642:         $course = $DB->get_record('course', ['id' => $params['courseid']]);",
          "",
          "[Added Lines]",
          "642:         $course = get_course($params['courseid']);",
          "",
          "---------------"
        ],
        "enrol/tests/course_enrolment_manager_test.php||enrol/tests/course_enrolment_manager_test.php": [
          "File: enrol/tests/course_enrolment_manager_test.php -> enrol/tests/course_enrolment_manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:             true,",
          "364:             0,",
          "365:             $perpage,",
          "368:         $this->assertCount($expectedusers, $users['users']);",
          "369:         $this->assertEquals($expectedmoreusers, $users['moreusers']);",
          "",
          "[Removed Lines]",
          "366:             $returnexactcount);",
          "",
          "[Added Lines]",
          "366:             $returnexactcount",
          "367:         );",
          "",
          "---------------"
        ],
        "mod/forum/classes/local/vaults/post.php||mod/forum/classes/local/vaults/post.php": [
          "File: mod/forum/classes/local/vaults/post.php -> mod/forum/classes/local/vaults/post.php"
        ],
        "mod/forum/export.php||mod/forum/export.php": [
          "File: mod/forum/export.php -> mod/forum/export.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     $discussionvault = $vaultfactory->get_discussion_vault();",
          "70:     $postvault = $vaultfactory->get_post_vault();",
          "72:     if ($data->discussionids) {",
          "74:     } else {",
          "75:         $discussions = $discussionvault->get_all_discussions_in_forum($forum);",
          "76:     }",
          "82:     if ($data->userids) {",
          "83:         $posts = $postvault->get_from_discussion_ids_and_user_ids($USER,",
          "84:                                                                   $discussionids,",
          "",
          "[Removed Lines]",
          "73:         $discussions = $discussionvault->get_from_ids($data->discussionids);",
          "78:     $discussionids = array_map(function ($discussion) {",
          "79:         return $discussion->get_id();",
          "80:     }, $discussions);",
          "",
          "[Added Lines]",
          "71:     $discussionids = [];",
          "73:         $discussionids = $data->discussionids;",
          "76:         $discussionids = array_map(function ($discussion) {",
          "77:             return $discussion->get_id();",
          "78:         }, $discussions);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     require_once($CFG->libdir . '/dataformatlib.php');",
          "101:     $filename = clean_filename('discussion');",
          "102:     download_as_dataformat($filename, $dataformat, $fields, $iterator, function($exportdata) use ($fields) {",
          "104:         foreach ($fields as $field) {",
          "106:         }",
          "107:         return $data;",
          "108:     });",
          "",
          "[Removed Lines]",
          "103:         $data = new stdClass();",
          "105:             $data->$field = !empty($exportdata->$field) ? $exportdata->$field : '';",
          "",
          "[Added Lines]",
          "102:         $data = $exportdata;",
          "105:             if (is_bool($data->$field)) {",
          "106:                 $data->$field = (int) $data->$field;",
          "107:             }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019092000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019092000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8516febdd7c11fc8d399765e821d35db7eff349e",
      "candidate_info": {
        "commit_hash": "8516febdd7c11fc8d399765e821d35db7eff349e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8516febdd7c11fc8d399765e821d35db7eff349e",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-58256 group: prevents users to be added to a group twice",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2692:         upgrade_main_savepoint(true, 2019011801.02);",
          "2693:     }",
          "2695:     return true;",
          "2696: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2695:     if ($oldversion < 2019011801.03) {",
          "2699:         $sql = \"",
          "2700:             SELECT MIN(id) as minid, userid, groupid",
          "2701:             FROM {groups_members}",
          "2702:             GROUP BY userid, groupid",
          "2703:             HAVING COUNT(id) > 1\";",
          "2704:         if ($duplicatedrows = $DB->get_recordset_sql($sql)) {",
          "2705:             foreach ($duplicatedrows as $row) {",
          "2706:                 $DB->delete_records_select('groups_members',",
          "2707:                     'userid = :userid AND groupid = :groupid AND id <> :minid', (array)$row);",
          "2708:             }",
          "2709:         }",
          "2710:         $duplicatedrows->close();",
          "2713:         $table = new xmldb_table('groups_members');",
          "2714:         $key = new xmldb_key('useridgroupid', XMLDB_KEY_UNIQUE, array('userid', 'groupid'));",
          "2716:         $dbman->add_key($table, $key);",
          "2719:         upgrade_main_savepoint(true, 2019011801.03);",
          "2720:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011801.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011801.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5ef685249feaef38613f4b5eb041af8e68ffb09",
      "candidate_info": {
        "commit_hash": "d5ef685249feaef38613f4b5eb041af8e68ffb09",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d5ef685249feaef38613f4b5eb041af8e68ffb09",
        "files": [
          "course/format/lib.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-60972 core_course: delete section files, when section is deleted.",
        "before_after_code_files": [
          "course/format/lib.php||course/format/lib.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "course/format/lib.php||course/format/lib.php": [
          "File: course/format/lib.php -> course/format/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1111:         $DB->delete_records('course_sections', array('id' => $section->id));",
          "1112:         rebuild_course_cache($course->id, true);",
          "1115:         if ($decreasenumsections) {",
          "1116:             $this->update_course_format_options(array('numsections' => $course->numsections - 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115:         $context = \\context_course::instance($course->id);",
          "1116:         $fs = get_file_storage();",
          "1117:         $fs->delete_area_files($context->id, 'course', 'section', $section->id);",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2516:         upgrade_main_savepoint(true, 2018120301.02);",
          "2517:     }",
          "2519:     return true;",
          "2520: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2519:     if ($oldversion < 2019011100.01) {",
          "2522:         $sql = \"SELECT DISTINCT f.itemid as sectionid, f.contextid",
          "2523:                   FROM {files} f",
          "2524:              LEFT JOIN {course_sections} s ON f.itemid = s.id",
          "2525:                  WHERE f.component = :component AND f.filearea = :filearea AND s.id IS NULL \";",
          "2527:         $params = [",
          "2528:             'component' => 'course',",
          "2529:             'filearea' => 'section'",
          "2530:         ];",
          "2532:         $stalefiles = $DB->get_recordset_sql($sql, $params);",
          "2534:         $fs = get_file_storage();",
          "2535:         foreach ($stalefiles as $stalefile) {",
          "2536:             $fs->delete_area_files($stalefile->contextid, 'course', 'section', $stalefile->sectionid);",
          "2537:         }",
          "2538:         $stalefiles->close();",
          "2540:         upgrade_main_savepoint(true, 2019011100.01);",
          "2541:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}