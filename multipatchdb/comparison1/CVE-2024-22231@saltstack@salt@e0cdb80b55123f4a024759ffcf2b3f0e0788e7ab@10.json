{
  "cve_id": "CVE-2024-22231",
  "cve_desc": "Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead\u00a0a malicious attacker to create an arbitrary directory on a Salt master.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6575f9b627eb2840774777249f56570ed84481fa",
      "candidate_info": {
        "commit_hash": "6575f9b627eb2840774777249f56570ed84481fa",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/6575f9b627eb2840774777249f56570ed84481fa",
        "files": [
          "tests/pytests/pkg/integration/test_salt_user.py"
        ],
        "message": "Fix variable name\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py": [
          "File: tests/pytests/pkg/integration/test_salt_user.py -> tests/pytests/pkg/integration/test_salt_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:                                         f\"cp -a {_path}/* {str(temp_dir_path_4)}/\"",
          "253:                                     )",
          "254:                                 elif bkup_count > 5:",
          "257:                                 ret = salt_call_cli.run(",
          "258:                                     \"--local\", \"cmd.run\", cmd_to_run",
          "",
          "[Removed Lines]",
          "255:                                     assert bkupcount < bkup_count_max  # force assertion",
          "",
          "[Added Lines]",
          "255:                                     # force assertion",
          "256:                                     assert bkup_count < bkup_count_max",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:                                     # use --update since /opt/saltstack/salt and would get SIGSEGV since mucking with running code",
          "350:                                     cmd_to_run = f\"cp -a --update --force {str(temp_dir_path_4)}/* {_path}/\"",
          "351:                                 elif bkup_count > 5:",
          "354:                                 ret = salt_call_cli.run(",
          "355:                                     \"--local\", \"cmd.run\", cmd_to_run",
          "",
          "[Removed Lines]",
          "352:                                     assert bkupcount < bkup_count_max  # force assertion",
          "",
          "[Added Lines]",
          "353:                                     # force assertion",
          "354:                                     assert bkup_count < bkup_count_max",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1fa82b9a8375aea5744e202c18cb0a36a1093b8",
      "candidate_info": {
        "commit_hash": "b1fa82b9a8375aea5744e202c18cb0a36a1093b8",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/b1fa82b9a8375aea5744e202c18cb0a36a1093b8",
        "files": [
          "CHANGELOG.md",
          "changelog/565.security.md",
          "changelog/65759.fixed.md",
          "changelog/65830.security.md",
          "changelog/665924.changed.md",
          "doc/man/salt-api.1",
          "doc/man/salt-call.1",
          "doc/man/salt-cloud.1",
          "doc/man/salt-cp.1",
          "doc/man/salt-key.1",
          "doc/man/salt-master.1",
          "doc/man/salt-minion.1",
          "doc/man/salt-proxy.1",
          "doc/man/salt-run.1",
          "doc/man/salt-ssh.1",
          "doc/man/salt-syndic.1",
          "doc/man/salt.1",
          "doc/man/salt.7",
          "doc/man/spm.1",
          "doc/topics/releases/3006.6.md",
          "doc/topics/releases/templates/3006.6.md.template",
          "pkg/debian/changelog",
          "pkg/rpm/salt.spec"
        ],
        "message": "Release v3006.6",
        "before_after_code_files": [
          "pkg/rpm/salt.spec||pkg/rpm/salt.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/rpm/salt.spec||pkg/rpm/salt.spec": [
          "File: pkg/rpm/salt.spec -> pkg/rpm/salt.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: %define fish_dir %{_datadir}/fish/vendor_functions.d",
          "33: Name:    salt",
          "35: Release: 0",
          "36: Summary: A parallel remote execution system",
          "37: Group:   System Environment/Daemons",
          "",
          "[Removed Lines]",
          "34: Version: 3006.5",
          "",
          "[Added Lines]",
          "34: Version: 3006.6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585: %changelog",
          "588: # Removed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588: # Changed",
          "590: - Salt no longer time bombs user installations on code using `salt.utils.versions.warn_until_date` [#665924](https://github.com/saltstack/salt/issues/665924)",
          "592: # Fixed",
          "594: - Fix un-closed transport in tornado netapi [#65759](https://github.com/saltstack/salt/issues/65759)",
          "596: # Security",
          "598: - CVE-2024-22231 Prevent directory traversal when creating syndic cache directory on the master",
          "599:   CVE-2024-22232 Prevent directory traversal attacks in the master's serve_file method.",
          "600:   These vulerablities were discovered and reported by:",
          "601:   Yudi Zhao(Huawei Nebula Security Lab),Chenwei Jiang(Huawei Nebula Security Lab) [#565](https://github.com/saltstack/salt/issues/565)",
          "602: - Update some requirements which had some security issues:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab6a77fcbd6256888ff8a5a617f23c133b9496c5",
      "candidate_info": {
        "commit_hash": "ab6a77fcbd6256888ff8a5a617f23c133b9496c5",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/ab6a77fcbd6256888ff8a5a617f23c133b9496c5",
        "files": [
          ".github/workflows/build-deps-ci-action-linux.yml",
          ".github/workflows/build-deps-ci-action-macos.yml",
          ".github/workflows/build-deps-ci-action-windows.yml",
          ".github/workflows/build-deps-ci-action.yml",
          ".github/workflows/ci.yml",
          ".github/workflows/nightly.yml",
          ".github/workflows/release.yml",
          ".github/workflows/scheduled.yml",
          ".github/workflows/staging.yml",
          ".github/workflows/templates/build-ci-deps.yml.jinja",
          ".github/workflows/templates/test-package-downloads-action.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja",
          ".github/workflows/test-action-linux.yml",
          ".github/workflows/test-action-macos.yml",
          ".github/workflows/test-action-windows.yml",
          ".github/workflows/test-action.yml",
          ".github/workflows/test-package-downloads-action.yml",
          ".github/workflows/test-packages-action-linux.yml",
          ".github/workflows/test-packages-action-macos.yml",
          ".github/workflows/test-packages-action-windows.yml",
          ".github/workflows/test-packages-action.yml",
          "noxfile.py",
          "tools/precommit/workflows.py",
          "tools/utils/__init__.py",
          "tools/vm.py"
        ],
        "message": "Reduce GitHub Actions cache usage\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/build-ci-deps.yml.jinja||.githuworkflows/templates/build-ci-deps.yml.jinja",
          ".github/workflows/templates/test-package-downloads-action.yml.jinja||.githuworkflows/templates/test-package-downloads-action.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja||.githuworkflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja||.githuworkflows/templates/test-salt.yml.jinja",
          "noxfile.py||noxfile.py",
          "tools/precommit/workflows.py||tools/precommit/workflows.py",
          "tools/utils/__init__.py||tools/utils/__init__.py",
          "tools/vm.py||tools/vm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-ci-deps.yml.jinja||.githuworkflows/templates/build-ci-deps.yml.jinja": [
          "File: .github/workflows/templates/build-ci-deps.yml.jinja -> .githuworkflows/templates/build-ci-deps.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     <%- if workflow_slug != 'release' %>",
          "8:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "9:     <%- endif %>",
          "",
          "[Removed Lines]",
          "2:   <%- for slug, display_name, arch in build_ci_deps_listing[\"windows\"] %>",
          "4:   <{ slug.replace(\".\", \"\") }>-ci-deps:",
          "5:     <%- do test_salt_needs.append(slug.replace(\".\", \"\") + \"-ci-deps\") %>",
          "6:     name: <{ display_name }> Deps",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     <%- else %>",
          "15:       - download-onedir-artifact",
          "16:     <%- endif %>",
          "18:     with:",
          "20:       nox-session: ci-test-onedir",
          "21:       platform: windows",
          "23:       nox-version: <{ nox_version  }>",
          "24:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "25:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "",
          "[Removed Lines]",
          "17:     uses: ./.github/workflows/build-deps-ci-action.yml",
          "19:       distro-slug: <{ slug }>",
          "22:       arch: amd64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:   <%- endfor %>",
          "36:     <%- if workflow_slug != 'release' %>",
          "37:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "38:     <%- endif %>",
          "",
          "[Removed Lines]",
          "31:   <%- for slug, display_name, arch in build_ci_deps_listing[\"macos\"] %>",
          "33:   <{ slug.replace(\".\", \"\") }>-ci-deps:",
          "34:     <%- do test_salt_needs.append(slug.replace(\".\", \"\") + \"-ci-deps\") %>",
          "35:     name: <{ display_name }> Deps",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "45:     <%- endif %>",
          "46:     uses: ./.github/workflows/build-deps-ci-action-macos.yml",
          "47:     with:",
          "49:       nox-session: ci-test-onedir",
          "50:       platform: darwin",
          "51:       arch: <{ arch }>",
          "",
          "[Removed Lines]",
          "48:       distro-slug: <{ slug }>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "57:   <%- endfor %>",
          "65:     <%- if workflow_slug != 'release' %>",
          "66:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "67:     <%- endif %>",
          "",
          "[Removed Lines]",
          "60:   <%- for slug, display_name, arch in build_ci_deps_listing[\"linux\"] %>",
          "62:   <{ slug.replace(\".\", \"\") }>-ci-deps:",
          "63:     <%- do test_salt_needs.append(slug.replace(\".\", \"\") + \"-ci-deps\") %>",
          "64:     name: <{ display_name }> Deps",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "72:     <%- else %>",
          "73:       - download-onedir-artifact",
          "74:     <%- endif %>",
          "76:     with:",
          "78:       nox-session: ci-test-onedir",
          "79:       platform: linux",
          "80:       arch: <{ arch }>",
          "",
          "[Removed Lines]",
          "75:     uses: ./.github/workflows/build-deps-ci-action.yml",
          "77:       distro-slug: <{ slug }>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-package-downloads-action.yml.jinja||.githuworkflows/templates/test-package-downloads-action.yml.jinja": [
          "File: .github/workflows/templates/test-package-downloads-action.yml.jinja -> .githuworkflows/templates/test-package-downloads-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:           cd artifacts",
          "95:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-linux-${{ matrix.arch == 'arm64' && 'aarch64' || matrix.arch }}.tar.xz",
          "98:         uses: actions/cache@v3.3.1",
          "99:         with:",
          "102:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "103:             }}",
          "104:           # If we get a cache miss here it means the dependencies step failed to save the cache",
          "",
          "[Removed Lines]",
          "97:       - name: Download cached nox.${{ matrix.distro-slug }}.tar.* for session ${{ inputs.nox-session }}",
          "100:           path: nox.${{ matrix.distro-slug }}.tar.*",
          "101:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch == 'arm64' && 'aarch64' || matrix.arch }}|${{ matrix.distro-slug }}|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:         run: |",
          "343:           python3 -m pip install 'nox==${{ inputs.nox-version }}'",
          "346:         uses: actions/cache@v3.3.1",
          "347:         with:",
          "350:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "351:             }}",
          "352:           # If we get a cache miss here it means the dependencies step failed to save the cache",
          "",
          "[Removed Lines]",
          "345:       - name: Download cached nox.${{ matrix.distro-slug }}.tar.* for session ${{ inputs.nox-session }}",
          "348:           path: nox.${{ matrix.distro-slug }}.tar.*",
          "349:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch == 'arm64' && 'aarch64' || matrix.arch }}|${{ matrix.distro-slug }}|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:       - name: Decompress .nox Directory",
          "356:         run: |",
          "359:       - name: Show System Info & Test Plan",
          "360:         env:",
          "",
          "[Removed Lines]",
          "357:           nox --force-color -e decompress-dependencies -- ${{ matrix.distro-slug }}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:           cd artifacts",
          "546:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "549:         uses: actions/cache@v3.3.1",
          "550:         with:",
          "553:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "554:             }}",
          "555:           # If we get a cache miss here it means the dependencies step failed to save the cache",
          "",
          "[Removed Lines]",
          "548:       - name: Download cached nox.${{ matrix.distro-slug }}.tar.* for session ${{ inputs.nox-session }}",
          "551:           path: nox.${{ matrix.distro-slug }}.tar.*",
          "552:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|${{ matrix.distro-slug }}|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt-pkg.yml.jinja||.githuworkflows/templates/test-salt-pkg.yml.jinja": [
          "File: .github/workflows/templates/test-salt-pkg.yml.jinja -> .githuworkflows/templates/test-salt-pkg.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     needs:",
          "9:       - prepare-workflow",
          "10:       - build-<{ pkg_type }>-pkgs-onedir",
          "13:     with:",
          "14:       distro-slug: <{ slug }>",
          "15:       nox-session: ci-test-onedir",
          "",
          "[Removed Lines]",
          "11:       - <{ slug.replace(\".\", \"\") }>-ci-deps",
          "12:     uses: ./.github/workflows/test-packages-action.yml",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     needs:",
          "42:       - prepare-workflow",
          "43:       - build-macos-pkgs-onedir",
          "45:     uses: ./.github/workflows/test-packages-action-macos.yml",
          "46:     with:",
          "47:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "44:       - <{ slug.replace(\".\", \"\") }>-ci-deps",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     needs:",
          "72:       - prepare-workflow",
          "73:       - build-windows-pkgs-onedir",
          "76:     with:",
          "77:       distro-slug: <{ slug }>",
          "78:       nox-session: ci-test-onedir",
          "",
          "[Removed Lines]",
          "74:       - <{ slug.replace(\".\", \"\") }>-ci-deps",
          "75:     uses: ./.github/workflows/test-packages-action.yml",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt.yml.jinja||.githuworkflows/templates/test-salt.yml.jinja": [
          "File: .github/workflows/templates/test-salt.yml.jinja -> .githuworkflows/templates/test-salt.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "13:     needs:",
          "14:       - prepare-workflow",
          "17:     with:",
          "18:       distro-slug: <{ slug }>",
          "19:       nox-session: ci-test-onedir",
          "",
          "[Removed Lines]",
          "15:       - <{ slug.replace(\".\", \"\") }>-ci-deps",
          "16:     uses: ./.github/workflows/test-action.yml",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "41:     needs:",
          "42:       - prepare-workflow",
          "44:     uses: ./.github/workflows/test-action-macos.yml",
          "45:     with:",
          "46:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "43:       - <{ slug.replace(\".\", \"\") }>-ci-deps",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "68:     needs:",
          "69:       - prepare-workflow",
          "72:     with:",
          "73:       distro-slug: <{ slug }>",
          "74:       nox-session: ci-test-onedir",
          "",
          "[Removed Lines]",
          "70:       - <{ slug.replace(\".\", \"\") }>-ci-deps",
          "71:     uses: ./.github/workflows/test-action.yml",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "noxfile.py||noxfile.py": [
          "File: noxfile.py -> noxfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1218: def decompress_dependencies(session):",
          "1219:     if not session.posargs:",
          "1220:         session.error(",
          "1223:         )",
          "1227:     else:",
          "1229:     nox_dependencies_tarball_path = REPO_ROOT / nox_dependencies_tarball",
          "1230:     if not nox_dependencies_tarball_path.exists():",
          "1231:         session.error(",
          "",
          "[Removed Lines]",
          "1221:             \"Please pass the distro-slug to run tests against. \"",
          "1222:             \"Check cicd/images.yml for what's available.\"",
          "1224:     distro_slug = session.posargs.pop(0)",
          "1225:     if \"windows\" in distro_slug:",
          "1226:         nox_dependencies_tarball = f\"nox.{distro_slug}.tar.gz\"",
          "1228:         nox_dependencies_tarball = f\"nox.{distro_slug}.tar.xz\"",
          "",
          "[Added Lines]",
          "1221:             \"The 'decompress-dependencies' session target needs \"",
          "1222:             \"two arguments, '<platform> <arch>'.\"",
          "1224:     try:",
          "1225:         platform = session.posargs.pop(0)",
          "1226:         arch = session.posargs.pop(0)",
          "1227:         if session.posargs:",
          "1228:             session.error(",
          "1229:                 \"The 'decompress-dependencies' session target only accepts \"",
          "1230:                 \"two arguments, '<platform> <arch>'.\"",
          "1231:             )",
          "1232:     except IndexError:",
          "1233:         session.error(",
          "1234:             \"The 'decompress-dependencies' session target needs \"",
          "1235:             \"two arguments, '<platform> <arch>'.\"",
          "1236:         )",
          "1237:     if platform == \"windows\":",
          "1238:         extension = \"tar.gz\"",
          "1239:         scripts_dir_name = \"Scripts\"",
          "1241:         extension = \"tar.xz\"",
          "1242:         scripts_dir_name = \"bin\"",
          "1243:     nox_dependencies_tarball = f\"nox.{platform}.{arch}.{extension}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1240:     session.log(\"Finding broken 'python' symlinks under '.nox/' ...\")",
          "1241:     for dirname in os.scandir(REPO_ROOT / \".nox\"):",
          "1246:         script_paths = {str(p): p for p in os.scandir(scan_path)}",
          "1247:         fixed_shebang = f\"#!{scan_path / 'python'}\"",
          "1248:         for key in sorted(script_paths):",
          "",
          "[Removed Lines]",
          "1242:         if \"windows\" not in distro_slug:",
          "1243:             scan_path = REPO_ROOT.joinpath(\".nox\", dirname, \"bin\")",
          "1244:         else:",
          "1245:             scan_path = REPO_ROOT.joinpath(\".nox\", dirname, \"Scripts\")",
          "",
          "[Added Lines]",
          "1257:         scan_path = REPO_ROOT.joinpath(\".nox\", dirname, scripts_dir_name)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:                 continue",
          "1274:             if not path.is_file():",
          "1275:                 continue",
          "1277:                 # Let's try to fix shebang's",
          "1278:                 try:",
          "1279:                     fpath = pathlib.Path(path)",
          "",
          "[Removed Lines]",
          "1276:             if \"windows\" not in distro_slug:",
          "",
          "[Added Lines]",
          "1288:             if platform != \"windows\":",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1296: def compress_dependencies(session):",
          "1297:     if not session.posargs:",
          "1298:         session.error(",
          "1301:         )",
          "1305:     else:",
          "1307:     nox_dependencies_tarball_path = REPO_ROOT / nox_dependencies_tarball",
          "1308:     if nox_dependencies_tarball_path.exists():",
          "1309:         session_warn(",
          "",
          "[Removed Lines]",
          "1299:             \"Please pass the distro-slug to run tests against. \"",
          "1300:             \"Check cicd/images.yml for what's available.\"",
          "1302:     distro_slug = session.posargs.pop(0)",
          "1303:     if IS_WINDOWS:",
          "1304:         nox_dependencies_tarball = f\"nox.{distro_slug}.tar.gz\"",
          "1306:         nox_dependencies_tarball = f\"nox.{distro_slug}.tar.xz\"",
          "",
          "[Added Lines]",
          "1311:             \"The 'compress-dependencies' session target needs \"",
          "1312:             \"two arguments, '<platform> <arch>'.\"",
          "1314:     try:",
          "1315:         platform = session.posargs.pop(0)",
          "1316:         arch = session.posargs.pop(0)",
          "1317:         if session.posargs:",
          "1318:             session.error(",
          "1319:                 \"The 'compress-dependencies' session target only accepts \"",
          "1320:                 \"two arguments, '<platform> <arch>'.\"",
          "1321:             )",
          "1322:     except IndexError:",
          "1323:         session.error(",
          "1324:             \"The 'compress-dependencies' session target needs \"",
          "1325:             \"two arguments, '<platform> <arch>'.\"",
          "1326:         )",
          "1327:     if platform == \"windows\":",
          "1328:         extension = \"tar.gz\"",
          "1330:         extension = \"tar.xz\"",
          "1331:     nox_dependencies_tarball = f\"nox.{platform}.{arch}.{extension}\"",
          "",
          "---------------"
        ],
        "tools/precommit/workflows.py||tools/precommit/workflows.py": [
          "File: tools/precommit/workflows.py -> tools/precommit/workflows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:             \"template\": \"test-package-downloads-action.yml\",",
          "89:         },",
          "90:     }",
          "92:         \"linux\": [",
          "93:             (\"almalinux-8\", \"Alma Linux 8\", \"x86_64\", \"no-fips\"),",
          "94:             (\"almalinux-9\", \"Alma Linux 9\", \"x86_64\", \"no-fips\"),",
          "95:             (\"amazonlinux-2\", \"Amazon Linux 2\", \"x86_64\", \"no-fips\"),",
          "97:             (\"amazonlinux-2023\", \"Amazon Linux 2023\", \"x86_64\", \"no-fips\"),",
          "99:             (\"archlinux-lts\", \"Arch Linux LTS\", \"x86_64\", \"no-fips\"),",
          "100:             (\"centos-7\", \"CentOS 7\", \"x86_64\", \"no-fips\"),",
          "101:             (\"centosstream-8\", \"CentOS Stream 8\", \"x86_64\", \"no-fips\"),",
          "102:             (\"centosstream-9\", \"CentOS Stream 9\", \"x86_64\", \"no-fips\"),",
          "103:             (\"debian-10\", \"Debian 10\", \"x86_64\", \"no-fips\"),",
          "104:             (\"debian-11\", \"Debian 11\", \"x86_64\", \"no-fips\"),",
          "106:             (\"debian-12\", \"Debian 12\", \"x86_64\", \"no-fips\"),",
          "108:             (\"fedora-37\", \"Fedora 37\", \"x86_64\", \"no-fips\"),",
          "109:             (\"fedora-38\", \"Fedora 38\", \"x86_64\", \"no-fips\"),",
          "110:             (\"opensuse-15\", \"Opensuse 15\", \"x86_64\", \"no-fips\"),",
          "111:             (\"photonos-3\", \"Photon OS 3\", \"x86_64\", \"no-fips\"),",
          "113:             (\"photonos-4\", \"Photon OS 4\", \"x86_64\", \"fips\"),",
          "115:             (\"photonos-5\", \"Photon OS 5\", \"x86_64\", \"fips\"),",
          "117:             (\"ubuntu-20.04\", \"Ubuntu 20.04\", \"x86_64\", \"no-fips\"),",
          "119:             (\"ubuntu-22.04\", \"Ubuntu 22.04\", \"x86_64\", \"no-fips\"),",
          "121:         ],",
          "122:         \"macos\": [",
          "123:             (\"macos-12\", \"macOS 12\", \"x86_64\"),",
          "124:             (\"macos-13\", \"macOS 13\", \"x86_64\"),",
          "126:         ],",
          "127:         \"windows\": [",
          "128:             (\"windows-2016\", \"Windows 2016\", \"amd64\"),",
          "",
          "[Removed Lines]",
          "91:     test_salt_listing = {",
          "96:             (\"amazonlinux-2-arm64\", \"Amazon Linux 2 Arm64\", \"aarch64\", \"no-fips\"),",
          "98:             (\"amazonlinux-2023-arm64\", \"Amazon Linux 2023 Arm64\", \"aarch64\", \"no-fips\"),",
          "105:             (\"debian-11-arm64\", \"Debian 11 Arm64\", \"aarch64\", \"no-fips\"),",
          "107:             (\"debian-12-arm64\", \"Debian 12 Arm64\", \"aarch64\", \"no-fips\"),",
          "112:             (\"photonos-3-arm64\", \"Photon OS 3 Arm64\", \"aarch64\", \"no-fips\"),",
          "114:             (\"photonos-4-arm64\", \"Photon OS 4 Arm64\", \"aarch64\", \"fips\"),",
          "116:             (\"photonos-5-arm64\", \"Photon OS 5 Arm64\", \"aarch64\", \"fips\"),",
          "118:             (\"ubuntu-20.04-arm64\", \"Ubuntu 20.04 Arm64\", \"aarch64\", \"no-fips\"),",
          "120:             (\"ubuntu-22.04-arm64\", \"Ubuntu 22.04 Arm64\", \"aarch64\", \"no-fips\"),",
          "125:             (\"macos-13-xlarge\", \"macOS 13 Arm64\", \"aarch64\"),",
          "",
          "[Added Lines]",
          "91:     test_salt_listing: dict[str, list[tuple[str, ...]]] = {",
          "96:             (\"amazonlinux-2-arm64\", \"Amazon Linux 2 Arm64\", \"arm64\", \"no-fips\"),",
          "98:             (\"amazonlinux-2023-arm64\", \"Amazon Linux 2023 Arm64\", \"arm64\", \"no-fips\"),",
          "105:             (\"debian-11-arm64\", \"Debian 11 Arm64\", \"arm64\", \"no-fips\"),",
          "107:             (\"debian-12-arm64\", \"Debian 12 Arm64\", \"arm64\", \"no-fips\"),",
          "112:             (\"photonos-3-arm64\", \"Photon OS 3 Arm64\", \"arm64\", \"no-fips\"),",
          "114:             (\"photonos-4-arm64\", \"Photon OS 4 Arm64\", \"arm64\", \"fips\"),",
          "116:             (\"photonos-5-arm64\", \"Photon OS 5 Arm64\", \"arm64\", \"fips\"),",
          "118:             (\"ubuntu-20.04-arm64\", \"Ubuntu 20.04 Arm64\", \"arm64\", \"no-fips\"),",
          "120:             (\"ubuntu-22.04-arm64\", \"Ubuntu 22.04 Arm64\", \"arm64\", \"no-fips\"),",
          "125:             (\"macos-13-xlarge\", \"macOS 13 Arm64\", \"arm64\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:             (",
          "138:                 \"amazonlinux-2-arm64\",",
          "139:                 \"Amazon Linux 2 Arm64\",",
          "141:                 \"rpm\",",
          "142:                 \"no-fips\",",
          "143:             ),",
          "",
          "[Removed Lines]",
          "140:                 \"aarch64\",",
          "",
          "[Added Lines]",
          "140:                 \"arm64\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:             (",
          "146:                 \"amazonlinux-2023-arm64\",",
          "147:                 \"Amazon Linux 2023 Arm64\",",
          "149:                 \"rpm\",",
          "150:                 \"no-fips\",",
          "151:             ),",
          "",
          "[Removed Lines]",
          "148:                 \"aarch64\",",
          "",
          "[Added Lines]",
          "148:                 \"arm64\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:             (",
          "156:                 \"centosstream-9-arm64\",",
          "157:                 \"CentOS Stream 9 Arm64\",",
          "159:                 \"rpm\",",
          "160:                 \"no-fips\",",
          "161:             ),",
          "162:             (\"debian-10\", \"Debian 10\", \"x86_64\", \"deb\", \"no-fips\"),",
          "163:             (\"debian-11\", \"Debian 11\", \"x86_64\", \"deb\", \"no-fips\"),",
          "165:             (\"debian-12\", \"Debian 12\", \"x86_64\", \"deb\", \"no-fips\"),",
          "167:             (\"photonos-3\", \"Photon OS 3\", \"x86_64\", \"rpm\", \"no-fips\"),",
          "169:             (\"photonos-4\", \"Photon OS 4\", \"x86_64\", \"rpm\", \"fips\"),",
          "171:             (\"photonos-5\", \"Photon OS 5\", \"x86_64\", \"rpm\", \"fips\"),",
          "173:             (\"ubuntu-20.04\", \"Ubuntu 20.04\", \"x86_64\", \"deb\", \"no-fips\"),",
          "175:             (\"ubuntu-22.04\", \"Ubuntu 22.04\", \"x86_64\", \"deb\", \"no-fips\"),",
          "177:         ],",
          "178:         \"macos\": [",
          "179:             (\"macos-12\", \"macOS 12\", \"x86_64\"),",
          "180:             (\"macos-13\", \"macOS 13\", \"x86_64\"),",
          "182:         ],",
          "183:         \"windows\": [",
          "184:             (\"windows-2016\", \"Windows 2016\", \"amd64\"),",
          "",
          "[Removed Lines]",
          "158:                 \"aarch64\",",
          "164:             (\"debian-11-arm64\", \"Debian 11 Arm64\", \"aarch64\", \"deb\", \"no-fips\"),",
          "166:             (\"debian-12-arm64\", \"Debian 12 Arm64\", \"aarch64\", \"deb\", \"no-fips\"),",
          "168:             (\"photonos-3-arm64\", \"Photon OS 3 Arm64\", \"aarch64\", \"rpm\", \"no-fips\"),",
          "170:             (\"photonos-4-arm64\", \"Photon OS 4 Arm64\", \"aarch64\", \"rpm\", \"fips\"),",
          "172:             (\"photonos-5-arm64\", \"Photon OS 5 Arm64\", \"aarch64\", \"rpm\", \"fips\"),",
          "174:             (\"ubuntu-20.04-arm64\", \"Ubuntu 20.04 Arm64\", \"aarch64\", \"deb\", \"no-fips\"),",
          "176:             (\"ubuntu-22.04-arm64\", \"Ubuntu 22.04 Arm64\", \"aarch64\", \"deb\", \"no-fips\"),",
          "181:             (\"macos-13-xlarge\", \"macOS 13 Arm64\", \"aarch64\"),",
          "",
          "[Added Lines]",
          "158:                 \"arm64\",",
          "164:             (\"debian-11-arm64\", \"Debian 11 Arm64\", \"arm64\", \"deb\", \"no-fips\"),",
          "166:             (\"debian-12-arm64\", \"Debian 12 Arm64\", \"arm64\", \"deb\", \"no-fips\"),",
          "168:             (\"photonos-3-arm64\", \"Photon OS 3 Arm64\", \"arm64\", \"rpm\", \"no-fips\"),",
          "170:             (\"photonos-4-arm64\", \"Photon OS 4 Arm64\", \"arm64\", \"rpm\", \"fips\"),",
          "172:             (\"photonos-5-arm64\", \"Photon OS 5 Arm64\", \"arm64\", \"rpm\", \"fips\"),",
          "174:             (\"ubuntu-20.04-arm64\", \"Ubuntu 20.04 Arm64\", \"arm64\", \"deb\", \"no-fips\"),",
          "176:             (\"ubuntu-22.04-arm64\", \"Ubuntu 22.04 Arm64\", \"arm64\", \"deb\", \"no-fips\"),",
          "181:             (\"macos-13-xlarge\", \"macOS 13 Arm64\", \"arm64\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:     build_ci_deps_listing = {",
          "191:         \"linux\": [",
          "227:         ],",
          "228:         \"macos\": [",
          "232:         ],",
          "233:         \"windows\": [",
          "237:         ],",
          "238:     }",
          "239:     test_salt_pkg_downloads_listing: dict[str, list[tuple[str, str, str]]] = {",
          "",
          "[Removed Lines]",
          "192:             (\"almalinux-8\", \"Alma Linux 8\", \"x86_64\"),",
          "193:             (\"almalinux-8-arm64\", \"Alma Linux 8 Arm64\", \"aarch64\"),",
          "194:             (\"almalinux-9\", \"Alma Linux 9\", \"x86_64\"),",
          "195:             (\"almalinux-9-arm64\", \"Alma Linux 9 Arm64\", \"aarch64\"),",
          "196:             (\"amazonlinux-2\", \"Amazon Linux 2\", \"x86_64\"),",
          "197:             (\"amazonlinux-2-arm64\", \"Amazon Linux 2 Arm64\", \"aarch64\"),",
          "198:             (\"amazonlinux-2023\", \"Amazon Linux 2023\", \"x86_64\"),",
          "199:             (\"amazonlinux-2023-arm64\", \"Amazon Linux 2023 Arm64\", \"aarch64\"),",
          "200:             (\"archlinux-lts\", \"Arch Linux LTS\", \"x86_64\"),",
          "201:             (\"centos-7\", \"CentOS 7\", \"x86_64\"),",
          "202:             (\"centos-7-arm64\", \"CentOS 7 Arm64\", \"aarch64\"),",
          "203:             (\"centosstream-8\", \"CentOS Stream 8\", \"x86_64\"),",
          "204:             (\"centosstream-8-arm64\", \"CentOS Stream 8 Arm64\", \"aarch64\"),",
          "205:             (\"centosstream-9\", \"CentOS Stream 9\", \"x86_64\"),",
          "206:             (\"centosstream-9-arm64\", \"CentOS Stream 9 Arm64\", \"aarch64\"),",
          "207:             (\"debian-10\", \"Debian 10\", \"x86_64\"),",
          "208:             (\"debian-11\", \"Debian 11\", \"x86_64\"),",
          "209:             (\"debian-11-arm64\", \"Debian 11 Arm64\", \"aarch64\"),",
          "210:             (\"debian-12\", \"Debian 12\", \"x86_64\"),",
          "211:             (\"debian-12-arm64\", \"Debian 12 Arm64\", \"aarch64\"),",
          "212:             (\"fedora-37\", \"Fedora 37\", \"x86_64\"),",
          "213:             (\"fedora-37-arm64\", \"Fedora 37 Arm64\", \"aarch64\"),",
          "214:             (\"fedora-38\", \"Fedora 38\", \"x86_64\"),",
          "215:             (\"fedora-38-arm64\", \"Fedora 38 Arm64\", \"aarch64\"),",
          "216:             (\"opensuse-15\", \"Opensuse 15\", \"x86_64\"),",
          "217:             (\"photonos-3\", \"Photon OS 3\", \"x86_64\"),",
          "218:             (\"photonos-3-arm64\", \"Photon OS 3 Arm64\", \"aarch64\"),",
          "219:             (\"photonos-4\", \"Photon OS 4\", \"x86_64\"),",
          "220:             (\"photonos-4-arm64\", \"Photon OS 4 Arm64\", \"aarch64\"),",
          "221:             (\"photonos-5\", \"Photon OS 5\", \"x86_64\"),",
          "222:             (\"photonos-5-arm64\", \"Photon OS 5 Arm64\", \"aarch64\"),",
          "223:             (\"ubuntu-20.04\", \"Ubuntu 20.04\", \"x86_64\"),",
          "224:             (\"ubuntu-20.04-arm64\", \"Ubuntu 20.04 Arm64\", \"aarch64\"),",
          "225:             (\"ubuntu-22.04\", \"Ubuntu 22.04\", \"x86_64\"),",
          "226:             (\"ubuntu-22.04-arm64\", \"Ubuntu 22.04 Arm64\", \"aarch64\"),",
          "229:             (\"macos-12\", \"macOS 12\", \"x86_64\"),",
          "230:             (\"macos-13\", \"macOS 13\", \"x86_64\"),",
          "231:             (\"macos-13-xlarge\", \"macOS 13 Arm64\", \"aarch64\"),",
          "234:             (\"windows-2016\", \"Windows 2016\", \"amd64\"),",
          "235:             (\"windows-2019\", \"Windows 2019\", \"amd64\"),",
          "236:             (\"windows-2022\", \"Windows 2022\", \"amd64\"),",
          "",
          "[Added Lines]",
          "192:             (\"x86_64\", \"centos-7\"),",
          "193:             (\"arm64\", \"centos-7-arm64\"),",
          "196:             (\"x86_64\", \"macos-12\"),",
          "197:             (\"arm64\", \"macos-13-xlarge\"),",
          "200:             (\"amd64\", \"windows-2022\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "249:         \"fedora\",",
          "250:         \"photon\",",
          "251:     ]",
          "253:         if slug in (\"archlinux-lts\", \"opensuse-15\"):",
          "254:             continue",
          "255:         test_salt_pkg_downloads_listing[\"linux\"].append((slug, arch, \"package\"))",
          "265:         if slug in (\"archlinux-lts\", \"opensuse-15\"):",
          "266:             continue",
          "267:         test_salt_pkg_downloads_listing[\"linux\"].append((slug, arch, \"onedir\"))",
          "271:         test_salt_pkg_downloads_listing[\"macos\"].append((slug, arch, \"package\"))",
          "273:         test_salt_pkg_downloads_listing[\"macos\"].append((slug, arch, \"onedir\"))",
          "275:         for pkg_type in (\"nsis\", \"msi\", \"onedir\"):",
          "276:             test_salt_pkg_downloads_listing[\"windows\"].append((slug, arch, pkg_type))",
          "278:     test_salt_pkg_downloads_needs_slugs = set()",
          "279:     for platform in test_salt_pkg_downloads_listing:",
          "283:     env = Environment(",
          "284:         block_start_string=\"<%\",",
          "",
          "[Removed Lines]",
          "252:     for slug, display_name, arch in build_ci_deps_listing[\"linux\"]:",
          "256:         # Account for old arm64 repo paths",
          "257:         if arch == \"aarch64\":",
          "258:             for test_slug in rpm_slugs:",
          "259:                 if slug.startswith(test_slug):",
          "260:                     test_salt_pkg_downloads_listing[\"linux\"].append(",
          "261:                         (slug, \"arm64\", \"package\")",
          "262:                     )",
          "263:                     break",
          "264:     for slug, display_name, arch in build_ci_deps_listing[\"linux\"][-2:]:",
          "268:     for slug, display_name, arch in build_ci_deps_listing[\"macos\"]:",
          "269:         if arch == \"aarch64\":",
          "270:             arch = \"arm64\"",
          "272:     for slug, display_name, arch in build_ci_deps_listing[\"macos\"][-1:]:",
          "274:     for slug, display_name, arch in build_ci_deps_listing[\"windows\"][-1:]:",
          "280:         for slug, _, _ in test_salt_pkg_downloads_listing[platform]:",
          "281:             test_salt_pkg_downloads_needs_slugs.add(f\"{slug.replace('.', '')}-ci-deps\")",
          "",
          "[Added Lines]",
          "216:     for slug, display_name, arch, fips in test_salt_listing[\"linux\"]:",
          "220:     for slug, display_name, arch, fips in test_salt_listing[\"linux\"][-2:]:",
          "224:     for slug, display_name, arch in test_salt_listing[\"macos\"]:",
          "226:     for slug, display_name, arch in test_salt_listing[\"macos\"][-1:]:",
          "228:     for slug, display_name, arch in test_salt_listing[\"windows\"][-1:]:",
          "234:         for _, arch, _ in test_salt_pkg_downloads_listing[platform]:",
          "235:             test_salt_pkg_downloads_needs_slugs.add(f\"{platform}-{arch}-ci-deps\")",
          "",
          "---------------"
        ],
        "tools/utils/__init__.py||tools/utils/__init__.py": [
          "File: tools/utils/__init__.py -> tools/utils/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:                     if chunk:",
          "260:                         f.write(chunk)",
          "261:     return dest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: def get_platform_and_arch_from_slug(slug: str) -> tuple[str, str]:",
          "265:     if \"windows\" in slug:",
          "266:         platform = \"windows\"",
          "267:         arch = \"amd64\"",
          "268:     elif \"macos\" in slug:",
          "269:         platform = \"macos\"",
          "270:         if \"macos-13\" in slug and \"xlarge\" in slug:",
          "271:             arch = \"arm64\"",
          "272:         else:",
          "273:             arch = \"x86_64\"",
          "274:     else:",
          "275:         platform = \"linux\"",
          "276:         if \"arm64\" in slug:",
          "277:             arch = \"arm64\"",
          "278:         elif \"aarch64\" in slug:",
          "279:             arch = \"arm64\"",
          "280:         else:",
          "281:             arch = \"x86_64\"",
          "282:     return platform, arch",
          "",
          "---------------"
        ],
        "tools/vm.py||tools/vm.py": [
          "File: tools/vm.py -> tools/vm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1468:         \"\"\"",
          "1469:         Compress .nox/ into nox.<vm-name>.tar.* in the VM",
          "1470:         \"\"\"",
          "1473:     def decompress_dependencies(self):",
          "1474:         \"\"\"",
          "1475:         Decompress nox.<vm-name>.tar.* if it exists in the VM",
          "1476:         \"\"\"",
          "1477:         env = {\"DELETE_NOX_ARCHIVE\": \"1\"}",
          "1478:         return self.run_nox(",
          "1480:         )",
          "1482:     def download_dependencies(self):",
          "",
          "[Removed Lines]",
          "1471:         return self.run_nox(\"compress-dependencies\", session_args=[self.name])",
          "1479:             \"decompress-dependencies\", session_args=[self.name], env=env",
          "",
          "[Added Lines]",
          "1471:         platform, arch = tools.utils.get_platform_and_arch_from_slug(self.name)",
          "1472:         return self.run_nox(\"compress-dependencies\", session_args=[platform, arch])",
          "1479:         platform, arch = tools.utils.get_platform_and_arch_from_slug(self.name)",
          "1481:             \"decompress-dependencies\", session_args=[platform, arch], env=env",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1484:         Download nox.<vm-name>.tar.* from VM",
          "1485:         \"\"\"",
          "1486:         if self.is_windows:",
          "1488:         else:",
          "1490:         remote_path = self.upload_path.joinpath(dependencies_filename).as_posix()",
          "1491:         if self.is_windows:",
          "1492:             for drive in (\"c:\", \"C:\"):",
          "",
          "[Removed Lines]",
          "1487:             dependencies_filename = f\"nox.{self.name}.tar.gz\"",
          "1489:             dependencies_filename = f\"nox.{self.name}.tar.xz\"",
          "",
          "[Added Lines]",
          "1489:             extension = \"tar.gz\"",
          "1491:             extension = \"tar.xz\"",
          "1492:         platform, arch = tools.utils.get_platform_and_arch_from_slug(self.name)",
          "1493:         dependencies_filename = f\"nox.{platform}.{arch}.{extension}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bb31e253449cd4c25c2599257ff895947273b74",
      "candidate_info": {
        "commit_hash": "6bb31e253449cd4c25c2599257ff895947273b74",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/6bb31e253449cd4c25c2599257ff895947273b74",
        "files": [
          "pkg/debian/rules",
          "pkg/rpm/salt.spec"
        ],
        "message": "Fix source package build\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "pkg/rpm/salt.spec||pkg/rpm/salt.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/rpm/salt.spec||pkg/rpm/salt.spec": [
          "File: pkg/rpm/salt.spec -> pkg/rpm/salt.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   export FETCH_RELENV_VERSION=${SALT_RELENV_VERSION}",
          "170:   export PY=$(build/venv/bin/python3 -c 'import sys; sys.stdout.write(\"{}.{}\".format(*sys.version_info)); sys.stdout.flush()')",
          "171:   build/venv/bin/python3 -m pip install -r %{_salt_src}/requirements/static/ci/py${PY}/tools.txt",
          "174:   cd %{_salt_src}",
          "175:  $RPM_BUILD_DIR/build/venv/bin/tools pkg build onedir-dependencies --arch ${SALT_PACKAGE_ARCH} --relenv-version=${SALT_RELENV_VERSION} --python-version ${SALT_PYTHON_VERSION} --package-name $RPM_BUILD_DIR/build/salt --platform linux",
          "",
          "[Removed Lines]",
          "172:   build/venv/bin/relenv fetch --arch=${SALT_PACKAGE_ARCH} --python=${SALT_PYTHON_VERSION}",
          "173:   build/venv/bin/relenv toolchain fetch --arch=${SALT_PACKAGE_ARCH}",
          "",
          "[Added Lines]",
          "172:   build/venv/bin/relenv fetch --python=${SALT_PYTHON_VERSION}",
          "173:   build/venv/bin/relenv toolchain fetch",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfe7e1fecb3ada1e4ff7d74b0d0071b7d18d9f69",
      "candidate_info": {
        "commit_hash": "cfe7e1fecb3ada1e4ff7d74b0d0071b7d18d9f69",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/cfe7e1fecb3ada1e4ff7d74b0d0071b7d18d9f69",
        "files": [
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_pillar.py",
          "tests/pytests/pkg/integration/test_salt_state_file.py"
        ],
        "message": "Define and laydown the state and pillar files only when required for tests\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_pillar.py||tests/pytests/pkg/integration/test_salt_pillar.py",
          "tests/pytests/pkg/integration/test_salt_state_file.py||tests/pytests/pkg/integration/test_salt_state_file.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: tests/pytests/pkg/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import yaml",
          "10: from pytestskipmarkers.utils import platform",
          "11: from saltfactories.utils import random_string",
          "14: import salt.config",
          "16: from tests.support.pkg import ApiRequest, SaltMaster, SaltMasterWindows, SaltPkgInstall",
          "18: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "12: from saltfactories.utils.tempfiles import SaltPillarTree, SaltStateTree",
          "15: from tests.conftest import CODE_DIR, TESTS_DIR",
          "",
          "[Added Lines]",
          "14: from tests.conftest import CODE_DIR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183: @pytest.fixture(scope=\"session\")",
          "229:     \"\"\"",
          "231:     \"\"\"",
          "232:     if platform.is_windows():",
          "234:     elif platform.is_darwin():",
          "236:     else:",
          "305:     start_timeout = None",
          "306:     # Since the daemons are \"packaged\" with tiamat, the salt plugins provided",
          "307:     # by salt-factories won't be discovered. Provide the required `*_dirs` on",
          "",
          "[Removed Lines]",
          "184: def state_tree():",
          "185:     if platform.is_windows():",
          "186:         file_root = pathlib.Path(\"C:/salt/srv/salt\")",
          "187:     elif platform.is_darwin():",
          "188:         file_root = pathlib.Path(\"/opt/srv/salt\")",
          "189:     else:",
          "190:         file_root = pathlib.Path(\"/srv/salt\")",
          "191:     envs = {",
          "192:         \"base\": [",
          "193:             str(file_root),",
          "194:             str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\"),",
          "195:         ],",
          "196:     }",
          "197:     tree = SaltStateTree(envs=envs)",
          "198:     test_sls_contents = \"\"\"",
          "199:     test_foo:",
          "200:       test.succeed_with_changes:",
          "201:           - name: foo",
          "202:     \"\"\"",
          "203:     states_sls_contents = \"\"\"",
          "204:     update:",
          "205:       pkg.installed:",
          "206:         - name: bash",
          "207:     salt_dude:",
          "208:       user.present:",
          "209:         - name: dude",
          "210:         - fullname: Salt Dude",
          "211:     \"\"\"",
          "212:     win_states_sls_contents = \"\"\"",
          "213:     create_empty_file:",
          "214:       file.managed:",
          "215:         - name: C://salt/test/txt",
          "216:     salt_dude:",
          "217:       user.present:",
          "218:         - name: dude",
          "219:         - fullname: Salt Dude",
          "220:     \"\"\"",
          "221:     with tree.base.temp_file(\"test.sls\", test_sls_contents), tree.base.temp_file(",
          "222:         \"states.sls\", states_sls_contents",
          "223:     ), tree.base.temp_file(\"win_states.sls\", win_states_sls_contents):",
          "224:         yield tree",
          "227: @pytest.fixture(scope=\"session\")",
          "228: def pillar_tree():",
          "230:     Add pillar files",
          "233:         pillar_root = pathlib.Path(\"C:/salt/srv/pillar\")",
          "235:         pillar_root = pathlib.Path(\"/opt/srv/pillar\")",
          "237:         pillar_root = pathlib.Path(\"/srv/pillar\")",
          "238:     pillar_root.mkdir(mode=0o777, parents=True, exist_ok=True)",
          "239:     tree = SaltPillarTree(",
          "240:         envs={",
          "241:             \"base\": [",
          "242:                 str(pillar_root),",
          "243:             ]",
          "244:         },",
          "245:     )",
          "246:     top_file_contents = \"\"\"",
          "247:     base:",
          "248:       '*':",
          "249:         - test",
          "250:     \"\"\"",
          "251:     test_file_contents = \"\"\"",
          "252:     info: test",
          "253:     \"\"\"",
          "254:     with tree.base.temp_file(\"top.sls\", top_file_contents), tree.base.temp_file(",
          "255:         \"test.sls\", test_file_contents",
          "256:     ):",
          "257:         yield tree",
          "260: @pytest.fixture(scope=\"module\")",
          "261: def sls(state_tree):",
          "262:     \"\"\"",
          "263:     Add an sls file",
          "264:     \"\"\"",
          "265:     test_sls_contents = \"\"\"",
          "266:     test_foo:",
          "267:       test.succeed_with_changes:",
          "268:           - name: foo",
          "269:     \"\"\"",
          "270:     states_sls_contents = \"\"\"",
          "271:     update:",
          "272:       pkg.installed:",
          "273:         - name: bash",
          "274:     salt_dude:",
          "275:       user.present:",
          "276:         - name: dude",
          "277:         - fullname: Salt Dude",
          "278:     \"\"\"",
          "279:     win_states_sls_contents = \"\"\"",
          "280:     create_empty_file:",
          "281:       file.managed:",
          "282:         - name: C://salt/test/txt",
          "283:     salt_dude:",
          "284:       user.present:",
          "285:         - name: dude",
          "286:         - fullname: Salt Dude",
          "287:     \"\"\"",
          "288:     with state_tree.base.temp_file(",
          "289:         \"tests.sls\", test_sls_contents",
          "290:     ), state_tree.base.temp_file(",
          "291:         \"states.sls\", states_sls_contents",
          "292:     ), state_tree.base.temp_file(",
          "293:         \"win_states.sls\", win_states_sls_contents",
          "294:     ):",
          "295:         yield",
          "298: @pytest.fixture(scope=\"session\")",
          "299: def salt_master(",
          "300:     salt_factories, install_salt, state_tree, pillar_tree, pkg_tests_account",
          "301: ):",
          "302:     \"\"\"",
          "303:     Start up a master",
          "304:     \"\"\"",
          "",
          "[Added Lines]",
          "183: def salt_master(salt_factories, install_salt, pkg_tests_account):",
          "185:     Start up a master",
          "188:         state_tree = \"C:/salt/srv/salt\"",
          "189:         pillar_tree = \"C:/salt/srv/pillar\"",
          "191:         state_tree = \"/opt/srv/salt\"",
          "192:         pillar_tree = \"/opt/srv/pillar\"",
          "194:         state_tree = \"/srv/salt\"",
          "195:         pillar_tree = \"/srv/pillar\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:         config_defaults[\"enable_fqdns_grains\"] = False",
          "319:     config_overrides = {",
          "320:         \"timeout\": 30,",
          "324:         \"netapi_enable_clients\": [\"local\"],",
          "325:         \"external_auth\": {",
          "326:             \"auto\": {",
          "",
          "[Removed Lines]",
          "321:         \"file_roots\": state_tree.as_dict(),",
          "322:         \"pillar_roots\": pillar_tree.as_dict(),",
          "323:         \"rest_cherrypy\": {\"port\": 8000, \"disable_ssl\": True},",
          "",
          "[Added Lines]",
          "213:         \"file_roots\": {",
          "214:             \"base\": [",
          "215:                 state_tree,",
          "216:             ]",
          "217:         },",
          "218:         \"pillar_roots\": {",
          "219:             \"base\": [",
          "220:                 pillar_tree,",
          "221:             ]",
          "222:         },",
          "223:         \"rest_cherrypy\": {",
          "224:             \"port\": 8000,",
          "225:             \"disable_ssl\": True,",
          "226:         },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "432:             ],",
          "433:             check=True,",
          "434:         )",
          "435:         # The engines_dirs is created in .nox path. We need to set correct perms",
          "436:         # for the user running the Salt Master",
          "445:     with factory.started(start_timeout=start_timeout):",
          "446:         yield factory",
          "",
          "[Removed Lines]",
          "437:         subprocess.run(",
          "438:             [\"chown\", \"-R\", \"salt:salt\", str(CODE_DIR.parent / \".nox\")], check=False",
          "439:         )",
          "440:         file_roots = pathlib.Path(\"/srv/\", \"salt\")",
          "441:         pillar_roots = pathlib.Path(\"/srv/\", \"pillar\")",
          "442:         for _dir in [file_roots, pillar_roots]:",
          "443:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=False)",
          "",
          "[Added Lines]",
          "341:         check_paths = [state_tree, pillar_tree, CODE_DIR / \".nox\"]",
          "342:         for path in check_paths:",
          "343:             if os.path.exists(path) is False:",
          "344:                 continue",
          "345:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(path)], check=False)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     # which sets root perms on /srv/salt and /srv/pillar since we are running",
          "495:     # the test suite as root, but we want to run Salt master as salt",
          "496:     if not platform.is_windows() and not platform.is_darwin():",
          "502:     factory.after_terminate(",
          "503:         pytest.helpers.remove_stale_minion_key, salt_master, factory.id",
          "",
          "[Removed Lines]",
          "497:         file_roots = pathlib.Path(\"/srv/\", \"salt\")",
          "498:         pillar_roots = pathlib.Path(\"/srv/\", \"pillar\")",
          "499:         for _dir in [file_roots, pillar_roots]:",
          "500:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=True)",
          "",
          "[Added Lines]",
          "399:         state_tree = \"/srv/salt\"",
          "400:         pillar_tree = \"/srv/pillar\"",
          "401:         check_paths = [state_tree, pillar_tree, CODE_DIR / \".nox\"]",
          "402:         for path in check_paths:",
          "403:             if os.path.exists(path) is False:",
          "404:                 continue",
          "405:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(path)], check=False)",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py": [
          "File: tests/pytests/pkg/integration/test_salt_call.py -> tests/pytests/pkg/integration/test_salt_call.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     Test salt-call --local test.ping",
          "7:     \"\"\"",
          "8:     ret = salt_call_cli.run(\"--local\", \"test.ping\")",
          "10:     assert ret.returncode == 0",
          "13: def test_salt_call(salt_call_cli):",
          "",
          "[Removed Lines]",
          "9:     assert ret.data is True",
          "",
          "[Added Lines]",
          "10:     assert ret.data is True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     Test salt-call test.ping",
          "16:     \"\"\"",
          "17:     ret = salt_call_cli.run(\"test.ping\")",
          "19:     assert ret.returncode == 0",
          "23:     \"\"\"",
          "24:     Test calling a sls file",
          "25:     \"\"\"",
          "28:     sls_ret = ret.data[next(iter(ret.data))]",
          "29:     assert sls_ret[\"changes\"][\"testing\"][\"new\"] == \"Something pretended to change\"",
          "33: def test_salt_call_local_sys_doc_none(salt_call_cli):",
          "",
          "[Removed Lines]",
          "18:     assert ret.data is True",
          "22: def test_sls(salt_call_cli):",
          "26:     ret = salt_call_cli.run(\"state.apply\", \"test\")",
          "27:     assert ret.data, ret",
          "30:     assert ret.returncode == 0",
          "",
          "[Added Lines]",
          "19:     assert ret.data is True",
          "22: @pytest.fixture",
          "23: def state_name(salt_master):",
          "24:     name = \"some-test-state\"",
          "25:     sls_contents = \"\"\"",
          "26:     test_foo:",
          "27:       test.succeed_with_changes:",
          "28:           - name: foo",
          "29:     \"\"\"",
          "30:     with salt_master.state_tree.base.temp_file(f\"{name}.sls\", sls_contents):",
          "31:         yield name",
          "34: def test_sls(salt_call_cli, state_name):",
          "38:     ret = salt_call_cli.run(\"state.apply\", state_name)",
          "39:     assert ret.returncode == 0",
          "40:     assert ret.data",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:     Test salt-call --local sys.doc none",
          "36:     \"\"\"",
          "37:     ret = salt_call_cli.run(\"--local\", \"sys.doc\", \"none\")",
          "39:     assert ret.returncode == 0",
          "42: def test_salt_call_local_sys_doc_aliases(salt_call_cli):",
          "",
          "[Removed Lines]",
          "38:     assert not ret.data",
          "",
          "[Added Lines]",
          "51:     assert not ret.data",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "44:     Test salt-call --local sys.doc aliases",
          "45:     \"\"\"",
          "46:     ret = salt_call_cli.run(\"--local\", \"sys.doc\", \"aliases.list_aliases\")",
          "48:     assert ret.returncode == 0",
          "52: def test_salt_call_cmd_run_id_runas(salt_call_cli, pkg_tests_account, caplog):",
          "53:     \"\"\"",
          "54:     Test salt-call --local cmd_run id with runas",
          "",
          "[Removed Lines]",
          "47:     assert \"aliases.list_aliases\" in ret.data",
          "51: @pytest.mark.skip_on_windows()",
          "",
          "[Added Lines]",
          "60:     assert \"aliases.list_aliases\" in ret.data",
          "63: @pytest.mark.skip_on_windows",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_pillar.py||tests/pytests/pkg/integration/test_salt_pillar.py": [
          "File: tests/pytests/pkg/integration/test_salt_pillar.py -> tests/pytests/pkg/integration/test_salt_pillar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: ]",
          "9:     \"\"\"",
          "10:     Test pillar.items",
          "11:     \"\"\"",
          "12:     ret = salt_cli.run(\"pillar.items\", minion_tgt=salt_minion.id)",
          "",
          "[Removed Lines]",
          "8: def test_salt_pillar(salt_cli, salt_minion):",
          "13:     assert \"info\" in ret.data",
          "",
          "[Added Lines]",
          "8: @pytest.fixture",
          "9: def pillar_name(salt_master):",
          "10:     name = \"info\"",
          "11:     top_file_contents = \"\"\"",
          "12:     base:",
          "13:       '*':",
          "14:         - test",
          "15:     \"\"\"",
          "16:     test_file_contents = f\"\"\"",
          "17:     {name}: test",
          "18:     \"\"\"",
          "19:     with salt_master.pillar_tree.base.temp_file(",
          "20:         \"top.sls\", top_file_contents",
          "21:     ), salt_master.pillar_tree.base.temp_file(\"test.sls\", test_file_contents):",
          "22:         yield name",
          "25: def test_salt_pillar(salt_cli, salt_minion, pillar_name):",
          "30:     assert ret.returncode == 0",
          "31:     assert pillar_name in ret.data",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_state_file.py||tests/pytests/pkg/integration/test_salt_state_file.py": [
          "File: tests/pytests/pkg/integration/test_salt_state_file.py -> tests/pytests/pkg/integration/test_salt_state_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: ]",
          "14:     if sys.platform.startswith(\"win\"):",
          "16:     else:",
          "20:     if ret.stdout and \"Minion did not return\" in ret.stdout:",
          "21:         pytest.skip(\"Skipping test, state took too long to apply\")",
          "22:     sls_ret = ret.data[next(iter(ret.data))]",
          "",
          "[Removed Lines]",
          "10: def test_salt_state_file(salt_cli, salt_minion):",
          "11:     \"\"\"",
          "12:     Test state file",
          "13:     \"\"\"",
          "15:         ret = salt_cli.run(\"state.apply\", \"win_states\", minion_tgt=salt_minion.id)",
          "17:         ret = salt_cli.run(\"state.apply\", \"states\", minion_tgt=salt_minion.id)",
          "19:     assert ret.data, ret",
          "",
          "[Added Lines]",
          "10: @pytest.fixture",
          "11: def state_name(salt_master):",
          "12:     name = \"some-state\"",
          "14:         sls_contents = \"\"\"",
          "15:     create_empty_file:",
          "16:       file.managed:",
          "17:         - name: C://salt/test/txt",
          "18:     salt_dude:",
          "19:       user.present:",
          "20:         - name: dude",
          "21:         - fullname: Salt Dude",
          "22:     \"\"\"",
          "24:         sls_contents = \"\"\"",
          "25:     update:",
          "26:       pkg.installed:",
          "27:         - name: bash",
          "28:     salt_dude:",
          "29:       user.present:",
          "30:         - name: dude",
          "31:         - fullname: Salt Dude",
          "32:     \"\"\"",
          "33:     with salt_master.state_tree.base.temp_file(f\"{name}.sls\", sls_contents):",
          "34:         yield name",
          "37: def test_salt_state_file(salt_cli, salt_minion, state_name):",
          "38:     \"\"\"",
          "39:     Test state file",
          "40:     \"\"\"",
          "41:     ret = salt_cli.run(\"state.apply\", state_name, minion_tgt=salt_minion.id)",
          "42:     assert ret.returncode == 0",
          "43:     assert ret.data",
          "",
          "---------------"
        ]
      }
    }
  ]
}