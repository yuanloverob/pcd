{
  "cve_id": "CVE-2023-23623",
  "cve_desc": "Electron is a framework which lets you write cross-platform desktop applications using JavaScript, HTML and CSS. A Content-Security-Policy that disables eval, specifically setting a `script-src` directive and _not_ providing `unsafe-eval` in that directive, is not respected in renderers that have sandbox disabled.  i.e. `sandbox: false` in the `webPreferences` object. This allows usage of methods like `eval()` and `new Function` unexpectedly which can result in an expanded attack surface. This issue only ever affected the 22 and 23 major versions of Electron and has been fixed in the latest versions of those release lines. Specifically, these versions contain the fixes: 22.0.1 and 23.0.0-alpha.2 We recommend all apps upgrade to the latest stable version of Electron. If upgrading isn't possible, this issue can be addressed without upgrading by enabling `sandbox: true` on all renderers.",
  "repo": "electron/electron",
  "patch_hash": "9e7fbc7021d8d716c43782249a552e55289c35db",
  "patch_info": {
    "commit_hash": "9e7fbc7021d8d716c43782249a552e55289c35db",
    "repo": "electron/electron",
    "commit_url": "https://github.com/electron/electron/commit/9e7fbc7021d8d716c43782249a552e55289c35db",
    "files": [
      "patches/chromium/.patches",
      "patches/chromium/expose_v8initializer_codegenerationcheckcallbackinmainthread.patch",
      "patches/node/.patches",
      "patches/node/allow_embedder_to_control_codegenerationfromstringscallback.patch",
      "shell/common/node_bindings.cc",
      "spec/chromium-spec.ts"
    ],
    "message": "fix: blend node and blink code generation policy when both are loaded (#36567)",
    "before_after_code_files": [
      "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
      "spec/chromium-spec.ts||spec/chromium-spec.ts"
    ]
  },
  "patch_diff": {
    "shell/common/node_bindings.cc||shell/common/node_bindings.cc": [
      "File: shell/common/node_bindings.cc -> shell/common/node_bindings.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: }",
      "160: bool AllowWasmCodeGenerationCallback(v8::Local<v8::Context> context,",
      "166:     if (gin_helper::Locker::IsBrowserProcess())",
      "167:       return false;",
      "168:     return blink::V8Initializer::WasmCodeGenerationCheckCallbackInMainThread(",
      "170:   }",
      "174: }",
      "176: void ErrorMessageListener(v8::Local<v8::Message> message,",
      "",
      "[Removed Lines]",
      "161:                                      v8::Local<v8::String>) {",
      "164:   v8::Isolate* isolate = context->GetIsolate();",
      "165:   if (node::Environment::GetCurrent(isolate) == nullptr) {",
      "169:         context, v8::String::Empty(isolate));",
      "172:   return node::AllowWasmCodeGenerationCallback(context,",
      "173:                                                v8::String::Empty(isolate));",
      "",
      "[Added Lines]",
      "161:                                      v8::Local<v8::String> source) {",
      "164:   if (node::Environment::GetCurrent(context) == nullptr) {",
      "168:         context, source);",
      "169:   }",
      "171:   return node::AllowWasmCodeGenerationCallback(context, source);",
      "172: }",
      "174: v8::ModifyCodeGenerationFromStringsResult ModifyCodeGenerationFromStrings(",
      "175:     v8::Local<v8::Context> context,",
      "176:     v8::Local<v8::Value> source,",
      "177:     bool is_code_like) {",
      "180:   if (node::Environment::GetCurrent(context) == nullptr) {",
      "181:     if (gin_helper::Locker::IsBrowserProcess()) {",
      "182:       NOTREACHED();",
      "183:       return {false, {}};",
      "184:     }",
      "185:     return blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
      "186:         context, source, is_code_like);",
      "189:   return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "545:   is.allow_wasm_code_generation_callback = AllowWasmCodeGenerationCallback;",
      "547:   if (browser_env_ == BrowserEnvironment::kBrowser ||",
      "548:       browser_env_ == BrowserEnvironment::kUtility) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562:   is.modify_code_generation_from_strings_callback =",
      "563:       ModifyCodeGenerationFromStrings;",
      "",
      "---------------"
    ],
    "spec/chromium-spec.ts||spec/chromium-spec.ts": [
      "File: spec/chromium-spec.ts -> spec/chromium-spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:     });",
      "356:   });",
      "358:   it('does not crash when multiple WebContent are created with web security disabled', () => {",
      "359:     const options = { show: false, webPreferences: { webSecurity: false } };",
      "360:     const w1 = new BrowserWindow(options);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:   describe('csp in sandbox: false', () => {",
      "359:     it('is correctly applied', async () => {",
      "360:       const w = new BrowserWindow({",
      "361:         show: false,",
      "362:         webPreferences: { sandbox: false }",
      "363:       });",
      "364:       w.loadURL(`data:text/html,<head>",
      "365:           <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline'\">",
      "366:         </head>",
      "367:         <script>",
      "368:           try {",
      "372:             console.log(eval('failure'))",
      "373:           } catch (e) {",
      "374:             console.log('success')",
      "375:           }",
      "376:         </script>`);",
      "377:       const [,, message] = await emittedOnce(w.webContents, 'console-message');",
      "378:       expect(message).to.equal('success');",
      "379:     });",
      "380:   });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8761af5cbba0f2ca5ad42e52fa325b4b5e739c3c",
      "candidate_info": {
        "commit_hash": "8761af5cbba0f2ca5ad42e52fa325b4b5e739c3c",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/8761af5cbba0f2ca5ad42e52fa325b4b5e739c3c",
        "files": [
          "shell/app/electron_main_delegate.cc",
          "shell/common/api/electron_bindings.cc",
          "shell/common/gin_helper/callback.cc",
          "shell/common/gin_helper/locker.cc",
          "shell/common/gin_helper/locker.h",
          "shell/common/gin_helper/microtasks_scope.cc",
          "shell/common/gin_helper/promise.cc",
          "shell/common/gin_helper/promise.h",
          "shell/common/gin_helper/trackable_object.cc",
          "shell/common/node_bindings.cc",
          "shell/common/process_util.cc",
          "shell/common/process_util.h",
          "spec/api-utility-process-spec.ts",
          "spec/fixtures/api/utility-process/eval.js"
        ],
        "message": "fix: crash in utilityProcess when generating code from strings (#38041)\n\nCo-authored-by: trop[bot] <37223003+trop[bot]@users.noreply.github.com>\nCo-authored-by: deepak1556 <hop2deep@gmail.com>",
        "before_after_code_files": [
          "shell/app/electron_main_delegate.cc||shell/app/electron_main_delegate.cc",
          "shell/common/api/electron_bindings.cc||shell/common/api/electron_bindings.cc",
          "shell/common/gin_helper/callback.cc||shell/common/gin_helper/callback.cc",
          "shell/common/gin_helper/locker.cc||shell/common/gin_helper/locker.cc",
          "shell/common/gin_helper/locker.h||shell/common/gin_helper/locker.h",
          "shell/common/gin_helper/microtasks_scope.cc||shell/common/gin_helper/microtasks_scope.cc",
          "shell/common/gin_helper/promise.cc||shell/common/gin_helper/promise.cc",
          "shell/common/gin_helper/promise.h||shell/common/gin_helper/promise.h",
          "shell/common/gin_helper/trackable_object.cc||shell/common/gin_helper/trackable_object.cc",
          "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
          "shell/common/process_util.cc||shell/common/process_util.cc",
          "shell/common/process_util.h||shell/common/process_util.h",
          "spec/api-utility-process-spec.ts||spec/api-utility-process-spec.ts",
          "spec/fixtures/api/utility-process/eval.js||spec/fixtures/api/utility-process/eval.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc"
          ],
          "candidate": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc"
          ]
        }
      },
      "candidate_diff": {
        "shell/app/electron_main_delegate.cc||shell/app/electron_main_delegate.cc": [
          "File: shell/app/electron_main_delegate.cc -> shell/app/electron_main_delegate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"shell/common/logging.h\"",
          "41: #include \"shell/common/options_switches.h\"",
          "42: #include \"shell/common/platform_util.h\"",
          "43: #include \"shell/common/thread_restrictions.h\"",
          "44: #include \"shell/renderer/electron_renderer_client.h\"",
          "45: #include \"shell/renderer/electron_sandboxed_renderer_client.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: constexpr base::StringPiece kElectronEnableStackDumping(",
          "84:     \"ELECTRON_ENABLE_STACK_DUMPING\");",
          "93: bool SubprocessNeedsResourceBundle(const std::string& process_type) {",
          "",
          "[Removed Lines]",
          "86: bool IsBrowserProcess(base::CommandLine* cmd) {",
          "87:   std::string process_type = cmd->GetSwitchValueASCII(::switches::kProcessType);",
          "88:   return process_type.empty();",
          "89: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     std::wcout << std::endl;",
          "255: #endif  // !BUILDFLAG(IS_WIN)",
          "257:   auto env = base::Environment::Create();",
          "263:   if (env->HasVar(kElectronEnableStackDumping))",
          "",
          "[Removed Lines]",
          "253:   if (IsBrowserProcess(command_line))",
          "259:   gin_helper::Locker::SetIsBrowserProcess(IsBrowserProcess(command_line));",
          "",
          "[Added Lines]",
          "249:   if (IsBrowserProcess())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291:   base::win::DisableHandleVerifier();",
          "294:     base::win::PinUser32();",
          "295: #endif",
          "",
          "[Removed Lines]",
          "293:   if (IsBrowserProcess(command_line))",
          "",
          "[Added Lines]",
          "287:   if (IsBrowserProcess())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "386:   crash_keys::SetPlatformCrashKey();",
          "387: #endif",
          "",
          "[Removed Lines]",
          "389:   if (IsBrowserProcess(command_line)) {",
          "",
          "[Added Lines]",
          "383:   if (IsBrowserProcess()) {",
          "",
          "---------------"
        ],
        "shell/common/api/electron_bindings.cc||shell/common/api/electron_bindings.cc": [
          "File: shell/common/api/electron_bindings.cc -> shell/common/api/electron_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"shell/common/application_info.h\"",
          "23: #include \"shell/common/gin_converters/file_path_converter.h\"",
          "24: #include \"shell/common/gin_helper/dictionary.h\"",
          "26: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "27: #include \"shell/common/gin_helper/promise.h\"",
          "28: #include \"shell/common/heap_snapshot.h\"",
          "29: #include \"shell/common/node_includes.h\"",
          "30: #include \"shell/common/thread_restrictions.h\"",
          "31: #include \"third_party/blink/renderer/platform/heap/process_heap.h\"  // nogncheck",
          "",
          "[Removed Lines]",
          "25: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "29: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   process->SetMethod(\"getCreationTime\", &GetCreationTime);",
          "51:   process->SetMethod(\"getHeapStatistics\", &GetHeapStatistics);",
          "52:   process->SetMethod(\"getBlinkMemoryInfo\", &GetBlinkMemoryInfo);",
          "54:     process->SetMethod(\"getProcessMemoryInfo\", &GetProcessMemoryInfo);",
          "55:   }",
          "56:   process->SetMethod(\"getSystemMemoryInfo\", &GetSystemMemoryInfo);",
          "",
          "[Removed Lines]",
          "53:   if (gin_helper::Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "53:   if (electron::IsBrowserProcess()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: v8::Local<v8::Promise> ElectronBindings::GetProcessMemoryInfo(",
          "211:     v8::Isolate* isolate) {",
          "213:   gin_helper::Promise<gin_helper::Dictionary> promise(isolate);",
          "214:   v8::Local<v8::Promise> handle = promise.GetHandle();",
          "",
          "[Removed Lines]",
          "212:   CHECK(gin_helper::Locker::IsBrowserProcess());",
          "",
          "[Added Lines]",
          "212:   CHECK(electron::IsBrowserProcess());",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/callback.cc||shell/common/gin_helper/callback.cc": [
          "File: shell/common/gin_helper/callback.cc -> shell/common/gin_helper/callback.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"base/cxx17_backports.h\"",
          "8: #include \"content/public/browser/browser_thread.h\"",
          "9: #include \"gin/dictionary.h\"",
          "11: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: struct DeleteOnUIThread {",
          "71:   template <typename T>",
          "72:   static void Destruct(const T* x) {",
          "74:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "75:       content::BrowserThread::DeleteSoon(content::BrowserThread::UI, FROM_HERE,",
          "76:                                          x);",
          "",
          "[Removed Lines]",
          "73:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "74:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/locker.cc||shell/common/gin_helper/locker.cc": [
          "File: shell/common/gin_helper/locker.cc -> shell/common/gin_helper/locker.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/locker.h\"",
          "7: namespace gin_helper {",
          "9: Locker::Locker(v8::Isolate* isolate) {",
          "11:     locker_ = std::make_unique<v8::Locker>(isolate);",
          "12: }",
          "14: Locker::~Locker() = default;",
          "22: }  // namespace gin_helper",
          "",
          "[Removed Lines]",
          "10:   if (IsBrowserProcess())",
          "16: void Locker::SetIsBrowserProcess(bool is_browser_process) {",
          "17:   g_is_browser_process = is_browser_process;",
          "18: }",
          "20: bool Locker::g_is_browser_process = false;",
          "",
          "[Added Lines]",
          "7: #include \"shell/common/process_util.h\"",
          "12:   if (electron::IsBrowserProcess())",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/locker.h||shell/common/gin_helper/locker.h": [
          "File: shell/common/gin_helper/locker.h -> shell/common/gin_helper/locker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   Locker(const Locker&) = delete;",
          "22:   Locker& operator=(const Locker&) = delete;",
          "30:  private:",
          "31:   void* operator new(size_t size);",
          "32:   void operator delete(void*, size_t);",
          "",
          "[Removed Lines]",
          "26:   static inline bool IsBrowserProcess() { return g_is_browser_process; }",
          "28:   static void SetIsBrowserProcess(bool is_browser_process);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/microtasks_scope.cc||shell/common/gin_helper/microtasks_scope.cc": [
          "File: shell/common/gin_helper/microtasks_scope.cc -> shell/common/gin_helper/microtasks_scope.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "9: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "7: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "7: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:                                  v8::MicrotaskQueue* microtask_queue,",
          "13:                                  bool ignore_browser_checkpoint,",
          "14:                                  v8::MicrotasksScope::Type scope_type) {",
          "16:     if (!ignore_browser_checkpoint)",
          "17:       v8::MicrotasksScope::PerformCheckpoint(isolate);",
          "18:   } else {",
          "",
          "[Removed Lines]",
          "15:   if (Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "15:   if (electron::IsBrowserProcess()) {",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/promise.cc||shell/common/gin_helper/promise.cc": [
          "File: shell/common/gin_helper/promise.cc -> shell/common/gin_helper/promise.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: void Promise<void>::ResolvePromise(Promise<void> promise) {",
          "70:       !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "71:     content::GetUIThreadTaskRunner({})->PostTask(",
          "72:         FROM_HERE,",
          "",
          "[Removed Lines]",
          "69:   if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "69:   if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/promise.h||shell/common/gin_helper/promise.h": [
          "File: shell/common/gin_helper/promise.h -> shell/common/gin_helper/promise.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"shell/common/gin_converters/std_converter.h\"",
          "17: #include \"shell/common/gin_helper/locker.h\"",
          "18: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "20: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   static void RejectPromise(PromiseBase&& promise, base::StringPiece errmsg) {",
          "49:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "50:       content::GetUIThreadTaskRunner({})->PostTask(",
          "51:           FROM_HERE,",
          "",
          "[Removed Lines]",
          "48:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "49:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   static void ResolvePromise(Promise<RT> promise, RT result) {",
          "92:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "93:       content::GetUIThreadTaskRunner({})->PostTask(",
          "94:           FROM_HERE, base::BindOnce([](Promise<RT> promise,",
          "",
          "[Removed Lines]",
          "91:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "92:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/trackable_object.cc||shell/common/gin_helper/trackable_object.cc": [
          "File: shell/common/gin_helper/trackable_object.cc -> shell/common/gin_helper/trackable_object.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"base/functional/bind.h\"",
          "10: #include \"base/supports_user_data.h\"",
          "11: #include \"shell/browser/electron_browser_main_parts.h\"",
          "14: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "12: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "12: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: TrackableObjectBase::TrackableObjectBase() {",
          "35:       << \"This class only works for browser process\";",
          "36: }",
          "",
          "[Removed Lines]",
          "34:   DCHECK(gin_helper::Locker::IsBrowserProcess())",
          "",
          "[Added Lines]",
          "34:   DCHECK(electron::IsBrowserProcess())",
          "",
          "---------------"
        ],
        "shell/common/node_bindings.cc||shell/common/node_bindings.cc": [
          "File: shell/common/node_bindings.cc -> shell/common/node_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "175:       return false;",
          "176:     return blink::V8Initializer::WasmCodeGenerationCheckCallbackInMainThread(",
          "177:         context, source);",
          "",
          "[Removed Lines]",
          "174:     if (gin_helper::Locker::IsBrowserProcess())",
          "",
          "[Added Lines]",
          "174:     if (!electron::IsRendererProcess())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:       NOTREACHED();",
          "193:       return {false, {}};",
          "194:     }",
          "",
          "[Removed Lines]",
          "191:     if (gin_helper::Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "191:     if (!electron::IsRendererProcess()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   }",
          "215:   return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "216: }",
          "",
          "[Removed Lines]",
          "204:   if (gin_helper::Locker::IsBrowserProcess()) {",
          "205:     return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "206:   }",
          "210:   v8::ModifyCodeGenerationFromStringsResult result =",
          "211:       blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "212:           context, source, is_code_like);",
          "213:   if (!result.codegen_allowed)",
          "214:     return result;",
          "",
          "[Added Lines]",
          "205:   if (electron::IsRendererProcess()) {",
          "206:     v8::ModifyCodeGenerationFromStringsResult result =",
          "207:         blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "208:             context, source, is_code_like);",
          "209:     if (!result.codegen_allowed)",
          "210:       return result;",
          "211:   }",
          "",
          "---------------"
        ],
        "shell/common/process_util.cc||shell/common/process_util.cc": [
          "File: shell/common/process_util.cc -> shell/common/process_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/process_util.h\"",
          "7: #include \"gin/dictionary.h\"",
          "8: #include \"shell/common/gin_converters/callback_converter.h\"",
          "9: #include \"shell/common/node_includes.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"base/command_line.h\"",
          "8: #include \"content/public/common/content_switches.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   emit_warning.Run(warning_msg, warning_type, \"\");",
          "25: }",
          "27: }  // namespace electron",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: bool IsBrowserProcess() {",
          "30:   auto* command_line = base::CommandLine::ForCurrentProcess();",
          "31:   std::string process_type =",
          "32:       command_line->GetSwitchValueASCII(switches::kProcessType);",
          "33:   return process_type.empty();",
          "34: }",
          "36: bool IsRendererProcess() {",
          "37:   auto* command_line = base::CommandLine::ForCurrentProcess();",
          "38:   std::string process_type =",
          "39:       command_line->GetSwitchValueASCII(switches::kProcessType);",
          "40:   return process_type == switches::kRendererProcess;",
          "41: }",
          "",
          "---------------"
        ],
        "shell/common/process_util.h||shell/common/process_util.h": [
          "File: shell/common/process_util.h -> shell/common/process_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:                  const std::string& warning_msg,",
          "18:                  const std::string& warning_type);",
          "20: }  // namespace electron",
          "22: #endif  // ELECTRON_SHELL_COMMON_PROCESS_UTIL_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: bool IsBrowserProcess();",
          "21: bool IsRendererProcess();",
          "",
          "---------------"
        ],
        "spec/api-utility-process-spec.ts||spec/api-utility-process-spec.ts": [
          "File: spec/api-utility-process-spec.ts -> spec/api-utility-process-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:       await emittedOnce(child, 'exit');",
          "361:       expect(log).to.equal('hello\\n');",
          "362:     });",
          "363:   });",
          "364: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     it('does not crash when running eval', async () => {",
          "365:       const child = utilityProcess.fork('./eval.js', [], {",
          "366:         cwd: fixturesPath,",
          "367:         stdio: 'ignore'",
          "368:       });",
          "369:       await emittedOnce(child, 'spawn');",
          "370:       const [data] = await emittedOnce(child, 'message');",
          "371:       expect(data).to.equal(42);",
          "373:       const exit = emittedOnce(child, 'exit');",
          "374:       expect(child.kill()).to.be.true();",
          "375:       await exit;",
          "376:     });",
          "",
          "---------------"
        ],
        "spec/fixtures/api/utility-process/eval.js||spec/fixtures/api/utility-process/eval.js": [
          "File: spec/fixtures/api/utility-process/eval.js -> spec/fixtures/api/utility-process/eval.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const vm = require('node:vm');",
          "3: const contextObject = { result: 0 };",
          "4: vm.createContext(contextObject);",
          "5: vm.runInContext('eval(\\'result = 42\\')', contextObject);",
          "6: process.parentPort.postMessage(contextObject.result);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0240f6664e5c94d68cb9ad7fb1a9e7c8bbf281d3",
      "candidate_info": {
        "commit_hash": "0240f6664e5c94d68cb9ad7fb1a9e7c8bbf281d3",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/0240f6664e5c94d68cb9ad7fb1a9e7c8bbf281d3",
        "files": [
          "shell/app/electron_main_delegate.cc",
          "shell/common/api/electron_bindings.cc",
          "shell/common/gin_helper/callback.cc",
          "shell/common/gin_helper/locker.cc",
          "shell/common/gin_helper/locker.h",
          "shell/common/gin_helper/microtasks_scope.cc",
          "shell/common/gin_helper/promise.cc",
          "shell/common/gin_helper/promise.h",
          "shell/common/gin_helper/trackable_object.cc",
          "shell/common/node_bindings.cc",
          "shell/common/process_util.cc",
          "shell/common/process_util.h",
          "spec/api-utility-process-spec.ts",
          "spec/fixtures/api/utility-process/eval.js"
        ],
        "message": "fix: crash in utilityProcess when generating code from strings (#38014)",
        "before_after_code_files": [
          "shell/app/electron_main_delegate.cc||shell/app/electron_main_delegate.cc",
          "shell/common/api/electron_bindings.cc||shell/common/api/electron_bindings.cc",
          "shell/common/gin_helper/callback.cc||shell/common/gin_helper/callback.cc",
          "shell/common/gin_helper/locker.cc||shell/common/gin_helper/locker.cc",
          "shell/common/gin_helper/locker.h||shell/common/gin_helper/locker.h",
          "shell/common/gin_helper/microtasks_scope.cc||shell/common/gin_helper/microtasks_scope.cc",
          "shell/common/gin_helper/promise.cc||shell/common/gin_helper/promise.cc",
          "shell/common/gin_helper/promise.h||shell/common/gin_helper/promise.h",
          "shell/common/gin_helper/trackable_object.cc||shell/common/gin_helper/trackable_object.cc",
          "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
          "shell/common/process_util.cc||shell/common/process_util.cc",
          "shell/common/process_util.h||shell/common/process_util.h",
          "spec/api-utility-process-spec.ts||spec/api-utility-process-spec.ts",
          "spec/fixtures/api/utility-process/eval.js||spec/fixtures/api/utility-process/eval.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc"
          ],
          "candidate": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc"
          ]
        }
      },
      "candidate_diff": {
        "shell/app/electron_main_delegate.cc||shell/app/electron_main_delegate.cc": [
          "File: shell/app/electron_main_delegate.cc -> shell/app/electron_main_delegate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"shell/common/logging.h\"",
          "41: #include \"shell/common/options_switches.h\"",
          "42: #include \"shell/common/platform_util.h\"",
          "43: #include \"shell/common/thread_restrictions.h\"",
          "44: #include \"shell/renderer/electron_renderer_client.h\"",
          "45: #include \"shell/renderer/electron_sandboxed_renderer_client.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: constexpr base::StringPiece kElectronEnableStackDumping(",
          "84:     \"ELECTRON_ENABLE_STACK_DUMPING\");",
          "93: bool SubprocessNeedsResourceBundle(const std::string& process_type) {",
          "",
          "[Removed Lines]",
          "86: bool IsBrowserProcess(base::CommandLine* cmd) {",
          "87:   std::string process_type = cmd->GetSwitchValueASCII(::switches::kProcessType);",
          "88:   return process_type.empty();",
          "89: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     std::wcout << std::endl;",
          "255: #endif  // !BUILDFLAG(IS_WIN)",
          "257:   auto env = base::Environment::Create();",
          "263:   if (env->HasVar(kElectronEnableStackDumping))",
          "",
          "[Removed Lines]",
          "253:   if (IsBrowserProcess(command_line))",
          "259:   gin_helper::Locker::SetIsBrowserProcess(IsBrowserProcess(command_line));",
          "",
          "[Added Lines]",
          "249:   if (IsBrowserProcess())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291:   base::win::DisableHandleVerifier();",
          "294:     base::win::PinUser32();",
          "295: #endif",
          "",
          "[Removed Lines]",
          "293:   if (IsBrowserProcess(command_line))",
          "",
          "[Added Lines]",
          "287:   if (IsBrowserProcess())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "386:   crash_keys::SetPlatformCrashKey();",
          "387: #endif",
          "",
          "[Removed Lines]",
          "389:   if (IsBrowserProcess(command_line)) {",
          "",
          "[Added Lines]",
          "383:   if (IsBrowserProcess()) {",
          "",
          "---------------"
        ],
        "shell/common/api/electron_bindings.cc||shell/common/api/electron_bindings.cc": [
          "File: shell/common/api/electron_bindings.cc -> shell/common/api/electron_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"shell/common/application_info.h\"",
          "23: #include \"shell/common/gin_converters/file_path_converter.h\"",
          "24: #include \"shell/common/gin_helper/dictionary.h\"",
          "26: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "27: #include \"shell/common/gin_helper/promise.h\"",
          "28: #include \"shell/common/heap_snapshot.h\"",
          "29: #include \"shell/common/node_includes.h\"",
          "30: #include \"shell/common/thread_restrictions.h\"",
          "31: #include \"third_party/blink/renderer/platform/heap/process_heap.h\"  // nogncheck",
          "",
          "[Removed Lines]",
          "25: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "29: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   process->SetMethod(\"getCreationTime\", &GetCreationTime);",
          "51:   process->SetMethod(\"getHeapStatistics\", &GetHeapStatistics);",
          "52:   process->SetMethod(\"getBlinkMemoryInfo\", &GetBlinkMemoryInfo);",
          "54:     process->SetMethod(\"getProcessMemoryInfo\", &GetProcessMemoryInfo);",
          "55:   }",
          "56:   process->SetMethod(\"getSystemMemoryInfo\", &GetSystemMemoryInfo);",
          "",
          "[Removed Lines]",
          "53:   if (gin_helper::Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "53:   if (electron::IsBrowserProcess()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: v8::Local<v8::Promise> ElectronBindings::GetProcessMemoryInfo(",
          "211:     v8::Isolate* isolate) {",
          "213:   gin_helper::Promise<gin_helper::Dictionary> promise(isolate);",
          "214:   v8::Local<v8::Promise> handle = promise.GetHandle();",
          "",
          "[Removed Lines]",
          "212:   CHECK(gin_helper::Locker::IsBrowserProcess());",
          "",
          "[Added Lines]",
          "212:   CHECK(electron::IsBrowserProcess());",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/callback.cc||shell/common/gin_helper/callback.cc": [
          "File: shell/common/gin_helper/callback.cc -> shell/common/gin_helper/callback.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"base/cxx17_backports.h\"",
          "8: #include \"content/public/browser/browser_thread.h\"",
          "9: #include \"gin/dictionary.h\"",
          "11: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: struct DeleteOnUIThread {",
          "71:   template <typename T>",
          "72:   static void Destruct(const T* x) {",
          "74:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "75:       content::BrowserThread::DeleteSoon(content::BrowserThread::UI, FROM_HERE,",
          "76:                                          x);",
          "",
          "[Removed Lines]",
          "73:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "74:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/locker.cc||shell/common/gin_helper/locker.cc": [
          "File: shell/common/gin_helper/locker.cc -> shell/common/gin_helper/locker.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/locker.h\"",
          "7: namespace gin_helper {",
          "9: Locker::Locker(v8::Isolate* isolate) {",
          "11:     locker_ = std::make_unique<v8::Locker>(isolate);",
          "12: }",
          "14: Locker::~Locker() = default;",
          "22: }  // namespace gin_helper",
          "",
          "[Removed Lines]",
          "10:   if (IsBrowserProcess())",
          "16: void Locker::SetIsBrowserProcess(bool is_browser_process) {",
          "17:   g_is_browser_process = is_browser_process;",
          "18: }",
          "20: bool Locker::g_is_browser_process = false;",
          "",
          "[Added Lines]",
          "7: #include \"shell/common/process_util.h\"",
          "12:   if (electron::IsBrowserProcess())",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/locker.h||shell/common/gin_helper/locker.h": [
          "File: shell/common/gin_helper/locker.h -> shell/common/gin_helper/locker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   Locker(const Locker&) = delete;",
          "22:   Locker& operator=(const Locker&) = delete;",
          "30:  private:",
          "31:   void* operator new(size_t size);",
          "32:   void operator delete(void*, size_t);",
          "",
          "[Removed Lines]",
          "26:   static inline bool IsBrowserProcess() { return g_is_browser_process; }",
          "28:   static void SetIsBrowserProcess(bool is_browser_process);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/microtasks_scope.cc||shell/common/gin_helper/microtasks_scope.cc": [
          "File: shell/common/gin_helper/microtasks_scope.cc -> shell/common/gin_helper/microtasks_scope.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "9: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "7: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "7: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:                                  v8::MicrotaskQueue* microtask_queue,",
          "13:                                  bool ignore_browser_checkpoint,",
          "14:                                  v8::MicrotasksScope::Type scope_type) {",
          "16:     if (!ignore_browser_checkpoint)",
          "17:       v8::MicrotasksScope::PerformCheckpoint(isolate);",
          "18:   } else {",
          "",
          "[Removed Lines]",
          "15:   if (Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "15:   if (electron::IsBrowserProcess()) {",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/promise.cc||shell/common/gin_helper/promise.cc": [
          "File: shell/common/gin_helper/promise.cc -> shell/common/gin_helper/promise.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: void Promise<void>::ResolvePromise(Promise<void> promise) {",
          "72:       !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "73:     content::GetUIThreadTaskRunner({})->PostTask(",
          "74:         FROM_HERE,",
          "",
          "[Removed Lines]",
          "71:   if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "71:   if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/promise.h||shell/common/gin_helper/promise.h": [
          "File: shell/common/gin_helper/promise.h -> shell/common/gin_helper/promise.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"shell/common/gin_converters/std_converter.h\"",
          "17: #include \"shell/common/gin_helper/locker.h\"",
          "18: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "20: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   static void RejectPromise(PromiseBase&& promise, base::StringPiece errmsg) {",
          "50:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "51:       content::GetUIThreadTaskRunner({})->PostTask(",
          "52:           FROM_HERE,",
          "",
          "[Removed Lines]",
          "49:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "50:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   static void ResolvePromise(Promise<RT> promise, RT result) {",
          "93:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "94:       content::GetUIThreadTaskRunner({})->PostTask(",
          "95:           FROM_HERE, base::BindOnce([](Promise<RT> promise,",
          "",
          "[Removed Lines]",
          "92:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "93:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/trackable_object.cc||shell/common/gin_helper/trackable_object.cc": [
          "File: shell/common/gin_helper/trackable_object.cc -> shell/common/gin_helper/trackable_object.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"base/functional/bind.h\"",
          "10: #include \"base/supports_user_data.h\"",
          "11: #include \"shell/browser/electron_browser_main_parts.h\"",
          "14: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "12: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "12: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: TrackableObjectBase::TrackableObjectBase() {",
          "35:       << \"This class only works for browser process\";",
          "36: }",
          "",
          "[Removed Lines]",
          "34:   DCHECK(gin_helper::Locker::IsBrowserProcess())",
          "",
          "[Added Lines]",
          "34:   DCHECK(electron::IsBrowserProcess())",
          "",
          "---------------"
        ],
        "shell/common/node_bindings.cc||shell/common/node_bindings.cc": [
          "File: shell/common/node_bindings.cc -> shell/common/node_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "175:       return false;",
          "176:     return blink::V8Initializer::WasmCodeGenerationCheckCallbackInMainThread(",
          "177:         context, source);",
          "",
          "[Removed Lines]",
          "174:     if (gin_helper::Locker::IsBrowserProcess())",
          "",
          "[Added Lines]",
          "174:     if (!electron::IsRendererProcess())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:       NOTREACHED();",
          "193:       return {false, {}};",
          "194:     }",
          "",
          "[Removed Lines]",
          "191:     if (gin_helper::Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "191:     if (!electron::IsRendererProcess()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   }",
          "215:   return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "216: }",
          "",
          "[Removed Lines]",
          "204:   if (gin_helper::Locker::IsBrowserProcess()) {",
          "205:     return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "206:   }",
          "210:   v8::ModifyCodeGenerationFromStringsResult result =",
          "211:       blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "212:           context, source, is_code_like);",
          "213:   if (!result.codegen_allowed)",
          "214:     return result;",
          "",
          "[Added Lines]",
          "205:   if (electron::IsRendererProcess()) {",
          "206:     v8::ModifyCodeGenerationFromStringsResult result =",
          "207:         blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "208:             context, source, is_code_like);",
          "209:     if (!result.codegen_allowed)",
          "210:       return result;",
          "211:   }",
          "",
          "---------------"
        ],
        "shell/common/process_util.cc||shell/common/process_util.cc": [
          "File: shell/common/process_util.cc -> shell/common/process_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/process_util.h\"",
          "7: #include \"gin/dictionary.h\"",
          "8: #include \"shell/common/gin_converters/callback_converter.h\"",
          "9: #include \"shell/common/node_includes.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"base/command_line.h\"",
          "8: #include \"content/public/common/content_switches.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   emit_warning.Run(warning_msg, warning_type, \"\");",
          "25: }",
          "27: }  // namespace electron",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: bool IsBrowserProcess() {",
          "30:   auto* command_line = base::CommandLine::ForCurrentProcess();",
          "31:   std::string process_type =",
          "32:       command_line->GetSwitchValueASCII(switches::kProcessType);",
          "33:   return process_type.empty();",
          "34: }",
          "36: bool IsRendererProcess() {",
          "37:   auto* command_line = base::CommandLine::ForCurrentProcess();",
          "38:   std::string process_type =",
          "39:       command_line->GetSwitchValueASCII(switches::kProcessType);",
          "40:   return process_type == switches::kRendererProcess;",
          "41: }",
          "",
          "---------------"
        ],
        "shell/common/process_util.h||shell/common/process_util.h": [
          "File: shell/common/process_util.h -> shell/common/process_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:                  const std::string& warning_msg,",
          "18:                  const std::string& warning_type);",
          "20: }  // namespace electron",
          "22: #endif  // ELECTRON_SHELL_COMMON_PROCESS_UTIL_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: bool IsBrowserProcess();",
          "21: bool IsRendererProcess();",
          "",
          "---------------"
        ],
        "spec/api-utility-process-spec.ts||spec/api-utility-process-spec.ts": [
          "File: spec/api-utility-process-spec.ts -> spec/api-utility-process-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:       await once(child, 'exit');",
          "361:       expect(log).to.equal('hello\\n');",
          "362:     });",
          "363:   });",
          "364: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     it('does not crash when running eval', async () => {",
          "365:       const child = utilityProcess.fork('./eval.js', [], {",
          "366:         cwd: fixturesPath,",
          "367:         stdio: 'ignore'",
          "368:       });",
          "369:       await once(child, 'spawn');",
          "370:       const [data] = await once(child, 'message');",
          "371:       expect(data).to.equal(42);",
          "373:       const exit = once(child, 'exit');",
          "374:       expect(child.kill()).to.be.true();",
          "375:       await exit;",
          "376:     });",
          "",
          "---------------"
        ],
        "spec/fixtures/api/utility-process/eval.js||spec/fixtures/api/utility-process/eval.js": [
          "File: spec/fixtures/api/utility-process/eval.js -> spec/fixtures/api/utility-process/eval.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const vm = require('node:vm');",
          "3: const contextObject = { result: 0 };",
          "4: vm.createContext(contextObject);",
          "5: vm.runInContext('eval(\\'result = 42\\')', contextObject);",
          "6: process.parentPort.postMessage(contextObject.result);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "504588c861bd0cfdffcde8038279f5f0fc9365dc",
      "candidate_info": {
        "commit_hash": "504588c861bd0cfdffcde8038279f5f0fc9365dc",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/504588c861bd0cfdffcde8038279f5f0fc9365dc",
        "files": [
          "shell/app/electron_main_delegate.cc",
          "shell/common/api/electron_bindings.cc",
          "shell/common/gin_helper/callback.cc",
          "shell/common/gin_helper/locker.cc",
          "shell/common/gin_helper/locker.h",
          "shell/common/gin_helper/microtasks_scope.cc",
          "shell/common/gin_helper/promise.cc",
          "shell/common/gin_helper/promise.h",
          "shell/common/gin_helper/trackable_object.cc",
          "shell/common/node_bindings.cc",
          "shell/common/process_util.cc",
          "shell/common/process_util.h",
          "spec/api-utility-process-spec.ts",
          "spec/fixtures/api/utility-process/eval.js"
        ],
        "message": "fix: crash in utilityProcess when generating code from strings (#38039)\n\nCo-authored-by: trop[bot] <37223003+trop[bot]@users.noreply.github.com>\nCo-authored-by: deepak1556 <hop2deep@gmail.com>",
        "before_after_code_files": [
          "shell/app/electron_main_delegate.cc||shell/app/electron_main_delegate.cc",
          "shell/common/api/electron_bindings.cc||shell/common/api/electron_bindings.cc",
          "shell/common/gin_helper/callback.cc||shell/common/gin_helper/callback.cc",
          "shell/common/gin_helper/locker.cc||shell/common/gin_helper/locker.cc",
          "shell/common/gin_helper/locker.h||shell/common/gin_helper/locker.h",
          "shell/common/gin_helper/microtasks_scope.cc||shell/common/gin_helper/microtasks_scope.cc",
          "shell/common/gin_helper/promise.cc||shell/common/gin_helper/promise.cc",
          "shell/common/gin_helper/promise.h||shell/common/gin_helper/promise.h",
          "shell/common/gin_helper/trackable_object.cc||shell/common/gin_helper/trackable_object.cc",
          "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
          "shell/common/process_util.cc||shell/common/process_util.cc",
          "shell/common/process_util.h||shell/common/process_util.h",
          "spec/api-utility-process-spec.ts||spec/api-utility-process-spec.ts",
          "spec/fixtures/api/utility-process/eval.js||spec/fixtures/api/utility-process/eval.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc"
          ],
          "candidate": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc"
          ]
        }
      },
      "candidate_diff": {
        "shell/app/electron_main_delegate.cc||shell/app/electron_main_delegate.cc": [
          "File: shell/app/electron_main_delegate.cc -> shell/app/electron_main_delegate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"shell/common/logging.h\"",
          "41: #include \"shell/common/options_switches.h\"",
          "42: #include \"shell/common/platform_util.h\"",
          "43: #include \"shell/common/thread_restrictions.h\"",
          "44: #include \"shell/renderer/electron_renderer_client.h\"",
          "45: #include \"shell/renderer/electron_sandboxed_renderer_client.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: constexpr base::StringPiece kElectronEnableStackDumping(",
          "84:     \"ELECTRON_ENABLE_STACK_DUMPING\");",
          "93: bool SubprocessNeedsResourceBundle(const std::string& process_type) {",
          "",
          "[Removed Lines]",
          "86: bool IsBrowserProcess(base::CommandLine* cmd) {",
          "87:   std::string process_type = cmd->GetSwitchValueASCII(::switches::kProcessType);",
          "88:   return process_type.empty();",
          "89: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     std::wcout << std::endl;",
          "255: #endif  // !BUILDFLAG(IS_WIN)",
          "257:   auto env = base::Environment::Create();",
          "263:   if (env->HasVar(kElectronEnableStackDumping))",
          "",
          "[Removed Lines]",
          "253:   if (IsBrowserProcess(command_line))",
          "259:   gin_helper::Locker::SetIsBrowserProcess(IsBrowserProcess(command_line));",
          "",
          "[Added Lines]",
          "249:   if (IsBrowserProcess())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291:   base::win::DisableHandleVerifier();",
          "294:     base::win::PinUser32();",
          "295: #endif",
          "",
          "[Removed Lines]",
          "293:   if (IsBrowserProcess(command_line))",
          "",
          "[Added Lines]",
          "287:   if (IsBrowserProcess())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "386:   crash_keys::SetPlatformCrashKey();",
          "387: #endif",
          "",
          "[Removed Lines]",
          "389:   if (IsBrowserProcess(command_line)) {",
          "",
          "[Added Lines]",
          "383:   if (IsBrowserProcess()) {",
          "",
          "---------------"
        ],
        "shell/common/api/electron_bindings.cc||shell/common/api/electron_bindings.cc": [
          "File: shell/common/api/electron_bindings.cc -> shell/common/api/electron_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"shell/common/application_info.h\"",
          "23: #include \"shell/common/gin_converters/file_path_converter.h\"",
          "24: #include \"shell/common/gin_helper/dictionary.h\"",
          "26: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "27: #include \"shell/common/gin_helper/promise.h\"",
          "28: #include \"shell/common/heap_snapshot.h\"",
          "29: #include \"shell/common/node_includes.h\"",
          "30: #include \"shell/common/thread_restrictions.h\"",
          "31: #include \"third_party/blink/renderer/platform/heap/process_heap.h\"  // nogncheck",
          "",
          "[Removed Lines]",
          "25: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "29: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   process->SetMethod(\"getCreationTime\", &GetCreationTime);",
          "51:   process->SetMethod(\"getHeapStatistics\", &GetHeapStatistics);",
          "52:   process->SetMethod(\"getBlinkMemoryInfo\", &GetBlinkMemoryInfo);",
          "54:     process->SetMethod(\"getProcessMemoryInfo\", &GetProcessMemoryInfo);",
          "55:   }",
          "56:   process->SetMethod(\"getSystemMemoryInfo\", &GetSystemMemoryInfo);",
          "",
          "[Removed Lines]",
          "53:   if (gin_helper::Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "53:   if (electron::IsBrowserProcess()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: v8::Local<v8::Promise> ElectronBindings::GetProcessMemoryInfo(",
          "211:     v8::Isolate* isolate) {",
          "213:   gin_helper::Promise<gin_helper::Dictionary> promise(isolate);",
          "214:   v8::Local<v8::Promise> handle = promise.GetHandle();",
          "",
          "[Removed Lines]",
          "212:   CHECK(gin_helper::Locker::IsBrowserProcess());",
          "",
          "[Added Lines]",
          "212:   CHECK(electron::IsBrowserProcess());",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/callback.cc||shell/common/gin_helper/callback.cc": [
          "File: shell/common/gin_helper/callback.cc -> shell/common/gin_helper/callback.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"base/cxx17_backports.h\"",
          "8: #include \"content/public/browser/browser_thread.h\"",
          "9: #include \"gin/dictionary.h\"",
          "11: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: struct DeleteOnUIThread {",
          "71:   template <typename T>",
          "72:   static void Destruct(const T* x) {",
          "74:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "75:       content::BrowserThread::DeleteSoon(content::BrowserThread::UI, FROM_HERE,",
          "76:                                          x);",
          "",
          "[Removed Lines]",
          "73:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "74:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/locker.cc||shell/common/gin_helper/locker.cc": [
          "File: shell/common/gin_helper/locker.cc -> shell/common/gin_helper/locker.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/locker.h\"",
          "7: namespace gin_helper {",
          "9: Locker::Locker(v8::Isolate* isolate) {",
          "11:     locker_ = std::make_unique<v8::Locker>(isolate);",
          "12: }",
          "14: Locker::~Locker() = default;",
          "22: }  // namespace gin_helper",
          "",
          "[Removed Lines]",
          "10:   if (IsBrowserProcess())",
          "16: void Locker::SetIsBrowserProcess(bool is_browser_process) {",
          "17:   g_is_browser_process = is_browser_process;",
          "18: }",
          "20: bool Locker::g_is_browser_process = false;",
          "",
          "[Added Lines]",
          "7: #include \"shell/common/process_util.h\"",
          "12:   if (electron::IsBrowserProcess())",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/locker.h||shell/common/gin_helper/locker.h": [
          "File: shell/common/gin_helper/locker.h -> shell/common/gin_helper/locker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   Locker(const Locker&) = delete;",
          "22:   Locker& operator=(const Locker&) = delete;",
          "30:  private:",
          "31:   void* operator new(size_t size);",
          "32:   void operator delete(void*, size_t);",
          "",
          "[Removed Lines]",
          "26:   static inline bool IsBrowserProcess() { return g_is_browser_process; }",
          "28:   static void SetIsBrowserProcess(bool is_browser_process);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/microtasks_scope.cc||shell/common/gin_helper/microtasks_scope.cc": [
          "File: shell/common/gin_helper/microtasks_scope.cc -> shell/common/gin_helper/microtasks_scope.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "9: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "7: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "7: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:                                  v8::MicrotaskQueue* microtask_queue,",
          "13:                                  bool ignore_browser_checkpoint,",
          "14:                                  v8::MicrotasksScope::Type scope_type) {",
          "16:     if (!ignore_browser_checkpoint)",
          "17:       v8::MicrotasksScope::PerformCheckpoint(isolate);",
          "18:   } else {",
          "",
          "[Removed Lines]",
          "15:   if (Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "15:   if (electron::IsBrowserProcess()) {",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/promise.cc||shell/common/gin_helper/promise.cc": [
          "File: shell/common/gin_helper/promise.cc -> shell/common/gin_helper/promise.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: void Promise<void>::ResolvePromise(Promise<void> promise) {",
          "72:       !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "73:     content::GetUIThreadTaskRunner({})->PostTask(",
          "74:         FROM_HERE,",
          "",
          "[Removed Lines]",
          "71:   if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "71:   if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/promise.h||shell/common/gin_helper/promise.h": [
          "File: shell/common/gin_helper/promise.h -> shell/common/gin_helper/promise.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"shell/common/gin_converters/std_converter.h\"",
          "17: #include \"shell/common/gin_helper/locker.h\"",
          "18: #include \"shell/common/gin_helper/microtasks_scope.h\"",
          "20: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   static void RejectPromise(PromiseBase&& promise, base::StringPiece errmsg) {",
          "50:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "51:       content::GetUIThreadTaskRunner({})->PostTask(",
          "52:           FROM_HERE,",
          "",
          "[Removed Lines]",
          "49:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "50:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   static void ResolvePromise(Promise<RT> promise, RT result) {",
          "93:         !content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {",
          "94:       content::GetUIThreadTaskRunner({})->PostTask(",
          "95:           FROM_HERE, base::BindOnce([](Promise<RT> promise,",
          "",
          "[Removed Lines]",
          "92:     if (gin_helper::Locker::IsBrowserProcess() &&",
          "",
          "[Added Lines]",
          "93:     if (electron::IsBrowserProcess() &&",
          "",
          "---------------"
        ],
        "shell/common/gin_helper/trackable_object.cc||shell/common/gin_helper/trackable_object.cc": [
          "File: shell/common/gin_helper/trackable_object.cc -> shell/common/gin_helper/trackable_object.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"base/functional/bind.h\"",
          "10: #include \"base/supports_user_data.h\"",
          "11: #include \"shell/browser/electron_browser_main_parts.h\"",
          "14: namespace gin_helper {",
          "",
          "[Removed Lines]",
          "12: #include \"shell/common/gin_helper/locker.h\"",
          "",
          "[Added Lines]",
          "12: #include \"shell/common/process_util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: TrackableObjectBase::TrackableObjectBase() {",
          "35:       << \"This class only works for browser process\";",
          "36: }",
          "",
          "[Removed Lines]",
          "34:   DCHECK(gin_helper::Locker::IsBrowserProcess())",
          "",
          "[Added Lines]",
          "34:   DCHECK(electron::IsBrowserProcess())",
          "",
          "---------------"
        ],
        "shell/common/node_bindings.cc||shell/common/node_bindings.cc": [
          "File: shell/common/node_bindings.cc -> shell/common/node_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "175:       return false;",
          "176:     return blink::V8Initializer::WasmCodeGenerationCheckCallbackInMainThread(",
          "177:         context, source);",
          "",
          "[Removed Lines]",
          "174:     if (gin_helper::Locker::IsBrowserProcess())",
          "",
          "[Added Lines]",
          "174:     if (!electron::IsRendererProcess())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:       NOTREACHED();",
          "193:       return {false, {}};",
          "194:     }",
          "",
          "[Removed Lines]",
          "191:     if (gin_helper::Locker::IsBrowserProcess()) {",
          "",
          "[Added Lines]",
          "191:     if (!electron::IsRendererProcess()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   }",
          "215:   return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "216: }",
          "",
          "[Removed Lines]",
          "204:   if (gin_helper::Locker::IsBrowserProcess()) {",
          "205:     return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "206:   }",
          "210:   v8::ModifyCodeGenerationFromStringsResult result =",
          "211:       blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "212:           context, source, is_code_like);",
          "213:   if (!result.codegen_allowed)",
          "214:     return result;",
          "",
          "[Added Lines]",
          "205:   if (electron::IsRendererProcess()) {",
          "206:     v8::ModifyCodeGenerationFromStringsResult result =",
          "207:         blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "208:             context, source, is_code_like);",
          "209:     if (!result.codegen_allowed)",
          "210:       return result;",
          "211:   }",
          "",
          "---------------"
        ],
        "shell/common/process_util.cc||shell/common/process_util.cc": [
          "File: shell/common/process_util.cc -> shell/common/process_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"shell/common/process_util.h\"",
          "7: #include \"gin/dictionary.h\"",
          "8: #include \"shell/common/gin_converters/callback_converter.h\"",
          "9: #include \"shell/common/node_includes.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"base/command_line.h\"",
          "8: #include \"content/public/common/content_switches.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   emit_warning.Run(warning_msg, warning_type, \"\");",
          "25: }",
          "27: }  // namespace electron",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: bool IsBrowserProcess() {",
          "30:   auto* command_line = base::CommandLine::ForCurrentProcess();",
          "31:   std::string process_type =",
          "32:       command_line->GetSwitchValueASCII(switches::kProcessType);",
          "33:   return process_type.empty();",
          "34: }",
          "36: bool IsRendererProcess() {",
          "37:   auto* command_line = base::CommandLine::ForCurrentProcess();",
          "38:   std::string process_type =",
          "39:       command_line->GetSwitchValueASCII(switches::kProcessType);",
          "40:   return process_type == switches::kRendererProcess;",
          "41: }",
          "",
          "---------------"
        ],
        "shell/common/process_util.h||shell/common/process_util.h": [
          "File: shell/common/process_util.h -> shell/common/process_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:                  const std::string& warning_msg,",
          "18:                  const std::string& warning_type);",
          "20: }  // namespace electron",
          "22: #endif  // ELECTRON_SHELL_COMMON_PROCESS_UTIL_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: bool IsBrowserProcess();",
          "21: bool IsRendererProcess();",
          "",
          "---------------"
        ],
        "spec/api-utility-process-spec.ts||spec/api-utility-process-spec.ts": [
          "File: spec/api-utility-process-spec.ts -> spec/api-utility-process-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:       await once(child, 'exit');",
          "361:       expect(log).to.equal('hello\\n');",
          "362:     });",
          "363:   });",
          "364: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     it('does not crash when running eval', async () => {",
          "365:       const child = utilityProcess.fork('./eval.js', [], {",
          "366:         cwd: fixturesPath,",
          "367:         stdio: 'ignore'",
          "368:       });",
          "369:       await once(child, 'spawn');",
          "370:       const [data] = await once(child, 'message');",
          "371:       expect(data).to.equal(42);",
          "373:       const exit = once(child, 'exit');",
          "374:       expect(child.kill()).to.be.true();",
          "375:       await exit;",
          "376:     });",
          "",
          "---------------"
        ],
        "spec/fixtures/api/utility-process/eval.js||spec/fixtures/api/utility-process/eval.js": [
          "File: spec/fixtures/api/utility-process/eval.js -> spec/fixtures/api/utility-process/eval.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const vm = require('node:vm');",
          "3: const contextObject = { result: 0 };",
          "4: vm.createContext(contextObject);",
          "5: vm.runInContext('eval(\\'result = 42\\')', contextObject);",
          "6: process.parentPort.postMessage(contextObject.result);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8edbb1d4aefb92df27d560503ed6acce6abaaf99",
      "candidate_info": {
        "commit_hash": "8edbb1d4aefb92df27d560503ed6acce6abaaf99",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/8edbb1d4aefb92df27d560503ed6acce6abaaf99",
        "files": [
          "patches/chromium/.patches",
          "patches/chromium/expose_v8initializer_codegenerationcheckcallbackinmainthread.patch",
          "patches/node/.patches",
          "patches/node/allow_embedder_to_control_codegenerationfromstringscallback.patch",
          "shell/common/node_bindings.cc",
          "spec/chromium-spec.ts"
        ],
        "message": "fix: blend node and blink code generation policy when both are loaded (#36667)\n\nCo-authored-by: Jeremy Rose <jeremya@chromium.org>",
        "before_after_code_files": [
          "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
          "spec/chromium-spec.ts||spec/chromium-spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
            "spec/chromium-spec.ts||spec/chromium-spec.ts"
          ],
          "candidate": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
            "spec/chromium-spec.ts||spec/chromium-spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "shell/common/node_bindings.cc||shell/common/node_bindings.cc": [
          "File: shell/common/node_bindings.cc -> shell/common/node_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: }",
          "160: bool AllowWasmCodeGenerationCallback(v8::Local<v8::Context> context,",
          "166:     if (gin_helper::Locker::IsBrowserProcess())",
          "167:       return false;",
          "168:     return blink::V8Initializer::WasmCodeGenerationCheckCallbackInMainThread(",
          "170:   }",
          "174: }",
          "176: void ErrorMessageListener(v8::Local<v8::Message> message,",
          "",
          "[Removed Lines]",
          "161:                                      v8::Local<v8::String>) {",
          "164:   v8::Isolate* isolate = context->GetIsolate();",
          "165:   if (node::Environment::GetCurrent(isolate) == nullptr) {",
          "169:         context, v8::String::Empty(isolate));",
          "172:   return node::AllowWasmCodeGenerationCallback(context,",
          "173:                                                v8::String::Empty(isolate));",
          "",
          "[Added Lines]",
          "161:                                      v8::Local<v8::String> source) {",
          "164:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "168:         context, source);",
          "169:   }",
          "171:   return node::AllowWasmCodeGenerationCallback(context, source);",
          "172: }",
          "174: v8::ModifyCodeGenerationFromStringsResult ModifyCodeGenerationFromStrings(",
          "175:     v8::Local<v8::Context> context,",
          "176:     v8::Local<v8::Value> source,",
          "177:     bool is_code_like) {",
          "180:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "181:     if (gin_helper::Locker::IsBrowserProcess()) {",
          "182:       NOTREACHED();",
          "183:       return {false, {}};",
          "184:     }",
          "185:     return blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "186:         context, source, is_code_like);",
          "189:   return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545:   is.allow_wasm_code_generation_callback = AllowWasmCodeGenerationCallback;",
          "547:   if (browser_env_ == BrowserEnvironment::kBrowser ||",
          "548:       browser_env_ == BrowserEnvironment::kUtility) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:   is.modify_code_generation_from_strings_callback =",
          "563:       ModifyCodeGenerationFromStrings;",
          "",
          "---------------"
        ],
        "spec/chromium-spec.ts||spec/chromium-spec.ts": [
          "File: spec/chromium-spec.ts -> spec/chromium-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:     });",
          "356:   });",
          "358:   it('does not crash when multiple WebContent are created with web security disabled', () => {",
          "359:     const options = { show: false, webPreferences: { webSecurity: false } };",
          "360:     const w1 = new BrowserWindow(options);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:   describe('csp in sandbox: false', () => {",
          "359:     it('is correctly applied', async () => {",
          "360:       const w = new BrowserWindow({",
          "361:         show: false,",
          "362:         webPreferences: { sandbox: false }",
          "363:       });",
          "364:       w.loadURL(`data:text/html,<head>",
          "365:           <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline'\">",
          "366:         </head>",
          "367:         <script>",
          "368:           try {",
          "372:             console.log(eval('failure'))",
          "373:           } catch (e) {",
          "374:             console.log('success')",
          "375:           }",
          "376:         </script>`);",
          "377:       const [,, message] = await emittedOnce(w.webContents, 'console-message');",
          "378:       expect(message).to.equal('success');",
          "379:     });",
          "380:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bd4cea3a02396065a7916fefe6b845efe2f2206",
      "candidate_info": {
        "commit_hash": "0bd4cea3a02396065a7916fefe6b845efe2f2206",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/0bd4cea3a02396065a7916fefe6b845efe2f2206",
        "files": [
          "patches/chromium/.patches",
          "patches/chromium/expose_v8initializer_codegenerationcheckcallbackinmainthread.patch",
          "patches/node/.patches",
          "patches/node/allow_embedder_to_control_codegenerationfromstringscallback.patch",
          "shell/common/node_bindings.cc",
          "spec/chromium-spec.ts"
        ],
        "message": "fix: blend node and blink code generation policy when both are loaded (#36668)\n\n* fix: blend node and blink code generation policy when both are loaded (#36567)\n\nCo-authored-by: Jeremy Rose <jeremya@chromium.org>\n\n* Update .patches\n\n* fix patches\n\nCo-authored-by: trop[bot] <37223003+trop[bot]@users.noreply.github.com>\nCo-authored-by: Jeremy Rose <jeremya@chromium.org>\nCo-authored-by: John Kleinschmidt <jkleinsc@electronjs.org>",
        "before_after_code_files": [
          "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
          "spec/chromium-spec.ts||spec/chromium-spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
            "spec/chromium-spec.ts||spec/chromium-spec.ts"
          ],
          "candidate": [
            "shell/common/node_bindings.cc||shell/common/node_bindings.cc",
            "spec/chromium-spec.ts||spec/chromium-spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "shell/common/node_bindings.cc||shell/common/node_bindings.cc": [
          "File: shell/common/node_bindings.cc -> shell/common/node_bindings.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: }",
          "160: bool AllowWasmCodeGenerationCallback(v8::Local<v8::Context> context,",
          "166:     if (gin_helper::Locker::IsBrowserProcess())",
          "167:       return false;",
          "168:     return blink::V8Initializer::WasmCodeGenerationCheckCallbackInMainThread(",
          "170:   }",
          "174: }",
          "176: void ErrorMessageListener(v8::Local<v8::Message> message,",
          "",
          "[Removed Lines]",
          "161:                                      v8::Local<v8::String>) {",
          "164:   v8::Isolate* isolate = context->GetIsolate();",
          "165:   if (node::Environment::GetCurrent(isolate) == nullptr) {",
          "169:         context, v8::String::Empty(isolate));",
          "172:   return node::AllowWasmCodeGenerationCallback(context,",
          "173:                                                v8::String::Empty(isolate));",
          "",
          "[Added Lines]",
          "161:                                      v8::Local<v8::String> source) {",
          "164:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "168:         context, source);",
          "169:   }",
          "171:   return node::AllowWasmCodeGenerationCallback(context, source);",
          "172: }",
          "174: v8::ModifyCodeGenerationFromStringsResult ModifyCodeGenerationFromStrings(",
          "175:     v8::Local<v8::Context> context,",
          "176:     v8::Local<v8::Value> source,",
          "177:     bool is_code_like) {",
          "180:   if (node::Environment::GetCurrent(context) == nullptr) {",
          "181:     if (gin_helper::Locker::IsBrowserProcess()) {",
          "182:       NOTREACHED();",
          "183:       return {false, {}};",
          "184:     }",
          "185:     return blink::V8Initializer::CodeGenerationCheckCallbackInMainThread(",
          "186:         context, source, is_code_like);",
          "189:   return node::ModifyCodeGenerationFromStrings(context, source, is_code_like);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:   is.allow_wasm_code_generation_callback = AllowWasmCodeGenerationCallback;",
          "551:   if (browser_env_ == BrowserEnvironment::kBrowser ||",
          "552:       browser_env_ == BrowserEnvironment::kUtility) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:   is.modify_code_generation_from_strings_callback =",
          "567:       ModifyCodeGenerationFromStrings;",
          "",
          "---------------"
        ],
        "spec/chromium-spec.ts||spec/chromium-spec.ts": [
          "File: spec/chromium-spec.ts -> spec/chromium-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:     });",
          "356:   });",
          "358:   it('does not crash when multiple WebContent are created with web security disabled', () => {",
          "359:     const options = { show: false, webPreferences: { webSecurity: false } };",
          "360:     const w1 = new BrowserWindow(options);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:   describe('csp in sandbox: false', () => {",
          "359:     it('is correctly applied', async () => {",
          "360:       const w = new BrowserWindow({",
          "361:         show: false,",
          "362:         webPreferences: { sandbox: false }",
          "363:       });",
          "364:       w.loadURL(`data:text/html,<head>",
          "365:           <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline'\">",
          "366:         </head>",
          "367:         <script>",
          "368:           try {",
          "372:             console.log(eval('failure'))",
          "373:           } catch (e) {",
          "374:             console.log('success')",
          "375:           }",
          "376:         </script>`);",
          "377:       const [,, message] = await emittedOnce(w.webContents, 'console-message');",
          "378:       expect(message).to.equal('success');",
          "379:     });",
          "380:   });",
          "",
          "---------------"
        ]
      }
    }
  ]
}