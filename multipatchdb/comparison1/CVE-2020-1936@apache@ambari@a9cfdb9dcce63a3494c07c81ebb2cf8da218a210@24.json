{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "715ccd2369623ebd23519ca216d42a58445592b4",
      "candidate_info": {
        "commit_hash": "715ccd2369623ebd23519ca216d42a58445592b4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/715ccd2369623ebd23519ca216d42a58445592b4",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts"
        ],
        "message": "[AMBARI-24426] [Log Search UI] Show user friendly component names in Log Index Filter screen (#2154)\n\n(cherry picked from commit de250d8fcd483e5356c3f0eceb457f9bed9a40fd)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:           <input type=\"checkbox\" attr.id=\"{{component.name}}\"",
          "42:                  [attr.checked]=\"isAllLevelsCheckedForComponent(component.name) ? 'checked' : null\"",
          "43:                  (change)=\"processAllLevelsForComponent(component.name, $event.target.checked)\">",
          "45:         </td>",
          "46:         <td *ngFor=\"let levelName of levelNames\" class=\"checkbox-column\">",
          "47:           <input type=\"checkbox\" attr.id=\"{{getCheckBoxId(component.name, levelName)}}\"",
          "",
          "[Removed Lines]",
          "44:           <label attr.for=\"{{component.name}}\">{{component.label}}</label>",
          "",
          "[Added Lines]",
          "44:           <label attr.for=\"{{component.name}}\">{{component.label  | componentLabel | async}}</label>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import {RouterTestingModule} from '@angular/router/testing';",
          "52: import {NotificationsService} from 'angular2-notifications/src/notifications.service';",
          "53: import {NotificationService} from '@modules/shared/services/notification.service';",
          "55: describe('LogIndexFilterComponent', () => {",
          "56:   let component: LogIndexFilterComponent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import {ComponentLabelPipe} from \"@app/pipes/component-label\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:       declarations: [",
          "82:         LogIndexFilterComponent,",
          "83:         DropdownButtonComponent,",
          "85:       ],",
          "86:       providers: [",
          "87:         ...MockHttpRequestModules,",
          "",
          "[Removed Lines]",
          "84:         DropdownListComponent",
          "",
          "[Added Lines]",
          "85:         DropdownListComponent,",
          "86:         ComponentLabelPipe",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';",
          "21: import {Observable} from 'rxjs/Observable';",
          "22: import 'rxjs/add/operator/map';",
          "23: import {Moment} from 'moment';",
          "24: import {ListItem} from '@app/classes/list-item';",
          "25: import {HomogeneousObject, LogLevelObject} from '@app/classes/object';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import {Subscription} from 'rxjs/Subscription';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import {UtilsService} from '@app/services/utils.service';",
          "31: import {ClustersService} from '@app/services/storage/clusters.service';",
          "32: import {HostsService} from '@app/services/storage/hosts.service';",
          "35: @Component({",
          "36:   selector: 'log-index-filter',",
          "",
          "[Removed Lines]",
          "33: import {Subscription} from 'rxjs/Subscription';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     return clusterNames.map(this.utils.getListItemFromString);",
          "64:   });",
          "68:   private subscriptions: Subscription[] = [];",
          "",
          "[Removed Lines]",
          "66:   activeClusterName: string = '';",
          "",
          "[Added Lines]",
          "66:   activeClusterName = '';",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: @import '../../mixins';",
          "20: :host {",
          "22:   position: relative;",
          "24:   button {",
          "",
          "[Removed Lines]",
          "21:   .default-flex;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import {",
          "22: } from '@angular/core';",
          "23: import {ListItem} from '@app/classes/list-item';",
          "24: import {ComponentGeneratorService} from '@app/services/component-generator.service';",
          "",
          "[Removed Lines]",
          "20:   Component, OnChanges, AfterViewChecked, SimpleChanges, Input, Output, EventEmitter, ViewChildren, ViewContainerRef,",
          "21:   QueryList, ChangeDetectorRef, ElementRef, ViewChild, OnInit",
          "",
          "[Added Lines]",
          "20:   Component, OnChanges, AfterViewChecked, OnDestroy, SimpleChanges, Input, Output, EventEmitter,",
          "21:   ViewChildren, ViewContainerRef, QueryList, ChangeDetectorRef, ElementRef, ViewChild, OnInit",
          "23: import {Subscription} from 'rxjs/Subscription';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   templateUrl: './dropdown-list.component.html',",
          "29:   styleUrls: ['./dropdown-list.component.less']",
          "30: })",
          "33:   private shouldRenderAdditionalComponents = false;",
          "",
          "[Removed Lines]",
          "31: export class DropdownListComponent implements OnInit, OnChanges, AfterViewChecked {",
          "",
          "[Added Lines]",
          "32: export class DropdownListComponent implements OnInit, OnChanges, AfterViewChecked, OnDestroy {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:   private filterRegExp: RegExp;",
          "79:   constructor(",
          "80:     private componentGenerator: ComponentGeneratorService,",
          "81:     private changeDetector: ChangeDetectorRef",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   private subscriptions: Subscription[] = [];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:   ngOnInit() {",
          "85:     this.separateSelections();",
          "86:     this.setDefaultSelection(this.items);",
          "88:   }",
          "90:   ngOnChanges(changes: SimpleChanges): void {",
          "",
          "[Removed Lines]",
          "87:     this.selectedItemChange.subscribe(this.separateSelections);",
          "",
          "[Added Lines]",
          "90:     this.subscriptions.push(",
          "91:       this.selectedItemChange.subscribe(this.separateSelections)",
          "92:     );",
          "93:   }",
          "95:   ngOnDestroy() {",
          "96:     this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "daa76be92e82d9df255170da96474ec70e4c6129",
      "candidate_info": {
        "commit_hash": "daa76be92e82d9df255170da96474ec70e4c6129",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/daa76be92e82d9df255170da96474ec70e4c6129",
        "files": [
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-grafana-ini.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/configuration/ams-grafana-ini.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/metainfo.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2"
        ],
        "message": "AMBARI-25379 Bump Ambari Metrics version to 0.2.0\n\nChange-Id: If5500410026bc82d2ed9b3ff6d9476995302e5b6",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2 -> ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/templates/metrics_grafana_datasource.json.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: {",
          "20:   \"name\": \"{{ams_datasource_name}}\",",
          "22:   \"access\": \"proxy\",",
          "23:   \"url\": \"{{metric_collector_protocol}}://{{ams_datasource_host}}:{{metric_collector_port}}\",",
          "24:   \"password\": \"\",",
          "",
          "[Removed Lines]",
          "21:   \"type\": \"ambari-metrics\",",
          "",
          "[Added Lines]",
          "21:   \"type\": \"ambarimetrics,",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py -> ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/scripts/metrics_grafana_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: \"\"\"",
          "3: Licensed to the Apache Software Foundation (ASF) under one",
          "4: or more contributor license agreements.  See the NOTICE file",
          "5: distributed with this work for additional information",
          "6: regarding copyright ownership.  The ASF licenses this file",
          "7: to you under the Apache License, Version 2.0 (the",
          "8: \"License\"); you may not use this file except in compliance",
          "9: with the License.  You may obtain a copy of the License at",
          "11:     http://www.apache.org/licenses/LICENSE-2.0",
          "13: Unless required by applicable law or agreed to in writing, software",
          "14: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "15: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "16: See the License for the specific language governing permissions and",
          "17: limitations under the License.",
          "19: \"\"\"",
          "20: import httplib",
          "22: from ambari_commons.parallel_processing import PrallelProcessResult, execute_in_parallel, SUCCESS",
          "23: from service_check import post_metrics_to_collector",
          "24: from resource_management.core.logger import Logger",
          "25: from resource_management.core.base import Fail",
          "26: from resource_management.libraries.script.script import Script",
          "27: from resource_management import Template",
          "28: from collections import namedtuple",
          "29: from urlparse import urlparse",
          "30: from base64 import b64encode",
          "31: import random",
          "32: import time",
          "33: import socket",
          "34: import ambari_simplejson as json",
          "35: import ambari_commons.network as network",
          "36: import os",
          "38: GRAFANA_SEARCH_BUILTIN_DASHBOARDS = \"/api/search?tag=builtin\"",
          "39: GRAFANA_DATASOURCE_URL = \"/api/datasources\"",
          "40: GRAFANA_USER_URL = \"/api/user\"",
          "41: GRAFANA_DASHBOARDS_URL = \"/api/dashboards/db\"",
          "42: METRICS_GRAFANA_DATASOURCE_NAME = \"AMBARI_METRICS\"",
          "44: Server = namedtuple('Server', [ 'protocol', 'host', 'port', 'user', 'password' ])",
          "46: def perform_grafana_get_call(url, server):",
          "47:   import params",
          "49:   grafana_https_enabled = server.protocol.lower() == 'https'",
          "50:   response = None",
          "51:   ca_certs = None",
          "52:   if grafana_https_enabled:",
          "53:     ca_certs = params.ams_grafana_ca_cert",
          "55:   for i in xrange(0, params.grafana_connect_attempts):",
          "56:     try:",
          "57:       conn = network.get_http_connection(",
          "58:         server.host,",
          "59:         int(server.port),",
          "60:         grafana_https_enabled,",
          "61:         ca_certs,",
          "62:         ssl_version=Script.get_force_https_protocol_value()",
          "63:       )",
          "65:       userAndPass = b64encode('{0}:{1}'.format(server.user, server.password))",
          "66:       headers = { 'Authorization' : 'Basic %s' %  userAndPass }",
          "68:       Logger.info(\"Connecting (GET) to %s:%s%s\" % (server.host, server.port, url))",
          "70:       conn.request(\"GET\", url, headers = headers)",
          "71:       response = conn.getresponse()",
          "72:       Logger.info(\"Http response: %s %s\" % (response.status, response.reason))",
          "73:       break",
          "74:     except (httplib.HTTPException, socket.error) as ex:",
          "75:       if i < params.grafana_connect_attempts - 1:",
          "76:         Logger.info(\"Connection to Grafana failed. Next retry in %s seconds.\"",
          "77:                     % (params.grafana_connect_retry_delay))",
          "78:         time.sleep(params.grafana_connect_retry_delay)",
          "79:         continue",
          "80:       else:",
          "81:         raise Fail(\"Ambari Metrics Grafana update failed due to: %s\" % str(ex))",
          "82:       pass",
          "84:   return response",
          "86: def perform_grafana_put_call(url, id, payload, server):",
          "87:   import params",
          "89:   response = None",
          "90:   data = None",
          "91:   userAndPass = b64encode('{0}:{1}'.format(server.user, server.password))",
          "92:   headers = {\"Content-Type\": \"application/json\",",
          "93:              'Authorization' : 'Basic %s' %  userAndPass }",
          "94:   grafana_https_enabled = server.protocol.lower() == 'https'",
          "96:   ca_certs = None",
          "97:   if grafana_https_enabled:",
          "98:     ca_certs = params.ams_grafana_ca_cert",
          "100:   for i in xrange(0, params.grafana_connect_attempts):",
          "101:     try:",
          "102:       conn = network.get_http_connection(",
          "103:         server.host,",
          "104:         int(server.port),",
          "105:         grafana_https_enabled,",
          "106:         ca_certs,",
          "107:         ssl_version=Script.get_force_https_protocol_value()",
          "108:       )",
          "109:       conn.request(\"PUT\", url + \"/\" + str(id), payload, headers)",
          "110:       response = conn.getresponse()",
          "111:       data = response.read()",
          "112:       Logger.info(\"Http data: %s\" % data)",
          "113:       conn.close()",
          "114:       break",
          "115:     except (httplib.HTTPException, socket.error) as ex:",
          "116:       if i < params.grafana_connect_attempts - 1:",
          "117:         Logger.info(\"Connection to Grafana failed. Next retry in %s seconds.\"",
          "118:                     % (params.grafana_connect_retry_delay))",
          "119:         time.sleep(params.grafana_connect_retry_delay)",
          "120:         continue",
          "121:       else:",
          "122:         raise Fail(\"Ambari Metrics Grafana update failed due to: %s\" % str(ex))",
          "123:       pass",
          "125:   return (response, data)",
          "127: def perform_grafana_post_call(url, payload, server):",
          "128:   import params",
          "130:   response = None",
          "131:   data = None",
          "132:   userAndPass = b64encode('{0}:{1}'.format(server.user, server.password))",
          "133:   Logger.debug('POST payload: %s' % payload)",
          "134:   headers = {\"Content-Type\": \"application/json\", \"Content-Length\" : len(payload),",
          "135:              'Authorization' : 'Basic %s' %  userAndPass}",
          "136:   grafana_https_enabled = server.protocol.lower() == 'https'",
          "138:   ca_certs = None",
          "139:   if grafana_https_enabled:",
          "140:     ca_certs = params.ams_grafana_ca_cert",
          "142:   for i in xrange(0, params.grafana_connect_attempts):",
          "143:     try:",
          "144:       Logger.info(\"Connecting (POST) to %s:%s%s\" % (server.host, server.port, url))",
          "145:       conn = network.get_http_connection(",
          "146:         server.host,",
          "147:         int(server.port),",
          "148:         grafana_https_enabled, ca_certs,",
          "149:         ssl_version=Script.get_force_https_protocol_value()",
          "150:       )",
          "152:       conn.request(\"POST\", url, payload, headers)",
          "154:       response = conn.getresponse()",
          "155:       Logger.info(\"Http response: %s %s\" % (response.status, response.reason))",
          "156:       if response.status == 401: #Intermittent error thrown from Grafana",
          "157:         if i < params.grafana_connect_attempts - 1:",
          "158:           Logger.info(\"Connection to Grafana failed. Next retry in %s seconds.\"",
          "159:                   % (params.grafana_connect_retry_delay))",
          "160:           time.sleep(params.grafana_connect_retry_delay)",
          "161:           continue",
          "162:       data = response.read()",
          "163:       Logger.info(\"Http data: %s\" % data)",
          "164:       conn.close()",
          "165:       break",
          "166:     except (httplib.HTTPException, socket.error) as ex:",
          "167:       if i < params.grafana_connect_attempts - 1:",
          "168:         Logger.info(\"Connection to Grafana failed. Next retry in %s seconds.\"",
          "169:                     % (params.grafana_connect_retry_delay))",
          "170:         time.sleep(params.grafana_connect_retry_delay)",
          "171:         continue",
          "172:       else:",
          "173:         raise Fail(\"Ambari Metrics Grafana update failed due to: %s\" % str(ex))",
          "174:       pass",
          "176:   return (response, data)",
          "178: def perform_grafana_delete_call(url, server):",
          "179:   import params",
          "181:   grafana_https_enabled = server.protocol.lower() == 'https'",
          "182:   response = None",
          "184:   ca_certs = None",
          "185:   if grafana_https_enabled:",
          "186:     ca_certs = params.ams_grafana_ca_cert",
          "188:   for i in xrange(0, params.grafana_connect_attempts):",
          "189:     try:",
          "190:       conn = network.get_http_connection(",
          "191:         server.host,",
          "192:         int(server.port),",
          "193:         grafana_https_enabled, ca_certs,",
          "194:         ssl_version=Script.get_force_https_protocol_value()",
          "195:       )",
          "197:       userAndPass = b64encode('{0}:{1}'.format(server.user, server.password))",
          "198:       headers = { 'Authorization' : 'Basic %s' %  userAndPass }",
          "200:       Logger.info(\"Connecting (DELETE) to %s:%s%s\" % (server.host, server.port, url))",
          "202:       conn.request(\"DELETE\", url, headers = headers)",
          "203:       response = conn.getresponse()",
          "204:       Logger.info(\"Http response: %s %s\" % (response.status, response.reason))",
          "205:       break",
          "206:     except (httplib.HTTPException, socket.error) as ex:",
          "207:       if i < params.grafana_connect_attempts - 1:",
          "208:         Logger.info(\"Connection to Grafana failed. Next retry in %s seconds.\"",
          "209:                     % (params.grafana_connect_retry_delay))",
          "210:         time.sleep(params.grafana_connect_retry_delay)",
          "211:         continue",
          "212:       else:",
          "213:         raise Fail(\"Ambari Metrics Grafana update failed due to: %s\" % str(ex))",
          "214:       pass",
          "216:   return response",
          "218: def is_unchanged_datasource_url(grafana_datasource_url, new_datasource_host):",
          "219:   import params",
          "220:   parsed_url = urlparse(grafana_datasource_url)",
          "221:   Logger.debug(\"parsed url: scheme = %s, host = %s, port = %s\" % (",
          "222:     parsed_url.scheme, parsed_url.hostname, parsed_url.port))",
          "223:   Logger.debug(\"collector: scheme = %s, host = %s, port = %s\" %",
          "224:               (params.metric_collector_protocol, new_datasource_host,",
          "225:                params.metric_collector_port))",
          "227:   return parsed_url.scheme.strip() == params.metric_collector_protocol.strip() and \\",
          "228:          parsed_url.hostname.strip() == new_datasource_host.strip() and \\",
          "229:          str(parsed_url.port) == params.metric_collector_port",
          "231: def do_ams_collector_post(metric_collector_host, params):",
          "232:     ams_metrics_post_url = \"/ws/v1/timeline/metrics/\"",
          "233:     random_value1 = random.random()",
          "234:     headers = {\"Content-type\": \"application/json\"}",
          "235:     ca_certs = os.path.join(params.ams_grafana_conf_dir,",
          "236:                             params.metric_truststore_ca_certs)",
          "238:     current_time = int(time.time()) * 1000",
          "239:     metric_json = Template('smoketest_metrics.json.j2', hostname=params.hostname, random1=random_value1,",
          "240:                            current_time=current_time).get_content()",
          "242:     post_metrics_to_collector(ams_metrics_post_url, metric_collector_host, params.metric_collector_port, params.metric_collector_https_enabled,",
          "243:                                 metric_json, headers, ca_certs)",
          "245: def create_grafana_admin_pwd():",
          "246:   import params",
          "248:   serverCall1 = Server(protocol = params.ams_grafana_protocol.strip(),",
          "249:                        host = params.ams_grafana_host.strip(),",
          "250:                        port = params.ams_grafana_port,",
          "251:                        user = params.ams_grafana_admin_user,",
          "252:                        password = params.ams_grafana_admin_pwd)",
          "254:   response = perform_grafana_get_call(GRAFANA_USER_URL, serverCall1)",
          "255:   if response and response.status != 200:",
          "257:     serverCall2 = Server(protocol = params.ams_grafana_protocol.strip(),",
          "258:                          host = params.ams_grafana_host.strip(),",
          "259:                          port = params.ams_grafana_port,",
          "260:                          user = params.ams_grafana_admin_user,",
          "261:                          password = 'admin')",
          "263:     Logger.debug(\"Setting grafana admin password\")",
          "264:     pwd_data = {  \"oldPassword\": \"admin\",",
          "265:                   \"newPassword\": params.ams_grafana_admin_pwd,",
          "266:                   \"confirmNew\": params.ams_grafana_admin_pwd",
          "267:                   }",
          "268:     password_json = json.dumps(pwd_data)",
          "270:     (response, data) = perform_grafana_put_call(GRAFANA_USER_URL, 'password', password_json, serverCall2)",
          "272:     if response.status == 200:",
          "273:       Logger.info(\"Ambari Metrics Grafana password updated.\")",
          "275:     elif response.status == 500:",
          "276:       Logger.info(\"Ambari Metrics Grafana password update failed. Not retrying.\")",
          "277:       raise Fail(\"Ambari Metrics Grafana password update failed. PUT request status: %s %s \\n%s\" %",
          "278:                  (response.status, response.reason, data))",
          "279:     else:",
          "280:       raise Fail(\"Ambari Metrics Grafana password creation failed. \"",
          "281:                  \"PUT request status: %s %s \\n%s\" % (response.status, response.reason, data))",
          "282:   else:",
          "283:     Logger.info(\"Grafana password update not required.\")",
          "284:   pass",
          "286: def create_ams_datasource():",
          "287:   import params",
          "288:   server = Server(protocol = params.ams_grafana_protocol.strip(),",
          "289:                   host = params.ams_grafana_host.strip(),",
          "290:                   port = params.ams_grafana_port,",
          "291:                   user = params.ams_grafana_admin_user,",
          "292:                   password = params.ams_grafana_admin_pwd)",
          "294:   \"\"\"",
          "295:   Create AMS datasource in Grafana, if exsists make sure the collector url is accurate",
          "296:   \"\"\"",
          "297:   Logger.info(\"Trying to find working metric collector\")",
          "298:   results = execute_in_parallel(do_ams_collector_post, params.ams_collector_hosts.split(','), params)",
          "299:   new_datasource_host = \"\"",
          "301:   for host in params.ams_collector_hosts.split(','):",
          "302:     if host in results:",
          "303:       if results[host].status == SUCCESS:",
          "304:         new_datasource_host = host",
          "305:         Logger.info(\"Found working collector on host %s\" % new_datasource_host)",
          "306:         break",
          "307:       else:",
          "308:         Logger.warning(results[host].result)",
          "310:   if new_datasource_host == \"\":",
          "311:     Logger.warning(\"All metric collectors are unavailable. Will use random collector as datasource host.\")",
          "312:     new_datasource_host = params.metric_collector_host",
          "314:   Logger.info(\"New datasource host will be %s\" % new_datasource_host)",
          "316:   ams_datasource_json = Template('metrics_grafana_datasource.json.j2',",
          "317:                             ams_datasource_name=METRICS_GRAFANA_DATASOURCE_NAME, ams_datasource_host=new_datasource_host).get_content()",
          "318:   Logger.info(\"Checking if AMS Grafana datasource already exists\")",
          "320:   response = perform_grafana_get_call(GRAFANA_DATASOURCE_URL, server)",
          "321:   create_datasource = True",
          "323:   if response and response.status == 200:",
          "324:     datasources = response.read()",
          "325:     datasources_json = json.loads(datasources)",
          "326:     for i in xrange(0, len(datasources_json)):",
          "327:       datasource_name = datasources_json[i][\"name\"]",
          "328:       if datasource_name == METRICS_GRAFANA_DATASOURCE_NAME:",
          "329:         create_datasource = False # datasource already exists",
          "330:         Logger.info(\"Ambari Metrics Grafana datasource already present. Checking Metrics Collector URL\")",
          "331:         datasource_url = datasources_json[i][\"url\"]",
          "333:         update_datasource = False",
          "334:         if is_unchanged_datasource_url(datasource_url, new_datasource_host):",
          "335:           Logger.info(\"Metrics Collector URL validation succeeded.\")",
          "336:         else:",
          "337:           Logger.info(\"Metrics Collector URL validation failed.\")",
          "338:           update_datasource = True",
          "340:         datasource_type = datasources_json[i][\"type\"]",
          "341:         new_datasource_def = json.loads(ams_datasource_json)",
          "342:         new_datasource_type = new_datasource_def[\"type\"]",
          "344:         if datasource_type == new_datasource_type:",
          "345:           Logger.info(\"Grafana datasource type validation succeeded.\")",
          "346:         else:",
          "347:           Logger.info(\"Grafana datasource type validation failed. Old type = %s, New type = %s\" % (datasource_type, new_datasource_type))",
          "348:           update_datasource = True",
          "350:         if update_datasource: # Metrics datasource present, but collector host is wrong or the datasource type is outdated.",
          "351:           datasource_id = datasources_json[i][\"id\"]",
          "352:           Logger.info(\"Updating datasource, id = %s\" % datasource_id)",
          "354:           (response, data) = perform_grafana_put_call(GRAFANA_DATASOURCE_URL, datasource_id,",
          "355:                                                       ams_datasource_json, server)",
          "357:           if response.status == 200:",
          "358:             Logger.info(\"Ambari Metrics Grafana data source updated.\")",
          "360:           elif response.status == 500:",
          "361:             Logger.info(\"Ambari Metrics Grafana data source update failed. Not retrying.\")",
          "362:             raise Fail(\"Ambari Metrics Grafana data source update failed. PUT request status: %s %s \\n%s\" %",
          "363:                        (response.status, response.reason, data))",
          "364:           else:",
          "365:             raise Fail(\"Ambari Metrics Grafana data source creation failed. \"",
          "366:                        \"PUT request status: %s %s \\n%s\" % (response.status, response.reason, data))",
          "367:         pass",
          "368:       pass",
          "369:     pass",
          "370:   else:",
          "371:     Logger.info(\"Error checking for Ambari Metrics Grafana datasource. Will attempt to create.\")",
          "373:   if not create_datasource:",
          "374:     return",
          "375:   else:",
          "376:     Logger.info(\"Generating datasource:\\n%s\" % ams_datasource_json)",
          "378:     (response, data) = perform_grafana_post_call(GRAFANA_DATASOURCE_URL, ams_datasource_json, server)",
          "380:     if response.status == 200:",
          "381:       Logger.info(\"Ambari Metrics Grafana data source created.\")",
          "382:     elif response.status == 500:",
          "383:       Logger.info(\"Ambari Metrics Grafana data source creation failed. Not retrying.\")",
          "384:       raise Fail(\"Ambari Metrics Grafana data source creation failed. POST request status: %s %s \\n%s\" %",
          "385:                  (response.status, response.reason, data))",
          "386:     else:",
          "387:       Logger.info(\"Ambari Metrics Grafana data source creation failed.\")",
          "388:       raise Fail(\"Ambari Metrics Grafana data source creation failed. POST request status: %s %s \\n%s\" %",
          "389:                  (response.status, response.reason, data))",
          "390:   pass",
          "392: def create_ams_dashboards():",
          "393:   \"\"\"",
          "394:   Create dashboards in grafana from the json files",
          "395:   \"\"\"",
          "396:   import params",
          "397:   server = Server(protocol = params.ams_grafana_protocol.strip(),",
          "398:                   host = params.ams_grafana_host.strip(),",
          "399:                   port = params.ams_grafana_port,",
          "400:                   user = params.ams_grafana_admin_user,",
          "401:                   password = params.ams_grafana_admin_pwd)",
          "403:   dashboard_files = params.get_grafana_dashboard_defs()",
          "404:   version = params.get_ambari_version()",
          "405:   Logger.info(\"Checking dashboards to update for Ambari version : %s\" % version)",
          "406:   # Friendly representation of dashboard",
          "407:   Dashboard = namedtuple('Dashboard', ['uri', 'id', 'title', 'tags'])",
          "409:   existing_dashboards = []",
          "410:   response = perform_grafana_get_call(GRAFANA_SEARCH_BUILTIN_DASHBOARDS, server)",
          "411:   if response and response.status == 200:",
          "412:     data = response.read()",
          "413:     try:",
          "414:       dashboards = json.loads(data)",
          "415:     except:",
          "416:       Logger.error(\"Unable to parse JSON response from grafana request: %s\" %",
          "417:                    GRAFANA_SEARCH_BUILTIN_DASHBOARDS)",
          "418:       Logger.info(data)",
          "419:       return",
          "421:     for dashboard in dashboards:",
          "422:       if dashboard['title'] == 'HBase - Performance':",
          "423:         perform_grafana_delete_call(\"/api/dashboards/\" + dashboard['uri'], server)",
          "424:       else:",
          "425:         existing_dashboards.append(",
          "426:             Dashboard(uri = dashboard['uri'], id = dashboard['id'],",
          "427:                     title = dashboard['title'], tags = dashboard['tags'])",
          "428:           )",
          "429:     pass",
          "430:   else:",
          "431:     Logger.error(\"Failed to execute search query on Grafana dashboards. \"",
          "432:                  \"query = %s\\n statuscode = %s\\n reason = %s\\n data = %s\\n\" %",
          "433:                  (GRAFANA_SEARCH_BUILTIN_DASHBOARDS, response.status, response.reason, response.read()))",
          "434:     return",
          "436:   Logger.debug('Dashboard definitions found = %s' % str(dashboard_files))",
          "438:   if dashboard_files:",
          "439:     for dashboard_file in dashboard_files:",
          "440:       try:",
          "441:         with open(dashboard_file, 'r') as file:",
          "442:           dashboard_def = json.load(file)",
          "443:       except Exception, e:",
          "444:         Logger.error('Unable to load dashboard json file %s' % dashboard_file)",
          "445:         Logger.error(str(e))",
          "446:         continue",
          "448:       if dashboard_def:",
          "449:         update_def = True",
          "450:         # Make sure static json does not have id",
          "451:         if \"id\" in dashboard_def:",
          "452:           dashboard_def['id'] = None",
          "453:         # Set correct tags",
          "454:         if 'tags' in dashboard_def:",
          "455:           dashboard_def['tags'].append('builtin')",
          "456:           dashboard_def['tags'].append(version)",
          "457:         else:",
          "458:           dashboard_def['tags'] = [ 'builtin', version ]",
          "460:         for dashboard in existing_dashboards:",
          "461:           if dashboard.title == dashboard_def['title']:",
          "462:             if version not in dashboard.tags:",
          "463:               # Found existing dashboard with wrong version - update dashboard",
          "464:               update_def = True",
          "465:             else:",
          "466:               update_def = False # Skip update",
          "467:         pass",
          "469:         if update_def:",
          "470:           Logger.info(\"Updating dashboard definition for %s with tags: %s\" %",
          "471:                       (dashboard_def['title'], dashboard_def['tags']))",
          "473:           # Discrepancy in grafana export vs import format",
          "474:           dashboard_def_payload = { \"dashboard\" : dashboard_def, 'overwrite': True }",
          "475:           paylaod = json.dumps(dashboard_def_payload).strip()",
          "477:           (response, data) = perform_grafana_post_call(GRAFANA_DASHBOARDS_URL, paylaod, server)",
          "479:           if response and response.status == 200:",
          "480:             Logger.info(\"Dashboard created successfully.\\n %s\" % str(data))",
          "481:           else:",
          "482:             Logger.error(\"Failed creating dashboard: %s\" % dashboard_def['title'])",
          "483:           pass",
          "484:         else:",
          "485:           Logger.info('No update needed for dashboard = %s' % dashboard_def['title'])",
          "486:       pass",
          "487:     pass",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2 -> ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.2.0/package/templates/metrics_grafana_datasource.json.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {#",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing, software",
          "13: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: # See the License for the specific language governing permissions and",
          "16: # limitations under the License.",
          "17: #}",
          "19: {",
          "20:   \"name\": \"{{ams_datasource_name}}\",",
          "21:   \"type\": \"ambari-metrics\",",
          "22:   \"access\": \"proxy\",",
          "23:   \"url\": \"{{metric_collector_protocol}}://{{ams_datasource_host}}:{{metric_collector_port}}\",",
          "24:   \"password\": \"\",",
          "25:   \"user\": \"\",",
          "26:   \"database\": \"\",",
          "27:   \"basicAuth\": false,",
          "28:   \"basicAuthUser\": \"\",",
          "29:   \"basicAuthPassword\": \"\",",
          "30:   \"withCredentials\": false,",
          "31:   \"isDefault\": true,",
          "32:   \"jsonData\": {}",
          "33: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76108a9a2347132a759a3bef273b9e674309b321",
      "candidate_info": {
        "commit_hash": "76108a9a2347132a759a3bef273b9e674309b321",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/76108a9a2347132a759a3bef273b9e674309b321",
        "files": [
          "ambari-web/app/views/common/helpers/format_word_break_view.js"
        ],
        "message": "AMBARI-25387 Ambari-Web UI hosts Tab is vulnerable to XSS attack (asnaik) (#3091)",
        "before_after_code_files": [
          "ambari-web/app/views/common/helpers/format_word_break_view.js||ambari-web/app/views/common/helpers/format_word_break_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/views/common/helpers/format_word_break_view.js||ambari-web/app/views/common/helpers/format_word_break_view.js": [
          "File: ambari-web/app/views/common/helpers/format_word_break_view.js -> ambari-web/app/views/common/helpers/format_word_break_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   result: function() {",
          "42:     var self = this;",
          "43:     ['.', '_', '/'].forEach(function (delimiter) {",
          "44:       if (content.contains(delimiter)) {",
          "",
          "[Removed Lines]",
          "41:     var content = this.get('content') || '';",
          "",
          "[Added Lines]",
          "41:     var content = Ember.Handlebars.Utils.escapeExpression(this.get('content')) || '';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98fc8906434a7db995e578a6bb75cb5c0f701f74",
      "candidate_info": {
        "commit_hash": "98fc8906434a7db995e578a6bb75cb5c0f701f74",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/98fc8906434a7db995e578a6bb75cb5c0f701f74",
        "files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js"
        ],
        "message": "Global Configurations defined in workflow XML are being lost during Import workflow (or) during Reset workflow (#2857)",
        "before_after_code_files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js||contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js||contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js -> contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     var nodeMap=this.setupNodeMap(workflowAppJson,workflow,Ember.$(xmlDoc));",
          "64:     this.setupTransitions(workflowAppJson,nodeMap);",
          "65:     workflow.set(\"startNode\",nodeMap.get(\"start\").node);",
          "66:     this.populateKillNodes(workflow,nodeMap);",
          "67:     return {workflow: workflow, errors: errors};",
          "68:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     let globalProperties = workflowJson[\"workflow-app\"].global.configuration.property;",
          "67:     if(workflowJson[\"workflow-app\"].global) {",
          "68:       if(Ember.isArray(globalProperties)) {",
          "69:         workflow.set(\"globalSetting\", workflowJson[\"workflow-app\"].global);",
          "70:       } else  {",
          "71:         workflow.set(\"globalSetting\", {configuration : { property:[globalProperties] }} );",
          "72:       }",
          "73:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0360c81448f562cd104e4e79910779809c95be6",
      "candidate_info": {
        "commit_hash": "d0360c81448f562cd104e4e79910779809c95be6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d0360c81448f562cd104e4e79910779809c95be6",
        "files": [
          "ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py"
        ],
        "message": "AMBARI-24874 : Storm Service Check fail with 'The TGT found is not renewable' (#2638)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py||ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py||ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py": [
          "File: ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py -> ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     import params",
          "50:     env.set_params(params)",
          "52:     unique = get_unique_id_and_date()",
          "54:     File(\"/tmp/wordCount.jar\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     if params.security_enabled:",
          "53:         kinit_cmd = format(",
          "54:             \"{kinit_path_local} -kt {storm_keytab_path} {storm_jaas_principal}; \")",
          "55:     else:",
          "56:         kinit_cmd = \"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     elif params.nimbus_host is not None:",
          "65:       cmd = format(\"storm jar /tmp/wordCount.jar storm.starter.WordCountTopology WordCount{unique} -c nimbus.host={nimbus_host}\")",
          "67:     Execute(cmd,",
          "68:             logoutput=True,",
          "69:             path=params.storm_bin_dir,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     # use client jaas for service check",
          "74:     if params.security_enabled:",
          "75:         storm_client_jaas_file = format(\"{conf_dir}/client_jaas.conf\")",
          "76:         cmd = format(\"{kinit_cmd}{cmd} -c java.security.auth.login.config={storm_client_jaas_file}\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}