{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c6e5fef64abeb614e0c6f6bcfa0cd5bc0685aac",
      "candidate_info": {
        "commit_hash": "8c6e5fef64abeb614e0c6f6bcfa0cd5bc0685aac",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/8c6e5fef64abeb614e0c6f6bcfa0cd5bc0685aac",
        "files": [
          "drivers/shared/executor/executor_universal_linux.go"
        ],
        "message": "backport of commit a0ff07393b3dc2a17727fd68437873da79c403d7 (#24394)\n\nCo-authored-by: Seth Hoenig <shoenig@duck.com>",
        "before_after_code_files": [
          "drivers/shared/executor/executor_universal_linux.go||drivers/shared/executor/executor_universal_linux.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/shared/executor/executor_universal_linux.go||drivers/shared/executor/executor_universal_linux.go": [
          "File: drivers/shared/executor/executor_universal_linux.go -> drivers/shared/executor/executor_universal_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  var (",
          "150:  )",
          "153:  switch cgroupslib.GetMode() {",
          "154:  case cgroupslib.CG1:",
          "155:   if err := e.configureCG1(cgroup, command); err != nil {",
          "157:   }",
          "158:   moveProcess, deleteCgroup = e.enterCG1(cgroup, command.CpusetCgroup())",
          "159:  default:",
          "",
          "[Removed Lines]",
          "148:   deleteCgroup cleanupFunc",
          "149:   moveProcess  runningFunc",
          "156:    return nil, nil, err",
          "",
          "[Added Lines]",
          "148:   deleteCgroup = func() {}",
          "149:   moveProcess  = func() error { return nil }",
          "156:    return moveProcess, deleteCgroup, err",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:   fd, cleanup, err := e.statCG(cgroup)",
          "164:   if err != nil {",
          "166:   }",
          "167:   e.childCmd.SysProcAttr.UseCgroupFD = true",
          "168:   e.childCmd.SysProcAttr.CgroupFD = fd",
          "169:   deleteCgroup = cleanup",
          "171:  }",
          "173:  e.logger.Info(\"configured cgroup for executor\", \"pid\", pid)",
          "",
          "[Removed Lines]",
          "165:    return nil, nil, err",
          "170:   moveProcess = func() error { return nil }",
          "",
          "[Added Lines]",
          "165:    return moveProcess, deleteCgroup, err",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "030bd35d8cb73fbf954ce4317203b2430f69f3e3",
      "candidate_info": {
        "commit_hash": "030bd35d8cb73fbf954ce4317203b2430f69f3e3",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/030bd35d8cb73fbf954ce4317203b2430f69f3e3",
        "files": [
          "drivers/shared/capabilities/defaults.go",
          "drivers/shared/executor/executor.go",
          "go.mod",
          "go.sum"
        ],
        "message": "Backport of deps: switch to moby/sys/capability into release/1.9.x (#24425)\n\nCo-authored-by: Kir Kolyshkin <kolyshkin@gmail.com>",
        "before_after_code_files": [
          "drivers/shared/capabilities/defaults.go||drivers/shared/capabilities/defaults.go",
          "drivers/shared/executor/executor.go||drivers/shared/executor/executor.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/shared/capabilities/defaults.go||drivers/shared/capabilities/defaults.go": [
          "File: drivers/shared/capabilities/defaults.go -> drivers/shared/capabilities/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"fmt\"",
          "8:  \"regexp\"",
          "11: )",
          "13: const (",
          "",
          "[Removed Lines]",
          "10:  \"github.com/syndtr/gocapability/capability\"",
          "",
          "[Added Lines]",
          "10:  \"github.com/moby/sys/capability\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: func Supported() *Set {",
          "41:  s := New(nil)",
          "55:   s.Add(c.String())",
          "56:  }",
          "",
          "[Removed Lines]",
          "43:  last := capability.CAP_LAST_CAP",
          "46:  if last == capability.Cap(63) {",
          "47:   last = capability.CAP_BLOCK_SUSPEND",
          "48:  }",
          "51:  for _, c := range capability.List() {",
          "52:   if c > last {",
          "53:    continue",
          "54:   }",
          "",
          "[Added Lines]",
          "43:  list, _ := capability.ListSupported()",
          "45:  for _, c := range list {",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor.go||drivers/shared/executor/executor.go": [
          "File: drivers/shared/executor/executor.go -> drivers/shared/executor/executor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  cstructs \"github.com/hashicorp/nomad/client/structs\"",
          "28:  \"github.com/hashicorp/nomad/drivers/shared/executor/procstats\"",
          "29:  \"github.com/hashicorp/nomad/plugins/drivers\"",
          "31: )",
          "33: const (",
          "",
          "[Removed Lines]",
          "30:  \"github.com/syndtr/gocapability/capability\"",
          "",
          "[Added Lines]",
          "30:  \"github.com/moby/sys/capability\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "794: func SupportedCaps(allowNetRaw bool) []string {",
          "795:  var allCaps []string",
          "805:   if !allowNetRaw && cap == capability.CAP_NET_RAW {",
          "806:    continue",
          "807:   }",
          "",
          "[Removed Lines]",
          "796:  last := capability.CAP_LAST_CAP",
          "798:  if last == capability.Cap(63) {",
          "799:   last = capability.CAP_BLOCK_SUSPEND",
          "800:  }",
          "801:  for _, cap := range capability.List() {",
          "802:   if cap > last {",
          "803:    continue",
          "804:   }",
          "",
          "[Added Lines]",
          "796:  list, _ := capability.ListSupported()",
          "797:  for _, cap := range list {",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  github.com/mitchellh/mapstructure v1.5.0",
          "106:  github.com/mitchellh/pointerstructure v1.2.1",
          "107:  github.com/mitchellh/reflectwalk v1.0.2",
          "108:  github.com/moby/sys/mount v0.3.3",
          "109:  github.com/moby/sys/mountinfo v0.7.2",
          "110:  github.com/moby/term v0.5.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:  github.com/moby/sys/capability v0.3.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  github.com/shoenig/go-m1cpu v0.1.6",
          "124:  github.com/shoenig/test v1.11.0",
          "125:  github.com/stretchr/testify v1.9.0",
          "127:  github.com/zclconf/go-cty v1.13.0",
          "128:  github.com/zclconf/go-cty-yaml v1.0.3",
          "129:  go.etcd.io/bbolt v1.3.9",
          "",
          "[Removed Lines]",
          "126:  github.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:  github.com/softlayer/softlayer-go v0.0.0-20180806151055-260589d94c7d // indirect",
          "278:  github.com/spf13/cast v1.5.0 // indirect",
          "279:  github.com/stretchr/objx v0.5.2 // indirect",
          "280:  github.com/tencentcloud/tencentcloud-sdk-go v1.0.162 // indirect",
          "281:  github.com/tj/go-spin v1.1.0 // indirect",
          "282:  github.com/tklauser/go-sysconf v0.3.12 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:  github.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "902: github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=",
          "903: github.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=",
          "904: github.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=",
          "905: github.com/moby/sys/mount v0.3.3 h1:fX1SVkXFJ47XWDoeFW4Sq7PdQJnV2QIDZAqjNqgEjUs=",
          "906: github.com/moby/sys/mount v0.3.3/go.mod h1:PBaEorSNTLG5t/+4EgukEQVlAvVEc6ZjTySwKdqp5K0=",
          "907: github.com/moby/sys/mountinfo v0.6.2/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905: github.com/moby/sys/capability v0.3.0 h1:kEP+y6te0gEXIaeQhIi0s7vKs/w0RPoH1qPa6jROcVg=",
          "906: github.com/moby/sys/capability v0.3.0/go.mod h1:4g9IK291rVkms3LKCDOoYlnV8xKwoDTpIrNEE35Wq0I=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fb1a7f96461d627181a3d8d38e4c3722eeca41c",
      "candidate_info": {
        "commit_hash": "6fb1a7f96461d627181a3d8d38e4c3722eeca41c",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/6fb1a7f96461d627181a3d8d38e4c3722eeca41c",
        "files": [
          ".changelog/24186.txt",
          "api/services.go",
          "command/agent/consul/service_client.go",
          "command/agent/consul/service_client_test.go",
          "command/agent/job_endpoint.go",
          "command/agent/job_endpoint_test.go",
          "nomad/structs/diff.go",
          "nomad/structs/diff_test.go",
          "nomad/structs/services.go",
          "website/content/docs/job-specification/service.mdx"
        ],
        "message": "Backport of consul: add support for service weight into release/1.9.x (#24296)\n\nCo-authored-by: Martijn Vegter <martijn@martijnvegter.com>",
        "before_after_code_files": [
          "api/services.go||api/services.go",
          "command/agent/consul/service_client.go||command/agent/consul/service_client.go",
          "command/agent/consul/service_client_test.go||command/agent/consul/service_client_test.go",
          "command/agent/job_endpoint.go||command/agent/job_endpoint.go",
          "command/agent/job_endpoint_test.go||command/agent/job_endpoint_test.go",
          "nomad/structs/diff.go||nomad/structs/diff.go",
          "nomad/structs/diff_test.go||nomad/structs/diff_test.go",
          "nomad/structs/services.go||nomad/structs/services.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/services.go||api/services.go": [
          "File: api/services.go -> api/services.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  TaskName          string            `mapstructure:\"task\" hcl:\"task,optional\"`",
          "247:  OnUpdate          string            `mapstructure:\"on_update\" hcl:\"on_update,optional\"`",
          "248:  Identity          *WorkloadIdentity `hcl:\"identity,block\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:  Weights           *ServiceWeights   `mapstructure:\"weights\" hcl:\"weights,block\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:  }",
          "309:  s.Connect.Canonicalize()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:  s.Weights.Canonicalize()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:   }",
          "333:  }",
          "334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: type ServiceWeights struct {",
          "341:  Passing int `hcl:\"passing,optional\"`",
          "342:  Warning int `hcl:\"warning,optional\"`",
          "343: }",
          "345: func (weights *ServiceWeights) Canonicalize() {",
          "346:  if weights == nil {",
          "347:   return",
          "348:  }",
          "350:  if weights.Passing <= 0 {",
          "351:   weights.Passing = 1",
          "352:  }",
          "353:  if weights.Warning <= 0 {",
          "354:   weights.Warning = 1",
          "355:  }",
          "356: }",
          "",
          "---------------"
        ],
        "command/agent/consul/service_client.go||command/agent/consul/service_client.go": [
          "File: command/agent/consul/service_client.go -> command/agent/consul/service_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  case connectSidecarDifferent(wanted, sidecar):",
          "284:   trace(\"connect_sidecar\", wanted.Name, existing.Service)",
          "285:   return true",
          "286:  }",
          "287:  return false",
          "288: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:  case weightsDifferent(wanted.Weights, existing.Weights):",
          "287:   trace(\"weights\", wanted.Weights, existing.Weights)",
          "288:   return true",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:  return false",
          "401: }",
          "405: type operations struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406: func weightsDifferent(wanted *api.AgentWeights, existing api.AgentWeights) bool {",
          "407:  if wanted == nil {",
          "410:   return existing.Passing != 1 || existing.Warning != 1",
          "411:  }",
          "412:  if wanted.Passing != existing.Passing {",
          "413:   return true",
          "414:  }",
          "415:  if wanted.Warning != existing.Warning {",
          "416:   return true",
          "417:  }",
          "418:  return false",
          "419: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430:  return fmt.Sprintf(\"<%d, %d, %d, %d>\", len(o.regServices), len(o.regChecks), len(o.deregServices), len(o.deregChecks))",
          "431: }",
          "433: type ServiceClientWrapper struct {",
          "434:  serviceClients map[string]*ServiceClient // cluster name -> client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452: func newWeights(weights *structs.ServiceWeights) *api.AgentWeights {",
          "453:  if weights == nil {",
          "454:   return nil",
          "455:  }",
          "457:  return &api.AgentWeights{",
          "458:   Passing: weights.Passing,",
          "459:   Warning: weights.Warning,",
          "460:  }",
          "461: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1313:  gateway := newConnectGateway(service.Connect)",
          "1316:  var meta map[string]string",
          "1317:  if workload.Canary && len(service.CanaryMeta) > 0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346:  weights := newWeights(service.Weights)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1383:   Address:           ip,",
          "1384:   Port:              port,",
          "1385:   Meta:              meta,",
          "1386:   TaggedAddresses:   taggedAddresses,",
          "1387:   Connect:           connect, // will be nil if no Connect block",
          "1388:   Proxy:             gateway, // will be nil if no Connect Gateway block",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1419:   Weights:           weights,",
          "",
          "---------------"
        ],
        "command/agent/consul/service_client_test.go||command/agent/consul/service_client_test.go": [
          "File: command/agent/consul/service_client_test.go -> command/agent/consul/service_client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  }",
          "126: }",
          "128: func TestSyncLogic_agentServiceUpdateRequired(t *testing.T) {",
          "129:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: func TestSyncLogic_weightsDifferent(t *testing.T) {",
          "129:  ci.Parallel(t)",
          "131:  must.False(t, weightsDifferent(nil, api.AgentWeights{Passing: 1, Warning: 1}))",
          "132:  must.True(t, weightsDifferent(nil, api.AgentWeights{Passing: 5, Warning: 1}))",
          "133:  must.False(t, weightsDifferent(&api.AgentWeights{Passing: 5, Warning: 1}, api.AgentWeights{Passing: 5, Warning: 1}))",
          "134:  must.True(t, weightsDifferent(&api.AgentWeights{Passing: 5, Warning: 1}, api.AgentWeights{Passing: 1, Warning: 5}))",
          "135: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:   TaggedAddresses: map[string]api.ServiceAddress{",
          "174:    \"public_wan\": {Address: \"1.2.3.4\", Port: 8080},",
          "175:   },",
          "176:  }",
          "178:  sidecar := &api.AgentService{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:   Weights: api.AgentWeights{",
          "186:    Passing: 1,",
          "187:    Warning: 1,",
          "188:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:   })",
          "264:  })",
          "266:  t.Run(\"different sidecar upstream\", func(t *testing.T) {",
          "267:   try(t, true, syncNewOps, func(w asr) *asr {",
          "268:    w.Connect.SidecarService.Proxy.Upstreams[0].DestinationName = \"dest2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:  t.Run(\"different passing weight\", func(t *testing.T) {",
          "280:   try(t, true, syncNewOps, func(w asr) *asr {",
          "281:    w.Weights = &api.AgentWeights{",
          "282:     Passing: 5,",
          "283:     Warning: 1,",
          "284:    }",
          "285:    return &w",
          "286:   })",
          "287:  })",
          "",
          "---------------"
        ],
        "command/agent/job_endpoint.go||command/agent/job_endpoint.go": [
          "File: command/agent/job_endpoint.go -> command/agent/job_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1749:    out[i].Identity = apiWorkloadIdentityToStructs(s.Identity)",
          "1750:   }",
          "1752:  }",
          "1754:  return out",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1752:   out[i].Weights = apiWorkloadWeightsToStructs(s.Weights)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:  }",
          "1772: }",
          "1774: func ApiConsulConnectToStructs(in *api.ConsulConnect) *structs.ConsulConnect {",
          "1775:  if in == nil {",
          "1776:   return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1776: func apiWorkloadWeightsToStructs(in *api.ServiceWeights) *structs.ServiceWeights {",
          "1777:  if in == nil {",
          "1778:   return nil",
          "1779:  }",
          "1780:  return &structs.ServiceWeights{",
          "1781:   Passing: in.Passing,",
          "1782:   Warning: in.Warning,",
          "1783:  }",
          "1784: }",
          "",
          "---------------"
        ],
        "command/agent/job_endpoint_test.go||command/agent/job_endpoint_test.go": [
          "File: command/agent/job_endpoint_test.go -> command/agent/job_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2708:       TaggedAddresses: map[string]string{",
          "2709:        \"wan\": \"1.2.3.4\",",
          "2710:       },",
          "2711:       CheckRestart: &api.CheckRestart{",
          "2712:        Limit: 4,",
          "2713:        Grace: pointer.Of(11 * time.Second),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2711:       Weights: &api.ServiceWeights{",
          "2712:        Passing: 5,",
          "2713:        Warning: 1,",
          "2714:       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2820:         Meta: map[string]string{",
          "2821:          \"servicemeta\": \"foobar\",",
          "2822:         },",
          "2823:         CheckRestart: &api.CheckRestart{",
          "2824:          Limit: 4,",
          "2825:          Grace: pointer.Of(11 * time.Second),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2827:         Weights: &api.ServiceWeights{",
          "2828:          Passing: 7,",
          "2829:          Warning: 2,",
          "2830:         },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3147:       TaggedAddresses: map[string]string{",
          "3148:        \"wan\": \"1.2.3.4\",",
          "3149:       },",
          "3150:       OnUpdate: structs.OnUpdateRequireHealthy,",
          "3151:       Checks: []*structs.ServiceCheck{",
          "3152:        {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3158:       Weights: &structs.ServiceWeights{",
          "3159:        Passing: 5,",
          "3160:        Warning: 1,",
          "3161:       },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3263:         Meta: map[string]string{",
          "3264:          \"servicemeta\": \"foobar\",",
          "3265:         },",
          "3266:         OnUpdate: structs.OnUpdateRequireHealthy,",
          "3267:         Checks: []*structs.ServiceCheck{",
          "3268:          {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3278:         Weights: &structs.ServiceWeights{",
          "3279:          Passing: 7,",
          "3280:          Warning: 2,",
          "3281:         },",
          "",
          "---------------"
        ],
        "nomad/structs/diff.go||nomad/structs/diff.go": [
          "File: nomad/structs/diff.go -> nomad/structs/diff.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:   diff.Objects = append(diff.Objects, wiDiffs)",
          "848:  }",
          "850:  return diff",
          "851: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851:  if weightsDiffs := weightsDiff(old.Weights, new.Weights, contextual); weightsDiffs != nil {",
          "852:   diff.Objects = append(diff.Objects, weightsDiffs)",
          "853:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2986:  return diffs",
          "2987: }",
          "2991: func idDiff(oldWI, newWI *WorkloadIdentity, contextual bool) *ObjectDiff {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2994: func weightsDiff(oldWeights *ServiceWeights, newWeights *ServiceWeights, contextual bool) *ObjectDiff {",
          "2995:  if reflect.DeepEqual(oldWeights, newWeights) {",
          "2996:   return nil",
          "2997:  }",
          "2999:  flatten := func(weights *ServiceWeights) map[string]string {",
          "3000:   m := map[string]string{}",
          "3001:   if weights.Passing > 0 {",
          "3002:    m[\"Passing\"] = strconv.Itoa(weights.Passing)",
          "3003:   }",
          "3004:   if weights.Warning > 0 {",
          "3005:    m[\"Warning\"] = strconv.Itoa(weights.Warning)",
          "3006:   }",
          "3007:   return m",
          "3008:  }",
          "3010:  diff := &ObjectDiff{Type: DiffTypeNone, Name: \"Weights\"}",
          "3011:  var oldPrimitiveFlat, newPrimitiveFlat map[string]string",
          "3012:  if oldWeights == nil {",
          "3013:   diff.Type = DiffTypeAdded",
          "3014:   newPrimitiveFlat = flatten(newWeights)",
          "3015:  } else if newWeights == nil {",
          "3016:   diff.Type = DiffTypeDeleted",
          "3017:   oldPrimitiveFlat = flatten(oldWeights)",
          "3018:  } else {",
          "3019:   diff.Type = DiffTypeEdited",
          "3020:   oldPrimitiveFlat = flatten(oldWeights)",
          "3021:   newPrimitiveFlat = flatten(newWeights)",
          "3022:  }",
          "3025:  diff.Fields = fieldDiffs(oldPrimitiveFlat, newPrimitiveFlat, contextual)",
          "3027:  return diff",
          "3028: }",
          "",
          "---------------"
        ],
        "nomad/structs/diff_test.go||nomad/structs/diff_test.go": [
          "File: nomad/structs/diff_test.go -> nomad/structs/diff_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9911:      EnableTagOverride: true,",
          "9912:      Tags:              []string{\"prod\"},",
          "9913:      CanaryTags:        []string{\"canary\"},",
          "9914:     },",
          "9915:    },",
          "9916:    New: []*Service{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9914:      Weights: &ServiceWeights{",
          "9915:       Passing: 1,",
          "9916:       Warning: 1,",
          "9917:      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9922:      EnableTagOverride: false,",
          "9923:      Tags:              []string{\"prod\", \"dev\"},",
          "9924:      CanaryTags:        []string{\"qa\"},",
          "9925:     },",
          "9926:    },",
          "9927:    Expected: []*ObjectDiff{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9929:      Weights: &ServiceWeights{",
          "9930:       Passing: 5,",
          "9931:       Warning: 1,",
          "9932:      },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10016:         },",
          "10017:        },",
          "10018:       },",
          "10019:      },",
          "10020:     },",
          "10021:    },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10027:       {",
          "10028:        Type: DiffTypeEdited,",
          "10029:        Name: \"Weights\",",
          "10030:        Fields: []*FieldDiff{",
          "10031:         {",
          "10032:          Type: DiffTypeEdited,",
          "10033:          Name: \"Passing\",",
          "10034:          Old:  \"1\",",
          "10035:          New:  \"5\",",
          "10036:         },",
          "10037:         {",
          "10038:          Type: DiffTypeNone,",
          "10039:          Name: \"Warning\",",
          "10040:          Old:  \"1\",",
          "10041:          New:  \"1\",",
          "10042:         },",
          "10043:        },",
          "10044:       },",
          "",
          "---------------"
        ],
        "nomad/structs/services.go||nomad/structs/services.go": [
          "File: nomad/structs/services.go -> nomad/structs/services.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:  Connect    *ConsulConnect    // Consul Connect configuration",
          "624:  Meta       map[string]string // Consul service meta",
          "625:  CanaryMeta map[string]string // Consul service meta when it is a canary",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:  Weights    *ServiceWeights   // Service weights for DNS SRV request",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676:  ns.CanaryMeta = maps.Clone(s.CanaryMeta)",
          "677:  ns.TaggedAddresses = maps.Clone(s.TaggedAddresses)",
          "679:  ns.Identity = s.Identity.Copy()",
          "681:  return ns",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:  ns.Weights = s.Weights.Copy()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "954:  hashString(h, s.OnUpdate)",
          "955:  hashString(h, s.Namespace)",
          "956:  hashIdentity(h, s.Identity)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959:  hashWeights(h, s.Weights)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "993:  }",
          "994: }",
          "996: func hashIdentity(h hash.Hash, identity *WorkloadIdentity) {",
          "997:  if identity != nil {",
          "998:   hashString(h, identity.Name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: func hashWeights(h hash.Hash, weights *ServiceWeights) {",
          "1000:  if weights != nil {",
          "1001:   hashIntIfNonZero(h, \"Passing\", weights.Passing)",
          "1002:   hashIntIfNonZero(h, \"Warning\", weights.Warning)",
          "1003:  }",
          "1004: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1123:   return false",
          "1124:  }",
          "1126:  return true",
          "1127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136:  if !s.Weights.Equal(o.Weights) {",
          "1137:   return false",
          "1138:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1130:  return s.Provider == ServiceProviderConsul || s.Provider == \"\"",
          "1131: }",
          "1134: type ConsulConnect struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148: type ServiceWeights struct {",
          "1149:  Passing int",
          "1150:  Warning int",
          "1151: }",
          "1154: func (c *ServiceWeights) Copy() *ServiceWeights {",
          "1155:  if c == nil {",
          "1156:   return nil",
          "1157:  }",
          "1158:  return &ServiceWeights{",
          "1159:   Passing: c.Passing,",
          "1160:   Warning: c.Warning,",
          "1161:  }",
          "1162: }",
          "1165: func (c *ServiceWeights) Equal(o *ServiceWeights) bool {",
          "1166:  if c == nil || o == nil {",
          "1167:   return c == o",
          "1168:  }",
          "1170:  if c.Passing != o.Passing {",
          "1171:   return false",
          "1172:  }",
          "1174:  if c.Warning != o.Warning {",
          "1175:   return false",
          "1176:  }",
          "1178:  return true",
          "1179: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45dab2d8f4f870e9c8a9d30d37ca3ac22dedb440",
      "candidate_info": {
        "commit_hash": "45dab2d8f4f870e9c8a9d30d37ca3ac22dedb440",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/45dab2d8f4f870e9c8a9d30d37ca3ac22dedb440",
        "files": [
          ".release/ci.hcl",
          "GNUmakefile",
          "client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go",
          "version/version.go"
        ],
        "message": "Prepare for next release",
        "before_after_code_files": [
          ".release/ci.hcl||.release/ci.hcl",
          "client/structs/structs.generated.go||client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go",
          "version/version.go||version/version.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".release/ci.hcl||.release/ci.hcl": [
          "File: .release/ci.hcl -> .release/ci.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   team = \"nomad\"",
          "9:   slack {",
          "11:   }",
          "13:   github {",
          "",
          "[Removed Lines]",
          "10:     notification_channel = \"CUYKT2A73\"",
          "",
          "[Added Lines]",
          "10:     notification_channel = \"C03B5EWFW01\"",
          "",
          "---------------"
        ],
        "client/structs/structs.generated.go||client/structs/structs.generated.go": [
          "File: client/structs/structs.generated.go -> client/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go": [
          "File: nomad/structs/structs.generated.go -> nomad/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version/version.go||version/version.go": [
          "File: version/version.go -> version/version.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  GitDescribe string",
          "30:  VersionMetadata = \"\"",
          "",
          "[Removed Lines]",
          "22:  Version = \"1.9.7\"",
          "27:  VersionPrerelease = \"\"",
          "",
          "[Added Lines]",
          "22:  Version = \"1.9.8\"",
          "27:  VersionPrerelease = \"dev\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6db9160b5727957f0326c23decbe8a69182093aa",
      "candidate_info": {
        "commit_hash": "6db9160b5727957f0326c23decbe8a69182093aa",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/6db9160b5727957f0326c23decbe8a69182093aa",
        "files": [
          ".changelog/25039.txt",
          "client/rpc.go",
          "client/rpc_test.go"
        ],
        "message": "Backport of reset max query time of blocking queries in client after retries into release/1.9.x (#25049)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "client/rpc.go||client/rpc.go",
          "client/rpc_test.go||client/rpc_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/rpc.go||client/rpc.go": [
          "File: client/rpc.go -> client/rpc.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  if info, ok := args.(structs.RPCInfo); ok {",
          "94:  }",
          "96: TRY:",
          "",
          "[Removed Lines]",
          "93:   deadline = deadline.Add(info.TimeToBlock())",
          "",
          "[Added Lines]",
          "93:   oldBlockTime := info.TimeToBlock()",
          "94:   deadline = deadline.Add(oldBlockTime)",
          "95:   defer info.SetTimeToBlock(oldBlockTime)",
          "",
          "---------------"
        ],
        "client/rpc_test.go||client/rpc_test.go": [
          "File: client/rpc_test.go -> client/rpc_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"errors\"",
          "8:  \"testing\"",
          "10:  \"github.com/hashicorp/nomad/ci\"",
          "11:  \"github.com/hashicorp/nomad/client/config\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"time\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:  }",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: func TestRpc_RetryBlockTime(t *testing.T) {",
          "197:  ci.Parallel(t)",
          "202:  expectMaxQueryTime := time.Second",
          "203:  rpcHoldTimeout := 5 * time.Second",
          "204:  unblockTimeout := 7 * time.Second",
          "206:  srv, cleanupSrv := nomad.TestServer(t, func(c *nomad.Config) {",
          "207:   c.NumSchedulers = 0",
          "208:   c.BootstrapExpect = 3 // we intentionally don't want a leader",
          "209:  })",
          "210:  t.Cleanup(func() { cleanupSrv() })",
          "212:  c, cleanupC := TestClient(t, func(c *config.Config) {",
          "213:   c.Servers = []string{srv.GetConfig().RPCAddr.String()}",
          "214:   c.RPCHoldTimeout = rpcHoldTimeout",
          "215:  })",
          "216:  t.Cleanup(func() { cleanupC() })",
          "218:  req := structs.NodeSpecificRequest{",
          "219:   NodeID:   c.NodeID(),",
          "220:   SecretID: c.secretNodeID(),",
          "221:   QueryOptions: structs.QueryOptions{",
          "222:    Region:        c.Region(),",
          "223:    AuthToken:     c.secretNodeID(),",
          "224:    MinQueryIndex: 10000, // some far-flung index we know won't exist yet",
          "225:    MaxQueryTime:  expectMaxQueryTime,",
          "226:   },",
          "227:  }",
          "229:  resp := structs.NodeClientAllocsResponse{}",
          "230:  errCh := make(chan error)",
          "232:  go func() {",
          "233:   err := c.rpc(\"Node.GetClientAllocs\", &req, &resp)",
          "234:   errCh <- err",
          "235:  }()",
          "239:  select {",
          "240:  case err := <-errCh:",
          "241:   must.NoError(t, err)",
          "242:  case <-time.After(unblockTimeout):",
          "243:   cleanupC() // force unblock",
          "244:  }",
          "246:  must.Eq(t, expectMaxQueryTime, req.MaxQueryTime,",
          "247:   must.Sprintf(\"MaxQueryTime was changed during retries but not reset\"))",
          "248: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}