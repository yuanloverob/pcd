{
  "cve_id": "CVE-2020-10683",
  "cve_desc": "dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.",
  "repo": "dom4j/dom4j",
  "patch_hash": "a8228522a99a02146106672a34c104adbda5c658",
  "patch_info": {
    "commit_hash": "a8228522a99a02146106672a34c104adbda5c658",
    "repo": "dom4j/dom4j",
    "commit_url": "https://github.com/dom4j/dom4j/commit/a8228522a99a02146106672a34c104adbda5c658",
    "files": [
      "src/main/java/org/dom4j/DocumentHelper.java",
      "src/main/java/org/dom4j/io/SAXHelper.java",
      "src/main/java/org/dom4j/io/SAXReader.java"
    ],
    "message": "SAXReader uses system default XMLReader with its defaults. New factory method SAXReader.createDefault() sets more secure defaults.",
    "before_after_code_files": [
      "src/main/java/org/dom4j/DocumentHelper.java||src/main/java/org/dom4j/DocumentHelper.java",
      "src/main/java/org/dom4j/io/SAXHelper.java||src/main/java/org/dom4j/io/SAXHelper.java",
      "src/main/java/org/dom4j/io/SAXReader.java||src/main/java/org/dom4j/io/SAXReader.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/dom4j/DocumentHelper.java||src/main/java/org/dom4j/DocumentHelper.java": [
      "File: src/main/java/org/dom4j/DocumentHelper.java -> src/main/java/org/dom4j/DocumentHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "271:     public static Document parseText(String text) throws DocumentException {",
      "281:         String encoding = getEncoding(text);",
      "",
      "[Removed Lines]",
      "272:         SAXReader reader = new SAXReader();",
      "273:         try {",
      "274:             reader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
      "275:             reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);",
      "276:             reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);",
      "277:         } catch (SAXException e) {",
      "279:         }",
      "",
      "[Added Lines]",
      "272:         SAXReader reader = SAXReader.createDefault();",
      "",
      "---------------"
    ],
    "src/main/java/org/dom4j/io/SAXHelper.java||src/main/java/org/dom4j/io/SAXHelper.java": [
      "File: src/main/java/org/dom4j/io/SAXHelper.java -> src/main/java/org/dom4j/io/SAXHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import org.xml.sax.XMLReader;",
      "14: import org.xml.sax.helpers.XMLReaderFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: import javax.xml.parsers.SAXParserFactory;",
      "",
      "---------------"
    ],
    "src/main/java/org/dom4j/io/SAXReader.java||src/main/java/org/dom4j/io/SAXReader.java": [
      "File: src/main/java/org/dom4j/io/SAXReader.java -> src/main/java/org/dom4j/io/SAXReader.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: import org.xml.sax.helpers.DefaultHandler;",
      "31: import org.xml.sax.helpers.XMLReaderFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import javax.xml.parsers.SAXParserFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65: public class SAXReader {",
      "149:         }",
      "157:         }",
      "249:         }",
      "250:     }",
      "466:         }",
      "967:     }",
      "968: }",
      "",
      "[Removed Lines]",
      "66:     private static final String SAX_STRING_INTERNING =",
      "67:             \"http://xml.org/sax/features/string-interning\";",
      "68:     private static final String SAX_DECL_HANDLER =",
      "69:             \"http://xml.org/sax/properties/declaration-handler\";",
      "70:     private static final String SAX_LEXICAL_HANDLER =",
      "71:             \"http://xml.org/sax/properties/lexical-handler\";",
      "72:     private static final String SAX_LEXICALHANDLER =",
      "73:             \"http://xml.org/sax/handlers/LexicalHandler\";",
      "76:     private DocumentFactory factory;",
      "79:     private XMLReader xmlReader;",
      "82:     private boolean validating;",
      "85:     private DispatchHandler dispatchHandler;",
      "88:     private ErrorHandler errorHandler;",
      "91:     private EntityResolver entityResolver;",
      "94:     private boolean stringInternEnabled = true;",
      "97:     private boolean includeInternalDTDDeclarations = false;",
      "100:     private boolean includeExternalDTDDeclarations = false;",
      "103:     private boolean mergeAdjacentText = false;",
      "106:     private boolean stripWhitespaceText = false;",
      "109:     private boolean ignoreComments = false;",
      "112:     private String encoding = null;",
      "118:     private XMLFilter xmlFilter;",
      "120:     public SAXReader() {",
      "121:     }",
      "123:     public SAXReader(boolean validating) {",
      "124:         this.validating = validating;",
      "125:     }",
      "127:     public SAXReader(DocumentFactory factory) {",
      "128:         this.factory = factory;",
      "129:     }",
      "131:     public SAXReader(DocumentFactory factory, boolean validating) {",
      "132:         this.factory = factory;",
      "133:         this.validating = validating;",
      "134:     }",
      "136:     public SAXReader(XMLReader xmlReader) {",
      "137:         this.xmlReader = xmlReader;",
      "138:     }",
      "140:     public SAXReader(XMLReader xmlReader, boolean validating) {",
      "141:         this.xmlReader = xmlReader;",
      "142:         this.validating = validating;",
      "143:     }",
      "145:     public SAXReader(String xmlReaderClassName) throws SAXException {",
      "146:         if (xmlReaderClassName != null) {",
      "147:             this.xmlReader = XMLReaderFactory",
      "148:                     .createXMLReader(xmlReaderClassName);",
      "150:     }",
      "152:     public SAXReader(String xmlReaderClassName, boolean validating)",
      "153:             throws SAXException {",
      "154:         if (xmlReaderClassName != null) {",
      "155:             this.xmlReader = XMLReaderFactory",
      "156:                     .createXMLReader(xmlReaderClassName);",
      "159:         this.validating = validating;",
      "160:     }",
      "179:     public void setProperty(String name, Object value) throws SAXException {",
      "180:         getXMLReader().setProperty(name, value);",
      "181:     }",
      "199:     public void setFeature(String name, boolean value) throws SAXException {",
      "200:         getXMLReader().setFeature(name, value);",
      "201:     }",
      "216:     public Document read(File file) throws DocumentException {",
      "217:         try {",
      "225:             InputSource source = new InputSource(new FileInputStream(file));",
      "226:             if (this.encoding != null) {",
      "227:                 source.setEncoding(this.encoding);",
      "228:             }",
      "229:             String path = file.getAbsolutePath();",
      "231:             if (path != null) {",
      "233:                 StringBuffer sb = new StringBuffer(\"file://\");",
      "236:                 if (!path.startsWith(File.separator)) {",
      "237:                     sb.append(\"/\");",
      "238:                 }",
      "240:                 path = path.replace('\\\\', '/');",
      "241:                 sb.append(path);",
      "243:                 source.setSystemId(sb.toString());",
      "244:             }",
      "246:             return read(source);",
      "247:         } catch (FileNotFoundException e) {",
      "248:             throw new DocumentException(e.getMessage(), e);",
      "265:     public Document read(URL url) throws DocumentException {",
      "266:         String systemID = url.toExternalForm();",
      "268:         InputSource source = new InputSource(systemID);",
      "269:         if (this.encoding != null) {",
      "270:             source.setEncoding(this.encoding);",
      "271:         }",
      "273:         return read(source);",
      "274:     }",
      "297:     public Document read(String systemId) throws DocumentException {",
      "298:         InputSource source = new InputSource(systemId);",
      "299:         if (this.encoding != null) {",
      "300:             source.setEncoding(this.encoding);",
      "301:         }",
      "303:         return read(source);",
      "304:     }",
      "319:     public Document read(InputStream in) throws DocumentException {",
      "320:         InputSource source = new InputSource(in);",
      "321:         if (this.encoding != null) {",
      "322:             source.setEncoding(this.encoding);",
      "323:         }",
      "325:         return read(source);",
      "326:     }",
      "339:     public Document read(Reader reader) throws DocumentException {",
      "340:         InputSource source = new InputSource(reader);",
      "341:         if (this.encoding != null) {",
      "342:             source.setEncoding(this.encoding);",
      "343:         }",
      "345:         return read(source);",
      "346:     }",
      "363:     public Document read(InputStream in, String systemId)",
      "364:             throws DocumentException {",
      "365:         InputSource source = new InputSource(in);",
      "366:         source.setSystemId(systemId);",
      "367:         if (this.encoding != null) {",
      "368:             source.setEncoding(this.encoding);",
      "369:         }",
      "371:         return read(source);",
      "372:     }",
      "389:     public Document read(Reader reader, String systemId)",
      "390:             throws DocumentException {",
      "391:         InputSource source = new InputSource(reader);",
      "392:         source.setSystemId(systemId);",
      "393:         if (this.encoding != null) {",
      "394:             source.setEncoding(this.encoding);",
      "395:         }",
      "397:         return read(source);",
      "398:     }",
      "413:     public Document read(InputSource in) throws DocumentException {",
      "414:         try {",
      "415:             XMLReader reader = getXMLReader();",
      "417:             reader = installXMLFilter(reader);",
      "419:             EntityResolver thatEntityResolver = this.entityResolver;",
      "421:             if (thatEntityResolver == null) {",
      "422:                 thatEntityResolver = createDefaultEntityResolver(in",
      "423:                         .getSystemId());",
      "424:                 this.entityResolver = thatEntityResolver;",
      "425:             }",
      "427:             reader.setEntityResolver(thatEntityResolver);",
      "429:             SAXContentHandler contentHandler = createContentHandler(reader);",
      "430:             contentHandler.setEntityResolver(thatEntityResolver);",
      "431:             contentHandler.setInputSource(in);",
      "433:             boolean internal = isIncludeInternalDTDDeclarations();",
      "434:             boolean external = isIncludeExternalDTDDeclarations();",
      "436:             contentHandler.setIncludeInternalDTDDeclarations(internal);",
      "437:             contentHandler.setIncludeExternalDTDDeclarations(external);",
      "438:             contentHandler.setMergeAdjacentText(isMergeAdjacentText());",
      "439:             contentHandler.setStripWhitespaceText(isStripWhitespaceText());",
      "440:             contentHandler.setIgnoreComments(isIgnoreComments());",
      "441:             reader.setContentHandler(contentHandler);",
      "443:             configureReader(reader, contentHandler);",
      "445:             reader.parse(in);",
      "447:             return contentHandler.getDocument();",
      "448:         } catch (Exception e) {",
      "449:             if (e instanceof SAXParseException) {",
      "451:                 SAXParseException parseException = (SAXParseException) e;",
      "452:                 String systemId = parseException.getSystemId();",
      "454:                 if (systemId == null) {",
      "455:                     systemId = \"\";",
      "456:                 }",
      "458:                 String message = \"Error on line \"",
      "459:                         + parseException.getLineNumber() + \" of document \"",
      "460:                         + systemId + \" : \" + parseException.getMessage();",
      "462:                 throw new DocumentException(message, e);",
      "463:             } else {",
      "464:                 throw new DocumentException(e.getMessage(), e);",
      "465:             }",
      "467:     }",
      "478:     public boolean isValidating() {",
      "479:         return validating;",
      "480:     }",
      "488:     public void setValidation(boolean validation) {",
      "489:         this.validating = validation;",
      "490:     }",
      "498:     public boolean isIncludeInternalDTDDeclarations() {",
      "499:         return includeInternalDTDDeclarations;",
      "500:     }",
      "510:     public void setIncludeInternalDTDDeclarations(boolean include) {",
      "511:         this.includeInternalDTDDeclarations = include;",
      "512:     }",
      "520:     public boolean isIncludeExternalDTDDeclarations() {",
      "521:         return includeExternalDTDDeclarations;",
      "522:     }",
      "532:     public void setIncludeExternalDTDDeclarations(boolean include) {",
      "533:         this.includeExternalDTDDeclarations = include;",
      "534:     }",
      "542:     public boolean isStringInternEnabled() {",
      "543:         return stringInternEnabled;",
      "544:     }",
      "553:     public void setStringInternEnabled(boolean stringInternEnabled) {",
      "554:         this.stringInternEnabled = stringInternEnabled;",
      "555:     }",
      "562:     public boolean isMergeAdjacentText() {",
      "563:         return mergeAdjacentText;",
      "564:     }",
      "573:     public void setMergeAdjacentText(boolean mergeAdjacentText) {",
      "574:         this.mergeAdjacentText = mergeAdjacentText;",
      "575:     }",
      "583:     public boolean isStripWhitespaceText() {",
      "584:         return stripWhitespaceText;",
      "585:     }",
      "594:     public void setStripWhitespaceText(boolean stripWhitespaceText) {",
      "595:         this.stripWhitespaceText = stripWhitespaceText;",
      "596:     }",
      "603:     public boolean isIgnoreComments() {",
      "604:         return ignoreComments;",
      "605:     }",
      "613:     public void setIgnoreComments(boolean ignoreComments) {",
      "614:         this.ignoreComments = ignoreComments;",
      "615:     }",
      "623:     public DocumentFactory getDocumentFactory() {",
      "624:         if (factory == null) {",
      "625:             factory = DocumentFactory.getInstance();",
      "626:         }",
      "628:         return factory;",
      "629:     }",
      "642:     public void setDocumentFactory(DocumentFactory documentFactory) {",
      "643:         this.factory = documentFactory;",
      "644:     }",
      "651:     public ErrorHandler getErrorHandler() {",
      "652:         return errorHandler;",
      "653:     }",
      "662:     public void setErrorHandler(ErrorHandler errorHandler) {",
      "663:         this.errorHandler = errorHandler;",
      "664:     }",
      "671:     public EntityResolver getEntityResolver() {",
      "672:         return entityResolver;",
      "673:     }",
      "681:     public void setEntityResolver(EntityResolver entityResolver) {",
      "682:         this.entityResolver = entityResolver;",
      "683:     }",
      "693:     public XMLReader getXMLReader() throws SAXException {",
      "694:         if (xmlReader == null) {",
      "695:             xmlReader = createXMLReader();",
      "696:         }",
      "698:         return xmlReader;",
      "699:     }",
      "707:     public void setXMLReader(XMLReader reader) {",
      "708:         this.xmlReader = reader;",
      "709:     }",
      "718:     public String getEncoding() {",
      "719:         return encoding;",
      "720:     }",
      "728:     public void setEncoding(String encoding) {",
      "729:         this.encoding = encoding;",
      "730:     }",
      "743:     public void setXMLReaderClassName(String xmlReaderClassName)",
      "744:             throws SAXException {",
      "745:         setXMLReader(XMLReaderFactory.createXMLReader(xmlReaderClassName));",
      "746:     }",
      "758:     public void addHandler(String path, ElementHandler handler) {",
      "759:         getDispatchHandler().addHandler(path, handler);",
      "760:     }",
      "769:     public void removeHandler(String path) {",
      "770:         getDispatchHandler().removeHandler(path);",
      "771:     }",
      "782:     public void setDefaultHandler(ElementHandler handler) {",
      "783:         getDispatchHandler().setDefaultHandler(handler);",
      "784:     }",
      "791:     public void resetHandlers() {",
      "792:         getDispatchHandler().resetHandlers();",
      "793:     }",
      "800:     public XMLFilter getXMLFilter() {",
      "801:         return xmlFilter;",
      "802:     }",
      "810:     public void setXMLFilter(XMLFilter filter) {",
      "811:         this.xmlFilter = filter;",
      "812:     }",
      "827:     protected XMLReader installXMLFilter(XMLReader reader) {",
      "828:         XMLFilter filter = getXMLFilter();",
      "830:         if (filter != null) {",
      "832:             XMLFilter root = filter;",
      "834:             while (true) {",
      "835:                 XMLReader parent = root.getParent();",
      "837:                 if (parent instanceof XMLFilter) {",
      "838:                     root = (XMLFilter) parent;",
      "839:                 } else {",
      "840:                     break;",
      "841:                 }",
      "842:             }",
      "844:             root.setParent(reader);",
      "846:             return filter;",
      "847:         }",
      "849:         return reader;",
      "850:     }",
      "852:     protected DispatchHandler getDispatchHandler() {",
      "853:         if (dispatchHandler == null) {",
      "854:             dispatchHandler = new DispatchHandler();",
      "855:         }",
      "857:         return dispatchHandler;",
      "858:     }",
      "860:     protected void setDispatchHandler(DispatchHandler dispatchHandler) {",
      "861:         this.dispatchHandler = dispatchHandler;",
      "862:     }",
      "873:     protected XMLReader createXMLReader() throws SAXException {",
      "874:         return SAXHelper.createXMLReader(isValidating());",
      "875:     }",
      "888:     protected void configureReader(XMLReader reader, DefaultHandler handler)",
      "889:             throws DocumentException {",
      "891:         SAXHelper.setParserProperty(reader, SAX_LEXICALHANDLER, handler);",
      "894:         SAXHelper.setParserProperty(reader, SAX_LEXICAL_HANDLER, handler);",
      "897:         if (includeInternalDTDDeclarations || includeExternalDTDDeclarations) {",
      "898:             SAXHelper.setParserProperty(reader, SAX_DECL_HANDLER, handler);",
      "899:         }",
      "902:         SAXHelper.setParserFeature(reader, SAX_STRING_INTERNING,",
      "903:                 isStringInternEnabled());",
      "905:         try {",
      "907:             reader.setFeature(\"http://xml.org/sax/features/validation\",",
      "908:                     isValidating());",
      "910:             if (errorHandler != null) {",
      "911:                 reader.setErrorHandler(errorHandler);",
      "912:             } else {",
      "913:                 reader.setErrorHandler(handler);",
      "914:             }",
      "915:         } catch (Exception e) {",
      "916:             if (isValidating()) {",
      "917:                 throw new DocumentException(\"Validation not supported for\"",
      "918:                         + \" XMLReader: \" + reader, e);",
      "919:             }",
      "920:         }",
      "921:     }",
      "931:     protected SAXContentHandler createContentHandler(XMLReader reader) {",
      "932:         return new SAXContentHandler(getDocumentFactory(), dispatchHandler);",
      "933:     }",
      "935:     protected EntityResolver createDefaultEntityResolver(String systemId) {",
      "936:         String prefix = null;",
      "938:         if ((systemId != null) && (systemId.length() > 0)) {",
      "939:             int idx = systemId.lastIndexOf('/');",
      "941:             if (idx > 0) {",
      "942:                 prefix = systemId.substring(0, idx + 1);",
      "943:             }",
      "944:         }",
      "946:         return new SAXEntityResolver(prefix);",
      "947:     }",
      "949:     protected static class SAXEntityResolver implements EntityResolver,",
      "950:             Serializable {",
      "951:         protected String uriPrefix;",
      "953:         public SAXEntityResolver(String uriPrefix) {",
      "954:             this.uriPrefix = uriPrefix;",
      "955:         }",
      "957:         public InputSource resolveEntity(String publicId, String systemId) {",
      "959:             if ((systemId != null) && (systemId.length() > 0)) {",
      "960:                 if ((uriPrefix != null) && (systemId.indexOf(':') <= 0)) {",
      "961:                     systemId = uriPrefix + systemId;",
      "962:                 }",
      "963:             }",
      "965:             return new InputSource(systemId);",
      "966:         }",
      "",
      "[Added Lines]",
      "68:   private static final String SAX_STRING_INTERNING =",
      "69:           \"http://xml.org/sax/features/string-interning\";",
      "70:   private static final String SAX_DECL_HANDLER =",
      "71:           \"http://xml.org/sax/properties/declaration-handler\";",
      "72:   private static final String SAX_LEXICAL_HANDLER =",
      "73:           \"http://xml.org/sax/properties/lexical-handler\";",
      "74:   private static final String SAX_LEXICALHANDLER =",
      "75:           \"http://xml.org/sax/handlers/LexicalHandler\";",
      "80:   private DocumentFactory factory;",
      "85:   private XMLReader xmlReader;",
      "90:   private boolean validating;",
      "95:   private DispatchHandler dispatchHandler;",
      "100:   private ErrorHandler errorHandler;",
      "105:   private EntityResolver entityResolver;",
      "110:   private boolean stringInternEnabled = true;",
      "115:   private boolean includeInternalDTDDeclarations = false;",
      "120:   private boolean includeExternalDTDDeclarations = false;",
      "125:   private boolean mergeAdjacentText = false;",
      "130:   private boolean stripWhitespaceText = false;",
      "135:   private boolean ignoreComments = false;",
      "140:   private String encoding = null;",
      "150:   private XMLFilter xmlFilter;",
      "152:   public static SAXReader createDefault() {",
      "153:     SAXReader reader = new SAXReader();",
      "154:     try {",
      "155:       reader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
      "156:       reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);",
      "157:       reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);",
      "158:     } catch (SAXException e) {",
      "160:     }",
      "161:     return reader;",
      "162:   }",
      "174:   public SAXReader() {",
      "175:   }",
      "189:   public SAXReader(boolean validating) {",
      "190:     this.validating = validating;",
      "191:   }",
      "205:   public SAXReader(DocumentFactory factory) {",
      "206:     this.factory = factory;",
      "207:   }",
      "222:   public SAXReader(DocumentFactory factory, boolean validating) {",
      "223:     this.factory = factory;",
      "224:     this.validating = validating;",
      "225:   }",
      "227:   public SAXReader(XMLReader xmlReader) {",
      "228:     this.xmlReader = xmlReader;",
      "229:   }",
      "231:   public SAXReader(XMLReader xmlReader, boolean validating) {",
      "232:     this.xmlReader = xmlReader;",
      "233:     this.validating = validating;",
      "234:   }",
      "236:   public SAXReader(String xmlReaderClassName) throws SAXException {",
      "237:     if (xmlReaderClassName != null) {",
      "238:       this.xmlReader = XMLReaderFactory",
      "239:               .createXMLReader(xmlReaderClassName);",
      "240:     }",
      "241:   }",
      "243:   public SAXReader(String xmlReaderClassName, boolean validating)",
      "244:           throws SAXException {",
      "245:     if (xmlReaderClassName != null) {",
      "246:       this.xmlReader = XMLReaderFactory",
      "247:               .createXMLReader(xmlReaderClassName);",
      "248:     }",
      "250:     this.validating = validating;",
      "251:   }",
      "266:   public void setProperty(String name, Object value) throws SAXException {",
      "267:     getXMLReader().setProperty(name, value);",
      "268:   }",
      "282:   public void setFeature(String name, boolean value) throws SAXException {",
      "283:     getXMLReader().setFeature(name, value);",
      "284:   }",
      "295:   public Document read(File file) throws DocumentException {",
      "296:     try {",
      "304:       InputSource source = new InputSource(new FileInputStream(file));",
      "305:       if (this.encoding != null) {",
      "306:         source.setEncoding(this.encoding);",
      "307:       }",
      "308:       String path = file.getAbsolutePath();",
      "310:       if (path != null) {",
      "312:         StringBuffer sb = new StringBuffer(\"file://\");",
      "315:         if (!path.startsWith(File.separator)) {",
      "316:           sb.append(\"/\");",
      "319:         path = path.replace('\\\\', '/');",
      "320:         sb.append(path);",
      "322:         source.setSystemId(sb.toString());",
      "323:       }",
      "325:       return read(source);",
      "326:     } catch (FileNotFoundException e) {",
      "327:       throw new DocumentException(e.getMessage(), e);",
      "328:     }",
      "329:   }",
      "340:   public Document read(URL url) throws DocumentException {",
      "341:     String systemID = url.toExternalForm();",
      "343:     InputSource source = new InputSource(systemID);",
      "344:     if (this.encoding != null) {",
      "345:       source.setEncoding(this.encoding);",
      "346:     }",
      "348:     return read(source);",
      "349:   }",
      "368:   public Document read(String systemId) throws DocumentException {",
      "369:     InputSource source = new InputSource(systemId);",
      "370:     if (this.encoding != null) {",
      "371:       source.setEncoding(this.encoding);",
      "372:     }",
      "374:     return read(source);",
      "375:   }",
      "386:   public Document read(InputStream in) throws DocumentException {",
      "387:     InputSource source = new InputSource(in);",
      "388:     if (this.encoding != null) {",
      "389:       source.setEncoding(this.encoding);",
      "390:     }",
      "392:     return read(source);",
      "393:   }",
      "402:   public Document read(Reader reader) throws DocumentException {",
      "403:     InputSource source = new InputSource(reader);",
      "404:     if (this.encoding != null) {",
      "405:       source.setEncoding(this.encoding);",
      "406:     }",
      "408:     return read(source);",
      "409:   }",
      "421:   public Document read(InputStream in, String systemId)",
      "422:           throws DocumentException {",
      "423:     InputSource source = new InputSource(in);",
      "424:     source.setSystemId(systemId);",
      "425:     if (this.encoding != null) {",
      "426:       source.setEncoding(this.encoding);",
      "427:     }",
      "429:     return read(source);",
      "430:   }",
      "442:   public Document read(Reader reader, String systemId)",
      "443:           throws DocumentException {",
      "444:     InputSource source = new InputSource(reader);",
      "445:     source.setSystemId(systemId);",
      "446:     if (this.encoding != null) {",
      "447:       source.setEncoding(this.encoding);",
      "448:     }",
      "450:     return read(source);",
      "451:   }",
      "462:   public Document read(InputSource in) throws DocumentException {",
      "463:     try {",
      "464:       XMLReader reader = getXMLReader();",
      "466:       reader = installXMLFilter(reader);",
      "468:       EntityResolver thatEntityResolver = this.entityResolver;",
      "470:       if (thatEntityResolver == null) {",
      "471:         thatEntityResolver = createDefaultEntityResolver(in",
      "472:                 .getSystemId());",
      "473:         this.entityResolver = thatEntityResolver;",
      "474:       }",
      "476:       reader.setEntityResolver(thatEntityResolver);",
      "478:       SAXContentHandler contentHandler = createContentHandler(reader);",
      "479:       contentHandler.setEntityResolver(thatEntityResolver);",
      "480:       contentHandler.setInputSource(in);",
      "482:       boolean internal = isIncludeInternalDTDDeclarations();",
      "483:       boolean external = isIncludeExternalDTDDeclarations();",
      "485:       contentHandler.setIncludeInternalDTDDeclarations(internal);",
      "486:       contentHandler.setIncludeExternalDTDDeclarations(external);",
      "487:       contentHandler.setMergeAdjacentText(isMergeAdjacentText());",
      "488:       contentHandler.setStripWhitespaceText(isStripWhitespaceText());",
      "489:       contentHandler.setIgnoreComments(isIgnoreComments());",
      "490:       reader.setContentHandler(contentHandler);",
      "492:       configureReader(reader, contentHandler);",
      "494:       reader.parse(in);",
      "496:       return contentHandler.getDocument();",
      "497:     } catch (Exception e) {",
      "498:       if (e instanceof SAXParseException) {",
      "500:         SAXParseException parseException = (SAXParseException) e;",
      "501:         String systemId = parseException.getSystemId();",
      "503:         if (systemId == null) {",
      "504:           systemId = \"\";",
      "507:         String message = \"Error on line \"",
      "508:                 + parseException.getLineNumber() + \" of document \"",
      "509:                 + systemId + \" : \" + parseException.getMessage();",
      "511:         throw new DocumentException(message, e);",
      "512:       } else {",
      "513:         throw new DocumentException(e.getMessage(), e);",
      "514:       }",
      "515:     }",
      "516:   }",
      "527:   public boolean isValidating() {",
      "528:     return validating;",
      "529:   }",
      "536:   public void setValidation(boolean validation) {",
      "537:     this.validating = validation;",
      "538:   }",
      "546:   public boolean isIncludeInternalDTDDeclarations() {",
      "547:     return includeInternalDTDDeclarations;",
      "548:   }",
      "557:   public void setIncludeInternalDTDDeclarations(boolean include) {",
      "558:     this.includeInternalDTDDeclarations = include;",
      "559:   }",
      "567:   public boolean isIncludeExternalDTDDeclarations() {",
      "568:     return includeExternalDTDDeclarations;",
      "569:   }",
      "578:   public void setIncludeExternalDTDDeclarations(boolean include) {",
      "579:     this.includeExternalDTDDeclarations = include;",
      "580:   }",
      "588:   public boolean isStringInternEnabled() {",
      "589:     return stringInternEnabled;",
      "590:   }",
      "598:   public void setStringInternEnabled(boolean stringInternEnabled) {",
      "599:     this.stringInternEnabled = stringInternEnabled;",
      "600:   }",
      "607:   public boolean isMergeAdjacentText() {",
      "608:     return mergeAdjacentText;",
      "609:   }",
      "617:   public void setMergeAdjacentText(boolean mergeAdjacentText) {",
      "618:     this.mergeAdjacentText = mergeAdjacentText;",
      "619:   }",
      "627:   public boolean isStripWhitespaceText() {",
      "628:     return stripWhitespaceText;",
      "629:   }",
      "637:   public void setStripWhitespaceText(boolean stripWhitespaceText) {",
      "638:     this.stripWhitespaceText = stripWhitespaceText;",
      "639:   }",
      "646:   public boolean isIgnoreComments() {",
      "647:     return ignoreComments;",
      "648:   }",
      "655:   public void setIgnoreComments(boolean ignoreComments) {",
      "656:     this.ignoreComments = ignoreComments;",
      "657:   }",
      "665:   public DocumentFactory getDocumentFactory() {",
      "666:     if (factory == null) {",
      "667:       factory = DocumentFactory.getInstance();",
      "668:     }",
      "670:     return factory;",
      "671:   }",
      "683:   public void setDocumentFactory(DocumentFactory documentFactory) {",
      "684:     this.factory = documentFactory;",
      "685:   }",
      "692:   public ErrorHandler getErrorHandler() {",
      "693:     return errorHandler;",
      "694:   }",
      "702:   public void setErrorHandler(ErrorHandler errorHandler) {",
      "703:     this.errorHandler = errorHandler;",
      "704:   }",
      "711:   public EntityResolver getEntityResolver() {",
      "712:     return entityResolver;",
      "713:   }",
      "720:   public void setEntityResolver(EntityResolver entityResolver) {",
      "721:     this.entityResolver = entityResolver;",
      "722:   }",
      "730:   public XMLReader getXMLReader() throws SAXException {",
      "731:     if (xmlReader == null) {",
      "732:       xmlReader = createXMLReader();",
      "733:     }",
      "735:     return xmlReader;",
      "736:   }",
      "743:   public void setXMLReader(XMLReader reader) {",
      "744:     this.xmlReader = reader;",
      "745:   }",
      "753:   public String getEncoding() {",
      "754:     return encoding;",
      "755:   }",
      "762:   public void setEncoding(String encoding) {",
      "763:     this.encoding = encoding;",
      "764:   }",
      "774:   public void setXMLReaderClassName(String xmlReaderClassName)",
      "775:           throws SAXException {",
      "776:     setXMLReader(XMLReaderFactory.createXMLReader(xmlReaderClassName));",
      "777:   }",
      "787:   public void addHandler(String path, ElementHandler handler) {",
      "788:     getDispatchHandler().addHandler(path, handler);",
      "789:   }",
      "797:   public void removeHandler(String path) {",
      "798:     getDispatchHandler().removeHandler(path);",
      "799:   }",
      "809:   public void setDefaultHandler(ElementHandler handler) {",
      "810:     getDispatchHandler().setDefaultHandler(handler);",
      "811:   }",
      "818:   public void resetHandlers() {",
      "819:     getDispatchHandler().resetHandlers();",
      "820:   }",
      "827:   public XMLFilter getXMLFilter() {",
      "828:     return xmlFilter;",
      "829:   }",
      "836:   public void setXMLFilter(XMLFilter filter) {",
      "837:     this.xmlFilter = filter;",
      "838:   }",
      "851:   protected XMLReader installXMLFilter(XMLReader reader) {",
      "852:     XMLFilter filter = getXMLFilter();",
      "854:     if (filter != null) {",
      "856:       XMLFilter root = filter;",
      "858:       while (true) {",
      "859:         XMLReader parent = root.getParent();",
      "861:         if (parent instanceof XMLFilter) {",
      "862:           root = (XMLFilter) parent;",
      "863:         } else {",
      "864:           break;",
      "866:       }",
      "868:       root.setParent(reader);",
      "870:       return filter;",
      "873:     return reader;",
      "874:   }",
      "876:   protected DispatchHandler getDispatchHandler() {",
      "877:     if (dispatchHandler == null) {",
      "878:       dispatchHandler = new DispatchHandler();",
      "879:     }",
      "881:     return dispatchHandler;",
      "882:   }",
      "884:   protected void setDispatchHandler(DispatchHandler dispatchHandler) {",
      "885:     this.dispatchHandler = dispatchHandler;",
      "886:   }",
      "895:   protected XMLReader createXMLReader() throws SAXException {",
      "896:     return SAXHelper.createXMLReader(isValidating());",
      "897:   }",
      "906:   protected void configureReader(XMLReader reader, DefaultHandler handler)",
      "907:           throws DocumentException {",
      "909:     SAXHelper.setParserProperty(reader, SAX_LEXICALHANDLER, handler);",
      "912:     SAXHelper.setParserProperty(reader, SAX_LEXICAL_HANDLER, handler);",
      "915:     if (includeInternalDTDDeclarations || includeExternalDTDDeclarations) {",
      "916:       SAXHelper.setParserProperty(reader, SAX_DECL_HANDLER, handler);",
      "917:     }",
      "920:     SAXHelper.setParserFeature(reader, SAX_STRING_INTERNING,",
      "921:             isStringInternEnabled());",
      "923:     try {",
      "925:       reader.setFeature(\"http://xml.org/sax/features/validation\",",
      "926:               isValidating());",
      "928:       if (errorHandler != null) {",
      "929:         reader.setErrorHandler(errorHandler);",
      "930:       } else {",
      "931:         reader.setErrorHandler(handler);",
      "932:       }",
      "933:     } catch (Exception e) {",
      "934:       if (isValidating()) {",
      "935:         throw new DocumentException(\"Validation not supported for\"",
      "936:                 + \" XMLReader: \" + reader, e);",
      "937:       }",
      "938:     }",
      "939:   }",
      "947:   protected SAXContentHandler createContentHandler(XMLReader reader) {",
      "948:     return new SAXContentHandler(getDocumentFactory(), dispatchHandler);",
      "949:   }",
      "951:   protected EntityResolver createDefaultEntityResolver(String systemId) {",
      "952:     String prefix = null;",
      "954:     if ((systemId != null) && (systemId.length() > 0)) {",
      "955:       int idx = systemId.lastIndexOf('/');",
      "957:       if (idx > 0) {",
      "958:         prefix = systemId.substring(0, idx + 1);",
      "959:       }",
      "960:     }",
      "962:     return new SAXEntityResolver(prefix);",
      "963:   }",
      "965:   protected static class SAXEntityResolver implements EntityResolver,",
      "966:           Serializable {",
      "967:     protected String uriPrefix;",
      "969:     public SAXEntityResolver(String uriPrefix) {",
      "970:       this.uriPrefix = uriPrefix;",
      "971:     }",
      "973:     public InputSource resolveEntity(String publicId, String systemId) {",
      "975:       if ((systemId != null) && (systemId.length() > 0)) {",
      "976:         if ((uriPrefix != null) && (systemId.indexOf(':') <= 0)) {",
      "977:           systemId = uriPrefix + systemId;",
      "979:       }",
      "981:       return new InputSource(systemId);",
      "983:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1707bf3d898a8ada3b213acb0e3b38f16eaae73d",
      "candidate_info": {
        "commit_hash": "1707bf3d898a8ada3b213acb0e3b38f16eaae73d",
        "repo": "dom4j/dom4j",
        "commit_url": "https://github.com/dom4j/dom4j/commit/1707bf3d898a8ada3b213acb0e3b38f16eaae73d",
        "files": [
          "src/main/java/org/dom4j/DocumentHelper.java"
        ],
        "message": "#28 Disable downloading external resources with DocumentHelper.parseText() helper.\n\n(cherry picked from commit 8f6a7f6001d679176c1079ac65871d4e493360db)",
        "before_after_code_files": [
          "src/main/java/org/dom4j/DocumentHelper.java||src/main/java/org/dom4j/DocumentHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/dom4j/DocumentHelper.java||src/main/java/org/dom4j/DocumentHelper.java"
          ],
          "candidate": [
            "src/main/java/org/dom4j/DocumentHelper.java||src/main/java/org/dom4j/DocumentHelper.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/dom4j/DocumentHelper.java||src/main/java/org/dom4j/DocumentHelper.java": [
          "File: src/main/java/org/dom4j/DocumentHelper.java -> src/main/java/org/dom4j/DocumentHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     public static Document parseText(String text) throws DocumentException {",
          "272:         SAXReader reader = new SAXReader();",
          "273:         String encoding = getEncoding(text);",
          "275:         InputSource source = new InputSource(new StringReader(text));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:         try {",
          "274:             reader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
          "275:             reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);",
          "276:             reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);",
          "277:         } catch (SAXException e) {",
          "279:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a16aaa7a192f5e5258dd941cb6a4344c1ca80839",
      "candidate_info": {
        "commit_hash": "a16aaa7a192f5e5258dd941cb6a4344c1ca80839",
        "repo": "dom4j/dom4j",
        "commit_url": "https://github.com/dom4j/dom4j/commit/a16aaa7a192f5e5258dd941cb6a4344c1ca80839",
        "files": [
          "src/main/java/org/dom4j/io/SAXHelper.java",
          "src/main/java/org/dom4j/io/SAXReader.java",
          "src/test/java/org/dom4j/io/DTDTest.java"
        ],
        "message": "#44 Default SAXParser features are set when SAXParser is created, so they can be overriden.\n\n(cherry picked from commit 161078a8a520dcd1db6d451190f2434d56547664)",
        "before_after_code_files": [
          "src/main/java/org/dom4j/io/SAXHelper.java||src/main/java/org/dom4j/io/SAXHelper.java",
          "src/main/java/org/dom4j/io/SAXReader.java||src/main/java/org/dom4j/io/SAXReader.java",
          "src/test/java/org/dom4j/io/DTDTest.java||src/test/java/org/dom4j/io/DTDTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/dom4j/io/SAXHelper.java||src/main/java/org/dom4j/io/SAXHelper.java",
            "src/main/java/org/dom4j/io/SAXReader.java||src/main/java/org/dom4j/io/SAXReader.java"
          ],
          "candidate": [
            "src/main/java/org/dom4j/io/SAXHelper.java||src/main/java/org/dom4j/io/SAXHelper.java",
            "src/main/java/org/dom4j/io/SAXReader.java||src/main/java/org/dom4j/io/SAXReader.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/dom4j/io/SAXHelper.java||src/main/java/org/dom4j/io/SAXHelper.java": [
          "File: src/main/java/org/dom4j/io/SAXHelper.java -> src/main/java/org/dom4j/io/SAXHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:             throw new SAXException(\"Couldn't create SAX reader\");",
          "104:         }",
          "106:         return reader;",
          "107:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:         SAXHelper.setParserFeature(reader, \"http://xml.org/sax/features/namespaces\", true);",
          "108:         SAXHelper.setParserFeature(reader, \"http://xml.org/sax/features/namespace-prefixes\", false);",
          "115:         SAXHelper.setParserFeature(reader,\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
          "119:         SAXHelper.setParserFeature(reader,\"http://xml.org/sax/features/use-locator2\", true);",
          "",
          "---------------"
        ],
        "src/main/java/org/dom4j/io/SAXReader.java||src/main/java/org/dom4j/io/SAXReader.java": [
          "File: src/main/java/org/dom4j/io/SAXReader.java -> src/main/java/org/dom4j/io/SAXReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: public class SAXReader {",
          "66:     private static final String SAX_STRING_INTERNING =",
          "67:             \"http://xml.org/sax/features/string-interning\";",
          "73:             \"http://xml.org/sax/properties/declaration-handler\";",
          "74:     private static final String SAX_LEXICAL_HANDLER =",
          "75:             \"http://xml.org/sax/properties/lexical-handler\";",
          "",
          "[Removed Lines]",
          "68:     private static final String SAX_NAMESPACE_PREFIXES =",
          "69:             \"http://xml.org/sax/features/namespace-prefixes\";",
          "70:     private static final String SAX_NAMESPACES =",
          "71:             \"http://xml.org/sax/features/namespaces\";",
          "72:     private static final String SAX_DECL_HANDLER =",
          "",
          "[Added Lines]",
          "68:     private static final String SAX_DECL_HANDLER =",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:             SAXHelper.setParserProperty(reader, SAX_DECL_HANDLER, handler);",
          "903:         }",
          "911:         SAXHelper.setParserFeature(reader, SAX_STRING_INTERNING,",
          "912:                 isStringInternEnabled());",
          "926:         try {",
          "928:             reader.setFeature(\"http://xml.org/sax/features/validation\",",
          "",
          "[Removed Lines]",
          "906:         SAXHelper.setParserFeature(reader, SAX_NAMESPACES, true);",
          "908:         SAXHelper.setParserFeature(reader, SAX_NAMESPACE_PREFIXES, false);",
          "923:         SAXHelper.setParserFeature(reader,",
          "924:                 \"http://xml.org/sax/features/use-locator2\", true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/java/org/dom4j/io/DTDTest.java||src/test/java/org/dom4j/io/DTDTest.java": [
          "File: src/test/java/org/dom4j/io/DTDTest.java -> src/test/java/org/dom4j/io/DTDTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         reader.setEntityResolver(new MyEntityResolver(DTD_FILE,",
          "446:                 DTD_PUBLICID, DTD_SYSTEM_ID));",
          "448:         return getDocument(resourceName, reader);",
          "449:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:         reader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}