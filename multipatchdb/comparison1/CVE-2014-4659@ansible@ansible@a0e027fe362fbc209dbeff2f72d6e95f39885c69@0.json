{
  "cve_id": "CVE-2014-4659",
  "cve_desc": "Ansible before 1.5.5 sets 0644 permissions for sources.list, which might allow local users to obtain sensitive credential information in opportunistic circumstances by reading a file that uses the \"deb http://user:pass@server:port/\" format.",
  "repo": "ansible/ansible",
  "patch_hash": "a0e027fe362fbc209dbeff2f72d6e95f39885c69",
  "patch_info": {
    "commit_hash": "a0e027fe362fbc209dbeff2f72d6e95f39885c69",
    "repo": "ansible/ansible",
    "commit_url": "https://github.com/ansible/ansible/commit/a0e027fe362fbc209dbeff2f72d6e95f39885c69",
    "files": [
      "lib/ansible/utils/vault.py"
    ],
    "message": "Make sure umask is set restrictively before creating any vault files",
    "before_after_code_files": [
      "lib/ansible/utils/vault.py||lib/ansible/utils/vault.py"
    ]
  },
  "patch_diff": {
    "lib/ansible/utils/vault.py||lib/ansible/utils/vault.py": [
      "File: lib/ansible/utils/vault.py -> lib/ansible/utils/vault.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:             raise errors.AnsibleError(\"%s exists, please use 'edit' instead\" % self.filename)",
      "191:         # drop the user into vim on file",
      "192:         EDITOR = os.environ.get('EDITOR','vim')",
      "193:         call([EDITOR, self.filename])",
      "194:         tmpdata = self.read_data(self.filename)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:         old_umask = os.umask(0077)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "196:         this_vault.cipher_name = self.cipher_name",
      "197:         enc_data = this_vault.encrypt(tmpdata)",
      "198:         self.write_data(enc_data, self.filename)",
      "200:     def decrypt_file(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "200:         os.umask(old_umask)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "218:         if not HAS_AES or not HAS_COUNTER or not HAS_PBKDF2 or not HAS_HASH:",
      "219:             raise errors.AnsibleError(CRYPTO_UPGRADE)",
      "221:         # decrypt to tmpfile",
      "222:         tmpdata = self.read_data(self.filename)",
      "223:         this_vault = VaultLib(self.password)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:         # make sure the umask is set to a sane value",
      "224:         old_mask = os.umask(0077)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "243:         # shuffle tmp file into place",
      "244:         self.shuffle_files(tmp_path, self.filename)",
      "246:     def encrypt_file(self):",
      "248:         if not HAS_AES or not HAS_COUNTER or not HAS_PBKDF2 or not HAS_HASH:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:         # and restore the old umask",
      "252:         os.umask(old_mask)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75e0b7a5cf805217a9365b995c5b99ed12aea5af",
      "candidate_info": {
        "commit_hash": "75e0b7a5cf805217a9365b995c5b99ed12aea5af",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/75e0b7a5cf805217a9365b995c5b99ed12aea5af",
        "files": [
          "lib/ansible/utils/vault.py"
        ],
        "message": "Make sure umask is set restrictively before creating any vault files",
        "before_after_code_files": [
          "lib/ansible/utils/vault.py||lib/ansible/utils/vault.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/utils/vault.py||lib/ansible/utils/vault.py"
          ],
          "candidate": [
            "lib/ansible/utils/vault.py||lib/ansible/utils/vault.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/utils/vault.py||lib/ansible/utils/vault.py": [
          "File: lib/ansible/utils/vault.py -> lib/ansible/utils/vault.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:             raise errors.AnsibleError(\"%s exists, please use 'edit' instead\" % self.filename)",
          "193:         # drop the user into vim on file",
          "194:         call(self._editor_shell_command(self.filename))",
          "195:         tmpdata = self.read_data(self.filename)",
          "196:         this_vault = VaultLib(self.password)",
          "197:         this_vault.cipher_name = self.cipher_name",
          "198:         enc_data = this_vault.encrypt(tmpdata)",
          "199:         self.write_data(enc_data, self.filename)",
          "201:     def decrypt_file(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:         old_umask = os.umask(0077)",
          "201:         os.umask(old_umask)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:         if not HAS_AES or not HAS_COUNTER or not HAS_PBKDF2 or not HAS_HASH:",
          "223:             raise errors.AnsibleError(CRYPTO_UPGRADE)",
          "225:         # decrypt to tmpfile",
          "226:         tmpdata = self.read_data(self.filename)",
          "227:         this_vault = VaultLib(self.password)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:         # make sure the umask is set to a sane value",
          "228:         old_mask = os.umask(0077)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:         # shuffle tmp file into place",
          "247:         self.shuffle_files(tmp_path, self.filename)",
          "249:     def encrypt_file(self):",
          "251:         if not HAS_AES or not HAS_COUNTER or not HAS_PBKDF2 or not HAS_HASH:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:         # and restore the old umask",
          "255:         os.umask(old_mask)",
          "",
          "---------------"
        ]
      }
    }
  ]
}