{
  "cve_id": "CVE-2021-41268",
  "cve_desc": "Symfony/SecurityBundle is the security system for Symfony, a PHP framework for web and console applications and a set of reusable PHP components. Since the rework of the Remember me cookie in version 5.3.0, the cookie is not invalidated when the user changes their password. Attackers can therefore maintain their access to the account even if the password is changed as long as they have had the chance to login once and get a valid remember me cookie. Starting with version 5.3.12, Symfony makes the password part of the signature by default. In that way, when the password changes, then the cookie is not valid anymore.",
  "repo": "symfony/symfony",
  "patch_hash": "36a808b857cd3240244f4b224452fb1e70dc6dfc",
  "patch_info": {
    "commit_hash": "36a808b857cd3240244f4b224452fb1e70dc6dfc",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/36a808b857cd3240244f4b224452fb1e70dc6dfc",
    "files": [
      "src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php",
      "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php",
      "src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php"
    ],
    "message": "[SecurityBundle] Default signature_properties to the previous behavior",
    "before_after_code_files": [
      "src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php",
      "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php",
      "src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php": [
      "File: src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php -> src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/RememberMeFactory.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:                 ->requiresAtLeastOneElement()",
      "209:                 ->info('An array of properties on your User that are used to sign the remember-me cookie. If any of these change, all existing cookies will become invalid.')",
      "210:                 ->example(['email', 'password'])",
      "211:             ->end()",
      "212:             ->arrayNode('token_provider')",
      "213:                 ->beforeNormalization()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211:                 ->defaultValue(['password'])",
      "",
      "---------------"
    ],
    "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php": [
      "File: src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php -> src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: {",
      "22:     private $inner;",
      "24:     public function __construct(InMemoryUserProvider $inner)",
      "25:     {",
      "26:         $this->inner = $inner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     public static $changePassword = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:     public function loadUserByUsername($username)",
      "30:     {",
      "32:     }",
      "34:     public function loadUserByIdentifier(string $userIdentifier): UserInterface",
      "35:     {",
      "37:     }",
      "39:     public function refreshUser(UserInterface $user)",
      "40:     {",
      "47:     }",
      "49:     public function supportsClass($class)",
      "50:     {",
      "51:         return $this->inner->supportsClass($class);",
      "52:     }",
      "53: }",
      "",
      "[Removed Lines]",
      "31:         return $this->inner->loadUserByUsername($username);",
      "36:         return $this->inner->loadUserByIdentifier($userIdentifier);",
      "41:         $user = $this->inner->refreshUser($user);",
      "43:         $alterUser = \\Closure::bind(function (InMemoryUser $user) { $user->password = 'foo'; }, null, class_exists(User::class) ? User::class : InMemoryUser::class);",
      "44:         $alterUser($user);",
      "46:         return $user;",
      "",
      "[Added Lines]",
      "33:         return $this->changeUser($this->inner->loadUserByUsername($username));",
      "38:         return $this->changeUser($this->inner->loadUserByIdentifier($userIdentifier));",
      "43:         return $this->changeUser($this->inner->refreshUser($user));",
      "51:     private function changeUser(UserInterface $user): UserInterface",
      "52:     {",
      "53:         if (self::$changePassword) {",
      "54:             $alterUser = \\Closure::bind(function (InMemoryUser $user) { $user->password = 'changed!'; }, null, class_exists(User::class) ? User::class : InMemoryUser::class);",
      "55:             $alterUser($user);",
      "56:         }",
      "58:         return $user;",
      "59:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php": [
      "File: src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php -> src/Symfony/Bundle/SecurityBundle/Tests/Functional/RememberMeTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: namespace Symfony\\Bundle\\SecurityBundle\\Tests\\Functional;",
      "14: class RememberMeTest extends AbstractWebTestCase",
      "15: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: use Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\Bundle\\RememberMeBundle\\Security\\UserChangingUserProvider;",
      "18:     protected function setUp(): void",
      "19:     {",
      "20:         UserChangingUserProvider::$changePassword = false;",
      "21:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:         $this->assertSame(302, $client->getResponse()->getStatusCode());",
      "53:         $cookieJar = $client->getCookieJar();",
      "56:         $client->request('GET', '/profile');",
      "57:         $this->assertRedirect($client->getResponse(), '/login');",
      "58:         $this->assertNull($cookieJar->get('REMEMBERME'));",
      "59:     }",
      "61:     public function testSessionLessRememberMeLogout()",
      "",
      "[Removed Lines]",
      "54:         $this->assertNotNull($cookieJar->get('REMEMBERME'));",
      "",
      "[Added Lines]",
      "61:         $this->assertNotNull($cookie = $cookieJar->get('REMEMBERME'));",
      "63:         UserChangingUserProvider::$changePassword = true;",
      "71:         $cookieJar->set($cookie);",
      "72:         $client->request('GET', '/profile');",
      "73:         $this->assertRedirect($client->getResponse(), '/login');",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "122:         $this->assertSame(302, $client->getResponse()->getStatusCode());",
      "123:         $cookieJar = $client->getCookieJar();",
      "126:         $client->request('GET', '/profile');",
      "127:         $this->assertRedirect($client->getResponse(), '/login');",
      "128:         $this->assertNull($cookieJar->get('REMEMBERME'));",
      "129:     }",
      "",
      "[Removed Lines]",
      "124:         $this->assertNotNull($cookieJar->get('REMEMBERME'));",
      "",
      "[Added Lines]",
      "139:         $this->assertNotNull($cookie = $cookieJar->get('REMEMBERME'));",
      "141:         UserChangingUserProvider::$changePassword = true;",
      "149:         $cookieJar->set($cookie);",
      "150:         $client->request('GET', '/profile');",
      "151:         $this->assertRedirect($client->getResponse(), '/login');",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca80ee3cd6af13b95c76387d1533a1249e4fab06",
      "candidate_info": {
        "commit_hash": "ca80ee3cd6af13b95c76387d1533a1249e4fab06",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/ca80ee3cd6af13b95c76387d1533a1249e4fab06",
        "files": [
          "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php",
          "src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php",
          "src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php",
          "src/Symfony/Component/Security/Http/Firewall/AccessListener.php",
          "src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php"
        ],
        "message": "[Security] Fix wrong cache directive when using the new PUBLIC_ACCESS attribute",
        "before_after_code_files": [
          "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php",
          "src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php||src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php",
          "src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php||src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php",
          "src/Symfony/Component/Security/Http/Firewall/AccessListener.php||src/Symfony/Component/Security/Http/Firewall/AccessListener.php",
          "src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php||src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php"
          ],
          "candidate": [
            "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php||src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php": [
          "File: src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php -> src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/RememberMeBundle/Security/UserChangingUserProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\Bundle\\RememberMeBundle\\Security;",
          "14: use Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider;",
          "15: use Symfony\\Component\\Security\\Core\\User\\User;",
          "16: use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Symfony\\Component\\Security\\Core\\User\\InMemoryUser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     {",
          "40:         $user = $this->inner->refreshUser($user);",
          "43:         $alterUser($user);",
          "45:         return $user;",
          "",
          "[Removed Lines]",
          "42:         $alterUser = \\Closure::bind(function (User $user) { $user->password = 'foo'; }, null, User::class);",
          "",
          "[Added Lines]",
          "43:         $alterUser = \\Closure::bind(function (InMemoryUser $user) { $user->password = 'foo'; }, null, class_exists(User::class) ? User::class : InMemoryUser::class);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php||src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php": [
          "File: src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php -> src/Symfony/Component/PasswordHasher/Hasher/UserPasswordHasher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         } elseif ($user instanceof UserInterface) {",
          "51:             $salt = $user->getSalt();",
          "54:                 trigger_deprecation('symfony/password-hasher', '5.3', 'Returning a string from \"getSalt()\" without implementing the \"%s\" interface is deprecated, the \"%s\" class should implement it.', LegacyPasswordAuthenticatedUserInterface::class, get_debug_type($user));",
          "55:             }",
          "56:         }",
          "",
          "[Removed Lines]",
          "53:             if (null !== $salt) {",
          "",
          "[Added Lines]",
          "53:             if ($salt) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php||src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php": [
          "File: src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php -> src/Symfony/Component/PasswordHasher/Tests/Hasher/UserPasswordHasherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         $passwordHasher = new UserPasswordHasher($mockPasswordHasherFactory);",
          "162:         $this->assertFalse($passwordHasher->needsRehash($user));",
          "163:         $this->assertTrue($passwordHasher->needsRehash($user));",
          "164:         $this->assertFalse($passwordHasher->needsRehash($user));",
          "",
          "[Removed Lines]",
          "161:         \\Closure::bind(function () use ($passwordHasher) { $this->password = $passwordHasher->hashPassword($this, 'foo', 'salt'); }, $user, User::class)();",
          "",
          "[Added Lines]",
          "161:         \\Closure::bind(function () use ($passwordHasher) { $this->password = $passwordHasher->hashPassword($this, 'foo', 'salt'); }, $user, class_exists(User::class) ? User::class : InMemoryUser::class)();",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Firewall/AccessListener.php||src/Symfony/Component/Security/Http/Firewall/AccessListener.php": [
          "File: src/Symfony/Component/Security/Http/Firewall/AccessListener.php -> src/Symfony/Component/Security/Http/Firewall/AccessListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         $attributes = $request->attributes->get('_access_control_attributes');",
          "76:         $request->attributes->remove('_access_control_attributes');",
          "79:             return;",
          "80:         }",
          "",
          "[Removed Lines]",
          "78:         if (!$attributes || ([AuthenticatedVoter::IS_AUTHENTICATED_ANONYMOUSLY] === $attributes && $event instanceof LazyResponseEvent)) {",
          "",
          "[Added Lines]",
          "78:         if (",
          "79:             !$attributes",
          "80:             || (",
          "81:                 ([AuthenticatedVoter::IS_AUTHENTICATED_ANONYMOUSLY] === $attributes || [AuthenticatedVoter::PUBLIC_ACCESS] === $attributes)",
          "82:                 && $event instanceof LazyResponseEvent",
          "83:             )",
          "84:         ) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php||src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php": [
          "File: src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php -> src/Symfony/Component/Security/Http/Tests/Firewall/AccessListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:         $listener(new RequestEvent($this->createMock(HttpKernelInterface::class), $request, HttpKernelInterface::MAIN_REQUEST));",
          "362:     }",
          "363: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     public function testLazyPublicPagesShouldNotAccessTokenStorage()",
          "365:     {",
          "366:         $tokenStorage = $this->createMock(TokenStorageInterface::class);",
          "367:         $tokenStorage->expects($this->never())->method('getToken');",
          "369:         $request = new Request();",
          "370:         $accessMap = $this->createMock(AccessMapInterface::class);",
          "371:         $accessMap->expects($this->any())",
          "372:             ->method('getPatterns')",
          "373:             ->with($this->equalTo($request))",
          "374:             ->willReturn([[AuthenticatedVoter::PUBLIC_ACCESS], null])",
          "375:         ;",
          "377:         $listener = new AccessListener($tokenStorage, $this->createMock(AccessDecisionManagerInterface::class), $accessMap, $this->createMock(AuthenticationManagerInterface::class), false);",
          "378:         $listener(new LazyResponseEvent(new RequestEvent($this->createMock(HttpKernelInterface::class), $request, HttpKernelInterface::MAIN_REQUEST)));",
          "379:     }",
          "384:     public function testLegacyLazyPublicPagesShouldNotAccessTokenStorage()",
          "385:     {",
          "386:         $tokenStorage = $this->createMock(TokenStorageInterface::class);",
          "387:         $tokenStorage->expects($this->never())->method('getToken');",
          "389:         $request = new Request();",
          "390:         $accessMap = $this->createMock(AccessMapInterface::class);",
          "391:         $accessMap->expects($this->any())",
          "392:             ->method('getPatterns')",
          "393:             ->with($this->equalTo($request))",
          "394:             ->willReturn([[AuthenticatedVoter::IS_AUTHENTICATED_ANONYMOUSLY], null])",
          "395:         ;",
          "397:         $listener = new AccessListener($tokenStorage, $this->createMock(AccessDecisionManagerInterface::class), $accessMap, $this->createMock(AuthenticationManagerInterface::class), false);",
          "398:         $listener(new LazyResponseEvent(new RequestEvent($this->createMock(HttpKernelInterface::class), $request, HttpKernelInterface::MAIN_REQUEST)));",
          "399:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}