{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c3f222fe154a66369e84789828f4a8d36a20c7b",
      "candidate_info": {
        "commit_hash": "6c3f222fe154a66369e84789828f4a8d36a20c7b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/6c3f222fe154a66369e84789828f4a8d36a20c7b",
        "files": [
          ".changelog/24229.txt",
          "drivers/docker/driver_test.go",
          "drivers/docker/stats.go"
        ],
        "message": "Backport of docker: use streaming stats collection to correct CPU stats into release/1.9.x (#24238)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "drivers/docker/driver_test.go||drivers/docker/driver_test.go",
          "drivers/docker/stats.go||drivers/docker/stats.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/driver_test.go||drivers/docker/driver_test.go": [
          "File: drivers/docker/driver_test.go -> drivers/docker/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"github.com/docker/docker/errdefs\"",
          "31:  \"github.com/docker/go-connections/nat\"",
          "32:  hclog \"github.com/hashicorp/go-hclog\"",
          "33:  \"github.com/hashicorp/nomad/ci\"",
          "34:  \"github.com/hashicorp/nomad/client/lib/numalib\"",
          "35:  \"github.com/hashicorp/nomad/client/taskenv\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:  \"github.com/hashicorp/go-set/v3\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3229:  must.Eq(t, cfg.GroupAdd, container.HostConfig.GroupAdd)",
          "3230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3235: func TestDockerDriver_CollectStats(t *testing.T) {",
          "3236:  ci.Parallel(t)",
          "3237:  testutil.RequireLinux(t) // stats outputs are different on Windows",
          "3238:  testutil.DockerCompatible(t)",
          "3241:  args := []string{\"/bin/sh\", \"-c\", \"cat /dev/urandom | base64 > /dev/null\"}",
          "3242:  taskCfg := newTaskConfig(\"\", args)",
          "3243:  task := &drivers.TaskConfig{",
          "3244:   ID:        uuid.Generate(),",
          "3245:   Name:      \"nc-demo\",",
          "3246:   AllocID:   uuid.Generate(),",
          "3247:   Resources: basicResources,",
          "3248:  }",
          "3249:  must.NoError(t, task.EncodeConcreteDriverConfig(&taskCfg))",
          "3251:  d := dockerDriverHarness(t, nil)",
          "3252:  plugin, ok := d.Impl().(*Driver)",
          "3253:  must.True(t, ok)",
          "3254:  plugin.compute.TotalCompute = 1000",
          "3255:  plugin.compute.NumCores = 1",
          "3257:  cleanup := d.MkAllocDir(task, true)",
          "3258:  defer cleanup()",
          "3259:  copyImage(t, task.TaskDir(), \"busybox.tar\")",
          "3261:  _, _, err := d.StartTask(task)",
          "3262:  must.NoError(t, err)",
          "3264:  defer d.DestroyTask(task.ID, true)",
          "3268:  ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)",
          "3269:  t.Cleanup(cancel)",
          "3270:  recv, err := d.TaskStats(ctx, task.ID, time.Second)",
          "3271:  must.NoError(t, err)",
          "3273:  statsReceived := 0",
          "3274:  tickValues := set.From([]float64{})",
          "3276: DONE:",
          "3277:  for {",
          "3278:   select {",
          "3279:   case stats := <-recv:",
          "3280:    statsReceived++",
          "3281:    ticks := stats.ResourceUsage.CpuStats.TotalTicks",
          "3282:    must.Greater(t, 0, ticks)",
          "3283:    tickValues.Insert(ticks)",
          "3284:    if statsReceived >= 3 {",
          "3285:     cancel() // 3 is plenty",
          "3286:    }",
          "3287:   case <-ctx.Done():",
          "3288:    break DONE",
          "3289:   }",
          "3290:  }",
          "3293:  must.Len(t, statsReceived, tickValues.Slice())",
          "3294: }",
          "",
          "---------------"
        ],
        "drivers/docker/stats.go||drivers/docker/stats.go": [
          "File: drivers/docker/stats.go -> drivers/docker/stats.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  timer, cancel := helper.NewSafeTimer(interval)",
          "98:  defer cancel()",
          "100:  collectOnce := func() {",
          "101:   defer timer.Reset(interval)",
          "103:   if err != nil && err != io.EOF {",
          "105:    return",
          "106:   }",
          "112:    return",
          "113:   }",
          "116:   destCh.send(resourceUsage)",
          "117:  }",
          "",
          "[Removed Lines]",
          "102:   statsReader, err := h.dockerClient.ContainerStatsOneShot(ctx, h.containerID)",
          "104:    h.logger.Debug(\"error collecting stats from container\", \"error\", err)",
          "107:   defer statsReader.Body.Close()",
          "109:   var stats containerapi.Stats",
          "110:   if err := json.NewDecoder(statsReader.Body).Decode(&stats); err != nil {",
          "111:    h.logger.Error(\"error decoding stats data for container\", \"error\", err)",
          "115:   resourceUsage := util.DockerStatsToTaskResourceUsage(&stats, compute)",
          "",
          "[Added Lines]",
          "102:  statsReader, err := h.dockerClient.ContainerStats(ctx, h.containerID, true)",
          "103:  if err != nil && err != io.EOF {",
          "104:   h.logger.Debug(\"error collecting stats from container\", \"error\", err)",
          "105:   return",
          "106:  }",
          "107:  defer statsReader.Body.Close()",
          "111:   var stats *containerapi.Stats",
          "112:   err := json.NewDecoder(statsReader.Body).Decode(&stats)",
          "114:    h.logger.Debug(\"error decoding stats data from container\", \"error\", err)",
          "117:   if stats == nil {",
          "118:    h.logger.Debug(\"error decoding stats data: stats were nil\")",
          "121:   resourceUsage := util.DockerStatsToTaskResourceUsage(stats, compute)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3be7bed7155db3a4dadd31ee783d45217a9f820b",
      "candidate_info": {
        "commit_hash": "3be7bed7155db3a4dadd31ee783d45217a9f820b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/3be7bed7155db3a4dadd31ee783d45217a9f820b",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/containerd/go-cni from 1.1.11 to 1.1.12 (#25065)\n\nBumps [github.com/containerd/go-cni](https://github.com/containerd/go-cni) from 1.1.11 to 1.1.12.\n- [Release notes](https://github.com/containerd/go-cni/releases)\n- [Commits](https://github.com/containerd/go-cni/compare/v1.1.11...v1.1.12)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/containerd/go-cni\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  github.com/aws/smithy-go v1.22.2",
          "26:  github.com/brianvoe/gofakeit/v6 v6.20.1",
          "27:  github.com/container-storage-interface/spec v1.10.0",
          "29:  github.com/containernetworking/cni v1.2.3",
          "30:  github.com/coreos/go-iptables v0.8.0",
          "31:  github.com/creack/pty v1.1.24",
          "",
          "[Removed Lines]",
          "28:  github.com/containerd/go-cni v1.1.11",
          "",
          "[Added Lines]",
          "28:  github.com/containerd/go-cni v1.1.12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:  github.com/opencontainers/go-digest v1.0.0 // indirect",
          "285:  github.com/opencontainers/selinux v1.11.0 // indirect",
          "286:  github.com/packethost/packngo v0.1.1-0.20180711074735-b9cb5096f54c // indirect",
          "287:  github.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c // indirect",
          "288:  github.com/pkg/errors v0.9.1 // indirect",
          "289:  github.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:  github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:  github.com/renier/xmlrpc v0.0.0-20170708154548-ce4a1a486c03 // indirect",
          "295:  github.com/rivo/uniseg v0.2.0 // indirect",
          "296:  github.com/rogpeppe/go-internal v1.13.1 // indirect",
          "297:  github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 // indirect",
          "298:  github.com/seccomp/libseccomp-golang v0.10.0 // indirect",
          "299:  github.com/shopspring/decimal v1.4.0 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:  github.com/sasha-s/go-deadlock v0.3.5 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "836: github.com/containerd/console v1.0.1/go.mod h1:XUsP6YE/mKtz6bxc+I8UiKKTP04qjQL4qcS3XoQ5xkw=",
          "837: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "838: github.com/containerd/console v1.0.4/go.mod h1:YynlIjWYF8myEu6sdkwKIvGQq+cOckRm6So2avqoYAk=",
          "841: github.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=",
          "842: github.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=",
          "843: github.com/containernetworking/cni v1.2.3 h1:hhOcjNVUQTnzdRJ6alC5XF+wd9mfGIUaj8FuJbEslXM=",
          "",
          "[Removed Lines]",
          "839: github.com/containerd/go-cni v1.1.11 h1:fWt1K15AmSLsEfa57N+qYw4NeGPiQKYq1pjNGJwV9mc=",
          "840: github.com/containerd/go-cni v1.1.11/go.mod h1:/Y/sL8yqYQn1ZG1om1OncJB1W4zN3YmjfP/ShCzG/OY=",
          "",
          "[Added Lines]",
          "839: github.com/containerd/go-cni v1.1.12 h1:wm/5VD/i255hjM4uIZjBRiEQ7y98W9ACy/mHeLi4+94=",
          "840: github.com/containerd/go-cni v1.1.12/go.mod h1:+jaqRBdtW5faJxj2Qwg1Of7GsV66xcvnCx4mSJtUlxU=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1504: github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=",
          "1505: github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=",
          "1506: github.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=",
          "1507: github.com/phpdave11/gofpdf v1.4.2/go.mod h1:zpO6xFn9yxo3YLyMvW8HcKWVdbNqgIfOOp2dXMnm1mY=",
          "1508: github.com/phpdave11/gofpdi v1.0.12/go.mod h1:vBmVV0Do6hSBHC8uKUQ71JGW+ZGQq74llk/7bXwjDoI=",
          "1509: github.com/phpdave11/gofpdi v1.0.13/go.mod h1:vBmVV0Do6hSBHC8uKUQ71JGW+ZGQq74llk/7bXwjDoI=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=",
          "1508: github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1578: github.com/ryanuber/columnize v2.1.2+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=",
          "1579: github.com/ryanuber/go-glob v1.0.0 h1:iQh3xXAumdQ+4Ufa5b25cRpC5TYKlno6hsv6Cb3pkBk=",
          "1580: github.com/ryanuber/go-glob v1.0.0/go.mod h1:807d1WSdnB0XRJzKNil9Om6lcp/3a0v4qIHxIXzX/Yc=",
          "1581: github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 h1:nn5Wsu0esKSJiIVhscUtVbo7ada43DJhG55ua/hjS5I=",
          "1582: github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=",
          "1583: github.com/seccomp/libseccomp-golang v0.10.0 h1:aA4bp+/Zzi0BnWZ2F1wgNBs5gTpm+na2rWM6M9YjLpY=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1583: github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=",
          "1584: github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "439a6562f1c1627f49d4ab2298be1a5cea0b6195",
      "candidate_info": {
        "commit_hash": "439a6562f1c1627f49d4ab2298be1a5cea0b6195",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/439a6562f1c1627f49d4ab2298be1a5cea0b6195",
        "files": [
          ".changelog/24644.txt",
          "api/api.go",
          "e2e/terraform/etc/nomad.d/base.hcl"
        ],
        "message": "Backport of: api: don't copy previously parsed URL when setting new address (#24644) (#24682)\n\nIn #16872 we added support for unix domain sockets, but this required mutating\nthe `Config` when parsing the address so as to remove the port number. In #23785\nwe fixed a bug where if the configuration was used across multiple clients that\nmutation would happen multiple times and the address would be incorrectly\nparsed.\n\nWhen making `alloc log`, `alloc fs`, or `alloc exec` calls where we have\nline-of-sight to the client, we attempt to make a HTTP API call directly to the\nclient node. So we create a new API client from the same configuration and then\nset the address. But in this case we copy the private `url` field and that\ncauses the URL parsing to be skipped for the new client.\n\nThis results in the region always being set to the string literal\n`\"global\"` (because of mTLS handling code introduced all the way back in\n4d3b75d867da), unless the user has set the region specifically. This fails with\nan error \"no path to region\" when the cluster isn't non-global and requests are\nsent to a non-leader.\n\nArguably the \"right\" way of fixing this would be for `ClientConfig` not to\nchange the API client's region to `\"global\"` in the first place, but as this is\na public API and extremely longstanding behavior, it could potentially be a\nbreaking change for some downstream consumers. Instead, we'll avoid copying the\nprivate `url` field so that the new address is re-parsed.\n\nFixes: https://github.com/hashicorp/nomad/issues/24635\nFixes: https://github.com/hashicorp/nomad/issues/24609\nRef: https://github.com/hashicorp/nomad/pull/16872\nRef: https://github.com/hashicorp/nomad/pull/23785\nRef: https://github.com/hashicorp/nomad/commit/4d3b75d867dae508011c198c84318f54b4aa6684\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "api/api.go||api/api.go",
          "e2e/terraform/etc/nomad.d/base.hcl||e2e/terraform/etc/nomad.d/base.hcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/api.go||api/api.go": [
          "File: api/api.go -> api/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:   HttpAuth:   c.HttpAuth,",
          "235:   WaitTime:   c.WaitTime,",
          "236:   TLSConfig:  c.TLSConfig.Copy(),",
          "238:  }",
          "",
          "[Removed Lines]",
          "237:   url:        copyURL(c.url),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "e2e/terraform/etc/nomad.d/base.hcl||e2e/terraform/etc/nomad.d/base.hcl": [
          "File: e2e/terraform/etc/nomad.d/base.hcl -> e2e/terraform/etc/nomad.d/base.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright (c) HashiCorp, Inc.",
          "2: # SPDX-License-Identifier: BUSL-1.1",
          "4: bind_addr    = \"0.0.0.0\"",
          "5: data_dir     = \"${data_dir}\"",
          "6: enable_debug = true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: region       = \"e2e\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bad7e532e25687e30b2aa1712529873aeed871ed",
      "candidate_info": {
        "commit_hash": "bad7e532e25687e30b2aa1712529873aeed871ed",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/bad7e532e25687e30b2aa1712529873aeed871ed",
        "files": [
          "command/agent/command.go",
          "command/agent/retry_join.go",
          "command/agent/retry_join_test.go"
        ],
        "message": "agent: Improve retry joiner code with small refactor (#25424)\n\nbackport of commit 61b2b9d3d0530ec8ad25486f77a68c38934a1dc7\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/agent/command.go||command/agent/command.go",
          "command/agent/retry_join.go||command/agent/retry_join.go",
          "command/agent/retry_join_test.go||command/agent/retry_join_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/command.go||command/agent/command.go": [
          "File: command/agent/command.go -> command/agent/command.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "925:  c.retryJoinErrCh = make(chan struct{})",
          "927:  if config.Server.Enabled && len(config.Server.RetryJoin) != 0 {",
          "936:   if err := joiner.Validate(config); err != nil {",
          "937:    return err",
          "",
          "[Removed Lines]",
          "928:   joiner := retryJoiner{",
          "929:    autoDiscover:  autoDiscover{goDiscover: &discover.Discover{}, netAddrs: &netAddrs{}},",
          "930:    errCh:         c.retryJoinErrCh,",
          "931:    logger:        c.agent.logger.Named(\"joiner\"),",
          "932:    serverJoin:    c.agent.server.Join,",
          "933:    serverEnabled: true,",
          "934:   }",
          "",
          "[Added Lines]",
          "929:   joiner := retryJoiner{}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959:   len(config.Server.ServerJoin.RetryJoin) != 0 {",
          "961:   joiner := retryJoiner{",
          "967:   }",
          "969:   if err := joiner.Validate(config); err != nil {",
          "970:    return err",
          "971:   }",
          "974:  }",
          "976:  if config.Client.Enabled &&",
          "977:   config.Client.ServerJoin != nil &&",
          "978:   len(config.Client.ServerJoin.RetryJoin) != 0 {",
          "979:   joiner := retryJoiner{",
          "985:   }",
          "987:   if err := joiner.Validate(config); err != nil {",
          "988:    return err",
          "989:   }",
          "992:  }",
          "994:  return nil",
          "",
          "[Removed Lines]",
          "962:    autoDiscover:  autoDiscover{goDiscover: &discover.Discover{}, netAddrs: &netAddrs{}},",
          "963:    errCh:         c.retryJoinErrCh,",
          "964:    logger:        c.agent.logger.Named(\"joiner\"),",
          "965:    serverJoin:    c.agent.server.Join,",
          "966:    serverEnabled: true,",
          "973:   go joiner.RetryJoin(config.Server.ServerJoin)",
          "980:    autoDiscover:  autoDiscover{goDiscover: &discover.Discover{}, netAddrs: &netAddrs{}},",
          "981:    errCh:         c.retryJoinErrCh,",
          "982:    logger:        c.agent.logger.Named(\"joiner\"),",
          "983:    clientJoin:    c.agent.client.SetServers,",
          "984:    clientEnabled: true,",
          "991:   go joiner.RetryJoin(config.Client.ServerJoin)",
          "",
          "[Added Lines]",
          "957:    autoDiscover: autoDiscover{goDiscover: &discover.Discover{}, netAddrs: &netAddrs{}},",
          "958:    errCh:        c.retryJoinErrCh,",
          "959:    joinCfg:      config.Server.ServerJoin,",
          "960:    joinFunc:     c.agent.server.Join,",
          "961:    logger:       c.agent.logger.Named(\"joiner\").With(\"agent_mode\", \"server\"),",
          "968:   go joiner.RetryJoin()",
          "975:    autoDiscover: autoDiscover{goDiscover: &discover.Discover{}, netAddrs: &netAddrs{}},",
          "976:    errCh:        c.retryJoinErrCh,",
          "977:    joinCfg:      config.Client.ServerJoin,",
          "978:    joinFunc:     c.agent.client.SetServers,",
          "979:    logger:       c.agent.logger.Named(\"joiner\").With(\"agent_mode\", \"client\"),",
          "986:   go joiner.RetryJoin()",
          "",
          "---------------"
        ],
        "command/agent/retry_join.go||command/agent/retry_join.go": [
          "File: command/agent/retry_join.go -> command/agent/retry_join.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: type retryJoiner struct {",
          "114:  autoDiscover AutoDiscoverInterface",
          "",
          "[Removed Lines]",
          "102:  serverJoin func([]string) (int, error)",
          "105:  serverEnabled bool",
          "108:  clientJoin func([]string) (int, error)",
          "111:  clientEnabled bool",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  errCh chan struct{}",
          "121:  logger log.Logger",
          "122: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  joinCfg *ServerJoin",
          "115:  joinFunc func([]string) (int, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:   return",
          "166:  }",
          "168:  attempt := 0",
          "171:  r.logger.Info(\"starting retry join\", \"servers\", addrsToJoin)",
          "173:  for {",
          "",
          "[Removed Lines]",
          "163: func (r *retryJoiner) RetryJoin(serverJoin *ServerJoin) {",
          "164:  if len(serverJoin.RetryJoin) == 0 {",
          "170:  addrsToJoin := strings.Join(serverJoin.RetryJoin, \" \")",
          "174:   var addrs []string",
          "175:   var n int",
          "176:   var err error",
          "178:   for _, addr := range serverJoin.RetryJoin {",
          "",
          "[Added Lines]",
          "160: func (r *retryJoiner) RetryJoin() {",
          "161:  if len(r.joinCfg.RetryJoin) == 0 {",
          "167:  addrsToJoin := strings.Join(r.joinCfg.RetryJoin, \" \")",
          "171:   var (",
          "172:    addrs []string",
          "173:    err   error",
          "174:   )",
          "176:   for _, addr := range r.joinCfg.RetryJoin {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:    }",
          "189:   }",
          "205:    }",
          "206:   }",
          "208:   attempt++",
          "210:    r.logger.Error(\"max join retry exhausted, exiting\")",
          "211:    close(r.errCh)",
          "212:    return",
          "213:   }",
          "215:   if err != nil {",
          "217:   }",
          "219:  }",
          "220: }",
          "",
          "[Removed Lines]",
          "191:   if len(addrs) > 0 {",
          "192:    if r.serverEnabled && r.serverJoin != nil {",
          "193:     n, err = r.serverJoin(addrs)",
          "194:     if err == nil {",
          "195:      r.logger.Info(\"retry join completed\", \"initial_servers\", n, \"agent_mode\", \"server\")",
          "196:      return",
          "197:     }",
          "198:    }",
          "199:    if r.clientEnabled && r.clientJoin != nil {",
          "200:     n, err = r.clientJoin(addrs)",
          "201:     if err == nil {",
          "202:      r.logger.Info(\"retry join completed\", \"initial_servers\", n, \"agent_mode\", \"client\")",
          "203:      return",
          "204:     }",
          "209:   if serverJoin.RetryMaxAttempts > 0 && attempt > serverJoin.RetryMaxAttempts {",
          "216:    r.logger.Warn(\"join failed\", \"error\", err, \"retry\", serverJoin.RetryInterval)",
          "218:   time.Sleep(serverJoin.RetryInterval)",
          "",
          "[Added Lines]",
          "189:   if len(addrs) > 0 && r.joinFunc != nil {",
          "190:    numJoined, err := r.joinFunc(addrs)",
          "191:    if err == nil {",
          "192:     r.logger.Info(\"retry join completed\", \"initial_servers\", numJoined)",
          "193:     return",
          "198:   if r.joinCfg.RetryMaxAttempts > 0 && attempt > r.joinCfg.RetryMaxAttempts {",
          "205:    r.logger.Warn(\"join failed\", \"error\", err, \"retry\", r.joinCfg.RetryInterval)",
          "207:   time.Sleep(r.joinCfg.RetryInterval)",
          "",
          "---------------"
        ],
        "command/agent/retry_join_test.go||command/agent/retry_join_test.go": [
          "File: command/agent/retry_join_test.go -> command/agent/retry_join_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"github.com/hashicorp/nomad/helper/testlog\"",
          "20:  \"github.com/hashicorp/nomad/testutil\"",
          "21:  \"github.com/shoenig/test/must\"",
          "23: )",
          "25: const stubAddress = \"127.0.0.1\"",
          "",
          "[Removed Lines]",
          "22:  \"github.com/stretchr/testify/require\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: func TestRetryJoin_Server_NonCloud(t *testing.T) {",
          "100:  ci.Parallel(t)",
          "108:  var output []string",
          "",
          "[Removed Lines]",
          "101:  require := require.New(t)",
          "103:  serverJoin := &ServerJoin{",
          "104:   RetryMaxAttempts: 1,",
          "105:   RetryJoin:        []string{\"127.0.0.1\"},",
          "106:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  }",
          "115:  joiner := retryJoiner{",
          "121:  }",
          "127: }",
          "129: func TestRetryJoin_Server_Cloud(t *testing.T) {",
          "130:  ci.Parallel(t)",
          "138:  var output []string",
          "",
          "[Removed Lines]",
          "116:   autoDiscover:  autoDiscover{goDiscover: &MockDiscover{}},",
          "117:   serverJoin:    mockJoin,",
          "118:   serverEnabled: true,",
          "119:   logger:        testlog.HCLogger(t),",
          "120:   errCh:         make(chan struct{}),",
          "123:  joiner.RetryJoin(serverJoin)",
          "125:  require.Equal(1, len(output))",
          "126:  require.Equal(stubAddress, output[0])",
          "131:  require := require.New(t)",
          "133:  serverJoin := &ServerJoin{",
          "134:   RetryMaxAttempts: 1,",
          "135:   RetryJoin:        []string{\"provider=aws, tag_value=foo\"},",
          "136:  }",
          "",
          "[Added Lines]",
          "109:   autoDiscover: autoDiscover{goDiscover: &MockDiscover{}},",
          "110:   joinCfg: &ServerJoin{",
          "111:    RetryMaxAttempts: 1,",
          "112:    RetryJoin:        []string{\"127.0.0.1\"},",
          "113:   },",
          "114:   joinFunc: mockJoin,",
          "115:   logger:   testlog.HCLogger(t),",
          "116:   errCh:    make(chan struct{}),",
          "119:  joiner.RetryJoin()",
          "121:  must.Eq(t, 1, len(output))",
          "122:  must.Eq(t, stubAddress, output[0])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:  mockDiscover := &MockDiscover{}",
          "146:  joiner := retryJoiner{",
          "152:  }",
          "159: }",
          "161: func TestRetryJoin_Server_MixedProvider(t *testing.T) {",
          "162:  ci.Parallel(t)",
          "170:  var output []string",
          "",
          "[Removed Lines]",
          "147:   autoDiscover:  autoDiscover{goDiscover: mockDiscover},",
          "148:   serverJoin:    mockJoin,",
          "149:   serverEnabled: true,",
          "150:   logger:        testlog.HCLogger(t),",
          "151:   errCh:         make(chan struct{}),",
          "154:  joiner.RetryJoin(serverJoin)",
          "156:  require.Equal(1, len(output))",
          "157:  require.Equal(\"provider=aws, tag_value=foo\", mockDiscover.ReceivedConfig)",
          "158:  require.Equal(stubAddress, output[0])",
          "163:  require := require.New(t)",
          "165:  serverJoin := &ServerJoin{",
          "166:   RetryMaxAttempts: 1,",
          "167:   RetryJoin:        []string{\"provider=aws, tag_value=foo\", \"127.0.0.1\"},",
          "168:  }",
          "",
          "[Added Lines]",
          "137:   autoDiscover: autoDiscover{goDiscover: mockDiscover},",
          "138:   joinCfg: &ServerJoin{",
          "139:    RetryMaxAttempts: 1,",
          "140:    RetryJoin:        []string{\"provider=aws, tag_value=foo\"},",
          "141:   },",
          "142:   joinFunc: mockJoin,",
          "143:   logger:   testlog.HCLogger(t),",
          "144:   errCh:    make(chan struct{}),",
          "147:  joiner.RetryJoin()",
          "149:  must.Eq(t, 1, len(output))",
          "150:  must.Eq(t, \"provider=aws, tag_value=foo\", mockDiscover.ReceivedConfig)",
          "151:  must.Eq(t, stubAddress, output[0])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:  mockDiscover := &MockDiscover{}",
          "178:  joiner := retryJoiner{",
          "184:  }",
          "191: }",
          "193: func TestRetryJoin_AutoDiscover(t *testing.T) {",
          "",
          "[Removed Lines]",
          "179:   autoDiscover:  autoDiscover{goDiscover: mockDiscover},",
          "180:   serverJoin:    mockJoin,",
          "181:   serverEnabled: true,",
          "182:   logger:        testlog.HCLogger(t),",
          "183:   errCh:         make(chan struct{}),",
          "186:  joiner.RetryJoin(serverJoin)",
          "188:  require.Equal(2, len(output))",
          "189:  require.Equal(\"provider=aws, tag_value=foo\", mockDiscover.ReceivedConfig)",
          "190:  require.Equal(stubAddress, output[0])",
          "",
          "[Added Lines]",
          "166:   autoDiscover: autoDiscover{goDiscover: mockDiscover},",
          "167:   joinCfg: &ServerJoin{",
          "168:    RetryMaxAttempts: 1,",
          "169:    RetryJoin:        []string{\"provider=aws, tag_value=foo\", \"127.0.0.1\"},",
          "170:   },",
          "171:   joinFunc: mockJoin,",
          "172:   logger:   testlog.HCLogger(t),",
          "173:   errCh:    make(chan struct{}),",
          "176:  joiner.RetryJoin()",
          "178:  must.Eq(t, 2, len(output))",
          "179:  must.Eq(t, \"provider=aws, tag_value=foo\", mockDiscover.ReceivedConfig)",
          "180:  must.Eq(t, stubAddress, output[0])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:   return 0, nil",
          "200:  }",
          "217:  joiner := retryJoiner{",
          "223:  }",
          "227:  must.Eq(t, []string{",
          "228:   \"127.0.0.1\", \"127.0.0.1\", \"localhost\", \"localhost2:4648\",",
          "",
          "[Removed Lines]",
          "208:  serverJoin := &ServerJoin{",
          "209:   RetryMaxAttempts: 1,",
          "210:   RetryJoin: []string{",
          "211:    \"exec=echo 127.0.0.1\", \"provider=aws, tag_value=foo\",",
          "212:    \"localhost\", \"localhost2:4648\", \"127.0.0.1:4648\", \"100.100.100.100\"},",
          "213:  }",
          "215:  mockDiscover := &MockDiscover{}",
          "216:  mockNetaddrs := &MockNetaddrs{}",
          "218:   autoDiscover:  autoDiscover{goDiscover: mockDiscover, netAddrs: mockNetaddrs},",
          "219:   serverJoin:    mockJoin,",
          "220:   serverEnabled: true,",
          "221:   logger:        testlog.HCLogger(t),",
          "222:   errCh:         make(chan struct{}),",
          "225:  joiner.RetryJoin(serverJoin)",
          "",
          "[Added Lines]",
          "192:  mockDiscover := &MockDiscover{}",
          "193:  mockNetaddrs := &MockNetaddrs{}",
          "202:   autoDiscover: autoDiscover{goDiscover: mockDiscover, netAddrs: mockNetaddrs},",
          "203:   joinCfg: &ServerJoin{",
          "204:    RetryMaxAttempts: 1,",
          "205:    RetryJoin: []string{",
          "206:     \"exec=echo 127.0.0.1\", \"provider=aws, tag_value=foo\",",
          "207:     \"localhost\", \"localhost2:4648\", \"127.0.0.1:4648\", \"100.100.100.100\"},",
          "208:   },",
          "209:   joinFunc: mockJoin,",
          "210:   logger:   testlog.HCLogger(t),",
          "211:   errCh:    make(chan struct{}),",
          "214:  joiner.RetryJoin()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235: func TestRetryJoin_Client(t *testing.T) {",
          "236:  ci.Parallel(t)",
          "244:  var output []string",
          "",
          "[Removed Lines]",
          "237:  require := require.New(t)",
          "239:  serverJoin := &ServerJoin{",
          "240:   RetryMaxAttempts: 1,",
          "241:   RetryJoin:        []string{\"127.0.0.1\"},",
          "242:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "249:  }",
          "251:  joiner := retryJoiner{",
          "257:  }",
          "263: }",
          "",
          "[Removed Lines]",
          "252:   autoDiscover:  autoDiscover{goDiscover: &MockDiscover{}},",
          "253:   clientJoin:    mockJoin,",
          "254:   clientEnabled: true,",
          "255:   logger:        testlog.HCLogger(t),",
          "256:   errCh:         make(chan struct{}),",
          "259:  joiner.RetryJoin(serverJoin)",
          "261:  require.Equal(1, len(output))",
          "262:  require.Equal(stubAddress, output[0])",
          "",
          "[Added Lines]",
          "235:   autoDiscover: autoDiscover{goDiscover: &MockDiscover{}},",
          "236:   joinCfg: &ServerJoin{",
          "237:    RetryMaxAttempts: 1,",
          "238:    RetryJoin:        []string{\"127.0.0.1\"},",
          "239:   },",
          "240:   joinFunc: mockJoin,",
          "241:   logger:   testlog.HCLogger(t),",
          "242:   errCh:    make(chan struct{}),",
          "245:  joiner.RetryJoin()",
          "247:  must.Eq(t, 1, len(output))",
          "248:  must.Eq(t, stubAddress, output[0])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "294:  joiner := retryJoiner{",
          "295:   autoDiscover: autoDiscover{goDiscover: &MockFailDiscover{}},",
          "297:    output = s",
          "298:    return 0, nil",
          "299:   },",
          "303:  }",
          "",
          "[Removed Lines]",
          "296:   clientJoin: func(s []string) (int, error) {",
          "300:   clientEnabled: true,",
          "301:   logger:        testlog.HCLogger(t),",
          "302:   errCh:         errCh,",
          "",
          "[Added Lines]",
          "282:   joinCfg:      &ServerJoin{RetryMaxAttempts: 1, RetryJoin: []string{\"provider=foo\"}},",
          "283:   joinFunc: func(s []string) (int, error) {",
          "287:   logger: testlog.HCLogger(t),",
          "288:   errCh:  errCh,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "308:  doneCh := make(chan struct{})",
          "310:  go func(doneCh chan struct{}) {",
          "312:   close(doneCh)",
          "313:  }(doneCh)",
          "",
          "[Removed Lines]",
          "311:   joiner.RetryJoin(&ServerJoin{RetryMaxAttempts: 1, RetryJoin: []string{\"provider=foo\"}})",
          "",
          "[Added Lines]",
          "297:   joiner.RetryJoin()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "467:   t.Run(scenario.reason, func(t *testing.T) {",
          "468:    err := joiner.Validate(scenario.config)",
          "469:    if scenario.isValid {",
          "471:    } else {",
          "473:    }",
          "474:   })",
          "475:  }",
          "",
          "[Removed Lines]",
          "470:     require.NoError(t, err)",
          "472:     require.Error(t, err)",
          "",
          "[Added Lines]",
          "456:     must.NoError(t, err)",
          "458:     must.Error(t, err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae3855ee29927be33a193089b036b74598350d30",
      "candidate_info": {
        "commit_hash": "ae3855ee29927be33a193089b036b74598350d30",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/ae3855ee29927be33a193089b036b74598350d30",
        "files": [
          ".changelog/25157.txt",
          "client/allocrunner/group_service_hook.go",
          "client/allocrunner/group_service_hook_test.go"
        ],
        "message": "backport of commit 4eb294e1ef88080f61916944a38a72d62a98b48c (#25450)\n\nCo-authored-by: Michael Smithhisler <michael.smithhisler@hashicorp.com>",
        "before_after_code_files": [
          "client/allocrunner/group_service_hook.go||client/allocrunner/group_service_hook.go",
          "client/allocrunner/group_service_hook_test.go||client/allocrunner/group_service_hook_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocrunner/group_service_hook.go||client/allocrunner/group_service_hook.go": [
          "File: client/allocrunner/group_service_hook.go -> client/allocrunner/group_service_hook.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: func (h *groupServiceHook) preKillLocked() {",
          "220:  h.deregisterLocked()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:  if h.deregistered && h.delay != 0 {",
          "221:   h.logger.Debug(\"tasks already deregistered, skipping shutdown_delay\")",
          "222:   return",
          "223:  }",
          "",
          "---------------"
        ],
        "client/allocrunner/group_service_hook_test.go||client/allocrunner/group_service_hook_test.go": [
          "File: client/allocrunner/group_service_hook_test.go -> client/allocrunner/group_service_hook_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package allocrunner",
          "6: import (",
          "7:  \"testing\"",
          "8:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:  services := h.getWorkloadServicesLocked()",
          "294:  must.Len(t, 1, services.Services)",
          "295: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298: func TestGroupServiceHook_PreKill(t *testing.T) {",
          "299:  ci.Parallel(t)",
          "300:  logger := testlog.HCLogger(t)",
          "302:  t.Run(\"waits for shutdown delay\", func(t *testing.T) {",
          "303:   alloc := mock.Alloc()",
          "304:   alloc.Job.TaskGroups[0].Networks = []*structs.NetworkResource{}",
          "305:   tg := alloc.Job.LookupTaskGroup(alloc.TaskGroup)",
          "306:   tg.Services = []*structs.Service{",
          "307:    {",
          "308:     Name:      \"testconnect\",",
          "309:     PortLabel: \"9999\",",
          "310:     Connect: &structs.ConsulConnect{",
          "311:      SidecarService: &structs.ConsulSidecarService{},",
          "312:     },",
          "313:    },",
          "314:   }",
          "315:   delay := 200 * time.Millisecond",
          "316:   tg.ShutdownDelay = &delay",
          "318:   consulMockClient := regMock.NewServiceRegistrationHandler(logger)",
          "320:   regWrapper := wrapper.NewHandlerWrapper(",
          "321:    logger,",
          "322:    consulMockClient,",
          "323:    regMock.NewServiceRegistrationHandler(logger))",
          "325:   shutDownCtx, cancel := context.WithTimeout(context.Background(), delay*2)",
          "326:   defer cancel()",
          "328:   h := newGroupServiceHook(groupServiceHookConfig{",
          "329:    alloc:             alloc,",
          "330:    serviceRegWrapper: regWrapper,",
          "331:    shutdownDelayCtx:  shutDownCtx,",
          "332:    restarter:         agentconsul.NoopRestarter(),",
          "333:    taskEnvBuilder:    taskenv.NewBuilder(mock.Node(), alloc, nil, alloc.Job.Region),",
          "334:    logger:            logger,",
          "335:    hookResources:     cstructs.NewAllocHookResources(),",
          "336:   })",
          "338:   successChan := make(chan struct{}, 1)",
          "339:   go func() {",
          "340:    before := time.Now()",
          "341:    h.PreKill()",
          "343:    if time.Since(before) < delay {",
          "344:     t.Fail()",
          "345:    }",
          "346:    successChan <- struct{}{}",
          "347:   }()",
          "349:   select {",
          "350:   case <-shutDownCtx.Done():",
          "352:    t.Fail()",
          "353:   case <-successChan:",
          "354:   }",
          "355:  })",
          "357:  t.Run(\"returns immediately when no shutdown delay\", func(t *testing.T) {",
          "358:   alloc := mock.Alloc()",
          "359:   alloc.Job.TaskGroups[0].Networks = []*structs.NetworkResource{}",
          "360:   tg := alloc.Job.LookupTaskGroup(alloc.TaskGroup)",
          "361:   tg.Services = []*structs.Service{",
          "362:    {",
          "363:     Name:      \"testconnect\",",
          "364:     PortLabel: \"9999\",",
          "365:     Connect: &structs.ConsulConnect{",
          "366:      SidecarService: &structs.ConsulSidecarService{},",
          "367:     },",
          "368:    },",
          "369:   }",
          "371:   consulMockClient := regMock.NewServiceRegistrationHandler(logger)",
          "373:   regWrapper := wrapper.NewHandlerWrapper(",
          "374:    logger,",
          "375:    consulMockClient,",
          "376:    regMock.NewServiceRegistrationHandler(logger))",
          "378:   h := newGroupServiceHook(groupServiceHookConfig{",
          "379:    alloc:             alloc,",
          "380:    serviceRegWrapper: regWrapper,",
          "381:    restarter:         agentconsul.NoopRestarter(),",
          "382:    taskEnvBuilder:    taskenv.NewBuilder(mock.Node(), alloc, nil, alloc.Job.Region),",
          "383:    logger:            logger,",
          "384:    hookResources:     cstructs.NewAllocHookResources(),",
          "385:   })",
          "387:   successChan := make(chan struct{}, 1)",
          "388:   go func() {",
          "389:    h.PreKill()",
          "390:    successChan <- struct{}{}",
          "391:   }()",
          "393:   shutDownCtx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)",
          "394:   defer cancel()",
          "396:   select {",
          "397:   case <-shutDownCtx.Done():",
          "398:    t.Fail()",
          "399:   case <-successChan:",
          "400:   }",
          "401:  })",
          "403:  t.Run(\"returns immediately when already deregistered\", func(t *testing.T) {",
          "404:   alloc := mock.Alloc()",
          "405:   alloc.Job.TaskGroups[0].Networks = []*structs.NetworkResource{}",
          "406:   tg := alloc.Job.LookupTaskGroup(alloc.TaskGroup)",
          "407:   tg.Services = []*structs.Service{",
          "408:    {",
          "409:     Name:      \"testconnect\",",
          "410:     PortLabel: \"9999\",",
          "411:     Connect: &structs.ConsulConnect{",
          "412:      SidecarService: &structs.ConsulSidecarService{},",
          "413:     },",
          "414:    },",
          "415:   }",
          "416:   delay := 500 * time.Millisecond",
          "417:   tg.ShutdownDelay = &delay",
          "419:   consulMockClient := regMock.NewServiceRegistrationHandler(logger)",
          "421:   regWrapper := wrapper.NewHandlerWrapper(",
          "422:    logger,",
          "423:    consulMockClient,",
          "424:    regMock.NewServiceRegistrationHandler(logger))",
          "428:   shutDownCtx, cancel := context.WithTimeout(context.Background(), delay-300*time.Millisecond)",
          "429:   defer cancel()",
          "431:   h := newGroupServiceHook(groupServiceHookConfig{",
          "432:    alloc:             alloc,",
          "433:    serviceRegWrapper: regWrapper,",
          "434:    restarter:         agentconsul.NoopRestarter(),",
          "435:    taskEnvBuilder:    taskenv.NewBuilder(mock.Node(), alloc, nil, alloc.Job.Region),",
          "436:    logger:            logger,",
          "437:    hookResources:     cstructs.NewAllocHookResources(),",
          "438:   })",
          "439:   h.deregistered = true",
          "441:   successChan := make(chan struct{}, 1)",
          "442:   go func() {",
          "443:    h.PreKill()",
          "444:    successChan <- struct{}{}",
          "445:   }()",
          "447:   select {",
          "448:   case <-shutDownCtx.Done():",
          "449:    t.Fail()",
          "450:   case <-successChan:",
          "451:   }",
          "452:  })",
          "453: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}