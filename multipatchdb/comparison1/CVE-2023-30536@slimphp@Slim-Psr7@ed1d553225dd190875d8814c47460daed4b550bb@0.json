{
  "cve_id": "CVE-2023-30536",
  "cve_desc": "slim/psr7 is a PSR-7 implementation for use with Slim 4. In versions prior to 1.6.1 an attacker could sneak in a newline (\\n) into both the header names and values. While the specification states that \\r\\n\\r\\n is used to terminate the header list, many servers in the wild will also accept \\n\\n. An attacker that is able to control the header names that are passed to Slilm-Psr7 would be able to intentionally craft invalid messages, possibly causing application errors or invalid HTTP requests being sent out with an PSR-18 HTTP client. The latter might present a denial of service vector if a remote service\u2019s web application firewall bans the application due to the receipt of malformed requests. The issue has been patched in version 1.6.1. There are no known workarounds to this issue. Users are advised to upgrade.",
  "repo": "slimphp/Slim-Psr7",
  "patch_hash": "ed1d553225dd190875d8814c47460daed4b550bb",
  "patch_info": {
    "commit_hash": "ed1d553225dd190875d8814c47460daed4b550bb",
    "repo": "slimphp/Slim-Psr7",
    "commit_url": "https://github.com/slimphp/Slim-Psr7/commit/ed1d553225dd190875d8814c47460daed4b550bb",
    "files": [
      "src/Headers.php",
      "tests/HeadersTest.php"
    ],
    "message": "Merge pull request from GHSA-q2qj-628g-vhfw\n\nSecurity fix: Reject newlines at end of header names",
    "before_after_code_files": [
      "src/Headers.php||src/Headers.php",
      "tests/HeadersTest.php||tests/HeadersTest.php"
    ]
  },
  "patch_diff": {
    "src/Headers.php||src/Headers.php": [
      "File: src/Headers.php -> src/Headers.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:     protected function validateHeaderName($name): void",
      "268:     {",
      "270:             throw new InvalidArgumentException('Header name must be an RFC 7230 compatible string.');",
      "271:         }",
      "272:     }",
      "",
      "[Removed Lines]",
      "269:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@\", $name) !== 1) {",
      "",
      "[Added Lines]",
      "269:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@D\", $name) !== 1) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "286:             );",
      "287:         }",
      "290:         foreach ($items as $item) {",
      "291:             $hasInvalidType = !is_numeric($item) && !is_string($item);",
      "292:             $rejected = $hasInvalidType || preg_match($pattern, (string) $item) !== 1;",
      "",
      "[Removed Lines]",
      "289:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@\";",
      "",
      "[Added Lines]",
      "289:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@D\";",
      "",
      "---------------"
    ],
    "tests/HeadersTest.php||tests/HeadersTest.php": [
      "File: tests/HeadersTest.php -> tests/HeadersTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "209:         $headers = new Headers([], ['PHP_AUTH_DIGEST' => 'digest']);",
      "210:         $this->assertEquals(['digest'], $headers->getHeader('Authorization'));",
      "211:     }",
      "212: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:     public function testWithInvalidHeaderName($headerName): void",
      "217:     {",
      "218:         $headers = new Headers();",
      "220:         $this->expectException(\\InvalidArgumentException::class);",
      "222:         $headers->setHeader($headerName, 'foo');",
      "223:     }",
      "225:     public static function provideInvalidHeaderNames(): array",
      "226:     {",
      "227:         return [",
      "228:             [[]],",
      "229:             [false],",
      "230:             [new \\stdClass()],",
      "231:             [\"Content-Type\\r\\n\\r\\n\"],",
      "232:             [\"Content-Type\\r\\n\"],",
      "233:             [\"Content-Type\\n\"],",
      "234:             [\"\\r\\nContent-Type\"],",
      "235:             [\"\\nContent-Type\"],",
      "236:             [\"\\n\"],",
      "237:             [\"\\r\\n\"],",
      "238:             [\"\\t\"],",
      "239:         ];",
      "240:     }",
      "245:     public function testSetInvalidHeaderValue($headerValue)",
      "246:     {",
      "247:         $headers = new Headers();",
      "249:         $this->expectException(\\InvalidArgumentException::class);",
      "251:         $headers->setHeader('Content-Type', $headerValue);",
      "252:     }",
      "254:     public static function provideInvalidHeaderValues(): array",
      "255:     {",
      "257:         $tests = [",
      "258:             [\"new\\nline\"],",
      "259:             [\"new\\r\\nline\"],",
      "260:             [\"new\\rline\"],",
      "261:             [\"new\\r\\n line\"],",
      "262:             [\"newline\\n\"],",
      "263:             [\"\\nnewline\"],",
      "264:             [\"newline\\r\\n\"],",
      "265:             [\"\\n\\rnewline\"],",
      "266:         ];",
      "268:         for ($i = 0; $i <= 0xff; $i++) {",
      "269:             if (\\chr($i) == \"\\t\") {",
      "270:                 continue;",
      "271:             }",
      "272:             if (\\chr($i) == \" \") {",
      "273:                 continue;",
      "274:             }",
      "275:             if ($i >= 0x21 && $i <= 0x7e) {",
      "276:                 continue;",
      "277:             }",
      "278:             if ($i >= 0x80) {",
      "279:                 continue;",
      "280:             }",
      "282:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
      "283:             $tests[] = [\"foo\" . \\chr($i)];",
      "284:         }",
      "286:         return $tests;",
      "287:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8e7a38929abf690c3df44846c8ddc4ece5bc861",
      "candidate_info": {
        "commit_hash": "c8e7a38929abf690c3df44846c8ddc4ece5bc861",
        "repo": "slimphp/Slim-Psr7",
        "commit_url": "https://github.com/slimphp/Slim-Psr7/commit/c8e7a38929abf690c3df44846c8ddc4ece5bc861",
        "files": [
          "src/Headers.php",
          "tests/HeadersTest.php"
        ],
        "message": "Fix CVE-2023-30536 - GHSA-q2qj-628g-vhfw\n\nSecurity fix: Reject newlines at end of header names\n\n(cherry picked from commit ed1d553225dd190875d8814c47460daed4b550bb)",
        "before_after_code_files": [
          "src/Headers.php||src/Headers.php",
          "tests/HeadersTest.php||tests/HeadersTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ],
          "candidate": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Headers.php||src/Headers.php": [
          "File: src/Headers.php -> src/Headers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     protected function validateHeaderName($name): void",
          "271:     {",
          "273:             throw new InvalidArgumentException('Header name must be an RFC 7230 compatible string.');",
          "274:         }",
          "275:     }",
          "",
          "[Removed Lines]",
          "272:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@\", $name) !== 1) {",
          "",
          "[Added Lines]",
          "272:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@D\", $name) !== 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:             );",
          "290:         }",
          "293:         foreach ($items as $item) {",
          "294:             $hasInvalidType = !is_numeric($item) && !is_string($item);",
          "295:             $rejected = $hasInvalidType || preg_match($pattern, (string) $item) !== 1;",
          "",
          "[Removed Lines]",
          "292:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@\";",
          "",
          "[Added Lines]",
          "292:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@D\";",
          "",
          "---------------"
        ],
        "tests/HeadersTest.php||tests/HeadersTest.php": [
          "File: tests/HeadersTest.php -> tests/HeadersTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:         $headers = new Headers([], ['PHP_AUTH_DIGEST' => 'digest']);",
          "210:         $this->assertEquals(['digest'], $headers->getHeader('Authorization'));",
          "211:     }",
          "212: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     public function testWithInvalidHeaderName($headerName): void",
          "217:     {",
          "218:         $headers = new Headers();",
          "220:         $this->expectException(\\InvalidArgumentException::class);",
          "222:         $headers->setHeader($headerName, 'foo');",
          "223:     }",
          "225:     public static function provideInvalidHeaderNames(): array",
          "226:     {",
          "227:         return [",
          "228:             [[]],",
          "229:             [false],",
          "230:             [new \\stdClass()],",
          "231:             [\"Content-Type\\r\\n\\r\\n\"],",
          "232:             [\"Content-Type\\r\\n\"],",
          "233:             [\"Content-Type\\n\"],",
          "234:             [\"\\r\\nContent-Type\"],",
          "235:             [\"\\nContent-Type\"],",
          "236:             [\"\\n\"],",
          "237:             [\"\\r\\n\"],",
          "238:             [\"\\t\"],",
          "239:         ];",
          "240:     }",
          "245:     public function testSetInvalidHeaderValue($headerValue)",
          "246:     {",
          "247:         $headers = new Headers();",
          "249:         $this->expectException(\\InvalidArgumentException::class);",
          "251:         $headers->setHeader('Content-Type', $headerValue);",
          "252:     }",
          "254:     public static function provideInvalidHeaderValues(): array",
          "255:     {",
          "257:         $tests = [",
          "258:             [\"new\\nline\"],",
          "259:             [\"new\\r\\nline\"],",
          "260:             [\"new\\rline\"],",
          "261:             [\"new\\r\\n line\"],",
          "262:             [\"newline\\n\"],",
          "263:             [\"\\nnewline\"],",
          "264:             [\"newline\\r\\n\"],",
          "265:             [\"\\n\\rnewline\"],",
          "266:         ];",
          "268:         for ($i = 0; $i <= 0xff; $i++) {",
          "269:             if (\\chr($i) == \"\\t\") {",
          "270:                 continue;",
          "271:             }",
          "272:             if (\\chr($i) == \" \") {",
          "273:                 continue;",
          "274:             }",
          "275:             if ($i >= 0x21 && $i <= 0x7e) {",
          "276:                 continue;",
          "277:             }",
          "278:             if ($i >= 0x80) {",
          "279:                 continue;",
          "280:             }",
          "282:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
          "283:             $tests[] = [\"foo\" . \\chr($i)];",
          "284:         }",
          "286:         return $tests;",
          "287:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15192ea3af650f7e37545421122a2a44364f8ef9",
      "candidate_info": {
        "commit_hash": "15192ea3af650f7e37545421122a2a44364f8ef9",
        "repo": "slimphp/Slim-Psr7",
        "commit_url": "https://github.com/slimphp/Slim-Psr7/commit/15192ea3af650f7e37545421122a2a44364f8ef9",
        "files": [
          "src/Headers.php",
          "tests/HeadersTest.php"
        ],
        "message": "Fix CVE-2023-30536 - GHSA-q2qj-628g-vhfw\n\nSecurity fix: Reject newlines at end of header names\n\n(cherry picked from commit ed1d553225dd190875d8814c47460daed4b550bb)",
        "before_after_code_files": [
          "src/Headers.php||src/Headers.php",
          "tests/HeadersTest.php||tests/HeadersTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ],
          "candidate": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Headers.php||src/Headers.php": [
          "File: src/Headers.php -> src/Headers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     protected function validateHeaderName($name): void",
          "271:     {",
          "273:             throw new InvalidArgumentException('Header name must be an RFC 7230 compatible string.');",
          "274:         }",
          "275:     }",
          "",
          "[Removed Lines]",
          "272:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@\", $name) !== 1) {",
          "",
          "[Added Lines]",
          "272:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@D\", $name) !== 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:             );",
          "290:         }",
          "293:         foreach ($items as $item) {",
          "294:             $hasInvalidType = !is_numeric($item) && !is_string($item);",
          "295:             $rejected = $hasInvalidType || preg_match($pattern, (string) $item) !== 1;",
          "",
          "[Removed Lines]",
          "292:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@\";",
          "",
          "[Added Lines]",
          "292:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@D\";",
          "",
          "---------------"
        ],
        "tests/HeadersTest.php||tests/HeadersTest.php": [
          "File: tests/HeadersTest.php -> tests/HeadersTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:         $headers = new Headers([], ['PHP_AUTH_DIGEST' => 'digest']);",
          "210:         $this->assertEquals(['digest'], $headers->getHeader('Authorization'));",
          "211:     }",
          "212: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     public function testWithInvalidHeaderName($headerName): void",
          "217:     {",
          "218:         $headers = new Headers();",
          "220:         $this->expectException(\\InvalidArgumentException::class);",
          "222:         $headers->setHeader($headerName, 'foo');",
          "223:     }",
          "225:     public static function provideInvalidHeaderNames(): array",
          "226:     {",
          "227:         return [",
          "228:             [[]],",
          "229:             [false],",
          "230:             [new \\stdClass()],",
          "231:             [\"Content-Type\\r\\n\\r\\n\"],",
          "232:             [\"Content-Type\\r\\n\"],",
          "233:             [\"Content-Type\\n\"],",
          "234:             [\"\\r\\nContent-Type\"],",
          "235:             [\"\\nContent-Type\"],",
          "236:             [\"\\n\"],",
          "237:             [\"\\r\\n\"],",
          "238:             [\"\\t\"],",
          "239:         ];",
          "240:     }",
          "245:     public function testSetInvalidHeaderValue($headerValue)",
          "246:     {",
          "247:         $headers = new Headers();",
          "249:         $this->expectException(\\InvalidArgumentException::class);",
          "251:         $headers->setHeader('Content-Type', $headerValue);",
          "252:     }",
          "254:     public static function provideInvalidHeaderValues(): array",
          "255:     {",
          "257:         $tests = [",
          "258:             [\"new\\nline\"],",
          "259:             [\"new\\r\\nline\"],",
          "260:             [\"new\\rline\"],",
          "261:             [\"new\\r\\n line\"],",
          "262:             [\"newline\\n\"],",
          "263:             [\"\\nnewline\"],",
          "264:             [\"newline\\r\\n\"],",
          "265:             [\"\\n\\rnewline\"],",
          "266:         ];",
          "268:         for ($i = 0; $i <= 0xff; $i++) {",
          "269:             if (\\chr($i) == \"\\t\") {",
          "270:                 continue;",
          "271:             }",
          "272:             if (\\chr($i) == \" \") {",
          "273:                 continue;",
          "274:             }",
          "275:             if ($i >= 0x21 && $i <= 0x7e) {",
          "276:                 continue;",
          "277:             }",
          "278:             if ($i >= 0x80) {",
          "279:                 continue;",
          "280:             }",
          "282:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
          "283:             $tests[] = [\"foo\" . \\chr($i)];",
          "284:         }",
          "286:         return $tests;",
          "287:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72d2b2bac94ab4575d369f605dbfafbe168d3163",
      "candidate_info": {
        "commit_hash": "72d2b2bac94ab4575d369f605dbfafbe168d3163",
        "repo": "slimphp/Slim-Psr7",
        "commit_url": "https://github.com/slimphp/Slim-Psr7/commit/72d2b2bac94ab4575d369f605dbfafbe168d3163",
        "files": [
          "src/Headers.php",
          "tests/HeadersTest.php"
        ],
        "message": "Merge pull request from GHSA-q2qj-628g-vhfw\n\nSecurity fix: Reject newlines at end of header names",
        "before_after_code_files": [
          "src/Headers.php||src/Headers.php",
          "tests/HeadersTest.php||tests/HeadersTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ],
          "candidate": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Headers.php||src/Headers.php": [
          "File: src/Headers.php -> src/Headers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     protected function validateHeaderName($name): void",
          "268:     {",
          "270:             throw new InvalidArgumentException('Header name must be an RFC 7230 compatible string.');",
          "271:         }",
          "272:     }",
          "",
          "[Removed Lines]",
          "269:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@\", $name) !== 1) {",
          "",
          "[Added Lines]",
          "269:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@D\", $name) !== 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:             );",
          "287:         }",
          "290:         foreach ($items as $item) {",
          "291:             $hasInvalidType = !is_numeric($item) && !is_string($item);",
          "292:             $rejected = $hasInvalidType || preg_match($pattern, (string) $item) !== 1;",
          "",
          "[Removed Lines]",
          "289:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@\";",
          "",
          "[Added Lines]",
          "289:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@D\";",
          "",
          "---------------"
        ],
        "tests/HeadersTest.php||tests/HeadersTest.php": [
          "File: tests/HeadersTest.php -> tests/HeadersTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:         $headers = new Headers([], ['PHP_AUTH_DIGEST' => 'digest']);",
          "210:         $this->assertEquals(['digest'], $headers->getHeader('Authorization'));",
          "211:     }",
          "212: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     public function testWithInvalidHeaderName($headerName): void",
          "217:     {",
          "218:         $headers = new Headers();",
          "220:         $this->expectException(\\InvalidArgumentException::class);",
          "222:         $headers->setHeader($headerName, 'foo');",
          "223:     }",
          "225:     public static function provideInvalidHeaderNames(): array",
          "226:     {",
          "227:         return [",
          "228:             [[]],",
          "229:             [false],",
          "230:             [new \\stdClass()],",
          "231:             [\"Content-Type\\r\\n\\r\\n\"],",
          "232:             [\"Content-Type\\r\\n\"],",
          "233:             [\"Content-Type\\n\"],",
          "234:             [\"\\r\\nContent-Type\"],",
          "235:             [\"\\nContent-Type\"],",
          "236:             [\"\\n\"],",
          "237:             [\"\\r\\n\"],",
          "238:             [\"\\t\"],",
          "239:         ];",
          "240:     }",
          "245:     public function testSetInvalidHeaderValue($headerValue)",
          "246:     {",
          "247:         $headers = new Headers();",
          "249:         $this->expectException(\\InvalidArgumentException::class);",
          "251:         $headers->setHeader('Content-Type', $headerValue);",
          "252:     }",
          "254:     public static function provideInvalidHeaderValues(): array",
          "255:     {",
          "257:         $tests = [",
          "258:             [\"new\\nline\"],",
          "259:             [\"new\\r\\nline\"],",
          "260:             [\"new\\rline\"],",
          "261:             [\"new\\r\\n line\"],",
          "262:             [\"newline\\n\"],",
          "263:             [\"\\nnewline\"],",
          "264:             [\"newline\\r\\n\"],",
          "265:             [\"\\n\\rnewline\"],",
          "266:         ];",
          "268:         for ($i = 0; $i <= 0xff; $i++) {",
          "269:             if (\\chr($i) == \"\\t\") {",
          "270:                 continue;",
          "271:             }",
          "272:             if (\\chr($i) == \" \") {",
          "273:                 continue;",
          "274:             }",
          "275:             if ($i >= 0x21 && $i <= 0x7e) {",
          "276:                 continue;",
          "277:             }",
          "278:             if ($i >= 0x80) {",
          "279:                 continue;",
          "280:             }",
          "282:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
          "283:             $tests[] = [\"foo\" . \\chr($i)];",
          "284:         }",
          "286:         return $tests;",
          "287:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fea29e910391b1883de5bf6e84b50f6900355fb",
      "candidate_info": {
        "commit_hash": "4fea29e910391b1883de5bf6e84b50f6900355fb",
        "repo": "slimphp/Slim-Psr7",
        "commit_url": "https://github.com/slimphp/Slim-Psr7/commit/4fea29e910391b1883de5bf6e84b50f6900355fb",
        "files": [
          "src/Headers.php",
          "tests/HeadersTest.php"
        ],
        "message": "Security fix: Reject newlines at end of header names\n\nIf a header name has multiple newlines at the end of its name, it causes\nthe remaining headers to be pushed down into the body.\n\nMitigate this using the `D` regex modifier.\n\nThanks to Graham Campbell for the report and fix.",
        "before_after_code_files": [
          "src/Headers.php||src/Headers.php",
          "tests/HeadersTest.php||tests/HeadersTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ],
          "candidate": [
            "src/Headers.php||src/Headers.php",
            "tests/HeadersTest.php||tests/HeadersTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Headers.php||src/Headers.php": [
          "File: src/Headers.php -> src/Headers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     protected function validateHeaderName($name): void",
          "268:     {",
          "270:             throw new InvalidArgumentException('Header name must be an RFC 7230 compatible string.');",
          "271:         }",
          "272:     }",
          "",
          "[Removed Lines]",
          "269:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@\", $name) !== 1) {",
          "",
          "[Added Lines]",
          "269:         if (!is_string($name) || preg_match(\"@^[!#$%&'*+.^_`|~0-9A-Za-z-]+$@D\", $name) !== 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:             );",
          "287:         }",
          "290:         foreach ($items as $item) {",
          "291:             $hasInvalidType = !is_numeric($item) && !is_string($item);",
          "292:             $rejected = $hasInvalidType || preg_match($pattern, (string) $item) !== 1;",
          "",
          "[Removed Lines]",
          "289:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@\";",
          "",
          "[Added Lines]",
          "289:         $pattern = \"@^[ \\t\\x21-\\x7E\\x80-\\xFF]*$@D\";",
          "",
          "---------------"
        ],
        "tests/HeadersTest.php||tests/HeadersTest.php": [
          "File: tests/HeadersTest.php -> tests/HeadersTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:         $headers = new Headers([], ['PHP_AUTH_DIGEST' => 'digest']);",
          "210:         $this->assertEquals(['digest'], $headers->getHeader('Authorization'));",
          "211:     }",
          "212: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     public function testWithInvalidHeaderName($headerName): void",
          "217:     {",
          "218:         $headers = new Headers();",
          "220:         $this->expectException(\\InvalidArgumentException::class);",
          "222:         $headers->setHeader($headerName, 'foo');",
          "223:     }",
          "225:     public static function provideInvalidHeaderNames(): array",
          "226:     {",
          "227:         return [",
          "228:             [[]],",
          "229:             [false],",
          "230:             [new \\stdClass()],",
          "231:             [\"Content-Type\\r\\n\\r\\n\"],",
          "232:             [\"Content-Type\\r\\n\"],",
          "233:             [\"Content-Type\\n\"],",
          "234:             [\"\\r\\nContent-Type\"],",
          "235:             [\"\\nContent-Type\"],",
          "236:             [\"\\n\"],",
          "237:             [\"\\r\\n\"],",
          "238:             [\"\\t\"],",
          "239:         ];",
          "240:     }",
          "245:     public function testSetInvalidHeaderValue($headerValue)",
          "246:     {",
          "247:         $headers = new Headers();",
          "249:         $this->expectException(\\InvalidArgumentException::class);",
          "251:         $headers->setHeader('Content-Type', $headerValue);",
          "252:     }",
          "254:     public static function provideInvalidHeaderValues(): array",
          "255:     {",
          "257:         $tests = [",
          "258:             [\"new\\nline\"],",
          "259:             [\"new\\r\\nline\"],",
          "260:             [\"new\\rline\"],",
          "261:             [\"new\\r\\n line\"],",
          "262:             [\"newline\\n\"],",
          "263:             [\"\\nnewline\"],",
          "264:             [\"newline\\r\\n\"],",
          "265:             [\"\\n\\rnewline\"],",
          "266:         ];",
          "268:         for ($i = 0; $i <= 0xff; $i++) {",
          "269:             if (\\chr($i) == \"\\t\") {",
          "270:                 continue;",
          "271:             }",
          "272:             if (\\chr($i) == \" \") {",
          "273:                 continue;",
          "274:             }",
          "275:             if ($i >= 0x21 && $i <= 0x7e) {",
          "276:                 continue;",
          "277:             }",
          "278:             if ($i >= 0x80) {",
          "279:                 continue;",
          "280:             }",
          "282:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
          "283:             $tests[] = [\"foo\" . \\chr($i)];",
          "284:         }",
          "286:         return $tests;",
          "287:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}