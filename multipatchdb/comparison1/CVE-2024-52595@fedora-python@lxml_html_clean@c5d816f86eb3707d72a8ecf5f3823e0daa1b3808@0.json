{
  "cve_id": "CVE-2024-52595",
  "cve_desc": "lxml_html_clean is a project for HTML cleaning functionalities copied from `lxml.html.clean`. Prior to version 0.4.0, the HTML Parser in lxml does not properly handle context-switching for special HTML tags such as `<svg>`, `<math>` and `<noscript>`. This behavior deviates from how web browsers parse and interpret such tags. Specifically, content in CSS comments is ignored by lxml_html_clean but may be interpreted differently by web browsers, enabling malicious scripts to bypass the cleaning process. This vulnerability could lead to Cross-Site Scripting (XSS) attacks, compromising the security of users relying on lxml_html_clean in default configuration for sanitizing untrusted HTML content. Users employing the HTML cleaner in a security-sensitive context should upgrade to lxml 0.4.0, which addresses this issue. As a temporary mitigation, users can configure lxml_html_clean with the following settings to prevent the exploitation of this vulnerability. Via `remove_tags`, one may specify tags to remove - their content is moved to their parents' tags. Via `kill_tags`, one may specify tags to be removed completely. Via `allow_tags`, one may restrict the set of permissible tags, excluding context-switching tags like `<svg>`, `<math>` and `<noscript>`.",
  "repo": "fedora-python/lxml_html_clean",
  "patch_hash": "c5d816f86eb3707d72a8ecf5f3823e0daa1b3808",
  "patch_info": {
    "commit_hash": "c5d816f86eb3707d72a8ecf5f3823e0daa1b3808",
    "repo": "fedora-python/lxml_html_clean",
    "commit_url": "https://github.com/fedora-python/lxml_html_clean/commit/c5d816f86eb3707d72a8ecf5f3823e0daa1b3808",
    "files": [
      "lxml_html_clean/clean.py",
      "tests/test_clean.py"
    ],
    "message": "Scan for JS code also in CSS comments\n\nThe `Cleaner()` now scans for hidden JavaScript code embedded\nwithin CSS comments. In certain contexts, such as within `<svg>`\nor `<math>` tags, `<style>` tags may lose their intended function,\nallowing comments like `/* foo */` to potentially be executed by\nthe browser.",
    "before_after_code_files": [
      "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
      "tests/test_clean.py||tests/test_clean.py"
    ]
  },
  "patch_diff": {
    "lxml_html_clean/clean.py||lxml_html_clean/clean.py": [
      "File: lxml_html_clean/clean.py -> lxml_html_clean/clean.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "581:         that and remove only the Javascript from the style; this catches",
      "582:         more sneaky attempts.",
      "583:         \"\"\"",
      "586:         style = _substitute_whitespace('', style)",
      "587:         style = style.lower()",
      "600:         return False",
      "602:     def clean_html(self, html):",
      "",
      "[Removed Lines]",
      "584:         style = self._substitute_comments('', style)",
      "585:         style = style.replace('\\\\', '')",
      "588:         if _has_javascript_scheme(style):",
      "589:             return True",
      "590:         if 'expression(' in style:",
      "591:             return True",
      "592:         if '@import' in style:",
      "593:             return True",
      "594:         if '</noscript' in style:",
      "595:             # e.g. '<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">'",
      "596:             return True",
      "597:         if _looks_like_tag_content(style):",
      "598:             # e.g. '<math><style><img src=x onerror=alert(1)></style></math>'",
      "599:             return True",
      "",
      "[Added Lines]",
      "587:         for with_comments in True, False:",
      "588:             if not with_comments:",
      "589:                 style = self._substitute_comments('', style)",
      "591:             style = style.replace('\\\\', '')",
      "593:             if _has_javascript_scheme(style):",
      "594:                 return True",
      "595:             if 'expression(' in style:",
      "596:                 return True",
      "597:             if '@import' in style:",
      "598:                 return True",
      "599:             if '</noscript' in style:",
      "600:                 # e.g. '<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">'",
      "601:                 return True",
      "602:             if _looks_like_tag_content(style):",
      "603:                 # e.g. '<math><style><img src=x onerror=alert(1)></style></math>'",
      "604:                 return True",
      "",
      "---------------"
    ],
    "tests/test_clean.py||tests/test_clean.py": [
      "File: tests/test_clean.py -> tests/test_clean.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:             b'<math><style>/* deleted */</style></math>',",
      "128:             lxml.html.tostring(clean_html(s)))",
      "130:     def test_sneaky_import_in_style(self):",
      "131:         # Prevent \"@@importimport\" -> \"@import\" replacement etc.",
      "132:         style_codes = [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "130:     def test_sneaky_js_in_style_comment_math_svg(self):",
      "131:         for tag in \"svg\", \"math\":",
      "132:             html = f'<{tag}><style>/*<img src onerror=alert(origin)>*/'",
      "133:             s = lxml.html.fragment_fromstring(html)",
      "135:             self.assertEqual(",
      "136:                 f'<{tag}><style>/* deleted */</style></{tag}>'.encode(),",
      "137:                 lxml.html.tostring(clean_html(s)))",
      "139:     def test_sneaky_js_in_style_comment_noscript(self):",
      "140:         html = '<noscript><style>/*</noscript><img src onerror=alert(origin)>*/'",
      "141:         s = lxml.html.fragment_fromstring(html)",
      "143:         self.assertEqual(",
      "144:             b'<noscript><style>/* deleted */</style></noscript>',",
      "145:             lxml.html.tostring(clean_html(s)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0744252196ea31dfa0edeb92e3bd45d048a7beb",
      "candidate_info": {
        "commit_hash": "a0744252196ea31dfa0edeb92e3bd45d048a7beb",
        "repo": "fedora-python/lxml_html_clean",
        "commit_url": "https://github.com/fedora-python/lxml_html_clean/commit/a0744252196ea31dfa0edeb92e3bd45d048a7beb",
        "files": [
          "CHANGES.rst",
          "lxml_html_clean/clean.py",
          "tests/test_clean.py"
        ],
        "message": "Remove only the CSS comment if a suspicious content is detected",
        "before_after_code_files": [
          "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
          "tests/test_clean.py||tests/test_clean.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/fedora-python/lxml_html_clean/pull/19"
        ],
        "olp_code_files": {
          "patch": [
            "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
            "tests/test_clean.py||tests/test_clean.py"
          ],
          "candidate": [
            "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
            "tests/test_clean.py||tests/test_clean.py"
          ]
        }
      },
      "candidate_diff": {
        "lxml_html_clean/clean.py||lxml_html_clean/clean.py": [
          "File: lxml_html_clean/clean.py -> lxml_html_clean/clean.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:                     new = _replace_css_import('', new)",
          "367:                     if self._has_sneaky_javascript(new):",
          "368:                         # Something tricky is going on...",
          "371:                         el.text = new",
          "372:         if self.comments:",
          "373:             kill_tags.add(etree.Comment)",
          "",
          "[Removed Lines]",
          "369:                         el.text = '/* deleted */'",
          "370:                     elif new != old:",
          "",
          "[Added Lines]",
          "369:                         new = '/* deleted */'",
          "370:                     else:",
          "371:                         new = self._remove_sneaky_css_comments(new)",
          "373:                     if new != old:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             return ''",
          "569:         return link",
          "573:     def _has_sneaky_javascript(self, style):",
          "574:         \"\"\"",
          "",
          "[Removed Lines]",
          "571:     _substitute_comments = re.compile(r'/\\*.*?\\*/', re.S).sub",
          "",
          "[Added Lines]",
          "574:     _comments_re = re.compile(r'/\\*.*?\\*/', re.S)",
          "575:     _find_comments = _comments_re.finditer",
          "576:     _substitute_comments = _comments_re.sub",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:         that and remove only the Javascript from the style; this catches",
          "582:         more sneaky attempts.",
          "583:         \"\"\"",
          "584:         style = _substitute_whitespace('', style)",
          "585:         style = style.lower()",
          "605:         return False",
          "607:     def clean_html(self, html):",
          "608:         result_type = type(html)",
          "609:         if isinstance(html, (str, bytes)):",
          "",
          "[Removed Lines]",
          "587:         for with_comments in True, False:",
          "588:             if not with_comments:",
          "589:                 style = self._substitute_comments('', style)",
          "591:             style = style.replace('\\\\', '')",
          "593:             if _has_javascript_scheme(style):",
          "594:                 return True",
          "595:             if 'expression(' in style:",
          "596:                 return True",
          "597:             if '@import' in style:",
          "598:                 return True",
          "599:             if '</noscript' in style:",
          "600:                 # e.g. '<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">'",
          "601:                 return True",
          "602:             if _looks_like_tag_content(style):",
          "603:                 # e.g. '<math><style><img src=x onerror=alert(1)></style></math>'",
          "604:                 return True",
          "",
          "[Added Lines]",
          "589:         style = self._substitute_comments('', style)",
          "590:         style = style.replace('\\\\', '')",
          "593:         if _has_javascript_scheme(style):",
          "594:             return True",
          "595:         if 'expression(' in style:",
          "596:             return True",
          "597:         if '@import' in style:",
          "598:             return True",
          "599:         if '</noscript' in style:",
          "600:             # e.g. '<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">'",
          "601:             return True",
          "602:         if _looks_like_tag_content(style):",
          "603:             # e.g. '<math><style><img src=x onerror=alert(1)></style></math>'",
          "604:             return True",
          "607:     def _remove_sneaky_css_comments(self, style):",
          "608:         \"\"\"",
          "609:         Look for suspicious code in CSS comment and if found,",
          "610:         remove the entire comment from the given style.",
          "612:         Browsers might parse <style> as an ordinary HTML tag",
          "613:         in some specific context and that might cause code in CSS",
          "614:         comments to run.",
          "615:         \"\"\"",
          "616:         for match in self._find_comments(style):",
          "617:             comment = match.group(0)",
          "618:             print(\"f\", comment)",
          "619:             if _has_javascript_scheme(comment) or _looks_like_tag_content(comment):",
          "620:                 style = style.replace(comment, \"/* deleted */\")",
          "621:                 print(\"f\", style)",
          "623:         return style",
          "",
          "---------------"
        ],
        "tests/test_clean.py||tests/test_clean.py": [
          "File: tests/test_clean.py -> tests/test_clean.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     def test_sneaky_js_in_style_comment_math_svg(self):",
          "131:         for tag in \"svg\", \"math\":",
          "133:             s = lxml.html.fragment_fromstring(html)",
          "135:             self.assertEqual(",
          "137:                 lxml.html.tostring(clean_html(s)))",
          "139:     def test_sneaky_js_in_style_comment_noscript(self):",
          "141:         s = lxml.html.fragment_fromstring(html)",
          "143:         self.assertEqual(",
          "145:             lxml.html.tostring(clean_html(s)))",
          "147:     def test_sneaky_import_in_style(self):",
          "",
          "[Removed Lines]",
          "132:             html = f'<{tag}><style>/*<img src onerror=alert(origin)>*/'",
          "136:                 f'<{tag}><style>/* deleted */</style></{tag}>'.encode(),",
          "140:         html = '<noscript><style>/*</noscript><img src onerror=alert(origin)>*/'",
          "144:             b'<noscript><style>/* deleted */</style></noscript>',",
          "",
          "[Added Lines]",
          "132:             html = f'<{tag}><style>p {{color: red;}}/*<img src onerror=alert(origin)>*/h2 {{color: blue;}}</style></{tag}>'",
          "135:             expected = f'<{tag}><style>p {{color: red;}}/* deleted */h2 {{color: blue;}}</style></{tag}>'.encode()",
          "138:                 expected,",
          "142:         html = '<noscript><style>p {{color: red;}}/*</noscript><img src onerror=alert(origin)>*/h2 {{color: blue;}}</style></noscript>'",
          "146:             b'<noscript><style>p {{color: red;}}/* deleted */h2 {{color: blue;}}</style></noscript>',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90bcfa8a8b5272b990238f03950d4c1584572f09",
      "candidate_info": {
        "commit_hash": "90bcfa8a8b5272b990238f03950d4c1584572f09",
        "repo": "fedora-python/lxml_html_clean",
        "commit_url": "https://github.com/fedora-python/lxml_html_clean/commit/90bcfa8a8b5272b990238f03950d4c1584572f09",
        "files": [
          "CHANGES.rst",
          "setup.cfg"
        ],
        "message": "Release 0.4.0",
        "before_after_code_files": [
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/fedora-python/lxml_html_clean/pull/19"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [metadata]",
          "2: name = lxml_html_clean",
          "4: description = HTML cleaner from lxml project",
          "5: long_description = file:README.md",
          "6: long_description_content_type = text/markdown",
          "",
          "[Removed Lines]",
          "3: version = 0.3.1",
          "",
          "[Added Lines]",
          "3: version = 0.4.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b644e989d56378150d96871ce0f612753466521",
      "candidate_info": {
        "commit_hash": "3b644e989d56378150d96871ce0f612753466521",
        "repo": "fedora-python/lxml_html_clean",
        "commit_url": "https://github.com/fedora-python/lxml_html_clean/commit/3b644e989d56378150d96871ce0f612753466521",
        "files": [
          "lxml_html_clean/clean.py",
          "tests/test_clean.py"
        ],
        "message": "Scan for JS code also in CSS comments\n\nThe `Cleaner()` now scans for hidden JavaScript code embedded\nwithin CSS comments. In certain contexts, such as within `<svg>`\nor `<math>` tags, `<style>` tags may lose their intended function,\nallowing comments like `/* foo */` to potentially be executed by\nthe browser.",
        "before_after_code_files": [
          "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
          "tests/test_clean.py||tests/test_clean.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
            "tests/test_clean.py||tests/test_clean.py"
          ],
          "candidate": [
            "lxml_html_clean/clean.py||lxml_html_clean/clean.py",
            "tests/test_clean.py||tests/test_clean.py"
          ]
        }
      },
      "candidate_diff": {
        "lxml_html_clean/clean.py||lxml_html_clean/clean.py": [
          "File: lxml_html_clean/clean.py -> lxml_html_clean/clean.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:         that and remove only the Javascript from the style; this catches",
          "582:         more sneaky attempts.",
          "583:         \"\"\"",
          "586:         style = _substitute_whitespace('', style)",
          "587:         style = style.lower()",
          "600:         return False",
          "602:     def clean_html(self, html):",
          "",
          "[Removed Lines]",
          "584:         style = self._substitute_comments('', style)",
          "585:         style = style.replace('\\\\', '')",
          "588:         if _has_javascript_scheme(style):",
          "589:             return True",
          "590:         if 'expression(' in style:",
          "591:             return True",
          "592:         if '@import' in style:",
          "593:             return True",
          "594:         if '</noscript' in style:",
          "595:             # e.g. '<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">'",
          "596:             return True",
          "597:         if _looks_like_tag_content(style):",
          "598:             # e.g. '<math><style><img src=x onerror=alert(1)></style></math>'",
          "599:             return True",
          "",
          "[Added Lines]",
          "587:         for with_comments in True, False:",
          "588:             if not with_comments:",
          "589:                 style = self._substitute_comments('', style)",
          "591:             style = style.replace('\\\\', '')",
          "593:             if _has_javascript_scheme(style):",
          "594:                 return True",
          "595:             if 'expression(' in style:",
          "596:                 return True",
          "597:             if '@import' in style:",
          "598:                 return True",
          "599:             if '</noscript' in style:",
          "600:                 # e.g. '<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">'",
          "601:                 return True",
          "602:             if _looks_like_tag_content(style):",
          "603:                 # e.g. '<math><style><img src=x onerror=alert(1)></style></math>'",
          "604:                 return True",
          "",
          "---------------"
        ],
        "tests/test_clean.py||tests/test_clean.py": [
          "File: tests/test_clean.py -> tests/test_clean.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:             b'<math><style>/* deleted */</style></math>',",
          "128:             lxml.html.tostring(clean_html(s)))",
          "130:     def test_sneaky_import_in_style(self):",
          "131:         # Prevent \"@@importimport\" -> \"@import\" replacement etc.",
          "132:         style_codes = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     def test_sneaky_js_in_style_comment_math_svg(self):",
          "131:         for tag in \"svg\", \"math\":",
          "132:             html = f'<{tag}><style>/*<img src onerror=alert(origin)>*/'",
          "133:             s = lxml.html.fragment_fromstring(html)",
          "135:             self.assertEqual(",
          "136:                 f'<{tag}><style>/* deleted */</style></{tag}>'.encode(),",
          "137:                 lxml.html.tostring(clean_html(s)))",
          "139:     def test_sneaky_js_in_style_comment_noscript(self):",
          "140:         html = '<noscript><style>/*</noscript><img src onerror=alert(origin)>*/'",
          "141:         s = lxml.html.fragment_fromstring(html)",
          "143:         self.assertEqual(",
          "144:             b'<noscript><style>/* deleted */</style></noscript>',",
          "145:             lxml.html.tostring(clean_html(s)))",
          "",
          "---------------"
        ]
      }
    }
  ]
}