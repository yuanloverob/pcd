{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57de785b17f069426b217e9ef169637b4d52c7bc",
      "candidate_info": {
        "commit_hash": "57de785b17f069426b217e9ef169637b4d52c7bc",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/57de785b17f069426b217e9ef169637b4d52c7bc",
        "files": [
          ".release/ci.hcl",
          "client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go",
          "version/version.go"
        ],
        "message": "Prepare for next release",
        "before_after_code_files": [
          ".release/ci.hcl||.release/ci.hcl",
          "client/structs/structs.generated.go||client/structs/structs.generated.go",
          "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go",
          "version/version.go||version/version.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".release/ci.hcl||.release/ci.hcl": [
          "File: .release/ci.hcl -> .release/ci.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   team = \"nomad\"",
          "9:   slack {",
          "11:   }",
          "13:   github {",
          "",
          "[Removed Lines]",
          "10:     notification_channel = \"CUYKT2A73\"",
          "",
          "[Added Lines]",
          "10:     notification_channel = \"C03B5EWFW01\"",
          "",
          "---------------"
        ],
        "client/structs/structs.generated.go||client/structs/structs.generated.go": [
          "File: client/structs/structs.generated.go -> client/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/structs/structs.generated.go||nomad/structs/structs.generated.go": [
          "File: nomad/structs/structs.generated.go -> nomad/structs/structs.generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version/version.go||version/version.go": [
          "File: version/version.go -> version/version.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  GitDescribe string",
          "30:  VersionMetadata = \"\"",
          "",
          "[Removed Lines]",
          "22:  Version = \"1.9.2\"",
          "27:  VersionPrerelease = \"\"",
          "",
          "[Added Lines]",
          "22:  Version = \"1.9.3\"",
          "27:  VersionPrerelease = \"dev\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acf4197abd335c4e9a348147a02a6cb9675ea96f",
      "candidate_info": {
        "commit_hash": "acf4197abd335c4e9a348147a02a6cb9675ea96f",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/acf4197abd335c4e9a348147a02a6cb9675ea96f",
        "files": [
          ".changelog/24340.txt",
          "drivers/shared/executor/executor.go",
          "drivers/shared/executor/executor_basic.go",
          "drivers/shared/executor/executor_universal_linux.go",
          "drivers/shared/executor/executor_universal_linux_test.go"
        ],
        "message": "backport of commit b58abf48c1c8ac7d62204e01e8d17fa65235fc91 (#24386)\n\nCo-authored-by: Seth Hoenig <shoenig@duck.com>",
        "before_after_code_files": [
          "drivers/shared/executor/executor.go||drivers/shared/executor/executor.go",
          "drivers/shared/executor/executor_basic.go||drivers/shared/executor/executor_basic.go",
          "drivers/shared/executor/executor_universal_linux.go||drivers/shared/executor/executor_universal_linux.go",
          "drivers/shared/executor/executor_universal_linux_test.go||drivers/shared/executor/executor_universal_linux_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/shared/executor/executor.go||drivers/shared/executor/executor.go": [
          "File: drivers/shared/executor/executor.go -> drivers/shared/executor/executor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:  }",
          "383:   e.logger.Error(\"failed to configure container, process isolation will not work\", \"error\", err)",
          "384:   if os.Geteuid() == 0 || e.usesCustomCgroup() {",
          "385:    return nil, fmt.Errorf(\"unable to configure cgroups: %w\", err)",
          "",
          "[Removed Lines]",
          "382:  if cleanup, err := e.configureResourceContainer(command, os.Getpid()); err != nil {",
          "",
          "[Added Lines]",
          "382:  running, cleanup, err := e.configureResourceContainer(command, os.Getpid())",
          "383:  if err != nil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:   return nil, fmt.Errorf(\"failed to start command path=%q --- args=%q: %v\", path, e.childCmd.Args, err)",
          "425:  }",
          "427:  go e.wait()",
          "428:  return &ProcessState{Pid: e.childCmd.Process.Pid, ExitCode: -1, Time: time.Now()}, nil",
          "429: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:  if err := running(); err != nil {",
          "430:   return nil, err",
          "431:  }",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_basic.go||drivers/shared/executor/executor_basic.go": [
          "File: drivers/shared/executor/executor_basic.go -> drivers/shared/executor/executor_basic.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  return NewExecutor(logger, compute)",
          "22: }",
          "27: }",
          "29: func (e *UniversalExecutor) start(command *ExecCommand) error {",
          "",
          "[Removed Lines]",
          "24: func (e *UniversalExecutor) configureResourceContainer(_ *ExecCommand, _ int) (func(), error) {",
          "25:  nothing := func() {}",
          "26:  return nothing, nil",
          "",
          "[Added Lines]",
          "24: func (e *UniversalExecutor) configureResourceContainer(_ *ExecCommand, _ int) (func() error, func(), error) {",
          "25:  cleanup := func() {}",
          "26:  running := func() error { return nil }",
          "27:  return running, cleanup, nil",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_universal_linux.go||drivers/shared/executor/executor_universal_linux.go": [
          "File: drivers/shared/executor/executor_universal_linux.go -> drivers/shared/executor/executor_universal_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  return fd, cleanup, err",
          "115: }",
          "122:  cgroup := command.StatsCgroup()",
          "125:  if err := e.setOomAdj(command.OOMScoreAdj); err != nil {",
          "127:  }",
          "135:  switch cgroupslib.GetMode() {",
          "136:  case cgroupslib.CG1:",
          "137:   if err := e.configureCG1(cgroup, command); err != nil {",
          "139:   }",
          "141:  default:",
          "142:   e.configureCG2(cgroup, command)",
          "145:   fd, cleanup, err := e.statCG(cgroup)",
          "146:   if err != nil {",
          "148:   }",
          "149:   e.childCmd.SysProcAttr.UseCgroupFD = true",
          "150:   e.childCmd.SysProcAttr.CgroupFD = fd",
          "152:  }",
          "154:  e.logger.Info(\"configured cgroup for executor\", \"pid\", pid)",
          "157: }",
          "164:  pid := strconv.Itoa(unix.Getpid())",
          "",
          "[Removed Lines]",
          "121: func (e *UniversalExecutor) configureResourceContainer(command *ExecCommand, pid int) (func(), error) {",
          "126:   return nil, err",
          "132:  var cgCleanup func()",
          "138:    return nil, err",
          "140:   cgCleanup = e.enterCG1(cgroup, command.CpusetCgroup())",
          "147:    return nil, err",
          "151:   cgCleanup = cleanup",
          "156:  return cgCleanup, nil",
          "163: func (e *UniversalExecutor) enterCG1(statsCgroup, cpusetCgroup string) func() {",
          "",
          "[Added Lines]",
          "121: type runningFunc func() error",
          "127: type cleanupFunc func()",
          "133: func (e *UniversalExecutor) configureResourceContainer(",
          "134:  command *ExecCommand,",
          "135:  pid int,",
          "136: ) (runningFunc, cleanupFunc, error) {",
          "141:   return nil, nil, err",
          "147:  var (",
          "148:   deleteCgroup cleanupFunc",
          "149:   moveProcess  runningFunc",
          "150:  )",
          "156:    return nil, nil, err",
          "158:   moveProcess, deleteCgroup = e.enterCG1(cgroup, command.CpusetCgroup())",
          "165:    return nil, nil, err",
          "169:   deleteCgroup = cleanup",
          "170:   moveProcess = func() error { return nil }",
          "175:  return moveProcess, deleteCgroup, nil",
          "182: func (e *UniversalExecutor) enterCG1(statsCgroup, cpusetCgroup string) (runningFunc, cleanupFunc) {",
          "183:  ed := cgroupslib.OpenPath(cpusetCgroup)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:  }",
          "178:  err := ed.Write(\"cgroup.procs\", pid)",
          "179:  if err != nil {",
          "180:   e.logger.Warn(\"failed to write cpuset cgroup\", \"error\", err)",
          "181:  }",
          "186:    err := cgroupslib.WriteNomadCG1(iface, \"cgroup.procs\", pid)",
          "187:    if err != nil {",
          "188:     e.logger.Warn(\"failed to move executor cgroup\", \"interface\", iface, \"error\", err)",
          "189:    }",
          "190:   }",
          "191:  }",
          "192: }",
          "194: func (e *UniversalExecutor) configureCG1(cgroup string, command *ExecCommand) error {",
          "",
          "[Removed Lines]",
          "177:  ed := cgroupslib.OpenPath(cpusetCgroup)",
          "184:  return func() {",
          "185:   for _, iface := range ifaces {",
          "",
          "[Added Lines]",
          "202:  move := func() error {",
          "204:   for _, iface := range append(ifaces, \"cpuset\") {",
          "208:     return err",
          "211:   return nil",
          "215:  cleanup := func() {}",
          "217:  return move, cleanup",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_universal_linux_test.go||drivers/shared/executor/executor_universal_linux_test.go": [
          "File: drivers/shared/executor/executor_universal_linux_test.go -> drivers/shared/executor/executor_universal_linux_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"fmt\"",
          "10:  \"os\"",
          "11:  \"strconv\"",
          "12:  \"strings\"",
          "13:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"path/filepath\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:  oomScoreInt, _ := strconv.Atoi(strings.TrimSuffix(string(oomScore), \"\\n\"))",
          "128:  must.Eq(t, execCmd.OOMScoreAdj, int32(oomScoreInt))",
          "129: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: func TestUniversalExecutor_cg1_no_executor_pid(t *testing.T) {",
          "133:  testutil.CgroupsCompatibleV1(t)",
          "134:  ci.Parallel(t)",
          "136:  factory := universalFactory",
          "137:  testExecCmd := testExecutorCommand(t)",
          "138:  execCmd, allocDir := testExecCmd.command, testExecCmd.allocDir",
          "139:  execCmd.Cmd = \"sleep\"",
          "140:  execCmd.Args = []string{\"infinity\"}",
          "142:  factory.configureExecCmd(t, execCmd)",
          "143:  defer allocDir.Destroy()",
          "144:  executor := factory.new(testlog.HCLogger(t), compute)",
          "145:  defer executor.Shutdown(\"\", 0)",
          "147:  p, err := executor.Launch(execCmd)",
          "148:  must.NoError(t, err)",
          "150:  alloc := filepath.Base(allocDir.AllocDirPath())",
          "152:  ifaces := []string{\"cpu\", \"memory\", \"freezer\"}",
          "153:  for _, iface := range ifaces {",
          "154:   cgroup := fmt.Sprintf(\"/sys/fs/cgroup/%s/nomad/%s.web/cgroup.procs\", iface, alloc)",
          "156:   content, err := os.ReadFile(cgroup)",
          "157:   must.NoError(t, err)",
          "160:   pids := strings.Fields(string(content))",
          "161:   must.SliceLen(t, 1, pids)",
          "162:   must.Eq(t, pids[0], strconv.Itoa(p.Pid))",
          "163:  }",
          "164: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d991bf0645796bd06591a7ff0aa72900b96bdddc",
      "candidate_info": {
        "commit_hash": "d991bf0645796bd06591a7ff0aa72900b96bdddc",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/d991bf0645796bd06591a7ff0aa72900b96bdddc",
        "files": [
          "client/allocwatcher/alloc_watcher.go"
        ],
        "message": "backport of commit 7726ae68c6597fefe517572d08bc0fae3d85c519 (#24809)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "client/allocwatcher/alloc_watcher.go||client/allocwatcher/alloc_watcher.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocwatcher/alloc_watcher.go||client/allocwatcher/alloc_watcher.go": [
          "File: client/allocwatcher/alloc_watcher.go -> client/allocwatcher/alloc_watcher.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  }",
          "253:  for {",
          "254:   select {",
          "255:   case prevAlloc, ok := <-p.prevListener.Ch():",
          "",
          "[Removed Lines]",
          "252:  p.logger.Debug(\"waiting for previous alloc to terminate\")",
          "",
          "[Added Lines]",
          "252:  p.logger.Info(\"waiting for previous alloc to terminate\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:   p.waitingLock.Unlock()",
          "351:  }()",
          "354:  req := structs.AllocSpecificRequest{",
          "355:   AllocID: p.prevAllocID,",
          "356:   QueryOptions: structs.QueryOptions{",
          "",
          "[Removed Lines]",
          "353:  p.logger.Debug(\"waiting for remote previous alloc to terminate\")",
          "",
          "[Added Lines]",
          "353:  p.logger.Info(\"waiting for remote previous alloc to terminate\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c4e183c7464aac1ba233986ebcb4ff1af3955a4",
      "candidate_info": {
        "commit_hash": "0c4e183c7464aac1ba233986ebcb4ff1af3955a4",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/0c4e183c7464aac1ba233986ebcb4ff1af3955a4",
        "files": [
          "website/content/api-docs/jobs.mdx"
        ],
        "message": "backport of commit 09703b244ac3205cc0e3e544706dac0642c1233e (#24324)\n\nCo-authored-by: Etienne Bruines <e.bruines@q-mex.net>",
        "before_after_code_files": [
          "website/content/api-docs/jobs.mdx||website/content/api-docs/jobs.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "website/content/api-docs/jobs.mdx||website/content/api-docs/jobs.mdx": [
          "File: website/content/api-docs/jobs.mdx -> website/content/api-docs/jobs.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1764: - `:job_id` `(string: <required>)` - Specifies the ID of the job. This is",
          "1765:   specified as part of the path.",
          "1768:   than one instance of the job from being dispatched. This is specified as a",
          "1769:   URL query parameter.",
          "",
          "[Removed Lines]",
          "1767: - `IdempotencyToken` `(string: \"\")` - Optional identifier used to prevent more",
          "",
          "[Added Lines]",
          "1767: - `idempotency_token` `(string: \"\")` - Optional identifier used to prevent more",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7b2d79213d598513b2b59f9343cbe9380d73eeb",
      "candidate_info": {
        "commit_hash": "b7b2d79213d598513b2b59f9343cbe9380d73eeb",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/b7b2d79213d598513b2b59f9343cbe9380d73eeb",
        "files": [
          ".changelog/24526.txt",
          "client/fingerprint/consul.go",
          "client/fingerprint/consul_test.go",
          "client/fingerprint/vault.go",
          "client/fingerprint/vault_test.go"
        ],
        "message": "fingerprint: convert consul and vault fingerprinters to be reloadable (#24954)\n\nbackport of commit 135688096290a38f64ca323cc2d2ecb54d5e1bda\n\nCo-authored-by: Seth Hoenig <shoenig@duck.com>",
        "before_after_code_files": [
          "client/fingerprint/consul.go||client/fingerprint/consul.go",
          "client/fingerprint/consul_test.go||client/fingerprint/consul_test.go",
          "client/fingerprint/vault.go||client/fingerprint/vault.go",
          "client/fingerprint/vault_test.go||client/fingerprint/vault_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/fingerprint/consul.go||client/fingerprint/consul.go": [
          "File: client/fingerprint/consul.go -> client/fingerprint/consul.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  consulapi \"github.com/hashicorp/consul/api\"",
          "14:  \"github.com/hashicorp/go-hclog\"",
          "16:  \"github.com/hashicorp/go-multierror\"",
          "17:  \"github.com/hashicorp/go-sockaddr\"",
          "18:  \"github.com/hashicorp/go-version\"",
          "19:  agentconsul \"github.com/hashicorp/nomad/command/agent/consul\"",
          "21:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "22:  \"github.com/hashicorp/nomad/nomad/structs/config\"",
          "23: )",
          "",
          "[Removed Lines]",
          "15:  log \"github.com/hashicorp/go-hclog\"",
          "20:  \"github.com/hashicorp/nomad/helper\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  consulGRPCPortChangeVersion = version.Must(version.NewVersion(\"1.14.0\"))",
          "35: )",
          "38: type ConsulFingerprint struct {",
          "41: }",
          "48: }",
          "56:  return &ConsulFingerprint{",
          "59:  }",
          "60: }",
          "",
          "[Removed Lines]",
          "34:  consulBaseFingerprintInterval = 15 * time.Second",
          "39:  logger log.Logger",
          "40:  states map[string]*consulFingerprintState",
          "43: type consulFingerprintState struct {",
          "44:  client      *consulapi.Client",
          "45:  isAvailable bool",
          "46:  extractors  map[string]consulExtractor",
          "47:  nextCheck   time.Time",
          "52: type consulExtractor func(agentconsul.Self) (string, bool)",
          "55: func NewConsulFingerprint(logger log.Logger) Fingerprint {",
          "57:   logger: logger.Named(\"consul\"),",
          "58:   states: map[string]*consulFingerprintState{},",
          "",
          "[Added Lines]",
          "33:  logger hclog.Logger",
          "37:  clusters map[string]*consulState",
          "40: type consulState struct {",
          "41:  client *consulapi.Client",
          "45:  readers map[string]valueReader",
          "50: type valueReader func(agentconsul.Self) (string, bool)",
          "53: func NewConsulFingerprint(logger hclog.Logger) Fingerprint {",
          "55:   logger:   logger.Named(\"consul\"),",
          "56:   clusters: map[string]*consulState{},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: }",
          "75: func (f *ConsulFingerprint) fingerprintImpl(cfg *config.ConsulConfig, resp *FingerprintResponse) error {",
          "77:  logger := f.logger.With(\"cluster\", cfg.Name)",
          "80:  if !ok {",
          "86:  }",
          "88:  if err := state.initialize(cfg, logger); err != nil {",
          "",
          "[Removed Lines]",
          "79:  state, ok := f.states[cfg.Name]",
          "81:   state = &consulFingerprintState{}",
          "82:   f.states[cfg.Name] = state",
          "83:  }",
          "84:  if state.nextCheck.After(time.Now()) {",
          "85:   return nil",
          "",
          "[Added Lines]",
          "76:  state, ok := f.clusters[cfg.Name]",
          "78:   state = &consulState{}",
          "79:   f.clusters[cfg.Name] = state",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:  info := state.query(logger)",
          "94:  if len(info) == 0 {",
          "96:   return nil",
          "97:  }",
          "101:   if s, ok := extractor(info); !ok {",
          "102:    logger.Warn(\"unable to fingerprint consul\", \"attribute\", attr)",
          "103:   } else if s != \"\" {",
          "",
          "[Removed Lines]",
          "100:  for attr, extractor := range state.extractors {",
          "",
          "[Added Lines]",
          "90:   resp.Detected = true",
          "95:  for attr, extractor := range state.readers {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:  f.link(resp)",
          "122:  resp.Detected = true",
          "123:  return nil",
          "124: }",
          "126: func (f *ConsulFingerprint) Periodic() (bool, time.Duration) {",
          "140: }",
          "143:  if cfs.client != nil {",
          "144:   return nil // already initialized!",
          "145:  }",
          "",
          "[Removed Lines]",
          "112:  if !state.isAvailable {",
          "113:   logger.Info(\"consul agent is available\")",
          "114:  }",
          "120:  state.nextCheck = time.Now().Add(29 * time.Second)",
          "121:  state.isAvailable = true",
          "127:  if len(f.states) == 0 {",
          "128:   return true, consulBaseFingerprintInterval",
          "129:  }",
          "130:  for _, state := range f.states {",
          "131:   if !state.isAvailable {",
          "132:    return true, consulBaseFingerprintInterval",
          "133:   }",
          "134:  }",
          "139:  return true, (30 * time.Second) + helper.RandomStagger(90*time.Second)",
          "142: func (cfs *consulFingerprintState) initialize(cfg *config.ConsulConfig, logger hclog.Logger) error {",
          "",
          "[Added Lines]",
          "111:  return false, 0",
          "115: func (f *ConsulFingerprint) Reload() {}",
          "117: func (cfs *consulState) initialize(cfg *config.ConsulConfig, logger hclog.Logger) error {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:  }",
          "157:  if cfg.Name == structs.ConsulDefaultCluster {",
          "159:    \"consul.server\":        cfs.server,",
          "160:    \"consul.version\":       cfs.version,",
          "161:    \"consul.sku\":           cfs.sku,",
          "",
          "[Removed Lines]",
          "158:   cfs.extractors = map[string]consulExtractor{",
          "",
          "[Added Lines]",
          "133:   cfs.readers = map[string]valueReader{",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:    \"consul.dns.addr\":      cfs.dnsAddr(logger),",
          "172:   }",
          "173:  } else {",
          "175:    fmt.Sprintf(\"consul.%s.server\", cfg.Name):        cfs.server,",
          "176:    fmt.Sprintf(\"consul.%s.version\", cfg.Name):       cfs.version,",
          "177:    fmt.Sprintf(\"consul.%s.sku\", cfg.Name):           cfs.sku,",
          "",
          "[Removed Lines]",
          "174:   cfs.extractors = map[string]consulExtractor{",
          "",
          "[Added Lines]",
          "149:   cfs.readers = map[string]valueReader{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190:  return nil",
          "191: }",
          "196:  info, err := cfs.client.Agent().Self()",
          "197:  if err != nil {",
          "204:   return nil",
          "205:  }",
          "206:  return info",
          "",
          "[Removed Lines]",
          "193: func (cfs *consulFingerprintState) query(logger hclog.Logger) agentconsul.Self {",
          "199:   if cfs.isAvailable {",
          "200:    logger.Info(\"consul agent is unavailable\", \"error\", err)",
          "201:   }",
          "202:   cfs.isAvailable = false",
          "203:   cfs.nextCheck = time.Time{} // force check on next interval",
          "",
          "[Added Lines]",
          "168: func (cfs *consulState) query(logger hclog.Logger) agentconsul.Self {",
          "173:   logger.Warn(\"failed to acquire consul self endpoint\", \"error\", err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:  }",
          "217: }",
          "220:  s, ok := info[\"Config\"][\"Server\"].(bool)",
          "221:  return strconv.FormatBool(s), ok",
          "222: }",
          "225:  v, ok := info[\"Config\"][\"Version\"].(string)",
          "226:  return v, ok",
          "227: }",
          "230:  return agentconsul.SKU(info)",
          "231: }",
          "234:  r, ok := info[\"Config\"][\"Revision\"].(string)",
          "235:  return r, ok",
          "236: }",
          "239:  n, ok := info[\"Config\"][\"NodeName\"].(string)",
          "240:  return n, ok",
          "241: }",
          "244:  d, ok := info[\"Config\"][\"Datacenter\"].(string)",
          "245:  return d, ok",
          "246: }",
          "249:  tags, tagsOK := info[\"Member\"][\"Tags\"].(map[string]interface{})",
          "250:  if !tagsOK {",
          "251:   return \"\", false",
          "",
          "[Removed Lines]",
          "219: func (cfs *consulFingerprintState) server(info agentconsul.Self) (string, bool) {",
          "224: func (cfs *consulFingerprintState) version(info agentconsul.Self) (string, bool) {",
          "229: func (cfs *consulFingerprintState) sku(info agentconsul.Self) (string, bool) {",
          "233: func (cfs *consulFingerprintState) revision(info agentconsul.Self) (string, bool) {",
          "238: func (cfs *consulFingerprintState) name(info agentconsul.Self) (string, bool) {",
          "243: func (cfs *consulFingerprintState) dc(info agentconsul.Self) (string, bool) {",
          "248: func (cfs *consulFingerprintState) segment(info agentconsul.Self) (string, bool) {",
          "",
          "[Added Lines]",
          "189: func (cfs *consulState) server(info agentconsul.Self) (string, bool) {",
          "194: func (cfs *consulState) version(info agentconsul.Self) (string, bool) {",
          "199: func (cfs *consulState) sku(info agentconsul.Self) (string, bool) {",
          "203: func (cfs *consulState) revision(info agentconsul.Self) (string, bool) {",
          "208: func (cfs *consulState) name(info agentconsul.Self) (string, bool) {",
          "213: func (cfs *consulState) dc(info agentconsul.Self) (string, bool) {",
          "218: func (cfs *consulState) segment(info agentconsul.Self) (string, bool) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "254:  return s, ok",
          "255: }",
          "258:  c, ok := info[\"DebugConfig\"][\"ConnectEnabled\"].(bool)",
          "259:  return strconv.FormatBool(c), ok",
          "260: }",
          "263:  return func(info agentconsul.Self) (string, bool) {",
          "",
          "[Removed Lines]",
          "257: func (cfs *consulFingerprintState) connect(info agentconsul.Self) (string, bool) {",
          "262: func (cfs *consulFingerprintState) grpc(scheme string, logger hclog.Logger) func(info agentconsul.Self) (string, bool) {",
          "",
          "[Added Lines]",
          "227: func (cfs *consulState) connect(info agentconsul.Self) (string, bool) {",
          "232: func (cfs *consulState) grpc(scheme string, logger hclog.Logger) func(info agentconsul.Self) (string, bool) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "294:  }",
          "295: }",
          "298:  p, ok := info[\"DebugConfig\"][\"GRPCPort\"].(float64)",
          "299:  return fmt.Sprintf(\"%d\", int(p)), ok",
          "300: }",
          "303:  p, ok := info[\"DebugConfig\"][\"GRPCTLSPort\"].(float64)",
          "304:  return fmt.Sprintf(\"%d\", int(p)), ok",
          "305: }",
          "308:  p, ok := info[\"DebugConfig\"][\"DNSPort\"].(float64)",
          "309:  return fmt.Sprintf(\"%d\", int(p)), ok",
          "310: }",
          "315:  return func(info agentconsul.Self) (string, bool) {",
          "317:   var listenOnEveryIP bool",
          "",
          "[Removed Lines]",
          "297: func (cfs *consulFingerprintState) grpcPort(info agentconsul.Self) (string, bool) {",
          "302: func (cfs *consulFingerprintState) grpcTLSPort(info agentconsul.Self) (string, bool) {",
          "307: func (cfs *consulFingerprintState) dnsPort(info agentconsul.Self) (string, bool) {",
          "314: func (cfs *consulFingerprintState) dnsAddr(logger hclog.Logger) func(info agentconsul.Self) (string, bool) {",
          "",
          "[Added Lines]",
          "267: func (cfs *consulState) grpcPort(info agentconsul.Self) (string, bool) {",
          "272: func (cfs *consulState) grpcTLSPort(info agentconsul.Self) (string, bool) {",
          "277: func (cfs *consulState) dnsPort(info agentconsul.Self) (string, bool) {",
          "284: func (cfs *consulState) dnsAddr(logger hclog.Logger) func(info agentconsul.Self) (string, bool) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "382:  }",
          "383: }",
          "386:  return strconv.FormatBool(agentconsul.Namespaces(info)), true",
          "387: }",
          "390:  sku, ok := agentconsul.SKU(info)",
          "391:  if ok && sku == \"ent\" {",
          "392:   p, ok := info[\"Config\"][\"Partition\"].(string)",
          "",
          "[Removed Lines]",
          "385: func (cfs *consulFingerprintState) namespaces(info agentconsul.Self) (string, bool) {",
          "389: func (cfs *consulFingerprintState) partition(info agentconsul.Self) (string, bool) {",
          "",
          "[Added Lines]",
          "355: func (cfs *consulState) namespaces(info agentconsul.Self) (string, bool) {",
          "359: func (cfs *consulState) partition(info agentconsul.Self) (string, bool) {",
          "",
          "---------------"
        ],
        "client/fingerprint/consul_test.go||client/fingerprint/consul_test.go": [
          "File: client/fingerprint/consul_test.go -> client/fingerprint/consul_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"os\"",
          "11:  \"strings\"",
          "12:  \"testing\"",
          "15:  \"github.com/hashicorp/nomad/ci\"",
          "16:  \"github.com/hashicorp/nomad/client/config\"",
          "",
          "[Removed Lines]",
          "13:  \"time\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: func TestConsulFingerprint_server(t *testing.T) {",
          "55:  ci.Parallel(t)",
          "59:  t.Run(\"is server\", func(t *testing.T) {",
          "60:   s, ok := cfs.server(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "57:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "56:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: func TestConsulFingerprint_version(t *testing.T) {",
          "91:  ci.Parallel(t)",
          "95:  t.Run(\"oss\", func(t *testing.T) {",
          "96:   v, ok := cfs.version(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "93:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "92:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: func TestConsulFingerprint_sku(t *testing.T) {",
          "127:  ci.Parallel(t)",
          "131:  t.Run(\"oss\", func(t *testing.T) {",
          "132:   s, ok := cfs.sku(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "129:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "128:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186: func TestConsulFingerprint_revision(t *testing.T) {",
          "187:  ci.Parallel(t)",
          "191:  t.Run(\"ok\", func(t *testing.T) {",
          "192:   r, ok := cfs.revision(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "189:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "188:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214: func TestConsulFingerprint_dc(t *testing.T) {",
          "215:  ci.Parallel(t)",
          "219:  t.Run(\"ok\", func(t *testing.T) {",
          "220:   dc, ok := cfs.dc(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "217:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "216:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242: func TestConsulFingerprint_segment(t *testing.T) {",
          "243:  ci.Parallel(t)",
          "247:  t.Run(\"ok\", func(t *testing.T) {",
          "248:   s, ok := cfs.segment(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "245:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "244:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "277: func TestConsulFingerprint_connect(t *testing.T) {",
          "278:  ci.Parallel(t)",
          "282:  t.Run(\"connect enabled\", func(t *testing.T) {",
          "283:   s, ok := cfs.connect(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "280:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "279:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306: func TestConsulFingerprint_grpc(t *testing.T) {",
          "307:  ci.Parallel(t)",
          "311:  t.Run(\"grpc set pre-1.14 http\", func(t *testing.T) {",
          "312:   s, ok := cfs.grpc(\"http\", testlog.HCLogger(t))(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "309:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "308:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "407: func TestConsulFingerprint_namespaces(t *testing.T) {",
          "408:  ci.Parallel(t)",
          "412:  t.Run(\"supports namespaces\", func(t *testing.T) {",
          "413:   value, ok := cfs.namespaces(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "410:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "409:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "448: func TestConsulFingerprint_partition(t *testing.T) {",
          "449:  ci.Parallel(t)",
          "453:  t.Run(\"oss\", func(t *testing.T) {",
          "454:   p, ok := cfs.partition(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "451:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "450:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "494: func TestConsulFingerprint_dns(t *testing.T) {",
          "495:  ci.Parallel(t)",
          "499:  t.Run(\"dns port not enabled\", func(t *testing.T) {",
          "500:   port, ok := cfs.dnsPort(agentconsul.Self{",
          "",
          "[Removed Lines]",
          "497:  cfs := consulFingerprintState{}",
          "",
          "[Added Lines]",
          "496:  cfs := new(consulState)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "601:  node := &structs.Node{Attributes: make(map[string]string)}",
          "607:  var resp FingerprintResponse",
          "",
          "[Removed Lines]",
          "604:  must.Nil(t, cf.states[structs.ConsulDefaultCluster])",
          "",
          "[Added Lines]",
          "603:  must.Nil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "623:  must.True(t, resp.Detected)",
          "628:  var resp2 FingerprintResponse",
          "",
          "[Removed Lines]",
          "626:  must.True(t, cf.states[structs.ConsulDefaultCluster].isAvailable)",
          "",
          "[Added Lines]",
          "625:  must.NotNil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "638:  node.Attributes[\"connect.grpc\"] = \"foo\"",
          "639:  node.Attributes[\"unique.consul.name\"] = \"foo\"",
          "646:  err2 := cf.Fingerprint(&FingerprintRequest{Config: cfg, Node: node}, &resp2)",
          "647:  must.NoError(t, err2)         // does not return error",
          "648:  must.Nil(t, resp2.Attributes) // attributes unset so they don't change",
          "649:  must.True(t, resp.Detected)   // never downgrade",
          "655:  var resp3 FingerprintResponse",
          "",
          "[Removed Lines]",
          "643:  cf.states[structs.ConsulDefaultCluster].nextCheck = time.Now()",
          "652:  must.False(t, cf.states[structs.ConsulDefaultCluster].isAvailable)",
          "",
          "[Added Lines]",
          "648:  must.NotNil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "670:  }, resp3.Attributes)",
          "674:  must.True(t, resp.Detected)",
          "675: }",
          "",
          "[Removed Lines]",
          "673:  must.True(t, cf.states[structs.ConsulDefaultCluster].isAvailable)",
          "",
          "[Added Lines]",
          "669:  must.NotNil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "685:  node := &structs.Node{Attributes: make(map[string]string)}",
          "691:  var resp FingerprintResponse",
          "",
          "[Removed Lines]",
          "688:  must.Nil(t, cf.states[structs.ConsulDefaultCluster])",
          "",
          "[Added Lines]",
          "684:  must.Nil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "709:  must.True(t, resp.Detected)",
          "714:  var resp2 FingerprintResponse",
          "",
          "[Removed Lines]",
          "712:  must.True(t, cf.states[structs.ConsulDefaultCluster].isAvailable)",
          "",
          "[Added Lines]",
          "708:  must.NotNil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "725:  node.Attributes[\"connect.grpc\"] = \"foo\"",
          "726:  node.Attributes[\"unique.consul.name\"] = \"foo\"",
          "733:  err2 := cf.Fingerprint(&FingerprintRequest{Config: cfg, Node: node}, &resp2)",
          "734:  must.NoError(t, err2)         // does not return error",
          "735:  must.Nil(t, resp2.Attributes) // attributes unset so they don't change",
          "736:  must.True(t, resp.Detected)   // never downgrade",
          "742:  var resp3 FingerprintResponse",
          "",
          "[Removed Lines]",
          "730:  cf.states[structs.ConsulDefaultCluster].nextCheck = time.Now()",
          "739:  must.False(t, cf.states[structs.ConsulDefaultCluster].isAvailable)",
          "",
          "[Added Lines]",
          "732:  must.NotNil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "759:  }, resp3.Attributes)",
          "763:  must.True(t, resp.Detected)",
          "764: }",
          "",
          "[Removed Lines]",
          "762:  must.True(t, cf.states[structs.ConsulDefaultCluster].isAvailable)",
          "",
          "[Added Lines]",
          "755:  must.NotNil(t, cf.clusters[structs.ConsulDefaultCluster])",
          "",
          "---------------"
        ],
        "client/fingerprint/vault.go||client/fingerprint/vault.go": [
          "File: client/fingerprint/vault.go -> client/fingerprint/vault.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  log \"github.com/hashicorp/go-hclog\"",
          "13:  \"github.com/hashicorp/go-multierror\"",
          "15:  \"github.com/hashicorp/nomad/helper/useragent\"",
          "16:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "17:  \"github.com/hashicorp/nomad/nomad/structs/config\"",
          "18:  vapi \"github.com/hashicorp/vault/api\"",
          "19: )",
          "24: type VaultFingerprint struct {",
          "25:  logger log.Logger",
          "",
          "[Removed Lines]",
          "14:  \"github.com/hashicorp/nomad/helper\"",
          "21: var vaultBaseFingerprintInterval = 15 * time.Second",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: type vaultFingerprintState struct {",
          "30:  client      *vapi.Client",
          "31:  isAvailable bool",
          "33: }",
          "",
          "[Removed Lines]",
          "32:  nextCheck   time.Time",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   state = &vaultFingerprintState{}",
          "65:   f.states[cfg.Name] = state",
          "66:  }",
          "72:  if state.client == nil {",
          "",
          "[Removed Lines]",
          "67:  if state.nextCheck.After(time.Now()) {",
          "68:   return nil",
          "69:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:    logger.Info(\"Vault is unavailable\")",
          "90:   }",
          "91:   state.isAvailable = false",
          "93:   return nil",
          "94:  }",
          "",
          "[Removed Lines]",
          "92:   state.nextCheck = time.Time{} // always check on next interval",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:   logger.Info(\"Vault is available\")",
          "112:  }",
          "119:  state.isAvailable = true",
          "121:  resp.Detected = true",
          "123:  return nil",
          "124: }",
          "126: func (f *VaultFingerprint) Periodic() (bool, time.Duration) {",
          "140: }",
          "",
          "[Removed Lines]",
          "118:  state.nextCheck = time.Now().Add(29 * time.Second)",
          "127:  if len(f.states) == 0 {",
          "128:   return true, vaultBaseFingerprintInterval",
          "129:  }",
          "130:  for _, state := range f.states {",
          "131:   if !state.isAvailable {",
          "132:    return true, vaultBaseFingerprintInterval",
          "133:   }",
          "134:  }",
          "139:  return true, (30 * time.Second) + helper.RandomStagger(90*time.Second)",
          "",
          "[Added Lines]",
          "112:  return false, 0",
          "116: func (f *VaultFingerprint) Reload() {}",
          "",
          "---------------"
        ],
        "client/fingerprint/vault_test.go||client/fingerprint/vault_test.go": [
          "File: client/fingerprint/vault_test.go -> client/fingerprint/vault_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"testing\"",
          "10:  \"github.com/hashicorp/nomad/ci\"",
          "11:  \"github.com/hashicorp/nomad/client/config\"",
          "12:  \"github.com/hashicorp/nomad/helper/testlog\"",
          "13:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "14:  \"github.com/hashicorp/nomad/testutil\"",
          "15: )",
          "17: func TestVaultFingerprint(t *testing.T) {",
          "",
          "[Removed Lines]",
          "8:  \"time\"",
          "",
          "[Added Lines]",
          "14:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  }",
          "28:  p, period := fp.Periodic()",
          "36:  conf := config.DefaultConfig()",
          "37:  conf.VaultConfigs[structs.VaultDefaultCluster] = tv.Config",
          "39:  request := &FingerprintRequest{Config: conf, Node: node}",
          "65:  tv.Stop()",
          "94: }",
          "",
          "[Removed Lines]",
          "29:  if !p {",
          "30:   t.Fatalf(\"expected fingerprint to be periodic\")",
          "31:  }",
          "32:  if period != (15 * time.Second) {",
          "33:   t.Fatalf(\"expected period to be 15s but found: %s\", period)",
          "34:  }",
          "40:  var response FingerprintResponse",
          "41:  err := fp.Fingerprint(request, &response)",
          "42:  if err != nil {",
          "43:   t.Fatalf(\"Failed to fingerprint: %s\", err)",
          "44:  }",
          "46:  if !response.Detected {",
          "47:   t.Fatalf(\"expected response to be applicable\")",
          "48:  }",
          "50:  assertNodeAttributeContains(t, response.Attributes, \"vault.accessible\")",
          "51:  assertNodeAttributeContains(t, response.Attributes, \"vault.version\")",
          "52:  assertNodeAttributeContains(t, response.Attributes, \"vault.cluster_id\")",
          "53:  assertNodeAttributeContains(t, response.Attributes, \"vault.cluster_name\")",
          "56:  p, period = fp.Periodic()",
          "57:  if !p {",
          "58:   t.Fatalf(\"expected fingerprint to be periodic\")",
          "59:  }",
          "60:  if period < (30*time.Second) || period > (2*time.Minute) {",
          "61:   t.Fatalf(\"expected period to be between 30s and 2m but found: %s\", period)",
          "62:  }",
          "69:  vfp := fp.(*VaultFingerprint)",
          "70:  vfp.states[structs.VaultDefaultCluster].nextCheck = time.Now()",
          "72:  err = fp.Fingerprint(request, &response)",
          "73:  if err != nil {",
          "74:   t.Fatalf(\"Failed to fingerprint: %s\", err)",
          "75:  }",
          "77:  if !response.Detected {",
          "78:   t.Fatalf(\"should still show as detected\")",
          "79:  }",
          "81:  assertNodeAttributeContains(t, response.Attributes, \"vault.accessible\")",
          "82:  assertNodeAttributeContains(t, response.Attributes, \"vault.version\")",
          "83:  assertNodeAttributeContains(t, response.Attributes, \"vault.cluster_id\")",
          "84:  assertNodeAttributeContains(t, response.Attributes, \"vault.cluster_name\")",
          "87:  p, period = fp.Periodic()",
          "88:  if !p {",
          "89:   t.Fatalf(\"expected fingerprint to be periodic\")",
          "90:  }",
          "91:  if period != (15 * time.Second) {",
          "92:   t.Fatalf(\"expected period to be 15s but found: %s\", period)",
          "93:  }",
          "",
          "[Added Lines]",
          "29:  must.False(t, p)",
          "30:  must.Zero(t, period)",
          "36:  var response1 FingerprintResponse",
          "37:  err := fp.Fingerprint(request, &response1)",
          "38:  must.NoError(t, err)",
          "39:  must.True(t, response1.Detected)",
          "41:  assertNodeAttributeEquals(t, response1.Attributes, \"vault.accessible\", \"true\")",
          "42:  assertNodeAttributeContains(t, response1.Attributes, \"vault.version\")",
          "43:  assertNodeAttributeContains(t, response1.Attributes, \"vault.cluster_id\")",
          "44:  assertNodeAttributeContains(t, response1.Attributes, \"vault.cluster_name\")",
          "50:  var response2 FingerprintResponse",
          "51:  err = fp.Fingerprint(request, &response2)",
          "52:  must.NoError(t, err)",
          "53:  must.False(t, response2.Detected)",
          "",
          "---------------"
        ]
      }
    }
  ]
}