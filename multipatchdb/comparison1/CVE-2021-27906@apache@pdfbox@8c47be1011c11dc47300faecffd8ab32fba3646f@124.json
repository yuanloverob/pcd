{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c1eb14bb397ee3534feaf968dafe9922e04de06",
      "candidate_info": {
        "commit_hash": "5c1eb14bb397ee3534feaf968dafe9922e04de06",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5c1eb14bb397ee3534feaf968dafe9922e04de06",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ],
        "message": "PDFBOX-4892: change error to warning, as suggested by Michael Klink in comment to SO 67588149\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890053 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:             }",
          "201:             catch (IOException e)",
          "202:             {",
          "204:             }",
          "205:             return null;",
          "206:         }",
          "",
          "[Removed Lines]",
          "203:                 LOG.error(\"Could not load font file: \" + file, e);",
          "",
          "[Added Lines]",
          "203:                 LOG.warn(\"Could not load font file: \" + file, e);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:             }",
          "278:             catch (IOException e)",
          "279:             {",
          "281:             }",
          "282:             return null;",
          "283:         }",
          "",
          "[Removed Lines]",
          "280:                 LOG.error(\"Could not load font file: \" + file, e);",
          "",
          "[Added Lines]",
          "280:                 LOG.warn(\"Could not load font file: \" + file, e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:             }",
          "299:             catch (IOException e)",
          "300:             {",
          "302:             }",
          "303:             finally",
          "304:             {",
          "",
          "[Removed Lines]",
          "301:                 LOG.error(\"Could not load font file: \" + file, e);",
          "",
          "[Added Lines]",
          "301:                 LOG.warn(\"Could not load font file: \" + file, e);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389:             }",
          "390:             catch (IOException e)",
          "391:             {",
          "393:             }",
          "394:         }",
          "395:     }",
          "",
          "[Removed Lines]",
          "392:                 LOG.error(\"Error parsing font \" + file.getPath(), e);",
          "",
          "[Added Lines]",
          "392:                 LOG.warn(\"Error parsing font \" + file.getPath(), e);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "525:                     String[] parts = line.split(\"\\\\|\", 10);",
          "526:                     if (parts.length < 10)",
          "527:                     {",
          "529:                         continue;",
          "530:                     }",
          "",
          "[Removed Lines]",
          "528:                         LOG.error(\"Incorrect line '\" + line + \"' in font disk cache is skipped\");",
          "",
          "[Added Lines]",
          "528:                         LOG.warn(\"Incorrect line '\" + line + \"' in font disk cache is skipped\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "588:             }",
          "589:             catch (IOException e)",
          "590:             {",
          "592:                 return null;",
          "593:             }",
          "594:             finally",
          "",
          "[Removed Lines]",
          "591:                 LOG.error(\"Error loading font cache, will be re-built\", e);",
          "",
          "[Added Lines]",
          "591:                 LOG.warn(\"Error loading font cache, will be re-built\", e);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "627:         }",
          "628:         catch (IOException e)",
          "629:         {",
          "631:         }",
          "632:         finally",
          "633:         {",
          "",
          "[Removed Lines]",
          "630:             LOG.error(\"Could not load font file: \" + ttcFile, e);",
          "",
          "[Added Lines]",
          "630:             LOG.warn(\"Could not load font file: \" + ttcFile, e);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "660:         }",
          "661:         catch (IOException e)",
          "662:         {",
          "664:         }",
          "665:     }",
          "",
          "[Removed Lines]",
          "663:             LOG.error(\"Could not load font file: \" + ttfFile, e);",
          "",
          "[Added Lines]",
          "663:             LOG.warn(\"Could not load font file: \" + ttfFile, e);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "762:         catch (IOException e)",
          "763:         {",
          "764:             fontInfoList.add(new FSIgnored(file, FontFormat.TTF, \"*skipexception*\"));",
          "766:         }",
          "767:         finally",
          "768:         {",
          "",
          "[Removed Lines]",
          "765:             LOG.error(\"Could not load font file: \" + file, e);",
          "",
          "[Added Lines]",
          "765:             LOG.warn(\"Could not load font file: \" + file, e);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "796:         }",
          "797:         catch (IOException e)",
          "798:         {",
          "800:         }",
          "801:         finally",
          "802:         {",
          "",
          "[Removed Lines]",
          "799:             LOG.error(\"Could not load font file: \" + pfbFile, e);",
          "",
          "[Added Lines]",
          "799:             LOG.warn(\"Could not load font file: \" + pfbFile, e);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "850a19fd942dd8108e01ab0ab46e2b899e25b8ec",
      "candidate_info": {
        "commit_hash": "850a19fd942dd8108e01ab0ab46e2b899e25b8ec",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/850a19fd942dd8108e01ab0ab46e2b899e25b8ec",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java"
        ],
        "message": "PDFBOX-4892: improve performance, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887876 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         List<FDFField> fdfKids = fdfField.getKids();",
          "89:         List<PDField> children = getChildren();",
          "91:         {",
          "92:             for (PDField pdChild : children)",
          "93:             {",
          "",
          "[Removed Lines]",
          "90:         for (int i = 0; fdfKids != null && i < fdfKids.size(); i++)",
          "",
          "[Added Lines]",
          "90:         if (fdfKids == null)",
          "91:         {",
          "92:             return;",
          "93:         }",
          "94:         for (int i = 0; i < fdfKids.size(); i++)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         fdfField.setValue(getValue());",
          "111:         List<PDField> children = getChildren();",
          "113:         for (PDField child : children)",
          "114:         {",
          "115:             fdfChildren.add(child.exportFDF());",
          "",
          "[Removed Lines]",
          "112:         List<FDFField> fdfChildren = new ArrayList<FDFField>();",
          "",
          "[Added Lines]",
          "116:         List<FDFField> fdfChildren = new ArrayList<FDFField>(children.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:     @Override",
          "260:     public List<PDAnnotationWidget> getWidgets()",
          "261:     {",
          "264:     }",
          "265: }",
          "",
          "[Removed Lines]",
          "262:         List<PDAnnotationWidget> emptyList = Collections.emptyList();",
          "263:         return Collections.unmodifiableList(emptyList);",
          "",
          "[Added Lines]",
          "266:         return Collections.emptyList();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc1934a95eee18bb553f2294ab8c8d6bceb1c729",
      "candidate_info": {
        "commit_hash": "cc1934a95eee18bb553f2294ab8c8d6bceb1c729",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/cc1934a95eee18bb553f2294ab8c8d6bceb1c729",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java"
        ],
        "message": "PDFBOX-4892: remove unused import\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882989 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java -> preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import static org.apache.pdfbox.preflight.PreflightConfiguration.ANNOTATIONS_PROCESS;",
          "43: import static org.apache.pdfbox.preflight.PreflightConstants.ERROR_ACTION_FORBIDDEN_ADDITIONAL_ACTIONS_FIELD;",
          "44: import static org.apache.pdfbox.preflight.PreflightConstants.ERROR_ACTION_FORBIDDEN_WIDGET_ACTION_FIELD;",
          "45: import static org.apache.pdfbox.preflight.PreflightConstants.ERROR_SYNTAX_BODY;",
          "",
          "[Removed Lines]",
          "42: import static org.apache.pdfbox.preflight.PreflightConstants.ACROFORM_DICTIONARY_KEY_NEED_APPEARANCES;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04e8ffa41aa3b6fcf7b5c7c0c6e4206d4e8204cd",
      "candidate_info": {
        "commit_hash": "04e8ffa41aa3b6fcf7b5c7c0c6e4206d4e8204cd",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/04e8ffa41aa3b6fcf7b5c7c0c6e4206d4e8204cd",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-5258: smaller parameter list for transfer; use abstract class where possible\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892345 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java",
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: public class PDGraphicsState implements Cloneable",
          "46: {",
          "47:     private boolean isClippingPathDirty;",
          "50:     private Matrix currentTransformationMatrix = new Matrix();",
          "51:     private PDColor strokingColor = PDDeviceGray.INSTANCE.getInitialColor();",
          "52:     private PDColor nonStrokingColor = PDDeviceGray.INSTANCE.getInitialColor();",
          "",
          "[Removed Lines]",
          "48:     private List<Path2D.Double> clippingPaths = new ArrayList<Path2D.Double>();",
          "49:     private Map<Path2D.Double, Area> clippingCache = new IdentityHashMap<Path2D.Double, Area>();",
          "",
          "[Added Lines]",
          "48:     private List<Path2D> clippingPaths = new ArrayList<Path2D>();",
          "49:     private Map<Path2D, Area> clippingCache = new IdentityHashMap<Path2D, Area>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605:         intersectClippingPath(new Path2D.Double(path), true);",
          "606:     }",
          "609:     {",
          "611:         if (!isClippingPathDirty)",
          "612:         {",
          "616:             isClippingPathDirty = true;",
          "617:         }",
          "621:     }",
          "",
          "[Removed Lines]",
          "608:     private void intersectClippingPath(Path2D.Double path, boolean clonePath)",
          "614:             clippingPaths = new ArrayList<Path2D.Double>(clippingPaths);",
          "620:         clippingPaths.add(clonePath ? (Path2D.Double) path.clone() : path);",
          "",
          "[Added Lines]",
          "608:     private void intersectClippingPath(Path2D path, boolean clonePath)",
          "614:             clippingPaths = new ArrayList<Path2D>(clippingPaths);",
          "620:         clippingPaths.add(clonePath ? (Path2D) path.clone() : path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:         if (clippingPaths.size() == 1)",
          "641:         {",
          "644:             Area area = clippingCache.get(path);",
          "645:             if (area == null)",
          "646:             {",
          "",
          "[Removed Lines]",
          "643:             Path2D.Double path = clippingPaths.get(0);",
          "",
          "[Added Lines]",
          "643:             Path2D path = clippingPaths.get(0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "657:             clippingArea.intersect(new Area(clippingPaths.get(i)));",
          "658:         }",
          "662:         clippingPaths.add(newPath);",
          "663:         clippingCache.put(newPath, clippingArea);",
          "664:         return clippingArea;",
          "",
          "[Removed Lines]",
          "660:         Path2D.Double newPath = new Path2D.Double(clippingArea);",
          "661:         clippingPaths = new ArrayList<Path2D.Double>();",
          "",
          "[Added Lines]",
          "660:         Path2D newPath = new Path2D.Double(clippingArea);",
          "661:         clippingPaths = new ArrayList<Path2D>();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "674:     {",
          "675:         return clippingPaths;",
          "676:     }",
          "",
          "[Removed Lines]",
          "673:     public List<Path2D.Double> getCurrentClippingPaths()",
          "",
          "[Added Lines]",
          "673:     public List<Path2D> getCurrentClippingPaths()",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     private GeneralPath linePath = new GeneralPath();",
          "151:     private Shape initialClip;",
          "",
          "[Removed Lines]",
          "148:     private List<Path2D.Double> lastClips;",
          "",
          "[Added Lines]",
          "148:     private List<Path2D> lastClips;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:         int savedClipWindingRule = clipWindingRule;",
          "306:         clipWindingRule = -1;",
          "309:         lastClips = null;",
          "310:         Shape savedInitialClip = initialClip;",
          "311:         initialClip = null;",
          "",
          "[Removed Lines]",
          "308:         List<Path2D.Double> savedLastClips = lastClips;",
          "",
          "[Added Lines]",
          "308:         List<Path2D> savedLastClips = lastClips;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:     protected final void setClip()",
          "396:     {",
          "398:         if (clippingPaths != lastClips)",
          "399:         {",
          "401:             if (initialClip != null)",
          "402:             {",
          "",
          "[Removed Lines]",
          "397:         List<Path2D.Double> clippingPaths = getGraphicsState().getCurrentClippingPaths();",
          "400:             transferClip(getGraphicsState(), graphics);",
          "",
          "[Added Lines]",
          "397:         List<Path2D> clippingPaths = getGraphicsState().getCurrentClippingPaths();",
          "400:             transferClip(graphics);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:     {",
          "422:         if (clippingPath.getPathIterator(null).isDone())",
          "423:         {",
          "",
          "[Removed Lines]",
          "419:     protected void transferClip(PDGraphicsState graphicsState, Graphics2D graphics)",
          "421:         Area clippingPath = graphicsState.getCurrentClippingPath();",
          "",
          "[Added Lines]",
          "418:     protected void transferClip(Graphics2D graphics)",
          "420:         Area clippingPath = getGraphicsState().getCurrentClippingPath();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1684:                 PDColor backdropColor) throws IOException",
          "1685:         {",
          "1686:             Graphics2D savedGraphics = graphics;",
          "1688:             Shape savedInitialClip = initialClip;",
          "",
          "[Removed Lines]",
          "1687:             List<Path2D.Double> savedLastClips = lastClips;",
          "",
          "[Added Lines]",
          "1686:             List<Path2D> savedLastClips = lastClips;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12005adfb012574748e93b9319874d049d8e261b",
      "candidate_info": {
        "commit_hash": "12005adfb012574748e93b9319874d049d8e261b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/12005adfb012574748e93b9319874d049d8e261b",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java"
        ],
        "message": "PDFBOX-4892: simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891644 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java||preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java||preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java -> preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.pdfbox.cos.COSArray;",
          "30: import org.apache.pdfbox.cos.COSBase;",
          "31: import org.apache.pdfbox.cos.COSDictionary;",
          "32: import org.apache.pdfbox.cos.COSName;",
          "33: import org.apache.pdfbox.cos.COSNumber;",
          "34: import org.apache.pdfbox.cos.COSStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.pdfbox.cos.COSInteger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:     private boolean validateICCProfileNEntry(COSStream stream, ICC_Profile iccp)",
          "522:     {",
          "525:         {",
          "526:             context.addValidationError(new ValidationError(ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY,",
          "527:                     \"/N entry of ICC profile is mandatory\"));",
          "528:             return false;",
          "529:         }",
          "532:         {",
          "533:             context.addValidationError(new ValidationError(ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY,",
          "534:                     \"/N entry of ICC profile must be a number, but is \" + nValue));",
          "",
          "[Removed Lines]",
          "523:         COSDictionary streamDict = (COSDictionary) stream.getCOSObject();",
          "524:         if (!streamDict.containsKey(COSName.N))",
          "530:         COSBase nValue = streamDict.getItem(COSName.N);",
          "531:         if (!(nValue instanceof COSNumber))",
          "",
          "[Added Lines]",
          "524:         COSBase nValue = stream.getItem(COSName.N);",
          "525:         if (nValue == null)",
          "531:         if (!(nValue instanceof COSInteger))",
          "",
          "---------------"
        ]
      }
    }
  ]
}