{
  "cve_id": "CVE-2024-11079",
  "cve_desc": "A flaw was found in Ansible-Core. This vulnerability allows attackers to bypass unsafe content protections using the hostvars object to reference and execute templated content. This issue can lead to arbitrary code execution if remote data or module outputs are improperly templated within playbooks.",
  "repo": "ansible/ansible",
  "patch_hash": "2936b80dbbc7efb889934aeec80f6142c10266ce",
  "patch_info": {
    "commit_hash": "2936b80dbbc7efb889934aeec80f6142c10266ce",
    "repo": "ansible/ansible",
    "commit_url": "https://github.com/ansible/ansible/commit/2936b80dbbc7efb889934aeec80f6142c10266ce",
    "files": [
      "changelogs/fragments/unsafe_hostvars_fix.yml",
      "lib/ansible/template/__init__.py",
      "lib/ansible/template/native_helpers.py",
      "lib/ansible/vars/hostvars.py",
      "test/integration/targets/template/cve-2024-11079.yml",
      "test/integration/targets/template/runme.sh"
    ],
    "message": "Fix CVE-2024-11079 hostvars unsafe context (#84339)\n\nFix to preserve an unsafe variable when accessing through an\nintermediary variable from hostvars.",
    "before_after_code_files": [
      "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
      "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
      "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
      "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
    ]
  },
  "patch_diff": {
    "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py": [
      "File: lib/ansible/template/__init__.py -> lib/ansible/template/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: from ansible.module_utils.common.text.converters import to_native, to_text, to_bytes",
      "49: from ansible.module_utils.common.collections import is_sequence",
      "50: from ansible.plugins.loader import filter_loader, lookup_loader, test_loader",
      "52: from ansible.template.template import AnsibleJ2Template",
      "53: from ansible.template.vars import AnsibleJ2Vars",
      "54: from ansible.utils.display import Display",
      "",
      "[Removed Lines]",
      "51: from ansible.template.native_helpers import ansible_native_concat, ansible_eval_concat, ansible_concat",
      "",
      "[Added Lines]",
      "51: from ansible.template.native_helpers import AnsibleUndefined, ansible_native_concat, ansible_eval_concat, ansible_concat",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "312:     return functools.update_wrapper(wrapper, func)",
      "344: class AnsibleContext(Context):",
      "345:     '''",
      "346:     A custom context, which intercepts resolve_or_missing() calls and sets a flag",
      "",
      "[Removed Lines]",
      "315: class AnsibleUndefined(StrictUndefined):",
      "316:     '''",
      "317:     A custom Undefined class, which returns further Undefined objects on access,",
      "318:     rather than throwing an exception.",
      "319:     '''",
      "320:     def __getattr__(self, name):",
      "321:         if name == '__UNSAFE__':",
      "322:             # AnsibleUndefined should never be assumed to be unsafe",
      "323:             # This prevents ``hasattr(val, '__UNSAFE__')`` from evaluating to ``True``",
      "324:             raise AttributeError(name)",
      "325:         # Return original Undefined object to preserve the first failure context",
      "326:         return self",
      "328:     def __getitem__(self, key):",
      "329:         # Return original Undefined object to preserve the first failure context",
      "330:         return self",
      "332:     def __repr__(self):",
      "333:         return 'AnsibleUndefined(hint={0!r}, obj={1!r}, name={2!r})'.format(",
      "334:             self._undefined_hint,",
      "335:             self._undefined_obj,",
      "336:             self._undefined_name",
      "337:         )",
      "339:     def __contains__(self, item):",
      "340:         # Return original Undefined object to preserve the first failure context",
      "341:         return self",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py": [
      "File: lib/ansible/template/native_helpers.py -> lib/ansible/template/native_helpers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import ast",
      "8: from itertools import islice, chain",
      "9: from types import GeneratorType",
      "11: from ansible.module_utils.common.text.converters import to_text",
      "12: from ansible.module_utils.six import string_types",
      "13: from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode",
      "14: from ansible.utils.native_jinja import NativeJinjaText",
      "17: _JSON_MAP = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: from collections.abc import Mapping",
      "12: from ansible.module_utils.common.collections import is_sequence",
      "17: from ansible.utils.unsafe_proxy import wrap_var",
      "18: import ansible.module_utils.compat.typing as t",
      "20: from jinja2.runtime import StrictUndefined",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28:         return ast.Constant(value=_JSON_MAP[node.id])",
      "31: def ansible_eval_concat(nodes):",
      "32:     \"\"\"Return a string of concatenated compiled nodes. Throw an undefined error",
      "33:     if any of the nodes is undefined.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: def _is_unsafe(value: t.Any) -> bool:",
      "38:     \"\"\"",
      "39:     Our helper function, which will also recursively check dict and",
      "40:     list entries due to the fact that they may be repr'd and contain",
      "41:     a key or value which contains jinja2 syntax and would otherwise",
      "42:     lose the AnsibleUnsafe value.",
      "43:     \"\"\"",
      "44:     to_check = [value]",
      "45:     seen = set()",
      "47:     while True:",
      "48:         if not to_check:",
      "49:             break",
      "51:         val = to_check.pop(0)",
      "52:         val_id = id(val)",
      "54:         if val_id in seen:",
      "55:             continue",
      "56:         seen.add(val_id)",
      "58:         if isinstance(val, AnsibleUndefined):",
      "59:             continue",
      "60:         if isinstance(val, Mapping):",
      "61:             to_check.extend(val.keys())",
      "62:             to_check.extend(val.values())",
      "63:         elif is_sequence(val):",
      "64:             to_check.extend(val)",
      "65:         elif getattr(val, '__UNSAFE__', False):",
      "66:             return True",
      "68:     return False",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     if not head:",
      "44:         return ''",
      "46:     if len(head) == 1:",
      "47:         out = head[0]",
      "49:         if isinstance(out, NativeJinjaText):",
      "50:             return out",
      "52:         out = to_text(out)",
      "53:     else:",
      "54:         if isinstance(nodes, GeneratorType):",
      "55:             nodes = chain(head, nodes)",
      "58:     # if this looks like a dictionary, list or bool, convert it to such",
      "59:     if out.startswith(('{', '[')) or out in ('True', 'False'):",
      "",
      "[Removed Lines]",
      "56:         out = ''.join([to_text(v) for v in nodes])",
      "",
      "[Added Lines]",
      "86:     unsafe = False",
      "94:         unsafe = _is_unsafe(out)",
      "100:         out_values = []",
      "101:         for v in nodes:",
      "102:             if not unsafe and _is_unsafe(v):",
      "103:                 unsafe = True",
      "105:             out_values.append(to_text(v))",
      "107:         out = ''.join(out_values)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "68:         except (TypeError, ValueError, SyntaxError, MemoryError):",
      "69:             pass",
      "71:     return out",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "122:     if unsafe:",
      "123:         out = wrap_var(out)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "79:     Used in Templar.template() when jinja2_native=False and convert_data=False.",
      "80:     \"\"\"",
      "84: def ansible_native_concat(nodes):",
      "",
      "[Removed Lines]",
      "81:     return ''.join([to_text(v) for v in nodes])",
      "",
      "[Added Lines]",
      "135:     unsafe = False",
      "136:     values = []",
      "137:     for v in nodes:",
      "138:         if not unsafe and _is_unsafe(v):",
      "139:             unsafe = True",
      "141:         values.append(to_text(v))",
      "143:     out = ''.join(values)",
      "144:     if unsafe:",
      "145:         out = wrap_var(out)",
      "147:     return out",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "95:     if not head:",
      "96:         return None",
      "98:     if len(head) == 1:",
      "99:         out = head[0]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:     unsafe = False",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "115:         # short-circuit literal_eval for anything other than strings",
      "116:         if not isinstance(out, string_types):",
      "117:             return out",
      "118:     else:",
      "119:         if isinstance(nodes, GeneratorType):",
      "120:             nodes = chain(head, nodes)",
      "123:     try:",
      "124:         evaled = ast.literal_eval(",
      "",
      "[Removed Lines]",
      "121:         out = ''.join([to_text(v) for v in nodes])",
      "",
      "[Added Lines]",
      "187:         unsafe = _is_unsafe(out)",
      "193:         out_values = []",
      "194:         for v in nodes:",
      "195:             if not unsafe and _is_unsafe(v):",
      "196:                 unsafe = True",
      "198:             out_values.append(to_text(v))",
      "200:         out = ''.join(out_values)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "128:             ast.parse(out, mode='eval')",
      "129:         )",
      "130:     except (TypeError, ValueError, SyntaxError, MemoryError):",
      "131:         return out",
      "133:     if isinstance(evaled, string_types):",
      "134:         quote = out[0]",
      "137:     return evaled",
      "",
      "[Removed Lines]",
      "135:         return f'{quote}{evaled}{quote}'",
      "",
      "[Added Lines]",
      "210:         if unsafe:",
      "211:             out = wrap_var(out)",
      "217:         evaled = f'{quote}{evaled}{quote}'",
      "219:     if unsafe:",
      "220:         evaled = wrap_var(evaled)",
      "225: class AnsibleUndefined(StrictUndefined):",
      "226:     \"\"\"",
      "227:     A custom Undefined class, which returns further Undefined objects on access,",
      "228:     rather than throwing an exception.",
      "229:     \"\"\"",
      "230:     def __getattr__(self, name):",
      "231:         if name == '__UNSAFE__':",
      "232:             # AnsibleUndefined should never be assumed to be unsafe",
      "233:             # This prevents ``hasattr(val, '__UNSAFE__')`` from evaluating to ``True``",
      "234:             raise AttributeError(name)",
      "235:         # Return original Undefined object to preserve the first failure context",
      "236:         return self",
      "238:     def __getitem__(self, key):",
      "239:         # Return original Undefined object to preserve the first failure context",
      "240:         return self",
      "242:     def __repr__(self):",
      "243:         return 'AnsibleUndefined(hint={0!r}, obj={1!r}, name={2!r})'.format(",
      "244:             self._undefined_hint,",
      "245:             self._undefined_obj,",
      "246:             self._undefined_name",
      "247:         )",
      "249:     def __contains__(self, item):",
      "250:         # Return original Undefined object to preserve the first failure context",
      "251:         return self",
      "",
      "---------------"
    ],
    "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py": [
      "File: lib/ansible/vars/hostvars.py -> lib/ansible/vars/hostvars.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:         return self._find_host(host_name) is not None",
      "94:     def __iter__(self):",
      "97:     def __len__(self):",
      "100:     def __repr__(self):",
      "101:         out = {}",
      "",
      "[Removed Lines]",
      "95:         yield from self._inventory.hosts",
      "98:         return len(self._inventory.hosts)",
      "",
      "[Added Lines]",
      "95:         # include implicit localhost only if it has variables set",
      "96:         yield from self._inventory.hosts | {'localhost': self._inventory.localhost} if self._inventory.localhost else {}",
      "99:         # include implicit localhost only if it has variables set",
      "100:         return len(self._inventory.hosts) + (1 if self._inventory.localhost else 0)",
      "",
      "---------------"
    ],
    "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh": [
      "File: test/integration/targets/template/runme.sh -> test/integration/targets/template/runme.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: # ensure unsafe is preserved, even with extra newlines",
      "42: ansible-playbook unsafe.yml -v \"$@\"",
      "44: # ensure Jinja2 overrides from a template are used",
      "45: ansible-playbook template_overrides.yml -v \"$@\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: # CVE 2024-11079",
      "45: ANSIBLE_JINJA2_NATIVE=true ansible-playbook cve-2024-11079.yml -v \"$@\"",
      "46: ANSIBLE_JINJA2_NATIVE=false ansible-playbook cve-2024-11079.yml -v \"$@\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70e83e72b43e05e57eb42a6d52d01a4d9768f510",
      "candidate_info": {
        "commit_hash": "70e83e72b43e05e57eb42a6d52d01a4d9768f510",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/70e83e72b43e05e57eb42a6d52d01a4d9768f510",
        "files": [
          "changelogs/fragments/unsafe_hostvars_fix.yml",
          "lib/ansible/template/__init__.py",
          "lib/ansible/template/native_helpers.py",
          "lib/ansible/vars/hostvars.py",
          "test/integration/targets/template/cve-2024-11079.yml",
          "test/integration/targets/template/runme.sh"
        ],
        "message": "Fix CVE-2024-11079 hostvars unsafe context (#84339) (#84353)\n\nFix to preserve an unsafe variable when accessing through an\nintermediary variable from hostvars.\n\n(cherry picked from commit 2936b80dbbc7efb889934aeec80f6142c10266ce)",
        "before_after_code_files": [
          "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
          "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
          "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
          "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
            "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
            "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
            "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
          ],
          "candidate": [
            "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
            "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
            "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
            "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py": [
          "File: lib/ansible/template/__init__.py -> lib/ansible/template/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: from ansible.module_utils.common.text.converters import to_native, to_text, to_bytes",
          "50: from ansible.module_utils.common.collections import is_sequence",
          "51: from ansible.plugins.loader import filter_loader, lookup_loader, test_loader",
          "53: from ansible.template.template import AnsibleJ2Template",
          "54: from ansible.template.vars import AnsibleJ2Vars",
          "55: from ansible.utils.display import Display",
          "",
          "[Removed Lines]",
          "52: from ansible.template.native_helpers import ansible_native_concat, ansible_eval_concat, ansible_concat",
          "",
          "[Added Lines]",
          "52: from ansible.template.native_helpers import AnsibleUndefined, ansible_native_concat, ansible_eval_concat, ansible_concat",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:     return _update_wrapper(wrapper, func)",
          "361: class AnsibleContext(Context):",
          "362:     '''",
          "363:     A custom context, which intercepts resolve_or_missing() calls and sets a flag",
          "",
          "[Removed Lines]",
          "332: class AnsibleUndefined(StrictUndefined):",
          "333:     '''",
          "334:     A custom Undefined class, which returns further Undefined objects on access,",
          "335:     rather than throwing an exception.",
          "336:     '''",
          "337:     def __getattr__(self, name):",
          "338:         if name == '__UNSAFE__':",
          "339:             # AnsibleUndefined should never be assumed to be unsafe",
          "340:             # This prevents ``hasattr(val, '__UNSAFE__')`` from evaluating to ``True``",
          "341:             raise AttributeError(name)",
          "342:         # Return original Undefined object to preserve the first failure context",
          "343:         return self",
          "345:     def __getitem__(self, key):",
          "346:         # Return original Undefined object to preserve the first failure context",
          "347:         return self",
          "349:     def __repr__(self):",
          "350:         return 'AnsibleUndefined(hint={0!r}, obj={1!r}, name={2!r})'.format(",
          "351:             self._undefined_hint,",
          "352:             self._undefined_obj,",
          "353:             self._undefined_name",
          "354:         )",
          "356:     def __contains__(self, item):",
          "357:         # Return original Undefined object to preserve the first failure context",
          "358:         return self",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py": [
          "File: lib/ansible/template/native_helpers.py -> lib/ansible/template/native_helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import ast",
          "10: from itertools import islice, chain",
          "11: from types import GeneratorType",
          "13: from ansible.module_utils.common.text.converters import to_text",
          "14: from ansible.module_utils.six import string_types",
          "15: from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode",
          "16: from ansible.utils.native_jinja import NativeJinjaText",
          "19: _JSON_MAP = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: from collections.abc import Mapping",
          "14: from ansible.module_utils.common.collections import is_sequence",
          "19: from ansible.utils.unsafe_proxy import wrap_var",
          "20: import ansible.module_utils.compat.typing as t",
          "22: from jinja2.runtime import StrictUndefined",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         return ast.Constant(value=_JSON_MAP[node.id])",
          "33: def ansible_eval_concat(nodes):",
          "34:     \"\"\"Return a string of concatenated compiled nodes. Throw an undefined error",
          "35:     if any of the nodes is undefined.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: def _is_unsafe(value: t.Any) -> bool:",
          "40:     \"\"\"",
          "41:     Our helper function, which will also recursively check dict and",
          "42:     list entries due to the fact that they may be repr'd and contain",
          "43:     a key or value which contains jinja2 syntax and would otherwise",
          "44:     lose the AnsibleUnsafe value.",
          "45:     \"\"\"",
          "46:     to_check = [value]",
          "47:     seen = set()",
          "49:     while True:",
          "50:         if not to_check:",
          "51:             break",
          "53:         val = to_check.pop(0)",
          "54:         val_id = id(val)",
          "56:         if val_id in seen:",
          "57:             continue",
          "58:         seen.add(val_id)",
          "60:         if isinstance(val, AnsibleUndefined):",
          "61:             continue",
          "62:         if isinstance(val, Mapping):",
          "63:             to_check.extend(val.keys())",
          "64:             to_check.extend(val.values())",
          "65:         elif is_sequence(val):",
          "66:             to_check.extend(val)",
          "67:         elif getattr(val, '__UNSAFE__', False):",
          "68:             return True",
          "70:     return False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     if not head:",
          "46:         return ''",
          "48:     if len(head) == 1:",
          "49:         out = head[0]",
          "51:         if isinstance(out, NativeJinjaText):",
          "52:             return out",
          "54:         out = to_text(out)",
          "55:     else:",
          "56:         if isinstance(nodes, GeneratorType):",
          "57:             nodes = chain(head, nodes)",
          "60:     # if this looks like a dictionary, list or bool, convert it to such",
          "61:     if out.startswith(('{', '[')) or out in ('True', 'False'):",
          "",
          "[Removed Lines]",
          "58:         out = ''.join([to_text(v) for v in nodes])",
          "",
          "[Added Lines]",
          "88:     unsafe = False",
          "96:         unsafe = _is_unsafe(out)",
          "102:         out_values = []",
          "103:         for v in nodes:",
          "104:             if not unsafe and _is_unsafe(v):",
          "105:                 unsafe = True",
          "107:             out_values.append(to_text(v))",
          "109:         out = ''.join(out_values)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         except (TypeError, ValueError, SyntaxError, MemoryError):",
          "71:             pass",
          "73:     return out",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     if unsafe:",
          "125:         out = wrap_var(out)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:     Used in Templar.template() when jinja2_native=False and convert_data=False.",
          "82:     \"\"\"",
          "86: def ansible_native_concat(nodes):",
          "",
          "[Removed Lines]",
          "83:     return ''.join([to_text(v) for v in nodes])",
          "",
          "[Added Lines]",
          "137:     unsafe = False",
          "138:     values = []",
          "139:     for v in nodes:",
          "140:         if not unsafe and _is_unsafe(v):",
          "141:             unsafe = True",
          "143:         values.append(to_text(v))",
          "145:     out = ''.join(values)",
          "146:     if unsafe:",
          "147:         out = wrap_var(out)",
          "149:     return out",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "97:     if not head:",
          "98:         return None",
          "100:     if len(head) == 1:",
          "101:         out = head[0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     unsafe = False",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "117:         # short-circuit literal_eval for anything other than strings",
          "118:         if not isinstance(out, string_types):",
          "119:             return out",
          "120:     else:",
          "121:         if isinstance(nodes, GeneratorType):",
          "122:             nodes = chain(head, nodes)",
          "125:     try:",
          "126:         evaled = ast.literal_eval(",
          "",
          "[Removed Lines]",
          "123:         out = ''.join([to_text(v) for v in nodes])",
          "",
          "[Added Lines]",
          "189:         unsafe = _is_unsafe(out)",
          "195:         out_values = []",
          "196:         for v in nodes:",
          "197:             if not unsafe and _is_unsafe(v):",
          "198:                 unsafe = True",
          "200:             out_values.append(to_text(v))",
          "202:         out = ''.join(out_values)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "130:             ast.parse(out, mode='eval')",
          "131:         )",
          "132:     except (TypeError, ValueError, SyntaxError, MemoryError):",
          "133:         return out",
          "135:     if isinstance(evaled, string_types):",
          "136:         quote = out[0]",
          "139:     return evaled",
          "",
          "[Removed Lines]",
          "137:         return f'{quote}{evaled}{quote}'",
          "",
          "[Added Lines]",
          "212:         if unsafe:",
          "213:             out = wrap_var(out)",
          "219:         evaled = f'{quote}{evaled}{quote}'",
          "221:     if unsafe:",
          "222:         evaled = wrap_var(evaled)",
          "227: class AnsibleUndefined(StrictUndefined):",
          "228:     \"\"\"",
          "229:     A custom Undefined class, which returns further Undefined objects on access,",
          "230:     rather than throwing an exception.",
          "231:     \"\"\"",
          "232:     def __getattr__(self, name):",
          "233:         if name == '__UNSAFE__':",
          "234:             # AnsibleUndefined should never be assumed to be unsafe",
          "235:             # This prevents ``hasattr(val, '__UNSAFE__')`` from evaluating to ``True``",
          "236:             raise AttributeError(name)",
          "237:         # Return original Undefined object to preserve the first failure context",
          "238:         return self",
          "240:     def __getitem__(self, key):",
          "241:         # Return original Undefined object to preserve the first failure context",
          "242:         return self",
          "244:     def __repr__(self):",
          "245:         return 'AnsibleUndefined(hint={0!r}, obj={1!r}, name={2!r})'.format(",
          "246:             self._undefined_hint,",
          "247:             self._undefined_obj,",
          "248:             self._undefined_name",
          "249:         )",
          "251:     def __contains__(self, item):",
          "252:         # Return original Undefined object to preserve the first failure context",
          "253:         return self",
          "",
          "---------------"
        ],
        "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py": [
          "File: lib/ansible/vars/hostvars.py -> lib/ansible/vars/hostvars.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         return self._find_host(host_name) is not None",
          "96:     def __iter__(self):",
          "100:     def __len__(self):",
          "103:     def __repr__(self):",
          "104:         out = {}",
          "",
          "[Removed Lines]",
          "97:         for host in self._inventory.hosts:",
          "98:             yield host",
          "101:         return len(self._inventory.hosts)",
          "",
          "[Added Lines]",
          "97:         # include implicit localhost only if it has variables set",
          "98:         yield from self._inventory.hosts | {'localhost': self._inventory.localhost} if self._inventory.localhost else {}",
          "101:         # include implicit localhost only if it has variables set",
          "102:         return len(self._inventory.hosts) + (1 if self._inventory.localhost else 0)",
          "",
          "---------------"
        ],
        "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh": [
          "File: test/integration/targets/template/runme.sh -> test/integration/targets/template/runme.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: # ensure unsafe is preserved, even with extra newlines",
          "42: ansible-playbook unsafe.yml -v \"$@\"",
          "44: # ensure Jinja2 overrides from a template are used",
          "45: ansible-playbook template_overrides.yml -v \"$@\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: # CVE 2024-11079",
          "45: ANSIBLE_JINJA2_NATIVE=true ansible-playbook cve-2024-11079.yml -v \"$@\"",
          "46: ANSIBLE_JINJA2_NATIVE=false ansible-playbook cve-2024-11079.yml -v \"$@\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98774d15d7748ebaaaf2e83942cc7e8d39f7280e",
      "candidate_info": {
        "commit_hash": "98774d15d7748ebaaaf2e83942cc7e8d39f7280e",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/98774d15d7748ebaaaf2e83942cc7e8d39f7280e",
        "files": [
          "changelogs/fragments/unsafe_hostvars_fix.yml",
          "lib/ansible/template/__init__.py",
          "lib/ansible/template/native_helpers.py",
          "lib/ansible/vars/hostvars.py",
          "test/integration/targets/template/cve-2024-11079.yml",
          "test/integration/targets/template/runme.sh"
        ],
        "message": "Fix CVE-2024-11079 hostvars unsafe context (#84339) (#84354)\n\nFix to preserve an unsafe variable when accessing through an\nintermediary variable from hostvars.\n\n(cherry picked from commit 2936b80dbbc7efb889934aeec80f6142c10266ce)",
        "before_after_code_files": [
          "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
          "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
          "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
          "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
            "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
            "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
            "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
          ],
          "candidate": [
            "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
            "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py",
            "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
            "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py": [
          "File: lib/ansible/template/__init__.py -> lib/ansible/template/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: from ansible.module_utils.common.text.converters import to_native, to_text, to_bytes",
          "49: from ansible.module_utils.common.collections import is_sequence",
          "50: from ansible.plugins.loader import filter_loader, lookup_loader, test_loader",
          "52: from ansible.template.template import AnsibleJ2Template",
          "53: from ansible.template.vars import AnsibleJ2Vars",
          "54: from ansible.utils.display import Display",
          "",
          "[Removed Lines]",
          "51: from ansible.template.native_helpers import ansible_native_concat, ansible_eval_concat, ansible_concat",
          "",
          "[Added Lines]",
          "51: from ansible.template.native_helpers import AnsibleUndefined, ansible_native_concat, ansible_eval_concat, ansible_concat",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     return functools.update_wrapper(wrapper, func)",
          "344: class AnsibleContext(Context):",
          "345:     '''",
          "346:     A custom context, which intercepts resolve_or_missing() calls and sets a flag",
          "",
          "[Removed Lines]",
          "315: class AnsibleUndefined(StrictUndefined):",
          "316:     '''",
          "317:     A custom Undefined class, which returns further Undefined objects on access,",
          "318:     rather than throwing an exception.",
          "319:     '''",
          "320:     def __getattr__(self, name):",
          "321:         if name == '__UNSAFE__':",
          "322:             # AnsibleUndefined should never be assumed to be unsafe",
          "323:             # This prevents ``hasattr(val, '__UNSAFE__')`` from evaluating to ``True``",
          "324:             raise AttributeError(name)",
          "325:         # Return original Undefined object to preserve the first failure context",
          "326:         return self",
          "328:     def __getitem__(self, key):",
          "329:         # Return original Undefined object to preserve the first failure context",
          "330:         return self",
          "332:     def __repr__(self):",
          "333:         return 'AnsibleUndefined(hint={0!r}, obj={1!r}, name={2!r})'.format(",
          "334:             self._undefined_hint,",
          "335:             self._undefined_obj,",
          "336:             self._undefined_name",
          "337:         )",
          "339:     def __contains__(self, item):",
          "340:         # Return original Undefined object to preserve the first failure context",
          "341:         return self",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ansible/template/native_helpers.py||lib/ansible/template/native_helpers.py": [
          "File: lib/ansible/template/native_helpers.py -> lib/ansible/template/native_helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import ast",
          "8: from itertools import islice, chain",
          "9: from types import GeneratorType",
          "11: from ansible.module_utils.common.text.converters import to_text",
          "12: from ansible.module_utils.six import string_types",
          "13: from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode",
          "14: from ansible.utils.native_jinja import NativeJinjaText",
          "17: _JSON_MAP = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from collections.abc import Mapping",
          "12: from ansible.module_utils.common.collections import is_sequence",
          "17: from ansible.utils.unsafe_proxy import wrap_var",
          "18: import ansible.module_utils.compat.typing as t",
          "20: from jinja2.runtime import StrictUndefined",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         return ast.Constant(value=_JSON_MAP[node.id])",
          "31: def ansible_eval_concat(nodes):",
          "32:     \"\"\"Return a string of concatenated compiled nodes. Throw an undefined error",
          "33:     if any of the nodes is undefined.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: def _is_unsafe(value: t.Any) -> bool:",
          "38:     \"\"\"",
          "39:     Our helper function, which will also recursively check dict and",
          "40:     list entries due to the fact that they may be repr'd and contain",
          "41:     a key or value which contains jinja2 syntax and would otherwise",
          "42:     lose the AnsibleUnsafe value.",
          "43:     \"\"\"",
          "44:     to_check = [value]",
          "45:     seen = set()",
          "47:     while True:",
          "48:         if not to_check:",
          "49:             break",
          "51:         val = to_check.pop(0)",
          "52:         val_id = id(val)",
          "54:         if val_id in seen:",
          "55:             continue",
          "56:         seen.add(val_id)",
          "58:         if isinstance(val, AnsibleUndefined):",
          "59:             continue",
          "60:         if isinstance(val, Mapping):",
          "61:             to_check.extend(val.keys())",
          "62:             to_check.extend(val.values())",
          "63:         elif is_sequence(val):",
          "64:             to_check.extend(val)",
          "65:         elif getattr(val, '__UNSAFE__', False):",
          "66:             return True",
          "68:     return False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     if not head:",
          "44:         return ''",
          "46:     if len(head) == 1:",
          "47:         out = head[0]",
          "49:         if isinstance(out, NativeJinjaText):",
          "50:             return out",
          "52:         out = to_text(out)",
          "53:     else:",
          "54:         if isinstance(nodes, GeneratorType):",
          "55:             nodes = chain(head, nodes)",
          "58:     # if this looks like a dictionary, list or bool, convert it to such",
          "59:     if out.startswith(('{', '[')) or out in ('True', 'False'):",
          "",
          "[Removed Lines]",
          "56:         out = ''.join([to_text(v) for v in nodes])",
          "",
          "[Added Lines]",
          "86:     unsafe = False",
          "94:         unsafe = _is_unsafe(out)",
          "100:         out_values = []",
          "101:         for v in nodes:",
          "102:             if not unsafe and _is_unsafe(v):",
          "103:                 unsafe = True",
          "105:             out_values.append(to_text(v))",
          "107:         out = ''.join(out_values)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:         except (TypeError, ValueError, SyntaxError, MemoryError):",
          "69:             pass",
          "71:     return out",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     if unsafe:",
          "123:         out = wrap_var(out)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "79:     Used in Templar.template() when jinja2_native=False and convert_data=False.",
          "80:     \"\"\"",
          "84: def ansible_native_concat(nodes):",
          "",
          "[Removed Lines]",
          "81:     return ''.join([to_text(v) for v in nodes])",
          "",
          "[Added Lines]",
          "135:     unsafe = False",
          "136:     values = []",
          "137:     for v in nodes:",
          "138:         if not unsafe and _is_unsafe(v):",
          "139:             unsafe = True",
          "141:         values.append(to_text(v))",
          "143:     out = ''.join(values)",
          "144:     if unsafe:",
          "145:         out = wrap_var(out)",
          "147:     return out",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "95:     if not head:",
          "96:         return None",
          "98:     if len(head) == 1:",
          "99:         out = head[0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     unsafe = False",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "115:         # short-circuit literal_eval for anything other than strings",
          "116:         if not isinstance(out, string_types):",
          "117:             return out",
          "118:     else:",
          "119:         if isinstance(nodes, GeneratorType):",
          "120:             nodes = chain(head, nodes)",
          "123:     try:",
          "124:         evaled = ast.literal_eval(",
          "",
          "[Removed Lines]",
          "121:         out = ''.join([to_text(v) for v in nodes])",
          "",
          "[Added Lines]",
          "187:         unsafe = _is_unsafe(out)",
          "193:         out_values = []",
          "194:         for v in nodes:",
          "195:             if not unsafe and _is_unsafe(v):",
          "196:                 unsafe = True",
          "198:             out_values.append(to_text(v))",
          "200:         out = ''.join(out_values)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "128:             ast.parse(out, mode='eval')",
          "129:         )",
          "130:     except (TypeError, ValueError, SyntaxError, MemoryError):",
          "131:         return out",
          "133:     if isinstance(evaled, string_types):",
          "134:         quote = out[0]",
          "137:     return evaled",
          "",
          "[Removed Lines]",
          "135:         return f'{quote}{evaled}{quote}'",
          "",
          "[Added Lines]",
          "210:         if unsafe:",
          "211:             out = wrap_var(out)",
          "217:         evaled = f'{quote}{evaled}{quote}'",
          "219:     if unsafe:",
          "220:         evaled = wrap_var(evaled)",
          "225: class AnsibleUndefined(StrictUndefined):",
          "226:     \"\"\"",
          "227:     A custom Undefined class, which returns further Undefined objects on access,",
          "228:     rather than throwing an exception.",
          "229:     \"\"\"",
          "230:     def __getattr__(self, name):",
          "231:         if name == '__UNSAFE__':",
          "232:             # AnsibleUndefined should never be assumed to be unsafe",
          "233:             # This prevents ``hasattr(val, '__UNSAFE__')`` from evaluating to ``True``",
          "234:             raise AttributeError(name)",
          "235:         # Return original Undefined object to preserve the first failure context",
          "236:         return self",
          "238:     def __getitem__(self, key):",
          "239:         # Return original Undefined object to preserve the first failure context",
          "240:         return self",
          "242:     def __repr__(self):",
          "243:         return 'AnsibleUndefined(hint={0!r}, obj={1!r}, name={2!r})'.format(",
          "244:             self._undefined_hint,",
          "245:             self._undefined_obj,",
          "246:             self._undefined_name",
          "247:         )",
          "249:     def __contains__(self, item):",
          "250:         # Return original Undefined object to preserve the first failure context",
          "251:         return self",
          "",
          "---------------"
        ],
        "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py": [
          "File: lib/ansible/vars/hostvars.py -> lib/ansible/vars/hostvars.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         return self._find_host(host_name) is not None",
          "94:     def __iter__(self):",
          "97:     def __len__(self):",
          "100:     def __repr__(self):",
          "101:         out = {}",
          "",
          "[Removed Lines]",
          "95:         yield from self._inventory.hosts",
          "98:         return len(self._inventory.hosts)",
          "",
          "[Added Lines]",
          "95:         # include implicit localhost only if it has variables set",
          "96:         yield from self._inventory.hosts | {'localhost': self._inventory.localhost} if self._inventory.localhost else {}",
          "99:         # include implicit localhost only if it has variables set",
          "100:         return len(self._inventory.hosts) + (1 if self._inventory.localhost else 0)",
          "",
          "---------------"
        ],
        "test/integration/targets/template/runme.sh||test/integration/targets/template/runme.sh": [
          "File: test/integration/targets/template/runme.sh -> test/integration/targets/template/runme.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: # ensure unsafe is preserved, even with extra newlines",
          "42: ansible-playbook unsafe.yml -v \"$@\"",
          "44: # ensure Jinja2 overrides from a template are used",
          "45: ansible-playbook template_overrides.yml -v \"$@\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: # CVE 2024-11079",
          "45: ANSIBLE_JINJA2_NATIVE=true ansible-playbook cve-2024-11079.yml -v \"$@\"",
          "46: ANSIBLE_JINJA2_NATIVE=false ansible-playbook cve-2024-11079.yml -v \"$@\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aecffcb896a170c1de7a6cf532699aad33b4a095",
      "candidate_info": {
        "commit_hash": "aecffcb896a170c1de7a6cf532699aad33b4a095",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/aecffcb896a170c1de7a6cf532699aad33b4a095",
        "files": [
          "lib/ansible/module_utils/common/parameters.py",
          "lib/ansible/modules/dnf5.py",
          "lib/ansible/vars/hostvars.py",
          "test/sanity/code-smell/deprecated-config.py",
          "test/units/playbook/role/test_include_role.py"
        ],
        "message": "pylint: update for use-yield-from\n\n* With Pylint 3.1.0, use-yield-from check is enabled\n\nSigned-off-by: Abhijeet Kasurde <akasurde@redhat.com>",
        "before_after_code_files": [
          "lib/ansible/module_utils/common/parameters.py||lib/ansible/module_utils/common/parameters.py",
          "lib/ansible/modules/dnf5.py||lib/ansible/modules/dnf5.py",
          "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py",
          "test/sanity/code-smell/deprecated-config.py||test/sanity/code-smell/deprecated-config.py",
          "test/units/playbook/role/test_include_role.py||test/units/playbook/role/test_include_role.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py"
          ],
          "candidate": [
            "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/module_utils/common/parameters.py||lib/ansible/module_utils/common/parameters.py": [
          "File: lib/ansible/module_utils/common/parameters.py -> lib/ansible/module_utils/common/parameters.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:         return",
          "366:     elif isinstance(obj, Mapping):",
          "367:         for element in obj.items():",
          "370:     elif is_iterable(obj):",
          "371:         for element in obj:",
          "374:     elif obj is None or isinstance(obj, bool):",
          "375:         # This must come before int because bools are also ints",
          "376:         return",
          "",
          "[Removed Lines]",
          "368:             for subelement in _return_datastructure_name(element[1]):",
          "369:                 yield subelement",
          "372:             for subelement in _return_datastructure_name(element):",
          "373:                 yield subelement",
          "",
          "[Added Lines]",
          "368:             yield from _return_datastructure_name(element[1])",
          "371:             yield from _return_datastructure_name(element)",
          "",
          "---------------"
        ],
        "lib/ansible/modules/dnf5.py||lib/ansible/modules/dnf5.py": [
          "File: lib/ansible/modules/dnf5.py -> lib/ansible/modules/dnf5.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:     query = libdnf5.rpm.PackageQuery(base)",
          "426:     query.filter_installed()",
          "427:     query.filter_unneeded()",
          "432: class Dnf5Module(YumDnf):",
          "",
          "[Removed Lines]",
          "428:     for pkg in query:",
          "429:         yield pkg",
          "",
          "[Added Lines]",
          "428:     yield from query",
          "",
          "---------------"
        ],
        "lib/ansible/vars/hostvars.py||lib/ansible/vars/hostvars.py": [
          "File: lib/ansible/vars/hostvars.py -> lib/ansible/vars/hostvars.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         return self._find_host(host_name) is not None",
          "110:     def __iter__(self):",
          "114:     def __len__(self):",
          "115:         return len(self._inventory.hosts)",
          "",
          "[Removed Lines]",
          "111:         for host in self._inventory.hosts:",
          "112:             yield host",
          "",
          "[Added Lines]",
          "111:         yield from self._inventory.hosts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:         return (var in self._vars)",
          "143:     def __iter__(self):",
          "147:     def __len__(self):",
          "148:         return len(self._vars.keys())",
          "",
          "[Removed Lines]",
          "144:         for var in self._vars.keys():",
          "145:             yield var",
          "",
          "[Added Lines]",
          "143:         yield from self._vars.keys()",
          "",
          "---------------"
        ],
        "test/sanity/code-smell/deprecated-config.py||test/sanity/code-smell/deprecated-config.py": [
          "File: test/sanity/code-smell/deprecated-config.py -> test/sanity/code-smell/deprecated-config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         this_path.append(key)",
          "57:         if key != 'deprecated':",
          "60:         else:",
          "61:             try:",
          "62:                 version = value['version']",
          "",
          "[Removed Lines]",
          "58:             for result in find_deprecations(value, path=this_path):",
          "59:                 yield result",
          "",
          "[Added Lines]",
          "58:             yield from find_deprecations(value, path=this_path)",
          "",
          "---------------"
        ],
        "test/units/playbook/role/test_include_role.py||test/units/playbook/role/test_include_role.py": [
          "File: test/units/playbook/role/test_include_role.py -> test/units/playbook/role/test_include_role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:             if isinstance(task, IncludeRole):",
          "93:                 blocks, handlers = task.get_block_list(loader=self.loader)",
          "94:                 for block in blocks:",
          "97:             elif isinstance(task, Task):",
          "98:                 yield task",
          "99:             else:",
          "103:     def get_tasks_vars(self, play, tasks):",
          "104:         for task in self.flatten_tasks(tasks):",
          "",
          "[Removed Lines]",
          "95:                     for t in self.flatten_tasks(block.block):",
          "96:                         yield t",
          "100:                 for t in self.flatten_tasks(task.block):",
          "101:                     yield t",
          "",
          "[Added Lines]",
          "95:                     yield from self.flatten_tasks(block.block)",
          "99:                 yield from self.flatten_tasks(task.block)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fed9b06e028057e0ba243365e2308f1074d94cd",
      "candidate_info": {
        "commit_hash": "7fed9b06e028057e0ba243365e2308f1074d94cd",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/7fed9b06e028057e0ba243365e2308f1074d94cd",
        "files": [
          "changelogs/fragments/82708-unsafe-plugin-name-error.yml",
          "changelogs/fragments/cve-2023-5764.yml",
          "changelogs/fragments/unsafe-fixes-2.yml",
          "changelogs/fragments/unsafe-intern.yml",
          "lib/ansible/module_utils/common/json.py",
          "lib/ansible/parsing/yaml/dumper.py",
          "lib/ansible/playbook/conditional.py",
          "lib/ansible/playbook/task.py",
          "lib/ansible/plugins/action/assert.py",
          "lib/ansible/plugins/callback/__init__.py",
          "lib/ansible/plugins/filter/core.py",
          "lib/ansible/plugins/loader.py",
          "lib/ansible/plugins/lookup/first_found.py",
          "lib/ansible/template/__init__.py",
          "lib/ansible/utils/unsafe_proxy.py",
          "test/integration/targets/ansible-galaxy-collection-scm/tasks/scm_dependency_deduplication.yml",
          "test/integration/targets/ansible-vault/roles/test_vault_embedded/tasks/main.yml",
          "test/integration/targets/ansible-vault/roles/test_vault_file_encrypted_embedded/tasks/main.yml",
          "test/integration/targets/apt_repository/tasks/apt.yml",
          "test/integration/targets/assert/assert.out.nested_tmpl.stderr",
          "test/integration/targets/assert/assert.out.nested_tmpl.stdout",
          "test/integration/targets/assert/assert.out.quiet.stderr",
          "test/integration/targets/assert/assert.out.quiet.stdout",
          "test/integration/targets/assert/assert_quiet.out.quiet.stderr",
          "test/integration/targets/assert/assert_quiet.out.quiet.stdout",
          "test/integration/targets/assert/nested_tmpl.yml",
          "test/integration/targets/assert/quiet.yml",
          "test/integration/targets/assert/runme.sh",
          "test/integration/targets/command_shell/tasks/main.yml",
          "test/integration/targets/copy/tasks/tests.yml",
          "test/integration/targets/debug/runme.sh",
          "test/integration/targets/debug/unsafe.yml",
          "test/integration/targets/expect/tasks/main.yml",
          "test/integration/targets/file/tasks/main.yml",
          "test/integration/targets/file/tasks/state_link.yml",
          "test/integration/targets/filter_urls/tasks/main.yml",
          "test/integration/targets/find/tasks/main.yml",
          "test/integration/targets/find/tasks/mode.yml",
          "test/integration/targets/gathering_facts/test_gathering_facts.yml",
          "test/integration/targets/git/tasks/depth.yml",
          "test/integration/targets/git/tasks/localmods.yml",
          "test/integration/targets/git/tasks/submodules.yml",
          "test/integration/targets/include_vars/tasks/main.yml",
          "test/integration/targets/lookup_first_found/tasks/main.yml",
          "test/integration/targets/lookup_ini/test_lookup_properties.yml",
          "test/integration/targets/lookup_subelements/tasks/main.yml",
          "test/integration/targets/loop_control/inner.yml",
          "test/integration/targets/module_precedence/modules_test_multiple_roles.yml",
          "test/integration/targets/module_precedence/modules_test_multiple_roles_reverse_order.yml",
          "test/integration/targets/module_precedence/multiple_roles/bar/tasks/main.yml",
          "test/integration/targets/module_precedence/multiple_roles/foo/tasks/main.yml",
          "test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py",
          "test/integration/targets/plugin_loader/runme.sh",
          "test/integration/targets/plugin_loader/unsafe_plugin_name.yml",
          "test/integration/targets/script/tasks/main.yml",
          "test/integration/targets/slurp/tasks/main.yml",
          "test/integration/targets/template/tasks/main.yml",
          "test/integration/targets/unarchive/tasks/test_missing_binaries.yml",
          "test/integration/targets/unarchive/tasks/test_mode.yml",
          "test/integration/targets/unarchive/tasks/test_unprivileged_user.yml",
          "test/integration/targets/unarchive/tasks/test_zip.yml",
          "test/integration/targets/wait_for/tasks/main.yml",
          "test/lib/ansible_test/_util/target/sanity/import/importer.py",
          "test/units/parsing/yaml/test_dumper.py",
          "test/units/utils/test_unsafe_proxy.py"
        ],
        "message": "[stable-2.18] forward ports of unsafe persistence fixes (#83922)\n\n* [stable-2.17] Unsafe persistence (#82779)\n\n* Ensure that unsafe is more difficult to lose [stable-2.16] (#82293)\n\n* Ensure that unsafe is more difficult to lose\n\n* Add Task.untemplated_args, and switch assert over to use it\n* Don't use re in first_found, switch to using native string methods\n* If nested templating results in unsafe, just error, don't continue\n\n* ci_complete\n\n(cherry picked from commit 270b39f6ff02511a2199505161218cbd1a5ae34f)\n\n* Fix various issues in unsafe_proxy (#82326)\n\n- Use str/bytes directly instead of text_type/binary_type\n- Fix AnsibleUnsafeBytes.__str__ implementation\n- Fix AnsibleUnsafeBytes.__format__ return type\n- Remove invalid methods from AnsibleUnsafeBytes (casefold, format, format_map)\n- Use `chars` instead of `bytes` to match stdlib naming\n- Remove commented out code\n\n(cherry picked from commit 59aa0145d26602f2f5ae5196f77a45acfcbbbd1e)\n\n* Additional Unsafe fixes (#82376)\n\n* Allow older pickle protocols to pickle unsafe classes. Fixes #82356\n\n* Address issues when iterating or getting single index from AnsibleUnsafeBytes. Fixes #82375\n\n* clog frag\n\n(cherry picked from commit afe3fc184f135ec707327d3349ce2ad6a368961d)\n\n* [stable-2.16] Enable directly using `AnsibleUnsafeText` with Python `pathlib` (#82510)\n\n* Enable directly using `AnsibleUnsafeText` with Python `pathlib`. Fixes #82414\n\n(cherry picked from commit c6a652c081c8877947d25e6ace4911bd5f8562e4)\n\n* Prevent failures due to unsafe plugin name (#82759)\n\n(cherry picked from commit 56f31126ad1c69e5eda7b92c1fa15861f722af0e)\n\n* Address issues from merge conflicts\n\n---------\n\nCo-authored-by: Matt Clay <matt@mystile.com>\nCo-authored-by: Martin Krizek <martin.krizek@gmail.com>\n(cherry picked from commit 9e622ddb6797f3a5b2ab649fa00313797d230ede)\n\n* rewrite illegal templated conditional in find test\n\n---------\n\nCo-authored-by: Matt Martz <matt@sivel.net>",
        "before_after_code_files": [
          "lib/ansible/module_utils/common/json.py||lib/ansible/module_utils/common/json.py",
          "lib/ansible/parsing/yaml/dumper.py||lib/ansible/parsing/yaml/dumper.py",
          "lib/ansible/playbook/conditional.py||lib/ansible/playbook/conditional.py",
          "lib/ansible/playbook/task.py||lib/ansible/playbook/task.py",
          "lib/ansible/plugins/action/assert.py||lib/ansible/plugins/action/assert.py",
          "lib/ansible/plugins/callback/__init__.py||lib/ansible/plugins/callback/__init__.py",
          "lib/ansible/plugins/filter/core.py||lib/ansible/plugins/filter/core.py",
          "lib/ansible/plugins/loader.py||lib/ansible/plugins/loader.py",
          "lib/ansible/plugins/lookup/first_found.py||lib/ansible/plugins/lookup/first_found.py",
          "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py",
          "lib/ansible/utils/unsafe_proxy.py||lib/ansible/utils/unsafe_proxy.py",
          "test/integration/targets/assert/assert.out.nested_tmpl.stderr||test/integration/targets/assert/assert.out.nested_tmpl.stderr",
          "test/integration/targets/assert/assert.out.nested_tmpl.stdout||test/integration/targets/assert/assert.out.nested_tmpl.stdout",
          "test/integration/targets/assert/runme.sh||test/integration/targets/assert/runme.sh",
          "test/integration/targets/debug/runme.sh||test/integration/targets/debug/runme.sh",
          "test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py||test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py",
          "test/integration/targets/plugin_loader/runme.sh||test/integration/targets/plugin_loader/runme.sh",
          "test/lib/ansible_test/_util/target/sanity/import/importer.py||test/lib/ansible_test/_util/target/sanity/import/importer.py",
          "test/units/parsing/yaml/test_dumper.py||test/units/parsing/yaml/test_dumper.py",
          "test/units/utils/test_unsafe_proxy.py||test/units/utils/test_unsafe_proxy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py"
          ],
          "candidate": [
            "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/module_utils/common/json.py||lib/ansible/module_utils/common/json.py": [
          "File: lib/ansible/module_utils/common/json.py -> lib/ansible/module_utils/common/json.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     Used in ``AnsibleJSONEncoder.iterencode``",
          "29:     \"\"\"",
          "30:     if _is_unsafe(value):",
          "32:     elif is_sequence(value):",
          "33:         value = [_preprocess_unsafe_encode(v) for v in value]",
          "34:     elif isinstance(value, Mapping):",
          "",
          "[Removed Lines]",
          "31:         value = {'__ansible_unsafe': to_text(value, errors='surrogate_or_strict', nonstring='strict')}",
          "",
          "[Added Lines]",
          "31:         value = {'__ansible_unsafe': to_text(value._strip_unsafe(), errors='surrogate_or_strict', nonstring='strict')}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:                 value = {'__ansible_vault': to_text(o._ciphertext, errors='surrogate_or_strict', nonstring='strict')}",
          "62:         elif getattr(o, '__UNSAFE__', False):",
          "63:             # unsafe object, this will never be triggered, see ``AnsibleJSONEncoder.iterencode``",
          "65:         elif isinstance(o, Mapping):",
          "66:             # hostvars and other objects",
          "67:             value = dict(o)",
          "",
          "[Removed Lines]",
          "64:             value = {'__ansible_unsafe': to_text(o, errors='surrogate_or_strict', nonstring='strict')}",
          "",
          "[Added Lines]",
          "64:             value = {'__ansible_unsafe': to_text(o._strip_unsafe(), errors='surrogate_or_strict', nonstring='strict')}",
          "",
          "---------------"
        ],
        "lib/ansible/parsing/yaml/dumper.py||lib/ansible/parsing/yaml/dumper.py": [
          "File: lib/ansible/parsing/yaml/dumper.py -> lib/ansible/parsing/yaml/dumper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from ansible.module_utils.six import text_type, binary_type",
          "23: from ansible.module_utils.common.yaml import SafeDumper",
          "24: from ansible.parsing.yaml.objects import AnsibleUnicode, AnsibleSequence, AnsibleMapping, AnsibleVaultEncryptedUnicode",
          "26: from ansible.template import AnsibleUndefined",
          "27: from ansible.vars.hostvars import HostVars, HostVarsVars",
          "28: from ansible.vars.manager import VarsWithSources",
          "",
          "[Removed Lines]",
          "25: from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes, NativeJinjaUnsafeText, NativeJinjaText",
          "",
          "[Added Lines]",
          "25: from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes, NativeJinjaUnsafeText, NativeJinjaText, _is_unsafe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: def represent_unicode(self, data):",
          "48:     return yaml.representer.SafeRepresenter.represent_str(self, text_type(data))",
          "51: def represent_binary(self, data):",
          "52:     return yaml.representer.SafeRepresenter.represent_binary(self, binary_type(data))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     if _is_unsafe(data):",
          "49:         data = data._strip_unsafe()",
          "54:     if _is_unsafe(data):",
          "55:         data = data._strip_unsafe()",
          "",
          "---------------"
        ],
        "lib/ansible/playbook/conditional.py||lib/ansible/playbook/conditional.py": [
          "File: lib/ansible/playbook/conditional.py -> lib/ansible/playbook/conditional.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import typing as t",
          "23: from ansible.module_utils.common.text.converters import to_native",
          "24: from ansible.playbook.attribute import FieldAttribute",
          "25: from ansible.template import Templar",
          "",
          "[Removed Lines]",
          "22: from ansible.errors import AnsibleError, AnsibleUndefinedVariable",
          "",
          "[Added Lines]",
          "22: from ansible.errors import AnsibleError, AnsibleUndefinedVariable, AnsibleTemplateError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:                     return False",
          "102:             # If the result of the first-pass template render (to resolve inline templates) is marked unsafe,",
          "107:             # NOTE The spaces around True and False are intentional to short-circuit literal_eval for",
          "108:             #      jinja2_native=False and avoid its expensive calls.",
          "109:             return templar.template(",
          "110:                 \"{%% if %s %%} True {%% else %%} False {%% endif %%}\" % conditional,",
          "112:         except AnsibleUndefinedVariable as e:",
          "113:             raise AnsibleUndefinedVariable(\"error while evaluating conditional (%s): %s\" % (original, e))",
          "",
          "[Removed Lines]",
          "103:             # explicitly disable lookups on the final pass to prevent evaluation of untrusted content in the",
          "104:             # constructed template.",
          "105:             disable_lookups = hasattr(conditional, '__UNSAFE__')",
          "111:                 disable_lookups=disable_lookups).strip() == \"True\"",
          "",
          "[Added Lines]",
          "103:             # explicitly fail since the next templating operation would never evaluate",
          "104:             if hasattr(conditional, '__UNSAFE__'):",
          "105:                 raise AnsibleTemplateError('Conditional is marked as unsafe, and cannot be evaluated.')",
          "111:             ).strip() == \"True\"",
          "",
          "---------------"
        ],
        "lib/ansible/playbook/task.py||lib/ansible/playbook/task.py": [
          "File: lib/ansible/playbook/task.py -> lib/ansible/playbook/task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:         super(Task, self).post_validate(templar)",
          "296:     def _post_validate_loop(self, attr, value, templar):",
          "297:         '''",
          "298:         Override post validation for the loop field, which is templated",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:     def _post_validate_args(self, attr, value, templar):",
          "297:         # smuggle an untemplated copy of the task args for actions that need more control over the templating of their",
          "298:         # input (eg, debug's var/msg, assert's \"that\" conditional expressions)",
          "299:         self.untemplated_args = value",
          "301:         # now recursively template the args dict",
          "302:         args = templar.template(value)",
          "304:         # FIXME: could we just nuke this entirely and/or wrap it up in ModuleArgsParser or something?",
          "305:         if '_variable_params' in args:",
          "306:             variable_params = args.pop('_variable_params')",
          "307:             if isinstance(variable_params, dict):",
          "308:                 if C.INJECT_FACTS_AS_VARS:",
          "309:                     display.warning(\"Using a variable for a task's 'args' is unsafe in some situations \"",
          "310:                                     \"(see https://docs.ansible.com/ansible/devel/reference_appendices/faq.html#argsplat-unsafe)\")",
          "311:                 variable_params.update(args)",
          "312:                 args = variable_params",
          "313:             else:",
          "314:                 # if we didn't get a dict, it means there's garbage remaining after k=v parsing, just give up",
          "315:                 # see https://github.com/ansible/ansible/issues/79862",
          "316:                 raise AnsibleError(f\"invalid or malformed argument: '{variable_params}'\")",
          "318:         return args",
          "",
          "---------------"
        ],
        "lib/ansible/plugins/action/assert.py||lib/ansible/plugins/action/assert.py": [
          "File: lib/ansible/plugins/action/assert.py -> lib/ansible/plugins/action/assert.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         quiet = boolean(self._task.args.get('quiet', False), strict=False)",
          "66:         # make sure the 'that' items are a list",
          "68:         if not isinstance(thats, list):",
          "69:             thats = [thats]",
          "",
          "[Removed Lines]",
          "67:         thats = self._task.args['that']",
          "",
          "[Added Lines]",
          "66:         # directly access 'that' via untemplated args from the task so we can intelligently trust embedded",
          "67:         # templates and preserve the original inputs/locations for better messaging on assert failures and",
          "68:         # errors.",
          "69:         # FIXME: even in devel, things like `that: item` don't always work properly (truthy string value",
          "70:         # is not really an embedded expression)",
          "71:         # we could fix that by doing direct var lookups on the inputs",
          "72:         # FIXME: some form of this code should probably be shared between debug, assert, and",
          "73:         # Task.post_validate, since they",
          "74:         # have a lot of overlapping needs",
          "75:         try:",
          "76:             thats = self._task.untemplated_args['that']",
          "77:         except KeyError:",
          "78:             # in the case of \"we got our entire args dict from a template\", we can just consult the",
          "79:             # post-templated dict (the damage has likely already been done for embedded templates anyway)",
          "80:             thats = self._task.args['that']",
          "82:         # FIXME: this is a case where we only want to resolve indirections, NOT recurse containers",
          "83:         # (and even then, the leaf-most expression being wrapped is at least suboptimal",
          "84:         # (since its expression will be \"eaten\").",
          "85:         if isinstance(thats, str):",
          "86:             thats = self._templar.template(thats)",
          "",
          "---------------"
        ],
        "lib/ansible/plugins/callback/__init__.py||lib/ansible/plugins/callback/__init__.py": [
          "File: lib/ansible/plugins/callback/__init__.py -> lib/ansible/plugins/callback/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: from ansible.plugins import AnsiblePlugin",
          "38: from ansible.utils.color import stringc",
          "39: from ansible.utils.display import Display",
          "41: from ansible.vars.clean import strip_internal_keys, module_response_deepcopy",
          "43: import yaml",
          "",
          "[Removed Lines]",
          "40: from ansible.utils.unsafe_proxy import AnsibleUnsafeText, NativeJinjaUnsafeText",
          "",
          "[Added Lines]",
          "40: from ansible.utils.unsafe_proxy import AnsibleUnsafeText, NativeJinjaUnsafeText, _is_unsafe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: def _pretty_represent_str(self, data):",
          "117:     \"\"\"Uses block style for multi-line strings\"\"\"",
          "118:     data = text_type(data)",
          "119:     if _should_use_block(data):",
          "120:         style = '|'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     if _is_unsafe(data):",
          "119:         data = data._strip_unsafe()",
          "",
          "---------------"
        ],
        "lib/ansible/plugins/filter/core.py||lib/ansible/plugins/filter/core.py": [
          "File: lib/ansible/plugins/filter/core.py -> lib/ansible/plugins/filter/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: from ansible.utils.encrypt import do_encrypt, PASSLIB_AVAILABLE",
          "36: from ansible.utils.hashing import md5s, checksum_s",
          "37: from ansible.utils.unicode import unicode_wrap",
          "38: from ansible.utils.vars import merge_hash",
          "40: display = Display()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: from ansible.utils.unsafe_proxy import _is_unsafe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:         # The ``text_type`` call here strips any custom",
          "220:         # string wrapper class, so that CSafeLoader can",
          "221:         # read the data",
          "222:         return yaml_load(text_type(to_text(data, errors='surrogate_or_strict')))",
          "223:     return data",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:         if _is_unsafe(data):",
          "224:             data = data._strip_unsafe()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:         # The ``text_type`` call here strips any custom",
          "229:         # string wrapper class, so that CSafeLoader can",
          "230:         # read the data",
          "231:         return yaml_load_all(text_type(to_text(data, errors='surrogate_or_strict')))",
          "232:     return data",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:         if _is_unsafe(data):",
          "235:             data = data._strip_unsafe()",
          "",
          "---------------"
        ],
        "lib/ansible/plugins/loader.py||lib/ansible/plugins/loader.py": [
          "File: lib/ansible/plugins/loader.py -> lib/ansible/plugins/loader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: from ansible.utils.collection_loader._collection_finder import _AnsibleCollectionFinder, _get_collection_metadata",
          "35: from ansible.utils.display import Display",
          "36: from ansible.utils.plugin_docs import add_fragments",
          "38: # TODO: take the packaging dep, or vendor SpecifierSet?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: from ansible.utils.unsafe_proxy import _is_unsafe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "862:     def get_with_context(self, name, *args, **kwargs):",
          "863:         ''' instantiates a plugin of the given name using arguments '''",
          "865:         found_in_cache = True",
          "866:         class_only = kwargs.pop('class_only', False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "865:         if _is_unsafe(name):",
          "866:             # Objects constructed using the name wrapped as unsafe remain",
          "867:             # (correctly) unsafe. Using such unsafe objects in places",
          "868:             # where underlying types (builtin string in this case) are",
          "869:             # expected can cause problems.",
          "870:             # One such case is importlib.abc.Loader.exec_module failing",
          "871:             # with \"ValueError: unmarshallable object\" because the module",
          "872:             # object is created with the __path__ attribute being wrapped",
          "873:             # as unsafe which isn't marshallable.",
          "874:             # Manually removing the unsafe wrapper prevents such issues.",
          "875:             name = name._strip_unsafe()",
          "",
          "---------------"
        ],
        "lib/ansible/plugins/lookup/first_found.py||lib/ansible/plugins/lookup/first_found.py": [
          "File: lib/ansible/plugins/lookup/first_found.py -> lib/ansible/plugins/lookup/first_found.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     elements: path",
          "139: \"\"\"",
          "140: import os",
          "143: from collections.abc import Mapping, Sequence",
          "",
          "[Removed Lines]",
          "141: import re",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: from ansible.utils.path import unfrackpath",
          "153: def _split_on(terms, spliters=','):",
          "154:     termlist = []",
          "155:     if isinstance(terms, string_types):",
          "157:     else:",
          "158:         # added since options will already listify",
          "159:         for t in terms:",
          "",
          "[Removed Lines]",
          "156:         termlist = re.split(r'[%s]' % ''.join(map(re.escape, spliters)), terms)",
          "",
          "[Added Lines]",
          "152: def _splitter(value, chars):",
          "153:     chars = set(chars)",
          "154:     v = ''",
          "155:     for c in value:",
          "156:         if c in chars:",
          "157:             yield v",
          "158:             v = ''",
          "159:             continue",
          "160:         v += c",
          "161:     yield v",
          "167:         termlist = list(_splitter(terms, spliters))",
          "",
          "---------------"
        ],
        "lib/ansible/template/__init__.py||lib/ansible/template/__init__.py": [
          "File: lib/ansible/template/__init__.py -> lib/ansible/template/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from numbers import Number",
          "31: from traceback import format_exc",
          "34: from jinja2.loaders import FileSystemLoader",
          "35: from jinja2.nativetypes import NativeEnvironment",
          "36: from jinja2.runtime import Context, StrictUndefined",
          "",
          "[Removed Lines]",
          "33: from jinja2.exceptions import TemplateSyntaxError, UndefinedError",
          "",
          "[Added Lines]",
          "33: from jinja2.exceptions import TemplateSyntaxError, UndefinedError, SecurityError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: from ansible.utils.display import Display",
          "55: from ansible.utils.listify import listify_lookup_plugin_terms",
          "56: from ansible.utils.native_jinja import NativeJinjaText",
          "59: display = Display()",
          "",
          "[Removed Lines]",
          "57: from ansible.utils.unsafe_proxy import to_unsafe_text, wrap_var",
          "",
          "[Added Lines]",
          "57: from ansible.utils.unsafe_proxy import to_unsafe_text, wrap_var, AnsibleUnsafeText, AnsibleUnsafeBytes, NativeJinjaUnsafeText",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:     flag is checked post-templating, and (when set) will result in the",
          "349:     final templated result being wrapped in AnsibleUnsafe.",
          "350:     '''",
          "351:     def __init__(self, *args, **kwargs):",
          "352:         super(AnsibleContext, self).__init__(*args, **kwargs)",
          "353:         self.unsafe = False",
          "355:     def _is_unsafe(self, val):",
          "356:         '''",
          "357:         Our helper function, which will also recursively check dict and",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:     _disallowed_callables = frozenset({",
          "352:         AnsibleUnsafeText._strip_unsafe.__qualname__,",
          "353:         AnsibleUnsafeBytes._strip_unsafe.__qualname__,",
          "354:         NativeJinjaUnsafeText._strip_unsafe.__qualname__,",
          "355:     })",
          "361:     def call(self, obj, *args, **kwargs):",
          "362:         if getattr(obj, '__qualname__', None) in self._disallowed_callables or obj in self._disallowed_callables:",
          "363:             raise SecurityError(f\"{obj!r} is not safely callable\")",
          "364:         return super().call(obj, *args, **kwargs)",
          "",
          "---------------"
        ],
        "lib/ansible/utils/unsafe_proxy.py||lib/ansible/utils/unsafe_proxy.py": [
          "File: lib/ansible/utils/unsafe_proxy.py -> lib/ansible/utils/unsafe_proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: from __future__ import annotations",
          "55: from collections.abc import Mapping, Set",
          "57: from ansible.module_utils.common.text.converters import to_bytes, to_text",
          "58: from ansible.module_utils.common.collections import is_sequence",
          "60: from ansible.utils.native_jinja import NativeJinjaText",
          "",
          "[Removed Lines]",
          "59: from ansible.module_utils.six import binary_type, text_type",
          "",
          "[Added Lines]",
          "55: import sys",
          "56: import types",
          "57: import warnings",
          "58: from sys import intern as _sys_intern",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     __UNSAFE__ = True",
          "82: class NativeJinjaUnsafeText(NativeJinjaText, AnsibleUnsafeText):",
          "",
          "[Removed Lines]",
          "70: class AnsibleUnsafeBytes(binary_type, AnsibleUnsafe):",
          "71:     def decode(self, *args, **kwargs):",
          "72:         \"\"\"Wrapper method to ensure type conversions maintain unsafe context\"\"\"",
          "73:         return AnsibleUnsafeText(super(AnsibleUnsafeBytes, self).decode(*args, **kwargs))",
          "76: class AnsibleUnsafeText(text_type, AnsibleUnsafe):",
          "77:     def encode(self, *args, **kwargs):",
          "78:         \"\"\"Wrapper method to ensure type conversions maintain unsafe context\"\"\"",
          "79:         return AnsibleUnsafeBytes(super(AnsibleUnsafeText, self).encode(*args, **kwargs))",
          "",
          "[Added Lines]",
          "73: class AnsibleUnsafeBytes(bytes, AnsibleUnsafe):",
          "74:     def _strip_unsafe(self):",
          "75:         return super().__bytes__()",
          "77:     def __reduce__(self, /):",
          "78:         return (self.__class__, (self._strip_unsafe(),))",
          "80:     def __str__(self, /):  # pylint: disable=invalid-str-returned",
          "81:         return self.decode()",
          "83:     def __bytes__(self, /):  # pylint: disable=invalid-bytes-returned",
          "84:         return self",
          "86:     def __repr__(self, /):  # pylint: disable=invalid-repr-returned",
          "87:         return AnsibleUnsafeText(super().__repr__())",
          "89:     def __format__(self, format_spec, /):  # pylint: disable=invalid-format-returned",
          "90:         return AnsibleUnsafeText(super().__format__(format_spec))",
          "92:     def __getitem__(self, key, /):",
          "93:         if isinstance(key, int):",
          "94:             return super().__getitem__(key)",
          "95:         return self.__class__(super().__getitem__(key))",
          "97:     def __reversed__(self, /):",
          "98:         return self[::-1]",
          "100:     def __add__(self, value, /):",
          "101:         return self.__class__(super().__add__(value))",
          "103:     def __radd__(self, value, /):",
          "104:         return self.__class__(value.__add__(self))",
          "106:     def __mul__(self, value, /):",
          "107:         return self.__class__(super().__mul__(value))",
          "109:     __rmul__ = __mul__",
          "111:     def __mod__(self, value, /):",
          "112:         return self.__class__(super().__mod__(value))",
          "114:     def __rmod__(self, value, /):",
          "115:         return self.__class__(super().__rmod__(value))",
          "117:     def capitalize(self, /):",
          "118:         return self.__class__(super().capitalize())",
          "120:     def center(self, width, fillchar=b' ', /):",
          "121:         return self.__class__(super().center(width, fillchar))",
          "123:     def decode(self, /, encoding='utf-8', errors='strict'):",
          "124:         return AnsibleUnsafeText(super().decode(encoding=encoding, errors=errors))",
          "126:     def removeprefix(self, prefix, /):",
          "127:         return self.__class__(super().removeprefix(prefix))",
          "129:     def removesuffix(self, suffix, /):",
          "130:         return self.__class__(super().removesuffix(suffix))",
          "132:     def expandtabs(self, /, tabsize=8):",
          "133:         return self.__class__(super().expandtabs(tabsize))",
          "135:     def join(self, iterable_of_bytes, /):",
          "136:         return self.__class__(super().join(iterable_of_bytes))",
          "138:     def ljust(self, width, fillchar=b' ', /):",
          "139:         return self.__class__(super().ljust(width, fillchar))",
          "141:     def lower(self, /):",
          "142:         return self.__class__(super().lower())",
          "144:     def lstrip(self, chars=None, /):",
          "145:         return self.__class__(super().lstrip(chars))",
          "147:     def partition(self, sep, /):",
          "148:         cls = self.__class__",
          "149:         return tuple(cls(e) for e in super().partition(sep))",
          "151:     def replace(self, old, new, count=-1, /):",
          "152:         return self.__class__(super().replace(old, new, count))",
          "154:     def rjust(self, width, fillchar=b' ', /):",
          "155:         return self.__class__(super().rjust(width, fillchar))",
          "157:     def rpartition(self, sep, /):",
          "158:         cls = self.__class__",
          "159:         return tuple(cls(e) for e in super().rpartition(sep))",
          "161:     def rstrip(self, chars=None, /):",
          "162:         return self.__class__(super().rstrip(chars))",
          "164:     def split(self, /, sep=None, maxsplit=-1):",
          "165:         cls = self.__class__",
          "166:         return [cls(e) for e in super().split(sep=sep, maxsplit=maxsplit)]",
          "168:     def rsplit(self, /, sep=None, maxsplit=-1):",
          "169:         cls = self.__class__",
          "170:         return [cls(e) for e in super().rsplit(sep=sep, maxsplit=maxsplit)]",
          "172:     def splitlines(self, /, keepends=False):",
          "173:         cls = self.__class__",
          "174:         return [cls(e) for e in super().splitlines(keepends=keepends)]",
          "176:     def strip(self, chars=None, /):",
          "177:         return self.__class__(super().strip(chars))",
          "179:     def swapcase(self, /):",
          "180:         return self.__class__(super().swapcase())",
          "182:     def title(self, /):",
          "183:         return self.__class__(super().title())",
          "185:     def translate(self, table, /, delete=b''):",
          "186:         return self.__class__(super().translate(table, delete=delete))",
          "188:     def upper(self, /):",
          "189:         return self.__class__(super().upper())",
          "191:     def zfill(self, width, /):",
          "192:         return self.__class__(super().zfill(width))",
          "195: class AnsibleUnsafeText(str, AnsibleUnsafe):",
          "196:     def _strip_unsafe(self, /):",
          "197:         return super().__str__()",
          "199:     def __reduce__(self, /):",
          "200:         return (self.__class__, (self._strip_unsafe(),))",
          "202:     def __str__(self, /):  # pylint: disable=invalid-str-returned",
          "203:         return self",
          "205:     def __repr__(self, /):  # pylint: disable=invalid-repr-returned",
          "206:         return self.__class__(super().__repr__())",
          "208:     def __format__(self, format_spec, /):  # pylint: disable=invalid-format-returned",
          "209:         return self.__class__(super().__format__(format_spec))",
          "211:     def __getitem__(self, key, /):",
          "212:         return self.__class__(super().__getitem__(key))",
          "214:     def __iter__(self, /):",
          "215:         cls = self.__class__",
          "216:         return (cls(c) for c in super().__iter__())",
          "218:     def __reversed__(self, /):",
          "219:         return self[::-1]",
          "221:     def __add__(self, value, /):",
          "222:         return self.__class__(super().__add__(value))",
          "224:     def __radd__(self, value, /):",
          "225:         return self.__class__(value.__add__(self))",
          "227:     def __mul__(self, value, /):",
          "228:         return self.__class__(super().__mul__(value))",
          "230:     __rmul__ = __mul__",
          "232:     def __mod__(self, value, /):",
          "233:         return self.__class__(super().__mod__(value))",
          "235:     def __rmod__(self, value, /):",
          "236:         return self.__class__(super().__rmod__(value))",
          "238:     def capitalize(self, /):",
          "239:         return self.__class__(super().capitalize())",
          "241:     def casefold(self, /):",
          "242:         return self.__class__(super().casefold())",
          "244:     def center(self, width, fillchar=' ', /):",
          "245:         return self.__class__(super().center(width, fillchar))",
          "247:     def encode(self, /, encoding='utf-8', errors='strict'):",
          "248:         return AnsibleUnsafeBytes(super().encode(encoding=encoding, errors=errors))",
          "250:     def removeprefix(self, prefix, /):",
          "251:         return self.__class__(super().removeprefix(prefix))",
          "253:     def removesuffix(self, suffix, /):",
          "254:         return self.__class__(super().removesuffix(suffix))",
          "256:     def expandtabs(self, /, tabsize=8):",
          "257:         return self.__class__(super().expandtabs(tabsize))",
          "259:     def format(self, /, *args, **kwargs):",
          "260:         return self.__class__(super().format(*args, **kwargs))",
          "262:     def format_map(self, mapping, /):",
          "263:         return self.__class__(super().format_map(mapping))",
          "265:     def join(self, iterable, /):",
          "266:         return self.__class__(super().join(iterable))",
          "268:     def ljust(self, width, fillchar=' ', /):",
          "269:         return self.__class__(super().ljust(width, fillchar))",
          "271:     def lower(self, /):",
          "272:         return self.__class__(super().lower())",
          "274:     def lstrip(self, chars=None, /):",
          "275:         return self.__class__(super().lstrip(chars))",
          "277:     def partition(self, sep, /):",
          "278:         cls = self.__class__",
          "279:         return tuple(cls(e) for e in super().partition(sep))",
          "281:     def replace(self, old, new, count=-1, /):",
          "282:         return self.__class__(super().replace(old, new, count))",
          "284:     def rjust(self, width, fillchar=' ', /):",
          "285:         return self.__class__(super().rjust(width, fillchar))",
          "287:     def rpartition(self, sep, /):",
          "288:         cls = self.__class__",
          "289:         return tuple(cls(e) for e in super().rpartition(sep))",
          "291:     def rstrip(self, chars=None, /):",
          "292:         return self.__class__(super().rstrip(chars))",
          "294:     def split(self, /, sep=None, maxsplit=-1):",
          "295:         cls = self.__class__",
          "296:         return [cls(e) for e in super().split(sep=sep, maxsplit=maxsplit)]",
          "298:     def rsplit(self, /, sep=None, maxsplit=-1):",
          "299:         cls = self.__class__",
          "300:         return [cls(e) for e in super().rsplit(sep=sep, maxsplit=maxsplit)]",
          "302:     def splitlines(self, /, keepends=False):",
          "303:         cls = self.__class__",
          "304:         return [cls(e) for e in super().splitlines(keepends=keepends)]",
          "306:     def strip(self, chars=None, /):",
          "307:         return self.__class__(super().strip(chars))",
          "309:     def swapcase(self, /):",
          "310:         return self.__class__(super().swapcase())",
          "312:     def title(self, /):",
          "313:         return self.__class__(super().title())",
          "315:     def translate(self, table, /):",
          "316:         return self.__class__(super().translate(table))",
          "318:     def upper(self, /):",
          "319:         return self.__class__(super().upper())",
          "321:     def zfill(self, width, /):",
          "322:         return self.__class__(super().zfill(width))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:         v = _wrap_sequence(v)",
          "112:     elif isinstance(v, NativeJinjaText):",
          "113:         v = NativeJinjaUnsafeText(v)",
          "115:         v = AnsibleUnsafeBytes(v)",
          "117:         v = AnsibleUnsafeText(v)",
          "119:     return v",
          "",
          "[Removed Lines]",
          "114:     elif isinstance(v, binary_type):",
          "116:     elif isinstance(v, text_type):",
          "",
          "[Added Lines]",
          "357:     elif isinstance(v, bytes):",
          "359:     elif isinstance(v, str):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: def to_unsafe_text(*args, **kwargs):",
          "127:     return wrap_var(to_text(*args, **kwargs))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: def _is_unsafe(obj):",
          "374:     return getattr(obj, '__UNSAFE__', False) is True",
          "377: def _intern(string):",
          "378:     \"\"\"This is a monkey patch for ``sys.intern`` that will strip",
          "379:     the unsafe wrapper prior to interning the string.",
          "381:     This will not exist in future versions.",
          "382:     \"\"\"",
          "383:     if isinstance(string, AnsibleUnsafeText):",
          "384:         string = string._strip_unsafe()",
          "385:     return _sys_intern(string)",
          "388: if isinstance(sys.intern, types.BuiltinFunctionType):",
          "389:     sys.intern = _intern",
          "390: else:",
          "391:     warnings.warn(\"skipped sys.intern patch; appears to have already been patched\", RuntimeWarning)",
          "",
          "---------------"
        ],
        "test/integration/targets/assert/assert.out.nested_tmpl.stderr||test/integration/targets/assert/assert.out.nested_tmpl.stderr": [
          "File: test/integration/targets/assert/assert.out.nested_tmpl.stderr -> test/integration/targets/assert/assert.out.nested_tmpl.stderr",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: + ansible-playbook -i localhost, -c local nested_tmpl.yml",
          "2: ++ set +x",
          "3: [WARNING]: conditional statements should not include jinja2 templating",
          "4: delimiters such as {{ }} or {% %}. Found: \"{{ foo }}\" == \"bar\"",
          "",
          "---------------"
        ],
        "test/integration/targets/assert/assert.out.nested_tmpl.stdout||test/integration/targets/assert/assert.out.nested_tmpl.stdout": [
          "File: test/integration/targets/assert/assert.out.nested_tmpl.stdout -> test/integration/targets/assert/assert.out.nested_tmpl.stdout",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: PLAY [localhost] ***************************************************************",
          "4: TASK [assert] ******************************************************************",
          "5: ok: [localhost] => {",
          "6:     \"changed\": false,",
          "7:     \"msg\": \"All assertions passed\"",
          "8: }",
          "10: PLAY RECAP *********************************************************************",
          "11: localhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0",
          "",
          "---------------"
        ],
        "test/integration/targets/assert/runme.sh||test/integration/targets/assert/runme.sh": [
          "File: test/integration/targets/assert/runme.sh -> test/integration/targets/assert/runme.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:    fi",
          "46: }",
          "50: ORIGFILE=\"${BASEFILE}\"",
          "51: OUTFILE=\"${BASEFILE}.new\"",
          "",
          "[Removed Lines]",
          "48: BASEFILE=assert_quiet.out",
          "",
          "[Added Lines]",
          "48: BASEFILE=assert.out",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: export ANSIBLE_RETRY_FILES_ENABLED=0",
          "71: run_test quiet",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: run_test nested_tmpl",
          "",
          "---------------"
        ],
        "test/integration/targets/debug/runme.sh||test/integration/targets/debug/runme.sh": [
          "File: test/integration/targets/debug/runme.sh -> test/integration/targets/debug/runme.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: # ensure debug does not set top level vars when looking at ansible_facts",
          "20: ansible-playbook nosetfacts.yml \"$@\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: ansible-playbook unsafe.yml \"$@\"",
          "",
          "---------------"
        ],
        "test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py||test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py": [
          "File: test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py -> test/integration/targets/plugin_loader/collections/ansible_collections/n/c/plugins/action/a.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from __future__ import annotations",
          "3: from ansible.plugins.action import ActionBase",
          "6: class ActionModule(ActionBase):",
          "7:     def run(self, tmp=None, task_vars=None):",
          "8:         return {\"nca_executed\": True}",
          "",
          "---------------"
        ],
        "test/integration/targets/plugin_loader/runme.sh||test/integration/targets/plugin_loader/runme.sh": [
          "File: test/integration/targets/plugin_loader/runme.sh -> test/integration/targets/plugin_loader/runme.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: # test filter loading ignoring duplicate file basename",
          "39: ansible-playbook file_collision/play.yml \"$@\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: ANSIBLE_COLLECTIONS_PATH=$PWD/collections ansible-playbook unsafe_plugin_name.yml \"$@\"",
          "",
          "---------------"
        ],
        "test/lib/ansible_test/_util/target/sanity/import/importer.py||test/lib/ansible_test/_util/target/sanity/import/importer.py": [
          "File: test/lib/ansible_test/_util/target/sanity/import/importer.py -> test/lib/ansible_test/_util/target/sanity/import/importer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:                     \"ignore\",",
          "542:                     \"AnsibleCollectionFinder has already been configured\")",
          "544:             try:",
          "545:                 yield",
          "546:             finally:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544:             # ansible.utils.unsafe_proxy attempts patching sys.intern generating a warning if it was already patched",
          "545:             warnings.filterwarnings(",
          "546:                 \"ignore\",",
          "547:                 \"skipped sys.intern patch; appears to have already been patched\"",
          "548:             )",
          "",
          "---------------"
        ],
        "test/units/parsing/yaml/test_dumper.py||test/units/parsing/yaml/test_dumper.py": [
          "File: test/units/parsing/yaml/test_dumper.py -> test/units/parsing/yaml/test_dumper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from ansible.parsing.yaml import dumper, objects",
          "26: from ansible.parsing.yaml.loader import AnsibleLoader",
          "27: from ansible.template import AnsibleUndefined",
          "30: from units.mock.yaml_helper import YamlTestUtils",
          "31: from units.mock.vault_helper import TextVaultSecret",
          "",
          "[Removed Lines]",
          "28: from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     def test_bytes(self):",
          "67:         b_text = u'tr\u00e9ma'.encode('utf-8')",
          "71:         stream = self._build_stream(yaml_out)",
          "72:         loader = self._loader(stream)",
          "",
          "[Removed Lines]",
          "68:         unsafe_object = AnsibleUnsafeBytes(b_text)",
          "69:         yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)",
          "",
          "[Added Lines]",
          "67:         yaml_out = self._dump_string(b_text, dumper=self.dumper)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     def test_unicode(self):",
          "81:         u_text = u'n\u00f6el'",
          "85:         stream = self._build_stream(yaml_out)",
          "86:         loader = self._loader(stream)",
          "",
          "[Removed Lines]",
          "82:         unsafe_object = AnsibleUnsafeText(u_text)",
          "83:         yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)",
          "",
          "[Added Lines]",
          "80:         yaml_out = self._dump_string(u_text, dumper=self.dumper)",
          "",
          "---------------"
        ],
        "test/units/utils/test_unsafe_proxy.py||test/units/utils/test_unsafe_proxy.py": [
          "File: test/units/utils/test_unsafe_proxy.py -> test/units/utils/test_unsafe_proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from __future__ import annotations",
          "7: from ansible.utils.unsafe_proxy import AnsibleUnsafe, AnsibleUnsafeBytes, AnsibleUnsafeText, wrap_var",
          "8: from ansible.module_utils.common.text.converters import to_text, to_bytes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import pathlib",
          "8: import sys",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114: def test_to_bytes_unsafe():",
          "115:     assert isinstance(to_bytes(AnsibleUnsafeText(u'foo')), AnsibleUnsafeBytes)",
          "116:     assert to_bytes(AnsibleUnsafeText(u'foo')) == AnsibleUnsafeBytes(b'foo')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: def test_unsafe_with_sys_intern():",
          "123:     # Specifically this is actually about sys.intern, test of pathlib",
          "124:     # because that is a specific affected use",
          "125:     assert sys.intern(AnsibleUnsafeText('foo')) == 'foo'",
          "126:     assert pathlib.Path(AnsibleUnsafeText('/tmp')) == pathlib.Path('/tmp')",
          "",
          "---------------"
        ]
      }
    }
  ]
}