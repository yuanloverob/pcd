{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6563283a7ebd5c5d88b681b4f1e237f7e6494fe",
      "candidate_info": {
        "commit_hash": "c6563283a7ebd5c5d88b681b4f1e237f7e6494fe",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c6563283a7ebd5c5d88b681b4f1e237f7e6494fe",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ],
        "message": "PDFBOX-4892: use correct method, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892605 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         if (encryption.getVersion() >= 4) {",
          "152:          setStreamFilterName(encryption.getStreamFilterName());",
          "154:         }",
          "155:         setDecryptMetadata(encryption.isEncryptMetaData());",
          "156:         StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;",
          "",
          "[Removed Lines]",
          "153:          setStringFilterName(encryption.getStreamFilterName());",
          "",
          "[Added Lines]",
          "153:          setStringFilterName(encryption.getStringFilterName());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ed53bad1e1c2064c2039bcf39451413e04cd827",
      "candidate_info": {
        "commit_hash": "5ed53bad1e1c2064c2039bcf39451413e04cd827",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5ed53bad1e1c2064c2039bcf39451413e04cd827",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java"
        ],
        "message": "PDFBOX-5050: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884566 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:             {",
          "115:                 addFontFromWidget(acroFormResources, annot);",
          "118:                 {",
          "119:                     PDField resolvedField = resolveNonRootField(acroForm, (PDAnnotationWidget) annot, nonTerminalFieldsMap);",
          "120:                     if (resolvedField != null)",
          "",
          "[Removed Lines]",
          "117:                 if (annot.getCOSObject().containsKey(COSName.PARENT))",
          "",
          "[Added Lines]",
          "117:                 COSDictionary parent = annot.getCOSObject().getCOSDictionary(COSName.PARENT);",
          "118:                 if (parent != null)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:         while (parent.containsKey(COSName.PARENT))",
          "176:         {",
          "177:             parent = parent.getCOSDictionary(COSName.PARENT);",
          "178:         }",
          "180:         if (nonTerminalFieldsMap.get(parent.getString(COSName.T)) == null)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:             if (parent == null)",
          "180:             {",
          "181:                 return null;",
          "182:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e4193b01ed1b104aaa9458fabfa6fdea4f074b7",
      "candidate_info": {
        "commit_hash": "5e4193b01ed1b104aaa9458fabfa6fdea4f074b7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5e4193b01ed1b104aaa9458fabfa6fdea4f074b7",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-5215: add test for double visible signature on encrypted file; add early detection of problems in the page structure\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890783 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "69: import org.apache.pdfbox.pdmodel.PDPage;",
          "70: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "71: import org.apache.pdfbox.pdmodel.encryption.SecurityProvider;",
          "72: import org.apache.pdfbox.pdmodel.interactive.digitalsignature.ExternalSigningSupport;",
          "73: import org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.apache.pdfbox.pdmodel.PDPageTree;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:         document.close();",
          "457:         document = PDDocument.load(signedFile);",
          "459:         Assert.assertEquals(origPageKey, document.getDocumentCatalog().getCOSObject().getItem(COSName.PAGES).toString());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:         int p = 0;",
          "462:         PDPageTree pageTree = document.getPages();",
          "463:         for (PDPage page : document.getPages())",
          "464:         {",
          "465:             Assert.assertEquals(p, pageTree.indexOf(page));",
          "466:             ++p;",
          "467:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "824:         checkLTV(outFile);",
          "825:     }",
          "827:     private void checkLTV(File outFile)",
          "828:             throws IOException, GeneralSecurityException, OCSPException, OperatorCreationException,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:     @Test",
          "839:     public void testDoubleVisibleSignatureOnEncryptedFile()",
          "840:             throws IOException, CMSException, OperatorCreationException, GeneralSecurityException, TSPException, CertificateVerificationException",
          "841:     {",
          "843:         KeyStore keystore = KeyStore.getInstance(\"PKCS12\");",
          "844:         keystore.load(new FileInputStream(keystorePath), password.toCharArray());",
          "847:         String inPath = \"target/pdfs/PDFBOX-2469-1-AcroForm-AES128.pdf\";",
          "848:         FileInputStream fis = new FileInputStream(jpegPath);",
          "849:         CreateVisibleSignature signing = new CreateVisibleSignature(keystore, password.toCharArray());",
          "850:         signing.setVisibleSignDesigner(inPath, 0, 0, -50, fis, 1);",
          "851:         signing.setVisibleSignatureProperties(\"name\", \"location\", \"Security\", 0, 1, true);",
          "852:         signing.setExternalSigning(externallySign);",
          "853:         File destFile = new File(outDir, getOutputFileName(\"2signed{0}_visible.pdf\"));",
          "854:         signing.signPDF(new File(inPath), destFile, null);",
          "855:         fis.close();",
          "857:         checkSignature(new File(inPath), destFile, false);",
          "859:         inPath = destFile.getAbsolutePath();",
          "860:         fis = new FileInputStream(jpegPath);",
          "861:         signing = new CreateVisibleSignature(keystore, password.toCharArray());",
          "862:         signing.setVisibleSignDesigner(inPath, 0, 0, -50, fis, 2);",
          "863:         signing.setVisibleSignatureProperties(\"name\", \"location\", \"Security\", 0, 2, true);",
          "864:         signing.setExternalSigning(externallySign);",
          "865:         destFile = new File(outDir, getOutputFileName(\"2signed{0}_visible_signed{0}_visible.pdf\"));",
          "866:         signing.signPDF(new File(inPath), destFile, null);",
          "867:         fis.close();",
          "869:         checkSignature(new File(inPath), destFile, false);",
          "870:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42eba5bc889c51a432f93aaabd8ad8bcea74c7b4",
      "candidate_info": {
        "commit_hash": "42eba5bc889c51a432f93aaabd8ad8bcea74c7b4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/42eba5bc889c51a432f93aaabd8ad8bcea74c7b4",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java"
        ],
        "message": "PDFBOX-4892: remove unused constant\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891492 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: final class FlateFilter extends Filter",
          "39: {",
          "40:     private static final Log LOG = LogFactory.getLog(FlateFilter.class);",
          "43:     @Override",
          "44:     public DecodeResult decode(InputStream encoded, OutputStream decoded,",
          "",
          "[Removed Lines]",
          "41:     private static final int BUFFER_SIZE = 0x4000;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcee4ed9d2583b6ea96e16b4cfdcac0ded6eb265",
      "candidate_info": {
        "commit_hash": "fcee4ed9d2583b6ea96e16b4cfdcac0ded6eb265",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fcee4ed9d2583b6ea96e16b4cfdcac0ded6eb265",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
        ],
        "message": "PDFBOX-5198: merge the K entries so that \"Document\" gets grouped as \"Part\" below a single \"Document\" to align with Adobe\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890294 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:                       PDStructureTreeRoot srcStructTree,",
          "959:                       PDStructureTreeRoot destStructTree) throws IOException",
          "960:     {",
          "963:         if (destStructTree.getK() != null)",
          "964:         {",
          "965:             COSBase base = destStructTree.getK();",
          "966:             if (base instanceof COSArray)",
          "967:             {",
          "969:             }",
          "971:             {",
          "973:             }",
          "974:         }",
          "975:         if (srcStructTree.getK() != null)",
          "976:         {",
          "977:             COSBase base = cloner.cloneForNewDocument(srcStructTree.getK());",
          "978:             if (base instanceof COSArray)",
          "979:             {",
          "981:             }",
          "983:             {",
          "985:             }",
          "986:         }",
          "988:         {",
          "995:         }",
          "996:     }",
          "",
          "[Removed Lines]",
          "962:         COSArray newKArray = new COSArray();",
          "968:                 newKArray.addAll((COSArray) base);",
          "970:             else",
          "972:                 newKArray.add(base);",
          "980:                 newKArray.addAll((COSArray) base);",
          "982:             else",
          "984:                 newKArray.add(base);",
          "987:         if (newKArray.size() > 0)",
          "989:             COSDictionary kDictLevel0 = new COSDictionary();",
          "990:             updateParentEntry(newKArray, kDictLevel0);",
          "991:             kDictLevel0.setItem(COSName.K, newKArray);",
          "992:             kDictLevel0.setItem(COSName.P, destStructTree);",
          "993:             kDictLevel0.setItem(COSName.S, COSName.DOCUMENT);",
          "994:             destStructTree.setK(kDictLevel0);",
          "",
          "[Added Lines]",
          "961:         COSArray dstKArray = new COSArray();",
          "967:                 dstKArray.addAll((COSArray) base);",
          "969:             else if (base instanceof COSDictionary)",
          "971:                 dstKArray.add(base);",
          "975:         COSArray srcKArray = new COSArray();",
          "981:                 srcKArray.addAll((COSArray) base);",
          "983:             else if (base instanceof COSDictionary)",
          "985:                 srcKArray.add(base);",
          "989:         if (srcKArray.size() == 0)",
          "990:         {",
          "991:             return;",
          "992:         }",
          "994:         if (dstKArray.size() == 1 && dstKArray.getObject(0) instanceof COSDictionary)",
          "995:         {",
          "998:             COSDictionary topKDict = (COSDictionary) dstKArray.getObject(0);",
          "999:             if (COSName.DOCUMENT.equals(topKDict.getCOSName(COSName.S)))",
          "1000:             {",
          "1001:                 COSArray kLevelOneArray = topKDict.getCOSArray(COSName.K);",
          "1002:                 if (kLevelOneArray != null)",
          "1003:                 {",
          "1004:                     boolean onlyDocuments = hasOnlyDocumentsOrParts(kLevelOneArray);",
          "1005:                     if (onlyDocuments)",
          "1006:                     {",
          "1008:                         kLevelOneArray.addAll(srcKArray);",
          "1009:                         updateParentEntry(kLevelOneArray, topKDict, COSName.PART);",
          "1010:                         return;",
          "1011:                     }",
          "1012:                 }",
          "1013:             }",
          "1014:         }",
          "1016:         if (dstKArray.size() == 0)",
          "1017:         {",
          "1018:             updateParentEntry(srcKArray, destStructTree.getCOSObject(), null);",
          "1019:             destStructTree.setK(srcKArray);",
          "1020:             return;",
          "1021:         }",
          "1024:         dstKArray.addAll(srcKArray);",
          "1025:         COSDictionary kLevelZeroDict = new COSDictionary();",
          "1027:         COSName newStructureType = hasOnlyDocumentsOrParts(dstKArray) ? COSName.PART : null;",
          "1028:         updateParentEntry(dstKArray, kLevelZeroDict, newStructureType);",
          "1029:         kLevelZeroDict.setItem(COSName.K, dstKArray);",
          "1030:         kLevelZeroDict.setItem(COSName.P, destStructTree);",
          "1031:         kLevelZeroDict.setItem(COSName.S, COSName.DOCUMENT);",
          "1032:         destStructTree.setK(kLevelZeroDict);",
          "1033:     }",
          "1035:     private boolean hasOnlyDocumentsOrParts(COSArray kLevelOneArray)",
          "1036:     {",
          "1037:         for (int i = 0; i < kLevelOneArray.size(); ++i)",
          "1038:         {",
          "1039:             COSBase base = kLevelOneArray.getObject(i);",
          "1040:             if (!(base instanceof COSDictionary))",
          "1041:             {",
          "1042:                 return false;",
          "1043:             }",
          "1044:             COSDictionary dict = (COSDictionary) base;",
          "1045:             if (!COSName.DOCUMENT.equals(dict.getCOSName(COSName.S)) &&",
          "1046:                 !COSName.PART.equals(dict.getCOSName(COSName.S)))",
          "1047:             {",
          "1048:                 return false;",
          "1049:             }",
          "1050:         }",
          "1051:         return true;",
          "1052:     }",
          "1061:     private void updateParentEntry(COSArray kArray, COSDictionary newParent, COSName newStructureType)",
          "1062:     {",
          "1063:         for (int i = 0; i < kArray.size(); i++)",
          "1065:             COSBase subEntry = kArray.getObject(i);",
          "1066:             if (subEntry instanceof COSDictionary)",
          "1067:             {",
          "1068:                 COSDictionary dictEntry = (COSDictionary) subEntry;",
          "1069:                 dictEntry.setItem(COSName.P, newParent);",
          "1070:                 if (newStructureType != null)",
          "1071:                 {",
          "1072:                     dictEntry.setItem(COSName.S, newStructureType);",
          "1073:                 }",
          "1074:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1523:         }",
          "1524:     }",
          "",
          "[Removed Lines]",
          "1532:     private void updateParentEntry(COSArray kArray, COSDictionary newParent)",
          "1533:     {",
          "1534:         for (int i = 0; i < kArray.size(); i++)",
          "1535:         {",
          "1536:             COSBase subEntry = kArray.getObject(i);",
          "1537:             if (subEntry instanceof COSDictionary)",
          "1538:             {",
          "1539:                 COSDictionary dictEntry = (COSDictionary) subEntry;",
          "1540:                 if (dictEntry.getDictionaryObject(COSName.P) != null)",
          "1541:                 {",
          "1542:                     dictEntry.setItem(COSName.P, newParent);",
          "1543:                 }",
          "1544:             }",
          "1545:         }",
          "1546:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}