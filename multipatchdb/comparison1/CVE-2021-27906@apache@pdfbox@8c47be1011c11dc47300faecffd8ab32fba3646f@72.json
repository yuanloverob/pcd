{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94adfb025cc0c965200c4056ea05ccbe05b62f4a",
      "candidate_info": {
        "commit_hash": "94adfb025cc0c965200c4056ea05ccbe05b62f4a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/94adfb025cc0c965200c4056ea05ccbe05b62f4a",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java"
        ],
        "message": "PDFBOX-4892: added missing modifying methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882804 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionary.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:     {",
          "288:         throw new UnsupportedOperationException();",
          "289:     }",
          "290: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:     @Override",
          "295:     public void setFlag(COSName field, int bitFlag, boolean value)",
          "296:     {",
          "297:         throw new UnsupportedOperationException();",
          "298:     }",
          "303:     @Override",
          "304:     public void setNeedToBeUpdated(boolean flag)",
          "305:     {",
          "306:         throw new UnsupportedOperationException();",
          "307:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "744606e66f5c10775d97c75f8a1fa9e68ffc0b31",
      "candidate_info": {
        "commit_hash": "744606e66f5c10775d97c75f8a1fa9e68ffc0b31",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/744606e66f5c10775d97c75f8a1fa9e68ffc0b31",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
        ],
        "message": "PDFBOX-4892: create array only when needed, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887873 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     public void generateNormalAppearance()",
          "83:     {",
          "84:         PDAnnotationMarkup annotation = (PDAnnotationMarkup) getAnnotation();",
          "86:         if (PDAnnotationMarkup.IT_FREE_TEXT_CALLOUT.equals(annotation.getIntent()))",
          "87:         {",
          "88:             pathsArray = annotation.getCallout();",
          "",
          "[Removed Lines]",
          "85:         float[] pathsArray = new float[0];",
          "",
          "[Added Lines]",
          "85:         float[] pathsArray;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                 pathsArray = new float[0];",
          "92:             }",
          "93:         }",
          "94:         AnnotationBorder ab = AnnotationBorder.getAnnotationBorder(annotation, annotation.getBorderStyle());",
          "96:         PDAppearanceContentStream cs = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:         else",
          "95:         {",
          "96:             pathsArray = new float[0];",
          "97:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26c4086f34984ea8d535a00a7e04edc04a6a657e",
      "candidate_info": {
        "commit_hash": "26c4086f34984ea8d535a00a7e04edc04a6a657e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/26c4086f34984ea8d535a00a7e04edc04a6a657e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java"
        ],
        "message": "PDFBOX-4060: use StringBuilder instead of String, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887322 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:         Map<String, int[]> map1 = new HashMap<String, int[]>();",
          "285:         String key = null;",
          "287:         int width = raster.getWidth();",
          "288:         int height = raster.getHeight();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:         StringBuilder keyBuilder = new StringBuilder();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:             {",
          "301:                 raster.getPixel(x, y, src);",
          "304:                 for (int s = 1; s < numSrcComponents; s++)",
          "305:                 {",
          "307:                 }",
          "308:                 int[] pxl = map1.get(key);",
          "309:                 if (pxl != null)",
          "310:                 {",
          "",
          "[Removed Lines]",
          "303:                 key = Float.toString(src[0]);",
          "306:                     key += \"#\" + Float.toString(src[s]);",
          "",
          "[Added Lines]",
          "304:                 keyBuilder.append(src[0]);",
          "307:                     keyBuilder.append('#').append(src[s]);",
          "309:                 key = keyBuilder.toString();",
          "310:                 keyBuilder.setLength(0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87b04b5e60f1192fb7bc4d3fe5398cf8408c43db",
      "candidate_info": {
        "commit_hash": "87b04b5e60f1192fb7bc4d3fe5398cf8408c43db",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/87b04b5e60f1192fb7bc4d3fe5398cf8408c43db",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java"
        ],
        "message": "PDFBOX-4847: refactor, split large method\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881225 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:         if (state.iCCP != null || state.sRGB != null)",
          "401:         {",
          "403:             COSArray array = new COSArray();",
          "404:             array.add(COSName.ICCBASED);",
          "413:             {",
          "417:                 {",
          "421:                 }",
          "422:                 iccProfileDataStart++;",
          "448:             }",
          "450:             {",
          "462:             }",
          "466:         }",
          "468:     }",
          "470:     private static COSDictionary buildDecodeParams(PNGConverterState state, PDColorSpace colorSpace)",
          "",
          "[Removed Lines]",
          "405:             PDStream pdStream = new PDStream(document);",
          "406:             array.add(pdStream);",
          "407:             COSStream cosStream = pdStream.getCOSObject();",
          "408:             cosStream.setInt(COSName.N, colorSpace.getNumberOfComponents());",
          "409:             cosStream.setItem(COSName.ALTERNATE, colorSpace.getNumberOfComponents()",
          "410:                     == 1 ? COSName.DEVICEGRAY : COSName.DEVICERGB);",
          "411:             cosStream.setItem(COSName.FILTER, COSName.FLATE_DECODE);",
          "412:             if (state.iCCP != null)",
          "415:                 int iccProfileDataStart = 0;",
          "416:                 while (iccProfileDataStart < 80 && iccProfileDataStart < state.iCCP.length)",
          "418:                     if (state.iCCP.bytes[state.iCCP.start + iccProfileDataStart] == 0)",
          "419:                         break;",
          "420:                     iccProfileDataStart++;",
          "423:                 if (iccProfileDataStart >= state.iCCP.length)",
          "424:                 {",
          "425:                     LOG.error(\"Invalid iCCP chunk, to few bytes\");",
          "426:                     return null;",
          "427:                 }",
          "428:                 byte compressionMethod = state.iCCP.bytes[state.iCCP.start + iccProfileDataStart];",
          "429:                 if (compressionMethod != 0)",
          "430:                 {",
          "431:                     LOG.error(String.format(\"iCCP chunk: invalid compression method %d\",",
          "432:                             compressionMethod));",
          "433:                     return null;",
          "434:                 }",
          "436:                 iccProfileDataStart++;",
          "438:                 OutputStream rawOutputStream = cosStream.createRawOutputStream();",
          "439:                 try",
          "440:                 {",
          "441:                     rawOutputStream.write(state.iCCP.bytes, state.iCCP.start + iccProfileDataStart,",
          "442:                             state.iCCP.length - iccProfileDataStart);",
          "443:                 }",
          "444:                 finally",
          "445:                 {",
          "446:                     rawOutputStream.close();",
          "447:                 }",
          "449:             else",
          "452:                 ICC_Profile rgbProfile = ICC_Profile.getInstance(ColorSpace.CS_sRGB);",
          "453:                 OutputStream outputStream = cosStream.createOutputStream();",
          "454:                 try",
          "455:                 {",
          "456:                     outputStream.write(rgbProfile.getData());",
          "457:                 }",
          "458:                 finally",
          "459:                 {",
          "460:                     outputStream.close();",
          "461:                 }",
          "464:             PDICCBased profile = PDICCBased.create(array, null);",
          "465:             imageXObject.setColorSpace(profile);",
          "467:         return imageXObject;",
          "",
          "[Added Lines]",
          "407:             COSStream cosStream = createCOSStreamwithIccProfile(document, colorSpace, state);",
          "408:             if (cosStream == null)",
          "409:             {",
          "410:                 return null;",
          "411:             }",
          "414:             array.add(cosStream);",
          "415:             PDICCBased profile = PDICCBased.create(array, null);",
          "416:             imageXObject.setColorSpace(profile);",
          "417:         }",
          "418:         return imageXObject;",
          "419:     }",
          "421:     private static COSStream createCOSStreamwithIccProfile",
          "422:         (PDDocument document, PDColorSpace colorSpace, PNGConverterState state) throws IOException",
          "423:     {",
          "424:         COSStream cosStream = document.getDocument().createCOSStream();",
          "425:         cosStream.setInt(COSName.N, colorSpace.getNumberOfComponents());",
          "426:         cosStream.setItem(COSName.ALTERNATE, colorSpace.getNumberOfComponents()",
          "427:                 == 1 ? COSName.DEVICEGRAY : COSName.DEVICERGB);",
          "428:         cosStream.setItem(COSName.FILTER, COSName.FLATE_DECODE);",
          "429:         if (state.iCCP != null)",
          "430:         {",
          "432:             int iccProfileDataStart = 0;",
          "433:             while (iccProfileDataStart < 80 && iccProfileDataStart < state.iCCP.length)",
          "435:                 if (state.iCCP.bytes[state.iCCP.start + iccProfileDataStart] == 0)",
          "437:                     break;",
          "441:             iccProfileDataStart++;",
          "442:             if (iccProfileDataStart >= state.iCCP.length)",
          "444:                 LOG.error(\"Invalid iCCP chunk, to few bytes\");",
          "445:                 return null;",
          "446:             }",
          "447:             byte compressionMethod = state.iCCP.bytes[state.iCCP.start + iccProfileDataStart];",
          "448:             if (compressionMethod != 0)",
          "449:             {",
          "450:                 LOG.error(String.format(\"iCCP chunk: invalid compression method %d\",",
          "451:                         compressionMethod));",
          "452:                 return null;",
          "453:             }",
          "455:             iccProfileDataStart++;",
          "456:             OutputStream rawOutputStream = cosStream.createRawOutputStream();",
          "457:             try",
          "458:             {",
          "459:                 rawOutputStream.write(state.iCCP.bytes, state.iCCP.start + iccProfileDataStart,",
          "460:                         state.iCCP.length - iccProfileDataStart);",
          "461:             }",
          "462:             finally",
          "463:             {",
          "464:                 rawOutputStream.close();",
          "467:         else",
          "468:         {",
          "470:             ICC_Profile rgbProfile = ICC_Profile.getInstance(ColorSpace.CS_sRGB);",
          "471:             OutputStream outputStream = cosStream.createOutputStream();",
          "472:             try",
          "473:             {",
          "474:                 outputStream.write(rgbProfile.getData());",
          "475:             }",
          "476:             finally",
          "477:             {",
          "478:                 outputStream.close();",
          "479:             }",
          "480:         }",
          "481:         return cosStream;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6374e86016d07aabd853d9b5dfdf94306be393e8",
      "candidate_info": {
        "commit_hash": "6374e86016d07aabd853d9b5dfdf94306be393e8",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6374e86016d07aabd853d9b5dfdf94306be393e8",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ],
        "message": "PDFBOX-5157: add LTV check to timestamped LTV file\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888710 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     @Test",
          "272:     public void testCreateSignedTimeStamp()",
          "273:             throws IOException, CMSException, OperatorCreationException, GeneralSecurityException,",
          "275:     {",
          "276:         if (externallySign)",
          "277:         {",
          "",
          "[Removed Lines]",
          "274:                    TSPException, CertificateVerificationException",
          "",
          "[Added Lines]",
          "274:                    TSPException, CertificateVerificationException, OCSPException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         File outFile = new File(outDir, substring + \"_LTV.pdf\");",
          "317:         AddValidationInformation addValidationInformation = new AddValidationInformation();",
          "318:         addValidationInformation.validateSignature(inFile, outFile);",
          "319:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:         checkLTV(outFile);",
          "",
          "---------------"
        ]
      }
    }
  ]
}