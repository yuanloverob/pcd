{
  "cve_id": "CVE-2024-9621",
  "cve_desc": "A vulnerability was found in Quarkus CXF. Passwords and other secrets may appear in the  application log in spite of the user configuring them to be hidden. This issue requires some special configuration to be vulnerable, such as SOAP logging enabled, application set client, and endpoint logging properties, and the attacker must have access to the application log.",
  "repo": "quarkiverse/quarkus-cxf",
  "patch_hash": "8ed72cab8db8e5659e294b05529d2b45557859bd",
  "patch_info": {
    "commit_hash": "8ed72cab8db8e5659e294b05529d2b45557859bd",
    "repo": "quarkiverse/quarkus-cxf",
    "commit_url": "https://github.com/quarkiverse/quarkus-cxf/commit/8ed72cab8db8e5659e294b05529d2b45557859bd",
    "files": [
      "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
      "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
      "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
    ],
    "message": "Per client or service configuration of sensitive-element-names and sensitive-protocol-header-names not honored #1533",
    "before_after_code_files": [
      "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
      "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
      "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
    ]
  },
  "patch_diff": {
    "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java": [
      "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package io.quarkiverse.cxf.deployment.logging;",
      "3: import static org.assertj.core.api.Assertions.assertThat;",
      "5: import java.util.Collections;",
      "6: import java.util.LinkedHashMap;",
      "7: import java.util.List;",
      "8: import java.util.Map;",
      "9: import java.util.Objects;",
      "10: import java.util.function.Predicate;",
      "11: import java.util.logging.LogRecord;",
      "12: import java.util.regex.Pattern;",
      "14: import jakarta.enterprise.context.ApplicationScoped;",
      "15: import jakarta.inject.Named;",
      "16: import jakarta.jws.WebMethod;",
      "17: import jakarta.jws.WebParam;",
      "18: import jakarta.jws.WebService;",
      "19: import jakarta.xml.bind.annotation.XmlAccessType;",
      "20: import jakarta.xml.bind.annotation.XmlAccessorType;",
      "21: import jakarta.xml.bind.annotation.XmlElement;",
      "22: import jakarta.xml.bind.annotation.XmlType;",
      "24: import org.apache.cxf.interceptor.Fault;",
      "25: import org.apache.cxf.message.Message;",
      "26: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
      "27: import org.apache.cxf.phase.Phase;",
      "28: import org.assertj.core.api.Assertions;",
      "29: import org.jboss.shrinkwrap.api.ShrinkWrap;",
      "30: import org.jboss.shrinkwrap.api.spec.JavaArchive;",
      "31: import org.junit.jupiter.api.Test;",
      "32: import org.junit.jupiter.api.extension.RegisterExtension;",
      "34: import io.quarkiverse.cxf.annotation.CXFClient;",
      "35: import io.quarkus.test.QuarkusUnitTest;",
      "37: public class GlobalSensitiveTest {",
      "39:     @RegisterExtension",
      "40:     public static final QuarkusUnitTest test = new QuarkusUnitTest()",
      "41:             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)",
      "42:                     .addClasses(HelloService.class, HelloServiceImpl.class, Person.class, ServiceAddHeader.class,",
      "43:                             ClientAddHeader.class))",
      "46:             .overrideConfigKey(\"quarkus.cxf.logging.enabled-for\", \"both\")",
      "47:             .overrideConfigKey(\"quarkus.cxf.logging.sensitive-protocol-header-names\",",
      "48:                     \"Client-Secret-Header,Service-Secret-Header\")",
      "49:             .overrideConfigKey(\"quarkus.cxf.logging.sensitive-element-names\",",
      "50:                     \"firstName,surname,greetingPrefix,greetingSuffix\")",
      "52:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\", HelloServiceImpl.class.getName())",
      "53:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".out-interceptors\", \"#ServiceAddHeader\")",
      "55:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
      "56:             .overrideConfigKey(\"quarkus.cxf.client.hello.out-interceptors\", \"#ClientAddHeader\")",
      "57:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
      "59:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"HelloService.RE\")) // REQ_[IN|OUT] or RESP_[IN|OUT]",
      "60:             .assertLogRecords(records ->",
      "62:             assertThat(records)",
      "63:                     .extracting(LogRecord::getMessage)",
      "64:                     .anyMatch(messageExists(\"REQ_OUT\", \"Client-Secret-Header=XXX\",",
      "65:                             \"<person><firstName>XXX</firstName><surname>XXX</surname></person>\"))",
      "66:                     .anyMatch(messageExists(\"REQ_IN\", \"Client-Secret-Header=XXX\",",
      "67:                             \"<person><firstName>XXX</firstName><surname>XXX</surname></person>\"))",
      "68:                     .anyMatch(messageExists(\"RESP_OUT\", \"Service-Secret-Header=XXX\",",
      "69:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
      "70:                     .anyMatch(messageExists(\"RESP_IN\", \"Service-Secret-Header=XXX\",",
      "71:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
      "72:                     .hasSize(4));",
      "74:     ;",
      "76:     @CXFClient(\"hello\")",
      "77:     HelloService hello;",
      "79:     @Test",
      "80:     void sensitive() {",
      "81:         Assertions.assertThat(hello.hello(new Person(\"Joe\", \"Doe\"))).isEqualTo(new Greeting(\"Hello\", \"Joe Doe\"));",
      "82:     }",
      "84:     static Predicate<String> messageExists(String messageKind, String headersSubstring, String payloadSubstring) {",
      "85:         return msg -> Pattern.compile(",
      "86:                 \"^\" + messageKind + \".*Headers: \\\\{[^\\\\}]*\" + headersSubstring + \"[^\\\\}]*\\\\}.*Payload: .*\" + payloadSubstring",
      "87:                         + \".*$\",",
      "88:                 Pattern.DOTALL).matcher(msg).matches();",
      "89:     }",
      "91:     @WebService",
      "92:     public interface HelloService {",
      "94:         @WebMethod",
      "95:         Greeting hello(@WebParam(name = \"person\") Person person);",
      "97:     }",
      "99:     @WebService(serviceName = \"HelloService\")",
      "100:     public static class HelloServiceImpl implements HelloService {",
      "102:         @Override",
      "103:         public Greeting hello(Person person) {",
      "104:             return new Greeting(\"Hello\", person.firstName + \" \" + person.surname);",
      "105:         }",
      "106:     }",
      "108:     @XmlAccessorType(XmlAccessType.FIELD)",
      "109:     @XmlType(name = \"person\")",
      "110:     public static class Person {",
      "112:         @XmlElement",
      "113:         private String firstName;",
      "115:         @XmlElement",
      "116:         private String surname;",
      "118:         public Person() {",
      "119:         }",
      "121:         public Person(String firstName, String surname) {",
      "122:             this.firstName = firstName;",
      "123:             this.surname = surname;",
      "124:         }",
      "126:         public String getFirstName() {",
      "127:             return firstName;",
      "128:         }",
      "130:         public void setFirstName(String name) {",
      "131:             this.firstName = name;",
      "132:         }",
      "134:         public String getSurname() {",
      "135:             return surname;",
      "136:         }",
      "138:         public void setSurname(String description) {",
      "139:             this.surname = description;",
      "140:         }",
      "142:         @Override",
      "143:         public boolean equals(Object obj) {",
      "144:             if (!(obj instanceof Person)) {",
      "145:                 return false;",
      "146:             }",
      "148:             Person other = (Person) obj;",
      "149:             return Objects.equals(other.firstName, this.firstName) && Objects.equals(other.surname, this.surname);",
      "150:         }",
      "152:         @Override",
      "153:         public int hashCode() {",
      "154:             return Objects.hash(this.firstName, this.surname);",
      "155:         }",
      "157:         @Override",
      "158:         public String toString() {",
      "159:             return firstName + \" \" + surname;",
      "160:         }",
      "162:     }",
      "164:     @XmlAccessorType(XmlAccessType.FIELD)",
      "165:     @XmlType(name = \"greeting\")",
      "166:     public static class Greeting {",
      "168:         @XmlElement",
      "169:         private String greetingPrefix;",
      "171:         @XmlElement",
      "172:         private String greetingSuffix;",
      "174:         public Greeting() {",
      "175:         }",
      "177:         public Greeting(String firstName, String surname) {",
      "178:             this.greetingPrefix = firstName;",
      "179:             this.greetingSuffix = surname;",
      "180:         }",
      "182:         public String getGreetingPrefix() {",
      "183:             return greetingPrefix;",
      "184:         }",
      "186:         public void setGreetingPrefix(String name) {",
      "187:             this.greetingPrefix = name;",
      "188:         }",
      "190:         public String getGreetingSuffix() {",
      "191:             return greetingSuffix;",
      "192:         }",
      "194:         public void setGreetingSuffix(String description) {",
      "195:             this.greetingSuffix = description;",
      "196:         }",
      "198:         @Override",
      "199:         public boolean equals(Object obj) {",
      "200:             if (!(obj instanceof Greeting)) {",
      "201:                 return false;",
      "202:             }",
      "204:             Greeting other = (Greeting) obj;",
      "205:             return Objects.equals(other.greetingPrefix, this.greetingPrefix)",
      "206:                     && Objects.equals(other.greetingSuffix, this.greetingSuffix);",
      "207:         }",
      "209:         @Override",
      "210:         public int hashCode() {",
      "211:             return Objects.hash(this.greetingPrefix, this.greetingSuffix);",
      "212:         }",
      "214:         @Override",
      "215:         public String toString() {",
      "216:             return greetingPrefix + \" \" + greetingSuffix;",
      "217:         }",
      "219:     }",
      "221:     static void addHeader(Message message, String headerName, String headerValue) {",
      "222:         Map<String, List<String>> headers = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);",
      "223:         if (headers == null) {",
      "224:             headers = new LinkedHashMap<>();",
      "225:             message.put(Message.PROTOCOL_HEADERS, headers);",
      "226:         }",
      "227:         headers.put(headerName, Collections.singletonList(headerValue));",
      "228:     }",
      "230:     @ApplicationScoped",
      "231:     @Named(\"ClientAddHeader\")",
      "232:     public static class ClientAddHeader extends AbstractPhaseInterceptor<Message> {",
      "234:         public ClientAddHeader() {",
      "235:             super(Phase.PREPARE_SEND);",
      "236:         }",
      "238:         @Override",
      "239:         public void handleMessage(Message message) throws Fault {",
      "240:             addHeader(message, \"Client-Secret-Header\", \"client secret\");",
      "241:         }",
      "243:     }",
      "245:     @ApplicationScoped",
      "246:     @Named(\"ServiceAddHeader\")",
      "247:     public static class ServiceAddHeader extends AbstractPhaseInterceptor<Message> {",
      "249:         public ServiceAddHeader() {",
      "250:             super(Phase.PREPARE_SEND);",
      "251:         }",
      "253:         @Override",
      "254:         public void handleMessage(Message message) throws Fault {",
      "255:             addHeader(message, \"Service-Secret-Header\", \"service secret\");",
      "256:         }",
      "258:     }",
      "259: }",
      "",
      "---------------"
    ],
    "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java": [
      "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package io.quarkiverse.cxf.deployment.logging;",
      "3: import static org.assertj.core.api.Assertions.assertThat;",
      "5: import java.util.Collections;",
      "6: import java.util.LinkedHashMap;",
      "7: import java.util.List;",
      "8: import java.util.Map;",
      "9: import java.util.Objects;",
      "10: import java.util.function.Predicate;",
      "11: import java.util.logging.LogRecord;",
      "12: import java.util.regex.Pattern;",
      "14: import jakarta.enterprise.context.ApplicationScoped;",
      "15: import jakarta.inject.Named;",
      "16: import jakarta.jws.WebMethod;",
      "17: import jakarta.jws.WebParam;",
      "18: import jakarta.jws.WebService;",
      "19: import jakarta.xml.bind.annotation.XmlAccessType;",
      "20: import jakarta.xml.bind.annotation.XmlAccessorType;",
      "21: import jakarta.xml.bind.annotation.XmlElement;",
      "22: import jakarta.xml.bind.annotation.XmlType;",
      "24: import org.apache.cxf.interceptor.Fault;",
      "25: import org.apache.cxf.message.Message;",
      "26: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
      "27: import org.apache.cxf.phase.Phase;",
      "28: import org.assertj.core.api.Assertions;",
      "29: import org.jboss.shrinkwrap.api.ShrinkWrap;",
      "30: import org.jboss.shrinkwrap.api.spec.JavaArchive;",
      "31: import org.junit.jupiter.api.Test;",
      "32: import org.junit.jupiter.api.extension.RegisterExtension;",
      "34: import io.quarkiverse.cxf.annotation.CXFClient;",
      "35: import io.quarkus.test.QuarkusUnitTest;",
      "37: public class PerClientOrServiceSensitiveTest {",
      "39:     @RegisterExtension",
      "40:     public static final QuarkusUnitTest test = new QuarkusUnitTest()",
      "41:             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)",
      "42:                     .addClasses(HelloService.class, HelloServiceImpl.class, Person.class, ServiceAddHeader.class,",
      "43:                             ClientAddHeader.class))",
      "46:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\",",
      "47:                     HelloServiceImpl.class.getName())",
      "48:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.enabled\", \"true\")",
      "49:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".out-interceptors\", \"#ServiceAddHeader\")",
      "50:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.sensitive-element-names\", \"firstName,greetingPrefix\")",
      "51:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.sensitive-protocol-header-names\",",
      "52:                     \"Service-Secret-Header\")",
      "54:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
      "55:             .overrideConfigKey(\"quarkus.cxf.client.hello.out-interceptors\", \"#ClientAddHeader\")",
      "56:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
      "57:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.enabled\", \"true\")",
      "58:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.sensitive-element-names\", \"surname,greetingSuffix\")",
      "59:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.sensitive-protocol-header-names\", \"Client-Secret-Header\")",
      "61:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"HelloService.RE\")) // REQ_[IN|OUT] or RESP_[IN|OUT]",
      "62:             .assertLogRecords(records ->",
      "64:             assertThat(records)",
      "65:                     .extracting(LogRecord::getMessage)",
      "66:                     .anyMatch(messageExists(\"REQ_OUT\", \"Client-Secret-Header=XXX\",",
      "67:                             \"<person><firstName>Joe</firstName><surname>XXX</surname></person>\"))",
      "68:                     .anyMatch(messageExists(\"REQ_IN\", \"Client-Secret-Header=client secret\",",
      "69:                             \"<person><firstName>XXX</firstName><surname>Doe</surname></person>\"))",
      "70:                     .anyMatch(messageExists(\"RESP_OUT\", \"Service-Secret-Header=XXX\",",
      "71:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>Joe Doe</greetingSuffix></return>\"))",
      "72:                     .anyMatch(messageExists(\"RESP_IN\", \"Service-Secret-Header=service secret\",",
      "73:                             \"<return><greetingPrefix>Hello</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
      "74:                     .hasSize(4));",
      "76:     ;",
      "78:     @CXFClient(\"hello\")",
      "79:     HelloService hello;",
      "81:     @Test",
      "82:     void sensitive() {",
      "83:         Assertions.assertThat(hello.hello(new Person(\"Joe\", \"Doe\"))).isEqualTo(new Greeting(\"Hello\", \"Joe Doe\"));",
      "84:     }",
      "86:     static Predicate<String> messageExists(String messageKind, String headersSubstring, String payloadSubstring) {",
      "87:         return msg -> Pattern.compile(",
      "88:                 \"^\" + messageKind + \".*Headers: \\\\{[^\\\\}]*\" + headersSubstring + \"[^\\\\}]*\\\\}.*Payload: .*\" + payloadSubstring",
      "89:                         + \".*$\",",
      "90:                 Pattern.DOTALL).matcher(msg).matches();",
      "91:     }",
      "93:     @WebService",
      "94:     public interface HelloService {",
      "96:         @WebMethod",
      "97:         Greeting hello(@WebParam(name = \"person\") Person person);",
      "99:     }",
      "101:     @WebService(serviceName = \"HelloService\")",
      "102:     public static class HelloServiceImpl implements HelloService {",
      "104:         @Override",
      "105:         public Greeting hello(Person person) {",
      "106:             return new Greeting(\"Hello\", person.firstName + \" \" + person.surname);",
      "107:         }",
      "108:     }",
      "110:     @XmlAccessorType(XmlAccessType.FIELD)",
      "111:     @XmlType(name = \"person\")",
      "112:     public static class Person {",
      "114:         @XmlElement",
      "115:         private String firstName;",
      "117:         @XmlElement",
      "118:         private String surname;",
      "120:         public Person() {",
      "121:         }",
      "123:         public Person(String firstName, String surname) {",
      "124:             this.firstName = firstName;",
      "125:             this.surname = surname;",
      "126:         }",
      "128:         public String getFirstName() {",
      "129:             return firstName;",
      "130:         }",
      "132:         public void setFirstName(String name) {",
      "133:             this.firstName = name;",
      "134:         }",
      "136:         public String getSurname() {",
      "137:             return surname;",
      "138:         }",
      "140:         public void setSurname(String description) {",
      "141:             this.surname = description;",
      "142:         }",
      "144:         @Override",
      "145:         public boolean equals(Object obj) {",
      "146:             if (!(obj instanceof Person)) {",
      "147:                 return false;",
      "148:             }",
      "150:             Person other = (Person) obj;",
      "151:             return Objects.equals(other.firstName, this.firstName) && Objects.equals(other.surname, this.surname);",
      "152:         }",
      "154:         @Override",
      "155:         public int hashCode() {",
      "156:             return Objects.hash(this.firstName, this.surname);",
      "157:         }",
      "159:         @Override",
      "160:         public String toString() {",
      "161:             return firstName + \" \" + surname;",
      "162:         }",
      "164:     }",
      "166:     @XmlAccessorType(XmlAccessType.FIELD)",
      "167:     @XmlType(name = \"greeting\")",
      "168:     public static class Greeting {",
      "170:         @XmlElement",
      "171:         private String greetingPrefix;",
      "173:         @XmlElement",
      "174:         private String greetingSuffix;",
      "176:         public Greeting() {",
      "177:         }",
      "179:         public Greeting(String firstName, String surname) {",
      "180:             this.greetingPrefix = firstName;",
      "181:             this.greetingSuffix = surname;",
      "182:         }",
      "184:         public String getGreetingPrefix() {",
      "185:             return greetingPrefix;",
      "186:         }",
      "188:         public void setGreetingPrefix(String name) {",
      "189:             this.greetingPrefix = name;",
      "190:         }",
      "192:         public String getGreetingSuffix() {",
      "193:             return greetingSuffix;",
      "194:         }",
      "196:         public void setGreetingSuffix(String description) {",
      "197:             this.greetingSuffix = description;",
      "198:         }",
      "200:         @Override",
      "201:         public boolean equals(Object obj) {",
      "202:             if (!(obj instanceof Greeting)) {",
      "203:                 return false;",
      "204:             }",
      "206:             Greeting other = (Greeting) obj;",
      "207:             return Objects.equals(other.greetingPrefix, this.greetingPrefix)",
      "208:                     && Objects.equals(other.greetingSuffix, this.greetingSuffix);",
      "209:         }",
      "211:         @Override",
      "212:         public int hashCode() {",
      "213:             return Objects.hash(this.greetingPrefix, this.greetingSuffix);",
      "214:         }",
      "216:         @Override",
      "217:         public String toString() {",
      "218:             return greetingPrefix + \" \" + greetingSuffix;",
      "219:         }",
      "221:     }",
      "223:     static void addHeader(Message message, String headerName, String headerValue) {",
      "224:         Map<String, List<String>> headers = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);",
      "225:         if (headers == null) {",
      "226:             headers = new LinkedHashMap<>();",
      "227:             message.put(Message.PROTOCOL_HEADERS, headers);",
      "228:         }",
      "229:         headers.put(headerName, Collections.singletonList(headerValue));",
      "230:     }",
      "232:     @ApplicationScoped",
      "233:     @Named(\"ClientAddHeader\")",
      "234:     public static class ClientAddHeader extends AbstractPhaseInterceptor<Message> {",
      "236:         public ClientAddHeader() {",
      "237:             super(Phase.PREPARE_SEND);",
      "238:         }",
      "240:         @Override",
      "241:         public void handleMessage(Message message) throws Fault {",
      "242:             addHeader(message, \"Client-Secret-Header\", \"client secret\");",
      "243:         }",
      "245:     }",
      "247:     @ApplicationScoped",
      "248:     @Named(\"ServiceAddHeader\")",
      "249:     public static class ServiceAddHeader extends AbstractPhaseInterceptor<Message> {",
      "251:         public ServiceAddHeader() {",
      "252:             super(Phase.PREPARE_SEND);",
      "253:         }",
      "255:         @Override",
      "256:         public void handleMessage(Message message) throws Fault {",
      "257:             addHeader(message, \"Service-Secret-Header\", \"service secret\");",
      "258:         }",
      "260:     }",
      "261: }",
      "",
      "---------------"
    ],
    "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java": [
      "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:                 feature::addOutBinaryContentMediaTypes);",
      "76:         addList(global.binaryContentMediaTypes(), clientOrServiceConfig.inBinaryContentMediaTypes(),",
      "77:                 feature::addBinaryContentMediaTypes);",
      "80:         return feature;",
      "81:     }",
      "",
      "[Removed Lines]",
      "78:         global.sensitiveElementNames().ifPresent(feature::addSensitiveElementNames);",
      "79:         global.sensitiveProtocolHeaderNames().ifPresent(feature::addSensitiveProtocolHeaderNames);",
      "",
      "[Added Lines]",
      "79:         clientOrServiceConfig.sensitiveElementNames()",
      "80:                 .or(global::sensitiveElementNames)",
      "81:                 .ifPresent(feature::addSensitiveElementNames);",
      "82:         clientOrServiceConfig.sensitiveProtocolHeaderNames()",
      "83:                 .or(global::sensitiveProtocolHeaderNames)",
      "84:                 .ifPresent(feature::addSensitiveProtocolHeaderNames);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "749dac0d15adcd5861ff434785a72b66f09bd251",
      "candidate_info": {
        "commit_hash": "749dac0d15adcd5861ff434785a72b66f09bd251",
        "repo": "quarkiverse/quarkus-cxf",
        "commit_url": "https://github.com/quarkiverse/quarkus-cxf/commit/749dac0d15adcd5861ff434785a72b66f09bd251",
        "files": [
          "docs/modules/ROOT/pages/includes/quarkus-cxf.adoc",
          "docs/modules/ROOT/pages/reference/extensions/quarkus-cxf.adoc",
          "docs/modules/ROOT/pages/user-guide/payload-logging.adoc",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java",
          "extensions/core/runtime/pom.xml",
          "extensions/core/runtime/src/main/doc/usage.adoc",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java"
        ],
        "message": "Revisit logging configuration fix #1162",
        "before_after_code_files": [
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java||extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ],
          "candidate": [
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ]
        }
      },
      "candidate_diff": {
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/EnabledPrettyLoggingFeatureTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.io.IOException;",
          "6: import java.util.logging.LogRecord;",
          "8: import org.junit.jupiter.api.Test;",
          "9: import org.junit.jupiter.api.extension.RegisterExtension;",
          "11: import io.quarkiverse.cxf.annotation.CXFClient;",
          "12: import io.quarkus.test.QuarkusUnitTest;",
          "18: public class EnabledPrettyLoggingFeatureTest {",
          "20:     @RegisterExtension",
          "21:     static final QuarkusUnitTest TEST = new QuarkusUnitTest()",
          "22:             .withApplicationRoot(",
          "23:                     root -> root.addClasses(HelloService.class, HelloServiceImpl.class))",
          "24:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\", HelloServiceImpl.class.getName())",
          "25:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.enabled\", \"true\")",
          "26:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.pretty\", \"false\")",
          "27:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "28:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "29:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.enabled\", \"pretty\")",
          "30:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"org.apache.cxf.services.HelloService.RE\")) // REQ_IN or RESP_OUT",
          "31:             .assertLogRecords(records -> assertThat(records)",
          "32:                     .extracting(LogRecord::getMessage)",
          "33:                     .anyMatch(msg -> msg.contains(",
          "35:                             \"Payload: <soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><soap:Body><ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\"><arg0>Dolly</arg0></ns2:hello></soap:Body></soap:Envelope>\"))",
          "36:                     .anyMatch(msg -> msg.contains(",
          "38:                             \"Payload: <soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><soap:Body><ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\"><return>Hello Dolly!</return></ns2:helloResponse></soap:Body></soap:Envelope>\"))",
          "39:                     .anyMatch(msg -> msg.contains(",
          "40:                             \"Payload: <soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "41:                                     + \"  <soap:Body>\\n\"",
          "42:                                     + \"    <ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "43:                                     + \"      <arg0>Dolly</arg0>\\n\"",
          "44:                                     + \"    </ns2:hello>\\n\"",
          "45:                                     + \"  </soap:Body>\\n\"",
          "46:                                     + \"</soap:Envelope>\"))",
          "47:                     .anyMatch(msg -> msg.contains(",
          "48:                             \"Payload: <soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "49:                                     + \"  <soap:Body>\\n\"",
          "50:                                     + \"    <ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "51:                                     + \"      <return>Hello Dolly!</return>\\n\"",
          "52:                                     + \"    </ns2:helloResponse>\\n\"",
          "53:                                     + \"  </soap:Body>\\n\"",
          "54:                                     + \"</soap:Envelope>\"))",
          "55:                     .hasSize(4));",
          "57:     @CXFClient(\"hello\")",
          "58:     HelloService helloService;",
          "60:     @Test",
          "61:     void payloadPrettyLogged() throws IOException {",
          "63:         helloService.hello(\"Dolly\");",
          "65:     }",
          "67: }",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalClientsLoggingConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.io.IOException;",
          "6: import java.util.logging.LogRecord;",
          "8: import org.junit.jupiter.api.Test;",
          "9: import org.junit.jupiter.api.extension.RegisterExtension;",
          "11: import io.quarkiverse.cxf.annotation.CXFClient;",
          "12: import io.quarkiverse.cxf.test.QuarkusCxfClientTestUtil;",
          "13: import io.quarkus.test.QuarkusUnitTest;",
          "18: public class GlobalClientsLoggingConfigurationTest {",
          "20:     @RegisterExtension",
          "21:     static final QuarkusUnitTest TEST = new QuarkusUnitTest()",
          "22:             .withApplicationRoot(",
          "23:                     root -> root.addClasses(HelloService.class, HelloServiceImpl.class))",
          "24:             .overrideConfigKey(\"quarkus.cxf.logging.enabled-for\", \"clients\")",
          "25:             .overrideConfigKey(\"quarkus.cxf.logging.pretty\", \"true\")",
          "26:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\", HelloServiceImpl.class.getName())",
          "27:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "28:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "30:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"org.apache.cxf.services.HelloService.RE\")) // REQ_IN or RESP_OUT",
          "31:             .assertLogRecords(records -> assertThat(records)",
          "32:                     .extracting(LogRecord::getMessage)",
          "33:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"REQ_OUT\",",
          "34:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "35:                                     + \"  <soap:Body>\\n\"",
          "36:                                     + \"    <ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "37:                                     + \"      <arg0>Dolly</arg0>\\n\"",
          "38:                                     + \"    </ns2:hello>\\n\"",
          "39:                                     + \"  </soap:Body>\\n\"",
          "40:                                     + \"</soap:Envelope>\\n\"))",
          "41:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"RESP_IN\",",
          "42:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "43:                                     + \"  <soap:Body>\\n\"",
          "44:                                     + \"    <ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "45:                                     + \"      <return>Hello Dolly!</return>\\n\"",
          "46:                                     + \"    </ns2:helloResponse>\\n\"",
          "47:                                     + \"  </soap:Body>\\n\"",
          "48:                                     + \"</soap:Envelope>\\n\"))",
          "49:                     .hasSize(2));",
          "51:     @CXFClient(\"hello\")",
          "52:     HelloService helloService;",
          "54:     @Test",
          "55:     void payloadPrettyLogged() throws IOException {",
          "57:         helloService.hello(\"Dolly\");",
          "59:     }",
          "61: }",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import io.quarkus.runtime.annotations.ConfigPhase;",
          "9: import io.quarkus.runtime.annotations.ConfigRoot;",
          "10: import io.smallrye.config.ConfigMapping;",
          "11: import io.smallrye.config.WithName;",
          "13: @ConfigMapping(prefix = \"quarkus.cxf\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import io.smallrye.config.WithDefaults;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     @WithName(\"endpoint\")",
          "21:     public Map<String, CxfEndpointConfig> endpoints();",
          "26:     @WithName(\"client\")",
          "27:     public Map<String, CxfClientConfig> clients();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     @WithDefaults",
          "29:     @WithDefaults",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "5: import java.util.Set;",
          "7: import io.quarkiverse.cxf.EnabledFor.EnabledForConverter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import java.util.OptionalInt;",
          "6: import java.util.OptionalLong;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: @ConfigGroup",
          "16: public interface LoggingConfig {",
          "85:     @ConfigGroup",
          "95:     }",
          "100:     @ConfigGroup",
          "105:         @WithDefault(\"none\")",
          "106:         @WithConverter(EnabledForConverter.class)",
          "107:         EnabledFor enabledFor();",
          "112:     }",
          "114: }",
          "",
          "[Removed Lines]",
          "21:     @WithDefault(\"49152\") // 48 kB",
          "22:     int limit();",
          "27:     @WithDefault(\"-1\")",
          "28:     long inMemThreshold();",
          "33:     @WithDefault(\"false\")",
          "34:     boolean pretty();",
          "39:     @WithDefault(\"false\")",
          "40:     boolean logBinary();",
          "45:     @WithDefault(\"true\")",
          "46:     boolean logMultipart();",
          "51:     @WithDefault(\"true\")",
          "52:     boolean verbose();",
          "58:     Optional<List<String>> inBinaryContentMediaTypes();",
          "64:     Optional<List<String>> outBinaryContentMediaTypes();",
          "70:     Optional<List<String>> binaryContentMediaTypes();",
          "75:     Optional<Set<String>> sensitiveElementNames();",
          "80:     Optional<Set<String>> sensitiveProtocolHeaderNames();",
          "86:     public interface PerClientOrServiceInternal {",
          "90:         Optional<Boolean> enabled();",
          "91:     }",
          "93:     @ConfigGroup",
          "94:     public interface PerClientOrServiceLoggingConfig extends PerClientOrServiceInternal, LoggingConfig {",
          "101:     public interface GlobalInternal {",
          "108:     }",
          "110:     @ConfigGroup",
          "111:     public interface GlobalLoggingConfig extends GlobalInternal, LoggingConfig {",
          "",
          "[Added Lines]",
          "21:     public interface PerClientOrServiceLoggingConfig {",
          "30:         Optional<PrettyBoolean> enabled();",
          "39:         Optional<Boolean> pretty();",
          "48:         OptionalInt limit();",
          "57:         OptionalLong inMemThreshold();",
          "66:         Optional<Boolean> logBinary();",
          "75:         Optional<Boolean> logMultipart();",
          "84:         Optional<Boolean> verbose();",
          "95:         Optional<List<String>> inBinaryContentMediaTypes();",
          "106:         Optional<List<String>> outBinaryContentMediaTypes();",
          "118:         Optional<List<String>> binaryContentMediaTypes();",
          "128:         Optional<Set<String>> sensitiveElementNames();",
          "138:         Optional<Set<String>> sensitiveProtocolHeaderNames();",
          "143:     public interface GlobalLoggingConfig {",
          "172:         @WithDefault(\"false\")",
          "173:         boolean pretty();",
          "187:         @WithDefault(\"49152\") // 48 kB",
          "188:         int limit();",
          "202:         @WithDefault(\"-1\")",
          "203:         long inMemThreshold();",
          "217:         @WithDefault(\"false\")",
          "218:         boolean logBinary();",
          "232:         @WithDefault(\"true\")",
          "233:         boolean logMultipart();",
          "247:         @WithDefault(\"true\")",
          "248:         boolean verbose();",
          "263:         Optional<List<String>> inBinaryContentMediaTypes();",
          "278:         Optional<List<String>> outBinaryContentMediaTypes();",
          "294:         Optional<List<String>> binaryContentMediaTypes();",
          "308:         Optional<Set<String>> sensitiveElementNames();",
          "322:         Optional<Set<String>> sensitiveProtocolHeaderNames();",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/PrettyBoolean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf;",
          "3: import org.eclipse.microprofile.config.spi.Converter;",
          "5: public enum PrettyBoolean {",
          "6:     TRUE,",
          "7:     FALSE,",
          "8:     PRETTY;",
          "10:     public boolean enabled() {",
          "11:         return this != FALSE;",
          "12:     }",
          "14:     public boolean pretty() {",
          "15:         return this == PRETTY;",
          "16:     }",
          "18:     public static class PrettyBooleanConverter implements Converter<PrettyBoolean> {",
          "20:         private static final long serialVersionUID = 1L;",
          "22:         @Override",
          "23:         public PrettyBoolean convert(String value) {",
          "24:             if (\"pretty\".equals(value)) {",
          "25:                 return PRETTY;",
          "26:             } else if (\"true\".equals(value)) {",
          "27:                 return TRUE;",
          "28:             } else if (\"false\".equals(value)) {",
          "29:                 return FALSE;",
          "30:             }",
          "31:             throw new IllegalArgumentException(",
          "32:                     \"Cannot map '\" + value + \"' to any \" + PrettyBoolean.class.getName()",
          "33:                             + \" value. Expected: true, false or pretty\");",
          "34:         }",
          "36:     }",
          "38: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import org.apache.cxf.feature.Feature;",
          "10: import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;",
          "11: import org.apache.cxf.jaxws.JaxWsServerFactoryBean;",
          "14: import io.quarkiverse.cxf.CXFClientInfo;",
          "15: import io.quarkiverse.cxf.CXFServletInfo;",
          "16: import io.quarkiverse.cxf.CxfConfig;",
          "18: import io.quarkiverse.cxf.LoggingConfig.GlobalLoggingConfig;",
          "19: import io.quarkiverse.cxf.LoggingConfig.PerClientOrServiceLoggingConfig;",
          "21: public class LoggingFactoryCustomizer {",
          "23:     private final CxfConfig config;",
          "26:     public LoggingFactoryCustomizer(CxfConfig config) {",
          "27:         super();",
          "28:         this.config = config;",
          "38:     }",
          "40:     public void customize(CXFClientInfo cxfClientInfo, JaxWsProxyFactoryBean factory) {",
          "41:         final String key = cxfClientInfo.getConfigKey();",
          "49:     }",
          "51:     public void customize(CXFServletInfo cxfServletInfo, JaxWsServerFactoryBean factory) {",
          "52:         final String key = cxfServletInfo.getRelativePath();",
          "60:     }",
          "67:     private void customize(",
          "68:             Kind kind,",
          "69:             final String key,",
          "71:             List<Feature> features) {",
          "105:             features.add(loggingFeature);",
          "106:         }",
          "107:     }",
          "123:         return feature;",
          "124:     }",
          "128:     }",
          "130: }",
          "",
          "[Removed Lines]",
          "12: import org.jboss.logging.Logger;",
          "17: import io.quarkiverse.cxf.LoggingConfig;",
          "22:     private static final Logger log = Logger.getLogger(LoggingFactoryCustomizer.class);",
          "24:     private final LoggingFeature globalLoggingFeature;",
          "30:         final GlobalLoggingConfig globalLoggingConfig = config.logging();",
          "31:         if (globalLoggingConfig.enabledFor().enabledForAny()) {",
          "32:             this.globalLoggingFeature = configureLoggingFeature(globalLoggingConfig);",
          "33:         } else {",
          "34:             log.debugf(\"Global logging feature is disabled\");",
          "35:             this.globalLoggingFeature = null;",
          "36:         }",
          "42:         if (key != null && Optional.ofNullable(config.clients()).map(m -> m.containsKey(key)).orElse(false)) {",
          "43:             final PerClientOrServiceLoggingConfig wssConfig = Optional.ofNullable(config.clients()).map(m1 -> m1.get(key))",
          "44:                     .orElse(null)",
          "45:                     .logging();",
          "46:             final List<Feature> features = factory.getFeatures();",
          "47:             customize(Kind.client, key, wssConfig, features);",
          "48:         }",
          "53:         if (key != null && Optional.ofNullable(config.endpoints()).map(m -> m.containsKey(key)).orElse(false)) {",
          "54:             final PerClientOrServiceLoggingConfig wssConfig = Optional.ofNullable(config.endpoints()).map(m1 -> m1.get(key))",
          "55:                     .orElse(null)",
          "56:                     .logging();",
          "57:             final List<Feature> features = factory.getFeatures();",
          "58:             customize(Kind.endpoint, key, wssConfig, features);",
          "59:         }",
          "62:     private enum Kind {",
          "63:         client,",
          "64:         endpoint",
          "65:     };",
          "70:             PerClientOrServiceLoggingConfig wssConfig,",
          "73:         final LoggingFeature loggingFeature;",
          "75:         final Optional<Boolean> enabled = wssConfig.enabled();",
          "76:         if (enabled.isPresent()) {",
          "77:             loggingFeature = enabled.get().booleanValue()",
          "78:                     ? configureLoggingFeature(wssConfig)",
          "83:                     : null;",
          "84:         } else if (config.logging().enabledFor().enabledForClients()) {",
          "85:             loggingFeature = this.globalLoggingFeature;",
          "86:             if (loggingFeature != null) {",
          "87:                 log.debugf(\"Logging feature not enabled explicitly for %s \\\"%s\\\", using the global logging feature\", kind, key);",
          "88:             }",
          "89:         } else {",
          "90:             loggingFeature = null;",
          "91:             log.debugf(",
          "92:                     \"Logging feature not enabled explicitly for %s \\\"%s\\\", the global logging feature is not enabled for \"",
          "93:                             + kind.name() + \"s either\",",
          "94:                     kind, key);",
          "95:         }",
          "97:         if (loggingFeature != null) {",
          "98:             if (features.stream().anyMatch(i -> i instanceof LoggingFeature)) {",
          "99:                 throw new IllegalStateException(LoggingFeature.class.getSimpleName() + \" already configured for \" + kind + \" \\\"\"",
          "100:                         + key + \"\\\". Either remove all quarkus.cxf.\" + kind + \".\\\"\" + key + \"\\\".logging.* options or the \"",
          "101:                         + LoggingFeature.class.getSimpleName() + \" you added programmatically or via quarkus.cxf.\" + kind",
          "102:                         + \".\\\"\"",
          "103:                         + key + \"\\\".features\");",
          "104:             }",
          "109:     private LoggingFeature configureLoggingFeature(LoggingConfig config) {",
          "110:         LoggingFeature feature = new LoggingFeature();",
          "111:         feature.setLimit(config.limit());",
          "112:         feature.setInMemThreshold(config.inMemThreshold());",
          "113:         feature.setPrettyLogging(config.pretty());",
          "114:         feature.setLogBinary(config.logBinary());",
          "115:         feature.setLogMultipart(config.logMultipart());",
          "116:         feature.setVerbose(config.verbose());",
          "118:         addList(config.inBinaryContentMediaTypes(), feature::addInBinaryContentMediaTypes);",
          "119:         addList(config.outBinaryContentMediaTypes(), feature::addOutBinaryContentMediaTypes);",
          "120:         addList(config.binaryContentMediaTypes(), feature::addBinaryContentMediaTypes);",
          "121:         config.sensitiveElementNames().ifPresent(feature::addSensitiveElementNames);",
          "122:         config.sensitiveProtocolHeaderNames().ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "126:     private void addList(Optional<List<String>> source, Consumer<String> consumer) {",
          "127:         source.ifPresent(list -> consumer.accept(list.stream().collect(Collectors.joining(\";\"))));",
          "",
          "[Added Lines]",
          "16: import io.quarkiverse.cxf.EnabledFor;",
          "19: import io.quarkiverse.cxf.PrettyBoolean;",
          "31:         final PerClientOrServiceLoggingConfig clientOrServiceConfig = config.clients().get(key).logging();",
          "32:         customize(Kind.client, key, clientOrServiceConfig, factory.getFeatures());",
          "37:         final PerClientOrServiceLoggingConfig clientOrServiceConfig = config.endpoints().get(key).logging();",
          "38:         customize(Kind.endpoint, key, clientOrServiceConfig, factory.getFeatures());",
          "44:             PerClientOrServiceLoggingConfig clientOrServiceConfig,",
          "47:         if (isEnabledFor(config.logging().enabledFor(), kind, clientOrServiceConfig.enabled())) {",
          "48:             final LoggingFeature loggingFeature = configureLoggingFeature(config.logging(), clientOrServiceConfig);",
          "53:     enum Kind {",
          "54:         client,",
          "55:         endpoint",
          "56:     };",
          "58:     private LoggingFeature configureLoggingFeature(GlobalLoggingConfig global,",
          "59:             PerClientOrServiceLoggingConfig clientOrServiceConfig) {",
          "60:         LoggingFeature feature = new LoggingFeature();",
          "61:         feature.setLimit(clientOrServiceConfig.limit().orElse(global.limit()));",
          "62:         feature.setInMemThreshold(clientOrServiceConfig.inMemThreshold().orElse(global.inMemThreshold()));",
          "63:         feature.setPrettyLogging(",
          "64:                 clientOrServiceConfig.pretty()",
          "65:                         .orElse(",
          "66:                                 clientOrServiceConfig.enabled().map(PrettyBoolean::pretty)",
          "67:                                         .orElse(global.pretty())));",
          "68:         feature.setLogBinary(clientOrServiceConfig.logBinary().orElse(global.logBinary()));",
          "69:         feature.setLogMultipart(clientOrServiceConfig.logMultipart().orElse(global.logMultipart()));",
          "70:         feature.setVerbose(clientOrServiceConfig.verbose().orElse(global.verbose()));",
          "72:         addList(global.inBinaryContentMediaTypes(), clientOrServiceConfig.inBinaryContentMediaTypes(),",
          "73:                 feature::addInBinaryContentMediaTypes);",
          "74:         addList(global.outBinaryContentMediaTypes(), clientOrServiceConfig.outBinaryContentMediaTypes(),",
          "75:                 feature::addOutBinaryContentMediaTypes);",
          "76:         addList(global.binaryContentMediaTypes(), clientOrServiceConfig.inBinaryContentMediaTypes(),",
          "77:                 feature::addBinaryContentMediaTypes);",
          "78:         global.sensitiveElementNames().ifPresent(feature::addSensitiveElementNames);",
          "79:         global.sensitiveProtocolHeaderNames().ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "83:     private void addList(Optional<List<String>> global, Optional<List<String>> perClientOrService, Consumer<String> consumer) {",
          "84:         if (perClientOrService.isPresent()) {",
          "85:             consumer.accept(perClientOrService.get().stream().collect(Collectors.joining(\";\")));",
          "86:         } else {",
          "87:             global.ifPresent(list -> consumer.accept(list.stream().collect(Collectors.joining(\";\"))));",
          "88:         }",
          "89:     }",
          "91:     static boolean isEnabledFor(EnabledFor global, Kind kind, Optional<PrettyBoolean> clientOrEndpoint) {",
          "92:         if (clientOrEndpoint.isPresent()) {",
          "93:             return clientOrEndpoint.get().enabled();",
          "94:         } else {",
          "95:             switch (kind) {",
          "96:                 case client: {",
          "97:                     return global.enabledForClients();",
          "98:                 }",
          "99:                 case endpoint: {",
          "100:                     return global.enabledForServices();",
          "101:                 }",
          "102:                 default:",
          "103:                     throw new IllegalArgumentException(\"Unexpected value of \" + Kind.class.getName() + \": \" + kind);",
          "104:             }",
          "105:         }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java||extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java": [
          "File: extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java -> extensions/core/runtime/src/test/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.logging;",
          "3: import java.util.Optional;",
          "5: import org.assertj.core.api.Assertions;",
          "6: import org.junit.jupiter.api.Test;",
          "8: import io.quarkiverse.cxf.EnabledFor;",
          "9: import io.quarkiverse.cxf.PrettyBoolean;",
          "10: import io.quarkiverse.cxf.logging.LoggingFactoryCustomizer.Kind;",
          "12: public class LoggingFactoryCustomizerTest {",
          "14:     @Test",
          "15:     void isEnabledFor() {",
          "16:         final Optional<PrettyBoolean> clientEmpty = Optional.empty();",
          "19:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "20:                 EnabledFor.none,",
          "21:                 Kind.client,",
          "22:                 clientEmpty))",
          "23:                 .isEqualTo(false);",
          "25:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "26:                 EnabledFor.none,",
          "27:                 Kind.client,",
          "28:                 Optional.of(PrettyBoolean.TRUE)))",
          "29:                 .isEqualTo(true);",
          "31:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "32:                 EnabledFor.none,",
          "33:                 Kind.client,",
          "34:                 Optional.of(PrettyBoolean.PRETTY)))",
          "35:                 .isEqualTo(true);",
          "37:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "38:                 EnabledFor.none,",
          "39:                 Kind.client,",
          "40:                 Optional.of(PrettyBoolean.FALSE)))",
          "41:                 .isEqualTo(false);",
          "43:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "44:                 EnabledFor.none,",
          "45:                 Kind.endpoint,",
          "46:                 clientEmpty))",
          "47:                 .isEqualTo(false);",
          "49:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "50:                 EnabledFor.none,",
          "51:                 Kind.endpoint,",
          "52:                 Optional.of(PrettyBoolean.TRUE)))",
          "53:                 .isEqualTo(true);",
          "55:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "56:                 EnabledFor.none,",
          "57:                 Kind.endpoint,",
          "58:                 Optional.of(PrettyBoolean.PRETTY)))",
          "59:                 .isEqualTo(true);",
          "61:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "62:                 EnabledFor.none,",
          "63:                 Kind.endpoint,",
          "64:                 Optional.of(PrettyBoolean.FALSE)))",
          "65:                 .isEqualTo(false);",
          "68:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "69:                 EnabledFor.clients,",
          "70:                 Kind.client,",
          "71:                 clientEmpty))",
          "72:                 .isEqualTo(true);",
          "74:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "75:                 EnabledFor.clients,",
          "76:                 Kind.client,",
          "77:                 Optional.of(PrettyBoolean.TRUE)))",
          "78:                 .isEqualTo(true);",
          "80:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "81:                 EnabledFor.clients,",
          "82:                 Kind.client,",
          "83:                 Optional.of(PrettyBoolean.PRETTY)))",
          "84:                 .isEqualTo(true);",
          "86:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "87:                 EnabledFor.clients,",
          "88:                 Kind.client,",
          "89:                 Optional.of(PrettyBoolean.FALSE)))",
          "90:                 .isEqualTo(false);",
          "92:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "93:                 EnabledFor.clients,",
          "94:                 Kind.endpoint,",
          "95:                 clientEmpty))",
          "96:                 .isEqualTo(false);",
          "98:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "99:                 EnabledFor.clients,",
          "100:                 Kind.endpoint,",
          "101:                 Optional.of(PrettyBoolean.TRUE)))",
          "102:                 .isEqualTo(true);",
          "104:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "105:                 EnabledFor.clients,",
          "106:                 Kind.endpoint,",
          "107:                 Optional.of(PrettyBoolean.PRETTY)))",
          "108:                 .isEqualTo(true);",
          "110:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "111:                 EnabledFor.clients,",
          "112:                 Kind.endpoint,",
          "113:                 Optional.of(PrettyBoolean.FALSE)))",
          "114:                 .isEqualTo(false);",
          "117:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "118:                 EnabledFor.services,",
          "119:                 Kind.client,",
          "120:                 clientEmpty))",
          "121:                 .isEqualTo(false);",
          "123:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "124:                 EnabledFor.services,",
          "125:                 Kind.client,",
          "126:                 Optional.of(PrettyBoolean.TRUE)))",
          "127:                 .isEqualTo(true);",
          "129:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "130:                 EnabledFor.services,",
          "131:                 Kind.client,",
          "132:                 Optional.of(PrettyBoolean.PRETTY)))",
          "133:                 .isEqualTo(true);",
          "135:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "136:                 EnabledFor.services,",
          "137:                 Kind.client,",
          "138:                 Optional.of(PrettyBoolean.FALSE)))",
          "139:                 .isEqualTo(false);",
          "141:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "142:                 EnabledFor.services,",
          "143:                 Kind.endpoint,",
          "144:                 clientEmpty))",
          "145:                 .isEqualTo(true);",
          "147:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "148:                 EnabledFor.services,",
          "149:                 Kind.endpoint,",
          "150:                 Optional.of(PrettyBoolean.TRUE)))",
          "151:                 .isEqualTo(true);",
          "153:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "154:                 EnabledFor.services,",
          "155:                 Kind.endpoint,",
          "156:                 Optional.of(PrettyBoolean.PRETTY)))",
          "157:                 .isEqualTo(true);",
          "159:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "160:                 EnabledFor.services,",
          "161:                 Kind.endpoint,",
          "162:                 Optional.of(PrettyBoolean.FALSE)))",
          "163:                 .isEqualTo(false);",
          "166:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "167:                 EnabledFor.both,",
          "168:                 Kind.client,",
          "169:                 clientEmpty))",
          "170:                 .isEqualTo(true);",
          "172:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "173:                 EnabledFor.both,",
          "174:                 Kind.client,",
          "175:                 Optional.of(PrettyBoolean.TRUE)))",
          "176:                 .isEqualTo(true);",
          "178:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "179:                 EnabledFor.both,",
          "180:                 Kind.client,",
          "181:                 Optional.of(PrettyBoolean.PRETTY)))",
          "182:                 .isEqualTo(true);",
          "184:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "185:                 EnabledFor.both,",
          "186:                 Kind.client,",
          "187:                 Optional.of(PrettyBoolean.FALSE)))",
          "188:                 .isEqualTo(false);",
          "190:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "191:                 EnabledFor.both,",
          "192:                 Kind.endpoint,",
          "193:                 clientEmpty))",
          "194:                 .isEqualTo(true);",
          "196:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "197:                 EnabledFor.both,",
          "198:                 Kind.endpoint,",
          "199:                 Optional.of(PrettyBoolean.TRUE)))",
          "200:                 .isEqualTo(true);",
          "202:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "203:                 EnabledFor.both,",
          "204:                 Kind.endpoint,",
          "205:                 Optional.of(PrettyBoolean.PRETTY)))",
          "206:                 .isEqualTo(true);",
          "208:         Assertions.assertThat(LoggingFactoryCustomizer.isEnabledFor(",
          "209:                 EnabledFor.both,",
          "210:                 Kind.endpoint,",
          "211:                 Optional.of(PrettyBoolean.FALSE)))",
          "212:                 .isEqualTo(false);",
          "213:     }",
          "214: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "530e5a442f317d813ee78eb1de6266023cb01b8a",
      "candidate_info": {
        "commit_hash": "530e5a442f317d813ee78eb1de6266023cb01b8a",
        "repo": "quarkiverse/quarkus-cxf",
        "commit_url": "https://github.com/quarkiverse/quarkus-cxf/commit/530e5a442f317d813ee78eb1de6266023cb01b8a",
        "files": [
          "docs/modules/ROOT/pages/includes/quarkus-cxf-rt-features-logging.adoc",
          "docs/modules/ROOT/pages/includes/quarkus-cxf.adoc",
          "docs/modules/ROOT/pages/reference/extensions/quarkus-cxf-rt-features-logging.adoc",
          "docs/modules/ROOT/pages/user-guide/payload-logging.adoc",
          "extensions/core/deployment/src/main/java/io/quarkiverse/cxf/deployment/logging/QuarkusCxfLoggingProcessor.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/ConfiguredLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/DefaultLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloService.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloServiceImpl.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureProducer.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/UnnamedLoggingFeatureTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java",
          "extensions/features-logging/runtime/src/main/doc/intro.adoc",
          "extensions/features-logging/runtime/src/main/resources/META-INF/quarkus-extension.yaml",
          "test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java"
        ],
        "message": "Global logging feature fix #270",
        "before_after_code_files": [
          "extensions/core/deployment/src/main/java/io/quarkiverse/cxf/features/logging/deployment/QuarkusCxfLoggingProcessor.java||extensions/core/deployment/src/main/java/io/quarkiverse/cxf/deployment/logging/QuarkusCxfLoggingProcessor.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/ConfiguredLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/ConfiguredLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/DefaultLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/DefaultLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/HelloService.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloService.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/HelloServiceImpl.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloServiceImpl.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/NamedLoggingFeatureProducer.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureProducer.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/NamedLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/UnnamedLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/UnnamedLoggingFeatureTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java",
          "test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java||test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ],
          "candidate": [
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ]
        }
      },
      "candidate_diff": {
        "extensions/core/deployment/src/main/java/io/quarkiverse/cxf/features/logging/deployment/QuarkusCxfLoggingProcessor.java||extensions/core/deployment/src/main/java/io/quarkiverse/cxf/deployment/logging/QuarkusCxfLoggingProcessor.java": [
          "File: extensions/core/deployment/src/main/java/io/quarkiverse/cxf/features/logging/deployment/QuarkusCxfLoggingProcessor.java -> extensions/core/deployment/src/main/java/io/quarkiverse/cxf/deployment/logging/QuarkusCxfLoggingProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.stream.Stream;",
          "5: import org.apache.cxf.ext.logging.LoggingFeature;",
          "9: import io.quarkus.arc.deployment.UnremovableBeanBuildItem;",
          "10: import io.quarkus.deployment.annotations.BuildProducer;",
          "11: import io.quarkus.deployment.annotations.BuildStep;",
          "13: import io.quarkus.deployment.builditem.IndexDependencyBuildItem;",
          "15: public class QuarkusCxfLoggingProcessor {",
          "22:     @BuildStep",
          "23:     void indexDependencies(BuildProducer<IndexDependencyBuildItem> indexDependencies) {",
          "24:         Stream.of(",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "7: import io.quarkiverse.cxf.features.logging.LoggingFactoryCustomizer;",
          "8: import io.quarkus.arc.deployment.AdditionalBeanBuildItem;",
          "12: import io.quarkus.deployment.builditem.FeatureBuildItem;",
          "17:     @BuildStep",
          "18:     FeatureBuildItem feature() {",
          "19:         return new FeatureBuildItem(\"cxf-rt-features-logging\");",
          "20:     }",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         unremovable.produce(UnremovableBeanBuildItem.beanTypes(LoggingFeature.class));",
          "35:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "37:     @BuildStep",
          "38:     void additionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {",
          "39:         additionalBeans.produce(new AdditionalBeanBuildItem(LoggingFactoryCustomizer.class));",
          "40:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/ConfiguredLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/ConfiguredLoggingFeatureTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/ConfiguredLoggingFeatureTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/ConfiguredLoggingFeatureTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/DefaultLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/DefaultLoggingFeatureTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/DefaultLoggingFeatureTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/DefaultLoggingFeatureTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalLoggingConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.io.IOException;",
          "6: import java.util.logging.LogRecord;",
          "7: import java.util.regex.Pattern;",
          "9: import org.junit.jupiter.api.Test;",
          "10: import org.junit.jupiter.api.extension.RegisterExtension;",
          "12: import io.quarkiverse.cxf.annotation.CXFClient;",
          "13: import io.quarkiverse.cxf.test.QuarkusCxfClientTestUtil;",
          "14: import io.quarkus.test.QuarkusUnitTest;",
          "19: public class GlobalLoggingConfigurationTest {",
          "21:     @RegisterExtension",
          "22:     static final QuarkusUnitTest TEST = new QuarkusUnitTest()",
          "23:             .withApplicationRoot(",
          "24:                     root -> root.addClasses(HelloService.class, HelloServiceImpl.class))",
          "25:             .overrideConfigKey(\"quarkus.cxf.logging.enabled-for\", \"clients-and-services\")",
          "26:             .overrideConfigKey(\"quarkus.cxf.logging.pretty\", \"true\")",
          "27:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\", HelloServiceImpl.class.getName())",
          "28:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "29:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "31:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/helloUgly\\\".implementor\", HelloServiceImpl.class.getName())",
          "32:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/helloUgly\\\".logging.enabled\", \"true\")",
          "33:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/helloUgly\\\".logging.pretty\", \"false\")",
          "34:             .overrideConfigKey(\"quarkus.cxf.client.helloUgly.service-interface\", HelloService.class.getName())",
          "35:             .overrideConfigKey(\"quarkus.cxf.client.helloUgly.client-endpoint-url\", \"http://localhost:8081/services/helloUgly\")",
          "36:             .overrideConfigKey(\"quarkus.cxf.client.helloUgly.logging.enabled\", \"true\")",
          "37:             .overrideConfigKey(\"quarkus.cxf.client.helloUgly.logging.pretty\", \"false\")",
          "39:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/helloSilent\\\".implementor\", HelloServiceImpl.class.getName())",
          "40:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/helloSilent\\\".logging.enabled\", \"false\")",
          "41:             .overrideConfigKey(\"quarkus.cxf.client.helloSilent.service-interface\", HelloService.class.getName())",
          "42:             .overrideConfigKey(\"quarkus.cxf.client.helloSilent.client-endpoint-url\",",
          "43:                     \"http://localhost:8081/services/helloSilent\")",
          "44:             .overrideConfigKey(\"quarkus.cxf.client.helloSilent.logging.enabled\", \"false\")",
          "46:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"org.apache.cxf.services.HelloService.RE\")) // REQ_IN or RESP_OUT",
          "47:             .assertLogRecords(records -> assertThat(records)",
          "48:                     .extracting(LogRecord::getMessage)",
          "49:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"REQ_OUT\",",
          "50:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "51:                                     + \"  <soap:Body>\\n\"",
          "52:                                     + \"    <ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "53:                                     + \"      <arg0>Dolly</arg0>\\n\"",
          "54:                                     + \"    </ns2:hello>\\n\"",
          "55:                                     + \"  </soap:Body>\\n\"",
          "56:                                     + \"</soap:Envelope>\\n\"))",
          "57:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"REQ_IN\",",
          "58:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "59:                                     + \"  <soap:Body>\\n\"",
          "60:                                     + \"    <ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "61:                                     + \"      <arg0>Dolly</arg0>\\n\"",
          "62:                                     + \"    </ns2:hello>\\n\"",
          "63:                                     + \"  </soap:Body>\\n\"",
          "64:                                     + \"</soap:Envelope>\\n\"))",
          "65:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"RESP_OUT\",",
          "66:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "67:                                     + \"  <soap:Body>\\n\"",
          "68:                                     + \"    <ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "69:                                     + \"      <return>Hello Dolly!</return>\\n\"",
          "70:                                     + \"    </ns2:helloResponse>\\n\"",
          "71:                                     + \"  </soap:Body>\\n\"",
          "72:                                     + \"</soap:Envelope>\\n\"))",
          "73:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"RESP_IN\",",
          "74:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"",
          "75:                                     + \"  <soap:Body>\\n\"",
          "76:                                     + \"    <ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\\n\"",
          "77:                                     + \"      <return>Hello Dolly!</return>\\n\"",
          "78:                                     + \"    </ns2:helloResponse>\\n\"",
          "79:                                     + \"  </soap:Body>\\n\"",
          "80:                                     + \"</soap:Envelope>\\n\"))",
          "82:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"REQ_OUT\",",
          "83:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\"",
          "84:                                     + \"<soap:Body>\"",
          "85:                                     + \"<ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\"",
          "86:                                     + \"<arg0>Joe</arg0>\"",
          "87:                                     + \"</ns2:hello>\"",
          "88:                                     + \"</soap:Body>\"",
          "89:                                     + \"</soap:Envelope>\"))",
          "90:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"REQ_IN\",",
          "91:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\"",
          "92:                                     + \"<soap:Body>\"",
          "93:                                     + \"<ns2:hello xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\"",
          "94:                                     + \"<arg0>Joe</arg0>\"",
          "95:                                     + \"</ns2:hello>\"",
          "96:                                     + \"</soap:Body>\"",
          "97:                                     + \"</soap:Envelope>\"))",
          "98:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"RESP_OUT\",",
          "99:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\"",
          "100:                                     + \"<soap:Body>\"",
          "101:                                     + \"<ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\"",
          "102:                                     + \"<return>Hello Joe!</return>\"",
          "103:                                     + \"</ns2:helloResponse>\"",
          "104:                                     + \"</soap:Body>\"",
          "105:                                     + \"</soap:Envelope>\"))",
          "106:                     .anyMatch(QuarkusCxfClientTestUtil.messageExists(\"RESP_IN\",",
          "107:                             \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\"",
          "108:                                     + \"<soap:Body>\"",
          "109:                                     + \"<ns2:helloResponse xmlns:ns2=\\\"http://deployment.logging.features.cxf.quarkiverse.io/\\\">\"",
          "110:                                     + \"<return>Hello Joe!</return>\"",
          "111:                                     + \"</ns2:helloResponse>\"",
          "112:                                     + \"</soap:Body>\"",
          "113:                                     + \"</soap:Envelope>\"))",
          "115:                     .noneMatch(msg -> Pattern.compile(\"^.*Darkness.*$\", Pattern.DOTALL).matcher(msg).matches())",
          "116:                     .hasSize(8));",
          "118:     @CXFClient(\"hello\")",
          "119:     HelloService helloService;",
          "121:     @CXFClient(\"helloUgly\")",
          "122:     HelloService helloUglyService;",
          "124:     @CXFClient(\"helloSilent\")",
          "125:     HelloService helloSilentService;",
          "127:     @Test",
          "128:     void payloadPrettyLogged() throws IOException {",
          "130:         helloService.hello(\"Dolly\");",
          "131:         helloUglyService.hello(\"Joe\");",
          "132:         helloSilentService.hello(\"Darkness\");",
          "134:     }",
          "136: }",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/HelloService.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloService.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/HelloService.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import jakarta.jws.WebMethod;",
          "4: import jakarta.jws.WebService;",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: public interface HelloService {",
          "12:     @WebMethod",
          "",
          "[Removed Lines]",
          "9: @WebService",
          "",
          "[Added Lines]",
          "9: @WebService(targetNamespace = \"http://deployment.logging.features.cxf.quarkiverse.io/\")",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/HelloServiceImpl.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloServiceImpl.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/HelloServiceImpl.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/HelloServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import jakarta.jws.WebMethod;",
          "4: import jakarta.jws.WebService;",
          "12: @WebService(serviceName = \"HelloService\")",
          "14: public class HelloServiceImpl implements HelloService {",
          "16:     @WebMethod",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "6: import org.apache.cxf.ext.logging.LoggingFeature;",
          "7: import org.apache.cxf.feature.Features;",
          "13: @Features(classes = { LoggingFeature.class })",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/NamedLoggingFeatureProducer.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureProducer.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/NamedLoggingFeatureProducer.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureProducer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import jakarta.enterprise.context.ApplicationScoped;",
          "4: import jakarta.enterprise.inject.Produces;",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/NamedLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/NamedLoggingFeatureTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/NamedLoggingFeatureTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/UnnamedLoggingFeatureTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/UnnamedLoggingFeatureTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/features/logging/deployment/UnnamedLoggingFeatureTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/UnnamedLoggingFeatureTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Removed Lines]",
          "1: package io.quarkiverse.cxf.features.logging.deployment;",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import org.apache.cxf.transports.http.configuration.ConnectionType;",
          "8: import org.apache.cxf.transports.http.configuration.ProxyServerType;",
          "10: import io.quarkus.runtime.annotations.ConfigDocEnumValue;",
          "11: import io.quarkus.runtime.annotations.ConfigGroup;",
          "12: import io.smallrye.config.WithConverter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import io.quarkiverse.cxf.LoggingConfig.PerClientOrServiceLoggingConfig;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     public Optional<String> password();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     PerClientOrServiceLoggingConfig logging();",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import javax.net.ssl.TrustManagerFactory;",
          "20: import javax.xml.namespace.QName;",
          "22: import jakarta.enterprise.inject.Any;",
          "23: import jakarta.enterprise.inject.Instance;",
          "24: import jakarta.enterprise.inject.spi.InjectionPoint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import jakarta.annotation.PostConstruct;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import io.quarkiverse.cxf.CxfClientConfig.HTTPConduitImpl;",
          "39: import io.quarkiverse.cxf.CxfClientConfig.WellKnownHostnameVerifier;",
          "40: import io.quarkiverse.cxf.annotation.CXFClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import io.quarkiverse.cxf.logging.LoggingFactoryCustomizer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     @Any",
          "66:     Instance<ClientFactoryCustomizer> customizers;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     private LoggingFactoryCustomizer loggingFactoryCustomizer;",
          "72:     @PostConstruct",
          "73:     void init() {",
          "74:         this.loggingFactoryCustomizer = new LoggingFactoryCustomizer(config);",
          "75:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:                             + httpConduitImpl);",
          "185:             }",
          "186:         }",
          "188:         customizers.forEach(customizer -> customizer.customize(cxfClientInfo, factory));",
          "190:         LOGGER.debug(\"cxf client loaded for \" + sei);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:         loggingFactoryCustomizer.customize(cxfClientInfo, factory);",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.Map;",
          "4: import java.util.Optional;",
          "6: import io.quarkus.runtime.annotations.ConfigDocIgnore;",
          "7: import io.quarkus.runtime.annotations.ConfigPhase;",
          "8: import io.quarkus.runtime.annotations.ConfigRoot;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import io.quarkiverse.cxf.LoggingConfig.GlobalLoggingConfig;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     public InternalConfig internal();",
          "34:     default boolean isClientPresent(String key) {",
          "35:         return Optional.ofNullable(clients()).map(m -> m.containsKey(key)).orElse(false);",
          "36:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     GlobalLoggingConfig logging();",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/CxfEndpointConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "6: import io.quarkus.runtime.annotations.ConfigGroup;",
          "7: import io.smallrye.config.WithName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import io.quarkiverse.cxf.LoggingConfig.PerClientOrServiceLoggingConfig;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     public Optional<String> publishedEndpointUrl();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     PerClientOrServiceLoggingConfig logging();",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/EnabledFor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf;",
          "3: public enum EnabledFor {",
          "4:     clients,",
          "5:     services,",
          "6:     clientsAndServices,",
          "7:     none;",
          "9:     public boolean enabledForAny() {",
          "10:         return this != none;",
          "11:     }",
          "13:     public boolean enabledForServices() {",
          "14:         return this == services || this == clientsAndServices;",
          "15:     }",
          "17:     public boolean enabledForClients() {",
          "18:         return this == clients || this == clientsAndServices;",
          "19:     }",
          "20: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/LoggingConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf;",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "5: import java.util.Set;",
          "7: import io.quarkus.runtime.annotations.ConfigGroup;",
          "8: import io.smallrye.config.WithDefault;",
          "13: @ConfigGroup",
          "14: public interface LoggingConfig {",
          "19:     @WithDefault(\"49152\") // 48 kB",
          "20:     int limit();",
          "25:     @WithDefault(\"-1\")",
          "26:     long inMemThreshold();",
          "31:     @WithDefault(\"false\")",
          "32:     boolean pretty();",
          "37:     @WithDefault(\"false\")",
          "38:     boolean logBinary();",
          "43:     @WithDefault(\"true\")",
          "44:     boolean logMultipart();",
          "49:     @WithDefault(\"true\")",
          "50:     boolean verbose();",
          "56:     Optional<List<String>> inBinaryContentMediaTypes();",
          "62:     Optional<List<String>> outBinaryContentMediaTypes();",
          "68:     Optional<List<String>> binaryContentMediaTypes();",
          "73:     Optional<Set<String>> sensitiveElementNames();",
          "78:     Optional<Set<String>> sensitiveProtocolHeaderNames();",
          "83:     @ConfigGroup",
          "84:     public interface PerClientOrServiceInternal {",
          "88:         Optional<Boolean> enabled();",
          "89:     }",
          "91:     @ConfigGroup",
          "92:     public interface PerClientOrServiceLoggingConfig extends PerClientOrServiceInternal, LoggingConfig {",
          "93:     }",
          "98:     @ConfigGroup",
          "99:     public interface GlobalInternal {",
          "103:         @WithDefault(\"none\")",
          "104:         EnabledFor enabledFor();",
          "105:     }",
          "107:     @ConfigGroup",
          "108:     public interface GlobalLoggingConfig extends GlobalInternal, LoggingConfig {",
          "109:     }",
          "111: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/CxfLoggingConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/features/logging/LoggingFactoryCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/CxfLoggingConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.logging;",
          "3: import java.util.Map;",
          "5: import io.quarkus.runtime.annotations.ConfigDocFilename;",
          "6: import io.quarkus.runtime.annotations.ConfigGroup;",
          "7: import io.quarkus.runtime.annotations.ConfigPhase;",
          "8: import io.quarkus.runtime.annotations.ConfigRoot;",
          "9: import io.smallrye.config.ConfigMapping;",
          "10: import io.smallrye.config.WithName;",
          "12: @ConfigMapping(prefix = \"quarkus.cxf\")",
          "13: @ConfigDocFilename(\"quarkus-cxf-rt-features-logging.adoc\")",
          "14: @ConfigRoot(phase = ConfigPhase.RUN_TIME)",
          "15: public interface CxfLoggingConfig {",
          "20:     @WithName(\"client\")",
          "21:     Map<String, ClientOrEndpointConfig> clients();",
          "26:     @WithName(\"endpoint\")",
          "27:     Map<String, ClientOrEndpointConfig> endpoints();",
          "32:     @ConfigGroup",
          "33:     interface ClientOrEndpointConfig {",
          "34:     }",
          "36: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.logging;",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "5: import java.util.function.Consumer;",
          "6: import java.util.stream.Collectors;",
          "8: import org.apache.cxf.ext.logging.LoggingFeature;",
          "9: import org.apache.cxf.feature.Feature;",
          "10: import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;",
          "11: import org.apache.cxf.jaxws.JaxWsServerFactoryBean;",
          "12: import org.jboss.logging.Logger;",
          "14: import io.quarkiverse.cxf.CXFClientInfo;",
          "15: import io.quarkiverse.cxf.CXFServletInfo;",
          "16: import io.quarkiverse.cxf.CxfConfig;",
          "17: import io.quarkiverse.cxf.LoggingConfig;",
          "18: import io.quarkiverse.cxf.LoggingConfig.GlobalLoggingConfig;",
          "19: import io.quarkiverse.cxf.LoggingConfig.PerClientOrServiceLoggingConfig;",
          "21: public class LoggingFactoryCustomizer {",
          "22:     private static final Logger log = Logger.getLogger(LoggingFactoryCustomizer.class);",
          "23:     private final CxfConfig config;",
          "24:     private final LoggingFeature globalLoggingFeature;",
          "26:     public LoggingFactoryCustomizer(CxfConfig config) {",
          "27:         super();",
          "28:         this.config = config;",
          "30:         final GlobalLoggingConfig globalLoggingConfig = config.logging();",
          "31:         if (globalLoggingConfig.enabledFor().enabledForAny()) {",
          "32:             this.globalLoggingFeature = configureLoggingFeature(globalLoggingConfig);",
          "33:         } else {",
          "34:             log.debugf(\"Global logging feature is disabled\");",
          "35:             this.globalLoggingFeature = null;",
          "36:         }",
          "38:     }",
          "40:     public void customize(CXFClientInfo cxfClientInfo, JaxWsProxyFactoryBean factory) {",
          "41:         final String key = cxfClientInfo.getConfigKey();",
          "42:         if (key != null && Optional.ofNullable(config.clients()).map(m -> m.containsKey(key)).orElse(false)) {",
          "43:             final PerClientOrServiceLoggingConfig wssConfig = Optional.ofNullable(config.clients()).map(m1 -> m1.get(key))",
          "44:                     .orElse(null)",
          "45:                     .logging();",
          "46:             final List<Feature> features = factory.getFeatures();",
          "47:             customize(Kind.client, key, wssConfig, features);",
          "48:         }",
          "49:     }",
          "51:     public void customize(CXFServletInfo cxfServletInfo, JaxWsServerFactoryBean factory) {",
          "52:         final String key = cxfServletInfo.getRelativePath();",
          "53:         if (key != null && Optional.ofNullable(config.endpoints()).map(m -> m.containsKey(key)).orElse(false)) {",
          "54:             final PerClientOrServiceLoggingConfig wssConfig = Optional.ofNullable(config.endpoints()).map(m1 -> m1.get(key))",
          "55:                     .orElse(null)",
          "56:                     .logging();",
          "57:             final List<Feature> features = factory.getFeatures();",
          "58:             customize(Kind.endpoint, key, wssConfig, features);",
          "59:         }",
          "60:     }",
          "62:     private enum Kind {",
          "63:         client,",
          "64:         endpoint",
          "65:     };",
          "67:     private void customize(",
          "68:             Kind kind,",
          "69:             final String key,",
          "70:             PerClientOrServiceLoggingConfig wssConfig,",
          "71:             List<Feature> features) {",
          "73:         final LoggingFeature loggingFeature;",
          "75:         final Optional<Boolean> enabled = wssConfig.enabled();",
          "76:         if (enabled.isPresent()) {",
          "77:             loggingFeature = enabled.get().booleanValue()",
          "78:                     ? configureLoggingFeature(wssConfig)",
          "83:                     : null;",
          "84:         } else if (config.logging().enabledFor().enabledForClients()) {",
          "85:             loggingFeature = this.globalLoggingFeature;",
          "86:             if (loggingFeature != null) {",
          "87:                 log.debugf(\"Logging feature not enabled explicitly for %s \\\"%s\\\", using the global logging feature\", kind, key);",
          "88:             }",
          "89:         } else {",
          "90:             loggingFeature = null;",
          "91:             log.debugf(",
          "92:                     \"Logging feature not enabled explicitly for %s \\\"%s\\\", the global logging feature is not enabled for \"",
          "93:                             + kind.name() + \"s either\",",
          "94:                     kind, key);",
          "95:         }",
          "97:         if (loggingFeature != null) {",
          "98:             if (features.stream().anyMatch(i -> i instanceof LoggingFeature)) {",
          "99:                 throw new IllegalStateException(LoggingFeature.class.getSimpleName() + \" already configured for \" + kind + \" \\\"\"",
          "100:                         + key + \"\\\". Either remove all quarkus.cxf.\" + kind + \".\\\"\" + key + \"\\\".logging.* options or the \"",
          "101:                         + LoggingFeature.class.getSimpleName() + \" you added programmatically or via quarkus.cxf.\" + kind",
          "102:                         + \".\\\"\"",
          "103:                         + key + \"\\\".features\");",
          "104:             }",
          "105:             features.add(loggingFeature);",
          "106:         }",
          "107:     }",
          "109:     private LoggingFeature configureLoggingFeature(LoggingConfig config) {",
          "110:         LoggingFeature feature = new LoggingFeature();",
          "111:         feature.setLimit(config.limit());",
          "112:         feature.setInMemThreshold(config.inMemThreshold());",
          "113:         feature.setPrettyLogging(config.pretty());",
          "114:         feature.setLogBinary(config.logBinary());",
          "115:         feature.setLogMultipart(config.logMultipart());",
          "116:         feature.setVerbose(config.verbose());",
          "118:         addList(config.inBinaryContentMediaTypes(), feature::addInBinaryContentMediaTypes);",
          "119:         addList(config.outBinaryContentMediaTypes(), feature::addOutBinaryContentMediaTypes);",
          "120:         addList(config.binaryContentMediaTypes(), feature::addBinaryContentMediaTypes);",
          "121:         config.sensitiveElementNames().ifPresent(feature::addSensitiveElementNames);",
          "122:         config.sensitiveProtocolHeaderNames().ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "123:         return feature;",
          "124:     }",
          "126:     private void addList(Optional<List<String>> source, Consumer<String> consumer) {",
          "127:         source.ifPresent(list -> consumer.accept(list.stream().collect(Collectors.joining(\";\"))));",
          "128:     }",
          "130: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/transport/CxfHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import io.quarkiverse.cxf.CXFRuntimeUtils;",
          "26: import io.quarkiverse.cxf.CXFServletInfo;",
          "27: import io.quarkiverse.cxf.CXFServletInfos;",
          "28: import io.quarkiverse.cxf.QuarkusRuntimeJaxWsServiceFactoryBean;",
          "29: import io.quarkus.arc.ManagedContext;",
          "30: import io.quarkus.arc.runtime.BeanContainer;",
          "31: import io.quarkus.security.identity.CurrentIdentityAssociation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import io.quarkiverse.cxf.CxfConfig;",
          "30: import io.quarkiverse.cxf.logging.LoggingFactoryCustomizer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         servletPath = cxfServletInfos.getPath();",
          "85:         contextPath = cxfServletInfos.getContextPath();",
          "87:         final Instance<EndpointFactoryCustomizer> customizers = CDI.current().select(EndpointFactoryCustomizer.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:         final LoggingFactoryCustomizer loggingFactoryCustomizer = new LoggingFactoryCustomizer(",
          "90:                 CDI.current().select(CxfConfig.class).get());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:                 if (servletInfo.getEndpointUrl() != null) {",
          "130:                     jaxWsServerFactoryBean.setPublishedEndpointUrl(servletInfo.getEndpointUrl());",
          "131:                 }",
          "132:                 customizers.forEach(customizer -> customizer.customize(servletInfo, jaxWsServerFactoryBean));",
          "134:                 jaxWsServerFactoryBean.create();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:                 loggingFactoryCustomizer.customize(servletInfo, jaxWsServerFactoryBean);",
          "",
          "---------------"
        ],
        "test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java||test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java": [
          "File: test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java -> test-util/src/main/java/io/quarkiverse/cxf/test/QuarkusCxfClientTestUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.net.MalformedURLException;",
          "4: import java.net.URL;",
          "5: import java.util.stream.Collectors;",
          "6: import java.util.stream.Stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import java.util.function.Predicate;",
          "6: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         return Stream.of(elementNames)",
          "75:                 .collect(Collectors.joining(\"']/*[local-name() = '\", \"/*[local-name() = '\", \"']\"));",
          "76:     }",
          "77: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     public static Predicate<String> messageExists(String messageKind, String payload) {",
          "81:         return msg -> Pattern.compile(",
          "82:                 \"^\" + messageKind + \".*\\\\QPayload: \" + payload + \"\\n\\\\E$\",",
          "83:                 Pattern.DOTALL).matcher(msg).matches();",
          "84:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4e7e105e9ba11ee9e91de0400a1d7a5ea033e5f",
      "candidate_info": {
        "commit_hash": "a4e7e105e9ba11ee9e91de0400a1d7a5ea033e5f",
        "repo": "quarkiverse/quarkus-cxf",
        "commit_url": "https://github.com/quarkiverse/quarkus-cxf/commit/a4e7e105e9ba11ee9e91de0400a1d7a5ea033e5f",
        "files": [
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
        ],
        "message": "Per client or service configuration of sensitive-element-names and sensitive-protocol-header-names not honored #1533",
        "before_after_code_files": [
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ],
          "candidate": [
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ]
        }
      },
      "candidate_diff": {
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.util.Collections;",
          "6: import java.util.LinkedHashMap;",
          "7: import java.util.List;",
          "8: import java.util.Map;",
          "9: import java.util.Objects;",
          "10: import java.util.function.Predicate;",
          "11: import java.util.logging.LogRecord;",
          "12: import java.util.regex.Pattern;",
          "14: import jakarta.enterprise.context.ApplicationScoped;",
          "15: import jakarta.inject.Named;",
          "16: import jakarta.jws.WebMethod;",
          "17: import jakarta.jws.WebParam;",
          "18: import jakarta.jws.WebService;",
          "19: import jakarta.xml.bind.annotation.XmlAccessType;",
          "20: import jakarta.xml.bind.annotation.XmlAccessorType;",
          "21: import jakarta.xml.bind.annotation.XmlElement;",
          "22: import jakarta.xml.bind.annotation.XmlType;",
          "24: import org.apache.cxf.interceptor.Fault;",
          "25: import org.apache.cxf.message.Message;",
          "26: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
          "27: import org.apache.cxf.phase.Phase;",
          "28: import org.assertj.core.api.Assertions;",
          "29: import org.jboss.shrinkwrap.api.ShrinkWrap;",
          "30: import org.jboss.shrinkwrap.api.spec.JavaArchive;",
          "31: import org.junit.jupiter.api.Test;",
          "32: import org.junit.jupiter.api.extension.RegisterExtension;",
          "34: import io.quarkiverse.cxf.annotation.CXFClient;",
          "35: import io.quarkus.test.QuarkusUnitTest;",
          "37: public class GlobalSensitiveTest {",
          "39:     @RegisterExtension",
          "40:     public static final QuarkusUnitTest test = new QuarkusUnitTest()",
          "41:             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)",
          "42:                     .addClasses(HelloService.class, HelloServiceImpl.class, Person.class, ServiceAddHeader.class,",
          "43:                             ClientAddHeader.class))",
          "46:             .overrideConfigKey(\"quarkus.cxf.logging.enabled-for\", \"both\")",
          "47:             .overrideConfigKey(\"quarkus.cxf.logging.sensitive-protocol-header-names\",",
          "48:                     \"Client-Secret-Header,Service-Secret-Header\")",
          "49:             .overrideConfigKey(\"quarkus.cxf.logging.sensitive-element-names\",",
          "50:                     \"firstName,surname,greetingPrefix,greetingSuffix\")",
          "52:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\", HelloServiceImpl.class.getName())",
          "53:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".out-interceptors\", \"#ServiceAddHeader\")",
          "55:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "56:             .overrideConfigKey(\"quarkus.cxf.client.hello.out-interceptors\", \"#ClientAddHeader\")",
          "57:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "59:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"HelloService.RE\")) // REQ_[IN|OUT] or RESP_[IN|OUT]",
          "60:             .assertLogRecords(records ->",
          "62:             assertThat(records)",
          "63:                     .extracting(LogRecord::getMessage)",
          "64:                     .anyMatch(messageExists(\"REQ_OUT\", \"Client-Secret-Header=XXX\",",
          "65:                             \"<person><firstName>XXX</firstName><surname>XXX</surname></person>\"))",
          "66:                     .anyMatch(messageExists(\"REQ_IN\", \"Client-Secret-Header=XXX\",",
          "67:                             \"<person><firstName>XXX</firstName><surname>XXX</surname></person>\"))",
          "68:                     .anyMatch(messageExists(\"RESP_OUT\", \"Service-Secret-Header=XXX\",",
          "69:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
          "70:                     .anyMatch(messageExists(\"RESP_IN\", \"Service-Secret-Header=XXX\",",
          "71:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
          "72:                     .hasSize(4));",
          "74:     ;",
          "76:     @CXFClient(\"hello\")",
          "77:     HelloService hello;",
          "79:     @Test",
          "80:     void sensitive() {",
          "81:         Assertions.assertThat(hello.hello(new Person(\"Joe\", \"Doe\"))).isEqualTo(new Greeting(\"Hello\", \"Joe Doe\"));",
          "82:     }",
          "84:     static Predicate<String> messageExists(String messageKind, String headersSubstring, String payloadSubstring) {",
          "85:         return msg -> Pattern.compile(",
          "86:                 \"^\" + messageKind + \".*Headers: \\\\{[^\\\\}]*\" + headersSubstring + \"[^\\\\}]*\\\\}.*Payload: .*\" + payloadSubstring",
          "87:                         + \".*$\",",
          "88:                 Pattern.DOTALL).matcher(msg).matches();",
          "89:     }",
          "91:     @WebService",
          "92:     public interface HelloService {",
          "94:         @WebMethod",
          "95:         Greeting hello(@WebParam(name = \"person\") Person person);",
          "97:     }",
          "99:     @WebService(serviceName = \"HelloService\")",
          "100:     public static class HelloServiceImpl implements HelloService {",
          "102:         @Override",
          "103:         public Greeting hello(Person person) {",
          "104:             return new Greeting(\"Hello\", person.firstName + \" \" + person.surname);",
          "105:         }",
          "106:     }",
          "108:     @XmlAccessorType(XmlAccessType.FIELD)",
          "109:     @XmlType(name = \"person\")",
          "110:     public static class Person {",
          "112:         @XmlElement",
          "113:         private String firstName;",
          "115:         @XmlElement",
          "116:         private String surname;",
          "118:         public Person() {",
          "119:         }",
          "121:         public Person(String firstName, String surname) {",
          "122:             this.firstName = firstName;",
          "123:             this.surname = surname;",
          "124:         }",
          "126:         public String getFirstName() {",
          "127:             return firstName;",
          "128:         }",
          "130:         public void setFirstName(String name) {",
          "131:             this.firstName = name;",
          "132:         }",
          "134:         public String getSurname() {",
          "135:             return surname;",
          "136:         }",
          "138:         public void setSurname(String description) {",
          "139:             this.surname = description;",
          "140:         }",
          "142:         @Override",
          "143:         public boolean equals(Object obj) {",
          "144:             if (!(obj instanceof Person)) {",
          "145:                 return false;",
          "146:             }",
          "148:             Person other = (Person) obj;",
          "149:             return Objects.equals(other.firstName, this.firstName) && Objects.equals(other.surname, this.surname);",
          "150:         }",
          "152:         @Override",
          "153:         public int hashCode() {",
          "154:             return Objects.hash(this.firstName, this.surname);",
          "155:         }",
          "157:         @Override",
          "158:         public String toString() {",
          "159:             return firstName + \" \" + surname;",
          "160:         }",
          "162:     }",
          "164:     @XmlAccessorType(XmlAccessType.FIELD)",
          "165:     @XmlType(name = \"greeting\")",
          "166:     public static class Greeting {",
          "168:         @XmlElement",
          "169:         private String greetingPrefix;",
          "171:         @XmlElement",
          "172:         private String greetingSuffix;",
          "174:         public Greeting() {",
          "175:         }",
          "177:         public Greeting(String firstName, String surname) {",
          "178:             this.greetingPrefix = firstName;",
          "179:             this.greetingSuffix = surname;",
          "180:         }",
          "182:         public String getGreetingPrefix() {",
          "183:             return greetingPrefix;",
          "184:         }",
          "186:         public void setGreetingPrefix(String name) {",
          "187:             this.greetingPrefix = name;",
          "188:         }",
          "190:         public String getGreetingSuffix() {",
          "191:             return greetingSuffix;",
          "192:         }",
          "194:         public void setGreetingSuffix(String description) {",
          "195:             this.greetingSuffix = description;",
          "196:         }",
          "198:         @Override",
          "199:         public boolean equals(Object obj) {",
          "200:             if (!(obj instanceof Greeting)) {",
          "201:                 return false;",
          "202:             }",
          "204:             Greeting other = (Greeting) obj;",
          "205:             return Objects.equals(other.greetingPrefix, this.greetingPrefix)",
          "206:                     && Objects.equals(other.greetingSuffix, this.greetingSuffix);",
          "207:         }",
          "209:         @Override",
          "210:         public int hashCode() {",
          "211:             return Objects.hash(this.greetingPrefix, this.greetingSuffix);",
          "212:         }",
          "214:         @Override",
          "215:         public String toString() {",
          "216:             return greetingPrefix + \" \" + greetingSuffix;",
          "217:         }",
          "219:     }",
          "221:     static void addHeader(Message message, String headerName, String headerValue) {",
          "222:         Map<String, List<String>> headers = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);",
          "223:         if (headers == null) {",
          "224:             headers = new LinkedHashMap<>();",
          "225:             message.put(Message.PROTOCOL_HEADERS, headers);",
          "226:         }",
          "227:         headers.put(headerName, Collections.singletonList(headerValue));",
          "228:     }",
          "230:     @ApplicationScoped",
          "231:     @Named(\"ClientAddHeader\")",
          "232:     public static class ClientAddHeader extends AbstractPhaseInterceptor<Message> {",
          "234:         public ClientAddHeader() {",
          "235:             super(Phase.PREPARE_SEND);",
          "236:         }",
          "238:         @Override",
          "239:         public void handleMessage(Message message) throws Fault {",
          "240:             addHeader(message, \"Client-Secret-Header\", \"client secret\");",
          "241:         }",
          "243:     }",
          "245:     @ApplicationScoped",
          "246:     @Named(\"ServiceAddHeader\")",
          "247:     public static class ServiceAddHeader extends AbstractPhaseInterceptor<Message> {",
          "249:         public ServiceAddHeader() {",
          "250:             super(Phase.PREPARE_SEND);",
          "251:         }",
          "253:         @Override",
          "254:         public void handleMessage(Message message) throws Fault {",
          "255:             addHeader(message, \"Service-Secret-Header\", \"service secret\");",
          "256:         }",
          "258:     }",
          "259: }",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.util.Collections;",
          "6: import java.util.LinkedHashMap;",
          "7: import java.util.List;",
          "8: import java.util.Map;",
          "9: import java.util.Objects;",
          "10: import java.util.function.Predicate;",
          "11: import java.util.logging.LogRecord;",
          "12: import java.util.regex.Pattern;",
          "14: import jakarta.enterprise.context.ApplicationScoped;",
          "15: import jakarta.inject.Named;",
          "16: import jakarta.jws.WebMethod;",
          "17: import jakarta.jws.WebParam;",
          "18: import jakarta.jws.WebService;",
          "19: import jakarta.xml.bind.annotation.XmlAccessType;",
          "20: import jakarta.xml.bind.annotation.XmlAccessorType;",
          "21: import jakarta.xml.bind.annotation.XmlElement;",
          "22: import jakarta.xml.bind.annotation.XmlType;",
          "24: import org.apache.cxf.interceptor.Fault;",
          "25: import org.apache.cxf.message.Message;",
          "26: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
          "27: import org.apache.cxf.phase.Phase;",
          "28: import org.assertj.core.api.Assertions;",
          "29: import org.jboss.shrinkwrap.api.ShrinkWrap;",
          "30: import org.jboss.shrinkwrap.api.spec.JavaArchive;",
          "31: import org.junit.jupiter.api.Test;",
          "32: import org.junit.jupiter.api.extension.RegisterExtension;",
          "34: import io.quarkiverse.cxf.annotation.CXFClient;",
          "35: import io.quarkus.test.QuarkusUnitTest;",
          "37: public class PerClientOrServiceSensitiveTest {",
          "39:     @RegisterExtension",
          "40:     public static final QuarkusUnitTest test = new QuarkusUnitTest()",
          "41:             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)",
          "42:                     .addClasses(HelloService.class, HelloServiceImpl.class, Person.class, ServiceAddHeader.class,",
          "43:                             ClientAddHeader.class))",
          "46:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\",",
          "47:                     HelloServiceImpl.class.getName())",
          "48:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.enabled\", \"true\")",
          "49:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".out-interceptors\", \"#ServiceAddHeader\")",
          "50:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.sensitive-element-names\", \"firstName,greetingPrefix\")",
          "51:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.sensitive-protocol-header-names\",",
          "52:                     \"Service-Secret-Header\")",
          "54:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "55:             .overrideConfigKey(\"quarkus.cxf.client.hello.out-interceptors\", \"#ClientAddHeader\")",
          "56:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "57:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.enabled\", \"true\")",
          "58:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.sensitive-element-names\", \"surname,greetingSuffix\")",
          "59:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.sensitive-protocol-header-names\", \"Client-Secret-Header\")",
          "61:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"HelloService.RE\")) // REQ_[IN|OUT] or RESP_[IN|OUT]",
          "62:             .assertLogRecords(records ->",
          "64:             assertThat(records)",
          "65:                     .extracting(LogRecord::getMessage)",
          "66:                     .anyMatch(messageExists(\"REQ_OUT\", \"Client-Secret-Header=XXX\",",
          "67:                             \"<person><firstName>Joe</firstName><surname>XXX</surname></person>\"))",
          "68:                     .anyMatch(messageExists(\"REQ_IN\", \"Client-Secret-Header=client secret\",",
          "69:                             \"<person><firstName>XXX</firstName><surname>Doe</surname></person>\"))",
          "70:                     .anyMatch(messageExists(\"RESP_OUT\", \"Service-Secret-Header=XXX\",",
          "71:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>Joe Doe</greetingSuffix></return>\"))",
          "72:                     .anyMatch(messageExists(\"RESP_IN\", \"Service-Secret-Header=service secret\",",
          "73:                             \"<return><greetingPrefix>Hello</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
          "74:                     .hasSize(4));",
          "76:     ;",
          "78:     @CXFClient(\"hello\")",
          "79:     HelloService hello;",
          "81:     @Test",
          "82:     void sensitive() {",
          "83:         Assertions.assertThat(hello.hello(new Person(\"Joe\", \"Doe\"))).isEqualTo(new Greeting(\"Hello\", \"Joe Doe\"));",
          "84:     }",
          "86:     static Predicate<String> messageExists(String messageKind, String headersSubstring, String payloadSubstring) {",
          "87:         return msg -> Pattern.compile(",
          "88:                 \"^\" + messageKind + \".*Headers: \\\\{[^\\\\}]*\" + headersSubstring + \"[^\\\\}]*\\\\}.*Payload: .*\" + payloadSubstring",
          "89:                         + \".*$\",",
          "90:                 Pattern.DOTALL).matcher(msg).matches();",
          "91:     }",
          "93:     @WebService",
          "94:     public interface HelloService {",
          "96:         @WebMethod",
          "97:         Greeting hello(@WebParam(name = \"person\") Person person);",
          "99:     }",
          "101:     @WebService(serviceName = \"HelloService\")",
          "102:     public static class HelloServiceImpl implements HelloService {",
          "104:         @Override",
          "105:         public Greeting hello(Person person) {",
          "106:             return new Greeting(\"Hello\", person.firstName + \" \" + person.surname);",
          "107:         }",
          "108:     }",
          "110:     @XmlAccessorType(XmlAccessType.FIELD)",
          "111:     @XmlType(name = \"person\")",
          "112:     public static class Person {",
          "114:         @XmlElement",
          "115:         private String firstName;",
          "117:         @XmlElement",
          "118:         private String surname;",
          "120:         public Person() {",
          "121:         }",
          "123:         public Person(String firstName, String surname) {",
          "124:             this.firstName = firstName;",
          "125:             this.surname = surname;",
          "126:         }",
          "128:         public String getFirstName() {",
          "129:             return firstName;",
          "130:         }",
          "132:         public void setFirstName(String name) {",
          "133:             this.firstName = name;",
          "134:         }",
          "136:         public String getSurname() {",
          "137:             return surname;",
          "138:         }",
          "140:         public void setSurname(String description) {",
          "141:             this.surname = description;",
          "142:         }",
          "144:         @Override",
          "145:         public boolean equals(Object obj) {",
          "146:             if (!(obj instanceof Person)) {",
          "147:                 return false;",
          "148:             }",
          "150:             Person other = (Person) obj;",
          "151:             return Objects.equals(other.firstName, this.firstName) && Objects.equals(other.surname, this.surname);",
          "152:         }",
          "154:         @Override",
          "155:         public int hashCode() {",
          "156:             return Objects.hash(this.firstName, this.surname);",
          "157:         }",
          "159:         @Override",
          "160:         public String toString() {",
          "161:             return firstName + \" \" + surname;",
          "162:         }",
          "164:     }",
          "166:     @XmlAccessorType(XmlAccessType.FIELD)",
          "167:     @XmlType(name = \"greeting\")",
          "168:     public static class Greeting {",
          "170:         @XmlElement",
          "171:         private String greetingPrefix;",
          "173:         @XmlElement",
          "174:         private String greetingSuffix;",
          "176:         public Greeting() {",
          "177:         }",
          "179:         public Greeting(String firstName, String surname) {",
          "180:             this.greetingPrefix = firstName;",
          "181:             this.greetingSuffix = surname;",
          "182:         }",
          "184:         public String getGreetingPrefix() {",
          "185:             return greetingPrefix;",
          "186:         }",
          "188:         public void setGreetingPrefix(String name) {",
          "189:             this.greetingPrefix = name;",
          "190:         }",
          "192:         public String getGreetingSuffix() {",
          "193:             return greetingSuffix;",
          "194:         }",
          "196:         public void setGreetingSuffix(String description) {",
          "197:             this.greetingSuffix = description;",
          "198:         }",
          "200:         @Override",
          "201:         public boolean equals(Object obj) {",
          "202:             if (!(obj instanceof Greeting)) {",
          "203:                 return false;",
          "204:             }",
          "206:             Greeting other = (Greeting) obj;",
          "207:             return Objects.equals(other.greetingPrefix, this.greetingPrefix)",
          "208:                     && Objects.equals(other.greetingSuffix, this.greetingSuffix);",
          "209:         }",
          "211:         @Override",
          "212:         public int hashCode() {",
          "213:             return Objects.hash(this.greetingPrefix, this.greetingSuffix);",
          "214:         }",
          "216:         @Override",
          "217:         public String toString() {",
          "218:             return greetingPrefix + \" \" + greetingSuffix;",
          "219:         }",
          "221:     }",
          "223:     static void addHeader(Message message, String headerName, String headerValue) {",
          "224:         Map<String, List<String>> headers = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);",
          "225:         if (headers == null) {",
          "226:             headers = new LinkedHashMap<>();",
          "227:             message.put(Message.PROTOCOL_HEADERS, headers);",
          "228:         }",
          "229:         headers.put(headerName, Collections.singletonList(headerValue));",
          "230:     }",
          "232:     @ApplicationScoped",
          "233:     @Named(\"ClientAddHeader\")",
          "234:     public static class ClientAddHeader extends AbstractPhaseInterceptor<Message> {",
          "236:         public ClientAddHeader() {",
          "237:             super(Phase.PREPARE_SEND);",
          "238:         }",
          "240:         @Override",
          "241:         public void handleMessage(Message message) throws Fault {",
          "242:             addHeader(message, \"Client-Secret-Header\", \"client secret\");",
          "243:         }",
          "245:     }",
          "247:     @ApplicationScoped",
          "248:     @Named(\"ServiceAddHeader\")",
          "249:     public static class ServiceAddHeader extends AbstractPhaseInterceptor<Message> {",
          "251:         public ServiceAddHeader() {",
          "252:             super(Phase.PREPARE_SEND);",
          "253:         }",
          "255:         @Override",
          "256:         public void handleMessage(Message message) throws Fault {",
          "257:             addHeader(message, \"Service-Secret-Header\", \"service secret\");",
          "258:         }",
          "260:     }",
          "261: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:                 feature::addOutBinaryContentMediaTypes);",
          "76:         addList(global.binaryContentMediaTypes(), clientOrServiceConfig.inBinaryContentMediaTypes(),",
          "77:                 feature::addBinaryContentMediaTypes);",
          "80:         return feature;",
          "81:     }",
          "",
          "[Removed Lines]",
          "78:         global.sensitiveElementNames().ifPresent(feature::addSensitiveElementNames);",
          "79:         global.sensitiveProtocolHeaderNames().ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "",
          "[Added Lines]",
          "79:         clientOrServiceConfig.sensitiveElementNames()",
          "80:                 .or(global::sensitiveElementNames)",
          "81:                 .ifPresent(feature::addSensitiveElementNames);",
          "82:         clientOrServiceConfig.sensitiveProtocolHeaderNames()",
          "83:                 .or(global::sensitiveProtocolHeaderNames)",
          "84:                 .ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e454106a07dabcf58a92b9cc42f5c1c06c6ac7d7",
      "candidate_info": {
        "commit_hash": "e454106a07dabcf58a92b9cc42f5c1c06c6ac7d7",
        "repo": "quarkiverse/quarkus-cxf",
        "commit_url": "https://github.com/quarkiverse/quarkus-cxf/commit/e454106a07dabcf58a92b9cc42f5c1c06c6ac7d7",
        "files": [
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
        ],
        "message": "Per client or service configuration of sensitive-element-names and sensitive-protocol-header-names not honored #1533",
        "before_after_code_files": [
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
          "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
          "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ],
          "candidate": [
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
            "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
            "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java"
          ]
        }
      },
      "candidate_diff": {
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/GlobalSensitiveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.util.Collections;",
          "6: import java.util.LinkedHashMap;",
          "7: import java.util.List;",
          "8: import java.util.Map;",
          "9: import java.util.Objects;",
          "10: import java.util.function.Predicate;",
          "11: import java.util.logging.LogRecord;",
          "12: import java.util.regex.Pattern;",
          "14: import jakarta.enterprise.context.ApplicationScoped;",
          "15: import jakarta.inject.Named;",
          "16: import jakarta.jws.WebMethod;",
          "17: import jakarta.jws.WebParam;",
          "18: import jakarta.jws.WebService;",
          "19: import jakarta.xml.bind.annotation.XmlAccessType;",
          "20: import jakarta.xml.bind.annotation.XmlAccessorType;",
          "21: import jakarta.xml.bind.annotation.XmlElement;",
          "22: import jakarta.xml.bind.annotation.XmlType;",
          "24: import org.apache.cxf.interceptor.Fault;",
          "25: import org.apache.cxf.message.Message;",
          "26: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
          "27: import org.apache.cxf.phase.Phase;",
          "28: import org.assertj.core.api.Assertions;",
          "29: import org.jboss.shrinkwrap.api.ShrinkWrap;",
          "30: import org.jboss.shrinkwrap.api.spec.JavaArchive;",
          "31: import org.junit.jupiter.api.Test;",
          "32: import org.junit.jupiter.api.extension.RegisterExtension;",
          "34: import io.quarkiverse.cxf.annotation.CXFClient;",
          "35: import io.quarkus.test.QuarkusUnitTest;",
          "37: public class GlobalSensitiveTest {",
          "39:     @RegisterExtension",
          "40:     public static final QuarkusUnitTest test = new QuarkusUnitTest()",
          "41:             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)",
          "42:                     .addClasses(HelloService.class, HelloServiceImpl.class, Person.class, ServiceAddHeader.class,",
          "43:                             ClientAddHeader.class))",
          "46:             .overrideConfigKey(\"quarkus.cxf.logging.enabled-for\", \"both\")",
          "47:             .overrideConfigKey(\"quarkus.cxf.logging.sensitive-protocol-header-names\",",
          "48:                     \"Client-Secret-Header,Service-Secret-Header\")",
          "49:             .overrideConfigKey(\"quarkus.cxf.logging.sensitive-element-names\",",
          "50:                     \"firstName,surname,greetingPrefix,greetingSuffix\")",
          "52:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\", HelloServiceImpl.class.getName())",
          "53:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".out-interceptors\", \"#ServiceAddHeader\")",
          "55:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "56:             .overrideConfigKey(\"quarkus.cxf.client.hello.out-interceptors\", \"#ClientAddHeader\")",
          "57:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "59:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"HelloService.RE\")) // REQ_[IN|OUT] or RESP_[IN|OUT]",
          "60:             .assertLogRecords(records ->",
          "62:             assertThat(records)",
          "63:                     .extracting(LogRecord::getMessage)",
          "64:                     .anyMatch(messageExists(\"REQ_OUT\", \"Client-Secret-Header=XXX\",",
          "65:                             \"<person><firstName>XXX</firstName><surname>XXX</surname></person>\"))",
          "66:                     .anyMatch(messageExists(\"REQ_IN\", \"Client-Secret-Header=XXX\",",
          "67:                             \"<person><firstName>XXX</firstName><surname>XXX</surname></person>\"))",
          "68:                     .anyMatch(messageExists(\"RESP_OUT\", \"Service-Secret-Header=XXX\",",
          "69:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
          "70:                     .anyMatch(messageExists(\"RESP_IN\", \"Service-Secret-Header=XXX\",",
          "71:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
          "72:                     .hasSize(4));",
          "74:     ;",
          "76:     @CXFClient(\"hello\")",
          "77:     HelloService hello;",
          "79:     @Test",
          "80:     void sensitive() {",
          "81:         Assertions.assertThat(hello.hello(new Person(\"Joe\", \"Doe\"))).isEqualTo(new Greeting(\"Hello\", \"Joe Doe\"));",
          "82:     }",
          "84:     static Predicate<String> messageExists(String messageKind, String headersSubstring, String payloadSubstring) {",
          "85:         return msg -> Pattern.compile(",
          "86:                 \"^\" + messageKind + \".*Headers: \\\\{[^\\\\}]*\" + headersSubstring + \"[^\\\\}]*\\\\}.*Payload: .*\" + payloadSubstring",
          "87:                         + \".*$\",",
          "88:                 Pattern.DOTALL).matcher(msg).matches();",
          "89:     }",
          "91:     @WebService",
          "92:     public interface HelloService {",
          "94:         @WebMethod",
          "95:         Greeting hello(@WebParam(name = \"person\") Person person);",
          "97:     }",
          "99:     @WebService(serviceName = \"HelloService\")",
          "100:     public static class HelloServiceImpl implements HelloService {",
          "102:         @Override",
          "103:         public Greeting hello(Person person) {",
          "104:             return new Greeting(\"Hello\", person.firstName + \" \" + person.surname);",
          "105:         }",
          "106:     }",
          "108:     @XmlAccessorType(XmlAccessType.FIELD)",
          "109:     @XmlType(name = \"person\")",
          "110:     public static class Person {",
          "112:         @XmlElement",
          "113:         private String firstName;",
          "115:         @XmlElement",
          "116:         private String surname;",
          "118:         public Person() {",
          "119:         }",
          "121:         public Person(String firstName, String surname) {",
          "122:             this.firstName = firstName;",
          "123:             this.surname = surname;",
          "124:         }",
          "126:         public String getFirstName() {",
          "127:             return firstName;",
          "128:         }",
          "130:         public void setFirstName(String name) {",
          "131:             this.firstName = name;",
          "132:         }",
          "134:         public String getSurname() {",
          "135:             return surname;",
          "136:         }",
          "138:         public void setSurname(String description) {",
          "139:             this.surname = description;",
          "140:         }",
          "142:         @Override",
          "143:         public boolean equals(Object obj) {",
          "144:             if (!(obj instanceof Person)) {",
          "145:                 return false;",
          "146:             }",
          "148:             Person other = (Person) obj;",
          "149:             return Objects.equals(other.firstName, this.firstName) && Objects.equals(other.surname, this.surname);",
          "150:         }",
          "152:         @Override",
          "153:         public int hashCode() {",
          "154:             return Objects.hash(this.firstName, this.surname);",
          "155:         }",
          "157:         @Override",
          "158:         public String toString() {",
          "159:             return firstName + \" \" + surname;",
          "160:         }",
          "162:     }",
          "164:     @XmlAccessorType(XmlAccessType.FIELD)",
          "165:     @XmlType(name = \"greeting\")",
          "166:     public static class Greeting {",
          "168:         @XmlElement",
          "169:         private String greetingPrefix;",
          "171:         @XmlElement",
          "172:         private String greetingSuffix;",
          "174:         public Greeting() {",
          "175:         }",
          "177:         public Greeting(String firstName, String surname) {",
          "178:             this.greetingPrefix = firstName;",
          "179:             this.greetingSuffix = surname;",
          "180:         }",
          "182:         public String getGreetingPrefix() {",
          "183:             return greetingPrefix;",
          "184:         }",
          "186:         public void setGreetingPrefix(String name) {",
          "187:             this.greetingPrefix = name;",
          "188:         }",
          "190:         public String getGreetingSuffix() {",
          "191:             return greetingSuffix;",
          "192:         }",
          "194:         public void setGreetingSuffix(String description) {",
          "195:             this.greetingSuffix = description;",
          "196:         }",
          "198:         @Override",
          "199:         public boolean equals(Object obj) {",
          "200:             if (!(obj instanceof Greeting)) {",
          "201:                 return false;",
          "202:             }",
          "204:             Greeting other = (Greeting) obj;",
          "205:             return Objects.equals(other.greetingPrefix, this.greetingPrefix)",
          "206:                     && Objects.equals(other.greetingSuffix, this.greetingSuffix);",
          "207:         }",
          "209:         @Override",
          "210:         public int hashCode() {",
          "211:             return Objects.hash(this.greetingPrefix, this.greetingSuffix);",
          "212:         }",
          "214:         @Override",
          "215:         public String toString() {",
          "216:             return greetingPrefix + \" \" + greetingSuffix;",
          "217:         }",
          "219:     }",
          "221:     static void addHeader(Message message, String headerName, String headerValue) {",
          "222:         Map<String, List<String>> headers = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);",
          "223:         if (headers == null) {",
          "224:             headers = new LinkedHashMap<>();",
          "225:             message.put(Message.PROTOCOL_HEADERS, headers);",
          "226:         }",
          "227:         headers.put(headerName, Collections.singletonList(headerValue));",
          "228:     }",
          "230:     @ApplicationScoped",
          "231:     @Named(\"ClientAddHeader\")",
          "232:     public static class ClientAddHeader extends AbstractPhaseInterceptor<Message> {",
          "234:         public ClientAddHeader() {",
          "235:             super(Phase.PREPARE_SEND);",
          "236:         }",
          "238:         @Override",
          "239:         public void handleMessage(Message message) throws Fault {",
          "240:             addHeader(message, \"Client-Secret-Header\", \"client secret\");",
          "241:         }",
          "243:     }",
          "245:     @ApplicationScoped",
          "246:     @Named(\"ServiceAddHeader\")",
          "247:     public static class ServiceAddHeader extends AbstractPhaseInterceptor<Message> {",
          "249:         public ServiceAddHeader() {",
          "250:             super(Phase.PREPARE_SEND);",
          "251:         }",
          "253:         @Override",
          "254:         public void handleMessage(Message message) throws Fault {",
          "255:             addHeader(message, \"Service-Secret-Header\", \"service secret\");",
          "256:         }",
          "258:     }",
          "259: }",
          "",
          "---------------"
        ],
        "extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java||extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java": [
          "File: extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java -> extensions/core/deployment/src/test/java/io/quarkiverse/cxf/deployment/logging/PerClientOrServiceSensitiveTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.quarkiverse.cxf.deployment.logging;",
          "3: import static org.assertj.core.api.Assertions.assertThat;",
          "5: import java.util.Collections;",
          "6: import java.util.LinkedHashMap;",
          "7: import java.util.List;",
          "8: import java.util.Map;",
          "9: import java.util.Objects;",
          "10: import java.util.function.Predicate;",
          "11: import java.util.logging.LogRecord;",
          "12: import java.util.regex.Pattern;",
          "14: import jakarta.enterprise.context.ApplicationScoped;",
          "15: import jakarta.inject.Named;",
          "16: import jakarta.jws.WebMethod;",
          "17: import jakarta.jws.WebParam;",
          "18: import jakarta.jws.WebService;",
          "19: import jakarta.xml.bind.annotation.XmlAccessType;",
          "20: import jakarta.xml.bind.annotation.XmlAccessorType;",
          "21: import jakarta.xml.bind.annotation.XmlElement;",
          "22: import jakarta.xml.bind.annotation.XmlType;",
          "24: import org.apache.cxf.interceptor.Fault;",
          "25: import org.apache.cxf.message.Message;",
          "26: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
          "27: import org.apache.cxf.phase.Phase;",
          "28: import org.assertj.core.api.Assertions;",
          "29: import org.jboss.shrinkwrap.api.ShrinkWrap;",
          "30: import org.jboss.shrinkwrap.api.spec.JavaArchive;",
          "31: import org.junit.jupiter.api.Test;",
          "32: import org.junit.jupiter.api.extension.RegisterExtension;",
          "34: import io.quarkiverse.cxf.annotation.CXFClient;",
          "35: import io.quarkus.test.QuarkusUnitTest;",
          "37: public class PerClientOrServiceSensitiveTest {",
          "39:     @RegisterExtension",
          "40:     public static final QuarkusUnitTest test = new QuarkusUnitTest()",
          "41:             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)",
          "42:                     .addClasses(HelloService.class, HelloServiceImpl.class, Person.class, ServiceAddHeader.class,",
          "43:                             ClientAddHeader.class))",
          "46:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".implementor\",",
          "47:                     HelloServiceImpl.class.getName())",
          "48:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.enabled\", \"true\")",
          "49:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".out-interceptors\", \"#ServiceAddHeader\")",
          "50:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.sensitive-element-names\", \"firstName,greetingPrefix\")",
          "51:             .overrideConfigKey(\"quarkus.cxf.endpoint.\\\"/hello\\\".logging.sensitive-protocol-header-names\",",
          "52:                     \"Service-Secret-Header\")",
          "54:             .overrideConfigKey(\"quarkus.cxf.client.hello.client-endpoint-url\", \"http://localhost:8081/services/hello\")",
          "55:             .overrideConfigKey(\"quarkus.cxf.client.hello.out-interceptors\", \"#ClientAddHeader\")",
          "56:             .overrideConfigKey(\"quarkus.cxf.client.hello.service-interface\", HelloService.class.getName())",
          "57:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.enabled\", \"true\")",
          "58:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.sensitive-element-names\", \"surname,greetingSuffix\")",
          "59:             .overrideConfigKey(\"quarkus.cxf.client.hello.logging.sensitive-protocol-header-names\", \"Client-Secret-Header\")",
          "61:             .setLogRecordPredicate(logRecord -> logRecord.getLoggerName().contains(\"HelloService.RE\")) // REQ_[IN|OUT] or RESP_[IN|OUT]",
          "62:             .assertLogRecords(records ->",
          "64:             assertThat(records)",
          "65:                     .extracting(LogRecord::getMessage)",
          "66:                     .anyMatch(messageExists(\"REQ_OUT\", \"Client-Secret-Header=XXX\",",
          "67:                             \"<person><firstName>Joe</firstName><surname>XXX</surname></person>\"))",
          "68:                     .anyMatch(messageExists(\"REQ_IN\", \"Client-Secret-Header=client secret\",",
          "69:                             \"<person><firstName>XXX</firstName><surname>Doe</surname></person>\"))",
          "70:                     .anyMatch(messageExists(\"RESP_OUT\", \"Service-Secret-Header=XXX\",",
          "71:                             \"<return><greetingPrefix>XXX</greetingPrefix><greetingSuffix>Joe Doe</greetingSuffix></return>\"))",
          "72:                     .anyMatch(messageExists(\"RESP_IN\", \"Service-Secret-Header=service secret\",",
          "73:                             \"<return><greetingPrefix>Hello</greetingPrefix><greetingSuffix>XXX</greetingSuffix></return>\"))",
          "74:                     .hasSize(4));",
          "76:     ;",
          "78:     @CXFClient(\"hello\")",
          "79:     HelloService hello;",
          "81:     @Test",
          "82:     void sensitive() {",
          "83:         Assertions.assertThat(hello.hello(new Person(\"Joe\", \"Doe\"))).isEqualTo(new Greeting(\"Hello\", \"Joe Doe\"));",
          "84:     }",
          "86:     static Predicate<String> messageExists(String messageKind, String headersSubstring, String payloadSubstring) {",
          "87:         return msg -> Pattern.compile(",
          "88:                 \"^\" + messageKind + \".*Headers: \\\\{[^\\\\}]*\" + headersSubstring + \"[^\\\\}]*\\\\}.*Payload: .*\" + payloadSubstring",
          "89:                         + \".*$\",",
          "90:                 Pattern.DOTALL).matcher(msg).matches();",
          "91:     }",
          "93:     @WebService",
          "94:     public interface HelloService {",
          "96:         @WebMethod",
          "97:         Greeting hello(@WebParam(name = \"person\") Person person);",
          "99:     }",
          "101:     @WebService(serviceName = \"HelloService\")",
          "102:     public static class HelloServiceImpl implements HelloService {",
          "104:         @Override",
          "105:         public Greeting hello(Person person) {",
          "106:             return new Greeting(\"Hello\", person.firstName + \" \" + person.surname);",
          "107:         }",
          "108:     }",
          "110:     @XmlAccessorType(XmlAccessType.FIELD)",
          "111:     @XmlType(name = \"person\")",
          "112:     public static class Person {",
          "114:         @XmlElement",
          "115:         private String firstName;",
          "117:         @XmlElement",
          "118:         private String surname;",
          "120:         public Person() {",
          "121:         }",
          "123:         public Person(String firstName, String surname) {",
          "124:             this.firstName = firstName;",
          "125:             this.surname = surname;",
          "126:         }",
          "128:         public String getFirstName() {",
          "129:             return firstName;",
          "130:         }",
          "132:         public void setFirstName(String name) {",
          "133:             this.firstName = name;",
          "134:         }",
          "136:         public String getSurname() {",
          "137:             return surname;",
          "138:         }",
          "140:         public void setSurname(String description) {",
          "141:             this.surname = description;",
          "142:         }",
          "144:         @Override",
          "145:         public boolean equals(Object obj) {",
          "146:             if (!(obj instanceof Person)) {",
          "147:                 return false;",
          "148:             }",
          "150:             Person other = (Person) obj;",
          "151:             return Objects.equals(other.firstName, this.firstName) && Objects.equals(other.surname, this.surname);",
          "152:         }",
          "154:         @Override",
          "155:         public int hashCode() {",
          "156:             return Objects.hash(this.firstName, this.surname);",
          "157:         }",
          "159:         @Override",
          "160:         public String toString() {",
          "161:             return firstName + \" \" + surname;",
          "162:         }",
          "164:     }",
          "166:     @XmlAccessorType(XmlAccessType.FIELD)",
          "167:     @XmlType(name = \"greeting\")",
          "168:     public static class Greeting {",
          "170:         @XmlElement",
          "171:         private String greetingPrefix;",
          "173:         @XmlElement",
          "174:         private String greetingSuffix;",
          "176:         public Greeting() {",
          "177:         }",
          "179:         public Greeting(String firstName, String surname) {",
          "180:             this.greetingPrefix = firstName;",
          "181:             this.greetingSuffix = surname;",
          "182:         }",
          "184:         public String getGreetingPrefix() {",
          "185:             return greetingPrefix;",
          "186:         }",
          "188:         public void setGreetingPrefix(String name) {",
          "189:             this.greetingPrefix = name;",
          "190:         }",
          "192:         public String getGreetingSuffix() {",
          "193:             return greetingSuffix;",
          "194:         }",
          "196:         public void setGreetingSuffix(String description) {",
          "197:             this.greetingSuffix = description;",
          "198:         }",
          "200:         @Override",
          "201:         public boolean equals(Object obj) {",
          "202:             if (!(obj instanceof Greeting)) {",
          "203:                 return false;",
          "204:             }",
          "206:             Greeting other = (Greeting) obj;",
          "207:             return Objects.equals(other.greetingPrefix, this.greetingPrefix)",
          "208:                     && Objects.equals(other.greetingSuffix, this.greetingSuffix);",
          "209:         }",
          "211:         @Override",
          "212:         public int hashCode() {",
          "213:             return Objects.hash(this.greetingPrefix, this.greetingSuffix);",
          "214:         }",
          "216:         @Override",
          "217:         public String toString() {",
          "218:             return greetingPrefix + \" \" + greetingSuffix;",
          "219:         }",
          "221:     }",
          "223:     static void addHeader(Message message, String headerName, String headerValue) {",
          "224:         Map<String, List<String>> headers = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);",
          "225:         if (headers == null) {",
          "226:             headers = new LinkedHashMap<>();",
          "227:             message.put(Message.PROTOCOL_HEADERS, headers);",
          "228:         }",
          "229:         headers.put(headerName, Collections.singletonList(headerValue));",
          "230:     }",
          "232:     @ApplicationScoped",
          "233:     @Named(\"ClientAddHeader\")",
          "234:     public static class ClientAddHeader extends AbstractPhaseInterceptor<Message> {",
          "236:         public ClientAddHeader() {",
          "237:             super(Phase.PREPARE_SEND);",
          "238:         }",
          "240:         @Override",
          "241:         public void handleMessage(Message message) throws Fault {",
          "242:             addHeader(message, \"Client-Secret-Header\", \"client secret\");",
          "243:         }",
          "245:     }",
          "247:     @ApplicationScoped",
          "248:     @Named(\"ServiceAddHeader\")",
          "249:     public static class ServiceAddHeader extends AbstractPhaseInterceptor<Message> {",
          "251:         public ServiceAddHeader() {",
          "252:             super(Phase.PREPARE_SEND);",
          "253:         }",
          "255:         @Override",
          "256:         public void handleMessage(Message message) throws Fault {",
          "257:             addHeader(message, \"Service-Secret-Header\", \"service secret\");",
          "258:         }",
          "260:     }",
          "261: }",
          "",
          "---------------"
        ],
        "extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java||extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java": [
          "File: extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java -> extensions/core/runtime/src/main/java/io/quarkiverse/cxf/logging/LoggingFactoryCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:                 feature::addOutBinaryContentMediaTypes);",
          "76:         addList(global.binaryContentMediaTypes(), clientOrServiceConfig.inBinaryContentMediaTypes(),",
          "77:                 feature::addBinaryContentMediaTypes);",
          "80:         return feature;",
          "81:     }",
          "",
          "[Removed Lines]",
          "78:         global.sensitiveElementNames().ifPresent(feature::addSensitiveElementNames);",
          "79:         global.sensitiveProtocolHeaderNames().ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "",
          "[Added Lines]",
          "79:         clientOrServiceConfig.sensitiveElementNames()",
          "80:                 .or(global::sensitiveElementNames)",
          "81:                 .ifPresent(feature::addSensitiveElementNames);",
          "82:         clientOrServiceConfig.sensitiveProtocolHeaderNames()",
          "83:                 .or(global::sensitiveProtocolHeaderNames)",
          "84:                 .ifPresent(feature::addSensitiveProtocolHeaderNames);",
          "",
          "---------------"
        ]
      }
    }
  ]
}