{
  "cve_id": "CVE-2021-21265",
  "cve_desc": "October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. In October before version 1.1.2, when running on poorly configured servers (i.e. the server routes any request, regardless of the HOST header to an October CMS instance) the potential exists for Host Header Poisoning attacks to succeed. This has been addressed in version 1.1.2 by adding a feature to allow a set of trusted hosts to be specified in the application. As a workaround one may set the configuration setting cms.linkPolicy to force.",
  "repo": "octobercms/library",
  "patch_hash": "f86fcbcd066d6f8b939e8fe897409d152b11c3c6",
  "patch_info": {
    "commit_hash": "f86fcbcd066d6f8b939e8fe897409d152b11c3c6",
    "repo": "octobercms/library",
    "commit_url": "https://github.com/octobercms/library/commit/f86fcbcd066d6f8b939e8fe897409d152b11c3c6",
    "files": [
      "src/Foundation/Http/Kernel.php",
      "src/Foundation/Http/Middleware/CheckForTrustedHost.php",
      "src/Http/Middleware/TrustHosts.php",
      "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
    ],
    "message": "Add trusted hosts support to library (#549)\n\nAdds support for a new configuration value app.trustedHosts that defines the allowed hosts for the application. This allows a developer to prevent host header poisoning.\n\nPossible values:\n\ntrue: Trust the host specified in app.url, as well as all subdomains.\nfalse: Disable the trusted hosts feature.\narray: Defines the domains to be trusted hosts. Each item should be a string defining a domain, or a regex pattern.\n\nRelated: https://github.com/octobercms/october/pull/5423\n(cherry picked from commit f29865ae3db7a03be7c49294cd93980ec457f10d)",
    "before_after_code_files": [
      "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
      "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
      "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
      "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
    ]
  },
  "patch_diff": {
    "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php": [
      "File: src/Foundation/Http/Kernel.php -> src/Foundation/Http/Kernel.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:     protected $bootstrappers = [",
      "17:         \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,",
      "18:         \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,",
      "20:         \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,",
      "21:         \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,",
      "22:     ];",
      "",
      "[Removed Lines]",
      "13:         '\\October\\Rain\\Foundation\\Bootstrap\\RegisterClassLoader',",
      "14:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadEnvironmentVariables',",
      "15:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadConfiguration',",
      "16:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadTranslation',",
      "19:         '\\October\\Rain\\Foundation\\Bootstrap\\RegisterOctober',",
      "",
      "[Added Lines]",
      "13:         \\October\\Rain\\Foundation\\Bootstrap\\RegisterClassLoader::class,",
      "14:         \\October\\Rain\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,",
      "15:         \\October\\Rain\\Foundation\\Bootstrap\\LoadConfiguration::class,",
      "16:         \\October\\Rain\\Foundation\\Bootstrap\\LoadTranslation::class,",
      "19:         \\October\\Rain\\Foundation\\Bootstrap\\RegisterOctober::class,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:     protected $middleware = [",
      "31:     ];",
      "",
      "[Removed Lines]",
      "30:         '\\October\\Rain\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',",
      "",
      "[Added Lines]",
      "30:         \\October\\Rain\\Foundation\\Http\\Middleware\\CheckForTrustedHost::class,",
      "31:         \\October\\Rain\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,",
      "",
      "---------------"
    ],
    "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php": [
      "File: src/Foundation/Http/Middleware/CheckForTrustedHost.php -> src/Foundation/Http/Middleware/CheckForTrustedHost.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php namespace October\\Rain\\Foundation\\Http\\Middleware;",
      "3: use Config;",
      "4: use October\\Rain\\Http\\Middleware\\TrustHosts as BaseMiddleware;",
      "6: class CheckForTrustedHost extends BaseMiddleware",
      "7: {",
      "27:     public function hosts()",
      "28:     {",
      "29:         return self::processTrustedHosts(Config::get('app.trustedHosts', []));",
      "30:     }",
      "38:     public static function processTrustedHosts($hosts)",
      "39:     {",
      "40:         if ($hosts === true) {",
      "41:             $url = Config::get('app.url', null);",
      "44:             if (is_null($url)) {",
      "45:                 return [];",
      "46:             }",
      "50:             $host = parse_url($url, PHP_URL_HOST);",
      "51:             if (preg_match('/^www\\.(.*?)$/i', $host, $matches)) {",
      "52:                 $host = '^(www\\.)?' . preg_quote($matches[1]) . '$';",
      "53:             } else {",
      "54:                 $host = '^(www\\.)?' . preg_quote($host) . '$';",
      "55:             }",
      "57:             $hosts = [$host];",
      "58:         } elseif ($hosts === false) {",
      "59:             return [];",
      "60:         }",
      "62:         $hosts = array_map(function ($host) {",
      "64:             if (filter_var($host, FILTER_VALIDATE_URL)) {",
      "65:                 $host = parse_url($host, PHP_URL_HOST);",
      "66:             }",
      "69:             if (",
      "70:                 filter_var($host, FILTER_VALIDATE_IP)",
      "71:                 || filter_var($host, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME)",
      "72:             ) {",
      "73:                 return '^' . preg_quote($host) . '$';",
      "74:             }",
      "77:             return $host;",
      "78:         }, $hosts);",
      "80:         return $hosts;",
      "81:     }",
      "82: }",
      "",
      "---------------"
    ],
    "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php": [
      "File: src/Http/Middleware/TrustHosts.php -> src/Http/Middleware/TrustHosts.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php namespace October\\Rain\\Http\\Middleware;",
      "3: use Illuminate\\Contracts\\Foundation\\Application;",
      "4: use Illuminate\\Http\\Request;",
      "6: abstract class TrustHosts",
      "7: {",
      "13:     protected $app;",
      "21:     public function __construct(Application $app)",
      "22:     {",
      "23:         $this->app = $app;",
      "24:     }",
      "31:     abstract public function hosts();",
      "40:     public function handle(Request $request, $next)",
      "41:     {",
      "42:         if ($this->shouldSpecifyTrustedHosts()) {",
      "43:             Request::setTrustedHosts(array_filter($this->hosts()));",
      "44:         }",
      "46:         return $next($request);",
      "47:     }",
      "54:     protected function shouldSpecifyTrustedHosts()",
      "55:     {",
      "56:         return $this->app['config']->get('app.env') !== 'local'",
      "57:             && $this->app->runningUnitTests() === false;",
      "58:     }",
      "65:     protected function allSubdomainsOfApplicationUrl()",
      "66:     {",
      "67:         if ($host = parse_url($this->app['config']->get('app.url'), PHP_URL_HOST)) {",
      "68:             return '^(.+\\.)?'.preg_quote($host).'$';",
      "69:         }",
      "70:     }",
      "71: }",
      "",
      "---------------"
    ],
    "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php": [
      "File: tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php -> tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: use Illuminate\\Http\\Request;",
      "4: use Illuminate\\Routing\\Route;",
      "5: use Illuminate\\Routing\\RouteCollection;",
      "6: use October\\Rain\\Router\\UrlGenerator;",
      "7: use October\\Rain\\Foundation\\Http\\Middleware\\CheckForTrustedHost;",
      "8: use Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException;",
      "13: class CheckForTrustedHostTest extends TestCase",
      "14: {",
      "15:     protected static $orignalTrustHosts;",
      "17:     public static function setUpBeforeClass(): void",
      "18:     {",
      "19:         self::$orignalTrustHosts = Request::getTrustedHosts();",
      "20:     }",
      "22:     public static function tearDownAfterClass(): void",
      "23:     {",
      "24:         Request::setTrustedHosts(self::$orignalTrustHosts);",
      "25:     }",
      "27:     public function testTrustedHost()",
      "28:     {",
      "29:         $trustedHosts = ['octobercms.com'];",
      "30:         $headers = ['HOST' => 'octobercms.com'];",
      "31:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "32:         $url = $urlGenerator->to('/');",
      "34:         $this->assertEquals('http://octobercms.com', $url);",
      "35:     }",
      "37:     public function testTrustedHostWwwSubdomain()",
      "38:     {",
      "39:         $trustedHosts = ['www.octobercms.com'];",
      "40:         $headers = ['HOST' => 'www.octobercms.com'];",
      "41:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "42:         $url = $urlGenerator->to('/');",
      "44:         $this->assertEquals('http://www.octobercms.com', $url);",
      "45:     }",
      "47:     public function testTrustedHostWwwSubdomainFailure()",
      "48:     {",
      "49:         $this->expectException(SuspiciousOperationException::class);",
      "51:         $trustedHosts = ['octobercms.com'];",
      "52:         $headers = ['HOST' => 'www.octobercms.com'];",
      "53:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "54:         $urlGenerator->to('/');",
      "55:     }",
      "57:     public function testTrustedHostWwwRegex()",
      "58:     {",
      "59:         $trustedHosts = ['^(www\\.)?octobercms\\.com$'];",
      "60:         $headers = ['HOST' => 'octobercms.com'];",
      "61:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "62:         $url = $urlGenerator->to('/');",
      "64:         $this->assertEquals('http://octobercms.com', $url);",
      "66:         $headers = ['HOST' => 'www.octobercms.com'];",
      "67:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "68:         $url = $urlGenerator->to('/');",
      "70:         $this->assertEquals('http://www.octobercms.com', $url);",
      "71:     }",
      "73:     public function testTrustedIpHost()",
      "74:     {",
      "75:         $trustedHosts = ['127.0.0.1'];",
      "76:         $headers = ['HOST' => '127.0.0.1'];",
      "77:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "78:         $url = $urlGenerator->to('/');",
      "80:         $this->assertEquals('http://127.0.0.1', $url);",
      "81:     }",
      "83:     public function testNoTrustedHostsSet()",
      "84:     {",
      "85:         $trustedHosts = false;",
      "86:         $headers = ['HOST' => 'malicious.com'];",
      "87:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "88:         $url = $urlGenerator->to('/');",
      "90:         $this->assertEquals('http://malicious.com', $url);",
      "91:     }",
      "93:     public function testThrowExceptionForUntrustedHosts()",
      "94:     {",
      "95:         $this->expectException(SuspiciousOperationException::class);",
      "97:         $trustedHosts = ['octobercms.com'];",
      "98:         $headers = ['HOST' => 'malicious.com'];",
      "99:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
      "100:         $urlGenerator->to('/');",
      "101:     }",
      "103:     public function testThrowExceptionForUntrustedServerName()",
      "104:     {",
      "105:         $this->expectException(SuspiciousOperationException::class);",
      "107:         $trustedHosts = ['octobercms.com'];",
      "108:         $headers = [];",
      "109:         $servers = ['SERVER_NAME' => 'malicious.com'];",
      "110:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "111:         $urlGenerator->to('/');",
      "112:     }",
      "114:     public function testThrowExceptionForUntrustedServerAddr()",
      "115:     {",
      "116:         $this->expectException(SuspiciousOperationException::class);",
      "118:         $trustedHosts = ['octobercms.com'];",
      "119:         $headers = [];",
      "120:         $servers = ['SERVER_ADDR' => 'malicious.com'];",
      "121:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "122:         $urlGenerator->to('/');",
      "123:     }",
      "125:     public function testRegexTrustedHost()",
      "126:     {",
      "127:         $trustedHosts = ['^[a-z0-9]+\\.octobercms\\.com$'];",
      "128:         $headers = ['HOST' => 'test123.octobercms.com'];",
      "129:         $servers = [];",
      "130:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "131:         $url = $urlGenerator->to('/');",
      "133:         $this->assertEquals('http://test123.octobercms.com', $url);",
      "135:         $headers = ['HOST' => 'test456.octobercms.com'];",
      "136:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "137:         $url = $urlGenerator->to('/');",
      "139:         $this->assertEquals('http://test456.octobercms.com', $url);",
      "140:     }",
      "142:     public function testRegexFailTrustedHost()",
      "143:     {",
      "144:         $this->expectException(SuspiciousOperationException::class);",
      "146:         $trustedHosts = ['^[a-z0-9]+\\.octobercms\\.com$'];",
      "147:         $headers = ['HOST' => 'test.123.octobercms.com'];",
      "148:         $servers = [];",
      "149:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "150:         $urlGenerator->to('/');",
      "151:     }",
      "153:     public function testArrayTrustedHost()",
      "154:     {",
      "155:         $trustedHosts = ['test1.octobercms.com', 'test2.octobercms.com'];",
      "156:         $headers = ['HOST' => 'test1.octobercms.com'];",
      "157:         $servers = [];",
      "158:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "159:         $url = $urlGenerator->to('/');",
      "161:         $this->assertEquals('http://test1.octobercms.com', $url);",
      "163:         $headers = ['HOST' => 'test2.octobercms.com'];",
      "164:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "165:         $url = $urlGenerator->to('/');",
      "167:         $this->assertEquals('http://test2.octobercms.com', $url);",
      "168:     }",
      "170:     public function testArrayFailTrustedHost()",
      "171:     {",
      "172:         $this->expectException(SuspiciousOperationException::class);",
      "174:         $trustedHosts = ['test1.octobercms.com', 'test2.octobercms.com'];",
      "175:         $headers = ['HOST' => 'test3.octobercms.com'];",
      "176:         $servers = [];",
      "177:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
      "178:         $urlGenerator->to('/');",
      "179:     }",
      "181:     protected function createUrlGenerator($trustedHosts = [], $headers = [], $servers = [])",
      "182:     {",
      "183:         $middleware = $this->getMockBuilder(CheckForTrustedHost::class)",
      "184:             ->disableOriginalConstructor()",
      "185:             ->setMethods(['hosts', 'shouldSpecifyTrustedHosts'])",
      "186:             ->getMock();",
      "188:         $middleware->expects($this->any())",
      "189:             ->method('hosts')",
      "190:             ->willReturn(CheckForTrustedHost::processTrustedHosts($trustedHosts));",
      "192:         $middleware->expects($this->any())",
      "193:             ->method('shouldSpecifyTrustedHosts')",
      "194:             ->willReturn(true);",
      "196:         $request = new Request;",
      "198:         foreach ($headers as $key => $val) {",
      "199:             $request->headers->set($key, $val);",
      "200:         }",
      "202:         foreach ($servers as $key => $val) {",
      "203:             $request->server->set($key, $val);",
      "204:         }",
      "206:         $middleware->handle($request, function () {",
      "207:         });",
      "209:         $routes = new RouteCollection;",
      "210:         $routes->add(new Route('GET', 'foo', [",
      "211:             'uses' => 'FooController@index',",
      "212:             'as' => 'foo_index',",
      "213:         ]));",
      "215:         return new UrlGenerator($routes, $request);",
      "216:     }",
      "217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70406b078d32d341002aa8b200def6b41156675b",
      "candidate_info": {
        "commit_hash": "70406b078d32d341002aa8b200def6b41156675b",
        "repo": "octobercms/library",
        "commit_url": "https://github.com/octobercms/library/commit/70406b078d32d341002aa8b200def6b41156675b",
        "files": [
          "src/Foundation/Http/Kernel.php",
          "src/Foundation/Http/Middleware/CheckForTrustedHost.php",
          "src/Http/Middleware/TrustHosts.php",
          "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
        ],
        "message": "Add trusted hosts support to library (#549) (#552)\n\nAdds support for a new configuration value app.trustedHosts that defines the allowed hosts for the application. This allows a developer to prevent host header poisoning.\n\nPossible values:\n\ntrue: Trust the host specified in app.url, as well as all subdomains.\nfalse: Disable the trusted hosts feature.\narray: Defines the domains to be trusted hosts. Each item should be a string defining a domain, or a regex pattern.\n\nRelated: https://github.com/octobercms/october/pull/5423\n(cherry picked from commit f29865ae3db7a03be7c49294cd93980ec457f10d)\n\nCo-authored-by: Ben Thomson <git@alfreido.com>",
        "before_after_code_files": [
          "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
          "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
          "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
          "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/octobercms/library/pull/552"
        ],
        "olp_code_files": {
          "patch": [
            "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
            "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
            "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
            "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
          ],
          "candidate": [
            "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
            "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
            "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
            "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php": [
          "File: src/Foundation/Http/Kernel.php -> src/Foundation/Http/Kernel.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     protected $bootstrappers = [",
          "17:         \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,",
          "18:         \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,",
          "20:         \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,",
          "21:         \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,",
          "22:     ];",
          "",
          "[Removed Lines]",
          "13:         '\\October\\Rain\\Foundation\\Bootstrap\\RegisterClassLoader',",
          "14:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadEnvironmentVariables',",
          "15:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadConfiguration',",
          "16:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadTranslation',",
          "19:         '\\October\\Rain\\Foundation\\Bootstrap\\RegisterOctober',",
          "",
          "[Added Lines]",
          "13:         \\October\\Rain\\Foundation\\Bootstrap\\RegisterClassLoader::class,",
          "14:         \\October\\Rain\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,",
          "15:         \\October\\Rain\\Foundation\\Bootstrap\\LoadConfiguration::class,",
          "16:         \\October\\Rain\\Foundation\\Bootstrap\\LoadTranslation::class,",
          "19:         \\October\\Rain\\Foundation\\Bootstrap\\RegisterOctober::class,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     protected $middleware = [",
          "31:     ];",
          "",
          "[Removed Lines]",
          "30:         '\\October\\Rain\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',",
          "",
          "[Added Lines]",
          "30:         \\October\\Rain\\Foundation\\Http\\Middleware\\CheckForTrustedHost::class,",
          "31:         \\October\\Rain\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,",
          "",
          "---------------"
        ],
        "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php": [
          "File: src/Foundation/Http/Middleware/CheckForTrustedHost.php -> src/Foundation/Http/Middleware/CheckForTrustedHost.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php namespace October\\Rain\\Foundation\\Http\\Middleware;",
          "3: use Config;",
          "4: use October\\Rain\\Http\\Middleware\\TrustHosts as BaseMiddleware;",
          "6: class CheckForTrustedHost extends BaseMiddleware",
          "7: {",
          "27:     public function hosts()",
          "28:     {",
          "29:         return self::processTrustedHosts(Config::get('app.trustedHosts', []));",
          "30:     }",
          "38:     public static function processTrustedHosts($hosts)",
          "39:     {",
          "40:         if ($hosts === true) {",
          "41:             $url = Config::get('app.url', null);",
          "44:             if (is_null($url)) {",
          "45:                 return [];",
          "46:             }",
          "50:             $host = parse_url($url, PHP_URL_HOST);",
          "51:             if (preg_match('/^www\\.(.*?)$/i', $host, $matches)) {",
          "52:                 $host = '^(www\\.)?' . preg_quote($matches[1]) . '$';",
          "53:             } else {",
          "54:                 $host = '^(www\\.)?' . preg_quote($host) . '$';",
          "55:             }",
          "57:             $hosts = [$host];",
          "58:         } elseif ($hosts === false) {",
          "59:             return [];",
          "60:         }",
          "62:         $hosts = array_map(function ($host) {",
          "64:             if (filter_var($host, FILTER_VALIDATE_URL)) {",
          "65:                 $host = parse_url($host, PHP_URL_HOST);",
          "66:             }",
          "69:             if (",
          "70:                 filter_var($host, FILTER_VALIDATE_IP)",
          "71:                 || filter_var($host, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME)",
          "72:             ) {",
          "73:                 return '^' . preg_quote($host) . '$';",
          "74:             }",
          "77:             return $host;",
          "78:         }, $hosts);",
          "80:         return $hosts;",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php": [
          "File: src/Http/Middleware/TrustHosts.php -> src/Http/Middleware/TrustHosts.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php namespace October\\Rain\\Http\\Middleware;",
          "3: use Illuminate\\Contracts\\Foundation\\Application;",
          "4: use Illuminate\\Http\\Request;",
          "6: abstract class TrustHosts",
          "7: {",
          "13:     protected $app;",
          "21:     public function __construct(Application $app)",
          "22:     {",
          "23:         $this->app = $app;",
          "24:     }",
          "31:     abstract public function hosts();",
          "40:     public function handle(Request $request, $next)",
          "41:     {",
          "42:         if ($this->shouldSpecifyTrustedHosts()) {",
          "43:             Request::setTrustedHosts(array_filter($this->hosts()));",
          "44:         }",
          "46:         return $next($request);",
          "47:     }",
          "54:     protected function shouldSpecifyTrustedHosts()",
          "55:     {",
          "56:         return $this->app['config']->get('app.env') !== 'local'",
          "57:             && $this->app->runningUnitTests() === false;",
          "58:     }",
          "65:     protected function allSubdomainsOfApplicationUrl()",
          "66:     {",
          "67:         if ($host = parse_url($this->app['config']->get('app.url'), PHP_URL_HOST)) {",
          "68:             return '^(.+\\.)?'.preg_quote($host).'$';",
          "69:         }",
          "70:     }",
          "71: }",
          "",
          "---------------"
        ],
        "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php": [
          "File: tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php -> tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: use Illuminate\\Http\\Request;",
          "4: use Illuminate\\Routing\\Route;",
          "5: use Illuminate\\Routing\\RouteCollection;",
          "6: use October\\Rain\\Router\\UrlGenerator;",
          "7: use October\\Rain\\Foundation\\Http\\Middleware\\CheckForTrustedHost;",
          "8: use Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException;",
          "13: class CheckForTrustedHostTest extends TestCase",
          "14: {",
          "15:     protected static $orignalTrustHosts;",
          "17:     public static function setUpBeforeClass(): void",
          "18:     {",
          "19:         self::$orignalTrustHosts = Request::getTrustedHosts();",
          "20:     }",
          "22:     public static function tearDownAfterClass(): void",
          "23:     {",
          "24:         Request::setTrustedHosts(self::$orignalTrustHosts);",
          "25:     }",
          "27:     public function testTrustedHost()",
          "28:     {",
          "29:         $trustedHosts = ['octobercms.com'];",
          "30:         $headers = ['HOST' => 'octobercms.com'];",
          "31:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "32:         $url = $urlGenerator->to('/');",
          "34:         $this->assertEquals('http://octobercms.com', $url);",
          "35:     }",
          "37:     public function testTrustedHostWwwSubdomain()",
          "38:     {",
          "39:         $trustedHosts = ['www.octobercms.com'];",
          "40:         $headers = ['HOST' => 'www.octobercms.com'];",
          "41:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "42:         $url = $urlGenerator->to('/');",
          "44:         $this->assertEquals('http://www.octobercms.com', $url);",
          "45:     }",
          "47:     public function testTrustedHostWwwSubdomainFailure()",
          "48:     {",
          "49:         $this->expectException(SuspiciousOperationException::class);",
          "51:         $trustedHosts = ['octobercms.com'];",
          "52:         $headers = ['HOST' => 'www.octobercms.com'];",
          "53:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "54:         $urlGenerator->to('/');",
          "55:     }",
          "57:     public function testTrustedHostWwwRegex()",
          "58:     {",
          "59:         $trustedHosts = ['^(www\\.)?octobercms\\.com$'];",
          "60:         $headers = ['HOST' => 'octobercms.com'];",
          "61:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "62:         $url = $urlGenerator->to('/');",
          "64:         $this->assertEquals('http://octobercms.com', $url);",
          "66:         $headers = ['HOST' => 'www.octobercms.com'];",
          "67:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "68:         $url = $urlGenerator->to('/');",
          "70:         $this->assertEquals('http://www.octobercms.com', $url);",
          "71:     }",
          "73:     public function testTrustedIpHost()",
          "74:     {",
          "75:         $trustedHosts = ['127.0.0.1'];",
          "76:         $headers = ['HOST' => '127.0.0.1'];",
          "77:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "78:         $url = $urlGenerator->to('/');",
          "80:         $this->assertEquals('http://127.0.0.1', $url);",
          "81:     }",
          "83:     public function testNoTrustedHostsSet()",
          "84:     {",
          "85:         $trustedHosts = false;",
          "86:         $headers = ['HOST' => 'malicious.com'];",
          "87:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "88:         $url = $urlGenerator->to('/');",
          "90:         $this->assertEquals('http://malicious.com', $url);",
          "91:     }",
          "93:     public function testThrowExceptionForUntrustedHosts()",
          "94:     {",
          "95:         $this->expectException(SuspiciousOperationException::class);",
          "97:         $trustedHosts = ['octobercms.com'];",
          "98:         $headers = ['HOST' => 'malicious.com'];",
          "99:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "100:         $urlGenerator->to('/');",
          "101:     }",
          "103:     public function testThrowExceptionForUntrustedServerName()",
          "104:     {",
          "105:         $this->expectException(SuspiciousOperationException::class);",
          "107:         $trustedHosts = ['octobercms.com'];",
          "108:         $headers = [];",
          "109:         $servers = ['SERVER_NAME' => 'malicious.com'];",
          "110:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "111:         $urlGenerator->to('/');",
          "112:     }",
          "114:     public function testThrowExceptionForUntrustedServerAddr()",
          "115:     {",
          "116:         $this->expectException(SuspiciousOperationException::class);",
          "118:         $trustedHosts = ['octobercms.com'];",
          "119:         $headers = [];",
          "120:         $servers = ['SERVER_ADDR' => 'malicious.com'];",
          "121:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "122:         $urlGenerator->to('/');",
          "123:     }",
          "125:     public function testRegexTrustedHost()",
          "126:     {",
          "127:         $trustedHosts = ['^[a-z0-9]+\\.octobercms\\.com$'];",
          "128:         $headers = ['HOST' => 'test123.octobercms.com'];",
          "129:         $servers = [];",
          "130:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "131:         $url = $urlGenerator->to('/');",
          "133:         $this->assertEquals('http://test123.octobercms.com', $url);",
          "135:         $headers = ['HOST' => 'test456.octobercms.com'];",
          "136:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "137:         $url = $urlGenerator->to('/');",
          "139:         $this->assertEquals('http://test456.octobercms.com', $url);",
          "140:     }",
          "142:     public function testRegexFailTrustedHost()",
          "143:     {",
          "144:         $this->expectException(SuspiciousOperationException::class);",
          "146:         $trustedHosts = ['^[a-z0-9]+\\.octobercms\\.com$'];",
          "147:         $headers = ['HOST' => 'test.123.octobercms.com'];",
          "148:         $servers = [];",
          "149:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "150:         $urlGenerator->to('/');",
          "151:     }",
          "153:     public function testArrayTrustedHost()",
          "154:     {",
          "155:         $trustedHosts = ['test1.octobercms.com', 'test2.octobercms.com'];",
          "156:         $headers = ['HOST' => 'test1.octobercms.com'];",
          "157:         $servers = [];",
          "158:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "159:         $url = $urlGenerator->to('/');",
          "161:         $this->assertEquals('http://test1.octobercms.com', $url);",
          "163:         $headers = ['HOST' => 'test2.octobercms.com'];",
          "164:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "165:         $url = $urlGenerator->to('/');",
          "167:         $this->assertEquals('http://test2.octobercms.com', $url);",
          "168:     }",
          "170:     public function testArrayFailTrustedHost()",
          "171:     {",
          "172:         $this->expectException(SuspiciousOperationException::class);",
          "174:         $trustedHosts = ['test1.octobercms.com', 'test2.octobercms.com'];",
          "175:         $headers = ['HOST' => 'test3.octobercms.com'];",
          "176:         $servers = [];",
          "177:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "178:         $urlGenerator->to('/');",
          "179:     }",
          "181:     protected function createUrlGenerator($trustedHosts = [], $headers = [], $servers = [])",
          "182:     {",
          "183:         $middleware = $this->getMockBuilder(CheckForTrustedHost::class)",
          "184:             ->disableOriginalConstructor()",
          "185:             ->setMethods(['hosts', 'shouldSpecifyTrustedHosts'])",
          "186:             ->getMock();",
          "188:         $middleware->expects($this->any())",
          "189:             ->method('hosts')",
          "190:             ->willReturn(CheckForTrustedHost::processTrustedHosts($trustedHosts));",
          "192:         $middleware->expects($this->any())",
          "193:             ->method('shouldSpecifyTrustedHosts')",
          "194:             ->willReturn(true);",
          "196:         $request = new Request;",
          "198:         foreach ($headers as $key => $val) {",
          "199:             $request->headers->set($key, $val);",
          "200:         }",
          "202:         foreach ($servers as $key => $val) {",
          "203:             $request->server->set($key, $val);",
          "204:         }",
          "206:         $middleware->handle($request, function () {",
          "207:         });",
          "209:         $routes = new RouteCollection;",
          "210:         $routes->add(new Route('GET', 'foo', [",
          "211:             'uses' => 'FooController@index',",
          "212:             'as' => 'foo_index',",
          "213:         ]));",
          "215:         return new UrlGenerator($routes, $request);",
          "216:     }",
          "217: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f29865ae3db7a03be7c49294cd93980ec457f10d",
      "candidate_info": {
        "commit_hash": "f29865ae3db7a03be7c49294cd93980ec457f10d",
        "repo": "octobercms/library",
        "commit_url": "https://github.com/octobercms/library/commit/f29865ae3db7a03be7c49294cd93980ec457f10d",
        "files": [
          "src/Foundation/Http/Kernel.php",
          "src/Foundation/Http/Middleware/CheckForTrustedHost.php",
          "src/Http/Middleware/TrustHosts.php",
          "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
        ],
        "message": "Add trusted hosts support to library (#549)\n\nAdds support for a new configuration value app.trustedHosts that defines the allowed hosts for the application. This allows a developer to prevent host header poisoning.\n\nPossible values:\n\ntrue: Trust the host specified in app.url, as well as all subdomains.\nfalse: Disable the trusted hosts feature.\narray: Defines the domains to be trusted hosts. Each item should be a string defining a domain, or a regex pattern.\n\nRelated: https://github.com/octobercms/october/pull/5423",
        "before_after_code_files": [
          "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
          "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
          "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
          "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
            "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
            "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
            "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
          ],
          "candidate": [
            "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php",
            "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php",
            "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php",
            "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Foundation/Http/Kernel.php||src/Foundation/Http/Kernel.php": [
          "File: src/Foundation/Http/Kernel.php -> src/Foundation/Http/Kernel.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     protected $bootstrappers = [",
          "17:         \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,",
          "18:         \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,",
          "20:         \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,",
          "21:         \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,",
          "22:     ];",
          "",
          "[Removed Lines]",
          "13:         '\\October\\Rain\\Foundation\\Bootstrap\\RegisterClassLoader',",
          "14:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadEnvironmentVariables',",
          "15:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadConfiguration',",
          "16:         '\\October\\Rain\\Foundation\\Bootstrap\\LoadTranslation',",
          "19:         '\\October\\Rain\\Foundation\\Bootstrap\\RegisterOctober',",
          "",
          "[Added Lines]",
          "13:         \\October\\Rain\\Foundation\\Bootstrap\\RegisterClassLoader::class,",
          "14:         \\October\\Rain\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,",
          "15:         \\October\\Rain\\Foundation\\Bootstrap\\LoadConfiguration::class,",
          "16:         \\October\\Rain\\Foundation\\Bootstrap\\LoadTranslation::class,",
          "19:         \\October\\Rain\\Foundation\\Bootstrap\\RegisterOctober::class,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     protected $middleware = [",
          "31:     ];",
          "",
          "[Removed Lines]",
          "30:         '\\October\\Rain\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',",
          "",
          "[Added Lines]",
          "30:         \\October\\Rain\\Foundation\\Http\\Middleware\\CheckForTrustedHost::class,",
          "31:         \\October\\Rain\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,",
          "",
          "---------------"
        ],
        "src/Foundation/Http/Middleware/CheckForTrustedHost.php||src/Foundation/Http/Middleware/CheckForTrustedHost.php": [
          "File: src/Foundation/Http/Middleware/CheckForTrustedHost.php -> src/Foundation/Http/Middleware/CheckForTrustedHost.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php namespace October\\Rain\\Foundation\\Http\\Middleware;",
          "3: use Config;",
          "4: use October\\Rain\\Http\\Middleware\\TrustHosts as BaseMiddleware;",
          "6: class CheckForTrustedHost extends BaseMiddleware",
          "7: {",
          "27:     public function hosts()",
          "28:     {",
          "29:         return self::processTrustedHosts(Config::get('app.trustedHosts', []));",
          "30:     }",
          "38:     public static function processTrustedHosts($hosts)",
          "39:     {",
          "40:         if ($hosts === true) {",
          "41:             $url = Config::get('app.url', null);",
          "44:             if (is_null($url)) {",
          "45:                 return [];",
          "46:             }",
          "50:             $host = parse_url($url, PHP_URL_HOST);",
          "51:             if (preg_match('/^www\\.(.*?)$/i', $host, $matches)) {",
          "52:                 $host = '^(www\\.)?' . preg_quote($matches[1]) . '$';",
          "53:             } else {",
          "54:                 $host = '^(www\\.)?' . preg_quote($host) . '$';",
          "55:             }",
          "57:             $hosts = [$host];",
          "58:         } elseif ($hosts === false) {",
          "59:             return [];",
          "60:         }",
          "62:         $hosts = array_map(function ($host) {",
          "64:             if (filter_var($host, FILTER_VALIDATE_URL)) {",
          "65:                 $host = parse_url($host, PHP_URL_HOST);",
          "66:             }",
          "69:             if (",
          "70:                 filter_var($host, FILTER_VALIDATE_IP)",
          "71:                 || filter_var($host, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME)",
          "72:             ) {",
          "73:                 return '^' . preg_quote($host) . '$';",
          "74:             }",
          "77:             return $host;",
          "78:         }, $hosts);",
          "80:         return $hosts;",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "src/Http/Middleware/TrustHosts.php||src/Http/Middleware/TrustHosts.php": [
          "File: src/Http/Middleware/TrustHosts.php -> src/Http/Middleware/TrustHosts.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php namespace October\\Rain\\Http\\Middleware;",
          "3: use Illuminate\\Contracts\\Foundation\\Application;",
          "4: use Illuminate\\Http\\Request;",
          "6: abstract class TrustHosts",
          "7: {",
          "13:     protected $app;",
          "21:     public function __construct(Application $app)",
          "22:     {",
          "23:         $this->app = $app;",
          "24:     }",
          "31:     abstract public function hosts();",
          "40:     public function handle(Request $request, $next)",
          "41:     {",
          "42:         if ($this->shouldSpecifyTrustedHosts()) {",
          "43:             Request::setTrustedHosts(array_filter($this->hosts()));",
          "44:         }",
          "46:         return $next($request);",
          "47:     }",
          "54:     protected function shouldSpecifyTrustedHosts()",
          "55:     {",
          "56:         return $this->app['config']->get('app.env') !== 'local'",
          "57:             && $this->app->runningUnitTests() === false;",
          "58:     }",
          "65:     protected function allSubdomainsOfApplicationUrl()",
          "66:     {",
          "67:         if ($host = parse_url($this->app['config']->get('app.url'), PHP_URL_HOST)) {",
          "68:             return '^(.+\\.)?'.preg_quote($host).'$';",
          "69:         }",
          "70:     }",
          "71: }",
          "",
          "---------------"
        ],
        "tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php||tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php": [
          "File: tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php -> tests/Foundation/Http/Middleware/CheckForTrustedHostTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: use Illuminate\\Http\\Request;",
          "4: use Illuminate\\Routing\\Route;",
          "5: use Illuminate\\Routing\\RouteCollection;",
          "6: use October\\Rain\\Router\\UrlGenerator;",
          "7: use October\\Rain\\Foundation\\Http\\Middleware\\CheckForTrustedHost;",
          "8: use Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException;",
          "13: class CheckForTrustedHostTest extends TestCase",
          "14: {",
          "15:     protected static $orignalTrustHosts;",
          "17:     public static function setUpBeforeClass(): void",
          "18:     {",
          "19:         self::$orignalTrustHosts = Request::getTrustedHosts();",
          "20:     }",
          "22:     public static function tearDownAfterClass(): void",
          "23:     {",
          "24:         Request::setTrustedHosts(self::$orignalTrustHosts);",
          "25:     }",
          "27:     public function testTrustedHost()",
          "28:     {",
          "29:         $trustedHosts = ['octobercms.com'];",
          "30:         $headers = ['HOST' => 'octobercms.com'];",
          "31:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "32:         $url = $urlGenerator->to('/');",
          "34:         $this->assertEquals('http://octobercms.com', $url);",
          "35:     }",
          "37:     public function testTrustedHostWwwSubdomain()",
          "38:     {",
          "39:         $trustedHosts = ['www.octobercms.com'];",
          "40:         $headers = ['HOST' => 'www.octobercms.com'];",
          "41:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "42:         $url = $urlGenerator->to('/');",
          "44:         $this->assertEquals('http://www.octobercms.com', $url);",
          "45:     }",
          "47:     public function testTrustedHostWwwSubdomainFailure()",
          "48:     {",
          "49:         $this->expectException(SuspiciousOperationException::class);",
          "51:         $trustedHosts = ['octobercms.com'];",
          "52:         $headers = ['HOST' => 'www.octobercms.com'];",
          "53:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "54:         $urlGenerator->to('/');",
          "55:     }",
          "57:     public function testTrustedHostWwwRegex()",
          "58:     {",
          "59:         $trustedHosts = ['^(www\\.)?octobercms\\.com$'];",
          "60:         $headers = ['HOST' => 'octobercms.com'];",
          "61:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "62:         $url = $urlGenerator->to('/');",
          "64:         $this->assertEquals('http://octobercms.com', $url);",
          "66:         $headers = ['HOST' => 'www.octobercms.com'];",
          "67:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "68:         $url = $urlGenerator->to('/');",
          "70:         $this->assertEquals('http://www.octobercms.com', $url);",
          "71:     }",
          "73:     public function testTrustedIpHost()",
          "74:     {",
          "75:         $trustedHosts = ['127.0.0.1'];",
          "76:         $headers = ['HOST' => '127.0.0.1'];",
          "77:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "78:         $url = $urlGenerator->to('/');",
          "80:         $this->assertEquals('http://127.0.0.1', $url);",
          "81:     }",
          "83:     public function testNoTrustedHostsSet()",
          "84:     {",
          "85:         $trustedHosts = false;",
          "86:         $headers = ['HOST' => 'malicious.com'];",
          "87:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "88:         $url = $urlGenerator->to('/');",
          "90:         $this->assertEquals('http://malicious.com', $url);",
          "91:     }",
          "93:     public function testThrowExceptionForUntrustedHosts()",
          "94:     {",
          "95:         $this->expectException(SuspiciousOperationException::class);",
          "97:         $trustedHosts = ['octobercms.com'];",
          "98:         $headers = ['HOST' => 'malicious.com'];",
          "99:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers);",
          "100:         $urlGenerator->to('/');",
          "101:     }",
          "103:     public function testThrowExceptionForUntrustedServerName()",
          "104:     {",
          "105:         $this->expectException(SuspiciousOperationException::class);",
          "107:         $trustedHosts = ['octobercms.com'];",
          "108:         $headers = [];",
          "109:         $servers = ['SERVER_NAME' => 'malicious.com'];",
          "110:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "111:         $urlGenerator->to('/');",
          "112:     }",
          "114:     public function testThrowExceptionForUntrustedServerAddr()",
          "115:     {",
          "116:         $this->expectException(SuspiciousOperationException::class);",
          "118:         $trustedHosts = ['octobercms.com'];",
          "119:         $headers = [];",
          "120:         $servers = ['SERVER_ADDR' => 'malicious.com'];",
          "121:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "122:         $urlGenerator->to('/');",
          "123:     }",
          "125:     public function testRegexTrustedHost()",
          "126:     {",
          "127:         $trustedHosts = ['^[a-z0-9]+\\.octobercms\\.com$'];",
          "128:         $headers = ['HOST' => 'test123.octobercms.com'];",
          "129:         $servers = [];",
          "130:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "131:         $url = $urlGenerator->to('/');",
          "133:         $this->assertEquals('http://test123.octobercms.com', $url);",
          "135:         $headers = ['HOST' => 'test456.octobercms.com'];",
          "136:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "137:         $url = $urlGenerator->to('/');",
          "139:         $this->assertEquals('http://test456.octobercms.com', $url);",
          "140:     }",
          "142:     public function testRegexFailTrustedHost()",
          "143:     {",
          "144:         $this->expectException(SuspiciousOperationException::class);",
          "146:         $trustedHosts = ['^[a-z0-9]+\\.octobercms\\.com$'];",
          "147:         $headers = ['HOST' => 'test.123.octobercms.com'];",
          "148:         $servers = [];",
          "149:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "150:         $urlGenerator->to('/');",
          "151:     }",
          "153:     public function testArrayTrustedHost()",
          "154:     {",
          "155:         $trustedHosts = ['test1.octobercms.com', 'test2.octobercms.com'];",
          "156:         $headers = ['HOST' => 'test1.octobercms.com'];",
          "157:         $servers = [];",
          "158:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "159:         $url = $urlGenerator->to('/');",
          "161:         $this->assertEquals('http://test1.octobercms.com', $url);",
          "163:         $headers = ['HOST' => 'test2.octobercms.com'];",
          "164:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "165:         $url = $urlGenerator->to('/');",
          "167:         $this->assertEquals('http://test2.octobercms.com', $url);",
          "168:     }",
          "170:     public function testArrayFailTrustedHost()",
          "171:     {",
          "172:         $this->expectException(SuspiciousOperationException::class);",
          "174:         $trustedHosts = ['test1.octobercms.com', 'test2.octobercms.com'];",
          "175:         $headers = ['HOST' => 'test3.octobercms.com'];",
          "176:         $servers = [];",
          "177:         $urlGenerator = $this->createUrlGenerator($trustedHosts, $headers, $servers);",
          "178:         $urlGenerator->to('/');",
          "179:     }",
          "181:     protected function createUrlGenerator($trustedHosts = [], $headers = [], $servers = [])",
          "182:     {",
          "183:         $middleware = $this->getMockBuilder(CheckForTrustedHost::class)",
          "184:             ->disableOriginalConstructor()",
          "185:             ->setMethods(['hosts', 'shouldSpecifyTrustedHosts'])",
          "186:             ->getMock();",
          "188:         $middleware->expects($this->any())",
          "189:             ->method('hosts')",
          "190:             ->willReturn(CheckForTrustedHost::processTrustedHosts($trustedHosts));",
          "192:         $middleware->expects($this->any())",
          "193:             ->method('shouldSpecifyTrustedHosts')",
          "194:             ->willReturn(true);",
          "196:         $request = new Request;",
          "198:         foreach ($headers as $key => $val) {",
          "199:             $request->headers->set($key, $val);",
          "200:         }",
          "202:         foreach ($servers as $key => $val) {",
          "203:             $request->server->set($key, $val);",
          "204:         }",
          "206:         $middleware->handle($request, function () {",
          "207:         });",
          "209:         $routes = new RouteCollection;",
          "210:         $routes->add(new Route('GET', 'foo', [",
          "211:             'uses' => 'FooController@index',",
          "212:             'as' => 'foo_index',",
          "213:         ]));",
          "215:         return new UrlGenerator($routes, $request);",
          "216:     }",
          "217: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}