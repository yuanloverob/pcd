{
  "cve_id": "CVE-2023-28336",
  "cve_desc": "Insufficient filtering of grade report history made it possible for teachers to access the names of users they could not otherwise access.",
  "repo": "moodle/moodle",
  "patch_hash": "a931a7f8cec3657827268837b27962a13817ca2b",
  "patch_info": {
    "commit_hash": "a931a7f8cec3657827268837b27962a13817ca2b",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/a931a7f8cec3657827268837b27962a13817ca2b",
    "files": [
      "grade/report/history/classes/output/tablelog.php",
      "grade/report/history/tests/report_test.php"
    ],
    "message": "MDL-76809 gradereport_history: pre-filter report userids filter.\n\nEnsure current user is able to access each of the provided userids.",
    "before_after_code_files": [
      "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
      "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
    ]
  },
  "patch_diff": {
    "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php": [
      "File: grade/report/history/classes/output/tablelog.php -> grade/report/history/classes/output/tablelog.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: defined('MOODLE_INTERNAL') || die;",
      "29: require_once($CFG->libdir . '/tablelib.php');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: require_once($CFG->dirroot . '/user/lib.php');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:     protected $filters;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60:     protected $users = [];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "99:         $this->courseid = $this->context->instanceid;",
      "100:         $this->pagesize = $perpage;",
      "101:         $this->page = $page;",
      "103:         $this->gradeitems = \\grade_item::fetch_all(array('courseid' => $this->courseid));",
      "104:         $this->cms = get_fast_modinfo($this->courseid);",
      "105:         $this->useridfield = 'userid';",
      "",
      "[Removed Lines]",
      "102:         $this->filters = (object)$filters;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:         $this->define_table_columns();",
      "112:         $this->define_table_configs($url);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:         $this->define_table_filters((object) $filters);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "136:         $this->no_sorting('grader');",
      "137:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152:     protected function define_table_filters(\\stdClass $filters): void {",
      "153:         global $DB;",
      "155:         $this->filters = $filters;",
      "157:         if (!empty($this->filters->userids)) {",
      "159:             $course = get_course($this->courseid);",
      "162:             [$userselect, $userparams] = $DB->get_in_or_equal(explode(',', $this->filters->userids), SQL_PARAMS_NAMED);",
      "163:             [$usersort] = users_order_by_sql();",
      "165:             $this->users = array_filter(",
      "166:                 $DB->get_records_select('user', \"id {$userselect}\", $userparams, $usersort),",
      "167:                 static function(\\stdClass $user) use ($course): bool {",
      "168:                     return user_can_view_profile($user, $course);",
      "169:                 }",
      "170:             );",
      "173:             $this->filters->userids = implode(',', array_keys($this->users));",
      "174:         }",
      "175:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "537:     }",
      "539: }",
      "",
      "[Removed Lines]",
      "525:     public function get_selected_users() {",
      "526:         global $DB;",
      "527:         $idlist = array();",
      "528:         if (!empty($this->filters->userids)) {",
      "530:             $idlist = explode(',', $this->filters->userids);",
      "531:             list($where, $params) = $DB->get_in_or_equal($idlist);",
      "532:             [$order] = users_order_by_sql();",
      "533:             return $DB->get_records_select('user', \"id $where\", $params, $order);",
      "535:         }",
      "536:         return $idlist;",
      "",
      "[Added Lines]",
      "563:     public function get_selected_users(): array {",
      "564:         return $this->users;",
      "",
      "---------------"
    ],
    "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php": [
      "File: grade/report/history/tests/report_test.php -> grade/report/history/tests/report_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:         self::getDataGenerator()->enrol_user($u4->id, $c1->id, 'student');",
      "55:         self::getDataGenerator()->enrol_user($u5->id, $c1->id, 'student');",
      "58:         $c1m1 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
      "59:         $c1m2 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:         self::getDataGenerator()->enrol_user($grader1->id, $c2->id, 'teacher');",
      "58:         self::getDataGenerator()->enrol_user($u5->id, $c2->id, 'student');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "126:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array(), true));",
      "127:         $this->assertEquals(13, $this->get_tablelog_results($c2ctx, array(), true));",
      "136:         $gi = \\grade_item::fetch($giparams + array('iteminstance' => $c1m1->id));",
      "",
      "[Removed Lines]",
      "130:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
      "133:         $this->assertEquals(4, $this->get_tablelog_results($c1ctx, array('userids' => \"$u1->id,$u3->id\"), true));",
      "",
      "[Added Lines]",
      "133:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
      "136:         $this->assertEquals(1, $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"], true));",
      "137:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"]);",
      "138:         $this->assertGradeHistoryIds([$grades['c1m1u3']->id], $results);",
      "141:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"], true));",
      "142:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"]);",
      "143:         $this->assertGradeHistoryIds([$grades['c1m1u2']->id, $grades['c1m1u3']->id, $grades['c1m2u2']->id], $results);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "882b9d67f5a851bcc16424551fca499e824f59ae",
      "candidate_info": {
        "commit_hash": "882b9d67f5a851bcc16424551fca499e824f59ae",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/882b9d67f5a851bcc16424551fca499e824f59ae",
        "files": [
          "grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php"
        ],
        "message": "MDL-76809 gradereport_history: pre-filter report userids filter.\n\nEnsure current user is able to access each of the provided userids.",
        "before_after_code_files": [
          "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ],
          "candidate": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ]
        }
      },
      "candidate_diff": {
        "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php": [
          "File: grade/report/history/classes/output/tablelog.php -> grade/report/history/classes/output/tablelog.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: require_once($CFG->libdir . '/tablelib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: require_once($CFG->dirroot . '/user/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     protected $filters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     protected $users = [];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         $this->courseid = $this->context->instanceid;",
          "100:         $this->pagesize = $perpage;",
          "101:         $this->page = $page;",
          "103:         $this->gradeitems = \\grade_item::fetch_all(array('courseid' => $this->courseid));",
          "104:         $this->cms = get_fast_modinfo($this->courseid);",
          "105:         $this->useridfield = 'userid';",
          "",
          "[Removed Lines]",
          "102:         $this->filters = (object)$filters;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:         $this->define_table_columns();",
          "112:         $this->define_table_configs($url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         $this->define_table_filters((object) $filters);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:         $this->no_sorting('grader');",
          "137:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     protected function define_table_filters(\\stdClass $filters): void {",
          "153:         global $DB;",
          "155:         $this->filters = $filters;",
          "157:         if (!empty($this->filters->userids)) {",
          "159:             $course = get_course($this->courseid);",
          "162:             [$userselect, $userparams] = $DB->get_in_or_equal(explode(',', $this->filters->userids), SQL_PARAMS_NAMED);",
          "163:             [$usersort] = users_order_by_sql();",
          "165:             $this->users = array_filter(",
          "166:                 $DB->get_records_select('user', \"id {$userselect}\", $userparams, $usersort),",
          "167:                 static function(\\stdClass $user) use ($course): bool {",
          "168:                     return user_can_view_profile($user, $course);",
          "169:                 }",
          "170:             );",
          "173:             $this->filters->userids = implode(',', array_keys($this->users));",
          "174:         }",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "527:     }",
          "529: }",
          "",
          "[Removed Lines]",
          "515:     public function get_selected_users() {",
          "516:         global $DB;",
          "517:         $idlist = array();",
          "518:         if (!empty($this->filters->userids)) {",
          "520:             $idlist = explode(',', $this->filters->userids);",
          "521:             list($where, $params) = $DB->get_in_or_equal($idlist);",
          "522:             [$order] = users_order_by_sql();",
          "523:             return $DB->get_records_select('user', \"id $where\", $params, $order);",
          "525:         }",
          "526:         return $idlist;",
          "",
          "[Added Lines]",
          "553:     public function get_selected_users(): array {",
          "554:         return $this->users;",
          "",
          "---------------"
        ],
        "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php": [
          "File: grade/report/history/tests/report_test.php -> grade/report/history/tests/report_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         self::getDataGenerator()->enrol_user($u4->id, $c1->id, 'student');",
          "55:         self::getDataGenerator()->enrol_user($u5->id, $c1->id, 'student');",
          "58:         $c1m1 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "59:         $c1m2 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         self::getDataGenerator()->enrol_user($grader1->id, $c2->id, 'teacher');",
          "58:         self::getDataGenerator()->enrol_user($u5->id, $c2->id, 'student');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array(), true));",
          "127:         $this->assertEquals(13, $this->get_tablelog_results($c2ctx, array(), true));",
          "136:         $gi = \\grade_item::fetch($giparams + array('iteminstance' => $c1m1->id));",
          "",
          "[Removed Lines]",
          "130:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "133:         $this->assertEquals(4, $this->get_tablelog_results($c1ctx, array('userids' => \"$u1->id,$u3->id\"), true));",
          "",
          "[Added Lines]",
          "133:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "136:         $this->assertEquals(1, $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"], true));",
          "137:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"]);",
          "138:         $this->assertGradeHistoryIds([$grades['c1m1u3']->id], $results);",
          "141:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"], true));",
          "142:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"]);",
          "143:         $this->assertGradeHistoryIds([$grades['c1m1u2']->id, $grades['c1m1u3']->id, $grades['c1m2u2']->id], $results);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01fc1047790cf561ce21fd3b14a3e47181eca361",
      "candidate_info": {
        "commit_hash": "01fc1047790cf561ce21fd3b14a3e47181eca361",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/01fc1047790cf561ce21fd3b14a3e47181eca361",
        "files": [
          "grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php"
        ],
        "message": "MDL-76809 gradereport_history: pre-filter report userids filter.\n\nEnsure current user is able to access each of the provided userids.",
        "before_after_code_files": [
          "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ],
          "candidate": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ]
        }
      },
      "candidate_diff": {
        "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php": [
          "File: grade/report/history/classes/output/tablelog.php -> grade/report/history/classes/output/tablelog.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: require_once($CFG->libdir . '/tablelib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: require_once($CFG->dirroot . '/user/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     protected $filters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     protected $users = [];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         $this->courseid = $this->context->instanceid;",
          "100:         $this->pagesize = $perpage;",
          "101:         $this->page = $page;",
          "103:         $this->gradeitems = \\grade_item::fetch_all(array('courseid' => $this->courseid));",
          "104:         $this->cms = get_fast_modinfo($this->courseid);",
          "105:         $this->useridfield = 'userid';",
          "",
          "[Removed Lines]",
          "102:         $this->filters = (object)$filters;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:         $this->define_table_columns();",
          "112:         $this->define_table_configs($url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         $this->define_table_filters((object) $filters);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:         $this->no_sorting('grader');",
          "137:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     protected function define_table_filters(\\stdClass $filters): void {",
          "153:         global $DB;",
          "155:         $this->filters = $filters;",
          "157:         if (!empty($this->filters->userids)) {",
          "159:             $course = get_course($this->courseid);",
          "162:             [$userselect, $userparams] = $DB->get_in_or_equal(explode(',', $this->filters->userids), SQL_PARAMS_NAMED);",
          "163:             [$usersort] = users_order_by_sql();",
          "165:             $this->users = array_filter(",
          "166:                 $DB->get_records_select('user', \"id {$userselect}\", $userparams, $usersort),",
          "167:                 static function(\\stdClass $user) use ($course): bool {",
          "168:                     return user_can_view_profile($user, $course);",
          "169:                 }",
          "170:             );",
          "173:             $this->filters->userids = implode(',', array_keys($this->users));",
          "174:         }",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "537:     }",
          "539: }",
          "",
          "[Removed Lines]",
          "525:     public function get_selected_users() {",
          "526:         global $DB;",
          "527:         $idlist = array();",
          "528:         if (!empty($this->filters->userids)) {",
          "530:             $idlist = explode(',', $this->filters->userids);",
          "531:             list($where, $params) = $DB->get_in_or_equal($idlist);",
          "532:             [$order] = users_order_by_sql();",
          "533:             return $DB->get_records_select('user', \"id $where\", $params, $order);",
          "535:         }",
          "536:         return $idlist;",
          "",
          "[Added Lines]",
          "563:     public function get_selected_users(): array {",
          "564:         return $this->users;",
          "",
          "---------------"
        ],
        "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php": [
          "File: grade/report/history/tests/report_test.php -> grade/report/history/tests/report_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         self::getDataGenerator()->enrol_user($u4->id, $c1->id, 'student');",
          "55:         self::getDataGenerator()->enrol_user($u5->id, $c1->id, 'student');",
          "58:         $c1m1 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "59:         $c1m2 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         self::getDataGenerator()->enrol_user($grader1->id, $c2->id, 'teacher');",
          "58:         self::getDataGenerator()->enrol_user($u5->id, $c2->id, 'student');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array(), true));",
          "127:         $this->assertEquals(13, $this->get_tablelog_results($c2ctx, array(), true));",
          "136:         $gi = \\grade_item::fetch($giparams + array('iteminstance' => $c1m1->id));",
          "",
          "[Removed Lines]",
          "130:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "133:         $this->assertEquals(4, $this->get_tablelog_results($c1ctx, array('userids' => \"$u1->id,$u3->id\"), true));",
          "",
          "[Added Lines]",
          "133:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "136:         $this->assertEquals(1, $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"], true));",
          "137:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"]);",
          "138:         $this->assertGradeHistoryIds([$grades['c1m1u3']->id], $results);",
          "141:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"], true));",
          "142:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"]);",
          "143:         $this->assertGradeHistoryIds([$grades['c1m1u2']->id, $grades['c1m1u3']->id, $grades['c1m2u2']->id], $results);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bb6bd73811db0f676ba591dd54b890e367354bd",
      "candidate_info": {
        "commit_hash": "1bb6bd73811db0f676ba591dd54b890e367354bd",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1bb6bd73811db0f676ba591dd54b890e367354bd",
        "files": [
          "grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php"
        ],
        "message": "MDL-76809 gradereport_history: pre-filter report userids filter.\n\nEnsure current user is able to access each of the provided userids.",
        "before_after_code_files": [
          "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ],
          "candidate": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ]
        }
      },
      "candidate_diff": {
        "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php": [
          "File: grade/report/history/classes/output/tablelog.php -> grade/report/history/classes/output/tablelog.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: require_once($CFG->libdir . '/tablelib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: require_once($CFG->dirroot . '/user/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     protected $filters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     protected $users = [];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         $this->courseid = $this->context->instanceid;",
          "100:         $this->pagesize = $perpage;",
          "101:         $this->page = $page;",
          "103:         $this->gradeitems = \\grade_item::fetch_all(array('courseid' => $this->courseid));",
          "104:         $this->cms = get_fast_modinfo($this->courseid);",
          "105:         $this->useridfield = 'userid';",
          "",
          "[Removed Lines]",
          "102:         $this->filters = (object)$filters;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:         $this->define_table_columns();",
          "112:         $this->define_table_configs($url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         $this->define_table_filters((object) $filters);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:         $this->no_sorting('grader');",
          "137:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     protected function define_table_filters(\\stdClass $filters): void {",
          "153:         global $DB;",
          "155:         $this->filters = $filters;",
          "157:         if (!empty($this->filters->userids)) {",
          "159:             $course = get_course($this->courseid);",
          "162:             [$userselect, $userparams] = $DB->get_in_or_equal(explode(',', $this->filters->userids), SQL_PARAMS_NAMED);",
          "163:             [$usersort] = users_order_by_sql();",
          "165:             $this->users = array_filter(",
          "166:                 $DB->get_records_select('user', \"id {$userselect}\", $userparams, $usersort),",
          "167:                 static function(\\stdClass $user) use ($course): bool {",
          "168:                     return user_can_view_profile($user, $course);",
          "169:                 }",
          "170:             );",
          "173:             $this->filters->userids = implode(',', array_keys($this->users));",
          "174:         }",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "537:     }",
          "539: }",
          "",
          "[Removed Lines]",
          "525:     public function get_selected_users() {",
          "526:         global $DB;",
          "527:         $idlist = array();",
          "528:         if (!empty($this->filters->userids)) {",
          "530:             $idlist = explode(',', $this->filters->userids);",
          "531:             list($where, $params) = $DB->get_in_or_equal($idlist);",
          "532:             [$order] = users_order_by_sql();",
          "533:             return $DB->get_records_select('user', \"id $where\", $params, $order);",
          "535:         }",
          "536:         return $idlist;",
          "",
          "[Added Lines]",
          "563:     public function get_selected_users(): array {",
          "564:         return $this->users;",
          "",
          "---------------"
        ],
        "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php": [
          "File: grade/report/history/tests/report_test.php -> grade/report/history/tests/report_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         self::getDataGenerator()->enrol_user($u4->id, $c1->id, 'student');",
          "55:         self::getDataGenerator()->enrol_user($u5->id, $c1->id, 'student');",
          "58:         $c1m1 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "59:         $c1m2 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         self::getDataGenerator()->enrol_user($grader1->id, $c2->id, 'teacher');",
          "58:         self::getDataGenerator()->enrol_user($u5->id, $c2->id, 'student');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array(), true));",
          "127:         $this->assertEquals(13, $this->get_tablelog_results($c2ctx, array(), true));",
          "136:         $gi = \\grade_item::fetch($giparams + array('iteminstance' => $c1m1->id));",
          "",
          "[Removed Lines]",
          "130:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "133:         $this->assertEquals(4, $this->get_tablelog_results($c1ctx, array('userids' => \"$u1->id,$u3->id\"), true));",
          "",
          "[Added Lines]",
          "133:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "136:         $this->assertEquals(1, $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"], true));",
          "137:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"]);",
          "138:         $this->assertGradeHistoryIds([$grades['c1m1u3']->id], $results);",
          "141:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"], true));",
          "142:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"]);",
          "143:         $this->assertGradeHistoryIds([$grades['c1m1u2']->id, $grades['c1m1u3']->id, $grades['c1m2u2']->id], $results);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1632e5917985a2572757af6de8c9270b8c439fe8",
      "candidate_info": {
        "commit_hash": "1632e5917985a2572757af6de8c9270b8c439fe8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1632e5917985a2572757af6de8c9270b8c439fe8",
        "files": [
          "grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php"
        ],
        "message": "MDL-76809 gradereport_history: pre-filter report userids filter.\n\nEnsure current user is able to access each of the provided userids.",
        "before_after_code_files": [
          "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
          "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ],
          "candidate": [
            "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php",
            "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php"
          ]
        }
      },
      "candidate_diff": {
        "grade/report/history/classes/output/tablelog.php||grade/report/history/classes/output/tablelog.php": [
          "File: grade/report/history/classes/output/tablelog.php -> grade/report/history/classes/output/tablelog.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: require_once($CFG->libdir . '/tablelib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: require_once($CFG->dirroot . '/user/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     protected $filters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     protected $users = [];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         $this->courseid = $this->context->instanceid;",
          "100:         $this->pagesize = $perpage;",
          "101:         $this->page = $page;",
          "103:         $this->gradeitems = \\grade_item::fetch_all(array('courseid' => $this->courseid));",
          "104:         $this->cms = get_fast_modinfo($this->courseid);",
          "105:         $this->useridfield = 'userid';",
          "",
          "[Removed Lines]",
          "102:         $this->filters = (object)$filters;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:         $this->define_table_columns();",
          "112:         $this->define_table_configs($url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         $this->define_table_filters((object) $filters);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:         $this->no_sorting('grader');",
          "137:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     protected function define_table_filters(\\stdClass $filters): void {",
          "153:         global $DB;",
          "155:         $this->filters = $filters;",
          "157:         if (!empty($this->filters->userids)) {",
          "159:             $course = get_course($this->courseid);",
          "162:             [$userselect, $userparams] = $DB->get_in_or_equal(explode(',', $this->filters->userids), SQL_PARAMS_NAMED);",
          "163:             [$usersort] = users_order_by_sql();",
          "165:             $this->users = array_filter(",
          "166:                 $DB->get_records_select('user', \"id {$userselect}\", $userparams, $usersort),",
          "167:                 static function(\\stdClass $user) use ($course): bool {",
          "168:                     return user_can_view_profile($user, $course);",
          "169:                 }",
          "170:             );",
          "173:             $this->filters->userids = implode(',', array_keys($this->users));",
          "174:         }",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "523:     }",
          "525: }",
          "",
          "[Removed Lines]",
          "512:     public function get_selected_users() {",
          "513:         global $DB;",
          "514:         $idlist = array();",
          "515:         if (!empty($this->filters->userids)) {",
          "517:             $idlist = explode(',', $this->filters->userids);",
          "518:             list($where, $params) = $DB->get_in_or_equal($idlist);",
          "519:             return $DB->get_records_select('user', \"id $where\", $params);",
          "521:         }",
          "522:         return $idlist;",
          "",
          "[Added Lines]",
          "550:     public function get_selected_users(): array {",
          "551:         return $this->users;",
          "",
          "---------------"
        ],
        "grade/report/history/tests/report_test.php||grade/report/history/tests/report_test.php": [
          "File: grade/report/history/tests/report_test.php -> grade/report/history/tests/report_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         self::getDataGenerator()->enrol_user($u4->id, $c1->id, 'student');",
          "61:         self::getDataGenerator()->enrol_user($u5->id, $c1->id, 'student');",
          "64:         $c1m1 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "65:         $c1m2 = $this->getDataGenerator()->create_module('assign', array('course' => $c1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         self::getDataGenerator()->enrol_user($grader1->id, $c2->id, 'teacher');",
          "64:         self::getDataGenerator()->enrol_user($u5->id, $c2->id, 'student');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array(), true));",
          "133:         $this->assertEquals(13, $this->get_tablelog_results($c2ctx, array(), true));",
          "142:         $gi = grade_item::fetch($giparams + array('iteminstance' => $c1m1->id));",
          "",
          "[Removed Lines]",
          "136:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "139:         $this->assertEquals(4, $this->get_tablelog_results($c1ctx, array('userids' => \"$u1->id,$u3->id\"), true));",
          "",
          "[Added Lines]",
          "139:         $this->assertEquals(8, $this->get_tablelog_results($c1ctx, array('userids' => $u1->id), true));",
          "142:         $this->assertEquals(1, $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"], true));",
          "143:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u1->id,$u3->id\"]);",
          "144:         $this->assertGradeHistoryIds([$grades['c1m1u3']->id], $results);",
          "147:         $this->assertEquals(3, $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"], true));",
          "148:         $results = $this->get_tablelog_results($c1ctx, ['userids' => \"$u2->id,$u3->id\"]);",
          "149:         $this->assertGradeHistoryIds([$grades['c1m1u2']->id, $grades['c1m1u3']->id, $grades['c1m2u2']->id], $results);",
          "",
          "---------------"
        ]
      }
    }
  ]
}