{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca48cc915bf22d2c84ffb3a8eff816aed15f852c",
      "candidate_info": {
        "commit_hash": "ca48cc915bf22d2c84ffb3a8eff816aed15f852c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ca48cc915bf22d2c84ffb3a8eff816aed15f852c",
        "files": [
          "blog/classes/external.php",
          "blog/tests/external_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-61245 core_blog: New Web Service core_blog_view_entries",
        "before_after_code_files": [
          "blog/classes/external.php||blog/classes/external.php",
          "blog/tests/external_test.php||blog/tests/external_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "blog/classes/external.php||blog/classes/external.php": [
          "File: blog/classes/external.php -> blog/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: class external extends external_api {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     protected static function validate_access_and_filters($rawwsfilters) {",
          "59:         global $CFG;",
          "61:         if (empty($CFG->enableblogs)) {",
          "62:             throw new moodle_exception('blogdisable', 'blog');",
          "63:         }",
          "66:         $filterstype = array(",
          "67:             'courseid' => PARAM_INT,",
          "68:             'groupid' => PARAM_INT,",
          "69:             'userid' => PARAM_INT,",
          "70:             'tagid' => PARAM_INT,",
          "71:             'tag' => PARAM_NOTAGS,",
          "72:             'cmid' => PARAM_INT,",
          "73:             'entryid' => PARAM_INT,",
          "74:             'search' => PARAM_RAW",
          "75:         );",
          "76:         $filters = array(",
          "77:             'courseid' => null,",
          "78:             'groupid' => null,",
          "79:             'userid' => null,",
          "80:             'tagid' => null,",
          "81:             'tag' => null,",
          "82:             'cmid' => null,",
          "83:             'entryid' => null,",
          "84:             'search' => null",
          "85:         );",
          "87:         foreach ($rawwsfilters as $filter) {",
          "88:             $name = trim($filter['name']);",
          "89:             if (!isset($filterstype[$name])) {",
          "90:                 throw new moodle_exception('errorinvalidparam', 'webservice', '', $name);",
          "91:             }",
          "92:             $filters[$name] = clean_param($filter['value'], $filterstype[$name]);",
          "93:         }",
          "96:         list($courseid, $userid) = blog_validate_access($filters['courseid'], $filters['cmid'], $filters['groupid'],",
          "97:             $filters['entryid'], $filters['userid']);",
          "99:         if ($courseid && $courseid != SITEID) {",
          "100:             $context = context_course::instance($courseid);",
          "101:             self::validate_context($context);",
          "102:         } else {",
          "103:             $context = context_system::instance();",
          "104:             if ($CFG->bloglevel == BLOG_GLOBAL_LEVEL) {",
          "106:                 if ($CFG->forcelogin) {",
          "107:                     self::validate_context($context);",
          "108:                 }",
          "109:             } else {",
          "110:                 self::validate_context($context);",
          "111:             }",
          "112:         }",
          "114:         return array($context, $filters, $courseid, $userid);",
          "115:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     public static function get_entries($filters = array(), $page = 0, $perpage = 10) {",
          "97:         $warnings = array();",
          "98:         $params = self::validate_parameters(self::get_entries_parameters(),",
          "99:             array('filters' => $filters, 'page' => $page, 'perpage' => $perpage));",
          "137:         $PAGE->set_context($context); // Needed by internal APIs.",
          "140:         $blogheaders = blog_get_headers($filters['courseid'], $filters['groupid'], $filters['userid'], $filters['tagid'],",
          "",
          "[Removed Lines]",
          "95:         global $CFG, $DB, $PAGE;",
          "101:         if (empty($CFG->enableblogs)) {",
          "102:             throw new moodle_exception('blogdisable', 'blog');",
          "103:         }",
          "106:         $filterstype = array('courseid' => PARAM_INT, 'groupid' => PARAM_INT, 'userid' => PARAM_INT, 'tagid' => PARAM_INT,",
          "107:             'tag' => PARAM_NOTAGS, 'cmid' => PARAM_INT, 'entryid' => PARAM_INT, 'search' => PARAM_RAW);",
          "108:         $filters = array('courseid' => null, 'groupid' => null, 'userid' => null, 'tagid' => null,",
          "109:             'tag' => null, 'cmid' => null, 'entryid' => null, 'search' => null);",
          "111:         foreach ($params['filters'] as $filter) {",
          "112:             $name = trim($filter['name']);",
          "113:             if (!isset($filterstype[$name])) {",
          "114:                 throw new moodle_exception('errorinvalidparam', 'webservice', '', $name);",
          "115:             }",
          "116:             $filters[$name] = clean_param($filter['value'], $filterstype[$name]);",
          "117:         }",
          "120:         list($courseid, $userid) = blog_validate_access($filters['courseid'], $filters['cmid'], $filters['groupid'],",
          "121:             $filters['entryid'], $filters['userid']);",
          "123:         if ($courseid && $courseid != SITEID) {",
          "124:             $context = context_course::instance($courseid);",
          "125:             self::validate_context($context);",
          "126:         } else {",
          "127:             $context = context_system::instance();",
          "128:             if ($CFG->bloglevel == BLOG_GLOBAL_LEVEL) {",
          "130:                 if ($CFG->forcelogin) {",
          "131:                     self::validate_context($context);",
          "132:                 }",
          "133:             } else {",
          "134:                 self::validate_context($context);",
          "135:             }",
          "136:         }",
          "",
          "[Added Lines]",
          "161:         global $PAGE;",
          "167:         list($context, $filters, $courseid, $userid) = self::validate_access_and_filters($params['filters']);",
          "170:         $output = $PAGE->get_renderer('core');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:         $totalentries = $bloglisting->count_entries();",
          "150:         $exportedentries = array();",
          "152:         foreach ($entries as $entry) {",
          "153:             $exporter = new post_exporter($entry, array('context' => $context));",
          "154:             $exportedentries[] = $exporter->export($output);",
          "",
          "[Removed Lines]",
          "151:         $output = $PAGE->get_renderer('core');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:             )",
          "178:         );",
          "179:     }",
          "180: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:     public static function view_entries_parameters() {",
          "220:         return new external_function_parameters(",
          "221:             array(",
          "222:                 'filters' => new external_multiple_structure (",
          "223:                     new external_single_structure(",
          "224:                         array(",
          "225:                             'name' => new external_value(PARAM_ALPHA,",
          "226:                                 'The expected keys (value format) are:",
          "227:                                 tag      PARAM_NOTAGS blog tag",
          "228:                                 tagid    PARAM_INT    blog tag id",
          "229:                                 userid   PARAM_INT    blog author (userid)",
          "230:                                 cmid     PARAM_INT    course module id",
          "231:                                 entryid  PARAM_INT    entry id",
          "232:                                 groupid  PARAM_INT    group id",
          "233:                                 courseid PARAM_INT    course id",
          "234:                                 search   PARAM_RAW    search term",
          "235:                                 '",
          "236:                             ),",
          "237:                             'value' => new external_value(PARAM_RAW, 'The value of the filter.')",
          "238:                         )",
          "239:                     ), 'Parameters used in the filter of view_entries.', VALUE_DEFAULT, array()",
          "240:                 ),",
          "241:             )",
          "242:         );",
          "243:     }",
          "252:     public static function view_entries($filters = array()) {",
          "254:         $warnings = array();",
          "255:         $params = self::validate_parameters(self::view_entries_parameters(), array('filters' => $filters));",
          "257:         list($context, $filters, $courseid, $userid) = self::validate_access_and_filters($params['filters']);",
          "259:         $eventparams = array(",
          "260:             'other' => array('entryid' => $filters['entryid'], 'tagid' => $filters['tagid'], 'userid' => $userid,",
          "261:                 'modid' => $filters['cmid'], 'groupid' => $filters['groupid'], 'search' => $filters['search']",
          "262:             )",
          "263:         );",
          "264:         if (!empty($userid)) {",
          "265:             $eventparams['relateduserid'] = $userid;",
          "266:         }",
          "267:         $eventparams['other']['courseid'] = ($courseid === SITEID) ? 0 : $courseid;",
          "268:         $event = \\core\\event\\blog_entries_viewed::create($eventparams);",
          "269:         $event->trigger();",
          "271:         return array(",
          "272:             'warnings' => $warnings,",
          "273:             'status' => true,",
          "274:         );",
          "275:     }",
          "283:     public static function view_entries_returns() {",
          "284:         return new external_single_structure(",
          "285:             array(",
          "286:                 'status' => new external_value(PARAM_BOOL, 'status: true if success'),",
          "287:                 'warnings' => new external_warnings(),",
          "288:             )",
          "289:         );",
          "290:     }",
          "",
          "---------------"
        ],
        "blog/tests/external_test.php||blog/tests/external_test.php": [
          "File: blog/tests/external_test.php -> blog/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:         $this->expectException('moodle_exception');",
          "562:         $result = core_blog\\external::get_entries(array(array('name' => 'zzZZzz', 'value' => 'wwWWww')));",
          "563:     }",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:     public function test_view_blog_entries_without_filtering() {",
          "570:         $this->setUser($this->userid);",
          "572:         $sink = $this->redirectEvents();",
          "573:         $result = core_blog\\external::view_entries();",
          "574:         $result = external_api::clean_returnvalue(core_blog\\external::view_entries_returns(), $result);",
          "576:         $events = $sink->get_events();",
          "577:         $this->assertCount(1, $events);",
          "578:         $event = array_shift($events);",
          "580:         $this->assertInstanceOf('\\core\\event\\blog_entries_viewed', $event);",
          "581:         $this->assertEmpty($event->get_data()['relateduserid']);",
          "582:         $this->assertEmpty($event->get_data()['other']['entryid']);",
          "583:         $this->assertEmpty($event->get_data()['other']['tagid']);",
          "584:         $this->assertEmpty($event->get_data()['other']['userid']);",
          "585:         $this->assertEmpty($event->get_data()['other']['modid']);",
          "586:         $this->assertEmpty($event->get_data()['other']['groupid']);",
          "587:         $this->assertEmpty($event->get_data()['other']['search']);",
          "588:         $this->assertEmpty($event->get_data()['other']['courseid']);",
          "589:         $this->assertEventContextNotUsed($event);",
          "590:         $this->assertNotEmpty($event->get_name());",
          "591:     }",
          "596:     public function test_view_blog_entries_with_filtering() {",
          "598:         $this->setUser($this->userid);",
          "600:         $sink = $this->redirectEvents();",
          "601:         $result = core_blog\\external::view_entries(array(",
          "602:             array('name' => 'tagid', 'value' => $this->tagid),",
          "603:             array('name' => 'userid', 'value' => $this->userid),",
          "604:         ));",
          "605:         $result = external_api::clean_returnvalue(core_blog\\external::view_entries_returns(), $result);",
          "607:         $events = $sink->get_events();",
          "608:         $this->assertCount(1, $events);",
          "609:         $event = array_shift($events);",
          "611:         $this->assertInstanceOf('\\core\\event\\blog_entries_viewed', $event);",
          "612:         $this->assertEquals($this->userid, $event->get_data()['relateduserid']);",
          "613:         $this->assertEmpty($event->get_data()['other']['entryid']);",
          "614:         $this->assertEquals($this->tagid, $event->get_data()['other']['tagid']);",
          "615:         $this->assertEquals($this->userid, $event->get_data()['other']['userid']);",
          "616:         $this->assertEmpty($event->get_data()['other']['modid']);",
          "617:         $this->assertEmpty($event->get_data()['other']['groupid']);",
          "618:         $this->assertEmpty($event->get_data()['other']['search']);",
          "619:         $this->assertEmpty($event->get_data()['other']['courseid']);",
          "620:         $this->assertEventContextNotUsed($event);",
          "621:         $this->assertNotEmpty($event->get_name());",
          "622:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         'ajax'          => true,",
          "84:         'loginrequired' => false,",
          "85:     ),",
          "86:     'core_calendar_get_calendar_monthly_view' => array(",
          "87:         'classname' => 'core_calendar_external',",
          "88:         'methodname' => 'get_calendar_monthly_view',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     'core_blog_view_entries' => array(",
          "87:         'classname'   => 'core_blog\\external',",
          "88:         'methodname'  => 'view_entries',",
          "89:         'description' => 'Trigger the blog_entries_viewed event.',",
          "90:         'type'        => 'read',",
          "91:         'services'    => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "92:         'ajax'          => true,",
          "93:         'loginrequired' => false,",
          "94:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018092700.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018092700.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2c0237ae8b7257f29708238de1440815a3e6d3d",
      "candidate_info": {
        "commit_hash": "b2c0237ae8b7257f29708238de1440815a3e6d3d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b2c0237ae8b7257f29708238de1440815a3e6d3d",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.3+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052003.07;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3+ (Build: 20191220)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052003.08;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3+ (Build: 20200103)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e9dd5864e9432f4d5005753ead0d8079f14249e",
      "candidate_info": {
        "commit_hash": "2e9dd5864e9432f4d5005753ead0d8079f14249e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2e9dd5864e9432f4d5005753ead0d8079f14249e",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-67458 core: removing stale cohortroles and role assignments",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3448:         upgrade_main_savepoint(true, 2019052002.07);",
          "3449:     }",
          "3451:     return true;",
          "3452: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3451:     if ($oldversion < 2019052003.05) {",
          "3453:         $DB->delete_records_select('tool_cohortroles', \"roleid NOT IN (SELECT id FROM {role})\");",
          "3456:         $DB->delete_records_select('role_assignments', \"roleid NOT IN (SELECT id FROM {role})\");",
          "3459:         upgrade_main_savepoint(true, 2019052003.05);",
          "3460:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052003.04;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019052003.05;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b65bfc8ab4ecd07042a681e046a51557a08136de",
      "candidate_info": {
        "commit_hash": "b65bfc8ab4ecd07042a681e046a51557a08136de",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b65bfc8ab4ecd07042a681e046a51557a08136de",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-63211 core: upgrade to remove duplicate contacts\n\nRemove any duplicate rows - from now on adding contacts just requires 1 row.\nThe person who made the contact request (userid) and the person who approved\nit (contactid). Upgrade the table so that the first person to add the contact\nwas the one who made the request.",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2505:         upgrade_main_savepoint(true, 2018092800.02);",
          "2506:     }",
          "2508:     return true;",
          "2509: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2508:     if ($oldversion < 2018092800.03) {",
          "2513:         $sql = \"SELECT c1.id",
          "2514:                   FROM {message_contacts} c1",
          "2515:             INNER JOIN {message_contacts} c2",
          "2516:                     ON c1.userid = c2.contactid",
          "2517:                    AND c1.contactid = c2.userid",
          "2518:                  WHERE c1.id > c2.id\";",
          "2519:         if ($contacts = $DB->get_records_sql($sql)) {",
          "2520:             list($insql, $inparams) = $DB->get_in_or_equal(array_keys($contacts));",
          "2521:             $DB->delete_records_select('message_contacts', \"id $insql\", $inparams);",
          "2522:         }",
          "2524:         upgrade_main_savepoint(true, 2018092800.03);",
          "2525:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018092800.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018092800.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9735bbde702d64144bf32854294d9714f93ffa6",
      "candidate_info": {
        "commit_hash": "f9735bbde702d64144bf32854294d9714f93ffa6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f9735bbde702d64144bf32854294d9714f93ffa6",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-67458 core: removing stale cohortroles and role assignments",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3790:     return true;",
          "3791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3790:     if ($oldversion < 2019111800.04) {",
          "3792:         $DB->delete_records_select('tool_cohortroles', \"roleid NOT IN (SELECT id FROM {role})\");",
          "3795:         $DB->delete_records_select('role_assignments', \"roleid NOT IN (SELECT id FROM {role})\");",
          "3798:         upgrade_main_savepoint(true, 2019111800.04);",
          "3799:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "35: $release  = '3.8+ (Build: 20191205)'; // Human-friendly version name",
          "",
          "[Removed Lines]",
          "32: $version  = 2019111800.03;              // 20191118      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019111800.04;              // 20191118      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    }
  ]
}