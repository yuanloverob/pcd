{
  "cve_id": "CVE-2024-28175",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Due to the improper URL protocols filtering of links specified in the `link.argocd.argoproj.io` annotations in the application summary component, an attacker can achieve cross-site scripting with elevated permissions. All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a javascript: link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin). This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. A patch for this vulnerability has been released in Argo CD versions v2.10.3 v2.9.8, and v2.8.12. There are no completely-safe workarounds besides upgrading. The safest alternative, if upgrading is not possible, would be to create a Kubernetes admission controller to reject any resources with an annotation starting with link.argocd.argoproj.io or reject the resource if the value use an improper URL protocol. This validation will need to be applied in all clusters managed by ArgoCD.\n\n",
  "repo": "argoproj/argo-cd",
  "patch_hash": "479b5544b57dc9ef767d49f7003f39602c480b71",
  "patch_info": {
    "commit_hash": "479b5544b57dc9ef767d49f7003f39602c480b71",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/479b5544b57dc9ef767d49f7003f39602c480b71",
    "files": [
      "ui/src/app/applications/components/application-summary/application-summary.tsx",
      "ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx"
    ],
    "message": "Merge pull request from GHSA-jwv5-8mqv-g387\n\n* fix: Validate external URLs for applicatins\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\n\n* fix(ui): remove invalid external-link\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n* linting\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n---------\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\nCo-authored-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>",
    "before_after_code_files": [
      "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
      "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
    ]
  },
  "patch_diff": {
    "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
      "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import './application-summary.scss';",
      "32: import {DeepLinks} from '../../../shared/components/deep-links';",
      "34: function swap(array: any[], a: number, b: number) {",
      "35:     array = array.slice();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import {ExternalLinks} from '../application-urls';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "341:             )",
      "342:         }",
      "343:     ];",
      "346:     if (urls.length > 0) {",
      "347:         attributes.push({",
      "348:             title: 'URLs',",
      "349:             view: (",
      "350:                 <React.Fragment>",
      "356:                             </a>",
      "358:                 </React.Fragment>",
      "359:             )",
      "360:         });",
      "",
      "[Removed Lines]",
      "345:     const urls = app.status.summary.externalURLs || [];",
      "351:                     {urls",
      "352:                         .map(item => item.split('|'))",
      "353:                         .map((parts, i) => (",
      "354:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
      "355:                                 {parts[0]} &nbsp;",
      "357:                         ))}",
      "",
      "[Added Lines]",
      "345:     const urls = ExternalLinks(app.status.summary.externalURLs);",
      "351:                     {urls.map((url, i) => {",
      "352:                         return (",
      "353:                             <a key={i} href={url.ref} target='__blank'>",
      "354:                                 {url.title} &nbsp;",
      "356:                         );",
      "357:                     })}",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
      "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: test('rejects malicious URLs', () => {",
      "4:     expect(() => {",
      "",
      "[Removed Lines]",
      "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
      "",
      "[Added Lines]",
      "1: import { ExternalLink, ExternalLinks, InvalidExternalLinkError } from './application-urls';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7:     expect(() => {",
      "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
      "9:     }).toThrowError(InvalidExternalLinkError);",
      "10: });",
      "12: test('allows absolute URLs', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:     expect(() => {",
      "11:         const _ = new ExternalLink('title|data:text/html;<h1>hi</h1>');",
      "12:     }).toThrowError(InvalidExternalLinkError);",
      "13:     expect(() => {",
      "14:         const _ = new ExternalLink('data:title|data:text/html;<h1>hi</h1>');",
      "15:     }).toThrowError(InvalidExternalLinkError);",
      "17:     expect(() => {",
      "18:         const _ = new ExternalLink('data:title|https://localhost:8080/applications');",
      "19:     }).not.toThrowError(InvalidExternalLinkError);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "18:     window.location = new URL('https://localhost:8080/applications');",
      "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
      "20: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: test('URLs format', () => {",
      "34:     expect(new ExternalLink('https://localhost:8080/applications')).toEqual({",
      "35:         ref: 'https://localhost:8080/applications',",
      "36:         title: 'https://localhost:8080/applications',",
      "37:     })",
      "38:     expect(new ExternalLink('title|https://localhost:8080/applications')).toEqual({",
      "39:         ref: 'https://localhost:8080/applications',",
      "40:         title: 'title',",
      "41:     })",
      "42: });",
      "45: test('malicious URLs from list to be removed', () => {",
      "46:     const urls: string[] = [",
      "47:         'javascript:alert(\"hi\")',",
      "48:         'https://localhost:8080/applications',",
      "49:     ]",
      "50:     const links = ExternalLinks(urls);",
      "52:     expect(links).toHaveLength(1);",
      "53:     expect(links).toContainEqual({",
      "54:         ref: 'https://localhost:8080/applications',",
      "55:         title: 'https://localhost:8080/applications',",
      "56:     });",
      "57: });",
      "60: test('list to be sorted', () => {",
      "61:     const urls: string[] = [",
      "62:         'https://a',",
      "63:         'https://b',",
      "64:         'a|https://c',",
      "65:         'z|https://c',",
      "66:         'x|https://d',",
      "67:         'x|https://c',",
      "68:     ]",
      "69:     const links = ExternalLinks(urls);",
      "77:     expect(links).toHaveLength(6);",
      "78:     expect(links[0].title).toEqual('a')",
      "79:     expect(links[1].title).toEqual('x')",
      "80:     expect(links[1].ref).toEqual('https://c')",
      "81:     expect(links[2].title).toEqual('x')",
      "82:     expect(links[2].ref).toEqual('https://d')",
      "83:     expect(links[3].title).toEqual('z')",
      "84:     expect(links[4].title).toEqual('https://a')",
      "85:     expect(links[5].title).toEqual('https://b')",
      "86: });",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
      "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:     }",
      "30: }",
      "33:     const externalLinks: ExternalLink[] = [];",
      "34:     for (const url of urls || []) {",
      "35:         try {",
      "",
      "[Removed Lines]",
      "32: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
      "",
      "[Added Lines]",
      "32: export const ExternalLinks = (urls?: string[]) => {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:     externalLinks.sort((a, b) => {",
      "46:             return a.title > b.title ? 1 : -1;",
      "48:             return 1;",
      "50:             return -1;",
      "51:         }",
      "52:         return a.ref > b.ref ? 1 : -1;",
      "53:     });",
      "55:     return (",
      "56:         ((externalLinks || []).length > 0 && (",
      "57:             <div className='applications-list__external-links-icon-container'>",
      "",
      "[Removed Lines]",
      "45:         if (a.title !== '' && b.title !== '') {",
      "47:         } else if (a.title === '') {",
      "49:         } else if (b.title === '') {",
      "",
      "[Added Lines]",
      "45:         const hasTitle = (x: ExternalLink): boolean => {",
      "46:             return x.title !== x.ref && x.title !== '';",
      "47:         };",
      "49:         if (hasTitle(a) && hasTitle(b) && a.title !== b.title) {",
      "51:         } else if (hasTitle(b) && !hasTitle(a)) {",
      "53:         } else if (hasTitle(a) && !hasTitle(b)) {",
      "59:     return externalLinks;",
      "60: };",
      "62: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
      "63:     const externalLinks: ExternalLink[] = ExternalLinks(urls);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3dd069b049b65c887843caf40534194382cb91e6",
      "candidate_info": {
        "commit_hash": "3dd069b049b65c887843caf40534194382cb91e6",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/3dd069b049b65c887843caf40534194382cb91e6",
        "files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-jwv5-8mqv-g387\n\n* fix: Validate external URLs for applicatins\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\n\n* fix(ui): remove invalid external-link\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n* linting\n\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\n\n---------\n\nSigned-off-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>\nSigned-off-by: Alexandre Gaudreault <alexandre_gaudreault@intuit.com>\nCo-authored-by: Ry0taK <49341894+Ry0taK@users.noreply.github.com>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx",
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-summary/application-summary.tsx||ui/src/app/applications/components/application-summary/application-summary.tsx": [
          "File: ui/src/app/applications/components/application-summary/application-summary.tsx -> ui/src/app/applications/components/application-summary/application-summary.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import './application-summary.scss';",
          "32: import {DeepLinks} from '../../../shared/components/deep-links';",
          "34: function swap(array: any[], a: number, b: number) {",
          "35:     array = array.slice();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import {ExternalLinks} from '../application-urls';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:             )",
          "327:         }",
          "328:     ];",
          "331:     if (urls.length > 0) {",
          "332:         attributes.push({",
          "333:             title: 'URLs',",
          "334:             view: (",
          "335:                 <React.Fragment>",
          "341:                             </a>",
          "343:                 </React.Fragment>",
          "344:             )",
          "345:         });",
          "",
          "[Removed Lines]",
          "330:     const urls = app.status.summary.externalURLs || [];",
          "336:                     {urls",
          "337:                         .map(item => item.split('|'))",
          "338:                         .map((parts, i) => (",
          "339:                             <a key={i} href={parts.length > 1 ? parts[1] : parts[0]} target='__blank'>",
          "340:                                 {parts[0]} &nbsp;",
          "342:                         ))}",
          "",
          "[Added Lines]",
          "330:     const urls = ExternalLinks(app.status.summary.externalURLs);",
          "336:                     {urls.map((url, i) => {",
          "337:                         return (",
          "338:                             <a key={i} href={url.ref} target='__blank'>",
          "339:                                 {url.title} &nbsp;",
          "341:                         );",
          "342:                     })}",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "",
          "[Removed Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "",
          "[Added Lines]",
          "1: import { ExternalLink, ExternalLinks, InvalidExternalLinkError } from './application-urls';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:     expect(() => {",
          "11:         const _ = new ExternalLink('title|data:text/html;<h1>hi</h1>');",
          "12:     }).toThrowError(InvalidExternalLinkError);",
          "13:     expect(() => {",
          "14:         const _ = new ExternalLink('data:title|data:text/html;<h1>hi</h1>');",
          "15:     }).toThrowError(InvalidExternalLinkError);",
          "17:     expect(() => {",
          "18:         const _ = new ExternalLink('data:title|https://localhost:8080/applications');",
          "19:     }).not.toThrowError(InvalidExternalLinkError);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: test('URLs format', () => {",
          "34:     expect(new ExternalLink('https://localhost:8080/applications')).toEqual({",
          "35:         ref: 'https://localhost:8080/applications',",
          "36:         title: 'https://localhost:8080/applications',",
          "37:     })",
          "38:     expect(new ExternalLink('title|https://localhost:8080/applications')).toEqual({",
          "39:         ref: 'https://localhost:8080/applications',",
          "40:         title: 'title',",
          "41:     })",
          "42: });",
          "45: test('malicious URLs from list to be removed', () => {",
          "46:     const urls: string[] = [",
          "47:         'javascript:alert(\"hi\")',",
          "48:         'https://localhost:8080/applications',",
          "49:     ]",
          "50:     const links = ExternalLinks(urls);",
          "52:     expect(links).toHaveLength(1);",
          "53:     expect(links).toContainEqual({",
          "54:         ref: 'https://localhost:8080/applications',",
          "55:         title: 'https://localhost:8080/applications',",
          "56:     });",
          "57: });",
          "60: test('list to be sorted', () => {",
          "61:     const urls: string[] = [",
          "62:         'https://a',",
          "63:         'https://b',",
          "64:         'a|https://c',",
          "65:         'z|https://c',",
          "66:         'x|https://d',",
          "67:         'x|https://c',",
          "68:     ]",
          "69:     const links = ExternalLinks(urls);",
          "77:     expect(links).toHaveLength(6);",
          "78:     expect(links[0].title).toEqual('a')",
          "79:     expect(links[1].title).toEqual('x')",
          "80:     expect(links[1].ref).toEqual('https://c')",
          "81:     expect(links[2].title).toEqual('x')",
          "82:     expect(links[2].ref).toEqual('https://d')",
          "83:     expect(links[3].title).toEqual('z')",
          "84:     expect(links[4].title).toEqual('https://a')",
          "85:     expect(links[5].title).toEqual('https://b')",
          "86: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     }",
          "30: }",
          "33:     const externalLinks: ExternalLink[] = [];",
          "34:     for (const url of urls || []) {",
          "35:         try {",
          "",
          "[Removed Lines]",
          "32: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "",
          "[Added Lines]",
          "32: export const ExternalLinks = (urls?: string[]) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     externalLinks.sort((a, b) => {",
          "46:             return a.title > b.title ? 1 : -1;",
          "48:             return 1;",
          "50:             return -1;",
          "51:         }",
          "52:         return a.ref > b.ref ? 1 : -1;",
          "53:     });",
          "55:     return (",
          "56:         ((externalLinks || []).length > 0 && (",
          "57:             <div className='applications-list__external-links-icon-container'>",
          "",
          "[Removed Lines]",
          "45:         if (a.title !== '' && b.title !== '') {",
          "47:         } else if (a.title === '') {",
          "49:         } else if (b.title === '') {",
          "",
          "[Added Lines]",
          "45:         const hasTitle = (x: ExternalLink): boolean => {",
          "46:             return x.title !== x.ref && x.title !== '';",
          "47:         };",
          "49:         if (hasTitle(a) && hasTitle(b) && a.title !== b.title) {",
          "51:         } else if (hasTitle(b) && !hasTitle(a)) {",
          "53:         } else if (hasTitle(a) && !hasTitle(b)) {",
          "59:     return externalLinks;",
          "60: };",
          "62: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "63:     const externalLinks: ExternalLink[] = ExternalLinks(urls);",
          "",
          "---------------"
        ]
      }
    }
  ]
}