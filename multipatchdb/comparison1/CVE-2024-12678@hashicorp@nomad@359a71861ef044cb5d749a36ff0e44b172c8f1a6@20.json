{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9bcbf821abd35cfadaaa1b98a1538b851d650aac",
      "candidate_info": {
        "commit_hash": "9bcbf821abd35cfadaaa1b98a1538b851d650aac",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/9bcbf821abd35cfadaaa1b98a1538b851d650aac",
        "files": [
          ".changelog/24466.txt",
          "ui/app/adapters/job.js"
        ],
        "message": "backport of commit 4708e06199d539292dd80eda331998e3d20871b8 (#24490)\n\nCo-authored-by: Phil Renaud <phil.renaud@hashicorp.com>",
        "before_after_code_files": [
          "ui/app/adapters/job.js||ui/app/adapters/job.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/adapters/job.js||ui/app/adapters/job.js": [
          "File: ui/app/adapters/job.js -> ui/app/adapters/job.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   }",
          "206:   getVersions(job, diffVersion) {",
          "223:   }",
          "",
          "[Removed Lines]",
          "207:     const url = addToPath(",
          "208:       this.urlForFindRecord(job.get('id'), 'job'),",
          "209:       '/versions'",
          "210:     );",
          "212:     const namespace = job.get('namespace.name') || 'default';",
          "214:     const query = {",
          "215:       namespace,",
          "216:       diffs: true,",
          "217:     };",
          "219:     if (diffVersion) {",
          "220:       query.diff_version = diffVersion;",
          "221:     }",
          "222:     return this.ajax(url, 'GET', { data: query });",
          "",
          "[Added Lines]",
          "207:     let url = this.urlForVersions(job, diffVersion);",
          "208:     return this.ajax(url, 'GET');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     return result;",
          "309:   }",
          "311:   urlForQuery(query, modelName, method) {",
          "312:     let baseUrl = `/${this.namespace}/jobs/statuses`;",
          "313:     if (method === 'POST' && query.index) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:   urlForVersions(job, diffVersion) {",
          "298:     let url = this.urlForFindRecord(job.get('id'), 'job', null, 'versions');",
          "300:     let paramString = 'diffs=true';",
          "301:     if (diffVersion) {",
          "302:       paramString += `&diff_version=${diffVersion}`;",
          "303:     }",
          "304:     url = addToPath(url, '', paramString);",
          "305:     return url;",
          "306:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a7cb460bfdf55e0c60085a6471984c3647e2188",
      "candidate_info": {
        "commit_hash": "9a7cb460bfdf55e0c60085a6471984c3647e2188",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/9a7cb460bfdf55e0c60085a6471984c3647e2188",
        "files": [
          "command/agent/consul/connect_test.go"
        ],
        "message": "backport of commit a0d7fb6b09577bfadbe7abe46ef6b2b7045a6c7c (#24227)\n\nCo-authored-by: Daniel Bennett <dbennett@hashicorp.com>",
        "before_after_code_files": [
          "command/agent/consul/connect_test.go||command/agent/consul/connect_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/consul/connect_test.go||command/agent/consul/connect_test.go": [
          "File: command/agent/consul/connect_test.go -> command/agent/consul/connect_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:    \"bind_address\":     \"::\",",
          "443:    \"bind_port\":        42,",
          "444:    \"envoy_stats_tags\": []string{\"nomad.alloc_id=ipv6_alloc\"},",
          "450:  })",
          "451: }",
          "",
          "[Removed Lines]",
          "445:   }, connectProxyConfig(map[string]any{",
          "446:    \"bind_address\": \"::\",",
          "447:   }, 42, structs.AllocInfo{AllocID: \"ipv6_alloc\"}, []*structs.NetworkResource{",
          "448:    {Mode: \"bridge\", IP: \"fd00:a110:c8::1\"},",
          "449:   }))",
          "",
          "[Added Lines]",
          "445:   }, connectProxyConfig(nil, 42, structs.AllocInfo{AllocID: \"ipv6_alloc\"},",
          "446:    []*structs.NetworkResource{{Mode: \"bridge\", IP: \"fd00:a110:c8::1\"}},",
          "447:   ))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8da58bcd3355ec7d5c6cfae0d759941ecfc9187",
      "candidate_info": {
        "commit_hash": "f8da58bcd3355ec7d5c6cfae0d759941ecfc9187",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/f8da58bcd3355ec7d5c6cfae0d759941ecfc9187",
        "files": [
          "nomad/server.go"
        ],
        "message": "server: Fix error message format when detailing cluster metadata (#24875)\n\nbackport of commit 03cbe7cd71134b5f96c149bff7ebdc39c7e6dee3\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "nomad/server.go||nomad/server.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/server.go||nomad/server.go": [
          "File: nomad/server.go -> nomad/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2172:  if !s.IsLeader() {",
          "2174:  }",
          "",
          "[Removed Lines]",
          "2173:   return structs.ClusterMetadata{}, errors.New(\"cluster ID not ready {}yet\")",
          "",
          "[Added Lines]",
          "2173:   return structs.ClusterMetadata{}, errors.New(\"cluster ID not ready yet\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f7787c6d4752c0a85a3a4a75c60c548fe4a3cd5",
      "candidate_info": {
        "commit_hash": "1f7787c6d4752c0a85a3a4a75c60c548fe4a3cd5",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/1f7787c6d4752c0a85a3a4a75c60c548fe4a3cd5",
        "files": [
          ".changelog/25108.txt",
          "client/config/config.go",
          "client/driver_manager_test.go",
          "client/fingerprint/cpu.go",
          "client/lib/numalib/detect_darwin.go",
          "client/lib/numalib/detect_default.go",
          "client/lib/numalib/detect_linux.go",
          "client/lib/numalib/detect_noimpl_test.go",
          "client/lib/numalib/detect_test.go",
          "client/pluginmanager/drivermanager/testing.go",
          "command/agent/agent.go",
          "command/agent/config.go",
          "drivers/docker/driver_test.go",
          "drivers/docker/fingerprint_test.go",
          "drivers/exec/driver_test.go",
          "drivers/java/driver_test.go",
          "drivers/qemu/driver_test.go",
          "drivers/rawexec/driver_test.go",
          "drivers/shared/executor/executor_test.go",
          "drivers/shared/executor/executor_windows_test.go",
          "website/content/docs/configuration/client.mdx"
        ],
        "message": "Backport of Add config option to disable dmidecode into release/1.9.x (#25110)\n\nCo-authored-by: Jorge Marey <6938602+jorgemarey@users.noreply.github.com>",
        "before_after_code_files": [
          "client/config/config.go||client/config/config.go",
          "client/driver_manager_test.go||client/driver_manager_test.go",
          "client/fingerprint/cpu.go||client/fingerprint/cpu.go",
          "client/lib/numalib/detect_darwin.go||client/lib/numalib/detect_darwin.go",
          "client/lib/numalib/detect_default.go||client/lib/numalib/detect_default.go",
          "client/lib/numalib/detect_linux.go||client/lib/numalib/detect_linux.go",
          "client/lib/numalib/detect_noimpl_test.go||client/lib/numalib/detect_noimpl_test.go",
          "client/lib/numalib/detect_test.go||client/lib/numalib/detect_test.go",
          "client/pluginmanager/drivermanager/testing.go||client/pluginmanager/drivermanager/testing.go",
          "command/agent/agent.go||command/agent/agent.go",
          "command/agent/config.go||command/agent/config.go",
          "drivers/docker/driver_test.go||drivers/docker/driver_test.go",
          "drivers/docker/fingerprint_test.go||drivers/docker/fingerprint_test.go",
          "drivers/exec/driver_test.go||drivers/exec/driver_test.go",
          "drivers/java/driver_test.go||drivers/java/driver_test.go",
          "drivers/qemu/driver_test.go||drivers/qemu/driver_test.go",
          "drivers/rawexec/driver_test.go||drivers/rawexec/driver_test.go",
          "drivers/shared/executor/executor_test.go||drivers/shared/executor/executor_test.go",
          "drivers/shared/executor/executor_windows_test.go||drivers/shared/executor/executor_windows_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/config/config.go||client/config/config.go": [
          "File: client/config/config.go -> client/config/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  NetworkSpeed int",
          "128:  CpuCompute int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  CpuDisableDmidecode bool",
          "",
          "---------------"
        ],
        "client/driver_manager_test.go||client/driver_manager_test.go": [
          "File: client/driver_manager_test.go -> client/driver_manager_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: )",
          "21: var (",
          "23: )",
          "",
          "[Removed Lines]",
          "22:  topology = numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "22:  topology = numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "client/fingerprint/cpu.go||client/fingerprint/cpu.go": [
          "File: client/fingerprint/cpu.go -> client/fingerprint/cpu.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  }",
          "90:  f.top = numalib.Scan(append(",
          "92:   &numalib.ConfigScanner{",
          "93:    ReservableCores: reservableCores,",
          "94:    ReservedCores:   reservedCores,",
          "",
          "[Removed Lines]",
          "91:   numalib.PlatformScanners(),",
          "",
          "[Added Lines]",
          "91:   numalib.PlatformScanners(request.Config.CpuDisableDmidecode),",
          "",
          "---------------"
        ],
        "client/lib/numalib/detect_darwin.go||client/lib/numalib/detect_darwin.go": [
          "File: client/lib/numalib/detect_darwin.go -> client/lib/numalib/detect_darwin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: )",
          "17:  return []SystemScanner{",
          "18:   new(MacOS),",
          "19:  }",
          "",
          "[Removed Lines]",
          "16: func PlatformScanners() []SystemScanner {",
          "",
          "[Added Lines]",
          "16: func PlatformScanners(_ bool) []SystemScanner {",
          "",
          "---------------"
        ],
        "client/lib/numalib/detect_default.go||client/lib/numalib/detect_default.go": [
          "File: client/lib/numalib/detect_default.go -> client/lib/numalib/detect_default.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  return []SystemScanner{",
          "12:   new(Generic),",
          "13:  }",
          "",
          "[Removed Lines]",
          "10: func PlatformScanners() []SystemScanner {",
          "",
          "[Added Lines]",
          "10: func PlatformScanners(_ bool) []SystemScanner {",
          "",
          "---------------"
        ],
        "client/lib/numalib/detect_linux.go||client/lib/numalib/detect_linux.go": [
          "File: client/lib/numalib/detect_linux.go -> client/lib/numalib/detect_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: )",
          "29:  }",
          "30: }",
          "32: const (",
          "",
          "[Removed Lines]",
          "22: func PlatformScanners() []SystemScanner {",
          "23:  return []SystemScanner{",
          "24:   new(Sysfs),",
          "25:   new(Smbios),",
          "26:   new(Cgroups1),",
          "27:   new(Cgroups2),",
          "28:   new(Fallback),",
          "",
          "[Added Lines]",
          "22: func PlatformScanners(cpuDisableDmidecode bool) []SystemScanner {",
          "23:  scanners := []SystemScanner{new(Sysfs)}",
          "24:  if !cpuDisableDmidecode {",
          "25:   scanners = append(scanners, new(Smbios))",
          "27:  scanners = append(scanners, new(Cgroups1))",
          "28:  scanners = append(scanners, new(Cgroups2))",
          "29:  scanners = append(scanners, new(Fallback))",
          "31:  return scanners",
          "",
          "---------------"
        ],
        "client/lib/numalib/detect_noimpl_test.go||client/lib/numalib/detect_noimpl_test.go": [
          "File: client/lib/numalib/detect_noimpl_test.go -> client/lib/numalib/detect_noimpl_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "19: func Test_NoImpl_no(t *testing.T) {",
          "21:  fallback := NoImpl(original)",
          "22:  must.EqOp(t, original, fallback) // pointer is same",
          "23: }",
          "",
          "[Removed Lines]",
          "20:  original := Scan(PlatformScanners())",
          "",
          "[Added Lines]",
          "20:  original := Scan(PlatformScanners(false))",
          "",
          "---------------"
        ],
        "client/lib/numalib/detect_test.go||client/lib/numalib/detect_test.go": [
          "File: client/lib/numalib/detect_test.go -> client/lib/numalib/detect_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: func TestScanTopology(t *testing.T) {",
          "16:  must.Positive(t, top.UsableCompute())",
          "17:  must.Positive(t, top.TotalCompute())",
          "18:  must.Positive(t, top.NumCores())",
          "",
          "[Removed Lines]",
          "15:  top := Scan(PlatformScanners())",
          "",
          "[Added Lines]",
          "15:  top := Scan(PlatformScanners(false))",
          "",
          "---------------"
        ],
        "client/pluginmanager/drivermanager/testing.go||client/pluginmanager/drivermanager/testing.go": [
          "File: client/pluginmanager/drivermanager/testing.go -> client/pluginmanager/drivermanager/testing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: }",
          "29: func TestDriverManager(t *testing.T) Manager {",
          "31:  logger := testlog.HCLogger(t).Named(\"driver_mgr\")",
          "32:  pluginLoader := catalog.TestPluginLoader(t)",
          "33:  return &testManager{",
          "",
          "[Removed Lines]",
          "30:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "30:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "command/agent/agent.go||command/agent/agent.go": [
          "File: command/agent/agent.go -> command/agent/agent.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:  if agentConfig.Client.NetworkSpeed != 0 {",
          "748:   conf.NetworkSpeed = agentConfig.Client.NetworkSpeed",
          "749:  }",
          "750:  if agentConfig.Client.CpuCompute != 0 {",
          "751:   conf.CpuCompute = agentConfig.Client.CpuCompute",
          "752:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:  if agentConfig.Client.CpuDisableDmidecode {",
          "751:   conf.CpuDisableDmidecode = agentConfig.Client.CpuDisableDmidecode",
          "752:  }",
          "",
          "---------------"
        ],
        "command/agent/config.go||command/agent/config.go": [
          "File: command/agent/config.go -> command/agent/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:  NetworkSpeed int `hcl:\"network_speed\"`",
          "272:  CpuCompute int `hcl:\"cpu_total_compute\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:  CpuDisableDmidecode bool `hcl:\"cpu_disable_dmidecode\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2333:  if b.NetworkSpeed != 0 {",
          "2334:   result.NetworkSpeed = b.NetworkSpeed",
          "2335:  }",
          "2336:  if b.CpuCompute != 0 {",
          "2337:   result.CpuCompute = b.CpuCompute",
          "2338:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2339:  if b.CpuDisableDmidecode {",
          "2340:   result.CpuDisableDmidecode = b.CpuDisableDmidecode",
          "2341:  }",
          "",
          "---------------"
        ],
        "drivers/docker/driver_test.go||drivers/docker/driver_test.go": [
          "File: drivers/docker/driver_test.go -> drivers/docker/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: )",
          "70: var (",
          "72: )",
          "74: func dockerIsRemote() bool {",
          "",
          "[Removed Lines]",
          "71:  top = numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "71:  top = numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "drivers/docker/fingerprint_test.go||drivers/docker/fingerprint_test.go": [
          "File: drivers/docker/fingerprint_test.go -> drivers/docker/fingerprint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: )",
          "18: var (",
          "20: )",
          "",
          "[Removed Lines]",
          "19:  topology = numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "19:  topology = numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "drivers/exec/driver_test.go||drivers/exec/driver_test.go": [
          "File: drivers/exec/driver_test.go -> drivers/exec/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: }",
          "77: func newExecDriverTest(t *testing.T, ctx context.Context) drivers.DriverPlugin {",
          "79:  d := NewExecDriver(ctx, testlog.HCLogger(t))",
          "80:  d.(*Driver).nomadConfig = &base.ClientDriverConfig{Topology: topology}",
          "81:  d.(*Driver).userIDValidator = &mockIDValidator{}",
          "",
          "[Removed Lines]",
          "78:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "78:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "drivers/java/driver_test.go||drivers/java/driver_test.go": [
          "File: drivers/java/driver_test.go -> drivers/java/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: }",
          "41: func newJavaDriverTest(t *testing.T, ctx context.Context) drivers.DriverPlugin {",
          "43:  d := NewDriver(ctx, testlog.HCLogger(t))",
          "44:  d.(*Driver).nomadConfig = &base.ClientDriverConfig{Topology: topology}",
          "45:  return d",
          "",
          "[Removed Lines]",
          "42:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "42:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "drivers/qemu/driver_test.go||drivers/qemu/driver_test.go": [
          "File: drivers/qemu/driver_test.go -> drivers/qemu/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  ctx, cancel := context.WithCancel(context.Background())",
          "39:  defer cancel()",
          "42:  d := NewQemuDriver(ctx, testlog.HCLogger(t))",
          "43:  d.(*Driver).nomadConfig = &base.ClientDriverConfig{Topology: topology}",
          "44:  harness := dtestutil.NewDriverHarness(t, d)",
          "",
          "[Removed Lines]",
          "41:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "41:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:  ctx, cancel := context.WithCancel(context.Background())",
          "117:  defer cancel()",
          "120:  d := NewQemuDriver(ctx, testlog.HCLogger(t))",
          "121:  d.(*Driver).nomadConfig = &base.ClientDriverConfig{Topology: topology}",
          "122:  harness := dtestutil.NewDriverHarness(t, d)",
          "",
          "[Removed Lines]",
          "119:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "119:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:  ctx, cancel := context.WithCancel(context.Background())",
          "162:  defer cancel()",
          "165:  d := NewQemuDriver(ctx, testlog.HCLogger(t))",
          "166:  d.(*Driver).nomadConfig = &base.ClientDriverConfig{Topology: topology}",
          "167:  harness := dtestutil.NewDriverHarness(t, d)",
          "",
          "[Removed Lines]",
          "164:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "164:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "drivers/rawexec/driver_test.go||drivers/rawexec/driver_test.go": [
          "File: drivers/rawexec/driver_test.go -> drivers/rawexec/driver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: }",
          "75: var (",
          "77: )",
          "79: type mockIDValidator struct{}",
          "",
          "[Removed Lines]",
          "76:  topology = numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "76:  topology = numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_test.go||drivers/shared/executor/executor_test.go": [
          "File: drivers/shared/executor/executor_test.go -> drivers/shared/executor/executor_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: }",
          "57: var (",
          "59:  compute  = topology.Compute()",
          "60: )",
          "",
          "[Removed Lines]",
          "58:  topology = numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "58:  topology = numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:  }",
          "343:  driverCfg := &base.ClientDriverConfig{",
          "345:  }",
          "347:  executor, pluginClient, err := CreateExecutor(testlog.HCLogger(t), driverCfg, cfg)",
          "",
          "[Removed Lines]",
          "344:   Topology: numalib.Scan(numalib.PlatformScanners()),",
          "",
          "[Added Lines]",
          "344:   Topology: numalib.Scan(numalib.PlatformScanners(false)),",
          "",
          "---------------"
        ],
        "drivers/shared/executor/executor_windows_test.go||drivers/shared/executor/executor_windows_test.go": [
          "File: drivers/shared/executor/executor_windows_test.go -> drivers/shared/executor/executor_windows_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: func TestExecutor_ProcessExit(t *testing.T) {",
          "62:  ci.Parallel(t)",
          "65:  compute := topology.Compute()",
          "67:  cmd := testExecutorCommand(t)",
          "",
          "[Removed Lines]",
          "64:  topology := numalib.Scan(numalib.PlatformScanners())",
          "",
          "[Added Lines]",
          "64:  topology := numalib.Scan(numalib.PlatformScanners(false))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "502b9bad8f3caabcdd4ace03cb92bfcfc1cfce82",
      "candidate_info": {
        "commit_hash": "502b9bad8f3caabcdd4ace03cb92bfcfc1cfce82",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/502b9bad8f3caabcdd4ace03cb92bfcfc1cfce82",
        "files": [
          ".changelog/25453.txt",
          "drivers/exec/driver.go",
          "drivers/java/driver.go",
          "drivers/qemu/driver.go",
          "drivers/rawexec/driver.go",
          "drivers/rawexec/driver_unix_test.go"
        ],
        "message": "backport of commit cb8f4ea45244cf4404aa9085353f66e96702c9ab (#25460)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "drivers/exec/driver.go||drivers/exec/driver.go",
          "drivers/java/driver.go||drivers/java/driver.go",
          "drivers/qemu/driver.go||drivers/qemu/driver.go",
          "drivers/rawexec/driver.go||drivers/rawexec/driver.go",
          "drivers/rawexec/driver_unix_test.go||drivers/rawexec/driver_unix_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/exec/driver.go||drivers/exec/driver.go": [
          "File: drivers/exec/driver.go -> drivers/exec/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   result = &drivers.ExitResult{",
          "596:    Err: fmt.Errorf(\"executor: error waiting on process: %v\", err),",
          "597:   }",
          "598:  } else {",
          "599:   result = &drivers.ExitResult{",
          "600:    ExitCode:  ps.ExitCode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:   if ps == nil {",
          "601:    result.ExitCode = -1",
          "602:    result.OOMKilled = false",
          "603:   }",
          "",
          "---------------"
        ],
        "drivers/java/driver.go||drivers/java/driver.go": [
          "File: drivers/java/driver.go -> drivers/java/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:   result = &drivers.ExitResult{",
          "605:    Err: fmt.Errorf(\"executor: error waiting on process: %v\", err),",
          "606:   }",
          "607:  } else {",
          "608:   result = &drivers.ExitResult{",
          "609:    ExitCode:  ps.ExitCode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609:   if ps == nil {",
          "610:    result.ExitCode = -1",
          "611:    result.OOMKilled = false",
          "612:   }",
          "",
          "---------------"
        ],
        "drivers/qemu/driver.go||drivers/qemu/driver.go": [
          "File: drivers/qemu/driver.go -> drivers/qemu/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:   result = &drivers.ExitResult{",
          "744:    Err: fmt.Errorf(\"executor: error waiting on process: %v\", err),",
          "745:   }",
          "746:  } else {",
          "747:   result = &drivers.ExitResult{",
          "748:    ExitCode:  ps.ExitCode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:   if ps == nil {",
          "749:    result.ExitCode = -1",
          "750:    result.OOMKilled = false",
          "751:   }",
          "",
          "---------------"
        ],
        "drivers/rawexec/driver.go||drivers/rawexec/driver.go": [
          "File: drivers/rawexec/driver.go -> drivers/rawexec/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:   result = &drivers.ExitResult{",
          "472:    Err: fmt.Errorf(\"executor: error waiting on process: %v\", err),",
          "473:   }",
          "474:  } else {",
          "475:   result = &drivers.ExitResult{",
          "476:    ExitCode:  ps.ExitCode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:   if ps == nil {",
          "477:    result.ExitCode = -1",
          "478:    result.OOMKilled = false",
          "479:   }",
          "",
          "---------------"
        ],
        "drivers/rawexec/driver_unix_test.go||drivers/rawexec/driver_unix_test.go": [
          "File: drivers/rawexec/driver_unix_test.go -> drivers/rawexec/driver_unix_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:   must.Eq(t, tc.exp, d.Validate(tc.driverConfig))",
          "581:  }",
          "582: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: func TestRawExecDriver_ExecutorKilled_ExitCode(t *testing.T) {",
          "585:  ci.Parallel(t)",
          "586:  clienttestutil.ExecCompatible(t)",
          "588:  d := newEnabledRawExecDriver(t)",
          "589:  harness := dtestutil.NewDriverHarness(t, d)",
          "590:  defer harness.Kill()",
          "592:  allocID := uuid.Generate()",
          "593:  taskName := \"sleep\"",
          "594:  task := &drivers.TaskConfig{",
          "595:   AllocID:   allocID,",
          "596:   ID:        uuid.Generate(),",
          "597:   Name:      taskName,",
          "598:   Env:       defaultEnv(),",
          "599:   Resources: testResources(allocID, taskName),",
          "600:  }",
          "602:  cleanup := harness.MkAllocDir(task, false)",
          "603:  defer cleanup()",
          "605:  tc := &TaskConfig{",
          "606:   Command: testtask.Path(),",
          "607:   Args:    []string{\"sleep\", \"10s\"},",
          "608:  }",
          "609:  must.NoError(t, task.EncodeConcreteDriverConfig(&tc))",
          "610:  testtask.SetTaskConfigEnv(task)",
          "612:  harness.MakeTaskCgroup(allocID, taskName)",
          "613:  handle, _, err := harness.StartTask(task)",
          "614:  must.NoError(t, err)",
          "617:  var driverState TaskState",
          "618:  must.NoError(t, handle.GetDriverState(&driverState))",
          "621:  pid := driverState.ReattachConfig.Pid",
          "622:  must.NoError(t, err)",
          "623:  must.NoError(t, syscall.Kill(pid, syscall.SIGKILL))",
          "626:  waitCh, err := harness.WaitTask(context.Background(), task.ID)",
          "627:  must.NoError(t, err)",
          "628:  select {",
          "629:  case res := <-waitCh:",
          "630:   must.False(t, res.Successful())",
          "631:   must.Eq(t, -1, res.ExitCode)",
          "632:   must.Eq(t, false, res.OOMKilled)",
          "633:  case <-time.After(10 * time.Second):",
          "634:   must.Unreachable(t, must.Sprint(\"exceeded wait timeout\"))",
          "635:  }",
          "637:  must.NoError(t, harness.DestroyTask(task.ID, true))",
          "638: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}