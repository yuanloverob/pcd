{
  "cve_id": "CVE-2019-1195",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
  "patch_info": {
    "commit_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/c70af488e435ebd552f3da0547dee39dc8437a64",
    "files": [
      "lib/Backend/BackwardPass.cpp",
      "lib/Backend/BackwardPass.h",
      "lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOpt.h",
      "lib/Backend/GlobOptArrays.cpp"
    ],
    "message": "[CVE-2019-1195] Chakra Type Confusion RCE",
    "before_after_code_files": [
      "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
      "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h",
      "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
      "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp"
    ]
  },
  "patch_diff": {
    "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
      "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: BackwardPass::BackwardPass(Func * func, GlobOpt * globOpt, Js::Phase tag)",
      "11:     : func(func), globOpt(globOpt), tag(tag), currentPrePassLoop(nullptr), tempAlloc(nullptr),",
      "12:     preOpBailOutInstrToProcess(nullptr),",
      "14:     isCollectionPass(false), currentRegion(nullptr),",
      "15:     collectionPassSubPhase(CollectionPassSubPhase::None),",
      "16:     isLoopPrepass(false)",
      "",
      "[Removed Lines]",
      "13:     considerSymAsRealUseInNoImplicitCallUses(nullptr),",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "412:     candidateSymsRequiredToBeInt = &localCandidateSymsRequiredToBeInt;",
      "413:     BVSparse<JitArenaAllocator> localCandidateSymsRequiredToBeLossyInt(tempAlloc);",
      "414:     candidateSymsRequiredToBeLossyInt = &localCandidateSymsRequiredToBeLossyInt;",
      "415:     intOverflowCurrentlyMattersInRange = true;",
      "417:     FloatSymEquivalenceMap localFloatSymEquivalenceMap(tempAlloc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "414:     BVSparse<JitArenaAllocator> localConsiderSymsAsRealUsesInNoImplicitCallUses(tempAlloc);",
      "415:     considerSymsAsRealUsesInNoImplicitCallUses = &localConsiderSymsAsRealUsesInNoImplicitCallUses;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3755:         block->loop->regAlloc.liveOnBackEdgeSyms = block->upwardExposedUses->CopyNew(this->func->m_alloc);",
      "3756:     }",
      "3760: #if DBG_DUMP",
      "3761:     TraceBlockUses(block, false);",
      "",
      "[Removed Lines]",
      "3758:     Assert(!considerSymAsRealUseInNoImplicitCallUses);",
      "",
      "[Added Lines]",
      "3759:     Assert(considerSymsAsRealUsesInNoImplicitCallUses->IsEmpty());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4228:             {",
      "4229:                 IR::RegOpnd *const regSrc = src->AsRegOpnd();",
      "4230:                 sym = regSrc->m_sym;",
      "4232:                 {",
      "4234:                     ProcessStackSymUse(sym->AsStackSym(), true);",
      "4235:                 }",
      "4236:                 if(regSrc->IsArrayRegOpnd())",
      "",
      "[Removed Lines]",
      "4231:                 if(considerSymAsRealUseInNoImplicitCallUses && considerSymAsRealUseInNoImplicitCallUses == sym)",
      "4233:                     considerSymAsRealUseInNoImplicitCallUses = nullptr;",
      "",
      "[Added Lines]",
      "4232:                 if(considerSymsAsRealUsesInNoImplicitCallUses->TestAndClear(sym->m_id))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4652:             IR::Opnd *const use =",
      "4653:                 FindNoImplicitCallUse(",
      "4654:                     instr,",
      "",
      "[Removed Lines]",
      "4651:             Assert(!considerSymAsRealUseInNoImplicitCallUses);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4659:                     });",
      "4660:             if(use)",
      "4661:             {",
      "4663:             }",
      "4664:         }",
      "4665:     }",
      "",
      "[Removed Lines]",
      "4662:                 considerSymAsRealUseInNoImplicitCallUses = arrayRegOpnd->HeadSegmentLengthSym();",
      "",
      "[Added Lines]",
      "4661:                 considerSymsAsRealUsesInNoImplicitCallUses->Set(arrayRegOpnd->HeadSegmentLengthSym()->m_id);",
      "",
      "---------------"
    ],
    "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h": [
      "File: lib/Backend/BackwardPass.h -> lib/Backend/BackwardPass.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:     BVSparse<JitArenaAllocator> * intOverflowDoesNotMatterInRangeBySymId;",
      "192:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeInt;",
      "193:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeLossyInt;",
      "195:     bool intOverflowCurrentlyMattersInRange;",
      "196:     bool isCollectionPass;",
      "197:     enum class CollectionPassSubPhase",
      "",
      "[Removed Lines]",
      "194:     StackSym * considerSymAsRealUseInNoImplicitCallUses;",
      "",
      "[Added Lines]",
      "194:     BVSparse<JitArenaAllocator> * considerSymsAsRealUsesInNoImplicitCallUses;",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
      "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "13149:     arraySrcOpt.Optimize();",
      "13150: }",
      "13152: void",
      "13153: GlobOpt::CaptureNoImplicitCallUses(",
      "13154:     IR::Opnd *opnd,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13152: void",
      "13153: GlobOpt::ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues)",
      "13154: {",
      "13155:     if (isLikelyJsArray)",
      "13156:     {",
      "13165:         this->CaptureNoImplicitCallUses(baseOpnd, isLikelyJsArray);",
      "13166:     }",
      "13167:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
      "13168:     {",
      "13172:         IR::RegOpnd *const headSegmentLengthOpnd =",
      "13173:             IR::RegOpnd::New(",
      "13174:                 baseArrayOpnd->HeadSegmentLengthSym(),",
      "13175:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
      "13176:                 instr->m_func);",
      "13178:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
      "13179:         this->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
      "13180:     }",
      "13181: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17038:     }",
      "17039: #endif",
      "17041:     RemoveMemOpSrcInstr(memopInstr, emitData->stElemInstr, emitData->block);",
      "17042:     if (!isMemset)",
      "17043:     {",
      "17044:         RemoveMemOpSrcInstr(memopInstr, ((MemCopyEmitData*)emitData)->ldElemInstr, emitData->block);",
      "17045:     }",
      "17046: }",
      "17048: bool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17072:     Assert(noImplicitCallUsesToInsert->Count() == 0);",
      "17073:     bool isLikelyJsArray;",
      "17074:     if (emitData->stElemInstr->GetDst()->IsIndirOpnd())",
      "17075:     {",
      "17076:         baseOpnd = emitData->stElemInstr->GetDst()->AsIndirOpnd()->GetBaseOpnd();",
      "17077:         isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
      "17078:         ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
      "17079:     }",
      "17083:         if (((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->IsIndirOpnd())",
      "17084:         {",
      "17085:             baseOpnd = ((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->AsIndirOpnd()->GetBaseOpnd();",
      "17086:             isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
      "17087:             ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
      "17088:         }",
      "17091:     InsertNoImplicitCallUses(memopInstr);",
      "17092:     noImplicitCallUsesToInsert->Clear();",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
      "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "721: private:",
      "722:     void                    CaptureNoImplicitCallUses(IR::Opnd *opnd, const bool usesNoMissingValuesInfo, IR::Instr *const includeCurrentInstr = nullptr);",
      "723:     void                    InsertNoImplicitCallUses(IR::Instr *const instr);",
      "724:     void                    PrepareLoopArrayCheckHoist();",
      "726: public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "724:     void                    ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues);",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp": [
      "File: lib/Backend/GlobOptArrays.cpp -> lib/Backend/GlobOptArrays.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1929:         baseArrayOpnd = nullptr;",
      "1930:     }",
      "1959:     const auto OnEliminated = [&](const Js::Phase phase, const char *const eliminatedLoad)",
      "1960:     {",
      "",
      "[Removed Lines]",
      "1932:     if (isLikelyJsArray)",
      "1933:     {",
      "1942:         globOpt->CaptureNoImplicitCallUses(baseOpnd, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
      "1943:     }",
      "1944:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
      "1945:     {",
      "1949:         IR::RegOpnd *const headSegmentLengthOpnd =",
      "1950:             IR::RegOpnd::New(",
      "1951:                 baseArrayOpnd->HeadSegmentLengthSym(),",
      "1952:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
      "1953:                 instr->m_func);",
      "1955:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
      "1956:         globOpt->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
      "1957:     }",
      "",
      "[Added Lines]",
      "1932:     globOpt->ProcessNoImplicitCallArrayUses(baseOpnd, baseArrayOpnd, instr, isLikelyJsArray, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
      "candidate_info": {
        "commit_hash": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
        "files": [
          "lib/Backend/GlobOptIntBounds.cpp"
        ],
        "message": "[CVE-2019-1197] Chakra JIT Type Confusion",
        "before_after_code_files": [
          "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp": [
          "File: lib/Backend/GlobOptIntBounds.cpp -> lib/Backend/GlobOptIntBounds.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:     }",
          "1282:     for (Loop * loop = this->currentBlock->loop; loop; loop = loop->parent)",
          "1283:     {",
          "1286:         {",
          "1288:         }",
          "1289:     }",
          "1290: }",
          "",
          "[Removed Lines]",
          "1284:         InductionVariable *iv = nullptr;",
          "1285:         if (loop->inductionVariables && loop->inductionVariables->TryGetReference(dstSym->m_id, &iv))",
          "1287:             iv->SetChangeIsIndeterminate();",
          "",
          "[Added Lines]",
          "1288:         if (loop->inductionVariables && loop->inductionVariables->ContainsKey(dstSym->m_id))",
          "1290:             for (auto it = loop->inductionVariables->GetIterator(); it.IsValid(); it.MoveNext())",
          "1291:             {",
          "1292:                 InductionVariable& inductionVariable = it.CurrentValueReference();",
          "1293:                 inductionVariable.SetChangeIsIndeterminate();",
          "1294:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
      "candidate_info": {
        "commit_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/ae8a8d9644e677a9878e5dd7824d4b876454e799",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-1139] Chakra JIT Type Confusion\n\narray.slice converts the native array to var array which was not captured during the optimization.\nDue to that the native array type is forced to var array which leads to the type confusion.\nFixed this by killing the object type for the slice (as well as concat)",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13470:                     case IR::HelperArray_Splice:",
          "13471:                     case IR::HelperArray_Unshift:",
          "13472:                     case IR::HelperArray_Concat:",
          "13473:                         kills.SetKillsArrayHeadSegments();",
          "13474:                         kills.SetKillsArrayHeadSegmentLengths();",
          "13475:                         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13473:                     case IR::HelperArray_Slice:",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:                 }",
          "519:                 break;",
          "521:             case IR::JnHelperMethod::HelperRegExp_Exec:",
          "522:             case IR::JnHelperMethod::HelperRegExp_ExecResultNotUsed:",
          "523:             case IR::JnHelperMethod::HelperRegExp_ExecResultUsed:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:             case IR::JnHelperMethod::HelperArray_Slice:",
          "522:             case IR::JnHelperMethod::HelperArray_Concat:",
          "523:                 if (inGlobOpt && this->objectTypeSyms)",
          "524:                 {",
          "525:                     if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)",
          "526:                     {",
          "527:                         this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);",
          "528:                     }",
          "529:                     this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);",
          "530:                 }",
          "531:                 break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
      "candidate_info": {
        "commit_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/329d9d213e7b286349c0b156be4b5a088555de90",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-1141] Chakra JIT Type Confusion\n\nDuring the loop prepass the index variable is not fully constructed, so we can't rely it being negative\nSo we need to kiil the object type.",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
            "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h"
          ],
          "candidate": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
            "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2695: }",
          "2697: bool",
          "2699: {",
          "2700:     if (opnd == nullptr)",
          "2701:     {",
          "",
          "[Removed Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const",
          "",
          "[Added Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass /*=nullptr*/) const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2725:         {",
          "2726:             return true;",
          "2727:         }",
          "2728:         if (this->prePassLoop->preservesNumberValue->Test(opnd->m_sym->m_id))",
          "2729:         {",
          "2730:             return false;",
          "2731:         }",
          "2734:     }",
          "2736:     return true;",
          "",
          "[Removed Lines]",
          "2733:         return !this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "",
          "[Added Lines]",
          "2729:         bool isSafeToTransfer = this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "2730:         if (isSafeToTransferInPrepass != nullptr)",
          "2731:         {",
          "2733:         }",
          "2739:         return !isSafeToTransfer;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
          "774:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
          "775:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
          "778: public:",
          "779:     static bool             IsTypeSpecPhaseOff(Func const * func);",
          "",
          "[Removed Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
          "",
          "[Added Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass = nullptr) const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     {",
          "230:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "231:         SetAnyPropertyMayBeWrittenTo();",
          "",
          "[Removed Lines]",
          "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
          "",
          "[Added Lines]",
          "228:     bool isSafeToTransfer = true;",
          "229:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt, &isSafeToTransfer))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
          "237:         int indexLowerBound = 0;",
          "240:         {",
          "242:             this->KillAllObjectTypes(bv);",
          "",
          "[Removed Lines]",
          "239:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "[Added Lines]",
          "240:         if (!isSafeToTransfer || indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
      "candidate_info": {
        "commit_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/450a349fda1b153d758a9e01698b977e60870e4c",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h"
        ],
        "message": "Update version to 1.11.12",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 11",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 12",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
      "candidate_info": {
        "commit_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/242c59ea40c0428e1ced7366bf2c28bfbdda1999",
        "files": [
          "lib/Parser/Parse.cpp"
        ],
        "message": "[CVE-2019-1131] Chakra Type confusion",
        "before_after_code_files": [
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4664:                     }",
          "4665:                 }",
          "4672:                 bool couldBeObjectPattern = !isObjectPattern && m_token.tk == tkAsg;",
          "",
          "[Removed Lines]",
          "4667:                 if (buildAST)",
          "4668:                 {",
          "4669:                     CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "4670:                 }",
          "",
          "[Added Lines]",
          "4667:                 CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "",
          "---------------"
        ]
      }
    }
  ]
}