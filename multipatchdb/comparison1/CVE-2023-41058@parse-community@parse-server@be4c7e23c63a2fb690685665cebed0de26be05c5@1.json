{
  "cve_id": "CVE-2023-41058",
  "cve_desc": "Parse Server is an open source backend server. In affected versions the Parse Cloud trigger `beforeFind` is not invoked in certain conditions of `Parse.Query`. This can pose a vulnerability for deployments where the `beforeFind` trigger is used as a security layer to modify the incoming query. The vulnerability has been fixed by refactoring the internal query pipeline for a more concise code structure and implementing a patch to ensure the `beforeFind` trigger is invoked. This fix was introduced in commit `be4c7e23c6` and has been included in releases 6.2.2 and 5.5.5. Users are advised to upgrade. Users unable to upgrade should make use of parse server's security layers to manage access levels with Class-Level Permissions and Object-Level Access Control that should be used instead of custom security layers in Cloud Code triggers.",
  "repo": "parse-community/parse-server",
  "patch_hash": "be4c7e23c63a2fb690685665cebed0de26be05c5",
  "patch_info": {
    "commit_hash": "be4c7e23c63a2fb690685665cebed0de26be05c5",
    "repo": "parse-community/parse-server",
    "commit_url": "https://github.com/parse-community/parse-server/commit/be4c7e23c63a2fb690685665cebed0de26be05c5",
    "files": [
      "spec/CloudCode.spec.js",
      "spec/ParseGraphQLServer.spec.js",
      "spec/ParseRole.spec.js",
      "spec/RestQuery.spec.js",
      "spec/rest.spec.js",
      "src/Auth.js",
      "src/Controllers/PushController.js",
      "src/Controllers/UserController.js",
      "src/RestQuery.js",
      "src/RestWrite.js",
      "src/SharedRest.js",
      "src/rest.js"
    ],
    "message": "fix: Parse Pointer allows to access internal Parse Server classes and circumvent `beforeFind` query trigger; fixes security vulnerability [GHSA-fcv6-fg5r-jm9q](https://github.com/parse-community/parse-server/security/advisories/GHSA-fcv6-fg5r-jm9q)",
    "before_after_code_files": [
      "spec/CloudCode.spec.js||spec/CloudCode.spec.js",
      "spec/ParseGraphQLServer.spec.js||spec/ParseGraphQLServer.spec.js",
      "spec/ParseRole.spec.js||spec/ParseRole.spec.js",
      "spec/RestQuery.spec.js||spec/RestQuery.spec.js",
      "spec/rest.spec.js||spec/rest.spec.js",
      "src/Auth.js||src/Auth.js",
      "src/Controllers/PushController.js||src/Controllers/PushController.js",
      "src/Controllers/UserController.js||src/Controllers/UserController.js",
      "src/RestQuery.js||src/RestQuery.js",
      "src/RestWrite.js||src/RestWrite.js",
      "src/SharedRest.js||src/SharedRest.js",
      "src/rest.js||src/rest.js"
    ]
  },
  "patch_diff": {
    "spec/CloudCode.spec.js||spec/CloudCode.spec.js": [
      "File: spec/CloudCode.spec.js -> spec/CloudCode.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2381:       })",
      "2382:       .then(() => done());",
      "2383:   });",
      "2384: });",
      "2386: describe('afterFind hooks', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2385:   it('should run beforeFind on pointers and array of pointers from an object', async () => {",
      "2386:     const obj1 = new Parse.Object('TestObject');",
      "2387:     const obj2 = new Parse.Object('TestObject2');",
      "2388:     const obj3 = new Parse.Object('TestObject');",
      "2389:     obj2.set('aField', 'aFieldValue');",
      "2390:     await obj2.save();",
      "2391:     obj1.set('pointerField', obj2);",
      "2392:     obj3.set('pointerFieldArray', [obj2]);",
      "2393:     await obj1.save();",
      "2394:     await obj3.save();",
      "2395:     const spy = jasmine.createSpy('beforeFindSpy');",
      "2396:     Parse.Cloud.beforeFind('TestObject2', spy);",
      "2397:     const query = new Parse.Query('TestObject');",
      "2398:     await query.get(obj1.id);",
      "2400:     expect(spy).not.toHaveBeenCalled();",
      "2401:     const query2 = new Parse.Query('TestObject');",
      "2402:     query2.include('pointerField');",
      "2403:     const res = await query2.get(obj1.id);",
      "2404:     expect(res.get('pointerField').get('aField')).toBe('aFieldValue');",
      "2406:     expect(spy).toHaveBeenCalledTimes(1);",
      "2407:     const query3 = new Parse.Query('TestObject');",
      "2408:     query3.include('pointerFieldArray');",
      "2409:     const res2 = await query3.get(obj3.id);",
      "2410:     expect(res2.get('pointerFieldArray')[0].get('aField')).toBe('aFieldValue');",
      "2411:     expect(spy).toHaveBeenCalledTimes(2);",
      "2412:   });",
      "",
      "---------------"
    ],
    "spec/ParseGraphQLServer.spec.js||spec/ParseGraphQLServer.spec.js": [
      "File: spec/ParseGraphQLServer.spec.js -> spec/ParseGraphQLServer.spec.js"
    ],
    "spec/ParseRole.spec.js||spec/ParseRole.spec.js": [
      "File: spec/ParseRole.spec.js -> spec/ParseRole.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "142:       return Promise.all(promises);",
      "143:     };",
      "147:     let user, auth, getAllRolesSpy;",
      "148:     createTestUser()",
      "",
      "[Removed Lines]",
      "145:     const restExecute = spyOn(RestQuery.prototype, 'execute').and.callThrough();",
      "",
      "[Added Lines]",
      "145:     const restExecute = spyOn(RestQuery._UnsafeRestQuery.prototype, 'execute').and.callThrough();",
      "",
      "---------------"
    ],
    "spec/RestQuery.spec.js||spec/RestQuery.spec.js": [
      "File: spec/RestQuery.spec.js -> spec/RestQuery.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "399:     }",
      "400:     const config = Config.get('test');",
      "401:     await Parse.Object.saveAll(objects);",
      "403:       config,",
      "409:     const spy = spyOn(query, 'execute').and.callThrough();",
      "411:     const results = [];",
      "412:     await query.each(result => {",
      "413:       expect(result.value).toBeGreaterThan(2);",
      "",
      "[Removed Lines]",
      "402:     const query = new RestQuery(",
      "404:       auth.master(config),",
      "405:       'Object',",
      "406:       { value: { $gt: 2 } },",
      "407:       { limit: 2 }",
      "408:     );",
      "410:     const classSpy = spyOn(RestQuery.prototype, 'execute').and.callThrough();",
      "",
      "[Added Lines]",
      "402:     const query = await RestQuery({",
      "403:       method: RestQuery.Method.find,",
      "405:       auth: auth.master(config),",
      "406:       className: 'Object',",
      "407:       restWhere: { value: { $gt: 2 } },",
      "408:       restOptions: { limit: 2 },",
      "409:     });",
      "411:     const classSpy = spyOn(RestQuery._UnsafeRestQuery.prototype, 'execute').and.callThrough();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "442:       config,",
      "446:         numbers: {",
      "447:           __type: 'Pointer',",
      "448:           className: 'Number',",
      "449:           objectId: object1.id,",
      "450:         },",
      "451:       },",
      "455:       config,",
      "459:         numbers: {",
      "460:           __type: 'Pointer',",
      "461:           className: 'Number',",
      "462:           objectId: object2.id,",
      "463:         },",
      "464:       },",
      "469:     const resultsOne = [];",
      "470:     const resultsTwo = [];",
      "471:     await queryOne.each(result => {",
      "",
      "[Removed Lines]",
      "441:     const queryOne = new RestQuery(",
      "443:       auth.master(config),",
      "444:       'Letter',",
      "445:       {",
      "452:       { limit: 1 }",
      "453:     );",
      "454:     const queryTwo = new RestQuery(",
      "456:       auth.master(config),",
      "457:       'Letter',",
      "458:       {",
      "465:       { limit: 1 }",
      "466:     );",
      "468:     const classSpy = spyOn(RestQuery.prototype, 'execute').and.callThrough();",
      "",
      "[Added Lines]",
      "442:     const queryOne = await RestQuery({",
      "443:       method: RestQuery.Method.get,",
      "445:       auth: auth.master(config),",
      "446:       className: 'Letter',",
      "447:       restWhere: {",
      "454:       restOptions: { limit: 1 },",
      "455:     });",
      "457:     const queryTwo = await RestQuery({",
      "458:       method: RestQuery.Method.get,",
      "460:       auth: auth.master(config),",
      "461:       className: 'Letter',",
      "462:       restWhere: {",
      "469:       restOptions: { limit: 1 },",
      "470:     });",
      "472:     const classSpy = spyOn(RestQuery._UnsafeRestQuery.prototype, 'execute').and.callThrough();",
      "",
      "---------------"
    ],
    "spec/rest.spec.js||spec/rest.spec.js": [
      "File: spec/rest.spec.js -> spec/rest.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "660:       });",
      "661:   });",
      "663:   it('locks down session', done => {",
      "664:     let currentUser;",
      "665:     Parse.User.signUp('foo', 'bar')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "663:   it('cannot get object in volatileClasses if not masterKey through pointer', async () => {",
      "664:     const masterKeyOnlyClassObject = new Parse.Object('_PushStatus');",
      "665:     await masterKeyOnlyClassObject.save(null, { useMasterKey: true });",
      "666:     const obj2 = new Parse.Object('TestObject');",
      "670:     obj2.set('pointer', masterKeyOnlyClassObject);",
      "671:     await obj2.save();",
      "672:     const query = new Parse.Query('TestObject');",
      "673:     query.include('pointer');",
      "674:     await expectAsync(query.get(obj2.id)).toBeRejectedWithError(",
      "675:       \"Clients aren't allowed to perform the get operation on the _PushStatus collection.\"",
      "676:     );",
      "677:   });",
      "679:   it('cannot get object in _GlobalConfig if not masterKey through pointer', async () => {",
      "680:     await Parse.Config.save({ privateData: 'secret' }, { privateData: true });",
      "681:     const obj2 = new Parse.Object('TestObject');",
      "682:     obj2.set('globalConfigPointer', {",
      "683:       __type: 'Pointer',",
      "684:       className: '_GlobalConfig',",
      "685:       objectId: 1,",
      "686:     });",
      "687:     await obj2.save();",
      "688:     const query = new Parse.Query('TestObject');",
      "689:     query.include('globalConfigPointer');",
      "690:     await expectAsync(query.get(obj2.id)).toBeRejectedWithError(",
      "691:       \"Clients aren't allowed to perform the get operation on the _GlobalConfig collection.\"",
      "692:     );",
      "693:   });",
      "",
      "---------------"
    ],
    "src/Auth.js||src/Auth.js": [
      "File: src/Auth.js -> src/Auth.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:       include: 'user',",
      "98:     };",
      "99:     const RestQuery = require('./RestQuery');",
      "101:     results = (await query.execute()).results;",
      "102:   } else {",
      "103:     results = (",
      "",
      "[Removed Lines]",
      "100:     const query = new RestQuery(config, master(config), '_Session', { sessionToken }, restOptions);",
      "",
      "[Added Lines]",
      "100:     const query = await RestQuery({",
      "101:       method: RestQuery.Method.get,",
      "102:       config,",
      "103:       runBeforeFind: false,",
      "104:       auth: master(config),",
      "105:       className: '_Session',",
      "106:       restWhere: { sessionToken },",
      "107:       restOptions,",
      "108:     });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:   });",
      "135: };",
      "138:   var restOptions = {",
      "139:     limit: 1,",
      "140:   };",
      "141:   const RestQuery = require('./RestQuery');",
      "143:   return query.execute().then(response => {",
      "144:     var results = response.results;",
      "145:     if (results.length !== 1) {",
      "",
      "[Removed Lines]",
      "137: var getAuthForLegacySessionToken = function ({ config, sessionToken, installationId }) {",
      "142:   var query = new RestQuery(config, master(config), '_User', { sessionToken }, restOptions);",
      "",
      "[Added Lines]",
      "145: var getAuthForLegacySessionToken = async function ({ config, sessionToken, installationId }) {",
      "150:   var query = await RestQuery({",
      "151:     method: RestQuery.Method.get,",
      "152:     config,",
      "153:     runBeforeFind: false,",
      "154:     auth: master(config),",
      "155:     className: '_User',",
      "156:     restWhere: { _session_token: sessionToken },",
      "157:     restOptions,",
      "158:   });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "184:       },",
      "185:     };",
      "186:     const RestQuery = require('./RestQuery');",
      "190:   } else {",
      "191:     await new Parse.Query(Parse.Role)",
      "192:       .equalTo('users', this.user)",
      "",
      "[Removed Lines]",
      "187:     await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result =>",
      "188:       results.push(result)",
      "189:     );",
      "",
      "[Added Lines]",
      "203:     const query = await RestQuery({",
      "204:       method: RestQuery.Method.find,",
      "205:       runBeforeFind: false,",
      "206:       config: this.config,",
      "207:       auth: master(this.config),",
      "208:       className: '_Role',",
      "209:       restWhere,",
      "210:     });",
      "211:     await query.each(result => results.push(result));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "278:     });",
      "279:     const restWhere = { roles: { $in: roles } };",
      "280:     const RestQuery = require('./RestQuery');",
      "284:   }",
      "285:   return results;",
      "286: };",
      "",
      "[Removed Lines]",
      "281:     await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result =>",
      "282:       results.push(result)",
      "283:     );",
      "",
      "[Added Lines]",
      "303:     const query = await RestQuery({",
      "304:       method: RestQuery.Method.find,",
      "305:       config: this.config,",
      "306:       runBeforeFind: false,",
      "307:       auth: master(this.config),",
      "308:       className: '_Role',",
      "309:       restWhere,",
      "310:     });",
      "311:     await query.each(result => results.push(result));",
      "",
      "---------------"
    ],
    "src/Controllers/PushController.js||src/Controllers/PushController.js": [
      "File: src/Controllers/PushController.js -> src/Controllers/PushController.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:       const updateWhere = applyDeviceTokenExists(where);",
      "64:         return restQuery.buildRestWhere().then(() => {",
      "65:           const write = new RestWrite(",
      "66:             config,",
      "",
      "[Removed Lines]",
      "61:       badgeUpdate = () => {",
      "63:         const restQuery = new RestQuery(config, master(config), '_Installation', updateWhere);",
      "",
      "[Added Lines]",
      "61:       badgeUpdate = async () => {",
      "63:         const restQuery = await RestQuery({",
      "64:           method: RestQuery.Method.find,",
      "65:           config,",
      "66:           runBeforeFind: false,",
      "67:           auth: master(config),",
      "68:           className: '_Installation',",
      "69:           restWhere: updateWhere,",
      "70:         });",
      "",
      "---------------"
    ],
    "src/Controllers/UserController.js||src/Controllers/UserController.js": [
      "File: src/Controllers/UserController.js -> src/Controllers/UserController.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:     }",
      "49:   }",
      "52:     if (!this.shouldVerifyEmails) {",
      "",
      "[Removed Lines]",
      "51:   verifyEmail(username, token) {",
      "",
      "[Added Lines]",
      "51:   async verifyEmail(username, token) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70:       updateFields._email_verify_token_expires_at = { __op: 'Delete' };",
      "71:     }",
      "72:     const maintenanceAuth = Auth.maintenance(this.config);",
      "75:     });",
      "76:     return findUserForEmailVerification.execute().then(result => {",
      "77:       if (result.results.length && result.results[0].emailVerified) {",
      "",
      "[Removed Lines]",
      "73:     var findUserForEmailVerification = new RestQuery(this.config, maintenanceAuth, '_User', {",
      "74:       username,",
      "",
      "[Added Lines]",
      "73:     var findUserForEmailVerification = await RestQuery({",
      "74:       method: RestQuery.Method.get,",
      "75:       config: this.config,",
      "76:       auth: maintenanceAuth,",
      "77:       className: '_User',",
      "78:       restWhere: {",
      "79:         username,",
      "80:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "110:       });",
      "111:   }",
      "114:     if (user.username && user.email) {",
      "115:       return Promise.resolve(user);",
      "116:     }",
      "",
      "[Removed Lines]",
      "113:   getUserIfNeeded(user) {",
      "",
      "[Added Lines]",
      "119:   async getUserIfNeeded(user) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:       where.email = user.email;",
      "123:     }",
      "126:     return query.execute().then(function (result) {",
      "127:       if (result.results.length != 1) {",
      "128:         throw undefined;",
      "",
      "[Removed Lines]",
      "125:     var query = new RestQuery(this.config, Auth.master(this.config), '_User', where);",
      "",
      "[Added Lines]",
      "131:     var query = await RestQuery({",
      "132:       method: RestQuery.Method.get,",
      "133:       config: this.config,",
      "134:       runBeforeFind: false,",
      "135:       auth: Auth.master(this.config),",
      "136:       className: '_User',",
      "137:       restWhere: where,",
      "138:     });",
      "",
      "---------------"
    ],
    "src/RestQuery.js||src/RestQuery.js": [
      "File: src/RestQuery.js -> src/RestQuery.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: const triggers = require('./triggers');",
      "7: const { continueWhile } = require('parse/lib/node/promiseUtils');",
      "8: const AlwaysSelectedKeys = ['objectId', 'createdAt', 'updatedAt', 'ACL'];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: const { enforceRoleSecurity } = require('./SharedRest');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "22:   config,",
      "23:   auth,",
      "24:   className,",
      "",
      "[Removed Lines]",
      "21: function RestQuery(",
      "",
      "[Added Lines]",
      "38: async function RestQuery({",
      "39:   method,",
      "40:   config,",
      "41:   auth,",
      "42:   className,",
      "43:   restWhere = {},",
      "44:   restOptions = {},",
      "45:   clientSDK,",
      "46:   runAfterFind = true,",
      "47:   runBeforeFind = true,",
      "48:   context,",
      "49: }) {",
      "50:   if (![RestQuery.Method.find, RestQuery.Method.get].includes(method)) {",
      "51:     throw new Parse.Error(Parse.Error.INVALID_QUERY, 'bad query type');",
      "52:   }",
      "53:   enforceRoleSecurity(method, className, auth);",
      "54:   const result = runBeforeFind",
      "55:     ? await triggers.maybeRunQueryTrigger(",
      "56:       triggers.Types.beforeFind,",
      "57:       className,",
      "58:       restWhere,",
      "59:       restOptions,",
      "60:       config,",
      "61:       auth,",
      "62:       context,",
      "63:       method === RestQuery.Method.get",
      "64:     )",
      "65:     : Promise.resolve({ restWhere, restOptions });",
      "67:   return new _UnsafeRestQuery(",
      "68:     config,",
      "69:     auth,",
      "70:     className,",
      "71:     result.restWhere || restWhere,",
      "72:     result.restOptions || restOptions,",
      "73:     clientSDK,",
      "74:     runAfterFind,",
      "75:     context",
      "76:   );",
      "77: }",
      "79: RestQuery.Method = Object.freeze({",
      "80:   get: 'get',",
      "81:   find: 'find',",
      "82: });",
      "96: function _UnsafeRestQuery(",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "201:   return Promise.resolve()",
      "202:     .then(() => {",
      "203:       return this.buildRestWhere();",
      "",
      "[Removed Lines]",
      "200: RestQuery.prototype.execute = function (executeOptions) {",
      "",
      "[Added Lines]",
      "275: _UnsafeRestQuery.prototype.execute = function (executeOptions) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "231:     });",
      "232: };",
      "235:   const { config, auth, className, restWhere, restOptions, clientSDK } = this;",
      "237:   restOptions.limit = restOptions.limit || 100;",
      "",
      "[Removed Lines]",
      "234: RestQuery.prototype.each = function (callback) {",
      "",
      "[Added Lines]",
      "309: _UnsafeRestQuery.prototype.each = function (callback) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "243:       return !finished;",
      "244:     },",
      "245:     async () => {",
      "247:         config,",
      "248:         auth,",
      "249:         className,",
      "",
      "[Removed Lines]",
      "246:       const query = new RestQuery(",
      "",
      "[Added Lines]",
      "323:       const query = new _UnsafeRestQuery(",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "265:   );",
      "266: };",
      "269:   return Promise.resolve()",
      "270:     .then(() => {",
      "271:       return this.getUserAndRoleACL();",
      "",
      "[Removed Lines]",
      "268: RestQuery.prototype.buildRestWhere = function () {",
      "",
      "[Added Lines]",
      "345: _UnsafeRestQuery.prototype.buildRestWhere = function () {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "294: };",
      "298:   if (this.auth.isMaster) {",
      "299:     return Promise.resolve();",
      "300:   }",
      "",
      "[Removed Lines]",
      "297: RestQuery.prototype.getUserAndRoleACL = function () {",
      "",
      "[Added Lines]",
      "374: _UnsafeRestQuery.prototype.getUserAndRoleACL = function () {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "317:   if (!this.redirectKey) {",
      "318:     return Promise.resolve();",
      "319:   }",
      "",
      "[Removed Lines]",
      "316: RestQuery.prototype.redirectClassNameForKey = function () {",
      "",
      "[Added Lines]",
      "393: _UnsafeRestQuery.prototype.redirectClassNameForKey = function () {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "328: };",
      "332:   if (",
      "333:     this.config.allowClientClassCreation === false &&",
      "334:     !this.auth.isMaster &&",
      "",
      "[Removed Lines]",
      "331: RestQuery.prototype.validateClientClassCreation = function () {",
      "",
      "[Added Lines]",
      "408: _UnsafeRestQuery.prototype.validateClientClassCreation = function () {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "375:   var inQueryObject = findObjectWithKey(this.restWhere, '$inQuery');",
      "376:   if (!inQueryObject) {",
      "377:     return;",
      "",
      "[Removed Lines]",
      "374: RestQuery.prototype.replaceInQuery = function () {",
      "",
      "[Added Lines]",
      "451: _UnsafeRestQuery.prototype.replaceInQuery = async function () {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "394:     additionalOptions.readPreference = this.restOptions.readPreference;",
      "395:   }",
      "404:   return subquery.execute().then(response => {",
      "405:     transformInQuery(inQueryObject, subquery.className, response.results);",
      "",
      "[Removed Lines]",
      "397:   var subquery = new RestQuery(",
      "398:     this.config,",
      "399:     this.auth,",
      "400:     inQueryValue.className,",
      "401:     inQueryValue.where,",
      "402:     additionalOptions",
      "403:   );",
      "",
      "[Added Lines]",
      "474:   const subquery = await RestQuery({",
      "475:     method: RestQuery.Method.find,",
      "476:     config: this.config,",
      "477:     auth: this.auth,",
      "478:     className: inQueryValue.className,",
      "479:     restWhere: inQueryValue.where,",
      "480:     restOptions: additionalOptions,",
      "481:   });",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "433:   var notInQueryObject = findObjectWithKey(this.restWhere, '$notInQuery');",
      "434:   if (!notInQueryObject) {",
      "435:     return;",
      "",
      "[Removed Lines]",
      "432: RestQuery.prototype.replaceNotInQuery = function () {",
      "",
      "[Added Lines]",
      "510: _UnsafeRestQuery.prototype.replaceNotInQuery = async function () {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "452:     additionalOptions.readPreference = this.restOptions.readPreference;",
      "453:   }",
      "462:   return subquery.execute().then(response => {",
      "463:     transformNotInQuery(notInQueryObject, subquery.className, response.results);",
      "",
      "[Removed Lines]",
      "455:   var subquery = new RestQuery(",
      "456:     this.config,",
      "457:     this.auth,",
      "458:     notInQueryValue.className,",
      "459:     notInQueryValue.where,",
      "460:     additionalOptions",
      "461:   );",
      "",
      "[Added Lines]",
      "533:   const subquery = await RestQuery({",
      "534:     method: RestQuery.Method.find,",
      "535:     config: this.config,",
      "536:     auth: this.auth,",
      "537:     className: notInQueryValue.className,",
      "538:     restWhere: notInQueryValue.where,",
      "539:     restOptions: additionalOptions,",
      "540:   });",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "496:   var selectObject = findObjectWithKey(this.restWhere, '$select');",
      "497:   if (!selectObject) {",
      "498:     return;",
      "",
      "[Removed Lines]",
      "495: RestQuery.prototype.replaceSelect = function () {",
      "",
      "[Added Lines]",
      "575: _UnsafeRestQuery.prototype.replaceSelect = async function () {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "522:     additionalOptions.readPreference = this.restOptions.readPreference;",
      "523:   }",
      "532:   return subquery.execute().then(response => {",
      "533:     transformSelect(selectObject, selectValue.key, response.results);",
      "",
      "[Removed Lines]",
      "525:   var subquery = new RestQuery(",
      "526:     this.config,",
      "527:     this.auth,",
      "528:     selectValue.query.className,",
      "529:     selectValue.query.where,",
      "530:     additionalOptions",
      "531:   );",
      "",
      "[Added Lines]",
      "605:   const subquery = await RestQuery({",
      "606:     method: RestQuery.Method.find,",
      "607:     config: this.config,",
      "608:     auth: this.auth,",
      "609:     className: selectValue.query.className,",
      "610:     restWhere: selectValue.query.where,",
      "611:     restOptions: additionalOptions,",
      "612:   });",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "558:   var dontSelectObject = findObjectWithKey(this.restWhere, '$dontSelect');",
      "559:   if (!dontSelectObject) {",
      "560:     return;",
      "",
      "[Removed Lines]",
      "557: RestQuery.prototype.replaceDontSelect = function () {",
      "",
      "[Added Lines]",
      "639: _UnsafeRestQuery.prototype.replaceDontSelect = async function () {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "582:     additionalOptions.readPreference = this.restOptions.readPreference;",
      "583:   }",
      "592:   return subquery.execute().then(response => {",
      "593:     transformDontSelect(dontSelectObject, dontSelectValue.key, response.results);",
      "",
      "[Removed Lines]",
      "585:   var subquery = new RestQuery(",
      "586:     this.config,",
      "587:     this.auth,",
      "588:     dontSelectValue.query.className,",
      "589:     dontSelectValue.query.where,",
      "590:     additionalOptions",
      "591:   );",
      "",
      "[Added Lines]",
      "667:   const subquery = await RestQuery({",
      "668:     method: RestQuery.Method.find,",
      "669:     config: this.config,",
      "670:     auth: this.auth,",
      "671:     className: dontSelectValue.query.className,",
      "672:     restWhere: dontSelectValue.query.where,",
      "673:     restOptions: additionalOptions,",
      "674:   });",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "596:   });",
      "597: };",
      "600:   delete result.password;",
      "601:   if (result.authData) {",
      "602:     Object.keys(result.authData).forEach(provider => {",
      "",
      "[Removed Lines]",
      "599: RestQuery.prototype.cleanResultAuthData = function (result) {",
      "",
      "[Added Lines]",
      "683: _UnsafeRestQuery.prototype.cleanResultAuthData = function (result) {",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "635:   return constraint;",
      "636: };",
      "639:   if (typeof this.restWhere !== 'object') {",
      "640:     return;",
      "641:   }",
      "",
      "[Removed Lines]",
      "638: RestQuery.prototype.replaceEquality = function () {",
      "",
      "[Added Lines]",
      "722: _UnsafeRestQuery.prototype.replaceEquality = function () {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "650:   if (this.findOptions.limit === 0) {",
      "651:     this.response = { results: [] };",
      "652:     return Promise.resolve();",
      "",
      "[Removed Lines]",
      "649: RestQuery.prototype.runFind = function (options = {}) {",
      "",
      "[Added Lines]",
      "733: _UnsafeRestQuery.prototype.runFind = function (options = {}) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "686:   if (!this.doCount) {",
      "687:     return;",
      "688:   }",
      "",
      "[Removed Lines]",
      "685: RestQuery.prototype.runCount = function () {",
      "",
      "[Added Lines]",
      "769: _UnsafeRestQuery.prototype.runCount = function () {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "694:   });",
      "695: };",
      "698:   if (this.auth.isMaster) {",
      "699:     return;",
      "700:   }",
      "",
      "[Removed Lines]",
      "697: RestQuery.prototype.denyProtectedFields = async function () {",
      "",
      "[Added Lines]",
      "781: _UnsafeRestQuery.prototype.denyProtectedFields = async function () {",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "719: };",
      "723:   if (!this.includeAll) {",
      "724:     return;",
      "725:   }",
      "",
      "[Removed Lines]",
      "722: RestQuery.prototype.handleIncludeAll = function () {",
      "",
      "[Added Lines]",
      "806: _UnsafeRestQuery.prototype.handleIncludeAll = function () {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "748: };",
      "752:   if (!this.excludeKeys) {",
      "753:     return;",
      "754:   }",
      "",
      "[Removed Lines]",
      "751: RestQuery.prototype.handleExcludeKeys = function () {",
      "",
      "[Added Lines]",
      "835: _UnsafeRestQuery.prototype.handleExcludeKeys = function () {",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "766: };",
      "770:   if (this.include.length == 0) {",
      "771:     return;",
      "772:   }",
      "",
      "[Removed Lines]",
      "769: RestQuery.prototype.handleInclude = function () {",
      "",
      "[Added Lines]",
      "853: _UnsafeRestQuery.prototype.handleInclude = function () {",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "793: };",
      "797:   if (!this.response) {",
      "798:     return;",
      "799:   }",
      "",
      "[Removed Lines]",
      "796: RestQuery.prototype.runAfterFindTrigger = function () {",
      "",
      "[Added Lines]",
      "880: _UnsafeRestQuery.prototype.runAfterFindTrigger = function () {",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "845:     });",
      "846: };",
      "849:   if (this.className !== '_User' || this.findOptions.explain) {",
      "850:     return;",
      "851:   }",
      "",
      "[Removed Lines]",
      "848: RestQuery.prototype.handleAuthAdapters = async function () {",
      "",
      "[Added Lines]",
      "932: _UnsafeRestQuery.prototype.handleAuthAdapters = async function () {",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "927:     includeRestOptions.readPreference = restOptions.readPreference;",
      "928:   }",
      "931:     const objectIds = Array.from(pointersHash[className]);",
      "932:     let where;",
      "933:     if (objectIds.length === 1) {",
      "",
      "[Removed Lines]",
      "930:   const queryPromises = Object.keys(pointersHash).map(className => {",
      "",
      "[Added Lines]",
      "1014:   const queryPromises = Object.keys(pointersHash).map(async className => {",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "935:     } else {",
      "936:       where = { objectId: { $in: objectIds } };",
      "937:     }",
      "939:     return query.execute({ op: 'get' }).then(results => {",
      "940:       results.className = className;",
      "941:       return Promise.resolve(results);",
      "",
      "[Removed Lines]",
      "938:     var query = new RestQuery(config, auth, className, where, includeRestOptions);",
      "",
      "[Added Lines]",
      "1022:     const query = await RestQuery({",
      "1023:       method: objectIds.length === 1 ? RestQuery.Method.get : RestQuery.Method.find,",
      "1024:       config,",
      "1025:       auth,",
      "1026:       className,",
      "1027:       restWhere: where,",
      "1028:       restOptions: includeRestOptions,",
      "1029:     });",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1066: }",
      "1068: module.exports = RestQuery;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1161: module.exports._UnsafeRestQuery = _UnsafeRestQuery;",
      "",
      "---------------"
    ],
    "src/RestWrite.js||src/RestWrite.js": [
      "File: src/RestWrite.js -> src/RestWrite.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "603: };",
      "607:   var promise = Promise.resolve();",
      "608:   if (this.className !== '_User') {",
      "609:     return promise;",
      "",
      "[Removed Lines]",
      "606: RestWrite.prototype.transformUser = function () {",
      "",
      "[Added Lines]",
      "606: RestWrite.prototype.transformUser = async function () {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "618:   if (this.query && this.objectId()) {",
      "626:       },",
      "634:   }",
      "636:   return promise",
      "",
      "[Removed Lines]",
      "621:     promise = new RestQuery(this.config, Auth.master(this.config), '_Session', {",
      "622:       user: {",
      "623:         __type: 'Pointer',",
      "624:         className: '_User',",
      "625:         objectId: this.objectId(),",
      "627:     })",
      "628:       .execute()",
      "629:       .then(results => {",
      "630:         results.results.forEach(session =>",
      "631:           this.config.cacheController.user.del(session.sessionToken)",
      "632:         );",
      "633:       });",
      "",
      "[Added Lines]",
      "621:     const query = await RestQuery({",
      "622:       method: RestQuery.Method.find,",
      "623:       config: this.config,",
      "624:       auth: Auth.master(this.config),",
      "625:       className: '_Session',",
      "626:       runBeforeFind: false,",
      "627:       restWhere: {",
      "628:         user: {",
      "629:           __type: 'Pointer',",
      "630:           className: '_User',",
      "631:           objectId: this.objectId(),",
      "632:         },",
      "634:     });",
      "635:     promise = query.execute().then(results => {",
      "636:       results.results.forEach(session =>",
      "637:         this.config.cacheController.user.del(session.sessionToken)",
      "638:       );",
      "639:     });",
      "",
      "---------------"
    ],
    "src/SharedRest.js||src/SharedRest.js": [
      "File: src/SharedRest.js -> src/SharedRest.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const classesWithMasterOnlyAccess = [",
      "2:   '_JobStatus',",
      "3:   '_PushStatus',",
      "4:   '_Hooks',",
      "5:   '_GlobalConfig',",
      "6:   '_JobSchedule',",
      "7:   '_Idempotency',",
      "8: ];",
      "10: function enforceRoleSecurity(method, className, auth) {",
      "11:   if (className === '_Installation' && !auth.isMaster && !auth.isMaintenance) {",
      "12:     if (method === 'delete' || method === 'find') {",
      "13:       const error = `Clients aren't allowed to perform the ${method} operation on the installation collection.`;",
      "14:       throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
      "15:     }",
      "16:   }",
      "19:   if (",
      "20:     classesWithMasterOnlyAccess.indexOf(className) >= 0 &&",
      "21:     !auth.isMaster &&",
      "22:     !auth.isMaintenance",
      "23:   ) {",
      "24:     const error = `Clients aren't allowed to perform the ${method} operation on the ${className} collection.`;",
      "25:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
      "26:   }",
      "29:   if (auth.isReadOnly && (method === 'delete' || method === 'create' || method === 'update')) {",
      "30:     const error = `read-only masterKey isn't allowed to perform the ${method} operation.`;",
      "31:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
      "32:   }",
      "33: }",
      "35: module.exports = {",
      "36:   enforceRoleSecurity,",
      "37: };",
      "",
      "---------------"
    ],
    "src/rest.js||src/rest.js": [
      "File: src/rest.js -> src/rest.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: var RestQuery = require('./RestQuery');",
      "13: var RestWrite = require('./RestWrite');",
      "14: var triggers = require('./triggers');",
      "16: function checkTriggers(className, config, types) {",
      "17:   return types.some(triggerType => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: const { enforceRoleSecurity } = require('./SharedRest');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24: }",
      "58:   var restWhere = { objectId };",
      "86: };",
      "",
      "[Removed Lines]",
      "27: function find(config, auth, className, restWhere, restOptions, clientSDK, context) {",
      "28:   enforceRoleSecurity('find', className, auth);",
      "29:   return triggers",
      "30:     .maybeRunQueryTrigger(",
      "31:       triggers.Types.beforeFind,",
      "32:       className,",
      "33:       restWhere,",
      "34:       restOptions,",
      "35:       config,",
      "36:       auth,",
      "37:       context",
      "38:     )",
      "39:     .then(result => {",
      "40:       restWhere = result.restWhere || restWhere;",
      "41:       restOptions = result.restOptions || restOptions;",
      "42:       const query = new RestQuery(",
      "43:         config,",
      "44:         auth,",
      "45:         className,",
      "46:         restWhere,",
      "47:         restOptions,",
      "48:         clientSDK,",
      "49:         true,",
      "50:         context",
      "51:       );",
      "52:       return query.execute();",
      "53:     });",
      "54: }",
      "57: const get = (config, auth, className, objectId, restOptions, clientSDK, context) => {",
      "59:   enforceRoleSecurity('get', className, auth);",
      "60:   return triggers",
      "61:     .maybeRunQueryTrigger(",
      "62:       triggers.Types.beforeFind,",
      "63:       className,",
      "64:       restWhere,",
      "65:       restOptions,",
      "66:       config,",
      "67:       auth,",
      "68:       context,",
      "69:       true",
      "70:     )",
      "71:     .then(result => {",
      "72:       restWhere = result.restWhere || restWhere;",
      "73:       restOptions = result.restOptions || restOptions;",
      "74:       const query = new RestQuery(",
      "75:         config,",
      "76:         auth,",
      "77:         className,",
      "78:         restWhere,",
      "79:         restOptions,",
      "80:         clientSDK,",
      "81:         true,",
      "82:         context",
      "83:       );",
      "84:       return query.execute();",
      "85:     });",
      "",
      "[Added Lines]",
      "28: const find = async (config, auth, className, restWhere, restOptions, clientSDK, context) => {",
      "29:   const query = await RestQuery({",
      "30:     method: RestQuery.Method.find,",
      "31:     config,",
      "32:     auth,",
      "33:     className,",
      "34:     restWhere,",
      "35:     restOptions,",
      "36:     clientSDK,",
      "37:     context,",
      "38:   });",
      "39:   return query.execute();",
      "40: };",
      "43: const get = async (config, auth, className, objectId, restOptions, clientSDK, context) => {",
      "45:   const query = await RestQuery({",
      "46:     method: RestQuery.Method.get,",
      "47:     config,",
      "48:     auth,",
      "49:     className,",
      "50:     restWhere,",
      "51:     restOptions,",
      "52:     clientSDK,",
      "53:     context,",
      "54:   });",
      "55:   return query.execute();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   let schemaController;",
      "103:   return Promise.resolve()",
      "105:       const hasTriggers = checkTriggers(className, config, ['beforeDelete', 'afterDelete']);",
      "106:       const hasLiveQuery = checkLiveQuery(className, config);",
      "107:       if (hasTriggers || hasLiveQuery || className == '_Session') {",
      "118:               }",
      "130:             }",
      "133:       }",
      "134:       return Promise.resolve({});",
      "135:     })",
      "",
      "[Removed Lines]",
      "104:     .then(() => {",
      "108:         return new RestQuery(config, auth, className, { objectId })",
      "109:           .execute({ op: 'delete' })",
      "110:           .then(response => {",
      "111:             if (response && response.results && response.results.length) {",
      "112:               const firstResult = response.results[0];",
      "113:               firstResult.className = className;",
      "114:               if (className === '_Session' && !auth.isMaster && !auth.isMaintenance) {",
      "115:                 if (!auth.user || firstResult.user.objectId !== auth.user.id) {",
      "116:                   throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');",
      "117:                 }",
      "119:               var cacheAdapter = config.cacheController;",
      "120:               cacheAdapter.user.del(firstResult.sessionToken);",
      "121:               inflatedObject = Parse.Object.fromJSON(firstResult);",
      "122:               return triggers.maybeRunTrigger(",
      "123:                 triggers.Types.beforeDelete,",
      "124:                 auth,",
      "125:                 inflatedObject,",
      "126:                 null,",
      "127:                 config,",
      "128:                 context",
      "129:               );",
      "131:             throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found for delete.');",
      "132:           });",
      "",
      "[Added Lines]",
      "74:     .then(async () => {",
      "78:         const query = await RestQuery({",
      "79:           method: RestQuery.Method.get,",
      "80:           config,",
      "81:           auth,",
      "82:           className,",
      "83:           restWhere: { objectId },",
      "84:         });",
      "85:         return query.execute({ op: 'delete' }).then(response => {",
      "86:           if (response && response.results && response.results.length) {",
      "87:             const firstResult = response.results[0];",
      "88:             firstResult.className = className;",
      "89:             if (className === '_Session' && !auth.isMaster && !auth.isMaintenance) {",
      "90:               if (!auth.user || firstResult.user.objectId !== auth.user.id) {",
      "91:                 throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');",
      "94:             var cacheAdapter = config.cacheController;",
      "95:             cacheAdapter.user.del(firstResult.sessionToken);",
      "96:             inflatedObject = Parse.Object.fromJSON(firstResult);",
      "97:             return triggers.maybeRunTrigger(",
      "98:               triggers.Types.beforeDelete,",
      "99:               auth,",
      "100:               inflatedObject,",
      "101:               null,",
      "102:               config,",
      "103:               context",
      "104:             );",
      "105:           }",
      "106:           throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found for delete.');",
      "107:         });",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "193:   enforceRoleSecurity('update', className, auth);",
      "195:   return Promise.resolve()",
      "197:       const hasTriggers = checkTriggers(className, config, ['beforeSave', 'afterSave']);",
      "198:       const hasLiveQuery = checkLiveQuery(className, config);",
      "199:       if (hasTriggers || hasLiveQuery) {",
      "202:           config,",
      "203:           auth,",
      "204:           className,",
      "205:           restWhere,",
      "211:           op: 'update',",
      "212:         });",
      "213:       }",
      "",
      "[Removed Lines]",
      "196:     .then(() => {",
      "201:         return new RestQuery(",
      "206:           undefined,",
      "207:           undefined,",
      "208:           false,",
      "209:           context",
      "210:         ).execute({",
      "",
      "[Added Lines]",
      "171:     .then(async () => {",
      "176:         const query = await RestQuery({",
      "177:           method: RestQuery.Method.get,",
      "182:           runAfterFind: false,",
      "183:           runBeforeFind: false,",
      "184:           context,",
      "185:         });",
      "186:         return query.execute({",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "248:   throw error;",
      "249: }",
      "285: module.exports = {",
      "286:   create,",
      "287:   del,",
      "",
      "[Removed Lines]",
      "251: const classesWithMasterOnlyAccess = [",
      "252:   '_JobStatus',",
      "253:   '_PushStatus',",
      "254:   '_Hooks',",
      "255:   '_GlobalConfig',",
      "256:   '_JobSchedule',",
      "257:   '_Idempotency',",
      "258: ];",
      "260: function enforceRoleSecurity(method, className, auth) {",
      "261:   if (className === '_Installation' && !auth.isMaster && !auth.isMaintenance) {",
      "262:     if (method === 'delete' || method === 'find') {",
      "263:       const error = `Clients aren't allowed to perform the ${method} operation on the installation collection.`;",
      "264:       throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
      "265:     }",
      "266:   }",
      "269:   if (",
      "270:     classesWithMasterOnlyAccess.indexOf(className) >= 0 &&",
      "271:     !auth.isMaster &&",
      "272:     !auth.isMaintenance",
      "273:   ) {",
      "274:     const error = `Clients aren't allowed to perform the ${method} operation on the ${className} collection.`;",
      "275:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
      "276:   }",
      "279:   if (auth.isReadOnly && (method === 'delete' || method === 'create' || method === 'update')) {",
      "280:     const error = `read-only masterKey isn't allowed to perform the ${method} operation.`;",
      "281:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
      "282:   }",
      "283: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6458ab072ebaa0e6bbcf6ada696b3d0fb687402f",
      "candidate_info": {
        "commit_hash": "6458ab072ebaa0e6bbcf6ada696b3d0fb687402f",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/6458ab072ebaa0e6bbcf6ada696b3d0fb687402f",
        "files": [
          "spec/CloudCode.spec.js",
          "spec/ParseGraphQLServer.spec.js",
          "spec/ParseRole.spec.js",
          "spec/RestQuery.spec.js",
          "spec/rest.spec.js",
          "src/Auth.js",
          "src/Controllers/PushController.js",
          "src/Controllers/UserController.js",
          "src/RestQuery.js",
          "src/RestWrite.js",
          "src/SharedRest.js",
          "src/rest.js"
        ],
        "message": "fix: Parse Pointer allows to access internal Parse Server classes and circumvent `beforeFind` query trigger; fixes security vulnerability [GHSA-fcv6-fg5r-jm9q](https://github.com/parse-community/parse-server/security/advisories/GHSA-fcv6-fg5r-jm9q)",
        "before_after_code_files": [
          "spec/CloudCode.spec.js||spec/CloudCode.spec.js",
          "spec/ParseGraphQLServer.spec.js||spec/ParseGraphQLServer.spec.js",
          "spec/ParseRole.spec.js||spec/ParseRole.spec.js",
          "spec/RestQuery.spec.js||spec/RestQuery.spec.js",
          "spec/rest.spec.js||spec/rest.spec.js",
          "src/Auth.js||src/Auth.js",
          "src/Controllers/PushController.js||src/Controllers/PushController.js",
          "src/Controllers/UserController.js||src/Controllers/UserController.js",
          "src/RestQuery.js||src/RestQuery.js",
          "src/RestWrite.js||src/RestWrite.js",
          "src/SharedRest.js||src/SharedRest.js",
          "src/rest.js||src/rest.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spec/CloudCode.spec.js||spec/CloudCode.spec.js",
            "spec/ParseGraphQLServer.spec.js||spec/ParseGraphQLServer.spec.js",
            "spec/ParseRole.spec.js||spec/ParseRole.spec.js",
            "spec/RestQuery.spec.js||spec/RestQuery.spec.js",
            "spec/rest.spec.js||spec/rest.spec.js",
            "src/Auth.js||src/Auth.js",
            "src/Controllers/PushController.js||src/Controllers/PushController.js",
            "src/Controllers/UserController.js||src/Controllers/UserController.js",
            "src/RestQuery.js||src/RestQuery.js",
            "src/RestWrite.js||src/RestWrite.js",
            "src/SharedRest.js||src/SharedRest.js",
            "src/rest.js||src/rest.js"
          ],
          "candidate": [
            "spec/CloudCode.spec.js||spec/CloudCode.spec.js",
            "spec/ParseGraphQLServer.spec.js||spec/ParseGraphQLServer.spec.js",
            "spec/ParseRole.spec.js||spec/ParseRole.spec.js",
            "spec/RestQuery.spec.js||spec/RestQuery.spec.js",
            "spec/rest.spec.js||spec/rest.spec.js",
            "src/Auth.js||src/Auth.js",
            "src/Controllers/PushController.js||src/Controllers/PushController.js",
            "src/Controllers/UserController.js||src/Controllers/UserController.js",
            "src/RestQuery.js||src/RestQuery.js",
            "src/RestWrite.js||src/RestWrite.js",
            "src/SharedRest.js||src/SharedRest.js",
            "src/rest.js||src/rest.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/CloudCode.spec.js||spec/CloudCode.spec.js": [
          "File: spec/CloudCode.spec.js -> spec/CloudCode.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2342:       })",
          "2343:       .then(() => done());",
          "2344:   });",
          "2345: });",
          "2347: describe('afterFind hooks', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2346:   it('should run beforeFind on pointers and array of pointers from an object', async () => {",
          "2347:     const obj1 = new Parse.Object('TestObject');",
          "2348:     const obj2 = new Parse.Object('TestObject2');",
          "2349:     const obj3 = new Parse.Object('TestObject');",
          "2350:     obj2.set('aField', 'aFieldValue');",
          "2351:     await obj2.save();",
          "2352:     obj1.set('pointerField', obj2);",
          "2353:     obj3.set('pointerFieldArray', [obj2]);",
          "2354:     await obj1.save();",
          "2355:     await obj3.save();",
          "2356:     const spy = jasmine.createSpy('beforeFindSpy');",
          "2357:     Parse.Cloud.beforeFind('TestObject2', spy);",
          "2358:     const query = new Parse.Query('TestObject');",
          "2359:     await query.get(obj1.id);",
          "2361:     expect(spy).not.toHaveBeenCalled();",
          "2362:     const query2 = new Parse.Query('TestObject');",
          "2363:     query2.include('pointerField');",
          "2364:     const res = await query2.get(obj1.id);",
          "2365:     expect(res.get('pointerField').get('aField')).toBe('aFieldValue');",
          "2367:     expect(spy).toHaveBeenCalledTimes(1);",
          "2368:     const query3 = new Parse.Query('TestObject');",
          "2369:     query3.include('pointerFieldArray');",
          "2370:     const res2 = await query3.get(obj3.id);",
          "2371:     expect(res2.get('pointerFieldArray')[0].get('aField')).toBe('aFieldValue');",
          "2372:     expect(spy).toHaveBeenCalledTimes(2);",
          "2373:   });",
          "",
          "---------------"
        ],
        "spec/ParseGraphQLServer.spec.js||spec/ParseGraphQLServer.spec.js": [
          "File: spec/ParseGraphQLServer.spec.js -> spec/ParseGraphQLServer.spec.js"
        ],
        "spec/ParseRole.spec.js||spec/ParseRole.spec.js": [
          "File: spec/ParseRole.spec.js -> spec/ParseRole.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:       return Promise.all(promises);",
          "143:     };",
          "147:     let user, auth, getAllRolesSpy;",
          "148:     createTestUser()",
          "",
          "[Removed Lines]",
          "145:     const restExecute = spyOn(RestQuery.prototype, 'execute').and.callThrough();",
          "",
          "[Added Lines]",
          "145:     const restExecute = spyOn(RestQuery._UnsafeRestQuery.prototype, 'execute').and.callThrough();",
          "",
          "---------------"
        ],
        "spec/RestQuery.spec.js||spec/RestQuery.spec.js": [
          "File: spec/RestQuery.spec.js -> spec/RestQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:     }",
          "399:     const config = Config.get('test');",
          "400:     await Parse.Object.saveAll(objects);",
          "402:       config,",
          "408:     const spy = spyOn(query, 'execute').and.callThrough();",
          "410:     const results = [];",
          "411:     await query.each(result => {",
          "412:       expect(result.value).toBeGreaterThan(2);",
          "",
          "[Removed Lines]",
          "401:     const query = new RestQuery(",
          "403:       auth.master(config),",
          "404:       'Object',",
          "405:       { value: { $gt: 2 } },",
          "406:       { limit: 2 }",
          "407:     );",
          "409:     const classSpy = spyOn(RestQuery.prototype, 'execute').and.callThrough();",
          "",
          "[Added Lines]",
          "401:     const query = await RestQuery({",
          "402:       method: RestQuery.Method.find,",
          "404:       auth: auth.master(config),",
          "405:       className: 'Object',",
          "406:       restWhere: { value: { $gt: 2 } },",
          "407:       restOptions: { limit: 2 },",
          "408:     });",
          "410:     const classSpy = spyOn(RestQuery._UnsafeRestQuery.prototype, 'execute').and.callThrough();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:       config,",
          "445:         numbers: {",
          "446:           __type: 'Pointer',",
          "447:           className: 'Number',",
          "448:           objectId: object1.id,",
          "449:         },",
          "450:       },",
          "454:       config,",
          "458:         numbers: {",
          "459:           __type: 'Pointer',",
          "460:           className: 'Number',",
          "461:           objectId: object2.id,",
          "462:         },",
          "463:       },",
          "468:     const resultsOne = [];",
          "469:     const resultsTwo = [];",
          "470:     await queryOne.each(result => {",
          "",
          "[Removed Lines]",
          "440:     const queryOne = new RestQuery(",
          "442:       auth.master(config),",
          "443:       'Letter',",
          "444:       {",
          "451:       { limit: 1 }",
          "452:     );",
          "453:     const queryTwo = new RestQuery(",
          "455:       auth.master(config),",
          "456:       'Letter',",
          "457:       {",
          "464:       { limit: 1 }",
          "465:     );",
          "467:     const classSpy = spyOn(RestQuery.prototype, 'execute').and.callThrough();",
          "",
          "[Added Lines]",
          "441:     const queryOne = await RestQuery({",
          "442:       method: RestQuery.Method.get,",
          "444:       auth: auth.master(config),",
          "445:       className: 'Letter',",
          "446:       restWhere: {",
          "453:       restOptions: { limit: 1 },",
          "454:     });",
          "456:     const queryTwo = await RestQuery({",
          "457:       method: RestQuery.Method.get,",
          "459:       auth: auth.master(config),",
          "460:       className: 'Letter',",
          "461:       restWhere: {",
          "468:       restOptions: { limit: 1 },",
          "469:     });",
          "471:     const classSpy = spyOn(RestQuery._UnsafeRestQuery.prototype, 'execute').and.callThrough();",
          "",
          "---------------"
        ],
        "spec/rest.spec.js||spec/rest.spec.js": [
          "File: spec/rest.spec.js -> spec/rest.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:       });",
          "661:   });",
          "663:   it('locks down session', done => {",
          "664:     let currentUser;",
          "665:     Parse.User.signUp('foo', 'bar')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:   it('cannot get object in volatileClasses if not masterKey through pointer', async () => {",
          "664:     const masterKeyOnlyClassObject = new Parse.Object('_PushStatus');",
          "665:     await masterKeyOnlyClassObject.save(null, { useMasterKey: true });",
          "666:     const obj2 = new Parse.Object('TestObject');",
          "670:     obj2.set('pointer', masterKeyOnlyClassObject);",
          "671:     await obj2.save();",
          "672:     const query = new Parse.Query('TestObject');",
          "673:     query.include('pointer');",
          "674:     await expectAsync(query.get(obj2.id)).toBeRejectedWithError(",
          "675:       \"Clients aren't allowed to perform the get operation on the _PushStatus collection.\"",
          "676:     );",
          "677:   });",
          "679:   it('cannot get object in _GlobalConfig if not masterKey through pointer', async () => {",
          "680:     await Parse.Config.save({ privateData: 'secret' }, { privateData: true });",
          "681:     const obj2 = new Parse.Object('TestObject');",
          "682:     obj2.set('globalConfigPointer', {",
          "683:       __type: 'Pointer',",
          "684:       className: '_GlobalConfig',",
          "685:       objectId: 1,",
          "686:     });",
          "687:     await obj2.save();",
          "688:     const query = new Parse.Query('TestObject');",
          "689:     query.include('globalConfigPointer');",
          "690:     await expectAsync(query.get(obj2.id)).toBeRejectedWithError(",
          "691:       \"Clients aren't allowed to perform the get operation on the _GlobalConfig collection.\"",
          "692:     );",
          "693:   });",
          "",
          "---------------"
        ],
        "src/Auth.js||src/Auth.js": [
          "File: src/Auth.js -> src/Auth.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:       include: 'user',",
          "85:     };",
          "88:     results = (await query.execute()).results;",
          "89:   } else {",
          "90:     results = (",
          "",
          "[Removed Lines]",
          "87:     const query = new RestQuery(config, master(config), '_Session', { sessionToken }, restOptions);",
          "",
          "[Added Lines]",
          "87:     const query = await RestQuery({",
          "88:       method: RestQuery.Method.get,",
          "89:       runBeforeFind: false,",
          "90:       config,",
          "91:       auth: master(config),",
          "92:       className: '_Session',",
          "93:       restWhere: { sessionToken },",
          "94:       restOptions,",
          "95:     });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   });",
          "122: };",
          "125:   var restOptions = {",
          "126:     limit: 1,",
          "127:   };",
          "129:   return query.execute().then(response => {",
          "130:     var results = response.results;",
          "131:     if (results.length !== 1) {",
          "",
          "[Removed Lines]",
          "124: var getAuthForLegacySessionToken = function ({ config, sessionToken, installationId }) {",
          "128:   var query = new RestQuery(config, master(config), '_User', { sessionToken }, restOptions);",
          "",
          "[Added Lines]",
          "132: var getAuthForLegacySessionToken = async function ({ config, sessionToken, installationId }) {",
          "136:   var query = await RestQuery({",
          "137:     method: RestQuery.Method.get,",
          "138:     runBeforeFind: false,",
          "139:     config,",
          "140:     auth: master(config),",
          "141:     className: '_User',",
          "142:     restWhere: { sessionToken },",
          "143:     restOptions,",
          "144:   });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:         objectId: this.user.id,",
          "170:       },",
          "171:     };",
          "175:   } else {",
          "176:     await new Parse.Query(Parse.Role)",
          "177:       .equalTo('users', this.user)",
          "",
          "[Removed Lines]",
          "172:     await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result =>",
          "173:       results.push(result)",
          "174:     );",
          "",
          "[Added Lines]",
          "188:     const query = await RestQuery({",
          "189:       method: RestQuery.Method.find,",
          "190:       config: this.config,",
          "191:       auth: master(this.config),",
          "192:       runBeforeFind: false,",
          "193:       className: '_Role',",
          "194:       restWhere,",
          "195:       restOptions: {},",
          "196:     });",
          "197:     await query.each(result => results.push(result));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262:       };",
          "263:     });",
          "264:     const restWhere = { roles: { $in: roles } };",
          "268:   }",
          "269:   return results;",
          "270: };",
          "",
          "[Removed Lines]",
          "265:     await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result =>",
          "266:       results.push(result)",
          "267:     );",
          "",
          "[Added Lines]",
          "288:     const query = await RestQuery({",
          "289:       method: RestQuery.Method.find,",
          "290:       runBeforeFind: false,",
          "291:       config: this.config,",
          "292:       auth: master(this.config),",
          "293:       className: '_Role',",
          "294:       restWhere,",
          "295:       restOptions: {},",
          "296:     });",
          "297:     await query.each(result => results.push(result));",
          "",
          "---------------"
        ],
        "src/Controllers/PushController.js||src/Controllers/PushController.js": [
          "File: src/Controllers/PushController.js -> src/Controllers/PushController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       const updateWhere = applyDeviceTokenExists(where);",
          "64:         return restQuery.buildRestWhere().then(() => {",
          "65:           const write = new RestWrite(",
          "66:             config,",
          "",
          "[Removed Lines]",
          "61:       badgeUpdate = () => {",
          "63:         const restQuery = new RestQuery(config, master(config), '_Installation', updateWhere);",
          "",
          "[Added Lines]",
          "61:       badgeUpdate = async () => {",
          "63:         const restQuery = await RestQuery({",
          "64:           method: RestQuery.Method.find,",
          "65:           config,",
          "66:           runBeforeFind: false,",
          "67:           auth: master(config),",
          "68:           className: '_Installation',",
          "69:           restWhere: updateWhere,",
          "70:         });",
          "",
          "---------------"
        ],
        "src/Controllers/UserController.js||src/Controllers/UserController.js": [
          "File: src/Controllers/UserController.js -> src/Controllers/UserController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     }",
          "49:   }",
          "52:     if (!this.shouldVerifyEmails) {",
          "",
          "[Removed Lines]",
          "51:   verifyEmail(username, token) {",
          "",
          "[Added Lines]",
          "51:   async verifyEmail(username, token) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:       updateFields._email_verify_token_expires_at = { __op: 'Delete' };",
          "71:     }",
          "72:     const masterAuth = Auth.master(this.config);",
          "79:     return findUserForEmailVerification.execute().then(result => {",
          "80:       if (result.results.length && result.results[0].emailVerified) {",
          "81:         return Promise.resolve(result.results.length[0]);",
          "",
          "[Removed Lines]",
          "73:     var findUserForEmailVerification = new RestQuery(",
          "74:       this.config,",
          "75:       Auth.master(this.config),",
          "76:       '_User',",
          "77:       { username: username }",
          "78:     );",
          "",
          "[Added Lines]",
          "73:     var findUserForEmailVerification = await RestQuery({",
          "74:       method: RestQuery.Method.get,",
          "75:       config: this.config,",
          "76:       runBeforeFind: false,",
          "77:       auth: Auth.master(this.config),",
          "78:       className: '_User',",
          "79:       restWhere: { username },",
          "80:     });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:       });",
          "113:   }",
          "116:     if (user.username && user.email) {",
          "117:       return Promise.resolve(user);",
          "118:     }",
          "",
          "[Removed Lines]",
          "115:   getUserIfNeeded(user) {",
          "",
          "[Added Lines]",
          "117:   async getUserIfNeeded(user) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:       where.email = user.email;",
          "125:     }",
          "128:     return query.execute().then(function (result) {",
          "129:       if (result.results.length != 1) {",
          "130:         throw undefined;",
          "",
          "[Removed Lines]",
          "127:     var query = new RestQuery(this.config, Auth.master(this.config), '_User', where);",
          "",
          "[Added Lines]",
          "129:     var query = await RestQuery({",
          "130:       method: RestQuery.Method.get,",
          "131:       config: this.config,",
          "132:       runBeforeFind: false,",
          "133:       auth: Auth.master(this.config),",
          "134:       className: '_User',",
          "135:       restWhere: where,",
          "136:     });",
          "",
          "---------------"
        ],
        "src/RestQuery.js||src/RestQuery.js": [
          "File: src/RestQuery.js -> src/RestQuery.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const triggers = require('./triggers');",
          "7: const { continueWhile } = require('parse/lib/node/promiseUtils');",
          "8: const AlwaysSelectedKeys = ['objectId', 'createdAt', 'updatedAt', 'ACL'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: const { enforceRoleSecurity } = require('./SharedRest');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   config,",
          "23:   auth,",
          "24:   className,",
          "",
          "[Removed Lines]",
          "21: function RestQuery(",
          "",
          "[Added Lines]",
          "38: async function RestQuery({",
          "39:   method,",
          "40:   config,",
          "41:   auth,",
          "42:   className,",
          "43:   restWhere = {},",
          "44:   restOptions = {},",
          "45:   clientSDK,",
          "46:   runAfterFind = true,",
          "47:   runBeforeFind = true,",
          "48:   context,",
          "49: }) {",
          "50:   if (![RestQuery.Method.find, RestQuery.Method.get].includes(method)) {",
          "51:     throw new Parse.Error(Parse.Error.INVALID_QUERY, 'bad query type');",
          "52:   }",
          "53:   enforceRoleSecurity(method, className, auth);",
          "54:   const result = runBeforeFind",
          "55:     ? await triggers.maybeRunQueryTrigger(",
          "56:       triggers.Types.beforeFind,",
          "57:       className,",
          "58:       restWhere,",
          "59:       restOptions,",
          "60:       config,",
          "61:       auth,",
          "62:       context,",
          "63:       method === RestQuery.Method.get",
          "64:     )",
          "65:     : Promise.resolve({ restWhere, restOptions });",
          "67:   return new _UnsafeRestQuery(",
          "68:     config,",
          "69:     auth,",
          "70:     className,",
          "71:     result.restWhere || restWhere,",
          "72:     result.restOptions || restOptions,",
          "73:     clientSDK,",
          "74:     runAfterFind,",
          "75:     context",
          "76:   );",
          "77: }",
          "79: RestQuery.Method = Object.freeze({",
          "80:   get: 'get',",
          "81:   find: 'find',",
          "82: });",
          "96: function _UnsafeRestQuery(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   return Promise.resolve()",
          "202:     .then(() => {",
          "203:       return this.buildRestWhere();",
          "",
          "[Removed Lines]",
          "200: RestQuery.prototype.execute = function (executeOptions) {",
          "",
          "[Added Lines]",
          "275: _UnsafeRestQuery.prototype.execute = function (executeOptions) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:     });",
          "229: };",
          "232:   const { config, auth, className, restWhere, restOptions, clientSDK } = this;",
          "234:   restOptions.limit = restOptions.limit || 100;",
          "",
          "[Removed Lines]",
          "231: RestQuery.prototype.each = function (callback) {",
          "",
          "[Added Lines]",
          "306: _UnsafeRestQuery.prototype.each = function (callback) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240:       return !finished;",
          "241:     },",
          "242:     async () => {",
          "244:         config,",
          "245:         auth,",
          "246:         className,",
          "",
          "[Removed Lines]",
          "243:       const query = new RestQuery(",
          "",
          "[Added Lines]",
          "320:       const query = new _UnsafeRestQuery(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:   );",
          "263: };",
          "266:   return Promise.resolve()",
          "267:     .then(() => {",
          "268:       return this.getUserAndRoleACL();",
          "",
          "[Removed Lines]",
          "265: RestQuery.prototype.buildRestWhere = function () {",
          "",
          "[Added Lines]",
          "342: _UnsafeRestQuery.prototype.buildRestWhere = function () {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291: };",
          "295:   if (this.auth.isMaster) {",
          "296:     return Promise.resolve();",
          "297:   }",
          "",
          "[Removed Lines]",
          "294: RestQuery.prototype.getUserAndRoleACL = function () {",
          "",
          "[Added Lines]",
          "371: _UnsafeRestQuery.prototype.getUserAndRoleACL = function () {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "314:   if (!this.redirectKey) {",
          "315:     return Promise.resolve();",
          "316:   }",
          "",
          "[Removed Lines]",
          "313: RestQuery.prototype.redirectClassNameForKey = function () {",
          "",
          "[Added Lines]",
          "390: _UnsafeRestQuery.prototype.redirectClassNameForKey = function () {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "325: };",
          "329:   if (",
          "330:     this.config.allowClientClassCreation === false &&",
          "331:     !this.auth.isMaster &&",
          "",
          "[Removed Lines]",
          "328: RestQuery.prototype.validateClientClassCreation = function () {",
          "",
          "[Added Lines]",
          "405: _UnsafeRestQuery.prototype.validateClientClassCreation = function () {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "372:   var inQueryObject = findObjectWithKey(this.restWhere, '$inQuery');",
          "373:   if (!inQueryObject) {",
          "374:     return;",
          "",
          "[Removed Lines]",
          "371: RestQuery.prototype.replaceInQuery = function () {",
          "",
          "[Added Lines]",
          "448: _UnsafeRestQuery.prototype.replaceInQuery = async function () {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "391:     additionalOptions.readPreference = this.restOptions.readPreference;",
          "392:   }",
          "401:   return subquery.execute().then(response => {",
          "402:     transformInQuery(inQueryObject, subquery.className, response.results);",
          "",
          "[Removed Lines]",
          "394:   var subquery = new RestQuery(",
          "395:     this.config,",
          "396:     this.auth,",
          "397:     inQueryValue.className,",
          "398:     inQueryValue.where,",
          "399:     additionalOptions",
          "400:   );",
          "",
          "[Added Lines]",
          "471:   const subquery = await RestQuery({",
          "472:     method: RestQuery.Method.find,",
          "473:     config: this.config,",
          "474:     auth: this.auth,",
          "475:     className: inQueryValue.className,",
          "476:     restWhere: inQueryValue.where,",
          "477:     restOptions: additionalOptions,",
          "478:   });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "430:   var notInQueryObject = findObjectWithKey(this.restWhere, '$notInQuery');",
          "431:   if (!notInQueryObject) {",
          "432:     return;",
          "",
          "[Removed Lines]",
          "429: RestQuery.prototype.replaceNotInQuery = function () {",
          "",
          "[Added Lines]",
          "507: _UnsafeRestQuery.prototype.replaceNotInQuery = async function () {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "449:     additionalOptions.readPreference = this.restOptions.readPreference;",
          "450:   }",
          "459:   return subquery.execute().then(response => {",
          "460:     transformNotInQuery(notInQueryObject, subquery.className, response.results);",
          "",
          "[Removed Lines]",
          "452:   var subquery = new RestQuery(",
          "453:     this.config,",
          "454:     this.auth,",
          "455:     notInQueryValue.className,",
          "456:     notInQueryValue.where,",
          "457:     additionalOptions",
          "458:   );",
          "",
          "[Added Lines]",
          "530:   const subquery = await RestQuery({",
          "531:     method: RestQuery.Method.find,",
          "532:     config: this.config,",
          "533:     auth: this.auth,",
          "534:     className: notInQueryValue.className,",
          "535:     restWhere: notInQueryValue.where,",
          "536:     restOptions: additionalOptions,",
          "537:   });",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "493:   var selectObject = findObjectWithKey(this.restWhere, '$select');",
          "494:   if (!selectObject) {",
          "495:     return;",
          "",
          "[Removed Lines]",
          "492: RestQuery.prototype.replaceSelect = function () {",
          "",
          "[Added Lines]",
          "572: _UnsafeRestQuery.prototype.replaceSelect = async function () {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "519:     additionalOptions.readPreference = this.restOptions.readPreference;",
          "520:   }",
          "529:   return subquery.execute().then(response => {",
          "530:     transformSelect(selectObject, selectValue.key, response.results);",
          "",
          "[Removed Lines]",
          "522:   var subquery = new RestQuery(",
          "523:     this.config,",
          "524:     this.auth,",
          "525:     selectValue.query.className,",
          "526:     selectValue.query.where,",
          "527:     additionalOptions",
          "528:   );",
          "",
          "[Added Lines]",
          "602:   const subquery = await RestQuery({",
          "603:     method: RestQuery.Method.find,",
          "604:     config: this.config,",
          "605:     auth: this.auth,",
          "606:     className: selectValue.query.className,",
          "607:     restWhere: selectValue.query.where,",
          "608:     restOptions: additionalOptions,",
          "609:   });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "555:   var dontSelectObject = findObjectWithKey(this.restWhere, '$dontSelect');",
          "556:   if (!dontSelectObject) {",
          "557:     return;",
          "",
          "[Removed Lines]",
          "554: RestQuery.prototype.replaceDontSelect = function () {",
          "",
          "[Added Lines]",
          "636: _UnsafeRestQuery.prototype.replaceDontSelect = async function () {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "579:     additionalOptions.readPreference = this.restOptions.readPreference;",
          "580:   }",
          "589:   return subquery.execute().then(response => {",
          "590:     transformDontSelect(dontSelectObject, dontSelectValue.key, response.results);",
          "",
          "[Removed Lines]",
          "582:   var subquery = new RestQuery(",
          "583:     this.config,",
          "584:     this.auth,",
          "585:     dontSelectValue.query.className,",
          "586:     dontSelectValue.query.where,",
          "587:     additionalOptions",
          "588:   );",
          "",
          "[Added Lines]",
          "664:   const subquery = await RestQuery({",
          "665:     method: RestQuery.Method.find,",
          "666:     config: this.config,",
          "667:     auth: this.auth,",
          "668:     className: dontSelectValue.query.className,",
          "669:     restWhere: dontSelectValue.query.where,",
          "670:     restOptions: additionalOptions,",
          "671:   });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "593:   });",
          "594: };",
          "597:   delete result.password;",
          "598:   if (result.authData) {",
          "599:     Object.keys(result.authData).forEach(provider => {",
          "",
          "[Removed Lines]",
          "596: const cleanResultAuthData = function (result) {",
          "",
          "[Added Lines]",
          "680: _UnsafeRestQuery.prototype.cleanResultAuthData = function (result) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "632:   return constraint;",
          "633: };",
          "636:   if (typeof this.restWhere !== 'object') {",
          "637:     return;",
          "638:   }",
          "",
          "[Removed Lines]",
          "635: RestQuery.prototype.replaceEquality = function () {",
          "",
          "[Added Lines]",
          "719: _UnsafeRestQuery.prototype.replaceEquality = function () {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "647:   if (this.findOptions.limit === 0) {",
          "648:     this.response = { results: [] };",
          "649:     return Promise.resolve();",
          "",
          "[Removed Lines]",
          "646: RestQuery.prototype.runFind = function (options = {}) {",
          "",
          "[Added Lines]",
          "730: _UnsafeRestQuery.prototype.runFind = function (options = {}) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "662:     .then(results => {",
          "663:       if (this.className === '_User' && !findOptions.explain) {",
          "664:         for (var result of results) {",
          "666:         }",
          "667:       }",
          "",
          "[Removed Lines]",
          "665:           cleanResultAuthData(result);",
          "",
          "[Added Lines]",
          "749:           this.cleanResultAuthData(result);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "683:   if (!this.doCount) {",
          "684:     return;",
          "685:   }",
          "",
          "[Removed Lines]",
          "682: RestQuery.prototype.runCount = function () {",
          "",
          "[Added Lines]",
          "766: _UnsafeRestQuery.prototype.runCount = function () {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "691:   });",
          "692: };",
          "695:   if (this.auth.isMaster) {",
          "696:     return;",
          "697:   }",
          "",
          "[Removed Lines]",
          "694: RestQuery.prototype.denyProtectedFields = async function () {",
          "",
          "[Added Lines]",
          "778: _UnsafeRestQuery.prototype.denyProtectedFields = async function () {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "716: };",
          "720:   if (!this.includeAll) {",
          "721:     return;",
          "722:   }",
          "",
          "[Removed Lines]",
          "719: RestQuery.prototype.handleIncludeAll = function () {",
          "",
          "[Added Lines]",
          "803: _UnsafeRestQuery.prototype.handleIncludeAll = function () {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "745: };",
          "749:   if (!this.excludeKeys) {",
          "750:     return;",
          "751:   }",
          "",
          "[Removed Lines]",
          "748: RestQuery.prototype.handleExcludeKeys = function () {",
          "",
          "[Added Lines]",
          "832: _UnsafeRestQuery.prototype.handleExcludeKeys = function () {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "763: };",
          "767:   if (this.include.length == 0) {",
          "768:     return;",
          "769:   }",
          "",
          "[Removed Lines]",
          "766: RestQuery.prototype.handleInclude = function () {",
          "",
          "[Added Lines]",
          "850: _UnsafeRestQuery.prototype.handleInclude = function () {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "790: };",
          "794:   if (!this.response) {",
          "795:     return;",
          "796:   }",
          "",
          "[Removed Lines]",
          "793: RestQuery.prototype.runAfterFindTrigger = function () {",
          "",
          "[Added Lines]",
          "877: _UnsafeRestQuery.prototype.runAfterFindTrigger = function () {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "910:     includeRestOptions.readPreference = restOptions.readPreference;",
          "911:   }",
          "914:     const objectIds = Array.from(pointersHash[className]);",
          "915:     let where;",
          "916:     if (objectIds.length === 1) {",
          "",
          "[Removed Lines]",
          "913:   const queryPromises = Object.keys(pointersHash).map(className => {",
          "",
          "[Added Lines]",
          "997:   const queryPromises = Object.keys(pointersHash).map(async className => {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "918:     } else {",
          "919:       where = { objectId: { $in: objectIds } };",
          "920:     }",
          "922:     return query.execute({ op: 'get' }).then(results => {",
          "923:       results.className = className;",
          "924:       return Promise.resolve(results);",
          "",
          "[Removed Lines]",
          "921:     var query = new RestQuery(config, auth, className, where, includeRestOptions);",
          "",
          "[Added Lines]",
          "1005:     const query = await RestQuery({",
          "1006:       method: objectIds.length === 1 ? RestQuery.Method.get : RestQuery.Method.find,",
          "1007:       config,",
          "1008:       auth,",
          "1009:       className,",
          "1010:       restWhere: where,",
          "1011:       restOptions: includeRestOptions,",
          "1012:     });",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1049: }",
          "1051: module.exports = RestQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144: module.exports._UnsafeRestQuery = _UnsafeRestQuery;",
          "",
          "---------------"
        ],
        "src/RestWrite.js||src/RestWrite.js": [
          "File: src/RestWrite.js -> src/RestWrite.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "583: };",
          "587:   var promise = Promise.resolve();",
          "589:   if (this.className !== '_User') {",
          "",
          "[Removed Lines]",
          "586: RestWrite.prototype.transformUser = function () {",
          "",
          "[Added Lines]",
          "586: RestWrite.prototype.transformUser = async function () {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "599:   if (this.query && this.objectId()) {",
          "607:       },",
          "615:   }",
          "617:   return promise",
          "",
          "[Removed Lines]",
          "602:     promise = new RestQuery(this.config, Auth.master(this.config), '_Session', {",
          "603:       user: {",
          "604:         __type: 'Pointer',",
          "605:         className: '_User',",
          "606:         objectId: this.objectId(),",
          "608:     })",
          "609:       .execute()",
          "610:       .then(results => {",
          "611:         results.results.forEach(session =>",
          "612:           this.config.cacheController.user.del(session.sessionToken)",
          "613:         );",
          "614:       });",
          "",
          "[Added Lines]",
          "602:     const query = await RestQuery({",
          "603:       method: RestQuery.Method.find,",
          "604:       config: this.config,",
          "605:       auth: Auth.master(this.config),",
          "606:       className: '_Session',",
          "607:       runBeforeFind: false,",
          "608:       restWhere: {",
          "609:         user: {",
          "610:           __type: 'Pointer',",
          "611:           className: '_User',",
          "612:           objectId: this.objectId(),",
          "613:         },",
          "615:     });",
          "616:     promise = query.execute().then(results => {",
          "617:       results.results.forEach(session =>",
          "618:         this.config.cacheController.user.del(session.sessionToken)",
          "619:       );",
          "620:     });",
          "",
          "---------------"
        ],
        "src/SharedRest.js||src/SharedRest.js": [
          "File: src/SharedRest.js -> src/SharedRest.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const classesWithMasterOnlyAccess = [",
          "2:   '_JobStatus',",
          "3:   '_PushStatus',",
          "4:   '_Hooks',",
          "5:   '_GlobalConfig',",
          "6:   '_JobSchedule',",
          "7:   '_Idempotency',",
          "8: ];",
          "10: function enforceRoleSecurity(method, className, auth) {",
          "11:   if (className === '_Installation' && !auth.isMaster) {",
          "12:     if (method === 'delete' || method === 'find') {",
          "13:       const error = `Clients aren't allowed to perform the ${method} operation on the installation collection.`;",
          "14:       throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "15:     }",
          "16:   }",
          "19:   if (classesWithMasterOnlyAccess.indexOf(className) >= 0 && !auth.isMaster) {",
          "20:     const error = `Clients aren't allowed to perform the ${method} operation on the ${className} collection.`;",
          "21:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "22:   }",
          "25:   if (auth.isReadOnly && (method === 'delete' || method === 'create' || method === 'update')) {",
          "26:     const error = `read-only masterKey isn't allowed to perform the ${method} operation.`;",
          "27:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "28:   }",
          "29: }",
          "31: module.exports = {",
          "32:   enforceRoleSecurity,",
          "33: };",
          "",
          "---------------"
        ],
        "src/rest.js||src/rest.js": [
          "File: src/rest.js -> src/rest.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: var RestQuery = require('./RestQuery');",
          "13: var RestWrite = require('./RestWrite');",
          "14: var triggers = require('./triggers');",
          "16: function checkTriggers(className, config, types) {",
          "17:   return types.some(triggerType => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: const { enforceRoleSecurity } = require('./SharedRest');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: }",
          "58:   var restWhere = { objectId };",
          "86: };",
          "",
          "[Removed Lines]",
          "27: function find(config, auth, className, restWhere, restOptions, clientSDK, context) {",
          "28:   enforceRoleSecurity('find', className, auth);",
          "29:   return triggers",
          "30:     .maybeRunQueryTrigger(",
          "31:       triggers.Types.beforeFind,",
          "32:       className,",
          "33:       restWhere,",
          "34:       restOptions,",
          "35:       config,",
          "36:       auth,",
          "37:       context",
          "38:     )",
          "39:     .then(result => {",
          "40:       restWhere = result.restWhere || restWhere;",
          "41:       restOptions = result.restOptions || restOptions;",
          "42:       const query = new RestQuery(",
          "43:         config,",
          "44:         auth,",
          "45:         className,",
          "46:         restWhere,",
          "47:         restOptions,",
          "48:         clientSDK,",
          "49:         true,",
          "50:         context",
          "51:       );",
          "52:       return query.execute();",
          "53:     });",
          "54: }",
          "57: const get = (config, auth, className, objectId, restOptions, clientSDK, context) => {",
          "59:   enforceRoleSecurity('get', className, auth);",
          "60:   return triggers",
          "61:     .maybeRunQueryTrigger(",
          "62:       triggers.Types.beforeFind,",
          "63:       className,",
          "64:       restWhere,",
          "65:       restOptions,",
          "66:       config,",
          "67:       auth,",
          "68:       context,",
          "69:       true",
          "70:     )",
          "71:     .then(result => {",
          "72:       restWhere = result.restWhere || restWhere;",
          "73:       restOptions = result.restOptions || restOptions;",
          "74:       const query = new RestQuery(",
          "75:         config,",
          "76:         auth,",
          "77:         className,",
          "78:         restWhere,",
          "79:         restOptions,",
          "80:         clientSDK,",
          "81:         true,",
          "82:         context",
          "83:       );",
          "84:       return query.execute();",
          "85:     });",
          "",
          "[Added Lines]",
          "28: const find = async (config, auth, className, restWhere, restOptions, clientSDK, context) => {",
          "29:   const query = await RestQuery({",
          "30:     method: RestQuery.Method.find,",
          "31:     config,",
          "32:     auth,",
          "33:     className,",
          "34:     restWhere,",
          "35:     restOptions,",
          "36:     clientSDK,",
          "37:     context,",
          "38:   });",
          "39:   return query.execute();",
          "40: };",
          "43: const get = async (config, auth, className, objectId, restOptions, clientSDK, context) => {",
          "45:   const query = await RestQuery({",
          "46:     method: RestQuery.Method.get,",
          "47:     config,",
          "48:     auth,",
          "49:     className,",
          "50:     restWhere,",
          "51:     restOptions,",
          "52:     clientSDK,",
          "53:     context,",
          "54:   });",
          "55:   return query.execute();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   let schemaController;",
          "103:   return Promise.resolve()",
          "105:       const hasTriggers = checkTriggers(className, config, ['beforeDelete', 'afterDelete']);",
          "106:       const hasLiveQuery = checkLiveQuery(className, config);",
          "107:       if (hasTriggers || hasLiveQuery || className == '_Session') {",
          "118:               }",
          "130:             }",
          "133:       }",
          "134:       return Promise.resolve({});",
          "135:     })",
          "",
          "[Removed Lines]",
          "104:     .then(() => {",
          "108:         return new RestQuery(config, auth, className, { objectId })",
          "109:           .execute({ op: 'delete' })",
          "110:           .then(response => {",
          "111:             if (response && response.results && response.results.length) {",
          "112:               const firstResult = response.results[0];",
          "113:               firstResult.className = className;",
          "114:               if (className === '_Session' && !auth.isMaster) {",
          "115:                 if (!auth.user || firstResult.user.objectId !== auth.user.id) {",
          "116:                   throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');",
          "117:                 }",
          "119:               var cacheAdapter = config.cacheController;",
          "120:               cacheAdapter.user.del(firstResult.sessionToken);",
          "121:               inflatedObject = Parse.Object.fromJSON(firstResult);",
          "122:               return triggers.maybeRunTrigger(",
          "123:                 triggers.Types.beforeDelete,",
          "124:                 auth,",
          "125:                 inflatedObject,",
          "126:                 null,",
          "127:                 config,",
          "128:                 context",
          "129:               );",
          "131:             throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found for delete.');",
          "132:           });",
          "",
          "[Added Lines]",
          "74:     .then(async () => {",
          "78:         const query = await RestQuery({",
          "79:           method: RestQuery.Method.get,",
          "80:           config,",
          "81:           auth,",
          "82:           className,",
          "83:           restWhere: { objectId },",
          "84:         });",
          "85:         return query.execute({ op: 'delete' }).then(response => {",
          "86:           if (response && response.results && response.results.length) {",
          "87:             const firstResult = response.results[0];",
          "88:             firstResult.className = className;",
          "89:             if (className === '_Session' && !auth.isMaster) {",
          "90:               if (!auth.user || firstResult.user.objectId !== auth.user.id) {",
          "91:                 throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');",
          "94:             var cacheAdapter = config.cacheController;",
          "95:             cacheAdapter.user.del(firstResult.sessionToken);",
          "96:             inflatedObject = Parse.Object.fromJSON(firstResult);",
          "97:             return triggers.maybeRunTrigger(",
          "98:               triggers.Types.beforeDelete,",
          "99:               auth,",
          "100:               inflatedObject,",
          "101:               null,",
          "102:               config,",
          "103:               context",
          "104:             );",
          "105:           }",
          "106:           throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found for delete.');",
          "107:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:   enforceRoleSecurity('update', className, auth);",
          "195:   return Promise.resolve()",
          "197:       const hasTriggers = checkTriggers(className, config, ['beforeSave', 'afterSave']);",
          "198:       const hasLiveQuery = checkLiveQuery(className, config);",
          "199:       if (hasTriggers || hasLiveQuery) {",
          "202:           config,",
          "203:           auth,",
          "204:           className,",
          "205:           restWhere,",
          "211:           op: 'update',",
          "212:         });",
          "213:       }",
          "",
          "[Removed Lines]",
          "196:     .then(() => {",
          "201:         return new RestQuery(",
          "206:           undefined,",
          "207:           undefined,",
          "208:           false,",
          "209:           context",
          "210:         ).execute({",
          "",
          "[Added Lines]",
          "171:     .then(async () => {",
          "176:         const query = await RestQuery({",
          "177:           method: RestQuery.Method.get,",
          "182:           runAfterFind: false,",
          "183:           runBeforeFind: false,",
          "184:           context,",
          "185:         });",
          "186:         return query.execute({",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:   throw error;",
          "244: }",
          "276: module.exports = {",
          "277:   create,",
          "278:   del,",
          "",
          "[Removed Lines]",
          "246: const classesWithMasterOnlyAccess = [",
          "247:   '_JobStatus',",
          "248:   '_PushStatus',",
          "249:   '_Hooks',",
          "250:   '_GlobalConfig',",
          "251:   '_JobSchedule',",
          "252:   '_Idempotency',",
          "253: ];",
          "255: function enforceRoleSecurity(method, className, auth) {",
          "256:   if (className === '_Installation' && !auth.isMaster) {",
          "257:     if (method === 'delete' || method === 'find') {",
          "258:       const error = `Clients aren't allowed to perform the ${method} operation on the installation collection.`;",
          "259:       throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "260:     }",
          "261:   }",
          "264:   if (classesWithMasterOnlyAccess.indexOf(className) >= 0 && !auth.isMaster) {",
          "265:     const error = `Clients aren't allowed to perform the ${method} operation on the ${className} collection.`;",
          "266:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "267:   }",
          "270:   if (auth.isReadOnly && (method === 'delete' || method === 'create' || method === 'update')) {",
          "271:     const error = `read-only masterKey isn't allowed to perform the ${method} operation.`;",
          "272:     throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);",
          "273:   }",
          "274: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}