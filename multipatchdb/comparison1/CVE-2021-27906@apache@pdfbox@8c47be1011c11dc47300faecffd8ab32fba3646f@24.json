{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de62120630f7a32c38c34a7c9659c16a140d031b",
      "candidate_info": {
        "commit_hash": "de62120630f7a32c38c34a7c9659c16a140d031b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/de62120630f7a32c38c34a7c9659c16a140d031b",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java"
        ],
        "message": "PDFBOX-3017: make image optional, see wish / comment by IsmailSahin in SO 44311502\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882885 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: {",
          "81:     private SignatureOptions signatureOptions;",
          "82:     private boolean lateExternalSigning = false;",
          "",
          "[Removed Lines]",
          "83:     private File imageFile;",
          "",
          "[Added Lines]",
          "83:     private File imageFile = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:         cs.addRect(-5000, -5000, 10000, 10000);",
          "413:         cs.fill();",
          "424:         float fontSize = 10;",
          "",
          "[Removed Lines]",
          "417:         cs.saveGraphicsState();",
          "418:         cs.transform(Matrix.getScaleInstance(0.25f, 0.25f));",
          "419:         PDImageXObject img = PDImageXObject.createFromFileByExtension(imageFile, doc);",
          "420:         cs.drawImage(img, 0, 0);",
          "421:         cs.restoreGraphicsState();",
          "",
          "[Added Lines]",
          "415:         if (imageFile != null)",
          "416:         {",
          "419:             cs.saveGraphicsState();",
          "420:             cs.transform(Matrix.getScaleInstance(0.25f, 0.25f));",
          "421:             PDImageXObject img = PDImageXObject.createFromFileByExtension(imageFile, doc);",
          "422:             cs.drawImage(img, 0, 0);",
          "423:             cs.restoreGraphicsState();",
          "424:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:     public static void main(String[] args) throws KeyStoreException, CertificateException,",
          "505:             IOException, NoSuchAlgorithmException, UnrecoverableKeyException",
          "506:     {",
          "510:         {",
          "511:             usage();",
          "512:             System.exit(1);",
          "",
          "[Removed Lines]",
          "509:         if (args.length < 4)",
          "",
          "[Added Lines]",
          "510:         if (args.length < 3)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "544:         CreateVisibleSignature2 signing = new CreateVisibleSignature2(keystore, pin.clone());",
          "548:         File signedDocumentFile;",
          "549:         String name = documentFile.getName();",
          "",
          "[Removed Lines]",
          "546:         signing.setImageFile(new File(args[3]));",
          "",
          "[Added Lines]",
          "547:         if (args.length >= 4)",
          "548:         {",
          "549:             signing.setImageFile(new File(args[3]));",
          "550:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bec4a46950fb5a81f81baf649edfb0af428c9dd0",
      "candidate_info": {
        "commit_hash": "bec4a46950fb5a81f81baf649edfb0af428c9dd0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/bec4a46950fb5a81f81baf649edfb0af428c9dd0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ],
        "message": "PDFBOX-4892: replace deprecated DEROutputStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881799 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.pdfbox.cos.COSName;",
          "45: import org.apache.pdfbox.cos.COSString;",
          "46: import org.apache.pdfbox.pdmodel.PDDocument;",
          "47: import org.bouncycastle.asn1.ASN1InputStream;",
          "48: import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
          "49: import org.bouncycastle.asn1.ASN1Primitive;",
          "50: import org.bouncycastle.asn1.ASN1Set;",
          "51: import org.bouncycastle.asn1.DEROctetString;",
          "53: import org.bouncycastle.asn1.DERSet;",
          "54: import org.bouncycastle.asn1.cms.ContentInfo;",
          "55: import org.bouncycastle.asn1.cms.EncryptedContentInfo;",
          "",
          "[Removed Lines]",
          "52: import org.bouncycastle.asn1.DEROutputStream;",
          "",
          "[Added Lines]",
          "47: import org.bouncycastle.asn1.ASN1Encoding;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:             pkcs7input[21] = three;",
          "478:             pkcs7input[22] = two;",
          "479:             pkcs7input[23] = one;",
          "481:             ASN1Primitive obj = createDERForRecipient(pkcs7input, certificate);",
          "483:             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "489:             recipientsField[i] = baos.toByteArray();",
          "491:             i++;",
          "492:         }",
          "493:         return recipientsField;",
          "",
          "[Removed Lines]",
          "485:             DEROutputStream k = new DEROutputStream(baos);",
          "487:             k.writeObject(obj);",
          "",
          "[Added Lines]",
          "483:             obj.encodeTo(baos, ASN1Encoding.DER);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c56f3fe20d76b7adb3691e561413f467bcfdd35",
      "candidate_info": {
        "commit_hash": "9c56f3fe20d76b7adb3691e561413f467bcfdd35",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9c56f3fe20d76b7adb3691e561413f467bcfdd35",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
        ],
        "message": "PDFBOX-5257: avoid NumberFormatException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892240 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1452:                 String fieldName = destField.getPartialName();",
          "1453:                 if (fieldName.startsWith(prefix))",
          "1454:                 {",
          "1456:                 }",
          "1457:             }",
          "",
          "[Removed Lines]",
          "1455:                     nextFieldNum = Math.max(nextFieldNum, Integer.parseInt(fieldName.substring(prefixLength)) + 1);",
          "",
          "[Added Lines]",
          "1455:                     String suffix = fieldName.substring(prefixLength);",
          "1456:                     if (suffix.matches(\"\\\\d+\"))",
          "1457:                     {",
          "1458:                         nextFieldNum = Math.max(nextFieldNum, Integer.parseInt(suffix) + 1);",
          "1459:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c3464ff491d2cc8fa6ca010f4ff0bd3e4d5f7ff",
      "candidate_info": {
        "commit_hash": "3c3464ff491d2cc8fa6ca010f4ff0bd3e4d5f7ff",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3c3464ff491d2cc8fa6ca010f4ff0bd3e4d5f7ff",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java"
        ],
        "message": "PDFBOX-4892: use correct name\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889476 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:                 {",
          "132:                     try",
          "133:                     {",
          "135:                     }",
          "136:                     catch (IOException e)",
          "137:                     {",
          "",
          "[Removed Lines]",
          "134:                         tmpValues = type1ShadingType.evalFunction(tmpValues);",
          "",
          "[Added Lines]",
          "134:                         tmpValues = type1ShadingType.evalFunction(values);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eeec9f3e6aeaaf1e0c0cce9c4152caada35c1a0b",
      "candidate_info": {
        "commit_hash": "eeec9f3e6aeaaf1e0c0cce9c4152caada35c1a0b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/eeec9f3e6aeaaf1e0c0cce9c4152caada35c1a0b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java"
        ],
        "message": "PDFBOX-4990: tell what resource is missing, as suggested by Ralf Hauser\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882640 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     private static void loadMetrics(String fontName) throws IOException",
          "115:     {",
          "116:         String resourceName = \"/org/apache/pdfbox/resources/afm/\" + fontName + \".afm\";",
          "119:         try",
          "120:         {",
          "121:             AFMParser parser = new AFMParser(afmStream);",
          "",
          "[Removed Lines]",
          "117:         InputStream afmStream =",
          "118:                 new BufferedInputStream(PDType1Font.class.getResourceAsStream(resourceName));",
          "",
          "[Added Lines]",
          "117:         InputStream resourceAsStream = PDType1Font.class.getResourceAsStream(resourceName);",
          "118:         if (resourceAsStream == null)",
          "119:         {",
          "120:             throw new IOException(\"resource '\" + resourceName + \"' not found\");",
          "121:         }",
          "122:         InputStream afmStream = new BufferedInputStream(resourceAsStream);",
          "",
          "---------------"
        ]
      }
    }
  ]
}