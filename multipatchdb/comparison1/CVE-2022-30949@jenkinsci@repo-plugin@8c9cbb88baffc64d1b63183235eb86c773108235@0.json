{
  "cve_id": "CVE-2022-30949",
  "cve_desc": "Jenkins REPO Plugin 1.14.0 and earlier allows attackers able to configure pipelines to check out some SCM repositories stored on the Jenkins controller's file system using local paths as SCM URLs, obtaining limited information about other projects' SCM contents.",
  "repo": "jenkinsci/repo-plugin",
  "patch_hash": "8c9cbb88baffc64d1b63183235eb86c773108235",
  "patch_info": {
    "commit_hash": "8c9cbb88baffc64d1b63183235eb86c773108235",
    "repo": "jenkinsci/repo-plugin",
    "commit_url": "https://github.com/jenkinsci/repo-plugin/commit/8c9cbb88baffc64d1b63183235eb86c773108235",
    "files": [
      "pom.xml",
      "src/main/java/hudson/plugins/repo/ManifestValidator.java",
      "src/main/java/hudson/plugins/repo/RepoScm.java",
      "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
      "src/test/java/hudson/plugins/repo/Security2478Test.java"
    ],
    "message": "SECURITY-2478",
    "before_after_code_files": [
      "src/main/java/hudson/plugins/repo/ManifestValidator.java||src/main/java/hudson/plugins/repo/ManifestValidator.java",
      "src/main/java/hudson/plugins/repo/RepoScm.java||src/main/java/hudson/plugins/repo/RepoScm.java",
      "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java||src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
      "src/test/java/hudson/plugins/repo/Security2478Test.java||src/test/java/hudson/plugins/repo/Security2478Test.java"
    ]
  },
  "patch_diff": {
    "src/main/java/hudson/plugins/repo/ManifestValidator.java||src/main/java/hudson/plugins/repo/ManifestValidator.java": [
      "File: src/main/java/hudson/plugins/repo/ManifestValidator.java -> src/main/java/hudson/plugins/repo/ManifestValidator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package hudson.plugins.repo;",
      "27: import hudson.AbortException;",
      "28: import jenkins.util.xml.XMLUtils;",
      "29: import org.w3c.dom.Document;",
      "30: import org.w3c.dom.NamedNodeMap;",
      "31: import org.w3c.dom.NodeList;",
      "33: import org.xml.sax.SAXException;",
      "35: import java.io.ByteArrayInputStream;",
      "36: import java.io.IOException;",
      "37: import java.util.Locale;",
      "42: public final class ManifestValidator {",
      "44:     private ManifestValidator() {",
      "46:     }",
      "54:     public static void validate(final byte[] manifestText, final String manifestRepositoryUrl)",
      "55:             throws IOException {",
      "56:         if (manifestText.length > 0) {",
      "57:             try {",
      "58:                 Document doc = XMLUtils.parse(new ByteArrayInputStream(manifestText));",
      "59:                 NodeList remote = doc.getElementsByTagName(\"remote\");",
      "60:                 for (int i = 0; i < remote.getLength(); i++) {",
      "61:                     NamedNodeMap attributes = remote.item(i).getAttributes();",
      "62:                     for (int j = 0; j < attributes.getLength(); j++) {",
      "63:                         if (\"fetch\".equals(attributes.item(j).getNodeName())",
      "64:                                 && attributes.item(j).getNodeValue()",
      "65:                                 .toLowerCase(Locale.ENGLISH).startsWith(\"file://\")) {",
      "68:                             throw new AbortException(\"Checkout of Repo url '\"",
      "69:                                     + manifestRepositoryUrl",
      "70:                                     + \"' aborted because manifest references a local \"",
      "71:                                     + \"directory, which may be insecure. You can allow \"",
      "72:                                     + \"local checkouts anyway\"",
      "73:                                     + \" by setting the system property '\"",
      "74:                                     + RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
      "75:                         }",
      "76:                     }",
      "77:                 }",
      "78:             } catch (SAXException e) {",
      "79:                 throw new IOException(\"Could not validate manifest\");",
      "80:             }",
      "81:         }",
      "82:     }",
      "83: }",
      "",
      "---------------"
    ],
    "src/main/java/hudson/plugins/repo/RepoScm.java||src/main/java/hudson/plugins/repo/RepoScm.java": [
      "File: src/main/java/hudson/plugins/repo/RepoScm.java -> src/main/java/hudson/plugins/repo/RepoScm.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: import java.io.Serializable;",
      "31: import java.net.URL;",
      "32: import java.nio.charset.Charset;",
      "33: import java.util.ArrayList;",
      "34: import java.util.Arrays;",
      "35: import java.util.Collections;",
      "36: import java.util.LinkedHashSet;",
      "37: import java.util.List;",
      "38: import java.util.Map;",
      "39: import java.util.Set;",
      "40: import java.util.logging.Level;",
      "41: import java.util.logging.Logger;",
      "43: import hudson.EnvVars;",
      "44: import hudson.Extension;",
      "45: import hudson.FilePath;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import java.nio.file.Files;",
      "34: import java.nio.file.Paths;",
      "40: import java.util.Locale;",
      "46: import hudson.AbortException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:  private static Logger debug = Logger",
      "85:    .getLogger(\"hudson.plugins.repo.RepoScm\");",
      "87:  private final String manifestRepositoryUrl;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:  static final String ALLOW_LOCAL_CHECKOUT_PROPERTY =",
      "95:    RepoScm.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
      "100:  static /* not final */ boolean ALLOW_LOCAL_CHECKOUT = Boolean.parseBoolean(System.getProperty(ALLOW_LOCAL_CHECKOUT_PROPERTY, \"false\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "880:    @CheckForNull final File changelogFile, @CheckForNull final SCMRevisionState baseline)",
      "881:    throws IOException, InterruptedException {",
      "883:   Job<?, ?> job = build.getParent();",
      "884:   EnvVars env = build.getEnvironment(listener);",
      "885:   env = getEnvVars(env, job);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:   if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
      "899:    abortIfUrlLocal();",
      "900:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "931:   build.addAction(manifestAction);",
      "932:  }",
      "934:  private int doSync(final Launcher launcher, @Nonnull final FilePath workspace,",
      "935:    final OutputStream logger, final EnvVars env)",
      "936:   throws IOException, InterruptedException {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "953:  private void abortIfUrlLocal() throws AbortException {",
      "954:   if (StringUtils.isNotEmpty(manifestRepositoryUrl)",
      "955:     && (manifestRepositoryUrl.toLowerCase(Locale.ENGLISH).startsWith(\"file://\")",
      "956:     || Files.exists(Paths.get(manifestRepositoryUrl)))) {",
      "957:    throw new AbortException(\"Checkout of Repo url '\" + manifestRepositoryUrl",
      "958:      + \"' aborted because it references a local directory, \"",
      "959:      + \"which may be insecure. \"",
      "960:      + \"You can allow local checkouts anyway by setting the system property '\"",
      "961:      + ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
      "962:   }",
      "963:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1082:    }",
      "1085:   returnCode = doSync(launcher, workspace, logger, env);",
      "1086:   if (returnCode != 0) {",
      "1087:    debug.log(Level.WARNING, \"Sync failed. Resetting repository\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:   if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
      "1117:    abortIfManifestReferencesLocalUrl(launcher, workspace, logger, env);",
      "1118:   }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1100:   return true;",
      "1101:  }",
      "1103:  private String getStaticManifest(final Launcher launcher,",
      "1104:    final FilePath workspace, final OutputStream logger,",
      "1105:    final EnvVars env)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:  private byte[] getManifestAsBytes(final Launcher launcher,",
      "1139:            final FilePath workspace,",
      "1140:            final OutputStream logger,",
      "1141:            final EnvVars env)",
      "1142:    throws IOException, InterruptedException {",
      "1143:   ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();",
      "1144:   final List<String> commands = new ArrayList<>();",
      "1145:   commands.add(getDescriptor().getExecutable());",
      "1146:   commands.add(\"manifest\");",
      "1147:   launcher.launch().stderr(logger).stdout(byteArrayOutputStream).pwd(workspace)",
      "1148:     .cmds(commands).envs(env).join();",
      "1149:   return byteArrayOutputStream.toByteArray();",
      "1150:  }",
      "1152:  private void abortIfManifestReferencesLocalUrl(final Launcher launcher,",
      "1153:                final FilePath workspace,",
      "1154:                final OutputStream logger,",
      "1155:                final EnvVars env)",
      "1156:    throws IOException, InterruptedException {",
      "1157:   byte[] manifestText = getManifestAsBytes(launcher, workspace, logger, env);",
      "1159:   ManifestValidator.validate(manifestText, manifestRepositoryUrl);",
      "1160:  }",
      "",
      "---------------"
    ],
    "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java||src/test/java/hudson/plugins/repo/ManifestValidatorTest.java": [
      "File: src/test/java/hudson/plugins/repo/ManifestValidatorTest.java -> src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.plugins.repo;",
      "3: import org.junit.Test;",
      "4: import org.jvnet.hudson.test.Issue;",
      "6: import java.io.IOException;",
      "7: import java.nio.charset.StandardCharsets;",
      "9: import static org.hamcrest.MatcherAssert.assertThat;",
      "10: import static org.hamcrest.Matchers.is;",
      "11: import static org.junit.Assert.fail;",
      "13: public class ManifestValidatorTest {",
      "15:     @Issue(\"SECURITY-2478\")",
      "16:     @Test",
      "17:     public void validateWhenFetchAttributeReferencesLocalPathThenAbort() {",
      "18:         String manifest = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +",
      "19:                 \"<manifest>\\n\" +",
      "20:                 \"  <remote  name=\\\"local\\\"\\n\" +",
      "21:                 \"           fetch=\\\"file:///Users/d.platonov/workdir/\\\"\\n\" +",
      "22:                 \"           revision=\\\"master\\\"\\n\" +",
      "23:                 \"           review=\\\"\\\" />\\n\" +",
      "24:                 \"\\n\" +",
      "25:                 \"  <project name=\\\"localProject\\\" path=\\\"localProject\\\" groups=\\\"lib\\\" remote=\\\"local\\\" />\\n\" +",
      "26:                 \"</manifest>\";",
      "27:         try {",
      "28:             ManifestValidator.validate(manifest.getBytes(StandardCharsets.UTF_8), \"repoUrl\");",
      "29:             fail(\"should fail because fetch attribute in remote tag references a local path\");",
      "30:         } catch (IOException e) {",
      "31:             assertThat(e.getMessage(), is(\"Checkout of Repo url 'repoUrl' aborted because manifest references a local directory, \" +",
      "32:                     \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
      "33:                     RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\"));",
      "34:         }",
      "35:     }",
      "37:     @Issue(\"SECURITY-2478\")",
      "38:     @Test",
      "39:     public void validateWhenValidManifestThenDoNotAbort() {",
      "40:         String manifest = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +",
      "41:                 \"<manifest>\\n\" +",
      "42:                 \"  <remote  name=\\\"origin\\\"\\n\" +",
      "43:                 \"           fetch=\\\"..\\\"\\n\" + // https://stackoverflow.com/questions/18251358/repo-manifest-xml-what-does-the-fetch-mean",
      "44:                 \"           revision=\\\"master\\\"\\n\" +",
      "45:                 \"           review=\\\"https://github.com\\\" />\\n\" +",
      "46:                 \"\\n\" +",
      "47:                 \"  <project name=\\\"any\\\" path=\\\"any\\\" groups=\\\"gr\\\" remote=\\\"origin\\\" />\\n\" +",
      "48:                 \" </manifest>\";",
      "50:         try {",
      "51:             ManifestValidator.validate(manifest.getBytes(StandardCharsets.UTF_8), \"repoUrl\");",
      "52:         } catch (Exception e) {",
      "53:             fail(\"fail because input is valid and no exception expected\");",
      "54:         }",
      "55:     }",
      "56: }",
      "",
      "---------------"
    ],
    "src/test/java/hudson/plugins/repo/Security2478Test.java||src/test/java/hudson/plugins/repo/Security2478Test.java": [
      "File: src/test/java/hudson/plugins/repo/Security2478Test.java -> src/test/java/hudson/plugins/repo/Security2478Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.plugins.repo;",
      "3: import hudson.model.FreeStyleBuild;",
      "4: import hudson.model.FreeStyleProject;",
      "5: import hudson.model.Result;",
      "6: import hudson.slaves.DumbSlave;",
      "7: import org.junit.Rule;",
      "8: import org.junit.Test;",
      "9: import org.junit.rules.TemporaryFolder;",
      "10: import org.jvnet.hudson.test.Issue;",
      "11: import org.jvnet.hudson.test.JenkinsRule;",
      "13: public class Security2478Test {",
      "15:     @Rule",
      "16:     public JenkinsRule rule = new JenkinsRule();",
      "18:     @Rule",
      "19:     public TemporaryFolder testFolder = new TemporaryFolder();",
      "21:     @Issue(\"SECURITY-2478\")",
      "22:     @Test",
      "23:     public void checkoutShouldAbortWhenUrlIsNonRemoteAndBuildOnController() throws Exception {",
      "24:         FreeStyleProject freeStyleProject = rule.createFreeStyleProject();",
      "25:         String manifestRepositoryUrl = testFolder.newFolder().toString();",
      "26:         RepoScm scm = new RepoScm(manifestRepositoryUrl);",
      "27:         freeStyleProject.setScm(scm);",
      "28:         FreeStyleBuild freeStyleBuild = rule.assertBuildStatus(Result.FAILURE, freeStyleProject.scheduleBuild2(0));",
      "29:         rule.assertLogContains(\"Checkout of Repo url '\" + manifestRepositoryUrl +",
      "30:                 \"' aborted because it references a local directory, \" +",
      "31:                 \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
      "32:                 RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", freeStyleBuild);",
      "33:     }",
      "35:     @Issue(\"SECURITY-2478\")",
      "36:     @Test",
      "37:     public void checkoutShouldNotAbortWhenUrlIsNonRemoteAndEscapeHatchTrue() throws Exception {",
      "38:         try {",
      "39:             RepoScm.ALLOW_LOCAL_CHECKOUT = true;",
      "40:             FreeStyleProject freeStyleProject = rule.createFreeStyleProject();",
      "41:             String manifestRepositoryUrl = testFolder.newFolder().toString();",
      "42:             RepoScm scm = new RepoScm(manifestRepositoryUrl);",
      "43:             freeStyleProject.setScm(scm);",
      "44:             FreeStyleBuild freeStyleBuild = rule.assertBuildStatus(Result.FAILURE, freeStyleProject.scheduleBuild2(0));",
      "48:             rule.assertLogNotContains(\"Checkout of Repo url '\" + manifestRepositoryUrl +",
      "49:                     \"' aborted because it references a local directory, \" +",
      "50:                     \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
      "51:                     RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", freeStyleBuild);",
      "52:         } finally {",
      "53:             RepoScm.ALLOW_LOCAL_CHECKOUT = false;",
      "54:         }",
      "55:     }",
      "57:     @Issue(\"SECURITY-2478\")",
      "58:     @Test",
      "59:     public void checkoutShouldNotAbortWhenUrlIsNonRemoteAndBuildOnAgent() throws Exception {",
      "60:         DumbSlave agent = rule.createOnlineSlave();",
      "61:         FreeStyleProject freeStyleProject = rule.createFreeStyleProject();",
      "63:         String manifestRepositoryUrl = testFolder.newFolder().toString();",
      "65:         RepoScm scm = new RepoScm(manifestRepositoryUrl);",
      "66:         freeStyleProject.setScm(scm);",
      "67:         freeStyleProject.setAssignedLabel(agent.getSelfLabel());",
      "71:         rule.assertLogNotContains(\"Checkout of Repo url '\" + manifestRepositoryUrl +",
      "72:                 \"' aborted because it references a local directory, \" +",
      "73:                 \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
      "74:                 RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", freeStyleProject.scheduleBuild2(0).get());",
      "75:     }",
      "76: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c8e6236b1088fc138a1a3e6af5ebbcb8b616f2f",
      "candidate_info": {
        "commit_hash": "3c8e6236b1088fc138a1a3e6af5ebbcb8b616f2f",
        "repo": "jenkinsci/repo-plugin",
        "commit_url": "https://github.com/jenkinsci/repo-plugin/commit/3c8e6236b1088fc138a1a3e6af5ebbcb8b616f2f",
        "files": [
          "pom.xml",
          "src/main/java/hudson/plugins/repo/ManifestValidator.java",
          "src/main/java/hudson/plugins/repo/RepoScm.java",
          "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
          "src/test/java/hudson/plugins/repo/Security2478Test.java"
        ],
        "message": "\u201cSECURITY-2478\u201d",
        "before_after_code_files": [
          "src/main/java/hudson/plugins/repo/ManifestValidator.java||src/main/java/hudson/plugins/repo/ManifestValidator.java",
          "src/main/java/hudson/plugins/repo/RepoScm.java||src/main/java/hudson/plugins/repo/RepoScm.java",
          "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java||src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
          "src/test/java/hudson/plugins/repo/Security2478Test.java||src/test/java/hudson/plugins/repo/Security2478Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/hudson/plugins/repo/ManifestValidator.java||src/main/java/hudson/plugins/repo/ManifestValidator.java",
            "src/main/java/hudson/plugins/repo/RepoScm.java||src/main/java/hudson/plugins/repo/RepoScm.java",
            "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java||src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
            "src/test/java/hudson/plugins/repo/Security2478Test.java||src/test/java/hudson/plugins/repo/Security2478Test.java"
          ],
          "candidate": [
            "src/main/java/hudson/plugins/repo/ManifestValidator.java||src/main/java/hudson/plugins/repo/ManifestValidator.java",
            "src/main/java/hudson/plugins/repo/RepoScm.java||src/main/java/hudson/plugins/repo/RepoScm.java",
            "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java||src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
            "src/test/java/hudson/plugins/repo/Security2478Test.java||src/test/java/hudson/plugins/repo/Security2478Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/hudson/plugins/repo/ManifestValidator.java||src/main/java/hudson/plugins/repo/ManifestValidator.java": [
          "File: src/main/java/hudson/plugins/repo/ManifestValidator.java -> src/main/java/hudson/plugins/repo/ManifestValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.plugins.repo;",
          "27: import hudson.AbortException;",
          "28: import jenkins.util.xml.XMLUtils;",
          "29: import org.w3c.dom.Document;",
          "30: import org.w3c.dom.NamedNodeMap;",
          "31: import org.w3c.dom.NodeList;",
          "33: import org.xml.sax.SAXException;",
          "35: import java.io.ByteArrayInputStream;",
          "36: import java.io.IOException;",
          "37: import java.util.Locale;",
          "42: public final class ManifestValidator {",
          "44:     private ManifestValidator() {",
          "46:     }",
          "54:     public static void validate(final byte[] manifestText, final String manifestRepositoryUrl)",
          "55:             throws IOException {",
          "56:         if (manifestText.length > 0) {",
          "57:             try {",
          "58:                 Document doc = XMLUtils.parse(new ByteArrayInputStream(manifestText));",
          "59:                 NodeList remote = doc.getElementsByTagName(\"remote\");",
          "60:                 for (int i = 0; i < remote.getLength(); i++) {",
          "61:                     NamedNodeMap attributes = remote.item(i).getAttributes();",
          "62:                     for (int j = 0; j < attributes.getLength(); j++) {",
          "63:                         if (\"fetch\".equals(attributes.item(j).getNodeName())",
          "64:                                 && attributes.item(j).getNodeValue()",
          "65:                                 .toLowerCase(Locale.ENGLISH).startsWith(\"file://\")) {",
          "68:                             throw new AbortException(\"Checkout of Repo url '\"",
          "69:                                     + manifestRepositoryUrl",
          "70:                                     + \"' aborted because manifest references a local \"",
          "71:                                     + \"directory, which may be insecure. You can allow \"",
          "72:                                     + \"local checkouts anyway\"",
          "73:                                     + \" by setting the system property '\"",
          "74:                                     + RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "75:                         }",
          "76:                     }",
          "77:                 }",
          "78:             } catch (SAXException e) {",
          "79:                 throw new IOException(\"Could not validate manifest\");",
          "80:             }",
          "81:         }",
          "82:     }",
          "83: }",
          "",
          "---------------"
        ],
        "src/main/java/hudson/plugins/repo/RepoScm.java||src/main/java/hudson/plugins/repo/RepoScm.java": [
          "File: src/main/java/hudson/plugins/repo/RepoScm.java -> src/main/java/hudson/plugins/repo/RepoScm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import java.io.Serializable;",
          "31: import java.net.URL;",
          "32: import java.nio.charset.Charset;",
          "33: import java.util.ArrayList;",
          "34: import java.util.Arrays;",
          "35: import java.util.Collections;",
          "36: import java.util.LinkedHashSet;",
          "37: import java.util.List;",
          "38: import java.util.Map;",
          "39: import java.util.Set;",
          "40: import java.util.logging.Level;",
          "41: import java.util.logging.Logger;",
          "43: import hudson.EnvVars;",
          "44: import hudson.Extension;",
          "45: import hudson.FilePath;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.nio.file.Files;",
          "34: import java.nio.file.Paths;",
          "40: import java.util.Locale;",
          "46: import hudson.AbortException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:  private static Logger debug = Logger",
          "85:    .getLogger(\"hudson.plugins.repo.RepoScm\");",
          "87:  private final String manifestRepositoryUrl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  static final String ALLOW_LOCAL_CHECKOUT_PROPERTY =",
          "95:    RepoScm.class.getName() + \".ALLOW_LOCAL_CHECKOUT\";",
          "100:  static /* not final */ boolean ALLOW_LOCAL_CHECKOUT = Boolean.parseBoolean(System.getProperty(ALLOW_LOCAL_CHECKOUT_PROPERTY, \"false\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "880:    @CheckForNull final File changelogFile, @CheckForNull final SCMRevisionState baseline)",
          "881:    throws IOException, InterruptedException {",
          "883:   Job<?, ?> job = build.getParent();",
          "884:   EnvVars env = build.getEnvironment(listener);",
          "885:   env = getEnvVars(env, job);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "898:   if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
          "899:    abortIfUrlLocal();",
          "900:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "931:   build.addAction(manifestAction);",
          "932:  }",
          "934:  private int doSync(final Launcher launcher, @Nonnull final FilePath workspace,",
          "935:    final OutputStream logger, final EnvVars env)",
          "936:   throws IOException, InterruptedException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "953:  private void abortIfUrlLocal() throws AbortException {",
          "954:   if (StringUtils.isNotEmpty(manifestRepositoryUrl)",
          "955:     && (manifestRepositoryUrl.toLowerCase(Locale.ENGLISH).startsWith(\"file://\")",
          "956:     || Files.exists(Paths.get(manifestRepositoryUrl)))) {",
          "957:    throw new AbortException(\"Checkout of Repo url '\" + manifestRepositoryUrl",
          "958:      + \"' aborted because it references a local directory, \"",
          "959:      + \"which may be insecure. \"",
          "960:      + \"You can allow local checkouts anyway by setting the system property '\"",
          "961:      + ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\");",
          "962:   }",
          "963:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1093:    }",
          "1094:   }",
          "1096:   returnCode = doSync(launcher, workspace, logger, env);",
          "1097:   if (returnCode != 0) {",
          "1098:    debug.log(Level.WARNING, \"Sync failed. Resetting repository\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:   if (!ALLOW_LOCAL_CHECKOUT && !workspace.isRemote()) {",
          "1128:    abortIfManifestReferencesLocalUrl(launcher, workspace, logger, env);",
          "1129:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1111:   return true;",
          "1112:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:  private byte[] getManifestAsBytes(final Launcher launcher,",
          "1150:            final FilePath workspace,",
          "1151:            final OutputStream logger,",
          "1152:            final EnvVars env)",
          "1153:    throws IOException, InterruptedException {",
          "1154:   ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();",
          "1155:   final List<String> commands = new ArrayList<>();",
          "1156:   commands.add(getDescriptor().getExecutable());",
          "1157:   commands.add(\"manifest\");",
          "1158:   launcher.launch().stderr(logger).stdout(byteArrayOutputStream).pwd(workspace)",
          "1159:     .cmds(commands).envs(env).join();",
          "1160:   return byteArrayOutputStream.toByteArray();",
          "1161:  }",
          "1163:  private void abortIfManifestReferencesLocalUrl(final Launcher launcher,",
          "1164:                final FilePath workspace,",
          "1165:                final OutputStream logger,",
          "1166:                final EnvVars env)",
          "1167:    throws IOException, InterruptedException {",
          "1168:   byte[] manifestText = getManifestAsBytes(launcher, workspace, logger, env);",
          "1170:   ManifestValidator.validate(manifestText, manifestRepositoryUrl);",
          "1171:  }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/repo/ManifestValidatorTest.java||src/test/java/hudson/plugins/repo/ManifestValidatorTest.java": [
          "File: src/test/java/hudson/plugins/repo/ManifestValidatorTest.java -> src/test/java/hudson/plugins/repo/ManifestValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.plugins.repo;",
          "3: import org.junit.Test;",
          "4: import org.jvnet.hudson.test.Issue;",
          "6: import java.io.IOException;",
          "7: import java.nio.charset.StandardCharsets;",
          "9: import static org.hamcrest.MatcherAssert.assertThat;",
          "10: import static org.hamcrest.Matchers.is;",
          "11: import static org.junit.Assert.fail;",
          "13: public class ManifestValidatorTest {",
          "15:     @Issue(\"SECURITY-2478\")",
          "16:     @Test",
          "17:     public void validateWhenFetchAttributeReferencesLocalPathThenAbort() {",
          "18:         String manifest = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +",
          "19:                 \"<manifest>\\n\" +",
          "20:                 \"  <remote  name=\\\"local\\\"\\n\" +",
          "21:                 \"           fetch=\\\"file:///Users/d.platonov/workdir/\\\"\\n\" +",
          "22:                 \"           revision=\\\"master\\\"\\n\" +",
          "23:                 \"           review=\\\"\\\" />\\n\" +",
          "24:                 \"\\n\" +",
          "25:                 \"  <project name=\\\"localProject\\\" path=\\\"localProject\\\" groups=\\\"lib\\\" remote=\\\"local\\\" />\\n\" +",
          "26:                 \"</manifest>\";",
          "27:         try {",
          "28:             ManifestValidator.validate(manifest.getBytes(StandardCharsets.UTF_8), \"repoUrl\");",
          "29:             fail(\"should fail because fetch attribute in remote tag references a local path\");",
          "30:         } catch (IOException e) {",
          "31:             assertThat(e.getMessage(), is(\"Checkout of Repo url 'repoUrl' aborted because manifest references a local directory, \" +",
          "32:                     \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
          "33:                     RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\"));",
          "34:         }",
          "35:     }",
          "37:     @Issue(\"SECURITY-2478\")",
          "38:     @Test",
          "39:     public void validateWhenValidManifestThenDoNotAbort() {",
          "40:         String manifest = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +",
          "41:                 \"<manifest>\\n\" +",
          "42:                 \"  <remote  name=\\\"origin\\\"\\n\" +",
          "43:                 \"           fetch=\\\"..\\\"\\n\" + // https://stackoverflow.com/questions/18251358/repo-manifest-xml-what-does-the-fetch-mean",
          "44:                 \"           revision=\\\"master\\\"\\n\" +",
          "45:                 \"           review=\\\"https://github.com\\\" />\\n\" +",
          "46:                 \"\\n\" +",
          "47:                 \"  <project name=\\\"any\\\" path=\\\"any\\\" groups=\\\"gr\\\" remote=\\\"origin\\\" />\\n\" +",
          "48:                 \" </manifest>\";",
          "50:         try {",
          "51:             ManifestValidator.validate(manifest.getBytes(StandardCharsets.UTF_8), \"repoUrl\");",
          "52:         } catch (Exception e) {",
          "53:             fail(\"fail because input is valid and no exception expected\");",
          "54:         }",
          "55:     }",
          "56: }",
          "",
          "---------------"
        ],
        "src/test/java/hudson/plugins/repo/Security2478Test.java||src/test/java/hudson/plugins/repo/Security2478Test.java": [
          "File: src/test/java/hudson/plugins/repo/Security2478Test.java -> src/test/java/hudson/plugins/repo/Security2478Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.plugins.repo;",
          "3: import hudson.model.FreeStyleBuild;",
          "4: import hudson.model.FreeStyleProject;",
          "5: import hudson.model.Result;",
          "6: import hudson.slaves.DumbSlave;",
          "7: import org.junit.Rule;",
          "8: import org.junit.Test;",
          "9: import org.junit.rules.TemporaryFolder;",
          "10: import org.jvnet.hudson.test.Issue;",
          "11: import org.jvnet.hudson.test.JenkinsRule;",
          "13: public class Security2478Test {",
          "15:     @Rule",
          "16:     public JenkinsRule rule = new JenkinsRule();",
          "18:     @Rule",
          "19:     public TemporaryFolder testFolder = new TemporaryFolder();",
          "21:     @Issue(\"SECURITY-2478\")",
          "22:     @Test",
          "23:     public void checkoutShouldAbortWhenUrlIsNonRemoteAndBuildOnController() throws Exception {",
          "24:         FreeStyleProject freeStyleProject = rule.createFreeStyleProject();",
          "25:         String manifestRepositoryUrl = testFolder.newFolder().toString();",
          "26:         RepoScm scm = new RepoScm(manifestRepositoryUrl);",
          "27:         freeStyleProject.setScm(scm);",
          "28:         FreeStyleBuild freeStyleBuild = rule.assertBuildStatus(Result.FAILURE, freeStyleProject.scheduleBuild2(0));",
          "29:         rule.assertLogContains(\"Checkout of Repo url '\" + manifestRepositoryUrl +",
          "30:                 \"' aborted because it references a local directory, \" +",
          "31:                 \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
          "32:                 RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", freeStyleBuild);",
          "33:     }",
          "35:     @Issue(\"SECURITY-2478\")",
          "36:     @Test",
          "37:     public void checkoutShouldNotAbortWhenUrlIsNonRemoteAndEscapeHatchTrue() throws Exception {",
          "38:         try {",
          "39:             RepoScm.ALLOW_LOCAL_CHECKOUT = true;",
          "40:             FreeStyleProject freeStyleProject = rule.createFreeStyleProject();",
          "41:             String manifestRepositoryUrl = testFolder.newFolder().toString();",
          "42:             RepoScm scm = new RepoScm(manifestRepositoryUrl);",
          "43:             freeStyleProject.setScm(scm);",
          "44:             FreeStyleBuild freeStyleBuild = rule.assertBuildStatus(Result.FAILURE, freeStyleProject.scheduleBuild2(0));",
          "48:             rule.assertLogNotContains(\"Checkout of Repo url '\" + manifestRepositoryUrl +",
          "49:                     \"' aborted because it references a local directory, \" +",
          "50:                     \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
          "51:                     RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", freeStyleBuild);",
          "52:         } finally {",
          "53:             RepoScm.ALLOW_LOCAL_CHECKOUT = false;",
          "54:         }",
          "55:     }",
          "57:     @Issue(\"SECURITY-2478\")",
          "58:     @Test",
          "59:     public void checkoutShouldNotAbortWhenUrlIsNonRemoteAndBuildOnAgent() throws Exception {",
          "60:         DumbSlave agent = rule.createOnlineSlave();",
          "61:         FreeStyleProject freeStyleProject = rule.createFreeStyleProject();",
          "63:         String manifestRepositoryUrl = testFolder.newFolder().toString();",
          "65:         RepoScm scm = new RepoScm(manifestRepositoryUrl);",
          "66:         freeStyleProject.setScm(scm);",
          "67:         freeStyleProject.setAssignedLabel(agent.getSelfLabel());",
          "71:         rule.assertLogNotContains(\"Checkout of Repo url '\" + manifestRepositoryUrl +",
          "72:                 \"' aborted because it references a local directory, \" +",
          "73:                 \"which may be insecure. You can allow local checkouts anyway by setting the system property '\" +",
          "74:                 RepoScm.ALLOW_LOCAL_CHECKOUT_PROPERTY + \"' to true.\", freeStyleProject.scheduleBuild2(0).get());",
          "75:     }",
          "76: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}