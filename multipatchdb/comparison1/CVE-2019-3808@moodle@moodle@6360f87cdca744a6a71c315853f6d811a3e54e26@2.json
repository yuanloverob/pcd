{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d4ce64dde6a6ec175ce9ec53c5d0fc59986c6c5",
      "candidate_info": {
        "commit_hash": "2d4ce64dde6a6ec175ce9ec53c5d0fc59986c6c5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2d4ce64dde6a6ec175ce9ec53c5d0fc59986c6c5",
        "files": [
          "enrol/externallib.php",
          "enrol/tests/externallib_test.php",
          "lib/db/services.php",
          "lib/upgrade.txt",
          "user/amd/build/status_field.min.js",
          "user/amd/build/status_field.min.js.map",
          "user/amd/src/status_field.js",
          "version.php"
        ],
        "message": "MDL-66489 enrol: Send all form data to WS and do all busines logic there\n\nIt is discouraged to use JS Date functions. We should pass all raw data to PHP.",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "user/amd/src/status_field.js||user/amd/src/status_field.js",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1020:         );",
          "1021:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1031:     public static function edit_user_enrolment_is_deprecated() {",
          "1032:         return true;",
          "1033:     }",
          "1040:     public static function submit_user_enrolment_form_parameters() {",
          "1041:         return new external_function_parameters([",
          "1042:             'formdata' => new external_value(PARAM_RAW, 'The data from the event form'),",
          "1043:         ]);",
          "1044:     }",
          "1052:     public static function submit_user_enrolment_form($formdata) {",
          "1053:         global $CFG, $DB, $PAGE;",
          "1056:         $params = self::validate_parameters(self::submit_user_enrolment_form_parameters(), ['formdata' => $formdata]);",
          "1058:         $data = [];",
          "1059:         parse_str($params['formdata'], $data);",
          "1061:         $userenrolment = $DB->get_record('user_enrolments', ['id' => $data['ue']], '*', MUST_EXIST);",
          "1062:         $instance = $DB->get_record('enrol', ['id' => $userenrolment->enrolid], '*', MUST_EXIST);",
          "1063:         $plugin = enrol_get_plugin($instance->enrol);",
          "1064:         $course = get_course($instance->courseid);",
          "1065:         $context = context_course::instance($course->id);",
          "1066:         self::validate_context($context);",
          "1068:         require_once(\"$CFG->dirroot/enrol/editenrolment_form.php\");",
          "1069:         $customformdata = [",
          "1070:             'ue' => $userenrolment,",
          "1071:             'modal' => true,",
          "1072:             'enrolinstancename' => $plugin->get_instance_name($instance)",
          "1073:         ];",
          "1074:         $mform = new enrol_user_enrolment_form(null, $customformdata, 'post', '', null, true, $data);",
          "1076:         if ($validateddata = $mform->get_data()) {",
          "1077:             if (!empty($validateddata->duration) && $validateddata->timeend == 0) {",
          "1078:                 $validateddata->timeend = $validateddata->timestart + $validateddata->duration;",
          "1079:             }",
          "1080:             require_once($CFG->dirroot . '/enrol/locallib.php');",
          "1081:             $manager = new course_enrolment_manager($PAGE, $course);",
          "1082:             $result = $manager->edit_enrolment($userenrolment, $validateddata);",
          "1084:             return ['result' => $result];",
          "1085:         } else {",
          "1086:             return ['result' => false, 'validationerror' => true];",
          "1087:         }",
          "1088:     }",
          "1095:     public static function submit_user_enrolment_form_returns() {",
          "1096:         return new external_single_structure([",
          "1097:             'result' => new external_value(PARAM_BOOL, 'True if the user\\'s enrolment was successfully updated'),",
          "1098:             'validationerror' => new external_value(PARAM_BOOL, 'Indicates invalid form data', VALUE_DEFAULT, false),",
          "1099:         ]);",
          "1100:     }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:         $this->assertEquals(ENROL_USER_SUSPENDED, $ue->status);",
          "959:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "964:     public function submit_user_enrolment_form_provider() {",
          "965:         $now = new DateTime();",
          "967:         $nextmonth = clone($now);",
          "968:         $nextmonth->add(new DateInterval('P1M'));",
          "970:         return [",
          "971:             'Invalid data' => [",
          "972:                 'customdata' => [",
          "973:                     'status' => ENROL_USER_ACTIVE,",
          "974:                     'timestart' => [",
          "975:                         'day' => $now->format('j'),",
          "976:                         'month' => $now->format('n'),",
          "977:                         'year' => $now->format('Y'),",
          "978:                         'hour' => $now->format('G'),",
          "979:                         'minute' => 0,",
          "980:                         'enabled' => 1,",
          "981:                     ],",
          "982:                     'timeend' => [",
          "983:                         'day' => $now->format('j'),",
          "984:                         'month' => $now->format('n'),",
          "985:                         'year' => $now->format('Y'),",
          "986:                         'hour' => $now->format('G'),",
          "987:                         'minute' => 0,",
          "988:                         'enabled' => 1,",
          "989:                     ],",
          "990:                 ],",
          "991:                 'expectedresult' => false,",
          "992:                 'validationerror' => true,",
          "993:             ],",
          "994:             'Valid data' => [",
          "995:                 'customdata' => [",
          "996:                     'status' => ENROL_USER_ACTIVE,",
          "997:                     'timestart' => [",
          "998:                         'day' => $now->format('j'),",
          "999:                         'month' => $now->format('n'),",
          "1000:                         'year' => $now->format('Y'),",
          "1001:                         'hour' => $now->format('G'),",
          "1002:                         'minute' => 0,",
          "1003:                         'enabled' => 1,",
          "1004:                     ],",
          "1005:                     'timeend' => [",
          "1006:                         'day' => $nextmonth->format('j'),",
          "1007:                         'month' => $nextmonth->format('n'),",
          "1008:                         'year' => $nextmonth->format('Y'),",
          "1009:                         'hour' => $nextmonth->format('G'),",
          "1010:                         'minute' => 0,",
          "1011:                         'enabled' => 1,",
          "1012:                     ],",
          "1013:                 ],",
          "1014:                 'expectedresult' => true,",
          "1015:                 'validationerror' => false",
          "1016:             ],",
          "1017:             'Suspend user' => [",
          "1018:                 'customdata' => [",
          "1019:                     'status' => ENROL_USER_SUSPENDED,",
          "1020:                 ],",
          "1021:                 'expectedresult' => true,",
          "1022:                 'validationerror' => false",
          "1023:             ],",
          "1024:         ];",
          "1025:     }",
          "1033:     public function test_submit_user_enrolment_form($customdata, $expectedresult, $validationerror) {",
          "1034:         global $CFG, $DB;",
          "1036:         $this->resetAfterTest(true);",
          "1037:         $datagen = $this->getDataGenerator();",
          "1040:         $manualplugin = enrol_get_plugin('manual');",
          "1042:         $studentroleid = $DB->get_field('role', 'id', ['shortname' => 'student'], MUST_EXIST);",
          "1043:         $teacherroleid = $DB->get_field('role', 'id', ['shortname' => 'editingteacher'], MUST_EXIST);",
          "1044:         $course = $datagen->create_course();",
          "1045:         $user = $datagen->create_user();",
          "1046:         $teacher = $datagen->create_user();",
          "1048:         $instanceid = null;",
          "1049:         $instances = enrol_get_instances($course->id, true);",
          "1050:         foreach ($instances as $inst) {",
          "1051:             if ($inst->enrol == 'manual') {",
          "1052:                 $instanceid = (int)$inst->id;",
          "1053:                 break;",
          "1054:             }",
          "1055:         }",
          "1056:         if (empty($instanceid)) {",
          "1057:             $instanceid = $manualplugin->add_default_instance($course);",
          "1058:             if (empty($instanceid)) {",
          "1059:                 $instanceid = $manualplugin->add_instance($course);",
          "1060:             }",
          "1061:         }",
          "1062:         $this->assertNotNull($instanceid);",
          "1064:         $instance = $DB->get_record('enrol', ['id' => $instanceid], '*', MUST_EXIST);",
          "1065:         $manualplugin->enrol_user($instance, $user->id, $studentroleid, 0, 0, ENROL_USER_ACTIVE);",
          "1066:         $manualplugin->enrol_user($instance, $teacher->id, $teacherroleid, 0, 0, ENROL_USER_ACTIVE);",
          "1067:         $ueid = (int) $DB->get_field(",
          "1068:                 'user_enrolments',",
          "1069:                 'id',",
          "1070:                 ['enrolid' => $instance->id, 'userid' => $user->id],",
          "1071:                 MUST_EXIST",
          "1072:         );",
          "1075:         $teacher->ignoresesskey = true;",
          "1076:         $this->setUser($teacher);",
          "1078:         $formdata = [",
          "1079:             'ue'        => $ueid,",
          "1080:             'ifilter'   => 0,",
          "1081:             'status'    => null,",
          "1082:             'timestart' => null,",
          "1083:             'duration'  => null,",
          "1084:             'timeend'   => null,",
          "1085:         ];",
          "1087:         $formdata = array_merge($formdata, $customdata);",
          "1089:         require_once(\"$CFG->dirroot/enrol/editenrolment_form.php\");",
          "1090:         $formdata = enrol_user_enrolment_form::mock_generate_submit_keys($formdata);",
          "1092:         $querystring = http_build_query($formdata, '', '&');",
          "1094:         $result = external_api::clean_returnvalue(",
          "1095:                 core_enrol_external::submit_user_enrolment_form_returns(),",
          "1096:                 core_enrol_external::submit_user_enrolment_form($querystring)",
          "1097:         );",
          "1099:         $this->assertEquals(",
          "1100:                 ['result' => $expectedresult, 'validationerror' => $validationerror],",
          "1101:                 $result,",
          "1102:                 '', 0.0, 10, true);",
          "1104:         if ($result['result']) {",
          "1105:             $ue = $DB->get_record('user_enrolments', ['id' => $ueid], '*', MUST_EXIST);",
          "1106:             $this->assertEquals($formdata['status'], $ue->status);",
          "1107:         }",
          "1108:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:         'classname' => 'core_enrol_external',",
          "648:         'methodname' => 'edit_user_enrolment',",
          "649:         'classpath' => 'enrol/externallib.php',",
          "651:         'type' => 'write',",
          "652:         'ajax' => true,",
          "653:     ),",
          "",
          "[Removed Lines]",
          "650:         'description' => 'External function that updates a given user enrolment',",
          "",
          "[Added Lines]",
          "650:         'description' => '** DEPRECATED ** Please do not call this function any more.",
          "651:                           External function that updates a given user enrolment',",
          "652:         'type' => 'write',",
          "653:         'ajax' => true,",
          "654:     ),",
          "655:     'core_enrol_submit_user_enrolment_form' => array(",
          "656:         'classname' => 'core_enrol_external',",
          "657:         'methodname' => 'submit_user_enrolment_form',",
          "658:         'classpath' => 'enrol/externallib.php',",
          "659:         'description' => 'Submit form data for enrolment form',",
          "",
          "---------------"
        ],
        "user/amd/src/status_field.js||user/amd/src/status_field.js": [
          "File: user/amd/src/status_field.js -> user/amd/src/status_field.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:             var ueid = $(form).find('[name=\"ue\"]').val();",
          "303:             var request = {",
          "306:             };",
          "308:             Ajax.call([request])[0].done(function(data) {",
          "",
          "[Removed Lines]",
          "265:             var status = $(form).find('[name=\"status\"]').val();",
          "267:             var params = {",
          "268:                 'courseid': this.courseid,",
          "269:                 'ueid': ueid,",
          "270:                 'status': status",
          "271:             };",
          "274:             var timeStartEnabled = $(form).find('[name=\"timestart[enabled]\"]');",
          "275:             if (timeStartEnabled.is(':checked')) {",
          "276:                 var timeStartYear = $(form).find('[name=\"timestart[year]\"]').val();",
          "277:                 var timeStartMonth = $(form).find('[name=\"timestart[month]\"]').val() - 1;",
          "278:                 var timeStartDay = $(form).find('[name=\"timestart[day]\"]').val();",
          "279:                 var timeStartHour = $(form).find('[name=\"timestart[hour]\"]').val();",
          "280:                 var timeStartMinute = $(form).find('[name=\"timestart[minute]\"]').val();",
          "281:                 var timeStart = new Date(timeStartYear, timeStartMonth, timeStartDay, timeStartHour, timeStartMinute);",
          "282:                 params.timestart = timeStart.getTime() / 1000;",
          "283:             }",
          "286:             var timeEndEnabled = $(form).find('[name=\"timeend[enabled]\"]');",
          "287:             if (timeEndEnabled.is(':checked')) {",
          "288:                 var timeEndYear = $(form).find('[name=\"timeend[year]\"]').val();",
          "289:                 var timeEndMonth = $(form).find('[name=\"timeend[month]\"]').val() - 1;",
          "290:                 var timeEndDay = $(form).find('[name=\"timeend[day]\"]').val();",
          "291:                 var timeEndHour = $(form).find('[name=\"timeend[hour]\"]').val();",
          "292:                 var timeEndMinute = $(form).find('[name=\"timeend[minute]\"]').val();",
          "293:                 var timeEnd = new Date(timeEndYear, timeEndMonth, timeEndDay, timeEndHour, timeEndMinute);",
          "294:                 params.timeend = timeEnd.getTime() / 1000;",
          "295:             }",
          "298:             var enrolDuration = $(form).find('[name=\"duration\"]');",
          "299:             if (enrolDuration.is(':enabled')) {",
          "300:                 params.timeend = params.timestart + parseInt(enrolDuration.val());",
          "301:             }",
          "304:                 methodname: 'core_enrol_edit_user_enrolment',",
          "305:                 args: params",
          "",
          "[Added Lines]",
          "266:                 methodname: 'core_enrol_submit_user_enrolment_form',",
          "267:                 args: {",
          "268:                     formdata: form.serialize()",
          "269:                 }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019083000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019090400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8111abc33113e3c60f87aefea2cce28d25e5c9c3",
      "candidate_info": {
        "commit_hash": "8111abc33113e3c60f87aefea2cce28d25e5c9c3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8111abc33113e3c60f87aefea2cce28d25e5c9c3",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.8dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019100900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191008)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019101200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191012)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25c9c6336bbcc519f4684826b76e2f89df0da70d",
      "candidate_info": {
        "commit_hash": "25c9c6336bbcc519f4684826b76e2f89df0da70d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/25c9c6336bbcc519f4684826b76e2f89df0da70d",
        "files": [
          "version.php"
        ],
        "message": "Moodle release 3.7.3",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.16;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191108)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052003.00;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3 (Build: 20191111)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b89ab5798fe0f22f3ac8c90d7026d03b931fa49",
      "candidate_info": {
        "commit_hash": "8b89ab5798fe0f22f3ac8c90d7026d03b931fa49",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8b89ab5798fe0f22f3ac8c90d7026d03b931fa49",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.2+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.05;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20190927)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.06;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191004)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22124a36ca7ce1598d9765bfc20523056aed49ec",
      "candidate_info": {
        "commit_hash": "22124a36ca7ce1598d9765bfc20523056aed49ec",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/22124a36ca7ce1598d9765bfc20523056aed49ec",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052000.06;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7+ (Build: 20190628)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052000.07;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7+ (Build: 20190704)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}