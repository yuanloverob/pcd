{
  "cve_id": "CVE-2024-45389",
  "cve_desc": "Pagefind, a fully static search library, initializes its dynamic JavaScript and WebAssembly files relative to the location of the first script the user loads. This information is gathered by looking up the value of `document.currentScript.src`. Prior to Pagefind version 1.1.1, it is possible to \"clobber\" this lookup with otherwise benign HTML on the page. This will cause `document.currentScript.src` to resolve as an external domain, which will then be used by Pagefind to load dependencies. This exploit would only work in the case that an attacker could inject HTML to a live, hosted, website. In these cases, this would act as a way to escalate the privilege available to an attacker. This assumes they have the ability to add some elements to the page (for example, `img` tags with a `name` attribute), but not others, as adding a `script` to the page would itself be the cross-site scripting vector. Pagefind has tightened this resolution in version 1.1.1 by ensuring the source is loaded from a valid script element. There are no reports of this being exploited in the wild via Pagefind.",
  "repo": "CloudCannon/pagefind",
  "patch_hash": "14ec96864eabaf1d7d809d5da0186a8856261eeb",
  "patch_info": {
    "commit_hash": "14ec96864eabaf1d7d809d5da0186a8856261eeb",
    "repo": "CloudCannon/pagefind",
    "commit_url": "https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb",
    "files": [
      "pagefind_ui/default/svelte/ui.svelte",
      "pagefind_ui/default/ui-core.js",
      "pagefind_ui/modular/modular-core.js"
    ],
    "message": "Merge pull request #696 from CloudCannon/fix/dom-clobber\n\nAdd safety checks around accesses for `document.currentScript.src`",
    "before_after_code_files": [
      "pagefind_ui/default/svelte/ui.svelte||pagefind_ui/default/svelte/ui.svelte",
      "pagefind_ui/default/ui-core.js||pagefind_ui/default/ui-core.js",
      "pagefind_ui/modular/modular-core.js||pagefind_ui/modular/modular-core.js"
    ]
  },
  "patch_diff": {
    "pagefind_ui/default/svelte/ui.svelte||pagefind_ui/default/svelte/ui.svelte": [
      "File: pagefind_ui/default/svelte/ui.svelte -> pagefind_ui/default/svelte/ui.svelte",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:           [",
      "100:             `Pagefind couldn't be loaded from ${this.options.bundlePath}pagefind.js`,",
      "101:             `You can configure this by passing a bundlePath option to PagefindUI`,",
      "105:           ].join(\"\\n\")",
      "106:         );",
      "107:       }",
      "109:       if (!excerpt_length) {",
      "",
      "[Removed Lines]",
      "102:             `[DEBUG: Loaded from ${",
      "103:               document?.currentScript?.src ?? \"no known script location\"",
      "104:             }]`,",
      "",
      "[Added Lines]",
      "105:         if (",
      "106:           document?.currentScript &&",
      "107:           document.currentScript.tagName.toUpperCase() === \"SCRIPT\"",
      "108:         ) {",
      "109:           console.error(",
      "110:             `[DEBUG: Loaded from ${",
      "111:               document.currentScript.src ?? \"bad script location\"",
      "112:             }]`",
      "113:           );",
      "114:         } else {",
      "115:           console.error(\"no known script location\");",
      "116:         }",
      "",
      "---------------"
    ],
    "pagefind_ui/default/ui-core.js||pagefind_ui/default/ui-core.js": [
      "File: pagefind_ui/default/ui-core.js -> pagefind_ui/default/ui-core.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: let scriptBundlePath;",
      "4: try {",
      "8: } catch (e) {",
      "9:   scriptBundlePath = \"/pagefind/\";",
      "10: }",
      "",
      "[Removed Lines]",
      "5:   scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
      "6:     /^(.*\\/)(?:pagefind-)?ui.js.*$/",
      "7:   )[1];",
      "",
      "[Added Lines]",
      "6:   if (document?.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') {",
      "7:     scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
      "8:       /^(.*\\/)(?:pagefind-)?ui.js.*$/",
      "9:     )[1];",
      "10:   }",
      "",
      "---------------"
    ],
    "pagefind_ui/modular/modular-core.js||pagefind_ui/modular/modular-core.js": [
      "File: pagefind_ui/modular/modular-core.js -> pagefind_ui/modular/modular-core.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: let scriptBundlePath;",
      "10: try {",
      "14: } catch (e) {",
      "15:   scriptBundlePath = \"/pagefind/\";",
      "16: }",
      "",
      "[Removed Lines]",
      "11:   scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
      "12:     /^(.*\\/)(?:pagefind-)?modular-ui.js.*$/",
      "13:   )[1];",
      "",
      "[Added Lines]",
      "12:   if (document?.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') {",
      "13:     scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
      "14:       /^(.*\\/)(?:pagefind-)?modular-ui.js.*$/",
      "15:     )[1];",
      "16:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "166:         console.error(",
      "167:           [",
      "168:             `Pagefind couldn't be loaded from ${this.options.bundlePath}pagefind.js`,",
      "173:           ].join(\"\\n\")",
      "174:         );",
      "175:       }",
      "177:       await imported_pagefind.options(this.pagefindOptions || {});",
      "",
      "[Removed Lines]",
      "169:             `You can configure this by passing a bundlePath option to PagefindComposable Instance`,",
      "170:             `[DEBUG: Loaded from ${",
      "171:               document?.currentScript?.src ?? \"no known script location\"",
      "172:             }]`,",
      "",
      "[Added Lines]",
      "172:             `You can configure this by passing a bundlePath option to PagefindComposable Instance`",
      "176:         if (",
      "177:           document?.currentScript &&",
      "178:           document.currentScript.tagName.toUpperCase() === \"SCRIPT\"",
      "179:         ) {",
      "180:           console.error(",
      "181:             `[DEBUG: Loaded from ${",
      "182:               document.currentScript?.src ?? \"bad script location\"",
      "183:             }]`",
      "184:           );",
      "185:         } else {",
      "186:           console.error(\"no known script location\");",
      "187:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9528ef529b0cf5a45fc7b25b7aed43f54544c28d",
      "candidate_info": {
        "commit_hash": "9528ef529b0cf5a45fc7b25b7aed43f54544c28d",
        "repo": "CloudCannon/pagefind",
        "commit_url": "https://github.com/CloudCannon/pagefind/commit/9528ef529b0cf5a45fc7b25b7aed43f54544c28d",
        "files": [
          "pagefind_ui/default/svelte/ui.svelte",
          "pagefind_ui/default/ui-core.js",
          "pagefind_ui/modular/modular-core.js"
        ],
        "message": "Add safety checks around accesses for `document.currentScript.src`",
        "before_after_code_files": [
          "pagefind_ui/default/svelte/ui.svelte||pagefind_ui/default/svelte/ui.svelte",
          "pagefind_ui/default/ui-core.js||pagefind_ui/default/ui-core.js",
          "pagefind_ui/modular/modular-core.js||pagefind_ui/modular/modular-core.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/CloudCannon/pagefind/pull/696"
        ],
        "olp_code_files": {
          "patch": [
            "pagefind_ui/default/svelte/ui.svelte||pagefind_ui/default/svelte/ui.svelte",
            "pagefind_ui/default/ui-core.js||pagefind_ui/default/ui-core.js",
            "pagefind_ui/modular/modular-core.js||pagefind_ui/modular/modular-core.js"
          ],
          "candidate": [
            "pagefind_ui/default/svelte/ui.svelte||pagefind_ui/default/svelte/ui.svelte",
            "pagefind_ui/default/ui-core.js||pagefind_ui/default/ui-core.js",
            "pagefind_ui/modular/modular-core.js||pagefind_ui/modular/modular-core.js"
          ]
        }
      },
      "candidate_diff": {
        "pagefind_ui/default/svelte/ui.svelte||pagefind_ui/default/svelte/ui.svelte": [
          "File: pagefind_ui/default/svelte/ui.svelte -> pagefind_ui/default/svelte/ui.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:           [",
          "100:             `Pagefind couldn't be loaded from ${this.options.bundlePath}pagefind.js`,",
          "101:             `You can configure this by passing a bundlePath option to PagefindUI`,",
          "105:           ].join(\"\\n\")",
          "106:         );",
          "107:       }",
          "109:       if (!excerpt_length) {",
          "",
          "[Removed Lines]",
          "102:             `[DEBUG: Loaded from ${",
          "103:               document?.currentScript?.src ?? \"no known script location\"",
          "104:             }]`,",
          "",
          "[Added Lines]",
          "105:         if (",
          "106:           document?.currentScript &&",
          "107:           document.currentScript.tagName.toUpperCase() === \"SCRIPT\"",
          "108:         ) {",
          "109:           console.error(",
          "110:             `[DEBUG: Loaded from ${",
          "111:               document.currentScript.src ?? \"bad script location\"",
          "112:             }]`",
          "113:           );",
          "114:         } else {",
          "115:           console.error(\"no known script location\");",
          "116:         }",
          "",
          "---------------"
        ],
        "pagefind_ui/default/ui-core.js||pagefind_ui/default/ui-core.js": [
          "File: pagefind_ui/default/ui-core.js -> pagefind_ui/default/ui-core.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: let scriptBundlePath;",
          "4: try {",
          "8: } catch (e) {",
          "9:   scriptBundlePath = \"/pagefind/\";",
          "10: }",
          "",
          "[Removed Lines]",
          "5:   scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
          "6:     /^(.*\\/)(?:pagefind-)?ui.js.*$/",
          "7:   )[1];",
          "",
          "[Added Lines]",
          "6:   if (document?.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') {",
          "7:     scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
          "8:       /^(.*\\/)(?:pagefind-)?ui.js.*$/",
          "9:     )[1];",
          "10:   }",
          "",
          "---------------"
        ],
        "pagefind_ui/modular/modular-core.js||pagefind_ui/modular/modular-core.js": [
          "File: pagefind_ui/modular/modular-core.js -> pagefind_ui/modular/modular-core.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: let scriptBundlePath;",
          "10: try {",
          "14: } catch (e) {",
          "15:   scriptBundlePath = \"/pagefind/\";",
          "16: }",
          "",
          "[Removed Lines]",
          "11:   scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
          "12:     /^(.*\\/)(?:pagefind-)?modular-ui.js.*$/",
          "13:   )[1];",
          "",
          "[Added Lines]",
          "12:   if (document?.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') {",
          "13:     scriptBundlePath = new URL(document.currentScript.src).pathname.match(",
          "14:       /^(.*\\/)(?:pagefind-)?modular-ui.js.*$/",
          "15:     )[1];",
          "16:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:         console.error(",
          "167:           [",
          "168:             `Pagefind couldn't be loaded from ${this.options.bundlePath}pagefind.js`,",
          "173:           ].join(\"\\n\")",
          "174:         );",
          "175:       }",
          "177:       await imported_pagefind.options(this.pagefindOptions || {});",
          "",
          "[Removed Lines]",
          "169:             `You can configure this by passing a bundlePath option to PagefindComposable Instance`,",
          "170:             `[DEBUG: Loaded from ${",
          "171:               document?.currentScript?.src ?? \"no known script location\"",
          "172:             }]`,",
          "",
          "[Added Lines]",
          "172:             `You can configure this by passing a bundlePath option to PagefindComposable Instance`",
          "176:         if (",
          "177:           document?.currentScript &&",
          "178:           document.currentScript.tagName.toUpperCase() === \"SCRIPT\"",
          "179:         ) {",
          "180:           console.error(",
          "181:             `[DEBUG: Loaded from ${",
          "182:               document.currentScript?.src ?? \"bad script location\"",
          "183:             }]`",
          "184:           );",
          "185:         } else {",
          "186:           console.error(\"no known script location\");",
          "187:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}