{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1659149246556570f4a96f30b67487e2db349c7d",
      "candidate_info": {
        "commit_hash": "1659149246556570f4a96f30b67487e2db349c7d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1659149246556570f4a96f30b67487e2db349c7d",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"
        ],
        "message": "PDFBOX-4892: improve performance, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887617 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java||fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java||fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java -> fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         stringIndex = readStringIndexData(input);",
          "117:         byte[][] globalSubrIndex = readIndexData(input);",
          "120:         for (int i = 0; i < nameIndex.length; i++)",
          "121:         {",
          "122:             CFFFont font = parseFont(input, nameIndex[i], topDictIndex[i]);",
          "",
          "[Removed Lines]",
          "119:         List<CFFFont> fonts = new ArrayList<CFFFont>();",
          "",
          "[Added Lines]",
          "119:         List<CFFFont> fonts = new ArrayList<CFFFont>(nameIndex.length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:             }",
          "276:             else if (b0 == 30)",
          "277:             {",
          "279:             }",
          "280:             else if (b0 >= 32 && b0 <= 254)",
          "281:             {",
          "",
          "[Removed Lines]",
          "278:                 entry.operands.add(readRealNumber(input, b0));",
          "",
          "[Added Lines]",
          "278:                 entry.operands.add(readRealNumber(input));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335:         }",
          "336:     }",
          "342:     {",
          "343:         StringBuilder sb = new StringBuilder();",
          "344:         boolean done = false;",
          "345:         boolean exponentMissing = false;",
          "346:         boolean hasExponent = false;",
          "347:         while (!done)",
          "348:         {",
          "349:             int b = input.readUnsignedByte();",
          "351:             for (int nibble : nibbles)",
          "352:             {",
          "353:                 switch (nibble)",
          "",
          "[Removed Lines]",
          "341:     private static Double readRealNumber(CFFDataInput input, int b0) throws IOException",
          "350:             int[] nibbles = { b / 16, b % 16 };",
          "",
          "[Added Lines]",
          "338:     private static Double readRealNumber(CFFDataInput input) throws IOException",
          "344:         int[] nibbles = new int[2];",
          "348:             nibbles[0] = b / 16;",
          "349:             nibbles[1] = b % 16;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1029d1f2ad80a811f580fd71802ac2f00701a7e",
      "candidate_info": {
        "commit_hash": "d1029d1f2ad80a811f580fd71802ac2f00701a7e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d1029d1f2ad80a811f580fd71802ac2f00701a7e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java"
        ],
        "message": "PDFBOX-4892: performance optimization, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888047 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:     public byte[] toByteArray() throws IOException",
          "484:     {",
          "486:         InputStream is = null;",
          "487:         try",
          "488:         {",
          "489:             is = createInputStream();",
          "491:         }",
          "492:         finally",
          "493:         {",
          "",
          "[Removed Lines]",
          "485:         ByteArrayOutputStream output = new ByteArrayOutputStream();",
          "490:             IOUtils.copy(is, output);",
          "",
          "[Added Lines]",
          "489:             return IOUtils.toByteArray(is);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496:                 is.close();",
          "497:             }",
          "498:         }",
          "500:     }",
          "",
          "[Removed Lines]",
          "499:         return output.toByteArray();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ee1908893e4f635d2accd506f47ff05cca8ce70",
      "candidate_info": {
        "commit_hash": "4ee1908893e4f635d2accd506f47ff05cca8ce70",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4ee1908893e4f635d2accd506f47ff05cca8ce70",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java"
        ],
        "message": "PDFBOX-5133: disable test that fails on AdoptOpenJDK 1.8.0_282 on Ubuntu 20.04.2 LTS\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887733 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     public void testFlattenPDFBOX2469Filled() throws IOException",
          "101:     {",
          "102:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12678455/testPDF_acroForm.pdf\";",
          "",
          "[Removed Lines]",
          "99:     @Test",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33174c89428fa7f81bc942fe4d74a6cfad5d2c9f",
      "candidate_info": {
        "commit_hash": "33174c89428fa7f81bc942fe4d74a6cfad5d2c9f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/33174c89428fa7f81bc942fe4d74a6cfad5d2c9f",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ],
        "message": "PDFBOX-3891: add font resources from widget annotation to AcroForm if existing; add test\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883054 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.pdfbox.pdmodel.font.PDType0Font;",
          "36: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
          "37: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "38: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "39: import org.apache.pdfbox.pdmodel.interactive.form.PDField;",
          "40: import org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     private void handleAnnotations(PDAcroForm acroForm, List<PDField> fields, List<PDAnnotation> annotations, Map<String, PDField> nonTerminalFieldsMap)",
          "106:     {",
          "107:         for (PDAnnotation annot : annotations)",
          "108:         {",
          "109:             if (annot instanceof PDAnnotationWidget)",
          "110:             {",
          "111:                 if (annot.getCOSObject().containsKey(COSName.PARENT))",
          "112:                 {",
          "113:                     PDField resolvedField = resolveNonRootField(acroForm, (PDAnnotationWidget) annot, nonTerminalFieldsMap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:         PDResources acroFormResources = acroForm.getDefaultResources();",
          "114:                 addFontFromWidget(acroFormResources, annot);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         }",
          "125:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     private void addFontFromWidget(PDResources acroFormResources, PDAnnotation annotation)",
          "137:     {",
          "138:         PDAppearanceStream normalAppearanceStream = annotation.getNormalAppearanceStream();",
          "139:         if (normalAppearanceStream != null && normalAppearanceStream.getResources() != null)",
          "140:         {",
          "141:             PDResources widgetResources = normalAppearanceStream.getResources();",
          "142:             for (COSName fontName : widgetResources.getFontNames())",
          "143:             {",
          "144:                 if (!fontName.getName().startsWith(\"+\"))",
          "145:                 {",
          "146:                     try",
          "147:                     {",
          "148:                         if (acroFormResources.getFont(fontName) == null)",
          "149:                         {",
          "150:                             acroFormResources.put(fontName, widgetResources.getFont(fontName));",
          "151:                             LOG.debug(\"qdded font resource to AcroForm from widget for font name \" + fontName.getName());",
          "152:                         }",
          "153:                     }",
          "154:                     catch (IOException ioe)",
          "155:                     {",
          "156:                         LOG.debug(\"unable to add font to AcroForm for font name \" + fontName.getName());",
          "157:                     }",
          "158:                 }",
          "159:                 else",
          "160:                 {",
          "161:                     LOG.debug(\"font resource for widget was a subsetted font - ignored: \" + fontName.getName());",
          "162:                 }",
          "163:             }",
          "164:         }",
          "165:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.pdfbox.io.IOUtils;",
          "31: import org.apache.pdfbox.pdmodel.PDDocument;",
          "32: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "33: import org.apache.pdfbox.pdmodel.fixup.AbstractFixup;",
          "34: import org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup;",
          "35: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor;",
          "36: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.pdfbox.pdmodel.PDResources;",
          "37: import org.apache.pdfbox.pdmodel.font.PDFont;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:         }",
          "264:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:     @Test",
          "277:     public void testFromAnnots3891ValidateFont() throws IOException",
          "278:     {",
          "280:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12881055/merge-test.pdf\";",
          "281:         String acrobatSourceUrl = \"https://issues.apache.org/jira/secure/attachment/13014447/merge-test-na-acrobat.pdf\";",
          "284:         Map<String, String> fontNames = new HashMap<String, String>();",
          "286:         PDDocument testPdf = null;",
          "287:         try",
          "288:         {",
          "289:             testPdf = PDDocument.load(new URL(acrobatSourceUrl).openStream());",
          "290:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "291:             PDAcroForm acroForm = catalog.getAcroForm(null);",
          "292:             PDResources acroFormResources = acroForm.getDefaultResources();",
          "293:             if (acroFormResources != null)",
          "294:             {",
          "295:                 for (COSName fontName : acroFormResources.getFontNames())",
          "296:                 {",
          "297:                     try",
          "298:                     {",
          "299:                         PDFont font = acroFormResources.getFont(fontName);",
          "300:                         font.getFontDescriptor().getFontName();",
          "301:                         fontNames.put(fontName.getName(), font.getName());",
          "302:                     }",
          "303:                     catch (IOException ioe)",
          "304:                     {",
          "306:                     }",
          "307:                 }",
          "308:             }",
          "309:         }",
          "310:         finally",
          "311:         {",
          "312:             IOUtils.closeQuietly(testPdf);",
          "313:         }",
          "315:         try",
          "316:         {",
          "317:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "318:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "319:             PDAcroForm acroForm = catalog.getAcroForm(new CreateFieldsFixup(testPdf));",
          "320:             PDResources acroFormResources = acroForm.getDefaultResources();",
          "321:             if (acroFormResources != null)",
          "322:             {",
          "323:                 for (COSName fontName : acroFormResources.getFontNames())",
          "324:                 {",
          "325:                     try",
          "326:                     {",
          "327:                         PDFont font = acroFormResources.getFont(fontName);",
          "328:                         String pdfBoxFontName = font.getFontDescriptor().getFontName();",
          "329:                         assertEquals(\"font resource added by Acrobat shall match font resource added by PDFBox\", fontNames.get(fontName.getName()), pdfBoxFontName);",
          "330:                     }",
          "331:                     catch (IOException ioe)",
          "332:                     {",
          "334:                     }",
          "335:                 }",
          "336:             }",
          "337:         }",
          "338:         finally",
          "339:         {",
          "340:             IOUtils.closeQuietly(testPdf);",
          "341:         }",
          "342:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c978d742bd64137aacdba346f3afe7238a5ac9a7",
      "candidate_info": {
        "commit_hash": "c978d742bd64137aacdba346f3afe7238a5ac9a7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c978d742bd64137aacdba346f3afe7238a5ac9a7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java"
        ],
        "message": "PDFBOX-4892: optimize loop, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887586 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     public int indexOf( COSBase object )",
          "437:     {",
          "438:         int retval = -1;",
          "440:         {",
          "441:             if( get( i ).equals( object ) )",
          "442:             {",
          "443:                 retval = i;",
          "444:             }",
          "445:         }",
          "446:         return retval;",
          "",
          "[Removed Lines]",
          "439:         for( int i=0; retval < 0 && i<size(); i++ )",
          "",
          "[Added Lines]",
          "439:         for (int i = 0; i < size(); i++)",
          "444:                 break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}