{
  "cve_id": "CVE-2021-40831",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been \u201coverridden\u201d. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to address this behavior. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.7.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.14.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.6.0 on macOS. Amazon Web Services AWS-C-IO 0.10.7 on macOS.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
  "patch_info": {
    "commit_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5aef82573202309063eb540b72cee0e565f85a2d",
    "files": [
      "setup.py"
    ],
    "message": "Fix CA override functions (#223)\n\nUpdate to awscrt 0.12.0. This fixes the issue where \"override_default_trust_store\" functions did not actually override the system trust store on Linux and Apple platforms.",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.12.0',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26563a4e8f63586bad30d44d55c0fa73705b5672",
      "candidate_info": {
        "commit_hash": "26563a4e8f63586bad30d44d55c0fa73705b5672",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/26563a4e8f63586bad30d44d55c0fa73705b5672",
        "files": [
          "setup.py"
        ],
        "message": "Ecs fix (#274)\n\n* Update CRT to pull in ECS credentials provider fix",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.2',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.3',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53a75c3ffa008e093c0904e88b8e3cbfd4c90f00",
      "candidate_info": {
        "commit_hash": "53a75c3ffa008e093c0904e88b8e3cbfd4c90f00",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/53a75c3ffa008e093c0904e88b8e3cbfd4c90f00",
        "files": [
          "setup.py"
        ],
        "message": "Improved support for Apple Silicon aka M1 aka arm64 aka Universal2 (#314)\n\nUse latest version of awscrt, which has wheels that work properly on M1 macs",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.9',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.11',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "805f41b5d2403688ff38ad50f8b7af1132fb5831",
      "candidate_info": {
        "commit_hash": "805f41b5d2403688ff38ad50f8b7af1132fb5831",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/805f41b5d2403688ff38ad50f8b7af1132fb5831",
        "files": [
          "setup.py"
        ],
        "message": "Updating dependency to pick up event stream RPC client fix. (#162)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.10.7',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.10.8',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3139671601699c8f997b87116f28d63d75a021de",
      "candidate_info": {
        "commit_hash": "3139671601699c8f997b87116f28d63d75a021de",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/3139671601699c8f997b87116f28d63d75a021de",
        "files": [
          "awsiot/mqtt_connection_builder.py",
          "docs/awsiot/mqtt_connection_builder.html",
          "docs/searchindex.js",
          "samples/fleetprovisioning.py",
          "samples/jobs.py",
          "samples/pubsub.py",
          "samples/shadow.py",
          "setup.py"
        ],
        "message": "Update samples and builder with improved proxy support (#196)\n\n* Update samples and builder with improved proxy support\n* Deprecate and don't use old parameter in samples when using websockets\n* Doc update\n\nCo-authored-by: Michael Graeb <graebm@amazon.com>",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/fleetprovisioning.py||samples/fleetprovisioning.py",
          "samples/jobs.py||samples/jobs.py",
          "samples/pubsub.py||samples/pubsub.py",
          "samples/shadow.py||samples/shadow.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         tls_ctx_options,",
          "144:         use_websockets=False,",
          "145:         websocket_handshake_transform=None,",
          "149:     ca_bytes = _get(kwargs, 'ca_bytes')",
          "",
          "[Removed Lines]",
          "146:         websocket_proxy_options=None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     tls_ctx = awscrt.io.ClientTlsContext(tls_ctx_options)",
          "189:     mqtt_client = awscrt.mqtt.Client(client_bootstrap, tls_ctx)",
          "191:     return awscrt.mqtt.Connection(",
          "192:         client=mqtt_client,",
          "193:         on_connection_interrupted=_get(kwargs, 'on_connection_interrupted'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     proxy_options = kwargs.get('http_proxy_options', kwargs.get('websocket_proxy_options', None))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:         socket_options=socket_options,",
          "208:         use_websockets=use_websockets,",
          "209:         websocket_handshake_transform=websocket_handshake_transform,",
          "211:     )",
          "",
          "[Removed Lines]",
          "210:         websocket_proxy_options=websocket_proxy_options,",
          "",
          "[Added Lines]",
          "212:         proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:         credentials_provider (awscrt.auth.AwsCredentialsProvider): Source of AWS credentials to use when signing.",
          "268:     \"\"\"",
          "269:     _check_required_kwargs(**kwargs)",
          "",
          "[Removed Lines]",
          "267:         websocket_proxy_options (awscrt.http.HttpProxyOptions): If specified, a proxy is used when connecting.",
          "",
          "[Added Lines]",
          "269:         websocket_proxy_options (awscrt.http.HttpProxyOptions): Deprecated,",
          "270:             for proxy settings use `http_proxy_options` (described in",
          "271:             :mod:`common arguments<awsiot.mqtt_connection_builder>`)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:     \"\"\"",
          "317:     _check_required_kwargs(**kwargs)",
          "318:     tls_ctx_options = awscrt.io.TlsContextOptions()",
          "",
          "[Removed Lines]",
          "315:         websocket_proxy_options (awscrt.http.HttpProxyOptions): If specified, a proxy is used when connecting.",
          "",
          "[Added Lines]",
          "320:         websocket_proxy_options (awscrt.http.HttpProxyOptions):  Deprecated,",
          "321:             for proxy settings use `http_proxy_options` (described in",
          "322:             :mod:`common arguments<awsiot.mqtt_connection_builder>`)",
          "",
          "---------------"
        ],
        "samples/fleetprovisioning.py||samples/fleetprovisioning.py": [
          "File: samples/fleetprovisioning.py -> samples/fleetprovisioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()), help=\"Client ID for MQTT connection.\")",
          "38: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "39:                     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "41: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "42:                                                                   \"is the region that will be used for computing the Sigv4 signature\")",
          "46: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "47:                     help='Logging level')",
          "48: parser.add_argument(\"--csr\", help=\"File path to your client CSR in PEM format\")",
          "",
          "[Removed Lines]",
          "40:                          \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "43: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "44:                                          \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "45: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "40:                          \"specify this option you must specify a region for signing.\")",
          "43: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "44: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "234:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "241:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "242:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "243:             endpoint=args.endpoint,",
          "244:             client_bootstrap=client_bootstrap,",
          "245:             region=args.signing_region,",
          "246:             credentials_provider=credentials_provider,",
          "248:             on_connection_interrupted=on_connection_interrupted,",
          "249:             on_connection_resumed=on_connection_resumed,",
          "250:             ca_filepath=args.root_ca,",
          "",
          "[Removed Lines]",
          "236:     if args.use_websocket == True:",
          "237:         proxy_options = None",
          "238:         if (args.proxy_host):",
          "239:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "247:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "235:     proxy_options = None",
          "236:     if (args.proxy_host):",
          "237:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "239:     if args.use_websocket == True:",
          "246:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:             on_connection_interrupted=on_connection_interrupted,",
          "264:             on_connection_resumed=on_connection_resumed,",
          "265:             clean_session=False,",
          "268:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "269:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "266:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "265:             keep_alive_secs=6,",
          "266:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "samples/jobs.py||samples/jobs.py": [
          "File: samples/jobs.py -> samples/jobs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: parser.add_argument('--job-time', default=5, type=float, help=\"Emulate working on job by sleeping this many seconds.\")",
          "47: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "48:     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "50: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "51:     \"is the region that will be used for computing the Sigv4 signature\")",
          "55: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "56:     help='Logging level')",
          "",
          "[Removed Lines]",
          "49:     \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "52: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "53:     \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "54: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "49:     \"specify this option you must specify a region for signing.\")",
          "52: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "53: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "231:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "238:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "239:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "240:             endpoint=args.endpoint,",
          "241:             client_bootstrap=client_bootstrap,",
          "242:             region=args.signing_region,",
          "243:             credentials_provider=credentials_provider,",
          "245:             ca_filepath=args.root_ca,",
          "246:             client_id=args.client_id,",
          "247:             clean_session=False,",
          "",
          "[Removed Lines]",
          "233:     if args.use_websocket == True:",
          "234:         proxy_options = None",
          "235:         if (args.proxy_host):",
          "236:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "244:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "232:     proxy_options = None",
          "233:     if (args.proxy_host):",
          "234:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "236:     if args.use_websocket == True:",
          "243:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:             ca_filepath=args.root_ca,",
          "257:             client_id=args.client_id,",
          "258:             clean_session=False,",
          "261:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "262:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "259:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "258:             keep_alive_secs=6,",
          "259:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:                                                           \"Specify 0 to run forever.\")",
          "33: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "34:     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "36: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "37:     \"is the region that will be used for computing the Sigv4 signature\")",
          "41: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "42:     help='Logging level')",
          "",
          "[Removed Lines]",
          "35:     \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "38: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "39:     \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "40: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "35:     \"specify this option you must specify a region for signing.\")",
          "38: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "39: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "91:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "98:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "99:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "100:             endpoint=args.endpoint,",
          "101:             client_bootstrap=client_bootstrap,",
          "102:             region=args.signing_region,",
          "103:             credentials_provider=credentials_provider,",
          "105:             ca_filepath=args.root_ca,",
          "106:             on_connection_interrupted=on_connection_interrupted,",
          "107:             on_connection_resumed=on_connection_resumed,",
          "",
          "[Removed Lines]",
          "93:     if args.use_websocket == True:",
          "94:         proxy_options = None",
          "95:         if (args.proxy_host):",
          "96:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "104:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "92:     proxy_options = None",
          "93:     if (args.proxy_host):",
          "94:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "96:     if args.use_websocket == True:",
          "103:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:             on_connection_resumed=on_connection_resumed,",
          "122:             client_id=args.client_id,",
          "123:             clean_session=False,",
          "126:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "127:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "124:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "123:             keep_alive_secs=6,",
          "124:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "samples/shadow.py||samples/shadow.py": [
          "File: samples/shadow.py -> samples/shadow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: parser.add_argument('--shadow-property', default=\"color\", help=\"Name of property in shadow to keep in sync\")",
          "44: parser.add_argument('--use-websocket', default=False, action='store_true',",
          "45:     help=\"To use a websocket instead of raw mqtt. If you \" +",
          "47: parser.add_argument('--signing-region', default='us-east-1', help=\"If you specify --use-web-socket, this \" +",
          "48:     \"is the region that will be used for computing the Sigv4 signature\")",
          "52: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "53:     help='Logging level')",
          "",
          "[Removed Lines]",
          "46:     \"specify this option you must specify a region for signing, you can also enable proxy mode.\")",
          "49: parser.add_argument('--proxy-host', help=\"Hostname for proxy to connect to. Note: if you use this feature, \" +",
          "50:     \"you will likely need to set --root-ca to the ca for your proxy.\")",
          "51: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port for proxy to connect to.\")",
          "",
          "[Added Lines]",
          "46:     \"specify this option you must specify a region for signing.\")",
          "49: parser.add_argument('--proxy-host', help=\"Hostname of proxy to connect to.\")",
          "50: parser.add_argument('--proxy-port', type=int, default=8080, help=\"Port of proxy to connect to.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "233:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "240:         credentials_provider = auth.AwsCredentialsProvider.new_default_chain(client_bootstrap)",
          "241:         mqtt_connection = mqtt_connection_builder.websockets_with_default_aws_signing(",
          "242:             endpoint=args.endpoint,",
          "243:             client_bootstrap=client_bootstrap,",
          "244:             region=args.signing_region,",
          "245:             credentials_provider=credentials_provider,",
          "247:             ca_filepath=args.root_ca,",
          "248:             client_id=args.client_id,",
          "249:             clean_session=False,",
          "",
          "[Removed Lines]",
          "235:     if args.use_websocket == True:",
          "236:         proxy_options = None",
          "237:         if (args.proxy_host):",
          "238:             proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "246:             websocket_proxy_options=proxy_options,",
          "",
          "[Added Lines]",
          "234:     proxy_options = None",
          "235:     if (args.proxy_host):",
          "236:         proxy_options = http.HttpProxyOptions(host_name=args.proxy_host, port=args.proxy_port)",
          "238:     if args.use_websocket == True:",
          "245:             http_proxy_options=proxy_options,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:             ca_filepath=args.root_ca,",
          "259:             client_id=args.client_id,",
          "260:             clean_session=False,",
          "263:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "264:         args.endpoint, args.client_id))",
          "",
          "[Removed Lines]",
          "261:             keep_alive_secs=6)",
          "",
          "[Added Lines]",
          "260:             keep_alive_secs=6,",
          "261:             http_proxy_options=proxy_options)",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.11.19',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.20',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
      "candidate_info": {
        "commit_hash": "fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fd4c0ba04b35eab9e20c635af5548fcc5a92d8be",
        "files": [
          "setup.py"
        ],
        "message": "Update to latest CRT (#208)\n\n* On Windows, always perform an SNI check even with an overridden root CA\n* On Windows, properly honor the verify_peer = false option\n* Fix instability with raspberry PI and input stream seeking by doing a better job of modeling file seek offset type and size.",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.11.20',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.22',",
          "",
          "---------------"
        ]
      }
    }
  ]
}