{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e540b7ed104e9a65cdd8cf9a157bf086309b7295",
      "candidate_info": {
        "commit_hash": "e540b7ed104e9a65cdd8cf9a157bf086309b7295",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/e540b7ed104e9a65cdd8cf9a157bf086309b7295",
        "files": [
          "CHANGELOG.md",
          "src/win.js",
          "test/fixtures/win.js",
          "test/fuzz/_common.cjs"
        ],
        "message": "Update Windows escaping for the exact character sequence `\\n\\r` (#458)\n\n* Update Windows text fixtures for `\\n\\r`\n\nUpdate the text fixtures for Windows that test that `\\n\\r` is escaped\nsuch that the expected value has just one space for the exact sequence\nof characters `\\n\\r`.\n\n* Replace `\\n\\r` exactly by only one space for Windows\n\n* Update CHANGELOG\n\n* Update fuzz normalization\n\nUpdate the fuzz normalization for CMD and PowerShell in alignment with\nthe changes to the newline substitution in the source code.",
        "before_after_code_files": [
          "src/win.js||src/win.js",
          "test/fixtures/win.js||test/fixtures/win.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ],
          "candidate": [
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: function escapeArgCmd(arg, interpolation, quoted) {",
          "38:   if (interpolation) {",
          "39:     result = result.replace(/\\^/gu, \"^^\").replace(/([\"&<>|])/gu, \"^$1\");",
          "",
          "[Removed Lines]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/[\\n\\r]/gu, \" \");",
          "",
          "[Added Lines]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/\\n\\r?|\\r/gu, \" \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   if (interpolation) {",
          "62:     result = result",
          "64:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "65:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "66:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\");",
          "",
          "[Removed Lines]",
          "63:       .replace(/[\\n\\r]/gu, \" \")",
          "",
          "[Added Lines]",
          "63:       .replace(/\\n\\r?|\\r/gu, \" \")",
          "",
          "---------------"
        ],
        "test/fixtures/win.js||test/fixtures/win.js": [
          "File: test/fixtures/win.js -> test/fixtures/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:       {",
          "199:         input: \"foo\\n\\rbar\",",
          "200:         expected: {",
          "203:         },",
          "204:       },",
          "205:     ],",
          "",
          "[Removed Lines]",
          "201:           interpolation: \"foo  bar\",",
          "202:           noInterpolation: \"foo  bar\",",
          "",
          "[Added Lines]",
          "201:           interpolation: \"foo bar\",",
          "202:           noInterpolation: \"foo bar\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740:       {",
          "741:         input: \"foo\\n\\rbar\",",
          "742:         expected: {",
          "744:           noInterpolation: \"foo\\n\\rbar\",",
          "745:         },",
          "746:       },",
          "",
          "[Removed Lines]",
          "743:           interpolation: \"foo  bar\",",
          "",
          "[Added Lines]",
          "743:           interpolation: \"foo bar\",",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     }",
          "74:   } else {",
          "75:     if (isShellCmd(shell)) {",
          "77:     }",
          "78:   }",
          "",
          "[Removed Lines]",
          "76:       arg = arg.replace(/[\\n\\r]/gu, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "[Added Lines]",
          "76:       arg = arg.replace(/\\n\\r?|\\r/gu, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1939cbd4c5bdc321b4403cb265c937dd1b7a290",
      "candidate_info": {
        "commit_hash": "e1939cbd4c5bdc321b4403cb265c937dd1b7a290",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/e1939cbd4c5bdc321b4403cb265c937dd1b7a290",
        "files": [
          "CHANGELOG.md",
          "docs/recipes.md",
          "index.js",
          "src/win.js",
          "test/fixtures/win.js",
          "test/fuzz/_common.cjs",
          "test/fuzz/corpus/d42b2e908b6280d96a4ad8c72f6f7dcd2a71eb76a9ccc64ae2e97851a30db32a",
          "test/fuzz/corpus/f279a321fd9fcf59697f212382f3a5a2914ae1932c806fd83d3770ab0834aaf2"
        ],
        "message": "Preserve whitespace when `interpolation: true` for PowerShell (#614)\n\n* Escape whitesapce for PowerShell\n\nImplement escaping of whitespace for PowerShell. In particular when\nescaping unquoted (and \"unprotected\", unlike e.g. calling `execFile`\nwith a falsy `shell` value) arguments. This is achieved simply by using\nthe shell's escape character to escape all whitespace characters\n(including `U+0085`)\n\nNewlines (`\\r?\\n`) are replaced by a space (` `) for PowerShell, this\nspace is intentionally `escaped` as well to prevent argument splitting\nthrough newlines.\n\nSince whitespace may change how other things are escaped, so to be\nconservative whitespace is escaped last.\n\nTest fixtures have been updated. The \"Hello world\" sample string test\ncase has been removed as it would actually belong in the\n`\"<space> (' ')\"` data group. Since this kind of string is already\ncovered it's removed.\n\n* Explain why whitespace isn't escaped for cmd.exe\n\n* Update the changelog",
        "before_after_code_files": [
          "index.js||index.js",
          "src/win.js||src/win.js",
          "test/fixtures/win.js||test/fixtures/win.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ],
          "candidate": [
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:       .replace(/\\r?\\n|\\r/gu, \" \")",
          "69:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "70:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "72:   } else if (quoted) {",
          "73:     result = result.replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "74:   }",
          "",
          "[Removed Lines]",
          "71:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\");",
          "",
          "[Added Lines]",
          "71:       .replace(/([\"&'(),;{|}\u2018\u2019\u201a\u201b\u201c\u201d\u201e])/gu, \"`$1\")",
          "72:       .replace(/([\\s\\u0085])/gu, \"`$1\");",
          "",
          "---------------"
        ],
        "test/fixtures/win.js||test/fixtures/win.js": [
          "File: test/fixtures/win.js -> test/fixtures/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:         input: \"foobar\",",
          "13:         expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },",
          "14:       },",
          "22:     ],",
          "23:     \"<null> (\\\\0)\": [",
          "24:       {",
          "",
          "[Removed Lines]",
          "15:       {",
          "16:         input: \"Hello world\",",
          "17:         expected: {",
          "18:           interpolation: \"Hello world\",",
          "19:           noInterpolation: \"Hello world\",",
          "20:         },",
          "21:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1117:         input: \"foobar\",",
          "1118:         expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },",
          "1119:       },",
          "1127:     ],",
          "1128:     \"<null> (\\\\0)\": [",
          "1129:       {",
          "",
          "[Removed Lines]",
          "1120:       {",
          "1121:         input: \"Hello world\",",
          "1122:         expected: {",
          "1123:           interpolation: \"Hello world\",",
          "1124:           noInterpolation: \"Hello world\",",
          "1125:         },",
          "1126:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1156:     \"<character tabulation> (\\\\t)\": [",
          "1157:       {",
          "1158:         input: \"a\\tb\",",
          "1160:       },",
          "1161:       {",
          "1162:         input: \"a\\tb\\tc\",",
          "1164:       },",
          "1165:       {",
          "1166:         input: \"a\\t\",",
          "1168:       },",
          "1169:       {",
          "1170:         input: \"\\ta\",",
          "1172:       },",
          "1173:     ],",
          "1174:     \"<end of line> ('\\\\n')\": [",
          "1175:       {",
          "1176:         input: \"a\\nb\",",
          "1178:       },",
          "1179:       {",
          "1180:         input: \"a\\nb\\nc\",",
          "1182:       },",
          "1183:       {",
          "1184:         input: \"a\\n\",",
          "1186:       },",
          "1187:       {",
          "1188:         input: \"\\na\",",
          "1190:       },",
          "1191:     ],",
          "1192:     \"<line tabulation> (\\\\v)\": [",
          "1193:       {",
          "1194:         input: \"a\\vb\",",
          "1196:       },",
          "1197:       {",
          "1198:         input: \"a\\vb\\vc\",",
          "1200:       },",
          "1201:       {",
          "1202:         input: \"a\\v\",",
          "1204:       },",
          "1205:       {",
          "1206:         input: \"\\va\",",
          "1208:       },",
          "1209:     ],",
          "1210:     \"<form feed> (\\\\f)\": [",
          "1211:       {",
          "1212:         input: \"a\\fb\",",
          "1214:       },",
          "1215:       {",
          "1216:         input: \"a\\fb\\fc\",",
          "1218:       },",
          "1219:       {",
          "1220:         input: \"a\\f\",",
          "1222:       },",
          "1223:       {",
          "1224:         input: \"\\fa\",",
          "1226:       },",
          "1227:     ],",
          "1228:     \"<carriage return> ('\\\\r')\": [",
          "",
          "[Removed Lines]",
          "1159:         expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },",
          "1163:         expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "1167:         expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },",
          "1171:         expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },",
          "1177:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "1181:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "1185:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "1189:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "1195:         expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },",
          "1199:         expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },",
          "1203:         expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },",
          "1207:         expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },",
          "1213:         expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },",
          "1217:         expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },",
          "1221:         expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },",
          "1225:         expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },",
          "",
          "[Added Lines]",
          "1145:         expected: { interpolation: \"a`\\tb\", noInterpolation: \"a\\tb\" },",
          "1149:         expected: { interpolation: \"a`\\tb`\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "1153:         expected: { interpolation: \"a`\\t\", noInterpolation: \"a\\t\" },",
          "1157:         expected: { interpolation: \"`\\ta\", noInterpolation: \"\\ta\" },",
          "1163:         expected: { interpolation: \"a` b\", noInterpolation: \"a\\nb\" },",
          "1167:         expected: { interpolation: \"a` b` c\", noInterpolation: \"a\\nb\\nc\" },",
          "1171:         expected: { interpolation: \"a` \", noInterpolation: \"a\\n\" },",
          "1175:         expected: { interpolation: \"` a\", noInterpolation: \"\\na\" },",
          "1181:         expected: { interpolation: \"a`\\vb\", noInterpolation: \"a\\vb\" },",
          "1185:         expected: { interpolation: \"a`\\vb`\\vc\", noInterpolation: \"a\\vb\\vc\" },",
          "1189:         expected: { interpolation: \"a`\\v\", noInterpolation: \"a\\v\" },",
          "1193:         expected: { interpolation: \"`\\va\", noInterpolation: \"\\va\" },",
          "1199:         expected: { interpolation: \"a`\\fb\", noInterpolation: \"a\\fb\" },",
          "1203:         expected: { interpolation: \"a`\\fb`\\fc\", noInterpolation: \"a\\fb\\fc\" },",
          "1207:         expected: { interpolation: \"a`\\f\", noInterpolation: \"a\\f\" },",
          "1211:         expected: { interpolation: \"`\\fa\", noInterpolation: \"\\fa\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1244:       },",
          "1245:       {",
          "1246:         input: \"a\\r\\nb\",",
          "1248:       },",
          "1249:     ],",
          "1250:     \"<escape> ('\\\\u001B')\": [",
          "",
          "[Removed Lines]",
          "1247:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "[Added Lines]",
          "1233:         expected: { interpolation: \"a` b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1268:     \"<space> (' ')\": [",
          "1269:       {",
          "1270:         input: \"a b\",",
          "1272:       },",
          "1273:       {",
          "1274:         input: \"a b c\",",
          "1276:       },",
          "1277:       {",
          "1278:         input: \"a \",",
          "1280:       },",
          "1281:       {",
          "1282:         input: \" a\",",
          "1284:       },",
          "1285:     ],",
          "1286:     \"<next line> (\\\\u0085)\": [",
          "1287:       {",
          "1288:         input: \"a\\u0085b\",",
          "1289:         expected: {",
          "1291:           noInterpolation: \"a\\u0085b\",",
          "1292:         },",
          "1293:       },",
          "1294:       {",
          "1295:         input: \"a\\u0085b\\u0085c\",",
          "1296:         expected: {",
          "1298:           noInterpolation: \"a\\u0085b\\u0085c\",",
          "1299:         },",
          "1300:       },",
          "1301:       {",
          "1302:         input: \"a\\u0085\",",
          "1303:         expected: {",
          "1305:           noInterpolation: \"a\\u0085\",",
          "1306:         },",
          "1307:       },",
          "1308:       {",
          "1309:         input: \"\\u0085a\",",
          "1310:         expected: {",
          "1312:           noInterpolation: \"\\u0085a\",",
          "1313:         },",
          "1314:       },",
          "",
          "[Removed Lines]",
          "1271:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "1275:         expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },",
          "1279:         expected: { interpolation: \"a \", noInterpolation: \"a \" },",
          "1283:         expected: { interpolation: \" a\", noInterpolation: \" a\" },",
          "1290:           interpolation: \"a\\u0085b\",",
          "1297:           interpolation: \"a\\u0085b\\u0085c\",",
          "1304:           interpolation: \"a\\u0085\",",
          "1311:           interpolation: \"\\u0085a\",",
          "",
          "[Added Lines]",
          "1257:         expected: { interpolation: \"a` b\", noInterpolation: \"a b\" },",
          "1261:         expected: { interpolation: \"a` b` c\", noInterpolation: \"a b c\" },",
          "1265:         expected: { interpolation: \"a` \", noInterpolation: \"a \" },",
          "1269:         expected: { interpolation: \"` a\", noInterpolation: \" a\" },",
          "1276:           interpolation: \"a`\\u0085b\",",
          "1283:           interpolation: \"a`\\u0085b`\\u0085c\",",
          "1290:           interpolation: \"a`\\u0085\",",
          "1297:           interpolation: \"`\\u0085a\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1335:       {",
          "1336:         input: \"a\\u00A0b\",",
          "1337:         expected: {",
          "1339:           noInterpolation: \"a\\u00A0b\",",
          "1340:         },",
          "1341:       },",
          "1342:       {",
          "1343:         input: \"a\\u00A0b\\u00A0c\",",
          "1344:         expected: {",
          "1346:           noInterpolation: \"a\\u00A0b\\u00A0c\",",
          "1347:         },",
          "1348:       },",
          "1349:       {",
          "1350:         input: \"a\\u00A0\",",
          "1351:         expected: {",
          "1353:           noInterpolation: \"a\\u00A0\",",
          "1354:         },",
          "1355:       },",
          "1356:       {",
          "1357:         input: \"\\u00A0a\",",
          "1358:         expected: {",
          "1360:           noInterpolation: \"\\u00A0a\",",
          "1361:         },",
          "1362:       },",
          "1363:     ],",
          "1364:     \"<en quad> (\\\\u2000)\": [",
          "1365:       {",
          "1366:         input: \"a\\u2000b\",",
          "1367:         expected: {",
          "1369:           noInterpolation: \"a\\u2000b\",",
          "1370:         },",
          "1371:       },",
          "1372:       {",
          "1373:         input: \"a\\u2000b\\u2000c\",",
          "1374:         expected: {",
          "1376:           noInterpolation: \"a\\u2000b\\u2000c\",",
          "1377:         },",
          "1378:       },",
          "1379:       {",
          "1380:         input: \"a\\u2000\",",
          "1381:         expected: {",
          "1383:           noInterpolation: \"a\\u2000\",",
          "1384:         },",
          "1385:       },",
          "1386:       {",
          "1387:         input: \"\\u2000a\",",
          "1388:         expected: {",
          "1390:           noInterpolation: \"\\u2000a\",",
          "1391:         },",
          "1392:       },",
          "",
          "[Removed Lines]",
          "1338:           interpolation: \"a\\u00A0b\",",
          "1345:           interpolation: \"a\\u00A0b\\u00A0c\",",
          "1352:           interpolation: \"a\\u00A0\",",
          "1359:           interpolation: \"\\u00A0a\",",
          "1368:           interpolation: \"a\\u2000b\",",
          "1375:           interpolation: \"a\\u2000b\\u2000c\",",
          "1382:           interpolation: \"a\\u2000\",",
          "1389:           interpolation: \"\\u2000a\",",
          "",
          "[Added Lines]",
          "1324:           interpolation: \"a`\\u00A0b\",",
          "1331:           interpolation: \"a`\\u00A0b`\\u00A0c\",",
          "1338:           interpolation: \"a`\\u00A0\",",
          "1345:           interpolation: \"`\\u00A0a\",",
          "1350:     \"<ogham space mark> (\\\\u1680)\": [",
          "1351:       {",
          "1352:         input: \"a\\u1680b\",",
          "1353:         expected: {",
          "1354:           interpolation: \"a`\\u1680b\",",
          "1355:           noInterpolation: \"a\\u1680b\",",
          "1356:         },",
          "1357:       },",
          "1358:       {",
          "1359:         input: \"a\\u1680b\\u1680c\",",
          "1360:         expected: {",
          "1361:           interpolation: \"a`\\u1680b`\\u1680c\",",
          "1362:           noInterpolation: \"a\\u1680b\\u1680c\",",
          "1363:         },",
          "1364:       },",
          "1365:       {",
          "1366:         input: \"a\\u1680\",",
          "1367:         expected: {",
          "1368:           interpolation: \"a`\\u1680\",",
          "1369:           noInterpolation: \"a\\u1680\",",
          "1370:         },",
          "1371:       },",
          "1372:       {",
          "1373:         input: \"\\u1680a\",",
          "1374:         expected: {",
          "1375:           interpolation: \"`\\u1680a\",",
          "1376:           noInterpolation: \"\\u1680a\",",
          "1377:         },",
          "1378:       },",
          "1379:     ],",
          "1384:           interpolation: \"a`\\u2000b\",",
          "1391:           interpolation: \"a`\\u2000b`\\u2000c\",",
          "1398:           interpolation: \"a`\\u2000\",",
          "1405:           interpolation: \"`\\u2000a\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1395:       {",
          "1396:         input: \"a\\u2001b\",",
          "1397:         expected: {",
          "1399:           noInterpolation: \"a\\u2001b\",",
          "1400:         },",
          "1401:       },",
          "1402:       {",
          "1403:         input: \"a\\u2001b\\u2001c\",",
          "1404:         expected: {",
          "1406:           noInterpolation: \"a\\u2001b\\u2001c\",",
          "1407:         },",
          "1408:       },",
          "1409:       {",
          "1410:         input: \"a\\u2001\",",
          "1411:         expected: {",
          "1413:           noInterpolation: \"a\\u2001\",",
          "1414:         },",
          "1415:       },",
          "1416:       {",
          "1417:         input: \"\\u2001a\",",
          "1418:         expected: {",
          "1420:           noInterpolation: \"\\u2001a\",",
          "1421:         },",
          "1422:       },",
          "",
          "[Removed Lines]",
          "1398:           interpolation: \"a\\u2001b\",",
          "1405:           interpolation: \"a\\u2001b\\u2001c\",",
          "1412:           interpolation: \"a\\u2001\",",
          "1419:           interpolation: \"\\u2001a\",",
          "",
          "[Added Lines]",
          "1414:           interpolation: \"a`\\u2001b\",",
          "1421:           interpolation: \"a`\\u2001b`\\u2001c\",",
          "1428:           interpolation: \"a`\\u2001\",",
          "1435:           interpolation: \"`\\u2001a\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1425:       {",
          "1426:         input: \"a\\u2002b\",",
          "1427:         expected: {",
          "1429:           noInterpolation: \"a\\u2002b\",",
          "1430:         },",
          "1431:       },",
          "1432:       {",
          "1433:         input: \"a\\u2002b\\u2002c\",",
          "1434:         expected: {",
          "1436:           noInterpolation: \"a\\u2002b\\u2002c\",",
          "1437:         },",
          "1438:       },",
          "1439:       {",
          "1440:         input: \"a\\u2002\",",
          "1441:         expected: {",
          "1443:           noInterpolation: \"a\\u2002\",",
          "1444:         },",
          "1445:       },",
          "1446:       {",
          "1447:         input: \"\\u2002a\",",
          "1448:         expected: {",
          "1450:           noInterpolation: \"\\u2002a\",",
          "1451:         },",
          "1452:       },",
          "",
          "[Removed Lines]",
          "1428:           interpolation: \"a\\u2002b\",",
          "1435:           interpolation: \"a\\u2002b\\u2002c\",",
          "1442:           interpolation: \"a\\u2002\",",
          "1449:           interpolation: \"\\u2002a\",",
          "",
          "[Added Lines]",
          "1444:           interpolation: \"a`\\u2002b\",",
          "1451:           interpolation: \"a`\\u2002b`\\u2002c\",",
          "1458:           interpolation: \"a`\\u2002\",",
          "1465:           interpolation: \"`\\u2002a\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1455:       {",
          "1456:         input: \"a\\u2003b\",",
          "1457:         expected: {",
          "1459:           noInterpolation: \"a\\u2003b\",",
          "1460:         },",
          "1461:       },",
          "1462:       {",
          "1463:         input: \"a\\u2003b\\u2003c\",",
          "1464:         expected: {",
          "1466:           noInterpolation: \"a\\u2003b\\u2003c\",",
          "1467:         },",
          "1468:       },",
          "1469:       {",
          "1470:         input: \"a\\u2003\",",
          "1471:         expected: {",
          "1473:           noInterpolation: \"a\\u2003\",",
          "1474:         },",
          "1475:       },",
          "1476:       {",
          "1477:         input: \"\\u2003a\",",
          "1478:         expected: {",
          "1480:           noInterpolation: \"\\u2003a\",",
          "1481:         },",
          "1482:       },",
          "",
          "[Removed Lines]",
          "1458:           interpolation: \"a\\u2003b\",",
          "1465:           interpolation: \"a\\u2003b\\u2003c\",",
          "1472:           interpolation: \"a\\u2003\",",
          "1479:           interpolation: \"\\u2003a\",",
          "",
          "[Added Lines]",
          "1474:           interpolation: \"a`\\u2003b\",",
          "1481:           interpolation: \"a`\\u2003b`\\u2003c\",",
          "1488:           interpolation: \"a`\\u2003\",",
          "1495:           interpolation: \"`\\u2003a\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1485:       {",
          "1486:         input: \"a\\u2004b\",",
          "1487:         expected: {",
          "1489:           noInterpolation: \"a\\u2004b\",",
          "1490:         },",
          "1491:       },",
          "1492:       {",
          "1493:         input: \"a\\u2004b\\u2004c\",",
          "1494:         expected: {",
          "1496:           noInterpolation: \"a\\u2004b\\u2004c\",",
          "1497:         },",
          "1498:       },",
          "1499:       {",
          "1500:         input: \"a\\u2004\",",
          "1501:         expected: {",
          "1503:           noInterpolation: \"a\\u2004\",",
          "1504:         },",
          "1505:       },",
          "1506:       {",
          "1507:         input: \"\\u2004a\",",
          "1508:         expected: {",
          "1510:           noInterpolation: \"\\u2004a\",",
          "1511:         },",
          "1512:       },",
          "",
          "[Removed Lines]",
          "1488:           interpolation: \"a\\u2004b\",",
          "1495:           interpolation: \"a\\u2004b\\u2004c\",",
          "1502:           interpolation: \"a\\u2004\",",
          "1509:           interpolation: \"\\u2004a\",",
          "",
          "[Added Lines]",
          "1504:           interpolation: \"a`\\u2004b\",",
          "1511:           interpolation: \"a`\\u2004b`\\u2004c\",",
          "1518:           interpolation: \"a`\\u2004\",",
          "1525:           interpolation: \"`\\u2004a\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1515:       {",
          "1516:         input: \"a\\u2005b\",",
          "1517:         expected: {",
          "1519:           noInterpolation: \"a\\u2005b\",",
          "1520:         },",
          "1521:       },",
          "1522:       {",
          "1523:         input: \"a\\u2005b\\u2005c\",",
          "1524:         expected: {",
          "1526:           noInterpolation: \"a\\u2005b\\u2005c\",",
          "1527:         },",
          "1528:       },",
          "1529:       {",
          "1530:         input: \"a\\u2005\",",
          "1531:         expected: {",
          "1533:           noInterpolation: \"a\\u2005\",",
          "1534:         },",
          "1535:       },",
          "1536:       {",
          "1537:         input: \"\\u2005a\",",
          "1538:         expected: {",
          "1540:           noInterpolation: \"\\u2005a\",",
          "1541:         },",
          "1542:       },",
          "",
          "[Removed Lines]",
          "1518:           interpolation: \"a\\u2005b\",",
          "1525:           interpolation: \"a\\u2005b\\u2005c\",",
          "1532:           interpolation: \"a\\u2005\",",
          "1539:           interpolation: \"\\u2005a\",",
          "",
          "[Added Lines]",
          "1534:           interpolation: \"a`\\u2005b\",",
          "1541:           interpolation: \"a`\\u2005b`\\u2005c\",",
          "1548:           interpolation: \"a`\\u2005\",",
          "1555:           interpolation: \"`\\u2005a\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1545:       {",
          "1546:         input: \"a\\u2006b\",",
          "1547:         expected: {",
          "1549:           noInterpolation: \"a\\u2006b\",",
          "1550:         },",
          "1551:       },",
          "1552:       {",
          "1553:         input: \"a\\u2006b\\u2006c\",",
          "1554:         expected: {",
          "1556:           noInterpolation: \"a\\u2006b\\u2006c\",",
          "1557:         },",
          "1558:       },",
          "1559:       {",
          "1560:         input: \"a\\u2006\",",
          "1561:         expected: {",
          "1563:           noInterpolation: \"a\\u2006\",",
          "1564:         },",
          "1565:       },",
          "1566:       {",
          "1567:         input: \"\\u2006a\",",
          "1568:         expected: {",
          "1570:           noInterpolation: \"\\u2006a\",",
          "1571:         },",
          "1572:       },",
          "",
          "[Removed Lines]",
          "1548:           interpolation: \"a\\u2006b\",",
          "1555:           interpolation: \"a\\u2006b\\u2006c\",",
          "1562:           interpolation: \"a\\u2006\",",
          "1569:           interpolation: \"\\u2006a\",",
          "",
          "[Added Lines]",
          "1564:           interpolation: \"a`\\u2006b\",",
          "1571:           interpolation: \"a`\\u2006b`\\u2006c\",",
          "1578:           interpolation: \"a`\\u2006\",",
          "1585:           interpolation: \"`\\u2006a\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1575:       {",
          "1576:         input: \"a\\u2007b\",",
          "1577:         expected: {",
          "1579:           noInterpolation: \"a\\u2007b\",",
          "1580:         },",
          "1581:       },",
          "1582:       {",
          "1583:         input: \"a\\u2007b\\u2007c\",",
          "1584:         expected: {",
          "1586:           noInterpolation: \"a\\u2007b\\u2007c\",",
          "1587:         },",
          "1588:       },",
          "1589:       {",
          "1590:         input: \"a\\u2007\",",
          "1591:         expected: {",
          "1593:           noInterpolation: \"a\\u2007\",",
          "1594:         },",
          "1595:       },",
          "1596:       {",
          "1597:         input: \"\\u2007a\",",
          "1598:         expected: {",
          "1600:           noInterpolation: \"\\u2007a\",",
          "1601:         },",
          "1602:       },",
          "",
          "[Removed Lines]",
          "1578:           interpolation: \"a\\u2007b\",",
          "1585:           interpolation: \"a\\u2007b\\u2007c\",",
          "1592:           interpolation: \"a\\u2007\",",
          "1599:           interpolation: \"\\u2007a\",",
          "",
          "[Added Lines]",
          "1594:           interpolation: \"a`\\u2007b\",",
          "1601:           interpolation: \"a`\\u2007b`\\u2007c\",",
          "1608:           interpolation: \"a`\\u2007\",",
          "1615:           interpolation: \"`\\u2007a\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1605:       {",
          "1606:         input: \"a\\u2008b\",",
          "1607:         expected: {",
          "1609:           noInterpolation: \"a\\u2008b\",",
          "1610:         },",
          "1611:       },",
          "1612:       {",
          "1613:         input: \"a\\u2008b\\u2008c\",",
          "1614:         expected: {",
          "1616:           noInterpolation: \"a\\u2008b\\u2008c\",",
          "1617:         },",
          "1618:       },",
          "1619:       {",
          "1620:         input: \"a\\u2008\",",
          "1621:         expected: {",
          "1623:           noInterpolation: \"a\\u2008\",",
          "1624:         },",
          "1625:       },",
          "1626:       {",
          "1627:         input: \"\\u2008a\",",
          "1628:         expected: {",
          "1630:           noInterpolation: \"\\u2008a\",",
          "1631:         },",
          "1632:       },",
          "",
          "[Removed Lines]",
          "1608:           interpolation: \"a\\u2008b\",",
          "1615:           interpolation: \"a\\u2008b\\u2008c\",",
          "1622:           interpolation: \"a\\u2008\",",
          "1629:           interpolation: \"\\u2008a\",",
          "",
          "[Added Lines]",
          "1624:           interpolation: \"a`\\u2008b\",",
          "1631:           interpolation: \"a`\\u2008b`\\u2008c\",",
          "1638:           interpolation: \"a`\\u2008\",",
          "1645:           interpolation: \"`\\u2008a\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1635:       {",
          "1636:         input: \"a\\u2009b\",",
          "1637:         expected: {",
          "1639:           noInterpolation: \"a\\u2009b\",",
          "1640:         },",
          "1641:       },",
          "1642:       {",
          "1643:         input: \"a\\u2009b\\u2009c\",",
          "1644:         expected: {",
          "1646:           noInterpolation: \"a\\u2009b\\u2009c\",",
          "1647:         },",
          "1648:       },",
          "1649:       {",
          "1650:         input: \"a\\u2009\",",
          "1651:         expected: {",
          "1653:           noInterpolation: \"a\\u2009\",",
          "1654:         },",
          "1655:       },",
          "1656:       {",
          "1657:         input: \"\\u2009a\",",
          "1658:         expected: {",
          "1660:           noInterpolation: \"\\u2009a\",",
          "1661:         },",
          "1662:       },",
          "",
          "[Removed Lines]",
          "1638:           interpolation: \"a\\u2009b\",",
          "1645:           interpolation: \"a\\u2009b\\u2009c\",",
          "1652:           interpolation: \"a\\u2009\",",
          "1659:           interpolation: \"\\u2009a\",",
          "",
          "[Added Lines]",
          "1654:           interpolation: \"a`\\u2009b\",",
          "1661:           interpolation: \"a`\\u2009b`\\u2009c\",",
          "1668:           interpolation: \"a`\\u2009\",",
          "1675:           interpolation: \"`\\u2009a\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1665:       {",
          "1666:         input: \"a\\u200Ab\",",
          "1667:         expected: {",
          "1669:           noInterpolation: \"a\\u200Ab\",",
          "1670:         },",
          "1671:       },",
          "1672:       {",
          "1673:         input: \"a\\u200Ab\\u200Ac\",",
          "1674:         expected: {",
          "1676:           noInterpolation: \"a\\u200Ab\\u200Ac\",",
          "1677:         },",
          "1678:       },",
          "1679:       {",
          "1680:         input: \"a\\u200A\",",
          "1681:         expected: {",
          "1683:           noInterpolation: \"a\\u200A\",",
          "1684:         },",
          "1685:       },",
          "1686:       {",
          "1687:         input: \"\\u200Aa\",",
          "1688:         expected: {",
          "1690:           noInterpolation: \"\\u200Aa\",",
          "1691:         },",
          "1692:       },",
          "",
          "[Removed Lines]",
          "1668:           interpolation: \"a\\u200Ab\",",
          "1675:           interpolation: \"a\\u200Ab\\u200Ac\",",
          "1682:           interpolation: \"a\\u200A\",",
          "1689:           interpolation: \"\\u200Aa\",",
          "",
          "[Added Lines]",
          "1684:           interpolation: \"a`\\u200Ab\",",
          "1691:           interpolation: \"a`\\u200Ab`\\u200Ac\",",
          "1698:           interpolation: \"a`\\u200A\",",
          "1705:           interpolation: \"`\\u200Aa\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1695:       {",
          "1696:         input: \"a\\u2028b\",",
          "1697:         expected: {",
          "1699:           noInterpolation: \"a\\u2028b\",",
          "1700:         },",
          "1701:       },",
          "1702:       {",
          "1703:         input: \"a\\u2028b\\u2028c\",",
          "1704:         expected: {",
          "1706:           noInterpolation: \"a\\u2028b\\u2028c\",",
          "1707:         },",
          "1708:       },",
          "1709:       {",
          "1710:         input: \"a\\u2028\",",
          "1711:         expected: {",
          "1713:           noInterpolation: \"a\\u2028\",",
          "1714:         },",
          "1715:       },",
          "1716:       {",
          "1717:         input: \"\\u2028a\",",
          "1718:         expected: {",
          "1720:           noInterpolation: \"\\u2028a\",",
          "1721:         },",
          "1722:       },",
          "",
          "[Removed Lines]",
          "1698:           interpolation: \"a\\u2028b\",",
          "1705:           interpolation: \"a\\u2028b\\u2028c\",",
          "1712:           interpolation: \"a\\u2028\",",
          "1719:           interpolation: \"\\u2028a\",",
          "",
          "[Added Lines]",
          "1714:           interpolation: \"a`\\u2028b\",",
          "1721:           interpolation: \"a`\\u2028b`\\u2028c\",",
          "1728:           interpolation: \"a`\\u2028\",",
          "1735:           interpolation: \"`\\u2028a\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1725:       {",
          "1726:         input: \"a\\u2029b\",",
          "1727:         expected: {",
          "1729:           noInterpolation: \"a\\u2029b\",",
          "1730:         },",
          "1731:       },",
          "1732:       {",
          "1733:         input: \"a\\u2029b\\u2029c\",",
          "1734:         expected: {",
          "1736:           noInterpolation: \"a\\u2029b\\u2029c\",",
          "1737:         },",
          "1738:       },",
          "1739:       {",
          "1740:         input: \"a\\u2029\",",
          "1741:         expected: {",
          "1743:           noInterpolation: \"a\\u2029\",",
          "1744:         },",
          "1745:       },",
          "1746:       {",
          "1747:         input: \"\\u2029a\",",
          "1748:         expected: {",
          "1750:           noInterpolation: \"\\u2029a\",",
          "1751:         },",
          "1752:       },",
          "",
          "[Removed Lines]",
          "1728:           interpolation: \"a\\u2029b\",",
          "1735:           interpolation: \"a\\u2029b\\u2029c\",",
          "1742:           interpolation: \"a\\u2029\",",
          "1749:           interpolation: \"\\u2029a\",",
          "",
          "[Added Lines]",
          "1744:           interpolation: \"a`\\u2029b\",",
          "1751:           interpolation: \"a`\\u2029b`\\u2029c\",",
          "1758:           interpolation: \"a`\\u2029\",",
          "1765:           interpolation: \"`\\u2029a\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1755:       {",
          "1756:         input: \"a\\u202Fb\",",
          "1757:         expected: {",
          "1759:           noInterpolation: \"a\\u202Fb\",",
          "1760:         },",
          "1761:       },",
          "1762:       {",
          "1763:         input: \"a\\u202Fb\\u202Fc\",",
          "1764:         expected: {",
          "1766:           noInterpolation: \"a\\u202Fb\\u202Fc\",",
          "1767:         },",
          "1768:       },",
          "1769:       {",
          "1770:         input: \"a\\u202F\",",
          "1771:         expected: {",
          "1773:           noInterpolation: \"a\\u202F\",",
          "1774:         },",
          "1775:       },",
          "1776:       {",
          "1777:         input: \"\\u202Fa\",",
          "1778:         expected: {",
          "1780:           noInterpolation: \"\\u202Fa\",",
          "1781:         },",
          "1782:       },",
          "",
          "[Removed Lines]",
          "1758:           interpolation: \"a\\u202Fb\",",
          "1765:           interpolation: \"a\\u202Fb\\u202Fc\",",
          "1772:           interpolation: \"a\\u202F\",",
          "1779:           interpolation: \"\\u202Fa\",",
          "",
          "[Added Lines]",
          "1774:           interpolation: \"a`\\u202Fb\",",
          "1781:           interpolation: \"a`\\u202Fb`\\u202Fc\",",
          "1788:           interpolation: \"a`\\u202F\",",
          "1795:           interpolation: \"`\\u202Fa\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1785:       {",
          "1786:         input: \"a\\u205Fb\",",
          "1787:         expected: {",
          "1789:           noInterpolation: \"a\\u205Fb\",",
          "1790:         },",
          "1791:       },",
          "1792:       {",
          "1793:         input: \"a\\u205Fb\\u205Fc\",",
          "1794:         expected: {",
          "1796:           noInterpolation: \"a\\u205Fb\\u205Fc\",",
          "1797:         },",
          "1798:       },",
          "1799:       {",
          "1800:         input: \"a\\u205F\",",
          "1801:         expected: {",
          "1803:           noInterpolation: \"a\\u205F\",",
          "1804:         },",
          "1805:       },",
          "1806:       {",
          "1807:         input: \"\\u205Fa\",",
          "1808:         expected: {",
          "1810:           noInterpolation: \"\\u205Fa\",",
          "1811:         },",
          "1812:       },",
          "",
          "[Removed Lines]",
          "1788:           interpolation: \"a\\u205Fb\",",
          "1795:           interpolation: \"a\\u205Fb\\u205Fc\",",
          "1802:           interpolation: \"a\\u205F\",",
          "1809:           interpolation: \"\\u205Fa\",",
          "",
          "[Added Lines]",
          "1804:           interpolation: \"a`\\u205Fb\",",
          "1811:           interpolation: \"a`\\u205Fb`\\u205Fc\",",
          "1818:           interpolation: \"a`\\u205F\",",
          "1825:           interpolation: \"`\\u205Fa\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1815:       {",
          "1816:         input: \"a\\u3000b\",",
          "1817:         expected: {",
          "1819:           noInterpolation: \"a\\u3000b\",",
          "1820:         },",
          "1821:       },",
          "1822:       {",
          "1823:         input: \"a\\u3000b\\u3000c\",",
          "1824:         expected: {",
          "1826:           noInterpolation: \"a\\u3000b\\u3000c\",",
          "1827:         },",
          "1828:       },",
          "1829:       {",
          "1830:         input: \"a\\u3000\",",
          "1831:         expected: {",
          "1833:           noInterpolation: \"a\\u3000\",",
          "1834:         },",
          "1835:       },",
          "1836:       {",
          "1837:         input: \"\\u3000a\",",
          "1838:         expected: {",
          "1840:           noInterpolation: \"\\u3000a\",",
          "1841:         },",
          "1842:       },",
          "",
          "[Removed Lines]",
          "1818:           interpolation: \"a\\u3000b\",",
          "1825:           interpolation: \"a\\u3000b\\u3000c\",",
          "1832:           interpolation: \"a\\u3000\",",
          "1839:           interpolation: \"\\u3000a\",",
          "",
          "[Added Lines]",
          "1834:           interpolation: \"a`\\u3000b\",",
          "1841:           interpolation: \"a`\\u3000b`\\u3000c\",",
          "1848:           interpolation: \"a`\\u3000\",",
          "1855:           interpolation: \"`\\u3000a\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1845:       {",
          "1846:         input: \"a\\uFEFFb\",",
          "1847:         expected: {",
          "1849:           noInterpolation: \"a\\uFEFFb\",",
          "1850:         },",
          "1851:       },",
          "1852:       {",
          "1853:         input: \"a\\uFEFFb\\uFEFFc\",",
          "1854:         expected: {",
          "1856:           noInterpolation: \"a\\uFEFFb\\uFEFFc\",",
          "1857:         },",
          "1858:       },",
          "1859:       {",
          "1860:         input: \"a\\uFEFF\",",
          "1861:         expected: {",
          "1863:           noInterpolation: \"a\\uFEFF\",",
          "1864:         },",
          "1865:       },",
          "1866:       {",
          "1867:         input: \"\\uFEFFa\",",
          "1868:         expected: {",
          "1870:           noInterpolation: \"\\uFEFFa\",",
          "1871:         },",
          "1872:       },",
          "",
          "[Removed Lines]",
          "1848:           interpolation: \"a\\uFEFFb\",",
          "1855:           interpolation: \"a\\uFEFFb\\uFEFFc\",",
          "1862:           interpolation: \"a\\uFEFF\",",
          "1869:           interpolation: \"\\uFEFFa\",",
          "",
          "[Added Lines]",
          "1864:           interpolation: \"a`\\uFEFFb\",",
          "1871:           interpolation: \"a`\\uFEFFb`\\uFEFFc\",",
          "1878:           interpolation: \"a`\\uFEFF\",",
          "1885:           interpolation: \"`\\uFEFFa\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1931:       },",
          "1932:       {",
          "1933:         input: \"a @b\",",
          "1935:       },",
          "1936:       {",
          "1937:         input: \"a\\t@b\",",
          "1939:       },",
          "1940:       {",
          "1941:         input: \"a\\u0085@b\",",
          "1943:       },",
          "1944:     ],",
          "1945:     \"hashtags ('#')\": [",
          "",
          "[Removed Lines]",
          "1934:         expected: { interpolation: \"a `@b\", noInterpolation: \"a @b\" },",
          "1938:         expected: { interpolation: \"a\\t`@b\", noInterpolation: \"a\\t@b\" },",
          "1942:         expected: { interpolation: \"a\\u0085`@b\", noInterpolation: \"a\\u0085@b\" },",
          "",
          "[Added Lines]",
          "1950:         expected: { interpolation: \"a` `@b\", noInterpolation: \"a @b\" },",
          "1954:         expected: { interpolation: \"a`\\t`@b\", noInterpolation: \"a\\t@b\" },",
          "1958:         expected: {",
          "1959:           interpolation: \"a`\\u0085`@b\",",
          "1960:           noInterpolation: \"a\\u0085@b\",",
          "1961:         },",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1961:       },",
          "1962:       {",
          "1963:         input: \"a #b\",",
          "1965:       },",
          "1966:       {",
          "1967:         input: \"a\\t#b\",",
          "1969:       },",
          "1970:       {",
          "1971:         input: \"a\\u0085#b\",",
          "1973:       },",
          "1974:     ],",
          "1975:     \"carets ('^')\": [",
          "",
          "[Removed Lines]",
          "1964:         expected: { interpolation: \"a `#b\", noInterpolation: \"a #b\" },",
          "1968:         expected: { interpolation: \"a\\t`#b\", noInterpolation: \"a\\t#b\" },",
          "1972:         expected: { interpolation: \"a\\u0085`#b\", noInterpolation: \"a\\u0085#b\" },",
          "",
          "[Added Lines]",
          "1983:         expected: { interpolation: \"a` `#b\", noInterpolation: \"a #b\" },",
          "1987:         expected: { interpolation: \"a`\\t`#b\", noInterpolation: \"a\\t#b\" },",
          "1991:         expected: {",
          "1992:           interpolation: \"a`\\u0085`#b\",",
          "1993:           noInterpolation: \"a\\u0085#b\",",
          "1994:         },",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2021:       },",
          "2022:       {",
          "2023:         input: \"a -b\",",
          "2025:       },",
          "2026:       {",
          "2027:         input: \"a\\t-b\",",
          "2029:       },",
          "2030:       {",
          "2031:         input: \"a\\u0085-b\",",
          "2033:       },",
          "2034:     ],",
          "2035:     \"colons (':')\": [",
          "",
          "[Removed Lines]",
          "2024:         expected: { interpolation: \"a `-b\", noInterpolation: \"a -b\" },",
          "2028:         expected: { interpolation: \"a\\t`-b\", noInterpolation: \"a\\t-b\" },",
          "2032:         expected: { interpolation: \"a\\u0085`-b\", noInterpolation: \"a\\u0085-b\" },",
          "",
          "[Added Lines]",
          "2046:         expected: { interpolation: \"a` `-b\", noInterpolation: \"a -b\" },",
          "2050:         expected: { interpolation: \"a`\\t`-b\", noInterpolation: \"a\\t-b\" },",
          "2054:         expected: {",
          "2055:           interpolation: \"a`\\u0085`-b\",",
          "2056:           noInterpolation: \"a\\u0085-b\",",
          "2057:         },",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2047:       },",
          "2048:       {",
          "2049:         input: \"a :b\",",
          "2051:       },",
          "2052:       {",
          "2053:         input: \"a\\t:b\",",
          "2055:       },",
          "2056:       {",
          "2057:         input: \"a\\u0085:b\",",
          "2059:       },",
          "2060:     ],",
          "2061:     \"semicolons (';')\": [",
          "",
          "[Removed Lines]",
          "2050:         expected: { interpolation: \"a `:b\", noInterpolation: \"a :b\" },",
          "2054:         expected: { interpolation: \"a\\t`:b\", noInterpolation: \"a\\t:b\" },",
          "2058:         expected: { interpolation: \"a\\u0085`:b\", noInterpolation: \"a\\u0085:b\" },",
          "",
          "[Added Lines]",
          "2075:         expected: { interpolation: \"a` `:b\", noInterpolation: \"a :b\" },",
          "2079:         expected: { interpolation: \"a`\\t`:b\", noInterpolation: \"a\\t:b\" },",
          "2083:         expected: {",
          "2084:           interpolation: \"a`\\u0085`:b\",",
          "2085:           noInterpolation: \"a\\u0085:b\",",
          "2086:         },",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2145:       },",
          "2146:       {",
          "2147:         input: \"a [b\",",
          "2149:       },",
          "2150:       {",
          "2151:         input: \"a ]b\",",
          "2153:       },",
          "2154:       {",
          "2155:         input: \"a [b]\",",
          "2157:       },",
          "2158:       {",
          "2159:         input: \"a\\t[b\",",
          "2161:       },",
          "2162:       {",
          "2163:         input: \"a\\t]b\",",
          "2165:       },",
          "2166:       {",
          "2167:         input: \"a\\t[b]\",",
          "2169:       },",
          "2170:       {",
          "2171:         input: \"a\\u0085[b\",",
          "2173:       },",
          "2174:       {",
          "2175:         input: \"a\\u0085]b\",",
          "2177:       },",
          "2178:       {",
          "2179:         input: \"a\\u0085[b]\",",
          "2180:         expected: {",
          "2182:           noInterpolation: \"a\\u0085[b]\",",
          "2183:         },",
          "2184:       },",
          "",
          "[Removed Lines]",
          "2148:         expected: { interpolation: \"a [b\", noInterpolation: \"a [b\" },",
          "2152:         expected: { interpolation: \"a `]b\", noInterpolation: \"a ]b\" },",
          "2156:         expected: { interpolation: \"a [b]\", noInterpolation: \"a [b]\" },",
          "2160:         expected: { interpolation: \"a\\t[b\", noInterpolation: \"a\\t[b\" },",
          "2164:         expected: { interpolation: \"a\\t`]b\", noInterpolation: \"a\\t]b\" },",
          "2168:         expected: { interpolation: \"a\\t[b]\", noInterpolation: \"a\\t[b]\" },",
          "2172:         expected: { interpolation: \"a\\u0085[b\", noInterpolation: \"a\\u0085[b\" },",
          "2176:         expected: { interpolation: \"a\\u0085`]b\", noInterpolation: \"a\\u0085]b\" },",
          "2181:           interpolation: \"a\\u0085[b]\",",
          "",
          "[Added Lines]",
          "2176:         expected: { interpolation: \"a` [b\", noInterpolation: \"a [b\" },",
          "2180:         expected: { interpolation: \"a` `]b\", noInterpolation: \"a ]b\" },",
          "2184:         expected: { interpolation: \"a` [b]\", noInterpolation: \"a [b]\" },",
          "2188:         expected: { interpolation: \"a`\\t[b\", noInterpolation: \"a\\t[b\" },",
          "2192:         expected: { interpolation: \"a`\\t`]b\", noInterpolation: \"a\\t]b\" },",
          "2196:         expected: { interpolation: \"a`\\t[b]\", noInterpolation: \"a\\t[b]\" },",
          "2200:         expected: { interpolation: \"a`\\u0085[b\", noInterpolation: \"a\\u0085[b\" },",
          "2204:         expected: {",
          "2205:           interpolation: \"a`\\u0085`]b\",",
          "2206:           noInterpolation: \"a\\u0085]b\",",
          "2207:         },",
          "2212:           interpolation: \"a`\\u0085[b]\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2264:       },",
          "2265:       {",
          "2266:         input: \"a <b\",",
          "2268:       },",
          "2269:       {",
          "2270:         input: \"a >b\",",
          "2272:       },",
          "2273:       {",
          "2274:         input: \"a 1>b\",",
          "2276:       },",
          "2277:       {",
          "2278:         input: \"a 2>b\",",
          "2280:       },",
          "2281:       {",
          "2282:         input: \"a 3>b\",",
          "2284:       },",
          "2285:       {",
          "2286:         input: \"a 4>b\",",
          "2288:       },",
          "2289:       {",
          "2290:         input: \"a 5>b\",",
          "2292:       },",
          "2293:       {",
          "2294:         input: \"a 6>b\",",
          "2296:       },",
          "2297:       {",
          "2298:         input: \"a *>b\",",
          "2300:       },",
          "2301:       {",
          "2302:         input: \"a\\t<b\",",
          "2304:       },",
          "2305:       {",
          "2306:         input: \"a\\t>b\",",
          "2308:       },",
          "2309:       {",
          "2310:         input: \"a\\t1>b\",",
          "2312:       },",
          "2313:       {",
          "2314:         input: \"a\\t2>b\",",
          "2316:       },",
          "2317:       {",
          "2318:         input: \"a\\t3>b\",",
          "2320:       },",
          "2321:       {",
          "2322:         input: \"a\\t4>b\",",
          "2324:       },",
          "2325:       {",
          "2326:         input: \"a\\t5>b\",",
          "2328:       },",
          "2329:       {",
          "2330:         input: \"a\\t6>b\",",
          "2332:       },",
          "2333:       {",
          "2334:         input: \"a\\t*>b\",",
          "2336:       },",
          "2337:       {",
          "2338:         input: \"a\\u0085<b\",",
          "2340:       },",
          "2341:       {",
          "2342:         input: \"a\\u0085>b\",",
          "2344:       },",
          "2345:       {",
          "2346:         input: \"a\\u00851>b\",",
          "2347:         expected: {",
          "2349:           noInterpolation: \"a\\u00851>b\",",
          "2350:         },",
          "2351:       },",
          "2352:       {",
          "2353:         input: \"a\\u00852>b\",",
          "2354:         expected: {",
          "2356:           noInterpolation: \"a\\u00852>b\",",
          "2357:         },",
          "2358:       },",
          "2359:       {",
          "2360:         input: \"a\\u00853>b\",",
          "2361:         expected: {",
          "2363:           noInterpolation: \"a\\u00853>b\",",
          "2364:         },",
          "2365:       },",
          "2366:       {",
          "2367:         input: \"a\\u00854>b\",",
          "2368:         expected: {",
          "2370:           noInterpolation: \"a\\u00854>b\",",
          "2371:         },",
          "2372:       },",
          "2373:       {",
          "2374:         input: \"a\\u00855>b\",",
          "2375:         expected: {",
          "2377:           noInterpolation: \"a\\u00855>b\",",
          "2378:         },",
          "2379:       },",
          "2380:       {",
          "2381:         input: \"a\\u00856>b\",",
          "2382:         expected: {",
          "2384:           noInterpolation: \"a\\u00856>b\",",
          "2385:         },",
          "2386:       },",
          "2387:       {",
          "2388:         input: \"a\\u0085*>b\",",
          "2389:         expected: {",
          "2391:           noInterpolation: \"a\\u0085*>b\",",
          "2392:         },",
          "2393:       },",
          "",
          "[Removed Lines]",
          "2267:         expected: { interpolation: \"a `<b\", noInterpolation: \"a <b\" },",
          "2271:         expected: { interpolation: \"a `>b\", noInterpolation: \"a >b\" },",
          "2275:         expected: { interpolation: \"a 1`>b\", noInterpolation: \"a 1>b\" },",
          "2279:         expected: { interpolation: \"a 2`>b\", noInterpolation: \"a 2>b\" },",
          "2283:         expected: { interpolation: \"a 3`>b\", noInterpolation: \"a 3>b\" },",
          "2287:         expected: { interpolation: \"a 4`>b\", noInterpolation: \"a 4>b\" },",
          "2291:         expected: { interpolation: \"a 5`>b\", noInterpolation: \"a 5>b\" },",
          "2295:         expected: { interpolation: \"a 6`>b\", noInterpolation: \"a 6>b\" },",
          "2299:         expected: { interpolation: \"a *`>b\", noInterpolation: \"a *>b\" },",
          "2303:         expected: { interpolation: \"a\\t`<b\", noInterpolation: \"a\\t<b\" },",
          "2307:         expected: { interpolation: \"a\\t`>b\", noInterpolation: \"a\\t>b\" },",
          "2311:         expected: { interpolation: \"a\\t1`>b\", noInterpolation: \"a\\t1>b\" },",
          "2315:         expected: { interpolation: \"a\\t2`>b\", noInterpolation: \"a\\t2>b\" },",
          "2319:         expected: { interpolation: \"a\\t3`>b\", noInterpolation: \"a\\t3>b\" },",
          "2323:         expected: { interpolation: \"a\\t4`>b\", noInterpolation: \"a\\t4>b\" },",
          "2327:         expected: { interpolation: \"a\\t5`>b\", noInterpolation: \"a\\t5>b\" },",
          "2331:         expected: { interpolation: \"a\\t6`>b\", noInterpolation: \"a\\t6>b\" },",
          "2335:         expected: { interpolation: \"a\\t*`>b\", noInterpolation: \"a\\t*>b\" },",
          "2339:         expected: { interpolation: \"a\\u0085`<b\", noInterpolation: \"a\\u0085<b\" },",
          "2343:         expected: { interpolation: \"a\\u0085`>b\", noInterpolation: \"a\\u0085>b\" },",
          "2348:           interpolation: \"a\\u00851`>b\",",
          "2355:           interpolation: \"a\\u00852`>b\",",
          "2362:           interpolation: \"a\\u00853`>b\",",
          "2369:           interpolation: \"a\\u00854`>b\",",
          "2376:           interpolation: \"a\\u00855`>b\",",
          "2383:           interpolation: \"a\\u00856`>b\",",
          "2390:           interpolation: \"a\\u0085*`>b\",",
          "",
          "[Added Lines]",
          "2298:         expected: { interpolation: \"a` `<b\", noInterpolation: \"a <b\" },",
          "2302:         expected: { interpolation: \"a` `>b\", noInterpolation: \"a >b\" },",
          "2306:         expected: { interpolation: \"a` 1`>b\", noInterpolation: \"a 1>b\" },",
          "2310:         expected: { interpolation: \"a` 2`>b\", noInterpolation: \"a 2>b\" },",
          "2314:         expected: { interpolation: \"a` 3`>b\", noInterpolation: \"a 3>b\" },",
          "2318:         expected: { interpolation: \"a` 4`>b\", noInterpolation: \"a 4>b\" },",
          "2322:         expected: { interpolation: \"a` 5`>b\", noInterpolation: \"a 5>b\" },",
          "2326:         expected: { interpolation: \"a` 6`>b\", noInterpolation: \"a 6>b\" },",
          "2330:         expected: { interpolation: \"a` *`>b\", noInterpolation: \"a *>b\" },",
          "2334:         expected: { interpolation: \"a`\\t`<b\", noInterpolation: \"a\\t<b\" },",
          "2338:         expected: { interpolation: \"a`\\t`>b\", noInterpolation: \"a\\t>b\" },",
          "2342:         expected: { interpolation: \"a`\\t1`>b\", noInterpolation: \"a\\t1>b\" },",
          "2346:         expected: { interpolation: \"a`\\t2`>b\", noInterpolation: \"a\\t2>b\" },",
          "2350:         expected: { interpolation: \"a`\\t3`>b\", noInterpolation: \"a\\t3>b\" },",
          "2354:         expected: { interpolation: \"a`\\t4`>b\", noInterpolation: \"a\\t4>b\" },",
          "2358:         expected: { interpolation: \"a`\\t5`>b\", noInterpolation: \"a\\t5>b\" },",
          "2362:         expected: { interpolation: \"a`\\t6`>b\", noInterpolation: \"a\\t6>b\" },",
          "2366:         expected: { interpolation: \"a`\\t*`>b\", noInterpolation: \"a\\t*>b\" },",
          "2370:         expected: {",
          "2371:           interpolation: \"a`\\u0085`<b\",",
          "2372:           noInterpolation: \"a\\u0085<b\",",
          "2373:         },",
          "2377:         expected: {",
          "2378:           interpolation: \"a`\\u0085`>b\",",
          "2379:           noInterpolation: \"a\\u0085>b\",",
          "2380:         },",
          "2385:           interpolation: \"a`\\u00851`>b\",",
          "2392:           interpolation: \"a`\\u00852`>b\",",
          "2399:           interpolation: \"a`\\u00853`>b\",",
          "2406:           interpolation: \"a`\\u00854`>b\",",
          "2413:           interpolation: \"a`\\u00855`>b\",",
          "2420:           interpolation: \"a`\\u00856`>b\",",
          "2427:           interpolation: \"a`\\u0085*`>b\",",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   if (normalizeWhitespace) {",
          "59:     if (isShellPowerShell(shell)) {",
          "61:     } else if (isShellCmd(shell)) {",
          "62:       arg = arg.replace(/[\\t\\n\\r ]+/gu, \" \");",
          "63:     } else {",
          "",
          "[Removed Lines]",
          "60:       arg = arg.replace(/\\r(?!\\n)/gu, \"\").replace(/[\\s\\u0085]+/gu, \" \");",
          "",
          "[Added Lines]",
          "60:       arg = arg.replace(/\\r(?!\\n)/gu, \"\").replace(/\\r?\\n|\\r/gu, \" \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     if (isShellPowerShell(shell)) {",
          "73:     } else if (isShellCmd(shell)) {",
          "74:       arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");",
          "75:     }",
          "",
          "[Removed Lines]",
          "72:       arg = arg.replace(/^[\\s\\u0085]+|(?<![\\s\\u0085])[\\s\\u0085]+$/gu, \"\");",
          "",
          "[Added Lines]",
          "72:       arg = arg.replace(/^[\\s\\u0085]+/gu, \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:       if (",
          "137:       ) {",
          "140:         arg = arg.replace(/\"/gu, `\"\"`);",
          "",
          "[Removed Lines]",
          "133:         /[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(",
          "134:           arg",
          "135:         ) &&",
          "136:         quoted",
          "",
          "[Added Lines]",
          "133:         (quoted &&",
          "134:           /[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(",
          "135:             arg",
          "136:           )) ||",
          "137:         (!quoted &&",
          "138:           /(?<!^)[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(",
          "139:             arg.replace(/^[\\s\\0\\u0008\\u001B\\u0085\\u009B]+/gu, \"\")",
          "140:           ))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1f31ccc612cc6bb883958cdec72b386af2894f6",
      "candidate_info": {
        "commit_hash": "d1f31ccc612cc6bb883958cdec72b386af2894f6",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/d1f31ccc612cc6bb883958cdec72b386af2894f6",
        "files": [
          "index.js",
          "rollup.config.js",
          "src/constants.js",
          "src/main.js",
          "src/platforms.js",
          "src/unix.js",
          "src/win.js",
          "test/bench.js",
          "test/common.js",
          "test/constants.test.js",
          "test/index.test.js",
          "test/main.prop.js",
          "test/main.test.js",
          "test/platforms.test.js",
          "test/unix.prop.js",
          "test/unix.test.js",
          "test/win.prop.js",
          "test/win.test.js"
        ],
        "message": "Refactor codebase for better scalability (#161)\n\nRefactor the codebase to make it easier to scale w.r.t. new platforms\nand new shells. The main module now accepts a set of functions that,\ndepending on the platform, can be used to escape an argument. As such\nboth the main module and the per-platform modules (unix.js and win.js)\nhave been heavily refactored.",
        "before_after_code_files": [
          "index.js||index.js",
          "rollup.config.js||rollup.config.js",
          "src/constants.js||src/constants.js",
          "src/main.js||src/main.js",
          "src/platforms.js||src/platforms.js",
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/bench.js||test/bench.js",
          "test/common.js||test/common.js",
          "test/constants.test.js||test/constants.test.js",
          "test/index.test.js||test/index.test.js",
          "test/main.prop.js||test/main.prop.js",
          "test/main.test.js||test/main.test.js",
          "test/platforms.test.js||test/platforms.test.js",
          "test/unix.prop.js||test/unix.prop.js",
          "test/unix.test.js||test/unix.test.js",
          "test/win.prop.js||test/win.prop.js",
          "test/win.test.js||test/win.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import os from \"os\";",
          "17: import process from \"process\";",
          "",
          "[Removed Lines]",
          "19: import * as main from \"./src/main.js\";",
          "",
          "[Added Lines]",
          "19: import { escapeShellArg, quoteShellArg } from \"./src/main.js\";",
          "20: import { getHelpersByPlatform } from \"./src/platforms.js\";",
          "27: function getPlatformHelpers() {",
          "28:   const platform = os.platform();",
          "29:   const helpers = getHelpersByPlatform(platform);",
          "30:   return helpers;",
          "31: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: export function escape(arg, options = {}) {",
          "45: }",
          "",
          "[Removed Lines]",
          "35:   const { interpolation, shell } = options;",
          "36:   const env = process.env;",
          "37:   const platform = os.platform();",
          "38:   return main.escapeShellArgByPlatform(",
          "39:     arg,",
          "40:     platform,",
          "41:     env,",
          "42:     shell,",
          "43:     interpolation",
          "44:   );",
          "",
          "[Added Lines]",
          "47:   const helpers = getPlatformHelpers();",
          "48:   return escapeShellArg({ arg, options, process }, helpers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: export function escapeAll(args, options = {}) {",
          "63:   if (!Array.isArray(args)) args = [args];",
          "81: }",
          "",
          "[Removed Lines]",
          "65:   const { interpolation, shell } = options;",
          "66:   const env = process.env;",
          "67:   const platform = os.platform();",
          "68:   const result = [];",
          "69:   for (const arg of args) {",
          "70:     const safeArg = main.escapeShellArgByPlatform(",
          "71:       arg,",
          "72:       platform,",
          "73:       env,",
          "74:       shell,",
          "75:       interpolation",
          "76:     );",
          "77:     result.push(safeArg);",
          "78:   }",
          "80:   return result;",
          "",
          "[Added Lines]",
          "69:   const helpers = getPlatformHelpers();",
          "70:   return args.map((arg) => escapeShellArg({ arg, options, process }, helpers));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96: export function quote(arg, options = {}) {",
          "101: }",
          "",
          "[Removed Lines]",
          "97:   const shell = options.shell;",
          "98:   const env = process.env;",
          "99:   const platform = os.platform();",
          "100:   return main.quoteShellArgByPlatform(arg, platform, env, shell);",
          "",
          "[Added Lines]",
          "87:   const helpers = getPlatformHelpers();",
          "88:   return quoteShellArg({ arg, options, process }, helpers);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117: export function quoteAll(args, options = {}) {",
          "118:   if (!Array.isArray(args)) args = [args];",
          "130: }",
          "",
          "[Removed Lines]",
          "120:   const shell = options.shell;",
          "121:   const env = process.env;",
          "122:   const platform = os.platform();",
          "123:   const result = [];",
          "124:   for (const arg of args) {",
          "125:     const safeArg = main.quoteShellArgByPlatform(arg, platform, env, shell);",
          "126:     result.push(safeArg);",
          "127:   }",
          "129:   return result;",
          "",
          "[Added Lines]",
          "108:   const helpers = getPlatformHelpers();",
          "109:   return args.map((arg) => quoteShellArg({ arg, options, process }, helpers));",
          "",
          "---------------"
        ],
        "rollup.config.js||rollup.config.js": [
          "File: rollup.config.js -> rollup.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     file: \"index.cjs\",",
          "5:     format: \"cjs\",",
          "6:   },",
          "8: };",
          "",
          "[Removed Lines]",
          "7:   external: [\"fs\", \"os\", \"process\", \"which\"],",
          "",
          "[Added Lines]",
          "7:   external: [\"fs\", \"os\", \"path\", \"path/win32\", \"process\", \"which\"],",
          "",
          "---------------"
        ],
        "src/constants.js||src/constants.js": [
          "File: src/constants.js -> src/constants.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import { resolveExecutable } from \"./executables.js\";",
          "",
          "[Removed Lines]",
          "8: import * as fs from \"fs\";",
          "9: import which from \"which\";",
          "11: import { typeError, win32 } from \"./constants.js\";",
          "13: import * as unix from \"./unix.js\";",
          "14: import * as win from \"./win.js\";",
          "",
          "[Added Lines]",
          "13: const typeError =",
          "14:   \"Shescape requires strings or values that can be converted into a string using .toString()\";",
          "19: const typeofFunction = \"function\";",
          "24: const typeofString = \"string\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     return false;",
          "25:   }",
          "28:     return false;",
          "29:   }",
          "31:   const str = value.toString();",
          "33: }",
          "65: }",
          "87:   if (!isStringable(arg)) {",
          "88:     throw new TypeError(typeError);",
          "89:   }",
          "92:   const argAsString = arg.toString();",
          "99: }",
          "122: }",
          "",
          "[Removed Lines]",
          "27:   if (typeof value.toString !== \"function\") {",
          "32:   return typeof str === \"string\";",
          "43: function getShell(platform, env, shell) {",
          "44:   if (shell === undefined) {",
          "45:     switch (platform) {",
          "46:       case win32:",
          "47:         shell = win.getDefaultShell(env);",
          "48:         break;",
          "49:       default:",
          "50:         shell = unix.getDefaultShell();",
          "51:         break;",
          "52:     }",
          "53:   }",
          "55:   return resolveExecutable(",
          "56:     {",
          "57:       executable: shell,",
          "58:     },",
          "59:     {",
          "60:       exists: fs.existsSync,",
          "61:       readlink: fs.readlinkSync,",
          "62:       which: which.sync,",
          "63:     }",
          "64:   );",
          "80: export function escapeShellArgByPlatform(",
          "81:   arg,",
          "82:   platform,",
          "83:   env,",
          "84:   shell,",
          "85:   interpolation = false",
          "86: ) {",
          "91:   shell = getShell(platform, env, shell);",
          "93:   switch (platform) {",
          "94:     case win32:",
          "95:       return win.escapeShellArg(argAsString, shell, interpolation);",
          "96:     default:",
          "97:       return unix.escapeShellArg(argAsString, shell, interpolation);",
          "98:   }",
          "114: export function quoteShellArgByPlatform(arg, platform, env, shell) {",
          "115:   const safeArg = escapeShellArgByPlatform(arg, platform, env, shell, false);",
          "116:   switch (platform) {",
          "117:     case win32:",
          "118:       return `\"${safeArg}\"`;",
          "119:     default:",
          "120:       return `'${safeArg}'`;",
          "121:   }",
          "",
          "[Added Lines]",
          "37:   if (typeof value.toString !== typeofFunction) {",
          "42:   return typeof str === typeofString;",
          "54: function mergeObjects(...objects) {",
          "55:   const baseObject = Object.create(null);",
          "56:   const mergedObjects = Object.assign(baseObject, ...objects);",
          "57:   return mergedObjects;",
          "75: function parseArgs(",
          "76:   { arg, options, process },",
          "77:   { getDefaultShell, getShellName }",
          "78: ) {",
          "79:   const env = process.env;",
          "80:   const interpolation = options.interpolation;",
          "81:   const shell =",
          "82:     options.shell === undefined ? getDefaultShell({ env }) : options.shell;",
          "84:   const shellName = getShellName({ shell }, { resolveExecutable });",
          "85:   return { arg, interpolation, shellName };",
          "86: }",
          "100: function escape({ arg, interpolation, shellName }, { getEscapeFunction }) {",
          "106:   const escape = getEscapeFunction(shellName);",
          "107:   const escapedArg = escape(argAsString, interpolation);",
          "108:   return escapedArg;",
          "123: function quote({ arg, shellName }, { getEscapeFunction, getQuoteFunction }) {",
          "124:   const escapedArg = escape(",
          "125:     { arg, interpolation: false, shellName },",
          "126:     { getEscapeFunction }",
          "127:   );",
          "128:   const quote = getQuoteFunction(shellName);",
          "129:   const escapedAndQuotedArg = quote(escapedArg);",
          "130:   return escapedAndQuotedArg;",
          "131: }",
          "149: export function escapeShellArg({ arg, options, process }, deps) {",
          "150:   options = mergeObjects({ interpolation: false }, options);",
          "151:   const escapeArgs = parseArgs({ arg, options, process }, deps);",
          "152:   return escape(escapeArgs, deps);",
          "153: }",
          "171: export function quoteShellArg(args, deps) {",
          "172:   const quoteArgs = parseArgs(args, deps);",
          "173:   return quote(quoteArgs, deps);",
          "",
          "---------------"
        ],
        "src/platforms.js||src/platforms.js": [
          "File: src/platforms.js -> src/platforms.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import * as unix from \"./unix.js\";",
          "8: import * as win from \"./win.js\";",
          "13: const win32 = \"win32\";",
          "21: export function getHelpersByPlatform(platform) {",
          "22:   switch (platform) {",
          "23:     case win32:",
          "24:       return win;",
          "25:     default:",
          "26:       return unix;",
          "27:   }",
          "28: }",
          "",
          "---------------"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     result = result",
          "42:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
          "43:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
          "44:   }",
          "46:   return result;",
          "47: }",
          "60:   if (interpolation) {",
          "62:   } else {",
          "64:   }",
          "65: }",
          "72: export function getDefaultShell() {",
          "73:   return \"/bin/sh\";",
          "74: }",
          "",
          "[Removed Lines]",
          "7: import { shellRequiredError } from \"./constants.js\";",
          "16: function escapeShellArgNoInterpolation(arg) {",
          "17:   return arg.replace(/\\u{0}/gu, \"\").replace(/'/g, `'\\\\''`);",
          "18: }",
          "28: function escapeShellArgWithInterpolation(arg, shell) {",
          "29:   let result = arg",
          "30:     .replace(/\\u{0}/gu, \"\")",
          "31:     .replace(/\\\\/g, \"\\\\\\\\\")",
          "32:     .replace(/^(~|#)/g, \"\\\\$1\")",
          "33:     .replace(/(\\*|\\?)/gu, \"\\\\$1\")",
          "34:     .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "35:     .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "36:     .replace(/(\"|'|`)/g, \"\\\\$1\");",
          "38:   if (shell.endsWith(\"zsh\")) {",
          "39:     result = result.replace(/^=/gu, \"\\\\=\").replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "40:   } else {",
          "57: export function escapeShellArg(arg, shell, interpolation) {",
          "58:   if (shell === undefined) throw new TypeError(shellRequiredError);",
          "61:     return escapeShellArgWithInterpolation(arg, shell);",
          "63:     return escapeShellArgNoInterpolation(arg);",
          "",
          "[Added Lines]",
          "7: import * as fs from \"fs\";",
          "8: import * as path from \"path\";",
          "9: import which from \"which\";",
          "14: const binBash = \"bash\";",
          "19: const binDash = \"dash\";",
          "24: const binZsh = \"zsh\";",
          "33: function escapeArgBash(arg, interpolation) {",
          "34:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "36:   if (interpolation) {",
          "38:       .replace(/\\\\/g, \"\\\\\\\\\")",
          "39:       .replace(/^(~|#)/g, \"\\\\$1\")",
          "40:       .replace(/(\\*|\\?)/gu, \"\\\\$1\")",
          "41:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "42:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "43:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
          "46:   } else {",
          "47:     result = result.replace(/'/g, `'\\\\''`);",
          "60: function escapeArgZsh(arg, interpolation) {",
          "61:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "64:     result = result",
          "65:       .replace(/\\\\/g, \"\\\\\\\\\")",
          "66:       .replace(/^(~|#)/g, \"\\\\$1\")",
          "67:       .replace(/(\\*|\\?)/gu, \"\\\\$1\")",
          "68:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "69:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "70:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
          "71:       .replace(/^=/gu, \"\\\\=\")",
          "72:       .replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "74:     result = result.replace(/'/g, `'\\\\''`);",
          "77:   return result;",
          "78: }",
          "86: function quoteArg(arg) {",
          "87:   return `'${arg}'`;",
          "88: }",
          "93: const escapeFunctionsByShell = new Map([",
          "94:   [binBash, escapeArgBash],",
          "95:   [binDash, escapeArgBash],",
          "96:   [binZsh, escapeArgZsh],",
          "97: ]);",
          "102: const quoteFunctionsByShell = new Map([",
          "103:   [binBash, quoteArg],",
          "104:   [binDash, quoteArg],",
          "105:   [binZsh, quoteArg],",
          "106: ]);",
          "114: function getBasename(fullPath) {",
          "115:   return path.basename(fullPath);",
          "136: export function getEscapeFunction(shellName) {",
          "137:   return escapeFunctionsByShell.get(shellName) || null;",
          "138: }",
          "146: export function getQuoteFunction(shellName) {",
          "147:   return quoteFunctionsByShell.get(shellName) || null;",
          "148: }",
          "159: export function getShellName({ shell }, { resolveExecutable }) {",
          "160:   shell = resolveExecutable(",
          "161:     { executable: shell },",
          "162:     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }",
          "163:   );",
          "165:   const shellName = getBasename(shell);",
          "166:   if (getEscapeFunction(shellName) === null) {",
          "167:     return binBash;",
          "168:   }",
          "170:   return shellName;",
          "171: }",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   let result = arg.replace(/\\u{0}/gu, \"\");",
          "19:   if (interpolation) {",
          "",
          "[Removed Lines]",
          "7: import { regexpPowerShell, shellRequiredError } from \"./constants.js\";",
          "16: function escapeShellArgsForCmd(arg, interpolation) {",
          "",
          "[Added Lines]",
          "7: import * as fs from \"fs\";",
          "8: import * as path from \"path/win32\";",
          "9: import which from \"which\";",
          "14: const binCmd = \"cmd.exe\";",
          "19: const binPowerShell = \"powershell.exe\";",
          "28: function escapeArgCmd(arg, interpolation) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: }",
          "40:   let result = arg",
          "41:     .replace(/\\u{0}/gu, \"\")",
          "42:     .replace(/`/g, \"``\")",
          "",
          "[Removed Lines]",
          "39: function escapeShellArgsForPowerShell(arg, interpolation) {",
          "",
          "[Added Lines]",
          "51: function escapeArgPowerShell(arg, interpolation) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: }",
          "76: }",
          "87:   if (Object.prototype.hasOwnProperty.call(env, \"ComSpec\")) {",
          "88:     return env.ComSpec;",
          "89:   }",
          "92: }",
          "",
          "[Removed Lines]",
          "68: export function escapeShellArg(arg, shell, interpolation) {",
          "69:   if (shell === undefined) throw new TypeError(shellRequiredError);",
          "71:   if (regexpPowerShell.test(shell)) {",
          "72:     return escapeShellArgsForPowerShell(arg, interpolation);",
          "73:   } else {",
          "74:     return escapeShellArgsForCmd(arg, interpolation);",
          "75:   }",
          "85: export function getDefaultShell(env) {",
          "91:   return \"cmd.exe\";",
          "",
          "[Added Lines]",
          "78: function quoteArg(arg) {",
          "79:   return `\"${arg}\"`;",
          "80: }",
          "85: const escapeFunctionsByShell = new Map([",
          "86:   [binCmd, escapeArgCmd],",
          "87:   [binPowerShell, escapeArgPowerShell],",
          "88: ]);",
          "93: const quoteFunctionsByShell = new Map([",
          "94:   [binCmd, quoteArg],",
          "95:   [binPowerShell, quoteArg],",
          "96: ]);",
          "104: function getBasename(fullPath) {",
          "105:   return path.basename(fullPath);",
          "119: export function getDefaultShell({ env }) {",
          "124:   return binCmd;",
          "125: }",
          "133: export function getEscapeFunction(shellName) {",
          "134:   return escapeFunctionsByShell.get(shellName) || null;",
          "135: }",
          "143: export function getQuoteFunction(shellName) {",
          "144:   return quoteFunctionsByShell.get(shellName) || null;",
          "145: }",
          "156: export function getShellName({ shell }, { resolveExecutable }) {",
          "157:   shell = resolveExecutable(",
          "158:     { executable: shell },",
          "159:     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }",
          "160:   );",
          "162:   const shellName = getBasename(shell);",
          "163:   if (getEscapeFunction(shellName) === null) {",
          "164:     return binCmd;",
          "165:   }",
          "167:   return shellName;",
          "",
          "---------------"
        ],
        "test/bench.js||test/bench.js": [
          "File: test/bench.js -> test/bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import Benchmark from \"benchmark\";",
          "5: import * as unix from \"../src/unix.js\";",
          "6: import * as win from \"../src/win.js\";",
          "",
          "[Removed Lines]",
          "3: import { binSh, binBash, cmdExe, powershellExe } from \"./common.js\";",
          "",
          "[Added Lines]",
          "3: import { binBash, binCmd, binPowerShell, binZsh } from \"./common.js\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   },",
          "16: });",
          "20: });",
          "24: });",
          "28: });",
          "32: });",
          "34: suite.run();",
          "",
          "[Removed Lines]",
          "18: suite.add(`unix, ${binSh}, ${sampleArg}`, () => {",
          "19:   unix.escapeShellArg(sampleArg, binSh);",
          "22: suite.add(`unix, ${binBash}, ${sampleArg}`, () => {",
          "23:   unix.escapeShellArg(sampleArg, binBash);",
          "26: suite.add(`win, ${cmdExe}, ${sampleArg}`, () => {",
          "27:   win.escapeShellArg(sampleArg, cmdExe);",
          "30: suite.add(`win, ${powershellExe}, ${sampleArg}`, () => {",
          "31:   win.escapeShellArg(sampleArg, powershellExe);",
          "",
          "[Added Lines]",
          "18: suite.add(`unix, ${binBash}, ${sampleArg}`, () => {",
          "19:   const escapeShellArg = unix.getEscapeFunction(binBash);",
          "20:   escapeShellArg(sampleArg);",
          "23: suite.add(`unix, ${binZsh}, ${sampleArg}`, () => {",
          "24:   const escapeShellArg = unix.getEscapeFunction(binZsh);",
          "25:   escapeShellArg(sampleArg);",
          "28: suite.add(`win, ${binCmd}, ${sampleArg}`, () => {",
          "29:   const escapeShellArg = win.getEscapeFunction(binCmd);",
          "30:   escapeShellArg(sampleArg);",
          "33: suite.add(`win, ${binPowerShell}, ${sampleArg}`, () => {",
          "34:   const escapeShellArg = win.getEscapeFunction(binPowerShell);",
          "35:   escapeShellArg(sampleArg);",
          "",
          "---------------"
        ],
        "test/common.js||test/common.js": [
          "File: test/common.js -> test/common.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export const nullChar = String.fromCharCode(0);",
          "",
          "[Removed Lines]",
          "5: export const unixPlatform = \"linux\";",
          "7: export const binSh = \"/bin/sh\";",
          "8: export const binBash = \"/bin/bash\";",
          "9: export const binZsh = \"/bin/zsh\";",
          "10: export const unixShells = [undefined, binSh, binBash, binZsh];",
          "12: export const unixEnv = {};",
          "15: export const winPlatform = \"win32\";",
          "17: export const cmdExe = \"cmd.exe\";",
          "18: export const powershellExe = \"powershell.exe\";",
          "19: export const winShells = [undefined, cmdExe, powershellExe];",
          "21: export const ComSpec = \"C:\\\\Windows\\\\System32\\\\cmd.exe\";",
          "23: export const winEnv = { ComSpec };",
          "26: export const isDefined = (x) => x !== undefined;",
          "",
          "[Added Lines]",
          "5: export const binBash = \"bash\";",
          "6: export const binDash = \"dash\";",
          "7: export const binZsh = \"zsh\";",
          "10: export const binCmd = \"cmd.exe\";",
          "11: export const binPowerShell = \"powershell.exe\";",
          "",
          "---------------"
        ],
        "test/constants.test.js||test/constants.test.js": [
          "File: test/constants.test.js -> test/constants.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index.test.js||test/index.test.js": [
          "File: test/index.test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import * as shescape from \"../index.js\";",
          "12: import * as main from \"../src/main.js\";",
          "14: describe(\"index.js\", function () {",
          "16:   let platform;",
          "18:   before(function () {",
          "20:     platform = os.platform();",
          "21:   });",
          "23:   describe(\"::escape\", function () {",
          "24:     it(\"calls main for the current OS\", function () {",
          "25:       const input = \"Hello world!\";",
          "28:       const output = shescape.escape(input);",
          "29:       assert.strictEqual(output, expected);",
          "",
          "[Removed Lines]",
          "15:   let env;",
          "19:     env = process.env;",
          "26:       const expected = main.escapeShellArgByPlatform(input, platform, env);",
          "",
          "[Added Lines]",
          "13: import { getHelpersByPlatform } from \"../src/platforms.js\";",
          "16:   let options;",
          "19:   const getExpectedEscaped = (arg) =>",
          "20:     main.escapeShellArg(",
          "21:       { arg, options, process },",
          "22:       getHelpersByPlatform(platform)",
          "23:     );",
          "24:   const getExpectedQuoted = (arg) =>",
          "25:     main.quoteShellArg(",
          "26:       { arg, options, process },",
          "27:       getHelpersByPlatform(platform)",
          "28:     );",
          "31:     options = {};",
          "38:       const expected = getExpectedEscaped(input);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:       const input1 = \"foo'\";",
          "36:       const input2 = \"'bar\";",
          "40:       const expected = [output1, output2];",
          "42:       const inputs = [input1, input2];",
          "",
          "[Removed Lines]",
          "38:       const output1 = main.escapeShellArgByPlatform(input1, platform, env);",
          "39:       const output2 = main.escapeShellArgByPlatform(input2, platform, env);",
          "",
          "[Added Lines]",
          "50:       const output1 = getExpectedEscaped(input1);",
          "51:       const output2 = getExpectedEscaped(input2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     it(\"gracefully handles inputs that are not an array\", function () {",
          "48:       const input = \"Hello world!\";",
          "51:       const output = shescape.escapeAll(input);",
          "52:       assert.deepStrictEqual(output, [expected]);",
          "",
          "[Removed Lines]",
          "49:       const expected = main.escapeShellArgByPlatform(input, platform, env);",
          "",
          "[Added Lines]",
          "61:       const expected = main.escapeShellArg(",
          "62:         { arg: input, options, platform, process },",
          "63:         getHelpersByPlatform(platform)",
          "64:       );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56:   describe(\"::quote\", function () {",
          "57:     it(\"quote calls main for the current OS\", function () {",
          "58:       const input = \"Hello world!\";",
          "61:       const output = shescape.quote(input);",
          "62:       assert.strictEqual(output, expected);",
          "",
          "[Removed Lines]",
          "59:       const expected = main.quoteShellArgByPlatform(input, platform, env);",
          "",
          "[Added Lines]",
          "74:       const expected = getExpectedQuoted(input);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "68:       const input1 = \"foo\";",
          "69:       const input2 = \"bar\";",
          "73:       const expected = [output1, output2];",
          "75:       const inputs = [input1, input2];",
          "",
          "[Removed Lines]",
          "71:       const output1 = main.quoteShellArgByPlatform(input1, platform, env);",
          "72:       const output2 = main.quoteShellArgByPlatform(input2, platform, env);",
          "",
          "[Added Lines]",
          "86:       const output1 = getExpectedQuoted(input1);",
          "87:       const output2 = getExpectedQuoted(input2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "80:     it(\"gracefully handles inputs that are not an array\", function () {",
          "81:       const input = \"Hello world!\";",
          "84:       const output = shescape.quoteAll(input);",
          "85:       assert.deepStrictEqual(output, [expected]);",
          "",
          "[Removed Lines]",
          "82:       const expected = main.quoteShellArgByPlatform(input, platform, env);",
          "",
          "[Added Lines]",
          "97:       const expected = getExpectedQuoted(input);",
          "",
          "---------------"
        ],
        "test/main.prop.js||test/main.prop.js": [
          "File: test/main.prop.js -> test/main.prop.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/main.test.js||test/main.test.js": [
          "File: test/main.test.js -> test/main.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import assert from \"assert\";",
          "27: describe(\"main.js\", function () {",
          "88:         }",
          "113:       });",
          "127:           });",
          "199:               );",
          "202:           }",
          "233:       });",
          "268:           }",
          "291:           }",
          "320:             name: \"TypeError\",",
          "321:             message: typeError,",
          "322:           });",
          "340:             name: \"TypeError\",",
          "341:             message: typeError,",
          "344:       });",
          "345:     });",
          "388:       });",
          "425:     });",
          "426:   });",
          "427: });",
          "",
          "[Removed Lines]",
          "9: import {",
          "10:   isDefined,",
          "11:   unixEnv,",
          "12:   unixPlatform,",
          "13:   unixShells,",
          "14:   winEnv,",
          "15:   winPlatform,",
          "16:   winShells,",
          "17: } from \"./common.js\";",
          "19: import { typeError } from \"../src/constants.js\";",
          "20: import {",
          "21:   escapeShellArgByPlatform,",
          "22:   quoteShellArgByPlatform,",
          "23: } from \"../src/main.js\";",
          "24: import * as unix from \"../src/unix.js\";",
          "25: import * as win from \"../src/win.js\";",
          "28:   const booleanInputs = [true, false];",
          "29:   const noToStringObject = { toString: null };",
          "30:   const toStringNotStringObject = { toString: () => null };",
          "31:   const numericInputs = [42, 3.14];",
          "32:   const stringInputs = [",
          "33:     \"Hello world!\",",
          "34:     'foo \"bar\"',",
          "35:     \"foo 'bar'\",",
          "36:     \"Lorem`ipsum\",",
          "37:     \"dead$beef\",",
          "38:   ];",
          "39:   const undefinedValues = [undefined, null];",
          "41:   const allValidValues = [...stringInputs, ...booleanInputs, ...numericInputs];",
          "43:   describe(\"::escapeShellArgByPlatform\", function () {",
          "44:     describe(\"unix\", function () {",
          "45:       const env = unixEnv;",
          "46:       const platform = unixPlatform;",
          "47:       const defaultShell = unix.getDefaultShell();",
          "49:       it(`calls the unix escape function, with interpolation`, function () {",
          "50:         this.timeout(5000);",
          "52:         for (const shell of unixShells) {",
          "53:           for (const input of stringInputs) {",
          "54:             const targetShell = shell || defaultShell;",
          "56:             const expected = unix.escapeShellArg(input, targetShell, true);",
          "58:             const output = escapeShellArgByPlatform(",
          "59:               input,",
          "60:               platform,",
          "61:               env,",
          "62:               shell,",
          "63:               true",
          "64:             );",
          "65:             assert.strictEqual(output, expected);",
          "66:           }",
          "67:         }",
          "68:       });",
          "70:       it(`calls the unix escape function, without interpolation`, function () {",
          "71:         this.timeout(5000);",
          "73:         for (const shell of unixShells) {",
          "74:           for (const input of stringInputs) {",
          "75:             const targetShell = shell || defaultShell;",
          "77:             const expected = unix.escapeShellArg(input, targetShell, false);",
          "79:             const output = escapeShellArgByPlatform(",
          "80:               input,",
          "81:               platform,",
          "82:               env,",
          "83:               shell,",
          "84:               false",
          "85:             );",
          "86:             assert.strictEqual(output, expected);",
          "87:           }",
          "91:         for (const shell of unixShells) {",
          "92:           for (const input of stringInputs) {",
          "93:             const targetShell = shell || defaultShell;",
          "95:             const expected = unix.escapeShellArg(input, targetShell, false);",
          "97:             const output = escapeShellArgByPlatform(",
          "98:               input,",
          "99:               platform,",
          "100:               env,",
          "101:               shell",
          "102:             );",
          "103:             assert.strictEqual(output, expected);",
          "104:           }",
          "105:         }",
          "106:       });",
          "108:       it(`works for boolean values`, function () {",
          "109:         for (const input of booleanInputs) {",
          "110:           const outputTrue = escapeShellArgByPlatform(input, platform, env);",
          "111:           assert.strictEqual(outputTrue, `${input}`);",
          "112:         }",
          "115:       it(`works for numeric values`, function () {",
          "116:         for (const input of numericInputs) {",
          "117:           const output = escapeShellArgByPlatform(input, platform, env);",
          "118:           assert.strictEqual(output, `${input}`);",
          "119:         }",
          "120:       });",
          "122:       it(`fails for undefined values`, function () {",
          "123:         for (const input of undefinedValues) {",
          "124:           assert.throws(() => escapeShellArgByPlatform(input, platform, env), {",
          "125:             name: \"TypeError\",",
          "126:             message: typeError,",
          "128:         }",
          "129:       });",
          "131:       it(`fails when toString is missing`, function () {",
          "132:         assert.throws(",
          "133:           () => escapeShellArgByPlatform(noToStringObject, platform, env),",
          "134:           {",
          "135:             name: \"TypeError\",",
          "136:             message: typeError,",
          "137:           }",
          "138:         );",
          "139:       });",
          "141:       it(`fails when toString does not return a string`, function () {",
          "142:         assert.throws(",
          "143:           () =>",
          "144:             escapeShellArgByPlatform(toStringNotStringObject, platform, env),",
          "145:           {",
          "146:             name: \"TypeError\",",
          "147:             message: typeError,",
          "148:           }",
          "149:         );",
          "150:       });",
          "151:     });",
          "153:     describe(\"win32\", function () {",
          "154:       const env = winEnv;",
          "155:       const platform = winPlatform;",
          "157:       it(`calls the windows escape function, with interpolation`, function () {",
          "158:         this.timeout(5000);",
          "160:         for (const ComSpec of winShells.filter(isDefined)) {",
          "161:           for (const shell of winShells) {",
          "162:             for (const input of stringInputs) {",
          "163:               const customEnv = { ...env, ComSpec };",
          "164:               const defaultShell = win.getDefaultShell(customEnv);",
          "165:               const targetShell = shell || defaultShell;",
          "167:               const expected = win.escapeShellArg(input, targetShell, true);",
          "169:               const output = escapeShellArgByPlatform(",
          "170:                 input,",
          "171:                 platform,",
          "172:                 customEnv,",
          "173:                 shell,",
          "174:                 true",
          "175:               );",
          "176:               assert.strictEqual(output, expected);",
          "177:             }",
          "178:           }",
          "179:         }",
          "180:       });",
          "182:       it(`calls the windows escape function, no interpolation`, function () {",
          "183:         this.timeout(5000);",
          "185:         for (const ComSpec of winShells.filter(isDefined)) {",
          "186:           for (const shell of winShells) {",
          "187:             for (const input of stringInputs) {",
          "188:               const customEnv = { ...env, ComSpec };",
          "189:               const defaultShell = win.getDefaultShell(customEnv);",
          "190:               const targetShell = shell || defaultShell;",
          "192:               const expected = win.escapeShellArg(input, targetShell, false);",
          "194:               const output = escapeShellArgByPlatform(",
          "195:                 input,",
          "196:                 platform,",
          "197:                 customEnv,",
          "198:                 shell",
          "200:               assert.strictEqual(output, expected);",
          "201:             }",
          "203:         }",
          "206:         for (const ComSpec of winShells.filter(isDefined)) {",
          "207:           for (const shell of winShells) {",
          "208:             for (const input of stringInputs) {",
          "209:               const customEnv = { ...env, ComSpec };",
          "210:               const defaultShell = win.getDefaultShell(customEnv);",
          "211:               const targetShell = shell || defaultShell;",
          "213:               const expected = win.escapeShellArg(input, targetShell, false);",
          "215:               const output = escapeShellArgByPlatform(",
          "216:                 input,",
          "217:                 platform,",
          "218:                 customEnv,",
          "219:                 shell,",
          "220:                 false",
          "221:               );",
          "222:               assert.strictEqual(output, expected);",
          "223:             }",
          "224:           }",
          "225:         }",
          "226:       });",
          "228:       it(`works for boolean values`, function () {",
          "229:         for (const input of booleanInputs) {",
          "230:           const outputTrue = escapeShellArgByPlatform(input, platform, env);",
          "231:           assert.strictEqual(outputTrue, `${input}`);",
          "232:         }",
          "235:       it(`works for numeric values`, function () {",
          "236:         for (const input of numericInputs) {",
          "237:           const output = escapeShellArgByPlatform(input, platform, env);",
          "238:           assert.strictEqual(output, `${input}`);",
          "239:         }",
          "240:       });",
          "242:       it(`fails for undefined values`, function () {",
          "243:         for (const input of undefinedValues) {",
          "244:           assert.throws(() => escapeShellArgByPlatform(input, platform, env), {",
          "245:             name: \"TypeError\",",
          "246:             message: typeError,",
          "247:           });",
          "248:         }",
          "249:       });",
          "251:       it(`fails when toString is missing`, function () {",
          "252:         assert.throws(",
          "253:           () => escapeShellArgByPlatform(noToStringObject, platform, env),",
          "254:           {",
          "255:             name: \"TypeError\",",
          "256:             message: typeError,",
          "257:           }",
          "258:         );",
          "259:       });",
          "261:       it(`fails when toString does not return a string`, function () {",
          "262:         assert.throws(",
          "263:           () =>",
          "264:             escapeShellArgByPlatform(toStringNotStringObject, platform, env),",
          "265:           {",
          "266:             name: \"TypeError\",",
          "267:             message: typeError,",
          "269:         );",
          "270:       });",
          "271:     });",
          "272:   });",
          "274:   describe(\"::quoteShellArgByPlatform\", function () {",
          "275:     describe(\"unix\", function () {",
          "276:       const env = unixEnv;",
          "277:       const platform = unixPlatform;",
          "278:       const defaultShell = unix.getDefaultShell();",
          "280:       it(`calls the unix escape function`, function () {",
          "281:         this.timeout(5000);",
          "283:         for (const shell of unixShells) {",
          "284:           for (const input of stringInputs) {",
          "285:             const targetShell = shell || defaultShell;",
          "287:             const expected = unix.escapeShellArg(input, targetShell);",
          "289:             const output = quoteShellArgByPlatform(input, platform, env, shell);",
          "290:             assert.strictEqual(output.slice(1, -1), expected);",
          "292:         }",
          "293:       });",
          "295:       it(`quotes with single quotes`, function () {",
          "296:         for (const input of allValidValues) {",
          "297:           const output = quoteShellArgByPlatform(input, platform, env);",
          "298:           assert(output.startsWith(\"'\"));",
          "299:           assert(output.endsWith(\"'\"));",
          "300:         }",
          "301:       });",
          "303:       it(`works for boolean values`, function () {",
          "304:         for (const input of booleanInputs) {",
          "305:           const outputTrue = quoteShellArgByPlatform(input, platform, env);",
          "306:           assert.strictEqual(outputTrue.slice(1, -1), `${input}`);",
          "307:         }",
          "308:       });",
          "310:       it(`works for numeric values`, function () {",
          "311:         for (const input of numericInputs) {",
          "312:           const output = quoteShellArgByPlatform(input, platform, env);",
          "313:           assert.strictEqual(output.slice(1, -1), `${input}`);",
          "314:         }",
          "315:       });",
          "317:       it(`fails for undefined values`, function () {",
          "318:         for (const input of undefinedValues) {",
          "319:           assert.throws(() => quoteShellArgByPlatform(input, platform, env), {",
          "323:         }",
          "324:       });",
          "326:       it(`fails when toString is missing`, function () {",
          "327:         assert.throws(",
          "328:           () => quoteShellArgByPlatform(noToStringObject, platform, env),",
          "329:           {",
          "330:             name: \"TypeError\",",
          "331:             message: typeError,",
          "332:           }",
          "333:         );",
          "334:       });",
          "336:       it(`fails when toString does not return a string`, function () {",
          "337:         assert.throws(",
          "338:           () => quoteShellArgByPlatform(toStringNotStringObject, platform, env),",
          "339:           {",
          "342:           }",
          "343:         );",
          "347:     describe(\"win32\", function () {",
          "348:       const env = winEnv;",
          "349:       const platform = winPlatform;",
          "351:       it(`calls the windows escape function`, function () {",
          "352:         this.timeout(5000);",
          "354:         for (const ComSpec of winShells.filter(isDefined)) {",
          "355:           for (const shell of winShells) {",
          "356:             for (const input of stringInputs) {",
          "357:               const customEnv = { ...env, ComSpec };",
          "358:               const defaultShell = win.getDefaultShell(customEnv);",
          "359:               const targetShell = shell || defaultShell;",
          "361:               const expected = win.escapeShellArg(input, targetShell);",
          "363:               const output = quoteShellArgByPlatform(",
          "364:                 input,",
          "365:                 platform,",
          "366:                 customEnv,",
          "367:                 shell",
          "368:               );",
          "369:               assert.strictEqual(output.slice(1, -1), expected);",
          "370:             }",
          "371:           }",
          "372:         }",
          "373:       });",
          "375:       it(`quotes with double quotes`, function () {",
          "376:         for (const input of allValidValues) {",
          "377:           const output = quoteShellArgByPlatform(input, platform, env);",
          "378:           assert(output.startsWith('\"'));",
          "379:           assert(output.endsWith('\"'));",
          "380:         }",
          "381:       });",
          "383:       it(`works for boolean values`, function () {",
          "384:         for (const input of booleanInputs) {",
          "385:           const outputTrue = quoteShellArgByPlatform(input, platform, env);",
          "386:           assert.strictEqual(outputTrue.slice(1, -1), `${input}`);",
          "387:         }",
          "390:       it(`works for numeric values`, function () {",
          "391:         for (const input of numericInputs) {",
          "392:           const output = quoteShellArgByPlatform(input, platform, env);",
          "393:           assert.strictEqual(output.slice(1, -1), `${input}`);",
          "394:         }",
          "395:       });",
          "397:       it(`fails for undefined values`, function () {",
          "398:         for (const input of undefinedValues) {",
          "399:           assert.throws(() => quoteShellArgByPlatform(input, platform, env), {",
          "400:             name: \"TypeError\",",
          "401:             message: typeError,",
          "402:           });",
          "403:         }",
          "404:       });",
          "406:       it(`fails when toString is missing`, function () {",
          "407:         assert.throws(",
          "408:           () => quoteShellArgByPlatform(noToStringObject, platform, env),",
          "409:           {",
          "410:             name: \"TypeError\",",
          "411:             message: typeError,",
          "412:           }",
          "413:         );",
          "414:       });",
          "416:       it(`fails when toString does not return a string`, function () {",
          "417:         assert.throws(",
          "418:           () => quoteShellArgByPlatform(toStringNotStringObject, platform, env),",
          "419:           {",
          "420:             name: \"TypeError\",",
          "421:             message: typeError,",
          "422:           }",
          "423:         );",
          "424:       });",
          "",
          "[Added Lines]",
          "8: import sinon from \"sinon\";",
          "10: import { resolveExecutable } from \"../src/executables.js\";",
          "11: import * as main from \"../src/main.js\";",
          "13: const booleanInputs = [true, false];",
          "14: const noToStringObject = { toString: null };",
          "15: const toStringNotStringObject = { toString: () => null };",
          "16: const numericInputs = [42, 3.14];",
          "17: const stringInputs = [",
          "18:   \"Hello world!\",",
          "19:   'foo \"bar\"',",
          "20:   \"foo 'bar'\",",
          "21:   \"Lorem'ipsum\",",
          "22:   \"dead$beef\",",
          "23: ];",
          "24: const undefinedValues = [undefined, null];",
          "27:   let getDefaultShell;",
          "28:   let getEscapeFunction;",
          "29:   let getQuoteFunction;",
          "30:   let getShellName;",
          "32:   let escapeFunction;",
          "33:   let quoteFunction;",
          "35:   before(function () {",
          "36:     getDefaultShell = sinon.stub();",
          "37:     getEscapeFunction = sinon.stub();",
          "38:     getQuoteFunction = sinon.stub();",
          "39:     getShellName = sinon.stub();",
          "41:     escapeFunction = sinon.stub();",
          "42:     quoteFunction = sinon.stub();",
          "43:   });",
          "45:   beforeEach(function () {",
          "46:     sinon.reset();",
          "48:     getEscapeFunction.returns(escapeFunction);",
          "49:     getQuoteFunction.returns(quoteFunction);",
          "50:   });",
          "52:   let arg;",
          "53:   let options, interpolation, shell;",
          "54:   let process, env;",
          "56:   beforeEach(function () {",
          "57:     arg = \"arg\";",
          "58:     env = { foo: \"bar\" };",
          "59:     interpolation = false;",
          "60:     shell = \"shell\";",
          "62:     options = { interpolation, shell };",
          "63:     process = { env };",
          "64:   });",
          "66:   const invokeEscapeShellArg = () =>",
          "67:     main.escapeShellArg(",
          "68:       { arg, options, process },",
          "69:       { getDefaultShell, getEscapeFunction, getShellName }",
          "70:     );",
          "72:   const invokeQuoteShellArg = () =>",
          "73:     main.quoteShellArg(",
          "74:       { arg, options, process },",
          "75:       { getDefaultShell, getEscapeFunction, getQuoteFunction, getShellName }",
          "76:     );",
          "78:   for (const functionName of [\"escapeShellArg\", \"quoteShellArg\"]) {",
          "79:     describe(`::${functionName}, common behaviour`, function () {",
          "80:       let invoke;",
          "82:       before(function () {",
          "83:         if (functionName == \"escapeShellArg\") {",
          "84:           invoke = invokeEscapeShellArg;",
          "85:         } else {",
          "86:           invoke = invokeQuoteShellArg;",
          "88:       });",
          "90:       it(\"uses the shell name to get the escape function\", function () {",
          "91:         const shellName = \"foobar\";",
          "92:         getShellName.returns(shellName);",
          "94:         invoke();",
          "96:         assert.equal(getEscapeFunction.callCount, 1);",
          "97:         assert.ok(getEscapeFunction.alwaysCalledWithExactly(shellName));",
          "100:       describe(\"the shell name\", function () {",
          "101:         describe(\"no shell is provided\", function () {",
          "102:           beforeEach(function () {",
          "103:             delete options.shell;",
          "104:           });",
          "106:           it(\"gets the default shell only once\", function () {",
          "107:             invoke();",
          "108:             assert.equal(getDefaultShell.callCount, 1);",
          "111:           it(\"uses the provides environment variables\", function () {",
          "112:             env = {",
          "113:               foo: \"bar\",",
          "114:               hello: \"world!\",",
          "115:             };",
          "116:             process.env = env;",
          "118:             invoke();",
          "120:             assert.ok(getDefaultShell.calledWithExactly(sinon.match({ env })));",
          "121:           });",
          "123:           it(\"uses the default shell to get the shell name\", function () {",
          "124:             const shell = \"foobar\";",
          "125:             getDefaultShell.returns(shell);",
          "127:             invoke();",
          "129:             assert.ok(",
          "130:               getShellName.calledWithExactly(",
          "131:                 sinon.match({ shell }),",
          "132:                 sinon.match.any",
          "133:               )",
          "134:             );",
          "135:           });",
          "136:         });",
          "138:         describe(\"a shell is provided\", function () {",
          "139:           beforeEach(function () {",
          "140:             getDefaultShell.returns(\"foobar\");",
          "141:           });",
          "143:           it(\"does not get the default shell\", function () {",
          "144:             invoke();",
          "145:             assert.ok(getDefaultShell.notCalled);",
          "146:           });",
          "148:           for (const value of [\"bash\", \"cmd.exe\"]) {",
          "149:             it(`gets the shell name with ${value}`, function () {",
          "150:               options.shell = value;",
          "152:               invoke();",
          "154:               assert.ok(",
          "155:                 getShellName.calledOnceWithExactly(",
          "156:                   sinon.match({ shell: value }),",
          "157:                   sinon.match.any",
          "158:                 )",
          "160:             });",
          "162:         });",
          "164:         it(\"gets the shell name with the appropriate helpers\", function () {",
          "165:           invoke();",
          "167:           assert.ok(",
          "168:             getShellName.calledOnceWithExactly(sinon.match.any, {",
          "169:               resolveExecutable,",
          "170:             })",
          "171:           );",
          "172:         });",
          "175:       describe(\"the argument to escape\", function () {",
          "176:         const typeError =",
          "177:           \"Shescape requires strings or values that can be converted into a string using .toString()\";",
          "179:         it(\"is escaped by the escape function\", function () {",
          "180:           for (const input of stringInputs) {",
          "181:             arg = input;",
          "183:             invoke();",
          "185:             assert.ok(escapeFunction.calledWithExactly(input, sinon.match.any));",
          "187:         });",
          "189:         it(\"is escaped if it's a boolean value\", function () {",
          "190:           for (const input of booleanInputs) {",
          "191:             arg = input;",
          "193:             invoke();",
          "195:             assert.ok(",
          "196:               escapeFunction.calledWithExactly(`${input}`, sinon.match.any)",
          "197:             );",
          "198:           }",
          "199:         });",
          "201:         it(\"is escaped if it's a numeric value\", function () {",
          "202:           for (const input of numericInputs) {",
          "203:             arg = input;",
          "205:             invoke();",
          "207:             assert.ok(",
          "208:               escapeFunction.calledWithExactly(`${input}`, sinon.match.any)",
          "209:             );",
          "211:         });",
          "213:         it(\"fails when it's an undefined value\", function () {",
          "214:           for (const input of undefinedValues) {",
          "215:             arg = input;",
          "217:             assert.throws(invoke, {",
          "218:               name: \"TypeError\",",
          "219:               message: typeError,",
          "220:             });",
          "221:           }",
          "222:         });",
          "224:         it(\"fails when it's not stringable\", function () {",
          "225:           arg = noToStringObject;",
          "227:           assert.throws(invoke, {",
          "231:         });",
          "233:         it(`fails when toString does not return a string`, function () {",
          "234:           arg = toStringNotStringObject;",
          "236:           assert.throws(invoke, {",
          "239:           });",
          "240:         });",
          "243:   }",
          "245:   describe(\"::escapeShellArg\", function () {",
          "246:     it(\"returns the value returned by the escape function\", function () {",
          "247:       const escapedArg = \"foobar\";",
          "249:       escapeFunction.returns(escapedArg);",
          "251:       const result = invokeEscapeShellArg();",
          "252:       assert.equal(result, escapedArg);",
          "253:     });",
          "255:     it(\"uses interpolation=false when escaping by default\", function () {",
          "256:       delete options.interpolation;",
          "258:       invokeEscapeShellArg();",
          "259:       assert.ok(escapeFunction.calledWithExactly(sinon.match.any, false));",
          "260:     });",
          "262:     for (const value of booleanInputs) {",
          "263:       it(`uses the provided interpolation value (${value}) when escaping`, function () {",
          "264:         options.interpolation = value;",
          "266:         invokeEscapeShellArg();",
          "267:         assert.ok(escapeFunction.calledWithExactly(sinon.match.any, value));",
          "269:     }",
          "270:   });",
          "272:   describe(\"::quoteShellArg\", function () {",
          "273:     it(\"uses the shell name to get the quote function\", function () {",
          "274:       const shellName = \"foobar\";",
          "275:       getShellName.returns(shellName);",
          "277:       invokeQuoteShellArg();",
          "278:       assert.equal(getQuoteFunction.callCount, 1);",
          "279:       assert.ok(getQuoteFunction.alwaysCalledWithExactly(shellName));",
          "280:     });",
          "282:     it(\"returns the value returned by the quote function\", function () {",
          "283:       const quotedArg = \"foobar\";",
          "285:       quoteFunction.returns(quotedArg);",
          "287:       const result = invokeQuoteShellArg();",
          "288:       assert.equal(result, quotedArg);",
          "291:     it(\"calls the quote function with the escaped argument\", function () {",
          "292:       const escapedArg = \"foobar\";",
          "294:       escapeFunction.returns(escapedArg);",
          "296:       invokeQuoteShellArg();",
          "297:       assert.ok(quoteFunction.calledWithExactly(escapedArg));",
          "298:     });",
          "300:     it(\"sets interpolation to false when escaping\", function () {",
          "301:       invokeQuoteShellArg();",
          "302:       assert.ok(escapeFunction.calledWithExactly(sinon.match.any, false));",
          "303:     });",
          "305:     for (const value of booleanInputs) {",
          "306:       it(`ignores a provided interpolation value (${value}) when escaping`, function () {",
          "307:         options.interpolation = value;",
          "309:         invokeQuoteShellArg();",
          "310:         assert.ok(escapeFunction.calledWithExactly(sinon.match.any, false));",
          "311:       });",
          "312:     }",
          "",
          "---------------"
        ],
        "test/platforms.test.js||test/platforms.test.js": [
          "File: test/platforms.test.js -> test/platforms.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import assert from \"assert\";",
          "9: import * as platforms from \"../src/platforms.js\";",
          "10: import * as unix from \"../src/unix.js\";",
          "11: import * as win from \"../src/win.js\";",
          "13: describe(\"platforms.js\", function () {",
          "14:   describe(\"::getHelpersByPlatform\", function () {",
          "18:     it(\"returns the unix module for 'aix'\", function () {",
          "19:       const result = platforms.getHelpersByPlatform(\"aix\");",
          "20:       assert.deepStrictEqual(result, unix);",
          "21:     });",
          "23:     it(\"returns the unix module for 'darwin'\", function () {",
          "24:       const result = platforms.getHelpersByPlatform(\"darwin\");",
          "25:       assert.deepStrictEqual(result, unix);",
          "26:     });",
          "28:     it(\"returns the unix module for 'freebsd'\", function () {",
          "29:       const result = platforms.getHelpersByPlatform(\"freebsd\");",
          "30:       assert.deepStrictEqual(result, unix);",
          "31:     });",
          "33:     it(\"returns the unix module for 'linux'\", function () {",
          "34:       const result = platforms.getHelpersByPlatform(\"linux\");",
          "35:       assert.deepStrictEqual(result, unix);",
          "36:     });",
          "38:     it(\"returns the unix module for 'openbsd'\", function () {",
          "39:       const result = platforms.getHelpersByPlatform(\"openbsd\");",
          "40:       assert.deepStrictEqual(result, unix);",
          "41:     });",
          "43:     it(\"returns the unix module for 'sunos'\", function () {",
          "44:       const result = platforms.getHelpersByPlatform(\"sunos\");",
          "45:       assert.deepStrictEqual(result, unix);",
          "46:     });",
          "48:     it(\"returns the windows module for 'win32'\", function () {",
          "49:       const result = platforms.getHelpersByPlatform(\"win32\");",
          "50:       assert.deepStrictEqual(result, win);",
          "51:     });",
          "52:   });",
          "53: });",
          "",
          "---------------"
        ],
        "test/unix.prop.js||test/unix.prop.js": [
          "File: test/unix.prop.js -> test/unix.prop.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import assert from \"assert\";",
          "8: import * as fc from \"fast-check\";",
          "12: import * as unix from \"../src/unix.js\";",
          "14: describe(\"unix.js\", function () {",
          "17:   before(function () {",
          "18:     fc.configureGlobal({",
          "",
          "[Removed Lines]",
          "10: import { isDefined, unixShells } from \"./common.js\";",
          "15:   const shells = unixShells.filter(isDefined);",
          "",
          "[Added Lines]",
          "9: import * as path from \"path\";",
          "10: import sinon from \"sinon\";",
          "12: import { binBash, binDash, binZsh } from \"./common.js\";",
          "17:   const supportedShells = [binBash, binDash, binZsh];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     });",
          "23:   });",
          "27:       fc.assert(",
          "28:         fc.property(",
          "29:           fc.string(),",
          "33:             assert.ok(typeof result === \"string\");",
          "34:           }",
          "35:         )",
          "36:       );",
          "37:     });",
          "40:       fc.assert(",
          "41:         fc.property(",
          "42:           fc.string(),",
          "47:           }",
          "48:         )",
          "49:       );",
          "50:     });",
          "53:       fc.assert(",
          "56:         })",
          "57:       );",
          "58:     });",
          "",
          "[Removed Lines]",
          "25:   describe(\"::escapeShellArg\", function () {",
          "26:     it(\"always returns a string\", function () {",
          "30:           fc.constantFrom(...shells),",
          "31:           function (arg, shell) {",
          "32:             const result = unix.escapeShellArg(arg, shell);",
          "39:     it(\"never returns a string with a null character\", function () {",
          "43:           fc.constantFrom(...shells),",
          "44:           function (arg, shell) {",
          "45:             const result = unix.escapeShellArg(arg, shell);",
          "46:             assert.doesNotMatch(result, /\\u{0}/gu);",
          "52:     it(\"throws if the shell is undefined\", function () {",
          "54:         fc.property(fc.string(), function (arg) {",
          "55:           assert.throws(() => unix.escapeShellArg(arg));",
          "",
          "[Added Lines]",
          "27:   describe(\"::getEscapeFunction\", function () {",
          "28:     it(\"returns a string for supported shells\", function () {",
          "31:           fc.constantFrom(...supportedShells),",
          "33:           function (shellName, arg) {",
          "34:             const escapeFn = unix.getEscapeFunction(shellName);",
          "35:             const result = escapeFn(arg);",
          "42:     it(\"always returns `null` for unsupported shells\", function () {",
          "43:       fc.assert(",
          "44:         fc.property(fc.string(), function (shellName) {",
          "45:           if (supportedShells.includes(shellName)) {",
          "46:             return;",
          "47:           }",
          "49:           const escapeFn = unix.getEscapeFunction(shellName);",
          "50:           assert.strictEqual(escapeFn, null);",
          "51:         })",
          "52:       );",
          "53:     });",
          "54:   });",
          "56:   describe(\"::getQuoteFunction\", function () {",
          "57:     it(\"quotes with single quotes for supported shells\", function () {",
          "60:           fc.constantFrom(...supportedShells),",
          "62:           function (shellName, input) {",
          "63:             const quoteFn = unix.getQuoteFunction(shellName);",
          "64:             const result = quoteFn(input);",
          "65:             assert.strictEqual(result, `'${input}'`);",
          "71:     it(\"always returns `null` for unsupported shells\", function () {",
          "72:       fc.assert(",
          "73:         fc.property(fc.string(), function (shellName) {",
          "74:           if (supportedShells.includes(shellName)) {",
          "75:             return;",
          "76:           }",
          "78:           const escapeFn = unix.getQuoteFunction(shellName);",
          "79:           assert.strictEqual(escapeFn, null);",
          "80:         })",
          "81:       );",
          "82:     });",
          "83:   });",
          "85:   describe(\"::getShellName\", function () {",
          "86:     let resolveExecutable;",
          "88:     before(function () {",
          "89:       resolveExecutable = sinon.stub();",
          "90:     });",
          "92:     beforeEach(function () {",
          "93:       sinon.reset();",
          "95:       resolveExecutable.returns(\"foobar\");",
          "96:     });",
          "98:     it(\"resolves the provided shell\", function () {",
          "100:         fc.property(fc.string(), function (shell) {",
          "101:           unix.getShellName({ shell }, { resolveExecutable });",
          "102:           assert.ok(",
          "103:             resolveExecutable.calledWithExactly(",
          "104:               { executable: shell },",
          "105:               sinon.match.any",
          "106:             )",
          "107:           );",
          "108:         })",
          "109:       );",
          "110:     });",
          "112:     it(`returns '${binBash}' if the resolved shell is not supported`, function () {",
          "113:       fc.assert(",
          "114:         fc.property(fc.string(), function (shell) {",
          "115:           if (supportedShells.includes(path.basename(shell))) {",
          "116:             return;",
          "117:           }",
          "119:           resolveExecutable.returns(`/bin/${shell}`);",
          "121:           const result = unix.getShellName({ shell }, { resolveExecutable });",
          "122:           assert.equal(result, binBash);",
          "",
          "---------------"
        ],
        "test/unix.test.js||test/unix.test.js": [
          "File: test/unix.test.js -> test/unix.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import assert from \"assert\";",
          "13: describe(\"unix.js\", function () {",
          "18:     });",
          "162:             assert.strictEqual(output, input);",
          "163:           });",
          "177:           });",
          "191:           });",
          "205:           });",
          "219:           });",
          "231:           });",
          "245:           });",
          "257:           });",
          "271:           });",
          "283:           });",
          "295:           });",
          "309:           });",
          "321:           });",
          "335:           });",
          "353:           });",
          "385:           });",
          "419:           });",
          "453:           });",
          "460:             });",
          "466:             });",
          "472:             });",
          "478:             });",
          "496:             });",
          "502:             });",
          "508:             });",
          "514:             });",
          "520:             });",
          "526:             });",
          "532:             });",
          "538:             });",
          "544:             });",
          "550:             });",
          "556:             });",
          "561:               assert.strictEqual(output, input);",
          "562:             });",
          "568:             });",
          "574:             });",
          "575:           });",
          "595:           });",
          "609:           });",
          "623:           });",
          "637:           });",
          "651:           });",
          "665:           });",
          "679:           });",
          "699:           });",
          "731:           });",
          "763:           });",
          "813:           });",
          "839:           });",
          "840:         });",
          "841:       });",
          "847:       describe(\"No interpolation\", function () {",
          "848:         const interpolation = false;",
          "850:         it(\"returns the input if nothing has to be escaped\", function () {",
          "851:           const input = `Hello world!`;",
          "853:           assert.strictEqual(output, input);",
          "854:         });",
          "856:         describe(\"null characters\", function () {",
          "857:           it(\"removes one null character\", function () {",
          "858:             const input = `foo ls${nullChar} -al bar`;",
          "860:             assert.strictEqual(output, `foo ls -al bar`);",
          "861:           });",
          "863:           it(\"removes multiple null characters\", function () {",
          "864:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "866:             assert.strictEqual(output, `foo ls -al bar`);",
          "867:           });",
          "868:         });",
          "",
          "[Removed Lines]",
          "9: import { binSh, binZsh, nullChar } from \"./common.js\";",
          "11: import { escapeShellArg, getDefaultShell } from \"../src/unix.js\";",
          "14:   describe(\"::escapeShellArg\", function () {",
          "15:     it(\"throws if no shell is provided\", function () {",
          "16:       const input = `Hello world!`;",
          "17:       assert.throws(() => escapeShellArg(input));",
          "20:     describe(\"/bin/sh\", function () {",
          "21:       const shell = binSh;",
          "23:       describe(\"No interpolation\", function () {",
          "24:         const interpolation = false;",
          "26:         it(\"returns the input if nothing has to be escaped\", function () {",
          "27:           const input = `Hello world!`;",
          "28:           const output = escapeShellArg(input, shell, interpolation);",
          "29:           assert.strictEqual(output, input);",
          "30:         });",
          "32:         describe(\"null characters\", function () {",
          "33:           it(\"removes one null character\", function () {",
          "34:             const input = `foo ls${nullChar} -al bar`;",
          "35:             const output = escapeShellArg(input, shell, interpolation);",
          "36:             assert.strictEqual(output, `foo ls -al bar`);",
          "37:           });",
          "39:           it(\"removes multiple null characters\", function () {",
          "40:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "41:             const output = escapeShellArg(input, shell, interpolation);",
          "42:             assert.strictEqual(output, `foo ls -al bar`);",
          "43:           });",
          "44:         });",
          "46:         describe('single quotes (\"\\'\")', function () {",
          "47:           it(\"escapes one single quote\", function () {",
          "48:             const input = `' ls -al`;",
          "49:             const output = escapeShellArg(input, shell, interpolation);",
          "50:             assert.strictEqual(output, `'\\\\'' ls -al`);",
          "51:           });",
          "53:           it(\"escapes multiple single quotes\", function () {",
          "54:             const input = `' echo 'Hello world!'`;",
          "55:             const output = escapeShellArg(input, shell, interpolation);",
          "56:             assert.strictEqual(output, `'\\\\'' echo '\\\\''Hello world!'\\\\''`);",
          "57:           });",
          "58:         });",
          "60:         describe(\"double quotes ('\\\"')\", function () {",
          "61:           it(\"does nothing to one double quote\", function () {",
          "62:             const input = `\" ls -al`;",
          "63:             const output = escapeShellArg(input, shell, interpolation);",
          "64:             assert.strictEqual(output, input);",
          "65:           });",
          "67:           it(\"does nothing to multiple double quotes\", function () {",
          "68:             const input = `\" echo \"Hello world!\"`;",
          "69:             const output = escapeShellArg(input, shell, interpolation);",
          "70:             assert.strictEqual(output, input);",
          "71:           });",
          "72:         });",
          "74:         describe(\"backticks ('`')\", function () {",
          "75:           it(\"does nothing to one backtick\", function () {",
          "76:             const input = \"` ls -al\";",
          "77:             const output = escapeShellArg(input, shell, interpolation);",
          "78:             assert.strictEqual(output, input);",
          "79:           });",
          "81:           it(\"does nothing to multiple backticks\", function () {",
          "82:             const input = \"` echo `Hello world!`\";",
          "83:             const output = escapeShellArg(input, shell, interpolation);",
          "84:             assert.strictEqual(output, input);",
          "85:           });",
          "86:         });",
          "88:         describe(\"backslashes ('\\\\')\", function () {",
          "89:           it(\"does nothing to one backslash\", function () {",
          "90:             const input = \"foo\\\\bar\";",
          "91:             const output = escapeShellArg(input, shell, interpolation);",
          "92:             assert.strictEqual(output, input);",
          "93:           });",
          "95:           it(\"does nothing to multiple backslashes\", function () {",
          "96:             const input = \"praise\\\\the\\\\sun\";",
          "97:             const output = escapeShellArg(input, shell, interpolation);",
          "98:             assert.strictEqual(output, input);",
          "99:           });",
          "100:         });",
          "102:         describe(\"tilde ('~')\", function () {",
          "103:           it(\"does nothing to one tilde\", function () {",
          "104:             const input = \"~foobar\";",
          "105:             const output = escapeShellArg(input, shell, interpolation);",
          "106:             assert.strictEqual(output, input);",
          "107:           });",
          "109:           it(\"does nothing to multiple tildes\", function () {",
          "110:             const input = \"~foo~bar\";",
          "111:             const output = escapeShellArg(input, shell, interpolation);",
          "112:             assert.strictEqual(output, input);",
          "113:           });",
          "114:         });",
          "116:         describe(\"hashtags ('#')\", function () {",
          "117:           it(\"does nothing to one hashtag\", function () {",
          "118:             const input = \"#foobar\";",
          "119:             const output = escapeShellArg(input, shell, interpolation);",
          "120:             assert.strictEqual(output, input);",
          "121:           });",
          "123:           it(\"does nothing to multiple hashtags\", function () {",
          "124:             const input = \"#foo#bar\";",
          "125:             const output = escapeShellArg(input, shell, interpolation);",
          "126:             assert.strictEqual(output, input);",
          "127:           });",
          "128:         });",
          "130:         describe(\"dollar signs ('$')\", function () {",
          "131:           it(\"does nothing to one dollar sign\", function () {",
          "132:             const input = \"foo$bar\";",
          "133:             const output = escapeShellArg(input, shell, interpolation);",
          "134:             assert.strictEqual(output, input);",
          "135:           });",
          "137:           it(\"does nothing to multiple dollar signs\", function () {",
          "138:             const input = \"praise$the$sun\";",
          "139:             const output = escapeShellArg(input, shell, interpolation);",
          "140:             assert.strictEqual(output, input);",
          "141:           });",
          "142:         });",
          "144:         describe(\"semicolons (';')\", function () {",
          "145:           it(\"does nothing to one semicolon\", function () {",
          "146:             const input = \"foo;bar\";",
          "147:             const output = escapeShellArg(input, shell, interpolation);",
          "148:             assert.strictEqual(output, input);",
          "149:           });",
          "151:           it(\"does nothing to multiple semicolons\", function () {",
          "152:             const input = \"praise;the;sun\";",
          "153:             const output = escapeShellArg(input, shell, interpolation);",
          "154:             assert.strictEqual(output, input);",
          "155:           });",
          "156:         });",
          "158:         describe(\"ampersands ('&')\", function () {",
          "159:           it(\"does nothing to one ampersand\", function () {",
          "160:             const input = \"foo&bar\";",
          "161:             const output = escapeShellArg(input, shell, interpolation);",
          "165:           it(\"does nothing to multiple ampersands\", function () {",
          "166:             const input = \"praise&the&sun\";",
          "167:             const output = escapeShellArg(input, shell, interpolation);",
          "168:             assert.strictEqual(output, input);",
          "169:           });",
          "170:         });",
          "172:         describe(\"pipes ('|')\", function () {",
          "173:           it(\"does nothing to one pipe\", function () {",
          "174:             const input = \"foo|bar\";",
          "175:             const output = escapeShellArg(input, shell, interpolation);",
          "176:             assert.strictEqual(output, input);",
          "179:           it(\"does nothing to multiple pipes\", function () {",
          "180:             const input = \"praise|the|sun\";",
          "181:             const output = escapeShellArg(input, shell, interpolation);",
          "182:             assert.strictEqual(output, input);",
          "183:           });",
          "184:         });",
          "186:         describe(\"asterisks ('*')\", function () {",
          "187:           it(\"does nothing to one asterisk\", function () {",
          "188:             const input = \"foo*bar\";",
          "189:             const output = escapeShellArg(input, shell, interpolation);",
          "190:             assert.strictEqual(output, input);",
          "193:           it(\"does nothing to multiple asterisks\", function () {",
          "194:             const input = \"praise*the*sun\";",
          "195:             const output = escapeShellArg(input, shell, interpolation);",
          "196:             assert.strictEqual(output, input);",
          "197:           });",
          "198:         });",
          "200:         describe(\"question marks ('?')\", function () {",
          "201:           it(\"does nothing to one question mark\", function () {",
          "202:             const input = \"foo?bar\";",
          "203:             const output = escapeShellArg(input, shell, interpolation);",
          "204:             assert.strictEqual(output, input);",
          "207:           it(\"does nothing to multiple question marks\", function () {",
          "208:             const input = \"praise?the?sun\";",
          "209:             const output = escapeShellArg(input, shell, interpolation);",
          "210:             assert.strictEqual(output, input);",
          "211:           });",
          "212:         });",
          "214:         describe(\"equals sign ('=')\", function () {",
          "215:           it(\"does nothing to an equals sign at the start\", function () {",
          "216:             const input = \"=foobar\";",
          "217:             const output = escapeShellArg(input, shell, interpolation);",
          "218:             assert.strictEqual(output, input);",
          "221:           it(\"does nothing to an equals sign not at the start\", function () {",
          "222:             const input = \"foo=bar\";",
          "223:             const output = escapeShellArg(input, shell, interpolation);",
          "224:             assert.strictEqual(output, input);",
          "225:           });",
          "227:           it(\"does nothing to escapes the equals sign at the start\", function () {",
          "228:             const input = \"=foo=bar\";",
          "229:             const output = escapeShellArg(input, shell, interpolation);",
          "230:             assert.strictEqual(output, input);",
          "232:         });",
          "234:         describe(\"parentheses ('(', ')')\", function () {",
          "235:           it(\"does nothing to one opening parenthesis\", function () {",
          "236:             const input = \"foo(bar\";",
          "237:             const output = escapeShellArg(input, shell, interpolation);",
          "238:             assert.strictEqual(output, input);",
          "239:           });",
          "241:           it(\"does nothing to multiple opening parentheses\", function () {",
          "242:             const input = \"praise(the(sun\";",
          "243:             const output = escapeShellArg(input, shell, interpolation);",
          "244:             assert.strictEqual(output, input);",
          "247:           it(\"does nothing to one closing parenthesis\", function () {",
          "248:             const input = \"foo(bar\";",
          "249:             const output = escapeShellArg(input, shell, interpolation);",
          "250:             assert.strictEqual(output, input);",
          "251:           });",
          "253:           it(\"does nothing to multiple closing parentheses\", function () {",
          "254:             const input = \"praise(the(sun\";",
          "255:             const output = escapeShellArg(input, shell, interpolation);",
          "256:             assert.strictEqual(output, input);",
          "259:           it(\"does nothing to a pair of parentheses\", function () {",
          "260:             const input = \"praise(the)sun\";",
          "261:             const output = escapeShellArg(input, shell, interpolation);",
          "262:             assert.strictEqual(output, input);",
          "263:           });",
          "264:         });",
          "266:         describe(\"square brackets ('[', ']')\", function () {",
          "267:           it(\"does nothing to one opening square bracket\", function () {",
          "268:             const input = \"foo[bar\";",
          "269:             const output = escapeShellArg(input, shell, interpolation);",
          "270:             assert.strictEqual(output, input);",
          "273:           it(\"does nothing to multiple opening square brackets\", function () {",
          "274:             const input = \"praise[the[sun\";",
          "275:             const output = escapeShellArg(input, shell, interpolation);",
          "276:             assert.strictEqual(output, input);",
          "277:           });",
          "279:           it(\"does nothing to one closing square bracket\", function () {",
          "280:             const input = \"foo]bar\";",
          "281:             const output = escapeShellArg(input, shell, interpolation);",
          "282:             assert.strictEqual(output, input);",
          "285:           it(\"does nothing to multiple closing square brackets\", function () {",
          "286:             const input = \"praise]the]sun\";",
          "287:             const output = escapeShellArg(input, shell, interpolation);",
          "288:             assert.strictEqual(output, input);",
          "289:           });",
          "291:           it(\"does nothing to a pair of square brackets\", function () {",
          "292:             const input = \"praise[the]sun\";",
          "293:             const output = escapeShellArg(input, shell, interpolation);",
          "294:             assert.strictEqual(output, input);",
          "296:         });",
          "298:         describe(\"curly brackets ('{', '}')\", function () {",
          "299:           it(\"does nothing to one opening curly bracket\", function () {",
          "300:             const input = \"foo{bar\";",
          "301:             const output = escapeShellArg(input, shell, interpolation);",
          "302:             assert.strictEqual(output, input);",
          "303:           });",
          "305:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "306:             const input = \"praise{the{sun\";",
          "307:             const output = escapeShellArg(input, shell, interpolation);",
          "308:             assert.strictEqual(output, input);",
          "311:           it(\"does nothing to one closing curly bracket\", function () {",
          "312:             const input = \"foo}bar\";",
          "313:             const output = escapeShellArg(input, shell, interpolation);",
          "314:             assert.strictEqual(output, input);",
          "315:           });",
          "317:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "318:             const input = \"praise}the}sun\";",
          "319:             const output = escapeShellArg(input, shell, interpolation);",
          "320:             assert.strictEqual(output, input);",
          "323:           it(\"does nothing to a pair of curly brackets\", function () {",
          "324:             const input = \"praise{the}sun\";",
          "325:             const output = escapeShellArg(input, shell, interpolation);",
          "326:             assert.strictEqual(output, input);",
          "327:           });",
          "328:         });",
          "330:         describe(\"angle brackets ('<', '>')\", function () {",
          "331:           it(\"does nothing to one left-angle bracket\", function () {",
          "332:             const input = \"foo<bar\";",
          "333:             const output = escapeShellArg(input, shell, interpolation);",
          "334:             assert.strictEqual(output, input);",
          "337:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "338:             const input = \"praise<the<sun\";",
          "339:             const output = escapeShellArg(input, shell, interpolation);",
          "340:             assert.strictEqual(output, input);",
          "341:           });",
          "343:           it(\"does nothing to one right-angle bracket\", function () {",
          "344:             const input = \"foo>bar\";",
          "345:             const output = escapeShellArg(input, shell, interpolation);",
          "346:             assert.strictEqual(output, input);",
          "347:           });",
          "349:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "350:             const input = \"praise>the>sun\";",
          "351:             const output = escapeShellArg(input, shell, interpolation);",
          "352:             assert.strictEqual(output, input);",
          "354:         });",
          "355:       });",
          "357:       describe(\"With interpolation\", function () {",
          "358:         const interpolation = true;",
          "360:         it(\"returns the input if nothing has to be escaped\", function () {",
          "361:           const input = `Hello world!`;",
          "362:           const output = escapeShellArg(input, shell, interpolation);",
          "363:           assert.strictEqual(output, input);",
          "364:         });",
          "366:         describe(\"null characters\", function () {",
          "367:           it(\"removes one null character\", function () {",
          "368:             const input = `foo ls${nullChar} -al bar`;",
          "369:             const output = escapeShellArg(input, shell, interpolation);",
          "370:             assert.strictEqual(output, `foo ls -al bar`);",
          "371:           });",
          "373:           it(\"removes multiple null characters\", function () {",
          "374:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "375:             const output = escapeShellArg(input, shell, interpolation);",
          "376:             assert.strictEqual(output, `foo ls -al bar`);",
          "377:           });",
          "378:         });",
          "380:         describe('single quotes (\"\\'\")', function () {",
          "381:           it(\"escapes one single quote\", function () {",
          "382:             const input = `' ls -al`;",
          "383:             const output = escapeShellArg(input, shell, interpolation);",
          "384:             assert.strictEqual(output, `\\\\' ls -al`);",
          "387:           it(\"escapes multiple single quotes\", function () {",
          "388:             const input = `' echo 'Hello world!'`;",
          "389:             const output = escapeShellArg(input, shell, interpolation);",
          "390:             assert.strictEqual(output, `\\\\' echo \\\\'Hello world!\\\\'`);",
          "391:           });",
          "392:         });",
          "394:         describe(\"double quotes ('\\\"')\", function () {",
          "395:           it(\"escapes one double quote\", function () {",
          "396:             const input = `\" ls -al`;",
          "397:             const output = escapeShellArg(input, shell, interpolation);",
          "398:             assert.strictEqual(output, `\\\\\" ls -al`);",
          "399:           });",
          "401:           it(\"escapes multiple double quotes\", function () {",
          "402:             const input = `\" echo \"Hello world!\"`;",
          "403:             const output = escapeShellArg(input, shell, interpolation);",
          "404:             assert.strictEqual(output, `\\\\\" echo \\\\\"Hello world!\\\\\"`);",
          "405:           });",
          "406:         });",
          "408:         describe(\"backticks ('`')\", function () {",
          "409:           it(\"escapes one backtick\", function () {",
          "410:             const input = \"` ls -al\";",
          "411:             const output = escapeShellArg(input, shell, interpolation);",
          "412:             assert.strictEqual(output, \"\\\\` ls -al\");",
          "413:           });",
          "415:           it(\"escapes multiple backticks\", function () {",
          "416:             const input = \"` echo `Hello world!`\";",
          "417:             const output = escapeShellArg(input, shell, interpolation);",
          "418:             assert.strictEqual(output, \"\\\\` echo \\\\`Hello world!\\\\`\");",
          "420:         });",
          "422:         describe(\"backslashes ('\\\\')\", function () {",
          "423:           it(\"escapes one backslash\", function () {",
          "424:             const input = \"foo\\\\bar\";",
          "425:             const output = escapeShellArg(input, shell, interpolation);",
          "426:             assert.strictEqual(output, \"foo\\\\\\\\bar\");",
          "427:           });",
          "429:           it(\"escapes multiple backslashes\", function () {",
          "430:             const input = \"praise\\\\the\\\\sun\";",
          "431:             const output = escapeShellArg(input, shell, interpolation);",
          "432:             assert.strictEqual(output, \"praise\\\\\\\\the\\\\\\\\sun\");",
          "433:           });",
          "434:         });",
          "436:         describe(\"tilde ('~')\", function () {",
          "437:           it(\"escapes a tilde at the start\", function () {",
          "438:             const input = \"~foobar\";",
          "439:             const output = escapeShellArg(input, shell, interpolation);",
          "440:             assert.strictEqual(output, \"\\\\~foobar\");",
          "441:           });",
          "443:           it(\"does nothing to a tilde in the middle\", function () {",
          "444:             const input = \"foo~bar\";",
          "445:             const output = escapeShellArg(input, shell, interpolation);",
          "446:             assert.strictEqual(output, input);",
          "447:           });",
          "449:           it(\"only escapes the tilde at the start\", function () {",
          "450:             const input = \"~foo~bar\";",
          "451:             const output = escapeShellArg(input, shell, interpolation);",
          "452:             assert.strictEqual(output, \"\\\\~foo~bar\");",
          "455:           describe(\"combined with equals ('=')\", function () {",
          "456:             it(\"escapes a tilde right after '=' at the end\", function () {",
          "457:               const input = \"foobar=~\";",
          "458:               const output = escapeShellArg(input, shell, interpolation);",
          "459:               assert.strictEqual(output, \"foobar=\\\\~\");",
          "462:             it(\"escapes a tilde after '=' with a colon in between\", function () {",
          "463:               const input = \"foobar=:~\";",
          "464:               const output = escapeShellArg(input, shell, interpolation);",
          "465:               assert.strictEqual(output, \"foobar=:\\\\~\");",
          "468:             it(\"escapes a tilde after '=' with a colon and text in between\", function () {",
          "469:               const input = \"foo=bar:~\";",
          "470:               const output = escapeShellArg(input, shell, interpolation);",
          "471:               assert.strictEqual(output, \"foo=bar:\\\\~\");",
          "474:             it(\"escapes a tilde right after '=' with a trailing colon\", function () {",
          "475:               const input = \"foobar=~:\";",
          "476:               const output = escapeShellArg(input, shell, interpolation);",
          "477:               assert.strictEqual(output, \"foobar=\\\\~:\");",
          "480:             it(\"escapes a tilde right after '=' with a trailing equals\", function () {",
          "481:               const input = \"foobar=~=\";",
          "482:               const output = escapeShellArg(input, shell, interpolation);",
          "483:               assert.strictEqual(output, \"foobar=\\\\~=\");",
          "484:             });",
          "486:             it(\"escapes a tilde right after '=' with a trailing plus\", function () {",
          "487:               const input = \"foobar=~-\";",
          "488:               const output = escapeShellArg(input, shell, interpolation);",
          "489:               assert.strictEqual(output, \"foobar=\\\\~-\");",
          "490:             });",
          "492:             it(\"escapes a tilde right after '=' with a trailing plus\", function () {",
          "493:               const input = \"foobar=~+\";",
          "494:               const output = escapeShellArg(input, shell, interpolation);",
          "495:               assert.strictEqual(output, \"foobar=\\\\~+\");",
          "498:             it(\"escapes a tilde right after '=' with a trailing forward slash\", function () {",
          "499:               const input = \"foobar=~/\";",
          "500:               const output = escapeShellArg(input, shell, interpolation);",
          "501:               assert.strictEqual(output, \"foobar=\\\\~/\");",
          "504:             it(\"escapes a tilde right after '=' with a trailing zero\", function () {",
          "505:               const input = \"foobar=~0\";",
          "506:               const output = escapeShellArg(input, shell, interpolation);",
          "507:               assert.strictEqual(output, \"foobar=\\\\~0\");",
          "510:             it(\"escapes a tilde right after '=' with a trailing whitespace\", function () {",
          "511:               const input = \"foobar=~ \";",
          "512:               const output = escapeShellArg(input, shell, interpolation);",
          "513:               assert.strictEqual(output, \"foobar=\\\\~ \");",
          "516:             it(\"escapes a tilde right after '=' with a trailing colon and text\", function () {",
          "517:               const input = \"foo=~:bar\";",
          "518:               const output = escapeShellArg(input, shell, interpolation);",
          "519:               assert.strictEqual(output, \"foo=\\\\~:bar\");",
          "522:             it(\"escapes a tilde after '=' sandwiched between colons\", function () {",
          "523:               const input = \"foobar=:~:\";",
          "524:               const output = escapeShellArg(input, shell, interpolation);",
          "525:               assert.strictEqual(output, \"foobar=:\\\\~:\");",
          "528:             it(\"escapes a tilde after '=' sandwiched between colons and text before\", function () {",
          "529:               const input = \"foo=bar:~:\";",
          "530:               const output = escapeShellArg(input, shell, interpolation);",
          "531:               assert.strictEqual(output, \"foo=bar:\\\\~:\");",
          "534:             it(\"escapes a tilde after '=' sandwiched between colons and text after\", function () {",
          "535:               const input = \"foo=:~:bar\";",
          "536:               const output = escapeShellArg(input, shell, interpolation);",
          "537:               assert.strictEqual(output, \"foo=:\\\\~:bar\");",
          "540:             it(\"escapes a tilde after '=' sandwiched between colons and text\", function () {",
          "541:               const input = \"praise=the:~:sun\";",
          "542:               const output = escapeShellArg(input, shell, interpolation);",
          "543:               assert.strictEqual(output, \"praise=the:\\\\~:sun\");",
          "546:             it(\"escapes multiple tildes after '=' separated by colons\", function () {",
          "547:               const input = \"foobar=~:~\";",
          "548:               const output = escapeShellArg(input, shell, interpolation);",
          "549:               assert.strictEqual(output, \"foobar=\\\\~:\\\\~\");",
          "552:             it(\"does nothing to a tilde with trailing text after '='\", function () {",
          "553:               const input = \"foo=~bar\";",
          "554:               const output = escapeShellArg(input, shell, interpolation);",
          "555:               assert.strictEqual(output, input);",
          "558:             it(\"does nothing to a tilde with leading text after '='\", function () {",
          "559:               const input = \"foo=bar~\";",
          "560:               const output = escapeShellArg(input, shell, interpolation);",
          "564:             it(\"does nothing to a tilde before '='\", function () {",
          "565:               const input = \"foo~bar=\";",
          "566:               const output = escapeShellArg(input, shell, interpolation);",
          "567:               assert.strictEqual(output, \"foo~bar=\");",
          "570:             it(\"only escapes a tilde after the '='\", function () {",
          "571:               const input = \"foo~bar=~\";",
          "572:               const output = escapeShellArg(input, shell, interpolation);",
          "573:               assert.strictEqual(output, \"foo~bar=\\\\~\");",
          "576:         });",
          "578:         describe(\"hashtags ('#')\", function () {",
          "579:           it(\"escapes a hashtag at the start\", function () {",
          "580:             const input = \"#foobar\";",
          "581:             const output = escapeShellArg(input, shell, interpolation);",
          "582:             assert.strictEqual(output, \"\\\\#foobar\");",
          "583:           });",
          "585:           it(\"does nothing to a hashtag not at the start\", function () {",
          "586:             const input = \"foo#bar\";",
          "587:             const output = escapeShellArg(input, shell, interpolation);",
          "588:             assert.strictEqual(output, input);",
          "589:           });",
          "591:           it(\"only escapes the hashtag at the start\", function () {",
          "592:             const input = \"#foo#bar\";",
          "593:             const output = escapeShellArg(input, shell, interpolation);",
          "594:             assert.strictEqual(output, \"\\\\#foo#bar\");",
          "596:         });",
          "598:         describe(\"dollar signs ('$')\", function () {",
          "599:           it(\"escapes one dollar sign\", function () {",
          "600:             const input = \"foo$bar\";",
          "601:             const output = escapeShellArg(input, shell, interpolation);",
          "602:             assert.strictEqual(output, \"foo\\\\$bar\");",
          "603:           });",
          "605:           it(\"escapes multiple dollar signs\", function () {",
          "606:             const input = \"praise$the$sun\";",
          "607:             const output = escapeShellArg(input, shell, interpolation);",
          "608:             assert.strictEqual(output, \"praise\\\\$the\\\\$sun\");",
          "610:         });",
          "612:         describe(\"semicolons (';')\", function () {",
          "613:           it(\"escapes one semicolon\", function () {",
          "614:             const input = \"foo;bar\";",
          "615:             const output = escapeShellArg(input, shell, interpolation);",
          "616:             assert.strictEqual(output, \"foo\\\\;bar\");",
          "617:           });",
          "619:           it(\"escapes multiple semicolons\", function () {",
          "620:             const input = \"praise;the;sun\";",
          "621:             const output = escapeShellArg(input, shell, interpolation);",
          "622:             assert.strictEqual(output, \"praise\\\\;the\\\\;sun\");",
          "624:         });",
          "626:         describe(\"ampersands ('&')\", function () {",
          "627:           it(\"escapes one ampersand\", function () {",
          "628:             const input = \"foo&bar\";",
          "629:             const output = escapeShellArg(input, shell, interpolation);",
          "630:             assert.strictEqual(output, \"foo\\\\&bar\");",
          "631:           });",
          "633:           it(\"escapes multiple ampersands\", function () {",
          "634:             const input = \"praise&the&sun\";",
          "635:             const output = escapeShellArg(input, shell, interpolation);",
          "636:             assert.strictEqual(output, \"praise\\\\&the\\\\&sun\");",
          "638:         });",
          "640:         describe(\"pipes ('|')\", function () {",
          "641:           it(\"escapes one pipe\", function () {",
          "642:             const input = \"foo|bar\";",
          "643:             const output = escapeShellArg(input, shell, interpolation);",
          "644:             assert.strictEqual(output, \"foo\\\\|bar\");",
          "645:           });",
          "647:           it(\"escapes multiple pipes\", function () {",
          "648:             const input = \"praise|the|sun\";",
          "649:             const output = escapeShellArg(input, shell, interpolation);",
          "650:             assert.strictEqual(output, \"praise\\\\|the\\\\|sun\");",
          "652:         });",
          "654:         describe(\"asterisks ('*')\", function () {",
          "655:           it(\"escapes one asterisk\", function () {",
          "656:             const input = \"foo*bar\";",
          "657:             const output = escapeShellArg(input, shell, interpolation);",
          "658:             assert.strictEqual(output, \"foo\\\\*bar\");",
          "659:           });",
          "661:           it(\"escapes multiple asterisks\", function () {",
          "662:             const input = \"praise*the*sun\";",
          "663:             const output = escapeShellArg(input, shell, interpolation);",
          "664:             assert.strictEqual(output, \"praise\\\\*the\\\\*sun\");",
          "666:         });",
          "668:         describe(\"question marks ('?')\", function () {",
          "669:           it(\"escapes one question mark\", function () {",
          "670:             const input = \"foo?bar\";",
          "671:             const output = escapeShellArg(input, shell, interpolation);",
          "672:             assert.strictEqual(output, \"foo\\\\?bar\");",
          "673:           });",
          "675:           it(\"escapes multiple question marks\", function () {",
          "676:             const input = \"praise?the?sun\";",
          "677:             const output = escapeShellArg(input, shell, interpolation);",
          "678:             assert.strictEqual(output, \"praise\\\\?the\\\\?sun\");",
          "680:         });",
          "682:         describe(\"equals sign ('=')\", function () {",
          "683:           it(\"does nothing to an equals sign at the start\", function () {",
          "684:             const input = \"=foobar\";",
          "685:             const output = escapeShellArg(input, shell, interpolation);",
          "686:             assert.strictEqual(output, input);",
          "687:           });",
          "689:           it(\"does nothing to an equals sign not at the start\", function () {",
          "690:             const input = \"foo=bar\";",
          "691:             const output = escapeShellArg(input, shell, interpolation);",
          "692:             assert.strictEqual(output, input);",
          "693:           });",
          "695:           it(\"does nothing to escapes the equals sign at the start\", function () {",
          "696:             const input = \"=foo=bar\";",
          "697:             const output = escapeShellArg(input, shell, interpolation);",
          "698:             assert.strictEqual(output, input);",
          "700:         });",
          "702:         describe(\"parentheses ('(', ')')\", function () {",
          "703:           it(\"escapes one opening parenthesis\", function () {",
          "704:             const input = \"foo(bar\";",
          "705:             const output = escapeShellArg(input, shell, interpolation);",
          "706:             assert.strictEqual(output, \"foo\\\\(bar\");",
          "707:           });",
          "709:           it(\"escapes multiple opening parentheses\", function () {",
          "710:             const input = \"praise(the(sun\";",
          "711:             const output = escapeShellArg(input, shell, interpolation);",
          "712:             assert.strictEqual(output, \"praise\\\\(the\\\\(sun\");",
          "713:           });",
          "715:           it(\"escapes one closing parenthesis\", function () {",
          "716:             const input = \"foo)bar\";",
          "717:             const output = escapeShellArg(input, shell, interpolation);",
          "718:             assert.strictEqual(output, \"foo\\\\)bar\");",
          "719:           });",
          "721:           it(\"escapes multiple closing parentheses\", function () {",
          "722:             const input = \"praise)the)sun\";",
          "723:             const output = escapeShellArg(input, shell, interpolation);",
          "724:             assert.strictEqual(output, \"praise\\\\)the\\\\)sun\");",
          "725:           });",
          "727:           it(\"escapes a pair of parentheses\", function () {",
          "728:             const input = \"praise(the)sun\";",
          "729:             const output = escapeShellArg(input, shell, interpolation);",
          "730:             assert.strictEqual(output, \"praise\\\\(the\\\\)sun\");",
          "732:         });",
          "734:         describe(\"square brackets ('[', ']')\", function () {",
          "735:           it(\"does nothing to one opening square bracket\", function () {",
          "736:             const input = \"foo[bar\";",
          "737:             const output = escapeShellArg(input, shell, interpolation);",
          "738:             assert.strictEqual(output, input);",
          "739:           });",
          "741:           it(\"does nothing to multiple opening square brackets\", function () {",
          "742:             const input = \"praise[the[sun\";",
          "743:             const output = escapeShellArg(input, shell, interpolation);",
          "744:             assert.strictEqual(output, input);",
          "745:           });",
          "747:           it(\"does nothing to one closing square bracket\", function () {",
          "748:             const input = \"foo]bar\";",
          "749:             const output = escapeShellArg(input, shell, interpolation);",
          "750:             assert.strictEqual(output, input);",
          "751:           });",
          "753:           it(\"does nothing to multiple closing square brackets\", function () {",
          "754:             const input = \"praise]the]sun\";",
          "755:             const output = escapeShellArg(input, shell, interpolation);",
          "756:             assert.strictEqual(output, input);",
          "757:           });",
          "759:           it(\"does nothing to a pair of square brackets\", function () {",
          "760:             const input = \"praise[the]sun\";",
          "761:             const output = escapeShellArg(input, shell, interpolation);",
          "762:             assert.strictEqual(output, input);",
          "764:         });",
          "766:         describe(\"curly brackets ('{', '}')\", function () {",
          "767:           it(\"does nothing to one opening curly bracket\", function () {",
          "768:             const input = \"foo{bar\";",
          "769:             const output = escapeShellArg(input, shell, interpolation);",
          "770:             assert.strictEqual(output, input);",
          "771:           });",
          "773:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "774:             const input = \"praise{the{sun\";",
          "775:             const output = escapeShellArg(input, shell, interpolation);",
          "776:             assert.strictEqual(output, input);",
          "777:           });",
          "779:           it(\"does nothing to one closing curly bracket\", function () {",
          "780:             const input = \"foo}bar\";",
          "781:             const output = escapeShellArg(input, shell, interpolation);",
          "782:             assert.strictEqual(output, input);",
          "783:           });",
          "785:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "786:             const input = \"praise}the}sun\";",
          "787:             const output = escapeShellArg(input, shell, interpolation);",
          "788:             assert.strictEqual(output, input);",
          "789:           });",
          "791:           it(\"does nothing to a pair of curly brackets with text\", function () {",
          "792:             const input = \"praise{the}sun\";",
          "793:             const output = escapeShellArg(input, shell, interpolation);",
          "794:             assert.strictEqual(output, input);",
          "795:           });",
          "797:           it(\"escapes a pair of curly brackets with a period\", function () {",
          "798:             const input = \"foo{0..2}bar\";",
          "799:             const output = escapeShellArg(input, shell, interpolation);",
          "800:             assert.strictEqual(output, \"foo\\\\{0..2}bar\");",
          "801:           });",
          "803:           it(\"escapes a pair of curly brackets with a comma\", function () {",
          "804:             const input = \"foo{bar,baz}\";",
          "805:             const output = escapeShellArg(input, shell, interpolation);",
          "806:             assert.strictEqual(output, \"foo\\\\{bar,baz}\");",
          "807:           });",
          "809:           it(\"escapes a pair of nested curly brackets\", function () {",
          "810:             const input = \"foo{a,b{c,d},e}bar\";",
          "811:             const output = escapeShellArg(input, shell, interpolation);",
          "812:             assert.strictEqual(output, \"foo\\\\{a,b\\\\{c,d},e}bar\");",
          "814:         });",
          "816:         describe(\"angle brackets ('<', '>')\", function () {",
          "817:           it(\"escapes one left-angle bracket\", function () {",
          "818:             const input = \"foo<bar\";",
          "819:             const output = escapeShellArg(input, shell, interpolation);",
          "820:             assert.strictEqual(output, \"foo\\\\<bar\");",
          "821:           });",
          "823:           it(\"escapes multiple left-angle brackets\", function () {",
          "824:             const input = \"praise<the<sun\";",
          "825:             const output = escapeShellArg(input, shell, interpolation);",
          "826:             assert.strictEqual(output, \"praise\\\\<the\\\\<sun\");",
          "827:           });",
          "829:           it(\"escapes one right-angle bracket\", function () {",
          "830:             const input = \"foo>bar\";",
          "831:             const output = escapeShellArg(input, shell, interpolation);",
          "832:             assert.strictEqual(output, \"foo\\\\>bar\");",
          "833:           });",
          "835:           it(\"escapes multiple right-angle brackets\", function () {",
          "836:             const input = \"praise>the>sun\";",
          "837:             const output = escapeShellArg(input, shell, interpolation);",
          "838:             assert.strictEqual(output, \"praise\\\\>the\\\\>sun\");",
          "842:     });",
          "844:     describe(\"/bin/zsh\", function () {",
          "845:       const shell = binZsh;",
          "852:           const output = escapeShellArg(input, shell, interpolation);",
          "859:             const output = escapeShellArg(input, shell, interpolation);",
          "865:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "8: import sinon from \"sinon\";",
          "10: import { binBash, binDash, binZsh, nullChar } from \"./common.js\";",
          "12: import * as unix from \"../src/unix.js\";",
          "15:   describe(\"::getDefaultShell\", function () {",
          "16:     it(\"returns '/bin/sh'\", function () {",
          "17:       const result = unix.getDefaultShell();",
          "18:       assert.equal(result, \"/bin/sh\");",
          "20:   });",
          "22:   describe(\"::getEscapeFunction\", function () {",
          "23:     it(\"returns `null` for unsupported shells\", function () {",
          "24:       const result = unix.getEscapeFunction(\"foobar\");",
          "25:       assert.strictEqual(result, null);",
          "26:     });",
          "28:     for (const shellName of [binBash, binDash]) {",
          "29:       describe(shellName, function () {",
          "30:         const escapeShellArg = unix.getEscapeFunction(shellName);",
          "32:         describe(\"No interpolation\", function () {",
          "33:           const interpolation = false;",
          "35:           it(\"returns the input if nothing has to be escaped\", function () {",
          "36:             const input = `Hello world!`;",
          "37:             const output = escapeShellArg(input, interpolation);",
          "41:           describe(\"null characters\", function () {",
          "42:             it(\"removes one null character\", function () {",
          "43:               const input = `foo ls${nullChar} -al bar`;",
          "44:               const output = escapeShellArg(input, interpolation);",
          "45:               assert.strictEqual(output, `foo ls -al bar`);",
          "46:             });",
          "48:             it(\"removes multiple null characters\", function () {",
          "49:               const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "50:               const output = escapeShellArg(input, interpolation);",
          "51:               assert.strictEqual(output, `foo ls -al bar`);",
          "52:             });",
          "55:           describe('single quotes (\"\\'\")', function () {",
          "56:             it(\"escapes one single quote\", function () {",
          "57:               const input = `' ls -al`;",
          "58:               const output = escapeShellArg(input, interpolation);",
          "59:               assert.strictEqual(output, `'\\\\'' ls -al`);",
          "60:             });",
          "62:             it(\"escapes multiple single quotes\", function () {",
          "63:               const input = `' echo 'Hello world!'`;",
          "64:               const output = escapeShellArg(input, interpolation);",
          "65:               assert.strictEqual(output, `'\\\\'' echo '\\\\''Hello world!'\\\\''`);",
          "66:             });",
          "69:           describe(\"double quotes ('\\\"')\", function () {",
          "70:             it(\"does nothing to one double quote\", function () {",
          "71:               const input = `\" ls -al`;",
          "72:               const output = escapeShellArg(input, interpolation);",
          "73:               assert.strictEqual(output, input);",
          "74:             });",
          "76:             it(\"does nothing to multiple double quotes\", function () {",
          "77:               const input = `\" echo \"Hello world!\"`;",
          "78:               const output = escapeShellArg(input, interpolation);",
          "79:               assert.strictEqual(output, input);",
          "80:             });",
          "83:           describe(\"backticks ('`')\", function () {",
          "84:             it(\"does nothing to one backtick\", function () {",
          "85:               const input = \"` ls -al\";",
          "86:               const output = escapeShellArg(input, interpolation);",
          "87:               assert.strictEqual(output, input);",
          "88:             });",
          "90:             it(\"does nothing to multiple backticks\", function () {",
          "91:               const input = \"` echo `Hello world!`\";",
          "92:               const output = escapeShellArg(input, interpolation);",
          "93:               assert.strictEqual(output, input);",
          "94:             });",
          "97:           describe(\"backslashes ('\\\\')\", function () {",
          "98:             it(\"does nothing to one backslash\", function () {",
          "99:               const input = \"foo\\\\bar\";",
          "100:               const output = escapeShellArg(input, interpolation);",
          "101:               assert.strictEqual(output, input);",
          "102:             });",
          "104:             it(\"does nothing to multiple backslashes\", function () {",
          "105:               const input = \"praise\\\\the\\\\sun\";",
          "106:               const output = escapeShellArg(input, interpolation);",
          "107:               assert.strictEqual(output, input);",
          "108:             });",
          "111:           describe(\"tilde ('~')\", function () {",
          "112:             it(\"does nothing to one tilde\", function () {",
          "113:               const input = \"~foobar\";",
          "114:               const output = escapeShellArg(input, interpolation);",
          "115:               assert.strictEqual(output, input);",
          "116:             });",
          "118:             it(\"does nothing to multiple tildes\", function () {",
          "119:               const input = \"~foo~bar\";",
          "120:               const output = escapeShellArg(input, interpolation);",
          "121:               assert.strictEqual(output, input);",
          "122:             });",
          "125:           describe(\"hashtags ('#')\", function () {",
          "126:             it(\"does nothing to one hashtag\", function () {",
          "127:               const input = \"#foobar\";",
          "128:               const output = escapeShellArg(input, interpolation);",
          "129:               assert.strictEqual(output, input);",
          "130:             });",
          "132:             it(\"does nothing to multiple hashtags\", function () {",
          "133:               const input = \"#foo#bar\";",
          "134:               const output = escapeShellArg(input, interpolation);",
          "135:               assert.strictEqual(output, input);",
          "136:             });",
          "139:           describe(\"dollar signs ('$')\", function () {",
          "140:             it(\"does nothing to one dollar sign\", function () {",
          "141:               const input = \"foo$bar\";",
          "142:               const output = escapeShellArg(input, interpolation);",
          "143:               assert.strictEqual(output, input);",
          "144:             });",
          "146:             it(\"does nothing to multiple dollar signs\", function () {",
          "147:               const input = \"praise$the$sun\";",
          "148:               const output = escapeShellArg(input, interpolation);",
          "149:               assert.strictEqual(output, input);",
          "150:             });",
          "153:           describe(\"semicolons (';')\", function () {",
          "154:             it(\"does nothing to one semicolon\", function () {",
          "155:               const input = \"foo;bar\";",
          "156:               const output = escapeShellArg(input, interpolation);",
          "157:               assert.strictEqual(output, input);",
          "158:             });",
          "160:             it(\"does nothing to multiple semicolons\", function () {",
          "161:               const input = \"praise;the;sun\";",
          "162:               const output = escapeShellArg(input, interpolation);",
          "163:               assert.strictEqual(output, input);",
          "164:             });",
          "167:           describe(\"ampersands ('&')\", function () {",
          "168:             it(\"does nothing to one ampersand\", function () {",
          "169:               const input = \"foo&bar\";",
          "170:               const output = escapeShellArg(input, interpolation);",
          "171:               assert.strictEqual(output, input);",
          "172:             });",
          "174:             it(\"does nothing to multiple ampersands\", function () {",
          "175:               const input = \"praise&the&sun\";",
          "176:               const output = escapeShellArg(input, interpolation);",
          "177:               assert.strictEqual(output, input);",
          "178:             });",
          "181:           describe(\"pipes ('|')\", function () {",
          "182:             it(\"does nothing to one pipe\", function () {",
          "183:               const input = \"foo|bar\";",
          "184:               const output = escapeShellArg(input, interpolation);",
          "185:               assert.strictEqual(output, input);",
          "186:             });",
          "188:             it(\"does nothing to multiple pipes\", function () {",
          "189:               const input = \"praise|the|sun\";",
          "190:               const output = escapeShellArg(input, interpolation);",
          "191:               assert.strictEqual(output, input);",
          "192:             });",
          "195:           describe(\"asterisks ('*')\", function () {",
          "196:             it(\"does nothing to one asterisk\", function () {",
          "197:               const input = \"foo*bar\";",
          "198:               const output = escapeShellArg(input, interpolation);",
          "199:               assert.strictEqual(output, input);",
          "200:             });",
          "202:             it(\"does nothing to multiple asterisks\", function () {",
          "203:               const input = \"praise*the*sun\";",
          "204:               const output = escapeShellArg(input, interpolation);",
          "205:               assert.strictEqual(output, input);",
          "206:             });",
          "209:           describe(\"question marks ('?')\", function () {",
          "210:             it(\"does nothing to one question mark\", function () {",
          "211:               const input = \"foo?bar\";",
          "212:               const output = escapeShellArg(input, interpolation);",
          "213:               assert.strictEqual(output, input);",
          "214:             });",
          "216:             it(\"does nothing to multiple question marks\", function () {",
          "217:               const input = \"praise?the?sun\";",
          "218:               const output = escapeShellArg(input, interpolation);",
          "219:               assert.strictEqual(output, input);",
          "220:             });",
          "223:           describe(\"equals sign ('=')\", function () {",
          "224:             it(\"does nothing to an equals sign at the start\", function () {",
          "225:               const input = \"=foobar\";",
          "226:               const output = escapeShellArg(input, interpolation);",
          "227:               assert.strictEqual(output, input);",
          "228:             });",
          "230:             it(\"does nothing to an equals sign not at the start\", function () {",
          "231:               const input = \"foo=bar\";",
          "232:               const output = escapeShellArg(input, interpolation);",
          "233:               assert.strictEqual(output, input);",
          "234:             });",
          "236:             it(\"does nothing to escapes the equals sign at the start\", function () {",
          "237:               const input = \"=foo=bar\";",
          "238:               const output = escapeShellArg(input, interpolation);",
          "239:               assert.strictEqual(output, input);",
          "240:             });",
          "243:           describe(\"parentheses ('(', ')')\", function () {",
          "244:             it(\"does nothing to one opening parenthesis\", function () {",
          "245:               const input = \"foo(bar\";",
          "246:               const output = escapeShellArg(input, interpolation);",
          "247:               assert.strictEqual(output, input);",
          "248:             });",
          "250:             it(\"does nothing to multiple opening parentheses\", function () {",
          "251:               const input = \"praise(the(sun\";",
          "252:               const output = escapeShellArg(input, interpolation);",
          "253:               assert.strictEqual(output, input);",
          "254:             });",
          "256:             it(\"does nothing to one closing parenthesis\", function () {",
          "257:               const input = \"foo(bar\";",
          "258:               const output = escapeShellArg(input, interpolation);",
          "259:               assert.strictEqual(output, input);",
          "260:             });",
          "262:             it(\"does nothing to multiple closing parentheses\", function () {",
          "263:               const input = \"praise(the(sun\";",
          "264:               const output = escapeShellArg(input, interpolation);",
          "265:               assert.strictEqual(output, input);",
          "266:             });",
          "268:             it(\"does nothing to a pair of parentheses\", function () {",
          "269:               const input = \"praise(the)sun\";",
          "270:               const output = escapeShellArg(input, interpolation);",
          "271:               assert.strictEqual(output, input);",
          "272:             });",
          "275:           describe(\"square brackets ('[', ']')\", function () {",
          "276:             it(\"does nothing to one opening square bracket\", function () {",
          "277:               const input = \"foo[bar\";",
          "278:               const output = escapeShellArg(input, interpolation);",
          "279:               assert.strictEqual(output, input);",
          "280:             });",
          "282:             it(\"does nothing to multiple opening square brackets\", function () {",
          "283:               const input = \"praise[the[sun\";",
          "284:               const output = escapeShellArg(input, interpolation);",
          "285:               assert.strictEqual(output, input);",
          "286:             });",
          "288:             it(\"does nothing to one closing square bracket\", function () {",
          "289:               const input = \"foo]bar\";",
          "290:               const output = escapeShellArg(input, interpolation);",
          "291:               assert.strictEqual(output, input);",
          "292:             });",
          "294:             it(\"does nothing to multiple closing square brackets\", function () {",
          "295:               const input = \"praise]the]sun\";",
          "296:               const output = escapeShellArg(input, interpolation);",
          "297:               assert.strictEqual(output, input);",
          "298:             });",
          "300:             it(\"does nothing to a pair of square brackets\", function () {",
          "301:               const input = \"praise[the]sun\";",
          "302:               const output = escapeShellArg(input, interpolation);",
          "303:               assert.strictEqual(output, input);",
          "304:             });",
          "307:           describe(\"curly brackets ('{', '}')\", function () {",
          "308:             it(\"does nothing to one opening curly bracket\", function () {",
          "309:               const input = \"foo{bar\";",
          "310:               const output = escapeShellArg(input, interpolation);",
          "311:               assert.strictEqual(output, input);",
          "312:             });",
          "314:             it(\"does nothing to multiple opening curly brackets\", function () {",
          "315:               const input = \"praise{the{sun\";",
          "316:               const output = escapeShellArg(input, interpolation);",
          "317:               assert.strictEqual(output, input);",
          "318:             });",
          "320:             it(\"does nothing to one closing curly bracket\", function () {",
          "321:               const input = \"foo}bar\";",
          "322:               const output = escapeShellArg(input, interpolation);",
          "323:               assert.strictEqual(output, input);",
          "324:             });",
          "326:             it(\"does nothing to multiple closing curly brackets\", function () {",
          "327:               const input = \"praise}the}sun\";",
          "328:               const output = escapeShellArg(input, interpolation);",
          "329:               assert.strictEqual(output, input);",
          "330:             });",
          "332:             it(\"does nothing to a pair of curly brackets\", function () {",
          "333:               const input = \"praise{the}sun\";",
          "334:               const output = escapeShellArg(input, interpolation);",
          "335:               assert.strictEqual(output, input);",
          "336:             });",
          "339:           describe(\"angle brackets ('<', '>')\", function () {",
          "340:             it(\"does nothing to one left-angle bracket\", function () {",
          "341:               const input = \"foo<bar\";",
          "342:               const output = escapeShellArg(input, interpolation);",
          "343:               assert.strictEqual(output, input);",
          "346:             it(\"does nothing to multiple left-angle brackets\", function () {",
          "347:               const input = \"praise<the<sun\";",
          "348:               const output = escapeShellArg(input, interpolation);",
          "349:               assert.strictEqual(output, input);",
          "352:             it(\"does nothing to one right-angle bracket\", function () {",
          "353:               const input = \"foo>bar\";",
          "354:               const output = escapeShellArg(input, interpolation);",
          "355:               assert.strictEqual(output, input);",
          "358:             it(\"does nothing to multiple right-angle brackets\", function () {",
          "359:               const input = \"praise>the>sun\";",
          "360:               const output = escapeShellArg(input, interpolation);",
          "361:               assert.strictEqual(output, input);",
          "363:           });",
          "364:         });",
          "366:         describe(\"With interpolation\", function () {",
          "367:           const interpolation = true;",
          "369:           it(\"returns the input if nothing has to be escaped\", function () {",
          "370:             const input = `Hello world!`;",
          "371:             const output = escapeShellArg(input, interpolation);",
          "372:             assert.strictEqual(output, input);",
          "373:           });",
          "375:           describe(\"null characters\", function () {",
          "376:             it(\"removes one null character\", function () {",
          "377:               const input = `foo ls${nullChar} -al bar`;",
          "378:               const output = escapeShellArg(input, interpolation);",
          "379:               assert.strictEqual(output, `foo ls -al bar`);",
          "382:             it(\"removes multiple null characters\", function () {",
          "383:               const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "384:               const output = escapeShellArg(input, interpolation);",
          "385:               assert.strictEqual(output, `foo ls -al bar`);",
          "387:           });",
          "389:           describe('single quotes (\"\\'\")', function () {",
          "390:             it(\"escapes one single quote\", function () {",
          "391:               const input = `' ls -al`;",
          "392:               const output = escapeShellArg(input, interpolation);",
          "393:               assert.strictEqual(output, `\\\\' ls -al`);",
          "396:             it(\"escapes multiple single quotes\", function () {",
          "397:               const input = `' echo 'Hello world!'`;",
          "398:               const output = escapeShellArg(input, interpolation);",
          "399:               assert.strictEqual(output, `\\\\' echo \\\\'Hello world!\\\\'`);",
          "401:           });",
          "403:           describe(\"double quotes ('\\\"')\", function () {",
          "404:             it(\"escapes one double quote\", function () {",
          "405:               const input = `\" ls -al`;",
          "406:               const output = escapeShellArg(input, interpolation);",
          "407:               assert.strictEqual(output, `\\\\\" ls -al`);",
          "410:             it(\"escapes multiple double quotes\", function () {",
          "411:               const input = `\" echo \"Hello world!\"`;",
          "412:               const output = escapeShellArg(input, interpolation);",
          "413:               assert.strictEqual(output, `\\\\\" echo \\\\\"Hello world!\\\\\"`);",
          "415:           });",
          "417:           describe(\"backticks ('`')\", function () {",
          "418:             it(\"escapes one backtick\", function () {",
          "419:               const input = \"` ls -al\";",
          "420:               const output = escapeShellArg(input, interpolation);",
          "421:               assert.strictEqual(output, \"\\\\` ls -al\");",
          "424:             it(\"escapes multiple backticks\", function () {",
          "425:               const input = \"` echo `Hello world!`\";",
          "426:               const output = escapeShellArg(input, interpolation);",
          "427:               assert.strictEqual(output, \"\\\\` echo \\\\`Hello world!\\\\`\");",
          "429:           });",
          "431:           describe(\"backslashes ('\\\\')\", function () {",
          "432:             it(\"escapes one backslash\", function () {",
          "433:               const input = \"foo\\\\bar\";",
          "434:               const output = escapeShellArg(input, interpolation);",
          "435:               assert.strictEqual(output, \"foo\\\\\\\\bar\");",
          "438:             it(\"escapes multiple backslashes\", function () {",
          "439:               const input = \"praise\\\\the\\\\sun\";",
          "440:               const output = escapeShellArg(input, interpolation);",
          "441:               assert.strictEqual(output, \"praise\\\\\\\\the\\\\\\\\sun\");",
          "443:           });",
          "445:           describe(\"tilde ('~')\", function () {",
          "446:             it(\"escapes a tilde at the start\", function () {",
          "447:               const input = \"~foobar\";",
          "448:               const output = escapeShellArg(input, interpolation);",
          "449:               assert.strictEqual(output, \"\\\\~foobar\");",
          "452:             it(\"does nothing to a tilde in the middle\", function () {",
          "453:               const input = \"foo~bar\";",
          "454:               const output = escapeShellArg(input, interpolation);",
          "458:             it(\"only escapes the tilde at the start\", function () {",
          "459:               const input = \"~foo~bar\";",
          "460:               const output = escapeShellArg(input, interpolation);",
          "461:               assert.strictEqual(output, \"\\\\~foo~bar\");",
          "464:             describe(\"combined with equals ('=')\", function () {",
          "465:               it(\"escapes a tilde right after '=' at the end\", function () {",
          "466:                 const input = \"foobar=~\";",
          "467:                 const output = escapeShellArg(input, interpolation);",
          "468:                 assert.strictEqual(output, \"foobar=\\\\~\");",
          "469:               });",
          "471:               it(\"escapes a tilde after '=' with a colon in between\", function () {",
          "472:                 const input = \"foobar=:~\";",
          "473:                 const output = escapeShellArg(input, interpolation);",
          "474:                 assert.strictEqual(output, \"foobar=:\\\\~\");",
          "475:               });",
          "477:               it(\"escapes a tilde after '=' with a colon and text in between\", function () {",
          "478:                 const input = \"foo=bar:~\";",
          "479:                 const output = escapeShellArg(input, interpolation);",
          "480:                 assert.strictEqual(output, \"foo=bar:\\\\~\");",
          "481:               });",
          "483:               it(\"escapes a tilde right after '=' with a trailing colon\", function () {",
          "484:                 const input = \"foobar=~:\";",
          "485:                 const output = escapeShellArg(input, interpolation);",
          "486:                 assert.strictEqual(output, \"foobar=\\\\~:\");",
          "487:               });",
          "489:               it(\"escapes a tilde right after '=' with a trailing equals\", function () {",
          "490:                 const input = \"foobar=~=\";",
          "491:                 const output = escapeShellArg(input, interpolation);",
          "492:                 assert.strictEqual(output, \"foobar=\\\\~=\");",
          "493:               });",
          "495:               it(\"escapes a tilde right after '=' with a trailing plus\", function () {",
          "496:                 const input = \"foobar=~-\";",
          "497:                 const output = escapeShellArg(input, interpolation);",
          "498:                 assert.strictEqual(output, \"foobar=\\\\~-\");",
          "499:               });",
          "501:               it(\"escapes a tilde right after '=' with a trailing plus\", function () {",
          "502:                 const input = \"foobar=~+\";",
          "503:                 const output = escapeShellArg(input, interpolation);",
          "504:                 assert.strictEqual(output, \"foobar=\\\\~+\");",
          "505:               });",
          "507:               it(\"escapes a tilde right after '=' with a trailing forward slash\", function () {",
          "508:                 const input = \"foobar=~/\";",
          "509:                 const output = escapeShellArg(input, interpolation);",
          "510:                 assert.strictEqual(output, \"foobar=\\\\~/\");",
          "511:               });",
          "513:               it(\"escapes a tilde right after '=' with a trailing zero\", function () {",
          "514:                 const input = \"foobar=~0\";",
          "515:                 const output = escapeShellArg(input, interpolation);",
          "516:                 assert.strictEqual(output, \"foobar=\\\\~0\");",
          "517:               });",
          "519:               it(\"escapes a tilde right after '=' with a trailing whitespace\", function () {",
          "520:                 const input = \"foobar=~ \";",
          "521:                 const output = escapeShellArg(input, interpolation);",
          "522:                 assert.strictEqual(output, \"foobar=\\\\~ \");",
          "523:               });",
          "525:               it(\"escapes a tilde right after '=' with a trailing colon and text\", function () {",
          "526:                 const input = \"foo=~:bar\";",
          "527:                 const output = escapeShellArg(input, interpolation);",
          "528:                 assert.strictEqual(output, \"foo=\\\\~:bar\");",
          "529:               });",
          "531:               it(\"escapes a tilde right after '=' with a trailing colon and text\", function () {",
          "532:                 const input = \"foo=~:bar\";",
          "533:                 const output = escapeShellArg(input, interpolation);",
          "534:                 assert.strictEqual(output, \"foo=\\\\~:bar\");",
          "535:               });",
          "537:               it(\"escapes a tilde after '=' sandwiched between colons\", function () {",
          "538:                 const input = \"foobar=:~:\";",
          "539:                 const output = escapeShellArg(input, interpolation);",
          "540:                 assert.strictEqual(output, \"foobar=:\\\\~:\");",
          "541:               });",
          "543:               it(\"escapes a tilde after '=' sandwiched between colons and text before\", function () {",
          "544:                 const input = \"foo=bar:~:\";",
          "545:                 const output = escapeShellArg(input, interpolation);",
          "546:                 assert.strictEqual(output, \"foo=bar:\\\\~:\");",
          "547:               });",
          "549:               it(\"escapes a tilde after '=' sandwiched between colons and text after\", function () {",
          "550:                 const input = \"foo=:~:bar\";",
          "551:                 const output = escapeShellArg(input, interpolation);",
          "552:                 assert.strictEqual(output, \"foo=:\\\\~:bar\");",
          "553:               });",
          "555:               it(\"escapes a tilde after '=' sandwiched between colons and text\", function () {",
          "556:                 const input = \"praise=the:~:sun\";",
          "557:                 const output = escapeShellArg(input, interpolation);",
          "558:                 assert.strictEqual(output, \"praise=the:\\\\~:sun\");",
          "559:               });",
          "561:               it(\"escapes multiple tildes after '=' separated by colons\", function () {",
          "562:                 const input = \"foobar=~:~\";",
          "563:                 const output = escapeShellArg(input, interpolation);",
          "564:                 assert.strictEqual(output, \"foobar=\\\\~:\\\\~\");",
          "565:               });",
          "567:               it(\"does nothing to a tilde with trailing text after '='\", function () {",
          "568:                 const input = \"foo=~bar\";",
          "569:                 const output = escapeShellArg(input, interpolation);",
          "570:                 assert.strictEqual(output, input);",
          "571:               });",
          "573:               it(\"does nothing to a tilde with leading text after '='\", function () {",
          "574:                 const input = \"foo=bar~\";",
          "575:                 const output = escapeShellArg(input, interpolation);",
          "576:                 assert.strictEqual(output, input);",
          "577:               });",
          "579:               it(\"does nothing to a tilde before '='\", function () {",
          "580:                 const input = \"foo~bar=\";",
          "581:                 const output = escapeShellArg(input, interpolation);",
          "582:                 assert.strictEqual(output, \"foo~bar=\");",
          "583:               });",
          "585:               it(\"only escapes a tilde after the '='\", function () {",
          "586:                 const input = \"foo~bar=~\";",
          "587:                 const output = escapeShellArg(input, interpolation);",
          "588:                 assert.strictEqual(output, \"foo~bar=\\\\~\");",
          "589:               });",
          "593:           describe(\"hashtags ('#')\", function () {",
          "594:             it(\"escapes a hashtag at the start\", function () {",
          "595:               const input = \"#foobar\";",
          "596:               const output = escapeShellArg(input, interpolation);",
          "597:               assert.strictEqual(output, \"\\\\#foobar\");",
          "598:             });",
          "600:             it(\"does nothing to a hashtag not at the start\", function () {",
          "601:               const input = \"foo#bar\";",
          "602:               const output = escapeShellArg(input, interpolation);",
          "603:               assert.strictEqual(output, input);",
          "604:             });",
          "606:             it(\"only escapes the hashtag at the start\", function () {",
          "607:               const input = \"#foo#bar\";",
          "608:               const output = escapeShellArg(input, interpolation);",
          "609:               assert.strictEqual(output, \"\\\\#foo#bar\");",
          "610:             });",
          "613:           describe(\"dollar signs ('$')\", function () {",
          "614:             it(\"escapes one dollar sign\", function () {",
          "615:               const input = \"foo$bar\";",
          "616:               const output = escapeShellArg(input, interpolation);",
          "617:               assert.strictEqual(output, \"foo\\\\$bar\");",
          "618:             });",
          "620:             it(\"escapes multiple dollar signs\", function () {",
          "621:               const input = \"praise$the$sun\";",
          "622:               const output = escapeShellArg(input, interpolation);",
          "623:               assert.strictEqual(output, \"praise\\\\$the\\\\$sun\");",
          "624:             });",
          "627:           describe(\"semicolons (';')\", function () {",
          "628:             it(\"escapes one semicolon\", function () {",
          "629:               const input = \"foo;bar\";",
          "630:               const output = escapeShellArg(input, interpolation);",
          "631:               assert.strictEqual(output, \"foo\\\\;bar\");",
          "632:             });",
          "634:             it(\"escapes multiple semicolons\", function () {",
          "635:               const input = \"praise;the;sun\";",
          "636:               const output = escapeShellArg(input, interpolation);",
          "637:               assert.strictEqual(output, \"praise\\\\;the\\\\;sun\");",
          "638:             });",
          "641:           describe(\"ampersands ('&')\", function () {",
          "642:             it(\"escapes one ampersand\", function () {",
          "643:               const input = \"foo&bar\";",
          "644:               const output = escapeShellArg(input, interpolation);",
          "645:               assert.strictEqual(output, \"foo\\\\&bar\");",
          "646:             });",
          "648:             it(\"escapes multiple ampersands\", function () {",
          "649:               const input = \"praise&the&sun\";",
          "650:               const output = escapeShellArg(input, interpolation);",
          "651:               assert.strictEqual(output, \"praise\\\\&the\\\\&sun\");",
          "652:             });",
          "655:           describe(\"pipes ('|')\", function () {",
          "656:             it(\"escapes one pipe\", function () {",
          "657:               const input = \"foo|bar\";",
          "658:               const output = escapeShellArg(input, interpolation);",
          "659:               assert.strictEqual(output, \"foo\\\\|bar\");",
          "660:             });",
          "662:             it(\"escapes multiple pipes\", function () {",
          "663:               const input = \"praise|the|sun\";",
          "664:               const output = escapeShellArg(input, interpolation);",
          "665:               assert.strictEqual(output, \"praise\\\\|the\\\\|sun\");",
          "666:             });",
          "669:           describe(\"asterisks ('*')\", function () {",
          "670:             it(\"escapes one asterisk\", function () {",
          "671:               const input = \"foo*bar\";",
          "672:               const output = escapeShellArg(input, interpolation);",
          "673:               assert.strictEqual(output, \"foo\\\\*bar\");",
          "674:             });",
          "676:             it(\"escapes multiple asterisks\", function () {",
          "677:               const input = \"praise*the*sun\";",
          "678:               const output = escapeShellArg(input, interpolation);",
          "679:               assert.strictEqual(output, \"praise\\\\*the\\\\*sun\");",
          "680:             });",
          "683:           describe(\"question marks ('?')\", function () {",
          "684:             it(\"escapes one question mark\", function () {",
          "685:               const input = \"foo?bar\";",
          "686:               const output = escapeShellArg(input, interpolation);",
          "687:               assert.strictEqual(output, \"foo\\\\?bar\");",
          "688:             });",
          "690:             it(\"escapes multiple question marks\", function () {",
          "691:               const input = \"praise?the?sun\";",
          "692:               const output = escapeShellArg(input, interpolation);",
          "693:               assert.strictEqual(output, \"praise\\\\?the\\\\?sun\");",
          "694:             });",
          "697:           describe(\"equals sign ('=')\", function () {",
          "698:             it(\"does nothing to an equals sign at the start\", function () {",
          "699:               const input = \"=foobar\";",
          "700:               const output = escapeShellArg(input, interpolation);",
          "701:               assert.strictEqual(output, input);",
          "702:             });",
          "704:             it(\"does nothing to an equals sign not at the start\", function () {",
          "705:               const input = \"foo=bar\";",
          "706:               const output = escapeShellArg(input, interpolation);",
          "707:               assert.strictEqual(output, input);",
          "708:             });",
          "710:             it(\"does nothing to escapes the equals sign at the start\", function () {",
          "711:               const input = \"=foo=bar\";",
          "712:               const output = escapeShellArg(input, interpolation);",
          "713:               assert.strictEqual(output, input);",
          "714:             });",
          "717:           describe(\"parentheses ('(', ')')\", function () {",
          "718:             it(\"escapes one opening parenthesis\", function () {",
          "719:               const input = \"foo(bar\";",
          "720:               const output = escapeShellArg(input, interpolation);",
          "721:               assert.strictEqual(output, \"foo\\\\(bar\");",
          "722:             });",
          "724:             it(\"escapes multiple opening parentheses\", function () {",
          "725:               const input = \"praise(the(sun\";",
          "726:               const output = escapeShellArg(input, interpolation);",
          "727:               assert.strictEqual(output, \"praise\\\\(the\\\\(sun\");",
          "728:             });",
          "730:             it(\"escapes one closing parenthesis\", function () {",
          "731:               const input = \"foo)bar\";",
          "732:               const output = escapeShellArg(input, interpolation);",
          "733:               assert.strictEqual(output, \"foo\\\\)bar\");",
          "734:             });",
          "736:             it(\"escapes multiple closing parentheses\", function () {",
          "737:               const input = \"praise)the)sun\";",
          "738:               const output = escapeShellArg(input, interpolation);",
          "739:               assert.strictEqual(output, \"praise\\\\)the\\\\)sun\");",
          "740:             });",
          "742:             it(\"escapes a pair of parentheses\", function () {",
          "743:               const input = \"praise(the)sun\";",
          "744:               const output = escapeShellArg(input, interpolation);",
          "745:               assert.strictEqual(output, \"praise\\\\(the\\\\)sun\");",
          "746:             });",
          "749:           describe(\"square brackets ('[', ']')\", function () {",
          "750:             it(\"does nothing to one opening square bracket\", function () {",
          "751:               const input = \"foo[bar\";",
          "752:               const output = escapeShellArg(input, interpolation);",
          "753:               assert.strictEqual(output, input);",
          "754:             });",
          "756:             it(\"does nothing to multiple opening square brackets\", function () {",
          "757:               const input = \"praise[the[sun\";",
          "758:               const output = escapeShellArg(input, interpolation);",
          "759:               assert.strictEqual(output, input);",
          "760:             });",
          "762:             it(\"does nothing to one closing square bracket\", function () {",
          "763:               const input = \"foo]bar\";",
          "764:               const output = escapeShellArg(input, interpolation);",
          "765:               assert.strictEqual(output, input);",
          "766:             });",
          "768:             it(\"does nothing to multiple closing square brackets\", function () {",
          "769:               const input = \"praise]the]sun\";",
          "770:               const output = escapeShellArg(input, interpolation);",
          "771:               assert.strictEqual(output, input);",
          "772:             });",
          "774:             it(\"does nothing to a pair of square brackets\", function () {",
          "775:               const input = \"praise[the]sun\";",
          "776:               const output = escapeShellArg(input, interpolation);",
          "777:               assert.strictEqual(output, input);",
          "778:             });",
          "781:           describe(\"curly brackets ('{', '}')\", function () {",
          "782:             it(\"does nothing to one opening curly bracket\", function () {",
          "783:               const input = \"foo{bar\";",
          "784:               const output = escapeShellArg(input, interpolation);",
          "785:               assert.strictEqual(output, input);",
          "786:             });",
          "788:             it(\"does nothing to multiple opening curly brackets\", function () {",
          "789:               const input = \"praise{the{sun\";",
          "790:               const output = escapeShellArg(input, interpolation);",
          "791:               assert.strictEqual(output, input);",
          "792:             });",
          "794:             it(\"does nothing to one closing curly bracket\", function () {",
          "795:               const input = \"foo}bar\";",
          "796:               const output = escapeShellArg(input, interpolation);",
          "797:               assert.strictEqual(output, input);",
          "798:             });",
          "800:             it(\"does nothing to multiple closing curly brackets\", function () {",
          "801:               const input = \"praise}the}sun\";",
          "802:               const output = escapeShellArg(input, interpolation);",
          "803:               assert.strictEqual(output, input);",
          "804:             });",
          "806:             it(\"does nothing to a pair of curly brackets with text\", function () {",
          "807:               const input = \"praise{the}sun\";",
          "808:               const output = escapeShellArg(input, interpolation);",
          "809:               assert.strictEqual(output, input);",
          "810:             });",
          "812:             it(\"escapes a pair of curly brackets with a period\", function () {",
          "813:               const input = \"foo{0..2}bar\";",
          "814:               const output = escapeShellArg(input, interpolation);",
          "815:               assert.strictEqual(output, \"foo\\\\{0..2}bar\");",
          "816:             });",
          "818:             it(\"escapes a pair of curly brackets with a comma\", function () {",
          "819:               const input = \"foo{bar,baz}\";",
          "820:               const output = escapeShellArg(input, interpolation);",
          "821:               assert.strictEqual(output, \"foo\\\\{bar,baz}\");",
          "822:             });",
          "824:             it(\"escapes a pair of nested curly brackets\", function () {",
          "825:               const input = \"foo{a,b{c,d},e}bar\";",
          "826:               const output = escapeShellArg(input, interpolation);",
          "827:               assert.strictEqual(output, \"foo\\\\{a,b\\\\{c,d},e}bar\");",
          "828:             });",
          "831:           describe(\"angle brackets ('<', '>')\", function () {",
          "832:             it(\"escapes one left-angle bracket\", function () {",
          "833:               const input = \"foo<bar\";",
          "834:               const output = escapeShellArg(input, interpolation);",
          "835:               assert.strictEqual(output, \"foo\\\\<bar\");",
          "836:             });",
          "838:             it(\"escapes multiple left-angle brackets\", function () {",
          "839:               const input = \"praise<the<sun\";",
          "840:               const output = escapeShellArg(input, interpolation);",
          "841:               assert.strictEqual(output, \"praise\\\\<the\\\\<sun\");",
          "842:             });",
          "844:             it(\"escapes one right-angle bracket\", function () {",
          "845:               const input = \"foo>bar\";",
          "846:               const output = escapeShellArg(input, interpolation);",
          "847:               assert.strictEqual(output, \"foo\\\\>bar\");",
          "848:             });",
          "850:             it(\"escapes multiple right-angle brackets\", function () {",
          "851:               const input = \"praise>the>sun\";",
          "852:               const output = escapeShellArg(input, interpolation);",
          "853:               assert.strictEqual(output, \"praise\\\\>the\\\\>sun\");",
          "854:             });",
          "858:     }",
          "860:     describe(binZsh, function () {",
          "861:       const escapeShellArg = unix.getEscapeFunction(binZsh);",
          "868:           const output = escapeShellArg(input, interpolation);",
          "875:             const output = escapeShellArg(input, interpolation);",
          "881:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "870:         describe('single quotes (\"\\'\")', function () {",
          "871:           it(\"escapes one single quote\", function () {",
          "872:             const input = `' ls -al`;",
          "874:             assert.strictEqual(output, `'\\\\'' ls -al`);",
          "875:           });",
          "877:           it(\"escapes multiple single quotes\", function () {",
          "878:             const input = `' echo 'Hello world!'`;",
          "880:             assert.strictEqual(output, `'\\\\'' echo '\\\\''Hello world!'\\\\''`);",
          "881:           });",
          "882:         });",
          "",
          "[Removed Lines]",
          "873:             const output = escapeShellArg(input, shell, interpolation);",
          "879:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "889:             const output = escapeShellArg(input, interpolation);",
          "895:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "884:         describe(\"double quotes ('\\\"')\", function () {",
          "885:           it(\"does nothing to one double quote\", function () {",
          "886:             const input = `\" ls -al`;",
          "888:             assert.strictEqual(output, input);",
          "889:           });",
          "891:           it(\"does nothing to multiple double quotes\", function () {",
          "892:             const input = `\" echo \"Hello world!\"`;",
          "894:             assert.strictEqual(output, input);",
          "895:           });",
          "896:         });",
          "",
          "[Removed Lines]",
          "887:             const output = escapeShellArg(input, shell, interpolation);",
          "893:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "903:             const output = escapeShellArg(input, interpolation);",
          "909:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "898:         describe(\"backticks ('`')\", function () {",
          "899:           it(\"does nothing to one backtick\", function () {",
          "900:             const input = \"` ls -al\";",
          "902:             assert.strictEqual(output, input);",
          "903:           });",
          "905:           it(\"does nothing to multiple backticks\", function () {",
          "906:             const input = \"` echo `Hello world!`\";",
          "908:             assert.strictEqual(output, input);",
          "909:           });",
          "910:         });",
          "",
          "[Removed Lines]",
          "901:             const output = escapeShellArg(input, shell, interpolation);",
          "907:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "917:             const output = escapeShellArg(input, interpolation);",
          "923:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "912:         describe(\"backslashes ('\\\\')\", function () {",
          "913:           it(\"does nothing to one backslash\", function () {",
          "914:             const input = \"foo\\\\bar\";",
          "916:             assert.strictEqual(output, input);",
          "917:           });",
          "919:           it(\"does nothing to multiple backslashes\", function () {",
          "920:             const input = \"praise\\\\the\\\\sun\";",
          "922:             assert.strictEqual(output, input);",
          "923:           });",
          "924:         });",
          "",
          "[Removed Lines]",
          "915:             const output = escapeShellArg(input, shell, interpolation);",
          "921:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "931:             const output = escapeShellArg(input, interpolation);",
          "937:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "926:         describe(\"tilde ('~')\", function () {",
          "927:           it(\"does nothing to one tilde\", function () {",
          "928:             const input = \"~foobar\";",
          "930:             assert.strictEqual(output, input);",
          "931:           });",
          "933:           it(\"does nothing to multiple tildes\", function () {",
          "934:             const input = \"~foo~bar\";",
          "936:             assert.strictEqual(output, input);",
          "937:           });",
          "938:         });",
          "",
          "[Removed Lines]",
          "929:             const output = escapeShellArg(input, shell, interpolation);",
          "935:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "945:             const output = escapeShellArg(input, interpolation);",
          "951:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "940:         describe(\"hashtags ('#')\", function () {",
          "941:           it(\"does nothing to one hashtag\", function () {",
          "942:             const input = \"#foobar\";",
          "944:             assert.strictEqual(output, input);",
          "945:           });",
          "947:           it(\"does nothing to multiple hashtags\", function () {",
          "948:             const input = \"#foo#bar\";",
          "950:             assert.strictEqual(output, input);",
          "951:           });",
          "952:         });",
          "",
          "[Removed Lines]",
          "943:             const output = escapeShellArg(input, shell, interpolation);",
          "949:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "959:             const output = escapeShellArg(input, interpolation);",
          "965:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "954:         describe(\"dollar signs ('$')\", function () {",
          "955:           it(\"does nothing to one dollar sign\", function () {",
          "956:             const input = \"foo$bar\";",
          "958:             assert.strictEqual(output, input);",
          "959:           });",
          "961:           it(\"does nothing to multiple dollar signs\", function () {",
          "962:             const input = \"praise$the$sun\";",
          "964:             assert.strictEqual(output, input);",
          "965:           });",
          "966:         });",
          "",
          "[Removed Lines]",
          "957:             const output = escapeShellArg(input, shell, interpolation);",
          "963:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "973:             const output = escapeShellArg(input, interpolation);",
          "979:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "968:         describe(\"semicolons (';')\", function () {",
          "969:           it(\"does nothing to one semicolon\", function () {",
          "970:             const input = \"foo;bar\";",
          "972:             assert.strictEqual(output, input);",
          "973:           });",
          "975:           it(\"does nothing to multiple semicolons\", function () {",
          "976:             const input = \"praise;the;sun\";",
          "978:             assert.strictEqual(output, input);",
          "979:           });",
          "980:         });",
          "",
          "[Removed Lines]",
          "971:             const output = escapeShellArg(input, shell, interpolation);",
          "977:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "987:             const output = escapeShellArg(input, interpolation);",
          "993:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "982:         describe(\"ampersands ('&')\", function () {",
          "983:           it(\"does nothing to one ampersand\", function () {",
          "984:             const input = \"foo&bar\";",
          "986:             assert.strictEqual(output, input);",
          "987:           });",
          "989:           it(\"does nothing to multiple ampersands\", function () {",
          "990:             const input = \"praise&the&sun\";",
          "992:             assert.strictEqual(output, input);",
          "993:           });",
          "994:         });",
          "",
          "[Removed Lines]",
          "985:             const output = escapeShellArg(input, shell, interpolation);",
          "991:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1001:             const output = escapeShellArg(input, interpolation);",
          "1007:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "996:         describe(\"pipes ('|')\", function () {",
          "997:           it(\"does nothing to one pipe\", function () {",
          "998:             const input = \"foo|bar\";",
          "1000:             assert.strictEqual(output, input);",
          "1001:           });",
          "1003:           it(\"does nothing to multiple pipes\", function () {",
          "1004:             const input = \"praise|the|sun\";",
          "1006:             assert.strictEqual(output, input);",
          "1007:           });",
          "1008:         });",
          "",
          "[Removed Lines]",
          "999:             const output = escapeShellArg(input, shell, interpolation);",
          "1005:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1015:             const output = escapeShellArg(input, interpolation);",
          "1021:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1010:         describe(\"asterisks ('*')\", function () {",
          "1011:           it(\"does nothing to one asterisk\", function () {",
          "1012:             const input = \"foo*bar\";",
          "1014:             assert.strictEqual(output, input);",
          "1015:           });",
          "1017:           it(\"does nothing to multiple asterisks\", function () {",
          "1018:             const input = \"praise*the*sun\";",
          "1020:             assert.strictEqual(output, input);",
          "1021:           });",
          "1022:         });",
          "",
          "[Removed Lines]",
          "1013:             const output = escapeShellArg(input, shell, interpolation);",
          "1019:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1029:             const output = escapeShellArg(input, interpolation);",
          "1035:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1024:         describe(\"question marks ('?')\", function () {",
          "1025:           it(\"does nothing to one question mark\", function () {",
          "1026:             const input = \"foo?bar\";",
          "1028:             assert.strictEqual(output, input);",
          "1029:           });",
          "1031:           it(\"does nothing to multiple question marks\", function () {",
          "1032:             const input = \"praise?the?sun\";",
          "1034:             assert.strictEqual(output, input);",
          "1035:           });",
          "1036:         });",
          "",
          "[Removed Lines]",
          "1027:             const output = escapeShellArg(input, shell, interpolation);",
          "1033:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1043:             const output = escapeShellArg(input, interpolation);",
          "1049:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1038:         describe(\"equals sign ('=')\", function () {",
          "1039:           it(\"does nothing to an equals sign at the start\", function () {",
          "1040:             const input = \"=foobar\";",
          "1042:             assert.strictEqual(output, input);",
          "1043:           });",
          "1045:           it(\"does nothing to an equals sign not at the start\", function () {",
          "1046:             const input = \"foo=bar\";",
          "1048:             assert.strictEqual(output, input);",
          "1049:           });",
          "1051:           it(\"does nothing to escapes the equals sign at the start\", function () {",
          "1052:             const input = \"=foo=bar\";",
          "1054:             assert.strictEqual(output, input);",
          "1055:           });",
          "1056:         });",
          "",
          "[Removed Lines]",
          "1041:             const output = escapeShellArg(input, shell, interpolation);",
          "1047:             const output = escapeShellArg(input, shell, interpolation);",
          "1053:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1057:             const output = escapeShellArg(input, interpolation);",
          "1063:             const output = escapeShellArg(input, interpolation);",
          "1069:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1058:         describe(\"parentheses ('(', ')')\", function () {",
          "1059:           it(\"does nothing to one opening parenthesis\", function () {",
          "1060:             const input = \"foo(bar\";",
          "1062:             assert.strictEqual(output, input);",
          "1063:           });",
          "1065:           it(\"does nothing to multiple opening parentheses\", function () {",
          "1066:             const input = \"praise(the(sun\";",
          "1068:             assert.strictEqual(output, input);",
          "1069:           });",
          "1071:           it(\"does nothing to one closing parenthesis\", function () {",
          "1072:             const input = \"foo(bar\";",
          "1074:             assert.strictEqual(output, input);",
          "1075:           });",
          "1077:           it(\"does nothing to multiple closing parentheses\", function () {",
          "1078:             const input = \"praise(the(sun\";",
          "1080:             assert.strictEqual(output, input);",
          "1081:           });",
          "1083:           it(\"does nothing to a pair of parentheses\", function () {",
          "1084:             const input = \"praise(the)sun\";",
          "1086:             assert.strictEqual(output, input);",
          "1087:           });",
          "1088:         });",
          "",
          "[Removed Lines]",
          "1061:             const output = escapeShellArg(input, shell, interpolation);",
          "1067:             const output = escapeShellArg(input, shell, interpolation);",
          "1073:             const output = escapeShellArg(input, shell, interpolation);",
          "1079:             const output = escapeShellArg(input, shell, interpolation);",
          "1085:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1077:             const output = escapeShellArg(input, interpolation);",
          "1083:             const output = escapeShellArg(input, interpolation);",
          "1089:             const output = escapeShellArg(input, interpolation);",
          "1095:             const output = escapeShellArg(input, interpolation);",
          "1101:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1090:         describe(\"square brackets ('[', ']')\", function () {",
          "1091:           it(\"does nothing to one opening square bracket\", function () {",
          "1092:             const input = \"foo[bar\";",
          "1094:             assert.strictEqual(output, input);",
          "1095:           });",
          "1097:           it(\"does nothing to multiple opening square brackets\", function () {",
          "1098:             const input = \"praise[the[sun\";",
          "1100:             assert.strictEqual(output, input);",
          "1101:           });",
          "1103:           it(\"does nothing to one closing square bracket\", function () {",
          "1104:             const input = \"foo]bar\";",
          "1106:             assert.strictEqual(output, input);",
          "1107:           });",
          "1109:           it(\"does nothing to multiple closing square brackets\", function () {",
          "1110:             const input = \"praise]the]sun\";",
          "1112:             assert.strictEqual(output, input);",
          "1113:           });",
          "1115:           it(\"does nothing to a pair of square brackets\", function () {",
          "1116:             const input = \"praise[the]sun\";",
          "1118:             assert.strictEqual(output, input);",
          "1119:           });",
          "1120:         });",
          "",
          "[Removed Lines]",
          "1093:             const output = escapeShellArg(input, shell, interpolation);",
          "1099:             const output = escapeShellArg(input, shell, interpolation);",
          "1105:             const output = escapeShellArg(input, shell, interpolation);",
          "1111:             const output = escapeShellArg(input, shell, interpolation);",
          "1117:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1109:             const output = escapeShellArg(input, interpolation);",
          "1115:             const output = escapeShellArg(input, interpolation);",
          "1121:             const output = escapeShellArg(input, interpolation);",
          "1127:             const output = escapeShellArg(input, interpolation);",
          "1133:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1122:         describe(\"curly brackets ('{', '}')\", function () {",
          "1123:           it(\"does nothing to one opening curly bracket\", function () {",
          "1124:             const input = \"foo{bar\";",
          "1126:             assert.strictEqual(output, input);",
          "1127:           });",
          "1129:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "1130:             const input = \"praise{the{sun\";",
          "1132:             assert.strictEqual(output, input);",
          "1133:           });",
          "1135:           it(\"does nothing to one closing curly bracket\", function () {",
          "1136:             const input = \"foo}bar\";",
          "1138:             assert.strictEqual(output, input);",
          "1139:           });",
          "1141:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "1142:             const input = \"praise}the}sun\";",
          "1144:             assert.strictEqual(output, input);",
          "1145:           });",
          "1147:           it(\"does nothing to a pair of curly brackets\", function () {",
          "1148:             const input = \"praise{the}sun\";",
          "1150:             assert.strictEqual(output, input);",
          "1151:           });",
          "1152:         });",
          "",
          "[Removed Lines]",
          "1125:             const output = escapeShellArg(input, shell, interpolation);",
          "1131:             const output = escapeShellArg(input, shell, interpolation);",
          "1137:             const output = escapeShellArg(input, shell, interpolation);",
          "1143:             const output = escapeShellArg(input, shell, interpolation);",
          "1149:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1141:             const output = escapeShellArg(input, interpolation);",
          "1147:             const output = escapeShellArg(input, interpolation);",
          "1153:             const output = escapeShellArg(input, interpolation);",
          "1159:             const output = escapeShellArg(input, interpolation);",
          "1165:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1154:         describe(\"angle brackets ('<', '>')\", function () {",
          "1155:           it(\"does nothing to one left-angle bracket\", function () {",
          "1156:             const input = \"foo<bar\";",
          "1158:             assert.strictEqual(output, input);",
          "1159:           });",
          "1161:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "1162:             const input = \"praise<the<sun\";",
          "1164:             assert.strictEqual(output, input);",
          "1165:           });",
          "1167:           it(\"does nothing to one right-angle bracket\", function () {",
          "1168:             const input = \"foo>bar\";",
          "1170:             assert.strictEqual(output, input);",
          "1171:           });",
          "1173:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "1174:             const input = \"praise>the>sun\";",
          "1176:             assert.strictEqual(output, input);",
          "1177:           });",
          "1178:         });",
          "",
          "[Removed Lines]",
          "1157:             const output = escapeShellArg(input, shell, interpolation);",
          "1163:             const output = escapeShellArg(input, shell, interpolation);",
          "1169:             const output = escapeShellArg(input, shell, interpolation);",
          "1175:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1173:             const output = escapeShellArg(input, interpolation);",
          "1179:             const output = escapeShellArg(input, interpolation);",
          "1185:             const output = escapeShellArg(input, interpolation);",
          "1191:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1184:         it(\"returns the input if nothing has to be escaped\", function () {",
          "1185:           const input = `Hello world!`;",
          "1187:           assert.strictEqual(output, input);",
          "1188:         });",
          "1190:         describe(\"null characters\", function () {",
          "1191:           it(\"removes one null character\", function () {",
          "1192:             const input = `foo ls${nullChar} -al bar`;",
          "1194:             assert.strictEqual(output, `foo ls -al bar`);",
          "1195:           });",
          "1197:           it(\"removes multiple null characters\", function () {",
          "1198:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "1200:             assert.strictEqual(output, `foo ls -al bar`);",
          "1201:           });",
          "1202:         });",
          "",
          "[Removed Lines]",
          "1186:           const output = escapeShellArg(input, shell, interpolation);",
          "1193:             const output = escapeShellArg(input, shell, interpolation);",
          "1199:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1202:           const output = escapeShellArg(input, interpolation);",
          "1209:             const output = escapeShellArg(input, interpolation);",
          "1215:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1204:         describe('single quotes (\"\\'\")', function () {",
          "1205:           it(\"escapes one single quote\", function () {",
          "1206:             const input = `' ls -al`;",
          "1208:             assert.strictEqual(output, `\\\\' ls -al`);",
          "1209:           });",
          "1211:           it(\"escapes multiple single quotes\", function () {",
          "1212:             const input = `' echo 'Hello world!'`;",
          "1214:             assert.strictEqual(output, `\\\\' echo \\\\'Hello world!\\\\'`);",
          "1215:           });",
          "1216:         });",
          "",
          "[Removed Lines]",
          "1207:             const output = escapeShellArg(input, shell, interpolation);",
          "1213:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1223:             const output = escapeShellArg(input, interpolation);",
          "1229:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1218:         describe(\"double quotes ('\\\"')\", function () {",
          "1219:           it(\"escapes one double quote\", function () {",
          "1220:             const input = `\" ls -al`;",
          "1222:             assert.strictEqual(output, `\\\\\" ls -al`);",
          "1223:           });",
          "1225:           it(\"escapes multiple double quotes\", function () {",
          "1226:             const input = `\" echo \"Hello world!\"`;",
          "1228:             assert.strictEqual(output, `\\\\\" echo \\\\\"Hello world!\\\\\"`);",
          "1229:           });",
          "1230:         });",
          "",
          "[Removed Lines]",
          "1221:             const output = escapeShellArg(input, shell, interpolation);",
          "1227:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1237:             const output = escapeShellArg(input, interpolation);",
          "1243:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1232:         describe(\"backticks ('`')\", function () {",
          "1233:           it(\"escapes one backtick\", function () {",
          "1234:             const input = \"` ls -al\";",
          "1236:             assert.strictEqual(output, \"\\\\` ls -al\");",
          "1237:           });",
          "1239:           it(\"escapes multiple backticks\", function () {",
          "1240:             const input = \"` echo `Hello world!`\";",
          "1242:             assert.strictEqual(output, \"\\\\` echo \\\\`Hello world!\\\\`\");",
          "1243:           });",
          "1244:         });",
          "",
          "[Removed Lines]",
          "1235:             const output = escapeShellArg(input, shell, interpolation);",
          "1241:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1251:             const output = escapeShellArg(input, interpolation);",
          "1257:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1246:         describe(\"backslashes ('\\\\')\", function () {",
          "1247:           it(\"escapes one backslash\", function () {",
          "1248:             const input = \"foo\\\\bar\";",
          "1250:             assert.strictEqual(output, \"foo\\\\\\\\bar\");",
          "1251:           });",
          "1253:           it(\"escapes multiple backslashes\", function () {",
          "1254:             const input = \"praise\\\\the\\\\sun\";",
          "1256:             assert.strictEqual(output, \"praise\\\\\\\\the\\\\\\\\sun\");",
          "1257:           });",
          "1258:         });",
          "",
          "[Removed Lines]",
          "1249:             const output = escapeShellArg(input, shell, interpolation);",
          "1255:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1265:             const output = escapeShellArg(input, interpolation);",
          "1271:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1260:         describe(\"tilde ('~')\", function () {",
          "1261:           it(\"escapes a tilde at the start\", function () {",
          "1262:             const input = \"~foobar\";",
          "1264:             assert.strictEqual(output, \"\\\\~foobar\");",
          "1265:           });",
          "1267:           it(\"does nothing to a tilde not at the start\", function () {",
          "1268:             const input = \"foo~bar\";",
          "1270:             assert.strictEqual(output, input);",
          "1271:           });",
          "1273:           it(\"only escapes the tilde at the start\", function () {",
          "1274:             const input = \"~foo~bar\";",
          "1276:             assert.strictEqual(output, \"\\\\~foo~bar\");",
          "1277:           });",
          "1278:         });",
          "",
          "[Removed Lines]",
          "1263:             const output = escapeShellArg(input, shell, interpolation);",
          "1269:             const output = escapeShellArg(input, shell, interpolation);",
          "1275:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1279:             const output = escapeShellArg(input, interpolation);",
          "1285:             const output = escapeShellArg(input, interpolation);",
          "1291:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1280:         describe(\"hashtags ('#')\", function () {",
          "1281:           it(\"escapes a hashtag at the start\", function () {",
          "1282:             const input = \"#foobar\";",
          "1284:             assert.strictEqual(output, \"\\\\#foobar\");",
          "1285:           });",
          "1287:           it(\"does nothing to a hashtag not at the start\", function () {",
          "1288:             const input = \"foo#bar\";",
          "1290:             assert.strictEqual(output, input);",
          "1291:           });",
          "1293:           it(\"only escapes the hashtag at the start\", function () {",
          "1294:             const input = \"#foo#bar\";",
          "1296:             assert.strictEqual(output, \"\\\\#foo#bar\");",
          "1297:           });",
          "1298:         });",
          "",
          "[Removed Lines]",
          "1283:             const output = escapeShellArg(input, shell, interpolation);",
          "1289:             const output = escapeShellArg(input, shell, interpolation);",
          "1295:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1299:             const output = escapeShellArg(input, interpolation);",
          "1305:             const output = escapeShellArg(input, interpolation);",
          "1311:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1300:         describe(\"dollar signs ('$')\", function () {",
          "1301:           it(\"escapes one dollar sign\", function () {",
          "1302:             const input = \"foo$bar\";",
          "1304:             assert.strictEqual(output, \"foo\\\\$bar\");",
          "1305:           });",
          "1307:           it(\"escapes multiple dollar signs\", function () {",
          "1308:             const input = \"praise$the$sun\";",
          "1310:             assert.strictEqual(output, \"praise\\\\$the\\\\$sun\");",
          "1311:           });",
          "1312:         });",
          "",
          "[Removed Lines]",
          "1303:             const output = escapeShellArg(input, shell, interpolation);",
          "1309:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1319:             const output = escapeShellArg(input, interpolation);",
          "1325:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1314:         describe(\"semicolons (';')\", function () {",
          "1315:           it(\"escapes one semicolon\", function () {",
          "1316:             const input = \"foo;bar\";",
          "1318:             assert.strictEqual(output, \"foo\\\\;bar\");",
          "1319:           });",
          "1321:           it(\"escapes multiple semicolons\", function () {",
          "1322:             const input = \"praise;the;sun\";",
          "1324:             assert.strictEqual(output, \"praise\\\\;the\\\\;sun\");",
          "1325:           });",
          "1326:         });",
          "",
          "[Removed Lines]",
          "1317:             const output = escapeShellArg(input, shell, interpolation);",
          "1323:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1333:             const output = escapeShellArg(input, interpolation);",
          "1339:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1328:         describe(\"ampersands ('&')\", function () {",
          "1329:           it(\"escapes one ampersand\", function () {",
          "1330:             const input = \"foo&bar\";",
          "1332:             assert.strictEqual(output, \"foo\\\\&bar\");",
          "1333:           });",
          "1335:           it(\"escapes multiple ampersands\", function () {",
          "1336:             const input = \"praise&the&sun\";",
          "1338:             assert.strictEqual(output, \"praise\\\\&the\\\\&sun\");",
          "1339:           });",
          "1340:         });",
          "",
          "[Removed Lines]",
          "1331:             const output = escapeShellArg(input, shell, interpolation);",
          "1337:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1347:             const output = escapeShellArg(input, interpolation);",
          "1353:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1342:         describe(\"pipes ('|')\", function () {",
          "1343:           it(\"escapes one pipe\", function () {",
          "1344:             const input = \"foo|bar\";",
          "1346:             assert.strictEqual(output, \"foo\\\\|bar\");",
          "1347:           });",
          "1349:           it(\"escapes multiple pipes\", function () {",
          "1350:             const input = \"praise|the|sun\";",
          "1352:             assert.strictEqual(output, \"praise\\\\|the\\\\|sun\");",
          "1353:           });",
          "1354:         });",
          "",
          "[Removed Lines]",
          "1345:             const output = escapeShellArg(input, shell, interpolation);",
          "1351:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1361:             const output = escapeShellArg(input, interpolation);",
          "1367:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1356:         describe(\"asterisks ('*')\", function () {",
          "1357:           it(\"escapes one asterisk\", function () {",
          "1358:             const input = \"foo*bar\";",
          "1360:             assert.strictEqual(output, \"foo\\\\*bar\");",
          "1361:           });",
          "1363:           it(\"escapes multiple asterisks\", function () {",
          "1364:             const input = \"praise*the*sun\";",
          "1366:             assert.strictEqual(output, \"praise\\\\*the\\\\*sun\");",
          "1367:           });",
          "1368:         });",
          "",
          "[Removed Lines]",
          "1359:             const output = escapeShellArg(input, shell, interpolation);",
          "1365:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1375:             const output = escapeShellArg(input, interpolation);",
          "1381:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1370:         describe(\"question marks ('?')\", function () {",
          "1371:           it(\"escapes one question mark\", function () {",
          "1372:             const input = \"foo?bar\";",
          "1374:             assert.strictEqual(output, \"foo\\\\?bar\");",
          "1375:           });",
          "1377:           it(\"escapes multiple question marks\", function () {",
          "1378:             const input = \"praise?the?sun\";",
          "1380:             assert.strictEqual(output, \"praise\\\\?the\\\\?sun\");",
          "1381:           });",
          "1382:         });",
          "",
          "[Removed Lines]",
          "1373:             const output = escapeShellArg(input, shell, interpolation);",
          "1379:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1389:             const output = escapeShellArg(input, interpolation);",
          "1395:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1384:         describe(\"equals sign ('=')\", function () {",
          "1385:           it(\"escapes an equals sign at the start\", function () {",
          "1386:             const input = \"=foobar\";",
          "1388:             assert.strictEqual(output, \"\\\\=foobar\");",
          "1389:           });",
          "1391:           it(\"does nothing to an equals sign not at the start\", function () {",
          "1392:             const input = \"foo=bar\";",
          "1394:             assert.strictEqual(output, input);",
          "1395:           });",
          "1397:           it(\"only escapes the equals sign at the start\", function () {",
          "1398:             const input = \"=foo=bar\";",
          "1400:             assert.strictEqual(output, \"\\\\=foo=bar\");",
          "1401:           });",
          "1402:         });",
          "",
          "[Removed Lines]",
          "1387:             const output = escapeShellArg(input, shell, interpolation);",
          "1393:             const output = escapeShellArg(input, shell, interpolation);",
          "1399:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1403:             const output = escapeShellArg(input, interpolation);",
          "1409:             const output = escapeShellArg(input, interpolation);",
          "1415:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1404:         describe(\"parentheses ('(', ')')\", function () {",
          "1405:           it(\"escapes one opening parenthesis\", function () {",
          "1406:             const input = \"foo(bar\";",
          "1408:             assert.strictEqual(output, \"foo\\\\(bar\");",
          "1409:           });",
          "1411:           it(\"escapes multiple opening parentheses\", function () {",
          "1412:             const input = \"praise(the(sun\";",
          "1414:             assert.strictEqual(output, \"praise\\\\(the\\\\(sun\");",
          "1415:           });",
          "1417:           it(\"escapes one closing parenthesis\", function () {",
          "1418:             const input = \"foo)bar\";",
          "1420:             assert.strictEqual(output, \"foo\\\\)bar\");",
          "1421:           });",
          "1423:           it(\"escapes multiple closing parentheses\", function () {",
          "1424:             const input = \"praise)the)sun\";",
          "1426:             assert.strictEqual(output, \"praise\\\\)the\\\\)sun\");",
          "1427:           });",
          "1429:           it(\"escapes a pair of parentheses\", function () {",
          "1430:             const input = \"praise(the)sun\";",
          "1432:             assert.strictEqual(output, \"praise\\\\(the\\\\)sun\");",
          "1433:           });",
          "1434:         });",
          "",
          "[Removed Lines]",
          "1407:             const output = escapeShellArg(input, shell, interpolation);",
          "1413:             const output = escapeShellArg(input, shell, interpolation);",
          "1419:             const output = escapeShellArg(input, shell, interpolation);",
          "1425:             const output = escapeShellArg(input, shell, interpolation);",
          "1431:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1423:             const output = escapeShellArg(input, interpolation);",
          "1429:             const output = escapeShellArg(input, interpolation);",
          "1435:             const output = escapeShellArg(input, interpolation);",
          "1441:             const output = escapeShellArg(input, interpolation);",
          "1447:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1436:         describe(\"square brackets ('[', ']')\", function () {",
          "1437:           it(\"escapes one opening square bracket\", function () {",
          "1438:             const input = \"foo[bar\";",
          "1440:             assert.strictEqual(output, \"foo\\\\[bar\");",
          "1441:           });",
          "1443:           it(\"escapes multiple opening square brackets\", function () {",
          "1444:             const input = \"praise[the[sun\";",
          "1446:             assert.strictEqual(output, \"praise\\\\[the\\\\[sun\");",
          "1447:           });",
          "1449:           it(\"escapes one closing square bracket\", function () {",
          "1450:             const input = \"foo]bar\";",
          "1452:             assert.strictEqual(output, \"foo\\\\]bar\");",
          "1453:           });",
          "1455:           it(\"escapes multiple closing square brackets\", function () {",
          "1456:             const input = \"praise]the]sun\";",
          "1458:             assert.strictEqual(output, \"praise\\\\]the\\\\]sun\");",
          "1459:           });",
          "1461:           it(\"escapes a pair of square brackets\", function () {",
          "1462:             const input = \"praise[the]sun\";",
          "1464:             assert.strictEqual(output, \"praise\\\\[the\\\\]sun\");",
          "1465:           });",
          "1466:         });",
          "",
          "[Removed Lines]",
          "1439:             const output = escapeShellArg(input, shell, interpolation);",
          "1445:             const output = escapeShellArg(input, shell, interpolation);",
          "1451:             const output = escapeShellArg(input, shell, interpolation);",
          "1457:             const output = escapeShellArg(input, shell, interpolation);",
          "1463:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1455:             const output = escapeShellArg(input, interpolation);",
          "1461:             const output = escapeShellArg(input, interpolation);",
          "1467:             const output = escapeShellArg(input, interpolation);",
          "1473:             const output = escapeShellArg(input, interpolation);",
          "1479:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1468:         describe(\"curly brackets ('{', '}')\", function () {",
          "1469:           it(\"escapes one opening curly bracket\", function () {",
          "1470:             const input = \"foo{bar\";",
          "1472:             assert.strictEqual(output, \"foo\\\\{bar\");",
          "1473:           });",
          "1475:           it(\"escapes multiple opening curly brackets\", function () {",
          "1476:             const input = \"praise{the{sun\";",
          "1478:             assert.strictEqual(output, \"praise\\\\{the\\\\{sun\");",
          "1479:           });",
          "1481:           it(\"escapes one closing curly bracket\", function () {",
          "1482:             const input = \"foo}bar\";",
          "1484:             assert.strictEqual(output, \"foo\\\\}bar\");",
          "1485:           });",
          "1487:           it(\"escapes multiple closing curly brackets\", function () {",
          "1488:             const input = \"praise}the}sun\";",
          "1490:             assert.strictEqual(output, \"praise\\\\}the\\\\}sun\");",
          "1491:           });",
          "1493:           it(\"escapes a pair of curly brackets\", function () {",
          "1494:             const input = \"praise{the}sun\";",
          "1496:             assert.strictEqual(output, \"praise\\\\{the\\\\}sun\");",
          "1497:           });",
          "1498:         });",
          "",
          "[Removed Lines]",
          "1471:             const output = escapeShellArg(input, shell, interpolation);",
          "1477:             const output = escapeShellArg(input, shell, interpolation);",
          "1483:             const output = escapeShellArg(input, shell, interpolation);",
          "1489:             const output = escapeShellArg(input, shell, interpolation);",
          "1495:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1487:             const output = escapeShellArg(input, interpolation);",
          "1493:             const output = escapeShellArg(input, interpolation);",
          "1499:             const output = escapeShellArg(input, interpolation);",
          "1505:             const output = escapeShellArg(input, interpolation);",
          "1511:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1500:         describe(\"angle brackets ('<', '>')\", function () {",
          "1501:           it(\"escapes one left-angle bracket\", function () {",
          "1502:             const input = \"foo<bar\";",
          "1504:             assert.strictEqual(output, \"foo\\\\<bar\");",
          "1505:           });",
          "1507:           it(\"escapes multiple left-angle brackets\", function () {",
          "1508:             const input = \"praise<the<sun\";",
          "1510:             assert.strictEqual(output, \"praise\\\\<the\\\\<sun\");",
          "1511:           });",
          "1513:           it(\"escapes one right-angle bracket\", function () {",
          "1514:             const input = \"foo>bar\";",
          "1516:             assert.strictEqual(output, \"foo\\\\>bar\");",
          "1517:           });",
          "1519:           it(\"escapes multiple right-angle brackets\", function () {",
          "1520:             const input = \"praise>the>sun\";",
          "1522:             assert.strictEqual(output, \"praise\\\\>the\\\\>sun\");",
          "1523:           });",
          "1524:         });",
          "",
          "[Removed Lines]",
          "1503:             const output = escapeShellArg(input, shell, interpolation);",
          "1509:             const output = escapeShellArg(input, shell, interpolation);",
          "1515:             const output = escapeShellArg(input, shell, interpolation);",
          "1521:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1519:             const output = escapeShellArg(input, interpolation);",
          "1525:             const output = escapeShellArg(input, interpolation);",
          "1531:             const output = escapeShellArg(input, interpolation);",
          "1537:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1526:     });",
          "1527:   });",
          "1533:     });",
          "1534:   });",
          "1535: });",
          "",
          "[Removed Lines]",
          "1529:   describe(\"::getDefaultShell\", function () {",
          "1530:     it(\"is '/bin/sh'\", function () {",
          "1531:       const result = getDefaultShell();",
          "1532:       assert.strictEqual(result, \"/bin/sh\");",
          "",
          "[Added Lines]",
          "1545:   describe(\"::getQuoteFunction\", function () {",
          "1546:     it(\"returns `null` for unsupported shells\", function () {",
          "1547:       const result = unix.getQuoteFunction(\"foobar\");",
          "1548:       assert.strictEqual(result, null);",
          "1549:     });",
          "1551:     for (const shellName of [binBash, binDash, binZsh]) {",
          "1552:       const quoteShellArg = unix.getQuoteFunction(shellName);",
          "1554:       describe(shellName, function () {",
          "1555:         it(\"puts single quotes around the provided value\", function () {",
          "1556:           const input = \"foobar\";",
          "1557:           const result = quoteShellArg(input);",
          "1558:           assert.strictEqual(result, `'${input}'`);",
          "1559:         });",
          "1560:       });",
          "1561:     }",
          "1562:   });",
          "1564:   describe(\"::getShellName\", function () {",
          "1565:     let resolveExecutable;",
          "1567:     before(function () {",
          "1568:       resolveExecutable = sinon.stub();",
          "1569:     });",
          "1571:     beforeEach(function () {",
          "1572:       sinon.reset();",
          "1574:       resolveExecutable.returns(\"foobar\");",
          "1575:     });",
          "1577:     it(\"resolves the provided shell\", function () {",
          "1578:       for (const shell of [binBash, binDash, binZsh]) {",
          "1579:         unix.getShellName({ shell }, { resolveExecutable });",
          "1580:         assert.ok(",
          "1581:           resolveExecutable.calledWithExactly(",
          "1582:             { executable: shell },",
          "1583:             sinon.match.any",
          "1584:           )",
          "1585:         );",
          "1586:       }",
          "1587:     });",
          "1589:     for (const shell of [binBash, binDash, binZsh]) {",
          "1590:       it(`returns ${shell} when the provided shell resolves to that`, function () {",
          "1591:         resolveExecutable.returns(`/bin/${shell}`);",
          "1593:         const result = unix.getShellName({ shell }, { resolveExecutable });",
          "1594:         assert.equal(result, shell);",
          "1595:       });",
          "1596:     }",
          "1598:     it(\"falls back to 'bash' if the shell is not supported\", function () {",
          "1599:       const shell = \"asdf\";",
          "1601:       resolveExecutable.returns(`/bin/${shell}`);",
          "1603:       const result = unix.getShellName({ shell }, { resolveExecutable });",
          "1604:       assert.equal(result, \"bash\");",
          "1605:     });",
          "1607:     it(\"calls resolveExecutable with the appropriate helpers\", function () {",
          "1608:       const shell = \"sh\";",
          "1610:       unix.getShellName({ shell }, { resolveExecutable });",
          "1611:       assert.ok(",
          "1612:         resolveExecutable.calledWithExactly(sinon.match.any, {",
          "1613:           exists: sinon.match.func,",
          "1614:           readlink: sinon.match.func,",
          "1615:           which: sinon.match.func,",
          "1616:         })",
          "1617:       );",
          "",
          "---------------"
        ],
        "test/win.prop.js||test/win.prop.js": [
          "File: test/win.prop.js -> test/win.prop.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import assert from \"assert\";",
          "8: import * as fc from \"fast-check\";",
          "12: import * as win from \"../src/win.js\";",
          "14: describe(\"win.js\", function () {",
          "17:   before(function () {",
          "18:     fc.configureGlobal({",
          "",
          "[Removed Lines]",
          "10: import { isDefined, winShells } from \"./common.js\";",
          "15:   const shells = winShells.filter(isDefined);",
          "",
          "[Added Lines]",
          "9: import * as path from \"path/win32\";",
          "10: import sinon from \"sinon\";",
          "12: import { binCmd, binPowerShell } from \"./common.js\";",
          "17:   const supportedShells = [binCmd, binPowerShell];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     });",
          "23:   });",
          "27:       fc.assert(",
          "28:         fc.property(",
          "29:           fc.string(),",
          "33:             assert.ok(typeof result === \"string\");",
          "34:           }",
          "35:         )",
          "36:       );",
          "37:     });",
          "40:       fc.assert(",
          "41:         fc.property(",
          "42:           fc.string(),",
          "47:           }",
          "48:         )",
          "49:       );",
          "50:     });",
          "53:       fc.assert(",
          "56:         })",
          "57:       );",
          "58:     });",
          "59:   });",
          "69:         })",
          "70:       );",
          "71:     });",
          "74:       fc.assert(",
          "80:         })",
          "81:       );",
          "82:     });",
          "",
          "[Removed Lines]",
          "25:   describe(\"::escapeShellArg\", function () {",
          "26:     it(\"always returns a string\", function () {",
          "30:           fc.constantFrom(...shells),",
          "31:           function (arg, shell) {",
          "32:             const result = win.escapeShellArg(arg, shell);",
          "39:     it(\"never returns a string with a null character\", function () {",
          "43:           fc.constantFrom(...shells),",
          "44:           function (arg, shell) {",
          "45:             const result = win.escapeShellArg(arg, shell);",
          "46:             assert.doesNotMatch(result, /\\u{0}/gu);",
          "52:     it(\"throws if the shell is undefined\", function () {",
          "54:         fc.property(fc.string(), function (arg) {",
          "55:           assert.throws(() => win.escapeShellArg(arg));",
          "61:   describe(\"::getDefaultShell\", function () {",
          "62:     it(\"returns the value of `ComSpec`\", function () {",
          "63:       fc.assert(",
          "64:         fc.property(fc.object(), fc.string(), function (env, ComSpec) {",
          "65:           env.ComSpec = ComSpec;",
          "67:           const result = win.getDefaultShell(env);",
          "68:           assert.equal(result, ComSpec);",
          "73:     it(\"returns 'cmd.exe' if `ComSpec` is missing\", function () {",
          "75:         fc.property(fc.object(), function (env) {",
          "76:           delete env.ComSpec;",
          "78:           const result = win.getDefaultShell(env);",
          "79:           assert.equal(result, \"cmd.exe\");",
          "",
          "[Added Lines]",
          "27:   describe(\"::getDefaultShell\", function () {",
          "28:     it(\"returns %COMSPEC% if present\", function () {",
          "29:       fc.assert(",
          "30:         fc.property(fc.object(), fc.string(), function (env, ComSpec) {",
          "31:           env.ComSpec = ComSpec;",
          "33:           const result = win.getDefaultShell({ env });",
          "34:           assert.equal(result, ComSpec);",
          "35:         })",
          "36:       );",
          "37:     });",
          "39:     it(`returns '${binCmd}' if %COMSPEC% is missing`, function () {",
          "40:       fc.assert(",
          "41:         fc.property(fc.object(), function (env) {",
          "42:           delete env.ComSpec;",
          "44:           const result = win.getDefaultShell({ env });",
          "45:           assert.equal(result, binCmd);",
          "46:         })",
          "47:       );",
          "48:     });",
          "49:   });",
          "51:   describe(\"::getEscapeFunction\", function () {",
          "52:     it(\"returns a string for supported shells\", function () {",
          "55:           fc.constantFrom(...supportedShells),",
          "57:           function (shellName, arg) {",
          "58:             const escapeFn = win.getEscapeFunction(shellName);",
          "59:             const result = escapeFn(arg);",
          "66:     it(\"returns `null` for unsupported shells\", function () {",
          "67:       fc.assert(",
          "68:         fc.property(fc.string(), function (shellName) {",
          "69:           if (supportedShells.includes(shellName)) {",
          "70:             return;",
          "71:           }",
          "73:           const escapeFn = win.getEscapeFunction(shellName);",
          "74:           assert.strictEqual(escapeFn, null);",
          "75:         })",
          "76:       );",
          "77:     });",
          "78:   });",
          "80:   describe(\"::getQuoteFunction\", function () {",
          "81:     it(\"quotes with double quotes for supported shells\", function () {",
          "84:           fc.constantFrom(...supportedShells),",
          "86:           function (shellName, input) {",
          "87:             const quoteFn = win.getQuoteFunction(shellName);",
          "88:             const result = quoteFn(input);",
          "89:             assert.strictEqual(result, `\"${input}\"`);",
          "95:     it(\"returns `null` for unsupported shells\", function () {",
          "97:         fc.property(fc.string(), function (shellName) {",
          "98:           if (supportedShells.includes(shellName)) {",
          "99:             return;",
          "100:           }",
          "102:           const escapeFn = win.getQuoteFunction(shellName);",
          "103:           assert.strictEqual(escapeFn, null);",
          "109:   describe(\"::getShellName\", function () {",
          "110:     let resolveExecutable;",
          "112:     before(function () {",
          "113:       resolveExecutable = sinon.stub();",
          "114:     });",
          "116:     beforeEach(function () {",
          "117:       sinon.reset();",
          "119:       resolveExecutable.returns(\"foobar\");",
          "120:     });",
          "122:     it(\"resolves the provided shell\", function () {",
          "123:       fc.assert(",
          "124:         fc.property(fc.object(), fc.string(), function (env, shell) {",
          "125:           win.getShellName({ env, shell }, { resolveExecutable });",
          "126:           assert.ok(",
          "127:             resolveExecutable.calledWithExactly(",
          "128:               { executable: shell },",
          "129:               sinon.match.any",
          "130:             )",
          "131:           );",
          "136:     it(\"returns the name of the resolved shell if it is supported\", function () {",
          "138:         fc.property(",
          "139:           fc.object(),",
          "140:           fc.constantFrom(...supportedShells),",
          "141:           function (env, shell) {",
          "142:             resolveExecutable.returns(`C:\\\\Windows\\\\System32\\\\${shell}`);",
          "144:             const result = win.getShellName(",
          "145:               { env, shell },",
          "146:               { resolveExecutable }",
          "147:             );",
          "148:             assert.equal(result, shell);",
          "149:           }",
          "150:         )",
          "151:       );",
          "152:     });",
          "154:     it(`returns '${binCmd}' if the resolved shell is not supported`, function () {",
          "155:       fc.assert(",
          "156:         fc.property(fc.object(), fc.string(), function (env, shell) {",
          "157:           if (supportedShells.includes(path.basename(shell))) {",
          "158:             return;",
          "159:           }",
          "161:           resolveExecutable.returns(`C:\\\\Windows\\\\System32\\\\${shell}`);",
          "163:           const result = win.getShellName(",
          "164:             { env, shell },",
          "165:             { resolveExecutable }",
          "166:           );",
          "167:           assert.equal(result, binCmd);",
          "",
          "---------------"
        ],
        "test/win.test.js||test/win.test.js": [
          "File: test/win.test.js -> test/win.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import assert from \"assert\";",
          "13: describe(\"win.js\", function () {",
          "18:     });",
          "23:       describe(\"No interpolation\", function () {",
          "24:         const interpolation = false;",
          "26:         it(\"should return the input if nothing has to be escaped\", function () {",
          "27:           const input = `Hello world!`;",
          "29:           assert.strictEqual(output, input);",
          "30:         });",
          "32:         describe(\"null characters\", function () {",
          "33:           it(\"removes one null character\", function () {",
          "34:             const input = `foo ls${nullChar} -al bar`;",
          "36:             assert.strictEqual(output, `foo ls -al bar`);",
          "37:           });",
          "39:           it(\"removes multiple null characters\", function () {",
          "40:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "42:             assert.strictEqual(output, `foo ls -al bar`);",
          "43:           });",
          "44:         });",
          "",
          "[Removed Lines]",
          "9: import { cmdExe, ComSpec, nullChar, powershellExe } from \"./common.js\";",
          "11: import { escapeShellArg, getDefaultShell } from \"../src/win.js\";",
          "14:   describe(\"::escapeShellArgs\", function () {",
          "15:     it(\"throws if no shell is provided\", function () {",
          "16:       const input = `Hello world!`;",
          "17:       assert.throws(() => escapeShellArg(input));",
          "20:     describe(\"cmd.exe\", function () {",
          "21:       const shell = cmdExe;",
          "28:           const output = escapeShellArg(input, shell, interpolation);",
          "35:             const output = escapeShellArg(input, shell, interpolation);",
          "41:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "8: import sinon from \"sinon\";",
          "10: import { binCmd, binPowerShell, nullChar } from \"./common.js\";",
          "12: import * as win from \"../src/win.js\";",
          "15:   describe(\"::getDefaultShell\", function () {",
          "16:     it(\"returns the value of %COMSPEC%\", function () {",
          "17:       const ComSpec = \"C:\\\\Windows\\\\System32\\\\cmd.exe\";",
          "18:       const env = { ComSpec };",
          "20:       const result = win.getDefaultShell({ env });",
          "21:       assert.equal(result, ComSpec);",
          "22:     });",
          "24:     it(\"returns the value of %COMSPEC% when it's an empty string\", function () {",
          "25:       const ComSpec = \"\";",
          "26:       const env = { ComSpec };",
          "28:       const result = win.getDefaultShell({ env });",
          "29:       assert.equal(result, ComSpec);",
          "30:     });",
          "32:     it(\"returns 'cmd.exe' if %COMSPEC% is not defined\", function () {",
          "33:       const env = {};",
          "35:       const result = win.getDefaultShell({ env });",
          "36:       assert.equal(result, binCmd);",
          "37:     });",
          "38:   });",
          "40:   describe(\"::getEscapeFunction\", function () {",
          "41:     it(\"returns `null` for unsupported shells\", function () {",
          "42:       const result = win.getEscapeFunction(\"foobar\");",
          "43:       assert.strictEqual(result, null);",
          "46:     describe(binCmd, function () {",
          "47:       const escapeShellArg = win.getEscapeFunction(binCmd);",
          "54:           const output = escapeShellArg(input, interpolation);",
          "61:             const output = escapeShellArg(input, interpolation);",
          "67:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         describe(\"double quotes ('\\\"')\", function () {",
          "47:           it(\"escapes one double quote\", function () {",
          "48:             const input = `\" ls -al`;",
          "50:             assert.strictEqual(output, `\"\" ls -al`);",
          "51:           });",
          "53:           it(\"escapes multiple double quotes\", function () {",
          "54:             const input = `\" echo \"Hello world!`;",
          "56:             assert.strictEqual(output, `\"\" echo \"\"Hello world!`);",
          "57:           });",
          "58:         });",
          "",
          "[Removed Lines]",
          "49:             const output = escapeShellArg(input, shell, interpolation);",
          "55:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "75:             const output = escapeShellArg(input, interpolation);",
          "81:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         describe(\"backticks ('`')\", function () {",
          "61:           it(\"does nothing to one backtick\", function () {",
          "62:             const input = \"foo`bar\";",
          "64:             assert.strictEqual(output, \"foo`bar\");",
          "65:           });",
          "67:           it(\"does nothing to multiple backticks\", function () {",
          "68:             const input = \"Praise`the`sun\";",
          "70:             assert.strictEqual(output, \"Praise`the`sun\");",
          "71:           });",
          "72:         });",
          "",
          "[Removed Lines]",
          "63:             const output = escapeShellArg(input, shell, interpolation);",
          "69:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "89:             const output = escapeShellArg(input, interpolation);",
          "95:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:         describe(\"comma (',')\", function () {",
          "75:           it(\"does nothing to one comma\", function () {",
          "76:             const input = \"foo,bar\";",
          "78:             assert.strictEqual(output, input);",
          "79:           });",
          "81:           it(\"does nothing to multiple commas\", function () {",
          "82:             const input = \"Praise,the,sun\";",
          "84:             assert.strictEqual(output, input);",
          "85:           });",
          "86:         });",
          "",
          "[Removed Lines]",
          "77:             const output = escapeShellArg(input, shell, interpolation);",
          "83:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "103:             const output = escapeShellArg(input, interpolation);",
          "109:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:         describe(\"hashtags ('#')\", function () {",
          "89:           it(\"does nothing to one hashtag\", function () {",
          "90:             const input = \"#foobar\";",
          "92:             assert.strictEqual(output, input);",
          "93:           });",
          "95:           it(\"does nothing to multiple hashtags\", function () {",
          "96:             const input = \"#foo#bar\";",
          "98:             assert.strictEqual(output, input);",
          "99:           });",
          "100:         });",
          "",
          "[Removed Lines]",
          "91:             const output = escapeShellArg(input, shell, interpolation);",
          "97:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "117:             const output = escapeShellArg(input, interpolation);",
          "123:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "102:         describe(\"at-signs ('@')\", function () {",
          "103:           it(\"does nothing to one at-sign\", function () {",
          "104:             const input = \"foo@bar\";",
          "106:             assert.strictEqual(output, input);",
          "107:           });",
          "109:           it(\"does nothing to multiple at-signs\", function () {",
          "110:             const input = \"@foo@bar\";",
          "112:             assert.strictEqual(output, input);",
          "113:           });",
          "114:         });",
          "",
          "[Removed Lines]",
          "105:             const output = escapeShellArg(input, shell, interpolation);",
          "111:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "131:             const output = escapeShellArg(input, interpolation);",
          "137:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "116:         describe(\"hyphens ('-')\", function () {",
          "117:           it(\"does nothing to one hyphen\", function () {",
          "118:             const input = \"-foobar\";",
          "120:             assert.strictEqual(output, input);",
          "121:           });",
          "123:           it(\"does nothing to multiple hyphens\", function () {",
          "124:             const input = \"-foo-bar\";",
          "126:             assert.strictEqual(output, input);",
          "127:           });",
          "128:         });",
          "",
          "[Removed Lines]",
          "119:             const output = escapeShellArg(input, shell, interpolation);",
          "125:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "145:             const output = escapeShellArg(input, interpolation);",
          "151:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "130:         describe(\"carets ('^')\", function () {",
          "131:           it(\"does nothing to one caret\", function () {",
          "132:             const input = \"foo^bar\";",
          "134:             assert.strictEqual(output, input);",
          "135:           });",
          "137:           it(\"does nothing to multiple carets\", function () {",
          "138:             const input = \"Praise^the^sun\";",
          "140:             assert.strictEqual(output, input);",
          "141:           });",
          "142:         });",
          "",
          "[Removed Lines]",
          "133:             const output = escapeShellArg(input, shell, interpolation);",
          "139:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "159:             const output = escapeShellArg(input, interpolation);",
          "165:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "144:         describe(\"dollar signs ('$')\", function () {",
          "145:           it(\"does nothing to one dollar sign\", function () {",
          "146:             const input = \"foo$bar\";",
          "148:             assert.strictEqual(output, \"foo$bar\");",
          "149:           });",
          "151:           it(\"does nothing to multiple dollar signs\", function () {",
          "152:             const input = \"Praise$the$sun\";",
          "154:             assert.strictEqual(output, \"Praise$the$sun\");",
          "155:           });",
          "156:         });",
          "",
          "[Removed Lines]",
          "147:             const output = escapeShellArg(input, shell, interpolation);",
          "153:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "173:             const output = escapeShellArg(input, interpolation);",
          "179:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "158:         describe(\"colons (':')\", function () {",
          "159:           it(\"does nothing to one colon\", function () {",
          "160:             const input = \"foo:bar\";",
          "162:             assert.strictEqual(output, input);",
          "163:           });",
          "165:           it(\"does nothing to multiple colons\", function () {",
          "166:             const input = \"praise:the:sun\";",
          "168:             assert.strictEqual(output, input);",
          "169:           });",
          "170:         });",
          "",
          "[Removed Lines]",
          "161:             const output = escapeShellArg(input, shell, interpolation);",
          "167:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "187:             const output = escapeShellArg(input, interpolation);",
          "193:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "172:         describe(\"semicolons (';')\", function () {",
          "173:           it(\"does nothing to one semicolon\", function () {",
          "174:             const input = \"foo;bar\";",
          "176:             assert.strictEqual(output, input);",
          "177:           });",
          "179:           it(\"does nothing to multiple semicolons\", function () {",
          "180:             const input = \"praise;the;sun\";",
          "182:             assert.strictEqual(output, input);",
          "183:           });",
          "184:         });",
          "",
          "[Removed Lines]",
          "175:             const output = escapeShellArg(input, shell, interpolation);",
          "181:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "201:             const output = escapeShellArg(input, interpolation);",
          "207:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "186:         describe(\"ampersands ('&')\", function () {",
          "187:           it(\"does nothing to one ampersand\", function () {",
          "188:             const input = \"foo&bar\";",
          "190:             assert.strictEqual(output, input);",
          "191:           });",
          "193:           it(\"does nothing to multiple ampersands\", function () {",
          "194:             const input = \"praise&the&sun\";",
          "196:             assert.strictEqual(output, input);",
          "197:           });",
          "198:         });",
          "",
          "[Removed Lines]",
          "189:             const output = escapeShellArg(input, shell, interpolation);",
          "195:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "215:             const output = escapeShellArg(input, interpolation);",
          "221:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "200:         describe(\"pipes ('|')\", function () {",
          "201:           it(\"does nothing to one pipe\", function () {",
          "202:             const input = \"foo|bar\";",
          "204:             assert.strictEqual(output, input);",
          "205:           });",
          "207:           it(\"does nothing to multiple pipes\", function () {",
          "208:             const input = \"praise|the|sun\";",
          "210:             assert.strictEqual(output, input);",
          "211:           });",
          "212:         });",
          "",
          "[Removed Lines]",
          "203:             const output = escapeShellArg(input, shell, interpolation);",
          "209:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "229:             const output = escapeShellArg(input, interpolation);",
          "235:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "214:         describe(\"parentheses ('(', ')')\", function () {",
          "215:           it(\"does nothing to one opening parenthesis\", function () {",
          "216:             const input = \"foo(bar\";",
          "218:             assert.strictEqual(output, input);",
          "219:           });",
          "221:           it(\"does nothing to multiple opening parentheses\", function () {",
          "222:             const input = \"praise(the(sun\";",
          "224:             assert.strictEqual(output, input);",
          "225:           });",
          "227:           it(\"does nothing to one closing parenthesis\", function () {",
          "228:             const input = \"foo(bar\";",
          "230:             assert.strictEqual(output, input);",
          "231:           });",
          "233:           it(\"does nothing to multiple closing parentheses\", function () {",
          "234:             const input = \"praise(the(sun\";",
          "236:             assert.strictEqual(output, input);",
          "237:           });",
          "239:           it(\"does nothing to a pair of parentheses\", function () {",
          "240:             const input = \"praise(the)sun\";",
          "242:             assert.strictEqual(output, input);",
          "243:           });",
          "244:         });",
          "",
          "[Removed Lines]",
          "217:             const output = escapeShellArg(input, shell, interpolation);",
          "223:             const output = escapeShellArg(input, shell, interpolation);",
          "229:             const output = escapeShellArg(input, shell, interpolation);",
          "235:             const output = escapeShellArg(input, shell, interpolation);",
          "241:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "243:             const output = escapeShellArg(input, interpolation);",
          "249:             const output = escapeShellArg(input, interpolation);",
          "255:             const output = escapeShellArg(input, interpolation);",
          "261:             const output = escapeShellArg(input, interpolation);",
          "267:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "246:         describe(\"square brackets ('[', ']')\", function () {",
          "247:           it(\"does nothing to one opening square bracket\", function () {",
          "248:             const input = \"foo[bar\";",
          "250:             assert.strictEqual(output, input);",
          "251:           });",
          "253:           it(\"does nothing to multiple opening square brackets\", function () {",
          "254:             const input = \"praise[the[sun\";",
          "256:             assert.strictEqual(output, input);",
          "257:           });",
          "259:           it(\"does nothing to one closing square bracket\", function () {",
          "260:             const input = \"foo]bar\";",
          "262:             assert.strictEqual(output, input);",
          "263:           });",
          "265:           it(\"does nothing to multiple closing square brackets\", function () {",
          "266:             const input = \"praise]the]sun\";",
          "268:             assert.strictEqual(output, input);",
          "269:           });",
          "271:           it(\"does nothing to a pair of square brackets\", function () {",
          "272:             const input = \"praise[the]sun\";",
          "274:             assert.strictEqual(output, input);",
          "275:           });",
          "276:         });",
          "",
          "[Removed Lines]",
          "249:             const output = escapeShellArg(input, shell, interpolation);",
          "255:             const output = escapeShellArg(input, shell, interpolation);",
          "261:             const output = escapeShellArg(input, shell, interpolation);",
          "267:             const output = escapeShellArg(input, shell, interpolation);",
          "273:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "275:             const output = escapeShellArg(input, interpolation);",
          "281:             const output = escapeShellArg(input, interpolation);",
          "287:             const output = escapeShellArg(input, interpolation);",
          "293:             const output = escapeShellArg(input, interpolation);",
          "299:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "278:         describe(\"curly brackets ('{', '}')\", function () {",
          "279:           it(\"does nothing to one opening curly bracket\", function () {",
          "280:             const input = \"foo{bar\";",
          "282:             assert.strictEqual(output, input);",
          "283:           });",
          "285:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "286:             const input = \"praise{the{sun\";",
          "288:             assert.strictEqual(output, input);",
          "289:           });",
          "291:           it(\"does nothing to one closing curly bracket\", function () {",
          "292:             const input = \"foo}bar\";",
          "294:             assert.strictEqual(output, input);",
          "295:           });",
          "297:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "298:             const input = \"praise}the}sun\";",
          "300:             assert.strictEqual(output, input);",
          "301:           });",
          "303:           it(\"does nothing to a pair of curly brackets\", function () {",
          "304:             const input = \"praise{the}sun\";",
          "306:             assert.strictEqual(output, input);",
          "307:           });",
          "308:         });",
          "",
          "[Removed Lines]",
          "281:             const output = escapeShellArg(input, shell, interpolation);",
          "287:             const output = escapeShellArg(input, shell, interpolation);",
          "293:             const output = escapeShellArg(input, shell, interpolation);",
          "299:             const output = escapeShellArg(input, shell, interpolation);",
          "305:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "307:             const output = escapeShellArg(input, interpolation);",
          "313:             const output = escapeShellArg(input, interpolation);",
          "319:             const output = escapeShellArg(input, interpolation);",
          "325:             const output = escapeShellArg(input, interpolation);",
          "331:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "310:         describe(\"angle brackets ('<', '>')\", function () {",
          "311:           it(\"does nothing to one left-angle bracket\", function () {",
          "312:             const input = \"foo<bar\";",
          "314:             assert.strictEqual(output, input);",
          "315:           });",
          "317:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "318:             const input = \"Praise<the<sun\";",
          "320:             assert.strictEqual(output, input);",
          "321:           });",
          "323:           it(\"does nothing to one right-angle bracket\", function () {",
          "324:             const input = \"foo>bar\";",
          "326:             assert.strictEqual(output, input);",
          "327:           });",
          "329:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "330:             const input = \"Praise>the>sun\";",
          "332:             assert.strictEqual(output, input);",
          "333:           });",
          "334:         });",
          "",
          "[Removed Lines]",
          "313:             const output = escapeShellArg(input, shell, interpolation);",
          "319:             const output = escapeShellArg(input, shell, interpolation);",
          "325:             const output = escapeShellArg(input, shell, interpolation);",
          "331:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "339:             const output = escapeShellArg(input, interpolation);",
          "345:             const output = escapeShellArg(input, interpolation);",
          "351:             const output = escapeShellArg(input, interpolation);",
          "357:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "336:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "337:           it(\"does nothing to one\", function () {",
          "338:             const input = \"foo\u201cbar\";",
          "340:             assert.strictEqual(output, \"foo\u201cbar\");",
          "341:           });",
          "343:           it(\"does nothing to multiple\", function () {",
          "344:             const input = \"Praise\u201cthe\u201csun\";",
          "346:             assert.strictEqual(output, \"Praise\u201cthe\u201csun\");",
          "347:           });",
          "348:         });",
          "",
          "[Removed Lines]",
          "339:             const output = escapeShellArg(input, shell, interpolation);",
          "345:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "365:             const output = escapeShellArg(input, interpolation);",
          "371:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "350:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "351:           it(\"does nothing to one\", function () {",
          "352:             const input = \"foo\u201dbar\";",
          "354:             assert.strictEqual(output, \"foo\u201dbar\");",
          "355:           });",
          "357:           it(\"does nothing to multiple\", function () {",
          "358:             const input = \"Praise\u201dthe\u201dsun\";",
          "360:             assert.strictEqual(output, \"Praise\u201dthe\u201dsun\");",
          "361:           });",
          "362:         });",
          "",
          "[Removed Lines]",
          "353:             const output = escapeShellArg(input, shell, interpolation);",
          "359:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "379:             const output = escapeShellArg(input, interpolation);",
          "385:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "364:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "365:           it(\"does nothing to one\", function () {",
          "366:             const input = \"foo\u201ebar\";",
          "368:             assert.strictEqual(output, \"foo\u201ebar\");",
          "369:           });",
          "371:           it(\"does nothing to multiple\", function () {",
          "372:             const input = \"Praise\u201ethe\u201esun\";",
          "374:             assert.strictEqual(output, \"Praise\u201ethe\u201esun\");",
          "375:           });",
          "376:         });",
          "",
          "[Removed Lines]",
          "367:             const output = escapeShellArg(input, shell, interpolation);",
          "373:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "393:             const output = escapeShellArg(input, interpolation);",
          "399:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "378:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "379:           it(\"does nothing to one\", function () {",
          "380:             const input = \"foo\u2018bar\";",
          "382:             assert.strictEqual(output, input);",
          "383:           });",
          "385:           it(\"does nothing to multiple\", function () {",
          "386:             const input = \"Praise\u2018the\u2018sun\";",
          "388:             assert.strictEqual(output, input);",
          "389:           });",
          "390:         });",
          "",
          "[Removed Lines]",
          "381:             const output = escapeShellArg(input, shell, interpolation);",
          "387:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "407:             const output = escapeShellArg(input, interpolation);",
          "413:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "392:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "393:           it(\"does nothing to one\", function () {",
          "394:             const input = \"foo\u2019bar\";",
          "396:             assert.strictEqual(output, input);",
          "397:           });",
          "399:           it(\"does nothing to multiple\", function () {",
          "400:             const input = \"Praise\u2019the\u2019sun\";",
          "402:             assert.strictEqual(output, input);",
          "403:           });",
          "404:         });",
          "",
          "[Removed Lines]",
          "395:             const output = escapeShellArg(input, shell, interpolation);",
          "401:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "421:             const output = escapeShellArg(input, interpolation);",
          "427:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "406:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "407:           it(\"does nothing to one\", function () {",
          "408:             const input = \"foo\u201abar\";",
          "410:             assert.strictEqual(output, input);",
          "411:           });",
          "413:           it(\"does nothing to multiple\", function () {",
          "414:             const input = \"Praise\u201athe\u201asun\";",
          "416:             assert.strictEqual(output, input);",
          "417:           });",
          "418:         });",
          "",
          "[Removed Lines]",
          "409:             const output = escapeShellArg(input, shell, interpolation);",
          "415:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "435:             const output = escapeShellArg(input, interpolation);",
          "441:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "420:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "421:           it(\"does nothing to one\", function () {",
          "422:             const input = \"foo\u201bbar\";",
          "424:             assert.strictEqual(output, input);",
          "425:           });",
          "427:           it(\"does nothing to multiple\", function () {",
          "428:             const input = \"Praise\u201bthe\u201bsun\";",
          "430:             assert.strictEqual(output, input);",
          "431:           });",
          "432:         });",
          "",
          "[Removed Lines]",
          "423:             const output = escapeShellArg(input, shell, interpolation);",
          "429:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "449:             const output = escapeShellArg(input, interpolation);",
          "455:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "438:         it(\"should return the input if nothing has to be escaped\", function () {",
          "439:           const input = `Hello world!`;",
          "441:           assert.strictEqual(output, input);",
          "442:         });",
          "444:         describe(\"null characters\", function () {",
          "445:           it(\"removes one null character\", function () {",
          "446:             const input = `foo ls${nullChar} -al bar`;",
          "448:             assert.strictEqual(output, `foo ls -al bar`);",
          "449:           });",
          "451:           it(\"removes multiple null characters\", function () {",
          "452:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "454:             assert.strictEqual(output, `foo ls -al bar`);",
          "455:           });",
          "456:         });",
          "",
          "[Removed Lines]",
          "440:           const output = escapeShellArg(input, shell, interpolation);",
          "447:             const output = escapeShellArg(input, shell, interpolation);",
          "453:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "466:           const output = escapeShellArg(input, interpolation);",
          "473:             const output = escapeShellArg(input, interpolation);",
          "479:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "458:         describe(\"double quotes ('\\\"')\", function () {",
          "459:           it(\"escapes one double quote\", function () {",
          "460:             const input = `\" ls -al`;",
          "462:             assert.strictEqual(output, `^\" ls -al`);",
          "463:           });",
          "465:           it(\"escapes multiple double quotes\", function () {",
          "466:             const input = `\" echo \"Hello world!`;",
          "468:             assert.strictEqual(output, `^\" echo ^\"Hello world!`);",
          "469:           });",
          "470:         });",
          "",
          "[Removed Lines]",
          "461:             const output = escapeShellArg(input, shell, interpolation);",
          "467:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "487:             const output = escapeShellArg(input, interpolation);",
          "493:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "472:         describe(\"backticks ('`')\", function () {",
          "473:           it(\"does nothing to one backtick\", function () {",
          "474:             const input = \"foo`bar\";",
          "476:             assert.strictEqual(output, \"foo`bar\");",
          "477:           });",
          "479:           it(\"does nothing to multiple backticks\", function () {",
          "480:             const input = \"Praise`the`sun\";",
          "482:             assert.strictEqual(output, \"Praise`the`sun\");",
          "483:           });",
          "484:         });",
          "",
          "[Removed Lines]",
          "475:             const output = escapeShellArg(input, shell, interpolation);",
          "481:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "501:             const output = escapeShellArg(input, interpolation);",
          "507:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "486:         describe(\"comma (',')\", function () {",
          "487:           it(\"does nothing to one comma\", function () {",
          "488:             const input = \"foo,bar\";",
          "490:             assert.strictEqual(output, input);",
          "491:           });",
          "493:           it(\"does nothing to multiple commas\", function () {",
          "494:             const input = \"Praise,the,sun\";",
          "496:             assert.strictEqual(output, input);",
          "497:           });",
          "498:         });",
          "",
          "[Removed Lines]",
          "489:             const output = escapeShellArg(input, shell, interpolation);",
          "495:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "515:             const output = escapeShellArg(input, interpolation);",
          "521:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "500:         describe(\"hashtags ('#')\", function () {",
          "501:           it(\"does nothing to one hashtag\", function () {",
          "502:             const input = \"#foobar\";",
          "504:             assert.strictEqual(output, input);",
          "505:           });",
          "507:           it(\"does nothing to multiple hashtags\", function () {",
          "508:             const input = \"#foo#bar\";",
          "510:             assert.strictEqual(output, input);",
          "511:           });",
          "512:         });",
          "",
          "[Removed Lines]",
          "503:             const output = escapeShellArg(input, shell, interpolation);",
          "509:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "529:             const output = escapeShellArg(input, interpolation);",
          "535:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "514:         describe(\"at-signs ('@')\", function () {",
          "515:           it(\"does nothing to one at-sign\", function () {",
          "516:             const input = \"foo@bar\";",
          "518:             assert.strictEqual(output, input);",
          "519:           });",
          "521:           it(\"does nothing to multiple at-signs\", function () {",
          "522:             const input = \"@foo@bar\";",
          "524:             assert.strictEqual(output, input);",
          "525:           });",
          "526:         });",
          "",
          "[Removed Lines]",
          "517:             const output = escapeShellArg(input, shell, interpolation);",
          "523:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "543:             const output = escapeShellArg(input, interpolation);",
          "549:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "528:         describe(\"hyphens ('-')\", function () {",
          "529:           it(\"does nothing to one hyphen\", function () {",
          "530:             const input = \"-foobar\";",
          "532:             assert.strictEqual(output, input);",
          "533:           });",
          "535:           it(\"does nothing to multiple hyphens\", function () {",
          "536:             const input = \"-foo-bar\";",
          "538:             assert.strictEqual(output, input);",
          "539:           });",
          "540:         });",
          "",
          "[Removed Lines]",
          "531:             const output = escapeShellArg(input, shell, interpolation);",
          "537:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "557:             const output = escapeShellArg(input, interpolation);",
          "563:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "542:         describe(\"carets ('^')\", function () {",
          "543:           it(\"escapes one caret\", function () {",
          "544:             const input = \"foo^bar\";",
          "546:             assert.strictEqual(output, \"foo^^bar\");",
          "547:           });",
          "549:           it(\"escapes multiple carets\", function () {",
          "550:             const input = \"Praise^the^sun\";",
          "552:             assert.strictEqual(output, \"Praise^^the^^sun\");",
          "553:           });",
          "554:         });",
          "",
          "[Removed Lines]",
          "545:             const output = escapeShellArg(input, shell, interpolation);",
          "551:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "571:             const output = escapeShellArg(input, interpolation);",
          "577:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "556:         describe(\"dollar signs ('$')\", function () {",
          "557:           it(\"does nothing to one dollar sign\", function () {",
          "558:             const input = \"foo$bar\";",
          "560:             assert.strictEqual(output, \"foo$bar\");",
          "561:           });",
          "563:           it(\"does nothing to multiple dollar signs\", function () {",
          "564:             const input = \"Praise$the$sun\";",
          "566:             assert.strictEqual(output, \"Praise$the$sun\");",
          "567:           });",
          "568:         });",
          "",
          "[Removed Lines]",
          "559:             const output = escapeShellArg(input, shell, interpolation);",
          "565:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "585:             const output = escapeShellArg(input, interpolation);",
          "591:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "570:         describe(\"colons (':')\", function () {",
          "571:           it(\"does nothing to one colon\", function () {",
          "572:             const input = \"foo:bar\";",
          "574:             assert.strictEqual(output, input);",
          "575:           });",
          "577:           it(\"does nothing to multiple colons\", function () {",
          "578:             const input = \"praise:the:sun\";",
          "580:             assert.strictEqual(output, input);",
          "581:           });",
          "582:         });",
          "",
          "[Removed Lines]",
          "573:             const output = escapeShellArg(input, shell, interpolation);",
          "579:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "599:             const output = escapeShellArg(input, interpolation);",
          "605:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "584:         describe(\"semicolons (';')\", function () {",
          "585:           it(\"does nothing to one semicolon\", function () {",
          "586:             const input = \"foo;bar\";",
          "588:             assert.strictEqual(output, input);",
          "589:           });",
          "591:           it(\"does nothing to multiple semicolons\", function () {",
          "592:             const input = \"praise;the;sun\";",
          "594:             assert.strictEqual(output, input);",
          "595:           });",
          "596:         });",
          "",
          "[Removed Lines]",
          "587:             const output = escapeShellArg(input, shell, interpolation);",
          "593:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "613:             const output = escapeShellArg(input, interpolation);",
          "619:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "598:         describe(\"ampersands ('&')\", function () {",
          "599:           it(\"escapes one ampersand\", function () {",
          "600:             const input = \"foo&bar\";",
          "602:             assert.strictEqual(output, \"foo^&bar\");",
          "603:           });",
          "605:           it(\"escapes multiple ampersands\", function () {",
          "606:             const input = \"praise&the&sun\";",
          "608:             assert.strictEqual(output, \"praise^&the^&sun\");",
          "609:           });",
          "610:         });",
          "",
          "[Removed Lines]",
          "601:             const output = escapeShellArg(input, shell, interpolation);",
          "607:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "627:             const output = escapeShellArg(input, interpolation);",
          "633:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "612:         describe(\"pipes ('|')\", function () {",
          "613:           it(\"escapes one pipe\", function () {",
          "614:             const input = \"foo|bar\";",
          "616:             assert.strictEqual(output, \"foo^|bar\");",
          "617:           });",
          "619:           it(\"escapes multiple pipes\", function () {",
          "620:             const input = \"praise|the|sun\";",
          "622:             assert.strictEqual(output, \"praise^|the^|sun\");",
          "623:           });",
          "624:         });",
          "",
          "[Removed Lines]",
          "615:             const output = escapeShellArg(input, shell, interpolation);",
          "621:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "641:             const output = escapeShellArg(input, interpolation);",
          "647:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "626:         describe(\"parentheses ('(', ')')\", function () {",
          "627:           it(\"does nothing to one opening parenthesis\", function () {",
          "628:             const input = \"foo(bar\";",
          "630:             assert.strictEqual(output, input);",
          "631:           });",
          "633:           it(\"does nothing to multiple opening parentheses\", function () {",
          "634:             const input = \"praise(the(sun\";",
          "636:             assert.strictEqual(output, input);",
          "637:           });",
          "639:           it(\"does nothing to one closing parenthesis\", function () {",
          "640:             const input = \"foo(bar\";",
          "642:             assert.strictEqual(output, input);",
          "643:           });",
          "645:           it(\"does nothing to multiple closing parentheses\", function () {",
          "646:             const input = \"praise(the(sun\";",
          "648:             assert.strictEqual(output, input);",
          "649:           });",
          "651:           it(\"does nothing to a pair of parentheses\", function () {",
          "652:             const input = \"praise(the)sun\";",
          "654:             assert.strictEqual(output, input);",
          "655:           });",
          "656:         });",
          "",
          "[Removed Lines]",
          "629:             const output = escapeShellArg(input, shell, interpolation);",
          "635:             const output = escapeShellArg(input, shell, interpolation);",
          "641:             const output = escapeShellArg(input, shell, interpolation);",
          "647:             const output = escapeShellArg(input, shell, interpolation);",
          "653:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "655:             const output = escapeShellArg(input, interpolation);",
          "661:             const output = escapeShellArg(input, interpolation);",
          "667:             const output = escapeShellArg(input, interpolation);",
          "673:             const output = escapeShellArg(input, interpolation);",
          "679:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "658:         describe(\"square brackets ('[', ']')\", function () {",
          "659:           it(\"does nothing to one opening square bracket\", function () {",
          "660:             const input = \"foo[bar\";",
          "662:             assert.strictEqual(output, input);",
          "663:           });",
          "665:           it(\"does nothing to multiple opening square brackets\", function () {",
          "666:             const input = \"praise[the[sun\";",
          "668:             assert.strictEqual(output, input);",
          "669:           });",
          "671:           it(\"does nothing to one closing square bracket\", function () {",
          "672:             const input = \"foo]bar\";",
          "674:             assert.strictEqual(output, input);",
          "675:           });",
          "677:           it(\"does nothing to multiple closing square brackets\", function () {",
          "678:             const input = \"praise]the]sun\";",
          "680:             assert.strictEqual(output, input);",
          "681:           });",
          "683:           it(\"does nothing to a pair of square brackets\", function () {",
          "684:             const input = \"praise[the]sun\";",
          "686:             assert.strictEqual(output, input);",
          "687:           });",
          "688:         });",
          "",
          "[Removed Lines]",
          "661:             const output = escapeShellArg(input, shell, interpolation);",
          "667:             const output = escapeShellArg(input, shell, interpolation);",
          "673:             const output = escapeShellArg(input, shell, interpolation);",
          "679:             const output = escapeShellArg(input, shell, interpolation);",
          "685:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "687:             const output = escapeShellArg(input, interpolation);",
          "693:             const output = escapeShellArg(input, interpolation);",
          "699:             const output = escapeShellArg(input, interpolation);",
          "705:             const output = escapeShellArg(input, interpolation);",
          "711:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "690:         describe(\"curly brackets ('{', '}')\", function () {",
          "691:           it(\"does nothing to one opening curly bracket\", function () {",
          "692:             const input = \"foo{bar\";",
          "694:             assert.strictEqual(output, input);",
          "695:           });",
          "697:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "698:             const input = \"praise{the{sun\";",
          "700:             assert.strictEqual(output, input);",
          "701:           });",
          "703:           it(\"does nothing to one closing curly bracket\", function () {",
          "704:             const input = \"foo}bar\";",
          "706:             assert.strictEqual(output, input);",
          "707:           });",
          "709:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "710:             const input = \"praise}the}sun\";",
          "712:             assert.strictEqual(output, input);",
          "713:           });",
          "715:           it(\"does nothing to a pair of curly brackets\", function () {",
          "716:             const input = \"praise{the}sun\";",
          "718:             assert.strictEqual(output, input);",
          "719:           });",
          "720:         });",
          "",
          "[Removed Lines]",
          "693:             const output = escapeShellArg(input, shell, interpolation);",
          "699:             const output = escapeShellArg(input, shell, interpolation);",
          "705:             const output = escapeShellArg(input, shell, interpolation);",
          "711:             const output = escapeShellArg(input, shell, interpolation);",
          "717:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "719:             const output = escapeShellArg(input, interpolation);",
          "725:             const output = escapeShellArg(input, interpolation);",
          "731:             const output = escapeShellArg(input, interpolation);",
          "737:             const output = escapeShellArg(input, interpolation);",
          "743:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "722:         describe(\"angle brackets ('<', '>')\", function () {",
          "723:           it(\"escapes one left-angle bracket\", function () {",
          "724:             const input = \"foo<bar\";",
          "726:             assert.strictEqual(output, \"foo^<bar\");",
          "727:           });",
          "729:           it(\"escapes multiple left-angle brackets\", function () {",
          "730:             const input = \"Praise<the<sun\";",
          "732:             assert.strictEqual(output, \"Praise^<the^<sun\");",
          "733:           });",
          "735:           it(\"does nothing to one right-angle bracket\", function () {",
          "736:             const input = \"foo>bar\";",
          "738:             assert.strictEqual(output, \"foo^>bar\");",
          "739:           });",
          "741:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "742:             const input = \"Praise>the>sun\";",
          "744:             assert.strictEqual(output, \"Praise^>the^>sun\");",
          "745:           });",
          "746:         });",
          "",
          "[Removed Lines]",
          "725:             const output = escapeShellArg(input, shell, interpolation);",
          "731:             const output = escapeShellArg(input, shell, interpolation);",
          "737:             const output = escapeShellArg(input, shell, interpolation);",
          "743:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "751:             const output = escapeShellArg(input, interpolation);",
          "757:             const output = escapeShellArg(input, interpolation);",
          "763:             const output = escapeShellArg(input, interpolation);",
          "769:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "748:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "749:           it(\"does nothing to one\", function () {",
          "750:             const input = \"foo\u201cbar\";",
          "752:             assert.strictEqual(output, \"foo\u201cbar\");",
          "753:           });",
          "755:           it(\"does nothing to multiple\", function () {",
          "756:             const input = \"Praise\u201cthe\u201csun\";",
          "758:             assert.strictEqual(output, \"Praise\u201cthe\u201csun\");",
          "759:           });",
          "760:         });",
          "",
          "[Removed Lines]",
          "751:             const output = escapeShellArg(input, shell, interpolation);",
          "757:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "777:             const output = escapeShellArg(input, interpolation);",
          "783:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "762:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "763:           it(\"does nothing to one\", function () {",
          "764:             const input = \"foo\u201dbar\";",
          "766:             assert.strictEqual(output, \"foo\u201dbar\");",
          "767:           });",
          "769:           it(\"does nothing to multiple\", function () {",
          "770:             const input = \"Praise\u201dthe\u201dsun\";",
          "772:             assert.strictEqual(output, \"Praise\u201dthe\u201dsun\");",
          "773:           });",
          "774:         });",
          "",
          "[Removed Lines]",
          "765:             const output = escapeShellArg(input, shell, interpolation);",
          "771:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "791:             const output = escapeShellArg(input, interpolation);",
          "797:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "776:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "777:           it(\"does nothing to one\", function () {",
          "778:             const input = \"foo\u201ebar\";",
          "780:             assert.strictEqual(output, \"foo\u201ebar\");",
          "781:           });",
          "783:           it(\"does nothing to multiple\", function () {",
          "784:             const input = \"Praise\u201ethe\u201esun\";",
          "786:             assert.strictEqual(output, \"Praise\u201ethe\u201esun\");",
          "787:           });",
          "788:         });",
          "",
          "[Removed Lines]",
          "779:             const output = escapeShellArg(input, shell, interpolation);",
          "785:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "805:             const output = escapeShellArg(input, interpolation);",
          "811:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "790:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "791:           it(\"does nothing to one\", function () {",
          "792:             const input = \"foo\u2018bar\";",
          "794:             assert.strictEqual(output, input);",
          "795:           });",
          "797:           it(\"does nothing to multiple\", function () {",
          "798:             const input = \"Praise\u2018the\u2018sun\";",
          "800:             assert.strictEqual(output, input);",
          "801:           });",
          "802:         });",
          "",
          "[Removed Lines]",
          "793:             const output = escapeShellArg(input, shell, interpolation);",
          "799:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "819:             const output = escapeShellArg(input, interpolation);",
          "825:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "804:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "805:           it(\"does nothing to one\", function () {",
          "806:             const input = \"foo\u2019bar\";",
          "808:             assert.strictEqual(output, input);",
          "809:           });",
          "811:           it(\"does nothing to multiple\", function () {",
          "812:             const input = \"Praise\u2019the\u2019sun\";",
          "814:             assert.strictEqual(output, input);",
          "815:           });",
          "816:         });",
          "",
          "[Removed Lines]",
          "807:             const output = escapeShellArg(input, shell, interpolation);",
          "813:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "833:             const output = escapeShellArg(input, interpolation);",
          "839:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "818:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "819:           it(\"does nothing to one\", function () {",
          "820:             const input = \"foo\u201abar\";",
          "822:             assert.strictEqual(output, input);",
          "823:           });",
          "825:           it(\"does nothing to multiple\", function () {",
          "826:             const input = \"Praise\u201athe\u201asun\";",
          "828:             assert.strictEqual(output, input);",
          "829:           });",
          "830:         });",
          "",
          "[Removed Lines]",
          "821:             const output = escapeShellArg(input, shell, interpolation);",
          "827:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "847:             const output = escapeShellArg(input, interpolation);",
          "853:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "832:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "833:           it(\"does nothing to one\", function () {",
          "834:             const input = \"foo\u201bbar\";",
          "836:             assert.strictEqual(output, input);",
          "837:           });",
          "839:           it(\"does nothing to multiple\", function () {",
          "840:             const input = \"Praise\u201bthe\u201bsun\";",
          "842:             assert.strictEqual(output, input);",
          "843:           });",
          "844:         });",
          "845:       });",
          "846:     });",
          "851:       describe(\"No interpolation\", function () {",
          "852:         const interpolation = false;",
          "854:         it(\"returns the input if nothing has to be escaped\", function () {",
          "855:           const input = `Hello world!`;",
          "857:           assert.strictEqual(output, input);",
          "858:         });",
          "860:         describe(\"null characters\", function () {",
          "861:           it(\"removes one null character\", function () {",
          "862:             const input = `foo ls${nullChar} -al bar`;",
          "864:             assert.strictEqual(output, `foo ls -al bar`);",
          "865:           });",
          "867:           it(\"removes multiple null characters\", function () {",
          "868:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "870:             assert.strictEqual(output, `foo ls -al bar`);",
          "871:           });",
          "872:         });",
          "",
          "[Removed Lines]",
          "835:             const output = escapeShellArg(input, shell, interpolation);",
          "841:             const output = escapeShellArg(input, shell, interpolation);",
          "848:     describe(\"powershell.exe\", function () {",
          "849:       const shell = powershellExe;",
          "856:           const output = escapeShellArg(input, shell, interpolation);",
          "863:             const output = escapeShellArg(input, shell, interpolation);",
          "869:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "861:             const output = escapeShellArg(input, interpolation);",
          "867:             const output = escapeShellArg(input, interpolation);",
          "874:     describe(binPowerShell, function () {",
          "875:       const escapeShellArg = win.getEscapeFunction(binPowerShell);",
          "882:           const output = escapeShellArg(input, interpolation);",
          "889:             const output = escapeShellArg(input, interpolation);",
          "895:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "874:         describe(\"double quotes ('\\\"')\", function () {",
          "875:           it(\"escapes one double quote\", function () {",
          "876:             const input = `\" ls -al`;",
          "878:             assert.strictEqual(output, `\"\" ls -al`);",
          "879:           });",
          "881:           it(\"escapes multiple double quotes\", function () {",
          "882:             const input = `\" echo \"Hello world!`;",
          "884:             assert.strictEqual(output, `\"\" echo \"\"Hello world!`);",
          "885:           });",
          "886:         });",
          "",
          "[Removed Lines]",
          "877:             const output = escapeShellArg(input, shell, interpolation);",
          "883:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "903:             const output = escapeShellArg(input, interpolation);",
          "909:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "888:         describe(\"backticks ('`')\", function () {",
          "889:           it(\"escapes one backtick\", function () {",
          "890:             const input = \"foo`bar\";",
          "892:             assert.strictEqual(output, \"foo``bar\");",
          "893:           });",
          "895:           it(\"escapes multiple backticks\", function () {",
          "896:             const input = \"Praise`the`sun\";",
          "898:             assert.strictEqual(output, \"Praise``the``sun\");",
          "899:           });",
          "900:         });",
          "",
          "[Removed Lines]",
          "891:             const output = escapeShellArg(input, shell, interpolation);",
          "897:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "917:             const output = escapeShellArg(input, interpolation);",
          "923:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "902:         describe(\"comma (',')\", function () {",
          "903:           it(\"does nothing to one comma\", function () {",
          "904:             const input = \"foo,bar\";",
          "906:             assert.strictEqual(output, input);",
          "907:           });",
          "909:           it(\"does nothing to multiple commas\", function () {",
          "910:             const input = \"Praise,the,sun\";",
          "912:             assert.strictEqual(output, input);",
          "913:           });",
          "914:         });",
          "",
          "[Removed Lines]",
          "905:             const output = escapeShellArg(input, shell, interpolation);",
          "911:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "931:             const output = escapeShellArg(input, interpolation);",
          "937:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "916:         describe(\"hashtags ('#')\", function () {",
          "917:           it(\"does nothing to one hashtag\", function () {",
          "918:             const input = \"#foobar\";",
          "920:             assert.strictEqual(output, input);",
          "921:           });",
          "923:           it(\"does nothing to multiple hashtags\", function () {",
          "924:             const input = \"#foo#bar\";",
          "926:             assert.strictEqual(output, input);",
          "927:           });",
          "928:         });",
          "",
          "[Removed Lines]",
          "919:             const output = escapeShellArg(input, shell, interpolation);",
          "925:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "945:             const output = escapeShellArg(input, interpolation);",
          "951:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "930:         describe(\"at-signs ('@')\", function () {",
          "931:           it(\"does nothing to one at-sign\", function () {",
          "932:             const input = \"foo@bar\";",
          "934:             assert.strictEqual(output, input);",
          "935:           });",
          "937:           it(\"does nothing to multiple at-signs\", function () {",
          "938:             const input = \"@foo@bar\";",
          "940:             assert.strictEqual(output, input);",
          "941:           });",
          "942:         });",
          "",
          "[Removed Lines]",
          "933:             const output = escapeShellArg(input, shell, interpolation);",
          "939:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "959:             const output = escapeShellArg(input, interpolation);",
          "965:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "944:         describe(\"hyphens ('-')\", function () {",
          "945:           it(\"does nothing to one hyphen\", function () {",
          "946:             const input = \"-foobar\";",
          "948:             assert.strictEqual(output, input);",
          "949:           });",
          "951:           it(\"does nothing to multiple hyphens\", function () {",
          "952:             const input = \"-foo-bar\";",
          "954:             assert.strictEqual(output, input);",
          "955:           });",
          "956:         });",
          "",
          "[Removed Lines]",
          "947:             const output = escapeShellArg(input, shell, interpolation);",
          "953:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "973:             const output = escapeShellArg(input, interpolation);",
          "979:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "958:         describe(\"carets ('^')\", function () {",
          "959:           it(\"does nothing to one caret\", function () {",
          "960:             const input = \"foo^bar\";",
          "962:             assert.strictEqual(output, input);",
          "963:           });",
          "965:           it(\"does nothing to multiple carets\", function () {",
          "966:             const input = \"Praise^the^sun\";",
          "968:             assert.strictEqual(output, input);",
          "969:           });",
          "970:         });",
          "",
          "[Removed Lines]",
          "961:             const output = escapeShellArg(input, shell, interpolation);",
          "967:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "987:             const output = escapeShellArg(input, interpolation);",
          "993:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "972:         describe(\"dollar signs ('$')\", function () {",
          "973:           it(\"escapes one dollar sign\", function () {",
          "974:             const input = \"foo$bar\";",
          "976:             assert.strictEqual(output, \"foo`$bar\");",
          "977:           });",
          "979:           it(\"escapes multiple dollar signs\", function () {",
          "980:             const input = \"Praise$the$sun\";",
          "982:             assert.strictEqual(output, \"Praise`$the`$sun\");",
          "983:           });",
          "984:         });",
          "",
          "[Removed Lines]",
          "975:             const output = escapeShellArg(input, shell, interpolation);",
          "981:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1001:             const output = escapeShellArg(input, interpolation);",
          "1007:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "986:         describe(\"colons (':')\", function () {",
          "987:           it(\"does nothing to one colon\", function () {",
          "988:             const input = \"foo:bar\";",
          "990:             assert.strictEqual(output, input);",
          "991:           });",
          "993:           it(\"does nothing to multiple colons\", function () {",
          "994:             const input = \"praise:the:sun\";",
          "996:             assert.strictEqual(output, input);",
          "997:           });",
          "998:         });",
          "",
          "[Removed Lines]",
          "989:             const output = escapeShellArg(input, shell, interpolation);",
          "995:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1015:             const output = escapeShellArg(input, interpolation);",
          "1021:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1000:         describe(\"semicolons (';')\", function () {",
          "1001:           it(\"does nothing to one semicolon\", function () {",
          "1002:             const input = \"foo;bar\";",
          "1004:             assert.strictEqual(output, input);",
          "1005:           });",
          "1007:           it(\"does nothing to multiple semicolons\", function () {",
          "1008:             const input = \"praise;the;sun\";",
          "1010:             assert.strictEqual(output, input);",
          "1011:           });",
          "1012:         });",
          "",
          "[Removed Lines]",
          "1003:             const output = escapeShellArg(input, shell, interpolation);",
          "1009:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1029:             const output = escapeShellArg(input, interpolation);",
          "1035:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1014:         describe(\"ampersands ('&')\", function () {",
          "1015:           it(\"does nothing to one ampersand\", function () {",
          "1016:             const input = \"foo&bar\";",
          "1018:             assert.strictEqual(output, input);",
          "1019:           });",
          "1021:           it(\"does nothing to multiple ampersands\", function () {",
          "1022:             const input = \"praise&the&sun\";",
          "1024:             assert.strictEqual(output, input);",
          "1025:           });",
          "1026:         });",
          "",
          "[Removed Lines]",
          "1017:             const output = escapeShellArg(input, shell, interpolation);",
          "1023:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1043:             const output = escapeShellArg(input, interpolation);",
          "1049:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1028:         describe(\"pipes ('|')\", function () {",
          "1029:           it(\"does nothing to one pipe\", function () {",
          "1030:             const input = \"foo|bar\";",
          "1032:             assert.strictEqual(output, input);",
          "1033:           });",
          "1035:           it(\"does nothing to multiple pipes\", function () {",
          "1036:             const input = \"praise|the|sun\";",
          "1038:             assert.strictEqual(output, input);",
          "1039:           });",
          "1040:         });",
          "",
          "[Removed Lines]",
          "1031:             const output = escapeShellArg(input, shell, interpolation);",
          "1037:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1057:             const output = escapeShellArg(input, interpolation);",
          "1063:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1042:         describe(\"parentheses ('(', ')')\", function () {",
          "1043:           it(\"does nothing to one opening parenthesis\", function () {",
          "1044:             const input = \"foo(bar\";",
          "1046:             assert.strictEqual(output, input);",
          "1047:           });",
          "1049:           it(\"does nothing to multiple opening parentheses\", function () {",
          "1050:             const input = \"praise(the(sun\";",
          "1052:             assert.strictEqual(output, input);",
          "1053:           });",
          "1055:           it(\"does nothing to one closing parenthesis\", function () {",
          "1056:             const input = \"foo(bar\";",
          "1058:             assert.strictEqual(output, input);",
          "1059:           });",
          "1061:           it(\"does nothing to multiple closing parentheses\", function () {",
          "1062:             const input = \"praise(the(sun\";",
          "1064:             assert.strictEqual(output, input);",
          "1065:           });",
          "1067:           it(\"does nothing to a pair of parentheses\", function () {",
          "1068:             const input = \"praise(the)sun\";",
          "1070:             assert.strictEqual(output, input);",
          "1071:           });",
          "1072:         });",
          "",
          "[Removed Lines]",
          "1045:             const output = escapeShellArg(input, shell, interpolation);",
          "1051:             const output = escapeShellArg(input, shell, interpolation);",
          "1057:             const output = escapeShellArg(input, shell, interpolation);",
          "1063:             const output = escapeShellArg(input, shell, interpolation);",
          "1069:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1071:             const output = escapeShellArg(input, interpolation);",
          "1077:             const output = escapeShellArg(input, interpolation);",
          "1083:             const output = escapeShellArg(input, interpolation);",
          "1089:             const output = escapeShellArg(input, interpolation);",
          "1095:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1074:         describe(\"square brackets ('[', ']')\", function () {",
          "1075:           it(\"does nothing to one opening square bracket\", function () {",
          "1076:             const input = \"foo[bar\";",
          "1078:             assert.strictEqual(output, input);",
          "1079:           });",
          "1081:           it(\"does nothing to multiple opening square brackets\", function () {",
          "1082:             const input = \"praise[the[sun\";",
          "1084:             assert.strictEqual(output, input);",
          "1085:           });",
          "1087:           it(\"does nothing to one closing square bracket\", function () {",
          "1088:             const input = \"foo]bar\";",
          "1090:             assert.strictEqual(output, input);",
          "1091:           });",
          "1093:           it(\"does nothing to multiple closing square brackets\", function () {",
          "1094:             const input = \"praise]the]sun\";",
          "1096:             assert.strictEqual(output, input);",
          "1097:           });",
          "1099:           it(\"does nothing to a pair of square brackets\", function () {",
          "1100:             const input = \"praise[the]sun\";",
          "1102:             assert.strictEqual(output, input);",
          "1103:           });",
          "1104:         });",
          "",
          "[Removed Lines]",
          "1077:             const output = escapeShellArg(input, shell, interpolation);",
          "1083:             const output = escapeShellArg(input, shell, interpolation);",
          "1089:             const output = escapeShellArg(input, shell, interpolation);",
          "1095:             const output = escapeShellArg(input, shell, interpolation);",
          "1101:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1103:             const output = escapeShellArg(input, interpolation);",
          "1109:             const output = escapeShellArg(input, interpolation);",
          "1115:             const output = escapeShellArg(input, interpolation);",
          "1121:             const output = escapeShellArg(input, interpolation);",
          "1127:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1106:         describe(\"curly brackets ('{', '}')\", function () {",
          "1107:           it(\"does nothing to one opening curly bracket\", function () {",
          "1108:             const input = \"foo{bar\";",
          "1110:             assert.strictEqual(output, input);",
          "1111:           });",
          "1113:           it(\"does nothing to multiple opening curly brackets\", function () {",
          "1114:             const input = \"praise{the{sun\";",
          "1116:             assert.strictEqual(output, input);",
          "1117:           });",
          "1119:           it(\"does nothing to one closing curly bracket\", function () {",
          "1120:             const input = \"foo}bar\";",
          "1122:             assert.strictEqual(output, input);",
          "1123:           });",
          "1125:           it(\"does nothing to multiple closing curly brackets\", function () {",
          "1126:             const input = \"praise}the}sun\";",
          "1128:             assert.strictEqual(output, input);",
          "1129:           });",
          "1131:           it(\"does nothing to a pair of curly brackets\", function () {",
          "1132:             const input = \"praise{the}sun\";",
          "1134:             assert.strictEqual(output, input);",
          "1135:           });",
          "1136:         });",
          "",
          "[Removed Lines]",
          "1109:             const output = escapeShellArg(input, shell, interpolation);",
          "1115:             const output = escapeShellArg(input, shell, interpolation);",
          "1121:             const output = escapeShellArg(input, shell, interpolation);",
          "1127:             const output = escapeShellArg(input, shell, interpolation);",
          "1133:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1135:             const output = escapeShellArg(input, interpolation);",
          "1141:             const output = escapeShellArg(input, interpolation);",
          "1147:             const output = escapeShellArg(input, interpolation);",
          "1153:             const output = escapeShellArg(input, interpolation);",
          "1159:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1138:         describe(\"angle brackets ('<', '>')\", function () {",
          "1139:           it(\"does nothing to one left-angle bracket\", function () {",
          "1140:             const input = \"foo<bar\";",
          "1142:             assert.strictEqual(output, input);",
          "1143:           });",
          "1145:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "1146:             const input = \"<foo<bar\";",
          "1148:             assert.strictEqual(output, input);",
          "1149:           });",
          "1151:           it(\"does nothing to one right-angle bracket\", function () {",
          "1152:             const input = \"foo>bar\";",
          "1154:             assert.strictEqual(output, input);",
          "1155:           });",
          "1157:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "1158:             const input = \">foo>bar\";",
          "1160:             assert.strictEqual(output, input);",
          "1161:           });",
          "1162:         });",
          "",
          "[Removed Lines]",
          "1141:             const output = escapeShellArg(input, shell, interpolation);",
          "1147:             const output = escapeShellArg(input, shell, interpolation);",
          "1153:             const output = escapeShellArg(input, shell, interpolation);",
          "1159:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1167:             const output = escapeShellArg(input, interpolation);",
          "1173:             const output = escapeShellArg(input, interpolation);",
          "1179:             const output = escapeShellArg(input, interpolation);",
          "1185:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1164:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "1165:           it(\"escapes one\", function () {",
          "1166:             const input = \"foo\u201cbar\";",
          "1168:             assert.strictEqual(output, \"foo\u201c\u201cbar\");",
          "1169:           });",
          "1171:           it(\"escapes multiple\", function () {",
          "1172:             const input = \"Praise\u201cthe\u201csun\";",
          "1174:             assert.strictEqual(output, \"Praise\u201c\u201cthe\u201c\u201csun\");",
          "1175:           });",
          "1176:         });",
          "",
          "[Removed Lines]",
          "1167:             const output = escapeShellArg(input, shell, interpolation);",
          "1173:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1193:             const output = escapeShellArg(input, interpolation);",
          "1199:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1178:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "1179:           it(\"escapes one\", function () {",
          "1180:             const input = \"foo\u201dbar\";",
          "1182:             assert.strictEqual(output, \"foo\u201d\u201dbar\");",
          "1183:           });",
          "1185:           it(\"escapes multiple\", function () {",
          "1186:             const input = \"Praise\u201dthe\u201dsun\";",
          "1188:             assert.strictEqual(output, \"Praise\u201d\u201dthe\u201d\u201dsun\");",
          "1189:           });",
          "1190:         });",
          "",
          "[Removed Lines]",
          "1181:             const output = escapeShellArg(input, shell, interpolation);",
          "1187:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1207:             const output = escapeShellArg(input, interpolation);",
          "1213:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1192:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "1193:           it(\"escapes one\", function () {",
          "1194:             const input = \"foo\u201ebar\";",
          "1196:             assert.strictEqual(output, \"foo\u201e\u201ebar\");",
          "1197:           });",
          "1199:           it(\"escapes multiple\", function () {",
          "1200:             const input = \"Praise\u201ethe\u201esun\";",
          "1202:             assert.strictEqual(output, \"Praise\u201e\u201ethe\u201e\u201esun\");",
          "1203:           });",
          "1204:         });",
          "",
          "[Removed Lines]",
          "1195:             const output = escapeShellArg(input, shell, interpolation);",
          "1201:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1221:             const output = escapeShellArg(input, interpolation);",
          "1227:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1206:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "1207:           it(\"does nothing to one\", function () {",
          "1208:             const input = \"foo\u2018bar\";",
          "1210:             assert.strictEqual(output, input);",
          "1211:           });",
          "1213:           it(\"does nothing to multiple\", function () {",
          "1214:             const input = \"Praise\u2018the\u2018sun\";",
          "1216:             assert.strictEqual(output, input);",
          "1217:           });",
          "1218:         });",
          "",
          "[Removed Lines]",
          "1209:             const output = escapeShellArg(input, shell, interpolation);",
          "1215:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1235:             const output = escapeShellArg(input, interpolation);",
          "1241:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1220:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "1221:           it(\"does nothing to one\", function () {",
          "1222:             const input = \"foo\u2019bar\";",
          "1224:             assert.strictEqual(output, input);",
          "1225:           });",
          "1227:           it(\"does nothing to multiple\", function () {",
          "1228:             const input = \"Praise\u2019the\u2019sun\";",
          "1230:             assert.strictEqual(output, input);",
          "1231:           });",
          "1232:         });",
          "",
          "[Removed Lines]",
          "1223:             const output = escapeShellArg(input, shell, interpolation);",
          "1229:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1249:             const output = escapeShellArg(input, interpolation);",
          "1255:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1234:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "1235:           it(\"does nothing to one\", function () {",
          "1236:             const input = \"foo\u201abar\";",
          "1238:             assert.strictEqual(output, input);",
          "1239:           });",
          "1241:           it(\"does nothing to multiple\", function () {",
          "1242:             const input = \"Praise\u201athe\u201asun\";",
          "1244:             assert.strictEqual(output, input);",
          "1245:           });",
          "1246:         });",
          "",
          "[Removed Lines]",
          "1237:             const output = escapeShellArg(input, shell, interpolation);",
          "1243:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1263:             const output = escapeShellArg(input, interpolation);",
          "1269:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1248:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "1249:           it(\"does nothing to one\", function () {",
          "1250:             const input = \"foo\u201bbar\";",
          "1252:             assert.strictEqual(output, input);",
          "1253:           });",
          "1255:           it(\"does nothing to multiple\", function () {",
          "1256:             const input = \"Praise\u201bthe\u201bsun\";",
          "1258:             assert.strictEqual(output, input);",
          "1259:           });",
          "1260:         });",
          "",
          "[Removed Lines]",
          "1251:             const output = escapeShellArg(input, shell, interpolation);",
          "1257:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1277:             const output = escapeShellArg(input, interpolation);",
          "1283:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1266:         it(\"returns the input if nothing has to be escaped\", function () {",
          "1267:           const input = `Hello world!`;",
          "1269:           assert.strictEqual(output, input);",
          "1270:         });",
          "1272:         describe(\"null characters\", function () {",
          "1273:           it(\"removes one null character\", function () {",
          "1274:             const input = `foo ls${nullChar} -al bar`;",
          "1276:             assert.strictEqual(output, `foo ls -al bar`);",
          "1277:           });",
          "1279:           it(\"removes multiple null characters\", function () {",
          "1280:             const input = `foo ls${nullChar} -al ${nullChar}bar`;",
          "1282:             assert.strictEqual(output, `foo ls -al bar`);",
          "1283:           });",
          "1284:         });",
          "",
          "[Removed Lines]",
          "1268:           const output = escapeShellArg(input, shell, interpolation);",
          "1275:             const output = escapeShellArg(input, shell, interpolation);",
          "1281:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1294:           const output = escapeShellArg(input, interpolation);",
          "1301:             const output = escapeShellArg(input, interpolation);",
          "1307:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1286:         describe(\"double quotes ('\\\"')\", function () {",
          "1287:           it(\"escapes one double quote\", function () {",
          "1288:             const input = `\" ls -al`;",
          "1290:             assert.strictEqual(output, '`\" ls -al');",
          "1291:           });",
          "1293:           it(\"escapes multiple double quotes\", function () {",
          "1294:             const input = `\" echo \"Hello world!`;",
          "1296:             assert.strictEqual(output, '`\" echo `\"Hello world!');",
          "1297:           });",
          "1298:         });",
          "",
          "[Removed Lines]",
          "1289:             const output = escapeShellArg(input, shell, interpolation);",
          "1295:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1315:             const output = escapeShellArg(input, interpolation);",
          "1321:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1300:         describe(\"backticks ('`')\", function () {",
          "1301:           it(\"escapes one backtick\", function () {",
          "1302:             const input = \"foo`bar\";",
          "1304:             assert.strictEqual(output, \"foo``bar\");",
          "1305:           });",
          "1307:           it(\"escapes multiple backticks\", function () {",
          "1308:             const input = \"Praise`the`sun\";",
          "1310:             assert.strictEqual(output, \"Praise``the``sun\");",
          "1311:           });",
          "1312:         });",
          "",
          "[Removed Lines]",
          "1303:             const output = escapeShellArg(input, shell, interpolation);",
          "1309:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1329:             const output = escapeShellArg(input, interpolation);",
          "1335:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1314:         describe(\"comma (',')\", function () {",
          "1315:           it(\"escapes one comma\", function () {",
          "1316:             const input = \"foo,bar\";",
          "1318:             assert.strictEqual(output, \"foo`,bar\");",
          "1319:           });",
          "1321:           it(\"escapes multiple commas\", function () {",
          "1322:             const input = \"Praise,the,sun\";",
          "1324:             assert.strictEqual(output, \"Praise`,the`,sun\");",
          "1325:           });",
          "1326:         });",
          "",
          "[Removed Lines]",
          "1317:             const output = escapeShellArg(input, shell, interpolation);",
          "1323:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1343:             const output = escapeShellArg(input, interpolation);",
          "1349:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1328:         describe(\"hashtags ('#')\", function () {",
          "1329:           it(\"escapes a hashtag at the start\", function () {",
          "1330:             const input = \"#foobar\";",
          "1332:             assert.strictEqual(output, \"`#foobar\");",
          "1333:           });",
          "1335:           it(\"does nothing to a hashtag not at the start\", function () {",
          "1336:             const input = \"foo#bar\";",
          "1338:             assert.strictEqual(output, input);",
          "1339:           });",
          "1341:           it(\"only escapes the hashtag at the start\", function () {",
          "1342:             const input = \"#foo#bar\";",
          "1344:             assert.strictEqual(output, \"`#foo#bar\");",
          "1345:           });",
          "1346:         });",
          "",
          "[Removed Lines]",
          "1331:             const output = escapeShellArg(input, shell, interpolation);",
          "1337:             const output = escapeShellArg(input, shell, interpolation);",
          "1343:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1357:             const output = escapeShellArg(input, interpolation);",
          "1363:             const output = escapeShellArg(input, interpolation);",
          "1369:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1348:         describe(\"at-signs ('@')\", function () {",
          "1349:           it(\"escapes an at-sign at the start\", function () {",
          "1350:             const input = \"@foobar\";",
          "1352:             assert.strictEqual(output, \"`@foobar\");",
          "1353:           });",
          "1355:           it(\"does nothing to an at-sign not at the start\", function () {",
          "1356:             const input = \"foo@bar\";",
          "1358:             assert.strictEqual(output, input);",
          "1359:           });",
          "1361:           it(\"only escapes the at-sign at the start\", function () {",
          "1362:             const input = \"@foo@bar\";",
          "1364:             assert.strictEqual(output, \"`@foo@bar\");",
          "1365:           });",
          "1366:         });",
          "",
          "[Removed Lines]",
          "1351:             const output = escapeShellArg(input, shell, interpolation);",
          "1357:             const output = escapeShellArg(input, shell, interpolation);",
          "1363:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1377:             const output = escapeShellArg(input, interpolation);",
          "1383:             const output = escapeShellArg(input, interpolation);",
          "1389:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1368:         describe(\"hyphens ('-')\", function () {",
          "1369:           it(\"escapes a hyphen at the start\", function () {",
          "1370:             const input = \"-foobar\";",
          "1372:             assert.strictEqual(output, \"`-foobar\");",
          "1373:           });",
          "1375:           it(\"does nothing to a hyphen not at the start\", function () {",
          "1376:             const input = \"foo-bar\";",
          "1378:             assert.strictEqual(output, input);",
          "1379:           });",
          "1381:           it(\"only escapes the hyphen at the start\", function () {",
          "1382:             const input = \"-foo-bar\";",
          "1384:             assert.strictEqual(output, \"`-foo-bar\");",
          "1385:           });",
          "1386:         });",
          "",
          "[Removed Lines]",
          "1371:             const output = escapeShellArg(input, shell, interpolation);",
          "1377:             const output = escapeShellArg(input, shell, interpolation);",
          "1383:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1397:             const output = escapeShellArg(input, interpolation);",
          "1403:             const output = escapeShellArg(input, interpolation);",
          "1409:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1388:         describe(\"carets ('^')\", function () {",
          "1389:           it(\"does nothing to one caret\", function () {",
          "1390:             const input = \"foo^bar\";",
          "1392:             assert.strictEqual(output, input);",
          "1393:           });",
          "1395:           it(\"does nothing to multiple carets\", function () {",
          "1396:             const input = \"Praise^the^sun\";",
          "1398:             assert.strictEqual(output, input);",
          "1399:           });",
          "1400:         });",
          "",
          "[Removed Lines]",
          "1391:             const output = escapeShellArg(input, shell, interpolation);",
          "1397:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1417:             const output = escapeShellArg(input, interpolation);",
          "1423:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "1402:         describe(\"dollar signs ('$')\", function () {",
          "1403:           it(\"escapes one dollar sign\", function () {",
          "1404:             const input = \"foo$bar\";",
          "1406:             assert.strictEqual(output, \"foo`$bar\");",
          "1407:           });",
          "1409:           it(\"escapes multiple dollar signs\", function () {",
          "1410:             const input = \"Praise$the$sun\";",
          "1412:             assert.strictEqual(output, \"Praise`$the`$sun\");",
          "1413:           });",
          "1414:         });",
          "",
          "[Removed Lines]",
          "1405:             const output = escapeShellArg(input, shell, interpolation);",
          "1411:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1431:             const output = escapeShellArg(input, interpolation);",
          "1437:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "1416:         describe(\"colons (':')\", function () {",
          "1417:           it(\"escapes a colon at the start\", function () {",
          "1418:             const input = \":foobar\";",
          "1420:             assert.strictEqual(output, \"`:foobar\");",
          "1421:           });",
          "1423:           it(\"does nothing to a colon not at the start\", function () {",
          "1424:             const input = \"foo:bar\";",
          "1426:             assert.strictEqual(output, input);",
          "1427:           });",
          "1429:           it(\"only escapes the colon at the start\", function () {",
          "1430:             const input = \":foo:bar\";",
          "1432:             assert.strictEqual(output, \"`:foo:bar\");",
          "1433:           });",
          "1434:         });",
          "",
          "[Removed Lines]",
          "1419:             const output = escapeShellArg(input, shell, interpolation);",
          "1425:             const output = escapeShellArg(input, shell, interpolation);",
          "1431:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1445:             const output = escapeShellArg(input, interpolation);",
          "1451:             const output = escapeShellArg(input, interpolation);",
          "1457:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "1436:         describe(\"semicolons (';')\", function () {",
          "1437:           it(\"escapes one semicolon\", function () {",
          "1438:             const input = \"foo;bar\";",
          "1440:             assert.strictEqual(output, \"foo`;bar\");",
          "1441:           });",
          "1443:           it(\"escapes multiple semicolons\", function () {",
          "1444:             const input = \"praise;the;sun\";",
          "1446:             assert.strictEqual(output, \"praise`;the`;sun\");",
          "1447:           });",
          "1448:         });",
          "",
          "[Removed Lines]",
          "1439:             const output = escapeShellArg(input, shell, interpolation);",
          "1445:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1465:             const output = escapeShellArg(input, interpolation);",
          "1471:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "1450:         describe(\"ampersands ('&')\", function () {",
          "1451:           it(\"escapes one ampersand\", function () {",
          "1452:             const input = \"foo&bar\";",
          "1454:             assert.strictEqual(output, \"foo`&bar\");",
          "1455:           });",
          "1457:           it(\"escapes multiple ampersands\", function () {",
          "1458:             const input = \"praise&the&sun\";",
          "1460:             assert.strictEqual(output, \"praise`&the`&sun\");",
          "1461:           });",
          "1462:         });",
          "",
          "[Removed Lines]",
          "1453:             const output = escapeShellArg(input, shell, interpolation);",
          "1459:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1479:             const output = escapeShellArg(input, interpolation);",
          "1485:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "1464:         describe(\"pipes ('|')\", function () {",
          "1465:           it(\"escapes one pipe\", function () {",
          "1466:             const input = \"foo|bar\";",
          "1468:             assert.strictEqual(output, \"foo`|bar\");",
          "1469:           });",
          "1471:           it(\"escapes multiple pipes\", function () {",
          "1472:             const input = \"praise|the|sun\";",
          "1474:             assert.strictEqual(output, \"praise`|the`|sun\");",
          "1475:           });",
          "1476:         });",
          "",
          "[Removed Lines]",
          "1467:             const output = escapeShellArg(input, shell, interpolation);",
          "1473:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1493:             const output = escapeShellArg(input, interpolation);",
          "1499:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "1478:         describe(\"parentheses ('(', ')')\", function () {",
          "1479:           it(\"escapes one opening parenthesis\", function () {",
          "1480:             const input = \"foo(bar\";",
          "1482:             assert.strictEqual(output, \"foo`(bar\");",
          "1483:           });",
          "1485:           it(\"escapes multiple opening parentheses\", function () {",
          "1486:             const input = \"praise(the(sun\";",
          "1488:             assert.strictEqual(output, \"praise`(the`(sun\");",
          "1489:           });",
          "1491:           it(\"escapes one closing parenthesis\", function () {",
          "1492:             const input = \"foo)bar\";",
          "1494:             assert.strictEqual(output, \"foo`)bar\");",
          "1495:           });",
          "1497:           it(\"escapes multiple closing parentheses\", function () {",
          "1498:             const input = \"praise)the)sun\";",
          "1500:             assert.strictEqual(output, \"praise`)the`)sun\");",
          "1501:           });",
          "1503:           it(\"escapes a pair of parentheses\", function () {",
          "1504:             const input = \"praise(the)sun\";",
          "1506:             assert.strictEqual(output, \"praise`(the`)sun\");",
          "1507:           });",
          "1508:         });",
          "",
          "[Removed Lines]",
          "1481:             const output = escapeShellArg(input, shell, interpolation);",
          "1487:             const output = escapeShellArg(input, shell, interpolation);",
          "1493:             const output = escapeShellArg(input, shell, interpolation);",
          "1499:             const output = escapeShellArg(input, shell, interpolation);",
          "1505:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1507:             const output = escapeShellArg(input, interpolation);",
          "1513:             const output = escapeShellArg(input, interpolation);",
          "1519:             const output = escapeShellArg(input, interpolation);",
          "1525:             const output = escapeShellArg(input, interpolation);",
          "1531:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "1510:         describe(\"square brackets ('[', ']')\", function () {",
          "1511:           it(\"does nothing to one opening square bracket\", function () {",
          "1512:             const input = \"foo[bar\";",
          "1514:             assert.strictEqual(output, input);",
          "1515:           });",
          "1517:           it(\"does nothing to multiple opening square brackets\", function () {",
          "1518:             const input = \"praise[the[sun\";",
          "1520:             assert.strictEqual(output, input);",
          "1521:           });",
          "1523:           it(\"escapes a leading closing square bracket\", function () {",
          "1524:             const input = \"]foobar\";",
          "1526:             assert.strictEqual(output, \"`]foobar\");",
          "1527:           });",
          "1529:           it(\"does nothing to one closing square bracket\", function () {",
          "1530:             const input = \"foo]bar\";",
          "1532:             assert.strictEqual(output, input);",
          "1533:           });",
          "1535:           it(\"does nothing to multiple closing square brackets\", function () {",
          "1536:             const input = \"praise]the]sun\";",
          "1538:             assert.strictEqual(output, input);",
          "1539:           });",
          "1541:           it(\"does nothing to a pair of square brackets\", function () {",
          "1542:             const input = \"praise[the]sun\";",
          "1544:             assert.strictEqual(output, input);",
          "1545:           });",
          "1546:         });",
          "",
          "[Removed Lines]",
          "1513:             const output = escapeShellArg(input, shell, interpolation);",
          "1519:             const output = escapeShellArg(input, shell, interpolation);",
          "1525:             const output = escapeShellArg(input, shell, interpolation);",
          "1531:             const output = escapeShellArg(input, shell, interpolation);",
          "1537:             const output = escapeShellArg(input, shell, interpolation);",
          "1543:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1539:             const output = escapeShellArg(input, interpolation);",
          "1545:             const output = escapeShellArg(input, interpolation);",
          "1551:             const output = escapeShellArg(input, interpolation);",
          "1557:             const output = escapeShellArg(input, interpolation);",
          "1563:             const output = escapeShellArg(input, interpolation);",
          "1569:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "1548:         describe(\"curly brackets ('{', '}')\", function () {",
          "1549:           it(\"escapes one opening parenthesis\", function () {",
          "1550:             const input = \"foo{bar\";",
          "1552:             assert.strictEqual(output, \"foo`{bar\");",
          "1553:           });",
          "1555:           it(\"escapes multiple opening parentheses\", function () {",
          "1556:             const input = \"praise{the{sun\";",
          "1558:             assert.strictEqual(output, \"praise`{the`{sun\");",
          "1559:           });",
          "1561:           it(\"escapes one closing parenthesis\", function () {",
          "1562:             const input = \"foo}bar\";",
          "1564:             assert.strictEqual(output, \"foo`}bar\");",
          "1565:           });",
          "1567:           it(\"escapes multiple closing parentheses\", function () {",
          "1568:             const input = \"praise}the}sun\";",
          "1570:             assert.strictEqual(output, \"praise`}the`}sun\");",
          "1571:           });",
          "1573:           it(\"escapes a pair of parentheses\", function () {",
          "1574:             const input = \"praise{the}sun\";",
          "1576:             assert.strictEqual(output, \"praise`{the`}sun\");",
          "1577:           });",
          "1578:         });",
          "",
          "[Removed Lines]",
          "1551:             const output = escapeShellArg(input, shell, interpolation);",
          "1557:             const output = escapeShellArg(input, shell, interpolation);",
          "1563:             const output = escapeShellArg(input, shell, interpolation);",
          "1569:             const output = escapeShellArg(input, shell, interpolation);",
          "1575:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1577:             const output = escapeShellArg(input, interpolation);",
          "1583:             const output = escapeShellArg(input, interpolation);",
          "1589:             const output = escapeShellArg(input, interpolation);",
          "1595:             const output = escapeShellArg(input, interpolation);",
          "1601:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "1580:         describe(\"angle brackets ('<', '>')\", function () {",
          "1581:           it(\"escapes a leading left-angle angle bracket\", function () {",
          "1582:             const input = \"<foobar\";",
          "1584:             assert.strictEqual(output, \"`<foobar\");",
          "1585:           });",
          "1587:           it(\"escapes a leading right-angle angle bracket\", function () {",
          "1588:             const input = \">foobar\";",
          "1590:             assert.strictEqual(output, \"`>foobar\");",
          "1591:           });",
          "1593:           it(\"escapes a right-angle angle bracket prefixed with 1\", function () {",
          "1594:             const input = \"1>foobar\";",
          "1596:             assert.strictEqual(output, \"1`>foobar\");",
          "1597:           });",
          "1599:           it(\"escapes a right-angle angle bracket prefixed with 2\", function () {",
          "1600:             const input = \"2>foobar\";",
          "1602:             assert.strictEqual(output, \"2`>foobar\");",
          "1603:           });",
          "1605:           it(\"escapes a right-angle angle bracket prefixed with 3\", function () {",
          "1606:             const input = \"3>foobar\";",
          "1608:             assert.strictEqual(output, \"3`>foobar\");",
          "1609:           });",
          "1611:           it(\"escapes a right-angle angle bracket prefixed with 4\", function () {",
          "1612:             const input = \"4>foobar\";",
          "1614:             assert.strictEqual(output, \"4`>foobar\");",
          "1615:           });",
          "1617:           it(\"escapes a right-angle angle bracket prefixed with 5\", function () {",
          "1618:             const input = \"5>foobar\";",
          "1620:             assert.strictEqual(output, \"5`>foobar\");",
          "1621:           });",
          "1623:           it(\"escapes a right-angle angle bracket prefixed with 6\", function () {",
          "1624:             const input = \"6>foobar\";",
          "1626:             assert.strictEqual(output, \"6`>foobar\");",
          "1627:           });",
          "1629:           it(\"escapes a right-angle angle bracket prefixed with *\", function () {",
          "1630:             const input = \"*>foobar\";",
          "1632:             assert.strictEqual(output, \"*`>foobar\");",
          "1633:           });",
          "1635:           it(\"does nothing to one left-angle bracket\", function () {",
          "1636:             const input = \"foo<bar\";",
          "1638:             assert.strictEqual(output, input);",
          "1639:           });",
          "1641:           it(\"does nothing to multiple left-angle brackets\", function () {",
          "1642:             const input = \"praise<the<sun\";",
          "1644:             assert.strictEqual(output, input);",
          "1645:           });",
          "1647:           it(\"does nothing to one right-angle bracket\", function () {",
          "1648:             const input = \"foo>bar\";",
          "1650:             assert.strictEqual(output, input);",
          "1651:           });",
          "1653:           it(\"does nothing to multiple right-angle brackets\", function () {",
          "1654:             const input = \"praise>the>sun\";",
          "1656:             assert.strictEqual(output, input);",
          "1657:           });",
          "1658:         });",
          "",
          "[Removed Lines]",
          "1583:             const output = escapeShellArg(input, shell, interpolation);",
          "1589:             const output = escapeShellArg(input, shell, interpolation);",
          "1595:             const output = escapeShellArg(input, shell, interpolation);",
          "1601:             const output = escapeShellArg(input, shell, interpolation);",
          "1607:             const output = escapeShellArg(input, shell, interpolation);",
          "1613:             const output = escapeShellArg(input, shell, interpolation);",
          "1619:             const output = escapeShellArg(input, shell, interpolation);",
          "1625:             const output = escapeShellArg(input, shell, interpolation);",
          "1631:             const output = escapeShellArg(input, shell, interpolation);",
          "1637:             const output = escapeShellArg(input, shell, interpolation);",
          "1643:             const output = escapeShellArg(input, shell, interpolation);",
          "1649:             const output = escapeShellArg(input, shell, interpolation);",
          "1655:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1609:             const output = escapeShellArg(input, interpolation);",
          "1615:             const output = escapeShellArg(input, interpolation);",
          "1621:             const output = escapeShellArg(input, interpolation);",
          "1627:             const output = escapeShellArg(input, interpolation);",
          "1633:             const output = escapeShellArg(input, interpolation);",
          "1639:             const output = escapeShellArg(input, interpolation);",
          "1645:             const output = escapeShellArg(input, interpolation);",
          "1651:             const output = escapeShellArg(input, interpolation);",
          "1657:             const output = escapeShellArg(input, interpolation);",
          "1663:             const output = escapeShellArg(input, interpolation);",
          "1669:             const output = escapeShellArg(input, interpolation);",
          "1675:             const output = escapeShellArg(input, interpolation);",
          "1681:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "1660:         describe(\"left double quotation mark ('\u201c')\", function () {",
          "1661:           it(\"escapes one\", function () {",
          "1662:             const input = \"foo\u201cbar\";",
          "1664:             assert.strictEqual(output, \"foo`\u201cbar\");",
          "1665:           });",
          "1667:           it(\"escapes multiple\", function () {",
          "1668:             const input = \"Praise\u201cthe\u201csun\";",
          "1670:             assert.strictEqual(output, \"Praise`\u201cthe`\u201csun\");",
          "1671:           });",
          "1672:         });",
          "",
          "[Removed Lines]",
          "1663:             const output = escapeShellArg(input, shell, interpolation);",
          "1669:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1689:             const output = escapeShellArg(input, interpolation);",
          "1695:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "1674:         describe(\"right double quotation mark ('\u201d')\", function () {",
          "1675:           it(\"escapes one\", function () {",
          "1676:             const input = \"foo\u201dbar\";",
          "1678:             assert.strictEqual(output, \"foo`\u201dbar\");",
          "1679:           });",
          "1681:           it(\"escapes multiple\", function () {",
          "1682:             const input = \"Praise\u201dthe\u201dsun\";",
          "1684:             assert.strictEqual(output, \"Praise`\u201dthe`\u201dsun\");",
          "1685:           });",
          "1686:         });",
          "",
          "[Removed Lines]",
          "1677:             const output = escapeShellArg(input, shell, interpolation);",
          "1683:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1703:             const output = escapeShellArg(input, interpolation);",
          "1709:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "1688:         describe(\"double low-9 quotation mark ('\u201e')\", function () {",
          "1689:           it(\"escapes one\", function () {",
          "1690:             const input = \"foo\u201ebar\";",
          "1692:             assert.strictEqual(output, \"foo`\u201ebar\");",
          "1693:           });",
          "1695:           it(\"escapes multiple\", function () {",
          "1696:             const input = \"Praise\u201ethe\u201esun\";",
          "1698:             assert.strictEqual(output, \"Praise`\u201ethe`\u201esun\");",
          "1699:           });",
          "1700:         });",
          "",
          "[Removed Lines]",
          "1691:             const output = escapeShellArg(input, shell, interpolation);",
          "1697:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1717:             const output = escapeShellArg(input, interpolation);",
          "1723:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "1702:         describe(\"left single quotation mark ('\u2018')\", function () {",
          "1703:           it(\"escapes one\", function () {",
          "1704:             const input = \"foo\u2018bar\";",
          "1706:             assert.strictEqual(output, \"foo`\u2018bar\");",
          "1707:           });",
          "1709:           it(\"escapes multiple\", function () {",
          "1710:             const input = \"Praise\u2018the\u2018sun\";",
          "1712:             assert.strictEqual(output, \"Praise`\u2018the`\u2018sun\");",
          "1713:           });",
          "1714:         });",
          "",
          "[Removed Lines]",
          "1705:             const output = escapeShellArg(input, shell, interpolation);",
          "1711:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1731:             const output = escapeShellArg(input, interpolation);",
          "1737:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "1716:         describe(\"right single quotation mark ('\u2019')\", function () {",
          "1717:           it(\"escapes one\", function () {",
          "1718:             const input = \"foo\u2019bar\";",
          "1720:             assert.strictEqual(output, \"foo`\u2019bar\");",
          "1721:           });",
          "1723:           it(\"escapes multiple\", function () {",
          "1724:             const input = \"Praise\u2019the\u2019sun\";",
          "1726:             assert.strictEqual(output, \"Praise`\u2019the`\u2019sun\");",
          "1727:           });",
          "1728:         });",
          "",
          "[Removed Lines]",
          "1719:             const output = escapeShellArg(input, shell, interpolation);",
          "1725:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1745:             const output = escapeShellArg(input, interpolation);",
          "1751:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "1730:         describe(\"single low-9 quotation mark ('\u201a')\", function () {",
          "1731:           it(\"escapes one\", function () {",
          "1732:             const input = \"foo\u201abar\";",
          "1734:             assert.strictEqual(output, \"foo`\u201abar\");",
          "1735:           });",
          "1737:           it(\"escapes multiple\", function () {",
          "1738:             const input = \"Praise\u201athe\u201asun\";",
          "1740:             assert.strictEqual(output, \"Praise`\u201athe`\u201asun\");",
          "1741:           });",
          "1742:         });",
          "",
          "[Removed Lines]",
          "1733:             const output = escapeShellArg(input, shell, interpolation);",
          "1739:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1759:             const output = escapeShellArg(input, interpolation);",
          "1765:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "1744:         describe(\"single high-reversed-9 quotation mark ('\u201b')\", function () {",
          "1745:           it(\"escapes one\", function () {",
          "1746:             const input = \"foo\u201bbar\";",
          "1748:             assert.strictEqual(output, \"foo`\u201bbar\");",
          "1749:           });",
          "1751:           it(\"escapes multiple\", function () {",
          "1752:             const input = \"Praise\u201bthe\u201bsun\";",
          "1754:             assert.strictEqual(output, \"Praise`\u201bthe`\u201bsun\");",
          "1755:           });",
          "1756:         });",
          "",
          "[Removed Lines]",
          "1747:             const output = escapeShellArg(input, shell, interpolation);",
          "1753:             const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Added Lines]",
          "1773:             const output = escapeShellArg(input, interpolation);",
          "1779:             const output = escapeShellArg(input, interpolation);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "1758:     });",
          "1759:   });",
          "1766:     });",
          "1772:     });",
          "1775:       const env = {};",
          "1778:     });",
          "1779:   });",
          "1780: });",
          "",
          "[Removed Lines]",
          "1761:   describe(\"::getDefaultShell\", function () {",
          "1762:     it(\"returns the value of %COMSPEC%\", function () {",
          "1763:       const env = { ComSpec };",
          "1764:       const result = getDefaultShell(env);",
          "1765:       assert.strictEqual(result, ComSpec);",
          "1768:     it(\"returns the value of %COMSPEC% when it's the empty string\", function () {",
          "1769:       const env = { ComSpec: \"\" };",
          "1770:       const result = getDefaultShell(env);",
          "1771:       assert.strictEqual(result, \"\");",
          "1774:     it(\"returns 'cmd.exe' if %COMSPEC% is not defined\", function () {",
          "1776:       const result = getDefaultShell(env);",
          "1777:       assert.strictEqual(result, \"cmd.exe\");",
          "",
          "[Added Lines]",
          "1787:   describe(\"::getQuoteFunction\", function () {",
          "1788:     it(\"returns `null` for unsupported shells\", function () {",
          "1789:       const result = win.getQuoteFunction(\"foobar\");",
          "1790:       assert.strictEqual(result, null);",
          "1791:     });",
          "1793:     for (const shellName of [binCmd, binPowerShell]) {",
          "1794:       const quoteShellArg = win.getQuoteFunction(shellName);",
          "1796:       describe(shellName, function () {",
          "1797:         it(\"puts double quotes around the provided value\", function () {",
          "1798:           const input = \"foobar\";",
          "1799:           const result = quoteShellArg(input);",
          "1800:           assert.strictEqual(result, `\"${input}\"`);",
          "1801:         });",
          "1802:       });",
          "1803:     }",
          "1804:   });",
          "1806:   describe(\"::getShellName\", function () {",
          "1807:     let resolveExecutable;",
          "1809:     before(function () {",
          "1810:       resolveExecutable = sinon.stub();",
          "1813:     beforeEach(function () {",
          "1814:       sinon.reset();",
          "1816:       resolveExecutable.returns(\"foobar\");",
          "1819:     it(\"resolves the provided shell\", function () {",
          "1820:       for (const shell of [binCmd, binPowerShell]) {",
          "1821:         const env = {};",
          "1823:         win.getShellName({ env, shell }, { resolveExecutable });",
          "1824:         assert.ok(",
          "1825:           resolveExecutable.calledWithExactly(",
          "1826:             { executable: shell },",
          "1827:             sinon.match.any",
          "1828:           )",
          "1829:         );",
          "1830:       }",
          "1831:     });",
          "1833:     for (const shell of [binCmd, binPowerShell]) {",
          "1834:       it(`returns ${shell} when the provided shell resolves to that`, function () {",
          "1835:         const env = {};",
          "1837:         resolveExecutable.returns(`C:\\\\Windows\\\\System32\\\\${shell}`);",
          "1839:         const result = win.getShellName({ env, shell }, { resolveExecutable });",
          "1840:         assert.equal(result, shell);",
          "1841:       });",
          "1842:     }",
          "1844:     it(\"falls back to 'cmd.exe' if the shell is not supported\", function () {",
          "1845:       const env = {};",
          "1846:       const shell = \"asdf\";",
          "1848:       resolveExecutable.returns(`C:\\\\Windows\\\\System32\\\\${shell}`);",
          "1850:       const result = win.getShellName({ env, shell }, { resolveExecutable });",
          "1851:       assert.equal(result, \"cmd.exe\");",
          "1852:     });",
          "1854:     it(\"calls resolveExecutable with the appropriate helpers\", function () {",
          "1856:       const shell = \"cmd.exe\";",
          "1858:       win.getShellName({ env, shell }, { resolveExecutable });",
          "1859:       assert.ok(",
          "1860:         resolveExecutable.calledWithExactly(sinon.match.any, {",
          "1861:           exists: sinon.match.func,",
          "1862:           readlink: sinon.match.func,",
          "1863:           which: sinon.match.func,",
          "1864:         })",
          "1865:       );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc339a2ee22189ed147057c850ad664af9a9692c",
      "candidate_info": {
        "commit_hash": "bc339a2ee22189ed147057c850ad664af9a9692c",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/bc339a2ee22189ed147057c850ad664af9a9692c",
        "files": [
          "CHANGELOG.md",
          "src/unix.js",
          "test/fixtures/unix.js",
          "test/fuzz/_common.cjs",
          "test/fuzz/corpus/205325a5f212ffa1269b9e6ad27cbb72214136099f369c37f7e7cb46ea6cb846"
        ],
        "message": "Preserve whitespace when `interpolation:true` for Unix (#584)\n\n* Escape tabs (`\\t`) and spaces (` `) for Unix shells\n\nImplement escaping of whitespace for Unix shells. In particular when\nescaping unquoted (and \"unprotected\", unlike e.g. calling `execFile`\nwith a falsy `shell` value) arguments. This is achieved simply by using\nthe shell's escape character to escape the literal `\\t` or ` `.\n\nNewlines (`\\r?\\n`) are replaced by a space (` `) for all Unix shells,\nthis space is intentionally `escaped` as well to prevent argument\nsplitting through newlines.\n\nSince whitespace may change how other things are escaped, so to be\nconservative whitespace is escaped last.\n\nTest fixtures have been updated. The \"Hello world\" sample string test\ncase has been removed as it would actually belong in the\n`\"<space> (' ')\"` data group. Since this kind of string is already\ncovered it's removed.\n\n* Update the changelog",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/fixtures/unix.js||test/fixtures/unix.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:       .replace(/\\n/gu, \" \")",
          "51:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "52:       .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")",
          "54:   } else if (quoted) {",
          "55:     result = result.replace(/'/gu, `'\\\\''`);",
          "56:   }",
          "",
          "[Removed Lines]",
          "53:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");",
          "",
          "[Added Lines]",
          "53:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\")",
          "54:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "78:       .replace(/\\n/gu, \" \")",
          "79:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "81:   } else if (quoted) {",
          "82:     result = result.replace(/'/gu, `'\\\\''`);",
          "83:   }",
          "",
          "[Removed Lines]",
          "80:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\");",
          "",
          "[Added Lines]",
          "81:       .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")",
          "82:       .replace(/([\\t\\n ])/gu, \"\\\\$1\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "105:       .replace(/\\n/gu, \" \")",
          "106:       .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")",
          "108:   } else if (quoted) {",
          "109:     result = result.replace(/'/gu, `'\\\\''`);",
          "110:   }",
          "",
          "[Removed Lines]",
          "107:       .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\");",
          "",
          "[Added Lines]",
          "109:       .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\")",
          "110:       .replace(/([\\t ])/gu, \"\\\\$1\");",
          "",
          "---------------"
        ],
        "test/fixtures/unix.js||test/fixtures/unix.js": [
          "File: test/fixtures/unix.js -> test/fixtures/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:         input: \"foobar\",",
          "13:         expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },",
          "14:       },",
          "22:     ],",
          "23:     \"<null> (\\\\0)\": [",
          "24:       {",
          "",
          "[Removed Lines]",
          "15:       {",
          "16:         input: \"Hello world\",",
          "17:         expected: {",
          "18:           interpolation: \"Hello world\",",
          "19:           noInterpolation: \"Hello world\",",
          "20:         },",
          "21:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     \"<character tabulation> (\\\\t)\": [",
          "60:       {",
          "61:         input: \"a\\tb\",",
          "63:       },",
          "64:       {",
          "65:         input: \"a\\tb\\tc\",",
          "67:       },",
          "68:       {",
          "69:         input: \"a\\t\",",
          "71:       },",
          "72:       {",
          "73:         input: \"\\ta\",",
          "75:       },",
          "76:     ],",
          "77:     \"<end of line> ('\\\\n')\": [",
          "78:       {",
          "79:         input: \"a\\nb\",",
          "81:       },",
          "82:       {",
          "83:         input: \"a\\nb\\nc\",",
          "85:       },",
          "86:       {",
          "87:         input: \"a\\n\",",
          "89:       },",
          "90:       {",
          "91:         input: \"\\na\",",
          "93:       },",
          "94:     ],",
          "95:     \"<line tabulation> (\\\\v)\": [",
          "",
          "[Removed Lines]",
          "62:         expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },",
          "66:         expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "70:         expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },",
          "74:         expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },",
          "80:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "84:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "88:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "92:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "",
          "[Added Lines]",
          "55:         expected: { interpolation: \"a\\\\\\tb\", noInterpolation: \"a\\tb\" },",
          "59:         expected: { interpolation: \"a\\\\\\tb\\\\\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "63:         expected: { interpolation: \"a\\\\\\t\", noInterpolation: \"a\\t\" },",
          "67:         expected: { interpolation: \"\\\\\\ta\", noInterpolation: \"\\ta\" },",
          "73:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a\\nb\" },",
          "77:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a\\nb\\nc\" },",
          "81:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a\\n\" },",
          "85:         expected: { interpolation: \"\\\\ a\", noInterpolation: \"\\na\" },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:       },",
          "148:       {",
          "149:         input: \"a\\r\\nb\",",
          "151:       },",
          "152:     ],",
          "153:     \"<escape> ('\\\\u001B')\": [",
          "",
          "[Removed Lines]",
          "150:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "[Added Lines]",
          "143:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:     \"<space> (' ')\": [",
          "172:       {",
          "173:         input: \"a b\",",
          "175:       },",
          "176:       {",
          "177:         input: \"a b c\",",
          "179:       },",
          "180:       {",
          "181:         input: \"a \",",
          "183:       },",
          "184:       {",
          "185:         input: \" a\",",
          "187:       },",
          "188:     ],",
          "189:     \"<next line> (\\\\u0085)\": [",
          "",
          "[Removed Lines]",
          "174:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "178:         expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },",
          "182:         expected: { interpolation: \"a \", noInterpolation: \"a \" },",
          "186:         expected: { interpolation: \" a\", noInterpolation: \" a\" },",
          "",
          "[Added Lines]",
          "167:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "171:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a b c\" },",
          "175:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a \" },",
          "179:         expected: { interpolation: \"\\\\ a\", noInterpolation: \" a\" },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "936:       },",
          "937:       {",
          "938:         input: \"a=~ \",",
          "940:       },",
          "941:       {",
          "942:         input: \"a ~b\",",
          "944:       },",
          "945:       {",
          "946:         input: \"a\\t~b\",",
          "948:       },",
          "949:     ],",
          "950:     \"hashtags ('#')\": [",
          "",
          "[Removed Lines]",
          "939:         expected: { interpolation: \"a=\\\\~ \", noInterpolation: \"a=~ \" },",
          "943:         expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },",
          "947:         expected: { interpolation: \"a\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "",
          "[Added Lines]",
          "932:         expected: { interpolation: \"a=\\\\~\\\\ \", noInterpolation: \"a=~ \" },",
          "936:         expected: { interpolation: \"a\\\\ \\\\~b\", noInterpolation: \"a ~b\" },",
          "940:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "966:       },",
          "967:       {",
          "968:         input: \"a #b\",",
          "970:       },",
          "971:       {",
          "972:         input: \"a\\t#b\",",
          "974:       },",
          "975:     ],",
          "976:     \"dollar signs ('$')\": [",
          "",
          "[Removed Lines]",
          "969:         expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },",
          "973:         expected: { interpolation: \"a\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "",
          "[Added Lines]",
          "962:         expected: { interpolation: \"a\\\\ \\\\#b\", noInterpolation: \"a #b\" },",
          "966:         expected: { interpolation: \"a\\\\\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1289:         input: \"foobar\",",
          "1290:         expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },",
          "1291:       },",
          "1299:     ],",
          "1300:     \"<null> (\\\\0)\": [",
          "1301:       {",
          "",
          "[Removed Lines]",
          "1292:       {",
          "1293:         input: \"Hello world\",",
          "1294:         expected: {",
          "1295:           interpolation: \"Hello world\",",
          "1296:           noInterpolation: \"Hello world\",",
          "1297:         },",
          "1298:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1328:     \"<character tabulation> (\\\\t)\": [",
          "1329:       {",
          "1330:         input: \"a\\tb\",",
          "1332:       },",
          "1333:       {",
          "1334:         input: \"a\\tb\\tc\",",
          "1336:       },",
          "1337:       {",
          "1338:         input: \"a\\t\",",
          "1340:       },",
          "1341:       {",
          "1342:         input: \"\\ta\",",
          "1344:       },",
          "1345:     ],",
          "1346:     \"<end of line> ('\\\\n')\": [",
          "1347:       {",
          "1348:         input: \"a\\nb\",",
          "1350:       },",
          "1351:       {",
          "1352:         input: \"a\\nb\\nc\",",
          "1354:       },",
          "1355:       {",
          "1356:         input: \"a\\n\",",
          "1358:       },",
          "1359:       {",
          "1360:         input: \"\\na\",",
          "1362:       },",
          "1363:     ],",
          "1364:     \"<line tabulation> (\\\\v)\": [",
          "",
          "[Removed Lines]",
          "1331:         expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },",
          "1335:         expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "1339:         expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },",
          "1343:         expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },",
          "1349:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "1353:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "1357:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "1361:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "",
          "[Added Lines]",
          "1317:         expected: { interpolation: \"a\\\\\\tb\", noInterpolation: \"a\\tb\" },",
          "1321:         expected: { interpolation: \"a\\\\\\tb\\\\\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "1325:         expected: { interpolation: \"a\\\\\\t\", noInterpolation: \"a\\t\" },",
          "1329:         expected: { interpolation: \"\\\\\\ta\", noInterpolation: \"\\ta\" },",
          "1335:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a\\nb\" },",
          "1339:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a\\nb\\nc\" },",
          "1343:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a\\n\" },",
          "1347:         expected: { interpolation: \"\\\\ a\", noInterpolation: \"\\na\" },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1416:       },",
          "1417:       {",
          "1418:         input: \"a\\r\\nb\",",
          "1420:       },",
          "1421:     ],",
          "1422:     \"<escape> ('\\\\u001B')\": [",
          "",
          "[Removed Lines]",
          "1419:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "[Added Lines]",
          "1405:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1440:     \"<space> (' ')\": [",
          "1441:       {",
          "1442:         input: \"a b\",",
          "1444:       },",
          "1445:       {",
          "1446:         input: \"a b c\",",
          "1448:       },",
          "1449:       {",
          "1450:         input: \"a \",",
          "1452:       },",
          "1453:       {",
          "1454:         input: \" a\",",
          "1456:       },",
          "1457:     ],",
          "1458:     \"<next line> (\\\\u0085)\": [",
          "",
          "[Removed Lines]",
          "1443:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "1447:         expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },",
          "1451:         expected: { interpolation: \"a \", noInterpolation: \"a \" },",
          "1455:         expected: { interpolation: \" a\", noInterpolation: \" a\" },",
          "",
          "[Added Lines]",
          "1429:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "1433:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a b c\" },",
          "1437:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a \" },",
          "1441:         expected: { interpolation: \"\\\\ a\", noInterpolation: \" a\" },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2176:       },",
          "2177:       {",
          "2178:         input: \"a=~ \",",
          "2180:       },",
          "2181:       {",
          "2182:         input: \"a ~b\",",
          "2184:       },",
          "2185:       {",
          "2186:         input: \"a\\t~b\",",
          "2188:       },",
          "2189:     ],",
          "2190:     \"hashtags ('#')\": [",
          "",
          "[Removed Lines]",
          "2179:         expected: { interpolation: \"a=~ \", noInterpolation: \"a=~ \" },",
          "2183:         expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },",
          "2187:         expected: { interpolation: \"a\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "",
          "[Added Lines]",
          "2165:         expected: { interpolation: \"a=~\\\\ \", noInterpolation: \"a=~ \" },",
          "2169:         expected: { interpolation: \"a\\\\ \\\\~b\", noInterpolation: \"a ~b\" },",
          "2173:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2206:       },",
          "2207:       {",
          "2208:         input: \"a #b\",",
          "2210:       },",
          "2211:       {",
          "2212:         input: \"a\\t#b\",",
          "2214:       },",
          "2215:     ],",
          "2216:     \"dollar signs ('$')\": [",
          "",
          "[Removed Lines]",
          "2209:         expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },",
          "2213:         expected: { interpolation: \"a\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "",
          "[Added Lines]",
          "2195:         expected: { interpolation: \"a\\\\ \\\\#b\", noInterpolation: \"a #b\" },",
          "2199:         expected: { interpolation: \"a\\\\\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2518:         input: \"foobar\",",
          "2519:         expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },",
          "2520:       },",
          "2528:     ],",
          "2529:     \"<null> (\\\\0)\": [",
          "2530:       {",
          "",
          "[Removed Lines]",
          "2521:       {",
          "2522:         input: \"Hello world\",",
          "2523:         expected: {",
          "2524:           interpolation: \"Hello world\",",
          "2525:           noInterpolation: \"Hello world\",",
          "2526:         },",
          "2527:       },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2557:     \"<character tabulation> (\\\\t)\": [",
          "2558:       {",
          "2559:         input: \"a\\tb\",",
          "2561:       },",
          "2562:       {",
          "2563:         input: \"a\\tb\\tc\",",
          "2565:       },",
          "2566:       {",
          "2567:         input: \"a\\t\",",
          "2569:       },",
          "2570:       {",
          "2571:         input: \"\\ta\",",
          "2573:       },",
          "2574:     ],",
          "2575:     \"<end of line> ('\\\\n')\": [",
          "2576:       {",
          "2577:         input: \"a\\nb\",",
          "2579:       },",
          "2580:       {",
          "2581:         input: \"a\\nb\\nc\",",
          "2583:       },",
          "2584:       {",
          "2585:         input: \"a\\n\",",
          "2587:       },",
          "2588:       {",
          "2589:         input: \"\\na\",",
          "2591:       },",
          "2592:     ],",
          "2593:     \"<line tabulation> (\\\\v)\": [",
          "",
          "[Removed Lines]",
          "2560:         expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },",
          "2564:         expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "2568:         expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },",
          "2572:         expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },",
          "2578:         expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },",
          "2582:         expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },",
          "2586:         expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },",
          "2590:         expected: { interpolation: \" a\", noInterpolation: \"\\na\" },",
          "",
          "[Added Lines]",
          "2539:         expected: { interpolation: \"a\\\\\\tb\", noInterpolation: \"a\\tb\" },",
          "2543:         expected: { interpolation: \"a\\\\\\tb\\\\\\tc\", noInterpolation: \"a\\tb\\tc\" },",
          "2547:         expected: { interpolation: \"a\\\\\\t\", noInterpolation: \"a\\t\" },",
          "2551:         expected: { interpolation: \"\\\\\\ta\", noInterpolation: \"\\ta\" },",
          "2557:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a\\nb\" },",
          "2561:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a\\nb\\nc\" },",
          "2565:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a\\n\" },",
          "2569:         expected: { interpolation: \"\\\\ a\", noInterpolation: \"\\na\" },",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2645:       },",
          "2646:       {",
          "2647:         input: \"a\\r\\nb\",",
          "2649:       },",
          "2650:     ],",
          "2651:     \"<escape> ('\\\\u001B')\": [",
          "",
          "[Removed Lines]",
          "2648:         expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "[Added Lines]",
          "2627:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a\\r\\nb\" },",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2669:     \"<space> (' ')\": [",
          "2670:       {",
          "2671:         input: \"a b\",",
          "2673:       },",
          "2674:       {",
          "2675:         input: \"a b c\",",
          "2677:       },",
          "2678:       {",
          "2679:         input: \"a \",",
          "2681:       },",
          "2682:       {",
          "2683:         input: \" a\",",
          "2685:       },",
          "2686:     ],",
          "2687:     \"<next line> (\\\\u0085)\": [",
          "",
          "[Removed Lines]",
          "2672:         expected: { interpolation: \"a b\", noInterpolation: \"a b\" },",
          "2676:         expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },",
          "2680:         expected: { interpolation: \"a \", noInterpolation: \"a \" },",
          "2684:         expected: { interpolation: \" a\", noInterpolation: \" a\" },",
          "",
          "[Added Lines]",
          "2651:         expected: { interpolation: \"a\\\\ b\", noInterpolation: \"a b\" },",
          "2655:         expected: { interpolation: \"a\\\\ b\\\\ c\", noInterpolation: \"a b c\" },",
          "2659:         expected: { interpolation: \"a\\\\ \", noInterpolation: \"a \" },",
          "2663:         expected: { interpolation: \"\\\\ a\", noInterpolation: \" a\" },",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3329:       },",
          "3330:       {",
          "3331:         input: \"a ~b\",",
          "3333:       },",
          "3334:       {",
          "3335:         input: \"a\\t~b\",",
          "3337:       },",
          "3338:     ],",
          "3339:     \"hashtags ('#')\": [",
          "",
          "[Removed Lines]",
          "3332:         expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },",
          "3336:         expected: { interpolation: \"a\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "",
          "[Added Lines]",
          "3311:         expected: { interpolation: \"a\\\\ \\\\~b\", noInterpolation: \"a ~b\" },",
          "3315:         expected: { interpolation: \"a\\\\\\t\\\\~b\", noInterpolation: \"a\\t~b\" },",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3355:       },",
          "3356:       {",
          "3357:         input: \"a #b\",",
          "3359:       },",
          "3360:       {",
          "3361:         input: \"a\\t#b\",",
          "3363:       },",
          "3364:     ],",
          "3365:     \"dollar signs ('$')\": [",
          "",
          "[Removed Lines]",
          "3358:         expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },",
          "3362:         expected: { interpolation: \"a\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "",
          "[Added Lines]",
          "3337:         expected: { interpolation: \"a\\\\ \\\\#b\", noInterpolation: \"a #b\" },",
          "3341:         expected: { interpolation: \"a\\\\\\t\\\\#b\", noInterpolation: \"a\\t#b\" },",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3411:       },",
          "3412:       {",
          "3413:         input: \"a =b\",",
          "3415:       },",
          "3416:       {",
          "3417:         input: \"a\\t=b\",",
          "3419:       },",
          "3420:     ],",
          "3421:     \"backslashes ('\\\\')\": [",
          "",
          "[Removed Lines]",
          "3414:         expected: { interpolation: \"a \\\\=b\", noInterpolation: \"a =b\" },",
          "3418:         expected: { interpolation: \"a\\t\\\\=b\", noInterpolation: \"a\\t=b\" },",
          "",
          "[Added Lines]",
          "3393:         expected: { interpolation: \"a\\\\ \\\\=b\", noInterpolation: \"a =b\" },",
          "3397:         expected: { interpolation: \"a\\\\\\t\\\\=b\", noInterpolation: \"a\\t=b\" },",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:       arg = arg.replace(/[\\t\\n\\r ]+/gu, \" \");",
          "63:     } else {",
          "64:       arg = arg",
          "66:         .replace(/\\r(?!\\n)/gu, \"\")",
          "68:     }",
          "",
          "[Removed Lines]",
          "65:         .replace(/[\\t\\n ]+/gu, \" \")",
          "67:         .replace(/[\\t\\n ]+/gu, \" \");",
          "",
          "[Added Lines]",
          "65:         .replace(/\\n/gu, \" \")",
          "67:         .replace(/\\n/gu, \" \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:       arg = arg.replace(/^[\\s\\u0085]+|(?<![\\s\\u0085])[\\s\\u0085]+$/gu, \"\");",
          "73:     } else if (isShellCmd(shell)) {",
          "74:       arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");",
          "77:     }",
          "78:   } else {",
          "",
          "[Removed Lines]",
          "75:     } else {",
          "76:       arg = arg.replace(/^[\\t\\n ]+|(?<![\\t\\n ])[\\t\\n ]+$/gu, \"\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "322a5452e1bb647307267c009c44ddea453e34fc",
      "candidate_info": {
        "commit_hash": "322a5452e1bb647307267c009c44ddea453e34fc",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/322a5452e1bb647307267c009c44ddea453e34fc",
        "files": [
          "test/fuzz/_common.cjs",
          "test/fuzz/exec.test.cjs",
          "test/fuzz/execFile.test.cjs",
          "test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs"
        ],
        "message": "Refactor fuzz targets (#344)\n\n* Normalize regexes for fuzzing\n\n- Don't use 'u' flag (following recent problems as a result of it being\n  relatively new)\n- Prefer `[abc]` over `a|b|c`\n- Remove unnecessary groups\n\n* Prefer encoding option over calling toString\n\n... as it's more explicit. Unfortunately, the `encoding` option does not\nwork for the `fork` function, nevertheless it's options object is\nextracted into a function like the other fuzz targets (for consistency).\n\n* Fix typo in comment explaining arg preperation on Windows",
        "before_after_code_files": [
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
          "test/fuzz/execFile.test.cjs||test/fuzz/execFile.test.cjs",
          "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ],
          "candidate": [
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs"
          ]
        }
      },
      "candidate_diff": {
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: }",
          "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
          "30:   if (normalizeWhitespace) {",
          "",
          "[Removed Lines]",
          "28:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
          "",
          "[Added Lines]",
          "28:   arg = arg.replace(/\\u0000/g, \"\"); // Remove null characters, like Shescape",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       if (quoted) {",
          "77:       } else {",
          "82:         arg = arg.replace(/\"/g, `\\\\\"`);",
          "",
          "[Removed Lines]",
          "76:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "79:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*\")/gu, \"$1$1\");",
          "",
          "[Added Lines]",
          "76:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*(\"|$))/g, \"$1$1\");",
          "79:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*\")/g, \"$1$1\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     } else if (isShellPowerShell(shell)) {",
          "90:         arg = arg.replace(/\"/g, `\"\"`);",
          "95:       } else {",
          "103:         arg = arg.replace(/\"/g, `\\\\\"`);",
          "104:       }",
          "",
          "[Removed Lines]",
          "87:       if (/\\s|\\u0085/g.test(arg) && quoted) {",
          "94:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"|$))/gu, \"$1$1\");",
          "99:         arg = arg.replace(/((\\\\\\u{0}*)+)(?=\\u{0}*(\"))/gu, \"$1$1\");",
          "",
          "[Added Lines]",
          "87:       if (/[\\s\\u0085]/g.test(arg) && quoted) {",
          "94:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*(\"|$))/g, \"$1$1\");",
          "99:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*\")/g, \"$1$1\");",
          "",
          "---------------"
        ],
        "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
          "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: true };",
          "17:   const preparedArg = common.prepareArg(argInfo);",
          "18:   const quotedArg = shescape.quote(preparedArg);",
          "23:   const expected = common.getExpectedOutput(argInfo);",
          "24:   assert.strictEqual(result, expected);",
          "25: }",
          "",
          "[Removed Lines]",
          "20:   const stdout = execSync(`node ${common.ECHO_SCRIPT} ${quotedArg}`);",
          "22:   const result = stdout.toString();",
          "",
          "[Added Lines]",
          "16:   const execOptions = { encoding: \"utf8\" };",
          "21:   const stdout = execSync(",
          "22:     `node ${common.ECHO_SCRIPT} ${quotedArg}`,",
          "23:     execOptions",
          "24:   );",
          "26:   const result = stdout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: function checkWithShell(arg) {",
          "28:   const shell = common.getFuzzShell() || true;",
          "29:   const argInfo = { arg, shell, quoted: true };",
          "32:   const preparedArg = common.prepareArg(argInfo);",
          "33:   const quotedArg = shescape.quote(preparedArg, execOptions);",
          "",
          "[Removed Lines]",
          "30:   const execOptions = { shell };",
          "",
          "[Added Lines]",
          "34:   const execOptions = { encoding: \"utf8\", shell };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:     execOptions",
          "38:   );",
          "41:   const expected = common.getExpectedOutput(argInfo);",
          "42:   assert.strictEqual(result, expected);",
          "43: }",
          "45: function checkWithoutShellUsingInterpolation(arg) {",
          "46:   const argInfo = { arg, shell: undefined, quoted: false };",
          "48:   const preparedArg = common.prepareArg(argInfo);",
          "49:   const escapedArg = shescape.escape(preparedArg, {",
          "50:     interpolation: true,",
          "51:   });",
          "56:   const expected = common.getExpectedOutput(argInfo, true);",
          "57:   assert.strictEqual(result, expected);",
          "58: }",
          "",
          "[Removed Lines]",
          "40:   const result = stdout.toString();",
          "53:   const stdout = execSync(`node ${common.ECHO_SCRIPT} ${escapedArg}`);",
          "55:   const result = stdout.toString();",
          "",
          "[Added Lines]",
          "44:   const result = stdout;",
          "51:   const execOptions = { encoding: \"utf8\" };",
          "58:   const stdout = execSync(",
          "59:     `node ${common.ECHO_SCRIPT} ${escapedArg}`,",
          "60:     execOptions",
          "61:   );",
          "63:   const result = stdout;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60: function checkWithShellUsingInterpolation(arg) {",
          "61:   const shell = common.getFuzzShell() || true;",
          "62:   const argInfo = { arg, shell, quoted: false };",
          "65:   const preparedArg = common.prepareArg(argInfo);",
          "66:   const escapedArg = shescape.escape(preparedArg, {",
          "",
          "[Removed Lines]",
          "63:   const execOptions = { shell };",
          "",
          "[Added Lines]",
          "71:   const execOptions = { encoding: \"utf8\", shell };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "73:     execOptions",
          "74:   );",
          "77:   const expected = common.getExpectedOutput(argInfo, true);",
          "78:   assert.strictEqual(result, expected);",
          "79: }",
          "",
          "[Removed Lines]",
          "76:   const result = stdout.toString();",
          "",
          "[Added Lines]",
          "84:   const result = stdout;",
          "",
          "---------------"
        ],
        "test/fuzz/execFile.test.cjs||test/fuzz/execFile.test.cjs": [
          "File: test/fuzz/execFile.test.cjs -> test/fuzz/execFile.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "17:   const preparedArg = common.prepareArg(argInfo, true);",
          "19:   const stdout = execFileSync(",
          "20:     \"node\",",
          "22:   );",
          "25:   const expected = common.getExpectedOutput(argInfo);",
          "26:   assert.strictEqual(result, expected);",
          "27: }",
          "",
          "[Removed Lines]",
          "21:     shescape.escapeAll([common.ECHO_SCRIPT, preparedArg])",
          "24:   const result = stdout.toString();",
          "",
          "[Added Lines]",
          "16:   const execFileOptions = { encoding: \"utf8\" };",
          "22:     shescape.escapeAll([common.ECHO_SCRIPT, preparedArg]),",
          "23:     execFileOptions",
          "26:   const result = stdout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: function checkWithShell(arg) {",
          "30:   const shell = common.getFuzzShell() || true;",
          "31:   const argInfo = { arg, shell, quoted: true };",
          "34:   const preparedArg = common.prepareArg(argInfo, true);",
          "36:   const stdout = execFileSync(",
          "37:     \"node\",",
          "40:   );",
          "43:   const expected = common.getExpectedOutput(argInfo);",
          "44:   assert.strictEqual(result, expected);",
          "45: }",
          "",
          "[Removed Lines]",
          "32:   const spawnOptions = { shell };",
          "38:     shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], spawnOptions),",
          "39:     spawnOptions",
          "42:   const result = stdout.toString();",
          "",
          "[Added Lines]",
          "34:   const execFileOptions = { encoding: \"utf8\", shell };",
          "40:     shescape.quoteAll([common.ECHO_SCRIPT, preparedArg], execFileOptions),",
          "41:     execFileOptions",
          "44:   const result = stdout;",
          "",
          "---------------"
        ],
        "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs": [
          "File: test/fuzz/fork.test.cjs -> test/fuzz/fork.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: function check(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "17:   const preparedArg = common.prepareArg(argInfo, true);",
          "19:   return new Promise((resolve, reject) => {",
          "24:     echo.stdout.on(\"data\", (data) => {",
          "25:       const result = data.toString();",
          "",
          "[Removed Lines]",
          "20:     const echo = fork(common.ECHO_SCRIPT, shescape.escapeAll([preparedArg]), {",
          "21:       silent: true,",
          "22:     });",
          "",
          "[Added Lines]",
          "16:   const forkOptions = { silent: true };",
          "21:     const echo = fork(",
          "22:       common.ECHO_SCRIPT,",
          "23:       shescape.escapeAll([preparedArg]),",
          "24:       forkOptions",
          "25:     );",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: function checkWithoutShell(arg) {",
          "15:   const argInfo = { arg, shell: undefined, quoted: false };",
          "17:   const preparedArg = common.prepareArg(argInfo, true);",
          "19:   const child = spawnSync(",
          "20:     \"node\",",
          "22:   );",
          "25:   const expected = common.getExpectedOutput(argInfo);",
          "26:   assert.strictEqual(result, expected);",
          "27: }",
          "",
          "[Removed Lines]",
          "21:     shescape.escapeAll([common.ECHO_SCRIPT, preparedArg])",
          "24:   const result = child.stdout.toString();",
          "",
          "[Added Lines]",
          "16:   const spawnOptions = { encoding: \"utf8\" };",
          "22:     shescape.escapeAll([common.ECHO_SCRIPT, preparedArg]),",
          "23:     spawnOptions",
          "26:   const result = child.stdout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: function checkWithShell(arg) {",
          "30:   const shell = common.getFuzzShell() || true;",
          "31:   const argInfo = { arg, shell, quoted: true };",
          "34:   const preparedArg = common.prepareArg(argInfo);",
          "",
          "[Removed Lines]",
          "32:   const spawnOptions = { shell };",
          "",
          "[Added Lines]",
          "34:   const spawnOptions = { encoding: \"utf8\", shell };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:     spawnOptions",
          "40:   );",
          "43:   const expected = common.getExpectedOutput(argInfo);",
          "44:   assert.strictEqual(result, expected);",
          "45: }",
          "",
          "[Removed Lines]",
          "42:   const result = child.stdout.toString();",
          "",
          "[Added Lines]",
          "44:   const result = child.stdout;",
          "",
          "---------------"
        ]
      }
    }
  ]
}