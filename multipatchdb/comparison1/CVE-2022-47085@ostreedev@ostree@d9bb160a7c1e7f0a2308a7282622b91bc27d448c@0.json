{
  "cve_id": "CVE-2022-47085",
  "cve_desc": "An issue was discovered in ostree before 2022.7 allows attackers to cause a denial of service or other unspecified impacts via the print_panic function in repo_checkout_filter.rs.",
  "repo": "ostreedev/ostree",
  "patch_hash": "d9bb160a7c1e7f0a2308a7282622b91bc27d448c",
  "patch_info": {
    "commit_hash": "d9bb160a7c1e7f0a2308a7282622b91bc27d448c",
    "repo": "ostreedev/ostree",
    "commit_url": "https://github.com/ostreedev/ostree/commit/d9bb160a7c1e7f0a2308a7282622b91bc27d448c",
    "files": [
      "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs"
    ],
    "message": "Merge pull request #2776 from cgwalters/fix-potential-double-unwind\n\nrepo: Avoid potential double unwind when writing panic value",
    "before_after_code_files": [
      "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs||rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs"
    ]
  },
  "patch_diff": {
    "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs||rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs": [
      "File: rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs -> rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "109: fn print_panic(panic: Box<dyn Any>) {",
      "112:     let msg = {",
      "113:         if let Some(s) = panic.as_ref().downcast_ref::<&str>() {",
      "114:             s",
      "115:         } else if let Some(s) = panic.as_ref().downcast_ref::<String>() {",
      "116:             s",
      "117:         } else {",
      "119:         }",
      "120:     };",
      "122: }",
      "124: #[cfg(test)]",
      "",
      "[Removed Lines]",
      "110:     eprintln!(\"A Rust callback invoked by C code panicked.\");",
      "111:     eprintln!(\"Unwinding across FFI boundaries is Undefined Behavior so abort() will be called.\");",
      "118:             \"UNABLE TO SHOW VALUE OF PANIC\"",
      "121:     eprintln!(\"Panic value: {}\", msg);",
      "",
      "[Added Lines]",
      "110:     use std::io::Write;",
      "111:     let stderr = std::io::stderr();",
      "112:     let mut stderr = stderr.lock();",
      "115:     let _ = stderr.write_all(",
      "116:         r#\"A Rust callback invoked by C code panicked.",
      "117: Unwinding across FFI boundaries is Undefined Behavior so abort() will be called.\"#",
      "118:             .as_bytes(),",
      "119:     );",
      "126:             \"(non-string panic value)\"",
      "129:     let _ = stderr.write_all(msg.as_bytes());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4f56459268869f0188607ae2a897d6bf1136208",
      "candidate_info": {
        "commit_hash": "a4f56459268869f0188607ae2a897d6bf1136208",
        "repo": "ostreedev/ostree",
        "commit_url": "https://github.com/ostreedev/ostree/commit/a4f56459268869f0188607ae2a897d6bf1136208",
        "files": [
          "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs"
        ],
        "message": "repo: Avoid potential double unwind when writing panic value\n\nThanks to @shinmao for the report!\n\nCloses: https://github.com/ostreedev/ostree/issues/2775",
        "before_after_code_files": [
          "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs||rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ostreedev/ostree/pull/2776"
        ],
        "olp_code_files": {
          "patch": [
            "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs||rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs"
          ],
          "candidate": [
            "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs||rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs"
          ]
        }
      },
      "candidate_diff": {
        "rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs||rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs": [
          "File: rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs -> rust-bindings/src/repo_checkout_at_options/repo_checkout_filter.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: fn print_panic(panic: Box<dyn Any>) {",
          "112:     let msg = {",
          "113:         if let Some(s) = panic.as_ref().downcast_ref::<&str>() {",
          "114:             s",
          "115:         } else if let Some(s) = panic.as_ref().downcast_ref::<String>() {",
          "116:             s",
          "117:         } else {",
          "119:         }",
          "120:     };",
          "122: }",
          "124: #[cfg(test)]",
          "",
          "[Removed Lines]",
          "110:     eprintln!(\"A Rust callback invoked by C code panicked.\");",
          "111:     eprintln!(\"Unwinding across FFI boundaries is Undefined Behavior so abort() will be called.\");",
          "118:             \"UNABLE TO SHOW VALUE OF PANIC\"",
          "121:     eprintln!(\"Panic value: {}\", msg);",
          "",
          "[Added Lines]",
          "110:     use std::io::Write;",
          "111:     let stderr = std::io::stderr();",
          "112:     let mut stderr = stderr.lock();",
          "115:     let _ = stderr.write_all(",
          "116:         r#\"A Rust callback invoked by C code panicked.",
          "117: Unwinding across FFI boundaries is Undefined Behavior so abort() will be called.\"#",
          "118:             .as_bytes(),",
          "119:     );",
          "126:             \"(non-string panic value)\"",
          "129:     let _ = stderr.write_all(msg.as_bytes());",
          "",
          "---------------"
        ]
      }
    }
  ]
}