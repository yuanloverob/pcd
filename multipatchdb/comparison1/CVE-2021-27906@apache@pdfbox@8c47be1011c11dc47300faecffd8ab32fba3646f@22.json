{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2448a34adcfa2ce1e17cf8f12096b377867db05a",
      "candidate_info": {
        "commit_hash": "2448a34adcfa2ce1e17cf8f12096b377867db05a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/2448a34adcfa2ce1e17cf8f12096b377867db05a",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ],
        "message": "PDFBOX-5276: improve javadoc: result documents should not be saved with encryption\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892919 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ]
      }
    },
    {
      "candidate_hash": "d6324a61b161cb8b8828abbdc692be3ff4d4fae8",
      "candidate_info": {
        "commit_hash": "d6324a61b161cb8b8828abbdc692be3ff4d4fae8",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d6324a61b161cb8b8828abbdc692be3ff4d4fae8",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"
        ],
        "message": "PDFBOX-4892: performance improvements, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887181 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java -> fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:                 sb.append(c);",
          "367:             }",
          "368:         }",
          "371:         {",
          "372:             return null;",
          "373:         }",
          "375:     }",
          "",
          "[Removed Lines]",
          "369:         String regular = sb.toString();",
          "370:         if (regular.length() == 0)",
          "374:         return regular;",
          "",
          "[Added Lines]",
          "369:         if (sb.length() == 0)",
          "373:         return sb.toString();",
          "",
          "---------------"
        ],
        "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java -> fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:             read(Token.LITERAL); // font name",
          "93:             read(Token.NAME, \"known\");",
          "94:             read(Token.START_PROC);",
          "96:             read(Token.START_PROC);",
          "98:             read(Token.NAME, \"ifelse\");",
          "99:         }",
          "",
          "[Removed Lines]",
          "95:             readProc();",
          "97:             readProc();",
          "",
          "[Added Lines]",
          "95:             readProcVoid();",
          "97:             readProcVoid();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "433:             read(Token.NAME, \"known\");",
          "435:             read(Token.START_PROC);",
          "438:             read(Token.START_PROC);",
          "441:             read(Token.NAME, \"ifelse\");",
          "",
          "[Removed Lines]",
          "436:             readProc();",
          "439:             readProc();",
          "",
          "[Added Lines]",
          "436:             readProcVoid();",
          "439:             readProcVoid();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:         return value;",
          "488:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:     private void readProcVoid() throws IOException",
          "494:     {",
          "495:         int openProc = 1;",
          "496:         while (true)",
          "497:         {",
          "498:             if (lexer.peekToken().getKind() == Token.START_PROC)",
          "499:             {",
          "500:                 openProc++;",
          "501:             }",
          "503:             Token token = lexer.nextToken();",
          "505:             if (token.getKind() == Token.END_PROC)",
          "506:             {",
          "507:                 openProc--;",
          "508:                 if (openProc == 0)",
          "509:                 {",
          "510:                     break;",
          "511:                 }",
          "512:             }",
          "513:         }",
          "514:         readMaybe(Token.NAME, \"executeonly\");",
          "515:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "576:             {",
          "578:                 read(Token.START_PROC);",
          "580:                 readMaybe(Token.NAME, \"bind\");",
          "581:                 readMaybe(Token.NAME, \"executeonly\");",
          "582:                 read(Token.NAME, \"def\");",
          "",
          "[Removed Lines]",
          "579:                 readProc();",
          "",
          "[Added Lines]",
          "606:                 readProcVoid();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d8320dddce05b05295a1ac425c423c767467fed",
      "candidate_info": {
        "commit_hash": "5d8320dddce05b05295a1ac425c423c767467fed",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5d8320dddce05b05295a1ac425c423c767467fed",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ],
        "message": "PDFBOX-4892: set individual initial ArrayList size, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887102 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.io.InputStream;",
          "24: import java.io.OutputStream;",
          "25: import java.util.ArrayList;",
          "28: import java.util.List;",
          "31: import org.apache.commons.logging.Log;",
          "32: import org.apache.commons.logging.LogFactory;",
          "",
          "[Removed Lines]",
          "26: import java.util.Arrays;",
          "27: import java.util.Iterator;",
          "29: import java.util.Map.Entry;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:     private List<Filter> getFilterList() throws IOException",
          "302:     {",
          "304:         COSBase filters = getFilters();",
          "305:         if (filters instanceof COSName)",
          "306:         {",
          "307:             filterList.add(FilterFactory.INSTANCE.getFilter((COSName)filters));",
          "308:         }",
          "309:         else if (filters instanceof COSArray)",
          "310:         {",
          "311:             COSArray filterArray = (COSArray)filters;",
          "312:             for (int i = 0; i < filterArray.size(); i++)",
          "313:             {",
          "314:                 COSBase base = filterArray.get(i);",
          "",
          "[Removed Lines]",
          "303:         List<Filter> filterList = new ArrayList<Filter>();",
          "",
          "[Added Lines]",
          "300:         List<Filter> filterList;",
          "304:             filterList = new ArrayList<Filter>(1);",
          "310:             filterList = new ArrayList<Filter>(filterArray.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:                 filterList.add(FilterFactory.INSTANCE.getFilter((COSName) base));",
          "321:             }",
          "322:         }",
          "323:         return filterList;",
          "324:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:         else",
          "323:         {",
          "324:             filterList = new ArrayList<Filter>();",
          "325:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef500ff3c18986b80599b88101dbdfd41a5f73da",
      "candidate_info": {
        "commit_hash": "ef500ff3c18986b80599b88101dbdfd41a5f73da",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/ef500ff3c18986b80599b88101dbdfd41a5f73da",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java"
        ],
        "message": "PDFBOX-5063: use AFM resource if the ZapfDingbats font isn't available; closes #103\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884985 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.geom.Rectangle2D;",
          "20: import java.io.IOException;",
          "21: import org.apache.pdfbox.cos.COSDictionary;",
          "22: import org.apache.pdfbox.cos.COSName;",
          "23: import org.apache.pdfbox.pdmodel.PDDocument;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.fontbox.afm.AFMParser;",
          "22: import org.apache.fontbox.afm.CharMetric;",
          "23: import org.apache.fontbox.afm.FontMetrics;",
          "24: import org.apache.fontbox.util.BoundingBox;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             String name = PDType1Font.ZAPF_DINGBATS.codeToName(normalCaption.codePointAt(0));",
          "158:             String unicode = PDType1Font.ZAPF_DINGBATS.getGlyphList().toUnicode(name);",
          "159:             Rectangle2D bounds = PDType1Font.ZAPF_DINGBATS.getPath(name).getBounds2D();",
          "160:             float size = (float) Math.min(bounds.getWidth(), bounds.getHeight()) / 1000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:             if (bounds.isEmpty())",
          "165:             {",
          "168:                 AFMParser parser = new AFMParser(PDType1Font.class.getResourceAsStream(",
          "169:                         \"/org/apache/pdfbox/resources/afm/ZapfDingbats.afm\"));",
          "170:                 FontMetrics metric = parser.parse();",
          "171:                 for (CharMetric cm : metric.getCharMetrics())",
          "172:                 {",
          "173:                     if (normalCaption.codePointAt(0) == cm.getCharacterCode())",
          "174:                     {",
          "175:                         BoundingBox bb = cm.getBoundingBox();",
          "176:                         bounds = new Rectangle2D.Float(bb.getLowerLeftX(), bb.getLowerLeftY(),",
          "177:                                                        bb.getWidth(), bb.getHeight());",
          "178:                         unicode = PDType1Font.ZAPF_DINGBATS.getGlyphList().toUnicode(cm.getName());",
          "179:                     }",
          "180:                 }",
          "181:             }",
          "182:             if (bounds.isEmpty())",
          "183:             {",
          "184:                 throw new IOException(\"Bounds rectangle for chosen glyph is empty\");",
          "185:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a06f170bd21607824c300772b1993d07dca8f895",
      "candidate_info": {
        "commit_hash": "a06f170bd21607824c300772b1993d07dca8f895",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a06f170bd21607824c300772b1993d07dca8f895",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ],
        "message": "PDFBOX-4421: user getters/setters for keyLength, as suggested by Christian Appl\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881841 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     public PublicKeySecurityHandler(PublicKeyProtectionPolicy publicKeyProtectionPolicy)",
          "99:     {",
          "100:         setProtectionPolicy(publicKeyProtectionPolicy);",
          "102:     }",
          "",
          "[Removed Lines]",
          "101:         this.keyLength = publicKeyProtectionPolicy.getEncryptionKeyLength();",
          "",
          "[Added Lines]",
          "101:         setKeyLength(publicKeyProtectionPolicy.getEncryptionKeyLength());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:             }",
          "274:         }",
          "275:         catch (CMSException e)",
          "276:         {",
          "",
          "[Removed Lines]",
          "272:             encryptionKey = new byte[this.keyLength / 8];",
          "273:             System.arraycopy(mdResult, 0, encryptionKey, 0, this.keyLength / 8);",
          "",
          "[Added Lines]",
          "272:             encryptionKey = new byte[getKeyLength() / 8];",
          "273:             System.arraycopy(mdResult, 0, encryptionKey, 0, getKeyLength() / 8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:             }",
          "331:             dictionary.setFilter(FILTER);",
          "333:             int version = computeVersionNumber();",
          "334:             dictionary.setVersion(version);",
          "",
          "[Removed Lines]",
          "332:             dictionary.setLength(this.keyLength);",
          "",
          "[Added Lines]",
          "332:             dictionary.setLength(getKeyLength());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:                     break;",
          "398:             }",
          "403:             doc.setEncryptionDictionary(dictionary);",
          "404:             doc.getDocument().setEncryptionDictionary(dictionary.getCOSObject());",
          "",
          "[Removed Lines]",
          "400:             this.encryptionKey = new byte[this.keyLength/8];",
          "401:             System.arraycopy(mdResult, 0, this.encryptionKey, 0, this.keyLength/8);",
          "",
          "[Added Lines]",
          "400:             this.encryptionKey = new byte[getKeyLength() / 8];",
          "401:             System.arraycopy(mdResult, 0, this.encryptionKey, 0, getKeyLength() / 8);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "413:     {",
          "414:         PDCryptFilterDictionary cryptFilterDictionary = new PDCryptFilterDictionary();",
          "415:         cryptFilterDictionary.setCryptFilterMethod(aesVName);",
          "417:         COSArray array = new COSArray();",
          "418:         for (byte[] recipient : recipients)",
          "419:         {",
          "",
          "[Removed Lines]",
          "416:         cryptFilterDictionary.setLength(keyLength);",
          "",
          "[Added Lines]",
          "416:         cryptFilterDictionary.setLength(getKeyLength());",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     public StandardSecurityHandler(StandardProtectionPolicy standardProtectionPolicy)",
          "90:     {",
          "91:         setProtectionPolicy(standardProtectionPolicy);",
          "93:     }",
          "",
          "[Removed Lines]",
          "92:         keyLength = standardProtectionPolicy.getEncryptionKeyLength();",
          "",
          "[Added Lines]",
          "92:         setKeyLength(standardProtectionPolicy.getEncryptionKeyLength());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:             encryptionDictionary.removeV45filters();",
          "345:         }",
          "346:         encryptionDictionary.setRevision(revision);",
          "349:         StandardProtectionPolicy protectionPolicy = (StandardProtectionPolicy) getProtectionPolicy();",
          "350:         String ownerPassword = protectionPolicy.getOwnerPassword();",
          "",
          "[Removed Lines]",
          "347:         encryptionDictionary.setLength(keyLength);",
          "",
          "[Added Lines]",
          "347:         encryptionDictionary.setLength(getKeyLength());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:         encryptionDictionary.setPermissions(permissionInt);",
          "373:         if (revision == 6)",
          "374:         {",
          "",
          "[Removed Lines]",
          "371:         int length = keyLength/8;",
          "",
          "[Added Lines]",
          "371:         int length = getKeyLength()/8;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:     {",
          "528:         PDCryptFilterDictionary cryptFilterDictionary = new PDCryptFilterDictionary();",
          "529:         cryptFilterDictionary.setCryptFilterMethod(aesVName);",
          "531:         encryptionDictionary.setStdCryptFilterDictionary(cryptFilterDictionary);",
          "532:         encryptionDictionary.setStreamFilterName(COSName.STD_CF);",
          "533:         encryptionDictionary.setStringFilterName(COSName.STD_CF);",
          "",
          "[Removed Lines]",
          "530:         cryptFilterDictionary.setLength(keyLength);",
          "",
          "[Added Lines]",
          "530:         cryptFilterDictionary.setLength(getKeyLength());",
          "",
          "---------------"
        ]
      }
    }
  ]
}