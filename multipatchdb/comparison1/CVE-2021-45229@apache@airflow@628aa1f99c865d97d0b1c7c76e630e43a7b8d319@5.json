{
  "cve_id": "CVE-2021-45229",
  "cve_desc": "It was discovered that the \"Trigger DAG with config\" screen was susceptible to XSS attacks via the `origin` query argument. This issue affects Apache Airflow versions 2.2.3 and below.",
  "repo": "apache/airflow",
  "patch_hash": "628aa1f99c865d97d0b1c7c76e630e43a7b8d319",
  "patch_info": {
    "commit_hash": "628aa1f99c865d97d0b1c7c76e630e43a7b8d319",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/628aa1f99c865d97d0b1c7c76e630e43a7b8d319",
    "files": [
      "airflow/www/templates/airflow/trigger.html",
      "tests/www/views/test_views_trigger_dag.py"
    ],
    "message": "Simplify trigger cancel button (#21591)\n\nCo-authored-by: Jed Cunningham <jedcunningham@apache.org>\n(cherry picked from commit 65297673a318660fba76797e50d0c06804dfcafc)",
    "before_after_code_files": [
      "airflow/www/templates/airflow/trigger.html||airflow/www/templates/airflow/trigger.html",
      "tests/www/views/test_views_trigger_dag.py||tests/www/views/test_views_trigger_dag.py"
    ]
  },
  "patch_diff": {
    "airflow/www/templates/airflow/trigger.html||airflow/www/templates/airflow/trigger.html": [
      "File: airflow/www/templates/airflow/trigger.html -> airflow/www/templates/airflow/trigger.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:       </label>",
      "64:     </div>",
      "65:     <button type=\"submit\" class=\"btn btn-primary\">Trigger</button>",
      "67:   </form>",
      "68: {% endblock %}",
      "",
      "[Removed Lines]",
      "66:     <button type=\"button\" class=\"btn\" onclick=\"location.href = '{{ origin }}'; return false\">Cancel</button>",
      "",
      "[Added Lines]",
      "66:     <a class=\"btn\" href=\"{{ origin }}\">Cancel</a>",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_trigger_dag.py||tests/www/views/test_views_trigger_dag.py": [
      "File: tests/www/views/test_views_trigger_dag.py -> tests/www/views/test_views_trigger_dag.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         (\"javascript:alert(1)\", \"/home\"),",
      "134:         (\"http://google.com\", \"/home\"),",
      "135:         (\"36539'%3balert(1)%2f%2f166\", \"/home\"),",
      "136:         (",
      "137:             \"%2Ftree%3Fdag_id%3Dexample_bash_operator';alert(33)//\",",
      "138:             \"/home\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "136:         (",
      "137:             '\"><script>alert(99)</script><a href=\"',",
      "138:             \"&#34;&gt;&lt;script&gt;alert(99)&lt;/script&gt;&lt;a href=&#34;\",",
      "139:         ),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:     test_dag_id = \"example_bash_operator\"",
      "147:     resp = admin_client.get(f'trigger?dag_id={test_dag_id}&origin={test_origin}')",
      "156: @pytest.mark.parametrize(",
      "",
      "[Removed Lines]",
      "148:     check_content_in_response(",
      "149:         '<button type=\"button\" class=\"btn\" onclick=\"location.href = \\'{}\\'; return false\">'.format(",
      "150:             expected_origin",
      "151:         ),",
      "152:         resp,",
      "153:     )",
      "",
      "[Added Lines]",
      "152:     check_content_in_response(f'<a class=\"btn\" href=\"{expected_origin}\">Cancel</a>', resp)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8cbf9340ec020810b505d0ccf197435eb0e8a704",
      "candidate_info": {
        "commit_hash": "8cbf9340ec020810b505d0ccf197435eb0e8a704",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8cbf9340ec020810b505d0ccf197435eb0e8a704",
        "files": [
          "airflow/www/fab_security/manager.py",
          "setup.cfg"
        ],
        "message": "Adding missing login provider related methods from Flask-Appbuilder (#21294)\n\n(cherry picked from commit 38894e8013b5c38468e912164f80282e3b579993)",
        "before_after_code_files": [
          "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py",
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py": [
          "File: airflow/www/fab_security/manager.py -> airflow/www/fab_security/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         # Role Mapping",
          "188:         app.config.setdefault(\"AUTH_ROLES_MAPPING\", {})",
          "189:         app.config.setdefault(\"AUTH_ROLES_SYNC_AT_LOGIN\", False)",
          "191:         # LDAP Config",
          "192:         if self.auth_type == AUTH_LDAP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:         app.config.setdefault(\"AUTH_API_LOGIN_ALLOW_MULTIPLE_PROVIDERS\", False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:                         log.warning(f\"Can't find role specified in AUTH_ROLES_MAPPING: {fab_role_name}\")",
          "293:         return _roles",
          "295:     @property",
          "296:     def get_url_for_registeruser(self):",
          "297:         \"\"\"Gets the URL for Register User\"\"\"",
          "298:         return url_for(f\"{self.registeruser_view.endpoint}.{self.registeruser_view.default_view}\")",
          "300:     @property",
          "301:     def get_register_user_datamodel(self):",
          "302:         \"\"\"Gets the Register User data model\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:     @property",
          "297:     def auth_type_provider_name(self):",
          "298:         provider_to_auth_type = {AUTH_DB: \"db\", AUTH_LDAP: \"ldap\"}",
          "299:         return provider_to_auth_type.get(self.auth_type)",
          "306:     @property",
          "307:     def get_user_datamodel(self):",
          "308:         \"\"\"Gets the User data model\"\"\"",
          "309:         return self.user_view.datamodel",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:         \"\"\"Get the builtin roles\"\"\"",
          "308:         return self._builtin_roles",
          "310:     @property",
          "311:     def auth_type(self):",
          "312:         \"\"\"Get the auth type\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     @property",
          "322:     def api_login_allow_multiple_providers(self):",
          "323:         return self.appbuilder.get_app.config[\"AUTH_API_LOGIN_ALLOW_MULTIPLE_PROVIDERS\"]",
          "",
          "---------------"
        ],
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     #      https://github.com/readthedocs/sphinx_rtd_theme/issues/1115",
          "105:     docutils<0.17",
          "106:     flask>=1.1.0, <2.0",
          "108:     flask-caching>=1.5.0, <2.0.0",
          "109:     flask-login>=0.3, <0.5",
          "110:     # Strict upper-bound on the latest release of flask-session,",
          "",
          "[Removed Lines]",
          "107:     flask-appbuilder>=3.3.4, <4.0.0",
          "",
          "[Added Lines]",
          "107:     # We are tightly coupled with FAB version because we vendored in part of FAB code related to security manager",
          "108:     # This is done as part of preparation to removing FAB as dependency, but we are not ready for it yet",
          "109:     # Every time we update FAB version here, please make sure that you review the classes and models in",
          "110:     # `airflow/www/fab_security` with their upstream counterparts. In particular, make sure any breaking changes,",
          "111:     # for example any new methods, are accounted for.",
          "112:     flask-appbuilder==3.4.4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ecdadf5ee5b36d324b4833e95ad2d992a81499a1",
      "candidate_info": {
        "commit_hash": "ecdadf5ee5b36d324b4833e95ad2d992a81499a1",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/ecdadf5ee5b36d324b4833e95ad2d992a81499a1",
        "files": [
          "scripts/ci/testing/ci_run_airflow_testing.sh"
        ],
        "message": "CI: Increase parallel test timeout for Helm Chart tests (#18993)\n\nThe helm tests are now regularly taking right around 35 minutes on public\nGitHub Actions workers, so we will increase the timeout.\n\n(cherry picked from commit 3545a2c4f399b02dfcd03b1ecdd965f480cb67e3)",
        "before_after_code_files": [
          "scripts/ci/testing/ci_run_airflow_testing.sh||scripts/ci/testing/ci_run_airflow_testing.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/ci/testing/ci_run_airflow_testing.sh||scripts/ci/testing/ci_run_airflow_testing.sh": [
          "File: scripts/ci/testing/ci_run_airflow_testing.sh -> scripts/ci/testing/ci_run_airflow_testing.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         mkdir -p \"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}\"",
          "46:         export JOB_LOG=\"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}/stdout\"",
          "47:         export PARALLEL_JOB_STATUS=\"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}/status\"",
          "49:         # shellcheck disable=SC2086",
          "50:         parallel --ungroup --bg --semaphore --semaphorename \"${SEMAPHORE_NAME}\" \\",
          "52:             \"$( dirname \"${BASH_SOURCE[0]}\" )/ci_run_single_airflow_test_in_docker.sh\" \"${@}\" >\"${JOB_LOG}\" 2>&1",
          "53:     done",
          "54:     parallel --semaphore --semaphorename \"${SEMAPHORE_NAME}\" --wait",
          "",
          "[Removed Lines]",
          "48:         # Each test job will get SIGTERM followed by SIGTERM 200ms later and SIGKILL 200ms later after 35 mins",
          "51:             --jobs \"${MAX_PARALLEL_TEST_JOBS}\" --timeout 2100 \\",
          "",
          "[Added Lines]",
          "48:         # Each test job will get SIGTERM followed by SIGTERM 200ms later and SIGKILL 200ms later after 45 mins",
          "51:             --jobs \"${MAX_PARALLEL_TEST_JOBS}\" --timeout 2700 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c2909f8d69ade70803f10653e4845319ae99c0e",
      "candidate_info": {
        "commit_hash": "1c2909f8d69ade70803f10653e4845319ae99c0e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1c2909f8d69ade70803f10653e4845319ae99c0e",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/config_templates/default_airflow.cfg",
          "airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py",
          "airflow/utils/db.py",
          "airflow/www/app.py",
          "airflow/www/extensions/init_session.py",
          "airflow/www/session.py",
          "docs/apache-airflow/migrations-ref.rst",
          "docs/spelling_wordlist.txt",
          "setup.cfg",
          "tests/api_connexion/conftest.py",
          "tests/api_connexion/test_security.py",
          "tests/test_utils/decorators.py",
          "tests/utils/test_db.py",
          "tests/www/views/conftest.py",
          "tests/www/views/test_session.py"
        ],
        "message": "Add a session backend to store session data in the database (#21478)\n\nCo-authored-by: Jed Cunningham <jedcunningham@apache.org>\n(cherry picked from commit da9d0863c7ff121c111a455708163b026943bdf1)",
        "before_after_code_files": [
          "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg",
          "airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py||airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py",
          "airflow/utils/db.py||airflow/utils/db.py",
          "airflow/www/app.py||airflow/www/app.py",
          "airflow/www/extensions/init_session.py||airflow/www/extensions/init_session.py",
          "airflow/www/session.py||airflow/www/session.py",
          "setup.cfg||setup.cfg",
          "tests/api_connexion/conftest.py||tests/api_connexion/conftest.py",
          "tests/api_connexion/test_security.py||tests/api_connexion/test_security.py",
          "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
          "tests/utils/test_db.py||tests/utils/test_db.py",
          "tests/www/views/conftest.py||tests/www/views/conftest.py",
          "tests/www/views/test_session.py||tests/www/views/test_session.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
          "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: # provided SSL will be enabled. This does not change the web server port.",
          "517: web_server_ssl_key =",
          "519: # Number of seconds the webserver waits before killing gunicorn master that doesn't respond",
          "520: web_server_master_timeout = 120",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: # The type of backend used to store web session data, can be 'database' or 'securecookie'",
          "520: # Example: session_backend = securecookie",
          "521: session_backend = database",
          "",
          "---------------"
        ],
        "airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py||airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py": [
          "File: airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py -> airflow/migrations/versions/c381b21cb7e4_add_session_table_to_db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "19: \"\"\"add session table to db",
          "21: Revision ID: c381b21cb7e4",
          "22: Revises: be2bfac3da23",
          "23: Create Date: 2022-01-25 13:56:35.069429",
          "25: \"\"\"",
          "27: import sqlalchemy as sa",
          "28: from alembic import op",
          "30: # revision identifiers, used by Alembic.",
          "31: revision = 'c381b21cb7e4'",
          "32: down_revision = 'be2bfac3da23'",
          "33: branch_labels = None",
          "34: depends_on = None",
          "36: TABLE_NAME = 'session'",
          "39: def upgrade():",
          "40:     \"\"\"Apply add session table to db\"\"\"",
          "41:     op.create_table(",
          "42:         TABLE_NAME,",
          "43:         sa.Column('id', sa.Integer()),",
          "44:         sa.Column('session_id', sa.String(255)),",
          "45:         sa.Column('data', sa.LargeBinary()),",
          "46:         sa.Column('expiry', sa.DateTime()),",
          "47:         sa.PrimaryKeyConstraint('id'),",
          "48:         sa.UniqueConstraint('session_id'),",
          "49:     )",
          "52: def downgrade():",
          "53:     \"\"\"Unapply add session table to db\"\"\"",
          "54:     op.drop_table(TABLE_NAME)",
          "",
          "---------------"
        ],
        "airflow/utils/db.py||airflow/utils/db.py": [
          "File: airflow/utils/db.py -> airflow/utils/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "954:     users.drop(settings.engine, checkfirst=True)",
          "955:     dag_stats = Table('dag_stats', Base.metadata)",
          "956:     dag_stats.drop(settings.engine, checkfirst=True)",
          "958:     Base.metadata.drop_all(connection)",
          "959:     # we remove the Tables here so that if resetdb is run metadata does not keep the old tables.",
          "960:     Base.metadata.remove(dag_stats)",
          "961:     Base.metadata.remove(users)",
          "962:     Base.metadata.remove(user)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:     session = Table('session', Base.metadata)",
          "958:     session.drop(settings.engine, checkfirst=True)",
          "962:     Base.metadata.remove(session)",
          "",
          "---------------"
        ],
        "airflow/www/app.py||airflow/www/app.py": [
          "File: airflow/www/app.py -> airflow/www/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: from airflow.www.extensions.init_manifest_files import configure_manifest_files",
          "37: from airflow.www.extensions.init_robots import init_robots",
          "38: from airflow.www.extensions.init_security import init_api_experimental_auth, init_xframe_protection",
          "40: from airflow.www.extensions.init_views import (",
          "41:     init_api_connexion,",
          "42:     init_api_experimental,",
          "",
          "[Removed Lines]",
          "39: from airflow.www.extensions.init_session import init_airflow_session_interface, init_permanent_session",
          "",
          "[Added Lines]",
          "39: from airflow.www.extensions.init_session import init_airflow_session_interface",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         init_jinja_globals(flask_app)",
          "137:         init_xframe_protection(flask_app)",
          "139:         init_airflow_session_interface(flask_app)",
          "140:     return flask_app",
          "",
          "[Removed Lines]",
          "138:         init_permanent_session(flask_app)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/www/extensions/init_session.py||airflow/www/extensions/init_session.py": [
          "File: airflow/www/extensions/init_session.py -> airflow/www/extensions/init_session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "45: def init_airflow_session_interface(app):",
          "46:     \"\"\"Set airflow session interface\"\"\"",
          "",
          "[Removed Lines]",
          "18: from flask import request, session as flask_session",
          "19: from flask.sessions import SecureCookieSessionInterface",
          "22: class AirflowSessionInterface(SecureCookieSessionInterface):",
          "23:     \"\"\"",
          "24:     Airflow cookie session interface.",
          "25:     Modifications of sessions should be done here because",
          "26:     the change here is global.",
          "27:     \"\"\"",
          "29:     def save_session(self, *args, **kwargs):",
          "30:         \"\"\"Prevent creating session from REST API requests.\"\"\"",
          "31:         if request.blueprint == '/api/v1':",
          "32:             return None",
          "33:         return super().save_session(*args, **kwargs)",
          "36: def init_permanent_session(app):",
          "37:     \"\"\"Make session permanent to allows us to store data\"\"\"",
          "39:     def make_session_permanent():",
          "40:         flask_session.permanent = True",
          "42:     app.before_request(make_session_permanent)",
          "47:     app.session_interface = AirflowSessionInterface()",
          "",
          "[Added Lines]",
          "18: from flask import session as builtin_flask_session",
          "20: from airflow.configuration import conf",
          "21: from airflow.exceptions import AirflowConfigException",
          "22: from airflow.www.session import AirflowDatabaseSessionInterface, AirflowSecureCookieSessionInterface",
          "27:     config = app.config.copy()",
          "28:     selected_backend = conf.get('webserver', 'SESSION_BACKEND')",
          "29:     # A bit of a misnomer - normally cookies expire whenever the browser is closed",
          "30:     # or when they hit their expiry datetime, whichever comes first. \"Permanent\"",
          "31:     # cookies only expire when they hit their expiry datetime, and can outlive",
          "32:     # the browser being closed.",
          "33:     permanent_cookie = config.get('SESSION_PERMANENT', True)",
          "35:     if selected_backend == 'securecookie':",
          "36:         app.session_interface = AirflowSecureCookieSessionInterface()",
          "37:         if permanent_cookie:",
          "39:             def make_session_permanent():",
          "40:                 builtin_flask_session.permanent = True",
          "42:             app.before_request(make_session_permanent)",
          "43:     elif selected_backend == 'database':",
          "44:         app.session_interface = AirflowDatabaseSessionInterface(",
          "45:             app=app,",
          "46:             db=None,",
          "47:             permanent=permanent_cookie,",
          "48:             # Typically these would be configurable with Flask-Session,",
          "49:             # but we will set them explicitly instead as they don't make",
          "50:             # sense to have configurable in Airflow's use case",
          "51:             table='session',",
          "52:             key_prefix='',",
          "53:             use_signer=True,",
          "54:         )",
          "55:     else:",
          "56:         raise AirflowConfigException(",
          "57:             \"Unrecognized session backend specified in \"",
          "58:             f\"web_server_session_backend: '{selected_backend}'. Please set \"",
          "59:             \"this to either 'database' or 'securecookie'.\"",
          "60:         )",
          "",
          "---------------"
        ],
        "airflow/www/session.py||airflow/www/session.py": [
          "File: airflow/www/session.py -> airflow/www/session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "18: from flask import request",
          "19: from flask.sessions import SecureCookieSessionInterface",
          "20: from flask_session.sessions import SqlAlchemySessionInterface",
          "23: class SesssionExemptMixin:",
          "24:     \"\"\"Exempt certain blueprints/paths from autogenerated sessions\"\"\"",
          "26:     def save_session(self, *args, **kwargs):",
          "27:         \"\"\"Prevent creating session from REST API and health requests.\"\"\"",
          "28:         if request.blueprint == '/api/v1':",
          "29:             return None",
          "30:         if request.path == '/health':",
          "31:             return None",
          "32:         return super().save_session(*args, **kwargs)",
          "35: class AirflowDatabaseSessionInterface(SesssionExemptMixin, SqlAlchemySessionInterface):",
          "36:     \"\"\"Session interface that exempts some routes and stores session data in the database\"\"\"",
          "39: class AirflowSecureCookieSessionInterface(SesssionExemptMixin, SecureCookieSessionInterface):",
          "40:     \"\"\"Session interface that exempts some routes and stores session data in a signed cookie\"\"\"",
          "",
          "---------------"
        ],
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     flask-appbuilder>=3.3.4, <4.0.0",
          "108:     flask-caching>=1.5.0, <2.0.0",
          "109:     flask-login>=0.3, <0.5",
          "110:     flask-wtf>=0.14.3, <0.15",
          "111:     graphviz>=0.12",
          "112:     gunicorn>=20.1.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     # Strict upper-bound on the latest release of flask-session,",
          "111:     # as any schema changes will require a migration.",
          "112:     flask-session>=0.3.1, <=0.4.0",
          "",
          "---------------"
        ],
        "tests/api_connexion/conftest.py||tests/api_connexion/conftest.py": [
          "File: tests/api_connexion/conftest.py -> tests/api_connexion/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: @pytest.fixture(scope=\"session\")",
          "26: def minimal_app_for_api():",
          "27:     @dont_initialize_flask_app_submodules(",
          "29:     )",
          "30:     def factory():",
          "31:         with conf_vars({(\"api\", \"auth_backend\"): \"tests.test_utils.remote_user_api_auth_backend\"}):",
          "",
          "[Removed Lines]",
          "28:         skip_all_except=[\"init_appbuilder\", \"init_api_experimental_auth\", \"init_api_connexion\"]",
          "",
          "[Added Lines]",
          "28:         skip_all_except=[",
          "29:             \"init_appbuilder\",",
          "30:             \"init_api_experimental_auth\",",
          "31:             \"init_api_connexion\",",
          "32:             \"init_airflow_session_interface\",",
          "33:         ]",
          "",
          "---------------"
        ],
        "tests/api_connexion/test_security.py||tests/api_connexion/test_security.py": [
          "File: tests/api_connexion/test_security.py -> tests/api_connexion/test_security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     def test_session_not_created_on_api_request(self):",
          "46:         self.client.get(\"api/v1/dags\", environ_overrides={'REMOTE_USER': \"test\"})",
          "47:         assert all(cookie.name != \"session\" for cookie in self.client.cookie_jar)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     def test_session_not_created_on_health_endpoint_request(self):",
          "50:         self.client.get(\"health\")",
          "51:         assert all(cookie.name != \"session\" for cookie in self.client.cookie_jar)",
          "",
          "---------------"
        ],
        "tests/test_utils/decorators.py||tests/test_utils/decorators.py": [
          "File: tests/test_utils/decorators.py -> tests/test_utils/decorators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             \"sync_appbuilder_roles\",",
          "43:             \"init_jinja_globals\",",
          "44:             \"init_xframe_protection\",",
          "46:             \"init_appbuilder\",",
          "47:         ]",
          "",
          "[Removed Lines]",
          "45:             \"init_permanent_session\",",
          "",
          "[Added Lines]",
          "45:             \"init_airflow_session_interface\",",
          "",
          "---------------"
        ],
        "tests/utils/test_db.py||tests/utils/test_db.py": [
          "File: tests/utils/test_db.py -> tests/utils/test_db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:             lambda t: (t[0] == 'remove_table' and t[1].name == 'spt_fallback_usg'),",
          "75:             lambda t: (t[0] == 'remove_table' and t[1].name == 'MSreplication_options'),",
          "76:             lambda t: (t[0] == 'remove_table' and t[1].name == 'spt_fallback_dev'),",
          "77:         ]",
          "78:         for ignore in ignores:",
          "79:             diff = [d for d in diff if not ignore(d)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:             # Ignore flask-session table/index",
          "78:             lambda t: (t[0] == 'remove_table' and t[1].name == 'session'),",
          "79:             lambda t: (t[0] == 'remove_index' and t[1].name == 'session_id'),",
          "",
          "---------------"
        ],
        "tests/www/views/conftest.py||tests/www/views/conftest.py": [
          "File: tests/www/views/conftest.py -> tests/www/views/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:             \"init_flash_views\",",
          "56:             \"init_jinja_globals\",",
          "57:             \"init_plugins\",",
          "58:         ]",
          "59:     )",
          "60:     def factory():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:             \"init_airflow_session_interface\",",
          "",
          "---------------"
        ],
        "tests/www/views/test_session.py||tests/www/views/test_session.py": [
          "File: tests/www/views/test_session.py -> tests/www/views/test_session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "18: import pytest",
          "20: from airflow.exceptions import AirflowConfigException",
          "21: from airflow.www import app",
          "22: from tests.test_utils.config import conf_vars",
          "23: from tests.test_utils.decorators import dont_initialize_flask_app_submodules",
          "26: def test_session_cookie_created_on_login(user_client):",
          "27:     assert any(cookie.name == 'session' for cookie in user_client.cookie_jar)",
          "30: def test_session_inaccessible_after_logout(user_client):",
          "31:     session_cookie = next((cookie for cookie in user_client.cookie_jar if cookie.name == 'session'), None)",
          "32:     assert session_cookie is not None",
          "34:     resp = user_client.get('/logout/')",
          "35:     assert resp.status_code == 302",
          "37:     # Try to access /home with the session cookie from earlier",
          "38:     user_client.set_cookie('session', session_cookie.value)",
          "39:     user_client.get('/home/')",
          "40:     assert resp.status_code == 302",
          "43: def test_invalid_session_backend_option():",
          "44:     @dont_initialize_flask_app_submodules(",
          "45:         skip_all_except=[",
          "46:             \"init_api_connexion\",",
          "47:             \"init_appbuilder\",",
          "48:             \"init_appbuilder_links\",",
          "49:             \"init_appbuilder_views\",",
          "50:             \"init_flash_views\",",
          "51:             \"init_jinja_globals\",",
          "52:             \"init_plugins\",",
          "53:             \"init_airflow_session_interface\",",
          "54:         ]",
          "55:     )",
          "56:     def poorly_configured_app_factory():",
          "57:         with conf_vars({(\"webserver\", \"session_backend\"): \"invalid_value_for_session_backend\"}):",
          "58:             return app.create_app(testing=True)",
          "60:     expected_exc_regex = (",
          "61:         \"^Unrecognized session backend specified in web_server_session_backend: \"",
          "62:         r\"'invalid_value_for_session_backend'\\. Please set this to .+\\.$\"",
          "63:     )",
          "64:     with pytest.raises(AirflowConfigException, match=expected_exc_regex):",
          "65:         poorly_configured_app_factory()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e36c54f825a85ace4139a994db786e2185b97a83",
      "candidate_info": {
        "commit_hash": "e36c54f825a85ace4139a994db786e2185b97a83",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/e36c54f825a85ace4139a994db786e2185b97a83",
        "files": [
          "scripts/ci/testing/ci_run_airflow_testing.sh"
        ],
        "message": "Fix errors thrown by some versions of Bash v4 (#20932)\n\nIn some versions of Bash V4, accessing an array that's only been initted\nbut contains no values can throw an error (specifically if -u is set).\nSo wrap access in an if check first.\nSee more details here: https://stackoverflow.com/a/58261136/1055702\n\n(cherry picked from commit acd9811cfbb01b95e76caf3d60b5a788ca3f5fc5)",
        "before_after_code_files": [
          "scripts/ci/testing/ci_run_airflow_testing.sh||scripts/ci/testing/ci_run_airflow_testing.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/ci/testing/ci_run_airflow_testing.sh||scripts/ci/testing/ci_run_airflow_testing.sh": [
          "File: scripts/ci/testing/ci_run_airflow_testing.sh -> scripts/ci/testing/ci_run_airflow_testing.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     # Run all tests that should run in parallel (from test_types_to_run variable)",
          "111:     run_test_types_in_parallel \"${@}\"",
          "119:     set -e",
          "121:     parallel::print_job_summary_and_return_status_code",
          "122: }",
          "",
          "[Removed Lines]",
          "113:     # if needed run remaining tests sequentially",
          "114:     for sequential_test in \"${sequential_tests[@]}\"; do",
          "115:         parallel::cleanup_runner",
          "116:         test_types_to_run=\"${sequential_test}\"",
          "117:         run_test_types_in_parallel \"${@}\"",
          "118:     done",
          "120:     # this will exit with error code in case some of the non-Quarantined tests failed",
          "",
          "[Added Lines]",
          "113:     # Check if sequential_tests contains any values since accessing an empty (and only initted) array throws an",
          "114:     # error in some versions of Bash 4",
          "115:     if [[ ${sequential_tests[0]+\"${sequential_tests[@]}\"} ]]",
          "116:     then",
          "117:         # If needed run remaining tests sequentially",
          "118:         for sequential_test in \"${sequential_tests[@]}\"; do",
          "119:             parallel::cleanup_runner",
          "120:             test_types_to_run=\"${sequential_test}\"",
          "121:             run_test_types_in_parallel \"${@}\"",
          "122:         done",
          "123:     fi",
          "125:     # This will exit with error code in case some of the non-Quarantined tests failed",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2c90852748697c1d95740e28edc437d6b842a2e",
      "candidate_info": {
        "commit_hash": "b2c90852748697c1d95740e28edc437d6b842a2e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b2c90852748697c1d95740e28edc437d6b842a2e",
        "files": [
          "dev/README_RELEASE_HELM_CHART.md",
          "dev/chart/build_changelog_annotations.py"
        ],
        "message": "Add script to generate chart changelog annotations (#20555)\n\n(cherry picked from commit c56835304318f0695c79ac42df7a97ad05ccd21e)",
        "before_after_code_files": [
          "dev/chart/build_changelog_annotations.py||dev/chart/build_changelog_annotations.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/chart/build_changelog_annotations.py||dev/chart/build_changelog_annotations.py": [
          "File: dev/chart/build_changelog_annotations.py -> dev/chart/build_changelog_annotations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python3",
          "3: # Licensed to the Apache Software Foundation (ASF) under one",
          "4: # or more contributor license agreements.  See the NOTICE file",
          "5: # distributed with this work for additional information",
          "6: # regarding copyright ownership.  The ASF licenses this file",
          "7: # to you under the Apache License, Version 2.0 (the",
          "8: # \"License\"); you may not use this file except in compliance",
          "9: # with the License.  You may obtain a copy of the License at",
          "10: #",
          "11: #   http://www.apache.org/licenses/LICENSE-2.0",
          "12: #",
          "13: # Unless required by applicable law or agreed to in writing,",
          "14: # software distributed under the License is distributed on an",
          "15: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "16: # KIND, either express or implied.  See the License for the",
          "17: # specific language governing permissions and limitations",
          "18: # under the License.",
          "20: '''",
          "21: Take normal chart CHANGELOG entries and build ArtifactHub changelog annotations.",
          "22: Only outputs the annotations for the latest release in the CHANGELOG.",
          "24: e.g from:",
          "26: New Features",
          "27: \"\"\"\"\"\"\"\"\"\"\"\"",
          "29: - Add resources for `cleanup` and `createuser` jobs (#19263)",
          "31: to:",
          "33: - kind: added",
          "34:   description: Add resources for `cleanup` and `createuser` jobs",
          "35:   links:",
          "36:     - name: \"#19263\"",
          "37:       url: https://github.com/apache/airflow/pull/19263",
          "38: '''",
          "41: import re",
          "42: from typing import Dict, List, Optional, Tuple, Union",
          "44: import yaml",
          "46: TYPE_MAPPING = {",
          "47:     # CHANGELOG: (ArtifactHub kind, prefix for description)",
          "48:     # ArtifactHub kind must be one of: added, changed, deprecated, removed, fixed or security",
          "49:     \"New Features\": (\"added\", None),",
          "50:     \"Improvements\": (\"changed\", None),",
          "51:     \"Bug Fixes\": (\"fixed\", None),",
          "52:     \"Doc only changes\": (\"changed\", \"Docs\"),",
          "53:     \"Misc\": (\"changed\", \"Misc\"),",
          "54: }",
          "56: PREFIXES_TO_STRIP = [",
          "57:     # case insensitive",
          "58:     \"Chart:\",",
          "59:     \"Chart Docs:\",",
          "60: ]",
          "63: def parse_line(line: str) -> Tuple[Optional[str], Optional[int]]:",
          "64:     match = re.search(r'^- (.*?)(?:\\(#(\\d+)\\)){0,1}$', line)",
          "65:     if not match:",
          "66:         return None, None",
          "67:     desc, pr_number = match.groups()",
          "68:     return desc.strip(), int(pr_number)",
          "71: def print_entry(section: str, description: str, pr_number: Optional[int]):",
          "72:     for unwanted_prefix in PREFIXES_TO_STRIP:",
          "73:         if description.lower().startswith(unwanted_prefix.lower()):",
          "74:             description = description[len(unwanted_prefix) :].strip()",
          "76:     kind, prefix = TYPE_MAPPING[section]",
          "77:     if prefix:",
          "78:         description = f\"{prefix}: {description}\"",
          "79:     entry: Dict[str, Union[str, List]] = {\"kind\": kind, \"description\": description}",
          "80:     if pr_number:",
          "81:         entry[\"links\"] = [",
          "82:             {\"name\": f\"#{pr_number}\", \"url\": f\"https://github.com/apache/airflow/pull/{pr_number}\"}",
          "83:         ]",
          "84:     print(yaml.dump([entry]))",
          "87: in_first_release = False",
          "88: section = \"\"",
          "89: with open(\"chart/CHANGELOG.txt\") as f:",
          "90:     for line in f:",
          "91:         line = line.strip()",
          "92:         if not line:",
          "93:             continue",
          "94:         if line.startswith(\"Airflow Helm Chart\"):",
          "95:             # We only want to get annotations for the \"latest\" release",
          "96:             if in_first_release:",
          "97:                 break",
          "98:             in_first_release = True",
          "99:             continue",
          "100:         if line.startswith('\"\"\"') or line.startswith('----'):",
          "101:             continue",
          "102:         if not line.startswith('- '):",
          "103:             section = line",
          "104:             continue",
          "106:         description, pr = parse_line(line)",
          "107:         if description:",
          "108:             print_entry(section, description, pr)",
          "",
          "---------------"
        ]
      }
    }
  ]
}