{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7eeb57ebb2c971e7758b71ec1f81695d1765a6c",
      "candidate_info": {
        "commit_hash": "e7eeb57ebb2c971e7758b71ec1f81695d1765a6c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e7eeb57ebb2c971e7758b71ec1f81695d1765a6c",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"
        ],
        "message": "PDFBOX-5094: follow the spec if a symbolic true type font uses WinANSI or MacRoman as encdoing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886186 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.apache.pdfbox.pdmodel.font.encoding.Encoding;",
          "42: import org.apache.pdfbox.pdmodel.font.encoding.GlyphList;",
          "43: import org.apache.pdfbox.pdmodel.font.encoding.MacOSRomanEncoding;",
          "44: import org.apache.pdfbox.pdmodel.font.encoding.StandardEncoding;",
          "45: import org.apache.pdfbox.pdmodel.font.encoding.Type1Encoding;",
          "46: import org.apache.pdfbox.pdmodel.font.encoding.WinAnsiEncoding;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.pdfbox.pdmodel.font.encoding.MacRomanEncoding;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:         extractCmapTable();",
          "549:         int gid = 0;",
          "552:         {",
          "553:             String name = encoding.getName(code);",
          "554:             if (\".notdef\".equals(name))",
          "",
          "[Removed Lines]",
          "551:         if (!isSymbolic()) // non-symbolic",
          "",
          "[Added Lines]",
          "552:         if (!isSymbolic() // non-symbolic",
          "553:                 || encoding instanceof WinAnsiEncoding || encoding instanceof MacRomanEncoding)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57133b7cfabe65d7e742538cbfd5391918f8cc25",
      "candidate_info": {
        "commit_hash": "57133b7cfabe65d7e742538cbfd5391918f8cc25",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/57133b7cfabe65d7e742538cbfd5391918f8cc25",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java"
        ],
        "message": "PDFBOX-4892: avoid NumberFormatException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884413 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java||fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java -> fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:     {",
          "403:         StringBuilder sb = new StringBuilder();",
          "",
          "[Removed Lines]",
          "401:     private Token readString()",
          "",
          "[Added Lines]",
          "401:     private Token readString() throws IOException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:                     if (Character.isDigit(c1))",
          "443:                     {",
          "444:                         String num = String.valueOf(new char[] { c1, getChar(), getChar() });",
          "447:                     }",
          "448:                     break;",
          "449:                 case '\\r':",
          "",
          "[Removed Lines]",
          "445:                         Integer code = Integer.parseInt(num, 8);",
          "446:                         sb.append((char)(int)code);",
          "",
          "[Added Lines]",
          "445:                         try",
          "446:                         {",
          "447:                             Integer code = Integer.parseInt(num, 8);",
          "448:                             sb.append((char) (int) code);",
          "449:                         }",
          "450:                         catch (NumberFormatException ex)",
          "451:                         {",
          "452:                             throw new IOException(ex);",
          "453:                         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e7d1f84abc85328efef7a8f9cf37ed79d3b48e9",
      "candidate_info": {
        "commit_hash": "6e7d1f84abc85328efef7a8f9cf37ed79d3b48e9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6e7d1f84abc85328efef7a8f9cf37ed79d3b48e9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"
        ],
        "message": "PDFBOX-4956: make maps final, fix hashcode initialization as proposed by J\u00f6rg Wa\u00dfmer\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882046 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: public final class COSName extends COSBase implements Comparable<COSName>",
          "34: {",
          "",
          "[Removed Lines]",
          "36:     private static Map<String, COSName> nameMap = new ConcurrentHashMap<String, COSName>(8192);",
          "40:     private static Map<String, COSName> commonNameMap = new HashMap<String, COSName>(768);",
          "",
          "[Added Lines]",
          "36:     private static final Map<String, COSName> nameMap = new ConcurrentHashMap<String, COSName>(",
          "37:             8192);",
          "41:     private static final Map<String, COSName> commonNameMap = new HashMap<String, COSName>(768);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "645:     private COSName(String aName, boolean staticValue)",
          "646:     {",
          "647:         name = aName;",
          "648:         if (staticValue)",
          "649:         {",
          "650:             commonNameMap.put(aName, this);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "649:         hashCode = name.hashCode();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "653:         {",
          "654:             nameMap.put(aName, this);",
          "655:         }",
          "657:     }",
          "",
          "[Removed Lines]",
          "656:         hashCode = name.hashCode();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7d92490d4c40a8c91c19a0a3477ac5fb514b3d9",
      "candidate_info": {
        "commit_hash": "d7d92490d4c40a8c91c19a0a3477ac5fb514b3d9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d7d92490d4c40a8c91c19a0a3477ac5fb514b3d9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ],
        "message": "PDFBOX-5151: try to determine the newest version of an object if a search found more than one variation\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890429 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2187:     private boolean searchForTrailerItems(COSDictionary trailer) throws IOException",
          "2188:     {",
          "2190:         for (Entry<COSObjectKey, Long> entry : bfSearchCOSObjectKeyOffsets.entrySet())",
          "2191:         {",
          "2192:             COSDictionary dictionary = retrieveCOSDictionary(entry.getKey(), entry.getValue());",
          "",
          "[Removed Lines]",
          "2189:         boolean rootFound = false;",
          "",
          "[Added Lines]",
          "2189:         COSObject rootObject = null;",
          "2190:         Long rootOffset = null;",
          "2191:         COSObject infoObject = null;",
          "2192:         Long infoOffset = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2198:             if (isCatalog(dictionary))",
          "2199:             {",
          "2202:             }",
          "2204:             else if (isInfo(dictionary))",
          "2205:             {",
          "2207:             }",
          "2210:         }",
          "2212:     }",
          "2214:     private COSDictionary retrieveCOSDictionary(COSObject object) throws IOException",
          "",
          "[Removed Lines]",
          "2200:                 trailer.setItem(COSName.ROOT, document.getObjectFromPool(entry.getKey()));",
          "2201:                 rootFound = true;",
          "2206:                 trailer.setItem(COSName.INFO, document.getObjectFromPool(entry.getKey()));",
          "2211:         return rootFound;",
          "",
          "[Added Lines]",
          "2203:                 COSObject cosObject = document.getObjectFromPool(entry.getKey());",
          "2204:                 rootObject = compareCOSObjects(cosObject, entry.getValue(), rootObject, rootOffset);",
          "2205:                 if (rootObject == cosObject)",
          "2206:                 {",
          "2207:                     rootOffset = entry.getValue();",
          "2208:                 }",
          "2213:                 COSObject cosObject = document.getObjectFromPool(entry.getKey());",
          "2214:                 infoObject = compareCOSObjects(cosObject, entry.getValue(), infoObject, infoOffset);",
          "2215:                 if (infoObject == cosObject)",
          "2216:                 {",
          "2217:                     infoOffset = entry.getValue();",
          "2218:                 }",
          "2223:         if (rootObject != null)",
          "2224:         {",
          "2225:             trailer.setItem(COSName.ROOT, rootObject);",
          "2226:         }",
          "2227:         if (infoObject != null)",
          "2228:         {",
          "2229:             trailer.setItem(COSName.INFO, infoObject);",
          "2230:         }",
          "2231:         return rootObject != null;",
          "2232:     }",
          "2234:     private COSObject compareCOSObjects(COSObject newObject, Long newOffset,",
          "2235:             COSObject currentObject, Long currentOffset)",
          "2236:     {",
          "2237:         if (currentObject != null)",
          "2238:         {",
          "2240:             if (currentObject.getObjectNumber() == newObject.getObjectNumber())",
          "2241:             {",
          "2242:                 return currentObject.getGenerationNumber() < newObject.getGenerationNumber()",
          "2243:                         ? newObject",
          "2244:                         : currentObject;",
          "2245:             }",
          "2247:             return currentOffset != null && newOffset > currentOffset ? newObject : currentObject;",
          "2248:         }",
          "2249:         return newObject;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88dbb84013b093c711234377003786de0c308035",
      "candidate_info": {
        "commit_hash": "88dbb84013b093c711234377003786de0c308035",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/88dbb84013b093c711234377003786de0c308035",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java"
        ],
        "message": "PDFBOX-5033: throw exception on illegal offSize value\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884105 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java||fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java||fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java -> fontbox/src/main/java/org/apache/fontbox/cff/CFFDataInput.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     }",
          "79:     public int readOffSize() throws IOException",
          "80:     {",
          "82:     }",
          "",
          "[Removed Lines]",
          "81:         return readUnsignedByte();",
          "",
          "[Added Lines]",
          "82:         int offSize = readUnsignedByte();",
          "83:         if (offSize < 1 || offSize > 4)",
          "84:         {",
          "85:             throw new IOException(\"Illegal (< 1 or > 4) offSize value \" + offSize + \" in CFF font at position \" + (getPosition() - 1));",
          "86:         }",
          "87:         return offSize;",
          "",
          "---------------"
        ]
      }
    }
  ]
}