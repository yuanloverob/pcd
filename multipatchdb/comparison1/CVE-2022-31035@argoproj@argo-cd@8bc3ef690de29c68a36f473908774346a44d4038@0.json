{
  "cve_id": "CVE-2022-31035",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a `javascript:` link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin). The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources. A patch for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. There are no completely-safe workarounds besides upgrading.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "8bc3ef690de29c68a36f473908774346a44d4038",
  "patch_info": {
    "commit_hash": "8bc3ef690de29c68a36f473908774346a44d4038",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038",
    "files": [
      "server/server.go",
      "server/server_test.go",
      "ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx"
    ],
    "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>\n\nfix tests/lint\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
    "before_after_code_files": [
      "server/server.go||server/server.go",
      "server/server_test.go||server/server_test.go",
      "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
    ]
  },
  "patch_diff": {
    "server/server.go||server/server.go": [
      "File: server/server.go -> server/server.go"
    ],
    "server/server_test.go||server/server_test.go": [
      "File: server/server_test.go -> server/server_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "508:   cm.Data[\"users.anonymous.enabled\"] = \"true\"",
      "509:  }",
      "510:  ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "512:  }))",
      "513:  ts.Config.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "514:   dexMockHandler(t, ts.URL)(w, r)",
      "",
      "[Removed Lines]",
      "511:   return  // Start with a placeholder. We need the server URL before setting up the real handler.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
      "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
      "3: test('rejects malicious URLs', () => {",
      "4:     expect(() => {",
      "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
      "6:     }).toThrowError(InvalidExternalLinkError);",
      "7:     expect(() => {",
      "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
      "9:     }).toThrowError(InvalidExternalLinkError);",
      "10: });",
      "12: test('allows absolute URLs', () => {",
      "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
      "14: });",
      "16: test('allows relative URLs', () => {",
      "18:     window.location = new URL('https://localhost:8080/applications');",
      "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
      "20: });",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
      "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import {DropDownMenu} from 'argo-ui';",
      "2: import * as React from 'react';",
      "5:     public title: string;",
      "6:     public ref: string;",
      "",
      "[Removed Lines]",
      "4: class ExternalLink {",
      "",
      "[Added Lines]",
      "4: export class InvalidExternalLinkError extends Error {",
      "5:     constructor(message: string) {",
      "6:         super(message);",
      "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
      "8:         this.name = 'InvalidExternalLinkError';",
      "9:     }",
      "10: }",
      "12: export class ExternalLink {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:             this.title = url;",
      "15:             this.ref = url;",
      "16:         }",
      "17:     }",
      "18: }",
      "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
      "21:     const externalLinks: ExternalLink[] = [];",
      "22:     for (const url of urls || []) {",
      "24:     }",
      "",
      "[Removed Lines]",
      "23:         externalLinks.push(new ExternalLink(url));",
      "",
      "[Added Lines]",
      "25:         if (!ExternalLink.isValidURL(this.ref)) {",
      "26:             throw new InvalidExternalLinkError('Invalid URL');",
      "27:         }",
      "28:     }",
      "30:     private static isValidURL(url: string): boolean {",
      "31:         try {",
      "32:             const parsedUrl = new URL(url);",
      "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
      "34:         } catch (TypeError) {",
      "35:             try {",
      "37:                 const parsedUrl = new URL(url, window.location.origin);",
      "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
      "39:             } catch (TypeError) {",
      "40:                 return false;",
      "41:             }",
      "42:         }",
      "49:         try {",
      "50:             const externalLink = new ExternalLink(url);",
      "51:             externalLinks.push(externalLink);",
      "52:         } catch (InvalidExternalLinkError) {",
      "53:             continue;",
      "54:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7749ca67e94fac4748db94d9222308436ce680b",
      "candidate_info": {
        "commit_hash": "c7749ca67e94fac4748db94d9222308436ce680b",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/c7749ca67e94fac4748db94d9222308436ce680b",
        "files": [
          "server/server.go",
          "server/server_test.go",
          "util/session/sessionmanager.go"
        ],
        "message": "Merge pull request from GHSA-r642-gv9p-2wjj\n\nSigned-off-by: jannfis <jann@mistrust.net>\n\nCo-authored-by: Michael Crenshaw <michael@crenshaw.dev>\n\nCo-authored-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "server/server.go||server/server.go",
          "server/server_test.go||server/server_test.go",
          "util/session/sessionmanager.go||util/session/sessionmanager.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/server.go||server/server.go",
            "server/server_test.go||server/server_test.go"
          ],
          "candidate": [
            "server/server.go||server/server.go",
            "server/server_test.go||server/server_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/server.go||server/server.go": [
          "File: server/server.go -> server/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:   }",
          "1003:   if !argoCDSettings.AnonymousUserEnabled {",
          "1004:    return ctx, claimsErr",
          "1005:   }",
          "1006:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005:   } else {",
          "1006:    ctx = context.WithValue(ctx, \"claims\", \"\")",
          "",
          "---------------"
        ],
        "server/server_test.go||server/server_test.go": [
          "File: server/server_test.go -> server/server_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"net/http/httptest\"",
          "7:  \"net/url\"",
          "8:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"io\"",
          "7:  \"net/http\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:  \"github.com/golang-jwt/jwt/v4\"",
          "14:  log \"github.com/sirupsen/logrus\"",
          "15:  \"github.com/stretchr/testify/assert\"",
          "16:  \"google.golang.org/grpc/metadata\"",
          "17:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "18:  \"k8s.io/client-go/kubernetes/fake\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "434:  }",
          "435: }",
          "437: func Test_getToken(t *testing.T) {",
          "438:  token := \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"",
          "439:  t.Run(\"Empty\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440: func dexMockHandler(t *testing.T, url string) func(http.ResponseWriter, *http.Request) {",
          "441:  return func(w http.ResponseWriter, r *http.Request) {",
          "442:   w.Header().Set(\"Content-Type\", \"application/json\")",
          "443:   switch r.RequestURI {",
          "444:   case \"/api/dex/.well-known/openid-configuration\":",
          "445:    _, err := io.WriteString(w, fmt.Sprintf(`",
          "446: {",
          "447:   \"issuer\": \"%[1]s/api/dex\",",
          "448:   \"authorization_endpoint\": \"%[1]s/api/dex/auth\",",
          "449:   \"token_endpoint\": \"%[1]s/api/dex/token\",",
          "450:   \"jwks_uri\": \"%[1]s/api/dex/keys\",",
          "451:   \"userinfo_endpoint\": \"%[1]s/api/dex/userinfo\",",
          "452:   \"device_authorization_endpoint\": \"%[1]s/api/dex/device/code\",",
          "453:   \"grant_types_supported\": [",
          "454:     \"authorization_code\",",
          "455:     \"refresh_token\",",
          "456:     \"urn:ietf:params:oauth:grant-type:device_code\"",
          "457:   ],",
          "458:   \"response_types_supported\": [",
          "459:     \"code\"",
          "460:   ],",
          "461:   \"subject_types_supported\": [",
          "462:     \"public\"",
          "463:   ],",
          "464:   \"id_token_signing_alg_values_supported\": [",
          "465:     \"RS256\", \"HS256\"",
          "466:   ],",
          "467:   \"code_challenge_methods_supported\": [",
          "468:     \"S256\",",
          "469:     \"plain\"",
          "470:   ],",
          "471:   \"scopes_supported\": [",
          "472:     \"openid\",",
          "473:     \"email\",",
          "474:     \"groups\",",
          "475:     \"profile\",",
          "476:     \"offline_access\"",
          "477:   ],",
          "478:   \"token_endpoint_auth_methods_supported\": [",
          "479:     \"client_secret_basic\",",
          "480:     \"client_secret_post\"",
          "481:   ],",
          "482:   \"claims_supported\": [",
          "483:     \"iss\",",
          "484:     \"sub\",",
          "485:     \"aud\",",
          "486:     \"iat\",",
          "487:     \"exp\",",
          "488:     \"email\",",
          "489:     \"email_verified\",",
          "490:     \"locale\",",
          "491:     \"name\",",
          "492:     \"preferred_username\",",
          "493:     \"at_hash\"",
          "494:   ]",
          "495: }`, url))",
          "496:    if err != nil {",
          "497:     t.Fail()",
          "498:    }",
          "499:   default:",
          "500:    w.WriteHeader(404)",
          "501:   }",
          "502:  }",
          "503: }",
          "505: func getTestServer(t *testing.T, anonymousEnabled bool, withFakeSSO bool) (argocd *ArgoCDServer, dexURL string) {",
          "506:  cm := test.NewFakeConfigMap()",
          "507:  if anonymousEnabled {",
          "508:   cm.Data[\"users.anonymous.enabled\"] = \"true\"",
          "509:  }",
          "510:  ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "511:   return  // Start with a placeholder. We need the server URL before setting up the real handler.",
          "512:  }))",
          "513:  ts.Config.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "514:   dexMockHandler(t, ts.URL)(w, r)",
          "515:  })",
          "516:  if withFakeSSO {",
          "517:   cm.Data[\"url\"] = ts.URL",
          "518:   cm.Data[\"dex.config\"] = `",
          "519: connectors:",
          "520:   # OIDC",
          "521:   - type: OIDC",
          "522:     id: oidc",
          "523:     name: OIDC",
          "524:     config:",
          "525:     issuer: https://auth.example.gom",
          "526:     clientID: test-client",
          "527:     clientSecret: $dex.oidc.clientSecret`",
          "528:  }",
          "529:  secret := test.NewFakeSecret()",
          "530:  kubeclientset := fake.NewSimpleClientset(cm, secret)",
          "531:  appClientSet := apps.NewSimpleClientset()",
          "532:  argoCDOpts := ArgoCDServerOpts{",
          "533:   Namespace:     test.FakeArgoCDNamespace,",
          "534:   KubeClientset: kubeclientset,",
          "535:   AppClientset:  appClientSet,",
          "536:  }",
          "537:  if withFakeSSO {",
          "538:   argoCDOpts.DexServerAddr = ts.URL",
          "539:  }",
          "540:  argocd = NewServer(context.Background(), argoCDOpts)",
          "541:  return argocd, ts.URL",
          "542: }",
          "544: func TestAuthenticate_3rd_party_JWTs(t *testing.T) {",
          "545:  type testData struct {",
          "546:   test                  string",
          "547:   anonymousEnabled      bool",
          "548:   claims                jwt.RegisteredClaims",
          "549:   expectedErrorContains string",
          "550:   expectedClaims        interface{}",
          "551:  }",
          "552:  var tests = []testData{",
          "553:   {",
          "554:    test:                  \"anonymous disabled, no audience\",",
          "555:    anonymousEnabled:      false,",
          "556:    claims:                jwt.RegisteredClaims{},",
          "557:    expectedErrorContains: \"no audience found in the token\",",
          "558:    expectedClaims:        nil,",
          "559:   },",
          "560:   {",
          "561:    test:                  \"anonymous enabled, no audience\",",
          "562:    anonymousEnabled:      true,",
          "563:    claims:                jwt.RegisteredClaims{},",
          "564:    expectedErrorContains: \"\",",
          "565:    expectedClaims:        \"\",",
          "566:   },",
          "567:   {",
          "568:    test:                  \"anonymous disabled, unexpired token, admin claim\",",
          "569:    anonymousEnabled:      false,",
          "570:    claims:                jwt.RegisteredClaims{Audience: jwt.ClaimStrings{\"test-client\"}, Subject: \"admin\", ExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour * 24))},",
          "571:    expectedErrorContains: \"id token signed with unsupported algorithm\",",
          "572:    expectedClaims:        nil,",
          "573:   },",
          "574:   {",
          "575:    test:                  \"anonymous enabled, unexpired token, admin claim\",",
          "576:    anonymousEnabled:      true,",
          "577:    claims:                jwt.RegisteredClaims{Audience: jwt.ClaimStrings{\"test-client\"}, Subject: \"admin\", ExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour * 24))},",
          "578:    expectedErrorContains: \"\",",
          "579:    expectedClaims:        \"\",",
          "580:   },",
          "581:   {",
          "582:    test:                  \"anonymous disabled, expired token, admin claim\",",
          "583:    anonymousEnabled:      false,",
          "584:    claims:                jwt.RegisteredClaims{Audience: jwt.ClaimStrings{\"test-client\"}, Subject: \"admin\", ExpiresAt: jwt.NewNumericDate(time.Now())},",
          "585:    expectedErrorContains: \"token is expired\",",
          "586:    expectedClaims:        jwt.RegisteredClaims{Issuer:\"sso\"},",
          "587:   },",
          "588:   {",
          "589:    test:                  \"anonymous enabled, expired token, admin claim\",",
          "590:    anonymousEnabled:      true,",
          "591:    claims:                jwt.RegisteredClaims{Audience: jwt.ClaimStrings{\"test-client\"}, Subject: \"admin\", ExpiresAt: jwt.NewNumericDate(time.Now())},",
          "592:    expectedErrorContains: \"\",",
          "593:    expectedClaims:        \"\",",
          "594:   },",
          "595:  }",
          "597:  for _, testData := range tests {",
          "598:   testDataCopy := testData",
          "600:   t.Run(testDataCopy.test, func(t *testing.T) {",
          "601:    t.Parallel()",
          "603:    argocd, dexURL := getTestServer(t, testDataCopy.anonymousEnabled, true)",
          "604:    ctx := context.Background()",
          "605:    testDataCopy.claims.Issuer = fmt.Sprintf(\"%s/api/dex\", dexURL)",
          "606:    token := jwt.NewWithClaims(jwt.SigningMethodHS256, testDataCopy.claims)",
          "607:    tokenString, err := token.SignedString([]byte(\"key\"))",
          "608:    require.NoError(t, err)",
          "609:    ctx = metadata.NewIncomingContext(context.Background(), metadata.Pairs(apiclient.MetaDataTokenKey, tokenString))",
          "611:    ctx, err = argocd.Authenticate(ctx)",
          "612:    claims := ctx.Value(\"claims\")",
          "613:    if testDataCopy.expectedClaims == nil {",
          "614:     assert.Nil(t, claims)",
          "615:    } else {",
          "616:     assert.Equal(t, testDataCopy.expectedClaims, claims)",
          "617:    }",
          "618:    if testDataCopy.expectedErrorContains != \"\" {",
          "619:     assert.ErrorContains(t, err, testDataCopy.expectedErrorContains, \"Authenticate should have thrown an error and blocked the request\")",
          "620:    } else {",
          "621:     assert.NoError(t, err)",
          "622:    }",
          "623:   })",
          "624:  }",
          "625: }",
          "627: func TestAuthenticate_no_request_metadata(t *testing.T) {",
          "628:  type testData struct {",
          "629:   test                  string",
          "630:   anonymousEnabled      bool",
          "631:   expectedErrorContains string",
          "632:   expectedClaims        interface{}",
          "633:  }",
          "634:  var tests = []testData{",
          "635:   {",
          "636:    test:                  \"anonymous disabled\",",
          "637:    anonymousEnabled:      false,",
          "638:    expectedErrorContains: \"no session information\",",
          "639:    expectedClaims:        nil,",
          "640:   },",
          "641:   {",
          "642:    test:                  \"anonymous enabled\",",
          "643:    anonymousEnabled:      true,",
          "644:    expectedErrorContains: \"\",",
          "645:    expectedClaims:        \"\",",
          "646:   },",
          "647:  }",
          "649:  for _, testData := range tests {",
          "650:   testDataCopy := testData",
          "652:   t.Run(testDataCopy.test, func(t *testing.T) {",
          "653:    t.Parallel()",
          "655:    argocd, _ := getTestServer(t, testDataCopy.anonymousEnabled, true)",
          "656:    ctx := context.Background()",
          "658:    ctx, err := argocd.Authenticate(ctx)",
          "659:    claims := ctx.Value(\"claims\")",
          "660:    assert.Equal(t, testDataCopy.expectedClaims, claims)",
          "661:    if testDataCopy.expectedErrorContains != \"\" {",
          "662:     assert.ErrorContains(t, err, testDataCopy.expectedErrorContains, \"Authenticate should have thrown an error and blocked the request\")",
          "663:    } else {",
          "664:     assert.NoError(t, err)",
          "665:    }",
          "666:   })",
          "667:  }",
          "668: }",
          "670: func TestAuthenticate_no_SSO(t *testing.T) {",
          "671:  type testData struct {",
          "672:   test                 string",
          "673:   anonymousEnabled     bool",
          "674:   expectedErrorMessage string",
          "675:   expectedClaims       interface{}",
          "676:  }",
          "677:  var tests = []testData{",
          "678:   {",
          "679:    test:                 \"anonymous disabled\",",
          "680:    anonymousEnabled:     false,",
          "681:    expectedErrorMessage: \"SSO is not configured\",",
          "682:    expectedClaims:       nil,",
          "683:   },",
          "684:   {",
          "685:    test:                 \"anonymous enabled\",",
          "686:    anonymousEnabled:     true,",
          "687:    expectedErrorMessage: \"\",",
          "688:    expectedClaims:       \"\",",
          "689:   },",
          "690:  }",
          "692:  for _, testData := range tests {",
          "693:   testDataCopy := testData",
          "695:   t.Run(testDataCopy.test, func(t *testing.T) {",
          "696:    t.Parallel()",
          "698:    argocd, dexURL := getTestServer(t, testDataCopy.anonymousEnabled, false)",
          "699:    ctx := context.Background()",
          "700:    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.RegisteredClaims{Issuer: fmt.Sprintf(\"%s/api/dex\", dexURL)})",
          "701:    tokenString, err := token.SignedString([]byte(\"key\"))",
          "702:    require.NoError(t, err)",
          "703:    ctx = metadata.NewIncomingContext(context.Background(), metadata.Pairs(apiclient.MetaDataTokenKey, tokenString))",
          "705:    ctx, err = argocd.Authenticate(ctx)",
          "706:    claims := ctx.Value(\"claims\")",
          "707:    assert.Equal(t, testDataCopy.expectedClaims, claims)",
          "708:    if testDataCopy.expectedErrorMessage != \"\" {",
          "709:     assert.ErrorContains(t, err, testDataCopy.expectedErrorMessage, \"Authenticate should have thrown an error and blocked the request\")",
          "710:    } else {",
          "711:     assert.NoError(t, err)",
          "712:    }",
          "713:   })",
          "714:  }",
          "715: }",
          "717: func TestAuthenticate_bad_request_metadata(t *testing.T) {",
          "718:  type testData struct {",
          "719:   test                 string",
          "720:   anonymousEnabled     bool",
          "721:   metadata             metadata.MD",
          "722:   expectedErrorMessage string",
          "723:   expectedClaims       interface{}",
          "724:  }",
          "725:  var tests = []testData{",
          "726:   {",
          "727:    test:                 \"anonymous disabled, empty metadata\",",
          "728:    anonymousEnabled:     false,",
          "729:    metadata:             metadata.MD{},",
          "730:    expectedErrorMessage: \"no session information\",",
          "731:    expectedClaims:       nil,",
          "732:   },",
          "733:   {",
          "734:    test:                 \"anonymous enabled, empty metadata\",",
          "735:    anonymousEnabled:     true,",
          "736:    metadata:             metadata.MD{},",
          "737:    expectedErrorMessage: \"\",",
          "738:    expectedClaims:       \"\",",
          "739:   },",
          "740:   {",
          "741:    test:                 \"anonymous disabled, empty tokens\",",
          "742:    anonymousEnabled:     false,",
          "743:    metadata:             metadata.MD{apiclient.MetaDataTokenKey: []string{}},",
          "744:    expectedErrorMessage: \"no session information\",",
          "745:    expectedClaims:       nil,",
          "746:   },",
          "747:   {",
          "748:    test:                 \"anonymous enabled, empty tokens\",",
          "749:    anonymousEnabled:     true,",
          "750:    metadata:             metadata.MD{apiclient.MetaDataTokenKey: []string{}},",
          "751:    expectedErrorMessage: \"\",",
          "752:    expectedClaims:       \"\",",
          "753:   },",
          "754:   {",
          "755:    test:                 \"anonymous disabled, bad tokens\",",
          "756:    anonymousEnabled:     false,",
          "757:    metadata:             metadata.Pairs(apiclient.MetaDataTokenKey, \"bad\"),",
          "758:    expectedErrorMessage: \"token contains an invalid number of segments\",",
          "759:    expectedClaims:       nil,",
          "760:   },",
          "761:   {",
          "762:    test:                 \"anonymous enabled, bad tokens\",",
          "763:    anonymousEnabled:     true,",
          "764:    metadata:             metadata.Pairs(apiclient.MetaDataTokenKey, \"bad\"),",
          "765:    expectedErrorMessage: \"\",",
          "766:    expectedClaims:       \"\",",
          "767:   },",
          "768:   {",
          "769:    test:                 \"anonymous disabled, bad auth header\",",
          "770:    anonymousEnabled:     false,",
          "771:    metadata:             metadata.MD{\"authorization\": []string{\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.TGGTTHuuGpEU8WgobXxkrBtW3NiR3dgw5LR-1DEW3BQ\"}},",
          "772:    expectedErrorMessage: \"no audience found in the token\",",
          "773:    expectedClaims:       nil,",
          "774:   },",
          "775:   {",
          "776:    test:                 \"anonymous enabled, bad auth header\",",
          "777:    anonymousEnabled:     true,",
          "778:    metadata:             metadata.MD{\"authorization\": []string{\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.TGGTTHuuGpEU8WgobXxkrBtW3NiR3dgw5LR-1DEW3BQ\"}},",
          "779:    expectedErrorMessage: \"\",",
          "780:    expectedClaims:       \"\",",
          "781:   },",
          "782:   {",
          "783:    test:                 \"anonymous disabled, bad auth cookie\",",
          "784:    anonymousEnabled:     false,",
          "785:    metadata:             metadata.MD{\"grpcgateway-cookie\": []string{\"argocd.token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.TGGTTHuuGpEU8WgobXxkrBtW3NiR3dgw5LR-1DEW3BQ\"}},",
          "786:    expectedErrorMessage: \"no audience found in the token\",",
          "787:    expectedClaims:       nil,",
          "788:   },",
          "789:   {",
          "790:    test:                 \"anonymous enabled, bad auth cookie\",",
          "791:    anonymousEnabled:     true,",
          "792:    metadata:             metadata.MD{\"grpcgateway-cookie\": []string{\"argocd.token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.TGGTTHuuGpEU8WgobXxkrBtW3NiR3dgw5LR-1DEW3BQ\"}},",
          "793:    expectedErrorMessage: \"\",",
          "794:    expectedClaims:       \"\",",
          "795:   },",
          "796:  }",
          "798:  for _, testData := range tests {",
          "799:   testDataCopy := testData",
          "801:   t.Run(testDataCopy.test, func(t *testing.T) {",
          "802:    t.Parallel()",
          "804:    argocd, _ := getTestServer(t, testDataCopy.anonymousEnabled, true)",
          "805:    ctx := context.Background()",
          "806:    ctx = metadata.NewIncomingContext(context.Background(), testDataCopy.metadata)",
          "808:    ctx, err := argocd.Authenticate(ctx)",
          "809:    claims := ctx.Value(\"claims\")",
          "810:    assert.Equal(t, testDataCopy.expectedClaims, claims)",
          "811:    if testDataCopy.expectedErrorMessage != \"\" {",
          "812:     assert.ErrorContains(t, err, testDataCopy.expectedErrorMessage, \"Authenticate should have thrown an error and blocked the request\")",
          "813:    } else {",
          "814:     assert.NoError(t, err)",
          "815:    }",
          "816:   })",
          "817:  }",
          "818: }",
          "",
          "---------------"
        ],
        "util/session/sessionmanager.go||util/session/sessionmanager.go": [
          "File: util/session/sessionmanager.go -> util/session/sessionmanager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:  token, err := jwt.ParseWithClaims(tokenString, &claims, func(token *jwt.Token) (interface{}, error) {",
          "212:   if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {",
          "214:   }",
          "215:   return argoCDSettings.ServerSignature, nil",
          "216:  })",
          "",
          "[Removed Lines]",
          "213:    return nil, fmt.Errorf(\"Unexpected signing method: %v\", token.Header[\"alg\"])",
          "",
          "[Added Lines]",
          "213:    return nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:  }",
          "264:  if account.PasswordMtime != nil && issuedAt.Before(*account.PasswordMtime) {",
          "266:  }",
          "268:  newToken := \"\"",
          "",
          "[Removed Lines]",
          "265:   return nil, \"\", fmt.Errorf(\"Account password has changed since token issued\")",
          "",
          "[Added Lines]",
          "265:   return nil, \"\", fmt.Errorf(\"account password has changed since token issued\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "478:   prov, err := mgr.provider()",
          "479:   if err != nil {",
          "481:   }",
          "",
          "[Removed Lines]",
          "480:    return claims, \"\", err",
          "",
          "[Added Lines]",
          "480:    return nil, \"\", err",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "489:     break",
          "490:    }",
          "491:   }",
          "492:   if err != nil {",
          "494:   }",
          "495:   if idToken == nil {",
          "497:   }",
          "499:   var claims jwt.MapClaims",
          "500:   err = idToken.Claims(&claims)",
          "502:  }",
          "503: }",
          "",
          "[Removed Lines]",
          "493:    return claims, \"\", err",
          "496:    return claims, \"\", fmt.Errorf(\"No audience found in the token\")",
          "501:   return claims, \"\", err",
          "",
          "[Added Lines]",
          "497:    if strings.HasPrefix(err.Error(), \"oidc: token is expired\") {",
          "498:     claims = jwt.RegisteredClaims{",
          "499:      Issuer: \"sso\",",
          "500:     }",
          "501:     return claims, \"\", err",
          "502:    }",
          "503:    return nil, \"\", err",
          "507:    return nil, \"\", fmt.Errorf(\"no audience found in the token\")",
          "512:   if err != nil {",
          "513:    return nil, \"\", err",
          "514:   }",
          "515:   return claims, \"\", nil",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05e9079233e8ae643610e9223c966430e3dbae78",
      "candidate_info": {
        "commit_hash": "05e9079233e8ae643610e9223c966430e3dbae78",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/05e9079233e8ae643610e9223c966430e3dbae78",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "048c025cfe0419c2c7eccd123216be492f4f808f",
      "candidate_info": {
        "commit_hash": "048c025cfe0419c2c7eccd123216be492f4f808f",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/048c025cfe0419c2c7eccd123216be492f4f808f",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fd50ce8bda82028fd93c9de21eccf72607657cf",
      "candidate_info": {
        "commit_hash": "4fd50ce8bda82028fd93c9de21eccf72607657cf",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/4fd50ce8bda82028fd93c9de21eccf72607657cf",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "937f42ffa453a06b897f6cb6aa94c15c12c6470b",
      "candidate_info": {
        "commit_hash": "937f42ffa453a06b897f6cb6aa94c15c12c6470b",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/937f42ffa453a06b897f6cb6aa94c15c12c6470b",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}