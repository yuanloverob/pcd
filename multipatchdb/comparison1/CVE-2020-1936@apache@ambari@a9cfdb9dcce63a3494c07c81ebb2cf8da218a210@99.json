{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "881c82a30d9f2212d0736271e061fd5dd5c2cf0b",
      "candidate_info": {
        "commit_hash": "881c82a30d9f2212d0736271e061fd5dd5c2cf0b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/881c82a30d9f2212d0736271e061fd5dd5c2cf0b",
        "files": [
          "ambari-server/src/main/python/ambari_server/serverUtils.py",
          "ambari-server/src/test/python/TestServerUtils.py"
        ],
        "message": "[AMBARI-24207] Python unit test failure on 2.7.6\n\n* [AMBARI-24207] Python unit test failure on 2.7.6\n\n* [AMBARI-24207] Python unit test failure on 2.7.6",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari_server/serverUtils.py||ambari-server/src/main/python/ambari_server/serverUtils.py",
          "ambari-server/src/test/python/TestServerUtils.py||ambari-server/src/test/python/TestServerUtils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari_server/serverUtils.py||ambari-server/src/main/python/ambari_server/serverUtils.py": [
          "File: ambari-server/src/main/python/ambari_server/serverUtils.py -> ambari-server/src/main/python/ambari_server/serverUtils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:   :return: a permissive SSLContext or None",
          "246:   \"\"\"",
          "249:     return None",
          "251:   if requested_protocol:",
          "",
          "[Removed Lines]",
          "248:   if not is_api_ssl_enabled(properties):",
          "",
          "[Added Lines]",
          "248:   if not is_api_ssl_enabled(properties) or not hasattr(ssl, 'SSLContext'):",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestServerUtils.py||ambari-server/src/test/python/TestServerUtils.py": [
          "File: ambari-server/src/test/python/TestServerUtils.py -> ambari-server/src/test/python/TestServerUtils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:       SSL_API: \"true\"",
          "123:     })",
          "124:     context = get_ssl_context(properties)",
          "127:     context = get_ssl_context(properties, ssl.PROTOCOL_TLSv1)",
          "131:     properties = FakeProperties({",
          "132:       SSL_API: \"false\"",
          "",
          "[Removed Lines]",
          "125:     self.assertIsNotNone(context)",
          "128:     self.assertIsNotNone(context)",
          "129:     self.assertEqual(ssl.PROTOCOL_TLSv1, context.protocol)",
          "",
          "[Added Lines]",
          "125:     if hasattr(ssl, 'SSLContext'):",
          "126:       self.assertIsNotNone(context)",
          "127:     else:",
          "128:       self.assertIsNone(context)",
          "131:     if hasattr(ssl, 'SSLContext'):",
          "132:       self.assertIsNotNone(context)",
          "133:       self.assertEqual(ssl.PROTOCOL_TLSv1, context.protocol)",
          "134:     else:",
          "135:       self.assertIsNone(context)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1cf807e70ebaf981433b53841a1a8f0b2850fa9",
      "candidate_info": {
        "commit_hash": "d1cf807e70ebaf981433b53841a1a8f0b2850fa9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d1cf807e70ebaf981433b53841a1a8f0b2850fa9",
        "files": [
          "ambari-server/src/main/resources/stacks/stack_advisor.py"
        ],
        "message": "AMBARI-25294. Druid requires HDFS_CLIENT to be co-hosted, doesn't recognize ONEFS_CLIENT (amagyar) (#3079)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/stacks/stack_advisor.py||ambari-server/src/main/resources/stacks/stack_advisor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/stacks/stack_advisor.py||ambari-server/src/main/resources/stacks/stack_advisor.py": [
          "File: ambari-server/src/main/resources/stacks/stack_advisor.py -> ambari-server/src/main/resources/stacks/stack_advisor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1849:     component = next((component for component in componentsList",
          "1850:                               if component[\"component_name\"] == componentName), None)",
          "1852:     return component",
          "1854:   def getComponentAttribute(self, component, attribute):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1852:     if component is None and componentName == 'HDFS_CLIENT':",
          "1853:       component = next((component for component in componentsList if component[\"component_type\"] == 'HCFS_CLIENT'), None)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cda42fcd68d45f1a2eb8c52a18a00d95f359f3b3",
      "candidate_info": {
        "commit_hash": "cda42fcd68d45f1a2eb8c52a18a00d95f359f3b3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cda42fcd68d45f1a2eb8c52a18a00d95f359f3b3",
        "files": [
          "src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py"
        ],
        "message": "[AMBARI-24428] - Remove Accidental Check-in of HDP Stack File (#1998)",
        "before_after_code_files": [
          "src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py||src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py||src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py": [
          "File: src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py -> src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e1a5384dead5c7e54276bed90a34376b6571144",
      "candidate_info": {
        "commit_hash": "9e1a5384dead5c7e54276bed90a34376b6571144",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9e1a5384dead5c7e54276bed90a34376b6571144",
        "files": [
          "ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java",
          "ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java"
        ],
        "message": "[AMBARI-25400] Issue while determining live collector in case of HA (#3108)\n\n [AMBARI-25400] Issue while determining live collector in case of HA (eberhardtp via dgrinenko)\n\n- AbstrackTimelineMetricsSinks live nodes request can now handle other responsecodes than 200\n- Live collector receives response code 500 test added to AbstrackTimelineMetricsSinksTest",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java||ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java",
          "ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java||ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java||ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java": [
          "File: ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java -> ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:       connection.setReadTimeout(2000);",
          "628:       int responseCode = connection.getResponseCode();",
          "639:           }",
          "641:       }",
          "643:     } catch (IOException ioe) {",
          "",
          "[Removed Lines]",
          "629:       if (responseCode == 200) {",
          "630:         try (InputStream in = connection.getInputStream()) {",
          "631:           StringWriter writer = new StringWriter();",
          "632:           IOUtils.copy(in, writer);",
          "633:           try {",
          "634:             collectors = gson.fromJson(writer.toString(), new TypeToken<List<String>>(){}.getType());",
          "635:           } catch (JsonSyntaxException jse) {",
          "637:             LOG.debug(\"Exception deserializing the json data on live \" +",
          "638:               \"collector nodes.\", jse);",
          "640:         }",
          "",
          "[Added Lines]",
          "630:       switch (responseCode) {",
          "631:         case 200 :",
          "632:           try (InputStream in = connection.getInputStream()) {",
          "633:             StringWriter writer = new StringWriter();",
          "634:             IOUtils.copy(in, writer);",
          "635:             try {",
          "636:               collectors = gson.fromJson(writer.toString(), new TypeToken<List<String>>(){}.getType());",
          "637:             } catch (JsonSyntaxException jse) {",
          "639:               LOG.debug(\"Exception deserializing the json data on live \" +",
          "640:                       \"collector nodes.\", jse);",
          "641:             }",
          "643:           break;",
          "644:         case 500 :",
          "645:           String warnMsg = \"Unable to connect to collector to find live nodes, Internal server error\";",
          "646:           throw new MetricCollectorUnavailableException(warnMsg);",
          "647:         default :",
          "648:           String msg = String.format(\"Unhandled response code (%d) at requesting live collector nodes!\", responseCode);",
          "649:           LOG.warn(msg);",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java||ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java": [
          "File: ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java -> ambari-metrics/ambari-metrics-common/src/test/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricSinkTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.hadoop.metrics2.sink.timeline;",
          "20: import junit.framework.Assert;",
          "21: import org.junit.Test;",
          "22: import org.junit.runner.RunWith;",
          "23: import org.powermock.api.easymock.PowerMock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.hadoop.metrics2.sink.timeline.availability.MetricCollectorUnavailableException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import static org.easymock.EasyMock.expect;",
          "36: import static org.powermock.api.easymock.PowerMock.expectNew;",
          "37: import static org.powermock.api.easymock.PowerMock.replayAll;",
          "39: @RunWith(PowerMockRunner.class)",
          "40: @PrepareForTest({AbstractTimelineMetricsSink.class, HttpURLConnection.class})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import static org.powermock.api.easymock.PowerMock.verifyAll;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     Assert.assertEquals(0, sink.getMetricsPostCache().size());",
          "187:   }",
          "189:   private class TestTimelineMetricsSink extends AbstractTimelineMetricsSink {",
          "190:     @Override",
          "191:     protected String getCollectorUri(String host) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:   }",
          "191:   @Test(expected = MetricCollectorUnavailableException.class)",
          "192:   @PrepareForTest({URL.class, AbstractTimelineMetricsSink.class, HttpURLConnection.class, TimelineMetric.class})",
          "193:   public void testFindLiveCollectorHostsFromKnownCollector() throws Exception {",
          "194:     HttpURLConnection connection = PowerMock.createNiceMock(HttpURLConnection.class);",
          "195:     URL url = PowerMock.createNiceMock(URL.class);",
          "196:     expectNew(URL.class, anyString()).andReturn(url).anyTimes();",
          "197:     expect(url.openConnection()).andReturn(connection).anyTimes();",
          "198:     expect(connection.getResponseCode()).andReturn(500).anyTimes();",
          "199:     replayAll();",
          "201:     TestTimelineMetricsSink sink = new TestTimelineMetricsSink();",
          "202:     sink.findLiveCollectorHostsFromKnownCollector(\"host\", \"1234\");",
          "204:     verifyAll();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76228985f73d3f73f7edb807ff7c1112cde323f5",
      "candidate_info": {
        "commit_hash": "76228985f73d3f73f7edb807ff7c1112cde323f5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/76228985f73d3f73f7edb807ff7c1112cde323f5",
        "files": [
          "ambari-common/src/main/python/ambari_commons/credential_store_helper.py"
        ],
        "message": "Revert \"[AMBARI-24264] Suppress log messages from the credential_store_helper\"\n\nThis reverts commit 9e2eb9c99d7e84dc175f4a30e212686caf4e1213.",
        "before_after_code_files": [
          "ambari-common/src/main/python/ambari_commons/credential_store_helper.py||ambari-common/src/main/python/ambari_commons/credential_store_helper.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/ambari_commons/credential_store_helper.py||ambari-common/src/main/python/ambari_commons/credential_store_helper.py": [
          "File: ambari-common/src/main/python/ambari_commons/credential_store_helper.py -> ambari-common/src/main/python/ambari_commons/credential_store_helper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     # Execute a get command on the CredentialUtil CLI to get the password for the specified alias",
          "51:     java_bin = '{java_home}/bin/java'.format(java_home=java_home)",
          "52:     cmd = (java_bin, '-cp', cs_lib_path, credential_util_cmd, 'get', alias, '-provider', provider_path)",
          "54:     std_out_lines = std_out_msg.split('\\n')",
          "55:     return(std_out_lines[-1]) # Get the last line of the output, to skip warnings if any.",
          "",
          "[Removed Lines]",
          "53:     cmd_result, std_out_msg  = checked_call(cmd, quite=True)",
          "",
          "[Added Lines]",
          "53:     cmd_result, std_out_msg  = checked_call(cmd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     # Execute a get command on the CredentialUtil CLI to list all the aliases",
          "62:     java_bin = '{java_home}/bin/java'.format(java_home=java_home)",
          "63:     cmd = (java_bin, '-cp', cs_lib_path, credential_util_cmd, 'list', '-provider', provider_path)",
          "65:     std_out_lines = std_out_msg.split('\\n')",
          "66:     return(removeloglines(std_out_lines)[1:]) # Get the last line of the output, to skip warnings if any.",
          "",
          "[Removed Lines]",
          "64:     cmd_result, std_out_msg  = checked_call(cmd, quite=True)",
          "",
          "[Added Lines]",
          "64:     cmd_result, std_out_msg  = checked_call(cmd)",
          "",
          "---------------"
        ]
      }
    }
  ]
}