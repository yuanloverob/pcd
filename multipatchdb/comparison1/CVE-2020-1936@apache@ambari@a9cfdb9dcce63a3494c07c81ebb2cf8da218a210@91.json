{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83c8063e593f0a67ac247c6d3e03876c4a8adb18",
      "candidate_info": {
        "commit_hash": "83c8063e593f0a67ac247c6d3e03876c4a8adb18",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/83c8063e593f0a67ac247c6d3e03876c4a8adb18",
        "files": [
          "ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/pom.xml",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties",
          "ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/pom.xml",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java",
          "ambari-logsearch/docker/docker-compose.yml",
          "ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties",
          "ambari-logsearch/docker/test-config/logfeeder/shipper-conf/input.config-logsearch-docker.json",
          "ambari-logsearch/pom.xml"
        ],
        "message": "AMBARI-24183. Log Feeder: read and ship docker container logs.(#1799)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java||ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java",
          "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties",
          "ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java||ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java",
          "ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties||ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java||ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java": [
          "File: ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java -> ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/inputconfig/InputFileDescriptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   Integer getPathUpdateIntervalMin();",
          "29:   Integer getMaxAgeMin();",
          "30: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:   Boolean getDockerEnabled();",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   @SerializedName(\"max_age_min\")",
          "71:   private Integer maxAgeMin;",
          "73:   @Override",
          "74:   public Integer getDetachIntervalMin() {",
          "75:     return this.detachIntervalMin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   @ShipperConfigElementDescription(",
          "74:     path = \"/input/[]/docker\",",
          "75:     type = \"boolean\",",
          "76:     description = \"Input comes from a docker container.\",",
          "77:     examples = {\"true\", \"false\"},",
          "78:     defaultValue = \"false\"",
          "79:   )",
          "80:   @Expose",
          "81:   @SerializedName(\"docker\")",
          "82:   private Boolean dockerEnabled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     return this.maxAgeMin;",
          "91:   }",
          "93:   public void setDetachIntervalMin(Integer detachIntervalMin) {",
          "94:     this.detachIntervalMin = detachIntervalMin;",
          "95:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:   @Override",
          "105:   public Boolean getDockerEnabled() {",
          "106:     return dockerEnabled;",
          "107:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   public void setMaxAgeMin(Integer maxAgeMin) {",
          "106:     this.maxAgeMin = maxAgeMin;",
          "107:   }",
          "108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   public void setDockerEnabled(Boolean dockerEnabled) {",
          "126:     this.dockerEnabled = dockerEnabled;",
          "127:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder;",
          "24: public interface ContainerMetadata {",
          "30:   String getId();",
          "36:   String getName();",
          "42:   String getHostName();",
          "48:   String getLogTypeLabel();",
          "54:   String getLogPath();",
          "56: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/ContainerRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder;",
          "21: import java.util.Map;",
          "27: public interface ContainerRegistry<METADATA_TYPE extends ContainerMetadata> {",
          "32:   void register();",
          "38:   Map<String, Map<String, METADATA_TYPE>> getContainerMetadataMap();",
          "40: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker;",
          "21: import org.apache.ambari.logfeeder.ContainerRegistry;",
          "22: import org.apache.ambari.logfeeder.docker.command.DockerInspectContainerCommand;",
          "23: import org.apache.ambari.logfeeder.docker.command.DockerListContainerCommand;",
          "24: import org.apache.commons.lang.StringUtils;",
          "25: import org.slf4j.Logger;",
          "26: import org.slf4j.LoggerFactory;",
          "28: import java.time.LocalDateTime;",
          "29: import java.time.ZoneOffset;",
          "30: import java.time.format.DateTimeFormatter;",
          "31: import java.util.HashMap;",
          "32: import java.util.List;",
          "33: import java.util.Map;",
          "34: import java.util.Properties;",
          "35: import java.util.concurrent.ConcurrentHashMap;",
          "36: import java.util.stream.Collectors;",
          "41: public final class DockerContainerRegistry implements ContainerRegistry<DockerMetadata> {",
          "43:   private static final String LOGFEEDER_CONTAINER_REGISTRY_DOCKER_INTERVAL = \"logfeeder.container.registry.docker.interval\";",
          "44:   private static final Logger logger = LoggerFactory.getLogger(DockerContainerRegistry.class);",
          "46:   private static DockerContainerRegistry INSTANCE = null;",
          "47:   private final Properties configs;",
          "48:   private Map<String, Map<String, DockerMetadata>> dockerMetadataMap = new ConcurrentHashMap<>();",
          "49:   private int waitIntervalMin = 5;",
          "51:   private DockerContainerRegistry(Properties configs) {",
          "52:     this.configs = configs;",
          "53:     init(configs);",
          "54:   }",
          "56:   @Override",
          "57:   public synchronized void register() {",
          "58:     Map<String, Map<String, DockerMetadata>> actualDockerMetadataMap = renewMetadata();",
          "59:     if (!actualDockerMetadataMap.isEmpty()) {",
          "60:       dockerMetadataMap.putAll(actualDockerMetadataMap);",
          "61:       dockerMetadataMap = dockerMetadataMap",
          "62:         .entrySet()",
          "63:         .stream()",
          "64:         .filter(e -> actualDockerMetadataMap.keySet().contains(e.getKey()))",
          "65:         .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));",
          "67:       for (Map.Entry<String, Map<String, DockerMetadata>> entry : dockerMetadataMap.entrySet()) {",
          "68:         for (Map.Entry<String, DockerMetadata> metadataEntry : entry.getValue().entrySet()) {",
          "69:           logger.debug(\"Found container metadata: {}\", entry.getValue().toString());",
          "70:         }",
          "71:       }",
          "72:     }",
          "73:   }",
          "75:   private Map<String, Map<String, DockerMetadata>> renewMetadata() {",
          "76:     final Map<String, Map<String, DockerMetadata>> actualDockerMetadataMap = new HashMap<>();",
          "77:     final List<String> containerIds = new DockerListContainerCommand().execute(null);",
          "78:     final Map<String, String> params = new HashMap<>();",
          "80:     params.put(\"containerIds\", StringUtils.join(containerIds, \",\"));",
          "81:     List<Map<String, Object>> containerDataList = new DockerInspectContainerCommand().execute(params);",
          "83:     for (Map<String, Object> containerDataMap : containerDataList) {",
          "84:       String id = containerDataMap.get(\"Id\").toString();",
          "85:       String name = containerDataMap.get(\"Name\").toString();",
          "86:       String logPath = containerDataMap.get(\"LogPath\").toString();",
          "87:       Map<String, Object> dockerConfigMap = (HashMap<String, Object>) containerDataMap.get(\"Config\");",
          "88:       String hostname = dockerConfigMap.get(\"Hostname\").toString();",
          "89:       Map<String, String> labels = (Map<String, String>) dockerConfigMap.get(\"Labels\");",
          "90:       Map<String, Object> stateMap = (HashMap<String, Object>) containerDataMap.get(\"State\");",
          "91:       String componentType = labels.get(\"logfeeder.log.type\");",
          "92:       boolean running = (Boolean) stateMap.get(\"Running\");",
          "93:       long timestamp = running ? convertDateStrToLong((String)stateMap.get(\"StartedAt\")) : convertDateStrToLong((String)stateMap.get(\"FinishedAt\"));",
          "95:       if (componentType != null) {",
          "96:         if (actualDockerMetadataMap.containsKey(componentType)) {",
          "97:           Map<String, DockerMetadata> componentMetadataMap = actualDockerMetadataMap.get(componentType);",
          "98:           componentMetadataMap.put(id, new DockerMetadata(id, name, hostname, componentType, logPath, running, timestamp));",
          "99:           actualDockerMetadataMap.put(componentType, componentMetadataMap);",
          "100:         } else {",
          "101:           Map<String, DockerMetadata> componentMetadataMap = new HashMap<>();",
          "102:           componentMetadataMap.put(id, new DockerMetadata(id, name, hostname, componentType, logPath, running, timestamp));",
          "103:           actualDockerMetadataMap.put(componentType, componentMetadataMap);",
          "104:         }",
          "105:       } else {",
          "106:         logger.debug(\"Ignoring docker metadata from registry as container (id: {}, name: {}) as it has no 'logfeeder.log.type' label\", id, name);",
          "107:       }",
          "108:     }",
          "110:     return actualDockerMetadataMap;",
          "111:   }",
          "113:   @Override",
          "114:   public synchronized Map<String, Map<String, DockerMetadata>> getContainerMetadataMap() {",
          "115:     return dockerMetadataMap;",
          "116:   }",
          "118:   public void init(Properties configs) {",
          "120:     String waitStr = configs.getProperty(LOGFEEDER_CONTAINER_REGISTRY_DOCKER_INTERVAL, \"5\");",
          "121:     setWaitIntervalMin(Integer.parseInt(waitStr));",
          "123:   }",
          "125:   public static synchronized DockerContainerRegistry getInstance(Properties dockerConfig) {",
          "126:     if (INSTANCE == null) {",
          "127:       return new DockerContainerRegistry(dockerConfig);",
          "128:     } else {",
          "129:       return INSTANCE;",
          "130:     }",
          "131:   }",
          "133:   public int getWaitIntervalMin() {",
          "134:     return waitIntervalMin;",
          "135:   }",
          "137:   public void setWaitIntervalMin(int waitIntervalMin) {",
          "138:     this.waitIntervalMin = waitIntervalMin;",
          "139:   }",
          "141:   private long convertDateStrToLong(String timestampStr) {",
          "142:     LocalDateTime localDateTime = LocalDateTime.parse(timestampStr, DateTimeFormatter.ISO_DATE_TIME);",
          "143:     return localDateTime.toInstant(ZoneOffset.ofTotalSeconds(0)).toEpochMilli();",
          "144:   }",
          "145: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerContainerRegistryMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker;",
          "21: import org.slf4j.Logger;",
          "22: import org.slf4j.LoggerFactory;",
          "28: public class DockerContainerRegistryMonitor implements Runnable {",
          "30:   private static final Logger logger = LoggerFactory.getLogger(DockerContainerRegistryMonitor.class);",
          "32:   private final DockerContainerRegistry registry;",
          "34:   public DockerContainerRegistryMonitor(DockerContainerRegistry registry) {",
          "35:     this.registry = registry;",
          "36:   }",
          "38:   @Override",
          "39:   public void run() {",
          "40:     while (!Thread.currentThread().isInterrupted()) {",
          "41:       try {",
          "42:         logger.debug(\"Gather docker containers metadata ...\");",
          "43:         registry.register();",
          "44:         Thread.sleep(1000 * registry.getWaitIntervalMin());",
          "45:       } catch (Exception e) {",
          "46:         logger.error(\"Error during gather docker containers metadata.\", e);",
          "47:       }",
          "48:     }",
          "49:   }",
          "50: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/DockerMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker;",
          "21: import org.apache.ambari.logfeeder.ContainerMetadata;",
          "23: public class DockerMetadata implements ContainerMetadata {",
          "25:   private final String id;",
          "26:   private final String name;",
          "27:   private final String logTypeLabel;",
          "28:   private final String logPath;",
          "29:   private final String hostName;",
          "30:   private final boolean running;",
          "31:   private final long timestamp;",
          "33:   public DockerMetadata(String id, String name, String hostName, String logTypeLabel, String logPath, boolean running, long timestamp) {",
          "34:     this.id = id;",
          "35:     this.name = name;",
          "36:     this.hostName = hostName;",
          "37:     this.logTypeLabel = logTypeLabel;",
          "38:     this.logPath = logPath;",
          "39:     this.running = running;",
          "40:     this.timestamp = timestamp;",
          "41:   }",
          "43:   public String getId() {",
          "44:     return id;",
          "45:   }",
          "47:   public String getName() {",
          "48:     return name;",
          "49:   }",
          "51:   public String getHostName() {",
          "52:     return hostName;",
          "53:   }",
          "55:   public String getLogTypeLabel() {",
          "56:     return logTypeLabel;",
          "57:   }",
          "59:   public String getLogPath() {",
          "60:     return logPath;",
          "61:   }",
          "63:   public boolean isRunning() {",
          "64:     return running;",
          "65:   }",
          "67:   public long getTimestamp() {",
          "68:     return timestamp;",
          "69:   }",
          "71:   @Override",
          "72:   public String toString() {",
          "73:     return \"DockerMetadata{\" +",
          "74:       \"id='\" + id + '\\'' +",
          "75:       \", name='\" + name + '\\'' +",
          "76:       \", logTypeLabel='\" + logTypeLabel + '\\'' +",
          "77:       \", logPath='\" + logPath + '\\'' +",
          "78:       \", hostName='\" + hostName + '\\'' +",
          "79:       '}';",
          "80:   }",
          "81: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandExecutionHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker.command;",
          "21: import java.io.BufferedReader;",
          "22: import java.io.InputStreamReader;",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "27: public class CommandExecutionHelper {",
          "29:   public static CommandResponse executeCommand(List<String> commands, Map<String, String> envMap) throws Exception {",
          "30:     ProcessBuilder processBuilder = new ProcessBuilder(commands);",
          "31:     Map<String, String> env = processBuilder.environment();",
          "32:     if (envMap != null) {",
          "33:       env.putAll(envMap);",
          "34:     }",
          "35:     Process shell = processBuilder.start();",
          "37:     BufferedReader stdInput = new BufferedReader(new InputStreamReader(shell.getInputStream()));",
          "38:     BufferedReader stdError = new BufferedReader(new InputStreamReader(shell.getErrorStream()));",
          "39:     List<String> stdOutLines = new ArrayList<>();",
          "40:     StringBuilder errOut = new StringBuilder();",
          "41:     String s = null;",
          "42:     while ((s = stdInput.readLine()) != null) {",
          "43:       stdOutLines.add(s);",
          "44:     }",
          "45:     while ((s = stdError.readLine()) != null) {",
          "46:       errOut.append(s);",
          "47:     }",
          "48:     int exitCode = shell.waitFor();",
          "50:     return new CommandResponse(exitCode, stdOutLines, errOut.toString());",
          "51:   }",
          "52: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/CommandResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker.command;",
          "21: import java.util.List;",
          "26: public class CommandResponse {",
          "27:   private final int exitCode;",
          "28:   private final List<String> stdOut;",
          "29:   private final String stdErr;",
          "31:   CommandResponse(int exitCode, List<String> stdOut, String stdErr) {",
          "32:     this.exitCode = exitCode;",
          "33:     this.stdOut = stdOut;",
          "34:     this.stdErr = stdErr;",
          "35:   }",
          "37:   public int getExitCode() {",
          "38:     return exitCode;",
          "39:   }",
          "41:   public List<String> getStdOut() {",
          "42:     return stdOut;",
          "43:   }",
          "45:   public String getStdErr() {",
          "46:     return stdErr;",
          "47:   }",
          "48: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/ContainerCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker.command;",
          "21: import java.util.Map;",
          "27: public interface ContainerCommand<RESPONSE_TYPE> {",
          "34:   RESPONSE_TYPE execute(Map<String, String> params);",
          "35: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerInspectContainerCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker.command;",
          "21: import com.fasterxml.jackson.databind.ObjectMapper;",
          "22: import org.apache.commons.lang.StringUtils;",
          "23: import org.slf4j.Logger;",
          "24: import org.slf4j.LoggerFactory;",
          "26: import java.util.ArrayList;",
          "27: import java.util.Arrays;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "34: public class DockerInspectContainerCommand implements ContainerCommand<List<Map<String, Object>>> {",
          "36:   private static final Logger logger = LoggerFactory.getLogger(DockerInspectContainerCommand.class);",
          "38:   @Override",
          "39:   public List<Map<String, Object>> execute(Map<String, String> params) {",
          "40:     List<String> containerIds = Arrays.asList(params.get(\"containerIds\").split(\",\"));",
          "41:     CommandResponse commandResponse = null;",
          "42:     List<Map<String, Object>> listResponse = new ArrayList<>();",
          "43:     List<String> commandList = new ArrayList<>();",
          "44:     commandList.add(\"/usr/local/bin/docker\");",
          "45:     commandList.add(\"inspect\");",
          "46:     commandList.addAll(containerIds);",
          "47:     try {",
          "48:       commandResponse = CommandExecutionHelper.executeCommand(commandList, null);",
          "49:       if (commandResponse.getExitCode() != 0) {",
          "50:         logger.error(\"Error during inspect containers request: {} (exit code: {})\", commandResponse.getStdErr(), commandResponse.getExitCode());",
          "51:       } else {",
          "52:         String jsonResponse = StringUtils.join(commandResponse.getStdOut(), \"\");",
          "53:         ObjectMapper mapper = new ObjectMapper();",
          "54:         listResponse = mapper.readValue(jsonResponse, List.class);",
          "55:       }",
          "56:     } catch (Exception e) {",
          "57:       logger.error(\"Error during inspect containers request\", e);",
          "58:     }",
          "59:     return listResponse;",
          "60:   }",
          "61: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/java/org/apache/ambari/logfeeder/docker/command/DockerListContainerCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.docker.command;",
          "21: import org.slf4j.Logger;",
          "22: import org.slf4j.LoggerFactory;",
          "24: import java.util.ArrayList;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31: public class DockerListContainerCommand implements ContainerCommand<List<String>> {",
          "33:   private static final Logger logger = LoggerFactory.getLogger(DockerListContainerCommand.class);",
          "35:   @Override",
          "36:   public List<String> execute(Map<String, String> params) {",
          "37:     CommandResponse commandResponse = null;",
          "38:     List<String> commandList = new ArrayList<>();",
          "39:     commandList.add(\"/usr/local/bin/docker\");",
          "40:     commandList.add(\"ps\");",
          "41:     commandList.add(\"-a\");",
          "42:     commandList.add(\"-q\");",
          "44:     try {",
          "45:       commandResponse = CommandExecutionHelper.executeCommand(commandList, null);",
          "46:       if (commandResponse.getExitCode() != 0) {",
          "47:         logger.error(\"Error during inspect containers request: {} (exit code: {})\", commandResponse.getStdErr(), commandResponse.getExitCode());",
          "48:       }",
          "49:     } catch (Exception e) {",
          "50:       logger.error(\"Error during inspect containers request\", e);",
          "51:     }",
          "52:     return commandResponse != null ? commandResponse.getStdOut() : null;",
          "53:   }",
          "54: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties||ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties -> ambari-logsearch/ambari-logsearch-logfeeder-container-registry/src/main/resources/log4j.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one or more",
          "2: # contributor license agreements.  See the NOTICE file distributed with",
          "3: # this work for additional information regarding copyright ownership.",
          "4: # The ASF licenses this file to You under the Apache License, Version 2.0",
          "5: # (the \"License\"); you may not use this file except in compliance with",
          "6: # the License.  You may obtain a copy of the License at",
          "7: #",
          "8: #     http://www.apache.org/licenses/LICENSE-2.0",
          "9: #",
          "10: # Unless required by applicable law or agreed to in writing, software",
          "11: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License.",
          "15: log4j.rootLogger=DEBUG, stdout",
          "16: log4j.appender.stdout=org.apache.log4j.ConsoleAppender",
          "17: log4j.appender.stdout.Target=System.out",
          "18: log4j.appender.stdout.layout=org.apache.log4j.PatternLayout",
          "19: log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd'T'HH:mm:ss.SSS} %-5p [%t] - %m%n",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java||ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java -> ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/input/Input.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   private Filter<PROP_TYPE> firstFilter;",
          "52:   private boolean isClosed;",
          "53:   private String type;",
          "54:   private boolean useEventMD5 = false;",
          "55:   private boolean genEventMD5 = true;",
          "56:   private Thread thread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   private String logType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:     this.type = type;",
          "239:   }",
          "241:   public boolean isUseEventMD5() {",
          "242:     return useEventMD5;",
          "243:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   public String getLogType() {",
          "243:     return logType;",
          "244:   }",
          "246:   public void setLogType(String logType) {",
          "247:     this.logType = logType;",
          "248:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:         continue;",
          "298:       }",
          "299:       input.setType(source);",
          "300:       input.loadConfig(inputDescriptor);",
          "302:       if (input.isEnabled()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:       input.setLogType(inputDescriptor.getType());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   public static final String CHECKPOINT_EXTENSION_PROPERTY = \"logfeeder.checkpoint.extension\";",
          "90:   public static final String DEFAULT_CHECKPOINT_EXTENSION = \".cp\";",
          "92: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   public static final String DOCKER_CONTAINER_REGISTRY_ENABLED_PROPERTY = \"logfeeder.docker.registry.enabled\";",
          "93:   public static final boolean DOCKER_CONTAINER_REGISTRY_ENABLED_DEFAULT = false;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logfeeder.conf;",
          "21: import com.google.common.collect.Maps;",
          "22: import org.apache.ambari.logfeeder.common.LogFeederConstants;",
          "23: import org.apache.ambari.logfeeder.input.InputConfigUploader;",
          "24: import org.apache.ambari.logfeeder.input.InputManagerImpl;",
          "25: import org.apache.ambari.logfeeder.loglevelfilter.LogLevelFilterHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import org.apache.ambari.logfeeder.ContainerRegistry;",
          "23: import org.apache.ambari.logfeeder.docker.DockerContainerRegistry;",
          "25: import org.apache.ambari.logfeeder.docker.DockerContainerRegistryMonitor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;",
          "41: import javax.inject.Inject;",
          "43: @Configuration",
          "44: @PropertySource(value = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import java.util.Properties;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   @Bean",
          "102:   public InputManager inputManager() {",
          "103:     return new InputManagerImpl();",
          "104:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   @DependsOn(\"containerRegistry\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:   public OutputManager outputManager() {",
          "108:     return new OutputManagerImpl();",
          "109:   }",
          "110: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   @Bean",
          "117:   public DockerContainerRegistry containerRegistry() {",
          "118:     if (logFeederProps.isDockerContainerRegistryEnabled()) {",
          "119:       return DockerContainerRegistry.getInstance(logFeederProps.getProperties());",
          "120:     } else {",
          "121:       return null;",
          "122:     }",
          "123:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   @Value(\"${\" + LogFeederConstants.CHECKPOINT_FOLDER_PROPERTY + \":/usr/lib/ambari-logsearch-logfeeder/conf/checkpoints}\")",
          "131:   public String checkpointFolder;",
          "133:   @Inject",
          "134:   private LogEntryCacheConfig logEntryCacheConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:   @LogSearchPropertyDescription(",
          "134:     name = LogFeederConstants.DOCKER_CONTAINER_REGISTRY_ENABLED_PROPERTY,",
          "135:     description = \"\",",
          "136:     examples = {\"true\"},",
          "137:     defaultValue = LogFeederConstants.DOCKER_CONTAINER_REGISTRY_ENABLED_DEFAULT + \"\",",
          "138:     sources = {LogFeederConstants.LOGFEEDER_PROPERTIES_FILE}",
          "139:   )",
          "140:   @Value(\"${\" + LogFeederConstants.DOCKER_CONTAINER_REGISTRY_ENABLED_PROPERTY + \":false}\")",
          "141:   public boolean dockerContainerRegistryEnabled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     this.solrImplicitRouting = solrImplicitRouting;",
          "228:   }",
          "230:   @PostConstruct",
          "231:   public void init() {",
          "232:     properties = new Properties();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:   public boolean isDockerContainerRegistryEnabled() {",
          "241:     return dockerContainerRegistryEnabled;",
          "242:   }",
          "244:   public void setDockerContainerRegistryEnabled(boolean dockerContainerRegistryEnabled) {",
          "245:     this.dockerContainerRegistryEnabled = dockerContainerRegistryEnabled;",
          "246:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/DockerLogFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.filter;",
          "21: import org.apache.ambari.logfeeder.util.LogFeederUtil;",
          "23: import java.util.Map;",
          "25: public class DockerLogFilter {",
          "27:   private DockerLogFilter() {",
          "28:   }",
          "30:   public static String getLogFromDockerJson(String jsonInput) {",
          "31:     Map<String, Object> jsonMap = LogFeederUtil.toJSONObject(jsonInput);",
          "32:     return jsonMap.get(\"log\").toString();",
          "33:   }",
          "34: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import oi.thekraken.grok.api.Grok;",
          "24: import oi.thekraken.grok.api.exception.GrokException;",
          "25: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "26: import org.apache.ambari.logfeeder.plugin.common.MetricData;",
          "27: import org.apache.ambari.logfeeder.plugin.filter.Filter;",
          "28: import org.apache.ambari.logfeeder.plugin.input.InputMarker;",
          "29: import org.apache.ambari.logfeeder.util.LogFeederUtil;",
          "30: import org.apache.ambari.logsearch.config.api.model.inputconfig.FilterGrokDescriptor;",
          "31: import org.apache.commons.lang3.BooleanUtils;",
          "32: import org.apache.commons.lang3.StringUtils;",
          "33: import org.apache.log4j.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.apache.ambari.logfeeder.input.InputFile;",
          "29: import org.apache.ambari.logfeeder.plugin.input.Input;",
          "33: import org.apache.ambari.logsearch.config.api.model.inputconfig.InputFileDescriptor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:   private boolean skipOnError = false;",
          "76:   @Override",
          "77:   public void init(LogFeederProps logFeederProps) throws Exception {",
          "78:     super.init(logFeederProps);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   private boolean dockerEnabled = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:       sourceField = getFilterDescriptor().getSourceField();",
          "84:       removeSourceField = BooleanUtils.toBooleanDefaultIfNull(getFilterDescriptor().isRemoveSourceField(), removeSourceField);",
          "85:       skipOnError = ((FilterGrokDescriptor) getFilterDescriptor()).isSkipOnError();",
          "87:       LOG.info(\"init() done. grokPattern=\" + messagePattern + \", multilinePattern=\" + multilinePattern + \", \" +",
          "88:       getShortDescription());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:       if (logFeederProps.isDockerContainerRegistryEnabled()) {",
          "92:         Input input = getInput();",
          "93:         if (input != null && input instanceof InputFile) {",
          "94:           dockerEnabled = BooleanUtils.toBooleanDefaultIfNull(((InputFileDescriptor) input.getInputDescriptor()).getDockerEnabled(), false);",
          "95:         }",
          "96:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:   @Override",
          "180:   public void apply(String inputStr, InputMarker inputMarker) throws Exception {",
          "181:     if (grokMessage == null) {",
          "182:       return;",
          "183:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     if (dockerEnabled) {",
          "193:       inputStr = DockerLogFilter.getLogFromDockerJson(inputStr);",
          "194:     }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.ambari.logfeeder.conf.LogEntryCacheConfig;",
          "22: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "23: import org.apache.ambari.logfeeder.input.monitor.LogFileDetachMonitor;",
          "24: import org.apache.ambari.logfeeder.input.monitor.LogFilePathUpdateMonitor;",
          "25: import org.apache.ambari.logfeeder.input.reader.LogsearchReaderFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.ambari.logfeeder.docker.DockerContainerRegistry;",
          "24: import org.apache.ambari.logfeeder.docker.DockerMetadata;",
          "25: import org.apache.ambari.logfeeder.input.monitor.DockerLogFileUpdateMonitor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.apache.ambari.logfeeder.plugin.filter.Filter;",
          "30: import org.apache.ambari.logfeeder.plugin.input.Input;",
          "31: import org.apache.ambari.logfeeder.util.FileUtil;",
          "33: import org.apache.ambari.logsearch.config.api.model.inputconfig.InputFileBaseDescriptor;",
          "34: import org.apache.ambari.logsearch.config.api.model.inputconfig.InputFileDescriptor;",
          "35: import org.apache.commons.lang.BooleanUtils;",
          "",
          "[Removed Lines]",
          "32: import org.apache.ambari.logfeeder.util.LogFeederUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:   private Thread thread;",
          "82:   private Thread logFileDetacherThread;",
          "83:   private Thread logFilePathUpdaterThread;",
          "84:   private ThreadGroup threadGroup;",
          "86:   private boolean multiFolder = false;",
          "87:   private Map<String, List<File>> folderMap;",
          "88:   private Map<String, InputFile> inputChildMap = new HashMap<>();",
          "90:   @Override",
          "91:   public boolean isReady() {",
          "92:     if (!isReady) {",
          "101:         }",
          "104:       } else {",
          "106:       }",
          "107:     }",
          "108:     return isReady;",
          "",
          "[Removed Lines]",
          "94:       logFiles = getActualInputLogFiles();",
          "95:       Map<String, List<File>> foldersMap = FileUtil.getFoldersForFiles(logFiles);",
          "96:       setFolderMap(foldersMap);",
          "97:       if (!ArrayUtils.isEmpty(logFiles) && logFiles[0].isFile()) {",
          "98:         if (tail && logFiles.length > 1) {",
          "99:           LOG.warn(\"Found multiple files (\" + logFiles.length + \") for the file filter \" + filePath +",
          "100:             \". Will follow only the first one. Using \" + logFiles[0].getAbsolutePath());",
          "102:         LOG.info(\"File filter \" + filePath + \" expanded to \" + logFiles[0].getAbsolutePath());",
          "103:         isReady = true;",
          "105:         LOG.debug(logPath + \" file doesn't exist. Ignoring for now\");",
          "",
          "[Added Lines]",
          "86:   private Thread dockerLogFileUpdateMonitorThread;",
          "90:   private boolean dockerLog = false;",
          "91:   private boolean dockerLogParent = true;",
          "92:   private DockerContainerRegistry dockerContainerRegistry;",
          "99:       if (dockerLog) {",
          "100:         if (dockerContainerRegistry != null) {",
          "101:           Map<String, Map<String, DockerMetadata>> metadataMap = dockerContainerRegistry.getContainerMetadataMap();",
          "102:           String logType = getLogType();",
          "103:           if (metadataMap.containsKey(logType)) {",
          "104:             isReady = true;",
          "105:           }",
          "106:         } else {",
          "107:           LOG.warn(\"Docker registry is not set, probably docker registry usage is not enabled.\");",
          "110:         logFiles = getActualInputLogFiles();",
          "111:         Map<String, List<File>> foldersMap = FileUtil.getFoldersForFiles(logFiles);",
          "112:         setFolderMap(foldersMap);",
          "113:         if (!ArrayUtils.isEmpty(logFiles) && logFiles[0].isFile()) {",
          "114:           if (tail && logFiles.length > 1) {",
          "115:             LOG.warn(\"Found multiple files (\" + logFiles.length + \") for the file filter \" + filePath +",
          "116:               \". Will follow only the first one. Using \" + logFiles[0].getAbsolutePath());",
          "117:           }",
          "118:           LOG.info(\"File filter \" + filePath + \" expanded to \" + logFiles[0].getAbsolutePath());",
          "119:           isReady = true;",
          "120:         } else {",
          "121:           LOG.debug(logPath + \" file doesn't exist. Ignoring for now\");",
          "122:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:   @Override",
          "151:   public boolean monitor() {",
          "152:     if (isReady()) {",
          "154:         try {",
          "155:           threadGroup = new ThreadGroup(getNameForThread());",
          "156:           if (getFolderMap() != null) {",
          "",
          "[Removed Lines]",
          "153:       if (multiFolder) {",
          "",
          "[Added Lines]",
          "170:       if (dockerLog && dockerLogParent) {",
          "171:         Map<String, Map<String, DockerMetadata>> metadataMap = dockerContainerRegistry.getContainerMetadataMap();",
          "172:         String logType = getLogType();",
          "173:         threadGroup = new ThreadGroup(\"docker-parent-\" + logType);",
          "174:         if (metadataMap.containsKey(logType)) {",
          "175:           Map<String, DockerMetadata> dockerMetadataMap = metadataMap.get(logType);",
          "176:           for (Map.Entry<String, DockerMetadata> dockerMetadataEntry : dockerMetadataMap.entrySet()) {",
          "177:             try {",
          "178:               startNewChildDockerInputFileThread(dockerMetadataEntry.getValue());",
          "179:             } catch (Exception e) {",
          "180:               throw new RuntimeException(e);",
          "181:             }",
          "182:           }",
          "183:           dockerLogFileUpdateMonitorThread = new Thread(new DockerLogFileUpdateMonitor((InputFile) this, pathUpdateIntervalMin, detachTimeMin), \"docker_logfiles_updater=\" + logType);",
          "184:           dockerLogFileUpdateMonitorThread.setDaemon(true);",
          "185:           dockerLogFileUpdateMonitorThread.start();",
          "186:         }",
          "187:       }",
          "188:       else if (multiFolder) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:     LOG.info(\"init() called\");",
          "192:     checkPointExtension = logFeederProps.getCheckPointExtension();",
          "197:     checkPointIntervalMS = (int) ObjectUtils.defaultIfNull(((InputFileBaseDescriptor)getInputDescriptor()).getCheckpointIntervalMs(), DEFAULT_CHECKPOINT_INTERVAL_MS);",
          "198:     detachIntervalMin = (int) ObjectUtils.defaultIfNull(((InputFileDescriptor)getInputDescriptor()).getDetachIntervalMin(), DEFAULT_DETACH_INTERVAL_MIN * 60);",
          "199:     detachTimeMin = (int) ObjectUtils.defaultIfNull(((InputFileDescriptor)getInputDescriptor()).getDetachTimeMin(), DEFAULT_DETACH_TIME_MIN * 60);",
          "",
          "[Removed Lines]",
          "195:     setClosed(true);",
          "196:     logPath = getInputDescriptor().getPath();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201:     maxAgeMin = (int) ObjectUtils.defaultIfNull(((InputFileDescriptor)getInputDescriptor()).getMaxAgeMin(), 0);",
          "202:     boolean initDefaultFields = BooleanUtils.toBooleanDefaultIfNull(getInputDescriptor().isInitDefaultFields(), false);",
          "203:     setInitDefaultFields(initDefaultFields);",
          "217:       }",
          "218:     }",
          "222:     LogEntryCacheConfig cacheConfig = logFeederProps.getLogEntryCacheConfig();",
          "223:     initCache(",
          "",
          "[Removed Lines]",
          "204:     if (StringUtils.isEmpty(logPath)) {",
          "205:       LOG.error(\"path is empty for file input. \" + getShortDescription());",
          "206:       return;",
          "207:     }",
          "209:     setFilePath(logPath);",
          "211:     if (getFilePath() != null && getFilePath().contains(\"/\")) {",
          "212:       int lastIndexOfSlash = getFilePath().lastIndexOf(\"/\");",
          "213:       String folderBeforeLogName = getFilePath().substring(0, lastIndexOfSlash);",
          "214:       if (folderBeforeLogName.contains(\"*\")) {",
          "215:         LOG.info(\"Found regex in folder path ('\" + getFilePath() + \"'), will check against multiple folders.\");",
          "216:         setMultiFolder(true);",
          "219:     boolean isFileReady = isReady();",
          "220:     LOG.info(\"File to monitor \" + logPath + \", tail=\" + tail + \", isReady=\" + isFileReady);",
          "",
          "[Added Lines]",
          "238:     setClosed(true);",
          "239:     dockerLog = BooleanUtils.toBooleanDefaultIfNull(((InputFileDescriptor)getInputDescriptor()).getDockerEnabled(), false);",
          "240:     if (dockerLog) {",
          "241:       if (logFeederProps.isDockerContainerRegistryEnabled()) {",
          "242:         boolean isFileReady = isReady();",
          "243:         LOG.info(\"Container type to monitor \" + getType() + \", tail=\" + tail + \", isReady=\" + isFileReady);",
          "244:       } else {",
          "245:         LOG.warn(\"Using docker input, but docker registry usage is not enabled.\");",
          "246:       }",
          "247:     } else {",
          "248:       logPath = getInputDescriptor().getPath();",
          "249:       if (StringUtils.isEmpty(logPath)) {",
          "250:         LOG.error(\"path is empty for file input. \" + getShortDescription());",
          "251:         return;",
          "254:       setFilePath(logPath);",
          "256:       if (getFilePath() != null && getFilePath().contains(\"/\")) {",
          "257:         int lastIndexOfSlash = getFilePath().lastIndexOf(\"/\");",
          "258:         String folderBeforeLogName = getFilePath().substring(0, lastIndexOfSlash);",
          "259:         if (folderBeforeLogName.contains(\"*\")) {",
          "260:           LOG.info(\"Found regex in folder path ('\" + getFilePath() + \"'), will check against multiple folders.\");",
          "261:           setMultiFolder(true);",
          "262:         }",
          "263:       }",
          "264:       boolean isFileReady = isReady();",
          "265:       LOG.info(\"File to monitor \" + logPath + \", tail=\" + tail + \", isReady=\" + isFileReady);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "295:     }",
          "296:   }",
          "298:   public void startNewChildInputFileThread(Map.Entry<String, List<File>> folderFileEntry) throws CloneNotSupportedException {",
          "299:     LOG.info(\"Start child input thread - \" + folderFileEntry.getKey());",
          "300:     InputFile clonedObject = (InputFile) this.clone();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   public void startNewChildDockerInputFileThread(DockerMetadata dockerMetadata) throws CloneNotSupportedException {",
          "345:     LOG.info(\"Start docker child input thread - \" + dockerMetadata.getLogPath());",
          "346:     InputFile clonedObject = (InputFile) this.clone();",
          "347:     clonedObject.setDockerLogParent(false);",
          "348:     clonedObject.logPath = dockerMetadata.getLogPath();",
          "349:     clonedObject.setFilePath(logPath);",
          "350:     clonedObject.logFiles = new File[]{new File(dockerMetadata.getLogPath())};",
          "351:     clonedObject.setInputChildMap(new HashMap<>());",
          "352:     clonedObject.setDockerLogFileUpdateMonitorThread(null);",
          "353:     copyFilters(clonedObject, getFirstFilter());",
          "354:     Thread thread = new Thread(threadGroup, clonedObject, \"file=\" + dockerMetadata.getLogPath());",
          "355:     clonedObject.setThread(thread);",
          "356:     inputChildMap.put(dockerMetadata.getLogPath(), clonedObject);",
          "357:     thread.start();",
          "358:   }",
          "360:   public void stopChildDockerInputFileThread(String logPathKey) {",
          "361:     LOG.info(\"Stop child input thread - \" + logPathKey);",
          "362:     String filePath = new File(logPathKey).getName();",
          "363:     if (inputChildMap.containsKey(logPathKey)) {",
          "364:       InputFile inputFile = inputChildMap.get(logPathKey);",
          "365:       inputFile.setClosed(true);",
          "366:       if (inputFile.getThread() != null && inputFile.getThread().isAlive()) {",
          "367:         inputFile.getThread().interrupt();",
          "368:       }",
          "369:       inputChildMap.remove(logPathKey);",
          "370:     } else {",
          "371:       LOG.warn(logPathKey + \" not found as an input child.\");",
          "372:     }",
          "373:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "506:     this.logFilePathUpdaterThread = logFilePathUpdaterThread;",
          "507:   }",
          "509:   public Integer getMaxAgeMin() {",
          "510:     return maxAgeMin;",
          "511:   }",
          "513: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:   public Thread getDockerLogFileUpdateMonitorThread() {",
          "587:     return dockerLogFileUpdateMonitorThread;",
          "588:   }",
          "590:   public void setDockerLogFileUpdateMonitorThread(Thread dockerLogFileUpdateMonitorThread) {",
          "591:     this.dockerLogFileUpdateMonitorThread = dockerLogFileUpdateMonitorThread;",
          "592:   }",
          "598:   public void setDockerContainerRegistry(DockerContainerRegistry dockerContainerRegistry) {",
          "599:     this.dockerContainerRegistry = dockerContainerRegistry;",
          "600:   }",
          "602:   public DockerContainerRegistry getDockerContainerRegistry() {",
          "603:     return dockerContainerRegistry;",
          "604:   }",
          "606:   public boolean isDockerLog() {",
          "607:     return dockerLog;",
          "608:   }",
          "610:   public boolean isDockerLogParent() {",
          "611:     return dockerLogParent;",
          "612:   }",
          "614:   public void setDockerLogParent(boolean dockerLogParent) {",
          "615:     this.dockerLogParent = dockerLogParent;",
          "616:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputManagerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import com.google.common.annotations.VisibleForTesting;",
          "22: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "23: import org.apache.ambari.logfeeder.input.monitor.CheckpointCleanupMonitor;",
          "24: import org.apache.ambari.logfeeder.plugin.common.MetricData;",
          "25: import org.apache.ambari.logfeeder.plugin.input.Input;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.ambari.logfeeder.docker.DockerContainerRegistry;",
          "24: import org.apache.ambari.logfeeder.docker.DockerContainerRegistryMonitor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   private Thread inputIsReadyMonitor;",
          "67:   @Inject",
          "68:   private LogFeederProps logFeederProps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   @Inject",
          "70:   private DockerContainerRegistry dockerContainerRegistry;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:   public void init() throws Exception {",
          "128:     initCheckPointSettings();",
          "129:     startMonitorThread();",
          "130:   }",
          "132:   private void initCheckPointSettings() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     startDockerMetadataThread();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:     }",
          "163:   }",
          "165:   private void startMonitorThread() {",
          "166:     inputIsReadyMonitor = new Thread(\"InputIsReadyMonitor\") {",
          "167:       @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   private void startDockerMetadataThread() {",
          "172:     if (logFeederProps.isDockerContainerRegistryEnabled()) {",
          "173:       Thread obtaiinDockerMetadataThread = new Thread(new DockerContainerRegistryMonitor(dockerContainerRegistry), \"obtain_docker_metadata\");",
          "174:       obtaiinDockerMetadataThread.start();",
          "175:     }",
          "176:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:   public void startInputs(String serviceName) {",
          "200:     for (Input input : inputs.get(serviceName)) {",
          "201:       try {",
          "202:         input.init(logFeederProps);",
          "203:         if (input.isReady()) {",
          "204:           input.monitor();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:         if (input instanceof InputFile) {// apply docker metadata registry",
          "216:           InputFile inputFile = (InputFile)  input;",
          "217:           inputFile.setDockerContainerRegistry(dockerContainerRegistry);",
          "218:         }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/monitor/DockerLogFileUpdateMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.input.monitor;",
          "21: import org.apache.ambari.logfeeder.docker.DockerContainerRegistry;",
          "22: import org.apache.ambari.logfeeder.docker.DockerMetadata;",
          "23: import org.apache.ambari.logfeeder.input.InputFile;",
          "24: import org.slf4j.Logger;",
          "25: import org.slf4j.LoggerFactory;",
          "27: import java.util.Date;",
          "28: import java.util.HashMap;",
          "29: import java.util.Map;",
          "43: public class DockerLogFileUpdateMonitor extends AbstractLogFileMonitor {",
          "45:   private Logger LOG = LoggerFactory.getLogger(DockerLogFileUpdateMonitor.class);",
          "47:   public DockerLogFileUpdateMonitor(InputFile inputFile, int waitInterval, int detachTime) {",
          "48:     super(inputFile, waitInterval, detachTime);",
          "49:   }",
          "51:   @Override",
          "52:   protected String getStartLog() {",
          "53:     return \"Start docker component type log files monitor thread for \" + getInputFile().getLogType();",
          "54:   }",
          "56:   @Override",
          "57:   protected void monitorAndUpdate() throws Exception {",
          "58:     DockerContainerRegistry dockerContainerRegistry = getInputFile().getDockerContainerRegistry();",
          "59:     Map<String, Map<String, DockerMetadata>> dockerMetadataMapByType = dockerContainerRegistry.getContainerMetadataMap();",
          "60:     String logType = getInputFile().getLogType();",
          "61:     Map<String, InputFile> copiedChildMap = new HashMap<>(getInputFile().getInputChildMap());",
          "63:     if (dockerMetadataMapByType.containsKey(logType)) {",
          "64:       Map<String, DockerMetadata> dockerMetadataMap = dockerMetadataMapByType.get(logType);",
          "65:       for (Map.Entry<String, DockerMetadata> containerEntry : dockerMetadataMap.entrySet()) {",
          "66:         String logPath = containerEntry.getValue().getLogPath();",
          "67:         String containerId = containerEntry.getValue().getId();",
          "68:         long timestamp = containerEntry.getValue().getTimestamp();",
          "69:         boolean running = containerEntry.getValue().isRunning();",
          "70:         LOG.debug(\"Found log path: {} (container id: {})\", logPath, containerId);",
          "71:         if (!copiedChildMap.containsKey(logPath)) {",
          "72:           if (!running && isItTooOld(timestamp, new Date().getTime(), getDetachTime())) {",
          "73:             LOG.debug(\"Container with id {} is stopped, won't monitor as it stopped for long time.\", containerId);",
          "74:           } else {",
          "75:             LOG.info(\"Found new container (id: {}) with new log path: {}\", logPath, containerId);",
          "76:             getInputFile().startNewChildDockerInputFileThread(containerEntry.getValue());",
          "77:           }",
          "78:         } else {",
          "79:           if (!running && isItTooOld(timestamp, new Date().getTime(), getDetachTime())) {",
          "80:             LOG.info(\"Removing: {}\", logPath);",
          "81:             getInputFile().stopChildDockerInputFileThread(containerEntry.getKey());",
          "82:           }",
          "83:         }",
          "84:       }",
          "85:     } else {",
          "86:       if (!copiedChildMap.isEmpty()) {",
          "87:         LOG.info(\"Removing all inputs with type: {}\", logType);",
          "88:         for (Map.Entry<String, InputFile> inputFileEntry : copiedChildMap.entrySet()) {",
          "89:           LOG.info(\"Removing: {}\", inputFileEntry.getKey());",
          "90:           getInputFile().stopChildDockerInputFileThread(inputFileEntry.getKey());",
          "91:         }",
          "92:       }",
          "93:     }",
          "94:   }",
          "96:   private boolean isItTooOld(long timestamp, long actualTimestamp, long maxDiffMinutes) {",
          "97:     long diff = actualTimestamp - timestamp;",
          "98:     long maxDiffMins = maxDiffMinutes * 1000 * 60;",
          "99:     return diff > maxDiffMins;",
          "100:   }",
          "101: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/model/common/LSServerInputFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   @JsonProperty(\"max_age_min\")",
          "41:   private Integer maxAgeMin;",
          "43:   public LSServerInputFile() {}",
          "45:   public LSServerInputFile(InputDescriptor inputDescriptor) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   @JsonProperty(\"docker\")",
          "44:   private Boolean dockerEnabled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     this.detachTimeMin = inputFileDescriptor.getDetachTimeMin();",
          "50:     this.pathUpdateIntervalMin = inputFileDescriptor.getPathUpdateIntervalMin();",
          "51:     this.maxAgeMin = inputFileDescriptor.getMaxAgeMin();",
          "52:   }",
          "54:   public Integer getDetachIntervalMin() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     this.dockerEnabled = inputFileDescriptor.getDockerEnabled();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   public void setMaxAgeMin(Integer maxAgeMin) {",
          "83:     this.maxAgeMin = maxAgeMin;",
          "84:   }",
          "85: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   public Boolean getDockerEnabled() {",
          "91:     return dockerEnabled;",
          "92:   }",
          "94:   public void setDockerEnabled(Boolean dockerEnabled) {",
          "95:     this.dockerEnabled = dockerEnabled;",
          "96:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties||ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties": [
          "File: ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties -> ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: logfeeder.cache.dedup.interval=1000",
          "30: logfeeder.cache.last.dedup.enabled=true",
          "31: logsearch.config.zk_connect_string=localhost:9983",
          "",
          "[Removed Lines]",
          "32: logfeeder.include.default.level=FATAL,ERROR,WARN,INFO,DEBUG,TRACE,UNKNOWN",
          "",
          "[Added Lines]",
          "33: logfeeder.docker.registry.enabled=true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fd139aae2b9cbbf8bceb2a56accd2f7567d487f",
      "candidate_info": {
        "commit_hash": "1fd139aae2b9cbbf8bceb2a56accd2f7567d487f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1fd139aae2b9cbbf8bceb2a56accd2f7567d487f",
        "files": [
          "ambari-web/app/mappers/service_metrics_mapper.js",
          "ambari-web/app/views/main/service/info/summary/hdfs/widgets.js"
        ],
        "message": "AMBARI-25167 HDFS Summary Dashboard does not show \"TOTAL FILES + DIRECTORIES\" properly In Ambari 2.7 (asnaik) (#2841)",
        "before_after_code_files": [
          "ambari-web/app/mappers/service_metrics_mapper.js||ambari-web/app/mappers/service_metrics_mapper.js",
          "ambari-web/app/views/main/service/info/summary/hdfs/widgets.js||ambari-web/app/views/main/service/info/summary/hdfs/widgets.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mappers/service_metrics_mapper.js||ambari-web/app/mappers/service_metrics_mapper.js": [
          "File: ambari-web/app/mappers/service_metrics_mapper.js -> ambari-web/app/mappers/service_metrics_mapper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     dfs_corrupt_blocks_values: 'metrics.dfs.FSNamesystem.CorruptBlocks',",
          "82:     dfs_missing_blocks_values: 'metrics.dfs.FSNamesystem.MissingBlocks',",
          "83:     dfs_under_replicated_blocks_values: 'metrics.dfs.FSNamesystem.UnderReplicatedBlocks',",
          "85:     work_status_values: 'HostRoles.state',",
          "86:     upgrade_status_values: 'metrics.dfs.namenode.UpgradeFinalized',",
          "87:     safe_mode_status_values: 'metrics.dfs.namenode.Safemode',",
          "",
          "[Removed Lines]",
          "84:     dfs_total_files_values: 'metrics.dfs.namenode.TotalFiles',",
          "",
          "[Added Lines]",
          "84:     dfs_total_files_values: 'metrics.dfs.FSNamesystem.FilesTotal',",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/service/info/summary/hdfs/widgets.js||ambari-web/app/views/main/service/info/summary/hdfs/widgets.js": [
          "File: ambari-web/app/views/main/service/info/summary/hdfs/widgets.js -> ambari-web/app/views/main/service/info/summary/hdfs/widgets.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   dfsTotalFilesValue: Em.computed.getByKey('model.dfsTotalFilesValues', 'hostName'),",
          "82:   healthStatus: Em.computed.getByKey('model.healthStatusValues', 'hostName'),",
          "",
          "[Removed Lines]",
          "80:   dfsTotalFiles: Em.computed.formatUnavailable('model.dfsTotalFilesValue'),",
          "",
          "[Added Lines]",
          "80:   dfsTotalFiles: Em.computed.formatUnavailable('dfsTotalFilesValue'),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55a6b88cd3a0b82fcf04d385ecbb0cdcb7fe2dc5",
      "candidate_info": {
        "commit_hash": "55a6b88cd3a0b82fcf04d385ecbb0cdcb7fe2dc5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/55a6b88cd3a0b82fcf04d385ecbb0cdcb7fe2dc5",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts"
        ],
        "message": "[AMBARI-24438] [Log Search UI] App Loader Page - add initial progress state (#2062)\n\n(cherry picked from commit 0ca8a78dd428045f5b5928f99628bc3e2c469b65)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: <ng-container>",
          "18:   <div class=\"data-avaibility-progress\">",
          "19:     <div class=\"progress-bar\">",
          "21:     </div>",
          "22:   </div>",
          "23:   <div class=\"data-avaibility\">",
          "",
          "[Removed Lines]",
          "20:       <div class=\"progress-bar-indicator\" [style.width]=\"((dataLoadingProgress$ | async) * 100) + '%'\"></div>",
          "",
          "[Added Lines]",
          "20:       <div class=\"progress-bar-indicator\" [style.width]=\"((dataLoadingProgress$ | async) ? (dataLoadingProgress$ | async) * 100 : '5') + '%'\"></div>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/data-loading-indicator/data-loading-indicator.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:           [key]: dataStates[key]",
          "49:         }), {});",
          "50:     });",
          "52:     return Object.keys(dataStates).reduce((statesArray, key): DataAvaibilityObject[] => {",
          "53:       return [",
          "54:         ...statesArray,",
          "",
          "[Removed Lines]",
          "51:   private currentWatchedDataStatesAsArray$: Observable<DataAvaibilityObject[]> = this.currentWatchedDataStates$.map((dataStates) => {",
          "",
          "[Added Lines]",
          "51:   currentWatchedDataStatesAsArray$: Observable<DataAvaibilityObject[]> = this.currentWatchedDataStates$.map((dataStates) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:       ];",
          "60:     }, []);",
          "61:   });",
          "63:     const keys: string[] = Object.keys(dataStates);",
          "64:     const total: number = keys.length;",
          "65:     const totalAvailable: number = keys.filter(",
          "",
          "[Removed Lines]",
          "62:   private dataLoadingProgress$: Observable<number> = this.currentWatchedDataStates$.map((dataStates): number => {",
          "",
          "[Added Lines]",
          "62:   dataLoadingProgress$: Observable<number> = this.currentWatchedDataStates$.map((dataStates): number => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     ).length;",
          "68:     return totalAvailable / total;",
          "69:   });",
          "71:     return Object.keys(dataStates).reduce((hasError: boolean, key) => {",
          "72:       return hasError || dataStates[key] === DataAvailabilityValues.ERROR;",
          "73:     }, false);",
          "",
          "[Removed Lines]",
          "70:   private hasDataStateError$: Observable<boolean> = this.currentWatchedDataStates$.map((dataStates): boolean => {",
          "",
          "[Added Lines]",
          "70:   hasDataStateError$: Observable<boolean> = this.currentWatchedDataStates$.map((dataStates): boolean => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b5cc45c0f626b04be66c83c3a045002d603b52c",
      "candidate_info": {
        "commit_hash": "8b5cc45c0f626b04be66c83c3a045002d603b52c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8b5cc45c0f626b04be66c83c3a045002d603b52c",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py"
        ],
        "message": "AMBARI-24514. conf-select/stack-select operations can yield incorrect result with parallel_execution=1 (aonishuk)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/script/script.py -> ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133:     if Script.instance is None:",
          "1135:       from resource_management.libraries.functions.default import default",
          "1137:       if not use_proxy:",
          "1138:         reconfigure_urllib2_opener(ignore_system_proxy=True)",
          "",
          "[Removed Lines]",
          "1136:       use_proxy = default(\"/agentConfigParams/agent/use_system_proxy_settings\", True)",
          "",
          "[Added Lines]",
          "1136:       use_proxy = default(\"/agentLevelParams/agentConfigParams/agent/use_system_proxy_settings\", True)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py||ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py": [
          "File: ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py -> ambari-server/src/main/resources/stack-hooks/after-INSTALL/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: dfs_type = default(\"/clusterLevelParams/dfs_type\", \"\")",
          "39: host_sys_prepped = default(\"/ambariLevelParams/host_sys_prepped\", False)",
          "41: sudo = AMBARI_SUDO_BINARY",
          "",
          "[Removed Lines]",
          "38: is_parallel_execution_enabled = int(default(\"/agentConfigParams/agent/parallel_execution\", 0)) == 1",
          "",
          "[Added Lines]",
          "38: is_parallel_execution_enabled = int(default(\"/agentLevelParams/agentConfigParams/agent/parallel_execution\", 0)) == 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02280a758a7cd6b26b416a99b47a2d2b9f7bcf87",
      "candidate_info": {
        "commit_hash": "02280a758a7cd6b26b416a99b47a2d2b9f7bcf87",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/02280a758a7cd6b26b416a99b47a2d2b9f7bcf87",
        "files": [
          "ambari-web/app/models/host_component.js",
          "ambari-web/app/styles/alerts.less",
          "ambari-web/app/styles/hosts.less",
          "ambari-web/test/models/host_component_test.js"
        ],
        "message": "AMBARI-24311 Host and Alerts page style fixes",
        "before_after_code_files": [
          "ambari-web/app/models/host_component.js||ambari-web/app/models/host_component.js",
          "ambari-web/app/styles/alerts.less||ambari-web/app/styles/alerts.less",
          "ambari-web/app/styles/hosts.less||ambari-web/app/styles/hosts.less",
          "ambari-web/test/models/host_component_test.js||ambari-web/test/models/host_component_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/models/host_component.js||ambari-web/app/models/host_component.js": [
          "File: ambari-web/app/models/host_component.js -> ambari-web/app/models/host_component.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   serviceDisplayName: Em.computed.truncate('service.displayName', 14, 11),",
          "44:   summaryLabelClassName:function(){",
          "45:     return 'label_for_'+this.get('componentName').toLowerCase();",
          "",
          "[Removed Lines]",
          "40:   getDisplayName: Em.computed.truncate('displayName', 19, 16),",
          "42:   getDisplayNameAdvanced:Em.computed.truncate('displayNameAdvanced', 19, 16),",
          "",
          "[Added Lines]",
          "40:   getDisplayName: Em.computed.truncate('displayName', 30, 25),",
          "42:   getDisplayNameAdvanced:Em.computed.truncate('displayNameAdvanced', 30, 25),",
          "",
          "---------------"
        ],
        "ambari-web/app/styles/alerts.less||ambari-web/app/styles/alerts.less": [
          "File: ambari-web/app/styles/alerts.less -> ambari-web/app/styles/alerts.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   width: 115px;",
          "62:   text-align: center;",
          "63:   line-height: 20px;",
          "65: }",
          "67: .groups-filter {",
          "",
          "[Removed Lines]",
          "64:   margin-bottom: 4px;",
          "",
          "[Added Lines]",
          "64:   margin-bottom: 2px;",
          "65:   margin-top: 2px;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: #alert-instances-table {",
          "163:   > thead > tr > th,  > thead > tr > td,",
          "164:   > tbody > tr > th,  > tbody > tr > td,",
          "166:     vertical-align: middle;",
          "167:   }",
          "",
          "[Removed Lines]",
          "165:   > tfoot > tr > th,  > tfoot > tr > td {",
          "",
          "[Added Lines]",
          "166:   > tfoot > tr > th,  > tfoot > tr > td,",
          "167:   .timeago {",
          "",
          "---------------"
        ],
        "ambari-web/app/styles/hosts.less||ambari-web/app/styles/hosts.less": [
          "File: ambari-web/app/styles/hosts.less -> ambari-web/app/styles/hosts.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     .host-select-all {",
          "50:       margin-bottom: -1px ;",
          "51:     }",
          "52:   }",
          "54:   .health-status-HEALTHY,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     tbody > tr > td {",
          "53:       vertical-align: middle;",
          "54:     }",
          "55:     .alerts-crit-count,",
          "56:     .alerts-warn-count {",
          "57:       margin-top: 2px;",
          "58:     }",
          "",
          "---------------"
        ],
        "ambari-web/test/models/host_component_test.js||ambari-web/test/models/host_component_test.js": [
          "File: ambari-web/test/models/host_component_test.js -> ambari-web/test/models/host_component_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   App.TestAliases.testAsComputedExistsIn(hc, 'isNotInstalled', 'workStatus', ['INIT', 'INSTALL_FAILED']);",
          "334:   App.TestAliases.testAsComputedTruncate(hc, 'serviceDisplayName', 'service.displayName', 14, 11);",
          "338:   describe(\"#serviceDisplayName\",function(){",
          "339:     var testCases = [",
          "",
          "[Removed Lines]",
          "279:   describe(\"#getDisplayName\",function(){",
          "280:     var testCases = [",
          "281:       {",
          "282:         testName: 'for displayName of length < 19',",
          "283:         displayName: 'abc',",
          "284:         result: 'abc'",
          "285:       },",
          "286:       {",
          "287:         testName:'for displayName of length = 19',",
          "288:         displayName: '1234567890123456789',",
          "289:         result: '1234567890123456789'",
          "290:       },",
          "291:       {",
          "292:         testName:'for displayName of length > 19',",
          "293:         displayName: '12345678901234567890',",
          "294:         result: '1234567890123456...'",
          "295:       }",
          "296:     ];",
          "298:     testCases.forEach(function(test){",
          "299:       it(test.testName, function(){",
          "300:         hc.set('displayName',test.displayName);",
          "301:         expect(hc.get('getDisplayName')).to.equal(test.result);",
          "302:       });",
          "303:     });",
          "304:   });",
          "306:   describe(\"#getDisplayNameAdvanced\",function(){",
          "307:     var testCases = [",
          "308:       {",
          "309:         testName: 'for displayNameAdvanced of length < 19',",
          "310:         displayNameAdvanced: 'abc',",
          "311:         result: 'abc'",
          "312:       },",
          "313:       {",
          "314:         testName:'for displayNameAdvanced of length = 19',",
          "315:         displayNameAdvanced: '1234567890123456789',",
          "316:         result: '1234567890123456789'",
          "317:       },",
          "318:       {",
          "319:         testName:'for displayNameAdvanced of length > 19',",
          "320:         displayNameAdvanced: '12345678901234567890',",
          "321:         result: '1234567890123456...'",
          "322:       }",
          "323:     ];",
          "325:     testCases.forEach(function(test){",
          "326:       it(test.testName, function(){",
          "327:         hc.set('displayNameAdvanced',test.displayNameAdvanced);",
          "328:         expect(hc.get('getDisplayNameAdvanced')).to.equal(test.result);",
          "329:       });",
          "330:     });",
          "331:   });",
          "335:   App.TestAliases.testAsComputedTruncate(hc, 'getDisplayName', 'displayName', 19, 16);",
          "336:   App.TestAliases.testAsComputedTruncate(hc, 'getDisplayNameAdvanced', 'displayNameAdvanced', 19, 16);",
          "",
          "[Added Lines]",
          "280:   App.TestAliases.testAsComputedTruncate(hc, 'getDisplayName', 'displayName', 30, 25);",
          "281:   App.TestAliases.testAsComputedTruncate(hc, 'getDisplayNameAdvanced', 'displayNameAdvanced', 30, 25);",
          "",
          "---------------"
        ]
      }
    }
  ]
}