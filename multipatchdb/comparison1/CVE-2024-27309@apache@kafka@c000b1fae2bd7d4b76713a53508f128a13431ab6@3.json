{
  "cve_id": "CVE-2024-27309",
  "cve_desc": "While an Apache Kafka cluster is being migrated from ZooKeeper mode to KRaft mode, in some cases ACLs will not be correctly enforced.\n\nTwo preconditions are needed to trigger the bug:\n1. The administrator decides to remove an ACL\n2. The resource associated with the removed ACL continues to have two or more other ACLs associated with it after the removal.\n\nWhen those two preconditions are met, Kafka will treat the resource as if it had only one ACL associated with it after the removal, rather than the two or more that would be correct.\n\nThe incorrect condition is cleared by removing all brokers in ZK mode, or by adding a new ACL to the affected resource. Once the migration is completed, there is no metadata loss (the ACLs all remain).\n\nThe full impact depends on the ACLs in use. If only ALLOW ACLs were configured during the migration, the impact would be limited to availability impact. if DENY ACLs were configured, the impact could include confidentiality and integrity impact depending on the ACLs configured, as the DENY ACLs might be ignored due to this vulnerability during the migration period.",
  "repo": "apache/kafka",
  "patch_hash": "c000b1fae2bd7d4b76713a53508f128a13431ab6",
  "patch_info": {
    "commit_hash": "c000b1fae2bd7d4b76713a53508f128a13431ab6",
    "repo": "apache/kafka",
    "commit_url": "https://github.com/apache/kafka/commit/c000b1fae2bd7d4b76713a53508f128a13431ab6",
    "files": [
      "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
      "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
      "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
      "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
      "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
      "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
      "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
    ],
    "message": "MINOR: Fix some MetadataDelta handling issues during ZK migration (#15327)\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>",
    "before_after_code_files": [
      "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
      "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
      "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
      "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
      "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
      "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
      "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
    ]
  },
  "patch_diff": {
    "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala": [
      "File: core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import kafka.utils.TestUtils",
      "22: import org.apache.kafka.common.Uuid",
      "23: import org.apache.kafka.common.acl._",
      "25: import org.apache.kafka.common.resource.{PatternType, ResourcePattern, ResourcePatternFilter, ResourceType}",
      "26: import org.apache.kafka.common.security.auth.KafkaPrincipal",
      "27: import org.apache.kafka.common.utils.SecurityUtils",
      "28: import org.apache.kafka.image.{MetadataDelta, MetadataImage, MetadataProvenance}",
      "29: import org.apache.kafka.metadata.migration.KRaftMigrationZkWriter",
      "30: import org.apache.kafka.server.common.ApiMessageAndVersion",
      "32: import org.junit.jupiter.api.Test",
      "34: import scala.collection.mutable",
      "",
      "[Removed Lines]",
      "24: import org.apache.kafka.common.metadata.AccessControlEntryRecord",
      "31: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue}",
      "",
      "[Added Lines]",
      "24: import org.apache.kafka.common.metadata.{AccessControlEntryRecord, RemoveAccessControlEntryRecord}",
      "31: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue, fail}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "169:     val image = delta.apply(MetadataProvenance.EMPTY)",
      "173:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => { migrationState = operation.apply(migrationState) })",
      "",
      "[Removed Lines]",
      "172:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
      "",
      "[Added Lines]",
      "172:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "189:         AclPermissionType.fromCode(acl1Resource3.permissionType())),",
      "190:       resource3AclsInZk.head.ace)",
      "191:   }",
      "192: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "193:   def user(user: String): String = {",
      "194:     new KafkaPrincipal(KafkaPrincipal.USER_TYPE, user).toString",
      "195:   }",
      "197:   def acl(resourceName: String,",
      "198:           resourceType: ResourceType,",
      "199:           resourcePattern: PatternType,",
      "200:           principal: String,",
      "201:           host: String = \"*\",",
      "202:           operation: AclOperation = AclOperation.READ,",
      "203:           permissionType: AclPermissionType = AclPermissionType.ALLOW",
      "204:   ): AccessControlEntryRecord = {",
      "205:     new AccessControlEntryRecord()",
      "206:       .setId(Uuid.randomUuid())",
      "207:       .setHost(host)",
      "208:       .setOperation(operation.code())",
      "209:       .setPrincipal(principal)",
      "210:       .setPermissionType(permissionType.code())",
      "211:       .setPatternType(resourcePattern.code())",
      "212:       .setResourceName(resourceName)",
      "213:       .setResourceType(resourceType.code())",
      "214:   }",
      "216:   @Test",
      "217:   def testDeleteOneAclOfMany(): Unit = {",
      "218:     zkClient.createAclPaths()",
      "219:     val topicName = \"topic-\" + Uuid.randomUuid()",
      "220:     val resource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
      "223:     val delta = new MetadataDelta(MetadataImage.EMPTY)",
      "224:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
      "225:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
      "226:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
      "227:     delta.replay(acl1)",
      "228:     delta.replay(acl2)",
      "229:     delta.replay(acl3)",
      "230:     val image = delta.apply(MetadataProvenance.EMPTY)",
      "233:     val errorLogs = mutable.Buffer[String]()",
      "234:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, errorLogs.append)",
      "235:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
      "236:       migrationState = operation.apply(migrationState)",
      "237:     })",
      "240:     val aclsInZk = zkClient.getVersionedAclsForResource(resource).acls",
      "241:     assertEquals(3, aclsInZk.size)",
      "244:     val delta2 = new MetadataDelta.Builder()",
      "245:       .setImage(image)",
      "246:       .build()",
      "247:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl3.id()))",
      "248:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
      "249:     kraftMigrationZkWriter.handleDelta(image, image2, delta2, (_, _, operation) => {",
      "250:       migrationState = operation.apply(migrationState)",
      "251:     })",
      "254:     val aclsInZk2 = zkClient.getVersionedAclsForResource(resource).acls",
      "255:     assertEquals(2, aclsInZk2.size)",
      "256:     assertEquals(0, errorLogs.size)",
      "259:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
      "260:     delta2.replay(acl4)",
      "261:     val image3 = delta2.apply(MetadataProvenance.EMPTY)",
      "265:     kraftMigrationZkWriter.handleDelta(image3, image3, delta2, (_, _, operation) => {",
      "266:       migrationState = operation.apply(migrationState)",
      "267:     })",
      "269:     val aclsInZk3 = zkClient.getVersionedAclsForResource(resource).acls",
      "270:     assertEquals(3, aclsInZk3.size)",
      "271:     assertEquals(1, errorLogs.size)",
      "272:     assertEquals(s\"Cannot delete ACL ${acl3.id()} from ZK since it is missing from previous AclImage\", errorLogs.head)",
      "273:   }",
      "275:   @Test",
      "276:   def testAclUpdateAndDelete(): Unit = {",
      "277:     zkClient.createAclPaths()",
      "278:     val errorLogs = mutable.Buffer[String]()",
      "279:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, errorLogs.append)",
      "281:     val topicName = \"topic-\" + Uuid.randomUuid()",
      "282:     val otherName = \"other-\" + Uuid.randomUuid()",
      "283:     val literalResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
      "284:     val prefixedResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.PREFIXED)",
      "285:     val otherResource = new ResourcePattern(ResourceType.TOPIC, otherName, PatternType.LITERAL)",
      "288:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
      "289:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
      "290:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
      "291:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
      "293:     val delta1 = new MetadataDelta(MetadataImage.EMPTY)",
      "294:     delta1.replay(acl1)",
      "295:     delta1.replay(acl2)",
      "296:     delta1.replay(acl3)",
      "297:     delta1.replay(acl4)",
      "299:     val image1 = delta1.apply(MetadataProvenance.EMPTY)",
      "300:     kraftMigrationZkWriter.handleDelta(MetadataImage.EMPTY, image1, delta1, (_, _, operation) => {",
      "301:       migrationState = operation.apply(migrationState)",
      "302:     })",
      "303:     assertEquals(4, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
      "304:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
      "305:     assertEquals(0, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
      "306:     assertEquals(0, errorLogs.size)",
      "308:     val acl5 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"alice\"))",
      "309:     val acl6 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"bob\"))",
      "310:     val acl7 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
      "311:     val acl8 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
      "314:     val delta2 = new MetadataDelta.Builder().setImage(image1).build()",
      "315:     delta2.replay(acl5)",
      "316:     delta2.replay(acl6)",
      "317:     delta2.replay(acl7)",
      "318:     delta2.replay(acl8)",
      "319:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl1.id()))",
      "321:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
      "322:     kraftMigrationZkWriter.handleDelta(image1, image2, delta2, (_, _, operation) => {",
      "323:       migrationState = operation.apply(migrationState)",
      "324:     })",
      "325:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
      "326:     assertEquals(2, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
      "327:     assertEquals(2, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
      "328:     assertEquals(0, errorLogs.size)",
      "331:     val acl9 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"eve\"))",
      "332:     val delta3 = new MetadataDelta.Builder().setImage(image2).build()",
      "333:     delta3.replay(acl1)",
      "334:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl2.id()))",
      "335:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl5.id()))",
      "336:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl6.id()))",
      "337:     delta3.replay(acl9)",
      "339:     val image3 = delta3.apply(MetadataProvenance.EMPTY)",
      "340:     kraftMigrationZkWriter.handleDelta(image2, image3, delta3, (_, _, operation) => {",
      "341:       migrationState = operation.apply(migrationState)",
      "342:     })",
      "343:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
      "344:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
      "345:     assertEquals(3, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
      "346:     assertEquals(0, errorLogs.size)",
      "347:   }",
      "",
      "---------------"
    ],
    "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala": [
      "File: core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: import org.apache.kafka.server.common.ApiMessageAndVersion",
      "41: import org.apache.kafka.server.config.ConfigType",
      "42: import org.apache.kafka.server.util.MockRandom",
      "44: import org.junit.jupiter.api.Test",
      "46: import java.util",
      "",
      "[Removed Lines]",
      "43: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue}",
      "",
      "[Added Lines]",
      "43: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue, fail}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "326:     val image = delta.apply(MetadataProvenance.EMPTY)",
      "330:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
      "331:       migrationState = operation.apply(migrationState)",
      "332:     })",
      "",
      "[Removed Lines]",
      "329:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
      "",
      "[Added Lines]",
      "329:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
      "",
      "---------------"
    ],
    "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala": [
      "File: core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "318:   @Test",
      "319:   def testTopicAndBrokerConfigsMigrationWithSnapshots(): Unit = {",
      "323:     val topicName = \"testTopic\"",
      "",
      "[Removed Lines]",
      "320:     val kraftWriter = new KRaftMigrationZkWriter(migrationClient)",
      "",
      "[Added Lines]",
      "320:     val kraftWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
      "",
      "---------------"
    ],
    "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java": [
      "File: metadata/src/main/java/org/apache/kafka/image/AclsDelta.java -> metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.apache.kafka.server.common.MetadataVersion;",
      "27: import java.util.HashMap;",
      "29: import java.util.LinkedHashMap;",
      "30: import java.util.Map;",
      "31: import java.util.Map.Entry;",
      "32: import java.util.Optional;",
      "34: import java.util.stream.Collectors;",
      "",
      "[Removed Lines]",
      "28: import java.util.HashSet;",
      "33: import java.util.Set;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: public final class AclsDelta {",
      "41:     private final AclsImage image;",
      "42:     private final Map<Uuid, Optional<StandardAcl>> changes = new LinkedHashMap<>();",
      "45:     public AclsDelta(AclsImage image) {",
      "46:         this.image = image;",
      "",
      "[Removed Lines]",
      "43:     private final Set<StandardAcl> deleted = new HashSet<>();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "56:         return changes;",
      "57:     }",
      "68:     void finishSnapshot() {",
      "69:         for (Entry<Uuid, StandardAcl> entry : image.acls().entrySet()) {",
      "70:             if (!changes.containsKey(entry.getKey())) {",
      "",
      "[Removed Lines]",
      "64:     public Set<StandardAcl> deleted() {",
      "65:         return deleted;",
      "66:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:     public void replay(RemoveAccessControlEntryRecord record) {",
      "94:         if (image.acls().containsKey(record.id())) {",
      "95:             changes.put(record.id(), Optional.empty());",
      "97:         } else if (changes.containsKey(record.id())) {",
      "98:             changes.remove(record.id());",
      "",
      "[Removed Lines]",
      "96:             deleted.add(image.acls().get(record.id()));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java": [
      "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "134:         this.time = time;",
      "135:         LogContext logContext = new LogContext(\"[KRaftMigrationDriver id=\" + nodeId + \"] \");",
      "136:         this.controllerMetrics = controllerMetrics;",
      "138:         this.migrationState = MigrationDriverState.UNINITIALIZED;",
      "139:         this.migrationLeadershipState = ZkMigrationLeadershipState.EMPTY;",
      "140:         this.eventQueue = new KafkaEventQueue(Time.SYSTEM, logContext, \"controller-\" + nodeId + \"-migration-driver-\");",
      "",
      "[Removed Lines]",
      "137:         this.log = logContext.logger(KRaftMigrationDriver.class);",
      "",
      "[Added Lines]",
      "137:         Logger log = logContext.logger(KRaftMigrationDriver.class);",
      "138:         this.log = log;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "144:         this.initialZkLoadHandler = initialZkLoadHandler;",
      "145:         this.faultHandler = faultHandler;",
      "146:         this.quorumFeatures = quorumFeatures;",
      "148:         this.recordRedactor = new RecordRedactor(configSchema);",
      "149:         this.minBatchSize = minBatchSize;",
      "150:     }",
      "",
      "[Removed Lines]",
      "147:         this.zkMetadataWriter = new KRaftMigrationZkWriter(zkMigrationClient);",
      "",
      "[Added Lines]",
      "148:         this.zkMetadataWriter = new KRaftMigrationZkWriter(zkMigrationClient, log::error);",
      "",
      "---------------"
    ],
    "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java": [
      "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: import java.util.Optional;",
      "61: import java.util.Set;",
      "62: import java.util.function.BiConsumer;",
      "63: import java.util.function.Function;",
      "66: public class KRaftMigrationZkWriter {",
      "",
      "[Removed Lines]",
      "64: import java.util.stream.Collectors;",
      "",
      "[Added Lines]",
      "63: import java.util.function.Consumer;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:     private final MigrationClient migrationClient;",
      "86:     public KRaftMigrationZkWriter(",
      "88:     ) {",
      "89:         this.migrationClient = migrationClient;",
      "90:     }",
      "92:     public void handleSnapshot(MetadataImage image, KRaftMigrationOperationConsumer operationConsumer) {",
      "",
      "[Removed Lines]",
      "87:         MigrationClient migrationClient",
      "",
      "[Added Lines]",
      "85:     private final Consumer<String> errorLogger;",
      "88:         MigrationClient migrationClient,",
      "89:         Consumer<String> errorLogger",
      "92:         this.errorLogger = errorLogger;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "122:             updated = true;",
      "123:         }",
      "124:         if (delta.aclsDelta() != null) {",
      "126:             updated = true;",
      "127:         }",
      "128:         if (delta.delegationTokenDelta() != null) {",
      "",
      "[Removed Lines]",
      "125:             handleAclsDelta(image.acls(), delta.aclsDelta(), operationConsumer);",
      "",
      "[Added Lines]",
      "128:             handleAclsDelta(previousImage.acls(), image.acls(), delta.aclsDelta(), operationConsumer);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "612:         });",
      "613:     }",
      "630:         Map<ResourcePattern, List<AccessControlEntry>> aclsToWrite = new HashMap<>();",
      "639:             }",
      "640:         });",
      "646:         });",
      "648:         aclsToWrite.forEach((resourcePattern, accessControlEntries) -> {",
      "652:         });",
      "653:     }",
      "",
      "[Removed Lines]",
      "615:     void handleAclsDelta(AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
      "617:         Set<ResourcePattern> resourcesWithChangedAcls = delta.changes().values()",
      "618:             .stream()",
      "619:             .filter(Optional::isPresent)",
      "620:             .map(Optional::get)",
      "621:             .map(this::resourcePatternFromAcl)",
      "622:             .collect(Collectors.toSet());",
      "624:         Set<ResourcePattern> resourcesWithDeletedAcls = delta.deleted()",
      "625:             .stream()",
      "626:             .map(this::resourcePatternFromAcl)",
      "627:             .collect(Collectors.toSet());",
      "631:         image.acls().forEach((uuid, standardAcl) -> {",
      "632:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
      "633:             boolean removed = resourcesWithDeletedAcls.remove(resourcePattern);",
      "635:             if (resourcesWithChangedAcls.contains(resourcePattern) || removed) {",
      "636:                 aclsToWrite.computeIfAbsent(resourcePattern, __ -> new ArrayList<>()).add(",
      "637:                     new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType())",
      "638:                 );",
      "642:         resourcesWithDeletedAcls.forEach(deletedResource -> {",
      "643:             String name = \"Deleting resource \" + deletedResource + \" which has no more ACLs\";",
      "644:             operationConsumer.accept(DELETE_ACL, name, migrationState ->",
      "645:                 migrationClient.aclClient().deleteResource(deletedResource, migrationState));",
      "649:             String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
      "650:             operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
      "651:                 migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
      "",
      "[Added Lines]",
      "619:     void handleAclsDelta(AclsImage prevImage, AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
      "622:         delta.changes().forEach((aclId, aclChange) -> {",
      "623:             if (aclChange.isPresent()) {",
      "624:                 ResourcePattern resourcePattern = resourcePatternFromAcl(aclChange.get());",
      "625:                 aclsToWrite.put(resourcePattern, new ArrayList<>());",
      "626:             } else {",
      "628:                 StandardAcl deletedAcl = prevImage.acls().get(aclId);",
      "629:                 if (deletedAcl == null) {",
      "630:                     errorLogger.accept(\"Cannot delete ACL \" + aclId + \" from ZK since it is missing from previous AclImage\");",
      "631:                 } else {",
      "632:                     ResourcePattern resourcePattern = resourcePatternFromAcl(deletedAcl);",
      "633:                     aclsToWrite.put(resourcePattern, new ArrayList<>());",
      "634:                 }",
      "639:         image.acls().forEach((uuid, standardAcl) -> {",
      "640:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
      "641:             List<AccessControlEntry> entries = aclsToWrite.get(resourcePattern);",
      "642:             if (entries != null) {",
      "643:                 entries.add(new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType()));",
      "644:             }",
      "649:             if (accessControlEntries.isEmpty()) {",
      "650:                 String name = \"Deleting resource \" + resourcePattern + \" which has no more ACLs\";",
      "651:                 operationConsumer.accept(DELETE_ACL, name, migrationState ->",
      "652:                     migrationClient.aclClient().deleteResource(resourcePattern, migrationState));",
      "653:             } else {",
      "654:                 String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
      "655:                 operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
      "656:                     migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
      "657:             }",
      "",
      "---------------"
    ],
    "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java": [
      "File: metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java -> metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:             .setConfigMigrationClient(configClient)",
      "81:             .build();",
      "85:         MetadataImage image = new MetadataImage(",
      "86:             MetadataProvenance.EMPTY,",
      "",
      "[Removed Lines]",
      "83:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
      "",
      "[Added Lines]",
      "83:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:             .setAclMigrationClient(aclClient)",
      "121:             .build();",
      "125:         MetadataImage image = new MetadataImage(",
      "126:             MetadataProvenance.EMPTY,",
      "",
      "[Removed Lines]",
      "123:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
      "",
      "[Added Lines]",
      "123:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "179:             .setAclMigrationClient(aclClient)",
      "180:             .build();",
      "184:         MetadataImage image = new MetadataImage(",
      "185:             MetadataProvenance.EMPTY,",
      "",
      "[Removed Lines]",
      "182:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
      "",
      "[Added Lines]",
      "182:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0721296b259aebbbd80bbd10597a46e55b32655",
      "candidate_info": {
        "commit_hash": "b0721296b259aebbbd80bbd10597a46e55b32655",
        "repo": "apache/kafka",
        "commit_url": "https://github.com/apache/kafka/commit/b0721296b259aebbbd80bbd10597a46e55b32655",
        "files": [
          "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
          "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
        ],
        "message": "MINOR: Fix some MetadataDelta handling issues during ZK migration (#15327)\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>",
        "before_after_code_files": [
          "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
          "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
            "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
            "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
          ],
          "candidate": [
            "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
            "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
            "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import kafka.utils.TestUtils",
          "22: import org.apache.kafka.common.Uuid",
          "23: import org.apache.kafka.common.acl._",
          "25: import org.apache.kafka.common.resource.{PatternType, ResourcePattern, ResourcePatternFilter, ResourceType}",
          "26: import org.apache.kafka.common.security.auth.KafkaPrincipal",
          "27: import org.apache.kafka.common.utils.SecurityUtils",
          "28: import org.apache.kafka.image.{MetadataDelta, MetadataImage, MetadataProvenance}",
          "29: import org.apache.kafka.metadata.migration.KRaftMigrationZkWriter",
          "30: import org.apache.kafka.server.common.ApiMessageAndVersion",
          "32: import org.junit.jupiter.api.Test",
          "34: import scala.collection.mutable",
          "",
          "[Removed Lines]",
          "24: import org.apache.kafka.common.metadata.AccessControlEntryRecord",
          "31: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue}",
          "",
          "[Added Lines]",
          "24: import org.apache.kafka.common.metadata.{AccessControlEntryRecord, RemoveAccessControlEntryRecord}",
          "31: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue, fail}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "173:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => { migrationState = operation.apply(migrationState) })",
          "",
          "[Removed Lines]",
          "172:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
          "",
          "[Added Lines]",
          "172:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:         AclPermissionType.fromCode(acl1Resource3.permissionType())),",
          "190:       resource3AclsInZk.head.ace)",
          "191:   }",
          "192: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   def user(user: String): String = {",
          "194:     new KafkaPrincipal(KafkaPrincipal.USER_TYPE, user).toString",
          "195:   }",
          "197:   def acl(resourceName: String,",
          "198:           resourceType: ResourceType,",
          "199:           resourcePattern: PatternType,",
          "200:           principal: String,",
          "201:           host: String = \"*\",",
          "202:           operation: AclOperation = AclOperation.READ,",
          "203:           permissionType: AclPermissionType = AclPermissionType.ALLOW",
          "204:   ): AccessControlEntryRecord = {",
          "205:     new AccessControlEntryRecord()",
          "206:       .setId(Uuid.randomUuid())",
          "207:       .setHost(host)",
          "208:       .setOperation(operation.code())",
          "209:       .setPrincipal(principal)",
          "210:       .setPermissionType(permissionType.code())",
          "211:       .setPatternType(resourcePattern.code())",
          "212:       .setResourceName(resourceName)",
          "213:       .setResourceType(resourceType.code())",
          "214:   }",
          "216:   @Test",
          "217:   def testDeleteOneAclOfMany(): Unit = {",
          "218:     zkClient.createAclPaths()",
          "219:     val topicName = \"topic-\" + Uuid.randomUuid()",
          "220:     val resource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
          "223:     val delta = new MetadataDelta(MetadataImage.EMPTY)",
          "224:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
          "225:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
          "226:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "227:     delta.replay(acl1)",
          "228:     delta.replay(acl2)",
          "229:     delta.replay(acl3)",
          "230:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "233:     val errorLogs = mutable.Buffer[String]()",
          "234:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, errorLogs.append)",
          "235:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
          "236:       migrationState = operation.apply(migrationState)",
          "237:     })",
          "240:     val aclsInZk = zkClient.getVersionedAclsForResource(resource).acls",
          "241:     assertEquals(3, aclsInZk.size)",
          "244:     val delta2 = new MetadataDelta.Builder()",
          "245:       .setImage(image)",
          "246:       .build()",
          "247:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl3.id()))",
          "248:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
          "249:     kraftMigrationZkWriter.handleDelta(image, image2, delta2, (_, _, operation) => {",
          "250:       migrationState = operation.apply(migrationState)",
          "251:     })",
          "254:     val aclsInZk2 = zkClient.getVersionedAclsForResource(resource).acls",
          "255:     assertEquals(2, aclsInZk2.size)",
          "256:     assertEquals(0, errorLogs.size)",
          "259:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "260:     delta2.replay(acl4)",
          "261:     val image3 = delta2.apply(MetadataProvenance.EMPTY)",
          "265:     kraftMigrationZkWriter.handleDelta(image3, image3, delta2, (_, _, operation) => {",
          "266:       migrationState = operation.apply(migrationState)",
          "267:     })",
          "269:     val aclsInZk3 = zkClient.getVersionedAclsForResource(resource).acls",
          "270:     assertEquals(3, aclsInZk3.size)",
          "271:     assertEquals(1, errorLogs.size)",
          "272:     assertEquals(s\"Cannot delete ACL ${acl3.id()} from ZK since it is missing from previous AclImage\", errorLogs.head)",
          "273:   }",
          "275:   @Test",
          "276:   def testAclUpdateAndDelete(): Unit = {",
          "277:     zkClient.createAclPaths()",
          "278:     val errorLogs = mutable.Buffer[String]()",
          "279:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, errorLogs.append)",
          "281:     val topicName = \"topic-\" + Uuid.randomUuid()",
          "282:     val otherName = \"other-\" + Uuid.randomUuid()",
          "283:     val literalResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
          "284:     val prefixedResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.PREFIXED)",
          "285:     val otherResource = new ResourcePattern(ResourceType.TOPIC, otherName, PatternType.LITERAL)",
          "288:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
          "289:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
          "290:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "291:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
          "293:     val delta1 = new MetadataDelta(MetadataImage.EMPTY)",
          "294:     delta1.replay(acl1)",
          "295:     delta1.replay(acl2)",
          "296:     delta1.replay(acl3)",
          "297:     delta1.replay(acl4)",
          "299:     val image1 = delta1.apply(MetadataProvenance.EMPTY)",
          "300:     kraftMigrationZkWriter.handleDelta(MetadataImage.EMPTY, image1, delta1, (_, _, operation) => {",
          "301:       migrationState = operation.apply(migrationState)",
          "302:     })",
          "303:     assertEquals(4, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "304:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "305:     assertEquals(0, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "306:     assertEquals(0, errorLogs.size)",
          "308:     val acl5 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"alice\"))",
          "309:     val acl6 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"bob\"))",
          "310:     val acl7 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "311:     val acl8 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
          "314:     val delta2 = new MetadataDelta.Builder().setImage(image1).build()",
          "315:     delta2.replay(acl5)",
          "316:     delta2.replay(acl6)",
          "317:     delta2.replay(acl7)",
          "318:     delta2.replay(acl8)",
          "319:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl1.id()))",
          "321:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
          "322:     kraftMigrationZkWriter.handleDelta(image1, image2, delta2, (_, _, operation) => {",
          "323:       migrationState = operation.apply(migrationState)",
          "324:     })",
          "325:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "326:     assertEquals(2, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "327:     assertEquals(2, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "328:     assertEquals(0, errorLogs.size)",
          "331:     val acl9 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"eve\"))",
          "332:     val delta3 = new MetadataDelta.Builder().setImage(image2).build()",
          "333:     delta3.replay(acl1)",
          "334:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl2.id()))",
          "335:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl5.id()))",
          "336:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl6.id()))",
          "337:     delta3.replay(acl9)",
          "339:     val image3 = delta3.apply(MetadataProvenance.EMPTY)",
          "340:     kraftMigrationZkWriter.handleDelta(image2, image3, delta3, (_, _, operation) => {",
          "341:       migrationState = operation.apply(migrationState)",
          "342:     })",
          "343:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "344:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "345:     assertEquals(3, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "346:     assertEquals(0, errorLogs.size)",
          "347:   }",
          "",
          "---------------"
        ],
        "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.kafka.metadata.migration.ZkMigrationLeadershipState",
          "40: import org.apache.kafka.server.common.ApiMessageAndVersion",
          "41: import org.apache.kafka.server.util.MockRandom",
          "43: import org.junit.jupiter.api.Test",
          "45: import java.util",
          "",
          "[Removed Lines]",
          "42: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue}",
          "",
          "[Added Lines]",
          "42: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue, fail}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "329:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
          "330:       migrationState = operation.apply(migrationState)",
          "331:     })",
          "",
          "[Removed Lines]",
          "328:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
          "",
          "[Added Lines]",
          "328:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
          "",
          "---------------"
        ],
        "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   @Test",
          "318:   def testTopicAndBrokerConfigsMigrationWithSnapshots(): Unit = {",
          "322:     val topicName = \"testTopic\"",
          "",
          "[Removed Lines]",
          "319:     val kraftWriter = new KRaftMigrationZkWriter(migrationClient)",
          "",
          "[Added Lines]",
          "319:     val kraftWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java": [
          "File: metadata/src/main/java/org/apache/kafka/image/AclsDelta.java -> metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kafka.server.common.MetadataVersion;",
          "27: import java.util.HashMap;",
          "29: import java.util.LinkedHashMap;",
          "30: import java.util.Map;",
          "31: import java.util.Map.Entry;",
          "32: import java.util.Optional;",
          "34: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "28: import java.util.HashSet;",
          "33: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: public final class AclsDelta {",
          "41:     private final AclsImage image;",
          "42:     private final Map<Uuid, Optional<StandardAcl>> changes = new LinkedHashMap<>();",
          "45:     public AclsDelta(AclsImage image) {",
          "46:         this.image = image;",
          "",
          "[Removed Lines]",
          "43:     private final Set<StandardAcl> deleted = new HashSet<>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         return changes;",
          "57:     }",
          "68:     void finishSnapshot() {",
          "69:         for (Entry<Uuid, StandardAcl> entry : image.acls().entrySet()) {",
          "70:             if (!changes.containsKey(entry.getKey())) {",
          "",
          "[Removed Lines]",
          "64:     public Set<StandardAcl> deleted() {",
          "65:         return deleted;",
          "66:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     public void replay(RemoveAccessControlEntryRecord record) {",
          "94:         if (image.acls().containsKey(record.id())) {",
          "95:             changes.put(record.id(), Optional.empty());",
          "97:         } else if (changes.containsKey(record.id())) {",
          "98:             changes.remove(record.id());",
          "",
          "[Removed Lines]",
          "96:             deleted.add(image.acls().get(record.id()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java": [
          "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:         this.time = time;",
          "135:         LogContext logContext = new LogContext(\"[KRaftMigrationDriver id=\" + nodeId + \"] \");",
          "136:         this.controllerMetrics = controllerMetrics;",
          "138:         this.migrationState = MigrationDriverState.UNINITIALIZED;",
          "139:         this.migrationLeadershipState = ZkMigrationLeadershipState.EMPTY;",
          "140:         this.eventQueue = new KafkaEventQueue(Time.SYSTEM, logContext, \"controller-\" + nodeId + \"-migration-driver-\");",
          "",
          "[Removed Lines]",
          "137:         this.log = logContext.logger(KRaftMigrationDriver.class);",
          "",
          "[Added Lines]",
          "137:         Logger log = logContext.logger(KRaftMigrationDriver.class);",
          "138:         this.log = log;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:         this.initialZkLoadHandler = initialZkLoadHandler;",
          "145:         this.faultHandler = faultHandler;",
          "146:         this.quorumFeatures = quorumFeatures;",
          "148:         this.recordRedactor = new RecordRedactor(configSchema);",
          "149:         this.minBatchSize = minBatchSize;",
          "150:     }",
          "",
          "[Removed Lines]",
          "147:         this.zkMetadataWriter = new KRaftMigrationZkWriter(zkMigrationClient);",
          "",
          "[Added Lines]",
          "148:         this.zkMetadataWriter = new KRaftMigrationZkWriter(zkMigrationClient, log::error);",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java": [
          "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: import java.util.Optional;",
          "61: import java.util.Set;",
          "62: import java.util.function.BiConsumer;",
          "63: import java.util.function.Function;",
          "66: public class KRaftMigrationZkWriter {",
          "",
          "[Removed Lines]",
          "64: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "63: import java.util.function.Consumer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     private final MigrationClient migrationClient;",
          "86:     public KRaftMigrationZkWriter(",
          "88:     ) {",
          "89:         this.migrationClient = migrationClient;",
          "90:     }",
          "92:     public void handleSnapshot(MetadataImage image, KRaftMigrationOperationConsumer operationConsumer) {",
          "",
          "[Removed Lines]",
          "87:         MigrationClient migrationClient",
          "",
          "[Added Lines]",
          "85:     private final Consumer<String> errorLogger;",
          "88:         MigrationClient migrationClient,",
          "89:         Consumer<String> errorLogger",
          "92:         this.errorLogger = errorLogger;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:             updated = true;",
          "123:         }",
          "124:         if (delta.aclsDelta() != null) {",
          "126:             updated = true;",
          "127:         }",
          "128:         if (delta.delegationTokenDelta() != null) {",
          "",
          "[Removed Lines]",
          "125:             handleAclsDelta(image.acls(), delta.aclsDelta(), operationConsumer);",
          "",
          "[Added Lines]",
          "128:             handleAclsDelta(previousImage.acls(), image.acls(), delta.aclsDelta(), operationConsumer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:         });",
          "613:     }",
          "630:         Map<ResourcePattern, List<AccessControlEntry>> aclsToWrite = new HashMap<>();",
          "639:             }",
          "640:         });",
          "646:         });",
          "648:         aclsToWrite.forEach((resourcePattern, accessControlEntries) -> {",
          "652:         });",
          "653:     }",
          "",
          "[Removed Lines]",
          "615:     void handleAclsDelta(AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
          "617:         Set<ResourcePattern> resourcesWithChangedAcls = delta.changes().values()",
          "618:             .stream()",
          "619:             .filter(Optional::isPresent)",
          "620:             .map(Optional::get)",
          "621:             .map(this::resourcePatternFromAcl)",
          "622:             .collect(Collectors.toSet());",
          "624:         Set<ResourcePattern> resourcesWithDeletedAcls = delta.deleted()",
          "625:             .stream()",
          "626:             .map(this::resourcePatternFromAcl)",
          "627:             .collect(Collectors.toSet());",
          "631:         image.acls().forEach((uuid, standardAcl) -> {",
          "632:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
          "633:             boolean removed = resourcesWithDeletedAcls.remove(resourcePattern);",
          "635:             if (resourcesWithChangedAcls.contains(resourcePattern) || removed) {",
          "636:                 aclsToWrite.computeIfAbsent(resourcePattern, __ -> new ArrayList<>()).add(",
          "637:                     new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType())",
          "638:                 );",
          "642:         resourcesWithDeletedAcls.forEach(deletedResource -> {",
          "643:             String name = \"Deleting resource \" + deletedResource + \" which has no more ACLs\";",
          "644:             operationConsumer.accept(DELETE_ACL, name, migrationState ->",
          "645:                 migrationClient.aclClient().deleteResource(deletedResource, migrationState));",
          "649:             String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
          "650:             operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
          "651:                 migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
          "",
          "[Added Lines]",
          "619:     void handleAclsDelta(AclsImage prevImage, AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
          "622:         delta.changes().forEach((aclId, aclChange) -> {",
          "623:             if (aclChange.isPresent()) {",
          "624:                 ResourcePattern resourcePattern = resourcePatternFromAcl(aclChange.get());",
          "625:                 aclsToWrite.put(resourcePattern, new ArrayList<>());",
          "626:             } else {",
          "628:                 StandardAcl deletedAcl = prevImage.acls().get(aclId);",
          "629:                 if (deletedAcl == null) {",
          "630:                     errorLogger.accept(\"Cannot delete ACL \" + aclId + \" from ZK since it is missing from previous AclImage\");",
          "631:                 } else {",
          "632:                     ResourcePattern resourcePattern = resourcePatternFromAcl(deletedAcl);",
          "633:                     aclsToWrite.put(resourcePattern, new ArrayList<>());",
          "634:                 }",
          "639:         image.acls().forEach((uuid, standardAcl) -> {",
          "640:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
          "641:             List<AccessControlEntry> entries = aclsToWrite.get(resourcePattern);",
          "642:             if (entries != null) {",
          "643:                 entries.add(new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType()));",
          "644:             }",
          "649:             if (accessControlEntries.isEmpty()) {",
          "650:                 String name = \"Deleting resource \" + resourcePattern + \" which has no more ACLs\";",
          "651:                 operationConsumer.accept(DELETE_ACL, name, migrationState ->",
          "652:                     migrationClient.aclClient().deleteResource(resourcePattern, migrationState));",
          "653:             } else {",
          "654:                 String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
          "655:                 operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
          "656:                     migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
          "657:             }",
          "",
          "---------------"
        ],
        "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java": [
          "File: metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java -> metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:             .setConfigMigrationClient(configClient)",
          "81:             .build();",
          "85:         MetadataImage image = new MetadataImage(",
          "86:             MetadataProvenance.EMPTY,",
          "",
          "[Removed Lines]",
          "83:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
          "",
          "[Added Lines]",
          "83:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             .setAclMigrationClient(aclClient)",
          "121:             .build();",
          "125:         MetadataImage image = new MetadataImage(",
          "126:             MetadataProvenance.EMPTY,",
          "",
          "[Removed Lines]",
          "123:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
          "",
          "[Added Lines]",
          "123:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:             .setAclMigrationClient(aclClient)",
          "180:             .build();",
          "184:         MetadataImage image = new MetadataImage(",
          "185:             MetadataProvenance.EMPTY,",
          "",
          "[Removed Lines]",
          "182:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
          "",
          "[Added Lines]",
          "182:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e4ca35f5393d17ae9a845892f8d3bc78c76a40f",
      "candidate_info": {
        "commit_hash": "5e4ca35f5393d17ae9a845892f8d3bc78c76a40f",
        "repo": "apache/kafka",
        "commit_url": "https://github.com/apache/kafka/commit/5e4ca35f5393d17ae9a845892f8d3bc78c76a40f",
        "files": [
          "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java"
        ],
        "message": "MINOR: Fix some MetadataDelta handling issues during ZK migration (#15327)\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>\n\nConflicts: skip adding the error logger callback in KRaftMigrationZkWriter.handleAclsDelta to\n    simplify the cherry-pick and avoid conflicts.",
        "before_after_code_files": [
          "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
            "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java"
          ],
          "candidate": [
            "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
            "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import kafka.utils.TestUtils",
          "22: import org.apache.kafka.common.Uuid",
          "23: import org.apache.kafka.common.acl._",
          "25: import org.apache.kafka.common.resource.{PatternType, ResourcePattern, ResourcePatternFilter, ResourceType}",
          "26: import org.apache.kafka.common.security.auth.KafkaPrincipal",
          "27: import org.apache.kafka.common.utils.SecurityUtils",
          "",
          "[Removed Lines]",
          "24: import org.apache.kafka.common.metadata.AccessControlEntryRecord",
          "",
          "[Added Lines]",
          "24: import org.apache.kafka.common.metadata.{AccessControlEntryRecord, RemoveAccessControlEntryRecord}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         AclPermissionType.fromCode(acl1Resource3.permissionType())),",
          "190:       resource3AclsInZk.head.ace)",
          "191:   }",
          "192: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   def user(user: String): String = {",
          "194:     new KafkaPrincipal(KafkaPrincipal.USER_TYPE, user).toString",
          "195:   }",
          "197:   def acl(resourceName: String,",
          "198:           resourceType: ResourceType,",
          "199:           resourcePattern: PatternType,",
          "200:           principal: String,",
          "201:           host: String = \"*\",",
          "202:           operation: AclOperation = AclOperation.READ,",
          "203:           permissionType: AclPermissionType = AclPermissionType.ALLOW",
          "204:   ): AccessControlEntryRecord = {",
          "205:     new AccessControlEntryRecord()",
          "206:       .setId(Uuid.randomUuid())",
          "207:       .setHost(host)",
          "208:       .setOperation(operation.code())",
          "209:       .setPrincipal(principal)",
          "210:       .setPermissionType(permissionType.code())",
          "211:       .setPatternType(resourcePattern.code())",
          "212:       .setResourceName(resourceName)",
          "213:       .setResourceType(resourceType.code())",
          "214:   }",
          "216:   @Test",
          "217:   def testDeleteOneAclOfMany(): Unit = {",
          "218:     zkClient.createAclPaths()",
          "219:     val topicName = \"topic-\" + Uuid.randomUuid()",
          "220:     val resource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
          "223:     val delta = new MetadataDelta(MetadataImage.EMPTY)",
          "224:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
          "225:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
          "226:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "227:     delta.replay(acl1)",
          "228:     delta.replay(acl2)",
          "229:     delta.replay(acl3)",
          "230:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "233:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
          "234:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
          "235:       migrationState = operation.apply(migrationState)",
          "236:     })",
          "239:     val aclsInZk = zkClient.getVersionedAclsForResource(resource).acls",
          "240:     assertEquals(3, aclsInZk.size)",
          "243:     val delta2 = new MetadataDelta.Builder()",
          "244:       .setImage(image)",
          "245:       .build()",
          "246:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl3.id()))",
          "247:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
          "248:     kraftMigrationZkWriter.handleDelta(image, image2, delta2, (_, _, operation) => {",
          "249:       migrationState = operation.apply(migrationState)",
          "250:     })",
          "253:     val aclsInZk2 = zkClient.getVersionedAclsForResource(resource).acls",
          "254:     assertEquals(2, aclsInZk2.size)",
          "257:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "258:     delta2.replay(acl4)",
          "259:     val image3 = delta2.apply(MetadataProvenance.EMPTY)",
          "263:     kraftMigrationZkWriter.handleDelta(image3, image3, delta2, (_, _, operation) => {",
          "264:       migrationState = operation.apply(migrationState)",
          "265:     })",
          "267:     val aclsInZk3 = zkClient.getVersionedAclsForResource(resource).acls",
          "268:     assertEquals(3, aclsInZk3.size)",
          "269:   }",
          "271:   @Test",
          "272:   def testAclUpdateAndDelete(): Unit = {",
          "273:     zkClient.createAclPaths()",
          "274:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
          "276:     val topicName = \"topic-\" + Uuid.randomUuid()",
          "277:     val otherName = \"other-\" + Uuid.randomUuid()",
          "278:     val literalResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
          "279:     val prefixedResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.PREFIXED)",
          "280:     val otherResource = new ResourcePattern(ResourceType.TOPIC, otherName, PatternType.LITERAL)",
          "283:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
          "284:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
          "285:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "286:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
          "288:     val delta1 = new MetadataDelta(MetadataImage.EMPTY)",
          "289:     delta1.replay(acl1)",
          "290:     delta1.replay(acl2)",
          "291:     delta1.replay(acl3)",
          "292:     delta1.replay(acl4)",
          "294:     val image1 = delta1.apply(MetadataProvenance.EMPTY)",
          "295:     kraftMigrationZkWriter.handleDelta(MetadataImage.EMPTY, image1, delta1, (_, _, operation) => {",
          "296:       migrationState = operation.apply(migrationState)",
          "297:     })",
          "298:     assertEquals(4, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "299:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "300:     assertEquals(0, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "302:     val acl5 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"alice\"))",
          "303:     val acl6 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"bob\"))",
          "304:     val acl7 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "305:     val acl8 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
          "308:     val delta2 = new MetadataDelta.Builder().setImage(image1).build()",
          "309:     delta2.replay(acl5)",
          "310:     delta2.replay(acl6)",
          "311:     delta2.replay(acl7)",
          "312:     delta2.replay(acl8)",
          "313:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl1.id()))",
          "315:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
          "316:     kraftMigrationZkWriter.handleDelta(image1, image2, delta2, (_, _, operation) => {",
          "317:       migrationState = operation.apply(migrationState)",
          "318:     })",
          "319:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "320:     assertEquals(2, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "321:     assertEquals(2, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "324:     val acl9 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"eve\"))",
          "325:     val delta3 = new MetadataDelta.Builder().setImage(image2).build()",
          "326:     delta3.replay(acl1)",
          "327:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl2.id()))",
          "328:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl5.id()))",
          "329:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl6.id()))",
          "330:     delta3.replay(acl9)",
          "332:     val image3 = delta3.apply(MetadataProvenance.EMPTY)",
          "333:     kraftMigrationZkWriter.handleDelta(image2, image3, delta3, (_, _, operation) => {",
          "334:       migrationState = operation.apply(migrationState)",
          "335:     })",
          "336:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "337:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "338:     assertEquals(3, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "339:   }",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java": [
          "File: metadata/src/main/java/org/apache/kafka/image/AclsDelta.java -> metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kafka.server.common.MetadataVersion;",
          "27: import java.util.HashMap;",
          "29: import java.util.LinkedHashMap;",
          "30: import java.util.Map;",
          "31: import java.util.Map.Entry;",
          "32: import java.util.Optional;",
          "34: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "28: import java.util.HashSet;",
          "33: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: public final class AclsDelta {",
          "41:     private final AclsImage image;",
          "42:     private final Map<Uuid, Optional<StandardAcl>> changes = new LinkedHashMap<>();",
          "44:     private boolean isSnapshotDelta = false;",
          "46:     public AclsDelta(AclsImage image) {",
          "",
          "[Removed Lines]",
          "43:     private final Set<StandardAcl> deleted = new HashSet<>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:         return changes;",
          "58:     }",
          "69:     void finishSnapshot() {",
          "70:         this.isSnapshotDelta = true;",
          "71:     }",
          "",
          "[Removed Lines]",
          "65:     public Set<StandardAcl> deleted() {",
          "66:         return deleted;",
          "67:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     public void replay(RemoveAccessControlEntryRecord record) {",
          "95:         if (image.acls().containsKey(record.id())) {",
          "96:             changes.put(record.id(), Optional.empty());",
          "98:         } else if (changes.containsKey(record.id())) {",
          "99:             changes.remove(record.id());",
          "",
          "[Removed Lines]",
          "97:             deleted.add(image.acls().get(record.id()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java": [
          "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import java.util.Set;",
          "59: import java.util.function.BiConsumer;",
          "60: import java.util.function.Function;",
          "63: public class KRaftMigrationZkWriter {",
          "",
          "[Removed Lines]",
          "61: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:             handleProducerIdDelta(delta.producerIdsDelta(), operationConsumer);",
          "113:         }",
          "114:         if (delta.aclsDelta() != null) {",
          "116:         }",
          "117:     }",
          "",
          "[Removed Lines]",
          "115:             handleAclsDelta(image.acls(), delta.aclsDelta(), operationConsumer);",
          "",
          "[Added Lines]",
          "114:             handleAclsDelta(previousImage.acls(), image.acls(), delta.aclsDelta(), operationConsumer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "587:         });",
          "588:     }",
          "605:         Map<ResourcePattern, List<AccessControlEntry>> aclsToWrite = new HashMap<>();",
          "614:             }",
          "615:         });",
          "621:         });",
          "623:         aclsToWrite.forEach((resourcePattern, accessControlEntries) -> {",
          "627:         });",
          "628:     }",
          "629: }",
          "",
          "[Removed Lines]",
          "590:     void handleAclsDelta(AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
          "592:         Set<ResourcePattern> resourcesWithChangedAcls = delta.changes().values()",
          "593:             .stream()",
          "594:             .filter(Optional::isPresent)",
          "595:             .map(Optional::get)",
          "596:             .map(this::resourcePatternFromAcl)",
          "597:             .collect(Collectors.toSet());",
          "599:         Set<ResourcePattern> resourcesWithDeletedAcls = delta.deleted()",
          "600:             .stream()",
          "601:             .map(this::resourcePatternFromAcl)",
          "602:             .collect(Collectors.toSet());",
          "606:         image.acls().forEach((uuid, standardAcl) -> {",
          "607:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
          "608:             boolean removed = resourcesWithDeletedAcls.remove(resourcePattern);",
          "610:             if (resourcesWithChangedAcls.contains(resourcePattern) || removed) {",
          "611:                 aclsToWrite.computeIfAbsent(resourcePattern, __ -> new ArrayList<>()).add(",
          "612:                     new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType())",
          "613:                 );",
          "617:         resourcesWithDeletedAcls.forEach(deletedResource -> {",
          "618:             String name = \"Deleting resource \" + deletedResource + \" which has no more ACLs\";",
          "619:             operationConsumer.accept(DELETE_ACL, name, migrationState ->",
          "620:                 migrationClient.aclClient().deleteResource(deletedResource, migrationState));",
          "624:             String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
          "625:             operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
          "626:                 migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
          "",
          "[Added Lines]",
          "590:     void handleAclsDelta(AclsImage prevImage, AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
          "593:         delta.changes().forEach((aclId, aclChange) -> {",
          "594:             if (aclChange.isPresent()) {",
          "595:                 ResourcePattern resourcePattern = resourcePatternFromAcl(aclChange.get());",
          "596:                 aclsToWrite.put(resourcePattern, new ArrayList<>());",
          "597:             } else {",
          "599:                 StandardAcl deletedAcl = prevImage.acls().get(aclId);",
          "600:                 if (deletedAcl != null) {",
          "601:                     ResourcePattern resourcePattern = resourcePatternFromAcl(deletedAcl);",
          "602:                     aclsToWrite.put(resourcePattern, new ArrayList<>());",
          "603:                 }",
          "608:         image.acls().forEach((uuid, standardAcl) -> {",
          "609:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
          "610:             List<AccessControlEntry> entries = aclsToWrite.get(resourcePattern);",
          "611:             if (entries != null) {",
          "612:                 entries.add(new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType()));",
          "613:             }",
          "618:             if (accessControlEntries.isEmpty()) {",
          "619:                 String name = \"Deleting resource \" + resourcePattern + \" which has no more ACLs\";",
          "620:                 operationConsumer.accept(DELETE_ACL, name, migrationState ->",
          "621:                     migrationClient.aclClient().deleteResource(resourcePattern, migrationState));",
          "622:             } else {",
          "623:                 String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
          "624:                 operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
          "625:                     migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
          "626:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c623b4fb50144cba782c0704f345e6473e66f02",
      "candidate_info": {
        "commit_hash": "3c623b4fb50144cba782c0704f345e6473e66f02",
        "repo": "apache/kafka",
        "commit_url": "https://github.com/apache/kafka/commit/3c623b4fb50144cba782c0704f345e6473e66f02",
        "files": [
          "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
          "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
        ],
        "message": "MINOR: Fix some MetadataDelta handling issues during ZK migration (#15327)\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>",
        "before_after_code_files": [
          "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
          "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
          "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
          "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
            "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
            "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
          ],
          "candidate": [
            "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
            "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
            "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
            "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
            "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import kafka.utils.TestUtils",
          "22: import org.apache.kafka.common.Uuid",
          "23: import org.apache.kafka.common.acl._",
          "25: import org.apache.kafka.common.resource.{PatternType, ResourcePattern, ResourcePatternFilter, ResourceType}",
          "26: import org.apache.kafka.common.security.auth.KafkaPrincipal",
          "27: import org.apache.kafka.common.utils.SecurityUtils",
          "28: import org.apache.kafka.image.{MetadataDelta, MetadataImage, MetadataProvenance}",
          "29: import org.apache.kafka.metadata.migration.KRaftMigrationZkWriter",
          "30: import org.apache.kafka.server.common.ApiMessageAndVersion",
          "32: import org.junit.jupiter.api.Test",
          "34: import scala.collection.mutable",
          "",
          "[Removed Lines]",
          "24: import org.apache.kafka.common.metadata.AccessControlEntryRecord",
          "31: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue}",
          "",
          "[Added Lines]",
          "24: import org.apache.kafka.common.metadata.{AccessControlEntryRecord, RemoveAccessControlEntryRecord}",
          "31: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue, fail}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "173:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => { migrationState = operation.apply(migrationState) })",
          "",
          "[Removed Lines]",
          "172:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
          "",
          "[Added Lines]",
          "172:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:         AclPermissionType.fromCode(acl1Resource3.permissionType())),",
          "190:       resource3AclsInZk.head.ace)",
          "191:   }",
          "192: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   def user(user: String): String = {",
          "194:     new KafkaPrincipal(KafkaPrincipal.USER_TYPE, user).toString",
          "195:   }",
          "197:   def acl(resourceName: String,",
          "198:           resourceType: ResourceType,",
          "199:           resourcePattern: PatternType,",
          "200:           principal: String,",
          "201:           host: String = \"*\",",
          "202:           operation: AclOperation = AclOperation.READ,",
          "203:           permissionType: AclPermissionType = AclPermissionType.ALLOW",
          "204:   ): AccessControlEntryRecord = {",
          "205:     new AccessControlEntryRecord()",
          "206:       .setId(Uuid.randomUuid())",
          "207:       .setHost(host)",
          "208:       .setOperation(operation.code())",
          "209:       .setPrincipal(principal)",
          "210:       .setPermissionType(permissionType.code())",
          "211:       .setPatternType(resourcePattern.code())",
          "212:       .setResourceName(resourceName)",
          "213:       .setResourceType(resourceType.code())",
          "214:   }",
          "216:   @Test",
          "217:   def testDeleteOneAclOfMany(): Unit = {",
          "218:     zkClient.createAclPaths()",
          "219:     val topicName = \"topic-\" + Uuid.randomUuid()",
          "220:     val resource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
          "223:     val delta = new MetadataDelta(MetadataImage.EMPTY)",
          "224:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
          "225:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
          "226:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "227:     delta.replay(acl1)",
          "228:     delta.replay(acl2)",
          "229:     delta.replay(acl3)",
          "230:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "233:     val errorLogs = mutable.Buffer[String]()",
          "234:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, errorLogs.append)",
          "235:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
          "236:       migrationState = operation.apply(migrationState)",
          "237:     })",
          "240:     val aclsInZk = zkClient.getVersionedAclsForResource(resource).acls",
          "241:     assertEquals(3, aclsInZk.size)",
          "244:     val delta2 = new MetadataDelta.Builder()",
          "245:       .setImage(image)",
          "246:       .build()",
          "247:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl3.id()))",
          "248:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
          "249:     kraftMigrationZkWriter.handleDelta(image, image2, delta2, (_, _, operation) => {",
          "250:       migrationState = operation.apply(migrationState)",
          "251:     })",
          "254:     val aclsInZk2 = zkClient.getVersionedAclsForResource(resource).acls",
          "255:     assertEquals(2, aclsInZk2.size)",
          "256:     assertEquals(0, errorLogs.size)",
          "259:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "260:     delta2.replay(acl4)",
          "261:     val image3 = delta2.apply(MetadataProvenance.EMPTY)",
          "265:     kraftMigrationZkWriter.handleDelta(image3, image3, delta2, (_, _, operation) => {",
          "266:       migrationState = operation.apply(migrationState)",
          "267:     })",
          "269:     val aclsInZk3 = zkClient.getVersionedAclsForResource(resource).acls",
          "270:     assertEquals(3, aclsInZk3.size)",
          "271:     assertEquals(1, errorLogs.size)",
          "272:     assertEquals(s\"Cannot delete ACL ${acl3.id()} from ZK since it is missing from previous AclImage\", errorLogs.head)",
          "273:   }",
          "275:   @Test",
          "276:   def testAclUpdateAndDelete(): Unit = {",
          "277:     zkClient.createAclPaths()",
          "278:     val errorLogs = mutable.Buffer[String]()",
          "279:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, errorLogs.append)",
          "281:     val topicName = \"topic-\" + Uuid.randomUuid()",
          "282:     val otherName = \"other-\" + Uuid.randomUuid()",
          "283:     val literalResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.LITERAL)",
          "284:     val prefixedResource = new ResourcePattern(ResourceType.TOPIC, topicName, PatternType.PREFIXED)",
          "285:     val otherResource = new ResourcePattern(ResourceType.TOPIC, otherName, PatternType.LITERAL)",
          "288:     val acl1 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"alice\"))",
          "289:     val acl2 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"bob\"))",
          "290:     val acl3 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "291:     val acl4 = acl(topicName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
          "293:     val delta1 = new MetadataDelta(MetadataImage.EMPTY)",
          "294:     delta1.replay(acl1)",
          "295:     delta1.replay(acl2)",
          "296:     delta1.replay(acl3)",
          "297:     delta1.replay(acl4)",
          "299:     val image1 = delta1.apply(MetadataProvenance.EMPTY)",
          "300:     kraftMigrationZkWriter.handleDelta(MetadataImage.EMPTY, image1, delta1, (_, _, operation) => {",
          "301:       migrationState = operation.apply(migrationState)",
          "302:     })",
          "303:     assertEquals(4, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "304:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "305:     assertEquals(0, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "306:     assertEquals(0, errorLogs.size)",
          "308:     val acl5 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"alice\"))",
          "309:     val acl6 = acl(topicName, ResourceType.TOPIC, PatternType.PREFIXED, user(\"bob\"))",
          "310:     val acl7 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"carol\"))",
          "311:     val acl8 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"dave\"))",
          "314:     val delta2 = new MetadataDelta.Builder().setImage(image1).build()",
          "315:     delta2.replay(acl5)",
          "316:     delta2.replay(acl6)",
          "317:     delta2.replay(acl7)",
          "318:     delta2.replay(acl8)",
          "319:     delta2.replay(new RemoveAccessControlEntryRecord().setId(acl1.id()))",
          "321:     val image2 = delta2.apply(MetadataProvenance.EMPTY)",
          "322:     kraftMigrationZkWriter.handleDelta(image1, image2, delta2, (_, _, operation) => {",
          "323:       migrationState = operation.apply(migrationState)",
          "324:     })",
          "325:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "326:     assertEquals(2, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "327:     assertEquals(2, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "328:     assertEquals(0, errorLogs.size)",
          "331:     val acl9 = acl(otherName, ResourceType.TOPIC, PatternType.LITERAL, user(\"eve\"))",
          "332:     val delta3 = new MetadataDelta.Builder().setImage(image2).build()",
          "333:     delta3.replay(acl1)",
          "334:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl2.id()))",
          "335:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl5.id()))",
          "336:     delta3.replay(new RemoveAccessControlEntryRecord().setId(acl6.id()))",
          "337:     delta3.replay(acl9)",
          "339:     val image3 = delta3.apply(MetadataProvenance.EMPTY)",
          "340:     kraftMigrationZkWriter.handleDelta(image2, image3, delta3, (_, _, operation) => {",
          "341:       migrationState = operation.apply(migrationState)",
          "342:     })",
          "343:     assertEquals(3, zkClient.getVersionedAclsForResource(literalResource).acls.size)",
          "344:     assertEquals(0, zkClient.getVersionedAclsForResource(prefixedResource).acls.size)",
          "345:     assertEquals(3, zkClient.getVersionedAclsForResource(otherResource).acls.size)",
          "346:     assertEquals(0, errorLogs.size)",
          "347:   }",
          "",
          "---------------"
        ],
        "core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkConfigMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.kafka.metadata.migration.ZkMigrationLeadershipState",
          "40: import org.apache.kafka.server.common.ApiMessageAndVersion",
          "41: import org.apache.kafka.server.util.MockRandom",
          "43: import org.junit.jupiter.api.Test",
          "45: import java.util",
          "",
          "[Removed Lines]",
          "42: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue}",
          "",
          "[Added Lines]",
          "42: import org.junit.jupiter.api.Assertions.{assertEquals, assertTrue, fail}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:     val image = delta.apply(MetadataProvenance.EMPTY)",
          "329:     kraftMigrationZkWriter.handleSnapshot(image, (_, _, operation) => {",
          "330:       migrationState = operation.apply(migrationState)",
          "331:     })",
          "",
          "[Removed Lines]",
          "328:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient)",
          "",
          "[Added Lines]",
          "328:     val kraftMigrationZkWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
          "",
          "---------------"
        ],
        "core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala||core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala": [
          "File: core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala -> core/src/test/scala/unit/kafka/zk/migration/ZkMigrationClientTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   @Test",
          "270:   def testTopicAndBrokerConfigsMigrationWithSnapshots(): Unit = {",
          "274:     val topicName = \"testTopic\"",
          "",
          "[Removed Lines]",
          "271:     val kraftWriter = new KRaftMigrationZkWriter(migrationClient)",
          "",
          "[Added Lines]",
          "271:     val kraftWriter = new KRaftMigrationZkWriter(migrationClient, fail(_))",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/image/AclsDelta.java||metadata/src/main/java/org/apache/kafka/image/AclsDelta.java": [
          "File: metadata/src/main/java/org/apache/kafka/image/AclsDelta.java -> metadata/src/main/java/org/apache/kafka/image/AclsDelta.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kafka.server.common.MetadataVersion;",
          "27: import java.util.HashMap;",
          "29: import java.util.LinkedHashMap;",
          "30: import java.util.Map;",
          "31: import java.util.Map.Entry;",
          "32: import java.util.Optional;",
          "34: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "28: import java.util.HashSet;",
          "33: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: public final class AclsDelta {",
          "41:     private final AclsImage image;",
          "42:     private final Map<Uuid, Optional<StandardAcl>> changes = new LinkedHashMap<>();",
          "45:     public AclsDelta(AclsImage image) {",
          "46:         this.image = image;",
          "",
          "[Removed Lines]",
          "43:     private final Set<StandardAcl> deleted = new HashSet<>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         return changes;",
          "57:     }",
          "68:     void finishSnapshot() {",
          "69:         for (Entry<Uuid, StandardAcl> entry : image.acls().entrySet()) {",
          "70:             if (!changes.containsKey(entry.getKey())) {",
          "",
          "[Removed Lines]",
          "64:     public Set<StandardAcl> deleted() {",
          "65:         return deleted;",
          "66:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     public void replay(RemoveAccessControlEntryRecord record) {",
          "94:         if (image.acls().containsKey(record.id())) {",
          "95:             changes.put(record.id(), Optional.empty());",
          "97:         } else if (changes.containsKey(record.id())) {",
          "98:             changes.remove(record.id());",
          "",
          "[Removed Lines]",
          "96:             deleted.add(image.acls().get(record.id()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java": [
          "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationDriver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:         this.time = time;",
          "135:         LogContext logContext = new LogContext(\"[KRaftMigrationDriver id=\" + nodeId + \"] \");",
          "136:         this.controllerMetrics = controllerMetrics;",
          "138:         this.migrationState = MigrationDriverState.UNINITIALIZED;",
          "139:         this.migrationLeadershipState = ZkMigrationLeadershipState.EMPTY;",
          "140:         this.eventQueue = new KafkaEventQueue(Time.SYSTEM, logContext, \"controller-\" + nodeId + \"-migration-driver-\");",
          "",
          "[Removed Lines]",
          "137:         this.log = logContext.logger(KRaftMigrationDriver.class);",
          "",
          "[Added Lines]",
          "137:         Logger log = logContext.logger(KRaftMigrationDriver.class);",
          "138:         this.log = log;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:         this.initialZkLoadHandler = initialZkLoadHandler;",
          "145:         this.faultHandler = faultHandler;",
          "146:         this.quorumFeatures = quorumFeatures;",
          "148:         this.recordRedactor = new RecordRedactor(configSchema);",
          "149:     }",
          "",
          "[Removed Lines]",
          "147:         this.zkMetadataWriter = new KRaftMigrationZkWriter(zkMigrationClient);",
          "",
          "[Added Lines]",
          "148:         this.zkMetadataWriter = new KRaftMigrationZkWriter(zkMigrationClient, log::error);",
          "",
          "---------------"
        ],
        "metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java||metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java": [
          "File: metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java -> metadata/src/main/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: import java.util.Optional;",
          "61: import java.util.Set;",
          "62: import java.util.function.BiConsumer;",
          "63: import java.util.function.Function;",
          "66: public class KRaftMigrationZkWriter {",
          "",
          "[Removed Lines]",
          "64: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "63: import java.util.function.Consumer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     private final MigrationClient migrationClient;",
          "86:     public KRaftMigrationZkWriter(",
          "88:     ) {",
          "89:         this.migrationClient = migrationClient;",
          "90:     }",
          "92:     public void handleSnapshot(MetadataImage image, KRaftMigrationOperationConsumer operationConsumer) {",
          "",
          "[Removed Lines]",
          "87:         MigrationClient migrationClient",
          "",
          "[Added Lines]",
          "85:     private final Consumer<String> errorLogger;",
          "88:         MigrationClient migrationClient,",
          "89:         Consumer<String> errorLogger",
          "92:         this.errorLogger = errorLogger;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:             updated = true;",
          "123:         }",
          "124:         if (delta.aclsDelta() != null) {",
          "126:             updated = true;",
          "127:         }",
          "128:         if (delta.delegationTokenDelta() != null) {",
          "",
          "[Removed Lines]",
          "125:             handleAclsDelta(image.acls(), delta.aclsDelta(), operationConsumer);",
          "",
          "[Added Lines]",
          "128:             handleAclsDelta(previousImage.acls(), image.acls(), delta.aclsDelta(), operationConsumer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:         });",
          "613:     }",
          "630:         Map<ResourcePattern, List<AccessControlEntry>> aclsToWrite = new HashMap<>();",
          "639:             }",
          "640:         });",
          "646:         });",
          "648:         aclsToWrite.forEach((resourcePattern, accessControlEntries) -> {",
          "652:         });",
          "653:     }",
          "",
          "[Removed Lines]",
          "615:     void handleAclsDelta(AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
          "617:         Set<ResourcePattern> resourcesWithChangedAcls = delta.changes().values()",
          "618:             .stream()",
          "619:             .filter(Optional::isPresent)",
          "620:             .map(Optional::get)",
          "621:             .map(this::resourcePatternFromAcl)",
          "622:             .collect(Collectors.toSet());",
          "624:         Set<ResourcePattern> resourcesWithDeletedAcls = delta.deleted()",
          "625:             .stream()",
          "626:             .map(this::resourcePatternFromAcl)",
          "627:             .collect(Collectors.toSet());",
          "631:         image.acls().forEach((uuid, standardAcl) -> {",
          "632:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
          "633:             boolean removed = resourcesWithDeletedAcls.remove(resourcePattern);",
          "635:             if (resourcesWithChangedAcls.contains(resourcePattern) || removed) {",
          "636:                 aclsToWrite.computeIfAbsent(resourcePattern, __ -> new ArrayList<>()).add(",
          "637:                     new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType())",
          "638:                 );",
          "642:         resourcesWithDeletedAcls.forEach(deletedResource -> {",
          "643:             String name = \"Deleting resource \" + deletedResource + \" which has no more ACLs\";",
          "644:             operationConsumer.accept(DELETE_ACL, name, migrationState ->",
          "645:                 migrationClient.aclClient().deleteResource(deletedResource, migrationState));",
          "649:             String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
          "650:             operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
          "651:                 migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
          "",
          "[Added Lines]",
          "619:     void handleAclsDelta(AclsImage prevImage, AclsImage image, AclsDelta delta, KRaftMigrationOperationConsumer operationConsumer) {",
          "622:         delta.changes().forEach((aclId, aclChange) -> {",
          "623:             if (aclChange.isPresent()) {",
          "624:                 ResourcePattern resourcePattern = resourcePatternFromAcl(aclChange.get());",
          "625:                 aclsToWrite.put(resourcePattern, new ArrayList<>());",
          "626:             } else {",
          "628:                 StandardAcl deletedAcl = prevImage.acls().get(aclId);",
          "629:                 if (deletedAcl == null) {",
          "630:                     errorLogger.accept(\"Cannot delete ACL \" + aclId + \" from ZK since it is missing from previous AclImage\");",
          "631:                 } else {",
          "632:                     ResourcePattern resourcePattern = resourcePatternFromAcl(deletedAcl);",
          "633:                     aclsToWrite.put(resourcePattern, new ArrayList<>());",
          "634:                 }",
          "639:         image.acls().forEach((uuid, standardAcl) -> {",
          "640:             ResourcePattern resourcePattern = resourcePatternFromAcl(standardAcl);",
          "641:             List<AccessControlEntry> entries = aclsToWrite.get(resourcePattern);",
          "642:             if (entries != null) {",
          "643:                 entries.add(new AccessControlEntry(standardAcl.principal(), standardAcl.host(), standardAcl.operation(), standardAcl.permissionType()));",
          "644:             }",
          "649:             if (accessControlEntries.isEmpty()) {",
          "650:                 String name = \"Deleting resource \" + resourcePattern + \" which has no more ACLs\";",
          "651:                 operationConsumer.accept(DELETE_ACL, name, migrationState ->",
          "652:                     migrationClient.aclClient().deleteResource(resourcePattern, migrationState));",
          "653:             } else {",
          "654:                 String name = \"Writing \" + accessControlEntries.size() + \" for resource \" + resourcePattern;",
          "655:                 operationConsumer.accept(UPDATE_ACL, name, migrationState ->",
          "656:                     migrationClient.aclClient().writeResourceAcls(resourcePattern, accessControlEntries, migrationState));",
          "657:             }",
          "",
          "---------------"
        ],
        "metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java||metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java": [
          "File: metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java -> metadata/src/test/java/org/apache/kafka/metadata/migration/KRaftMigrationZkWriterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:             .setConfigMigrationClient(configClient)",
          "81:             .build();",
          "85:         MetadataImage image = new MetadataImage(",
          "86:             MetadataProvenance.EMPTY,",
          "",
          "[Removed Lines]",
          "83:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
          "",
          "[Added Lines]",
          "83:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             .setAclMigrationClient(aclClient)",
          "121:             .build();",
          "125:         MetadataImage image = new MetadataImage(",
          "126:             MetadataProvenance.EMPTY,",
          "",
          "[Removed Lines]",
          "123:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
          "",
          "[Added Lines]",
          "123:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:             .setAclMigrationClient(aclClient)",
          "180:             .build();",
          "184:         MetadataImage image = new MetadataImage(",
          "185:             MetadataProvenance.EMPTY,",
          "",
          "[Removed Lines]",
          "182:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient);",
          "",
          "[Added Lines]",
          "182:         KRaftMigrationZkWriter writer = new KRaftMigrationZkWriter(migrationClient, __ -> { });",
          "",
          "---------------"
        ]
      }
    }
  ]
}