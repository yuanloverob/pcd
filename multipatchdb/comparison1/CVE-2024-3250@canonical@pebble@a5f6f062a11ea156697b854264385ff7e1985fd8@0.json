{
  "cve_id": "CVE-2024-3250",
  "cve_desc": "It was discovered that Canonical's Pebble service manager read-file API and the associated pebble pull command, before v1.10.2, allowed unprivileged local users to read files with root-equivalent permissions when Pebble was running as root. Fixes are also available as backports to v1.1.1, v1.4.2, and v1.7.4.",
  "repo": "canonical/pebble",
  "patch_hash": "a5f6f062a11ea156697b854264385ff7e1985fd8",
  "patch_info": {
    "commit_hash": "a5f6f062a11ea156697b854264385ff7e1985fd8",
    "repo": "canonical/pebble",
    "commit_url": "https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8",
    "files": [
      "internals/daemon/api.go",
      "internals/daemon/daemon_test.go"
    ],
    "message": "fix(daemon): require admin access for POSTs and file pull API (#406)\n\nMost of this was introduced in PR #358, when we ported the AccessChecker\nchanges from snapd, but accidentally set all the WriteAccess fields to\nUserAccess{} instead of AdminAccess{}. Previously there was a\nr.Method==\"GET\" check in Command.canAccess that handled this case.\n\nAdditionally:\n\n- We lock down the files \"pull\" API to require admin. Even though it's a\nread (GET), this meant any user could potentially read sensitive files.\n- We lock down the task-websocket endpoint to admin. This is a GET\nendpoint, but these websockets are used by exec to send stdin/out/err\nand commands to the exec'd process, so they should require admin too.\n\nI've added some tests for these to ensure we don't accidentally change\nthem in future, without noticing. How valuable these tests are I'm not\nsure, as they only cover a subset of the API endpoints, but it seems\nbetter than nothing.",
    "before_after_code_files": [
      "internals/daemon/api.go||internals/daemon/api.go",
      "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
    ]
  },
  "patch_diff": {
    "internals/daemon/api.go||internals/daemon/api.go": [
      "File: internals/daemon/api.go -> internals/daemon/api.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: }, {",
      "36:  Path:        \"/v1/warnings\",",
      "37:  ReadAccess:  UserAccess{},",
      "39:  GET:         v1GetWarnings,",
      "40:  POST:        v1AckWarnings,",
      "41: }, {",
      "",
      "[Removed Lines]",
      "38:  WriteAccess: UserAccess{},",
      "",
      "[Added Lines]",
      "38:  WriteAccess: AdminAccess{},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45: }, {",
      "46:  Path:        \"/v1/changes/{id}\",",
      "47:  ReadAccess:  UserAccess{},",
      "49:  GET:         v1GetChange,",
      "50:  POST:        v1PostChange,",
      "51: }, {",
      "",
      "[Removed Lines]",
      "48:  WriteAccess: UserAccess{},",
      "",
      "[Added Lines]",
      "48:  WriteAccess: AdminAccess{},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55: }, {",
      "56:  Path:        \"/v1/services\",",
      "57:  ReadAccess:  UserAccess{},",
      "59:  GET:         v1GetServices,",
      "60:  POST:        v1PostServices,",
      "61: }, {",
      "62:  Path:        \"/v1/services/{name}\",",
      "63:  ReadAccess:  UserAccess{},",
      "65:  GET:         v1GetService,",
      "66:  POST:        v1PostService,",
      "67: }, {",
      "",
      "[Removed Lines]",
      "58:  WriteAccess: UserAccess{},",
      "64:  WriteAccess: UserAccess{},",
      "",
      "[Added Lines]",
      "58:  WriteAccess: AdminAccess{},",
      "64:  WriteAccess: AdminAccess{},",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "70:  GET:        v1GetPlan,",
      "71: }, {",
      "72:  Path:        \"/v1/layers\",",
      "74:  POST:        v1PostLayers,",
      "75: }, {",
      "76:  Path:        \"/v1/files\",",
      "79:  GET:         v1GetFiles,",
      "80:  POST:        v1PostFiles,",
      "81: }, {",
      "",
      "[Removed Lines]",
      "73:  WriteAccess: UserAccess{},",
      "77:  ReadAccess:  UserAccess{},",
      "78:  WriteAccess: UserAccess{},",
      "",
      "[Added Lines]",
      "73:  WriteAccess: AdminAccess{},",
      "77:  ReadAccess:  AdminAccess{}, // some files are sensitive, so require admin",
      "78:  WriteAccess: AdminAccess{},",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "84:  GET:        v1GetLogs,",
      "85: }, {",
      "86:  Path:        \"/v1/exec\",",
      "88:  POST:        v1PostExec,",
      "89: }, {",
      "90:  Path:       \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
      "92:  GET:        v1GetTaskWebsocket,",
      "93: }, {",
      "94:  Path:        \"/v1/signals\",",
      "96:  POST:        v1PostSignals,",
      "97: }, {",
      "98:  Path:       \"/v1/checks\",",
      "",
      "[Removed Lines]",
      "87:  WriteAccess: UserAccess{},",
      "91:  ReadAccess: UserAccess{},",
      "95:  WriteAccess: UserAccess{},",
      "",
      "[Added Lines]",
      "87:  WriteAccess: AdminAccess{},",
      "91:  ReadAccess: AdminAccess{}, // used by exec, so require admin",
      "95:  WriteAccess: AdminAccess{},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "101: }, {",
      "102:  Path:        \"/v1/notices\",",
      "103:  ReadAccess:  UserAccess{},",
      "105:  GET:         v1GetNotices,",
      "106:  POST:        v1PostNotices,",
      "107: }, {",
      "",
      "[Removed Lines]",
      "104:  WriteAccess: UserAccess{},",
      "",
      "[Added Lines]",
      "104:  WriteAccess: UserAccess{}, // any user is allowed to add a notice with their own uid",
      "",
      "---------------"
    ],
    "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go": [
      "File: internals/daemon/daemon_test.go -> internals/daemon/daemon_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:  \"net\"",
      "23:  \"net/http\"",
      "24:  \"net/http/httptest\"",
      "25:  \"os\"",
      "26:  \"path/filepath\"",
      "27:  \"sync\"",
      "28:  \"syscall\"",
      "29:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:  \"net/url\"",
      "28:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1248:  c.Check(tasks[0].Kind(), Equals, \"stop\")",
      "1249: }",
      "1251: type rebootSuite struct{}",
      "1253: var _ = Suite(&rebootSuite{})",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1253: func (s *daemonSuite) TestWritesRequireAdminAccess(c *C) {",
      "1254:  for _, cmd := range API {",
      "1255:   if cmd.Path == \"/v1/notices\" {",
      "1257:    continue",
      "1258:   }",
      "1259:   switch cmd.WriteAccess.(type) {",
      "1260:   case OpenAccess, UserAccess:",
      "1261:    c.Errorf(\"%s WriteAccess should be AdminAccess, not %T\", cmd.Path, cmd.WriteAccess)",
      "1262:   }",
      "1263:  }",
      "1266:  cmd := apiCmd(\"/v1/files\")",
      "1267:  switch cmd.ReadAccess.(type) {",
      "1268:  case OpenAccess, UserAccess:",
      "1269:   c.Errorf(\"%s ReadAccess should be AdminAccess, not %T\", cmd.Path, cmd.WriteAccess)",
      "1270:  }",
      "1273:  cmd = apiCmd(\"/v1/tasks/{task-id}/websocket/{websocket-id}\")",
      "1274:  switch cmd.ReadAccess.(type) {",
      "1275:  case OpenAccess, UserAccess:",
      "1276:   c.Errorf(\"%s ReadAccess should be AdminAccess, not %T\", cmd.Path, cmd.WriteAccess)",
      "1277:  }",
      "1278: }",
      "1280: func (s *daemonSuite) TestAPIAccessLevels(c *C) {",
      "1281:  _ = s.newDaemon(c)",
      "1283:  tests := []struct {",
      "1284:   method string",
      "1285:   path   string",
      "1286:   body   string",
      "1287:   uid    int // -1 means no peer cred user",
      "1288:   status int",
      "1289:  }{",
      "1290:   {\"GET\", \"/v1/system-info\", ``, -1, http.StatusOK},",
      "1292:   {\"GET\", \"/v1/health\", ``, -1, http.StatusOK},",
      "1294:   {\"GET\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
      "1295:   {\"GET\", \"/v1/warnings\", ``, 42, http.StatusOK},",
      "1296:   {\"GET\", \"/v1/warnings\", ``, 0, http.StatusOK},",
      "1297:   {\"POST\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
      "1298:   {\"POST\", \"/v1/warnings\", ``, 42, http.StatusUnauthorized},",
      "1299:   {\"POST\", \"/v1/warnings\", ``, 0, http.StatusBadRequest},",
      "1301:   {\"GET\", \"/v1/changes\", ``, -1, http.StatusUnauthorized},",
      "1302:   {\"GET\", \"/v1/changes\", ``, 42, http.StatusOK},",
      "1303:   {\"GET\", \"/v1/changes\", ``, 0, http.StatusOK},",
      "1305:   {\"GET\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
      "1306:   {\"GET\", \"/v1/services\", ``, 42, http.StatusOK},",
      "1307:   {\"GET\", \"/v1/services\", ``, 0, http.StatusOK},",
      "1308:   {\"POST\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
      "1309:   {\"POST\", \"/v1/services\", ``, 42, http.StatusUnauthorized},",
      "1310:   {\"POST\", \"/v1/services\", ``, 0, http.StatusBadRequest},",
      "1312:   {\"POST\", \"/v1/layers\", ``, -1, http.StatusUnauthorized},",
      "1313:   {\"POST\", \"/v1/layers\", ``, 42, http.StatusUnauthorized},",
      "1314:   {\"POST\", \"/v1/layers\", ``, 0, http.StatusBadRequest},",
      "1316:   {\"GET\", \"/v1/files?action=list&path=/\", ``, -1, http.StatusUnauthorized},",
      "1317:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 42, http.StatusUnauthorized}, // even reading files requires admin",
      "1318:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 0, http.StatusOK},",
      "1319:   {\"POST\", \"/v1/files\", `{}`, -1, http.StatusUnauthorized},",
      "1320:   {\"POST\", \"/v1/files\", `{}`, 42, http.StatusUnauthorized},",
      "1321:   {\"POST\", \"/v1/files\", `{}`, 0, http.StatusBadRequest},",
      "1323:   {\"GET\", \"/v1/logs\", ``, -1, http.StatusUnauthorized},",
      "1324:   {\"GET\", \"/v1/logs\", ``, 42, http.StatusOK},",
      "1325:   {\"GET\", \"/v1/logs\", ``, 0, http.StatusOK},",
      "1327:   {\"POST\", \"/v1/exec\", `{}`, -1, http.StatusUnauthorized},",
      "1328:   {\"POST\", \"/v1/exec\", `{}`, 42, http.StatusUnauthorized},",
      "1329:   {\"POST\", \"/v1/exec\", `{}`, 0, http.StatusBadRequest},",
      "1331:   {\"POST\", \"/v1/signals\", `{}`, -1, http.StatusUnauthorized},",
      "1332:   {\"POST\", \"/v1/signals\", `{}`, 42, http.StatusUnauthorized},",
      "1333:   {\"POST\", \"/v1/signals\", `{}`, 0, http.StatusBadRequest},",
      "1335:   {\"GET\", \"/v1/checks\", ``, -1, http.StatusUnauthorized},",
      "1336:   {\"GET\", \"/v1/checks\", ``, 42, http.StatusOK},",
      "1337:   {\"GET\", \"/v1/checks\", ``, 0, http.StatusOK},",
      "1339:   {\"GET\", \"/v1/notices\", ``, -1, http.StatusUnauthorized},",
      "1340:   {\"GET\", \"/v1/notices\", ``, 42, http.StatusOK},",
      "1341:   {\"GET\", \"/v1/notices\", ``, 0, http.StatusOK},",
      "1342:   {\"POST\", \"/v1/notices\", `{}`, -1, http.StatusUnauthorized},",
      "1343:   {\"POST\", \"/v1/notices\", `{}`, 42, http.StatusBadRequest},",
      "1344:   {\"POST\", \"/v1/notices\", `{}`, 0, http.StatusBadRequest},",
      "1345:  }",
      "1347:  for _, test := range tests {",
      "1348:   remoteAddr := \"\"",
      "1349:   if test.uid >= 0 {",
      "1350:    remoteAddr = fmt.Sprintf(\"pid=100;uid=%d;socket=;\", test.uid)",
      "1351:   }",
      "1352:   requestURL, err := url.Parse(\"http://localhost\" + test.path)",
      "1353:   c.Assert(err, IsNil)",
      "1354:   request := &http.Request{",
      "1355:    Method:     test.method,",
      "1356:    URL:        requestURL,",
      "1357:    Body:       io.NopCloser(strings.NewReader(test.body)),",
      "1358:    RemoteAddr: remoteAddr,",
      "1359:   }",
      "1360:   recorder := httptest.NewRecorder()",
      "1361:   cmd := apiCmd(requestURL.Path)",
      "1362:   cmd.ServeHTTP(recorder, request)",
      "1364:   response := recorder.Result()",
      "1365:   if response.StatusCode != test.status {",
      "1367:    c.Logf(\"%s %s uid=%d: expected %d, got %d; response body:\\n%s\",",
      "1368:     test.method, test.path, test.uid, test.status, response.StatusCode, recorder.Body.String())",
      "1369:   }",
      "1370:   c.Assert(response.StatusCode, Equals, test.status)",
      "1371:  }",
      "1372: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a139ff8fc3d7bc825883e125920f75a64b2dc9c",
      "candidate_info": {
        "commit_hash": "7a139ff8fc3d7bc825883e125920f75a64b2dc9c",
        "repo": "canonical/pebble",
        "commit_url": "https://github.com/canonical/pebble/commit/7a139ff8fc3d7bc825883e125920f75a64b2dc9c",
        "files": [
          "internals/daemon/daemon.go",
          "internals/daemon/daemon_test.go"
        ],
        "message": "chore(daemon): remove untrusted socket (#361)\n\nAs part of working on #358, we found out that the untrusted socket is not used, and so can be removed (in preparation for porting the `AccessChecker` changes from snapd in https://github.com/canonical/pebble/pull/358).\n\n**Indicators that it's not used:**\n\nIf we look at how `canAccess` works, if we match on `untrustedSocketPath` (`isUntrusted`), the only way for `canAccess` to allow the request is when `c.UntrustedOK` is `true` (otherwise it unconditionally returns `accessUnauthorized` immediately):\n\n```golang\nif isUntrusted {\n\tif c.UntrustedOK {\n\t\treturn accessOK\n\t}\n\treturn accessUnauthorized\n}\n```\n\nSo in order for any API calls to be allowed with the untrusted socket (assuming all API calls go through `canAccess`), we would need to have a `Command` defined with `UntrustedOK: true`. Checking the Pebble codebase, no such `Command` definition exists, which means that even if any application would use the untrusted socket currently, all API calls would return `accessUnauthorized` unconditionally for this socket.\n\nThe untrusted socket as well as `UntrustedOK` in `Command` were already part of the initial import commit (50466bab893615147372361c78d4c48102daa07f), so seem to be an inheritance from snapd that haven't seen use in Pebble since then. The corresponding [snapd sources from around November 10th, 2020](https://github.com/snapcore/snapd/tree/e2581af241a941856a755035d816047ff9aa15d8) seem to call these [`SnapOK`](https://github.com/snapcore/snapd/blob/e2581af241a941856a755035d816047ff9aa15d8/daemon/daemon.go#L139) (`UntrustedOK`), [`dirs.SnapSocket`](https://github.com/snapcore/snapd/blob/e2581af241a941856a755035d816047ff9aa15d8/daemon/daemon.go#L160C23-L160C38) (`untrustedSocketPath`) and [`snapListener`](https://github.com/snapcore/snapd/blob/489358223f0bd03da01e62a4062174eb7e9e0ffa/daemon/daemon.go#L72) (`untrustedListener`).\n\nDue to `gofmt` and removal of struct members with the longest names, this PR is best reviewed with the \"hide whitespace\" option.",
        "before_after_code_files": [
          "internals/daemon/daemon.go||internals/daemon/daemon.go",
          "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ],
          "candidate": [
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internals/daemon/daemon.go||internals/daemon/daemon.go": [
          "File: internals/daemon/daemon.go -> internals/daemon/daemon.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: type Daemon struct {",
          "102:  requestedRestart restart.RestartType",
          "",
          "[Removed Lines]",
          "84:  Version             string",
          "85:  StartTime           time.Time",
          "86:  pebbleDir           string",
          "87:  normalSocketPath    string",
          "88:  untrustedSocketPath string",
          "89:  httpAddress         string",
          "90:  overlord            *overlord.Overlord",
          "91:  state               *state.State",
          "92:  generalListener     net.Listener",
          "93:  untrustedListener   net.Listener",
          "94:  httpListener        net.Listener",
          "95:  connTracker         *connTracker",
          "96:  serve               *http.Server",
          "97:  tomb                tomb.Tomb",
          "98:  router              *mux.Router",
          "99:  standbyOpinions     *standby.StandbyOpinions",
          "",
          "[Added Lines]",
          "84:  Version          string",
          "85:  StartTime        time.Time",
          "86:  pebbleDir        string",
          "87:  normalSocketPath string",
          "88:  httpAddress      string",
          "89:  overlord         *overlord.Overlord",
          "90:  state            *state.State",
          "91:  generalListener  net.Listener",
          "92:  httpListener     net.Listener",
          "93:  connTracker      *connTracker",
          "94:  serve            *http.Server",
          "95:  tomb             tomb.Tomb",
          "96:  router           *mux.Router",
          "97:  standbyOpinions  *standby.StandbyOpinions",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  Path       string",
          "124:  PathPrefix string",
          "135:  d *Daemon",
          "136: }",
          "",
          "[Removed Lines]",
          "126:  GET         ResponseFunc",
          "127:  PUT         ResponseFunc",
          "128:  POST        ResponseFunc",
          "129:  DELETE      ResponseFunc",
          "130:  GuestOK     bool",
          "131:  UserOK      bool",
          "132:  UntrustedOK bool",
          "133:  AdminOnly   bool",
          "",
          "[Added Lines]",
          "124:  GET       ResponseFunc",
          "125:  PUT       ResponseFunc",
          "126:  POST      ResponseFunc",
          "127:  DELETE    ResponseFunc",
          "128:  GuestOK   bool",
          "129:  UserOK    bool",
          "130:  AdminOnly bool",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: func (c *Command) canAccess(r *http.Request, user *UserState) accessResult {",
          "159:   logger.Panicf(\"internal error: command cannot have AdminOnly together with any *OK flag\")",
          "160:  }",
          "",
          "[Removed Lines]",
          "158:  if c.AdminOnly && (c.UserOK || c.GuestOK || c.UntrustedOK) {",
          "",
          "[Added Lines]",
          "154:  if c.AdminOnly && (c.UserOK || c.GuestOK) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:   return accessForbidden",
          "175:  }",
          "187:  if r.Method == \"GET\" && !c.AdminOnly {",
          "",
          "[Removed Lines]",
          "177:  isUntrusted := (ucred != nil && ucred.Socket == c.d.untrustedSocketPath)",
          "179:  if isUntrusted {",
          "180:   if c.UntrustedOK {",
          "181:    return accessOK",
          "182:   }",
          "183:   return accessUnauthorized",
          "184:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:   return fmt.Errorf(\"when trying to listen on %s: %v\", d.normalSocketPath, err)",
          "370:  }",
          "380:  d.addRoutes()",
          "382:  if d.httpAddress != \"\" {",
          "",
          "[Removed Lines]",
          "372:  if listener, err := getListener(d.untrustedSocketPath, listenerMap); err == nil {",
          "375:   d.untrustedListener = &ucrednetListener{Listener: listener}",
          "376:  } else {",
          "377:   logger.Debugf(\"cannot get listener for %q: %v\", d.untrustedSocketPath, err)",
          "378:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "489:  d.overlord.Loop()",
          "491:  d.tomb.Go(func() error {",
          "500:   if err := d.serve.Serve(d.generalListener); err != http.ErrServerClosed && d.tomb.Err() == tomb.ErrStillAlive {",
          "501:    return err",
          "502:   }",
          "",
          "[Removed Lines]",
          "492:   if d.untrustedListener != nil {",
          "493:    d.tomb.Go(func() error {",
          "494:     if err := d.serve.Serve(d.untrustedListener); err != http.ErrServerClosed && d.tomb.Err() == tomb.ErrStillAlive {",
          "495:      return err",
          "496:     }",
          "497:     return nil",
          "498:    })",
          "499:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "854: func New(opts *Options) (*Daemon, error) {",
          "855:  d := &Daemon{",
          "860:  }",
          "862:  ovldOptions := overlord.Options{",
          "",
          "[Removed Lines]",
          "856:   pebbleDir:           opts.Dir,",
          "857:   normalSocketPath:    opts.SocketPath,",
          "858:   untrustedSocketPath: opts.SocketPath + \".untrusted\",",
          "859:   httpAddress:         opts.HTTPAddress,",
          "",
          "[Added Lines]",
          "827:   pebbleDir:        opts.Dir,",
          "828:   normalSocketPath: opts.SocketPath,",
          "829:   httpAddress:      opts.HTTPAddress,",
          "",
          "---------------"
        ],
        "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go": [
          "File: internals/daemon/daemon_test.go -> internals/daemon/daemon_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:  info, err := os.Stat(s.socketPath)",
          "205:  c.Assert(err, IsNil)",
          "206:  c.Assert(info.Mode(), Equals, os.ModeSocket|0666)",
          "211: }",
          "213: func (s *daemonSuite) TestCommandMethodDispatch(c *C) {",
          "",
          "[Removed Lines]",
          "208:  info, err = os.Stat(s.socketPath + \".untrusted\")",
          "209:  c.Assert(err, IsNil)",
          "210:  c.Assert(info.Mode(), Equals, os.ModeSocket|0666)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:  c.Check(cmd.canAccess(del, nil), Equals, accessUnauthorized)",
          "371: }",
          "405: func (s *daemonSuite) TestUserAccess(c *C) {",
          "406:  d := s.newDaemon(c)",
          "",
          "[Removed Lines]",
          "373: func (s *daemonSuite) TestUntrustedAccessUntrustedOKWithUser(c *C) {",
          "374:  d := s.newDaemon(c)",
          "376:  remoteAddr := \"pid=100;uid=1000;socket=\" + d.untrustedSocketPath + \";\"",
          "377:  get := &http.Request{Method: \"GET\", RemoteAddr: remoteAddr}",
          "378:  put := &http.Request{Method: \"PUT\", RemoteAddr: remoteAddr}",
          "379:  pst := &http.Request{Method: \"POST\", RemoteAddr: remoteAddr}",
          "380:  del := &http.Request{Method: \"DELETE\", RemoteAddr: remoteAddr}",
          "382:  cmd := &Command{d: d, UntrustedOK: true}",
          "383:  c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "384:  c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "385:  c.Check(cmd.canAccess(pst, nil), Equals, accessOK)",
          "386:  c.Check(cmd.canAccess(del, nil), Equals, accessOK)",
          "387: }",
          "389: func (s *daemonSuite) TestUntrustedAccessUntrustedOKWithRoot(c *C) {",
          "390:  d := s.newDaemon(c)",
          "392:  remoteAddr := \"pid=100;uid=0;socket=\" + d.untrustedSocketPath + \";\"",
          "393:  get := &http.Request{Method: \"GET\", RemoteAddr: remoteAddr}",
          "394:  put := &http.Request{Method: \"PUT\", RemoteAddr: remoteAddr}",
          "395:  pst := &http.Request{Method: \"POST\", RemoteAddr: remoteAddr}",
          "396:  del := &http.Request{Method: \"DELETE\", RemoteAddr: remoteAddr}",
          "398:  cmd := &Command{d: d, UntrustedOK: true}",
          "399:  c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "400:  c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "401:  c.Check(cmd.canAccess(pst, nil), Equals, accessOK)",
          "402:  c.Check(cmd.canAccess(del, nil), Equals, accessOK)",
          "403: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:  cmd = &Command{d: d, GuestOK: true}",
          "424:  c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "425:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "433: }",
          "435: func (s *daemonSuite) TestLoggedInUserAccess(c *C) {",
          "",
          "[Removed Lines]",
          "430:  cmd = &Command{d: d, UntrustedOK: true}",
          "431:  c.Check(cmd.canAccess(get, nil), Equals, accessUnauthorized)",
          "432:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "454:  cmd = &Command{d: d, GuestOK: true}",
          "455:  c.Check(cmd.canAccess(get, user), Equals, accessOK)",
          "456:  c.Check(cmd.canAccess(put, user), Equals, accessOK)",
          "461: }",
          "463: func (s *daemonSuite) TestSuperAccess(c *C) {",
          "",
          "[Removed Lines]",
          "458:  cmd = &Command{d: d, UntrustedOK: true}",
          "459:  c.Check(cmd.canAccess(get, user), Equals, accessOK)",
          "460:  c.Check(cmd.canAccess(put, user), Equals, accessOK)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "483:   cmd = &Command{d: d, GuestOK: true}",
          "484:   c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "485:   c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "490:  }",
          "491: }",
          "",
          "[Removed Lines]",
          "487:   cmd = &Command{d: d, UntrustedOK: true}",
          "488:   c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "489:   c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "546:  l1, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "547:  c.Assert(err, IsNil)",
          "551:  generalAccept := make(chan struct{})",
          "552:  d.generalListener = &witnessAcceptListener{Listener: l1, accept: generalAccept}",
          "557:  c.Assert(d.Start(), IsNil)",
          "559:  generalDone := make(chan struct{})",
          "",
          "[Removed Lines]",
          "548:  l2, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "549:  c.Assert(err, IsNil)",
          "554:  untrustedAccept := make(chan struct{})",
          "555:  d.untrustedListener = &witnessAcceptListener{Listener: l2, accept: untrustedAccept}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:   close(generalDone)",
          "567:  }()",
          "579:  <-generalDone",
          "582:  err = d.Stop(nil)",
          "583:  c.Check(err, IsNil)",
          "",
          "[Removed Lines]",
          "569:  untrustedDone := make(chan struct{})",
          "570:  go func() {",
          "571:   select {",
          "572:   case <-untrustedAccept:",
          "573:   case <-time.After(2 * time.Second):",
          "574:    c.Fatal(\"untrusted listener accept was not called\")",
          "575:   }",
          "576:   close(untrustedDone)",
          "577:  }()",
          "580:  <-untrustedDone",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "592:  generalAccept := make(chan struct{})",
          "593:  d.generalListener = &witnessAcceptListener{Listener: l, accept: generalAccept}",
          "598:  c.Assert(d.Start(), IsNil)",
          "599:  defer d.Stop(nil)",
          "",
          "[Removed Lines]",
          "595:  untrustedAccept := make(chan struct{})",
          "596:  d.untrustedListener = &witnessAcceptListener{Listener: l, accept: untrustedAccept}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "608:   close(generalDone)",
          "609:  }()",
          "621:  <-generalDone",
          "624:  st := d.overlord.State()",
          "625:  st.Lock()",
          "",
          "[Removed Lines]",
          "611:  untrustedDone := make(chan struct{})",
          "612:  go func() {",
          "613:   select {",
          "614:   case <-untrustedAccept:",
          "615:   case <-time.After(2 * time.Second):",
          "616:    c.Fatal(\"untrusted accept was not called\")",
          "617:   }",
          "618:   close(untrustedDone)",
          "619:  }()",
          "622:  <-untrustedDone",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652:  generalL, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "653:  c.Assert(err, IsNil)",
          "658:  generalAccept := make(chan struct{})",
          "659:  generalClosed := make(chan struct{})",
          "660:  d.generalListener = &witnessAcceptListener{Listener: generalL, accept: generalAccept, closed: generalClosed}",
          "665:  c.Assert(d.Start(), IsNil)",
          "667:  generalAccepting := make(chan struct{})",
          "",
          "[Removed Lines]",
          "655:  untrustedL, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "656:  c.Assert(err, IsNil)",
          "662:  untrustedAccept := make(chan struct{})",
          "663:  d.untrustedListener = &witnessAcceptListener{Listener: untrustedL, accept: untrustedAccept}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "674:   close(generalAccepting)",
          "675:  }()",
          "687:  <-generalAccepting",
          "690:  alright := make(chan struct{})",
          "",
          "[Removed Lines]",
          "677:  untrustedAccepting := make(chan struct{})",
          "678:  go func() {",
          "679:   select {",
          "680:   case <-untrustedAccept:",
          "681:   case <-time.After(2 * time.Second):",
          "682:    c.Fatal(\"general accept was not called\")",
          "683:   }",
          "684:   close(untrustedAccepting)",
          "685:  }()",
          "688:  <-untrustedAccepting",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "726:  generalAccept := make(chan struct{})",
          "727:  d.generalListener = &witnessAcceptListener{Listener: l, accept: generalAccept}",
          "732:  c.Assert(d.Start(), IsNil)",
          "733:  defer d.Stop(nil)",
          "",
          "[Removed Lines]",
          "729:  untrustedAccept := make(chan struct{})",
          "730:  d.untrustedListener = &witnessAcceptListener{Listener: l, accept: untrustedAccept}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "744:   close(generalDone)",
          "745:  }()",
          "757:  <-generalDone",
          "760:  oldRebootNoticeWait := rebootNoticeWait",
          "761:  oldRebootWaitTimeout := rebootWaitTimeout",
          "",
          "[Removed Lines]",
          "747:  untrustedDone := make(chan struct{})",
          "748:  go func() {",
          "749:   select {",
          "750:   case <-untrustedAccept:",
          "751:   case <-time.After(2 * time.Second):",
          "752:    c.Fatal(\"untrusted accept was not called\")",
          "753:   }",
          "754:   close(untrustedDone)",
          "755:  }()",
          "758:  <-untrustedDone",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "849:  generalL, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "850:  c.Assert(err, IsNil)",
          "855:  generalAccept := make(chan struct{})",
          "856:  generalClosed := make(chan struct{})",
          "857:  d.generalListener = &witnessAcceptListener{Listener: generalL, accept: generalAccept, closed: generalClosed}",
          "861: }",
          "",
          "[Removed Lines]",
          "852:  untrustedL, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",
          "853:  c.Assert(err, IsNil)",
          "859:  untrustedAccept := make(chan struct{})",
          "860:  d.untrustedListener = &witnessAcceptListener{Listener: untrustedL, accept: untrustedAccept}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "150cb9fe962c33856fa8839afbdc8d7ae27e4638",
      "candidate_info": {
        "commit_hash": "150cb9fe962c33856fa8839afbdc8d7ae27e4638",
        "repo": "canonical/pebble",
        "commit_url": "https://github.com/canonical/pebble/commit/150cb9fe962c33856fa8839afbdc8d7ae27e4638",
        "files": [
          "internals/daemon/access.go",
          "internals/daemon/access_test.go",
          "internals/daemon/api.go",
          "internals/daemon/api_test.go",
          "internals/daemon/daemon.go",
          "internals/daemon/daemon_test.go",
          "internals/daemon/ucrednet.go"
        ],
        "message": "chore(daemon): port AccessChecker interface from snapd (#358)\n\nPort the `accessChecker` API from snapd for easier customization and more fine-grained access control.",
        "before_after_code_files": [
          "internals/daemon/access.go||internals/daemon/access.go",
          "internals/daemon/access_test.go||internals/daemon/access_test.go",
          "internals/daemon/api.go||internals/daemon/api.go",
          "internals/daemon/api_test.go||internals/daemon/api_test.go",
          "internals/daemon/daemon.go||internals/daemon/daemon.go",
          "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go",
          "internals/daemon/ucrednet.go||internals/daemon/ucrednet.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "internals/daemon/api.go||internals/daemon/api.go",
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ],
          "candidate": [
            "internals/daemon/api.go||internals/daemon/api.go",
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internals/daemon/access.go||internals/daemon/access.go": [
          "File: internals/daemon/access.go -> internals/daemon/access.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package daemon",
          "17: import (",
          "18:  \"net/http\"",
          "19:  \"os\"",
          "20: )",
          "23: type AccessChecker interface {",
          "27:  CheckAccess(d *Daemon, r *http.Request, ucred *Ucrednet, user *UserState) Response",
          "28: }",
          "31: type OpenAccess struct{}",
          "33: func (ac OpenAccess) CheckAccess(d *Daemon, r *http.Request, ucred *Ucrednet, user *UserState) Response {",
          "34:  return nil",
          "35: }",
          "38: type AdminAccess struct{}",
          "40: func (ac AdminAccess) CheckAccess(d *Daemon, r *http.Request, ucred *Ucrednet, user *UserState) Response {",
          "41:  if ucred != nil && (ucred.Uid == 0 || ucred.Uid == uint32(os.Getuid())) {",
          "42:   return nil",
          "43:  }",
          "44:  return Unauthorized(\"access denied\")",
          "45: }",
          "48: type UserAccess struct{}",
          "50: func (ac UserAccess) CheckAccess(d *Daemon, r *http.Request, ucred *Ucrednet, user *UserState) Response {",
          "51:  if ucred == nil {",
          "52:   return Unauthorized(\"access denied\")",
          "53:  }",
          "54:  return nil",
          "55: }",
          "",
          "---------------"
        ],
        "internals/daemon/access_test.go||internals/daemon/access_test.go": [
          "File: internals/daemon/access_test.go -> internals/daemon/access_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package daemon_test",
          "17: import (",
          "18:  \"os\"",
          "20:  . \"gopkg.in/check.v1\"",
          "22:  \"github.com/canonical/pebble/internals/daemon\"",
          "23: )",
          "25: type accessSuite struct {",
          "26: }",
          "28: var _ = Suite(&accessSuite{})",
          "30: var errUnauthorized = daemon.Unauthorized(\"access denied\")",
          "32: func (s *accessSuite) TestOpenAccess(c *C) {",
          "33:  var ac daemon.AccessChecker = daemon.OpenAccess{}",
          "36:  c.Check(ac.CheckAccess(nil, nil, nil, nil), IsNil)",
          "39:  ucred := &daemon.Ucrednet{Uid: 42, Pid: 100}",
          "40:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), IsNil)",
          "43:  ucred = &daemon.Ucrednet{Uid: 0, Pid: 100}",
          "44:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), IsNil)",
          "45: }",
          "47: func (s *accessSuite) TestUserAccess(c *C) {",
          "48:  var ac daemon.AccessChecker = daemon.UserAccess{}",
          "51:  c.Check(ac.CheckAccess(nil, nil, nil, nil), DeepEquals, errUnauthorized)",
          "54:  ucred := &daemon.Ucrednet{Uid: 0, Pid: 100}",
          "55:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), IsNil)",
          "58:  ucred = &daemon.Ucrednet{Uid: 42, Pid: 100}",
          "59:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), IsNil)",
          "60: }",
          "62: func (s *accessSuite) TestAdminAccess(c *C) {",
          "63:  var ac daemon.AccessChecker = daemon.AdminAccess{}",
          "66:  c.Check(ac.CheckAccess(nil, nil, nil, nil), DeepEquals, errUnauthorized)",
          "69:  uid := uint32(os.Getuid())",
          "72:  ucred := &daemon.Ucrednet{Uid: uid + 1, Pid: 100}",
          "73:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), DeepEquals, errUnauthorized)",
          "76:  ucred = &daemon.Ucrednet{Uid: uid, Pid: 100}",
          "77:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), IsNil)",
          "80:  ucred = &daemon.Ucrednet{Uid: 0, Pid: 100}",
          "81:  c.Check(ac.CheckAccess(nil, nil, ucred, nil), IsNil)",
          "82: }",
          "",
          "---------------"
        ],
        "internals/daemon/api.go||internals/daemon/api.go": [
          "File: internals/daemon/api.go -> internals/daemon/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: )",
          "27: var API = []*Command{{",
          "106: }}",
          "108: var (",
          "",
          "[Removed Lines]",
          "29:  Path:    \"/v1/system-info\",",
          "30:  GuestOK: true,",
          "31:  GET:     v1SystemInfo,",
          "32: }, {",
          "33:  Path:    \"/v1/health\",",
          "34:  GuestOK: true,",
          "35:  GET:     v1Health,",
          "36: }, {",
          "37:  Path:   \"/v1/warnings\",",
          "38:  UserOK: true,",
          "39:  GET:    v1GetWarnings,",
          "40:  POST:   v1AckWarnings,",
          "41: }, {",
          "42:  Path:   \"/v1/changes\",",
          "43:  UserOK: true,",
          "44:  GET:    v1GetChanges,",
          "45: }, {",
          "46:  Path:   \"/v1/changes/{id}\",",
          "47:  UserOK: true,",
          "48:  GET:    v1GetChange,",
          "49:  POST:   v1PostChange,",
          "50: }, {",
          "51:  Path:   \"/v1/changes/{id}/wait\",",
          "52:  UserOK: true,",
          "53:  GET:    v1GetChangeWait,",
          "54: }, {",
          "55:  Path:   \"/v1/services\",",
          "56:  UserOK: true,",
          "57:  GET:    v1GetServices,",
          "58:  POST:   v1PostServices,",
          "59: }, {",
          "60:  Path:   \"/v1/services/{name}\",",
          "61:  UserOK: true,",
          "62:  GET:    v1GetService,",
          "63:  POST:   v1PostService,",
          "64: }, {",
          "65:  Path:   \"/v1/plan\",",
          "66:  UserOK: true,",
          "67:  GET:    v1GetPlan,",
          "68: }, {",
          "69:  Path:   \"/v1/layers\",",
          "70:  UserOK: true,",
          "71:  POST:   v1PostLayers,",
          "72: }, {",
          "73:  Path:   \"/v1/files\",",
          "74:  UserOK: true,",
          "75:  GET:    v1GetFiles,",
          "76:  POST:   v1PostFiles,",
          "77: }, {",
          "78:  Path:   \"/v1/logs\",",
          "79:  UserOK: true,",
          "80:  GET:    v1GetLogs,",
          "81: }, {",
          "82:  Path:   \"/v1/exec\",",
          "83:  UserOK: true,",
          "84:  POST:   v1PostExec,",
          "85: }, {",
          "86:  Path:   \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "87:  UserOK: true,",
          "88:  GET:    v1GetTaskWebsocket,",
          "89: }, {",
          "90:  Path:   \"/v1/signals\",",
          "91:  UserOK: true,",
          "92:  POST:   v1PostSignals,",
          "93: }, {",
          "94:  Path:   \"/v1/checks\",",
          "95:  UserOK: true,",
          "96:  GET:    v1GetChecks,",
          "97: }, {",
          "98:  Path:   \"/v1/notices\",",
          "99:  UserOK: true,",
          "100:  GET:    v1GetNotices,",
          "101:  POST:   v1PostNotices,",
          "102: }, {",
          "103:  Path:   \"/v1/notices/{id}\",",
          "104:  UserOK: true,",
          "105:  GET:    v1GetNotice,",
          "",
          "[Added Lines]",
          "28:  Path:       \"/v1/system-info\",",
          "29:  ReadAccess: OpenAccess{},",
          "30:  GET:        v1SystemInfo,",
          "31: }, {",
          "32:  Path:       \"/v1/health\",",
          "33:  ReadAccess: OpenAccess{},",
          "34:  GET:        v1Health,",
          "35: }, {",
          "36:  Path:        \"/v1/warnings\",",
          "37:  ReadAccess:  UserAccess{},",
          "38:  WriteAccess: UserAccess{},",
          "39:  GET:         v1GetWarnings,",
          "40:  POST:        v1AckWarnings,",
          "41: }, {",
          "42:  Path:       \"/v1/changes\",",
          "43:  ReadAccess: UserAccess{},",
          "44:  GET:        v1GetChanges,",
          "45: }, {",
          "46:  Path:        \"/v1/changes/{id}\",",
          "47:  ReadAccess:  UserAccess{},",
          "48:  WriteAccess: UserAccess{},",
          "49:  GET:         v1GetChange,",
          "50:  POST:        v1PostChange,",
          "51: }, {",
          "52:  Path:       \"/v1/changes/{id}/wait\",",
          "53:  ReadAccess: UserAccess{},",
          "54:  GET:        v1GetChangeWait,",
          "55: }, {",
          "56:  Path:        \"/v1/services\",",
          "57:  ReadAccess:  UserAccess{},",
          "58:  WriteAccess: UserAccess{},",
          "59:  GET:         v1GetServices,",
          "60:  POST:        v1PostServices,",
          "61: }, {",
          "62:  Path:        \"/v1/services/{name}\",",
          "63:  ReadAccess:  UserAccess{},",
          "64:  WriteAccess: UserAccess{},",
          "65:  GET:         v1GetService,",
          "66:  POST:        v1PostService,",
          "67: }, {",
          "68:  Path:       \"/v1/plan\",",
          "69:  ReadAccess: UserAccess{},",
          "70:  GET:        v1GetPlan,",
          "71: }, {",
          "72:  Path:        \"/v1/layers\",",
          "73:  WriteAccess: UserAccess{},",
          "74:  POST:        v1PostLayers,",
          "75: }, {",
          "76:  Path:        \"/v1/files\",",
          "77:  ReadAccess:  UserAccess{},",
          "78:  WriteAccess: UserAccess{},",
          "79:  GET:         v1GetFiles,",
          "80:  POST:        v1PostFiles,",
          "81: }, {",
          "82:  Path:       \"/v1/logs\",",
          "83:  ReadAccess: UserAccess{},",
          "84:  GET:        v1GetLogs,",
          "85: }, {",
          "86:  Path:        \"/v1/exec\",",
          "87:  WriteAccess: UserAccess{},",
          "88:  POST:        v1PostExec,",
          "89: }, {",
          "90:  Path:       \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "91:  ReadAccess: UserAccess{},",
          "92:  GET:        v1GetTaskWebsocket,",
          "93: }, {",
          "94:  Path:        \"/v1/signals\",",
          "95:  WriteAccess: UserAccess{},",
          "96:  POST:        v1PostSignals,",
          "97: }, {",
          "98:  Path:       \"/v1/checks\",",
          "99:  ReadAccess: UserAccess{},",
          "100:  GET:        v1GetChecks,",
          "101: }, {",
          "102:  Path:        \"/v1/notices\",",
          "103:  ReadAccess:  UserAccess{},",
          "104:  WriteAccess: UserAccess{},",
          "105:  GET:         v1GetNotices,",
          "106:  POST:        v1PostNotices,",
          "107: }, {",
          "108:  Path:       \"/v1/notices/{id}\",",
          "109:  ReadAccess: UserAccess{},",
          "110:  GET:        v1GetNotice,",
          "",
          "---------------"
        ],
        "internals/daemon/api_test.go||internals/daemon/api_test.go": [
          "File: internals/daemon/api_test.go -> internals/daemon/api_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  c.Assert(sysInfoCmd.GET, check.NotNil)",
          "81:  c.Check(sysInfoCmd.PUT, check.IsNil)",
          "82:  c.Check(sysInfoCmd.POST, check.IsNil)",
          "85:  rec := httptest.NewRecorder()",
          "",
          "[Removed Lines]",
          "83:  c.Check(sysInfoCmd.DELETE, check.IsNil)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internals/daemon/daemon.go||internals/daemon/daemon.go": [
          "File: internals/daemon/daemon.go -> internals/daemon/daemon.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:  Path       string",
          "122:  PathPrefix string",
          "132:  d *Daemon",
          "133: }",
          "",
          "[Removed Lines]",
          "124:  GET       ResponseFunc",
          "125:  PUT       ResponseFunc",
          "126:  POST      ResponseFunc",
          "127:  DELETE    ResponseFunc",
          "128:  GuestOK   bool",
          "129:  UserOK    bool",
          "130:  AdminOnly bool",
          "",
          "[Added Lines]",
          "124:  GET  ResponseFunc",
          "125:  PUT  ResponseFunc",
          "126:  POST ResponseFunc",
          "129:  ReadAccess  AccessChecker",
          "130:  WriteAccess AccessChecker",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:  accessForbidden",
          "141: )",
          "202: func userFromRequest(state interface{}, r *http.Request) (*UserState, error) {",
          "203:  return nil, nil",
          "204: }",
          "",
          "[Removed Lines]",
          "153: func (c *Command) canAccess(r *http.Request, user *UserState) accessResult {",
          "154:  if c.AdminOnly && (c.UserOK || c.GuestOK) {",
          "155:   logger.Panicf(\"internal error: command cannot have AdminOnly together with any *OK flag\")",
          "156:  }",
          "158:  if user != nil && !c.AdminOnly {",
          "160:   return accessOK",
          "161:  }",
          "164:  isUser := false",
          "165:  ucred, err := ucrednetGet(r.RemoteAddr)",
          "166:  if err == nil {",
          "167:   isUser = true",
          "168:  } else if err != errNoID {",
          "169:   logger.Noticef(\"Cannot parse UID from remote address %q: %s\", r.RemoteAddr, err)",
          "170:   return accessForbidden",
          "171:  }",
          "174:  if r.Method == \"GET\" && !c.AdminOnly {",
          "176:   if c.GuestOK {",
          "177:    return accessOK",
          "178:   }",
          "180:   if isUser && c.UserOK {",
          "181:    return accessOK",
          "182:   }",
          "183:  }",
          "186:  if !isUser {",
          "187:   return accessUnauthorized",
          "188:  }",
          "190:  if ucred.Uid == 0 || sys.UserID(ucred.Uid) == sysGetuid() {",
          "192:   return accessOK",
          "193:  }",
          "195:  if c.AdminOnly {",
          "196:   return accessUnauthorized",
          "197:  }",
          "199:  return accessUnauthorized",
          "200: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:   return",
          "225:  }",
          "235:   return",
          "236:  }",
          "238:  var rspf ResponseFunc",
          "241:  switch r.Method {",
          "242:  case \"GET\":",
          "243:   rspf = c.GET",
          "244:  case \"PUT\":",
          "245:   rspf = c.PUT",
          "246:  case \"POST\":",
          "247:   rspf = c.POST",
          "250:  }",
          "254:  }",
          "256:  if rsp, ok := rsp.(*resp); ok {",
          "257:   st := c.d.state",
          "258:   st.Lock()",
          "",
          "[Removed Lines]",
          "227:  switch c.canAccess(r, user) {",
          "228:  case accessOK:",
          "230:  case accessUnauthorized:",
          "231:   Unauthorized(\"access denied\").ServeHTTP(w, r)",
          "232:   return",
          "233:  case accessForbidden:",
          "234:   Forbidden(\"forbidden\").ServeHTTP(w, r)",
          "239:  var rsp = MethodNotAllowed(\"method %q not allowed\", r.Method)",
          "248:  case \"DELETE\":",
          "249:   rspf = c.DELETE",
          "252:  if rspf != nil {",
          "253:   rsp = rspf(c, r, user)",
          "",
          "[Added Lines]",
          "168:  ucred, err := ucrednetGet(r.RemoteAddr)",
          "169:  if err != nil && err != errNoID {",
          "170:   logger.Noticef(\"Cannot parse UID from remote address %q: %s\", r.RemoteAddr, err)",
          "171:   InternalError(err.Error()).ServeHTTP(w, r)",
          "176:  var access AccessChecker",
          "181:   access = c.ReadAccess",
          "184:   access = c.WriteAccess",
          "187:   access = c.WriteAccess",
          "190:  if rspf == nil {",
          "191:   MethodNotAllowed(\"method %q not allowed\", r.Method).ServeHTTP(w, r)",
          "192:   return",
          "195:  if rspe := access.CheckAccess(c.d, r, ucred, user); rspe != nil {",
          "196:   rspe.ServeHTTP(w, r)",
          "197:   return",
          "198:  }",
          "200:  rsp := rspf(c, r, user)",
          "",
          "---------------"
        ],
        "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go": [
          "File: internals/daemon/daemon_test.go -> internals/daemon/daemon_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   return &handler",
          "175:  }",
          "176:  command := Command{",
          "180:  }",
          "181:  API = append(API, &command)",
          "182:  defer func() {",
          "",
          "[Removed Lines]",
          "177:   Path:    endpoint,",
          "178:   GuestOK: true,",
          "179:   GET:     getCallback,",
          "",
          "[Added Lines]",
          "177:   Path:       endpoint,",
          "178:   ReadAccess: OpenAccess{},",
          "179:   GET:        getCallback,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  cmd.GET = rf",
          "219:  cmd.PUT = rf",
          "220:  cmd.POST = rf",
          "224:   req, err := http.NewRequest(method, \"\", nil)",
          "225:   req.Header.Add(\"User-Agent\", fakeUserAgent)",
          "226:   c.Assert(err, IsNil)",
          "",
          "[Removed Lines]",
          "221:  cmd.DELETE = rf",
          "223:  for _, method := range []string{\"GET\", \"POST\", \"PUT\", \"DELETE\"} {",
          "",
          "[Added Lines]",
          "221:  cmd.ReadAccess = UserAccess{}",
          "222:  cmd.WriteAccess = UserAccess{}",
          "224:  for _, method := range []string{\"GET\", \"POST\", \"PUT\"} {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249: func (s *daemonSuite) TestCommandRestartingState(c *C) {",
          "250:  d := s.newDaemon(c)",
          "253:  cmd.GET = func(*Command, *http.Request, *UserState) Response {",
          "254:   return SyncResponse(nil)",
          "255:  }",
          "",
          "[Removed Lines]",
          "252:  cmd := &Command{d: d}",
          "",
          "[Added Lines]",
          "253:  cmd := &Command{d: d, ReadAccess: OpenAccess{}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299: func (s *daemonSuite) TestFillsWarnings(c *C) {",
          "300:  d := s.newDaemon(c)",
          "303:  cmd.GET = func(*Command, *http.Request, *UserState) Response {",
          "304:   return SyncResponse(nil)",
          "305:  }",
          "",
          "[Removed Lines]",
          "302:  cmd := &Command{d: d}",
          "",
          "[Added Lines]",
          "303:  cmd := &Command{d: d, ReadAccess: OpenAccess{}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:  c.Check(rst.WarningTimestamp, NotNil)",
          "334: }",
          "367: }",
          "370:  d := s.newDaemon(c)",
          "414: }",
          "416: func (s *daemonSuite) TestSuperAccess(c *C) {",
          "419:  for _, uid := range []int{0, os.Getuid()} {",
          "420:   remoteAddr := fmt.Sprintf(\"pid=100;uid=%d;socket=;\", uid)",
          "439:  }",
          "440: }",
          "",
          "[Removed Lines]",
          "336: func (s *daemonSuite) TestGuestAccess(c *C) {",
          "337:  d := s.newDaemon(c)",
          "339:  get := &http.Request{Method: \"GET\"}",
          "340:  put := &http.Request{Method: \"PUT\"}",
          "341:  pst := &http.Request{Method: \"POST\"}",
          "342:  del := &http.Request{Method: \"DELETE\"}",
          "344:  cmd := &Command{d: d}",
          "345:  c.Check(cmd.canAccess(get, nil), Equals, accessUnauthorized)",
          "346:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "347:  c.Check(cmd.canAccess(pst, nil), Equals, accessUnauthorized)",
          "348:  c.Check(cmd.canAccess(del, nil), Equals, accessUnauthorized)",
          "350:  cmd = &Command{d: d, AdminOnly: true}",
          "351:  c.Check(cmd.canAccess(get, nil), Equals, accessUnauthorized)",
          "352:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "353:  c.Check(cmd.canAccess(pst, nil), Equals, accessUnauthorized)",
          "354:  c.Check(cmd.canAccess(del, nil), Equals, accessUnauthorized)",
          "356:  cmd = &Command{d: d, UserOK: true}",
          "357:  c.Check(cmd.canAccess(get, nil), Equals, accessUnauthorized)",
          "358:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "359:  c.Check(cmd.canAccess(pst, nil), Equals, accessUnauthorized)",
          "360:  c.Check(cmd.canAccess(del, nil), Equals, accessUnauthorized)",
          "362:  cmd = &Command{d: d, GuestOK: true}",
          "363:  c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "364:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "365:  c.Check(cmd.canAccess(pst, nil), Equals, accessUnauthorized)",
          "366:  c.Check(cmd.canAccess(del, nil), Equals, accessUnauthorized)",
          "369: func (s *daemonSuite) TestUserAccess(c *C) {",
          "372:  get := &http.Request{Method: \"GET\", RemoteAddr: \"pid=100;uid=42;socket=;\"}",
          "373:  put := &http.Request{Method: \"PUT\", RemoteAddr: \"pid=100;uid=42;socket=;\"}",
          "375:  cmd := &Command{d: d}",
          "376:  c.Check(cmd.canAccess(get, nil), Equals, accessUnauthorized)",
          "377:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "379:  cmd = &Command{d: d, AdminOnly: true}",
          "380:  c.Check(cmd.canAccess(get, nil), Equals, accessUnauthorized)",
          "381:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "383:  cmd = &Command{d: d, UserOK: true}",
          "384:  c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "385:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "387:  cmd = &Command{d: d, GuestOK: true}",
          "388:  c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "389:  c.Check(cmd.canAccess(put, nil), Equals, accessUnauthorized)",
          "390: }",
          "392: func (s *daemonSuite) TestLoggedInUserAccess(c *C) {",
          "393:  d := s.newDaemon(c)",
          "395:  user := &UserState{}",
          "396:  get := &http.Request{Method: \"GET\", RemoteAddr: \"pid=100;uid=42;socket=;\"}",
          "397:  put := &http.Request{Method: \"PUT\", RemoteAddr: \"pid=100;uid=42;socket=;\"}",
          "399:  cmd := &Command{d: d}",
          "400:  c.Check(cmd.canAccess(get, user), Equals, accessOK)",
          "401:  c.Check(cmd.canAccess(put, user), Equals, accessOK)",
          "403:  cmd = &Command{d: d, AdminOnly: true}",
          "404:  c.Check(cmd.canAccess(get, user), Equals, accessUnauthorized)",
          "405:  c.Check(cmd.canAccess(put, user), Equals, accessUnauthorized)",
          "407:  cmd = &Command{d: d, UserOK: true}",
          "408:  c.Check(cmd.canAccess(get, user), Equals, accessOK)",
          "409:  c.Check(cmd.canAccess(put, user), Equals, accessOK)",
          "411:  cmd = &Command{d: d, GuestOK: true}",
          "412:  c.Check(cmd.canAccess(get, user), Equals, accessOK)",
          "413:  c.Check(cmd.canAccess(put, user), Equals, accessOK)",
          "417:  d := s.newDaemon(c)",
          "421:   get := &http.Request{Method: \"GET\", RemoteAddr: remoteAddr}",
          "422:   put := &http.Request{Method: \"PUT\", RemoteAddr: remoteAddr}",
          "424:   cmd := &Command{d: d}",
          "425:   c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "426:   c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "428:   cmd = &Command{d: d, AdminOnly: true}",
          "429:   c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "430:   c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "432:   cmd = &Command{d: d, UserOK: true}",
          "433:   c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "434:   c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "436:   cmd = &Command{d: d, GuestOK: true}",
          "437:   c.Check(cmd.canAccess(get, nil), Equals, accessOK)",
          "438:   c.Check(cmd.canAccess(put, nil), Equals, accessOK)",
          "",
          "[Added Lines]",
          "337: type accessCheckerTestCase struct {",
          "338:  get, put, post int // expected status for each method",
          "339:  read, write    AccessChecker",
          "342: func (s *daemonSuite) testAccessChecker(c *C, tests []accessCheckerTestCase, remoteAddr string) {",
          "345:  responseFunc := func(c *Command, r *http.Request, s *UserState) Response {",
          "346:   return SyncResponse(true)",
          "347:  }",
          "349:  doTestReqFunc := func(cmd *Command, mth string) *httptest.ResponseRecorder {",
          "350:   req := &http.Request{Method: mth, RemoteAddr: remoteAddr}",
          "351:   rec := httptest.NewRecorder()",
          "352:   cmd.ServeHTTP(rec, req)",
          "353:   return rec",
          "354:  }",
          "356:  for _, t := range tests {",
          "357:   cmd := &Command{",
          "358:    d: d,",
          "360:    GET:  responseFunc,",
          "361:    PUT:  responseFunc,",
          "362:    POST: responseFunc,",
          "364:    ReadAccess:  t.read,",
          "365:    WriteAccess: t.write,",
          "366:   }",
          "368:   comment := Commentf(\"remoteAddr: %v, read: %T, write: %T\", remoteAddr, t.read, t.write)",
          "370:   c.Check(doTestReqFunc(cmd, \"GET\").Code, Equals, t.get, comment)",
          "371:   c.Check(doTestReqFunc(cmd, \"PUT\").Code, Equals, t.put, comment)",
          "372:   c.Check(doTestReqFunc(cmd, \"POST\").Code, Equals, t.post, comment)",
          "373:  }",
          "374: }",
          "376: func (s *daemonSuite) TestGuestAccess(c *C) {",
          "377:  tests := []accessCheckerTestCase{{",
          "378:   get:   http.StatusOK,",
          "379:   put:   http.StatusOK,",
          "380:   post:  http.StatusOK,",
          "381:   read:  OpenAccess{},",
          "382:   write: OpenAccess{},",
          "383:  }, {",
          "384:   get:   http.StatusOK,",
          "385:   put:   http.StatusUnauthorized,",
          "386:   post:  http.StatusUnauthorized,",
          "387:   read:  OpenAccess{},",
          "388:   write: UserAccess{},",
          "389:  }, {",
          "390:   get:   http.StatusOK,",
          "391:   put:   http.StatusUnauthorized,",
          "392:   post:  http.StatusUnauthorized,",
          "393:   read:  OpenAccess{},",
          "394:   write: AdminAccess{},",
          "395:  }, {",
          "396:   get:   http.StatusUnauthorized,",
          "397:   put:   http.StatusUnauthorized,",
          "398:   post:  http.StatusUnauthorized,",
          "399:   read:  UserAccess{},",
          "400:   write: UserAccess{},",
          "401:  }, {",
          "402:   get:   http.StatusUnauthorized,",
          "403:   put:   http.StatusUnauthorized,",
          "404:   post:  http.StatusUnauthorized,",
          "405:   read:  UserAccess{},",
          "406:   write: AdminAccess{},",
          "407:  }, {",
          "408:   get:   http.StatusUnauthorized,",
          "409:   put:   http.StatusUnauthorized,",
          "410:   post:  http.StatusUnauthorized,",
          "411:   read:  AdminAccess{},",
          "412:   write: AdminAccess{},",
          "413:  }}",
          "415:  s.testAccessChecker(c, tests, \"\")",
          "416: }",
          "418: func (s *daemonSuite) TestUserAccess(c *C) {",
          "419:  tests := []accessCheckerTestCase{{",
          "420:   get:   http.StatusOK,",
          "421:   put:   http.StatusOK,",
          "422:   post:  http.StatusOK,",
          "423:   read:  OpenAccess{},",
          "424:   write: OpenAccess{},",
          "425:  }, {",
          "426:   get:   http.StatusOK,",
          "427:   put:   http.StatusOK,",
          "428:   post:  http.StatusOK,",
          "429:   read:  OpenAccess{},",
          "430:   write: UserAccess{},",
          "431:  }, {",
          "432:   get:   http.StatusOK,",
          "433:   put:   http.StatusUnauthorized,",
          "434:   post:  http.StatusUnauthorized,",
          "435:   read:  OpenAccess{},",
          "436:   write: AdminAccess{},",
          "437:  }, {",
          "438:   get:   http.StatusOK,",
          "439:   put:   http.StatusOK,",
          "440:   post:  http.StatusOK,",
          "441:   read:  UserAccess{},",
          "442:   write: UserAccess{},",
          "443:  }, {",
          "444:   get:   http.StatusOK,",
          "445:   put:   http.StatusUnauthorized,",
          "446:   post:  http.StatusUnauthorized,",
          "447:   read:  UserAccess{},",
          "448:   write: AdminAccess{},",
          "449:  }, {",
          "450:   get:   http.StatusUnauthorized,",
          "451:   put:   http.StatusUnauthorized,",
          "452:   post:  http.StatusUnauthorized,",
          "453:   read:  AdminAccess{},",
          "454:   write: AdminAccess{},",
          "455:  }}",
          "457:  s.testAccessChecker(c, tests, \"pid=100;uid=42;socket=;\")",
          "461:  tests := []accessCheckerTestCase{{",
          "462:   get:   http.StatusOK,",
          "463:   put:   http.StatusOK,",
          "464:   post:  http.StatusOK,",
          "465:   read:  OpenAccess{},",
          "466:   write: OpenAccess{},",
          "467:  }, {",
          "468:   get:   http.StatusOK,",
          "469:   put:   http.StatusOK,",
          "470:   post:  http.StatusOK,",
          "471:   read:  OpenAccess{},",
          "472:   write: UserAccess{},",
          "473:  }, {",
          "474:   get:   http.StatusOK,",
          "475:   put:   http.StatusOK,",
          "476:   post:  http.StatusOK,",
          "477:   read:  OpenAccess{},",
          "478:   write: AdminAccess{},",
          "479:  }, {",
          "480:   get:   http.StatusOK,",
          "481:   put:   http.StatusOK,",
          "482:   post:  http.StatusOK,",
          "483:   read:  UserAccess{},",
          "484:   write: UserAccess{},",
          "485:  }, {",
          "486:   get:   http.StatusOK,",
          "487:   put:   http.StatusOK,",
          "488:   post:  http.StatusOK,",
          "489:   read:  UserAccess{},",
          "490:   write: AdminAccess{},",
          "491:  }, {",
          "492:   get:   http.StatusOK,",
          "493:   put:   http.StatusOK,",
          "494:   post:  http.StatusOK,",
          "495:   read:  AdminAccess{},",
          "496:   write: AdminAccess{},",
          "497:  }}",
          "501:   s.testAccessChecker(c, tests, remoteAddr)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1052: func (s *daemonSuite) TestDegradedModeReply(c *C) {",
          "1053:  d := s.newDaemon(c)",
          "1055:  cmd.GET = func(*Command, *http.Request, *UserState) Response {",
          "1056:   return SyncResponse(nil)",
          "1057:  }",
          "",
          "[Removed Lines]",
          "1054:  cmd := &Command{d: d}",
          "",
          "[Added Lines]",
          "1117:  cmd := &Command{d: d, ReadAccess: OpenAccess{}, WriteAccess: OpenAccess{}}",
          "",
          "---------------"
        ],
        "internals/daemon/ucrednet.go||internals/daemon/ucrednet.go": [
          "File: internals/daemon/ucrednet.go -> internals/daemon/ucrednet.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: var raddrRegexp = regexp.MustCompile(`^pid=(\\d+);uid=(\\d+);socket=([^;]*);$`)",
          "43:   Pid: ucrednetNoProcess,",
          "44:   Uid: ucrednetNobody,",
          "45:  }",
          "",
          "[Removed Lines]",
          "38: func ucrednetGet(remoteAddr string) (*ucrednet, error) {",
          "42:  u := &ucrednet{",
          "",
          "[Added Lines]",
          "38: func ucrednetGet(remoteAddr string) (*Ucrednet, error) {",
          "42:  u := &Ucrednet{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  return u, nil",
          "61: }",
          "64:  Pid    int32",
          "65:  Uid    uint32",
          "66:  Socket string",
          "67: }",
          "70:  if un == nil {",
          "71:   return \"pid=;uid=;socket=;\"",
          "72:  }",
          "",
          "[Removed Lines]",
          "63: type ucrednet struct {",
          "69: func (un *ucrednet) String() string {",
          "",
          "[Added Lines]",
          "63: type Ucrednet struct {",
          "69: func (un *Ucrednet) String() string {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: type ucrednetAddr struct {",
          "77:  net.Addr",
          "79: }",
          "81: func (wa *ucrednetAddr) String() string {",
          "86: }",
          "88: type ucrednetConn struct {",
          "89:  net.Conn",
          "91: }",
          "93: func (wc *ucrednetConn) RemoteAddr() net.Addr {",
          "95: }",
          "97: type ucrednetListener struct {",
          "",
          "[Removed Lines]",
          "85:  return wa.ucrednet.String()",
          "94:  return &ucrednetAddr{wc.Conn.RemoteAddr(), wc.ucrednet}",
          "",
          "[Added Lines]",
          "85:  return wa.Ucrednet.String()",
          "94:  return &ucrednetAddr{wc.Conn.RemoteAddr(), wc.Ucrednet}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:   return nil, err",
          "110:  }",
          "113:  if ucon, ok := con.(*net.UnixConn); ok {",
          "114:   rawConn, err := ucon.SyscallConn()",
          "115:   if err != nil {",
          "",
          "[Removed Lines]",
          "112:  var unet *ucrednet",
          "",
          "[Added Lines]",
          "112:  var unet *Ucrednet",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:   if ucredErr != nil {",
          "129:    return nil, ucredErr",
          "130:   }",
          "132:    Pid:    ucred.Pid,",
          "133:    Uid:    ucred.Uid,",
          "134:    Socket: ucon.LocalAddr().String(),",
          "",
          "[Removed Lines]",
          "131:   unet = &ucrednet{",
          "",
          "[Added Lines]",
          "131:   unet = &Ucrednet{",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "921602de92fc6f32aff0a2c7bcb09156d4673dd4",
      "candidate_info": {
        "commit_hash": "921602de92fc6f32aff0a2c7bcb09156d4673dd4",
        "repo": "canonical/pebble",
        "commit_url": "https://github.com/canonical/pebble/commit/921602de92fc6f32aff0a2c7bcb09156d4673dd4",
        "files": [
          "internals/daemon/api_changes.go",
          "internals/daemon/api_checks.go",
          "internals/daemon/api_exec.go",
          "internals/daemon/api_files.go",
          "internals/daemon/api_health.go",
          "internals/daemon/api_logs.go",
          "internals/daemon/api_notices.go",
          "internals/daemon/api_plan.go",
          "internals/daemon/api_services.go",
          "internals/daemon/api_signals.go",
          "internals/daemon/api_tasks.go",
          "internals/daemon/api_warnings.go",
          "internals/daemon/daemon.go",
          "internals/daemon/response.go"
        ],
        "message": "fix(daemon): export error responders from daemon.response (#360)\n\nThis brings the error response namings in line with snapd: [`daemon/errors.go` in snapd](https://github.com/snapcore/snapd/blob/489358223f0bd03da01e62a4062174eb7e9e0ffa/daemon/errors.go#L112). Split off from #358. While currently the error responses are used exclusively in the `daemon` package, once `AccessChecker` is available, it should be possible for other packages to create error responders to implement their `AccessChecker` variants.",
        "before_after_code_files": [
          "internals/daemon/api_changes.go||internals/daemon/api_changes.go",
          "internals/daemon/api_checks.go||internals/daemon/api_checks.go",
          "internals/daemon/api_exec.go||internals/daemon/api_exec.go",
          "internals/daemon/api_files.go||internals/daemon/api_files.go",
          "internals/daemon/api_health.go||internals/daemon/api_health.go",
          "internals/daemon/api_logs.go||internals/daemon/api_logs.go",
          "internals/daemon/api_notices.go||internals/daemon/api_notices.go",
          "internals/daemon/api_plan.go||internals/daemon/api_plan.go",
          "internals/daemon/api_services.go||internals/daemon/api_services.go",
          "internals/daemon/api_signals.go||internals/daemon/api_signals.go",
          "internals/daemon/api_tasks.go||internals/daemon/api_tasks.go",
          "internals/daemon/api_warnings.go||internals/daemon/api_warnings.go",
          "internals/daemon/daemon.go||internals/daemon/daemon.go",
          "internals/daemon/response.go||internals/daemon/response.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internals/daemon/api_changes.go||internals/daemon/api_changes.go": [
          "File: internals/daemon/api_changes.go -> internals/daemon/api_changes.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  case \"ready\":",
          "131:   filter = func(chg *state.Change) bool { return chg.Status().Ready() }",
          "132:  default:",
          "134:  }",
          "136:  if wantedName := query.Get(\"for\"); wantedName != \"\" {",
          "",
          "[Removed Lines]",
          "133:   return statusBadRequest(\"select should be one of: all,in-progress,ready\")",
          "",
          "[Added Lines]",
          "133:   return BadRequest(\"select should be one of: all,in-progress,ready\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:  defer st.Unlock()",
          "178:  chg := st.Change(changeID)",
          "179:  if chg == nil {",
          "181:  }",
          "183:  return SyncResponse(change2changeInfo(chg))",
          "",
          "[Removed Lines]",
          "180:   return statusNotFound(\"cannot find change with id %q\", changeID)",
          "",
          "[Added Lines]",
          "180:   return NotFound(\"cannot find change with id %q\", changeID)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:  change := st.Change(changeID)",
          "191:  st.Unlock()",
          "192:  if change == nil {",
          "194:  }",
          "196:  timeout, err := parseOptionalDuration(r.URL.Query().Get(\"timeout\"))",
          "197:  if err != nil {",
          "199:  }",
          "200:  if timeout != 0 {",
          "",
          "[Removed Lines]",
          "193:   return statusNotFound(\"cannot find change with id %q\", changeID)",
          "198:   return statusBadRequest(\"invalid timeout: %v\", err)",
          "",
          "[Added Lines]",
          "193:   return NotFound(\"cannot find change with id %q\", changeID)",
          "198:   return BadRequest(\"invalid timeout: %v\", err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:   case <-change.Ready():",
          "206:    timer.Stop() // change ready, release timer resources",
          "207:   case <-timer.C:",
          "209:   case <-r.Context().Done():",
          "211:   }",
          "212:  } else {",
          "214:   select {",
          "215:   case <-change.Ready():",
          "216:   case <-r.Context().Done():",
          "218:   }",
          "219:  }",
          "",
          "[Removed Lines]",
          "208:    return statusGatewayTimeout(\"timed out waiting for change after %s\", timeout)",
          "210:    return statusInternalError(\"request cancelled\")",
          "217:    return statusInternalError(\"request cancelled\")",
          "",
          "[Added Lines]",
          "208:    return GatewayTimeout(\"timed out waiting for change after %s\", timeout)",
          "210:    return InternalError(\"request cancelled\")",
          "217:    return InternalError(\"request cancelled\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:  defer state.Unlock()",
          "231:  chg := state.Change(chID)",
          "232:  if chg == nil {",
          "234:  }",
          "236:  var reqData struct {",
          "",
          "[Removed Lines]",
          "233:   return statusNotFound(\"cannot find change with id %q\", chID)",
          "",
          "[Added Lines]",
          "233:   return NotFound(\"cannot find change with id %q\", chID)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "240:  decoder := json.NewDecoder(r.Body)",
          "241:  if err := decoder.Decode(&reqData); err != nil {",
          "243:  }",
          "245:  if reqData.Action != \"abort\" {",
          "247:  }",
          "249:  if chg.Status().Ready() {",
          "251:  }",
          "",
          "[Removed Lines]",
          "242:   return statusBadRequest(\"cannot decode data from request body: %v\", err)",
          "246:   return statusBadRequest(\"change action %q is unsupported\", reqData.Action)",
          "250:   return statusBadRequest(\"cannot abort change %s with nothing pending\", chID)",
          "",
          "[Added Lines]",
          "242:   return BadRequest(\"cannot decode data from request body: %v\", err)",
          "246:   return BadRequest(\"change action %q is unsupported\", reqData.Action)",
          "250:   return BadRequest(\"cannot abort change %s with nothing pending\", chID)",
          "",
          "---------------"
        ],
        "internals/daemon/api_checks.go||internals/daemon/api_checks.go": [
          "File: internals/daemon/api_checks.go -> internals/daemon/api_checks.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  switch level {",
          "37:  case plan.UnsetLevel, plan.AliveLevel, plan.ReadyLevel:",
          "38:  default:",
          "40:  }",
          "42:  names := strutil.MultiCommaSeparatedList(query[\"names\"])",
          "",
          "[Removed Lines]",
          "39:   return statusBadRequest(`level must be \"alive\" or \"ready\"`)",
          "",
          "[Added Lines]",
          "39:   return BadRequest(`level must be \"alive\" or \"ready\"`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:  checkMgr := c.d.overlord.CheckManager()",
          "45:  checks, err := checkMgr.Checks()",
          "46:  if err != nil {",
          "48:  }",
          "50:  infos := []checkInfo{} // if no checks, return [] instead of null",
          "",
          "[Removed Lines]",
          "47:   return statusInternalError(\"%v\", err)",
          "",
          "[Added Lines]",
          "47:   return InternalError(\"%v\", err)",
          "",
          "---------------"
        ],
        "internals/daemon/api_exec.go||internals/daemon/api_exec.go": [
          "File: internals/daemon/api_exec.go -> internals/daemon/api_exec.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  var payload execPayload",
          "48:  decoder := json.NewDecoder(req.Body)",
          "49:  if err := decoder.Decode(&payload); err != nil {",
          "51:  }",
          "52:  if len(payload.Command) < 1 {",
          "54:  }",
          "56:  timeout, err := parseOptionalDuration(payload.Timeout)",
          "57:  if err != nil {",
          "59:  }",
          "62:  _, err = exec.LookPath(payload.Command[0])",
          "63:  if err != nil {",
          "65:  }",
          "67:  p, err := c.d.overlord.ServiceManager().Plan()",
          "68:  if err != nil {",
          "70:  }",
          "71:  overrides := plan.ContextOptions{",
          "72:   Environment: payload.Environment,",
          "",
          "[Removed Lines]",
          "50:   return statusBadRequest(\"cannot decode request body: %v\", err)",
          "53:   return statusBadRequest(\"must specify command\")",
          "58:   return statusBadRequest(\"invalid timeout: %v\", err)",
          "64:   return statusBadRequest(\"cannot find executable %q\", payload.Command[0])",
          "69:   return statusBadRequest(\"%v\", err)",
          "",
          "[Added Lines]",
          "50:   return BadRequest(\"cannot decode request body: %v\", err)",
          "53:   return BadRequest(\"must specify command\")",
          "58:   return BadRequest(\"invalid timeout: %v\", err)",
          "64:   return BadRequest(\"cannot find executable %q\", payload.Command[0])",
          "69:   return BadRequest(\"%v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  }",
          "79:  merged, err := plan.MergeServiceContext(p, payload.ServiceContext, overrides)",
          "80:  if err != nil {",
          "82:  }",
          "85:  uid, gid, err := osutil.NormalizeUidGid(merged.UserID, merged.GroupID, merged.User, merged.Group)",
          "86:  if err != nil {",
          "88:  }",
          "90:  st := c.d.overlord.State()",
          "",
          "[Removed Lines]",
          "81:   return statusBadRequest(\"%v\", err)",
          "87:   return statusBadRequest(\"%v\", err)",
          "",
          "[Added Lines]",
          "81:   return BadRequest(\"%v\", err)",
          "87:   return BadRequest(\"%v\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:  }",
          "107:  task, metadata, err := cmdstate.Exec(st, args)",
          "108:  if err != nil {",
          "110:  }",
          "112:  change := st.NewChange(\"exec\", fmt.Sprintf(\"Execute command %q\", args.Command[0]))",
          "",
          "[Removed Lines]",
          "109:   return statusInternalError(\"cannot call exec: %v\", err)",
          "",
          "[Added Lines]",
          "109:   return InternalError(\"cannot call exec: %v\", err)",
          "",
          "---------------"
        ],
        "internals/daemon/api_files.go||internals/daemon/api_files.go": [
          "File: internals/daemon/api_files.go -> internals/daemon/api_files.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  case \"read\":",
          "45:   paths := query[\"path\"]",
          "46:   if len(paths) == 0 {",
          "48:   }",
          "49:   if req.Header.Get(\"Accept\") != \"multipart/form-data\" {",
          "51:   }",
          "52:   return readFilesResponse{paths: paths}",
          "53:  case \"list\":",
          "54:   path := query.Get(\"path\")",
          "55:   if path == \"\" {",
          "57:   }",
          "58:   pattern := query.Get(\"pattern\")",
          "59:   itself := query.Get(\"itself\")",
          "60:   if itself != \"true\" && itself != \"false\" && itself != \"\" {",
          "62:   }",
          "63:   return listFilesResponse(path, pattern, itself == \"true\")",
          "64:  default:",
          "66:  }",
          "67: }",
          "",
          "[Removed Lines]",
          "47:    return statusBadRequest(\"must specify one or more paths\")",
          "50:    return statusBadRequest(`must accept multipart/form-data`)",
          "56:    return statusBadRequest(\"must specify path\")",
          "61:    return statusBadRequest(`itself parameter must be \"true\" or \"false\"`)",
          "65:   return statusBadRequest(\"invalid action %q\", action)",
          "",
          "[Added Lines]",
          "47:    return BadRequest(\"must specify one or more paths\")",
          "50:    return BadRequest(`must accept multipart/form-data`)",
          "56:    return BadRequest(\"must specify path\")",
          "61:    return BadRequest(`itself parameter must be \"true\" or \"false\"`)",
          "65:   return BadRequest(\"invalid action %q\", action)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284: func listFilesResponse(path, pattern string, itself bool) Response {",
          "285:  if !pathpkg.IsAbs(path) {",
          "287:  }",
          "288:  result, err := listFiles(path, pattern, itself)",
          "289:  if err != nil {",
          "",
          "[Removed Lines]",
          "286:   return statusBadRequest(\"path must be absolute, got %q\", path)",
          "",
          "[Added Lines]",
          "286:   return BadRequest(\"path must be absolute, got %q\", path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:  contentType := req.Header.Get(\"Content-Type\")",
          "342:  mediaType, params, err := mime.ParseMediaType(contentType)",
          "343:  if err != nil {",
          "345:  }",
          "347:  switch mediaType {",
          "348:  case \"multipart/form-data\":",
          "349:   boundary := params[\"boundary\"]",
          "350:   if len(boundary) < minBoundaryLength {",
          "352:   }",
          "353:   return writeFiles(req.Body, boundary)",
          "354:  case \"application/json\":",
          "",
          "[Removed Lines]",
          "344:   return statusBadRequest(\"invalid Content-Type %q\", contentType)",
          "351:    return statusBadRequest(\"invalid boundary %q\", boundary)",
          "",
          "[Added Lines]",
          "344:   return BadRequest(\"invalid Content-Type %q\", contentType)",
          "351:    return BadRequest(\"invalid boundary %q\", boundary)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359:   }",
          "360:   decoder := json.NewDecoder(req.Body)",
          "361:   if err := decoder.Decode(&payload); err != nil {",
          "363:   }",
          "364:   switch payload.Action {",
          "365:   case \"make-dirs\":",
          "",
          "[Removed Lines]",
          "362:    return statusBadRequest(\"cannot decode request body: %v\", err)",
          "",
          "[Added Lines]",
          "362:    return BadRequest(\"cannot decode request body: %v\", err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:   case \"remove\":",
          "368:    return removePaths(payload.Paths)",
          "369:   case \"write\":",
          "371:   default:",
          "373:   }",
          "374:  default:",
          "376:  }",
          "377: }",
          "",
          "[Removed Lines]",
          "370:    return statusBadRequest(`must use multipart with \"write\" action`)",
          "372:    return statusBadRequest(\"invalid action %q\", payload.Action)",
          "375:   return statusBadRequest(\"invalid media type %q\", mediaType)",
          "",
          "[Added Lines]",
          "370:    return BadRequest(`must use multipart with \"write\" action`)",
          "372:    return BadRequest(\"invalid action %q\", payload.Action)",
          "375:   return BadRequest(\"invalid media type %q\", mediaType)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393:  mr := multipart.NewReader(body, boundary)",
          "394:  part, err := mr.NextPart()",
          "395:  if err != nil {",
          "397:  }",
          "398:  if part.FormName() != \"request\" {",
          "400:  }",
          "",
          "[Removed Lines]",
          "396:   return statusBadRequest(\"cannot read request metadata: %v\", err)",
          "399:   return statusBadRequest(`metadata field name must be \"request\", got %q`, part.FormName())",
          "",
          "[Added Lines]",
          "396:   return BadRequest(\"cannot read request metadata: %v\", err)",
          "399:   return BadRequest(`metadata field name must be \"request\", got %q`, part.FormName())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "406:  }",
          "407:  decoder := json.NewDecoder(part)",
          "408:  if err := decoder.Decode(&payload); err != nil {",
          "410:  }",
          "411:  if payload.Action != \"write\" {",
          "413:  }",
          "414:  if len(payload.Files) == 0 {",
          "416:  }",
          "417:  infos := make(map[string]writeFilesItem)",
          "418:  for _, file := range payload.Files {",
          "",
          "[Removed Lines]",
          "409:   return statusBadRequest(\"cannot decode request metadata: %v\", err)",
          "412:   return statusBadRequest(`multipart action must be \"write\", got %q`, payload.Action)",
          "415:   return statusBadRequest(\"must specify one or more files\")",
          "",
          "[Added Lines]",
          "409:   return BadRequest(\"cannot decode request metadata: %v\", err)",
          "412:   return BadRequest(`multipart action must be \"write\", got %q`, payload.Action)",
          "415:   return BadRequest(\"must specify one or more files\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "426:    break",
          "427:   }",
          "428:   if err != nil {",
          "430:   }",
          "431:   if part.FormName() != \"files\" {",
          "433:   }",
          "434:   path := multipartFilename(part)",
          "435:   info, ok := infos[path]",
          "436:   if !ok {",
          "438:   }",
          "439:   errors[path] = writeFile(info, part)",
          "440:   part.Close()",
          "",
          "[Removed Lines]",
          "429:    return statusBadRequest(\"cannot read file part %d: %v\", i, err)",
          "432:    return statusBadRequest(`field name must be \"files\", got %q`, part.FormName())",
          "437:    return statusBadRequest(\"no metadata for path %q\", path)",
          "",
          "[Added Lines]",
          "429:    return BadRequest(\"cannot read file part %d: %v\", i, err)",
          "432:    return BadRequest(`field name must be \"files\", got %q`, part.FormName())",
          "437:    return BadRequest(\"no metadata for path %q\", path)",
          "",
          "---------------"
        ],
        "internals/daemon/api_health.go||internals/daemon/api_health.go": [
          "File: internals/daemon/api_health.go -> internals/daemon/api_health.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  switch level {",
          "35:  case plan.UnsetLevel, plan.AliveLevel, plan.ReadyLevel:",
          "36:  default:",
          "38:  }",
          "40:  names := strutil.MultiCommaSeparatedList(query[\"names\"])",
          "",
          "[Removed Lines]",
          "37:   return statusBadRequest(`level must be \"alive\" or \"ready\"`)",
          "",
          "[Added Lines]",
          "37:   return BadRequest(`level must be \"alive\" or \"ready\"`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  checks, err := getChecks(c.d.overlord)",
          "43:  if err != nil {",
          "44:   logger.Noticef(\"Cannot fetch checks: %v\", err.Error())",
          "46:  }",
          "48:  healthy := true",
          "",
          "[Removed Lines]",
          "45:   return statusInternalError(\"internal server error\")",
          "",
          "[Added Lines]",
          "45:   return InternalError(\"internal server error\")",
          "",
          "---------------"
        ],
        "internals/daemon/api_logs.go||internals/daemon/api_logs.go": [
          "File: internals/daemon/api_logs.go -> internals/daemon/api_logs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  followStr := query.Get(\"follow\")",
          "63:  if followStr != \"\" && followStr != \"true\" && followStr != \"false\" {",
          "65:   response.ServeHTTP(w, req)",
          "66:   return",
          "67:  }",
          "",
          "[Removed Lines]",
          "64:   response := statusBadRequest(`follow parameter must be \"true\" or \"false\"`)",
          "",
          "[Added Lines]",
          "64:   response := BadRequest(`follow parameter must be \"true\" or \"false\"`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:  if nStr != \"\" {",
          "73:   n, err := strconv.Atoi(nStr)",
          "74:   if err != nil || n < -1 {",
          "76:    response.ServeHTTP(w, req)",
          "77:    return",
          "78:   }",
          "",
          "[Removed Lines]",
          "75:    response := statusBadRequest(\"n must be -1, 0, or a positive integer\")",
          "",
          "[Added Lines]",
          "75:    response := BadRequest(\"n must be -1, 0, or a positive integer\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:  if len(services) == 0 {",
          "88:   infos, err := r.svcMgr.Services(nil)",
          "89:   if err != nil {",
          "91:    response.ServeHTTP(w, req)",
          "92:    return",
          "93:   }",
          "",
          "[Removed Lines]",
          "90:    response := statusInternalError(\"cannot fetch services: %v\", err)",
          "",
          "[Added Lines]",
          "90:    response := InternalError(\"cannot fetch services: %v\", err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:  itsByName, err := r.svcMgr.ServiceLogs(services, numLogs)",
          "101:  if err != nil {",
          "103:   response.ServeHTTP(w, req)",
          "104:   return",
          "105:  }",
          "",
          "[Removed Lines]",
          "102:   response := statusInternalError(\"cannot fetch log iterators: %v\", err)",
          "",
          "[Added Lines]",
          "102:   response := InternalError(\"cannot fetch log iterators: %v\", err)",
          "",
          "---------------"
        ],
        "internals/daemon/api_notices.go||internals/daemon/api_notices.go": [
          "File: internals/daemon/api_notices.go -> internals/daemon/api_notices.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  requestUID, err := uidFromRequest(r)",
          "49:  if err != nil {",
          "51:  }",
          "52:  daemonUID := uint32(sysGetuid())",
          "",
          "[Removed Lines]",
          "50:   return statusForbidden(\"cannot determine UID of request, so cannot retrieve notices\")",
          "",
          "[Added Lines]",
          "50:   return Forbidden(\"cannot determine UID of request, so cannot retrieve notices\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  if len(query[\"user-id\"]) > 0 {",
          "58:   if !isAdmin(requestUID, daemonUID) {",
          "60:   }",
          "61:   userID, err = sanitizeUserIDFilter(query[\"user-id\"])",
          "62:   if err != nil {",
          "64:   }",
          "65:  }",
          "67:  if len(query[\"select\"]) > 0 {",
          "68:   if !isAdmin(requestUID, daemonUID) {",
          "70:   }",
          "71:   if len(query[\"user-id\"]) > 0 {",
          "73:   }",
          "74:   if query.Get(\"select\") != \"all\" {",
          "76:   }",
          "78:   userID = nil",
          "",
          "[Removed Lines]",
          "59:    return statusForbidden(`only admins may use the \"user-id\" filter`)",
          "63:    return statusBadRequest(`invalid \"user-id\" filter: %v`, err)",
          "69:    return statusForbidden(`only admins may use the \"select\" filter`)",
          "72:    return statusBadRequest(`cannot use both \"select\" and \"user-id\" parameters`)",
          "75:    return statusBadRequest(`invalid \"select\" filter: must be \"all\"`)",
          "",
          "[Added Lines]",
          "59:    return Forbidden(`only admins may use the \"user-id\" filter`)",
          "63:    return BadRequest(`invalid \"user-id\" filter: %v`, err)",
          "69:    return Forbidden(`only admins may use the \"select\" filter`)",
          "72:    return BadRequest(`cannot use both \"select\" and \"user-id\" parameters`)",
          "75:    return BadRequest(`invalid \"select\" filter: must be \"all\"`)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:  after, err := parseOptionalTime(query.Get(\"after\"))",
          "91:  if err != nil {",
          "93:  }",
          "95:  filter := &state.NoticeFilter{",
          "",
          "[Removed Lines]",
          "92:   return statusBadRequest(`invalid \"after\" timestamp: %v`, err)",
          "",
          "[Added Lines]",
          "92:   return BadRequest(`invalid \"after\" timestamp: %v`, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:  timeout, err := parseOptionalDuration(query.Get(\"timeout\"))",
          "103:  if err != nil {",
          "105:  }",
          "107:  st := c.d.overlord.State()",
          "",
          "[Removed Lines]",
          "104:   return statusBadRequest(\"invalid timeout: %v\", err)",
          "",
          "[Added Lines]",
          "104:   return BadRequest(\"invalid timeout: %v\", err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:   notices, err = st.WaitNotices(ctx, filter)",
          "119:   if errors.Is(err, context.Canceled) {",
          "121:   }",
          "124:   if err != nil && !errors.Is(err, context.DeadlineExceeded) {",
          "126:   }",
          "127:  } else {",
          "",
          "[Removed Lines]",
          "120:    return statusBadRequest(\"request canceled\")",
          "125:    return statusInternalError(\"cannot wait for notices: %s\", err)",
          "",
          "[Added Lines]",
          "120:    return BadRequest(\"request canceled\")",
          "125:    return InternalError(\"cannot wait for notices: %s\", err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188: func v1PostNotices(c *Command, r *http.Request, _ *UserState) Response {",
          "189:  requestUID, err := uidFromRequest(r)",
          "190:  if err != nil {",
          "192:  }",
          "194:  var payload struct {",
          "",
          "[Removed Lines]",
          "191:   return statusForbidden(\"cannot determine UID of request, so cannot create notice\")",
          "",
          "[Added Lines]",
          "191:   return Forbidden(\"cannot determine UID of request, so cannot create notice\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "200:  }",
          "201:  decoder := json.NewDecoder(r.Body)",
          "202:  if err := decoder.Decode(&payload); err != nil {",
          "204:  }",
          "206:  if payload.Action != \"add\" {",
          "208:  }",
          "209:  if payload.Type != \"custom\" {",
          "211:  }",
          "212:  if !customKeyRegexp.MatchString(payload.Key) {",
          "214:  }",
          "215:  if len(payload.Key) > maxNoticeKeyLength {",
          "217:  }",
          "219:  repeatAfter, err := parseOptionalDuration(payload.RepeatAfter)",
          "220:  if err != nil {",
          "222:  }",
          "224:  if len(payload.DataJSON) > maxNoticeDataSize {",
          "226:  }",
          "227:  var data map[string]string",
          "228:  if len(payload.DataJSON) > 0 {",
          "229:   err = json.Unmarshal(payload.DataJSON, &data)",
          "230:   if err != nil {",
          "232:   }",
          "233:  }",
          "",
          "[Removed Lines]",
          "203:   return statusBadRequest(\"cannot decode request body: %v\", err)",
          "207:   return statusBadRequest(\"invalid action %q\", payload.Action)",
          "210:   return statusBadRequest(`invalid type %q (can only add \"custom\" notices)`, payload.Type)",
          "213:   return statusBadRequest(`invalid key %q (must be in \"domain.com/key\" format)`, payload.Key)",
          "216:   return statusBadRequest(\"key must be %d bytes or less\", maxNoticeKeyLength)",
          "221:   return statusBadRequest(\"invalid repeat-after: %v\", err)",
          "225:   return statusBadRequest(\"total size of data must be %d bytes or less\", maxNoticeDataSize)",
          "231:    return statusBadRequest(\"cannot decode notice data: %v\", err)",
          "",
          "[Added Lines]",
          "203:   return BadRequest(\"cannot decode request body: %v\", err)",
          "207:   return BadRequest(\"invalid action %q\", payload.Action)",
          "210:   return BadRequest(`invalid type %q (can only add \"custom\" notices)`, payload.Type)",
          "213:   return BadRequest(`invalid key %q (must be in \"domain.com/key\" format)`, payload.Key)",
          "216:   return BadRequest(\"key must be %d bytes or less\", maxNoticeKeyLength)",
          "221:   return BadRequest(\"invalid repeat-after: %v\", err)",
          "225:   return BadRequest(\"total size of data must be %d bytes or less\", maxNoticeDataSize)",
          "231:    return BadRequest(\"cannot decode notice data: %v\", err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "241:   RepeatAfter: repeatAfter,",
          "242:  })",
          "243:  if err != nil {",
          "245:  }",
          "247:  return SyncResponse(addedNotice{ID: noticeId})",
          "",
          "[Removed Lines]",
          "244:   return statusInternalError(\"%v\", err)",
          "",
          "[Added Lines]",
          "244:   return InternalError(\"%v\", err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "250: func v1GetNotice(c *Command, r *http.Request, _ *UserState) Response {",
          "251:  requestUID, err := uidFromRequest(r)",
          "252:  if err != nil {",
          "254:  }",
          "255:  daemonUID := uint32(sysGetuid())",
          "256:  noticeID := muxVars(r)[\"id\"]",
          "",
          "[Removed Lines]",
          "253:   return statusForbidden(\"cannot determine UID of request, so cannot retrieve notice\")",
          "",
          "[Added Lines]",
          "253:   return Forbidden(\"cannot determine UID of request, so cannot retrieve notice\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "259:  defer st.Unlock()",
          "260:  notice := st.Notice(noticeID)",
          "261:  if notice == nil {",
          "263:  }",
          "264:  if !noticeViewableByUser(notice, requestUID, daemonUID) {",
          "266:  }",
          "267:  return SyncResponse(notice)",
          "268: }",
          "",
          "[Removed Lines]",
          "262:   return statusNotFound(\"cannot find notice with ID %q\", noticeID)",
          "265:   return statusForbidden(\"not allowed to access notice with id %q\", noticeID)",
          "",
          "[Added Lines]",
          "262:   return NotFound(\"cannot find notice with ID %q\", noticeID)",
          "265:   return Forbidden(\"not allowed to access notice with id %q\", noticeID)",
          "",
          "---------------"
        ],
        "internals/daemon/api_plan.go||internals/daemon/api_plan.go": [
          "File: internals/daemon/api_plan.go -> internals/daemon/api_plan.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: func v1GetPlan(c *Command, r *http.Request, _ *UserState) Response {",
          "28:  format := r.URL.Query().Get(\"format\")",
          "29:  if format != \"yaml\" {",
          "31:  }",
          "33:  servmgr := overlordServiceManager(c.d.overlord)",
          "34:  plan, err := servmgr.Plan()",
          "35:  if err != nil {",
          "37:  }",
          "38:  planYAML, err := yaml.Marshal(plan)",
          "39:  if err != nil {",
          "41:  }",
          "42:  return SyncResponse(string(planYAML))",
          "43: }",
          "",
          "[Removed Lines]",
          "30:   return statusBadRequest(\"invalid format %q\", format)",
          "36:   return statusInternalError(\"%v\", err)",
          "40:   return statusInternalError(\"cannot serialize plan: %v\", err)",
          "",
          "[Added Lines]",
          "30:   return BadRequest(\"invalid format %q\", format)",
          "36:   return InternalError(\"%v\", err)",
          "40:   return InternalError(\"cannot serialize plan: %v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  }",
          "53:  decoder := json.NewDecoder(r.Body)",
          "54:  if err := decoder.Decode(&payload); err != nil {",
          "56:  }",
          "58:  if payload.Action != \"add\" {",
          "60:  }",
          "61:  if payload.Label == \"\" {",
          "63:  }",
          "64:  if payload.Format != \"yaml\" {",
          "66:  }",
          "67:  layer, err := plan.ParseLayer(0, payload.Label, []byte(payload.Layer))",
          "68:  if err != nil {",
          "70:  }",
          "72:  servmgr := overlordServiceManager(c.d.overlord)",
          "",
          "[Removed Lines]",
          "55:   return statusBadRequest(\"cannot decode request body: %v\", err)",
          "59:   return statusBadRequest(\"invalid action %q\", payload.Action)",
          "62:   return statusBadRequest(\"label must be set\")",
          "65:   return statusBadRequest(\"invalid format %q\", payload.Format)",
          "69:   return statusBadRequest(\"cannot parse layer YAML: %v\", err)",
          "",
          "[Added Lines]",
          "55:   return BadRequest(\"cannot decode request body: %v\", err)",
          "59:   return BadRequest(\"invalid action %q\", payload.Action)",
          "62:   return BadRequest(\"label must be set\")",
          "65:   return BadRequest(\"invalid format %q\", payload.Format)",
          "69:   return BadRequest(\"cannot parse layer YAML: %v\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:  }",
          "78:  if err != nil {",
          "79:   if _, ok := err.(*servstate.LabelExists); ok {",
          "81:   }",
          "82:   if _, ok := err.(*plan.FormatError); ok {",
          "84:   }",
          "86:  }",
          "87:  return SyncResponse(true)",
          "88: }",
          "",
          "[Removed Lines]",
          "80:    return statusBadRequest(\"%v\", err)",
          "83:    return statusBadRequest(\"%v\", err)",
          "85:   return statusInternalError(\"%v\", err)",
          "",
          "[Added Lines]",
          "80:    return BadRequest(\"%v\", err)",
          "83:    return BadRequest(\"%v\", err)",
          "85:   return InternalError(\"%v\", err)",
          "",
          "---------------"
        ],
        "internals/daemon/api_services.go||internals/daemon/api_services.go": [
          "File: internals/daemon/api_services.go -> internals/daemon/api_services.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  servmgr := overlordServiceManager(c.d.overlord)",
          "42:  services, err := servmgr.Services(names)",
          "43:  if err != nil {",
          "45:  }",
          "47:  infos := make([]serviceInfo, 0, len(services))",
          "",
          "[Removed Lines]",
          "44:   return statusInternalError(\"%v\", err)",
          "",
          "[Added Lines]",
          "44:   return InternalError(\"%v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:  decoder := json.NewDecoder(r.Body)",
          "69:  if err := decoder.Decode(&payload); err != nil {",
          "71:  }",
          "73:  var err error",
          "",
          "[Removed Lines]",
          "70:   return statusBadRequest(\"cannot decode data from request body: %v\", err)",
          "",
          "[Added Lines]",
          "70:   return BadRequest(\"cannot decode data from request body: %v\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:  switch payload.Action {",
          "76:  case \"replan\":",
          "77:   if len(payload.Services) != 0 {",
          "79:   }",
          "80:  case \"autostart\":",
          "81:   if len(payload.Services) != 0 {",
          "83:   }",
          "84:   services, err := servmgr.DefaultServiceNames()",
          "85:   if err != nil {",
          "87:   }",
          "88:   if len(services) == 0 {",
          "89:    return SyncResponse(&resp{",
          "",
          "[Removed Lines]",
          "78:    return statusBadRequest(\"%s accepts no service names\", payload.Action)",
          "82:    return statusBadRequest(\"%s accepts no service names\", payload.Action)",
          "86:    return statusInternalError(\"%v\", err)",
          "",
          "[Added Lines]",
          "78:    return BadRequest(\"%s accepts no service names\", payload.Action)",
          "82:    return BadRequest(\"%s accepts no service names\", payload.Action)",
          "86:    return InternalError(\"%v\", err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:   payload.Services = services",
          "96:  default:",
          "97:   if len(payload.Services) == 0 {",
          "99:   }",
          "100:  }",
          "",
          "[Removed Lines]",
          "98:    return statusBadRequest(\"no services to %s provided\", payload.Action)",
          "",
          "[Added Lines]",
          "98:    return BadRequest(\"no services to %s provided\", payload.Action)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:   sort.Strings(services)",
          "178:   payload.Services = services",
          "179:  default:",
          "181:  }",
          "182:  if err != nil {",
          "184:  }",
          "",
          "[Removed Lines]",
          "180:   return statusBadRequest(\"action %q is unsupported\", payload.Action)",
          "183:   return statusBadRequest(\"cannot %s services: %v\", payload.Action, err)",
          "",
          "[Added Lines]",
          "180:   return BadRequest(\"action %q is unsupported\", payload.Action)",
          "183:   return BadRequest(\"cannot %s services: %v\", payload.Action, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213: }",
          "215: func v1GetService(c *Command, r *http.Request, _ *UserState) Response {",
          "217: }",
          "219: func v1PostService(c *Command, r *http.Request, _ *UserState) Response {",
          "221: }",
          "",
          "[Removed Lines]",
          "216:  return statusBadRequest(\"not implemented\")",
          "220:  return statusBadRequest(\"not implemented\")",
          "",
          "[Added Lines]",
          "216:  return BadRequest(\"not implemented\")",
          "220:  return BadRequest(\"not implemented\")",
          "",
          "---------------"
        ],
        "internals/daemon/api_signals.go||internals/daemon/api_signals.go": [
          "File: internals/daemon/api_signals.go -> internals/daemon/api_signals.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  var payload signalsPayload",
          "29:  decoder := json.NewDecoder(req.Body)",
          "30:  if err := decoder.Decode(&payload); err != nil {",
          "32:  }",
          "33:  if len(payload.Services) == 0 {",
          "35:  }",
          "37:  serviceMgr := c.d.overlord.ServiceManager()",
          "38:  err := serviceMgr.SendSignal(payload.Services, payload.Signal)",
          "39:  if err != nil {",
          "41:  }",
          "42:  return SyncResponse(true)",
          "43: }",
          "",
          "[Removed Lines]",
          "31:   return statusBadRequest(\"cannot decode request body: %v\", err)",
          "34:   return statusBadRequest(\"must specify one or more services\")",
          "40:   return statusInternalError(\"%s\", err)",
          "",
          "[Added Lines]",
          "31:   return BadRequest(\"cannot decode request body: %v\", err)",
          "34:   return BadRequest(\"must specify one or more services\")",
          "40:   return InternalError(\"%s\", err)",
          "",
          "---------------"
        ],
        "internals/daemon/api_tasks.go||internals/daemon/api_tasks.go": [
          "File: internals/daemon/api_tasks.go -> internals/daemon/api_tasks.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   logger.Noticef(\"Websocket: cannot find task with id %q\", taskID)",
          "42:  }",
          "44:  var connect websocketConnectFunc",
          "",
          "[Removed Lines]",
          "41:   return statusNotFound(\"cannot find task with id %q\", taskID)",
          "",
          "[Added Lines]",
          "41:   return NotFound(\"cannot find task with id %q\", taskID)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   connect = commandMgr.Connect",
          "49:  default:",
          "50:   logger.Noticef(\"Websocket %s: %q tasks do not have websockets\", task.ID(), task.Kind())",
          "52:  }",
          "54:  return websocketResponse{",
          "",
          "[Removed Lines]",
          "51:   return statusBadRequest(\"%q tasks do not have websockets\", task.Kind())",
          "",
          "[Added Lines]",
          "51:   return BadRequest(\"%q tasks do not have websockets\", task.Kind())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:  err := wr.connect(r, w, wr.task, wr.websocketID)",
          "71:  if errors.Is(err, os.ErrNotExist) {",
          "72:   logger.Noticef(\"Websocket %s: cannot find websocket with id %q\", wr.task.ID(), wr.websocketID)",
          "74:   rsp.ServeHTTP(w, r)",
          "75:   return",
          "76:  }",
          "77:  if err != nil {",
          "78:   logger.Noticef(\"Websocket %s: cannot connect to websocket %q: %v\", wr.task.ID(), wr.websocketID, err)",
          "80:   rsp.ServeHTTP(w, r)",
          "81:   return",
          "82:  }",
          "",
          "[Removed Lines]",
          "73:   rsp := statusNotFound(\"cannot find websocket with id %q\", wr.websocketID)",
          "79:   rsp := statusInternalError(\"cannot connect to websocket %q: %v\", wr.websocketID, err)",
          "",
          "[Added Lines]",
          "73:   rsp := NotFound(\"cannot find websocket with id %q\", wr.websocketID)",
          "79:   rsp := InternalError(\"cannot connect to websocket %q: %v\", wr.websocketID, err)",
          "",
          "---------------"
        ],
        "internals/daemon/api_warnings.go||internals/daemon/api_warnings.go": [
          "File: internals/daemon/api_warnings.go -> internals/daemon/api_warnings.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  }",
          "31:  decoder := json.NewDecoder(r.Body)",
          "32:  if err := decoder.Decode(&op); err != nil {",
          "34:  }",
          "35:  if op.Action != \"okay\" {",
          "37:  }",
          "38:  st := c.d.overlord.State()",
          "39:  st.Lock()",
          "",
          "[Removed Lines]",
          "33:   return statusBadRequest(\"cannot decode request body into warnings operation: %v\", err)",
          "36:   return statusBadRequest(\"unknown warning action %q\", op.Action)",
          "",
          "[Added Lines]",
          "33:   return BadRequest(\"cannot decode request body into warnings operation: %v\", err)",
          "36:   return BadRequest(\"unknown warning action %q\", op.Action)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:  case \"pending\", \"\":",
          "54:   all = false",
          "55:  default:",
          "57:  }",
          "59:  st := c.d.overlord.State()",
          "",
          "[Removed Lines]",
          "56:   return statusBadRequest(\"invalid select parameter: %q\", sel)",
          "",
          "[Added Lines]",
          "56:   return BadRequest(\"invalid select parameter: %q\", sel)",
          "",
          "---------------"
        ],
        "internals/daemon/daemon.go||internals/daemon/daemon.go": [
          "File: internals/daemon/daemon.go -> internals/daemon/daemon.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: func (c *Command) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
          "215:  user, err := userFromRequest(nil, r) // don't pass state as this does nothing right now",
          "216:  if err != nil {",
          "218:   return",
          "219:  }",
          "222:  if c.d.degradedErr != nil && r.Method != \"GET\" {",
          "224:   return",
          "225:  }",
          "",
          "[Removed Lines]",
          "217:   statusForbidden(\"forbidden\").ServeHTTP(w, r)",
          "223:   statusInternalError(c.d.degradedErr.Error()).ServeHTTP(w, r)",
          "",
          "[Added Lines]",
          "217:   Forbidden(\"forbidden\").ServeHTTP(w, r)",
          "223:   InternalError(c.d.degradedErr.Error()).ServeHTTP(w, r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:  case accessOK:",
          "230:  case accessUnauthorized:",
          "232:   return",
          "233:  case accessForbidden:",
          "235:   return",
          "236:  }",
          "238:  var rspf ResponseFunc",
          "241:  switch r.Method {",
          "242:  case \"GET\":",
          "",
          "[Removed Lines]",
          "231:   statusUnauthorized(\"access denied\").ServeHTTP(w, r)",
          "234:   statusForbidden(\"forbidden\").ServeHTTP(w, r)",
          "239:  var rsp = statusMethodNotAllowed(\"method %q not allowed\", r.Method)",
          "",
          "[Added Lines]",
          "231:   Unauthorized(\"access denied\").ServeHTTP(w, r)",
          "234:   Forbidden(\"forbidden\").ServeHTTP(w, r)",
          "239:  var rsp = MethodNotAllowed(\"method %q not allowed\", r.Method)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403: }",
          "405: type connTracker struct {",
          "",
          "[Removed Lines]",
          "402:  d.router.NotFoundHandler = statusNotFound(\"invalid API endpoint requested\")",
          "",
          "[Added Lines]",
          "402:  d.router.NotFoundHandler = NotFound(\"invalid API endpoint requested\")",
          "",
          "---------------"
        ],
        "internals/daemon/response.go||internals/daemon/response.go": [
          "File: internals/daemon/response.go -> internals/daemon/response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: func SyncResponse(result interface{}) Response {",
          "137:  if err, ok := result.(error); ok {",
          "139:  }",
          "141:  if rsp, ok := result.(Response); ok {",
          "",
          "[Removed Lines]",
          "138:   return statusInternalError(\"internal error: %v\", err)",
          "",
          "[Added Lines]",
          "138:   return InternalError(\"internal error: %v\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203: var (",
          "211: )",
          "",
          "[Removed Lines]",
          "204:  statusBadRequest       = makeErrorResponder(http.StatusBadRequest)",
          "205:  statusUnauthorized     = makeErrorResponder(http.StatusUnauthorized)",
          "206:  statusForbidden        = makeErrorResponder(http.StatusForbidden)",
          "207:  statusNotFound         = makeErrorResponder(http.StatusNotFound)",
          "208:  statusMethodNotAllowed = makeErrorResponder(http.StatusMethodNotAllowed)",
          "209:  statusInternalError    = makeErrorResponder(http.StatusInternalServerError)",
          "210:  statusGatewayTimeout   = makeErrorResponder(http.StatusGatewayTimeout)",
          "",
          "[Added Lines]",
          "204:  BadRequest       = makeErrorResponder(http.StatusBadRequest)",
          "205:  Unauthorized     = makeErrorResponder(http.StatusUnauthorized)",
          "206:  Forbidden        = makeErrorResponder(http.StatusForbidden)",
          "207:  NotFound         = makeErrorResponder(http.StatusNotFound)",
          "208:  MethodNotAllowed = makeErrorResponder(http.StatusMethodNotAllowed)",
          "209:  InternalError    = makeErrorResponder(http.StatusInternalServerError)",
          "210:  GatewayTimeout   = makeErrorResponder(http.StatusGatewayTimeout)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55bd54863a516248e2d264c3d5555f3a92d95786",
      "candidate_info": {
        "commit_hash": "55bd54863a516248e2d264c3d5555f3a92d95786",
        "repo": "canonical/pebble",
        "commit_url": "https://github.com/canonical/pebble/commit/55bd54863a516248e2d264c3d5555f3a92d95786",
        "files": [
          "internals/daemon/api.go",
          "internals/daemon/daemon_test.go"
        ],
        "message": "fix(daemon): require admin access for POSTs and file pull API (#406)\n\nMost of this was introduced in PR #358, when we ported the AccessChecker\nchanges from snapd, but accidentally set all the WriteAccess fields to\nUserAccess{} instead of AdminAccess{}. Previously there was a\nr.Method==\"GET\" check in Command.canAccess that handled this case.\n\nAdditionally:\n\n- We lock down the files \"pull\" API to require admin. Even though it's a\nread (GET), this meant any user could potentially read sensitive files.\n- We lock down the task-websocket endpoint to admin. This is a GET\nendpoint, but these websockets are used by exec to send stdin/out/err\nand commands to the exec'd process, so they should require admin too.\n\nI've added some tests for these to ensure we don't accidentally change\nthem in future, without noticing. How valuable these tests are I'm not\nsure, as they only cover a subset of the API endpoints, but it seems\nbetter than nothing.",
        "before_after_code_files": [
          "internals/daemon/api.go||internals/daemon/api.go",
          "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "internals/daemon/api.go||internals/daemon/api.go",
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ],
          "candidate": [
            "internals/daemon/api.go||internals/daemon/api.go",
            "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internals/daemon/api.go||internals/daemon/api.go": [
          "File: internals/daemon/api.go -> internals/daemon/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: }, {",
          "36:  Path:        \"/v1/warnings\",",
          "37:  ReadAccess:  UserAccess{},",
          "39:  GET:         v1GetWarnings,",
          "40:  POST:        v1AckWarnings,",
          "41: }, {",
          "",
          "[Removed Lines]",
          "38:  WriteAccess: UserAccess{},",
          "",
          "[Added Lines]",
          "38:  WriteAccess: AdminAccess{},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: }, {",
          "46:  Path:        \"/v1/changes/{id}\",",
          "47:  ReadAccess:  UserAccess{},",
          "49:  GET:         v1GetChange,",
          "50:  POST:        v1PostChange,",
          "51: }, {",
          "",
          "[Removed Lines]",
          "48:  WriteAccess: UserAccess{},",
          "",
          "[Added Lines]",
          "48:  WriteAccess: AdminAccess{},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: }, {",
          "56:  Path:        \"/v1/services\",",
          "57:  ReadAccess:  UserAccess{},",
          "59:  GET:         v1GetServices,",
          "60:  POST:        v1PostServices,",
          "61: }, {",
          "62:  Path:        \"/v1/services/{name}\",",
          "63:  ReadAccess:  UserAccess{},",
          "65:  GET:         v1GetService,",
          "66:  POST:        v1PostService,",
          "67: }, {",
          "",
          "[Removed Lines]",
          "58:  WriteAccess: UserAccess{},",
          "64:  WriteAccess: UserAccess{},",
          "",
          "[Added Lines]",
          "58:  WriteAccess: AdminAccess{},",
          "64:  WriteAccess: AdminAccess{},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:  GET:        v1GetPlan,",
          "71: }, {",
          "72:  Path:        \"/v1/layers\",",
          "74:  POST:        v1PostLayers,",
          "75: }, {",
          "76:  Path:        \"/v1/files\",",
          "79:  GET:         v1GetFiles,",
          "80:  POST:        v1PostFiles,",
          "81: }, {",
          "",
          "[Removed Lines]",
          "73:  WriteAccess: UserAccess{},",
          "77:  ReadAccess:  UserAccess{},",
          "78:  WriteAccess: UserAccess{},",
          "",
          "[Added Lines]",
          "73:  WriteAccess: AdminAccess{},",
          "77:  ReadAccess:  AdminAccess{}, // some files are sensitive, so require admin",
          "78:  WriteAccess: AdminAccess{},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:  GET:        v1GetLogs,",
          "85: }, {",
          "86:  Path:        \"/v1/exec\",",
          "88:  POST:        v1PostExec,",
          "89: }, {",
          "90:  Path:       \"/v1/tasks/{task-id}/websocket/{websocket-id}\",",
          "92:  GET:        v1GetTaskWebsocket,",
          "93: }, {",
          "94:  Path:        \"/v1/signals\",",
          "96:  POST:        v1PostSignals,",
          "97: }, {",
          "98:  Path:       \"/v1/checks\",",
          "",
          "[Removed Lines]",
          "87:  WriteAccess: UserAccess{},",
          "91:  ReadAccess: UserAccess{},",
          "95:  WriteAccess: UserAccess{},",
          "",
          "[Added Lines]",
          "87:  WriteAccess: AdminAccess{},",
          "91:  ReadAccess: AdminAccess{}, // used by exec, so require admin",
          "95:  WriteAccess: AdminAccess{},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "101: }, {",
          "102:  Path:        \"/v1/notices\",",
          "103:  ReadAccess:  UserAccess{},",
          "105:  GET:         v1GetNotices,",
          "106:  POST:        v1PostNotices,",
          "107: }, {",
          "",
          "[Removed Lines]",
          "104:  WriteAccess: UserAccess{},",
          "",
          "[Added Lines]",
          "104:  WriteAccess: UserAccess{}, // any user is allowed to add a notice with their own uid",
          "",
          "---------------"
        ],
        "internals/daemon/daemon_test.go||internals/daemon/daemon_test.go": [
          "File: internals/daemon/daemon_test.go -> internals/daemon/daemon_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"net\"",
          "23:  \"net/http\"",
          "24:  \"net/http/httptest\"",
          "25:  \"os\"",
          "26:  \"path/filepath\"",
          "27:  \"sync\"",
          "28:  \"syscall\"",
          "29:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  \"net/url\"",
          "28:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:  c.Check(tasks[0].Kind(), Equals, \"stop\")",
          "1249: }",
          "1251: type rebootSuite struct{}",
          "1253: var _ = Suite(&rebootSuite{})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1253: func (s *daemonSuite) TestWritesRequireAdminAccess(c *C) {",
          "1254:  for _, cmd := range API {",
          "1255:   if cmd.Path == \"/v1/notices\" {",
          "1257:    continue",
          "1258:   }",
          "1259:   switch cmd.WriteAccess.(type) {",
          "1260:   case OpenAccess, UserAccess:",
          "1261:    c.Errorf(\"%s WriteAccess should be AdminAccess, not %T\", cmd.Path, cmd.WriteAccess)",
          "1262:   }",
          "1263:  }",
          "1266:  cmd := apiCmd(\"/v1/files\")",
          "1267:  switch cmd.ReadAccess.(type) {",
          "1268:  case OpenAccess, UserAccess:",
          "1269:   c.Errorf(\"%s ReadAccess should be AdminAccess, not %T\", cmd.Path, cmd.WriteAccess)",
          "1270:  }",
          "1273:  cmd = apiCmd(\"/v1/tasks/{task-id}/websocket/{websocket-id}\")",
          "1274:  switch cmd.ReadAccess.(type) {",
          "1275:  case OpenAccess, UserAccess:",
          "1276:   c.Errorf(\"%s ReadAccess should be AdminAccess, not %T\", cmd.Path, cmd.WriteAccess)",
          "1277:  }",
          "1278: }",
          "1280: func (s *daemonSuite) TestAPIAccessLevels(c *C) {",
          "1281:  _ = s.newDaemon(c)",
          "1283:  tests := []struct {",
          "1284:   method string",
          "1285:   path   string",
          "1286:   body   string",
          "1287:   uid    int // -1 means no peer cred user",
          "1288:   status int",
          "1289:  }{",
          "1290:   {\"GET\", \"/v1/system-info\", ``, -1, http.StatusOK},",
          "1292:   {\"GET\", \"/v1/health\", ``, -1, http.StatusOK},",
          "1294:   {\"GET\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
          "1295:   {\"GET\", \"/v1/warnings\", ``, 42, http.StatusOK},",
          "1296:   {\"GET\", \"/v1/warnings\", ``, 0, http.StatusOK},",
          "1297:   {\"POST\", \"/v1/warnings\", ``, -1, http.StatusUnauthorized},",
          "1298:   {\"POST\", \"/v1/warnings\", ``, 42, http.StatusUnauthorized},",
          "1299:   {\"POST\", \"/v1/warnings\", ``, 0, http.StatusBadRequest},",
          "1301:   {\"GET\", \"/v1/changes\", ``, -1, http.StatusUnauthorized},",
          "1302:   {\"GET\", \"/v1/changes\", ``, 42, http.StatusOK},",
          "1303:   {\"GET\", \"/v1/changes\", ``, 0, http.StatusOK},",
          "1305:   {\"GET\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
          "1306:   {\"GET\", \"/v1/services\", ``, 42, http.StatusOK},",
          "1307:   {\"GET\", \"/v1/services\", ``, 0, http.StatusOK},",
          "1308:   {\"POST\", \"/v1/services\", ``, -1, http.StatusUnauthorized},",
          "1309:   {\"POST\", \"/v1/services\", ``, 42, http.StatusUnauthorized},",
          "1310:   {\"POST\", \"/v1/services\", ``, 0, http.StatusBadRequest},",
          "1312:   {\"POST\", \"/v1/layers\", ``, -1, http.StatusUnauthorized},",
          "1313:   {\"POST\", \"/v1/layers\", ``, 42, http.StatusUnauthorized},",
          "1314:   {\"POST\", \"/v1/layers\", ``, 0, http.StatusBadRequest},",
          "1316:   {\"GET\", \"/v1/files?action=list&path=/\", ``, -1, http.StatusUnauthorized},",
          "1317:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 42, http.StatusUnauthorized}, // even reading files requires admin",
          "1318:   {\"GET\", \"/v1/files?action=list&path=/\", ``, 0, http.StatusOK},",
          "1319:   {\"POST\", \"/v1/files\", `{}`, -1, http.StatusUnauthorized},",
          "1320:   {\"POST\", \"/v1/files\", `{}`, 42, http.StatusUnauthorized},",
          "1321:   {\"POST\", \"/v1/files\", `{}`, 0, http.StatusBadRequest},",
          "1323:   {\"GET\", \"/v1/logs\", ``, -1, http.StatusUnauthorized},",
          "1324:   {\"GET\", \"/v1/logs\", ``, 42, http.StatusOK},",
          "1325:   {\"GET\", \"/v1/logs\", ``, 0, http.StatusOK},",
          "1327:   {\"POST\", \"/v1/exec\", `{}`, -1, http.StatusUnauthorized},",
          "1328:   {\"POST\", \"/v1/exec\", `{}`, 42, http.StatusUnauthorized},",
          "1329:   {\"POST\", \"/v1/exec\", `{}`, 0, http.StatusBadRequest},",
          "1331:   {\"POST\", \"/v1/signals\", `{}`, -1, http.StatusUnauthorized},",
          "1332:   {\"POST\", \"/v1/signals\", `{}`, 42, http.StatusUnauthorized},",
          "1333:   {\"POST\", \"/v1/signals\", `{}`, 0, http.StatusBadRequest},",
          "1335:   {\"GET\", \"/v1/checks\", ``, -1, http.StatusUnauthorized},",
          "1336:   {\"GET\", \"/v1/checks\", ``, 42, http.StatusOK},",
          "1337:   {\"GET\", \"/v1/checks\", ``, 0, http.StatusOK},",
          "1339:   {\"GET\", \"/v1/notices\", ``, -1, http.StatusUnauthorized},",
          "1340:   {\"GET\", \"/v1/notices\", ``, 42, http.StatusOK},",
          "1341:   {\"GET\", \"/v1/notices\", ``, 0, http.StatusOK},",
          "1342:   {\"POST\", \"/v1/notices\", `{}`, -1, http.StatusUnauthorized},",
          "1343:   {\"POST\", \"/v1/notices\", `{}`, 42, http.StatusBadRequest},",
          "1344:   {\"POST\", \"/v1/notices\", `{}`, 0, http.StatusBadRequest},",
          "1345:  }",
          "1347:  for _, test := range tests {",
          "1348:   remoteAddr := \"\"",
          "1349:   if test.uid >= 0 {",
          "1350:    remoteAddr = fmt.Sprintf(\"pid=100;uid=%d;socket=;\", test.uid)",
          "1351:   }",
          "1352:   requestURL, err := url.Parse(\"http://localhost\" + test.path)",
          "1353:   c.Assert(err, IsNil)",
          "1354:   request := &http.Request{",
          "1355:    Method:     test.method,",
          "1356:    URL:        requestURL,",
          "1357:    Body:       io.NopCloser(strings.NewReader(test.body)),",
          "1358:    RemoteAddr: remoteAddr,",
          "1359:   }",
          "1360:   recorder := httptest.NewRecorder()",
          "1361:   cmd := apiCmd(requestURL.Path)",
          "1362:   cmd.ServeHTTP(recorder, request)",
          "1364:   response := recorder.Result()",
          "1365:   if response.StatusCode != test.status {",
          "1367:    c.Logf(\"%s %s uid=%d: expected %d, got %d; response body:\\n%s\",",
          "1368:     test.method, test.path, test.uid, test.status, response.StatusCode, recorder.Body.String())",
          "1369:   }",
          "1370:   c.Assert(response.StatusCode, Equals, test.status)",
          "1371:  }",
          "1372: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}