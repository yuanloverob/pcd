{
  "cve_id": "CVE-2019-0222",
  "cve_desc": "In Apache ActiveMQ 5.0.0 - 5.15.8, unmarshalling corrupt MQTT frame can lead to broker Out of Memory exception making it unresponsive.",
  "repo": "apache/activemq",
  "patch_hash": "f78c0962ffb46fae3397eed6b7ec1e6e15045031",
  "patch_info": {
    "commit_hash": "f78c0962ffb46fae3397eed6b7ec1e6e15045031",
    "repo": "apache/activemq",
    "commit_url": "https://github.com/apache/activemq/commit/f78c0962ffb46fae3397eed6b7ec1e6e15045031",
    "files": [
      "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java",
      "pom.xml"
    ],
    "message": "AMQ-7166 - upgrade mqtt client library",
    "before_after_code_files": [
      "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java||activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java"
    ]
  },
  "patch_diff": {
    "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java||activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java": [
      "File: activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java -> activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import static org.junit.Assert.assertEquals;",
      "20: import static org.junit.Assert.assertFalse;",
      "21: import static org.junit.Assert.assertTrue;",
      "23: import java.util.ArrayList;",
      "24: import java.util.List;",
      "25: import java.util.concurrent.TimeUnit;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import static org.junit.Assert.fail;",
      "24: import java.net.ProtocolException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34: import org.fusesource.mqtt.codec.MQTTFrame;",
      "35: import org.fusesource.mqtt.codec.PUBLISH;",
      "36: import org.fusesource.mqtt.codec.SUBSCRIBE;",
      "37: import org.junit.Before;",
      "38: import org.junit.Test;",
      "39: import org.slf4j.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: import org.fusesource.mqtt.codec.UNSUBSCRIBE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "254:         assertEquals(MESSAGE_SIZE, publish.payload().length());",
      "255:     }",
      "257:     @Test",
      "258:     public void testMessageDecodingPerformance() throws Exception {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "260:     @Test",
      "261:     public void testMessageDecodingCorrupted() throws Exception {",
      "262:         UNSUBSCRIBE unsubscribe = new UNSUBSCRIBE();",
      "264:         MQTTFrame frame = unsubscribe.encode();",
      "266:         DataByteArrayOutputStream str = new DataByteArrayOutputStream(5);",
      "267:         str.write(new byte[] {0,0,0,0,0});",
      "269:         frame.buffers[0] = str.toBuffer();",
      "271:         boolean decodingFailed = false;",
      "272:         try {",
      "273:             unsubscribe.decode(frame);",
      "274:         } catch (ProtocolException pe) {",
      "275:             decodingFailed = true;",
      "276:         }",
      "277:         if (!decodingFailed) {",
      "278:             fail(\"Should have failed decoding the frame\");",
      "279:         }",
      "280:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98b9f2e2839da6ccff53260571b0e3a43aeb4285",
      "candidate_info": {
        "commit_hash": "98b9f2e2839da6ccff53260571b0e3a43aeb4285",
        "repo": "apache/activemq",
        "commit_url": "https://github.com/apache/activemq/commit/98b9f2e",
        "files": [
          "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java",
          "pom.xml"
        ],
        "message": "AMQ-7166 - upgrade mqtt client library",
        "before_after_code_files": [
          "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java||activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java||activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java"
          ],
          "candidate": [
            "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java||activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java"
          ]
        }
      },
      "candidate_diff": {
        "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java||activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java": [
          "File: activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java -> activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTCodecTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertFalse;",
          "21: import static org.junit.Assert.assertTrue;",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "25: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import static org.junit.Assert.fail;",
          "24: import java.net.ProtocolException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.fusesource.mqtt.codec.MQTTFrame;",
          "35: import org.fusesource.mqtt.codec.PUBLISH;",
          "36: import org.fusesource.mqtt.codec.SUBSCRIBE;",
          "37: import org.junit.Before;",
          "38: import org.junit.Test;",
          "39: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.fusesource.mqtt.codec.UNSUBSCRIBE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:         assertEquals(MESSAGE_SIZE, publish.payload().length());",
          "255:     }",
          "257:     @Test",
          "258:     public void testMessageDecodingPerformance() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     @Test",
          "261:     public void testMessageDecodingCorrupted() throws Exception {",
          "262:         UNSUBSCRIBE unsubscribe = new UNSUBSCRIBE();",
          "264:         MQTTFrame frame = unsubscribe.encode();",
          "266:         DataByteArrayOutputStream str = new DataByteArrayOutputStream(5);",
          "267:         str.write(new byte[] {0,0,0,0,0});",
          "269:         frame.buffers[0] = str.toBuffer();",
          "271:         boolean decodingFailed = false;",
          "272:         try {",
          "273:             unsubscribe.decode(frame);",
          "274:         } catch (ProtocolException pe) {",
          "275:             decodingFailed = true;",
          "276:         }",
          "277:         if (!decodingFailed) {",
          "278:             fail(\"Should have failed decoding the frame\");",
          "279:         }",
          "280:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}