{
  "cve_id": "CVE-2023-34040",
  "cve_desc": "In Spring for Apache Kafka 3.0.9 and earlier and versions 2.9.10 and earlier, a possible deserialization attack vector existed, but only if unusual configuration was applied. An attacker would have to construct a malicious serialized object in one of the deserialization exception record headers.\n\nSpecifically, an application is vulnerable when all of the following are true:\n\n  *  The user does not\u00a0configure an ErrorHandlingDeserializer for the key and/or value of the record\n  *  The user explicitly sets container properties checkDeserExWhenKeyNull and/or checkDeserExWhenValueNull container properties to true.\n  *  The user allows untrusted sources to publish to a Kafka topic\n\n\nBy default, these properties are false, and the container only attempts to deserialize the headers if an ErrorHandlingDeserializer is configured. The ErrorHandlingDeserializer prevents the vulnerability by removing any such malicious headers before processing the record.\n\n\n",
  "repo": "spring-projects/spring-kafka",
  "patch_hash": "25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d",
  "patch_info": {
    "commit_hash": "25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d",
    "repo": "spring-projects/spring-kafka",
    "commit_url": "https://github.com/spring-projects/spring-kafka/commit/25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d",
    "files": [
      "spring-kafka-docs/src/main/asciidoc/kafka.adoc",
      "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
      "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
      "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
      "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
      "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
      "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
      "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
      "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
      "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
      "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
      "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java"
    ],
    "message": "Private Header Type for DeserializationExceptions\n\nUse a package-private header for deserialization exceptions.\n\n**cherry-pick to 2.9.x**\n# Conflicts:\n#\tspring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java\n#\tspring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java\n#\tspring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java\n#\tspring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
    "before_after_code_files": [
      "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
      "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
      "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java||spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
      "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java||spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
      "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
      "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
      "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
      "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
      "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
      "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
      "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java"
    ]
  },
  "patch_diff": {
    "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java": [
      "File: spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java -> spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "486:   if (consumer != null && this.verifyPartition) {",
      "487:    tp = checkPartition(tp, consumer);",
      "488:   }",
      "490:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, this.logger);",
      "492:     SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, this.logger);",
      "493:   Headers headers = new RecordHeaders(record.headers().toArray());",
      "494:   addAndEnhanceHeaders(record, exception, vDeserEx, kDeserEx, headers);",
      "",
      "[Removed Lines]",
      "489:   DeserializationException vDeserEx = ListenerUtils.getExceptionFromHeader(record,",
      "491:   DeserializationException kDeserEx = ListenerUtils.getExceptionFromHeader(record,",
      "",
      "[Added Lines]",
      "489:   DeserializationException vDeserEx = SerializationUtils.getExceptionFromHeader(record,",
      "491:   DeserializationException kDeserEx = SerializationUtils.getExceptionFromHeader(record,",
      "",
      "---------------"
    ],
    "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java": [
      "File: spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java -> spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "2929:    }",
      "2930:   }",
      "2934:    if (exception != null) {",
      "",
      "[Removed Lines]",
      "2932:   public void checkDeser(final ConsumerRecord<K, V> record, String headerName) {",
      "2933:    DeserializationException exception = ListenerUtils.getExceptionFromHeader(record, headerName, this.logger);",
      "",
      "[Added Lines]",
      "2932:   public void checkDeser(final ConsumerRecord<K, V> cRecord, String headerName) {",
      "2933:    DeserializationException exception = SerializationUtils.getExceptionFromHeader(cRecord, headerName,",
      "2934:      this.logger);",
      "",
      "---------------"
    ],
    "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java||spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java": [
      "File: spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java -> spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import org.apache.kafka.clients.consumer.OffsetAndMetadata;",
      "27: import org.apache.kafka.common.Metric;",
      "28: import org.apache.kafka.common.MetricName;",
      "33: import org.springframework.core.log.LogAccessor;",
      "34: import org.springframework.kafka.support.KafkaUtils;",
      "35: import org.springframework.kafka.support.serializer.DeserializationException;",
      "36: import org.springframework.lang.Nullable;",
      "37: import org.springframework.util.Assert;",
      "38: import org.springframework.util.backoff.BackOff;",
      "",
      "[Removed Lines]",
      "29: import org.apache.kafka.common.header.Header;",
      "30: import org.apache.kafka.common.header.Headers;",
      "31: import org.apache.kafka.common.header.internals.RecordHeaders;",
      "",
      "[Added Lines]",
      "33: import org.springframework.kafka.support.serializer.SerializationUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "100:  @Nullable",
      "101:  public static DeserializationException getExceptionFromHeader(final ConsumerRecord<?, ?> record,",
      "102:    String headerName, LogAccessor logger) {",
      "116:  }",
      "",
      "[Removed Lines]",
      "104:   Header header = record.headers().lastHeader(headerName);",
      "105:   if (header != null) {",
      "106:    byte[] value = header.value();",
      "107:    DeserializationException exception = byteArrayToDeserializationException(logger, value);",
      "108:    if (exception != null) {",
      "109:     Headers headers = new RecordHeaders(record.headers().toArray());",
      "110:     headers.remove(headerName);",
      "111:     exception.setHeaders(headers);",
      "112:    }",
      "113:    return exception;",
      "114:   }",
      "115:   return null;",
      "",
      "[Added Lines]",
      "100:  @Deprecated",
      "105:   return SerializationUtils.getExceptionFromHeader(record, headerName, logger);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "126:  @Nullable",
      "127:  public static DeserializationException byteArrayToDeserializationException(LogAccessor logger, byte[] value) {",
      "128:   try {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:  @Deprecated",
      "",
      "---------------"
    ],
    "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java||spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java": [
      "File: spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java -> spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: import org.springframework.kafka.listener.ConsumerSeekAware;",
      "49: import org.springframework.kafka.listener.ContainerProperties;",
      "50: import org.springframework.kafka.listener.GenericMessageListenerContainer;",
      "52: import org.springframework.kafka.support.KafkaHeaders;",
      "53: import org.springframework.kafka.support.KafkaUtils;",
      "54: import org.springframework.kafka.support.TopicPartitionOffset;",
      "",
      "[Removed Lines]",
      "51: import org.springframework.kafka.listener.ListenerUtils;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "542:  @Nullable",
      "543:  public static DeserializationException checkDeserialization(ConsumerRecord<?, ?> record, LogAccessor logger) {",
      "545:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, logger);",
      "546:   if (exception != null) {",
      "547:    logger.error(exception, () -> \"Reply value deserialization failed for \" + record.topic() + \"-\"",
      "548:      + record.partition() + \"@\" + record.offset());",
      "549:    return exception;",
      "550:   }",
      "552:     SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, logger);",
      "553:   if (exception != null) {",
      "554:    logger.error(exception, () -> \"Reply key deserialization failed for \" + record.topic() + \"-\"",
      "",
      "[Removed Lines]",
      "544:   DeserializationException exception = ListenerUtils.getExceptionFromHeader(record,",
      "551:   exception = ListenerUtils.getExceptionFromHeader(record,",
      "",
      "[Added Lines]",
      "543:   DeserializationException exception = SerializationUtils.getExceptionFromHeader(record,",
      "550:   exception = SerializationUtils.getExceptionFromHeader(record,",
      "",
      "---------------"
    ],
    "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java": [
      "File: spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java -> spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.springframework.kafka.support.serializer;",
      "19: import org.apache.kafka.common.header.internals.RecordHeader;",
      "29: class DeserializationExceptionHeader extends RecordHeader {",
      "36:  DeserializationExceptionHeader(String key, byte[] value) {",
      "37:   super(key, value);",
      "38:  }",
      "40: }",
      "",
      "---------------"
    ],
    "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java": [
      "File: spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java -> spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.springframework.kafka.support.serializer;",
      "19: import java.io.ByteArrayOutputStream;",
      "20: import java.io.IOException;",
      "21: import java.io.ObjectOutputStream;",
      "22: import java.lang.reflect.InvocationTargetException;",
      "23: import java.lang.reflect.Method;",
      "24: import java.util.function.BiFunction;",
      "26: import org.apache.kafka.common.header.Headers;",
      "29: import org.springframework.util.Assert;",
      "30: import org.springframework.util.ClassUtils;",
      "",
      "[Removed Lines]",
      "27: import org.apache.kafka.common.header.internals.RecordHeader;",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "22: import java.io.ObjectInputStream;",
      "24: import java.io.ObjectStreamClass;",
      "29: import org.apache.kafka.clients.consumer.ConsumerRecord;",
      "30: import org.apache.kafka.common.header.Header;",
      "32: import org.apache.kafka.common.header.internals.RecordHeaders;",
      "34: import org.springframework.core.log.LogAccessor;",
      "35: import org.springframework.kafka.support.KafkaUtils;",
      "36: import org.springframework.lang.Nullable;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "166:    }",
      "167:   }",
      "168:   headers.add(",
      "170:       ? KEY_DESERIALIZER_EXCEPTION_HEADER",
      "171:       : VALUE_DESERIALIZER_EXCEPTION_HEADER,",
      "172:       stream.toByteArray()));",
      "173:  }",
      "175: }",
      "",
      "[Removed Lines]",
      "169:     new RecordHeader(isForKeyArg",
      "",
      "[Added Lines]",
      "177:     new DeserializationExceptionHeader(isForKeyArg",
      "192:  @Nullable",
      "193:  public static DeserializationException getExceptionFromHeader(final ConsumerRecord<?, ?> record,",
      "194:    String headerName, LogAccessor logger) {",
      "196:   Header header = record.headers().lastHeader(headerName);",
      "197:   if (!(header instanceof DeserializationExceptionHeader)) {",
      "198:    logger.warn(",
      "199:      () -> String.format(\"Foreign deserialization exception header in (%s) ignored; possible attack?\",",
      "200:        KafkaUtils.format(record)));",
      "201:    return null;",
      "202:   }",
      "203:   if (header != null) {",
      "204:    byte[] value = header.value();",
      "205:    DeserializationException exception = byteArrayToDeserializationException(logger, header);",
      "206:    if (exception != null) {",
      "207:     Headers headers = new RecordHeaders(record.headers().toArray());",
      "208:     headers.remove(headerName);",
      "209:     exception.setHeaders(headers);",
      "210:    }",
      "211:    return exception;",
      "212:   }",
      "213:   return null;",
      "214:  }",
      "224:  @Nullable",
      "225:  public static DeserializationException byteArrayToDeserializationException(LogAccessor logger, Header header) {",
      "227:   if (!(header instanceof DeserializationExceptionHeader)) {",
      "228:    throw new IllegalStateException(\"Foreign deserialization exception header ignored; possible attack?\");",
      "229:   }",
      "230:   try {",
      "231:    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(header.value())) {",
      "233:     boolean first = true;",
      "235:     @Override",
      "236:     protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {",
      "237:      if (this.first) {",
      "238:       this.first = false;",
      "239:       Assert.state(desc.getName().equals(DeserializationException.class.getName()),",
      "240:         \"Header does not contain a DeserializationException\");",
      "241:      }",
      "242:      return super.resolveClass(desc);",
      "243:     }",
      "246:    };",
      "247:    return (DeserializationException) ois.readObject();",
      "248:   }",
      "249:   catch (IOException | ClassNotFoundException | ClassCastException e) {",
      "250:    logger.error(e, \"Failed to deserialize a deserialization exception\");",
      "251:    return null;",
      "252:   }",
      "253:  }",
      "",
      "---------------"
    ],
    "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java": [
      "File: spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java -> spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "71: import org.springframework.kafka.support.KafkaHeaders;",
      "72: import org.springframework.kafka.support.SendResult;",
      "73: import org.springframework.kafka.support.serializer.DeserializationException;",
      "74: import org.springframework.kafka.support.serializer.SerializationUtils;",
      "75: import org.springframework.kafka.test.utils.KafkaTestUtils;",
      "76: import org.springframework.util.concurrent.ListenableFuture;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74: import org.springframework.kafka.support.serializer.SerializationTestUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "172:   KafkaOperations<?, ?> template = mock(KafkaOperations.class);",
      "173:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
      "174:   Headers headers = new RecordHeaders();",
      "177:   Headers custom = new RecordHeaders();",
      "178:   custom.add(new RecordHeader(\"foo\", \"bar\".getBytes()));",
      "179:   recoverer.setHeadersFunction((rec, ex) -> custom);",
      "",
      "[Removed Lines]",
      "175:   headers.add(new RecordHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, header(false)));",
      "176:   headers.add(new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true)));",
      "",
      "[Added Lines]",
      "176:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER,",
      "177:     header(false)));",
      "178:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
      "179:     header(true)));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "202:   KafkaOperations<?, ?> template = mock(KafkaOperations.class);",
      "203:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
      "204:   Headers headers = new RecordHeaders();",
      "206:   SettableListenableFuture future = new SettableListenableFuture();",
      "207:   future.set(new Object());",
      "208:   willReturn(future).given(template).send(any(ProducerRecord.class));",
      "",
      "[Removed Lines]",
      "205:   headers.add(new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true)));",
      "",
      "[Added Lines]",
      "208:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
      "209:     header(true)));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
      "223:   Headers headers = new RecordHeaders();",
      "224:   DeserializationException deserEx = createDeserEx(true);",
      "227:   SettableListenableFuture future = new SettableListenableFuture();",
      "228:   future.set(new Object());",
      "229:   willReturn(future).given(template).send(any(ProducerRecord.class));",
      "",
      "[Removed Lines]",
      "225:   headers.add(",
      "226:     new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true, deserEx)));",
      "",
      "[Added Lines]",
      "229:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
      "230:     header(true, deserEx)));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "245:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
      "246:   recoverer.setRetainExceptionHeader(true);",
      "247:   Headers headers = new RecordHeaders();",
      "250:   SettableListenableFuture future = new SettableListenableFuture();",
      "251:   future.set(new Object());",
      "252:   willReturn(future).given(template).send(any(ProducerRecord.class));",
      "",
      "[Removed Lines]",
      "248:   headers.add(new RecordHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, header(false)));",
      "249:   headers.add(new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true)));",
      "",
      "[Added Lines]",
      "252:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER,",
      "253:     header(false)));",
      "254:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
      "255:     header(true)));",
      "",
      "---------------"
    ],
    "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java": [
      "File: spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java -> spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "128:   ErrorHandlingDeserializer<String> ehd = new ErrorHandlingDeserializer<>(new MyDes());",
      "129:   Headers headers = new RecordHeaders();",
      "130:   ehd.deserialize(\"foo\", headers, new byte[1]);",
      "133:   assertThat(dex.getMessage())",
      "134:     .contains(\"Could not serialize\")",
      "135:     .contains(\"original exception message\");",
      "",
      "[Removed Lines]",
      "131:   DeserializationException dex = ListenerUtils.byteArrayToDeserializationException(null,",
      "132:     headers.lastHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER).value());",
      "",
      "[Added Lines]",
      "131:   DeserializationException dex = SerializationUtils.byteArrayToDeserializationException(null,",
      "132:     headers.lastHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER));",
      "",
      "---------------"
    ],
    "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java": [
      "File: spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java -> spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: import org.springframework.kafka.core.ConsumerFactory;",
      "38: import org.springframework.kafka.listener.BatchListenerFailedException;",
      "39: import org.springframework.kafka.listener.ListenerExecutionFailedException;",
      "41: import org.springframework.kafka.support.KafkaHeaders;",
      "42: import org.springframework.kafka.support.converter.BatchMessagingMessageConverter;",
      "43: import org.springframework.kafka.support.converter.ConversionException;",
      "",
      "[Removed Lines]",
      "40: import org.springframework.kafka.listener.ListenerUtils;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:     .extracting(\"index\")",
      "75:     .isEqualTo(1);",
      "76:   assertThat(listener.values).containsExactly(new Foo(\"baz\"), null, new Foo(\"qux\"));",
      "78:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, null);",
      "79:   assertThat(vDeserEx).isNotNull();",
      "80:   assertThat(vDeserEx.getData()).isEqualTo(\"JUNK\".getBytes());",
      "",
      "[Removed Lines]",
      "77:   DeserializationException vDeserEx = ListenerUtils.getExceptionFromHeader(junkRecord,",
      "",
      "[Added Lines]",
      "76:   DeserializationException vDeserEx = SerializationUtils.getExceptionFromHeader(junkRecord,",
      "",
      "---------------"
    ],
    "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java": [
      "File: spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java -> spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.springframework.kafka.support.serializer;",
      "19: import org.apache.kafka.common.header.Header;",
      "26: public final class SerializationTestUtils {",
      "28:  private SerializationTestUtils() {",
      "29:  }",
      "31:  public static Header deserializationHeader(String key, byte[] value) {",
      "32:   return new DeserializationExceptionHeader(key, value);",
      "33:  }",
      "35: }",
      "",
      "---------------"
    ],
    "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java": [
      "File: spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java -> spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.springframework.kafka.support.serializer;",
      "19: import static org.assertj.core.api.Assertions.assertThat;",
      "20: import static org.mockito.BDDMockito.given;",
      "21: import static org.mockito.BDDMockito.willAnswer;",
      "22: import static org.mockito.BDDMockito.willReturn;",
      "23: import static org.mockito.Mockito.mock;",
      "24: import static org.mockito.Mockito.spy;",
      "26: import java.util.List;",
      "27: import java.util.function.Supplier;",
      "29: import org.apache.commons.logging.LogFactory;",
      "30: import org.apache.kafka.clients.consumer.ConsumerRecord;",
      "31: import org.apache.kafka.common.header.internals.RecordHeader;",
      "32: import org.apache.kafka.common.header.internals.RecordHeaders;",
      "33: import org.junit.jupiter.api.Test;",
      "34: import org.mockito.ArgumentCaptor;",
      "36: import org.springframework.core.log.LogAccessor;",
      "43: public class SerializationUtilsTests {",
      "45:  @Test",
      "46:  void foreignDeserEx() {",
      "47:   RecordHeaders headers = new RecordHeaders(",
      "48:     List.of(new RecordHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, \"junk\".getBytes())));",
      "49:   ConsumerRecord<String, String> rec = mock(ConsumerRecord.class);",
      "50:   willReturn(headers).given(rec).headers();",
      "51:   given(rec.topic()).willReturn(\"foo\");",
      "52:   given(rec.partition()).willReturn(1);",
      "53:   given(rec.offset()).willReturn(0L);",
      "54:   LogAccessor logger = spy(new LogAccessor(LogFactory.getLog(getClass())));",
      "55:   ArgumentCaptor<Supplier<String>> captor = ArgumentCaptor.forClass(Supplier.class);",
      "56:   willAnswer(inv -> null).given(logger).warn(captor.capture());",
      "57:   assertThat(SerializationUtils.getExceptionFromHeader(rec,",
      "58:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, logger)).isNull();",
      "59:   assertThat(captor.getValue().get())",
      "60:     .isEqualTo(\"Foreign deserialization exception header in (foo-1@0) ignored; possible attack?\");",
      "61:  }",
      "63: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fd15c7b29e4cb7a3a97380fdc82c646ded4fd7db",
      "candidate_info": {
        "commit_hash": "fd15c7b29e4cb7a3a97380fdc82c646ded4fd7db",
        "repo": "spring-projects/spring-kafka",
        "commit_url": "https://github.com/spring-projects/spring-kafka/commit/fd15c7b29e4cb7a3a97380fdc82c646ded4fd7db",
        "files": [
          "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java"
        ],
        "message": "GH-2784: Fix Invalid Warning Log Message\n\nResolves https://github.com/spring-projects/spring-kafka/issues/2784\n\n**cherry-pick to 2.9.x**\n\n(cherry picked from commit 6bfdbdb0a08b2483a4a492edd834ed2a4e96643f)",
        "before_after_code_files": [
          "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java"
          ],
          "candidate": [
            "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java -> spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:    String headerName, LogAccessor logger) {",
          "196:   Header header = record.headers().lastHeader(headerName);",
          "198:    logger.warn(",
          "199:      () -> String.format(\"Foreign deserialization exception header in (%s) ignored; possible attack?\",",
          "200:        KafkaUtils.format(record)));",
          "",
          "[Removed Lines]",
          "197:   if (!(header instanceof DeserializationExceptionHeader)) {",
          "",
          "[Added Lines]",
          "197:   if (header != null && !(header instanceof DeserializationExceptionHeader)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:  @Nullable",
          "225:  public static DeserializationException byteArrayToDeserializationException(LogAccessor logger, Header header) {",
          "228:    throw new IllegalStateException(\"Foreign deserialization exception header ignored; possible attack?\");",
          "229:   }",
          "230:   try {",
          "",
          "[Removed Lines]",
          "227:   if (!(header instanceof DeserializationExceptionHeader)) {",
          "",
          "[Added Lines]",
          "227:   if (header != null && !(header instanceof DeserializationExceptionHeader)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb779679812f61a8553ced3d0e4069dca65560ed",
      "candidate_info": {
        "commit_hash": "eb779679812f61a8553ced3d0e4069dca65560ed",
        "repo": "spring-projects/spring-kafka",
        "commit_url": "https://github.com/spring-projects/spring-kafka/commit/eb779679812f61a8553ced3d0e4069dca65560ed",
        "files": [
          "spring-kafka-docs/src/main/asciidoc/kafka.adoc",
          "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
          "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
          "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
          "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
          "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
          "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
          "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
          "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
          "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
          "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
          "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java"
        ],
        "message": "Private Header Type for DeserializationExceptions\n\nUse a package-private header for deserialization exceptions.\n\n**cherry-pick to 2.9.x**",
        "before_after_code_files": [
          "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
          "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
          "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java||spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
          "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java||spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
          "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
          "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
          "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
          "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
          "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
          "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
          "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
            "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
            "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java||spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
            "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java||spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
            "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
            "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
            "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
            "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
            "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
            "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
            "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java"
          ],
          "candidate": [
            "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
            "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
            "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java||spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
            "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java||spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
            "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
            "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
            "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
            "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
            "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
            "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
            "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java -> spring-kafka/src/main/java/org/springframework/kafka/listener/DeadLetterPublishingRecoverer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:   if (consumer != null && this.verifyPartition) {",
          "507:    tp = checkPartition(tp, consumer);",
          "508:   }",
          "510:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, this.logger);",
          "512:     SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, this.logger);",
          "513:   Headers headers = new RecordHeaders(record.headers().toArray());",
          "514:   addAndEnhanceHeaders(record, exception, vDeserEx, kDeserEx, headers);",
          "",
          "[Removed Lines]",
          "509:   DeserializationException vDeserEx = ListenerUtils.getExceptionFromHeader(record,",
          "511:   DeserializationException kDeserEx = ListenerUtils.getExceptionFromHeader(record,",
          "",
          "[Added Lines]",
          "509:   DeserializationException vDeserEx = SerializationUtils.getExceptionFromHeader(record,",
          "511:   DeserializationException kDeserEx = SerializationUtils.getExceptionFromHeader(record,",
          "",
          "---------------"
        ],
        "spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java||spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java -> spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2985:   }",
          "2987:   public void checkDeser(final ConsumerRecord<K, V> cRecord, String headerName) {",
          "2989:    if (exception != null) {",
          "",
          "[Removed Lines]",
          "2988:    DeserializationException exception = ListenerUtils.getExceptionFromHeader(cRecord, headerName, this.logger);",
          "",
          "[Added Lines]",
          "2988:    DeserializationException exception = SerializationUtils.getExceptionFromHeader(cRecord, headerName,",
          "2989:      this.logger);",
          "",
          "---------------"
        ],
        "spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java||spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java -> spring-kafka/src/main/java/org/springframework/kafka/listener/ListenerUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kafka.clients.consumer.ConsumerRecord;",
          "26: import org.apache.kafka.clients.consumer.OffsetAndMetadata;",
          "31: import org.springframework.core.log.LogAccessor;",
          "32: import org.springframework.kafka.support.serializer.DeserializationException;",
          "33: import org.springframework.lang.Nullable;",
          "34: import org.springframework.util.Assert;",
          "35: import org.springframework.util.backoff.BackOff;",
          "",
          "[Removed Lines]",
          "27: import org.apache.kafka.common.header.Header;",
          "28: import org.apache.kafka.common.header.Headers;",
          "29: import org.apache.kafka.common.header.internals.RecordHeaders;",
          "",
          "[Added Lines]",
          "30: import org.springframework.kafka.support.serializer.SerializationUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  @Nullable",
          "97:  public static DeserializationException getExceptionFromHeader(final ConsumerRecord<?, ?> record,",
          "98:    String headerName, LogAccessor logger) {",
          "112:  }",
          "",
          "[Removed Lines]",
          "100:   Header header = record.headers().lastHeader(headerName);",
          "101:   if (header != null) {",
          "102:    byte[] value = header.value();",
          "103:    DeserializationException exception = byteArrayToDeserializationException(logger, value);",
          "104:    if (exception != null) {",
          "105:     Headers headers = new RecordHeaders(record.headers().toArray());",
          "106:     headers.remove(headerName);",
          "107:     exception.setHeaders(headers);",
          "108:    }",
          "109:    return exception;",
          "110:   }",
          "111:   return null;",
          "",
          "[Added Lines]",
          "96:  @Deprecated",
          "101:   return SerializationUtils.getExceptionFromHeader(record, headerName, logger);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:  @Nullable",
          "123:  public static DeserializationException byteArrayToDeserializationException(LogAccessor logger, byte[] value) {",
          "124:   try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:  @Deprecated",
          "",
          "---------------"
        ],
        "spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java||spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java -> spring-kafka/src/main/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import org.springframework.kafka.listener.ConsumerSeekAware;",
          "49: import org.springframework.kafka.listener.ContainerProperties;",
          "50: import org.springframework.kafka.listener.GenericMessageListenerContainer;",
          "52: import org.springframework.kafka.support.KafkaHeaders;",
          "53: import org.springframework.kafka.support.KafkaUtils;",
          "54: import org.springframework.kafka.support.TopicPartitionOffset;",
          "",
          "[Removed Lines]",
          "51: import org.springframework.kafka.listener.ListenerUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569:  @Nullable",
          "570:  public static DeserializationException checkDeserialization(ConsumerRecord<?, ?> record, LogAccessor logger) {",
          "572:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, logger);",
          "573:   if (exception != null) {",
          "574:    logger.error(exception, () -> \"Reply value deserialization failed for \" + record.topic() + \"-\"",
          "575:      + record.partition() + \"@\" + record.offset());",
          "576:    return exception;",
          "577:   }",
          "579:     SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, logger);",
          "580:   if (exception != null) {",
          "581:    logger.error(exception, () -> \"Reply key deserialization failed for \" + record.topic() + \"-\"",
          "",
          "[Removed Lines]",
          "571:   DeserializationException exception = ListenerUtils.getExceptionFromHeader(record,",
          "578:   exception = ListenerUtils.getExceptionFromHeader(record,",
          "",
          "[Added Lines]",
          "570:   DeserializationException exception = SerializationUtils.getExceptionFromHeader(record,",
          "577:   exception = SerializationUtils.getExceptionFromHeader(record,",
          "",
          "---------------"
        ],
        "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java -> spring-kafka/src/main/java/org/springframework/kafka/support/serializer/DeserializationExceptionHeader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.springframework.kafka.support.serializer;",
          "19: import org.apache.kafka.common.header.internals.RecordHeader;",
          "29: class DeserializationExceptionHeader extends RecordHeader {",
          "36:  DeserializationExceptionHeader(String key, byte[] value) {",
          "37:   super(key, value);",
          "38:  }",
          "40: }",
          "",
          "---------------"
        ],
        "spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java||spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java": [
          "File: spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java -> spring-kafka/src/main/java/org/springframework/kafka/support/serializer/SerializationUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.kafka.support.serializer;",
          "19: import java.io.ByteArrayOutputStream;",
          "20: import java.io.IOException;",
          "21: import java.io.ObjectOutputStream;",
          "22: import java.lang.reflect.InvocationTargetException;",
          "23: import java.lang.reflect.Method;",
          "24: import java.util.function.BiFunction;",
          "26: import org.apache.kafka.common.header.Headers;",
          "29: import org.springframework.util.Assert;",
          "30: import org.springframework.util.ClassUtils;",
          "",
          "[Removed Lines]",
          "27: import org.apache.kafka.common.header.internals.RecordHeader;",
          "",
          "[Added Lines]",
          "19: import java.io.ByteArrayInputStream;",
          "22: import java.io.ObjectInputStream;",
          "24: import java.io.ObjectStreamClass;",
          "29: import org.apache.kafka.clients.consumer.ConsumerRecord;",
          "30: import org.apache.kafka.common.header.Header;",
          "32: import org.apache.kafka.common.header.internals.RecordHeaders;",
          "34: import org.springframework.core.log.LogAccessor;",
          "35: import org.springframework.kafka.support.KafkaUtils;",
          "36: import org.springframework.lang.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:    }",
          "167:   }",
          "168:   headers.add(",
          "170:       ? KEY_DESERIALIZER_EXCEPTION_HEADER",
          "171:       : VALUE_DESERIALIZER_EXCEPTION_HEADER,",
          "172:       stream.toByteArray()));",
          "173:  }",
          "175: }",
          "",
          "[Removed Lines]",
          "169:     new RecordHeader(isForKeyArg",
          "",
          "[Added Lines]",
          "177:     new DeserializationExceptionHeader(isForKeyArg",
          "192:  @Nullable",
          "193:  public static DeserializationException getExceptionFromHeader(final ConsumerRecord<?, ?> record,",
          "194:    String headerName, LogAccessor logger) {",
          "196:   Header header = record.headers().lastHeader(headerName);",
          "197:   if (!(header instanceof DeserializationExceptionHeader)) {",
          "198:    logger.warn(",
          "199:      () -> String.format(\"Foreign deserialization exception header in (%s) ignored; possible attack?\",",
          "200:        KafkaUtils.format(record)));",
          "201:    return null;",
          "202:   }",
          "203:   if (header != null) {",
          "204:    byte[] value = header.value();",
          "205:    DeserializationException exception = byteArrayToDeserializationException(logger, header);",
          "206:    if (exception != null) {",
          "207:     Headers headers = new RecordHeaders(record.headers().toArray());",
          "208:     headers.remove(headerName);",
          "209:     exception.setHeaders(headers);",
          "210:    }",
          "211:    return exception;",
          "212:   }",
          "213:   return null;",
          "214:  }",
          "224:  @Nullable",
          "225:  public static DeserializationException byteArrayToDeserializationException(LogAccessor logger, Header header) {",
          "227:   if (!(header instanceof DeserializationExceptionHeader)) {",
          "228:    throw new IllegalStateException(\"Foreign deserialization exception header ignored; possible attack?\");",
          "229:   }",
          "230:   try {",
          "231:    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(header.value())) {",
          "233:     boolean first = true;",
          "235:     @Override",
          "236:     protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {",
          "237:      if (this.first) {",
          "238:       this.first = false;",
          "239:       Assert.state(desc.getName().equals(DeserializationException.class.getName()),",
          "240:         \"Header does not contain a DeserializationException\");",
          "241:      }",
          "242:      return super.resolveClass(desc);",
          "243:     }",
          "246:    };",
          "247:    return (DeserializationException) ois.readObject();",
          "248:   }",
          "249:   catch (IOException | ClassNotFoundException | ClassCastException e) {",
          "250:    logger.error(e, \"Failed to deserialize a deserialization exception\");",
          "251:    return null;",
          "252:   }",
          "253:  }",
          "",
          "---------------"
        ],
        "spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java": [
          "File: spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java -> spring-kafka/src/test/java/org/springframework/kafka/listener/DeadLetterPublishingRecovererTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: import org.springframework.kafka.support.SendResult;",
          "74: import org.springframework.kafka.support.converter.ConversionException;",
          "75: import org.springframework.kafka.support.serializer.DeserializationException;",
          "76: import org.springframework.kafka.support.serializer.SerializationUtils;",
          "77: import org.springframework.kafka.test.utils.KafkaTestUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: import org.springframework.kafka.support.serializer.SerializationTestUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:   KafkaOperations<?, ?> template = mock(KafkaOperations.class);",
          "173:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
          "174:   Headers headers = new RecordHeaders();",
          "177:   Headers custom = new RecordHeaders();",
          "178:   custom.add(new RecordHeader(\"foo\", \"bar\".getBytes()));",
          "179:   recoverer.setHeadersFunction((rec, ex) -> custom);",
          "",
          "[Removed Lines]",
          "175:   headers.add(new RecordHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, header(false)));",
          "176:   headers.add(new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true)));",
          "",
          "[Added Lines]",
          "176:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER,",
          "177:     header(false)));",
          "178:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
          "179:     header(true)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:   KafkaOperations<?, ?> template = mock(KafkaOperations.class);",
          "203:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
          "204:   Headers headers = new RecordHeaders();",
          "206:   CompletableFuture future = new CompletableFuture();",
          "207:   future.complete(new Object());",
          "208:   willReturn(future).given(template).send(any(ProducerRecord.class));",
          "",
          "[Removed Lines]",
          "205:   headers.add(new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true)));",
          "",
          "[Added Lines]",
          "208:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
          "209:     header(true)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
          "223:   Headers headers = new RecordHeaders();",
          "224:   DeserializationException deserEx = createDeserEx(true);",
          "227:   CompletableFuture future = new CompletableFuture();",
          "228:   future.complete(new Object());",
          "229:   willReturn(future).given(template).send(any(ProducerRecord.class));",
          "",
          "[Removed Lines]",
          "225:   headers.add(",
          "226:     new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true, deserEx)));",
          "",
          "[Added Lines]",
          "229:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
          "230:     header(true, deserEx)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:   DeadLetterPublishingRecoverer recoverer = new DeadLetterPublishingRecoverer(template);",
          "246:   recoverer.setRetainExceptionHeader(true);",
          "247:   Headers headers = new RecordHeaders();",
          "250:   CompletableFuture future = new CompletableFuture();",
          "251:   future.complete(new Object());",
          "252:   willReturn(future).given(template).send(any(ProducerRecord.class));",
          "",
          "[Removed Lines]",
          "248:   headers.add(new RecordHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, header(false)));",
          "249:   headers.add(new RecordHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER, header(true)));",
          "",
          "[Added Lines]",
          "252:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER,",
          "253:     header(false)));",
          "254:   headers.add(SerializationTestUtils.deserializationHeader(SerializationUtils.KEY_DESERIALIZER_EXCEPTION_HEADER,",
          "255:     header(true)));",
          "",
          "---------------"
        ],
        "spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java": [
          "File: spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java -> spring-kafka/src/test/java/org/springframework/kafka/listener/ErrorHandlingDeserializerTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   ErrorHandlingDeserializer<String> ehd = new ErrorHandlingDeserializer<>(new MyDes());",
          "130:   Headers headers = new RecordHeaders();",
          "131:   ehd.deserialize(\"foo\", headers, new byte[1]);",
          "134:   assertThat(dex.getCause().getMessage())",
          "135:     .contains(\"Could not serialize\")",
          "136:     .contains(\"original exception message\");",
          "",
          "[Removed Lines]",
          "132:   DeserializationException dex = ListenerUtils.byteArrayToDeserializationException(null,",
          "133:     headers.lastHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER).value());",
          "",
          "[Added Lines]",
          "132:   DeserializationException dex = SerializationUtils.byteArrayToDeserializationException(null,",
          "133:     headers.lastHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER));",
          "",
          "---------------"
        ],
        "spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java||spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java": [
          "File: spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java -> spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchAdapterConversionErrorsTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import org.springframework.kafka.core.ConsumerFactory;",
          "38: import org.springframework.kafka.listener.BatchListenerFailedException;",
          "39: import org.springframework.kafka.listener.ListenerExecutionFailedException;",
          "41: import org.springframework.kafka.support.KafkaHeaders;",
          "42: import org.springframework.kafka.support.converter.BatchMessagingMessageConverter;",
          "43: import org.springframework.kafka.support.converter.ConversionException;",
          "",
          "[Removed Lines]",
          "40: import org.springframework.kafka.listener.ListenerUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     .extracting(\"index\")",
          "75:     .isEqualTo(1);",
          "76:   assertThat(listener.values).containsExactly(new Foo(\"baz\"), null, new Foo(\"qux\"));",
          "78:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, null);",
          "79:   assertThat(vDeserEx).isNotNull();",
          "80:   assertThat(vDeserEx.getData()).isEqualTo(\"JUNK\".getBytes());",
          "",
          "[Removed Lines]",
          "77:   DeserializationException vDeserEx = ListenerUtils.getExceptionFromHeader(junkRecord,",
          "",
          "[Added Lines]",
          "76:   DeserializationException vDeserEx = SerializationUtils.getExceptionFromHeader(junkRecord,",
          "",
          "---------------"
        ],
        "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java": [
          "File: spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java -> spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationTestUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.springframework.kafka.support.serializer;",
          "19: import org.apache.kafka.common.header.Header;",
          "26: public final class SerializationTestUtils {",
          "28:  private SerializationTestUtils() {",
          "29:  }",
          "31:  public static Header deserializationHeader(String key, byte[] value) {",
          "32:   return new DeserializationExceptionHeader(key, value);",
          "33:  }",
          "35: }",
          "",
          "---------------"
        ],
        "spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java||spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java": [
          "File: spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java -> spring-kafka/src/test/java/org/springframework/kafka/support/serializer/SerializationUtilsTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.springframework.kafka.support.serializer;",
          "19: import static org.assertj.core.api.Assertions.assertThat;",
          "20: import static org.mockito.BDDMockito.given;",
          "21: import static org.mockito.BDDMockito.willAnswer;",
          "22: import static org.mockito.BDDMockito.willReturn;",
          "23: import static org.mockito.Mockito.mock;",
          "24: import static org.mockito.Mockito.spy;",
          "26: import java.util.List;",
          "27: import java.util.function.Supplier;",
          "29: import org.apache.commons.logging.LogFactory;",
          "30: import org.apache.kafka.clients.consumer.ConsumerRecord;",
          "31: import org.apache.kafka.common.header.internals.RecordHeader;",
          "32: import org.apache.kafka.common.header.internals.RecordHeaders;",
          "33: import org.junit.jupiter.api.Test;",
          "34: import org.mockito.ArgumentCaptor;",
          "36: import org.springframework.core.log.LogAccessor;",
          "43: public class SerializationUtilsTests {",
          "45:  @Test",
          "46:  void foreignDeserEx() {",
          "47:   RecordHeaders headers = new RecordHeaders(",
          "48:     List.of(new RecordHeader(SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, \"junk\".getBytes())));",
          "49:   ConsumerRecord<String, String> rec = mock(ConsumerRecord.class);",
          "50:   willReturn(headers).given(rec).headers();",
          "51:   given(rec.topic()).willReturn(\"foo\");",
          "52:   given(rec.partition()).willReturn(1);",
          "53:   given(rec.offset()).willReturn(0L);",
          "54:   LogAccessor logger = spy(new LogAccessor(LogFactory.getLog(getClass())));",
          "55:   ArgumentCaptor<Supplier<String>> captor = ArgumentCaptor.forClass(Supplier.class);",
          "56:   willAnswer(inv -> null).given(logger).warn(captor.capture());",
          "57:   assertThat(SerializationUtils.getExceptionFromHeader(rec,",
          "58:     SerializationUtils.VALUE_DESERIALIZER_EXCEPTION_HEADER, logger)).isNull();",
          "59:   assertThat(captor.getValue().get())",
          "60:     .isEqualTo(\"Foreign deserialization exception header in (foo-1@0) ignored; possible attack?\");",
          "61:  }",
          "63: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}