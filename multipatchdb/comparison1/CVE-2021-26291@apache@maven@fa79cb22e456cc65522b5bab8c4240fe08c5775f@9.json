{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b7beb4db8ad15f1ed26c08df32d6ac1ae96ac0c",
      "candidate_info": {
        "commit_hash": "6b7beb4db8ad15f1ed26c08df32d6ac1ae96ac0c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6b7beb4db8ad15f1ed26c08df32d6ac1ae96ac0c",
        "files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ],
        "message": "[MNG-7019] Notify also at start when profile is missing",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java": [
          "File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java -> maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:             validatePrerequisitesForNonMavenPluginProjects( session.getProjects() );",
          "294:             lifecycleStarter.execute( session );",
          "296:             validateActivatedProfiles( session.getProjects(), request.getActiveProfiles() );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:             validateActivatedProfiles( session.getProjects(), request.getActiveProfiles() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed3279809cad6c77cd8e5c217230c612d1222d9a",
      "candidate_info": {
        "commit_hash": "ed3279809cad6c77cd8e5c217230c612d1222d9a",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ed3279809cad6c77cd8e5c217230c612d1222d9a",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Update DOAP with Maven 3.8.3 release",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     <release>",
          "34:       <Version>",
          "35:         <name>Latest stable release</name>",
          "36:         <created>2021-08-04</created>",
          "37:         <revision>3.8.2</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         <created>2021-09-27</created>",
          "37:         <revision>3.8.3</revision>",
          "38:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.zip</file-release>",
          "39:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz</file-release>",
          "40:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/source/apache-maven-3.8.3-src.zip</file-release>",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.3/source/apache-maven-3.8.3-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "44:         <name>Apache Maven 3.8.2</name>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05b748ff6aa15aa63a9c9d5f9f5679f47bf9e83d",
      "candidate_info": {
        "commit_hash": "05b748ff6aa15aa63a9c9d5f9f5679f47bf9e83d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/05b748ff6aa15aa63a9c9d5f9f5679f47bf9e83d",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ],
        "message": "[MNG-5561] Plugin relocation loses configuration\n\nPreviously, to locate plugin configuration in the project the plugin descriptor\nwas read and the GA were extracted. This always worked because the GA from the\nmodel and the GA from plugin descriptor (plugin.xml) were identical. When a\nplugin is relocated the target artifact is read, thus its plugin descriptor as\nwell. Naturally, the GA of new (relocated) does not correspond to the old\n(static) one in the model. Therefore, the configuration is not found.\nNew approach is to use the original plugin GA to locate the configuration in\nthe model regardless of relocation.",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultMojoExecutionConfigurator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     @Override",
          "42:     public void configure( MavenProject project, MojoExecution mojoExecution, boolean allowPluginLevelConfig )",
          "43:     {",
          "48:         Plugin plugin = findPlugin( g, a, project.getBuildPlugins() );",
          "",
          "[Removed Lines]",
          "44:         String g = mojoExecution.getGroupId();",
          "46:         String a = mojoExecution.getArtifactId();",
          "",
          "[Added Lines]",
          "44:         String g = mojoExecution.getPlugin().getGroupId();",
          "46:         String a = mojoExecution.getPlugin().getArtifactId();",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/BuildPluginManagerStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, List<RemoteRepository> repositories,",
          "43:                                              RepositorySystemSession session )",
          "44:     {",
          "46:     }",
          "48:     public ClassRealm getPluginRealm( MavenSession session, PluginDescriptor pluginDescriptor )",
          "",
          "[Removed Lines]",
          "45:         return MojoExecutorStub.createMojoDescriptor( plugin.getKey() );",
          "",
          "[Added Lines]",
          "45:         return MojoExecutorStub.createMojoDescriptor( plugin );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.maven.lifecycle.internal.MojoExecutor;",
          "22: import org.apache.maven.lifecycle.internal.PhaseRecorder;",
          "23: import org.apache.maven.lifecycle.internal.ProjectIndex;",
          "24: import org.apache.maven.plugin.MojoExecution;",
          "25: import org.apache.maven.plugin.descriptor.MojoDescriptor;",
          "26: import org.apache.maven.plugin.descriptor.PluginDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.apache.maven.model.Plugin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     }",
          "58:     {",
          "59:         final PluginDescriptor descriptor = new PluginDescriptor();",
          "61:         final MojoDescriptor mojoDescriptor = new MojoDescriptor();",
          "63:         mojoDescriptor.setPluginDescriptor( descriptor );",
          "64:         return mojoDescriptor;",
          "65:     }",
          "",
          "[Removed Lines]",
          "57:     public static MojoDescriptor createMojoDescriptor( String mojoDescription )",
          "60:         descriptor.setArtifactId( mojoDescription );",
          "62:         mojoDescriptor.setDescription( mojoDescription );",
          "",
          "[Added Lines]",
          "58:     public static MojoDescriptor createMojoDescriptor( Plugin plugin )",
          "61:         descriptor.setGroupId( plugin.getGroupId() );",
          "62:         descriptor.setArtifactId( plugin.getArtifactId() );",
          "63:         descriptor.setPlugin( plugin );",
          "64:         descriptor.setVersion( plugin.getVersion() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8edac61ae51029ce73f5f4cabd2b5652556d5090",
      "candidate_info": {
        "commit_hash": "8edac61ae51029ce73f5f4cabd2b5652556d5090",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8edac61ae51029ce73f5f4cabd2b5652556d5090",
        "files": [
          "apache-maven/src/bin/mvnDebug",
          "apache-maven/src/bin/mvnDebug.cmd"
        ],
        "message": "[MNG-7149] Introduce MAVEN_DEBUG_ADDRESS in mvnDebug scripts\n\nmvnDebug socket now binds by default on 8000. set MAVEN_DEBUG_ADDRESS\nenvironment variable to choose another address (host:port).\n\nThis closes #469",
        "before_after_code_files": [
          "apache-maven/src/bin/mvnDebug.cmd||apache-maven/src/bin/mvnDebug.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvnDebug.cmd||apache-maven/src/bin/mvnDebug.cmd": [
          "File: apache-maven/src/bin/mvnDebug.cmd -> apache-maven/src/bin/mvnDebug.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @REM",
          "21: @REM Environment Variable Prerequisites",
          "22: @REM",
          "28: @REM -----------------------------------------------------------------------------",
          "30: @setlocal",
          "33: @call \"%~dp0\"mvn.cmd %*",
          "",
          "[Removed Lines]",
          "23: @REM   JAVA_HOME          Must point at your Java Development Kit installation.",
          "24: @REM   MAVEN_BATCH_ECHO  (Optional) Set to 'on' to enable the echoing of the batch commands.",
          "25: @REM   MAVEN_BATCH_PAUSE (Optional) set to 'on' to wait for a key stroke before ending.",
          "26: @REM   MAVEN_OPTS        (Optional) Java runtime options used when Maven is executed.",
          "27: @REM   MAVEN_SKIP_RC     (Optional) Flag to disable loading of mavenrc files.",
          "31: @set MAVEN_DEBUG_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000",
          "",
          "[Added Lines]",
          "23: @REM   JAVA_HOME           Must point at your Java Development Kit installation.",
          "24: @REM   MAVEN_BATCH_ECHO    (Optional) Set to 'on' to enable the echoing of the batch commands.",
          "25: @REM   MAVEN_BATCH_PAUSE   (Optional) set to 'on' to wait for a key stroke before ending.",
          "26: @REM   MAVEN_OPTS          (Optional) Java runtime options used when Maven is executed.",
          "27: @REM   MAVEN_SKIP_RC       (Optional) Flag to disable loading of mavenrc files.",
          "28: @REM   MAVEN_DEBUG_ADDRESS (Optional) Set the debug address. Default value is 8000",
          "31: @REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'",
          "32: @echo off",
          "33: @REM set title of command window",
          "34: title %0",
          "35: @REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'",
          "36: @if \"%MAVEN_BATCH_ECHO%\"==\"on\" echo %MAVEN_BATCH_ECHO%",
          "40: IF \"%MAVEN_DEBUG_ADDRESS%\"==\"\" @set MAVEN_DEBUG_ADDRESS=8000",
          "42: @set MAVEN_DEBUG_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=%MAVEN_DEBUG_ADDRESS%",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5056e418824d9e074d45285d3a6242c4de55c05",
      "candidate_info": {
        "commit_hash": "b5056e418824d9e074d45285d3a6242c4de55c05",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b5056e418824d9e074d45285d3a6242c4de55c05",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java"
        ],
        "message": "[MNG-6828] DependencyResolutionException breaks serialization",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java||maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java||maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java -> maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     extends Exception",
          "27: {",
          "31:     public DependencyResolutionException( DependencyResolutionResult result, String message, Throwable cause )",
          "32:     {",
          "",
          "[Removed Lines]",
          "29:     private DependencyResolutionResult result;",
          "",
          "[Added Lines]",
          "29:     private final transient DependencyResolutionResult result;",
          "",
          "---------------"
        ]
      }
    }
  ]
}