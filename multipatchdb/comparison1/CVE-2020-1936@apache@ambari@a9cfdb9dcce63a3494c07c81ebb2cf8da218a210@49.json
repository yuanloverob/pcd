{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6354fb8fdf6fb424a9ca1e1ae37aff26d2eaf508",
      "candidate_info": {
        "commit_hash": "6354fb8fdf6fb424a9ca1e1ae37aff26d2eaf508",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6354fb8fdf6fb424a9ca1e1ae37aff26d2eaf508",
        "files": [
          "ambari-web/app/controllers/main/admin/service_auto_start.js",
          "ambari-web/test/controllers/main/admin/service_auto_start_test.js"
        ],
        "message": "[AMBARI-24836] Service Auto start is enabled after page refresh",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/admin/service_auto_start.js||ambari-web/app/controllers/main/admin/service_auto_start.js",
          "ambari-web/test/controllers/main/admin/service_auto_start_test.js||ambari-web/test/controllers/main/admin/service_auto_start_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/admin/service_auto_start.js||ambari-web/app/controllers/main/admin/service_auto_start.js": [
          "File: ambari-web/app/controllers/main/admin/service_auto_start.js -> ambari-web/app/controllers/main/admin/service_auto_start.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   },",
          "115:   load: function() {",
          "122:       });",
          "123:     });",
          "124:   },",
          "126:   loadComponentsConfigs: function () {",
          "",
          "[Removed Lines]",
          "116:     App.router.get('configurationController').getCurrentConfigsBySites(['cluster-env']).done((data) => {",
          "117:       this.set('clusterConfigs', data[0].properties);",
          "118:       this.set('isGeneralRecoveryEnabled', data[0].properties.recovery_enabled === 'true');",
          "119:       this.set('isGeneralRecoveryEnabledCached', this.get('isGeneralRecoveryEnabled'));",
          "120:       this.loadComponentsConfigs().then(() => {",
          "121:         this.set('isLoaded', true);",
          "",
          "[Added Lines]",
          "116:     const self = this;",
          "117:     const clusterConfigController = App.router.get('configurationController');",
          "118:     clusterConfigController.updateConfigTags().always(function () {",
          "119:       clusterConfigController.getCurrentConfigsBySites(['cluster-env']).done((data) => {",
          "120:         self.set('clusterConfigs', data[0].properties);",
          "121:         self.set('isGeneralRecoveryEnabled', data[0].properties.recovery_enabled === 'true');",
          "122:         self.set('isGeneralRecoveryEnabledCached', self.get('isGeneralRecoveryEnabled'));",
          "123:         self.loadComponentsConfigs().then(() => {",
          "124:           self.set('isLoaded', true);",
          "125:         });",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/main/admin/service_auto_start_test.js||ambari-web/test/controllers/main/admin/service_auto_start_test.js": [
          "File: ambari-web/test/controllers/main/admin/service_auto_start_test.js -> ambari-web/test/controllers/main/admin/service_auto_start_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:           ]);",
          "81:         }",
          "82:       });",
          "83:       sinon.stub(controller, 'loadComponentsConfigs').returns({",
          "84:         then: Em.clb",
          "85:       });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       sinon.stub(App.router.get('configurationController'), 'updateConfigTags').returns({",
          "84:         always: Em.clb",
          "85:       });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     });",
          "88:     afterEach(function() {",
          "89:       App.router.get('configurationController').getCurrentConfigsBySites.restore();",
          "90:       controller.loadComponentsConfigs.restore();",
          "91:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:       App.router.get('configurationController').updateConfigTags.restore();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9f76fb6d657c946616c7f2bb854c67370066a34",
      "candidate_info": {
        "commit_hash": "c9f76fb6d657c946616c7f2bb854c67370066a34",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c9f76fb6d657c946616c7f2bb854c67370066a34",
        "files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ],
        "message": "AMBARI-25379 Fix 'All' selection regarding templated variables\n\nChange-Id: Ic6e6ff587124335ac23efe5272c02dde585922d3",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js": [
          "File: ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js -> ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:             }",
          "423:             if (templateSrv.variables[0].query === \"hbase-users\") {",
          "431:                   metricsPromises.push(_.map(options.targets, function(target) {",
          "432:                     target.hbUser = processUser;",
          "433:                     var metricTransform = !target.transform || target.transform === \"none\" ? '' : '._' + target.transform;",
          "",
          "[Removed Lines]",
          "424:               var allUsers = templateSrv.variables.filter(function(variable) { return variable.query === \"hbase-users\";});",
          "425:               var selectedUsers = (_.isEmpty(allUsers)) ? \"\" : allUsers[0].options.filter(function(user)",
          "426:               { return user.selected; }).map(function(uName) { return uName.value; });",
          "427:               if (selectedUsers[0] === \"\") {",
          "428:                 selectedUsers = \"\";",
          "429:               }",
          "430:               _.forEach(selectedUser, function(processUser) {",
          "",
          "[Added Lines]",
          "424:               var allUsers = templateSrv.variables.filter(function(variable) {",
          "425:                 return variable.query === \"hbase-users\";",
          "426:               });",
          "427:               var selectedUsers = (_.isEmpty(allUsers)) ? \"\" : allUsers[0].options",
          "428:                 .filter(getSelectedItems)",
          "429:                 .map(function(uName) {",
          "430:                   return uName.value;",
          "431:                 });",
          "433:               _.forEach(selectedUsers, function(processUser) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "469:               var allTopics = templateSrv.variables.filter(function(variable) {",
          "470:                 return variable.query === \"kafka-topics\";",
          "471:               });",
          "480:               _.forEach(selectedTopics, function(processTopic) {",
          "481:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "482:                   target.kbTopic = processTopic;",
          "",
          "[Removed Lines]",
          "472:               var selectedTopics = (_.isEmpty(allTopics)) ? \"\" : allTopics[0].options.filter(function(topic) {",
          "473:                 return topic.selected;",
          "474:               }).map(function(topicName) {",
          "475:                 return topicName.value;",
          "476:               });",
          "477:               if (selectedTopics[0] === \"\") {",
          "478:                 selectedTopics = \"\";",
          "479:               }",
          "",
          "[Added Lines]",
          "475:               var selectedTopics = (_.isEmpty(allTopics)) ? \"\" : allTopics[0].options",
          "476:                 .filter(getSelectedItems)",
          "477:                 .map(function(topicName) {",
          "478:                   return topicName.value;",
          "479:                 });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:             if (templateSrv.variables[0].query === \"infra_solr_core\") {",
          "524:                 });",
          "525:             }",
          "528:             if (templateSrv.variables[0].query === \"infra_solr_collection\") {",
          "541:                 });",
          "542:             }",
          "545:             if (templateSrv.variables[0].query === \"topologies\" && !templateSrv.variables[1]) {",
          "553:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "554:                   target.sTopology = processTopology;",
          "555:                   target.sTopoMetric = target.metric.replace('*', target.sTopology);",
          "",
          "[Removed Lines]",
          "512:                 var allCores = templateSrv.variables.filter(function(variable) { return variable.query === \"infra_solr_core\";});",
          "513:                 var selectedCores = (_.isEmpty(allCores)) ? \"\" : allCores[0].options.filter(function(core)",
          "514:                 { return core.selected; }).map(function(coreName) { return coreName.value; });",
          "515:                 if (selectedCores[0] === \"\") {",
          "516:                   selectedCores = \"\";",
          "517:                 }",
          "518:                 _.forEach(selectedCore, function(processCore) {",
          "519:                     metricsPromises.push(_.map(options.targets, function(target) {",
          "520:                         target.sCore = processCore;",
          "521:                         target.sCoreMetric = target.metric.replace('*', target.sCore);",
          "522:                         return getSolrCoreData(target);",
          "523:                     }));",
          "529:                 var allCollections = templateSrv.variables.filter(function(variable) { return variable.query === \"infra_solr_collection\";});",
          "530:                 var selectedCollections = (_.isEmpty(allCollections)) ? \"\" : allCollections[0].options.filter(function(collection)",
          "531:                 { return collection.selected; }).map(function(collectionsName) { return collectionsName.value; });",
          "532:                 if (selectedCollections [0] === \"\") {",
          "533:                   selectedCollections = \"\";",
          "534:                 }",
          "535:                 _.forEach(selectedCollection, function(processCollection) {",
          "536:                     metricsPromises.push(_.map(options.targets, function(target) {",
          "537:                         target.sCollection = processCollection;",
          "538:                         target.sCollectionMetric = target.metric.replace('*', target.sCollection);",
          "539:                         return getSolrCollectionData(target);",
          "540:                     }));",
          "546:               var allTopologies = templateSrv.variables.filter(function(variable) { return variable.query === \"topologies\";});",
          "547:               var selectedTopologies = (_.isEmpty(allTopologies)) ? \"\" : allTopologies[0].options.filter(function(topo)",
          "548:               { return topo.selected; }).map(function(topoName) { return topoName.value; });",
          "549:               if (selectedTopologies === \"\") {",
          "550:                 selectedTopologies = \"\";",
          "551:               }",
          "552:               _.forEach(selectedTopology, function(processTopology) {",
          "",
          "[Added Lines]",
          "513:               var allCores = templateSrv.variables.filter(function(variable) {",
          "514:                 return variable.query === \"infra_solr_core\";",
          "515:               });",
          "516:               var selectedCores = (_.isEmpty(allCores)) ? \"\" : allCores[0].options",
          "517:                 .filter(getSelectedItems)",
          "518:                 .map(function(coreName) {",
          "519:                   return coreName.value;",
          "522:               _.forEach(selectedCores, function(processCore) {",
          "523:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "524:                   target.sCore = processCore;",
          "525:                   target.sCoreMetric = target.metric.replace('*', target.sCore);",
          "526:                   return getSolrCoreData(target);",
          "527:                 }));",
          "528:               });",
          "533:               var allCollections = templateSrv.variables.filter(function(variable) {",
          "534:                 return variable.query === \"infra_solr_collection\";",
          "535:               });",
          "536:               var selectedCollections = (_.isEmpty(allCollections)) ? \"\" : allCollections[0].options",
          "537:                 .filter(getSelectedItems)",
          "538:                 .map(function(collectionsName) {",
          "539:                   return collectionsName.value;",
          "542:               _.forEach(selectedCollections, function(processCollection) {",
          "543:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "544:                   target.sCollection = processCollection;",
          "545:                   target.sCollectionMetric = target.metric.replace('*', target.sCollection);",
          "546:                   return getSolrCollectionData(target);",
          "547:                 }));",
          "548:               });",
          "553:               var allTopologies = templateSrv.variables.filter(function(variable) {",
          "554:                 return variable.query === \"topologies\";",
          "555:               });",
          "556:               var selectedTopologies = (_.isEmpty(allTopologies)) ? \"\" : allTopologies[0].options",
          "557:                 .filter(getSelectedItems)",
          "558:                 .map(function(topoName) {",
          "559:                   return topoName.value;",
          "560:                 });",
          "562:               _.forEach(selectedTopologies, function(processTopology) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590:             if (templateSrv.variables[0].query === \"druidDataSources\" && !templateSrv.variables[1]) {",
          "598:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "599:                   target.sDataSource = processDataSource;",
          "600:                   target.sDataSourceMetric = target.metric.replace('*', target.sDataSource);",
          "",
          "[Removed Lines]",
          "591:               var allDataSources = templateSrv.variables.filter(function(variable) { return variable.query === \"druidDataSources\";});",
          "592:               var selectedDataSources = (_.isEmpty(allDataSources)) ? \"\" : allDataSources[0].options.filter(function(dataSource)",
          "593:                             { return dataSource.selected; }).map(function(dataSourceName) { return dataSourceName.value; });",
          "594:               if (selectedDataSources[0] === \"\") {",
          "595:                 selectedDataSources = \"\";",
          "596:               }",
          "597:               _.forEach(selectedDataSource, function(processDataSource) {",
          "",
          "[Added Lines]",
          "601:               var allDataSources = templateSrv.variables.filter(function(variable) {",
          "602:                 return variable.query === \"druidDataSources\";",
          "603:               });",
          "604:               var selectedDataSources = (_.isEmpty(allDataSources)) ? \"\" : allDataSources[0].options",
          "605:                 .filter(getSelectedItems)",
          "606:                 .map(function(dataSourceName) {",
          "607:                   return dataSourceName.value;",
          "608:                 });",
          "610:               _.forEach(selectedDataSources, function(processDataSource) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1135:         AmbariMetricsDatasource: AmbariMetricsDatasource",
          "1136:       };",
          "1138:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1151:       function getSelectedItems(item, index, options) {",
          "1153:         return index > 0 && (options[0].selected || item.selected);",
          "1154:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e91c2f525547c935dd3386720144fd9269a6466",
      "candidate_info": {
        "commit_hash": "2e91c2f525547c935dd3386720144fd9269a6466",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/2e91c2f525547c935dd3386720144fd9269a6466",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java",
          "ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java",
          "ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/test/python/TestAmbariServer.py"
        ],
        "message": "AMBARI-24533. Let end users disable endpoint identification during SSL handshake with the LDAP server",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java",
          "ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java||ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java||ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java",
          "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   REFERRAL_HANDLING(AmbariServerConfigurationCategory.LDAP_CONFIGURATION, \"ambari.ldap.advanced.referrals\", PLAINTEXT, \"follow\", \"Determines whether to follow LDAP referrals to other URLs when the LDAP controller doesn't have the requested object.\"),",
          "74:   PAGINATION_ENABLED(AmbariServerConfigurationCategory.LDAP_CONFIGURATION, \"ambari.ldap.advanced.pagination_enabled\", PLAINTEXT, \"true\", \"Determines whether results from LDAP are paginated when requested.\"),",
          "75:   COLLISION_BEHAVIOR(AmbariServerConfigurationCategory.LDAP_CONFIGURATION, \"ambari.ldap.advance.collision_behavior\", PLAINTEXT, \"convert\", \"Determines how to handle username collision while updating from LDAP.\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   DISABLE_ENDPOINT_IDENTIFICATION(AmbariServerConfigurationCategory.LDAP_CONFIGURATION, \"ambari.ldap.advanced.disable_endpoint_identification\", PLAINTEXT, \"false\", \"Determines whether to disable endpoint identification (hostname verification) during SSL handshake while updating from LDAP.\"),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java||ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java -> ambari-server/src/main/java/org/apache/ambari/server/ldap/domain/AmbariLdapConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return configValue(AmbariServerConfigurationKey.REFERRAL_HANDLING);",
          "205:   }",
          "207:   public Map<String, String> toMap() {",
          "208:     return (configurationMap == null) ? Collections.emptyMap() : new HashMap<>(configurationMap);",
          "209:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:   public boolean disableEndpointIdentification() {",
          "208:     return Boolean.valueOf(configValue(AmbariServerConfigurationKey.DISABLE_ENDPOINT_IDENTIFICATION));",
          "209:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:     ldapServerProperties.setSyncUserMemberFilter(configValue(AmbariServerConfigurationKey.USER_MEMBER_FILTER));",
          "270:     ldapServerProperties.setSyncGroupMemberFilter(configValue(AmbariServerConfigurationKey.GROUP_MEMBER_FILTER));",
          "271:     ldapServerProperties.setPaginationEnabled(parseBoolean(configValue(AmbariServerConfigurationKey.PAGINATION_ENABLED)));",
          "273:     if (hasAnyValueWithKey(AmbariServerConfigurationKey.GROUP_BASE, AmbariServerConfigurationKey.GROUP_OBJECT_CLASS, AmbariServerConfigurationKey.GROUP_MEMBER_ATTRIBUTE,",
          "274:         AmbariServerConfigurationKey.GROUP_NAME_ATTRIBUTE, AmbariServerConfigurationKey.GROUP_MAPPING_RULES, AmbariServerConfigurationKey.GROUP_SEARCH_FILTER)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:     ldapServerProperties.setDisableEndpointIdentification(disableEndpointIdentification());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   private String syncUserMemberFilter = \"\";",
          "67:   private String syncGroupMemberFilter = \"\";",
          "69:   private boolean paginationEnabled = true;",
          "70:   private String adminGroupMappingMemberAttr = \"\"; // custom group search filter for admin mappings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   private boolean disableEndpointIdentification = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     return referralMethod;",
          "297:   }",
          "299:   public boolean isPaginationEnabled() {",
          "300:     return paginationEnabled;",
          "301:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:   public boolean isDisableEndpointIdentification() {",
          "301:     return disableEndpointIdentification;",
          "302:   }",
          "304:   public void setDisableEndpointIdentification(boolean disableEndpointIdentification) {",
          "305:     this.disableEndpointIdentification = disableEndpointIdentification;",
          "306:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java||ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java -> ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   private static final String UID_ATTRIBUTE = \"uid\";",
          "96:   private static final String OBJECT_CLASS_ATTRIBUTE = \"objectClass\";",
          "97:   private static final int USERS_PAGE_SIZE = 500;",
          "100:   private static final String IS_MEMBER_DN_REGEXP = \"^(?i)(uid|cn|%s|%s)=.*$\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   private static final String SYSTEM_PROPERTY_DISABLE_ENDPOINT_IDENTIFICATION = \"com.sun.jndi.ldap.object.disableEndpointIdentification\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:   protected LdapTemplate loadLdapTemplate() {",
          "764:     final LdapServerProperties properties = getConfiguration().getLdapServerProperties();",
          "766:       LOG.info(\"Reloading properties\");",
          "767:       ldapServerProperties = properties;",
          "",
          "[Removed Lines]",
          "763:     LdapServerProperties ldapServerProperties = getLdapProperties();",
          "765:     if (ldapTemplate == null || !properties.equals(ldapServerProperties)) {",
          "",
          "[Added Lines]",
          "765:     if (ldapTemplate == null || !properties.equals(getLdapProperties())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "780:         ldapContextSource.setPassword(ldapServerProperties.getManagerPassword());",
          "781:       }",
          "783:       try {",
          "784:         ldapContextSource.afterPropertiesSet();",
          "785:       } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:       if (ldapServerProperties.isUseSsl() && ldapServerProperties.isDisableEndpointIdentification()) {",
          "784:         System.setProperty(SYSTEM_PROPERTY_DISABLE_ENDPOINT_IDENTIFICATION, \"true\");",
          "785:         LOG.info(\"Disabled endpoint identification\");",
          "786:       } else {",
          "787:         System.clearProperty(SYSTEM_PROPERTY_DISABLE_ENDPOINT_IDENTIFICATION);",
          "788:         LOG.info(\"Removed endpoint identification disabling\");",
          "789:       }",
          "791:       ldapContextSource.setReferral(ldapServerProperties.getReferralMethod());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "787:         throw new UsernameNotFoundException(\"LDAP Context Source not loaded\", e);",
          "788:       }",
          "792:       ldapTemplate = createLdapTemplate(ldapContextSource);",
          "794:       ldapTemplate.setIgnorePartialResultException(true);",
          "",
          "[Removed Lines]",
          "790:       ldapContextSource.setReferral(ldapServerProperties.getReferralMethod());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py": [
          "File: ambari-server/src/main/python/ambari-server.py -> ambari-server/src/main/python/ambari-server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:   parser.add_option('--ldap-referral', default=None, help=\"Referral method [follow/ignore] for LDAP\", dest=\"ldap_referral\")",
          "566:   parser.add_option('--ldap-bind-anonym', default=None, help=\"Bind anonymously [true/false] for LDAP\", dest=\"ldap_bind_anonym\")",
          "567:   parser.add_option('--ldap-sync-username-collisions-behavior', default=None, help=\"Handling behavior for username collisions [convert/skip] for LDAP sync\", dest=\"ldap_sync_username_collisions_behavior\")",
          "568:   parser.add_option('--ldap-force-lowercase-usernames', default=None, help=\"Declares whether to force the ldap user name to be lowercase or leave as-is\", dest=\"ldap_force_lowercase_usernames\")",
          "569:   parser.add_option('--ldap-pagination-enabled', default=None, help=\"Determines whether results from LDAP are paginated when requested\", dest=\"ldap_pagination_enabled\")",
          "570:   parser.add_option('--ldap-force-setup', action=\"store_true\", default=False, help=\"Forces the use of LDAP even if other (i.e. PAM) authentication method is configured already or if there is no authentication method configured at all\", dest=\"ldap_force_setup\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:   parser.add_option('--ldap-sync-disable-endpoint-identification', default=None, help=\"Determines whether to disable endpoint identification (hostname verification) during SSL handshake for LDAP sync. This option takes effect only if --ldap-ssl is set to 'true'\", dest=\"ldap_sync_disable_endpoint_identification\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py": [
          "File: ambari-server/src/main/python/ambari_server/setupSecurity.py -> ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: LDAP_MGR_PASSWORD_FILENAME = \"ldap-password.dat\"",
          "94: LDAP_ANONYMOUS_BIND=\"ambari.ldap.connectivity.anonymous_bind\"",
          "95: LDAP_USE_SSL=\"ambari.ldap.connectivity.use_ssl\"",
          "96: NO_AUTH_METHOD_CONFIGURED = \"no auth method\"",
          "98: def read_master_key(isReset=False, options = None):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: LDAP_DISABLE_ENDPOINT_IDENTIFICATION = \"ambari.ldap.advanced.disable_endpoint_identification\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:   ldap_property_list_opt = [LDAP_MGR_USERNAME_PROPERTY,",
          "752:                             LDAP_MGR_PASSWORD_PROPERTY,",
          "753:                             SSL_TRUSTSTORE_TYPE_PROPERTY,",
          "754:                             SSL_TRUSTSTORE_PATH_PROPERTY,",
          "755:                             SSL_TRUSTSTORE_PASSWORD_PROPERTY]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:                             LDAP_DISABLE_ENDPOINT_IDENTIFICATION,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "790:       ts_password = None",
          "792:       if ldaps:",
          "793:         truststore_default = \"n\"",
          "794:         truststore_set = bool(SSL_TRUSTSTORE_PATH_DEFAULT)",
          "795:         if truststore_set:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:         disable_endpoint_identification = get_validated_string_input(\"Disable endpoint identification during SSL handshake [true/false] (false): \", \"false\",",
          "796:                                                                      REGEX_TRUE_FALSE, \"Invalid characters in the input!\", False, allowEmpty=True, answer=options.ldap_sync_disable_endpoint_identification)",
          "797:         ldap_property_value_map[LDAP_DISABLE_ENDPOINT_IDENTIFICATION] = disable_endpoint_identification",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py": [
          "File: ambari-server/src/test/python/TestAmbariServer.py -> ambari-server/src/test/python/TestAmbariServer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8711:     options.ambari_admin_password = None",
          "8712:     options.ldap_sync_admin_name = None",
          "8713:     options.ldap_sync_username_collisions_behavior = None",
          "8714:     options.ldap_force_lowercase_usernames = None",
          "8715:     options.ldap_pagination_enabled = None",
          "8716:     options.ldap_sync_admin_password = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8714:     options.ldap_sync_disable_endpoint_identification = None",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ffd67ff3b39a8d4bdeb9a9428ae7196a3fffd48",
      "candidate_info": {
        "commit_hash": "9ffd67ff3b39a8d4bdeb9a9428ae7196a3fffd48",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9ffd67ff3b39a8d4bdeb9a9428ae7196a3fffd48",
        "files": [
          "ambari-server/pom.xml",
          "ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java",
          "ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java"
        ],
        "message": "[AMBARI-24507] Remove dependency on org.bouncycastle bcprov-jdk15on before version 1.6.0 for Ambari Server",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java||ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java",
          "ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java||ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java||ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java -> ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:     EntryMapper<String> entryMapper = new EntryMapper<String>() {",
          "182:       @Override",
          "183:       public String map(Entry entry) throws LdapException {",
          "185:       }",
          "186:     };",
          "",
          "[Removed Lines]",
          "184:         return entry.get(ambariLdapConfiguration.groupNameAttribute()).get().getString();",
          "",
          "[Added Lines]",
          "184:         return entry.get(ambariLdapConfiguration.groupNameAttribute()).get().getValue();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java||ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.apache.directory.api.ldap.model.entry.DefaultAttribute;",
          "21: import org.apache.directory.api.ldap.model.entry.DefaultEntry;",
          "22: import org.apache.directory.api.ldap.model.entry.Entry;",
          "24: import org.easymock.TestSubject;",
          "25: import org.junit.Assert;",
          "26: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "23: import org.apache.directory.api.ldap.model.entry.StringValue;",
          "",
          "[Added Lines]",
          "23: import org.apache.directory.api.ldap.model.entry.Value;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:       Entry entry = new DefaultEntry();",
          "97:       try {",
          "98:         entry.setDn(\"dn=\" + member.name() + \"-\" + i);",
          "100:         entryList.add(entry);",
          "101:       } catch (Exception e) {",
          "102:         LOG.error(e.getMessage());",
          "",
          "[Removed Lines]",
          "99:         entry.add(new DefaultAttribute(member.attrName(), new StringValue(\"xxx\")));",
          "",
          "[Added Lines]",
          "99:         entry.add(new DefaultAttribute(member.attrName(), new Value(\"xxx\")));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderBaseTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDNWithSpaceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderForDuplicateUserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.security.authorization;",
          "21: import static org.easymock.EasyMock.expect;",
          "22: import static org.easymock.EasyMock.expectLastCall;",
          "26: import static org.junit.Assert.assertNull;",
          "27: import static org.junit.Assert.assertTrue;",
          "30: import java.util.Collections;",
          "35: import org.apache.ambari.server.configuration.Configuration;",
          "38: import org.apache.ambari.server.ldap.service.AmbariLdapConfigurationProvider;",
          "41: import org.apache.ambari.server.orm.entities.UserEntity;",
          "42: import org.apache.ambari.server.security.ClientSecurityType;",
          "43: import org.apache.ambari.server.security.authentication.AmbariUserAuthentication;",
          "44: import org.apache.ambari.server.security.authentication.InvalidUsernamePasswordCombinationException;",
          "59: import org.junit.Test;",
          "62: import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
          "63: import org.springframework.security.core.Authentication;",
          "136:   @Test(expected = InvalidUsernamePasswordCombinationException.class)",
          "137:   public void testBadCredential() throws Exception {",
          "199:     replayAll();",
          "208:   }",
          "210:   @Test",
          "211:   public void testAuthenticate() throws Exception {",
          "273:   }",
          "290:   }",
          "292: }",
          "",
          "[Removed Lines]",
          "20: import static org.easymock.EasyMock.anyObject;",
          "23: import static org.easymock.EasyMock.find;",
          "24: import static org.easymock.EasyMock.replay;",
          "25: import static org.junit.Assert.assertEquals;",
          "28: import static org.junit.Assert.fail;",
          "32: import org.apache.ambari.server.H2DatabaseCleaner;",
          "33: import org.apache.ambari.server.audit.AuditLoggerModule;",
          "34: import org.apache.ambari.server.configuration.AmbariServerConfigurationKey;",
          "36: import org.apache.ambari.server.ldap.LdapModule;",
          "37: import org.apache.ambari.server.ldap.domain.AmbariLdapConfiguration;",
          "39: import org.apache.ambari.server.orm.GuiceJpaInitializer;",
          "40: import org.apache.ambari.server.orm.dao.UserDAO;",
          "45: import org.apache.directory.server.annotations.CreateLdapServer;",
          "46: import org.apache.directory.server.annotations.CreateTransport;",
          "47: import org.apache.directory.server.core.annotations.ApplyLdifFiles;",
          "48: import org.apache.directory.server.core.annotations.ContextEntry;",
          "49: import org.apache.directory.server.core.annotations.CreateDS;",
          "50: import org.apache.directory.server.core.annotations.CreatePartition;",
          "51: import org.apache.directory.server.core.integ.FrameworkRunner;",
          "52: import org.easymock.EasyMockRule;",
          "53: import org.easymock.IAnswer;",
          "54: import org.easymock.Mock;",
          "55: import org.easymock.MockType;",
          "56: import org.junit.After;",
          "57: import org.junit.Before;",
          "58: import org.junit.Rule;",
          "60: import org.junit.runner.RunWith;",
          "61: import org.slf4j.Logger;",
          "65: import com.google.inject.Guice;",
          "66: import com.google.inject.Inject;",
          "67: import com.google.inject.Injector;",
          "69: import junit.framework.Assert;",
          "71: @RunWith(FrameworkRunner.class)",
          "72: @CreateDS(allowAnonAccess = true,",
          "73:     name = \"AmbariLdapAuthenticationProviderTest\",",
          "74:     partitions = {",
          "75:         @CreatePartition(name = \"Root\",",
          "76:             suffix = \"dc=apache,dc=org\",",
          "77:             contextEntry = @ContextEntry(",
          "78:                 entryLdif =",
          "79:                     \"dn: dc=apache,dc=org\\n\" +",
          "80:                         \"dc: apache\\n\" +",
          "81:                         \"objectClass: top\\n\" +",
          "82:                         \"objectClass: domain\\n\\n\" +",
          "83:                         \"dn: dc=ambari,dc=apache,dc=org\\n\" +",
          "84:                         \"dc: ambari\\n\" +",
          "85:                         \"objectClass: top\\n\" +",
          "86:                         \"objectClass: domain\\n\\n\"))",
          "87:     })",
          "88: @CreateLdapServer(allowAnonymousAccess = true,",
          "89:     transports = {@CreateTransport(protocol = \"LDAP\")})",
          "90: @ApplyLdifFiles(\"users.ldif\")",
          "91: public class AmbariLdapAuthenticationProviderTest extends AmbariLdapAuthenticationProviderBaseTest {",
          "93:   @Rule",
          "94:   public EasyMockRule mocks = new EasyMockRule(this);",
          "96:   private static Injector injector;",
          "98:   private AmbariLdapAuthenticationProvider authenticationProvider;",
          "100:   @Inject",
          "101:   private UserDAO userDAO;",
          "102:   @Inject",
          "103:   private Users users;",
          "104:   @Inject",
          "105:   private Configuration configuration;",
          "107:   @Mock(type = MockType.NICE)",
          "108:   private AmbariLdapAuthoritiesPopulator authoritiesPopulator;",
          "110:   @Mock(type = MockType.NICE)",
          "111:   private AmbariLdapConfigurationProvider ldapConfigurationProvider;",
          "113:   private AmbariLdapConfiguration ldapConfiguration;",
          "115:   @Before",
          "116:   public void setUp() throws Exception {",
          "117:     injector = Guice.createInjector(new AuthorizationTestModule(), new AuditLoggerModule(), new LdapModule());",
          "118:     injector.getInstance(GuiceJpaInitializer.class);",
          "119:     injector.injectMembers(this);",
          "120:     configuration.setClientSecurityType(ClientSecurityType.LDAP);",
          "121:     ldapConfiguration = new AmbariLdapConfiguration();",
          "122:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.ALTERNATE_USER_SEARCH_ENABLED, \"false\");",
          "123:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.ALTERNATE_USER_SEARCH_FILTER, \"(&(mail={0})(objectClass={userObjectClass}))\");",
          "124:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.SERVER_HOST, \"localhost\");",
          "125:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.SERVER_PORT, String.valueOf(getLdapServer().getPort()));",
          "126:     expect(ldapConfigurationProvider.get()).andReturn(ldapConfiguration).anyTimes();",
          "128:     authenticationProvider = new AmbariLdapAuthenticationProvider(users, configuration, ldapConfigurationProvider, authoritiesPopulator);",
          "129:   }",
          "131:   @After",
          "132:   public void tearDown() throws Exception {",
          "133:     H2DatabaseCleaner.clearDatabaseAndStopPersistenceService(injector);",
          "134:   }",
          "138:     replay(ldapConfigurationProvider);",
          "139:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"notFound\", \"wrong\");",
          "140:     authenticationProvider.authenticate(authentication);",
          "141:   }",
          "143:   @Test",
          "144:   public void testGoodManagerCredentials() throws Exception {",
          "145:     AmbariLdapAuthenticationProvider provider = createMockBuilder(AmbariLdapAuthenticationProvider.class)",
          "146:             .addMockedMethod(\"loadLdapAuthenticationProvider\")",
          "147:             .addMockedMethod(\"isLdapEnabled\")",
          "148:             .withConstructor(users, configuration, ldapConfigurationProvider, authoritiesPopulator).createMock();",
          "150:     org.springframework.security.core.AuthenticationException exception =",
          "151:             createNiceMock(org.springframework.security.core.AuthenticationException.class);",
          "152:     expect(exception.getCause()).andReturn(exception).atLeastOnce();",
          "154:     expect(provider.isLdapEnabled()).andReturn(true);",
          "155:     expect(provider.loadLdapAuthenticationProvider(\"notFound\")).andThrow(exception);",
          "157:     Logger log = createNiceMock(Logger.class);",
          "158:     provider.LOG = log;",
          "159:     log.warn(find(\"LDAP manager credentials\"), (Throwable) anyObject());",
          "160:     expectLastCall().andAnswer(new IAnswer<Object>() {",
          "161:       @Override",
          "162:       public Object answer() throws Throwable {",
          "163:         fail(\"Should not print warning when LDAP manager credentials are not wrong\");",
          "164:         return null;",
          "165:       }",
          "166:     }).anyTimes();",
          "167:     replayAll();",
          "168:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"notFound\", \"wrong\");",
          "169:     try {",
          "170:       provider.authenticate(authentication);",
          "171:       fail(\"Should throw exception\");",
          "172:     } catch(org.springframework.security.core.AuthenticationException e) {",
          "174:     }",
          "175:     verifyAll();",
          "176:   }",
          "178:   @Test",
          "179:   public void testBadManagerCredentials() throws Exception {",
          "180:     AmbariLdapAuthenticationProvider provider = createMockBuilder(AmbariLdapAuthenticationProvider.class)",
          "181:             .addMockedMethod(\"loadLdapAuthenticationProvider\")",
          "182:             .addMockedMethod(\"isLdapEnabled\")",
          "183:             .withConstructor(users, configuration, ldapConfigurationProvider, authoritiesPopulator).createMock();",
          "185:     org.springframework.ldap.AuthenticationException cause =",
          "186:             createNiceMock(org.springframework.ldap.AuthenticationException.class);",
          "188:     org.springframework.security.core.AuthenticationException exception =",
          "189:             createNiceMock(org.springframework.security.core.AuthenticationException.class);",
          "190:     expect(exception.getCause()).andReturn(cause).atLeastOnce();",
          "192:     expect(provider.isLdapEnabled()).andReturn(true);",
          "193:     expect(provider.loadLdapAuthenticationProvider(\"notFound\")).andThrow(exception);",
          "195:     Logger log = createNiceMock(Logger.class);",
          "196:     provider.LOG = log;",
          "197:     log.warn(find(\"LDAP manager credentials\"), (Throwable) anyObject());",
          "198:     expectLastCall().atLeastOnce();",
          "200:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"notFound\", \"wrong\");",
          "201:     try {",
          "202:       provider.authenticate(authentication);",
          "203:       fail(\"Should throw exception\");",
          "204:     } catch(org.springframework.security.core.AuthenticationException e) {",
          "206:     }",
          "207:     verifyAll();",
          "212:     assertNull(\"User alread exists in DB\", userDAO.findUserByName(\"allowedUser\"));",
          "213:     UserEntity userEntity = users.createUser(\"allowedUser\", null, null);",
          "214:     users.addLdapAuthentication(userEntity, \"uid=allowedUser,ou=people,dc=ambari,dc=apache,dc=org\");",
          "216:     UserEntity ldapUser = userDAO.findUserByName(\"allowedUser\");",
          "217:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"allowedUser\", \"password\");",
          "218:     expect(authoritiesPopulator.getGrantedAuthorities(anyObject(), anyObject())).andReturn(Collections.emptyList()).anyTimes();",
          "220:     replay(ldapConfigurationProvider, authoritiesPopulator);",
          "222:     AmbariUserAuthentication result = (AmbariUserAuthentication)authenticationProvider.authenticate(authentication);",
          "223:     assertTrue(result.isAuthenticated());",
          "224:     assertEquals(ldapUser.getUserId(), result.getUserId());",
          "226:     result = (AmbariUserAuthentication) authenticationProvider.authenticate(authentication);",
          "227:     assertTrue(result.isAuthenticated());",
          "228:     assertEquals(ldapUser.getUserId(), result.getUserId());",
          "229:   }",
          "231:   @Test",
          "232:   public void testDisabled() throws Exception {",
          "233:     configuration.setClientSecurityType(ClientSecurityType.LOCAL);",
          "234:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"allowedUser\", \"password\");",
          "235:     replay(ldapConfigurationProvider);",
          "236:     Authentication auth = authenticationProvider.authenticate(authentication);",
          "237:     Assert.assertTrue(auth == null);",
          "238:   }",
          "240:   @Test",
          "241:   public void testAuthenticateLoginAlias() throws Exception {",
          "243:     assertNull(\"User already exists in DB\", userDAO.findUserByName(\"allowedUser@ambari.apache.org\"));",
          "244:     UserEntity userEntity = users.createUser(\"allowedUser@ambari.apache.org\", null, null);",
          "245:     users.addLdapAuthentication(userEntity, \"uid=allowedUser,ou=people,dc=ambari,dc=apache,dc=org\");",
          "247:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"allowedUser@ambari.apache.org\", \"password\");",
          "248:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.ALTERNATE_USER_SEARCH_ENABLED, \"true\");",
          "249:     expect(authoritiesPopulator.getGrantedAuthorities(anyObject(), anyObject())).andReturn(Collections.emptyList()).anyTimes();",
          "250:     replay(ldapConfigurationProvider, authoritiesPopulator);",
          "253:     Authentication result = authenticationProvider.authenticate(authentication);",
          "256:     assertTrue(result.isAuthenticated());",
          "257:   }",
          "259:   @Test(expected = InvalidUsernamePasswordCombinationException.class)",
          "260:   public void testBadCredentialsForMissingLoginAlias() throws Exception {",
          "262:     assertNull(\"User already exists in DB\", userDAO.findUserByName(\"allowedUser\"));",
          "263:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"missingloginalias@ambari.apache.org\", \"password\");",
          "264:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.ALTERNATE_USER_SEARCH_ENABLED, \"true\");",
          "266:     replay(ldapConfigurationProvider);",
          "269:     authenticationProvider.authenticate(authentication);",
          "276:   @Test(expected = InvalidUsernamePasswordCombinationException.class)",
          "277:   public void testBadCredentialsBadPasswordForLoginAlias() throws Exception {",
          "279:     assertNull(\"User already exists in DB\", userDAO.findUserByName(\"allowedUser\"));",
          "280:     Authentication authentication = new UsernamePasswordAuthenticationToken(\"allowedUser@ambari.apache.org\", \"bad_password\");",
          "281:     ldapConfiguration.setValueFor(AmbariServerConfigurationKey.ALTERNATE_USER_SEARCH_ENABLED, \"true\");",
          "283:     replay(ldapConfigurationProvider);",
          "286:     authenticationProvider.authenticate(authentication);",
          "",
          "[Added Lines]",
          "29: import org.apache.ambari.server.orm.entities.UserAuthenticationEntity;",
          "34: import org.easymock.EasyMockSupport;",
          "36: import org.springframework.security.authentication.BadCredentialsException;",
          "39: import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;",
          "40: import org.springframework.security.ldap.userdetails.LdapUserDetails;",
          "42: public class AmbariLdapAuthenticationProviderTest extends EasyMockSupport {",
          "43:   private static final String ALLOWED_USER_NAME = \"allowedUser\";",
          "44:   private static final String ALLOWED_USER_DN = \"uid=alloweduser,ou=people,dc=ambari,dc=apache,dc=org\";",
          "48:     Authentication authentication = new UsernamePasswordAuthenticationToken(ALLOWED_USER_NAME, \"password\");",
          "50:     Configuration configuration = createMockConfiguration(ClientSecurityType.LDAP);",
          "52:     Users users = createMock(Users.class);",
          "53:     AmbariLdapConfigurationProvider ldapConfigurationProvider = createMock(AmbariLdapConfigurationProvider.class);",
          "54:     AmbariLdapAuthoritiesPopulator authoritiesPopulator = createMock(AmbariLdapAuthoritiesPopulator.class);",
          "56:     LdapAuthenticationProvider ldapAuthenticationProvider = createMock(LdapAuthenticationProvider.class);",
          "57:     expect(ldapAuthenticationProvider.authenticate(authentication)).andThrow(new BadCredentialsException(\"\")).once();",
          "59:     AmbariLdapAuthenticationProvider authenticationProvider = createMockBuilder(AmbariLdapAuthenticationProvider.class)",
          "60:         .withConstructor(users, configuration, ldapConfigurationProvider, authoritiesPopulator)",
          "61:         .addMockedMethod(\"loadLdapAuthenticationProvider\")",
          "62:         .createMock();",
          "63:     expect(authenticationProvider.loadLdapAuthenticationProvider(ALLOWED_USER_NAME)).andReturn(ldapAuthenticationProvider).once();",
          "67:     authenticationProvider.authenticate(authentication);",
          "72:     Authentication authentication = new UsernamePasswordAuthenticationToken(ALLOWED_USER_NAME, \"password\");",
          "74:     LdapUserDetails ldapUserDetails = createMock(LdapUserDetails.class);",
          "75:     expect(ldapUserDetails.getDn()).andReturn(ALLOWED_USER_DN).atLeastOnce();",
          "77:     Authentication authenticatedAuthentication = createMock(Authentication.class);",
          "78:     expect(authenticatedAuthentication.getPrincipal()).andReturn(ldapUserDetails).atLeastOnce();",
          "80:     Configuration configuration = createMockConfiguration(ClientSecurityType.LDAP);",
          "82:     UserEntity userEntity = createMock(UserEntity.class);",
          "84:     UserAuthenticationEntity userAuthenticationEntity = createMock(UserAuthenticationEntity.class);",
          "85:     expect(userAuthenticationEntity.getUser()).andReturn(userEntity).atLeastOnce();",
          "87:     User user = createMock(User.class);",
          "89:     Users users = createMock(Users.class);",
          "90:     expect(users.getUserAuthenticationEntities(UserAuthenticationType.LDAP, ALLOWED_USER_DN)).andReturn(Collections.singleton(userAuthenticationEntity)).atLeastOnce();",
          "91:     users.validateLogin(userEntity, ALLOWED_USER_NAME);",
          "92:     expectLastCall().atLeastOnce();",
          "93:     expect(users.getUser(userEntity)).andReturn(user).atLeastOnce();",
          "94:     expect(users.getUserAuthorities(userEntity)).andReturn(Collections.emptyList()).atLeastOnce();",
          "96:     AmbariLdapConfigurationProvider ldapConfigurationProvider = createMock(AmbariLdapConfigurationProvider.class);",
          "98:     AmbariLdapAuthoritiesPopulator authoritiesPopulator = createMock(AmbariLdapAuthoritiesPopulator.class);",
          "100:     LdapAuthenticationProvider ldapAuthenticationProvider = createMock(LdapAuthenticationProvider.class);",
          "101:     expect(ldapAuthenticationProvider.authenticate(authentication)).andReturn(authenticatedAuthentication).once();",
          "103:     AmbariLdapAuthenticationProvider authenticationProvider = createMockBuilder(AmbariLdapAuthenticationProvider.class)",
          "104:         .withConstructor(users, configuration, ldapConfigurationProvider, authoritiesPopulator)",
          "105:         .addMockedMethod(\"loadLdapAuthenticationProvider\")",
          "106:         .createMock();",
          "107:     expect(authenticationProvider.loadLdapAuthenticationProvider(ALLOWED_USER_NAME)).andReturn(ldapAuthenticationProvider).once();",
          "109:     replayAll();",
          "111:     Authentication result = authenticationProvider.authenticate(authentication);",
          "112:     assertTrue(result instanceof AmbariUserAuthentication);",
          "113:     assertTrue(result.isAuthenticated());",
          "115:     verifyAll();",
          "118:   @Test",
          "119:   public void testDisabled() throws Exception {",
          "120:     Authentication authentication = new UsernamePasswordAuthenticationToken(ALLOWED_USER_NAME, \"password\");",
          "122:     Configuration configuration = createMockConfiguration(ClientSecurityType.LOCAL);",
          "123:     Users users = createMock(Users.class);",
          "124:     AmbariLdapConfigurationProvider ldapConfigurationProvider = createMock(AmbariLdapConfigurationProvider.class);",
          "125:     AmbariLdapAuthoritiesPopulator authoritiesPopulator = createMock(AmbariLdapAuthoritiesPopulator.class);",
          "127:     AmbariLdapAuthenticationProvider authenticationProvider = createMockBuilder(AmbariLdapAuthenticationProvider.class)",
          "128:         .withConstructor(users, configuration, ldapConfigurationProvider, authoritiesPopulator)",
          "129:         .addMockedMethod(\"loadLdapAuthenticationProvider\")",
          "130:         .createMock();",
          "132:     replayAll();",
          "134:     Authentication result = authenticationProvider.authenticate(authentication);",
          "135:     assertNull(result);",
          "137:     verifyAll();",
          "138:   }",
          "140:   private Configuration createMockConfiguration(ClientSecurityType clientSecurityType) {",
          "141:     Configuration configuration = createMock(Configuration.class);",
          "142:     expect(configuration.getClientSecurityType()).andReturn(clientSecurityType).atLeastOnce();",
          "143:     return configuration;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94d4811c58aa6152ddd20651337b35c5bfaf95cd",
      "candidate_info": {
        "commit_hash": "94d4811c58aa6152ddd20651337b35c5bfaf95cd",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/94d4811c58aa6152ddd20651337b35c5bfaf95cd",
        "files": [
          "ambari-web/app/mixins/common/configs/configs_loader.js",
          "ambari-web/app/utils/ajax/ajax.js",
          "ambari-web/test/mixins/common/configs/configs_loader_test.js"
        ],
        "message": "AMBARI-24883. Previous config versions view of HBase service has missing configs. (jaimin) (#2596)",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/configs_loader.js||ambari-web/app/mixins/common/configs/configs_loader.js",
          "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js",
          "ambari-web/test/mixins/common/configs/configs_loader_test.js||ambari-web/test/mixins/common/configs/configs_loader_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/configs_loader.js||ambari-web/app/mixins/common/configs/configs_loader.js": [
          "File: ambari-web/app/mixins/common/configs/configs_loader.js -> ambari-web/app/mixins/common/configs/configs_loader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:       data: {",
          "180:         serviceName: this.get('content.serviceName'),",
          "181:         serviceConfigVersions: versions,",
          "183:       },",
          "184:       success: 'loadSelectedVersionsSuccess'",
          "185:     }));",
          "",
          "[Removed Lines]",
          "182:         additionalParams: this.get('dependentServiceNames.length') ? '|service_name.in(' + this.get('dependentServiceNames') + ')&is_current=true' : ''",
          "",
          "[Added Lines]",
          "182:         additionalParams: this.get('dependentServiceNames.length') ? '|(service_name.in(' + this.get('dependentServiceNames') + ')&is_current=true)' : ''",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js": [
          "File: ambari-web/app/utils/ajax/ajax.js -> ambari-web/app/utils/ajax/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2913:     mock: '/data/configurations/service_version.json'",
          "2914:   },",
          "2915:   'service.serviceConfigVersions.get.multiple': {",
          "2917:     mock: '/data/configurations/service_version.json',",
          "2918:     format: function (data) {",
          "2919:       return {",
          "",
          "[Removed Lines]",
          "2916:     real: '/clusters/{clusterName}/configurations/service_config_versions?service_name={serviceName}&service_config_version.in({serviceConfigVersions}){additionalParams}',",
          "",
          "[Added Lines]",
          "2916:     real: '/clusters/{clusterName}/configurations/service_config_versions?(service_name={serviceName}&service_config_version.in({serviceConfigVersions})){additionalParams}',",
          "",
          "---------------"
        ],
        "ambari-web/test/mixins/common/configs/configs_loader_test.js||ambari-web/test/mixins/common/configs/configs_loader_test.js": [
          "File: ambari-web/test/mixins/common/configs/configs_loader_test.js -> ambari-web/test/mixins/common/configs/configs_loader_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:         data: {",
          "343:           serviceName: 'S1',",
          "344:           serviceConfigVersions: ['v1'],",
          "346:         },",
          "347:         success: 'loadSelectedVersionsSuccess'",
          "348:       });",
          "",
          "[Removed Lines]",
          "345:           additionalParams: '|service_name.in(S2)&is_current=true'",
          "",
          "[Added Lines]",
          "345:           additionalParams: '|(service_name.in(S2)&is_current=true)'",
          "",
          "---------------"
        ]
      }
    }
  ]
}