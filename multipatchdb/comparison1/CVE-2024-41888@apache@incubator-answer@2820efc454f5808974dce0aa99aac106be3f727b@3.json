{
  "cve_id": "CVE-2024-41888",
  "cve_desc": "Missing Release of Resource after Effective Lifetime vulnerability in Apache Answer.\n\nThis issue affects Apache Answer: through 1.3.5.\n\nThe password reset link remains valid within its expiration period even after it has been used. This could potentially lead to the link being misused or hijacked.\nUsers are recommended to upgrade to version 1.3.6, which fixes the issue.",
  "repo": "apache/incubator-answer",
  "patch_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
  "patch_info": {
    "commit_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
    "repo": "apache/incubator-answer",
    "commit_url": "https://github.com/apache/incubator-answer/commit/2820efc454f5808974dce0aa99aac106be3f727b",
    "files": [
      "internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go",
      "internal/schema/email_template.go",
      "internal/service/content/user_service.go",
      "internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go"
    ],
    "message": "feat(user): ensure that only one link is active at a time",
    "before_after_code_files": [
      "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go",
      "internal/schema/email_template.go||internal/schema/email_template.go",
      "internal/service/content/user_service.go||internal/service/content/user_service.go",
      "internal/service/export/email_service.go||internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go"
    ]
  },
  "patch_diff": {
    "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go": [
      "File: internal/base/constant/cache_key.go -> internal/base/constant/cache_key.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  AdminTokenCacheKey                         = \"answer:admin:token:\"",
      "33:  AdminTokenCacheTime                        = 7 * 24 * time.Hour",
      "34:  UserTokenMappingCacheKey                   = \"answer:user-token:mapping:\"",
      "35:  SiteInfoCacheKey                           = \"answer:site-info:\"",
      "36:  SiteInfoCacheTime                          = 1 * time.Hour",
      "37:  ConfigID2KEYCacheKeyPrefix                 = \"answer:config:id:\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:  UserEmailCodeCacheKey                      = \"answer:user:email-code:\"",
      "36:  UserEmailCodeCacheTime                     = 10 * time.Minute",
      "37:  UserLatestEmailCodeCacheKey                = \"answer:user-id:email-code:\"",
      "",
      "---------------"
    ],
    "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go": [
      "File: internal/repo/export/email_repo.go -> internal/repo/export/email_repo.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import (",
      "23:  \"context\"",
      "24:  \"time\"",
      "26:  \"github.com/apache/incubator-answer/internal/base/data\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  \"github.com/apache/incubator-answer/internal/base/constant\"",
      "25:  \"github.com/tidwall/gjson\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: }",
      "48:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "49:  }",
      "50:  return nil",
      "",
      "[Removed Lines]",
      "45: func (e *emailRepo) SetCode(ctx context.Context, code, content string, duration time.Duration) error {",
      "46:  err := e.data.Cache.SetString(ctx, code, content, duration)",
      "47:  if err != nil {",
      "",
      "[Added Lines]",
      "47: func (e *emailRepo) SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error {",
      "50:  if err := e.data.Cache.SetString(ctx, constant.UserLatestEmailCodeCacheKey+userID, code, duration); err != nil {",
      "51:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "52:  }",
      "55:  if err := e.data.Cache.SetString(ctx, constant.UserEmailCodeCacheKey+code, content, duration); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: func (e *emailRepo) VerifyCode(ctx context.Context, code string) (content string, err error) {",
      "56:  if err != nil {",
      "57:   return \"\", err",
      "58:  }",
      "59:  if !exist {",
      "60:   return \"\", nil",
      "61:  }",
      "62:  return content, nil",
      "63: }",
      "",
      "[Removed Lines]",
      "55:  content, exist, err := e.data.Cache.GetString(ctx, code)",
      "",
      "[Added Lines]",
      "64:  codeCacheKey := constant.UserEmailCodeCacheKey + code",
      "65:  content, exist, err := e.data.Cache.GetString(ctx, codeCacheKey)",
      "74:  _ = e.data.Cache.Del(ctx, codeCacheKey)",
      "79:  if skipValidationLatestCode := gjson.Get(content, \"skip_validation_latest_code\").Bool(); skipValidationLatestCode {",
      "80:   return content, nil",
      "81:  }",
      "82:  userID := gjson.Get(content, \"user_id\").String()",
      "85:  latestCode, exist, err := e.data.Cache.GetString(ctx, constant.UserLatestEmailCodeCacheKey+userID)",
      "86:  if err != nil {",
      "87:   return \"\", err",
      "88:  }",
      "89:  if !exist {",
      "90:   return \"\", nil",
      "91:  }",
      "94:  if latestCode != code {",
      "95:   return \"\", nil",
      "96:  }",
      "",
      "---------------"
    ],
    "internal/schema/email_template.go||internal/schema/email_template.go": [
      "File: internal/schema/email_template.go -> internal/schema/email_template.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  NotificationSources []constant.NotificationSource `json:\"notification_source,omitempty\"`",
      "44:  BindingKey string `json:\"binding_key,omitempty\"`",
      "45: }",
      "47: func (r *EmailCodeContent) ToJSONString() string {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  SkipValidationLatestCode bool `json:\"skip_validation_latest_code\"`",
      "",
      "---------------"
    ],
    "internal/service/content/user_service.go||internal/service/content/user_service.go": [
      "File: internal/service/content/user_service.go -> internal/service/content/user_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  if err != nil {",
      "228:   return err",
      "229:  }",
      "231:  return nil",
      "232: }",
      "",
      "[Removed Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "450:  if err != nil {",
      "451:   return nil, nil, err",
      "452:  }",
      "455:  roleID, err := us.userRoleService.GetUserRole(ctx, userInfo.ID)",
      "456:  if err != nil {",
      "",
      "[Removed Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "500:  if err != nil {",
      "501:   return err",
      "502:  }",
      "504:  return nil",
      "505: }",
      "",
      "[Removed Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "621:  }",
      "622:  log.Infof(\"send email confirmation %s\", verifyEmailURL)",
      "625:  return nil, nil",
      "626: }",
      "",
      "[Removed Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/export/email_service.go||internal/service/export/email_service.go": [
      "File: internal/service/export/email_service.go -> internal/service/export/email_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: type EmailRepo interface {",
      "55:  VerifyCode(ctx context.Context, code string) (content string, err error)",
      "56: }",
      "",
      "[Removed Lines]",
      "54:  SetCode(ctx context.Context, code, content string, duration time.Duration) error",
      "",
      "[Added Lines]",
      "54:  SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: }",
      "94:  if err != nil {",
      "95:   log.Error(err)",
      "96:  }",
      "97: }",
      "103:  if err != nil {",
      "104:   log.Error(err)",
      "105:  }",
      "106: }",
      "109: func (es *EmailService) SendAndSaveCodeWithTime(",
      "113:  if err != nil {",
      "114:   log.Error(err)",
      "115:  }",
      "116: }",
      "",
      "[Removed Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  es.Send(ctx, toEmailAddr, subject, body)",
      "102:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "110:  ctx context.Context, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "111:  es.Send(ctx, toEmailAddr, subject, body)",
      "112:  err := es.emailRepo.SetCode(ctx, code, codeContent, duration)",
      "",
      "[Added Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, userID, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "104:   return",
      "106:  es.Send(ctx, toEmailAddr, subject, body)",
      "111:  ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "112:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, duration)",
      "115:   return",
      "117:  es.Send(ctx, toEmailAddr, subject, body)",
      "",
      "---------------"
    ],
    "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go": [
      "File: internal/service/notification/invite_answer_notification.go -> internal/service/notification/invite_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go": [
      "File: internal/service/notification/new_answer_notification.go -> internal/service/notification/new_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go": [
      "File: internal/service/notification/new_comment_notification.go -> internal/service/notification/new_comment_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "66:  if len(lang) > 0 {",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:  }",
      "75:  ns.emailService.SendAndSaveCodeWithTime(",
      "77: }",
      "",
      "[Removed Lines]",
      "76:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "77:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go": [
      "File: internal/service/notification/new_question_notification.go -> internal/service/notification/new_question_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:    constant.AllNewQuestionSource,",
      "190:    constant.AllNewQuestionForFollowingTagsSource,",
      "191:   },",
      "192:  }",
      "193:  ns.emailService.SendAndSaveCodeWithTime(",
      "195: }",
      "197: func (ns *ExternalNotificationService) syncNewQuestionNotificationToPlugin(ctx context.Context,",
      "",
      "[Removed Lines]",
      "194:   ctx, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "192:   SkipValidationLatestCode: true,",
      "195:   ctx, userInfo.ID, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
      "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "274:   if err != nil {",
      "275:    return err",
      "276:   }",
      "278:  }",
      "279:  return nil",
      "280: }",
      "",
      "[Removed Lines]",
      "277:   go s.emailService.SendAndSaveCode(ctx, req.TestEmailRecipient, title, body, \"\", \"\")",
      "",
      "[Added Lines]",
      "277:   go s.emailService.Send(ctx, req.TestEmailRecipient, title, body)",
      "",
      "---------------"
    ],
    "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go": [
      "File: internal/service/user_admin/user_backyard.go -> internal/service/user_admin/user_backyard.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "514: func (us *UserAdminService) GetUserActivation(ctx context.Context, req *schema.GetUserActivationReq) (",
      "515:  resp *schema.GetUserActivationResp, err error) {",
      "517:  if err != nil {",
      "518:   return nil, err",
      "519:  }",
      "",
      "[Removed Lines]",
      "516:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "516:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:  }",
      "529:  data := &schema.EmailCodeContent{",
      "532:  }",
      "533:  code := uuid.NewString()",
      "535:  resp = &schema.GetUserActivationResp{",
      "536:   ActivationURL: fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code),",
      "537:  }",
      "",
      "[Removed Lines]",
      "530:   Email:  user.EMail,",
      "531:   UserID: user.ID,",
      "534:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "530:   Email:  userInfo.EMail,",
      "531:   UserID: userInfo.ID,",
      "534:  us.emailService.SaveCode(ctx, userInfo.ID, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "542: func (us *UserAdminService) SendUserActivation(ctx context.Context, req *schema.SendUserActivationReq) (err error) {",
      "544:  if err != nil {",
      "545:   return err",
      "546:  }",
      "",
      "[Removed Lines]",
      "543:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "543:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "554:  }",
      "556:  data := &schema.EmailCodeContent{",
      "559:  }",
      "560:  code := uuid.NewString()",
      "563:  verifyEmailURL := fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code)",
      "564:  title, body, err := us.emailService.RegisterTemplate(ctx, verifyEmailURL)",
      "565:  if err != nil {",
      "566:   return err",
      "567:  }",
      "569:  return nil",
      "570: }",
      "",
      "[Removed Lines]",
      "557:   Email:  user.EMail,",
      "558:   UserID: user.ID,",
      "561:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "568:  go us.emailService.SendAndSaveCode(ctx, user.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "557:   Email:  userInfo.EMail,",
      "558:   UserID: userInfo.ID,",
      "567:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go": [
      "File: internal/service/user_external_login/user_external_login_service.go -> internal/service/user_external_login/user_external_login_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:  if err != nil {",
      "329:   return nil, err",
      "330:  }",
      "332:  return resp, nil",
      "333: }",
      "",
      "[Removed Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d33a6572758fa07d2e7f2af4c1ed69965f0ca37d",
      "candidate_info": {
        "commit_hash": "d33a6572758fa07d2e7f2af4c1ed69965f0ca37d",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/d33a6572758fa07d2e7f2af4c1ed69965f0ca37d",
        "files": [
          "ui/src/utils/common.ts"
        ],
        "message": "fix: remove  content  classname",
        "before_after_code_files": [
          "ui/src/utils/common.ts||ui/src/utils/common.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/src/utils/common.ts||ui/src/utils/common.ts": [
          "File: ui/src/utils/common.ts -> ui/src/utils/common.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: }",
          "191: function formatDiffPart(part: any, className: string): string {",
          "192:   if (part.value.replace(/\\n/g, '').length <= 0) {",
          "193:     if (part.value.match(/\\n/g)?.length > 1) {",
          "194:       const value = part.value.replace(/\\n/, '');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:   console.log('333333', part);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:       return formatDiffPart(part, 'review-text-add');",
          "221:     }",
          "222:     if (part.removed) {",
          "224:     }",
          "226:     return part.value;",
          "",
          "[Removed Lines]",
          "223:       return formatDiffPart(part, 'review-text-remove text-decoration-none');",
          "",
          "[Added Lines]",
          "224:       return formatDiffPart(part, 'review-text-delete text-decoration-none');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ad8a83f8c05e95bf9bb505293970037033ba999",
      "candidate_info": {
        "commit_hash": "7ad8a83f8c05e95bf9bb505293970037033ba999",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/7ad8a83f8c05e95bf9bb505293970037033ba999",
        "files": [
          "internal/cli/build.go"
        ],
        "message": "fix(build): get specific version of plugins",
        "before_after_code_files": [
          "internal/cli/build.go||internal/cli/build.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/cli/build.go||internal/cli/build.go": [
          "File: internal/cli/build.go -> internal/cli/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  }",
          "185:  for _, p := range b.plugins {",
          "188:   }",
          "191:   if err != nil {",
          "192:    return err",
          "193:   }",
          "",
          "[Removed Lines]",
          "186:   if len(p.Path) == 0 {",
          "187:    continue",
          "189:   replacement := fmt.Sprintf(\"%s@v%s=%s\", p.Name, p.Version, p.Path)",
          "190:   err = b.newExecCmd(\"go\", \"mod\", \"edit\", \"-replace\", replacement).Run()",
          "",
          "[Added Lines]",
          "187:   if len(p.Path) > 0 {",
          "188:    replacement := fmt.Sprintf(\"%s@%s=%s\", p.Name, p.Version, p.Path)",
          "189:    err = b.newExecCmd(\"go\", \"mod\", \"edit\", \"-replace\", replacement).Run()",
          "190:   } else if len(p.Version) > 0 {",
          "192:    err = b.newExecCmd(\"go\", \"get\", fmt.Sprintf(\"%s@%s\", p.Name, p.Version)).Run()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c43e85d89095e239ce6a2250514be1b177f211e",
      "candidate_info": {
        "commit_hash": "4c43e85d89095e239ce6a2250514be1b177f211e",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/4c43e85d89095e239ce6a2250514be1b177f211e",
        "files": [
          "internal/base/constant/site_info.go",
          "internal/service/export/email_service.go",
          "internal/service/siteinfo/siteinfo_service.go"
        ],
        "message": "feat(email): add mask for email config\u02c6",
        "before_after_code_files": [
          "internal/base/constant/site_info.go||internal/base/constant/site_info.go",
          "internal/service/export/email_service.go||internal/service/export/email_service.go",
          "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [
            "internal/service/export/email_service.go||internal/service/export/email_service.go",
            "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
          ],
          "candidate": [
            "internal/service/export/email_service.go||internal/service/export/email_service.go",
            "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/base/constant/site_info.go||internal/base/constant/site_info.go": [
          "File: internal/base/constant/site_info.go -> internal/base/constant/site_info.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  ColorSchemeDark    = \"dark\"",
          "45:  ColorSchemeSystem  = \"system\"",
          "46: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: const (",
          "49:  EmailConfigKey = \"email.config\"",
          "50: )",
          "",
          "---------------"
        ],
        "internal/service/export/email_service.go||internal/service/export/email_service.go": [
          "File: internal/service/export/email_service.go -> internal/service/export/email_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "328: }",
          "330: func (es *EmailService) GetEmailConfig(ctx context.Context) (ec *EmailConfig, err error) {",
          "332:  if err != nil {",
          "333:   return nil, err",
          "334:  }",
          "",
          "[Removed Lines]",
          "331:  emailConf, err := es.configService.GetStringValue(ctx, \"email.config\")",
          "",
          "[Added Lines]",
          "331:  emailConf, err := es.configService.GetStringValue(ctx, constant.EmailConfigKey)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345: func (es *EmailService) SetEmailConfig(ctx context.Context, ec *EmailConfig) (err error) {",
          "346:  data, _ := json.Marshal(ec)",
          "348: }",
          "",
          "[Removed Lines]",
          "347:  return es.configService.UpdateConfig(ctx, \"email.config\", string(data))",
          "",
          "[Added Lines]",
          "347:  return es.configService.UpdateConfig(ctx, constant.EmailConfigKey, string(data))",
          "",
          "---------------"
        ],
        "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
          "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"context\"",
          "24:  \"encoding/json\"",
          "25:  \"fmt\"",
          "27:  \"github.com/apache/incubator-answer/internal/base/constant\"",
          "28:  \"github.com/apache/incubator-answer/internal/base/handler\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:  }",
          "258:  resp = &schema.GetSMTPConfigResp{}",
          "259:  _ = copier.Copy(resp, emailConfig)",
          "260:  return resp, nil",
          "261: }",
          "264: func (s *SiteInfoService) UpdateSMTPConfig(ctx context.Context, req *schema.UpdateSMTPConfigReq) (err error) {",
          "265:  ec := &export.EmailConfig{}",
          "266:  _ = copier.Copy(ec, req)",
          "268:  err = s.emailService.SetEmailConfig(ctx, ec)",
          "269:  if err != nil {",
          "270:   return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:  resp.SMTPPassword = strings.Repeat(\"*\", len(resp.SMTPPassword))",
          "267:  emailConfig, err := s.emailService.GetEmailConfig(ctx)",
          "268:  if err != nil {",
          "269:   return err",
          "270:  }",
          "275:  if len(ec.SMTPPassword) > 0 && ec.SMTPPassword == strings.Repeat(\"*\", len(ec.SMTPPassword)) {",
          "276:   ec.SMTPPassword = emailConfig.SMTPPassword",
          "277:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7ebe3083b717f0556ab5f27c79502b5380be1c3",
      "candidate_info": {
        "commit_hash": "b7ebe3083b717f0556ab5f27c79502b5380be1c3",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/b7ebe3083b717f0556ab5f27c79502b5380be1c3",
        "files": [
          "internal/controller/tag_controller.go",
          "internal/schema/tag_schema.go",
          "internal/service/tag/tag_service.go",
          "internal/service/tag_common/tag_common.go"
        ],
        "message": "feat(tag): update tags search API",
        "before_after_code_files": [
          "internal/controller/tag_controller.go||internal/controller/tag_controller.go",
          "internal/schema/tag_schema.go||internal/schema/tag_schema.go",
          "internal/service/tag/tag_service.go||internal/service/tag/tag_service.go",
          "internal/service/tag_common/tag_common.go||internal/service/tag_common/tag_common.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/controller/tag_controller.go||internal/controller/tag_controller.go": [
          "File: internal/controller/tag_controller.go -> internal/controller/tag_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package controller",
          "22: import (",
          "25:  \"github.com/apache/incubator-answer/internal/base/handler\"",
          "26:  \"github.com/apache/incubator-answer/internal/base/middleware\"",
          "27:  \"github.com/apache/incubator-answer/internal/base/reason\"",
          "",
          "[Removed Lines]",
          "23:  \"strings\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:  handler.HandleResponse(ctx, err, resp)",
          "69: }",
          "79: func (tc *TagController) GetTagsBySlugName(ctx *gin.Context) {",
          "80:  req := &schema.SearchTagsBySlugName{}",
          "81:  if handler.BindAndCheck(ctx, req) {",
          "82:   return",
          "83:  }",
          "87:  handler.HandleResponse(ctx, err, resp)",
          "88: }",
          "",
          "[Removed Lines]",
          "84:  req.TagList = strings.Split(req.Tags, \",\")",
          "86:  resp, err := tc.tagService.GetTagsBySlugName(ctx, req.TagList)",
          "",
          "[Added Lines]",
          "83:  resp, err := tc.tagService.GetTagsBySlugName(ctx, req)",
          "",
          "---------------"
        ],
        "internal/schema/tag_schema.go||internal/schema/tag_schema.go": [
          "File: internal/schema/tag_schema.go -> internal/schema/tag_schema.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  IsAdmin bool   `json:\"-\"`",
          "34: }",
          "36: type SearchTagsBySlugName struct {",
          "40: }",
          "",
          "[Removed Lines]",
          "37:  Tags    string   `json:\"tags\" form:\"tags\"`",
          "38:  TagList []string `json:\"-\"`",
          "39:  IsAdmin bool     `json:\"-\"`",
          "",
          "[Added Lines]",
          "39:  Tags string `form:\"tags\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:  Reserved        bool   `json:\"reserved\"`",
          "299: }",
          "302:  SlugName    string `json:\"slug_name\"`",
          "303:  DisplayName string `json:\"display_name\"`",
          "304:  Recommend   bool   `json:\"recommend\"`",
          "",
          "[Removed Lines]",
          "301: type SearchTagLikeResp struct {",
          "",
          "[Added Lines]",
          "302: type GetTagBasicResp struct {",
          "",
          "---------------"
        ],
        "internal/service/tag/tag_service.go||internal/service/tag/tag_service.go": [
          "File: internal/service/tag/tag_service.go -> internal/service/tag/tag_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import (",
          "23:  \"context\"",
          "24:  \"encoding/json\"",
          "26:  \"github.com/apache/incubator-answer/internal/base/constant\"",
          "27:  \"github.com/apache/incubator-answer/internal/service/activity_queue\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:  return resp, nil",
          "191: }",
          "196:  if err != nil {",
          "198:  }",
          "203:  }",
          "205: }",
          "",
          "[Removed Lines]",
          "193: func (ts *TagService) GetTagsBySlugName(ctx context.Context, tagNames []string) ([]*schema.TagItem, error) {",
          "194:  tagList := make([]*schema.TagItem, 0)",
          "195:  tagListInDB, err := ts.tagCommonService.GetTagListByNames(ctx, tagNames)",
          "197:   return tagList, err",
          "199:  for _, tag := range tagListInDB {",
          "200:   tagItem := &schema.TagItem{}",
          "201:   copier.Copy(tagItem, tag)",
          "202:   tagList = append(tagList, tagItem)",
          "204:  return tagList, nil",
          "",
          "[Added Lines]",
          "195: func (ts *TagService) GetTagsBySlugName(ctx context.Context, req *schema.SearchTagsBySlugName) (",
          "196:  resp []*schema.GetTagBasicResp, err error) {",
          "197:  resp = make([]*schema.GetTagBasicResp, 0)",
          "198:  tagSlugNames := strings.Split(req.Tags, \",\")",
          "199:  if len(tagSlugNames) == 0 {",
          "200:   return resp, nil",
          "201:  }",
          "202:  tagList, err := ts.tagCommonService.GetTagListByNames(ctx, tagSlugNames)",
          "204:   return resp, err",
          "206:  for _, tag := range tagList {",
          "207:   tagItem := &schema.GetTagBasicResp{}",
          "208:   _ = copier.Copy(tagItem, tag)",
          "209:   resp = append(resp, tagItem)",
          "211:  return resp, nil",
          "",
          "---------------"
        ],
        "internal/service/tag_common/tag_common.go||internal/service/tag_common/tag_common.go": [
          "File: internal/service/tag_common/tag_common.go -> internal/service/tag_common/tag_common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: }",
          "112:  tags, err := ts.tagCommonRepo.GetTagListByName(ctx, req.Tag, len(req.Tag) == 0, false)",
          "113:  if err != nil {",
          "114:   return",
          "",
          "[Removed Lines]",
          "111: func (ts *TagCommonService) SearchTagLike(ctx context.Context, req *schema.SearchTagLikeReq) (resp []schema.SearchTagLikeResp, err error) {",
          "",
          "[Added Lines]",
          "111: func (ts *TagCommonService) SearchTagLike(ctx context.Context, req *schema.SearchTagLikeReq) (resp []schema.GetTagBasicResp, err error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:    tag.Recommend = mainTagMap[mainTagID].Recommend",
          "143:   }",
          "144:  }",
          "146:  repetitiveTag := make(map[string]bool)",
          "147:  for _, tag := range tags {",
          "148:   if _, ok := repetitiveTag[tag.SlugName]; !ok {",
          "150:    item.SlugName = tag.SlugName",
          "151:    item.DisplayName = tag.DisplayName",
          "152:    item.Recommend = tag.Recommend",
          "",
          "[Removed Lines]",
          "145:  resp = make([]schema.SearchTagLikeResp, 0)",
          "149:    item := schema.SearchTagLikeResp{}",
          "",
          "[Added Lines]",
          "145:  resp = make([]schema.GetTagBasicResp, 0)",
          "149:    item := schema.GetTagBasicResp{}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfe04cfa246f5346771f202889335fcd2f3628e4",
      "candidate_info": {
        "commit_hash": "bfe04cfa246f5346771f202889335fcd2f3628e4",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/bfe04cfa246f5346771f202889335fcd2f3628e4",
        "files": [
          "ui/src/components/Customize/index.tsx",
          "ui/template/header.html"
        ],
        "message": "fix: template adds logo to distinguish html source #895",
        "before_after_code_files": [
          "ui/src/components/Customize/index.tsx||ui/src/components/Customize/index.tsx",
          "ui/template/header.html||ui/template/header.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/src/components/Customize/index.tsx||ui/src/components/Customize/index.tsx": [
          "File: ui/src/components/Customize/index.tsx -> ui/src/components/Customize/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   }",
          "54:   scriptList?.forEach((so) => {",
          "55:     const script = document.createElement('script');",
          "59:     for (let i = 0; i < so.attributes.length; i += 1) {",
          "60:       const attr = so.attributes[i];",
          "61:       script.setAttribute(attr.name, attr.value);",
          "",
          "[Removed Lines]",
          "56:     script.text = `(() => {",
          "57:       ${so.text}",
          "58:     })();`;",
          "",
          "[Added Lines]",
          "56:     script.text = `(() => {${so.text}})();`;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: const renderCustomArea = (el, part, pos: pos, content: string = '') => {",
          "69:   let startMarkNode;",
          "70:   let endMarkNode;",
          "72:   const { childNodes } = el;",
          "73:   for (let i = 0; i < childNodes.length; i += 1) {",
          "74:     const node = childNodes[i];",
          "",
          "[Removed Lines]",
          "71:   let accumulatedContent = ''; //",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     }",
          "83:   }",
          "108:   if (startMarkNode && endMarkNode) {",
          "109:     while (",
          "110:       startMarkNode.nextSibling &&",
          "",
          "[Removed Lines]",
          "86:   if (startMarkNode && endMarkNode) {",
          "87:     let contentNode = startMarkNode.nextSibling;",
          "88:     while (contentNode && contentNode !== endMarkNode) {",
          "89:       if (contentNode.nodeType === 1) {",
          "91:         accumulatedContent += contentNode.outerHTML;",
          "92:       } else if (contentNode.nodeType === 3) {",
          "94:         accumulatedContent += contentNode.textContent;",
          "95:       }",
          "96:       contentNode = contentNode.nextSibling;",
          "97:     }",
          "98:   }",
          "100:   console.log('====', accumulatedContent);",
          "103:   if (accumulatedContent.includes(content)) {",
          "104:     console.log('Content already exists. No insertion needed.');",
          "105:     return;",
          "106:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132: const handleCustomHeader = (content) => {",
          "133:   const el = document.body;",
          "135:   renderCustomArea(el, CUSTOM_MARK_HEADER, 'afterbegin', content);",
          "136: };",
          "",
          "[Removed Lines]",
          "134:   console.log('====11', content);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:     (state) => state,",
          "146:   );",
          "147:   useEffect(() => {",
          "153:   }, [custom_head, custom_header, custom_footer]);",
          "154:   return null;",
          "155: };",
          "",
          "[Removed Lines]",
          "148:     setTimeout(() => {",
          "149:       handleCustomHead(custom_head);",
          "150:     }, 1000);",
          "151:     handleCustomHeader(custom_header);",
          "152:     handleCustomFooter(custom_footer);",
          "",
          "[Added Lines]",
          "121:     const isSeo = document.querySelector('meta[name=\"go-template\"]');",
          "122:     if (!isSeo) {",
          "123:       setTimeout(() => {",
          "124:         handleCustomHead(custom_head);",
          "125:       }, 1000);",
          "126:       handleCustomHeader(custom_header);",
          "127:       handleCustomFooter(custom_footer);",
          "128:     }",
          "",
          "---------------"
        ],
        "ui/template/header.html||ui/template/header.html": [
          "File: ui/template/header.html -> ui/template/header.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:             name=\"twitter:image\"",
          "77:             content=\"{{if $.siteinfo.Branding.Favicon }}{{$.siteinfo.Branding.Favicon}}{{else}}{{$.baseURL}}/favicon.ico{{end}}\"}",
          "78:     />",
          "79:     <!--customize_head-->",
          "80:     {{if .HeadCode }} {{.HeadCode | templateHTML}} {{end}}",
          "81:     <!--customize_head-->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     <meta name=\"go-template\">",
          "",
          "---------------"
        ]
      }
    }
  ]
}