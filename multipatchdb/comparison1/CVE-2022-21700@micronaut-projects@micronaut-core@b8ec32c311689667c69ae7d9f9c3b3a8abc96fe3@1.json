{
  "cve_id": "CVE-2022-21700",
  "cve_desc": "Micronaut is a JVM-based, full stack Java framework designed for building JVM web applications with support for Java, Kotlin and the Groovy language. In affected versions sending an invalid Content Type header leads to memory leak in DefaultArgumentConversionContext as this type is erroneously used in static state. ### Impact Sending an invalid Content Type header leads to memory leak in `DefaultArgumentConversionContext` as this type is erroneously used in static state. ### Patches The problem is patched in Micronaut 3.2.7 and above. ### Workarounds The default content type binder can be replaced in an existing Micronaut application to mitigate the issue: ```java package example; import java.util.List; import io.micronaut.context.annotation.Replaces; import io.micronaut.core.convert.ConversionService; import io.micronaut.http.MediaType; import io.micronaut.http.bind.DefaultRequestBinderRegistry; import io.micronaut.http.bind.binders.RequestArgumentBinder; import jakarta.inject.Singleton; @Singleton @Replaces(DefaultRequestBinderRegistry.class) class FixedRequestBinderRegistry extends DefaultRequestBinderRegistry { public FixedRequestBinderRegistry(ConversionService conversionService, List<RequestArgumentBinder> binders) { super(conversionService, binders); } @Override protected void registerDefaultConverters(ConversionService<?> conversionService) { super.registerDefaultConverters(conversionService); conversionService.addConverter(CharSequence.class, MediaType.class, charSequence -> { try { return MediaType.of(charSequence); } catch (IllegalArgumentException e) { return null; } }); } } ``` ### References Commit that introduced the vulnerability https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3 ### For more information If you have any questions or comments about this advisory: * Open an issue in [Micronaut Core](https://github.com/micronaut-projects/micronaut-core/issues) * Email us at [info@micronaut.io](mailto:info@micronaut.io)",
  "repo": "micronaut-projects/micronaut-core",
  "patch_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "patch_info": {
    "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "repo": "micronaut-projects/micronaut-core",
    "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ],
    "message": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\n-------\n * Added ArgumentConversionContext constants in ConversionContext\n * Replaced Argument.of and use of argument classes with\nConversionContext constants where possible\n * Added getFirst method in ConvertibleMultiValues that accepts\nArgumentConversionContent parameter\n\nPartially addresses issue #2355",
    "before_after_code_files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java -> core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     ConversionContext DEFAULT = new ConversionContext() {",
      "42:     };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     ArgumentConversionContext<Boolean> BOOLEAN = ConversionContext.of(Argument.BOOLEAN);",
      "52:     ArgumentConversionContext<Integer> INT = ConversionContext.of(Argument.INT);",
      "57:     ArgumentConversionContext<Long> LONG = ConversionContext.of(Argument.LONG);",
      "62:     ArgumentConversionContext<String> STRING = ConversionContext.of(Argument.STRING);",
      "67:     ArgumentConversionContext<List<String>> LIST_OF_STRING = ConversionContext.of(Argument.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java -> core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import io.micronaut.core.type.Argument;",
      "21: import java.nio.charset.Charset;",
      "",
      "[Removed Lines]",
      "22: import java.util.ArrayList;",
      "23: import java.util.Collections;",
      "24: import java.util.Iterator;",
      "25: import java.util.List;",
      "26: import java.util.Locale;",
      "27: import java.util.Map;",
      "28: import java.util.Optional;",
      "",
      "[Added Lines]",
      "22: import java.util.*;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:         return argument;",
      "115:     }",
      "117:     @Override",
      "118:     public String toString() {",
      "119:         return argument.toString();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     @Override",
      "112:     public boolean equals(Object o) {",
      "113:         if (this == o) {",
      "114:             return true;",
      "115:         }",
      "116:         if (o == null || getClass() != o.getClass()) {",
      "117:             return false;",
      "118:         }",
      "119:         DefaultArgumentConversionContext<?> that = (DefaultArgumentConversionContext<?>) o;",
      "120:         return Objects.equals(getArgument(), that.getArgument()) &&",
      "121:             Objects.equals(finalLocale, that.finalLocale) &&",
      "122:             Objects.equals(finalCharset, that.finalCharset);",
      "123:     }",
      "125:     @Override",
      "126:     public int hashCode() {",
      "127:         return Objects.hash(argument, finalLocale, finalCharset);",
      "128:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.core.convert.value;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.reflect.GenericTypeUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:         return Optional.empty();",
      "171:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     default <T> Optional<T> getFirst(CharSequence name, ArgumentConversionContext<T> conversionContext) {",
      "183:         V v = get(name);",
      "184:         if (v != null) {",
      "185:             return ConversionService.SHARED.convert(v, conversionContext);",
      "186:         }",
      "187:         return Optional.empty();",
      "188:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:     default boolean contains(String name) {",
      "74:     }",
      "",
      "[Removed Lines]",
      "73:         return get(name, Object.class).isPresent();",
      "",
      "[Added Lines]",
      "73:         return get(name, Argument.OBJECT_ARGUMENT).isPresent();",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java": [
      "File: core/src/main/java/io/micronaut/core/type/Argument.java -> core/src/main/java/io/micronaut/core/type/Argument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: public interface Argument<T> extends TypeVariableResolver, AnnotatedElement, Type {",
      "46:     @SuppressWarnings(\"unused\")",
      "52:     @SuppressWarnings(\"unused\")",
      "58:     @SuppressWarnings(\"unused\")",
      "64:     @SuppressWarnings(\"unused\")",
      "70:     @SuppressWarnings(\"unused\")",
      "76:     @SuppressWarnings(\"unused\")",
      "82:     @SuppressWarnings(\"unused\")",
      "88:     @SuppressWarnings(\"unused\")",
      "94:     @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "47:     Argument INT = Argument.of(int.class);",
      "53:     Argument LONG = Argument.of(long.class);",
      "59:     Argument FLOAT = Argument.of(float.class);",
      "65:     Argument DOUBLE = Argument.of(double.class);",
      "71:     Argument VOID = Argument.of(void.class);",
      "77:     Argument BYTE = Argument.of(byte.class);",
      "83:     Argument BOOLEAN = Argument.of(boolean.class);",
      "89:     Argument CHAR = Argument.of(char.class);",
      "95:     Argument SHORT = Argument.of(short.class);",
      "",
      "[Added Lines]",
      "46:     Argument<String> STRING = Argument.of(String.class);",
      "52:     Argument<Integer> INT = Argument.of(int.class);",
      "58:     Argument<Long> LONG = Argument.of(long.class);",
      "64:     Argument<Float> FLOAT = Argument.of(float.class);",
      "70:     Argument<Double> DOUBLE = Argument.of(double.class);",
      "76:     Argument<Void> VOID = Argument.of(void.class);",
      "82:     Argument<Byte> BYTE = Argument.of(byte.class);",
      "88:     Argument<Boolean> BOOLEAN = Argument.of(boolean.class);",
      "94:     Argument<Character> CHAR = Argument.of(char.class);",
      "100:     Argument<Short> SHORT = Argument.of(short.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:     @SuppressWarnings(\"unused\")",
      "108:     Argument<Object> OBJECT_ARGUMENT = of(Object.class);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:     Argument<List<String>> LIST_OF_STRING = Argument.listOf(String.class);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java": [
      "File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java -> core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:     public DefaultArgument(Class<T> type, String name, AnnotationMetadata annotationMetadata, Argument... genericTypes) {",
      "55:     }",
      "",
      "[Removed Lines]",
      "50:         this.type = type;",
      "51:         this.name = name;",
      "52:         this.annotationMetadata = annotationMetadata != null ? annotationMetadata : AnnotationMetadata.EMPTY_METADATA;",
      "53:         this.typeParameters = initializeTypeParameters(genericTypes);",
      "54:         this.typeParameterArray = genericTypes;",
      "",
      "[Added Lines]",
      "50:         this(type, name, annotationMetadata, initializeTypeParameters(genericTypes), genericTypes);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "184:         return Objects.hash(type, name, typeParameters);",
      "185:     }",
      "188:         Map<String, Argument<?>> typeParameters;",
      "189:         if (genericTypes != null && genericTypes.length > 0) {",
      "190:             typeParameters = new LinkedHashMap<>(genericTypes.length);",
      "",
      "[Removed Lines]",
      "187:     private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "[Added Lines]",
      "183:     private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "---------------"
    ],
    "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java": [
      "File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java -> http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         } else if (mediaType.equals(MediaType.APPLICATION_VND_ERROR_TYPE)) {",
      "72:             return Argument.of(VndError.class);",
      "73:         } else {",
      "75:         }",
      "76:     }",
      "77: }",
      "",
      "[Removed Lines]",
      "74:             return Argument.of(String.class);",
      "",
      "[Added Lines]",
      "74:             return Argument.STRING;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:     private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);",
      "142:     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(",
      "143:             \"^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$\", Pattern.CASE_INSENSITIVE);",
      "145:     private final Router router;",
      "146:     private final ExecutorSelector executorSelector;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:     private static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "769:                                 Argument typeVariable;",
      "771:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
      "773:                                 } else {",
      "774:                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "775:                                 }",
      "",
      "[Removed Lines]",
      "772:                                     typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "773:                                     typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "784:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
      "785:                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
      "786:                                     if (streamingFileUpload) {",
      "788:                                     } else {",
      "789:                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "790:                                     }",
      "",
      "[Removed Lines]",
      "787:                                         typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "788:                                         typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: public class CompletableFutureBodyBinder extends DefaultBodyAnnotationBinder<CompletableFuture>",
      "50:     implements NonBlockingBodyArgumentBinder<CompletableFuture> {",
      "52:     private final BeanLocator beanLocator;",
      "53:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     private static final Argument<CompletableFuture> TYPE = Argument.of(CompletableFuture.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:     @Override",
      "67:     public Argument<CompletableFuture> argumentType() {",
      "69:     }",
      "71:     @Override",
      "",
      "[Removed Lines]",
      "68:         return Argument.of(CompletableFuture.class);",
      "",
      "[Added Lines]",
      "70:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {",
      "56:     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);",
      "58:     private final BeanLocator beanLocator;",
      "59:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     private static final Argument<Publisher> TYPE = Argument.of(Publisher.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:     @Override",
      "73:     public Argument<Publisher> argumentType() {",
      "75:     }",
      "77:     @Override",
      "",
      "[Removed Lines]",
      "74:         return Argument.of(Publisher.class);",
      "",
      "[Added Lines]",
      "75:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy": [
      "File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy -> http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.netty.cors",
      "18: import io.micronaut.core.type.Argument",
      "19: import io.micronaut.http.HttpHeaders",
      "20: import io.micronaut.http.HttpMethod",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "147:         1 * request.getMethod() >> HttpMethod.GET",
      "148:         !result.isPresent()",
      "150:     }",
      "152:     void \"test preflight handleRequest with disallowed header\"() {",
      "",
      "[Removed Lines]",
      "149:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String))",
      "",
      "[Added Lines]",
      "150:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:         then: \"the request is rejected because bar is not allowed\"",
      "172:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "175:         result.get().status == HttpStatus.FORBIDDEN",
      "176:     }",
      "",
      "[Removed Lines]",
      "173:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "174:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> ['foo', 'bar']",
      "",
      "[Added Lines]",
      "174:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "175:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> ['foo', 'bar']",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "197:         then: \"the request is successful\"",
      "198:         4 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "201:         result.get().status == HttpStatus.OK",
      "202:     }",
      "",
      "[Removed Lines]",
      "199:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "200:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['foo'])",
      "",
      "[Added Lines]",
      "200:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "201:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['foo'])",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "274:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "276:         then: \"the response is not modified\"",
      "279:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "280:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "281:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "277:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "278:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "278:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "279:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "305:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "307:         then: \"the response is not modified\"",
      "310:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "311:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "312:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "308:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "309:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "309:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "310:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import static io.micronaut.http.HttpHeaders.VARY;",
      "29: import io.micronaut.core.async.publisher.Publishers;",
      "30: import io.micronaut.core.order.Ordered;",
      "32: import io.micronaut.core.util.StringUtils;",
      "33: import io.micronaut.http.HttpHeaders;",
      "34: import io.micronaut.http.HttpMethod;",
      "",
      "[Removed Lines]",
      "31: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "30: import io.micronaut.core.convert.ArgumentConversionContext;",
      "31: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59: @Filter(\"/**\")",
      "60: public class CorsFilter implements HttpServerFilter {",
      "62:     protected final HttpServerConfiguration.CorsConfiguration corsConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:     private static final ArgumentConversionContext<HttpMethod> CONVERSION_CONTEXT_HTTP_METHOD = ConversionContext.of(HttpMethod.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108:                 CorsOriginConfiguration config = optionalConfig.get();",
      "110:                 if (CorsUtil.isPreflightRequest(request)) {",
      "112:                     setAllowMethods(result.get(), response);",
      "114:                     allowedHeaders.ifPresent(val ->",
      "115:                         setAllowHeaders(val, response)",
      "116:                     );",
      "",
      "[Removed Lines]",
      "111:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);",
      "113:                     Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));",
      "",
      "[Added Lines]",
      "114:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);",
      "116:                     Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:                 List<HttpMethod> allowedMethods = config.getAllowedMethods();",
      "152:                 if (!isAnyMethod(allowedMethods)) {",
      "154:                     if (allowedMethods.stream().noneMatch(method -> method.equals(methodToMatch))) {",
      "155:                         return Optional.of(HttpResponse.status(HttpStatus.FORBIDDEN));",
      "156:                     }",
      "157:                 }",
      "159:                 if (preflight) {",
      "162:                     List<String> allowedHeaders = config.getAllowedHeaders();",
      "",
      "[Removed Lines]",
      "153:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class).orElse(requestMethod) : requestMethod;",
      "160:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.listOf(String.class));",
      "",
      "[Added Lines]",
      "156:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD).orElse(requestMethod) : requestMethod;",
      "163:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.cors;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.TypeConverter;",
      "20: import io.micronaut.core.convert.value.ConvertibleValues;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: import io.micronaut.http.HttpMethod;",
      "25: import javax.inject.Singleton;",
      "26: import java.util.Map;",
      "27: import java.util.Optional;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import java.util.List;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     private static final String ALLOW_CREDENTIALS = \"allowCredentials\";",
      "44:     private static final String MAX_AGE = \"maxAge\";",
      "46:     @Override",
      "47:     public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
      "48:         CorsOriginConfiguration configuration = new CorsOriginConfiguration();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     private static final ArgumentConversionContext<List<HttpMethod>> CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD = ConversionContext.of(Argument.listOf(HttpMethod.class));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "51:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
      "53:             convertibleValues",
      "55:                 .ifPresent(configuration::setAllowedOrigins);",
      "57:             convertibleValues",
      "59:                 .ifPresent(configuration::setAllowedMethods);",
      "61:             convertibleValues",
      "63:                 .ifPresent(configuration::setAllowedHeaders);",
      "65:             convertibleValues",
      "67:                 .ifPresent(configuration::setExposedHeaders);",
      "69:             convertibleValues",
      "71:                 .ifPresent(configuration::setAllowCredentials);",
      "73:             convertibleValues",
      "75:                 .ifPresent(configuration::setMaxAge);",
      "76:         }",
      "77:         return Optional.of(configuration);",
      "",
      "[Removed Lines]",
      "54:                 .get(ALLOWED_ORIGINS, Argument.listOf(String.class))",
      "58:                 .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))",
      "62:                 .get(ALLOWED_HEADERS, Argument.listOf(String.class))",
      "66:                 .get(EXPOSED_HEADERS, Argument.listOf(String.class))",
      "70:                 .get(ALLOW_CREDENTIALS, Boolean.class)",
      "74:                 .get(MAX_AGE, Long.class)",
      "",
      "[Added Lines]",
      "58:                 .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
      "62:                 .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
      "66:                 .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "70:                 .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "74:                 .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
      "78:                 .get(MAX_AGE, ConversionContext.LONG)",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java": [
      "File: http/src/main/java/io/micronaut/http/HttpHeaders.java -> http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.convert.ConversionService;",
      "19: import io.micronaut.core.type.Headers;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472:     default Optional<Integer> findInt(CharSequence name) {",
      "474:     }",
      "",
      "[Removed Lines]",
      "473:         return get(name, Integer.class);",
      "",
      "[Added Lines]",
      "474:         return get(name, ConversionContext.INT);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "482:     default Optional<String> findFirst(CharSequence name) {",
      "484:     }",
      "",
      "[Removed Lines]",
      "483:         return getFirst(name, String.class);",
      "",
      "[Added Lines]",
      "484:         return getFirst(name, ConversionContext.STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "491:     default Optional<MediaType> contentType() {",
      "493:     }",
      "",
      "[Removed Lines]",
      "492:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.class);",
      "",
      "[Added Lines]",
      "493:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.CONVERSION_CONTEXT);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "500:     default OptionalLong contentLength() {",
      "502:         return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);",
      "503:     }",
      "",
      "[Removed Lines]",
      "501:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, Long.class);",
      "",
      "[Added Lines]",
      "502:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "511:         return getAll(HttpHeaders.ACCEPT)",
      "512:             .stream()",
      "513:             .flatMap(x -> Arrays.stream(x.split(\",\")))",
      "515:             .distinct()",
      "516:             .collect(Collectors.toList());",
      "517:     }",
      "",
      "[Removed Lines]",
      "514:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.class).map(Stream::of).orElse(Stream.empty()))",
      "",
      "[Added Lines]",
      "515:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.CONVERSION_CONTEXT).map(Stream::of).orElse(Stream.empty()))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "522:     default boolean isKeepAlive() {",
      "524:     }",
      "",
      "[Removed Lines]",
      "523:         return getFirst(CONNECTION, String.class).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "[Added Lines]",
      "524:         return getFirst(CONNECTION, ConversionContext.STRING).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java": [
      "File: http/src/main/java/io/micronaut/http/MediaType.java -> http/src/main/java/io/micronaut/http/MediaType.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.annotation.TypeHint;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.naming.NameUtils;",
      "21: import io.micronaut.core.util.StringUtils;",
      "22: import io.micronaut.core.value.OptionalValues;",
      "23: import io.micronaut.http.annotation.Produces;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.annotation.Internal;",
      "20: import io.micronaut.core.convert.ArgumentConversionContext;",
      "21: import io.micronaut.core.convert.ConversionContext;",
      "24: import io.micronaut.core.type.Argument;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:     public static final String V_PARAMETER = \"v\";",
      "321:     private static final BigDecimal QUALITY_RATING_NUMBER = new BigDecimal(\"1.0\");",
      "322:     private static final String QUALITY_RATING = \"1.0\";",
      "323:     private static final String SEMICOLON = \";\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:     @Internal",
      "326:     static final Argument<MediaType> ARGUMENT = Argument.of(MediaType.class);",
      "328:     @Internal",
      "329:     static final ArgumentConversionContext<MediaType> CONVERSION_CONTEXT = ConversionContext.of(ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java": [
      "File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java -> runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:             Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "260:             Object key = keyGenerator.generateKey(context, params);",
      "261:             CompletableFuture<Object> thisFuture = new CompletableFuture<>();",
      "263:             asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {",
      "264:                 if (throwable == null && o.isPresent()) {",
      "",
      "[Removed Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "503:         CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);",
      "504:         Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "505:         Object key = keyGenerator.generateKey(context, params);",
      "508:         Maybe<Object> maybe = Maybe.create(emitter -> {",
      "509:             asyncCache.get(key, firstTypeVariable).whenComplete((opt, throwable) -> {",
      "",
      "[Removed Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java": [
      "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import io.micronaut.context.condition.Condition;",
      "21: import io.micronaut.context.condition.ConditionContext;",
      "22: import io.micronaut.core.annotation.Introspected;",
      "24: import io.micronaut.core.util.CollectionUtils;",
      "26: import java.io.File;",
      "",
      "[Removed Lines]",
      "23: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "23: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:         if (beanContext instanceof ApplicationContext) {",
      "41:             List<String> paths = ((ApplicationContext) beanContext)",
      "42:                     .getEnvironment()",
      "44:                     .orElse(null);",
      "46:             if (CollectionUtils.isNotEmpty(paths)) {",
      "",
      "[Removed Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))",
      "",
      "[Added Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)",
      "",
      "---------------"
    ],
    "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java": [
      "File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java -> session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: @Requires(classes = HttpServerConfiguration.class)",
      "43: public class SessionArgumentBinder implements TypedRequestArgumentBinder<Session> {",
      "45:     private final SessionStore<Session> sessionStore;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     private static final Argument<Session> TYPE = Argument.of(Session.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     @Override",
      "57:     public Argument<Session> argumentType() {",
      "59:     }",
      "61:     @Override",
      "",
      "[Removed Lines]",
      "58:         return Argument.of(Session.class);",
      "",
      "[Added Lines]",
      "60:         return TYPE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4cb8592e46359c3ea6ce47d9c7d4a707e12ed703",
      "candidate_info": {
        "commit_hash": "4cb8592e46359c3ea6ce47d9c7d4a707e12ed703",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/4cb8592e46359c3ea6ce47d9c7d4a707e12ed703",
        "files": [
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java",
          "test-suite/build.gradle",
          "test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy",
          "test-suite/src/test/groovy/io/micronaut/upload/UploadController.java"
        ],
        "message": "Transfer flow control to subscribers after the route is executed. Fix issue with a disk file upload being read into memory.",
        "before_after_code_files": [
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java",
          "test-suite/build.gradle||test-suite/build.gradle",
          "test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy||test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy",
          "test-suite/src/test/groovy/io/micronaut/upload/UploadController.java||test-suite/src/test/groovy/io/micronaut/upload/UploadController.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java"
          ],
          "candidate": [
            "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java"
          ]
        }
      },
      "candidate_diff": {
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/FormDataHttpContentProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:                         }",
          "93:                     } finally {",
          "95:                     }",
          "96:                 }",
          "",
          "[Removed Lines]",
          "94:                         data.release();",
          "",
          "[Added Lines]",
          "94:                         if (!(data instanceof FileUpload) || ((FileUpload) data).isInMemory()) {",
          "95:                             data.release();",
          "96:                         }",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import io.micronaut.core.convert.ConversionService;",
          "25: import io.micronaut.core.io.Writable;",
          "26: import io.micronaut.core.io.buffer.ByteBuffer;",
          "28: import io.micronaut.core.type.Argument;",
          "29: import io.micronaut.core.type.ReturnType;",
          "30: import io.micronaut.core.util.StreamUtils;",
          "",
          "[Removed Lines]",
          "27: import io.micronaut.core.reflect.ClassUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: import io.netty.handler.timeout.IdleStateEvent;",
          "93: import io.reactivex.BackpressureStrategy;",
          "94: import io.reactivex.Flowable;",
          "95: import io.reactivex.schedulers.Schedulers;",
          "96: import io.reactivex.subjects.ReplaySubject;",
          "97: import org.reactivestreams.Publisher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: import io.reactivex.functions.LongConsumer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: import java.io.File;",
          "104: import java.io.IOException;",
          "105: import java.net.URI;",
          "106: import java.net.URISyntaxException;",
          "107: import java.net.URL;",
          "108: import java.nio.file.Paths;",
          "109: import java.time.LocalDateTime;",
          "110: import java.util.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: import java.io.RandomAccessFile;",
          "109: import java.nio.channels.FileChannel;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113: import java.util.concurrent.ExecutorService;",
          "114: import java.util.concurrent.atomic.AtomicBoolean;",
          "115: import java.util.concurrent.atomic.AtomicInteger;",
          "116: import java.util.concurrent.atomic.AtomicReference;",
          "118: import java.util.function.Function;",
          "119: import java.util.function.Supplier;",
          "120: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "117: import java.util.concurrent.atomic.LongAdder;",
          "",
          "[Added Lines]",
          "118: import java.util.concurrent.atomic.AtomicLong;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "611:         return new CompletionAwareSubscriber<Object>() {",
          "612:             RouteMatch<?> routeMatch = finalRoute;",
          "613:             AtomicBoolean executed = new AtomicBoolean(false);",
          "614:             ConcurrentHashMap<Integer, Long> partPositions = new ConcurrentHashMap<>();",
          "615:             ConcurrentHashMap<String, ReplaySubject> subjects = new ConcurrentHashMap<>();",
          "616:             ConcurrentHashMap<Integer, ReplaySubject> childSubjects = new ConcurrentHashMap<>();",
          "617:             ConcurrentHashMap<Integer, StreamingFileUpload> streamingUploads = new ConcurrentHashMap<>();",
          "618:             ConversionService conversionService = ConversionService.SHARED;",
          "620:             Subscription s;",
          "622:             @Override",
          "623:             protected void doOnSubscribe(Subscription subscription) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:             AtomicLong pressureRequested = new AtomicLong(0);",
          "618:             ConcurrentHashMap<Integer, FileChannel> partChannels = new ConcurrentHashMap<>();",
          "624:             LongConsumer onRequest = (num) -> pressureRequested.updateAndGet((p) -> {",
          "625:                 long newVal = p - num;",
          "626:                 if (newVal <= 0) {",
          "627:                     s.request(num - p);",
          "628:                     return 0;",
          "629:                 } else {",
          "630:                     return newVal;",
          "631:                 }",
          "632:             });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "647:                             if (Publishers.isConvertibleToPublisher(argument.getType())) {",
          "648:                                 Integer dataKey = System.identityHashCode(data);",
          "650:                                 Class typeVariableType = typeVariable.getType();",
          "652:                                 ReplaySubject namedSubject = subjects.computeIfAbsent(name, (key) -> ReplaySubject.create());",
          "654:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
          "655:                                     childSubjects.computeIfAbsent(dataKey, (key) -> {",
          "656:                                         ReplaySubject childSubject = ReplaySubject.create();",
          "659:                                             namedSubject.onNext(new NettyStreamingFileUpload(",
          "660:                                                 (FileUpload) data,",
          "661:                                                 serverConfiguration.getMultipart(),",
          "",
          "[Removed Lines]",
          "649:                                 Argument typeVariable = argument.getFirstTypeVariable().orElse(argument);",
          "657:                                         Flowable flowable = childSubject.toFlowable(BackpressureStrategy.BUFFER);",
          "658:                                         if (StreamingFileUpload.class.isAssignableFrom(typeVariableType) && data instanceof FileUpload) {",
          "",
          "[Added Lines]",
          "662:                                 Argument typeVariable;",
          "664:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "665:                                     typeVariable = Argument.of(PartData.class);",
          "666:                                 } else {",
          "667:                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "668:                                 }",
          "673:                                 boolean partialUpload = PartData.class.equals(typeVariableType) ||",
          "674:                                         Publishers.isConvertibleToPublisher(typeVariableType);",
          "677:                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
          "678:                                     if (streamingFileUpload) {",
          "679:                                         typeVariable = Argument.of(PartData.class);",
          "680:                                     } else {",
          "681:                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "682:                                     }",
          "685:                                         Flowable flowable = childSubject.toFlowable(BackpressureStrategy.BUFFER)",
          "686:                                                 .doOnRequest(onRequest);",
          "687:                                         if (streamingFileUpload && data instanceof FileUpload) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "675:                                     data.retain();",
          "676:                                 }",
          "689:                                 Object part = data;",
          "691:                                 if (data instanceof FileUpload) {",
          "692:                                     FileUpload fileUpload = (FileUpload) data;",
          "694:                                     if (partialUpload) {",
          "695:                                         partPositions.putIfAbsent(dataKey, 0L);",
          "696:                                         int start = partPositions.get(dataKey).intValue();",
          "697:                                         int length = new Long(fileUpload.length() - start).intValue();",
          "698:                                         partPositions.put(dataKey, fileUpload.length());",
          "701:                                     }",
          "703:                                     if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "",
          "[Removed Lines]",
          "678:                                 boolean partialUpload = true;",
          "680:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
          "681:                                     typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "682:                                 } else if (StreamingFileUpload.class.isAssignableFrom(typeVariableType)) {",
          "683:                                     typeVariable = Argument.of(PartData.class);",
          "684:                                 } else if (!ClassUtils.isJavaLangType(typeVariableType) &&",
          "685:                                         !PartData.class.equals(typeVariableType)) {",
          "686:                                     partialUpload = false;",
          "687:                                 }",
          "700:                                         part = new NettyPartData(fileUpload, start, length);",
          "",
          "[Added Lines]",
          "712:                                     if (!fileUpload.isInMemory()) {",
          "713:                                         partChannels.computeIfAbsent(dataKey, (key) -> {",
          "714:                                             try {",
          "715:                                                 return new RandomAccessFile(fileUpload.getFile(), \"r\").getChannel();",
          "716:                                             } catch (IOException e) {",
          "717:                                                 return null;",
          "718:                                             }",
          "719:                                         });",
          "720:                                     }",
          "728:                                         part = new NettyPartData(fileUpload, start, length, partChannels.get(dataKey));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "706:                                                 fileUpload,",
          "707:                                                 serverConfiguration.getMultipart(),",
          "708:                                                 ioExecutor,",
          "710:                                     }",
          "711:                                 }",
          "",
          "[Removed Lines]",
          "709:                                                 subject.toFlowable(BackpressureStrategy.BUFFER)));",
          "",
          "[Added Lines]",
          "737:                                                 subject.toFlowable(BackpressureStrategy.BUFFER).doOnRequest(onRequest)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "724:                                     if (streamingUploads.containsKey(dataKey)) {",
          "725:                                         return streamingUploads.get(dataKey);",
          "726:                                     } else {",
          "728:                                     }",
          "729:                                 };",
          "",
          "[Removed Lines]",
          "727:                                         return namedSubject.toFlowable(BackpressureStrategy.BUFFER);",
          "",
          "[Added Lines]",
          "755:                                         Flowable namedFlowable = namedSubject.toFlowable(BackpressureStrategy.BUFFER);",
          "756:                                         if (!childSubjects.containsKey(dataKey)) {",
          "757:                                             namedFlowable = namedFlowable.doOnRequest(onRequest);",
          "758:                                         }",
          "759:                                         return namedFlowable;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "739:                             }",
          "741:                             if (!executed) {",
          "743:                                 String argumentName = argument.getName();",
          "744:                                 if (!routeMatch.isSatisfied(argumentName)) {",
          "745:                                     routeMatch = routeMatch.fulfill(Collections.singletonMap(argumentName, value.get()));",
          "746:                                 }",
          "747:                             }",
          "749:                         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:                                 pressureRequested.incrementAndGet();",
          "779:                                 s.request(1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "770:                                     }",
          "771:                                 }",
          "772:                             }",
          "773:                         }",
          "774:                     }",
          "775:                 } else {",
          "776:                     request.setBody(message);",
          "777:                 }",
          "779:                 if (!executed) {",
          "782:                         executeRoute();",
          "785:                     }",
          "786:                 }",
          "787:             }",
          "",
          "[Removed Lines]",
          "780:                     if ((routeMatch.isExecutable() && subjects.isEmpty() && childSubjects.isEmpty()) || message instanceof LastHttpContent) {",
          "783:                     } else {",
          "784:                         s.request(1);",
          "",
          "[Added Lines]",
          "806:                         } else {",
          "807:                             s.request(1);",
          "812:                     s.request(1);",
          "816:                     if (routeMatch.isExecutable() || message instanceof LastHttpContent) {",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/converters/FileUploadToObjectConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:             String contentType = object.getContentType();",
          "64:             ByteBuf byteBuf = object.getByteBuf();",
          "65:             if (contentType != null) {",
          "66:                 MediaType mediaType = new MediaType(contentType);",
          "67:                 Optional<MediaTypeCodec> registered = decoderRegistryProvider.get().findCodec(mediaType);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:             if (targetType.equals(String.class)) {",
          "66:                 return Optional.of(byteBuf.toString(context.getCharset()));",
          "67:             }",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyPartData.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import io.micronaut.core.annotation.Internal;",
          "20: import io.micronaut.http.MediaType;",
          "21: import io.micronaut.http.multipart.PartData;",
          "25: import io.netty.handler.codec.http.multipart.FileUpload;",
          "27: import java.io.IOException;",
          "28: import java.io.InputStream;",
          "29: import java.nio.ByteBuffer;",
          "30: import java.util.Optional;",
          "",
          "[Removed Lines]",
          "22: import io.netty.buffer.ByteBuf;",
          "23: import io.netty.buffer.ByteBufInputStream;",
          "24: import io.netty.buffer.ByteBufUtil;",
          "",
          "[Added Lines]",
          "22: import io.netty.buffer.*;",
          "24: import org.slf4j.Logger;",
          "25: import org.slf4j.LoggerFactory;",
          "27: import javax.annotation.Nullable;",
          "31: import java.nio.channels.FileChannel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: @Internal",
          "39: public class NettyPartData implements PartData {",
          "41:     private final FileUpload fileUpload;",
          "42:     private final int start;",
          "43:     private final int length;",
          "51:         this.fileUpload = fileUpload;",
          "52:         this.start = start;",
          "53:         this.length = length;",
          "54:     }",
          "",
          "[Removed Lines]",
          "50:     public NettyPartData(FileUpload fileUpload, int start, int length) {",
          "",
          "[Added Lines]",
          "43:     private static final Logger LOG = LoggerFactory.getLogger(NettyPartData.class);",
          "48:     private final FileChannel channel;",
          "55:     public NettyPartData(FileUpload fileUpload, int start, int length, @Nullable FileChannel channel) {",
          "59:         this.channel = channel;",
          "60:         if (!fileUpload.isInMemory() && channel == null) {",
          "61:             throw new IllegalArgumentException(\"Creating a NettyPartData with a disk file upload without a channel is not allowed.\");",
          "62:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:     public ByteBuf getByteBuf() throws IOException {",
          "110:     }",
          "111: }",
          "",
          "[Removed Lines]",
          "109:         return fileUpload.getByteBuf().retainedSlice(start, length);",
          "",
          "[Added Lines]",
          "118:         if (fileUpload.isInMemory()) {",
          "119:             return fileUpload.getByteBuf().retainedSlice(start, length);",
          "120:         } else {",
          "121:             byte[] data = new byte[length];",
          "122:             channel.read(ByteBuffer.wrap(data), start);",
          "123:             try {",
          "124:                 if (start + length == fileUpload.definedLength()) {",
          "125:                     channel.close();",
          "126:                 }",
          "127:             } catch (IOException e) {",
          "128:                 LOG.warn(\"Error closing file channel for file upload\", e);",
          "129:             }",
          "130:             return Unpooled.wrappedBuffer(data);",
          "131:         }",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/multipart/NettyStreamingFileUpload.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import io.netty.handler.codec.http.multipart.DiskFileUpload;",
          "27: import io.reactivex.Flowable;",
          "28: import io.reactivex.Observable;",
          "30: import io.reactivex.schedulers.Schedulers;",
          "31: import org.reactivestreams.Publisher;",
          "32: import org.reactivestreams.Subscriber;",
          "33: import org.slf4j.Logger;",
          "34: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "29: import io.reactivex.internal.functions.Functions;",
          "",
          "[Added Lines]",
          "32: import org.reactivestreams.Subscription;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:                 fileUpload.release();",
          "119:             }",
          "120:         };",
          "140:     }",
          "142:     @Override",
          "",
          "[Removed Lines]",
          "121:         if (isComplete()) {",
          "122:             return new AsyncSingleResultPublisher<>(ioExecutor, transferOperation);",
          "123:         } else {",
          "124:             return Observable.<Boolean>create((emitter) -> {",
          "126:                 subject.subscribeOn(Schedulers.from(ioExecutor))",
          "127:                     .subscribe(Functions.emptyConsumer(),",
          "128:                         (t) -> emitter.onError((Throwable) t),",
          "129:                         () -> {",
          "130:                             if (fileUpload.isCompleted()) {",
          "131:                                 emitter.onNext(transferOperation.get());",
          "132:                                 emitter.onComplete();",
          "133:                             } else {",
          "134:                                 emitter.onError(new MultipartException(\"Transfer did not complete\"));",
          "135:                             }",
          "136:                         });",
          "138:             }).firstOrError().toFlowable();",
          "139:         }",
          "",
          "[Added Lines]",
          "122:         return Observable.<Boolean>create((emitter) -> {",
          "124:             subject.subscribeOn(Schedulers.from(ioExecutor))",
          "125:                 .subscribe(new Subscriber() {",
          "126:                     Subscription subscription;",
          "127:                     @Override",
          "128:                     public void onSubscribe(Subscription s) {",
          "129:                         subscription = s;",
          "130:                         subscription.request(1);",
          "131:                     }",
          "133:                     @Override",
          "134:                     public void onNext(Object o) {",
          "135:                         subscription.request(1);",
          "136:                     }",
          "138:                     @Override",
          "139:                     public void onError(Throwable t) {",
          "140:                         emitter.onError(t);",
          "141:                     }",
          "143:                     @Override",
          "144:                     public void onComplete() {",
          "145:                         if (fileUpload.isCompleted()) {",
          "146:                             emitter.onNext(transferOperation.get());",
          "147:                             emitter.onComplete();",
          "148:                         } else {",
          "149:                             emitter.onError(new MultipartException(\"Transfer did not complete\"));",
          "150:                         }",
          "151:                     }",
          "152:                 });",
          "153:         }).firstOrError().toFlowable();",
          "",
          "---------------"
        ],
        "test-suite/build.gradle||test-suite/build.gradle": [
          "File: test-suite/build.gradle -> test-suite/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: apply from: \"${rootProject.projectDir}/gradle/geb.gradle\"",
          "37: apply from: \"${rootProject.projectDir}/gradle/webdriverbinaries.gradle\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     jvmArgs('-Dio.netty.leakDetection.level=paranoid')",
          "42:         showStandardStreams = true",
          "43:     }",
          "44:     beforeTest {",
          "45:         System.out.println(\"STARTING: ${it.className}.$it.name\")",
          "46:         System.out.flush()",
          "47:     }",
          "48:     afterTest {",
          "49:         System.out.println(\"FINISHED: ${it.className}.$it.name\")",
          "50:         System.out.flush()",
          "52: }",
          "",
          "---------------"
        ],
        "test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy||test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy": [
          "File: test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy -> test-suite/src/test/groovy/io/micronaut/upload/DiskUploadSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.micronaut.upload",
          "3: import io.micronaut.AbstractMicronautSpec",
          "4: import io.micronaut.http.HttpRequest",
          "5: import io.micronaut.http.HttpResponse",
          "6: import io.micronaut.http.HttpStatus",
          "7: import io.micronaut.http.MediaType",
          "8: import io.micronaut.http.client.multipart.MultipartBody",
          "9: import io.reactivex.Flowable",
          "11: class DiskUploadSpec extends AbstractMicronautSpec {",
          "13:     void \"test upload FileUpload object via transferTo\"() {",
          "14:         given:",
          "15:         def data = '{\"title\":\"Test\"}'",
          "16:         MultipartBody requestBody = MultipartBody.builder()",
          "17:                 .addPart(\"title\", \"bar\")",
          "18:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "19:                 .build()",
          "22:         when:",
          "23:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "24:                 HttpRequest.POST(\"/upload/receive-file-upload\", requestBody)",
          "25:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "26:                         .accept(MediaType.TEXT_PLAIN_TYPE), String",
          "27:         ))",
          "28:         HttpResponse<String> response = flowable.blockingFirst()",
          "29:         def result = response.getBody().get()",
          "31:         then:",
          "32:         response.code() == HttpStatus.OK.code",
          "33:         result == \"Uploaded ${data.size()}\"",
          "34:     }",
          "36:     void \"test upload big FileUpload object via transferTo\"() {",
          "37:         given:",
          "38:         def val = 'Big ' + 'xxxx' * 500",
          "39:         def data = '{\"title\":\"' + val + '\"}'",
          "41:         MultipartBody requestBody = MultipartBody.builder()",
          "43:                 .addPart(\"title\", \"bar\")",
          "44:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "45:                 .build()",
          "48:         when:",
          "49:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "50:                 HttpRequest.POST(\"/upload/receive-file-upload\", requestBody)",
          "51:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "52:                         .accept(MediaType.TEXT_PLAIN_TYPE),",
          "53:                 String",
          "54:         ))",
          "55:         HttpResponse<String> response = flowable.blockingFirst()",
          "57:         def result = response.getBody().get()",
          "59:         def file = new File(uploadDir, \"bar.json\")",
          "61:         then:",
          "62:         response.code() == HttpStatus.OK.code",
          "63:         result == \"Uploaded ${data.size()}\"",
          "64:         file.exists()",
          "65:         file.text == data",
          "66:     }",
          "68:     void \"test non-blocking upload with publisher receiving bytes\"() {",
          "69:         given:",
          "70:         def data = 'some data ' * 500",
          "71:         MultipartBody requestBody = MultipartBody.builder()",
          "72:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "73:                 .addPart(\"title\", \"bar\")",
          "74:                 .build()",
          "77:         when:",
          "78:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "79:                 HttpRequest.POST(\"/upload/receive-publisher\", requestBody)",
          "80:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "81:                         .accept(MediaType.TEXT_PLAIN_TYPE),",
          "82:                 String",
          "83:         ))",
          "85:         HttpResponse<String> response = flowable.blockingFirst()",
          "86:         def result = response.getBody().get()",
          "88:         then:",
          "89:         response.code() == HttpStatus.OK.code",
          "90:         result.length() == data.length()",
          "91:         result == data",
          "93:     }",
          "96:     void \"test non-blocking upload with publisher receiving part datas\"() {",
          "97:         given:",
          "98:         def data = 'some data ' * 500",
          "99:         MultipartBody requestBody = MultipartBody.builder()",
          "100:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "101:                 .addPart(\"title\", \"bar\")",
          "102:                 .build()",
          "105:         when:",
          "106:         Flowable<HttpResponse<Long>> flowable = Flowable.fromPublisher(client.exchange(",
          "107:                 HttpRequest.POST(\"/upload/receive-partdata\", requestBody)",
          "108:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "109:                         .accept(MediaType.TEXT_PLAIN_TYPE),",
          "110:                 Long",
          "111:         ))",
          "113:         HttpResponse<Long> response = flowable.blockingFirst()",
          "114:         def result = response.getBody().get()",
          "116:         then:",
          "117:         response.code() == HttpStatus.OK.code",
          "118:         result == new Long(data.length())",
          "119:     }",
          "121:     void \"test non-blocking upload with publisher receiving two objects\"() {",
          "122:         given:",
          "123:         def data = '{\"title\":\"Test\"}'",
          "124:         MultipartBody requestBody = MultipartBody.builder()",
          "125:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "126:                 .addPart(\"title\", \"bar\")",
          "127:                 .build()",
          "130:         when:",
          "131:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "132:                 HttpRequest.POST(\"/upload/receive-two-flow-parts\", requestBody)",
          "133:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "134:                         .accept(MediaType.TEXT_PLAIN_TYPE),",
          "135:                 String",
          "136:         ))",
          "138:         HttpResponse<String> response = flowable.blockingFirst()",
          "139:         def result = response.getBody().get()",
          "141:         then:",
          "142:         response.code() == HttpStatus.OK.code",
          "143:         result.length() == 21",
          "144:         result == \"bar: $data\"",
          "146:     }",
          "148:     void \"test non-blocking upload with publisher receiving converted JSON\"() {",
          "149:         given:",
          "150:         def data = '{\"title\":\"Test\"}'",
          "151:         MultipartBody requestBody = MultipartBody.builder()",
          "152:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "153:                 .addPart(\"title\", \"bar\")",
          "154:                 .build()",
          "157:         when:",
          "158:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "159:                 HttpRequest.POST(\"/upload/receive-flow-data\", requestBody)",
          "160:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "161:                         .accept(MediaType.APPLICATION_JSON_TYPE),",
          "162:                 String",
          "163:         ))",
          "164:         HttpResponse<String> response = flowable.blockingFirst()",
          "166:         then:",
          "167:         response.code() == HttpStatus.OK.code",
          "168:         response.getBody().get() == 'Data{title=\\'Test\\'}'",
          "170:         when: \"a large document with partial data is uploaded\"",
          "171:         def val = 'Big ' + 'xxxx' * 200",
          "172:         data = '{\"title\":\"' + val + '\"}'",
          "173:         requestBody = MultipartBody.builder()",
          "174:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE,data.bytes)",
          "175:                 .addPart(\"title\", \"bar\")",
          "176:                 .build()",
          "177:         flowable = Flowable.fromPublisher(client.exchange(",
          "178:                 HttpRequest.POST(\"/upload/receive-flow-data\", requestBody)",
          "179:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "180:                         .accept(MediaType.APPLICATION_JSON_TYPE.TEXT_PLAIN_TYPE),",
          "181:                 String",
          "182:         ))",
          "183:         response = flowable.blockingFirst()",
          "185:         then:",
          "186:         response.code() == HttpStatus.OK.code",
          "187:         ((String)response.getBody().get()).contains(val) // TODO: optimize this to use Jackson non-blocking and JsonNode",
          "188:     }",
          "190:     void \"test non-blocking upload with publisher receiving multiple converted JSON\"() {",
          "191:         given:",
          "192:         def data = '{\"title\":\"Test\"}'",
          "193:         def data2 = '{\"title\":\"Test2\"}'",
          "194:         MultipartBody requestBody = MultipartBody.builder()",
          "195:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE, data.bytes)",
          "196:                 .addPart(\"data\", \"data2.json\", MediaType.APPLICATION_JSON_TYPE, data2.bytes)",
          "197:                 .addPart(\"title\", \"bar\")",
          "198:                 .build()",
          "200:         when:",
          "201:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "202:                 HttpRequest.POST(\"/upload/receive-multiple-flow-data\", requestBody)",
          "203:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "204:                         .accept(MediaType.APPLICATION_JSON_TYPE),",
          "205:                 String",
          "206:         ))",
          "207:         HttpResponse<String> response = flowable.blockingFirst()",
          "209:         then:",
          "210:         response.code() == HttpStatus.OK.code",
          "211:         response.getBody().get() == '[Data{title=\\'Test\\'}, Data{title=\\'Test2\\'}]'",
          "213:         when: \"a large document with partial data is uploaded\"",
          "214:         def val = 'xxxx' * 200",
          "215:         data = '{\"title\":\"Big ' + val + '\"}'",
          "216:         data2 = '{\"title\":\"Big2 ' + val + '\"}'",
          "217:         requestBody = MultipartBody.builder()",
          "218:                 .addPart(\"data\", \"data.json\", MediaType.APPLICATION_JSON_TYPE,data.bytes)",
          "219:                 .addPart(\"data\", \"data2.json\", MediaType.APPLICATION_JSON_TYPE,data2.bytes)",
          "220:                 .addPart(\"title\", \"bar\")",
          "221:                 .build()",
          "222:         flowable = Flowable.fromPublisher(client.exchange(",
          "223:                 HttpRequest.POST(\"/upload/receive-multiple-flow-data\", requestBody)",
          "224:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "225:                         .accept(MediaType.APPLICATION_JSON_TYPE.TEXT_PLAIN_TYPE),",
          "226:                 String",
          "227:         ))",
          "228:         response = flowable.blockingFirst()",
          "230:         then:",
          "231:         response.code() == HttpStatus.OK.code",
          "232:         response.body().contains('Data{title=\\'Big xx')",
          "233:         response.body().contains('Data{title=\\'Big2 xx')",
          "234:     }",
          "236:     void \"test receiving multiple completed parts with the same name\"() {",
          "237:         MultipartBody requestBody = MultipartBody.builder()",
          "238:                 .addPart(\"data\", \"abc.txt\", MediaType.TEXT_PLAIN_TYPE, \"abc\".bytes)",
          "239:                 .addPart(\"data\", \"def.txt\", MediaType.TEXT_PLAIN_TYPE, \"abcdef\".bytes)",
          "240:                 .addPart(\"title\", \"bar\")",
          "241:                 .build()",
          "243:         when:",
          "244:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "245:                 HttpRequest.POST(\"/upload/receive-multiple-completed\", requestBody)",
          "246:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "247:                         .accept(MediaType.APPLICATION_JSON_TYPE),",
          "248:                 String",
          "249:         ))",
          "250:         HttpResponse<String> response = flowable.blockingFirst()",
          "252:         then:",
          "253:         response.code() == HttpStatus.OK.code",
          "254:         response.body() == '{\"files\":[{\"name\":\"abc.txt\",\"size\":3},{\"name\":\"def.txt\",\"size\":6}],\"title\":\"bar\"}'",
          "255:     }",
          "257:     void \"test receiving multiple streaming parts with the same name\"() {",
          "258:         def val = ('Big ' + 'xxxx' * 20000).bytes",
          "259:         MultipartBody requestBody = MultipartBody.builder()",
          "260:                 .addPart(\"data\", \"abc.txt\", MediaType.TEXT_PLAIN_TYPE, val)",
          "261:                 .addPart(\"data\", \"def.txt\", MediaType.TEXT_PLAIN_TYPE, val)",
          "262:                 .addPart(\"title\", \"bar\")",
          "263:                 .build()",
          "265:         when:",
          "266:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "267:                 HttpRequest.POST(\"/upload/receive-multiple-streaming\", requestBody)",
          "268:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "269:                         .accept(MediaType.TEXT_PLAIN_TYPE),",
          "270:                 String",
          "271:         ))",
          "272:         HttpResponse<String> response = flowable.blockingFirst()",
          "274:         then:",
          "275:         response.code() == HttpStatus.OK.code",
          "276:         response.body() == (val.length * 2).toString()",
          "277:     }",
          "279:     void \"test receiving a publisher of publishers with the same name\"() {",
          "280:         def val = ('Big ' + 'xxxx' * 200).bytes",
          "281:         MultipartBody requestBody = MultipartBody.builder()",
          "282:                 .addPart(\"data\", \"abc.txt\", MediaType.TEXT_PLAIN_TYPE, val)",
          "283:                 .addPart(\"data\", \"def.txt\", MediaType.TEXT_PLAIN_TYPE, val)",
          "284:                 .addPart(\"title\", \"bar\")",
          "285:                 .build()",
          "287:         when:",
          "288:         Flowable<HttpResponse<String>> flowable = Flowable.fromPublisher(client.exchange(",
          "289:                 HttpRequest.POST(\"/upload/receive-multiple-publishers\", requestBody)",
          "290:                         .contentType(MediaType.MULTIPART_FORM_DATA)",
          "291:                         .accept(MediaType.TEXT_PLAIN_TYPE),",
          "292:                 String",
          "293:         ))",
          "294:         HttpResponse<String> response = flowable.blockingFirst()",
          "296:         then:",
          "297:         response.code() == HttpStatus.OK.code",
          "298:         response.body() == (val.length * 2).toString()",
          "299:     }",
          "301:     Map<String, Object> getConfiguration() {",
          "302:         super.getConfiguration() << ['micronaut.http.client.read-timeout': 300, 'micronaut.server.multipart.disk': true]",
          "303:     }",
          "304: }",
          "",
          "---------------"
        ],
        "test-suite/src/test/groovy/io/micronaut/upload/UploadController.java||test-suite/src/test/groovy/io/micronaut/upload/UploadController.java": [
          "File: test-suite/src/test/groovy/io/micronaut/upload/UploadController.java -> test-suite/src/test/groovy/io/micronaut/upload/UploadController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import io.reactivex.BackpressureStrategy;",
          "29: import io.reactivex.Flowable;",
          "30: import io.reactivex.Single;",
          "31: import io.reactivex.functions.Function;",
          "32: import io.reactivex.schedulers.Schedulers;",
          "33: import io.reactivex.subjects.ReplaySubject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import io.reactivex.exceptions.Exceptions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:         );",
          "102:     }",
          "105:     public Publisher<HttpResponse> receiveFlowData(Data data) {",
          "106:         return Flowable.just(HttpResponse.ok(data.toString()));",
          "107:     }",
          "110:     public Single<HttpResponse> receiveMultipleFlowData(Publisher<Data> data) {",
          "111:         return Flowable.fromPublisher(data).toList().map(list -> HttpResponse.ok(list.toString()));",
          "112:     }",
          "115:     public Publisher<HttpResponse> receiveTwoFlowParts(",
          "116:             @Part(\"data\") Flowable<String> dataPublisher,",
          "117:             @Part(\"title\") Flowable<String> titlePublisher) {",
          "",
          "[Removed Lines]",
          "104:     @Post(value = \"/receive-flow-data\", consumes = MediaType.MULTIPART_FORM_DATA)",
          "109:     @Post(value = \"/receive-multiple-flow-data\", consumes = MediaType.MULTIPART_FORM_DATA)",
          "114:     @Post(value = \"/receive-two-flow-parts\", consumes = MediaType.MULTIPART_FORM_DATA)",
          "",
          "[Added Lines]",
          "105:     @Post(value = \"/receive-flow-data\", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN)",
          "110:     @Post(value = \"/receive-multiple-flow-data\", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN)",
          "115:     @Post(value = \"/receive-two-flow-parts\", consumes = MediaType.MULTIPART_FORM_DATA, produces = MediaType.TEXT_PLAIN)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:     public Single<HttpResponse> receiveMultipleStreaming(",
          "165:             Flowable<StreamingFileUpload> data) {",
          "166:         return data.subscribeOn(Schedulers.io()).flatMap((StreamingFileUpload upload) -> {",
          "168:         }).collect(LongAdder::new, (adder, bytes) -> adder.add((long)bytes.length))",
          "169:                 .map((adder) -> {",
          "170:                     return HttpResponse.ok(adder.longValue());",
          "",
          "[Removed Lines]",
          "167:             return Flowable.fromPublisher(upload).map(PartData::getBytes);",
          "",
          "[Added Lines]",
          "168:             return Flowable.fromPublisher(upload)",
          "169:                     .map((pd) -> {",
          "170:                         try {",
          "171:                             return pd.getBytes();",
          "172:                         } catch (IOException e) {",
          "173:                             throw Exceptions.propagate(e);",
          "174:                         }",
          "175:                     });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "175:     public Single<HttpResponse> receivePartdata(",
          "176:             Flowable<PartData> data) {",
          "177:         return data.subscribeOn(Schedulers.io())",
          "179:                 .collect(LongAdder::new, (adder, bytes) -> adder.add((long)bytes.length))",
          "180:                 .map((adder) -> {",
          "181:                     return HttpResponse.ok(adder.longValue());",
          "",
          "[Removed Lines]",
          "178:                 .map(PartData::getBytes)",
          "",
          "[Added Lines]",
          "186:                 .map((pd) -> {",
          "187:                     try {",
          "188:                         return pd.getBytes();",
          "189:                     } catch (IOException e) {",
          "190:                         throw Exceptions.propagate(e);",
          "191:                     }",
          "192:                 })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cd9af107a78affdeb3aa99d9814b15097446291",
      "candidate_info": {
        "commit_hash": "7cd9af107a78affdeb3aa99d9814b15097446291",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/7cd9af107a78affdeb3aa99d9814b15097446291",
        "files": [
          "http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java",
          "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
          "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java",
          "http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy"
        ],
        "message": "Use an Argument instead of Class for the error type. Fixes #2203 (#2208)",
        "before_after_code_files": [
          "http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java||http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java",
          "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
          "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java",
          "http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy||http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java"
          ],
          "candidate": [
            "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java"
          ]
        }
      },
      "candidate_diff": {
        "http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java||http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java": [
          "File: http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java -> http-client/src/main/java/io/micronaut/http/client/DefaultHttpClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1851:                                             response,",
          "1852:                                             new HttpClientErrorDecoder() {",
          "1853:                                                 @Override",
          "1856:                                                 }",
          "1857:                                             }",
          "1858:                                     );",
          "",
          "[Removed Lines]",
          "1854:                                                 public Class<?> getErrorType(MediaType mediaType) {",
          "1855:                                                     return errorType.getType();",
          "",
          "[Added Lines]",
          "1854:                                                 public Argument<?> getErrorType(MediaType mediaType) {",
          "1855:                                                     return errorType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1912:                                     response,",
          "1913:                                     new HttpClientErrorDecoder() {",
          "1914:                                         @Override",
          "1917:                                         }",
          "1918:                                     }",
          "1919:                             );",
          "",
          "[Removed Lines]",
          "1915:                                         public Class<?> getErrorType(MediaType mediaType) {",
          "1916:                                             return errorType.getType();",
          "",
          "[Added Lines]",
          "1915:                                         public Argument<?> getErrorType(MediaType mediaType) {",
          "1916:                                             return errorType;",
          "",
          "---------------"
        ],
        "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java": [
          "File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java -> http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.http.client.exceptions;",
          "18: import io.micronaut.core.naming.Described;",
          "19: import io.micronaut.http.MediaType;",
          "20: import io.micronaut.http.hateoas.JsonError;",
          "21: import io.micronaut.http.hateoas.VndError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import io.micronaut.core.annotation.Internal;",
          "20: import io.micronaut.core.type.Argument;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: public interface HttpClientErrorDecoder {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: @Internal",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:         if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {",
          "68:         } else if (mediaType.equals(MediaType.APPLICATION_VND_ERROR_TYPE)) {",
          "70:         } else {",
          "72:         }",
          "73:     }",
          "74: }",
          "",
          "[Removed Lines]",
          "65:     default Class<?> getErrorType(MediaType mediaType) {",
          "67:             return JsonError.class;",
          "69:             return VndError.class;",
          "71:             return String.class;",
          "",
          "[Added Lines]",
          "68:     default Argument<?> getErrorType(MediaType mediaType) {",
          "70:             return Argument.of(JsonError.class);",
          "72:             return Argument.of(VndError.class);",
          "74:             return Argument.of(String.class);",
          "",
          "---------------"
        ],
        "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java": [
          "File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java -> http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientResponseException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.http.client.exceptions;",
          "18: import io.micronaut.http.HttpResponse;",
          "19: import io.micronaut.http.HttpStatus;",
          "20: import io.micronaut.http.MediaType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import io.micronaut.core.type.Argument;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     @Override",
          "66:     public String getMessage() {",
          "68:         if (errorType.isPresent()) {",
          "69:             return getResponse().getBody(errorType.get()).flatMap(errorDecoder::getMessage).orElse(super.getMessage());",
          "70:         } else {",
          "",
          "[Removed Lines]",
          "67:         Optional<Class<?>> errorType = Optional.ofNullable(getErrorType(response));",
          "",
          "[Added Lines]",
          "68:         Optional<Argument<?>> errorType = Optional.ofNullable(getErrorType(response));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     @SuppressWarnings(\"MagicNumber\")",
          "90:     private void initResponse(HttpResponse<?> response) {",
          "92:         if (errorType != null) {",
          "93:             response.getBody(errorType);",
          "94:         } else {",
          "",
          "[Removed Lines]",
          "91:         Class<?> errorType = getErrorType(response);",
          "",
          "[Added Lines]",
          "92:         Argument<?> errorType = getErrorType(response);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:         }",
          "97:     }",
          "100:         Optional<MediaType> contentType = response.getContentType();",
          "102:         if (contentType.isPresent() && response.getStatus().getCode() > 399) {",
          "103:             MediaType mediaType = contentType.get();",
          "104:             if (errorDecoder != null) {",
          "",
          "[Removed Lines]",
          "99:     private Class<?> getErrorType(HttpResponse<?> response) {",
          "101:         Class<?> errorType = null;",
          "",
          "[Added Lines]",
          "100:     private Argument<?> getErrorType(HttpResponse<?> response) {",
          "102:         Argument<?> errorType = null;",
          "",
          "---------------"
        ],
        "http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy||http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy": [
          "File: http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy -> http-client/src/test/groovy/io/micronaut/http/client/CustomErrorTypeSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.http.client",
          "18: import io.micronaut.context.ApplicationContext",
          "19: import io.micronaut.http.HttpResponse",
          "20: import io.micronaut.http.annotation.Controller",
          "21: import io.micronaut.http.annotation.Get",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import io.micronaut.core.type.Argument",
          "20: import io.micronaut.http.HttpRequest",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         then:",
          "42:         def e = thrown(HttpClientResponseException)",
          "43:         e.response.getBody(MyError).get().reason == 'bad things'",
          "45:     }",
          "47:     @Controller('/test/custom-errors')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     }",
          "47:     void \"test custom error type with generic\"() {",
          "48:         HttpClient client = embeddedServer.getApplicationContext().createBean(HttpClient, embeddedServer.getURL())",
          "49:         Argument<OtherError> errorType = Argument.of(OtherError, String)",
          "51:         when:",
          "52:         client.toBlocking().exchange(HttpRequest.GET(\"/test/custom-errors/other\"), Argument.of(String), errorType)",
          "54:         then:",
          "55:         def ex = thrown(HttpClientResponseException)",
          "56:         ex.response.getBody(errorType).get().reason == 'bad things'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:         HttpResponse index() {",
          "52:             HttpResponse.serverError().body(new MyError(reason: \"bad things\"))",
          "53:         }",
          "54:     }",
          "56:     @Client(value = '/test/custom-errors', errorType = MyError)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:         @Get(\"/other\")",
          "68:         HttpResponse index2() {",
          "69:             HttpResponse.serverError().body(new OtherError(reason: \"bad things\"))",
          "70:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     static class MyError {",
          "63:         String reason",
          "64:     }",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     static class OtherError<T> {",
          "84:         T reason",
          "85:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4af46bf8c2d9db1f800f6e424b003070a0232b8",
      "candidate_info": {
        "commit_hash": "b4af46bf8c2d9db1f800f6e424b003070a0232b8",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b4af46bf8c2d9db1f800f6e424b003070a0232b8",
        "files": [
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
        ],
        "message": "Modify the cors origin converter so it is used",
        "before_after_code_files": [
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
          ],
          "candidate": [
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
          ]
        }
      },
      "candidate_diff": {
        "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
          "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: @Singleton",
          "48:     private static final ArgumentConversionContext<List<HttpMethod>> CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD = ConversionContext.of(Argument.listOf(HttpMethod.class));",
          "50:     @Override",
          "52:         CorsOriginConfiguration configuration = new CorsOriginConfiguration();",
          "81:         return Optional.of(configuration);",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "39: public class CorsOriginConverter implements TypeConverter<Object, CorsOriginConfiguration> {",
          "41:     private static final String ALLOWED_ORIGINS = \"allowedOrigins\";",
          "42:     private static final String ALLOWED_METHODS = \"allowedMethods\";",
          "43:     private static final String ALLOWED_HEADERS = \"allowedHeaders\";",
          "44:     private static final String EXPOSED_HEADERS = \"exposedHeaders\";",
          "45:     private static final String ALLOW_CREDENTIALS = \"allowCredentials\";",
          "46:     private static final String MAX_AGE = \"maxAge\";",
          "51:     public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
          "53:         if (object instanceof Map) {",
          "54:             Map mapConfig = (Map) object;",
          "55:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
          "57:             convertibleValues",
          "58:                 .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
          "59:                 .ifPresent(configuration::setAllowedOrigins);",
          "61:             convertibleValues",
          "62:                 .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
          "63:                 .ifPresent(configuration::setAllowedMethods);",
          "65:             convertibleValues",
          "66:                 .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "67:                 .ifPresent(configuration::setAllowedHeaders);",
          "69:             convertibleValues",
          "70:                 .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "71:                 .ifPresent(configuration::setExposedHeaders);",
          "73:             convertibleValues",
          "74:                 .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
          "75:                 .ifPresent(configuration::setAllowCredentials);",
          "77:             convertibleValues",
          "78:                 .get(MAX_AGE, ConversionContext.LONG)",
          "79:                 .ifPresent(configuration::setMaxAge);",
          "80:         }",
          "",
          "[Added Lines]",
          "39: public class CorsOriginConverter implements TypeConverter<Map<String, Object>, CorsOriginConfiguration> {",
          "41:     private static final String ALLOWED_ORIGINS = \"allowed-origins\";",
          "42:     private static final String ALLOWED_METHODS = \"allowed-methods\";",
          "43:     private static final String ALLOWED_HEADERS = \"allowed-headers\";",
          "44:     private static final String EXPOSED_HEADERS = \"exposed-headers\";",
          "45:     private static final String ALLOW_CREDENTIALS = \"allow-credentials\";",
          "46:     private static final String MAX_AGE = \"max-age\";",
          "51:     public Optional<CorsOriginConfiguration> convert(Map<String, Object> object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
          "53:         ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(object);",
          "55:         convertibleValues",
          "56:             .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
          "57:             .ifPresent(configuration::setAllowedOrigins);",
          "59:         convertibleValues",
          "60:             .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
          "61:             .ifPresent(configuration::setAllowedMethods);",
          "63:         convertibleValues",
          "64:             .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "65:             .ifPresent(configuration::setAllowedHeaders);",
          "67:         convertibleValues",
          "68:             .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "69:             .ifPresent(configuration::setExposedHeaders);",
          "71:         convertibleValues",
          "72:             .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
          "73:             .ifPresent(configuration::setAllowCredentials);",
          "75:         convertibleValues",
          "76:             .get(MAX_AGE, ConversionContext.LONG)",
          "77:             .ifPresent(configuration::setMaxAge);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4f1431a2746628593910853cdf6675bb47c9978",
      "candidate_info": {
        "commit_hash": "e4f1431a2746628593910853cdf6675bb47c9978",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/e4f1431a2746628593910853cdf6675bb47c9978",
        "files": [
          "runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java",
          "runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java"
        ],
        "message": "Improve file watch to only if matching paths exist",
        "before_after_code_files": [
          "runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java||runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java",
          "runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java||runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java"
          ],
          "candidate": [
            "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java"
          ]
        }
      },
      "candidate_diff": {
        "runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java||runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java": [
          "File: runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java -> runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchServiceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import io.methvin.watchservice.MacOSXListeningWatchService;",
          "20: import io.micronaut.context.annotation.*;",
          "21: import io.micronaut.core.util.StringUtils;",
          "22: import io.micronaut.scheduling.io.watch.FileWatchConfiguration;",
          "23: import io.micronaut.scheduling.io.watch.WatchServiceFactory;",
          "24: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import io.micronaut.scheduling.io.watch.FileWatchCondition;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: @Requires(property = FileWatchConfiguration.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)",
          "39: @Requires(classes = {MacOSXListeningWatchService.class, Library.class})",
          "40: @Factory",
          "41: public class MacOsWatchServiceFactory {",
          "",
          "[Removed Lines]",
          "38: @Requires(property = FileWatchConfiguration.PATHS)",
          "",
          "[Added Lines]",
          "39: @Requires(condition = FileWatchCondition.class)",
          "",
          "---------------"
        ],
        "runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java||runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java": [
          "File: runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java -> runtime-osx/src/main/java/io/micronaut/scheduling/io/watch/osx/MacOsWatchThread.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import io.micronaut.context.event.ApplicationEventPublisher;",
          "25: import io.micronaut.core.util.StringUtils;",
          "26: import io.micronaut.scheduling.io.watch.DefaultWatchThread;",
          "27: import io.micronaut.scheduling.io.watch.FileWatchConfiguration;",
          "29: import javax.annotation.Nonnull;",
          "30: import java.io.IOException;",
          "31: import java.nio.file.Path;",
          "32: import java.nio.file.StandardWatchEventKinds;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import io.micronaut.scheduling.io.watch.FileWatchCondition;",
          "31: import javax.inject.Singleton;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: @Replaces(DefaultWatchThread.class)",
          "43: @Parallel",
          "44: @Requires(property = FileWatchConfiguration.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)",
          "46: @Requires(classes = {MacOSXListeningWatchService.class, Library.class})",
          "47: public class MacOsWatchThread extends DefaultWatchThread {",
          "",
          "[Removed Lines]",
          "45: @Requires(property = FileWatchConfiguration.PATHS)",
          "",
          "[Added Lines]",
          "47: @Requires(condition = FileWatchCondition.class)",
          "49: @Singleton",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java": [
          "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/DefaultWatchThread.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import javax.annotation.Nonnull;",
          "29: import javax.annotation.PostConstruct;",
          "30: import javax.annotation.PreDestroy;",
          "31: import java.io.File;",
          "32: import java.io.IOException;",
          "33: import java.nio.file.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.inject.Singleton;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: @Requires(property = FileWatchConfiguration.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)",
          "50: @Requires(notEnv = {Environment.FUNCTION, Environment.ANDROID})",
          "51: @Requires(beans = WatchService.class)",
          "52: @Parallel",
          "53: public class DefaultWatchThread implements LifeCycle<DefaultWatchThread> {",
          "55:     private static final Logger LOG = LoggerFactory.getLogger(DefaultWatchThread.class);",
          "",
          "[Removed Lines]",
          "49: @Requires(property = FileWatchConfiguration.PATHS)",
          "",
          "[Added Lines]",
          "50: @Requires(condition = FileWatchCondition.class)",
          "54: @Singleton",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java": [
          "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: package io.micronaut.scheduling.io.watch;",
          "18: import io.micronaut.context.ApplicationContext;",
          "19: import io.micronaut.context.BeanContext;",
          "20: import io.micronaut.context.condition.Condition;",
          "21: import io.micronaut.context.condition.ConditionContext;",
          "22: import io.micronaut.core.annotation.Introspected;",
          "23: import io.micronaut.core.type.Argument;",
          "24: import io.micronaut.core.util.CollectionUtils;",
          "26: import java.io.File;",
          "27: import java.util.List;",
          "35: @Introspected",
          "36: public class FileWatchCondition implements Condition {",
          "37:     @Override",
          "38:     public boolean matches(ConditionContext context) {",
          "39:         BeanContext beanContext = context.getBeanContext();",
          "40:         if (beanContext instanceof ApplicationContext) {",
          "41:             List<String> paths = ((ApplicationContext) beanContext)",
          "42:                     .getEnvironment()",
          "43:                     .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))",
          "44:                     .orElse(null);",
          "46:             if (CollectionUtils.isNotEmpty(paths)) {",
          "49:                 boolean matchedPaths = paths.stream().anyMatch(p -> new File(p).exists());",
          "50:                 if (!matchedPaths) {",
          "51:                     context.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + paths + \")\");",
          "52:                 }",
          "53:                 return matchedPaths;",
          "54:             }",
          "55:         }",
          "57:         context.fail(\"File watch disabled because no watch paths specified\");",
          "58:         return false;",
          "59:     }",
          "60: }",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java": [
          "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/WatchServiceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: @Requires(property = FileWatchConfiguration.ENABLED, value = StringUtils.TRUE, defaultValue = StringUtils.TRUE)",
          "35: @Requires(missingClasses = \"io.methvin.watchservice.MacOSXListeningWatchService\")",
          "36: @Factory",
          "37: public class WatchServiceFactory {",
          "",
          "[Removed Lines]",
          "34: @Requires(property = FileWatchConfiguration.PATHS)",
          "",
          "[Added Lines]",
          "34: @Requires(condition = FileWatchCondition.class)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90ece6343d9bb9383480131f125151b0d3f58581",
      "candidate_info": {
        "commit_hash": "90ece6343d9bb9383480131f125151b0d3f58581",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/90ece6343d9bb9383480131f125151b0d3f58581",
        "files": [
          "http/src/main/java/io/micronaut/http/HttpHeaders.java",
          "http/src/main/java/io/micronaut/http/HttpRequest.java",
          "http/src/main/java/io/micronaut/http/MediaType.java",
          "http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy"
        ],
        "message": "Add some media type sorting matching APIs\n\nSome of which are from https://github.com/micronaut-projects/micronaut-core/pull/1743",
        "before_after_code_files": [
          "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
          "http/src/main/java/io/micronaut/http/HttpRequest.java||http/src/main/java/io/micronaut/http/HttpRequest.java",
          "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java",
          "http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy||http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
            "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java"
          ],
          "candidate": [
            "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
            "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java"
          ]
        }
      },
      "candidate_diff": {
        "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java": [
          "File: http/src/main/java/io/micronaut/http/HttpHeaders.java -> http/src/main/java/io/micronaut/http/HttpHeaders.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.time.ZonedDateTime;",
          "25: import java.time.format.DateTimeFormatter;",
          "26: import java.time.format.DateTimeParseException;",
          "31: import java.util.stream.Collectors;",
          "32: import java.util.stream.Stream;",
          "",
          "[Removed Lines]",
          "27: import java.util.Arrays;",
          "28: import java.util.List;",
          "29: import java.util.Optional;",
          "30: import java.util.OptionalLong;",
          "",
          "[Added Lines]",
          "27: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:     default OptionalLong contentLength() {",
          "504:     }",
          "",
          "[Removed Lines]",
          "502:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG);",
          "503:         return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);",
          "",
          "[Added Lines]",
          "499:         final Long aLong = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG).orElse(null);",
          "500:         if (aLong != null) {",
          "501:             return OptionalLong.of(aLong);",
          "502:         } else {",
          "503:             return OptionalLong.empty();",
          "504:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:     default List<MediaType> accept() {",
          "518:     }",
          "523:     default boolean isKeepAlive() {",
          "525:     }",
          "",
          "[Removed Lines]",
          "512:         return getAll(HttpHeaders.ACCEPT)",
          "513:             .stream()",
          "514:             .flatMap(x -> Arrays.stream(x.split(\",\")))",
          "515:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.CONVERSION_CONTEXT).map(Stream::of).orElse(Stream.empty()))",
          "516:             .distinct()",
          "517:             .collect(Collectors.toList());",
          "524:         return getFirst(CONNECTION, ConversionContext.STRING).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
          "",
          "[Added Lines]",
          "513:         final List<String> values = getAll(HttpHeaders.ACCEPT);",
          "514:         if (!values.isEmpty()) {",
          "515:             List<MediaType> mediaTypes = new ArrayList<>(10);",
          "516:             for (String value : values) {",
          "517:                 final String[] tokens = value.split(\",\");",
          "518:                 for (String token : tokens) {",
          "519:                     try {",
          "520:                         mediaTypes.add(new MediaType(token));",
          "521:                     } catch (IllegalArgumentException e) {",
          "523:                     }",
          "524:                 }",
          "525:             }",
          "526:             return mediaTypes;",
          "527:         } else {",
          "528:             return Collections.emptyList();",
          "529:         }",
          "536:         return getFirst(CONNECTION, ConversionContext.STRING)",
          "537:                  .map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/HttpRequest.java||http/src/main/java/io/micronaut/http/HttpRequest.java": [
          "File: http/src/main/java/io/micronaut/http/HttpRequest.java -> http/src/main/java/io/micronaut/http/HttpRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.net.URI;",
          "24: import java.security.Principal;",
          "25: import java.security.cert.Certificate;",
          "",
          "[Removed Lines]",
          "26: import java.util.Locale;",
          "27: import java.util.Objects;",
          "28: import java.util.Optional;",
          "",
          "[Added Lines]",
          "26: import java.util.*;",
          "27: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     @NonNull URI getUri();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     default Collection<MediaType> accept() {",
          "65:         final List<String> values = getHeaders().getAll(HttpHeaders.ACCEPT);",
          "66:         if (!values.isEmpty()) {",
          "67:             Set<MediaType> mediaTypes = new TreeSet<>();",
          "68:             for (String value : values) {",
          "69:                 final String[] tokens = value.split(\",\");",
          "70:                 for (String token : tokens) {",
          "71:                     try {",
          "72:                         mediaTypes.add(new MediaType(token));",
          "73:                     } catch (IllegalArgumentException e) {",
          "75:                     }",
          "76:                 }",
          "77:             }",
          "78:             return Collections.unmodifiableSet(mediaTypes);",
          "79:         } else {",
          "80:             return Collections.emptySet();",
          "81:         }",
          "82:     }",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java": [
          "File: http/src/main/java/io/micronaut/http/MediaType.java -> http/src/main/java/io/micronaut/http/MediaType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import io.micronaut.core.util.StringUtils;",
          "26: import io.micronaut.core.value.OptionalValues;",
          "27: import io.micronaut.http.annotation.Produces;",
          "28: import org.slf4j.Logger;",
          "29: import org.slf4j.LoggerFactory;",
          "31: import java.io.BufferedReader;",
          "32: import java.io.IOException;",
          "33: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.jetbrains.annotations.NotNull;",
          "32: import javax.annotation.Nonnull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: @TypeHint(value = MediaType[].class)",
          "",
          "[Removed Lines]",
          "58: public class MediaType implements CharSequence {",
          "",
          "[Added Lines]",
          "60: public class MediaType implements CharSequence, Comparable<MediaType> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403:         if (name == null) {",
          "404:             throw new IllegalArgumentException(\"Argument [name] cannot be null\");",
          "405:         }",
          "406:         String withoutArgs;",
          "407:         this.parameters = new LinkedHashMap<>();",
          "408:         if (name.contains(SEMICOLON)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:         name = name.trim();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:         this.strRepr = toString0();",
          "448:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:     public boolean matches(@Nonnull MediaType expectedContentType) {",
          "461:         if (expectedContentType == null) {",
          "462:             return false;",
          "463:         }",
          "464:         String expectedType = expectedContentType.getType();",
          "465:         String expectedSubtype = expectedContentType.getSubtype();",
          "466:         boolean typeMatch = type.equals(\"*\") || type.equalsIgnoreCase(expectedType);",
          "467:         boolean subtypeMatch = subtype.equals(\"*\") || subtype.equalsIgnoreCase(expectedSubtype);",
          "468:         return typeMatch && subtypeMatch;",
          "469:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "718:         return Collections.emptyMap();",
          "719:     }",
          "720: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     @Override",
          "743:     public int compareTo(@NotNull MediaType other) {",
          "745:         if (type.equals(\"*\")) {",
          "746:             return 1;",
          "747:         } else if (other.type.equals(\"*\")) {",
          "748:             return -1;",
          "749:         }",
          "750:         if (other.subtype.equals(\"*\") && !subtype.equals(\"*\")) {",
          "751:             return -1;",
          "752:         } else if (subtype.equals(\"*\") && !other.subtype.equals(\"*\")) {",
          "753:             return 1;",
          "754:         }",
          "755:         return other.getQualityAsNumber().compareTo(getQualityAsNumber());",
          "756:     }",
          "",
          "---------------"
        ],
        "http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy||http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy": [
          "File: http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy -> http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         mediaType.toString() == fullName",
          "37:         mediaType.name == expectedName",
          "38:         mediaType.extension == expectedExt",
          "40:         mediaType.qualityAsNumber == quality",
          "41:         mediaType.subtype == subtype",
          "42:         mediaType.type == type",
          "",
          "[Removed Lines]",
          "39:         mediaType.parameters == OptionalValues.of(String,expectedParams)",
          "",
          "[Added Lines]",
          "39:         mediaType.parameters == OptionalValues.of(String, expectedParams)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         MediaType.isTextBased(contentType) == expected",
          "77:         where:",
          "94:     }",
          "96:     @Issue(\"https://github.com/micronaut-projects/micronaut-core/issues/2746\")",
          "",
          "[Removed Lines]",
          "78:         contentType                  | expected",
          "79:         \"application/hal+xml;q=1.1\"  | true",
          "80:         \"application/hal+xml;q=1.1\"  | true",
          "81:         \"application/hal+json\"       | true",
          "82:         \"application/hal+xml\"        | true",
          "83:         \"application/json\"           | true",
          "84:         \"application/xml\"            | true",
          "85:         \"text/html;charset=utf-8\"    | true",
          "86:         \"text/foo\"                   | true",
          "87:         \"application/hal+text\"       | true",
          "88:         \"application/javascript\"     | true",
          "89:         \"image/png\"                  | false",
          "90:         \"image/jpg\"                  | false",
          "91:         \"multipart/form-data\"        | false",
          "92:         \"application/x-json-stream\"  | false",
          "93:         \"invalid\"                    | false",
          "",
          "[Added Lines]",
          "78:         contentType                 | expected",
          "79:         \"application/hal+xml;q=1.1\" | true",
          "80:         \"application/hal+xml;q=1.1\" | true",
          "81:         \"application/hal+json\"      | true",
          "82:         \"application/hal+xml\"       | true",
          "83:         \"application/json\"          | true",
          "84:         \"application/xml\"           | true",
          "85:         \"text/html;charset=utf-8\"   | true",
          "86:         \"text/foo\"                  | true",
          "87:         \"application/hal+text\"      | true",
          "88:         \"application/javascript\"    | true",
          "89:         \"image/png\"                 | false",
          "90:         \"image/jpg\"                 | false",
          "91:         \"multipart/form-data\"       | false",
          "92:         \"application/x-json-stream\" | false",
          "93:         \"invalid\"                   | false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         noExceptionThrown()",
          "103:         mt.getParameters().get(\"charset\").get() == \"UTF-8\"",
          "104:     }",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     @Unroll",
          "107:     void \"test order types: #commaSeparatedList\"() {",
          "108:         given:",
          "109:         List<MediaType> orderedList = MediaType.of(commaSeparatedList.split(',')).toList().sort()",
          "111:         expect:",
          "112:         orderedList.size == expectedList.size",
          "113:         for (int i = 0; i < orderedList.size(); i++) {",
          "114:             assert (orderedList.get(i).equals(expectedList.get(i)) == true)",
          "115:         }",
          "117:         where:",
          "118:         commaSeparatedList                                | expectedList",
          "119:         \"audio/basic;q=.5, application/json\"              | [new MediaType(\"application/json\"), new MediaType(\"audio/basic;q=.5\")]",
          "120:         \"text/html\"                                       | [new MediaType(\"text/html\")]",
          "121:         \"*/*, text/*, text/html\"                          | [new MediaType(\"text/html\"), new MediaType(\"text/*\"), new MediaType(\"*/*\")]",
          "122:         \"text/html;level=1, text/html;level=2;q=.3\"       | [new MediaType(\"text/html;level=1\"), new MediaType(\"text/html;level=2;q=.3\")]",
          "123:         \"text/*;blah=1, text/html;q=.3, audio/basic;q=.4\" | [new MediaType(\"audio/basic;q=.4\"), new MediaType(\"text/html;q=.3\"), new MediaType(\"text/*;blah=1\")]",
          "124:         \"text/plain, text/html, application/json;q=1\"     | [new MediaType(\"text/plain\"), new MediaType(\"text/html\"), new MediaType(\"application/json;q=1\")]",
          "125:     }",
          "127:     @Unroll",
          "128:     void \"test type match #desiredType\"() {",
          "129:         given:",
          "130:         boolean match = new MediaType(desiredType).matches(new MediaType(expectedType))",
          "132:         expect:",
          "133:         match == expectedMatch",
          "135:         where:",
          "136:         desiredType             | expectedType          | expectedMatch",
          "137:         \"text/html\"             | \"text/html\"           | true",
          "138:         \"text/*\"                | \"text/html\"           | true",
          "139:         \"*/*\"                   | \"application/xml\"     | true",
          "140:         \"text/plain\"            | \"text/hml\"            | false",
          "141:         \"text/*\"                | \"application/json\"    | false",
          "142:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}