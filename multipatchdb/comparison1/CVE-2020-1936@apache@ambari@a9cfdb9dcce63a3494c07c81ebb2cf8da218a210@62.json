{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6eaf34b99e3c4e097e0cd237630066e273cf5499",
      "candidate_info": {
        "commit_hash": "6eaf34b99e3c4e097e0cd237630066e273cf5499",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6eaf34b99e3c4e097e0cd237630066e273cf5499",
        "files": [
          "ambari-infra/ambari-infra-manager/docker/docker-compose.yml",
          "ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh",
          "ambari-infra/ambari-infra-solr-client/README.md",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh",
          "ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh",
          "ambari-infra/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/audit_logs/conf/solrconfig.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/hadoop_logs/conf/solrconfig.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/history/conf/solrconfig.xml",
          "ambari-logsearch/docker/Dockerfile",
          "ambari-logsearch/docker/docker-compose.yml",
          "ambari-logsearch/docker/logsearch-docker.sh",
          "ambari-logsearch/docker/solr.yml",
          "ambari-logsearch/docker/sso.yml",
          "ambari-logsearch/pom.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py",
          "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2"
        ],
        "message": "AMBARI-25169 - Upgrade Apache Solr version to 7.7.0 or later in Ambari (#2834)",
        "before_after_code_files": [
          "ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh||ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh||ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh",
          "ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh||ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh",
          "ambari-logsearch/docker/logsearch-docker.sh||ambari-logsearch/docker/logsearch-docker.sh",
          "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py||ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py",
          "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2||ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh||ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh": [
          "File: ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh -> ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: ZOOKEEPER_VERSION=3.4.10",
          "73: ZOOKEEPER_CONNECTION_STRING=zookeeper:2181",
          "77: HADOOP_VERSION=3.0.0",
          "78: EOF",
          "",
          "[Removed Lines]",
          "75: SOLR_VERSION=7.5.0",
          "",
          "[Added Lines]",
          "75: SOLR_VERSION=7.7.0",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py -> ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: limitations under the License.",
          "19: '''",
          "21: import copy",
          "22: import glob",
          "27: import json",
          "29: import optparse",
          "30: import socket",
          "31: import time",
          "32: import traceback",
          "36: from datetime import datetime, timedelta",
          "37: from random import randrange, randint",
          "38: from subprocess import Popen, PIPE",
          "40: HTTP_PROTOCOL = 'http'",
          "41: HTTPS_PROTOCOL = 'https'",
          "",
          "[Removed Lines]",
          "23: import logging",
          "24: import os",
          "25: import sys",
          "26: import urllib2, ssl",
          "28: import base64",
          "33: import ConfigParser",
          "34: import solrDataManager as solr_data_manager",
          "",
          "[Added Lines]",
          "21: import ConfigParser",
          "22: import base64",
          "26: import logging",
          "28: import os",
          "30: import ssl",
          "31: import sys",
          "34: import urllib2",
          "39: import solrDataManager as solr_data_manager",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1913:   parser.add_option(\"--atlas-index-location\", dest=\"atlas_index_location\", type=\"string\", help=\"location of the index backups (for atlas). required only if no backup path in the ini file\")",
          "1914:   parser.add_option(\"--ranger-index-location\", dest=\"ranger_index_location\", type=\"string\", help=\"location of the index backups (for ranger). required only if no backup path in the ini file\")",
          "1917:   parser.add_option(\"--solr-async-request-tries\", dest=\"solr_async_request_tries\", type=\"int\", default=400,  help=\"number of max tries for async Solr requests (e.g.: delete operation)\")",
          "1918:   parser.add_option(\"--request-tries\", dest=\"request_tries\", type=\"int\", help=\"number of tries for BACKUP/RESTORE status api calls in the request\")",
          "1919:   parser.add_option(\"--request-time-interval\", dest=\"request_time_interval\", type=\"int\", help=\"time interval between BACKUP/RESTORE status api calls in the request\")",
          "",
          "[Removed Lines]",
          "1916:   parser.add_option(\"--version\", dest=\"index_version\", type=\"string\", default=\"6.6.2\", help=\"lucene index version for migration (6.6.2 or 7.5.0)\")",
          "",
          "[Added Lines]",
          "1917:   parser.add_option(\"--version\", dest=\"index_version\", type=\"string\", default=\"6.6.2\", help=\"lucene index version for migration (6.6.2 or 7.7.0)\")",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh||ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh -> ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:      -b, --backup-enabled                    Use indexer tool with backup snapshots. (core filter won't be used)",
          "44:      -g, --debug                             Enable debug mode, IndexUpgrader output will be verbose.",
          "45:      -f, --force                             Force to start index upgrade, even is the version is at least 6.",
          "47: EOF",
          "48: }",
          "",
          "[Removed Lines]",
          "46:      -v, --version                           Lucene version to upgrade (default: 6.6.2, available: 6.6.2, 7.5.0)",
          "",
          "[Added Lines]",
          "46:      -v, --version                           Lucene version to upgrade (default: 6.6.2, available: 6.6.2, 7.7.0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   local INDEX_DIR=${1:?\"usage: <index_base_dir> e.g.: /opt/ambari_infra_solr/data\"}",
          "52:   local FORCE_UPDATE=${2:?\"usage <force_update_flag> e.g.: true\"}",
          "53:   local SOLR_CORE_FILTERS=${3:?\"usage: <comma separated core filters> e.g.: hadoop_logs,audit_logs,history\"}",
          "55:   local BACKUP_MODE=${5:?\"usage <backup_mode_enabled> e.g.: true\"}",
          "56:   local DEBUG_MODE=${6:?\"usage <debug_mode> e.g.: true\"}",
          "57:   SOLR_CORE_FILTER_ARR=$(echo $SOLR_CORE_FILTERS | sed \"s/,/ /g\")",
          "",
          "[Removed Lines]",
          "54:   local LUCENE_VERSION=${4:?\"usage <lucene_index_version> e.g.: 7.5.0\"}",
          "",
          "[Added Lines]",
          "54:   local LUCENE_VERSION=${4:?\"usage <lucene_index_version> e.g.: 7.7.0\"}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205: function upgrade_index_tool() {",
          "206:   # see: https://cwiki.apache.org/confluence/display/solr/IndexUpgrader+Tool",
          "208:   PATH=$JAVA_HOME/bin:$PATH $JVM -classpath \"$DIR/migrate/lucene-core-$INDEX_VERSION.jar:$DIR/migrate/lucene-backward-codecs-$INDEX_VERSION.jar\" org.apache.lucene.index.IndexUpgrader ${@}",
          "209: }",
          "211: function check_index_tool() {",
          "213:   PATH=$JAVA_HOME/bin:$PATH $JVM -classpath \"$DIR/migrate/lucene-core-$INDEX_VERSION.jar:$DIR/migrate/lucene-backward-codecs-$INDEX_VERSION.jar\" org.apache.lucene.index.CheckIndex ${@}",
          "214: }",
          "",
          "[Removed Lines]",
          "207:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.5.0)\"}",
          "212:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.5.0)\"}",
          "",
          "[Added Lines]",
          "207:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.7.0)\"}",
          "212:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.7.0)\"}",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh||ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh": [
          "File: ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh -> ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: ZOOKEEPER_VERSION=3.4.10",
          "73: ZOOKEEPER_CONNECTION_STRING=zookeeper:2181",
          "76: EOF",
          "77: }",
          "",
          "[Removed Lines]",
          "75: SOLR_VERSION=7.5.0",
          "",
          "[Added Lines]",
          "75: SOLR_VERSION=7.7.0",
          "",
          "---------------"
        ],
        "ambari-logsearch/docker/logsearch-docker.sh||ambari-logsearch/docker/logsearch-docker.sh": [
          "File: ambari-logsearch/docker/logsearch-docker.sh -> ambari-logsearch/docker/logsearch-docker.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: ZOOKEEPER_VERSION=3.4.10",
          "110: ZOOKEEPER_CONNECTION_STRING=zookeeper:2181",
          "113: EOF",
          "114:     echo \".env file has been created. Check it out before starting Log Search. ($sdir/.env)\"",
          "115:     exit",
          "",
          "[Removed Lines]",
          "112: SOLR_VERSION=7.5.0",
          "",
          "[Added Lines]",
          "112: SOLR_VERSION=7.7.0",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py||ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py -> ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/package/scripts/command_commons.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import fnmatch",
          "20: import json",
          "21: import os",
          "23: import socket",
          "24: import time",
          "25: import traceback",
          "28: from resource_management.core.logger import Logger",
          "29: from resource_management.core.resources.system import Execute, File",
          "30: from resource_management.libraries.functions.default import default",
          "31: from resource_management.libraries.functions.format import format",
          "32: from resource_management.libraries.resources.hdfs_resource import HdfsResource",
          "34: index_helper_script = '/usr/lib/ambari-infra-solr-client/solrIndexHelper.sh'",
          "36: # folder location which contains the snapshot/core folder",
          "37: index_location = default(\"/commandParams/solr_index_location\", None)",
          "40: index_version = default(\"/commandParams/solr_index_version\", '6.6.2')",
          "42: # if this flag is false, skip upgrade if the version is proper, you can force to re-run the tool with setting the flag to true",
          "",
          "[Removed Lines]",
          "22: import params",
          "27: from resource_management.core.shell import call",
          "39: # index version (available index versions: 6.6.2 and 7.3.1, second one is used by default)",
          "",
          "[Added Lines]",
          "27: from resource_management.core.shell import call",
          "32: import params",
          "39: # index version (available index versions: 6.6.2 and 7.7.0, first one is used by default)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2||ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2": [
          "File: ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2 -> ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   that you fully re-index after changing this setting as it can",
          "36:   affect both how text is indexed and queried.",
          "37:   -->",
          "40:   <!-- <lib/> directives can be used to instruct Solr to load any Jars",
          "41:   identified and use them to resolve any \"plugins\" specified in",
          "",
          "[Removed Lines]",
          "38:   <luceneMatchVersion>7.5.0</luceneMatchVersion>",
          "",
          "[Added Lines]",
          "38:   <luceneMatchVersion>7.7.0</luceneMatchVersion>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7b740c43e46eb0354418f721661d8436d490db1",
      "candidate_info": {
        "commit_hash": "f7b740c43e46eb0354418f721661d8436d490db1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f7b740c43e46eb0354418f721661d8436d490db1",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py"
        ],
        "message": "AMBARI-25296 alert_ldap_password for Hive service check does not allow single-quotes (ihorlukianov) (#3002)\n\nAMBARI-25296 alert_ldap_password for Hive service check does not allow single-quotes (ihorlukianov)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py||ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py||ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py||ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py -> ambari-common/src/main/python/resource_management/libraries/functions/hive_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from resource_management.core.resources import Execute",
          "23: from resource_management.libraries.functions import format",
          "24: from resource_management.core.signal_utils import TerminateStrategy",
          "27: def check_thrift_port_sasl(address, port, hive_auth=\"NOSASL\", key=None, kinitcmd=None, smokeuser='ambari-qa',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from resource_management.core.shell import quote_bash_args",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   if hive_auth == \"NOSASL\":",
          "52:     beeline_url.append('auth=noSasl')",
          "55:   # append username and password for LDAP",
          "56:   if hive_auth == \"LDAP\":",
          "59:   # append url according to ssl configuration",
          "60:   if ssl and ssl_keystore is not None and ssl_password is not None:",
          "",
          "[Removed Lines]",
          "54:   credential_str = \"\"",
          "57:     credential_str = \"-n '{ldap_username}' -p '{ldap_password!p}'\"",
          "",
          "[Added Lines]",
          "55:   credential_str = \"-n {hive_user}\"",
          "59:     # password might contain special characters that need to be escaped",
          "60:     quoted_ldap_password = quote_bash_args(ldap_password)",
          "61:     credential_str = \"-n {ldap_username} -p {quoted_ldap_password!p}\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   # -n the user to connect as (ignored when using the hive principal in the URL, can be different from the user running the beeline command)",
          "76:   # -e ';' executes a SQL commmand of NOOP",
          "78:          \"-e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\") % \\",
          "81:   Execute(cmd,",
          "82:     user=smokeuser,",
          "",
          "[Removed Lines]",
          "77:   cmd = (\"beeline -n %s -u '%s' %s -e ';' 2>&1 | awk '{print}' | grep -i \" + \\",
          "79:         (format(hive_user), format(\";\".join(beeline_url)), format(credential_str))",
          "",
          "[Added Lines]",
          "81:   cmd = (\"beeline -u '%s' %s -e ';' 2>&1 | awk '{print}' | grep -i \" + \\",
          "83:         (format(\";\".join(beeline_url)), format(credential_str))",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py||ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py": [
          "File: ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py -> ambari-server/src/test/python/stacks/2.0.6/HIVE/test_hive_service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:                         stack_version = self.STACK_VERSION,",
          "47:                         target = RMFTestCase.TARGET_COMMON_SERVICES",
          "48:     )",
          "50:                               path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "51:                               user = 'ambari-qa',",
          "52:                               timeout = 30,",
          "",
          "[Removed Lines]",
          "49:     self.assertResourceCalled('Execute', \"beeline -n hive -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;auth=noSasl'  -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "49:     self.assertResourceCalled('Execute', \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;auth=noSasl' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     self.assertResourceCalled('Execute', '/usr/bin/kinit -kt /etc/security/keytabs/smokeuser.headless.keytab ambari-qa@EXAMPLE.COM; ',",
          "166:                               user = 'ambari-qa',",
          "167:                               )",
          "169:                               path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "170:                               user = 'ambari-qa',",
          "171:                               timeout = 30,",
          "",
          "[Removed Lines]",
          "168:     self.assertResourceCalled('Execute', \"beeline -n hive -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;principal=hive/_HOST@EXAMPLE.COM'  -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "168:     self.assertResourceCalled('Execute', \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10000/;transportMode=binary;principal=hive/_HOST@EXAMPLE.COM' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:       stack_version = self.STACK_VERSION,",
          "284:       target = RMFTestCase.TARGET_COMMON_SERVICES)",
          "287:       path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "288:       timeout = 30,",
          "289:       user = 'ambari-qa',",
          "",
          "[Removed Lines]",
          "286:     self.assertResourceCalled('Execute', \"beeline -n hive -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary'  -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "286:     self.assertResourceCalled('Execute', \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:       target = RMFTestCase.TARGET_COMMON_SERVICES)",
          "324:     self.assertResourceCalled('Execute',",
          "326:       path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "327:       timeout = 30,",
          "328:       user = 'ambari-qa',",
          "",
          "[Removed Lines]",
          "325:       \"beeline -n hive -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary'  -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "325:       \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10010/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330:     )",
          "332:     self.assertResourceCalled('Execute',",
          "334:       path = ['/bin/', '/usr/bin/', '/usr/lib/hive/bin/', '/usr/sbin/'],",
          "335:       timeout = 30,",
          "336:       user = 'ambari-qa',",
          "",
          "[Removed Lines]",
          "333:       \"beeline -n hive -u 'jdbc:hive2://c6402.ambari.apache.org:10500/;transportMode=binary'  -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "[Added Lines]",
          "333:       \"beeline -u 'jdbc:hive2://c6402.ambari.apache.org:10500/;transportMode=binary' -n hive -e ';' 2>&1 | awk '{print}' | grep -i -e 'Connected to:' -e 'Transaction isolation:' -e 'inactive HS2 instance; use service discovery'\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f82827b98faa9746abb9ea5feca8e390778843e4",
      "candidate_info": {
        "commit_hash": "f82827b98faa9746abb9ea5feca8e390778843e4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f82827b98faa9746abb9ea5feca8e390778843e4",
        "files": [
          "ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java"
        ],
        "message": "AMBARI-24353. Log Feeder: generate solr id from specific fields. (#1882)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java||ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java||ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java||ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java -> ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.slf4j.LoggerFactory;",
          "32: import java.io.File;",
          "33: import java.util.List;",
          "34: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.util.ArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     this.destination = destination;",
          "80:   }",
          "82:   public boolean isClosed() {",
          "83:     return isClosed;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   public List<String> getIdFields() {",
          "87:     return new ArrayList<>();",
          "88:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/IdGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.common;",
          "21: import org.apache.commons.collections.CollectionUtils;",
          "22: import org.apache.commons.lang3.StringUtils;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "26: import java.util.UUID;",
          "31: public class IdGeneratorHelper {",
          "33:   private IdGeneratorHelper() {",
          "34:   }",
          "42:   public static String generateUUID(Map<String, Object> data, List<String> idFields) {",
          "43:     String uuid = null;",
          "44:     if (CollectionUtils.isNotEmpty(idFields)) {",
          "45:       final StringBuilder sb = new StringBuilder();",
          "46:       for (String idField : idFields) {",
          "47:         if (data.containsKey(idField)) {",
          "48:           sb.append(data.get(idField).toString());",
          "49:         }",
          "50:       }",
          "51:       String concatId = sb.toString();",
          "52:       if (StringUtils.isNotEmpty(concatId)) {",
          "53:         uuid = UUID.nameUUIDFromBytes(concatId.getBytes()).toString();",
          "54:       } else {",
          "55:         uuid = UUID.randomUUID().toString();",
          "56:       }",
          "57:     } else {",
          "58:       uuid = UUID.randomUUID().toString();",
          "59:     }",
          "60:     return uuid;",
          "61:   }",
          "62: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import com.google.common.annotations.VisibleForTesting;",
          "22: import com.google.common.hash.Hashing;",
          "23: import org.apache.ambari.logfeeder.common.LogFeederConstants;",
          "24: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "25: import org.apache.ambari.logfeeder.loglevelfilter.LogLevelFilterHandler;",
          "27: import org.apache.ambari.logfeeder.plugin.common.MetricData;",
          "28: import org.apache.ambari.logfeeder.plugin.input.Input;",
          "29: import org.apache.ambari.logfeeder.plugin.input.InputMarker;",
          "",
          "[Removed Lines]",
          "26: import org.apache.ambari.logfeeder.input.InputFile;",
          "",
          "[Added Lines]",
          "23: import org.apache.ambari.logfeeder.common.IdGeneratorHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import java.util.Date;",
          "43: import java.util.List;",
          "44: import java.util.Map;",
          "47: public class OutputManagerImpl extends OutputManager {",
          "48:   private static final Logger LOG = Logger.getLogger(OutputManagerImpl.class);",
          "",
          "[Removed Lines]",
          "45: import java.util.UUID;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     }",
          "129:     jsonObj.put(\"seq_num\", new Long(docCounter++));",
          "133:     if (jsonObj.get(\"event_count\") == null) {",
          "134:       jsonObj.put(\"event_count\", new Integer(1));",
          "135:     }",
          "",
          "[Removed Lines]",
          "130:     if (jsonObj.get(\"id\") == null) {",
          "131:       jsonObj.put(\"id\", UUID.randomUUID().toString());",
          "132:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:       List<? extends Output> outputList = input.getOutputList();",
          "155:       for (Output output : outputList) {",
          "156:         try {",
          "157:           output.write(jsonObj, inputMarker);",
          "158:         } catch (Exception e) {",
          "159:           LOG.error(\"Error writing. to \" + output.getShortDescription(), e);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:           if (jsonObj.get(\"id\") == null) {",
          "154:             jsonObj.put(\"id\", IdGeneratorHelper.generateUUID(jsonObj, output.getIdFields()));",
          "155:           }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.ambari.logfeeder.output;",
          "22: import org.apache.ambari.logfeeder.common.LogFeederSolrClientFactory;",
          "23: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "24: import org.apache.ambari.logfeeder.plugin.input.InputMarker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import org.apache.ambari.logfeeder.common.IdGeneratorHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import java.net.MalformedURLException;",
          "46: import java.util.ArrayList;",
          "47: import java.util.Calendar;",
          "50: import java.util.HashMap;",
          "51: import java.util.List;",
          "52: import java.util.Map;",
          "55: import java.util.concurrent.BlockingQueue;",
          "56: import java.util.concurrent.LinkedBlockingQueue;",
          "57: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "48: import java.util.Collection;",
          "49: import java.util.Collections;",
          "53: import java.util.Set;",
          "54: import java.util.UUID;",
          "",
          "[Added Lines]",
          "49: import java.util.Collection;;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:   private boolean implicitRouting = false;",
          "86:   private int lastSlotByMin = -1;",
          "87:   private boolean skipLogtime = false;",
          "89:   private BlockingQueue<OutputData> outgoingBuffer = null;",
          "90:   private List<SolrWorkerThread> workerThreadList = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   private List<String> idFields = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:       solrUrls = solrUrlsList.toArray(new String[0]);",
          "135:     }",
          "137:     skipLogtime = getBooleanValue(\"skip_logtime\", DEFAULT_SKIP_LOGTIME);",
          "139:     maxIntervalMS = getIntValue(\"idle_flush_time_ms\", DEFAULT_MAX_INTERVAL_MS);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     idFields = getListValue(\"id_fields\", new ArrayList<>());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:         outputData = outgoingBuffer.poll(nextDispatchDuration, TimeUnit.MILLISECONDS);",
          "410:       }",
          "411:       if (outputData != null && outputData.jsonObj.get(\"id\") == null) {",
          "413:       }",
          "414:       return outputData;",
          "415:     }",
          "",
          "[Removed Lines]",
          "412:         outputData.jsonObj.put(\"id\", UUID.randomUUID().toString());",
          "",
          "[Added Lines]",
          "413:         outputData.jsonObj.put(\"id\", IdGeneratorHelper.generateUUID(outputData.jsonObj, idFields));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "501:   public void copyFile(File inputFile, InputMarker inputMarker) throws UnsupportedOperationException {",
          "502:     throw new UnsupportedOperationException(\"copyFile method is not yet supported for output=solr\");",
          "503:   }",
          "504: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:   @Override",
          "507:   public List<String> getIdFields() {",
          "508:     return idFields;",
          "509:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java||ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/test/java/org/apache/ambari/logfeeder/common/IdGeneratorHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logfeeder.common;",
          "21: import org.junit.Test;",
          "23: import java.util.ArrayList;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "28: import static org.junit.Assert.assertFalse;",
          "29: import static org.junit.Assert.assertTrue;",
          "31: public class IdGeneratorHelperTest {",
          "33:   @Test",
          "34:   public void testGenerateRandomUUID() {",
          "36:     Map<String, Object> fieldKeyMap = new HashMap<>();",
          "37:     List<String> fields = new ArrayList<>();",
          "39:     String uuid1 = IdGeneratorHelper.generateUUID(fieldKeyMap, fields);",
          "40:     String uuid2 = IdGeneratorHelper.generateUUID(fieldKeyMap, fields);",
          "42:     assertFalse(uuid1.equals(uuid2));",
          "43:   }",
          "45:   @Test",
          "46:   public void testUUIDFromFields() {",
          "48:     Map<String, Object> fieldKeyMap1 = new HashMap<>();",
          "49:     fieldKeyMap1.put(\"one-field\", \"1\");",
          "50:     Map<String, Object> fieldKeyMap2 = new HashMap<>();",
          "51:     fieldKeyMap2.put(\"one-field\", \"1\");",
          "52:     List<String> fields = new ArrayList<>();",
          "53:     fields.add(\"one-field\");",
          "55:     String uuid1 = IdGeneratorHelper.generateUUID(fieldKeyMap1, fields);",
          "56:     String uuid2 = IdGeneratorHelper.generateUUID(fieldKeyMap2, fields);",
          "58:     assertTrue(uuid1.equals(uuid2));",
          "59:   }",
          "61:   @Test",
          "62:   public void testUUIDFromFieldsWithMultipleFields() {",
          "64:     Map<String, Object> fieldKeyMap1 = new HashMap<>();",
          "65:     fieldKeyMap1.put(\"one-field\", \"1\");",
          "66:     fieldKeyMap1.put(\"two-field\", \"2\");",
          "67:     Map<String, Object> fieldKeyMap2 = new HashMap<>();",
          "68:     fieldKeyMap2.put(\"one-field\", \"1\");",
          "69:     fieldKeyMap2.put(\"two-field\", \"2\");",
          "70:     List<String> fields = new ArrayList<>();",
          "71:     fields.add(\"one-field\");",
          "72:     fields.add(\"two-field\");",
          "74:     String uuid1 = IdGeneratorHelper.generateUUID(fieldKeyMap1, fields);",
          "75:     String uuid2 = IdGeneratorHelper.generateUUID(fieldKeyMap2, fields);",
          "77:     assertTrue(uuid1.equals(uuid2));",
          "78:   }",
          "80:   @Test",
          "81:   public void testUUIDFromFieldsDifferentNumberOfFields() {",
          "83:     Map<String, Object> fieldKeyMap1 = new HashMap<>();",
          "84:     fieldKeyMap1.put(\"one-field\", \"1\");",
          "85:     Map<String, Object> fieldKeyMap2 = new HashMap<>();",
          "86:     fieldKeyMap2.put(\"one-field\", \"1\");",
          "87:     fieldKeyMap2.put(\"two-field\", \"2\");",
          "88:     List<String> fields = new ArrayList<>();",
          "89:     fields.add(\"one-field\");",
          "90:     fields.add(\"two-field\");",
          "92:     String uuid1 = IdGeneratorHelper.generateUUID(fieldKeyMap1, fields);",
          "93:     String uuid2 = IdGeneratorHelper.generateUUID(fieldKeyMap2, fields);",
          "95:     assertFalse(uuid1.equals(uuid2));",
          "96:   }",
          "98: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9ad808a17091ba3614a04b060f9c3c3d05cbfda",
      "candidate_info": {
        "commit_hash": "c9ad808a17091ba3614a04b060f9c3c3d05cbfda",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c9ad808a17091ba3614a04b060f9c3c3d05cbfda",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py"
        ],
        "message": "AMBARI-24454. WebHdfs calls being made from yarn/docker container to NameNode hosted on bare metal host fails. (jaimin) (#2018)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py||ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py||ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py -> ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:       if file_to_put:",
          "267:         cmd += [\"--data-binary\", \"@\"+file_to_put, \"-H\", \"Content-Type: application/octet-stream\"]",
          "269:     if self.security_enabled:",
          "270:       cmd += [\"--negotiate\", \"-u\", \":\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:       else:",
          "269:         cmd += [\"-d\", \"\", \"-H\", \"Content-Length: 0\"]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca9851ea960d3f9b015c88017b3af9832b804091",
      "candidate_info": {
        "commit_hash": "ca9851ea960d3f9b015c88017b3af9832b804091",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ca9851ea960d3f9b015c88017b3af9832b804091",
        "files": [
          "ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/test/python/TestAmbariServer.py"
        ],
        "message": "AMBARI-24516 - Default value for LDAP type (#2276)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py": [
          "File: ambari-server/src/main/python/ambari-server.py -> ambari-server/src/main/python/ambari-server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: limitations under the License.",
          "19: '''",
          "21: import optparse",
          "23: import os",
          "24: import signal",
          "30: from ambari_commons.exceptions import FatalException, NonFatalException",
          "31: from ambari_commons.logging_utils import set_verbose, set_silent, \\",
          "32:   print_info_msg, print_warning_msg, print_error_msg, set_debug_mode_from_options",
          "33: from ambari_commons.os_check import OSConst",
          "34: from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl",
          "35: from ambari_commons.os_utils import remove_file",
          "36: from ambari_server.BackupRestore import main as BackupRestore_main",
          "37: from ambari_server.dbConfiguration import DATABASE_NAMES, LINUX_DBMS_KEYS_LIST",
          "38: from ambari_server.serverConfiguration import configDefaults, get_ambari_properties, PID_NAME",
          "40: from ambari_server.serverSetup import reset, setup, setup_jce_policy",
          "41: from ambari_server.serverUpgrade import upgrade, set_current",
          "42: from ambari_server.setupHttps import setup_https, setup_truststore",
          "43: from ambari_server.setupMpacks import install_mpack, uninstall_mpack, upgrade_mpack, STACK_DEFINITIONS_RESOURCE_NAME, \\",
          "44:   SERVICE_DEFINITIONS_RESOURCE_NAME, MPACKS_RESOURCE_NAME",
          "45: from ambari_server.setupSso import setup_sso",
          "58: from ambari_server.userInput import get_validated_string_input",
          "61: from ambari_server_main import server_process_main",
          "64: logger = logging.getLogger()",
          "",
          "[Removed Lines]",
          "22: import sys",
          "25: import logging",
          "26: import logging.handlers",
          "27: import logging.config",
          "29: from optparse import OptionValueError",
          "39: from ambari_server.serverUtils import is_server_runing, refresh_stack_hash, wait_for_server_to_stop",
          "46: from ambari_server.dbCleanup import db_purge",
          "47: from ambari_server.hostUpdate import update_host_names",
          "48: from ambari_server.checkDatabase import check_database",
          "49: from ambari_server.enableStack import enable_stack_version",
          "51: from ambari_server.setupActions import BACKUP_ACTION, LDAP_SETUP_ACTION, LDAP_SYNC_ACTION, PSTART_ACTION, \\",
          "52:   REFRESH_STACK_HASH_ACTION, RESET_ACTION, RESTORE_ACTION, UPDATE_HOST_NAMES_ACTION, CHECK_DATABASE_ACTION, \\",
          "53:   SETUP_ACTION, SETUP_SECURITY_ACTION,START_ACTION, STATUS_ACTION, STOP_ACTION, RESTART_ACTION, UPGRADE_ACTION, \\",
          "54:   SETUP_JCE_ACTION, SET_CURRENT_ACTION, START_ACTION, STATUS_ACTION, STOP_ACTION, UPGRADE_ACTION, \\",
          "55:   SETUP_JCE_ACTION, SET_CURRENT_ACTION, ENABLE_STACK_ACTION, SETUP_SSO_ACTION, \\",
          "56:   DB_PURGE_ACTION, INSTALL_MPACK_ACTION, UNINSTALL_MPACK_ACTION, UPGRADE_MPACK_ACTION, PAM_SETUP_ACTION, MIGRATE_LDAP_PAM_ACTION, KERBEROS_SETUP_ACTION",
          "57: from ambari_server.setupSecurity import setup_ldap, sync_ldap, setup_master_key, setup_ambari_krb5_jaas, setup_pam, migrate_ldap_pam",
          "59: from ambari_server.kerberos_setup import setup_kerberos",
          "62: from ambari_server.ambariPath import AmbariPath",
          "",
          "[Added Lines]",
          "21: import logging",
          "22: import logging.config",
          "23: import logging.handlers",
          "27: import sys",
          "34: from optparse import OptionValueError",
          "37: from ambari_server.checkDatabase import check_database",
          "38: from ambari_server.dbCleanup import db_purge",
          "40: from ambari_server.enableStack import enable_stack_version",
          "41: from ambari_server.hostUpdate import update_host_names",
          "42: from ambari_server.kerberos_setup import setup_kerberos",
          "46: from ambari_server.serverUtils import is_server_runing, refresh_stack_hash, wait_for_server_to_stop",
          "47: from ambari_server.setupActions import BACKUP_ACTION, LDAP_SETUP_ACTION, LDAP_SYNC_ACTION, PSTART_ACTION, \\",
          "48:   REFRESH_STACK_HASH_ACTION, RESET_ACTION, RESTORE_ACTION, UPDATE_HOST_NAMES_ACTION, CHECK_DATABASE_ACTION, \\",
          "49:   SETUP_ACTION, SETUP_SECURITY_ACTION, RESTART_ACTION, START_ACTION, STATUS_ACTION, STOP_ACTION, UPGRADE_ACTION, \\",
          "50:   SETUP_JCE_ACTION, SET_CURRENT_ACTION, ENABLE_STACK_ACTION, SETUP_SSO_ACTION, \\",
          "51:   DB_PURGE_ACTION, INSTALL_MPACK_ACTION, UNINSTALL_MPACK_ACTION, UPGRADE_MPACK_ACTION, PAM_SETUP_ACTION, \\",
          "52:   MIGRATE_LDAP_PAM_ACTION, KERBEROS_SETUP_ACTION",
          "56: from ambari_server.setupSecurity import setup_ldap, sync_ldap, setup_master_key, setup_ambari_krb5_jaas, setup_pam, \\",
          "57:   migrate_ldap_pam, LDAP_TYPES",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:   parser.add_option('--ldap-secondary-host', action=\"callback\", callback=check_ldap_url_options, type='str', default=None, help=\"Secondary Host for LDAP (must not be used together with --ldap-secondary-url)\", dest=\"ldap_secondary_host\")",
          "553:   parser.add_option('--ldap-secondary-port', action=\"callback\", callback=check_ldap_url_options, type='int', default=None, help=\"Secondary Port for LDAP (must not be used together with --ldap-secondary-url)\", dest=\"ldap_secondary_port\")",
          "554:   parser.add_option('--ldap-ssl', default=None, help=\"Use SSL [true/false] for LDAP\", dest=\"ldap_ssl\")",
          "555:   parser.add_option('--ldap-user-class', default=None, help=\"User Attribute Object Class for LDAP\", dest=\"ldap_user_class\")",
          "556:   parser.add_option('--ldap-user-attr', default=None, help=\"User Attribute Name for LDAP\", dest=\"ldap_user_attr\")",
          "557:   parser.add_option('--ldap-group-class', default=None, help=\"Group Attribute Object Class for LDAP\", dest=\"ldap_group_class\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   parser.add_option('--ldap-use-generic-defaults', action=\"store_true\", default=None, help=\"Disables ldap type query and generic defaults will be offered for non existent properties\".format(\"/\".join(LDAP_TYPES)), dest=\"ldap_use_generic_defaults\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py": [
          "File: ambari-server/src/main/python/ambari_server/setupSecurity.py -> ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: from ambari_server.userInput import get_validated_string_input, get_prompt_default, read_password, get_YN_input, \\",
          "60:   quit_if_has_answer",
          "61: from contextlib import closing",
          "63: logger = logging.getLogger(__name__)",
          "65: LDAP_AD=\"AD\"",
          "66: LDAP_IPA=\"IPA\"",
          "69: LDAP_TYPES = [LDAP_AD, LDAP_IPA, LDAP_GENERIC]",
          "",
          "[Removed Lines]",
          "67: LDAP_GENERIC=\"Generic LDAP\"",
          "",
          "[Added Lines]",
          "62: from urllib2 import HTTPError",
          "68: LDAP_GENERIC=\"Generic\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:   def no_ldap_sync_options_set(self):",
          "288:     return not self.ldap_sync_all and not self.ldap_sync_existing and self.ldap_sync_users is None and self.ldap_sync_groups is None",
          "292:   url = get_ambari_server_api_base(properties) + SETUP_LDAP_CONFIG_URL",
          "293:   admin_auth = base64.encodestring('%s:%s' % (admin_login, admin_password)).replace('\\n', '')",
          "294:   request = urllib2.Request(url)",
          "",
          "[Removed Lines]",
          "290: def getLdapPropertyFromDB(properties, admin_login, admin_password, property_name):",
          "291:   ldapProperty = None",
          "",
          "[Added Lines]",
          "291: def get_ldap_property_from_db(properties, admin_login, admin_password, property_name):",
          "292:   ldap_properties_from_db = get_ldap_properties_from_db(properties, admin_login, admin_password)",
          "293:   return ldap_properties_from_db[property_name] if ldap_properties_from_db else None",
          "295: def get_ldap_properties_from_db(properties, admin_login, admin_password):",
          "296:   ldap_properties = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:   request_in_progress = True",
          "300:   sys.stdout.write('\\nFetching LDAP configuration from DB')",
          "302:   while request_in_progress:",
          "305:       raise FatalException(1, \"Could not fetch LDAP configuration within a minute; giving up!\")",
          "306:     sys.stdout.write('.')",
          "307:     sys.stdout.flush()",
          "",
          "[Removed Lines]",
          "301:   numOfTries = 0",
          "303:     numOfTries += 1",
          "304:     if (numOfTries == 60):",
          "",
          "[Added Lines]",
          "306:   num_of_tries = 0",
          "308:     num_of_tries += 1",
          "309:     if num_of_tries == 60:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315:           raise FatalException(1, err)",
          "316:         else:",
          "317:             response_body = json.loads(response.read())",
          "321:               time.sleep(1)",
          "322:             else:",
          "323:               request_in_progress = False",
          "324:     except Exception as e:",
          "326:       err = 'Error while fetching LDAP configuration. Error details: %s' % e",
          "327:       raise FatalException(1, err)",
          "331: def is_ldap_enabled(properties, admin_login, admin_password):",
          "336: #",
          "",
          "[Removed Lines]",
          "318:             ldapProperties = response_body['Configuration']['properties']",
          "319:             ldapProperty = ldapProperties[property_name]",
          "320:             if not ldapProperty:",
          "325:       request_in_progress = False",
          "329:   return ldapProperty",
          "332:   ldapEnabled = getLdapPropertyFromDB(properties, admin_login, admin_password, IS_LDAP_CONFIGURED)",
          "333:   return ldapEnabled if ldapEnabled != None else 'false'",
          "",
          "[Added Lines]",
          "323:             ldap_properties = response_body['Configuration']['properties']",
          "324:             if not ldap_properties:",
          "328:     except HTTPError as e:",
          "329:       if e.code == 404:",
          "330:         sys.stdout.write(' No configuration.')",
          "331:         return None",
          "332:       err = 'Error while fetching LDAP configuration. Error details: %s' % e",
          "333:       raise FatalException(1, err)",
          "338:   return ldap_properties",
          "341:   ldap_enabled = get_ldap_property_from_db(properties, admin_login, admin_password, IS_LDAP_CONFIGURED)",
          "342:   return ldap_enabled if ldap_enabled is not None else 'false'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "640: class LdapPropTemplate:",
          "642:     self.prop_name = i_prop_name",
          "643:     self.option = i_option",
          "646:     self.prompt_regex = i_prompt_regex",
          "647:     self.allow_empty_prompt = i_allow_empty_prompt",
          "649: def format_prop_val_prompt(prop_prompt_pattern, prop_default_value):",
          "650:   default_value = get_prompt_default(prop_default_value)",
          "651:   return prop_prompt_pattern.format((\" \" + default_value) if default_value is not None and default_value != \"\" else \"\")",
          "653: @OsFamilyFuncImpl(OSConst.WINSRV_FAMILY)",
          "655:   # python2.x dict is not ordered",
          "656:   ldap_properties = [",
          "659:     LdapPropTemplate(properties, options.ldap_secondary_host, \"ambari.ldap.connectivity.secondary.server.host\", \"Secondary LDAP Host <Optional>{0}: \", REGEX_HOSTNAME, True),",
          "660:     LdapPropTemplate(properties, options.ldap_secondary_port, \"ambari.ldap.connectivity.secondary.server.port\", \"Secondary LDAP Port <Optional>{0}: \", REGEX_PORT, True),",
          "666:   ]",
          "667:   return ldap_properties",
          "669: @OsFamilyFuncImpl(OsFamilyImpl.DEFAULT)",
          "671:   ldap_properties = [",
          "674:     LdapPropTemplate(properties, options.ldap_secondary_host, \"ambari.ldap.connectivity.secondary.server.host\", \"Secondary LDAP Host <Optional>{0}: \", REGEX_HOSTNAME, True),",
          "675:     LdapPropTemplate(properties, options.ldap_secondary_port, \"ambari.ldap.connectivity.secondary.server.port\", \"Secondary LDAP Port <Optional>{0}: \", REGEX_PORT, True),",
          "687:     LdapPropTemplate(properties, options.ldap_force_lowercase_usernames, \"ambari.ldap.advanced.force_lowercase_usernames\", \"Force lower-case user names [true/false]{0}:\", REGEX_TRUE_FALSE, True),",
          "688:     LdapPropTemplate(properties, options.ldap_pagination_enabled, \"ambari.ldap.advanced.pagination_enabled\", \"Results from LDAP are paginated when requested [true/false]{0}:\", REGEX_TRUE_FALSE, True)",
          "689:   ]",
          "690:   return ldap_properties",
          "698:   request_data = {",
          "699:     \"Configuration\": {",
          "700:       \"category\": \"ldap-configuration\",",
          "",
          "[Removed Lines]",
          "641:   def __init__(self, properties, i_option, i_prop_name, i_prop_val_pattern, i_prompt_regex, i_allow_empty_prompt, i_prop_name_default=None):",
          "644:     self.ldap_prop_value = get_value_from_properties(properties, i_prop_name, i_prop_name_default)",
          "645:     self.ldap_prop_val_prompt = format_prop_val_prompt(i_prop_val_pattern, self.ldap_prop_value)",
          "654: def init_ldap_properties_list_reqd(properties, options, ldap_type):",
          "657:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary LDAP Host{0}: \", REGEX_HOSTNAME, False, get_default_prop_value(ldap_type, {LDAP_IPA:'ipa.ambari.apache.org', LDAP_GENERIC:'ldap.ambari.apache.org'})),",
          "658:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary LDAP Port{0}: \", REGEX_PORT, False, get_default_prop_value(ldap_type, {LDAP_IPA:'636', LDAP_GENERIC:'389'})),",
          "661:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL [true/false]{0}: \", REGEX_TRUE_FALSE, False, get_default_prop_value(ldap_type, {LDAP_AD:'false', LDAP_IPA:'true', LDAP_GENERIC:'false'})),",
          "662:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "663:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, \"dc=ambari,dc=apache,dc=org\"),",
          "664:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, \"follow\"),",
          "665:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\" \"Bind anonymously [true/false]{0}: \", REGEX_TRUE_FALSE, False, \"false\")",
          "670: def init_ldap_properties_list_reqd(properties, options, ldap_type):",
          "672:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary LDAP Host{0}: \", REGEX_HOSTNAME, False, get_default_prop_value(ldap_type, {LDAP_IPA:'ipa.ambari.apache.org', LDAP_GENERIC:'ldap.ambari.apache.org'})),",
          "673:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary LDAP Port{0}: \", REGEX_PORT, False, get_default_prop_value(ldap_type, {LDAP_IPA:'636', LDAP_GENERIC:'389'})),",
          "676:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL [true/false]{0}: \", REGEX_TRUE_FALSE, False, get_default_prop_value(ldap_type, {LDAP_AD:'false', LDAP_IPA:'true', LDAP_GENERIC:'false'})),",
          "677:     LdapPropTemplate(properties, options.ldap_user_class, \"ambari.ldap.attributes.user.object_class\", \"User object class{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'user', LDAP_IPA:'posixUser', LDAP_GENERIC:'posixUser'})),",
          "678:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "679:     LdapPropTemplate(properties, options.ldap_group_class, \"ambari.ldap.attributes.group.object_class\", \"Group object class{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'group', LDAP_IPA:'posixGroup', LDAP_GENERIC:'posixGroup'})),",
          "680:     LdapPropTemplate(properties, options.ldap_group_attr, \"ambari.ldap.attributes.group.name_attr\", \"Group name attribute{0}: \", REGEX_ANYTHING, False, \"cn\"),",
          "681:     LdapPropTemplate(properties, options.ldap_member_attr, \"ambari.ldap.attributes.group.member_attr\", \"Group member attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'member', LDAP_IPA:'memberUid', LDAP_GENERIC:'memberUid'})),",
          "682:     LdapPropTemplate(properties, options.ldap_dn, \"ambari.ldap.attributes.dn_attr\", \"Distinguished name attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'distinguishedName', LDAP_IPA:'dn', LDAP_GENERIC:'dn'})),",
          "683:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, \"dc=ambari,dc=apache,dc=org\"),",
          "684:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, \"follow\"),",
          "685:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\", \"Bind anonymously [true/false]{0}: \", REGEX_TRUE_FALSE, False, \"false\"),",
          "686:     LdapPropTemplate(properties, options.ldap_sync_username_collisions_behavior, \"ambari.ldap.advanced.collision_behavior\", \"Handling behavior for username collisions [convert/skip] for LDAP sync{0}: \", REGEX_SKIP_CONVERT, False, \"skip\"),",
          "692: def get_default_prop_value(ldap_type, default_value_map):",
          "693:   return default_value_map[ldap_type] if ldap_type in default_value_map else None",
          "696: def update_ldap_configuration(options, properties, ldap_property_value_map):",
          "697:   admin_login, admin_password = get_ambari_admin_username_password_pair(options)",
          "",
          "[Added Lines]",
          "650:   def __init__(self, properties, i_option, i_prop_name, i_prop_val_pattern, i_prompt_regex, i_allow_empty_prompt, i_prop_default=None):",
          "653:     stored_value = get_value_from_properties(properties, i_prop_name)",
          "654:     self.default_value = LdapDefault(stored_value) if stored_value else i_prop_default",
          "655:     self.prompt_pattern = i_prop_val_pattern",
          "659:   def get_default_value(self, ldap_type):",
          "660:     return self.default_value.get_default_value(ldap_type) if self.default_value else None",
          "662:   def get_prompt_text(self, ldap_type):",
          "663:     default_value = self.get_default_value(ldap_type)",
          "664:     return format_prop_val_prompt(self.prompt_pattern, default_value)",
          "666:   def get_input(self, ldap_type):",
          "667:     default_value = self.get_default_value(ldap_type)",
          "668:     return get_validated_string_input(self.get_prompt_text(ldap_type),",
          "669:                                       default_value, self.prompt_regex,",
          "670:                                        \"Invalid characters in the input!\", False, self.allow_empty_prompt,",
          "671:                                        answer = self.option)",
          "673:   def should_query_ldap_type(self):",
          "674:     return not self.allow_empty_prompt and not self.option and self.default_value and self.default_value.depends_on_ldap_type()",
          "676: class LdapDefault:",
          "677:   def __init__(self, value):",
          "678:     self.default_value = value",
          "680:   def get_default_value(self, ldap_type):",
          "681:     return self.default_value",
          "683:   def depends_on_ldap_type(self):",
          "684:     return False",
          "687: class LdapDefaultMap(LdapDefault):",
          "688:   def __init__(self, value_map):",
          "689:     LdapDefault.__init__(self, None)",
          "690:     self.default_value_map = value_map",
          "692:   def get_default_value(self, ldap_type):",
          "693:     return self.default_value_map[ldap_type] if self.default_value_map and ldap_type in self.default_value_map else None",
          "695:   def depends_on_ldap_type(self):",
          "696:     return True",
          "703: def init_ldap_properties_list_reqd(properties, options):",
          "706:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary LDAP Host{0}: \", REGEX_HOSTNAME, False, LdapDefaultMap({LDAP_IPA:'ipa.ambari.apache.org', LDAP_GENERIC:'ldap.ambari.apache.org'})),",
          "707:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary LDAP Port{0}: \", REGEX_PORT, False, LdapDefaultMap({LDAP_IPA:'636', LDAP_GENERIC:'389'})),",
          "710:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL [true/false]{0}: \", REGEX_TRUE_FALSE, False, LdapDefaultMap({LDAP_AD:'false', LDAP_IPA:'true', LDAP_GENERIC:'false'})),",
          "711:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "712:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, LdapDefault(\"dc=ambari,dc=apache,dc=org\")),",
          "713:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, LdapDefault(\"follow\")),",
          "714:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\" \"Bind anonymously [true/false]{0}: \", REGEX_TRUE_FALSE, False, LdapDefault(\"false\"))",
          "719: def init_ldap_properties_list_reqd(properties, options):",
          "721:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary LDAP Host{0}: \", REGEX_HOSTNAME, False, LdapDefaultMap({LDAP_IPA:'ipa.ambari.apache.org', LDAP_GENERIC:'ldap.ambari.apache.org'})),",
          "722:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary LDAP Port{0}: \", REGEX_PORT, False, LdapDefaultMap({LDAP_IPA:'636', LDAP_GENERIC:'389'})),",
          "725:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL [true/false]{0}: \", REGEX_TRUE_FALSE, False, LdapDefaultMap({LDAP_AD:'false', LDAP_IPA:'true', LDAP_GENERIC:'false'})),",
          "726:     LdapPropTemplate(properties, options.ldap_user_class, \"ambari.ldap.attributes.user.object_class\", \"User object class{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'user', LDAP_IPA:'posixAccount', LDAP_GENERIC:'posixUser'})),",
          "727:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "728:     LdapPropTemplate(properties, options.ldap_group_class, \"ambari.ldap.attributes.group.object_class\", \"Group object class{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'group', LDAP_IPA:'posixGroup', LDAP_GENERIC:'posixGroup'})),",
          "729:     LdapPropTemplate(properties, options.ldap_group_attr, \"ambari.ldap.attributes.group.name_attr\", \"Group name attribute{0}: \", REGEX_ANYTHING, False, LdapDefault(\"cn\")),",
          "730:     LdapPropTemplate(properties, options.ldap_member_attr, \"ambari.ldap.attributes.group.member_attr\", \"Group member attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'member', LDAP_IPA:'memberUid', LDAP_GENERIC:'memberUid'})),",
          "731:     LdapPropTemplate(properties, options.ldap_dn, \"ambari.ldap.attributes.dn_attr\", \"Distinguished name attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'distinguishedName', LDAP_IPA:'dn', LDAP_GENERIC:'dn'})),",
          "732:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'dc=ambari,dc=apache,dc=org', LDAP_IPA:'cn=accounts,dc=ambari,dc=apache,dc=org', LDAP_GENERIC:'dc=ambari,dc=apache,dc=org'})),",
          "733:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, LdapDefault(\"follow\")),",
          "734:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\", \"Bind anonymously [true/false]{0}: \", REGEX_TRUE_FALSE, False, LdapDefault(\"false\")),",
          "735:     LdapPropTemplate(properties, options.ldap_sync_username_collisions_behavior, \"ambari.ldap.advanced.collision_behavior\", \"Handling behavior for username collisions [convert/skip] for LDAP sync{0}: \", REGEX_SKIP_CONVERT, False, LdapDefault(\"skip\")),",
          "741: def update_ldap_configuration(admin_login, admin_password, properties, ldap_property_value_map):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "705:   request_data['Configuration']['properties'] = ldap_property_value_map",
          "706:   perform_changes_via_rest_api(properties, admin_login, admin_password, SETUP_LDAP_CONFIG_URL, 'PUT', request_data)",
          "708: def query_ldap_type():",
          "711:                                     REGEX_LDAP_TYPE,",
          "712:                                     \"Please enter one of the followings '{}'!\".format(\"', '\".join(LDAP_TYPES)),",
          "713:                                     False,",
          "",
          "[Removed Lines]",
          "709:   return get_validated_string_input(\"Please select the type of LDAP you want to use ({}):\".format(\", \".join(LDAP_TYPES)),",
          "710:                                     None,",
          "",
          "[Added Lines]",
          "752: def should_query_ldap_type(ldap_property_list_reqd):",
          "753:   for ldap_prop in ldap_property_list_reqd:",
          "754:     if ldap_prop.should_query_ldap_type():",
          "755:       return True",
          "756:   return False",
          "759:   return get_validated_string_input(\"Please select the type of LDAP you want to use [{}]({}):\".format(\"/\".join(LDAP_TYPES), LDAP_GENERIC),",
          "760:                                     LDAP_GENERIC,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "735:         err = \"Currently '\" + current_client_security + \"' configured. Can not setup LDAP.\"",
          "736:         raise FatalException(1, err)",
          "738:   isSecure = get_is_secure(properties)",
          "740:   if options.ldap_url:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788:   admin_login, admin_password = get_ambari_admin_username_password_pair(options)",
          "789:   ldap_properties = get_ldap_properties_from_db(properties, admin_login, admin_password)",
          "790:   if ldap_properties:",
          "791:     properties.update(ldap_properties)",
          "792:   sys.stdout.write('\\n')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "745:     options.ldap_secondary_host = options.ldap_secondary_url.split(':')[0]",
          "746:     options.ldap_secondary_port = options.ldap_secondary_url.split(':')[1]",
          "752:   ldap_property_list_opt = [LDAP_MGR_USERNAME_PROPERTY,",
          "753:                             LDAP_MGR_PASSWORD_PROPERTY,",
          "",
          "[Removed Lines]",
          "748:   ldap_type = query_ldap_type()",
          "750:   ldap_property_list_reqd = init_ldap_properties_list_reqd(properties, options, ldap_type)",
          "",
          "[Added Lines]",
          "805:   ldap_property_list_reqd = init_ldap_properties_list_reqd(properties, options)",
          "806:   ldap_bind_dn_template = LdapPropTemplate(properties, options.ldap_manager_dn, LDAP_MGR_USERNAME_PROPERTY, \"Bind DN{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({",
          "807:     LDAP_AD:'cn=ldapbind,dc=ambari,dc=apache,dc=org',",
          "808:     LDAP_IPA:'uid=ldapbind,cn=users,cn=accounts,dc=ambari,dc=apache,dc=org',",
          "809:     LDAP_GENERIC:'uid=ldapbind,cn=users,dc=ambari,dc=apache,dc=org'}))",
          "810:   ldap_type = LDAP_GENERIC if options.ldap_use_generic_defaults or not should_query_ldap_type(ldap_property_list_reqd) else query_ldap_type()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "759:   ldap_property_list_passwords=[LDAP_MGR_PASSWORD_PROPERTY, SSL_TRUSTSTORE_PASSWORD_PROPERTY]",
          "769:   ldap_property_value_map = {}",
          "770:   ldap_property_values_in_ambari_properties = {}",
          "771:   for ldap_prop in ldap_property_list_reqd:",
          "775:     if input is not None and input != \"\":",
          "776:       ldap_property_value_map[ldap_prop.prop_name] = input",
          "",
          "[Removed Lines]",
          "761:   ldap_mgr_dn_default = get_default_prop_value(ldap_type, {",
          "762:     LDAP_AD:'cn=ldapbind,dc=ambari,dc=apache,dc=org',",
          "763:     LDAP_IPA:'uid=ldapbind,cn=users,cn=accounts,dc=ambari,dc=apache,dc=org',",
          "764:     LDAP_GENERIC:'uid=ldapbind,cn=users,dc=ambari,dc=apache,dc=org'})",
          "766:   SSL_TRUSTSTORE_TYPE_DEFAULT = get_value_from_properties(properties, SSL_TRUSTSTORE_TYPE_PROPERTY, \"jks\")",
          "767:   SSL_TRUSTSTORE_PATH_DEFAULT = get_value_from_properties(properties, SSL_TRUSTSTORE_PATH_PROPERTY)",
          "772:     input = get_validated_string_input(ldap_prop.ldap_prop_val_prompt, ldap_prop.ldap_prop_value, ldap_prop.prompt_regex,",
          "773:                                        \"Invalid characters in the input!\", False, ldap_prop.allow_empty_prompt,",
          "774:                                        answer = ldap_prop.option)",
          "",
          "[Added Lines]",
          "822:   ssl_truststore_type_default = get_value_from_properties(properties, SSL_TRUSTSTORE_TYPE_PROPERTY, \"jks\")",
          "823:   ssl_truststore_path_default = get_value_from_properties(properties, SSL_TRUSTSTORE_PATH_PROPERTY)",
          "824:   disable_endpoint_identification_default = get_value_from_properties(properties, LDAP_DISABLE_ENDPOINT_IDENTIFICATION, \"False\")",
          "829:     input = ldap_prop.get_input(ldap_type)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "780:       mgr_password = None",
          "781:       # Ask for manager credentials only if bindAnonymously is false",
          "782:       if not anonymous:",
          "787:         ldap_property_value_map[LDAP_MGR_USERNAME_PROPERTY] = username",
          "788:         mgr_password = configure_ldap_password(options)",
          "789:         ldap_property_value_map[LDAP_MGR_PASSWORD_PROPERTY] = mgr_password",
          "",
          "[Removed Lines]",
          "783:         username = get_validated_string_input(",
          "784:           format_prop_val_prompt(\"Bind DN{0}: \", get_value_from_properties(properties, LDAP_MGR_USERNAME_PROPERTY, ldap_mgr_dn_default)),",
          "785:           ldap_mgr_dn_default, \".*\",",
          "786:           \"Invalid characters in the input!\", False, False, answer = options.ldap_manager_dn)",
          "",
          "[Added Lines]",
          "839:         username = ldap_bind_dn_template.get_input(ldap_type)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "792:       ts_password = None",
          "794:       if ldaps:",
          "796:                                                                      REGEX_TRUE_FALSE, \"Invalid characters in the input!\", False, allowEmpty=True, answer=options.ldap_sync_disable_endpoint_identification)",
          "797:         ldap_property_value_map[LDAP_DISABLE_ENDPOINT_IDENTIFICATION] = disable_endpoint_identification",
          "799:         truststore_default = \"n\"",
          "801:         if truststore_set:",
          "802:           truststore_default = \"y\"",
          "803:         custom_trust_store = True if options.trust_store_path is not None and options.trust_store_path else False",
          "",
          "[Removed Lines]",
          "795:         disable_endpoint_identification = get_validated_string_input(\"Disable endpoint identification during SSL handshake [true/false] (false): \", \"false\",",
          "800:         truststore_set = bool(SSL_TRUSTSTORE_PATH_DEFAULT)",
          "",
          "[Added Lines]",
          "848:         disable_endpoint_identification = get_validated_string_input(\"Disable endpoint identification during SSL handshake [true/false] ({0}): \".format(disable_endpoint_identification_default),",
          "849:                                                                      disable_endpoint_identification_default,",
          "854:         truststore_set = bool(ssl_truststore_path_default)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "806:                                           format(truststore_default),",
          "807:                                           truststore_set)",
          "808:         if custom_trust_store:",
          "811:           ts_path = None",
          "812:           while True:",
          "815:             if os.path.exists(ts_path):",
          "816:               break",
          "817:             else:",
          "",
          "[Removed Lines]",
          "809:           ts_type = get_validated_string_input(\"TrustStore type [jks/jceks/pkcs12] {0}:\".format(get_prompt_default(SSL_TRUSTSTORE_TYPE_DEFAULT)),",
          "810:             SSL_TRUSTSTORE_TYPE_DEFAULT, \"^(jks|jceks|pkcs12)?$\", \"Wrong type\", False, answer=options.trust_store_type)",
          "813:             ts_path = get_validated_string_input(\"Path to TrustStore file {0}:\".format(get_prompt_default(SSL_TRUSTSTORE_PATH_DEFAULT)),",
          "814:               SSL_TRUSTSTORE_PATH_DEFAULT, \".*\", False, False, answer = options.trust_store_path)",
          "",
          "[Added Lines]",
          "863:           ts_type = get_validated_string_input(\"TrustStore type [jks/jceks/pkcs12] {0}:\".format(get_prompt_default(ssl_truststore_type_default)),",
          "864:             ssl_truststore_type_default, \"^(jks|jceks|pkcs12)?$\", \"Wrong type\", False, answer=options.trust_store_type)",
          "867:             ts_path = get_validated_string_input(format_prop_val_prompt(\"Path to TrustStore file{0}: \", ssl_truststore_path_default),",
          "868:                                                  ssl_truststore_path_default, \".*\", False, False, answer = options.trust_store_path)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "842:   print '=' * 20",
          "843:   for property in ldap_property_list_reqd:",
          "844:     if ldap_property_value_map.has_key(property.prop_name):",
          "847:   for property in ldap_property_list_opt:",
          "848:     if ldap_property_value_map.has_key(property):",
          "",
          "[Removed Lines]",
          "845:       print(\"%s %s\" % (property.ldap_prop_val_prompt, ldap_property_value_map[property.prop_name]))",
          "",
          "[Added Lines]",
          "899:       print(\"%s %s\" % (property.get_prompt_text(ldap_type), ldap_property_value_map[property.prop_name]))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "883:     ldap_property_value_map[IS_LDAP_CONFIGURED] = \"true\"",
          "884:     #Saving LDAP configuration in Ambari DB using the REST API",
          "887:     #The only properties we want to write out in Ambari.properties are the client.security type being LDAP and the custom Truststore related properties (if any)",
          "888:     ldap_property_values_in_ambari_properties[CLIENT_SECURITY] = 'ldap'",
          "",
          "[Removed Lines]",
          "885:     update_ldap_configuration(options, properties, ldap_property_value_map)",
          "",
          "[Added Lines]",
          "939:     update_ldap_configuration(admin_login, admin_password, properties, ldap_property_value_map)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py": [
          "File: ambari-server/src/test/python/TestAmbariServer.py -> ambari-server/src/test/python/TestAmbariServer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:                   SRVR_ONE_WAY_SSL_PORT_PROPERTY, SRVR_TWO_WAY_SSL_PORT_PROPERTY",
          "110:                 from ambari_server.setupSecurity import adjust_directory_permissions, get_alias_string, get_ldap_event_spec_names, sync_ldap, \\",
          "111:                   configure_ldap_password, setup_ldap, REGEX_HOSTNAME_PORT, REGEX_TRUE_FALSE, REGEX_ANYTHING, setup_master_key, \\",
          "113:                 from ambari_server.userInput import get_YN_input, get_choice_string_input, get_validated_string_input, \\",
          "114:                   read_password",
          "115:                 from ambari_server_main import get_ulimit_open_files, ULIMIT_OPEN_FILES_KEY, ULIMIT_OPEN_FILES_DEFAULT",
          "",
          "[Removed Lines]",
          "112:                   setup_ambari_krb5_jaas",
          "",
          "[Added Lines]",
          "112:                   setup_ambari_krb5_jaas, LDAP_GENERIC, should_query_ldap_type, LdapPropTemplate, LdapDefault, LdapDefaultMap",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7131:   @patch(\"ambari_server.setupSecurity.get_ambari_properties\")",
          "7132:   @patch(\"ambari_server.setupSecurity.logger\")",
          "7133:   @patch(\"ambari_server.setupSecurity.is_server_runing\")",
          "7136:                                     search_file_message,",
          "7137:                                     update_properties_method,",
          "7138:                                     get_YN_input_method,",
          "",
          "[Removed Lines]",
          "7134:   @patch(\"ambari_server.setupSecurity.query_ldap_type\")",
          "7135:   def test_setup_ldap_invalid_input(self, query_ldap_type_method, is_server_runing_method, logger_mock, get_ambari_properties_method,",
          "",
          "[Added Lines]",
          "7134:   @patch(\"ambari_server.setupSecurity.get_ldap_properties_from_db\")",
          "7135:   def test_setup_ldap_invalid_input(self, get_ldap_properties_from_db_method, is_server_runing_method, logger_mock, get_ambari_properties_method,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7142:     sys.stdout = out",
          "7143:     is_server_runing_method.return_value = (True, 0)",
          "7144:     search_file_message.return_value = \"filepath\"",
          "7147:     properties = Properties();",
          "7148:     properties.process_pair(SECURITY_MASTER_KEY_LOCATION, \"filepath\")",
          "",
          "[Removed Lines]",
          "7145:     query_ldap_type_method.return_value = 'Generic LDAP'",
          "",
          "[Added Lines]",
          "7145:     get_ldap_properties_from_db_method.return_value = None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7151:     properties.process_pair(CLIENT_API_PORT_PROPERTY, '8080')",
          "7153:     get_ambari_properties_method.return_value = properties",
          "7155:     get_password_mock.side_effect = ['admin']",
          "7156:     set_silent(False)",
          "7157:     get_YN_input_method.return_value = True",
          "",
          "[Removed Lines]",
          "7154:     raw_input_mock.side_effect = ['a', '3', 'b', 'b', 'hody', 'b', '2', 'false', 'user', 'uid', 'group', 'cn', 'member', 'dn', 'base', 'follow', 'true', 'skip', 'false', 'false', 'admin']",
          "",
          "[Added Lines]",
          "7154:     raw_input_mock.side_effect = [LDAP_GENERIC, 'a', '3', 'b', 'b', 'hody', 'b', '2', 'false', 'user', 'uid', 'group', 'cn', 'member', 'dn', 'base', 'follow', 'true', 'skip', 'false', 'false', 'admin']",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7184:     self.assertEqual(1, get_password_mock.call_count)",
          "7186:     raw_input_mock.reset_mock()",
          "7188:     get_password_mock.reset_mock()",
          "7189:     get_password_mock.side_effect = ['admin']",
          "",
          "[Removed Lines]",
          "7187:     raw_input_mock.side_effect = ['a', '3', '', '', 'b', '2', 'false', 'user', 'uid', 'group', 'cn', 'member', 'dn', 'base', 'follow', 'true', 'skip', 'false', 'false', 'admin']",
          "",
          "[Added Lines]",
          "7187:     raw_input_mock.side_effect = [LDAP_GENERIC, 'a', '3', '', '', 'b', '2', 'false', 'user', 'uid', 'group', 'cn', 'member', 'dn', 'base', 'follow', 'true', 'skip', 'false', 'false', 'admin']",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7298:   @patch(\"os.path.exists\")",
          "7299:   @patch(\"ambari_server.setupSecurity.logger\")",
          "7300:   @patch(\"ambari_server.setupSecurity.is_server_runing\")",
          "7302:                       search_file_message,",
          "7303:                       get_validated_string_input_method,",
          "7304:                       configure_ldap_password_method, update_properties_method,",
          "",
          "[Removed Lines]",
          "7301:   def test_setup_ldap(self, is_server_runing_method, logger_mock, exists_method, read_password_method, get_ambari_properties_method,",
          "",
          "[Added Lines]",
          "7301:   @patch(\"ambari_server.setupSecurity.query_ldap_type\")",
          "7302:   @patch(\"ambari_server.setupSecurity.get_ldap_properties_from_db\")",
          "7303:   def test_setup_ldap(self, get_ldap_properties_from_db_method, query_ldap_type_method, is_server_runing_method, logger_mock, exists_method, read_password_method, get_ambari_properties_method,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7312:     options.ambari_admin_password = 'admin'",
          "7313:     is_server_runing_method.return_value = (True, 0)",
          "7315:     search_file_message.return_value = \"filepath\"",
          "7317:     properties = Properties();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7317:     get_ldap_properties_from_db_method.return_value = None",
          "7318:     query_ldap_type_method.return_value = LDAP_GENERIC",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7453:   @patch(\"ambari_server.setupSecurity.get_validated_string_input\")",
          "7454:   @patch(\"ambari_server.setupSecurity.get_ambari_properties\")",
          "7455:   @patch(\"ambari_server.setupSecurity.is_server_runing\")",
          "7457:                                                                 get_validated_string_input_method, read_password_method, get_YN_input_method, urlopen_method):",
          "7459:     out = StringIO.StringIO()",
          "7460:     sys.stdout = out",
          "7462:     is_server_runing_method.return_value = (True, 0)",
          "7464:     def yn_input_side_effect(*args, **kwargs):",
          "7465:       if 'TrustStore' in args[0]:",
          "",
          "[Removed Lines]",
          "7456:   def test_setup_ldap_primary_host_and_port_with_ldap_url_option(self, is_server_runing_method, get_ambari_properties_method,",
          "",
          "[Added Lines]",
          "7461:   @patch(\"ambari_server.setupSecurity.get_ldap_properties_from_db\")",
          "7462:   def test_setup_ldap_primary_host_and_port_with_ldap_url_option(self, get_ldap_properties_from_db_method, is_server_runing_method, get_ambari_properties_method,",
          "7469:     get_ldap_properties_from_db_method.return_value = None",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7494:     options =  self._create_empty_options_mock()",
          "7495:     options.ambari_admin_username = 'admin'",
          "7496:     options.ambari_admin_password = 'admin'",
          "7497:     options.ldap_url = \"a:1\"",
          "7499:     setup_ldap(options)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7504:     options.ldap_type = LDAP_GENERIC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7518:   @patch(\"ambari_server.setupSecurity.get_validated_string_input\")",
          "7519:   @patch(\"ambari_server.setupSecurity.get_ambari_properties\")",
          "7520:   @patch(\"ambari_server.setupSecurity.is_server_runing\")",
          "7522:                                                                 get_validated_string_input_method, get_YN_input_method, urlopen_method):",
          "7524:     out = StringIO.StringIO()",
          "7525:     sys.stdout = out",
          "7527:     is_server_runing_method.return_value = (True, 0)",
          "7529:     def yn_input_side_effect(*args, **kwargs):",
          "7530:       return False if 'TrustStore' in args[0] else True",
          "",
          "[Removed Lines]",
          "7521:   def test_setup_ldap_with_ambari_admin_username_and_password_options(self, is_server_runing_method, get_ambari_properties_method,",
          "",
          "[Added Lines]",
          "7529:   @patch(\"ambari_server.setupSecurity.get_ldap_properties_from_db\")",
          "7530:   def test_setup_ldap_with_ambari_admin_username_and_password_options(self, get_ldap_properties_from_db_method, is_server_runing_method, get_ambari_properties_method,",
          "7537:     get_ldap_properties_from_db_method.return_value = None",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7558:     options = self._create_empty_options_mock()",
          "7559:     options.ambari_admin_username = 'admin'",
          "7560:     options.ambari_admin_password = 'admin'",
          "7562:     setup_ldap(options)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7571:     options.ldap_type = LDAP_GENERIC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7572:   @patch(\"ambari_server.setupSecurity.get_validated_string_input\")",
          "7573:   @patch(\"ambari_server.setupSecurity.get_ambari_properties\")",
          "7574:   @patch(\"ambari_server.setupSecurity.is_server_runing\")",
          "7576:                                             get_validated_string_input_method, get_YN_input_method, urlopen_method):",
          "7577:     out = StringIO.StringIO()",
          "7578:     sys.stdout = out",
          "7580:     is_server_runing_method.return_value = (True, 0)",
          "7582:     def yn_input_side_effect(*args, **kwargs):",
          "7583:       if 'do you wish to use LDAP instead' in args[0]:",
          "",
          "[Removed Lines]",
          "7575:   def test_setup_ldap_enforcement_cli_option(self, is_server_runing_method, get_ambari_properties_method,",
          "",
          "[Added Lines]",
          "7586:   @patch(\"ambari_server.setupSecurity.query_ldap_type\")",
          "7587:   @patch(\"ambari_server.setupSecurity.get_ldap_properties_from_db\")",
          "7588:   def test_setup_ldap_enforcement_cli_option(self, get_ldap_properties_from_db_method, query_ldap_type_method, is_server_runing_method, get_ambari_properties_method,",
          "7594:     query_ldap_type_method.return_value = LDAP_GENERIC",
          "7595:     get_ldap_properties_from_db_method.return_value = None",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7622:     sys.stdout = sys.__stdout__",
          "7623:     pass",
          "7625:   @patch(\"urllib2.urlopen\")",
          "7626:   @patch(\"ambari_server.setupSecurity.get_validated_string_input\")",
          "7627:   @patch(\"ambari_server.setupSecurity.get_ambari_properties\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7640:   def test_should_query_ldap_type_returns_false_if_no_prop_requires_ldap_type(self):",
          "7641:     prop_template0 = MagicMock()",
          "7642:     prop_template0.should_query_ldap_type.return_value = False",
          "7643:     prop_template1 = MagicMock()",
          "7644:     prop_template1.should_query_ldap_type.return_value = False",
          "7645:     ldap_properties = [prop_template0, prop_template1]",
          "7646:     self.assertFalse(should_query_ldap_type(ldap_properties))",
          "7647:     pass",
          "7649:   def test_should_query_ldap_type_returns_true_if_any_prop_requires_ldap_type(self):",
          "7650:     prop_template0 = MagicMock()",
          "7651:     prop_template0.should_query_ldap_type.return_value = False",
          "7652:     prop_template1 = MagicMock()",
          "7653:     prop_template1.should_query_ldap_type.return_value = True",
          "7654:     ldap_properties = [prop_template0, prop_template1]",
          "7655:     self.assertTrue(should_query_ldap_type(ldap_properties))",
          "7656:     pass",
          "7658:   def test_LdapPropTemplate_should_query_ldap_type_returns_false_if_empty_prompt_is_allowed(self):",
          "7659:     prop_template = LdapPropTemplate(Properties(), None, \"any.prop\", \"Any prop:\", REGEX_ANYTHING, True)",
          "7660:     self.assertFalse(prop_template.should_query_ldap_type())",
          "7661:     pass",
          "7663:   def test_LdapPropTemplate_should_query_ldap_type_returns_false_if_option_value_is_present(self):",
          "7664:     prop_template = LdapPropTemplate(Properties(), 'value', \"any.prop\", \"Any prop:\", REGEX_ANYTHING, False)",
          "7665:     self.assertFalse(prop_template.should_query_ldap_type())",
          "7666:     pass",
          "7668:   def test_LdapPropTemplate_should_query_ldap_type_returns_false_if_property_value_is_present(self):",
          "7669:     properties = Properties()",
          "7670:     properties.process_pair(\"a.prop\", \"value\")",
          "7671:     prop_template = LdapPropTemplate(properties, None, \"a.prop\", \"Any prop:\", REGEX_ANYTHING, False, LdapDefaultMap({'key' : 'default_value'}))",
          "7672:     self.assertFalse(prop_template.should_query_ldap_type())",
          "7673:     pass",
          "7675:   def test_LdapPropTemplate_should_query_ldap_type_returns_false_if_default_is_not_depend_on_ldap_type(self):",
          "7676:     prop_template = LdapPropTemplate(Properties(), None, \"a.prop\", \"Any prop:\", REGEX_ANYTHING, False, LdapDefault('default_value'))",
          "7677:     self.assertFalse(prop_template.should_query_ldap_type())",
          "7678:     pass",
          "7680:   def test_LdapPropTemplate_should_query_ldap_type_returns_true_if_property_value_is_depends_on_ldap_type_and_no_option_and_property_is_given(self):",
          "7681:     prop_template = LdapPropTemplate(Properties(), None, \"a.prop\", \"Any prop:\", REGEX_ANYTHING, False, LdapDefaultMap({'key' : 'default_value'}))",
          "7682:     self.assertTrue(prop_template.should_query_ldap_type())",
          "7683:     pass",
          "7685:   def test_LdapPropTemplate_get_default_value_returns_stored_property_value_if_presents(self):",
          "7686:     properties = Properties()",
          "7687:     properties.process_pair(\"a.prop\", \"value\")",
          "7688:     prop_template = LdapPropTemplate(properties, None, \"a.prop\", \"Any prop:\", REGEX_ANYTHING, False, LdapDefaultMap('default_value'))",
          "7689:     self.assertEquals(prop_template.get_default_value('any_type'), \"value\")",
          "7690:     pass",
          "7692:   def test_LdapPropTemplate_get_default_value_returns_default_value_if_stored_property_value_not_exists(self):",
          "7693:     prop_template = LdapPropTemplate(Properties(), None, \"a.prop\", \"Any prop:\", REGEX_ANYTHING, False, LdapDefault('default_value'))",
          "7694:     self.assertEquals(prop_template.get_default_value('any_type'), \"default_value\")",
          "7695:     pass",
          "7697:   def test_LdapPropTemplate_get_default_value_returns_none_if_stored_property_value_not_exists_and_no_default_value_was_specified(self):",
          "7698:     prop_template = LdapPropTemplate(Properties(), None, \"a.prop\", \"Any prop:\", REGEX_ANYTHING, False)",
          "7699:     self.assertEquals(prop_template.get_default_value('any_type'), None)",
          "7700:     pass",
          "7702:   def test_LdapDefaultMap_get_default_value_returns_none_if_default_map_is_none(self):",
          "7703:     default_map = LdapDefaultMap(None)",
          "7704:     self.assertEquals(default_map.get_default_value('any_type'), None)",
          "7705:     pass",
          "7707:   def test_LdapDefaultMap_get_default_value_returns_none_if_key_not_present(self):",
          "7708:     default_map = LdapDefaultMap({LDAP_GENERIC : 'value'})",
          "7709:     self.assertEquals(default_map.get_default_value('non_existent_type'), None)",
          "7710:     pass",
          "7712:   def test_LdapDefaultMap_get_default_value_returns_key_value_if_key_presents(self):",
          "7713:     default_map = LdapDefaultMap({LDAP_GENERIC : 'value'})",
          "7714:     self.assertEquals(default_map.get_default_value(LDAP_GENERIC), 'value')",
          "7715:     pass",
          "",
          "---------------"
        ]
      }
    }
  ]
}