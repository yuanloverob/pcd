{
  "cve_id": "CVE-2019-14832",
  "cve_desc": "A flaw was found in the Keycloak REST API before version 8.0.0 where it would permit user access from a realm the user was not configured. An authenticated attacker with knowledge of a user id could use this flaw to access unauthorized information or to carry out further attacks.",
  "repo": "keycloak/keycloak",
  "patch_hash": "0b73685ccf3181115ae3936a578708630215ac23",
  "patch_info": {
    "commit_hash": "0b73685ccf3181115ae3936a578708630215ac23",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/0b73685ccf3181115ae3936a578708630215ac23",
    "files": [
      "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
      "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
    ],
    "message": "[KEYCLOAK-10822] - Prevent access to users from another realm",
    "before_after_code_files": [
      "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
      "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
    ]
  },
  "patch_diff": {
    "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java": [
      "File: model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java -> model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "194:         }",
      "196:         CachedUser cached = cache.get(id, CachedUser.class);",
      "197:         UserModel adapter = null;",
      "198:         if (cached == null) {",
      "199:             logger.trace(\"not cached\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:         if (cached != null && !cached.getRealm().equals(realm.getId())) {",
      "199:             cached = null;",
      "200:         }",
      "",
      "---------------"
    ],
    "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java": [
      "File: model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java -> model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "520:     @Override",
      "521:     public UserModel getUserById(String id, RealmModel realm) {",
      "522:         UserEntity userEntity = em.find(UserEntity.class, id);",
      "524:         return new UserAdapter(session, realm, em, userEntity);",
      "525:     }",
      "",
      "[Removed Lines]",
      "523:         if (userEntity == null) return null;",
      "",
      "[Added Lines]",
      "523:         if (userEntity == null || !realm.getId().equals(userEntity.getRealmId())) return null;",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java": [
      "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: import javax.mail.MessagingException;",
      "77: import javax.mail.internet.MimeMessage;",
      "78: import javax.ws.rs.ClientErrorException;",
      "79: import javax.ws.rs.core.Response;",
      "80: import javax.ws.rs.core.UriBuilder;",
      "81: import java.io.IOException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79: import javax.ws.rs.NotFoundException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:     }",
      "145:     private String createUser(UserRepresentation userRep) {",
      "146:         Response response = realm.users().create(userRep);",
      "147:         String createdId = ApiUtil.getCreatedId(response);",
      "148:         response.close();",
      "152:         getCleanup().addUserId(createdId);",
      "",
      "[Removed Lines]",
      "150:         assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.userResourcePath(createdId), userRep, ResourceType.USER);",
      "",
      "[Added Lines]",
      "147:         return createUser(userRep, true);",
      "148:     }",
      "150:     private String createUser(UserRepresentation userRep, boolean assertAdminEvent) {",
      "155:         if (assertAdminEvent) {",
      "156:             assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.userResourcePath(createdId), userRep,",
      "157:                     ResourceType.USER);",
      "158:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1460:             assertThat(user.getAttributes(), Matchers.nullValue());",
      "1461:         }",
      "1462:     }",
      "1464:     private void switchEditUsernameAllowedOn(boolean enable) {",
      "1465:         RealmRepresentation rep = realm.toRepresentation();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1472:     @Test",
      "1473:     public void testAccessUserFromOtherRealm() {",
      "1474:         RealmRepresentation firstRealm = new RealmRepresentation();",
      "1476:         firstRealm.setRealm(\"first-realm\");",
      "1478:         adminClient.realms().create(firstRealm);",
      "1480:         realm = adminClient.realm(firstRealm.getRealm());",
      "1481:         realmId = realm.toRepresentation().getId();",
      "1483:         UserRepresentation firstUser = new UserRepresentation();",
      "1485:         firstUser.setUsername(\"first\");",
      "1486:         firstUser.setEmail(\"first@first-realm.org\");",
      "1488:         firstUser.setId(createUser(firstUser, false));",
      "1490:         RealmRepresentation secondRealm = new RealmRepresentation();",
      "1492:         secondRealm.setRealm(\"second-realm\");",
      "1494:         adminClient.realms().create(secondRealm);",
      "1496:         adminClient.realm(firstRealm.getRealm()).users().get(firstUser.getId()).update(firstUser);",
      "1498:         try {",
      "1499:             adminClient.realm(secondRealm.getRealm()).users().get(firstUser.getId()).toRepresentation();",
      "1500:             fail(\"Should not have access to firstUser from another realm\");",
      "1501:         } catch (NotFoundException nfe) {",
      "1503:         }",
      "1504:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6acb87bd7a224dfe6d3f3db783520b9b1310f6db",
      "candidate_info": {
        "commit_hash": "6acb87bd7a224dfe6d3f3db783520b9b1310f6db",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/6acb87bd7a224dfe6d3f3db783520b9b1310f6db",
        "files": [
          "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
          "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
        ],
        "message": "[KEYCLOAK-10822] - Prevent access to users from another realm",
        "before_after_code_files": [
          "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
          "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
            "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
          ],
          "candidate": [
            "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
            "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
          ]
        }
      },
      "candidate_diff": {
        "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java": [
          "File: model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java -> model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         }",
          "196:         CachedUser cached = cache.get(id, CachedUser.class);",
          "197:         UserModel adapter = null;",
          "198:         if (cached == null) {",
          "199:             logger.trace(\"not cached\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:         if (cached != null && !cached.getRealm().equals(realm.getId())) {",
          "199:             cached = null;",
          "200:         }",
          "",
          "---------------"
        ],
        "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java": [
          "File: model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java -> model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:     @Override",
          "523:     public UserModel getUserById(String id, RealmModel realm) {",
          "524:         UserEntity userEntity = em.find(UserEntity.class, id);",
          "526:         return new UserAdapter(session, realm, em, userEntity);",
          "527:     }",
          "",
          "[Removed Lines]",
          "525:         if (userEntity == null) return null;",
          "",
          "[Added Lines]",
          "525:         if (userEntity == null || !realm.getId().equals(userEntity.getRealmId())) return null;",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: import javax.mail.MessagingException;",
          "77: import javax.mail.internet.MimeMessage;",
          "78: import javax.ws.rs.ClientErrorException;",
          "79: import javax.ws.rs.core.Response;",
          "80: import javax.ws.rs.core.UriBuilder;",
          "81: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: import javax.ws.rs.NotFoundException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     }",
          "145:     private String createUser(UserRepresentation userRep) {",
          "146:         Response response = realm.users().create(userRep);",
          "147:         String createdId = ApiUtil.getCreatedId(response);",
          "148:         response.close();",
          "152:         getCleanup().addUserId(createdId);",
          "",
          "[Removed Lines]",
          "150:         assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.userResourcePath(createdId), userRep, ResourceType.USER);",
          "",
          "[Added Lines]",
          "147:         return createUser(userRep, true);",
          "148:     }",
          "150:     private String createUser(UserRepresentation userRep, boolean assertAdminEvent) {",
          "155:         if (assertAdminEvent) {",
          "156:             assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.userResourcePath(createdId), userRep,",
          "157:                     ResourceType.USER);",
          "158:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1460:             assertThat(user.getAttributes(), Matchers.nullValue());",
          "1461:         }",
          "1462:     }",
          "1464:     private void switchEditUsernameAllowedOn(boolean enable) {",
          "1465:         RealmRepresentation rep = realm.toRepresentation();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1472:     @Test",
          "1473:     public void testAccessUserFromOtherRealm() {",
          "1474:         RealmRepresentation firstRealm = new RealmRepresentation();",
          "1476:         firstRealm.setRealm(\"first-realm\");",
          "1478:         adminClient.realms().create(firstRealm);",
          "1480:         realm = adminClient.realm(firstRealm.getRealm());",
          "1481:         realmId = realm.toRepresentation().getId();",
          "1483:         UserRepresentation firstUser = new UserRepresentation();",
          "1485:         firstUser.setUsername(\"first\");",
          "1486:         firstUser.setEmail(\"first@first-realm.org\");",
          "1488:         firstUser.setId(createUser(firstUser, false));",
          "1490:         RealmRepresentation secondRealm = new RealmRepresentation();",
          "1492:         secondRealm.setRealm(\"second-realm\");",
          "1494:         adminClient.realms().create(secondRealm);",
          "1496:         adminClient.realm(firstRealm.getRealm()).users().get(firstUser.getId()).update(firstUser);",
          "1498:         try {",
          "1499:             adminClient.realm(secondRealm.getRealm()).users().get(firstUser.getId()).toRepresentation();",
          "1500:             fail(\"Should not have access to firstUser from another realm\");",
          "1501:         } catch (NotFoundException nfe) {",
          "1503:         }",
          "1504:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b73685ccf3181115ae3936a578708630215ac23",
      "candidate_info": {
        "commit_hash": "0b73685ccf3181115ae3936a578708630215ac23",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/0b73685ccf3181115ae3936a578708630215ac23",
        "files": [
          "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
          "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
        ],
        "message": "[KEYCLOAK-10822] - Prevent access to users from another realm",
        "before_after_code_files": [
          "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
          "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
            "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
          ],
          "candidate": [
            "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
            "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"
          ]
        }
      },
      "candidate_diff": {
        "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java||model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java": [
          "File: model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java -> model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         }",
          "196:         CachedUser cached = cache.get(id, CachedUser.class);",
          "197:         UserModel adapter = null;",
          "198:         if (cached == null) {",
          "199:             logger.trace(\"not cached\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:         if (cached != null && !cached.getRealm().equals(realm.getId())) {",
          "199:             cached = null;",
          "200:         }",
          "",
          "---------------"
        ],
        "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java||model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java": [
          "File: model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java -> model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     @Override",
          "521:     public UserModel getUserById(String id, RealmModel realm) {",
          "522:         UserEntity userEntity = em.find(UserEntity.class, id);",
          "524:         return new UserAdapter(session, realm, em, userEntity);",
          "525:     }",
          "",
          "[Removed Lines]",
          "523:         if (userEntity == null) return null;",
          "",
          "[Added Lines]",
          "523:         if (userEntity == null || !realm.getId().equals(userEntity.getRealmId())) return null;",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: import javax.mail.MessagingException;",
          "77: import javax.mail.internet.MimeMessage;",
          "78: import javax.ws.rs.ClientErrorException;",
          "79: import javax.ws.rs.core.Response;",
          "80: import javax.ws.rs.core.UriBuilder;",
          "81: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: import javax.ws.rs.NotFoundException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     }",
          "145:     private String createUser(UserRepresentation userRep) {",
          "146:         Response response = realm.users().create(userRep);",
          "147:         String createdId = ApiUtil.getCreatedId(response);",
          "148:         response.close();",
          "152:         getCleanup().addUserId(createdId);",
          "",
          "[Removed Lines]",
          "150:         assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.userResourcePath(createdId), userRep, ResourceType.USER);",
          "",
          "[Added Lines]",
          "147:         return createUser(userRep, true);",
          "148:     }",
          "150:     private String createUser(UserRepresentation userRep, boolean assertAdminEvent) {",
          "155:         if (assertAdminEvent) {",
          "156:             assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.userResourcePath(createdId), userRep,",
          "157:                     ResourceType.USER);",
          "158:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1460:             assertThat(user.getAttributes(), Matchers.nullValue());",
          "1461:         }",
          "1462:     }",
          "1464:     private void switchEditUsernameAllowedOn(boolean enable) {",
          "1465:         RealmRepresentation rep = realm.toRepresentation();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1472:     @Test",
          "1473:     public void testAccessUserFromOtherRealm() {",
          "1474:         RealmRepresentation firstRealm = new RealmRepresentation();",
          "1476:         firstRealm.setRealm(\"first-realm\");",
          "1478:         adminClient.realms().create(firstRealm);",
          "1480:         realm = adminClient.realm(firstRealm.getRealm());",
          "1481:         realmId = realm.toRepresentation().getId();",
          "1483:         UserRepresentation firstUser = new UserRepresentation();",
          "1485:         firstUser.setUsername(\"first\");",
          "1486:         firstUser.setEmail(\"first@first-realm.org\");",
          "1488:         firstUser.setId(createUser(firstUser, false));",
          "1490:         RealmRepresentation secondRealm = new RealmRepresentation();",
          "1492:         secondRealm.setRealm(\"second-realm\");",
          "1494:         adminClient.realms().create(secondRealm);",
          "1496:         adminClient.realm(firstRealm.getRealm()).users().get(firstUser.getId()).update(firstUser);",
          "1498:         try {",
          "1499:             adminClient.realm(secondRealm.getRealm()).users().get(firstUser.getId()).toRepresentation();",
          "1500:             fail(\"Should not have access to firstUser from another realm\");",
          "1501:         } catch (NotFoundException nfe) {",
          "1503:         }",
          "1504:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}