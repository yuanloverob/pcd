{
  "cve_id": "CVE-2020-15187",
  "cve_desc": "In Helm before versions 2.16.11 and 3.3.2, a Helm plugin can contain duplicates of the same entry, with the last one always used. If a plugin is compromised, this lowers the level of access that an attacker needs to modify a plugin's install hooks, causing a local execution attack. To perform this attack, an attacker must have write access to the git repository or plugin archive (.tgz) while being downloaded (which can occur during a MITM attack on a non-SSL connection). This issue has been patched in Helm 2.16.11 and Helm 3.3.2. As a possible workaround make sure to install plugins using a secure connection protocol like SSL.",
  "repo": "helm/helm",
  "patch_hash": "d9ef5ce8bad512e325390c0011be1244b8380e4b",
  "patch_info": {
    "commit_hash": "d9ef5ce8bad512e325390c0011be1244b8380e4b",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/d9ef5ce8bad512e325390c0011be1244b8380e4b",
    "files": [
      "pkg/plugin/installer/local_installer_test.go",
      "pkg/plugin/installer/vcs_installer_test.go",
      "pkg/plugin/plugin.go",
      "pkg/plugin/plugin_test.go",
      "pkg/plugin/testdata/plugdir/bad/duplicate-entries/plugin.yaml",
      "pkg/plugin/testdata/plugdir/good/downloader/plugin.yaml",
      "pkg/plugin/testdata/plugdir/good/echo/plugin.yaml",
      "pkg/plugin/testdata/plugdir/good/hello/hello.sh",
      "pkg/plugin/testdata/plugdir/good/hello/plugin.yaml"
    ],
    "message": "Merge pull request from GHSA-c52f-pq47-2r9j\n\nswitched to stricter YAML parsing on plugin metadata files",
    "before_after_code_files": [
      "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
      "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
      "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
      "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
    ]
  },
  "patch_diff": {
    "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go": [
      "File: pkg/plugin/installer/local_installer_test.go -> pkg/plugin/installer/local_installer_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:   t.Fatal(err)",
      "38:  }",
      "41:  i, err := NewForSource(source, \"\")",
      "42:  if err != nil {",
      "43:   t.Fatalf(\"unexpected error: %s\", err)",
      "",
      "[Removed Lines]",
      "40:  source := \"../testdata/plugdir/echo\"",
      "",
      "[Added Lines]",
      "40:  source := \"../testdata/plugdir/good/echo\"",
      "",
      "---------------"
    ],
    "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go": [
      "File: pkg/plugin/installer/vcs_installer_test.go -> pkg/plugin/installer/vcs_installer_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:  }",
      "58:  source := \"https://github.com/adamreese/helm-env\"",
      "60:  repo := &testRepo{",
      "61:   local: testRepoPath,",
      "62:   tags:  []string{\"0.1.0\", \"0.1.1\"},",
      "",
      "[Removed Lines]",
      "59:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/echo\")",
      "",
      "[Added Lines]",
      "59:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/good/echo\")",
      "",
      "---------------"
    ],
    "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
      "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "98:  Downloaders []Downloaders `json:\"downloaders\"`",
      "99: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104:  UseTunnelDeprecated bool `json:\"useTunnel,omitempty\"`",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "200:  }",
      "202:  plug := &Plugin{Dir: dirname}",
      "204:   return nil, errors.Wrapf(err, \"failed to load plugin at %q\", pluginfile)",
      "205:  }",
      "206:  return plug, validatePluginData(plug, pluginfile)",
      "",
      "[Removed Lines]",
      "203:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
      "",
      "[Added Lines]",
      "209:  if err := yaml.UnmarshalStrict(data, &plug.Metadata); err != nil {",
      "",
      "---------------"
    ],
    "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
      "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "178: }",
      "180: func TestLoadDir(t *testing.T) {",
      "182:  plug, err := LoadDir(dirname)",
      "183:  if err != nil {",
      "184:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
      "",
      "[Removed Lines]",
      "181:  dirname := \"testdata/plugdir/hello\"",
      "",
      "[Added Lines]",
      "181:  dirname := \"testdata/plugdir/good/hello\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "205:  }",
      "206: }",
      "208: func TestDownloader(t *testing.T) {",
      "210:  plug, err := LoadDir(dirname)",
      "211:  if err != nil {",
      "212:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
      "",
      "[Removed Lines]",
      "209:  dirname := \"testdata/plugdir/downloader\"",
      "",
      "[Added Lines]",
      "208: func TestLoadDirDuplicateEntries(t *testing.T) {",
      "209:  dirname := \"testdata/plugdir/bad/duplicate-entries\"",
      "210:  if _, err := LoadDir(dirname); err == nil {",
      "211:   t.Errorf(\"successfully loaded plugin with duplicate entries when it should've failed\")",
      "212:  }",
      "213: }",
      "216:  dirname := \"testdata/plugdir/good/downloader\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "244:   t.Fatalf(\"expected empty dir to have 0 plugins\")",
      "245:  }",
      "248:  plugs, err := LoadAll(basedir)",
      "249:  if err != nil {",
      "250:   t.Fatalf(\"Could not load %q: %s\", basedir, err)",
      "",
      "[Removed Lines]",
      "247:  basedir := \"testdata/plugdir\"",
      "",
      "[Added Lines]",
      "254:  basedir := \"testdata/plugdir/good\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "288:   },",
      "289:   {",
      "290:    name:     \"normal\",",
      "292:    expected: 3,",
      "293:   },",
      "294:  }",
      "",
      "[Removed Lines]",
      "291:    plugdirs: \"./testdata/plugdir\",",
      "",
      "[Added Lines]",
      "298:    plugdirs: \"./testdata/plugdir/good\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2ede29480b507b7d8bb152dd8b6b86248b00658",
      "candidate_info": {
        "commit_hash": "f2ede29480b507b7d8bb152dd8b6b86248b00658",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/f2ede29480b507b7d8bb152dd8b6b86248b00658",
        "files": [
          "pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go",
          "pkg/plugin/testdata/plugdir/bad/duplicate-entries/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/downloader/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/echo/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/hello/hello.sh",
          "pkg/plugin/testdata/plugdir/good/hello/plugin.yaml"
        ],
        "message": "Merge pull request from GHSA-c52f-pq47-2r9j\n\nvalidate plugin metadata before loading",
        "before_after_code_files": [
          "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ],
          "candidate": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go": [
          "File: pkg/plugin/installer/local_installer_test.go -> pkg/plugin/installer/local_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   t.Fatal(err)",
          "49:  }",
          "52:  i, err := NewForSource(source, \"\", home)",
          "53:  if err != nil {",
          "54:   t.Errorf(\"unexpected error: %s\", err)",
          "",
          "[Removed Lines]",
          "51:  source := \"../testdata/plugdir/echo\"",
          "",
          "[Added Lines]",
          "51:  source := \"../testdata/plugdir/good/echo\"",
          "",
          "---------------"
        ],
        "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go": [
          "File: pkg/plugin/installer/vcs_installer_test.go -> pkg/plugin/installer/vcs_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  }",
          "63:  source := \"https://github.com/adamreese/helm-env\"",
          "65:  repo := &testRepo{",
          "66:   local: testRepoPath,",
          "67:   tags:  []string{\"0.1.0\", \"0.1.1\"},",
          "",
          "[Removed Lines]",
          "64:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/echo\")",
          "",
          "[Added Lines]",
          "64:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/good/echo\")",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"path/filepath\"",
          "23:  \"strings\"",
          "27:  \"github.com/ghodss/yaml\"",
          "28: )",
          "30: const pluginFileName = \"plugin.yaml\"",
          "",
          "[Removed Lines]",
          "25:  helm_env \"k8s.io/helm/pkg/helm/environment\"",
          "",
          "[Added Lines]",
          "26:  yaml2 \"gopkg.in/yaml.v2\"",
          "28:  helm_env \"k8s.io/helm/pkg/helm/environment\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:  }",
          "122:  plug := &Plugin{Dir: dirname}",
          "123:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
          "124:   return nil, err",
          "125:  }",
          "126:  return plug, nil",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:  if err := validateMeta(data); err != nil {",
          "125:   return nil, err",
          "126:  }",
          "133: func validateMeta(data []byte) error {",
          "135:  return yaml2.UnmarshalStrict(data, &Metadata{})",
          "136: }",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
          "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: }",
          "66: func TestLoadDir(t *testing.T) {",
          "68:  plug, err := LoadDir(dirname)",
          "69:  if err != nil {",
          "70:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "67:  dirname := \"testdata/plugdir/hello\"",
          "",
          "[Added Lines]",
          "67:  dirname := \"testdata/plugdir/good/hello\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  }",
          "93: }",
          "95: func TestDownloader(t *testing.T) {",
          "97:  plug, err := LoadDir(dirname)",
          "98:  if err != nil {",
          "99:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "96:  dirname := \"testdata/plugdir/downloader\"",
          "",
          "[Added Lines]",
          "95: func TestLoadDirDuplicateEntries(t *testing.T) {",
          "96:  dirname := \"testdata/plugdir/bad/duplicate-entries\"",
          "97:  if _, err := LoadDir(dirname); err == nil {",
          "98:   t.Errorf(\"successfully loaded plugin with duplicate entries when it should've failed\")",
          "99:  }",
          "100: }",
          "103:  dirname := \"testdata/plugdir/good/downloader\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   t.Fatalf(\"expected empty dir to have 0 plugins\")",
          "132:  }",
          "135:  plugs, err := LoadAll(basedir)",
          "136:  if err != nil {",
          "137:   t.Fatalf(\"Could not load %q: %s\", basedir, err)",
          "",
          "[Removed Lines]",
          "134:  basedir := \"testdata/plugdir\"",
          "",
          "[Added Lines]",
          "141:  basedir := \"testdata/plugdir/good\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8d6b01d72c9604e43ee70d0d78fadd54c2d8499",
      "candidate_info": {
        "commit_hash": "c8d6b01d72c9604e43ee70d0d78fadd54c2d8499",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/c8d6b01d72c9604e43ee70d0d78fadd54c2d8499",
        "files": [
          "pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go",
          "pkg/plugin/testdata/plugdir/bad/duplicate-entries/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/downloader/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/echo/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/hello/hello.sh",
          "pkg/plugin/testdata/plugdir/good/hello/plugin.yaml"
        ],
        "message": "validate plugin metadata before loading\n\nSigned-off-by: Matthew Fisher <matt.fisher@microsoft.com>\n(cherry picked from commit b0296c0522e837d65f944beefa3fb64fd08ac304)",
        "before_after_code_files": [
          "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ],
          "candidate": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go": [
          "File: pkg/plugin/installer/local_installer_test.go -> pkg/plugin/installer/local_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   t.Fatal(err)",
          "49:  }",
          "52:  i, err := NewForSource(source, \"\", home)",
          "53:  if err != nil {",
          "54:   t.Errorf(\"unexpected error: %s\", err)",
          "",
          "[Removed Lines]",
          "51:  source := \"../testdata/plugdir/echo\"",
          "",
          "[Added Lines]",
          "51:  source := \"../testdata/plugdir/good/echo\"",
          "",
          "---------------"
        ],
        "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go": [
          "File: pkg/plugin/installer/vcs_installer_test.go -> pkg/plugin/installer/vcs_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  }",
          "63:  source := \"https://github.com/adamreese/helm-env\"",
          "65:  repo := &testRepo{",
          "66:   local: testRepoPath,",
          "67:   tags:  []string{\"0.1.0\", \"0.1.1\"},",
          "",
          "[Removed Lines]",
          "64:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/echo\")",
          "",
          "[Added Lines]",
          "64:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/good/echo\")",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"path/filepath\"",
          "23:  \"strings\"",
          "27:  \"github.com/ghodss/yaml\"",
          "28: )",
          "30: const pluginFileName = \"plugin.yaml\"",
          "",
          "[Removed Lines]",
          "25:  helm_env \"k8s.io/helm/pkg/helm/environment\"",
          "",
          "[Added Lines]",
          "26:  yaml2 \"gopkg.in/yaml.v2\"",
          "28:  helm_env \"k8s.io/helm/pkg/helm/environment\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:  }",
          "122:  plug := &Plugin{Dir: dirname}",
          "123:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
          "124:   return nil, err",
          "125:  }",
          "126:  return plug, nil",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:  if err := validateMeta(data); err != nil {",
          "125:   return nil, err",
          "126:  }",
          "133: func validateMeta(data []byte) error {",
          "135:  return yaml2.UnmarshalStrict(data, &Metadata{})",
          "136: }",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
          "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: }",
          "66: func TestLoadDir(t *testing.T) {",
          "68:  plug, err := LoadDir(dirname)",
          "69:  if err != nil {",
          "70:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "67:  dirname := \"testdata/plugdir/hello\"",
          "",
          "[Added Lines]",
          "67:  dirname := \"testdata/plugdir/good/hello\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  }",
          "93: }",
          "95: func TestDownloader(t *testing.T) {",
          "97:  plug, err := LoadDir(dirname)",
          "98:  if err != nil {",
          "99:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "96:  dirname := \"testdata/plugdir/downloader\"",
          "",
          "[Added Lines]",
          "95: func TestLoadDirDuplicateEntries(t *testing.T) {",
          "96:  dirname := \"testdata/plugdir/bad/duplicate-entries\"",
          "97:  if _, err := LoadDir(dirname); err == nil {",
          "98:   t.Errorf(\"successfully loaded plugin with duplicate entries when it should've failed\")",
          "99:  }",
          "100: }",
          "103:  dirname := \"testdata/plugdir/good/downloader\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   t.Fatalf(\"expected empty dir to have 0 plugins\")",
          "132:  }",
          "135:  plugs, err := LoadAll(basedir)",
          "136:  if err != nil {",
          "137:   t.Fatalf(\"Could not load %q: %s\", basedir, err)",
          "",
          "[Removed Lines]",
          "134:  basedir := \"testdata/plugdir\"",
          "",
          "[Added Lines]",
          "141:  basedir := \"testdata/plugdir/good\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0296c0522e837d65f944beefa3fb64fd08ac304",
      "candidate_info": {
        "commit_hash": "b0296c0522e837d65f944beefa3fb64fd08ac304",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/b0296c0522e837d65f944beefa3fb64fd08ac304",
        "files": [
          "pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go",
          "pkg/plugin/testdata/plugdir/bad/duplicate-entries/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/downloader/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/echo/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/hello/hello.sh",
          "pkg/plugin/testdata/plugdir/good/hello/plugin.yaml"
        ],
        "message": "validate plugin metadata before loading\n\nSigned-off-by: Matthew Fisher <matt.fisher@microsoft.com>",
        "before_after_code_files": [
          "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ],
          "candidate": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go": [
          "File: pkg/plugin/installer/local_installer_test.go -> pkg/plugin/installer/local_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   t.Fatal(err)",
          "49:  }",
          "52:  i, err := NewForSource(source, \"\", home)",
          "53:  if err != nil {",
          "54:   t.Errorf(\"unexpected error: %s\", err)",
          "",
          "[Removed Lines]",
          "51:  source := \"../testdata/plugdir/echo\"",
          "",
          "[Added Lines]",
          "51:  source := \"../testdata/plugdir/good/echo\"",
          "",
          "---------------"
        ],
        "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go": [
          "File: pkg/plugin/installer/vcs_installer_test.go -> pkg/plugin/installer/vcs_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  }",
          "63:  source := \"https://github.com/adamreese/helm-env\"",
          "65:  repo := &testRepo{",
          "66:   local: testRepoPath,",
          "67:   tags:  []string{\"0.1.0\", \"0.1.1\"},",
          "",
          "[Removed Lines]",
          "64:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/echo\")",
          "",
          "[Added Lines]",
          "64:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/good/echo\")",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"path/filepath\"",
          "22:  \"strings\"",
          "26:  \"github.com/ghodss/yaml\"",
          "27: )",
          "29: const pluginFileName = \"plugin.yaml\"",
          "",
          "[Removed Lines]",
          "24:  helm_env \"k8s.io/helm/pkg/helm/environment\"",
          "",
          "[Added Lines]",
          "25:  yaml2 \"gopkg.in/yaml.v2\"",
          "27:  helm_env \"k8s.io/helm/pkg/helm/environment\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:  }",
          "121:  plug := &Plugin{Dir: dirname}",
          "122:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
          "123:   return nil, err",
          "124:  }",
          "125:  return plug, nil",
          "126: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:  if err := validateMeta(data); err != nil {",
          "124:   return nil, err",
          "125:  }",
          "132: func validateMeta(data []byte) error {",
          "134:  return yaml2.UnmarshalStrict(data, &Metadata{})",
          "135: }",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
          "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: }",
          "66: func TestLoadDir(t *testing.T) {",
          "68:  plug, err := LoadDir(dirname)",
          "69:  if err != nil {",
          "70:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "67:  dirname := \"testdata/plugdir/hello\"",
          "",
          "[Added Lines]",
          "67:  dirname := \"testdata/plugdir/good/hello\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  }",
          "93: }",
          "95: func TestDownloader(t *testing.T) {",
          "97:  plug, err := LoadDir(dirname)",
          "98:  if err != nil {",
          "99:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "96:  dirname := \"testdata/plugdir/downloader\"",
          "",
          "[Added Lines]",
          "95: func TestLoadDirDuplicateEntries(t *testing.T) {",
          "96:  dirname := \"testdata/plugdir/bad/duplicate-entries\"",
          "97:  if _, err := LoadDir(dirname); err == nil {",
          "98:   t.Errorf(\"successfully loaded plugin with duplicate entries when it should've failed\")",
          "99:  }",
          "100: }",
          "103:  dirname := \"testdata/plugdir/good/downloader\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   t.Fatalf(\"expected empty dir to have 0 plugins\")",
          "132:  }",
          "135:  plugs, err := LoadAll(basedir)",
          "136:  if err != nil {",
          "137:   t.Fatalf(\"Could not load %q: %s\", basedir, err)",
          "",
          "[Removed Lines]",
          "134:  basedir := \"testdata/plugdir\"",
          "",
          "[Added Lines]",
          "141:  basedir := \"testdata/plugdir/good\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac7c07c37d87e09797f714fb57aa5e9cb99d9450",
      "candidate_info": {
        "commit_hash": "ac7c07c37d87e09797f714fb57aa5e9cb99d9450",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/ac7c07c37d87e09797f714fb57aa5e9cb99d9450",
        "files": [
          "pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go",
          "pkg/plugin/testdata/plugdir/bad/duplicate-entries/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/downloader/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/echo/plugin.yaml",
          "pkg/plugin/testdata/plugdir/good/hello/hello.sh",
          "pkg/plugin/testdata/plugdir/good/hello/plugin.yaml"
        ],
        "message": "switched to stricter YAML parsing on plugin metadata files\n\nSigned-off-by: Matthew Fisher <matt.fisher@microsoft.com>\n(cherry picked from commit 6eeec4a00241b7da1acaddcbf3278355de1f216e)",
        "before_after_code_files": [
          "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
          "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ],
          "candidate": [
            "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go",
            "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/plugin/installer/local_installer_test.go||pkg/plugin/installer/local_installer_test.go": [
          "File: pkg/plugin/installer/local_installer_test.go -> pkg/plugin/installer/local_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   t.Fatal(err)",
          "38:  }",
          "41:  i, err := NewForSource(source, \"\")",
          "42:  if err != nil {",
          "43:   t.Fatalf(\"unexpected error: %s\", err)",
          "",
          "[Removed Lines]",
          "40:  source := \"../testdata/plugdir/echo\"",
          "",
          "[Added Lines]",
          "40:  source := \"../testdata/plugdir/good/echo\"",
          "",
          "---------------"
        ],
        "pkg/plugin/installer/vcs_installer_test.go||pkg/plugin/installer/vcs_installer_test.go": [
          "File: pkg/plugin/installer/vcs_installer_test.go -> pkg/plugin/installer/vcs_installer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  }",
          "58:  source := \"https://github.com/adamreese/helm-env\"",
          "60:  repo := &testRepo{",
          "61:   local: testRepoPath,",
          "62:   tags:  []string{\"0.1.0\", \"0.1.1\"},",
          "",
          "[Removed Lines]",
          "59:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/echo\")",
          "",
          "[Added Lines]",
          "59:  testRepoPath, _ := filepath.Abs(\"../testdata/plugdir/good/echo\")",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  Downloaders []Downloaders `json:\"downloaders\"`",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  UseTunnelDeprecated bool `json:\"useTunnel,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:  }",
          "202:  plug := &Plugin{Dir: dirname}",
          "204:   return nil, errors.Wrapf(err, \"failed to load plugin at %q\", pluginfile)",
          "205:  }",
          "206:  return plug, validatePluginData(plug, pluginfile)",
          "",
          "[Removed Lines]",
          "203:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
          "",
          "[Added Lines]",
          "209:  if err := yaml.UnmarshalStrict(data, &plug.Metadata); err != nil {",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
          "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: }",
          "180: func TestLoadDir(t *testing.T) {",
          "182:  plug, err := LoadDir(dirname)",
          "183:  if err != nil {",
          "184:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "181:  dirname := \"testdata/plugdir/hello\"",
          "",
          "[Added Lines]",
          "181:  dirname := \"testdata/plugdir/good/hello\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:  }",
          "206: }",
          "208: func TestDownloader(t *testing.T) {",
          "210:  plug, err := LoadDir(dirname)",
          "211:  if err != nil {",
          "212:   t.Fatalf(\"error loading Hello plugin: %s\", err)",
          "",
          "[Removed Lines]",
          "209:  dirname := \"testdata/plugdir/downloader\"",
          "",
          "[Added Lines]",
          "208: func TestLoadDirDuplicateEntries(t *testing.T) {",
          "209:  dirname := \"testdata/plugdir/bad/duplicate-entries\"",
          "210:  if _, err := LoadDir(dirname); err == nil {",
          "211:   t.Errorf(\"successfully loaded plugin with duplicate entries when it should've failed\")",
          "212:  }",
          "213: }",
          "216:  dirname := \"testdata/plugdir/good/downloader\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:   t.Fatalf(\"expected empty dir to have 0 plugins\")",
          "245:  }",
          "248:  plugs, err := LoadAll(basedir)",
          "249:  if err != nil {",
          "250:   t.Fatalf(\"Could not load %q: %s\", basedir, err)",
          "",
          "[Removed Lines]",
          "247:  basedir := \"testdata/plugdir\"",
          "",
          "[Added Lines]",
          "254:  basedir := \"testdata/plugdir/good\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288:   },",
          "289:   {",
          "290:    name:     \"normal\",",
          "292:    expected: 3,",
          "293:   },",
          "294:  }",
          "",
          "[Removed Lines]",
          "291:    plugdirs: \"./testdata/plugdir\",",
          "",
          "[Added Lines]",
          "298:    plugdirs: \"./testdata/plugdir/good\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}