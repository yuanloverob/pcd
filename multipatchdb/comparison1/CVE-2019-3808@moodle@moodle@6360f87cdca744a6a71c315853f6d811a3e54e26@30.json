{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5dec930fb0107483ddf712b92ab458cdbbfaf008",
      "candidate_info": {
        "commit_hash": "5dec930fb0107483ddf712b92ab458cdbbfaf008",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5dec930fb0107483ddf712b92ab458cdbbfaf008",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "privacy/tests/provider_test.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-62459' of git://github.com/stronk7/moodle",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "privacy/tests/provider_test.php||privacy/tests/provider_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3208:         upgrade_main_savepoint(true, 2019041900.00);",
          "3209:     }",
          "3211:     return true;",
          "3212: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3211:     if ($oldversion < 2019042200.01) {",
          "3214:         $table = new xmldb_table('role_sortorder');",
          "3217:         if ($dbman->table_exists($table)) {",
          "3218:             $dbman->drop_table($table);",
          "3219:         }",
          "3222:         upgrade_main_savepoint(true, 2019042200.01);",
          "3223:     }",
          "",
          "---------------"
        ],
        "privacy/tests/provider_test.php||privacy/tests/provider_test.php": [
          "File: privacy/tests/provider_test.php -> privacy/tests/provider_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:             $tablelist = $structure->getTables();",
          "305:             foreach ($tablelist as $table) {",
          "310:                 if ($fields = $this->get_userid_fields($table)) {",
          "311:                     $tables[$table->getName()] = '  - ' . $table->getName() . ' (' . join(', ', $fields) . ')';",
          "312:                 }",
          "",
          "[Removed Lines]",
          "306:                 if ($table->getName() === 'role_sortorder') {",
          "308:                     continue;",
          "309:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019042200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "599703e83dcdb7ba34bfdb486105218bfda75887",
      "candidate_info": {
        "commit_hash": "599703e83dcdb7ba34bfdb486105218bfda75887",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/599703e83dcdb7ba34bfdb486105218bfda75887",
        "files": [
          "version.php"
        ],
        "message": "Moodle release 3.6rc1",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018112300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6beta+ (Build: 20181123)'; // Human-friendly version name",
          "39: $maturity = MATURITY_BETA;             // This version's maturity level.",
          "",
          "[Added Lines]",
          "32: $version  = 2018112500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6rc1 (Build: 20181125)'; // Human-friendly version name",
          "39: $maturity = MATURITY_RC;             // This version's maturity level.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f997f9bd7edc6ea0b4371804f9a78b84f866e51",
      "candidate_info": {
        "commit_hash": "9f997f9bd7edc6ea0b4371804f9a78b84f866e51",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9f997f9bd7edc6ea0b4371804f9a78b84f866e51",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.8dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019101800.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191018)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019102200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191022)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0e137c53982ae566a7e51147664166385236920",
      "candidate_info": {
        "commit_hash": "f0e137c53982ae566a7e51147664166385236920",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f0e137c53982ae566a7e51147664166385236920",
        "files": [
          "group/group_form.php",
          "group/lib.php",
          "group/tests/lib_test.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "message/classes/api.php",
          "message/classes/helper.php",
          "message/tests/api_test.php",
          "version.php"
        ],
        "message": "MDL-63280 core: minor changes after review\n\n- Fixed reference to non-existent column 'timeread'.\n- Fixed alignment issues.\n- Fixed inconsistencies between upgrade.php and install.xml.\n- Cleaned unit tests of unnecessary DB calls.\n- Renamed 'get_does_conversation_area_enabled' to\n  'is_conversation_area_enabled' and moved to api.php.\n- Replaced \"$mform->elementExists('enablemessaging')\"\n  check with a capability check.\n- Removed the change of [] to array() in unrelated to upgrade code.\n- Updated conversation 'timemodified' field when updating name.\n- Bumped version based on latest master.",
        "before_after_code_files": [
          "group/group_form.php||group/group_form.php",
          "group/lib.php||group/lib.php",
          "group/tests/lib_test.php||group/tests/lib_test.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/helper.php||message/classes/helper.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "group/group_form.php||group/group_form.php": [
          "File: group/group_form.php -> group/group_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     public function definition_after_data() {",
          "101:         $mform = $this->_form;",
          "102:         $groupid = $mform->getElementValue('id');",
          "",
          "[Removed Lines]",
          "99:         global $COURSE, $DB;",
          "",
          "[Added Lines]",
          "99:         global $COURSE, $DB, $USER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         if ($group = $DB->get_record('groups', array('id' => $groupid))) {",
          "112:                     $mform->getElement('enablemessaging')->setSelected(1);",
          "113:                 }",
          "114:             }",
          "",
          "[Removed Lines]",
          "107:             if ($mform->elementExists('enablemessaging')) {",
          "108:                 if (\\core_message\\helper::get_does_conversation_area_enabled('core_group',",
          "109:                                                                              'groups',",
          "110:                                                                               $groupid,",
          "111:                                                                               $coursecontext->id)) {",
          "",
          "[Added Lines]",
          "107:             if (\\core_message\\api::can_create_group_conversation($USER->id, $coursecontext)) {",
          "108:                 if (\\core_message\\api::is_conversation_area_enabled('core_group', 'groups', $groupid, $coursecontext->id)) {",
          "",
          "---------------"
        ],
        "group/lib.php||group/lib.php": [
          "File: group/lib.php -> group/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     if (\\core_message\\api::can_create_group_conversation($USER->id, $context)) {",
          "280:         if (!empty($data->enablemessaging)) {",
          "287:         }",
          "288:     }",
          "",
          "[Removed Lines]",
          "281:             \\core_message\\api::create_conversation_area('core_group',",
          "282:                                                         'groups',",
          "283:                                                         $group->id,",
          "284:                                                         $context->id,",
          "285:                                                         1,",
          "286:                                                         $group->name);",
          "",
          "[Added Lines]",
          "281:             \\core_message\\api::create_conversation_area('core_group', 'groups', $group->id, $context->id, $group->name, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:     if (\\core_message\\api::can_create_group_conversation($USER->id, $context)) {",
          "434:             if ($data->enablemessaging && $data->enablemessaging != $conversationarea->enabled) {",
          "435:                 \\core_message\\api::enable_conversation_area($conversationarea->id);",
          "436:             }",
          "",
          "[Removed Lines]",
          "430:         if ($conversationarea = \\core_message\\api::get_conversation_area('core_group',",
          "431:                                                                          'groups',",
          "432:                                                                          $group->id,",
          "433:                                                                          $context->id)) {",
          "",
          "[Added Lines]",
          "425:         if ($conversationarea = \\core_message\\api::get_conversation_area('core_group', 'groups', $group->id, $context->id)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "440:             \\core_message\\api::update_conversation_name($conversationarea->conversationid, $group->name);",
          "441:         } else {",
          "442:             if (!empty($data->enablemessaging)) {",
          "449:             }",
          "450:         }",
          "451:     }",
          "",
          "[Removed Lines]",
          "443:                 \\core_message\\api::create_conversation_area('core_group',",
          "444:                                                             'groups',",
          "445:                                                             $group->id,",
          "446:                                                             $context->id,",
          "447:                                                             1,",
          "448:                                                             $group->name);",
          "",
          "[Added Lines]",
          "435:                 \\core_message\\api::create_conversation_area('core_group', 'groups', $group->id, $context->id, $group->name, 1);",
          "",
          "---------------"
        ],
        "group/tests/lib_test.php||group/tests/lib_test.php": [
          "File: group/tests/lib_test.php -> group/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:         global $DB;",
          "538:         $this->resetAfterTest();",
          "539:         $this->setAdminUser();",
          "540:         $course1 = $this->getDataGenerator()->create_course();",
          "541:         $coursecontext1 = context_course::instance($course1->id);",
          "552:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "553:         $group1b = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 0));",
          "563:         );",
          "582:     }",
          "",
          "[Removed Lines]",
          "535:     public function groups_create_group_with_conversation_area() {",
          "543:         $this->assertEquals(",
          "544:                 0,",
          "545:                 $DB->count_records_sql(\"SELECT COUNT(ca.id)",
          "546:                                           FROM {message_conversation_area} ca",
          "547:                                          WHERE ca.contextid = ?",
          "548:                                                AND ca.component = 'core_group'",
          "549:                                                AND ca.itemtype = 'groups'\", [$coursecontext1->id])",
          "550:         );",
          "555:         $this->assertEquals(",
          "556:                 1,",
          "557:                 $DB->count_records_sql(\"SELECT COUNT(ca.id)",
          "558:                                           FROM {message_conversation_area} ca",
          "559:                                          WHERE ca.contextid = ?",
          "560:                                                AND ca.component = 'core_group'",
          "561:                                                AND ca.itemtype = 'groups'",
          "562:                                                AND ca.enabled = 1\", [$coursecontext1->id])",
          "564:         $conversation = $DB->get_record_sql(\"SELECT c.*",
          "565:                                                FROM {message_conversations} c",
          "566:                                                JOIN {message_conversation_area} ca ON c.id = ca.conversationid",
          "567:                                               WHERE ca.contextid = ?",
          "568:                                                     AND ca.component = 'core_group'",
          "569:                                                     AND ca.itemtype = 'groups'\", [$coursecontext1->id]);",
          "571:         $this->assertEquals($group1a->name, $conversation->name);",
          "573:         $this->assertEquals(",
          "574:                 $group1a->id,",
          "575:                 $DB->get_field_sql(\"SELECT ca.itemid",
          "576:                                       FROM {message_conversation_area} ca",
          "577:                                      WHERE ca.contextid = ?",
          "578:                                            AND ca.component = 'core_group'",
          "579:                                            AND ca.itemtype = 'groups'",
          "580:                                            AND ca.conversationid = ?\", [$coursecontext1->id, $conversation->id])",
          "581:         );",
          "",
          "[Added Lines]",
          "535:     public function test_groups_create_group_with_conversation_area() {",
          "547:         $conversationareas = $DB->get_records('message_conversation_area',",
          "548:             [",
          "549:                 'contextid' => $coursecontext1->id,",
          "550:                 'component' => 'core_group',",
          "551:                 'itemtype' => 'groups',",
          "552:                 'enabled' => 1",
          "553:             ]",
          "555:         $this->assertCount(1, $conversationareas);",
          "557:         $conversationarea = reset($conversationareas);",
          "559:         $this->assertEquals($group1a->id, $conversationarea->itemid);",
          "561:         $conversations = $DB->get_records('message_conversations', ['id' => $conversationarea->conversationid]);",
          "562:         $this->assertCount(1, $conversations);",
          "564:         $conversation = reset($conversations);",
          "567:         $this->assertEquals($group1a->name, $conversation->name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "591:         $this->setAdminUser();",
          "592:         $course1 = $this->getDataGenerator()->create_course();",
          "593:         $coursecontext1 = context_course::instance($course1->id);",
          "604:         $group1a = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 1));",
          "605:         $group1b = $this->getDataGenerator()->create_group(array('courseid' => $course1->id, 'enablemessaging' => 0));",
          "615:         );",
          "617:         $group1b->enablemessaging = 1;",
          "618:         groups_update_group($group1b);",
          "636:         $this->assertEquals($group1b->name, $conversation1b->name);",
          "641:         $group1b->enablemessaging = 0;",
          "642:         groups_update_group($group1b);",
          "647:         $group1b->name = 'New group name';",
          "649:         groups_update_group($group1b);",
          "657:         $this->assertEquals($group1b->name, $conversation1b->name);",
          "658:     }",
          "659: }",
          "",
          "[Removed Lines]",
          "595:         $this->assertEquals(",
          "596:                 0,",
          "597:                 $DB->count_records_sql(\"SELECT COUNT(ca.id)",
          "598:                                           FROM {message_conversation_area} ca",
          "599:                                          WHERE ca.contextid = ?",
          "600:                                                AND ca.component = 'core_group'",
          "601:                                                AND ca.itemtype = 'groups'\", [$coursecontext1->id])",
          "602:         );",
          "607:         $this->assertEquals(",
          "608:                 1,",
          "609:                 $DB->count_records_sql(\"SELECT COUNT(ca.id)",
          "610:                                           FROM {message_conversation_area} ca",
          "611:                                          WHERE ca.contextid = ?",
          "612:                                                AND ca.component = 'core_group'",
          "613:                                                AND ca.itemtype = 'groups'",
          "614:                                                AND ca.enabled = 1\", [$coursecontext1->id])",
          "619:         $this->assertEquals(",
          "620:                 2,",
          "621:                 $DB->count_records_sql(\"SELECT COUNT(ca.id)",
          "622:                                           FROM {message_conversation_area} ca",
          "623:                                          WHERE ca.contextid = ?",
          "624:                                                AND ca.component = 'core_group'",
          "625:                                                AND ca.itemtype = 'groups'",
          "626:                                                AND ca.enabled = 1\", [$coursecontext1->id])",
          "627:         );",
          "628:         $conversation1b = $DB->get_record_sql(\"SELECT c.*",
          "629:                                                FROM {message_conversations} c",
          "630:                                                JOIN {message_conversation_area} ca ON c.id = ca.conversationid",
          "631:                                               WHERE ca.contextid = ?",
          "632:                                                     AND ca.itemid = ?",
          "633:                                                     AND ca.component = 'core_group'",
          "634:                                                     AND ca.itemtype = 'groups'\", [$coursecontext1->id, $group1b->id]);",
          "638:         $this->assertEquals(1, $DB->get_field(\"message_conversation_area\", \"enabled\",",
          "639:                                                 ['itemid' => $group1b->id,",
          "640:                                                  'contextid' => $coursecontext1->id]));",
          "643:         $this->assertEquals(0, $DB->get_field(\"message_conversation_area\", \"enabled\",",
          "644:                                                 ['itemid' => $group1b->id,",
          "645:                                                  'contextid' => $coursecontext1->id]));",
          "648:         $this->assertNotEquals($group1b->name, $conversation1b->name);",
          "650:         $conversation1b = $DB->get_record_sql(\"SELECT c.*",
          "651:                                                FROM {message_conversations} c",
          "652:                                                JOIN {message_conversation_area} ca ON c.id = ca.conversationid",
          "653:                                               WHERE ca.contextid = ?",
          "654:                                                     AND ca.itemid = ?",
          "655:                                                     AND ca.component = 'core_group'",
          "656:                                                     AND ca.itemtype = 'groups'\", [$coursecontext1->id, $group1b->id]);",
          "",
          "[Added Lines]",
          "585:         $conversationareas = $DB->get_records('message_conversation_area',",
          "586:             [",
          "587:                 'contextid' => $coursecontext1->id,",
          "588:                 'component' => 'core_group',",
          "589:                 'itemtype' => 'groups',",
          "590:                 'enabled' => 1",
          "591:             ]",
          "593:         $this->assertCount(1, $conversationareas);",
          "599:         $conversationareas = $DB->get_records('message_conversation_area',",
          "600:             [",
          "601:                 'contextid' => $coursecontext1->id,",
          "602:                 'component' => 'core_group',",
          "603:                 'itemtype' => 'groups',",
          "604:                 'enabled' => 1",
          "605:             ],",
          "606:         'id ASC');",
          "607:         $this->assertCount(2, $conversationareas);",
          "609:         $conversationarea1a = array_shift($conversationareas);",
          "610:         $conversationarea1b = array_shift($conversationareas);",
          "612:         $conversation1b = $DB->get_record('message_conversations', ['id' => $conversationarea1b->conversationid]);",
          "619:         $this->assertEquals(0, $DB->get_field(\"message_conversation_area\", \"enabled\", ['id' => $conversationarea1b->id]));",
          "624:         $conversation1b = $DB->get_record('message_conversations', ['id' => $conversation1b->id]);",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2589:         $table = new xmldb_table('message_conversations');",
          "2593:         if ($dbman->index_exists($table, $index)) {",
          "2594:             $dbman->drop_index($table, $index);",
          "2595:         }",
          "",
          "[Removed Lines]",
          "2592:         $index = new xmldb_index('convhash', XMLDB_INDEX_UNIQUE, array('convhash'));",
          "",
          "[Added Lines]",
          "2592:         $index = new xmldb_index('convhash', XMLDB_INDEX_UNIQUE, ['convhash']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2597:         $field = new xmldb_field('convhash', XMLDB_TYPE_CHAR, '40', null, null, null, null, 'name');",
          "2598:         $dbman->change_field_notnull($table, $field);",
          "2601:         if (!$dbman->index_exists($table, $index)) {",
          "2602:             $dbman->add_index($table, $index);",
          "2603:         }",
          "",
          "[Removed Lines]",
          "2600:         $index = new xmldb_index('convhash', XMLDB_INDEX_NOTUNIQUE, array('convhash'));",
          "",
          "[Added Lines]",
          "2600:         $index = new xmldb_index('convhash', XMLDB_INDEX_NOTUNIQUE, ['convhash']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2605:         upgrade_main_savepoint(true, 2018102200.00);",
          "2606:     }",
          "2610:         $table = new xmldb_table('message_conversation_area');",
          "2611:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null);",
          "2612:         $table->add_field('conversationid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, 'id');",
          "2615:         $table->add_field('itemid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, 'itemtype');",
          "2617:         $table->add_field('enabled', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, 0, 'contextid');",
          "2620:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id'], null, null);",
          "2621:         $table->add_key('conversationid', XMLDB_KEY_FOREIGN, ['conversationid'], 'message_conversations', ['id']);",
          "2622:         $table->add_key('contextid', XMLDB_KEY_FOREIGN, ['contextid'], 'context', ['id']);",
          "",
          "[Removed Lines]",
          "2608:     if ($oldversion < 2018101900.03) {",
          "2613:         $table->add_field('component',  XMLDB_TYPE_CHAR, '100', null, null, null, null, 'conversationid');",
          "2614:         $table->add_field('itemtype',  XMLDB_TYPE_CHAR, '100', null, null, null, null, 'component');",
          "2616:         $table->add_field('contextid', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'itemid');",
          "2618:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'enable');",
          "2619:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'timecreated');",
          "",
          "[Added Lines]",
          "2608:     if ($oldversion < 2018102300.02) {",
          "2613:         $table->add_field('component',  XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null, 'conversationid');",
          "2614:         $table->add_field('itemtype',  XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null, 'component');",
          "2616:         $table->add_field('contextid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, 'itemid');",
          "2618:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, 'enabled');",
          "2619:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, 'timecreated');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2628:             $dbman->create_table($table);",
          "2629:         }",
          "2632:     }",
          "2634:     return true;",
          "",
          "[Removed Lines]",
          "2631:         upgrade_main_savepoint(true, 2018101900.03);",
          "",
          "[Added Lines]",
          "2631:         upgrade_main_savepoint(true, 2018102300.02);",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1996:         global $DB;",
          "1999:         $conversation = self::create_conversation(self::MESSAGE_CONVERSATION_TYPE_GROUP, array(), $name);",
          "2001:         $conversationarea = new \\stdClass;",
          "2002:         $conversationarea->conversationid = $conversation->id;",
          "2004:         $conversationarea->itemtype       = $itemtype;",
          "2005:         $conversationarea->itemid         = $itemid;",
          "2006:         $conversationarea->contextid      = $contextid;",
          "",
          "[Removed Lines]",
          "1990:     public static function create_conversation_area(string $component,",
          "1991:                                                     string $itemtype,",
          "1992:                                                     int $itemid,",
          "1993:                                                     int $contextid,",
          "1994:                                                     int $enabled = 0,",
          "1995:                                                     string $name) {",
          "2003:         $conversationarea->component      = !empty($component) ? $component : '';",
          "",
          "[Added Lines]",
          "1990:     public static function create_conversation_area(string $component, string $itemtype, int $itemid, int $contextid, string $name,",
          "1991:             int $enabled = 0) {",
          "2000:         $conversationarea->component      = $component;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2012:         return $conversationarea;",
          "2013:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2021:     public static function is_conversation_area_enabled(string $component, string $itemtype, int $itemid, int $contextid) : bool {",
          "2022:         global $DB;",
          "2024:         return $DB->record_exists('message_conversation_area',",
          "2025:             [",
          "2026:                 'itemid' => $itemid,",
          "2027:                 'contextid' => $contextid,",
          "2028:                 'component' => $component,",
          "2029:                 'itemtype' => $itemtype,",
          "2030:                 'enabled' => 1",
          "2031:             ]",
          "2032:         );",
          "2033:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2028:         global $DB;",
          "2034:     }",
          "",
          "[Removed Lines]",
          "2024:     public static function get_conversation_area(string $component,",
          "2025:                                                  string $itemtype,",
          "2026:                                                  int $itemid,",
          "2027:                                                  int $contextid) {",
          "2030:         return $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "2031:                                                              'contextid' => $contextid,",
          "2032:                                                              'component' => $component,",
          "2033:                                                              'itemtype'  => $itemtype]);",
          "",
          "[Added Lines]",
          "2044:     public static function get_conversation_area(string $component, string $itemtype, int $itemid, int $contextid) {",
          "2047:         return $DB->get_record('message_conversation_area',",
          "2048:             [",
          "2049:                 'itemid' => $itemid,",
          "2050:                 'contextid' => $contextid,",
          "2051:                 'component' => $component,",
          "2052:                 'itemtype'  => $itemtype",
          "2053:             ]",
          "2054:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2045:         $conversationarea = new \\stdClass();",
          "2046:         $conversationarea->id = $conversationareaid;",
          "2047:         $conversationarea->enabled = 1;",
          "2049:         $DB->update_record('message_conversation_area', $conversationarea);",
          "2050:     }",
          "",
          "[Removed Lines]",
          "2048:         $conversationarea->timeread = time();",
          "",
          "[Added Lines]",
          "2069:         $conversationarea->timemodified = time();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2061:         $conversationarea = new \\stdClass();",
          "2062:         $conversationarea->id = $conversationareaid;",
          "2063:         $conversationarea->enabled = 0;",
          "2065:         $DB->update_record('message_conversation_area', $conversationarea);",
          "2066:     }",
          "",
          "[Removed Lines]",
          "2064:         $conversationarea->timeread = time();",
          "",
          "[Added Lines]",
          "2085:         $conversationarea->timemodified = time();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2078:         if ($conversation = $DB->get_record('message_conversations', array('id' => $conversationid))) {",
          "2079:             if ($name <> $conversation->name) {",
          "2080:                 $conversation->name = $name;",
          "2081:                 $DB->update_record('message_conversations', $conversation);",
          "2082:             }",
          "2083:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2102:                 $conversation->timemodified = time();",
          "",
          "---------------"
        ],
        "message/classes/helper.php||message/classes/helper.php": [
          "File: message/classes/helper.php -> message/classes/helper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:         return $messageexists || $messagereadexists;",
          "356:     }",
          "379: }",
          "",
          "[Removed Lines]",
          "367:     public static function get_does_conversation_area_enabled(string $component,",
          "368:                                                               string $itemtype,",
          "369:                                                               int $itemid,",
          "370:                                                               int $contextid) : bool {",
          "371:         global $DB;",
          "373:         return $DB->record_exists('message_conversation_area',  ['itemid'    => $itemid,",
          "374:                                                                  'contextid' => $contextid,",
          "375:                                                                  'component' => $component,",
          "376:                                                                  'itemtype'  => $itemtype,",
          "377:                                                                  'enabled'   => 1]);",
          "378:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3263:         \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, [1, 2, 3]);",
          "3264:     }",
          "3280:     public function test_create_conversation_area() {",
          "3283:         $this->resetAfterTest();",
          "3284:         $contextid = 111;",
          "3285:         $itemid = 222;",
          "3286:         $name = 'Name of conversation';",
          "3298:         $this->assertEquals($itemid, $conversationarea->itemid);",
          "3303:     }",
          "3308:     public function test_get_conversation_area() {",
          "3311:         $contextid = 111;",
          "3312:         $itemid = 222;",
          "3313:         $name = 'Name of conversation';",
          "3324:         $this->assertEquals($itemid, $conversationarea->itemid);",
          "3325:         $this->assertEquals($contextid, $conversationarea->contextid);",
          "3326:         $this->assertEquals('core_group', $conversationarea->component);",
          "",
          "[Removed Lines]",
          "3273:     protected static function sort_contacts($a, $b) {",
          "3274:         return $a->userid > $b->userid;",
          "3275:     }",
          "3281:         global $DB;",
          "3287:         \\core_message\\api::create_conversation_area('core_group',",
          "3288:                                                     'groups',",
          "3289:                                                     $itemid,",
          "3290:                                                     $contextid,",
          "3291:                                                     1,",
          "3292:                                                     $name);",
          "3293:         $conversationarea = $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "3294:                                                                           'contextid' => $contextid,",
          "3295:                                                                           'component' => 'core_group',",
          "3296:                                                                           'itemtype'  => 'groups']);",
          "3299:         $this->assertEquals(",
          "3300:                 $name,",
          "3301:                 $DB->get_field('message_conversations', 'name', ['id' => $conversationarea->conversationid])",
          "3302:         );",
          "3309:         global $DB;",
          "3314:         \\core_message\\api::create_conversation_area('core_group',",
          "3315:                                                     'groups',",
          "3316:                                                     $itemid,",
          "3317:                                                     $contextid,",
          "3318:                                                     1,",
          "3319:                                                     $name);",
          "3320:         $conversationarea = \\core_message\\api::get_conversation_area('core_group',",
          "3321:                                                                      'groups',",
          "3322:                                                                       $itemid,",
          "3323:                                                                       $contextid);",
          "",
          "[Added Lines]",
          "3274:         $conversationarea = \\core_message\\api::create_conversation_area('core_group', 'groups', $itemid, $contextid, $name, 0);",
          "3277:         $this->assertEquals($contextid, $conversationarea->contextid);",
          "3278:         $this->assertEquals('core_group', $conversationarea->component);",
          "3279:         $this->assertEquals('groups', $conversationarea->itemtype);",
          "3280:         $this->assertEquals(0, $conversationarea->enabled);",
          "3290:         \\core_message\\api::create_conversation_area('core_group', 'groups', $itemid, $contextid, $name, 1);",
          "3291:         $conversationarea = \\core_message\\api::get_conversation_area('core_group', 'groups', $itemid, $contextid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3337:         $contextid = 111;",
          "3338:         $itemid = 222;",
          "3339:         $name = 'Name of conversation';",
          "3351:         \\core_message\\api::enable_conversation_area($conversationarea->id);",
          "3357:     }",
          "",
          "[Removed Lines]",
          "3340:         \\core_message\\api::create_conversation_area('core_group',",
          "3341:                                                     'groups',",
          "3342:                                                     $itemid,",
          "3343:                                                     $contextid,",
          "3344:                                                     0,",
          "3345:                                                     $name);",
          "3346:         $conversationarea = $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "3347:                                                                           'contextid' => $contextid,",
          "3348:                                                                           'component' => 'core_group',",
          "3349:                                                                           'itemtype'  => 'groups']);",
          "3350:         $this->assertEquals(0, $conversationarea->enabled);",
          "3352:         $conversationarea = $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "3353:                                                                           'contextid' => $contextid,",
          "3354:                                                                           'component' => 'core_group',",
          "3355:                                                                           'itemtype'  => 'groups']);",
          "3356:         $this->assertEquals(1, $conversationarea->enabled);",
          "",
          "[Added Lines]",
          "3309:         $conversationarea = \\core_message\\api::create_conversation_area('core_group', 'groups', $itemid, $contextid, $name, 0);",
          "3311:         $conversationareaenabled = $DB->get_field('message_conversation_area', 'enabled', ['id' => $conversationarea->id]);",
          "3312:         $this->assertEquals(1, $conversationareaenabled);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3365:         $contextid = 111;",
          "3366:         $itemid = 222;",
          "3367:         $name = 'Name of conversation';",
          "3378:         $this->assertEquals(1, $conversationarea->enabled);",
          "3379:         \\core_message\\api::disable_conversation_area($conversationarea->id);",
          "3385:     }",
          "",
          "[Removed Lines]",
          "3368:         \\core_message\\api::create_conversation_area('core_group',",
          "3369:                                                     'groups',",
          "3370:                                                     $itemid,",
          "3371:                                                     $contextid,",
          "3372:                                                     1,",
          "3373:                                                     $name);",
          "3374:         $conversationarea = $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "3375:                                                                           'contextid' => $contextid,",
          "3376:                                                                           'component' => 'core_group',",
          "3377:                                                                           'itemtype'  => 'groups']);",
          "3380:         $conversationarea = $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "3381:                                                                           'contextid' => $contextid,",
          "3382:                                                                           'component' => 'core_group',",
          "3383:                                                                           'itemtype'  => 'groups']);",
          "3384:         $this->assertEquals(0, $conversationarea->enabled);",
          "",
          "[Added Lines]",
          "3324:         $conversationarea = \\core_message\\api::create_conversation_area('core_group', 'groups', $itemid, $contextid, $name, 1);",
          "3327:         $conversationareaenabled = $DB->get_field('message_conversation_area', 'enabled', ['id' => $conversationarea->id]);",
          "3328:         $this->assertEquals(0, $conversationareaenabled);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3392:         $contextid = 111;",
          "3393:         $itemid = 222;",
          "3394:         $name = 'Name of conversation';",
          "3410:         $newname = 'New name of conversation';",
          "3411:         \\core_message\\api::update_conversation_name($conversationarea->conversationid, $newname);",
          "",
          "[Removed Lines]",
          "3395:         \\core_message\\api::create_conversation_area('core_group',",
          "3396:                                                     'groups',",
          "3397:                                                     $itemid,",
          "3398:                                                     $contextid,",
          "3399:                                                     1,",
          "3400:                                                     $name);",
          "3401:         $conversationarea = $DB->get_record('message_conversation_area', ['itemid'    => $itemid,",
          "3402:                                                                           'contextid' => $contextid,",
          "3403:                                                                           'component' => 'core_group',",
          "3404:                                                                           'itemtype'  => 'groups']);",
          "3405:         $this->assertEquals(",
          "3406:                 $name,",
          "3407:                 $DB->get_field('message_conversations', 'name', ['id' => $conversationarea->conversationid])",
          "3408:         );",
          "",
          "[Added Lines]",
          "3339:         $conversationarea = \\core_message\\api::create_conversation_area('core_group', 'groups', $itemid, $contextid, $name, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3415:                 $DB->get_field('message_conversations', 'name', ['id' => $conversationarea->conversationid])",
          "3416:         );",
          "3417:     }",
          "3418: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3357:     protected static function sort_contacts($a, $b) {",
          "3358:         return $a->userid > $b->userid;",
          "3359:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018102300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018102300.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44890bd73807f359e86af905c9b9158d535eead1",
      "candidate_info": {
        "commit_hash": "44890bd73807f359e86af905c9b9158d535eead1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/44890bd73807f359e86af905c9b9158d535eead1",
        "files": [
          "version.php"
        ],
        "message": "weekly on-sync release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018120301.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181205)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018120301.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181210)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}