{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d27fcee3a95e3002287bd7a9f62710d66da7862",
      "candidate_info": {
        "commit_hash": "5d27fcee3a95e3002287bd7a9f62710d66da7862",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5d27fcee3a95e3002287bd7a9f62710d66da7862",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ],
        "message": "PDFBOX-4892: performance improvements, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887332 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.fontbox.cff.CFFCIDFont;",
          "37: import org.apache.fontbox.cff.CFFFont;",
          "38: import org.apache.fontbox.ttf.NamingTable;",
          "39: import org.apache.fontbox.ttf.OTFParser;",
          "40: import org.apache.fontbox.ttf.OpenTypeFont;",
          "41: import org.apache.fontbox.ttf.TTFParser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.fontbox.ttf.OS2WindowsMetricsTable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:         {",
          "373:             try",
          "374:             {",
          "377:                 {",
          "378:                     addTrueTypeFont(file);",
          "379:                 }",
          "382:                 {",
          "383:                     addTrueTypeCollection(file);",
          "384:                 }",
          "386:                 {",
          "387:                     addType1Font(file);",
          "388:                 }",
          "",
          "[Removed Lines]",
          "375:                 if (file.getPath().toLowerCase().endsWith(\".ttf\") ||",
          "376:                         file.getPath().toLowerCase().endsWith(\".otf\"))",
          "380:                 else if (file.getPath().toLowerCase().endsWith(\".ttc\") ||",
          "381:                         file.getPath().toLowerCase().endsWith(\".otc\"))",
          "385:                 else if (file.getPath().toLowerCase().endsWith(\".pfb\"))",
          "",
          "[Added Lines]",
          "376:                 String filePath = file.getPath().toLowerCase();",
          "377:                 if (filePath.endsWith(\".ttf\") || filePath.endsWith(\".otf\"))",
          "381:                 else if (filePath.endsWith(\".ttc\") || filePath.endsWith(\".otc\"))",
          "385:                 else if (filePath.endsWith(\".pfb\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "692:                 int ulCodePageRange1 = 0;",
          "693:                 int ulCodePageRange2 = 0;",
          "694:                 byte[] panose = null;",
          "697:                 {",
          "703:                 }",
          "705:                 String format;",
          "",
          "[Removed Lines]",
          "696:                 if (ttf.getOS2Windows() != null)",
          "698:                     sFamilyClass = ttf.getOS2Windows().getFamilyClass();",
          "699:                     usWeightClass = ttf.getOS2Windows().getWeightClass();",
          "700:                     ulCodePageRange1 = (int)ttf.getOS2Windows().getCodePageRange1();",
          "701:                     ulCodePageRange2 = (int)ttf.getOS2Windows().getCodePageRange2();",
          "702:                     panose = ttf.getOS2Windows().getPanose();",
          "",
          "[Added Lines]",
          "695:                 OS2WindowsMetricsTable os2WindowsMetricsTable = ttf.getOS2Windows();",
          "697:                 if (os2WindowsMetricsTable != null)",
          "699:                     sFamilyClass = os2WindowsMetricsTable.getFamilyClass();",
          "700:                     usWeightClass = os2WindowsMetricsTable.getWeightClass();",
          "701:                     ulCodePageRange1 = (int) os2WindowsMetricsTable.getCodePageRange1();",
          "702:                     ulCodePageRange2 = (int) os2WindowsMetricsTable.getCodePageRange2();",
          "703:                     panose = os2WindowsMetricsTable.getPanose();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1323edb56513f9f6bf7789a1a9b0451bf438a2ea",
      "candidate_info": {
        "commit_hash": "1323edb56513f9f6bf7789a1a9b0451bf438a2ea",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1323edb56513f9f6bf7789a1a9b0451bf438a2ea",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java"
        ],
        "message": "PDFBOX-1176: add rotated page\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883015 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java||examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java||examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java -> examples/src/main/java/org/apache/pdfbox/examples/util/AddWatermarkText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         float fontHeight = 100; // arbitrary for short text",
          "72:         float width = page.getMediaBox().getWidth();",
          "73:         float height = page.getMediaBox().getHeight();",
          "74:         float stringWidth = font.getStringWidth(text) / 1000 * fontHeight;",
          "75:         float diagonalLength = (float) Math.sqrt(width * width + height * height);",
          "76:         float angle = (float) Math.atan2(height, width);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:         int rotation = page.getRotation();",
          "76:         switch (rotation)",
          "77:         {",
          "78:             case 90:",
          "79:                 width = page.getMediaBox().getHeight();",
          "80:                 height = page.getMediaBox().getWidth();",
          "81:                 cs.transform(Matrix.getRotateInstance(Math.toRadians(90), height, 0));",
          "82:                 break;",
          "83:             case 180:",
          "84:                 cs.transform(Matrix.getRotateInstance(Math.toRadians(180), width, height));",
          "85:                 break;",
          "86:             case 270:",
          "87:                 width = page.getMediaBox().getHeight();",
          "88:                 height = page.getMediaBox().getWidth();",
          "89:                 cs.transform(Matrix.getRotateInstance(Math.toRadians(270), 0, width));",
          "90:                 break;",
          "91:             default:",
          "92:                 break;",
          "93:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "842fc9f109eb2c4bbe11a52f451030b24c3d9ed7",
      "candidate_info": {
        "commit_hash": "842fc9f109eb2c4bbe11a52f451030b24c3d9ed7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/842fc9f109eb2c4bbe11a52f451030b24c3d9ed7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ],
        "message": "PDFBOX-4421: fix bugs to support and enable AES 128 encryption, as suggested by Christian Appl: - get actual key length from default crypt filter dict (PDFBox was using default 40) - use SHA1 digest for V 4\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881796 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         }",
          "131:         setDecryptMetadata(encryption.isEncryptMetaData());",
          "133:         {",
          "135:         }",
          "137:         PublicKeyDecryptionMaterial material = (PublicKeyDecryptionMaterial) decryptionMaterial;",
          "",
          "[Removed Lines]",
          "132:         if (encryption.getLength() != 0)",
          "134:             this.keyLength = encryption.getLength();",
          "",
          "[Added Lines]",
          "132:         PDCryptFilterDictionary defaultCryptFilterDictionary = encryption.getDefaultCryptFilterDictionary();",
          "133:         if (defaultCryptFilterDictionary != null && defaultCryptFilterDictionary.getLength() != 0)",
          "135:             setKeyLength(defaultCryptFilterDictionary.getLength());",
          "136:         }",
          "137:         else if (encryption.getLength() != 0)",
          "138:         {",
          "139:             setKeyLength(encryption.getLength());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:             COSArray array = (COSArray) encryption.getCOSObject().getItem(COSName.RECIPIENTS);",
          "156:             if (array == null)",
          "157:             {",
          "159:                 array = (COSArray) defaultCryptFilterDictionary.getCOSObject().getItem(COSName.RECIPIENTS);",
          "160:             }",
          "161:             byte[][] recipientFieldsBytes = new byte[array.size()][];",
          "",
          "[Removed Lines]",
          "158:                 PDCryptFilterDictionary defaultCryptFilterDictionary = encryption.getDefaultCryptFilterDictionary();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:             byte[] mdResult;",
          "239:             if (encryption.getVersion() == 4 || encryption.getVersion() == 5)",
          "240:             {",
          "247:                 if (defaultCryptFilterDictionary != null)",
          "248:                 {",
          "249:                     COSName cryptFilterMethod = defaultCryptFilterDictionary.getCryptFilterMethod();",
          "",
          "[Removed Lines]",
          "241:                 mdResult = MessageDigests.getSHA256().digest(sha1Input);",
          "246:                 PDCryptFilterDictionary defaultCryptFilterDictionary = encryption.getDefaultCryptFilterDictionary();",
          "",
          "[Added Lines]",
          "245:                 if (encryption.getVersion() == 4)",
          "246:                 {",
          "247:                     mdResult = MessageDigests.getSHA1().digest(sha1Input);",
          "248:                 }",
          "249:                 else",
          "250:                 {",
          "251:                     mdResult = MessageDigests.getSHA256().digest(sha1Input);",
          "252:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:             }",
          "368:             byte[] mdResult;",
          "370:             {",
          "371:                 dictionary.setSubFilter(SUBFILTER5);",
          "372:                 mdResult = MessageDigests.getSHA256().digest(shaInput);",
          "375:             }",
          "376:             else",
          "377:             {",
          "",
          "[Removed Lines]",
          "369:             if (version == 4 || version == 5)",
          "373:                 COSName aesVName = version == 5 ? COSName.AESV3 : COSName.AESV2;",
          "374:                 prepareEncryptionDictAES(dictionary, aesVName, recipientsFields);",
          "",
          "[Added Lines]",
          "379:             if (version == 4)",
          "380:             {",
          "381:                 dictionary.setSubFilter(SUBFILTER5);",
          "382:                 mdResult = MessageDigests.getSHA1().digest(shaInput);",
          "383:                 prepareEncryptionDictAES(dictionary, COSName.AESV2, recipientsFields);",
          "384:             }",
          "385:             else if (version == 5)",
          "389:                 prepareEncryptionDictAES(dictionary, COSName.AESV3, recipientsFields);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "407:             case 40:",
          "408:                 return 1;",
          "409:             case 128:",
          "412:             case 256:",
          "413:                 return 5;",
          "414:             default:",
          "",
          "[Removed Lines]",
          "410:                 return 2; // prefer RC4 (AES 128 doesn't work yet)",
          "",
          "[Added Lines]",
          "425:                 return 4; // prefer AES",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5a29fa427f551e6e93ae911b5aee6dd432e4783",
      "candidate_info": {
        "commit_hash": "b5a29fa427f551e6e93ae911b5aee6dd432e4783",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b5a29fa427f551e6e93ae911b5aee6dd432e4783",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java"
        ],
        "message": "PDFBOX-4892: revert last commit, values is reused and gets another length which results in out of bounds exception with PDRange\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889468 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         WritableRaster raster = getColorModel().createCompatibleWritableRaster(w, h);",
          "177:         boolean useBackground;",
          "178:         int[] data = new int[w * h * 4];",
          "180:         for (int j = 0; j < h; j++)",
          "181:         {",
          "182:             for (int i = 0; i < w; i++)",
          "183:             {",
          "184:                 useBackground = false;",
          "187:                 rat.transform(values, 0, values, 0, 1);",
          "188:                 double inputValue = x1x0 * (values[0] - coords[0]) + y1y0 * (values[1] - coords[1]);",
          "",
          "[Removed Lines]",
          "179:         float[] values = new float[2];",
          "185:                 values[0] = x + i;",
          "186:                 values[1] = y + j;",
          "",
          "[Added Lines]",
          "184:                 float[] values = new float[] { x + i, y + j };",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         float inputValue = -1;",
          "183:         boolean useBackground;",
          "184:         int[] data = new int[w * h * 4];",
          "186:         for (int j = 0; j < h; j++)",
          "187:         {",
          "188:             for (int i = 0; i < w; i++)",
          "189:             {",
          "192:                 rat.transform(values, 0, values, 0, 1);",
          "193:                 useBackground = false;",
          "194:                 float[] inputValues = calculateInputValues(values[0], values[1]);",
          "",
          "[Removed Lines]",
          "185:         float[] values = new float[2];",
          "190:                 values[0] = x + i;",
          "191:                 values[1] = y + j;",
          "",
          "[Added Lines]",
          "189:                 float[] values = new float[] { x + i, y + j };",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     {",
          "102:         WritableRaster raster = getColorModel().createCompatibleWritableRaster(w, h);",
          "103:         int[] data = new int[w * h * 4];",
          "105:         for (int j = 0; j < h; j++)",
          "106:         {",
          "107:             for (int i = 0; i < w; i++)",
          "108:             {",
          "109:                 int index = (j * w + i) * 4;",
          "110:                 boolean useBackground = false;",
          "113:                 rat.transform(values, 0, values, 0, 1);",
          "114:                 if (values[0] < domain[0] || values[0] > domain[1] ||",
          "115:                     values[1] < domain[2] || values[1] > domain[3])",
          "",
          "[Removed Lines]",
          "104:         float[] values = new float[2];",
          "111:                 values[0] = x + i;",
          "112:                 values[1] = y + j;",
          "",
          "[Added Lines]",
          "110:                 float[] values = new float[] { x + i, y + j };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7d562d9a35dc38d1ab6c98ea0e86d0757630f13",
      "candidate_info": {
        "commit_hash": "d7d562d9a35dc38d1ab6c98ea0e86d0757630f13",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d7d562d9a35dc38d1ab6c98ea0e86d0757630f13",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-5093: make setClip() and getNonStrokingPaint() non private so that they can be called when showGlyph is overridden, as suggested by Alexander Scherbatiy\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890515 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:         }",
          "386:     }",
          "391:     {",
          "392:         Area clippingPath = getGraphicsState().getCurrentClippingPath();",
          "393:         if (clippingPath != lastClip)",
          "",
          "[Removed Lines]",
          "390:     private void setClip()",
          "",
          "[Added Lines]",
          "395:     protected final void setClip()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "727:                 getGraphicsState().getSoftMask());",
          "728:     }",
          "732:     {",
          "733:         return applySoftMaskToPaint(",
          "734:                 getPaint(getGraphicsState().getNonStrokingColor()),",
          "",
          "[Removed Lines]",
          "731:     private Paint getNonStrokingPaint() throws IOException",
          "",
          "[Added Lines]",
          "743:     protected final Paint getNonStrokingPaint() throws IOException",
          "",
          "---------------"
        ]
      }
    }
  ]
}