{
  "cve_id": "CVE-2023-6484",
  "cve_desc": "A log injection flaw was found in Keycloak. A text string may be injected through the authentication form when using the WebAuthn authentication mode. This issue may have a minor impact to the logs integrity.",
  "repo": "keycloak/keycloak",
  "patch_hash": "110f64a8146d0817252f90cf4b5e6a62aa897aff",
  "patch_info": {
    "commit_hash": "110f64a8146d0817252f90cf4b5e6a62aa897aff",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/110f64a8146d0817252f90cf4b5e6a62aa897aff",
    "files": [
      "server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
      "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
      "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
      "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
    ],
    "message": "Sanitize logs in JBossLoggingEventListenerProvider Closes #25078\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>\n(cherry picked from commit 179ca3fa3ac25d901d1bd8a989a2146bb7384121)",
    "before_after_code_files": [
      "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
      "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
      "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
      "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
    ]
  },
  "patch_diff": {
    "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java": [
      "File: server-spi/src/main/java/org/keycloak/utils/StringUtil.java -> server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         return options.toString();",
      "53:     }",
      "",
      "[Removed Lines]",
      "55: }",
      "",
      "[Added Lines]",
      "67:         if (str == null || str.isEmpty()) {",
      "68:             return str;",
      "69:         }",
      "70:         StringBuilder sb = null;",
      "71:         for (int i = 0; i < str.length(); i++) {",
      "72:             final char actualChar = str.charAt(i);",
      "73:             if ((Character.isWhitespace(actualChar) && actualChar != ' ') || actualChar == 160) {",
      "74:                 if (sb == null) {",
      "75:                     sb = new StringBuilder(str.length() + 10).append(str.substring(0, i));",
      "76:                 }",
      "77:                 sb.append(' ');",
      "78:             } else if (quotes != null && actualChar == quotes) {",
      "79:                 if (sb == null) {",
      "80:                     sb = new StringBuilder(str.length() + 10).append(str.substring(0, i));",
      "81:                 }",
      "82:                 sb.append('\\\\').append(actualChar);",
      "83:             } else if (sb != null) {",
      "84:                 sb.append(actualChar);",
      "85:             }",
      "86:         }",
      "87:         return sb == null? str : sb.toString();",
      "88:     }",
      "89: }",
      "",
      "---------------"
    ],
    "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java": [
      "File: server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java -> server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.keycloak.utils;",
      "19: import org.junit.Assert;",
      "20: import org.junit.Test;",
      "26: public class StringUtilTest {",
      "28:     @Test",
      "29:     public void testSanitize() {",
      "30:         Assert.assertEquals(\"test1 test2 test3\", StringUtil.sanitizeSpacesAndQuotes(\"test1 test2 test3\", null));",
      "31:         Assert.assertEquals(\"test1 test2 test3\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\", null));",
      "32:         Assert.assertEquals(\"test1 test2 test3 \\\"test4\\\"\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\\r\\\"test4\\\"\", null));",
      "33:         Assert.assertEquals(\"teswith\\\\\\\"quotes\", StringUtil.sanitizeSpacesAndQuotes(\"teswith\\\"quotes\", '\"'));",
      "34:         Assert.assertEquals(\"test1 test2 test3 \\\\\\\"test4\\\\\\\"\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\\r\\\"test4\\\"\", '\"'));",
      "35:         Assert.assertEquals(\" \\\\\\\"test\", StringUtil.sanitizeSpacesAndQuotes(\"\\n\\\"test\", '\"'));",
      "36:         Assert.assertEquals(\"\\\\\\\" test\", StringUtil.sanitizeSpacesAndQuotes(\"\\\"\\rtest\", '\"'));",
      "37:     }",
      "38: }",
      "",
      "---------------"
    ],
    "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java": [
      "File: services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java -> services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: package org.keycloak.events.log;",
      "21: import org.jboss.logging.Logger;",
      "22: import org.keycloak.events.Event;",
      "23: import org.keycloak.events.EventListenerProvider;",
      "24: import org.keycloak.events.EventListenerTransaction;",
      "",
      "[Removed Lines]",
      "20: import org.keycloak.common.util.StackUtil;",
      "",
      "[Added Lines]",
      "21: import org.keycloak.common.util.StackUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26: import org.keycloak.models.KeycloakContext;",
      "27: import org.keycloak.models.KeycloakSession;",
      "28: import org.keycloak.sessions.AuthenticationSessionModel;",
      "30: import jakarta.ws.rs.core.Cookie;",
      "31: import jakarta.ws.rs.core.HttpHeaders;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import org.keycloak.utils.StringUtil;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "41:     private final Logger logger;",
      "42:     private final Logger.Level successLevel;",
      "43:     private final Logger.Level errorLevel;",
      "44:     private final EventListenerTransaction tx = new EventListenerTransaction(this::logAdminEvent, this::logEvent);",
      "47:         this.session = session;",
      "48:         this.logger = logger;",
      "49:         this.successLevel = successLevel;",
      "50:         this.errorLevel = errorLevel;",
      "52:         this.session.getTransactionManager().enlistAfterCompletion(tx);",
      "53:     }",
      "",
      "[Removed Lines]",
      "46:     public JBossLoggingEventListenerProvider(KeycloakSession session, Logger logger, Logger.Level successLevel, Logger.Level errorLevel) {",
      "",
      "[Added Lines]",
      "45:     private final boolean sanitize;",
      "46:     private final Character quotes;",
      "49:     public JBossLoggingEventListenerProvider(KeycloakSession session, Logger logger,",
      "50:             Logger.Level successLevel, Logger.Level errorLevel, Character quotes, boolean sanitize) {",
      "55:         this.sanitize = sanitize;",
      "56:         this.quotes = quotes;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "62:         tx.addAdminEvent(adminEvent, includeRepresentation);",
      "63:     }",
      "65:     private void logEvent(Event event) {",
      "66:         Logger.Level level = event.getError() != null ? errorLevel : successLevel;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70:     private void sanitize(StringBuilder sb, String str) {",
      "71:         if (quotes != null) {",
      "72:             sb.append(quotes);",
      "73:         }",
      "74:         if (sanitize) {",
      "75:             str = StringUtil.sanitizeSpacesAndQuotes(str, quotes);",
      "76:         }",
      "77:         sb.append(str);",
      "78:         if (quotes != null) {",
      "79:             sb.append(quotes);",
      "80:         }",
      "81:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "69:             StringBuilder sb = new StringBuilder();",
      "71:             sb.append(\"type=\");",
      "73:             sb.append(\", realmId=\");",
      "75:             sb.append(\", clientId=\");",
      "77:             sb.append(\", userId=\");",
      "79:             sb.append(\", ipAddress=\");",
      "82:             if (event.getError() != null) {",
      "83:                 sb.append(\", error=\");",
      "85:             }",
      "87:             if (event.getDetails() != null) {",
      "88:                 for (Map.Entry<String, String> e : event.getDetails().entrySet()) {",
      "89:                     sb.append(\", \");",
      "99:                 }",
      "100:             }",
      "102:             AuthenticationSessionModel authSession = session.getContext().getAuthenticationSession();",
      "103:             if(authSession!=null) {",
      "104:                 sb.append(\", authSessionParentId=\");",
      "106:                 sb.append(\", authSessionTabId=\");",
      "108:             }",
      "110:             if(logger.isTraceEnabled()) {",
      "",
      "[Removed Lines]",
      "72:             sb.append(event.getType());",
      "74:             sb.append(event.getRealmId());",
      "76:             sb.append(event.getClientId());",
      "78:             sb.append(event.getUserId());",
      "80:             sb.append(event.getIpAddress());",
      "84:                 sb.append(event.getError());",
      "90:                     sb.append(e.getKey());",
      "91:                     if (e.getValue() == null || e.getValue().indexOf(' ') == -1) {",
      "92:                         sb.append(\"=\");",
      "93:                         sb.append(e.getValue());",
      "94:                     } else {",
      "95:                         sb.append(\"='\");",
      "96:                         sb.append(e.getValue());",
      "97:                         sb.append(\"'\");",
      "98:                     }",
      "105:                 sb.append(authSession.getParentSession().getId());",
      "107:                 sb.append(authSession.getTabId());",
      "",
      "[Added Lines]",
      "90:             sanitize(sb, event.getType().toString());",
      "92:             sanitize(sb, event.getRealmId());",
      "94:             sanitize(sb, event.getClientId());",
      "96:             sanitize(sb, event.getUserId());",
      "98:             sanitize(sb, event.getIpAddress());",
      "102:                 sanitize(sb, event.getError());",
      "108:                     sb.append(StringUtil.sanitizeSpacesAndQuotes(e.getKey(), null));",
      "109:                     sb.append(\"=\");",
      "110:                     sanitize(sb, e.getValue());",
      "117:                 sanitize(sb, authSession.getParentSession().getId());",
      "119:                 sanitize(sb, authSession.getTabId());",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "126:             StringBuilder sb = new StringBuilder();",
      "128:             sb.append(\"operationType=\");",
      "130:             sb.append(\", realmId=\");",
      "132:             sb.append(\", clientId=\");",
      "134:             sb.append(\", userId=\");",
      "136:             sb.append(\", ipAddress=\");",
      "138:             sb.append(\", resourceType=\");",
      "140:             sb.append(\", resourcePath=\");",
      "143:             if (adminEvent.getError() != null) {",
      "144:                 sb.append(\", error=\");",
      "146:             }",
      "148:             if(logger.isTraceEnabled()) {",
      "",
      "[Removed Lines]",
      "129:             sb.append(adminEvent.getOperationType());",
      "131:             sb.append(adminEvent.getAuthDetails().getRealmId());",
      "133:             sb.append(adminEvent.getAuthDetails().getClientId());",
      "135:             sb.append(adminEvent.getAuthDetails().getUserId());",
      "137:             sb.append(adminEvent.getAuthDetails().getIpAddress());",
      "139:             sb.append(adminEvent.getResourceTypeAsString());",
      "141:             sb.append(adminEvent.getResourcePath());",
      "145:                 sb.append(adminEvent.getError());",
      "",
      "[Added Lines]",
      "141:             sanitize(sb, adminEvent.getOperationType().toString());",
      "143:             sanitize(sb, adminEvent.getAuthDetails().getRealmId());",
      "145:             sanitize(sb, adminEvent.getAuthDetails().getClientId());",
      "147:             sanitize(sb, adminEvent.getAuthDetails().getUserId());",
      "149:             sanitize(sb, adminEvent.getAuthDetails().getIpAddress());",
      "151:             sanitize(sb, adminEvent.getResourceTypeAsString());",
      "153:             sanitize(sb, adminEvent.getResourcePath());",
      "157:                 sanitize(sb, adminEvent.getError());",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "163:         HttpHeaders headers = context.getRequestHeaders();",
      "164:         if (uriInfo != null) {",
      "165:             sb.append(\", requestUri=\");",
      "167:         }",
      "169:         if (headers != null) {",
      "",
      "[Removed Lines]",
      "166:             sb.append(uriInfo.getRequestUri().toString());",
      "",
      "[Added Lines]",
      "178:             sanitize(sb, uriInfo.getRequestUri().toString());",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "175:                 } else {",
      "176:                     sb.append(\", \");",
      "177:                 }",
      "179:             }",
      "180:             sb.append(\"]\");",
      "181:         }",
      "",
      "[Removed Lines]",
      "178:                 sb.append(e.getValue().toString());",
      "",
      "[Added Lines]",
      "190:                 sb.append(StringUtil.sanitizeSpacesAndQuotes(e.getValue().toString(), null));",
      "",
      "---------------"
    ],
    "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java": [
      "File: services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java -> services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     private Logger.Level successLevel;",
      "42:     private Logger.Level errorLevel;",
      "44:     @Override",
      "45:     public EventListenerProvider create(KeycloakSession session) {",
      "47:     }",
      "49:     @Override",
      "50:     public void init(Config.Scope config) {",
      "51:         successLevel = Logger.Level.valueOf(config.get(\"success-level\", \"debug\").toUpperCase());",
      "52:         errorLevel = Logger.Level.valueOf(config.get(\"error-level\", \"warn\").toUpperCase());",
      "53:     }",
      "55:     @Override",
      "",
      "[Removed Lines]",
      "46:         return new JBossLoggingEventListenerProvider(session, logger, successLevel, errorLevel);",
      "",
      "[Added Lines]",
      "43:     private boolean sanitize;",
      "44:     private Character quotes;",
      "48:         return new JBossLoggingEventListenerProvider(session, logger, successLevel, errorLevel, quotes, sanitize);",
      "55:         sanitize = config.getBoolean(\"sanitize\", true);",
      "56:         String quotesString = config.get(\"quotes\", \"\\\"\");",
      "57:         if (!quotesString.equals(\"none\") && quotesString.length() > 1) {",
      "58:             logger.warn(\"Invalid quotes configuration, it should be none or one character to use as quotes. Using default \\\" quotes\");",
      "59:             quotesString = \"\\\"\";",
      "60:         }",
      "61:         quotes = quotesString.equals(\"none\")? null : quotesString.charAt(0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:                 .options(logLevels)",
      "89:                 .defaultValue(\"warn\")",
      "90:                 .add()",
      "91:                 .build();",
      "92:     }",
      "93: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:                 .property()",
      "101:                 .name(\"sanitize\")",
      "102:                 .type(\"boolean\")",
      "103:                 .helpText(\"If true the log messages are sanitized to avoid line breaks. If false messages are not sanitized.\")",
      "104:                 .defaultValue(\"true\")",
      "105:                 .add()",
      "106:                 .property()",
      "107:                 .name(\"quotes\")",
      "108:                 .type(\"string\")",
      "109:                 .helpText(\"The quotes to use for values, it should be one character like \\\" or '. Use \\\"none\\\" if quotes are not needed.\")",
      "110:                 .defaultValue(\"\\\"\")",
      "111:                 .add()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "179ca3fa3ac25d901d1bd8a989a2146bb7384121",
      "candidate_info": {
        "commit_hash": "179ca3fa3ac25d901d1bd8a989a2146bb7384121",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/179ca3fa3ac25d901d1bd8a989a2146bb7384121",
        "files": [
          "docs/documentation/upgrading/topics/keycloak/changes-23_0_5.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes.adoc",
          "server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
          "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
        ],
        "message": "Sanitize logs in JBossLoggingEventListenerProvider Closes #25078\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
        "before_after_code_files": [
          "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
          "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
            "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
          ],
          "candidate": [
            "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
            "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java": [
          "File: server-spi/src/main/java/org/keycloak/utils/StringUtil.java -> server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         return options.toString();",
          "57:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     public static String sanitizeSpacesAndQuotes(String str, Character quotes) {",
          "71:         if (str == null || str.isEmpty()) {",
          "72:             return str;",
          "73:         }",
          "74:         StringBuilder sb = null;",
          "75:         for (int i = 0; i < str.length(); i++) {",
          "76:             final char actualChar = str.charAt(i);",
          "77:             if ((Character.isWhitespace(actualChar) && actualChar != ' ') || actualChar == 160) {",
          "78:                 if (sb == null) {",
          "79:                     sb = new StringBuilder(str.length() + 10).append(str.substring(0, i));",
          "80:                 }",
          "81:                 sb.append(' ');",
          "82:             } else if (quotes != null && actualChar == quotes) {",
          "83:                 if (sb == null) {",
          "84:                     sb = new StringBuilder(str.length() + 10).append(str.substring(0, i));",
          "85:                 }",
          "86:                 sb.append('\\\\').append(actualChar);",
          "87:             } else if (sb != null) {",
          "88:                 sb.append(actualChar);",
          "89:             }",
          "90:         }",
          "91:         return sb == null? str : sb.toString();",
          "92:     }",
          "",
          "---------------"
        ],
        "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java": [
          "File: server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java -> server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.keycloak.utils;",
          "19: import org.junit.Assert;",
          "20: import org.junit.Test;",
          "26: public class StringUtilTest {",
          "28:     @Test",
          "29:     public void testSanitize() {",
          "30:         Assert.assertEquals(\"test1 test2 test3\", StringUtil.sanitizeSpacesAndQuotes(\"test1 test2 test3\", null));",
          "31:         Assert.assertEquals(\"test1 test2 test3\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\", null));",
          "32:         Assert.assertEquals(\"test1 test2 test3 \\\"test4\\\"\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\\r\\\"test4\\\"\", null));",
          "33:         Assert.assertEquals(\"teswith\\\\\\\"quotes\", StringUtil.sanitizeSpacesAndQuotes(\"teswith\\\"quotes\", '\"'));",
          "34:         Assert.assertEquals(\"test1 test2 test3 \\\\\\\"test4\\\\\\\"\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\\r\\\"test4\\\"\", '\"'));",
          "35:         Assert.assertEquals(\" \\\\\\\"test\", StringUtil.sanitizeSpacesAndQuotes(\"\\n\\\"test\", '\"'));",
          "36:         Assert.assertEquals(\"\\\\\\\" test\", StringUtil.sanitizeSpacesAndQuotes(\"\\\"\\rtest\", '\"'));",
          "37:     }",
          "38: }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java": [
          "File: services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java -> services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.events.log;",
          "21: import org.jboss.logging.Logger;",
          "22: import org.keycloak.events.Event;",
          "23: import org.keycloak.events.EventListenerProvider;",
          "24: import org.keycloak.events.EventListenerTransaction;",
          "",
          "[Removed Lines]",
          "20: import org.keycloak.common.util.StackUtil;",
          "",
          "[Added Lines]",
          "21: import org.keycloak.common.util.StackUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.keycloak.models.KeycloakContext;",
          "27: import org.keycloak.models.KeycloakSession;",
          "28: import org.keycloak.sessions.AuthenticationSessionModel;",
          "30: import jakarta.ws.rs.core.Cookie;",
          "31: import jakarta.ws.rs.core.HttpHeaders;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.keycloak.utils.StringUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     private final Logger logger;",
          "42:     private final Logger.Level successLevel;",
          "43:     private final Logger.Level errorLevel;",
          "44:     private final EventListenerTransaction tx = new EventListenerTransaction(this::logAdminEvent, this::logEvent);",
          "47:         this.session = session;",
          "48:         this.logger = logger;",
          "49:         this.successLevel = successLevel;",
          "50:         this.errorLevel = errorLevel;",
          "52:         this.session.getTransactionManager().enlistAfterCompletion(tx);",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:     public JBossLoggingEventListenerProvider(KeycloakSession session, Logger logger, Logger.Level successLevel, Logger.Level errorLevel) {",
          "",
          "[Added Lines]",
          "45:     private final boolean sanitize;",
          "46:     private final Character quotes;",
          "49:     public JBossLoggingEventListenerProvider(KeycloakSession session, Logger logger,",
          "50:             Logger.Level successLevel, Logger.Level errorLevel, Character quotes, boolean sanitize) {",
          "55:         this.sanitize = sanitize;",
          "56:         this.quotes = quotes;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:         tx.addAdminEvent(adminEvent, includeRepresentation);",
          "63:     }",
          "65:     private void logEvent(Event event) {",
          "66:         Logger.Level level = event.getError() != null ? errorLevel : successLevel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     private void sanitize(StringBuilder sb, String str) {",
          "71:         if (quotes != null) {",
          "72:             sb.append(quotes);",
          "73:         }",
          "74:         if (sanitize) {",
          "75:             str = StringUtil.sanitizeSpacesAndQuotes(str, quotes);",
          "76:         }",
          "77:         sb.append(str);",
          "78:         if (quotes != null) {",
          "79:             sb.append(quotes);",
          "80:         }",
          "81:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:             StringBuilder sb = new StringBuilder();",
          "71:             sb.append(\"type=\");",
          "73:             sb.append(\", realmId=\");",
          "75:             sb.append(\", clientId=\");",
          "77:             sb.append(\", userId=\");",
          "79:             sb.append(\", ipAddress=\");",
          "82:             if (event.getError() != null) {",
          "83:                 sb.append(\", error=\");",
          "85:             }",
          "87:             if (event.getDetails() != null) {",
          "88:                 for (Map.Entry<String, String> e : event.getDetails().entrySet()) {",
          "89:                     sb.append(\", \");",
          "99:                 }",
          "100:             }",
          "102:             AuthenticationSessionModel authSession = session.getContext().getAuthenticationSession();",
          "103:             if(authSession!=null) {",
          "104:                 sb.append(\", authSessionParentId=\");",
          "106:                 sb.append(\", authSessionTabId=\");",
          "108:             }",
          "110:             if(logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "72:             sb.append(event.getType());",
          "74:             sb.append(event.getRealmId());",
          "76:             sb.append(event.getClientId());",
          "78:             sb.append(event.getUserId());",
          "80:             sb.append(event.getIpAddress());",
          "84:                 sb.append(event.getError());",
          "90:                     sb.append(e.getKey());",
          "91:                     if (e.getValue() == null || e.getValue().indexOf(' ') == -1) {",
          "92:                         sb.append(\"=\");",
          "93:                         sb.append(e.getValue());",
          "94:                     } else {",
          "95:                         sb.append(\"='\");",
          "96:                         sb.append(e.getValue());",
          "97:                         sb.append(\"'\");",
          "98:                     }",
          "105:                 sb.append(authSession.getParentSession().getId());",
          "107:                 sb.append(authSession.getTabId());",
          "",
          "[Added Lines]",
          "90:             sanitize(sb, event.getType().toString());",
          "92:             sanitize(sb, event.getRealmId());",
          "94:             sanitize(sb, event.getClientId());",
          "96:             sanitize(sb, event.getUserId());",
          "98:             sanitize(sb, event.getIpAddress());",
          "102:                 sanitize(sb, event.getError());",
          "108:                     sb.append(StringUtil.sanitizeSpacesAndQuotes(e.getKey(), null));",
          "109:                     sb.append(\"=\");",
          "110:                     sanitize(sb, e.getValue());",
          "117:                 sanitize(sb, authSession.getParentSession().getId());",
          "119:                 sanitize(sb, authSession.getTabId());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:             StringBuilder sb = new StringBuilder();",
          "128:             sb.append(\"operationType=\");",
          "130:             sb.append(\", realmId=\");",
          "132:             sb.append(\", clientId=\");",
          "134:             sb.append(\", userId=\");",
          "136:             sb.append(\", ipAddress=\");",
          "138:             sb.append(\", resourceType=\");",
          "140:             sb.append(\", resourcePath=\");",
          "143:             if (adminEvent.getError() != null) {",
          "144:                 sb.append(\", error=\");",
          "146:             }",
          "148:             if(logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "129:             sb.append(adminEvent.getOperationType());",
          "131:             sb.append(adminEvent.getAuthDetails().getRealmId());",
          "133:             sb.append(adminEvent.getAuthDetails().getClientId());",
          "135:             sb.append(adminEvent.getAuthDetails().getUserId());",
          "137:             sb.append(adminEvent.getAuthDetails().getIpAddress());",
          "139:             sb.append(adminEvent.getResourceTypeAsString());",
          "141:             sb.append(adminEvent.getResourcePath());",
          "145:                 sb.append(adminEvent.getError());",
          "",
          "[Added Lines]",
          "141:             sanitize(sb, adminEvent.getOperationType().toString());",
          "143:             sanitize(sb, adminEvent.getAuthDetails().getRealmId());",
          "145:             sanitize(sb, adminEvent.getAuthDetails().getClientId());",
          "147:             sanitize(sb, adminEvent.getAuthDetails().getUserId());",
          "149:             sanitize(sb, adminEvent.getAuthDetails().getIpAddress());",
          "151:             sanitize(sb, adminEvent.getResourceTypeAsString());",
          "153:             sanitize(sb, adminEvent.getResourcePath());",
          "157:                 sanitize(sb, adminEvent.getError());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163:         HttpHeaders headers = context.getRequestHeaders();",
          "164:         if (uriInfo != null) {",
          "165:             sb.append(\", requestUri=\");",
          "167:         }",
          "169:         if (headers != null) {",
          "",
          "[Removed Lines]",
          "166:             sb.append(uriInfo.getRequestUri().toString());",
          "",
          "[Added Lines]",
          "178:             sanitize(sb, uriInfo.getRequestUri().toString());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175:                 } else {",
          "176:                     sb.append(\", \");",
          "177:                 }",
          "179:             }",
          "180:             sb.append(\"]\");",
          "181:         }",
          "",
          "[Removed Lines]",
          "178:                 sb.append(e.getValue().toString());",
          "",
          "[Added Lines]",
          "190:                 sb.append(StringUtil.sanitizeSpacesAndQuotes(e.getValue().toString(), null));",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java": [
          "File: services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java -> services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     private Logger.Level successLevel;",
          "42:     private Logger.Level errorLevel;",
          "44:     @Override",
          "45:     public EventListenerProvider create(KeycloakSession session) {",
          "47:     }",
          "49:     @Override",
          "50:     public void init(Config.Scope config) {",
          "51:         successLevel = Logger.Level.valueOf(config.get(\"success-level\", \"debug\").toUpperCase());",
          "52:         errorLevel = Logger.Level.valueOf(config.get(\"error-level\", \"warn\").toUpperCase());",
          "53:     }",
          "55:     @Override",
          "",
          "[Removed Lines]",
          "46:         return new JBossLoggingEventListenerProvider(session, logger, successLevel, errorLevel);",
          "",
          "[Added Lines]",
          "43:     private boolean sanitize;",
          "44:     private Character quotes;",
          "48:         return new JBossLoggingEventListenerProvider(session, logger, successLevel, errorLevel, quotes, sanitize);",
          "55:         sanitize = config.getBoolean(\"sanitize\", true);",
          "56:         String quotesString = config.get(\"quotes\", \"\\\"\");",
          "57:         if (!quotesString.equals(\"none\") && quotesString.length() > 1) {",
          "58:             logger.warn(\"Invalid quotes configuration, it should be none or one character to use as quotes. Using default \\\" quotes\");",
          "59:             quotesString = \"\\\"\";",
          "60:         }",
          "61:         quotes = quotesString.equals(\"none\")? null : quotesString.charAt(0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                 .options(logLevels)",
          "89:                 .defaultValue(\"warn\")",
          "90:                 .add()",
          "91:                 .build();",
          "92:     }",
          "93: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:                 .property()",
          "101:                 .name(\"sanitize\")",
          "102:                 .type(\"boolean\")",
          "103:                 .helpText(\"If true the log messages are sanitized to avoid line breaks. If false messages are not sanitized.\")",
          "104:                 .defaultValue(\"true\")",
          "105:                 .add()",
          "106:                 .property()",
          "107:                 .name(\"quotes\")",
          "108:                 .type(\"string\")",
          "109:                 .helpText(\"The quotes to use for values, it should be one character like \\\" or '. Use \\\"none\\\" if quotes are not needed.\")",
          "110:                 .defaultValue(\"\\\"\")",
          "111:                 .add()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9049565a9a228faa08138b9269d66d3de6c7e9a",
      "candidate_info": {
        "commit_hash": "f9049565a9a228faa08138b9269d66d3de6c7e9a",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/f9049565a9a228faa08138b9269d66d3de6c7e9a",
        "files": [
          "docs/documentation/upgrading/topics/keycloak/changes-23_0_5.adoc",
          "docs/documentation/upgrading/topics/keycloak/changes.adoc",
          "server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
          "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
        ],
        "message": "Sanitize logs in JBossLoggingEventListenerProvider Closes #25078\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>\n(cherry picked from commit 179ca3fa3ac25d901d1bd8a989a2146bb7384121)",
        "before_after_code_files": [
          "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
          "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
          "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
            "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
          ],
          "candidate": [
            "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
            "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
            "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "server-spi/src/main/java/org/keycloak/utils/StringUtil.java||server-spi/src/main/java/org/keycloak/utils/StringUtil.java": [
          "File: server-spi/src/main/java/org/keycloak/utils/StringUtil.java -> server-spi/src/main/java/org/keycloak/utils/StringUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         return options.toString();",
          "57:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     public static String sanitizeSpacesAndQuotes(String str, Character quotes) {",
          "71:         if (str == null || str.isEmpty()) {",
          "72:             return str;",
          "73:         }",
          "74:         StringBuilder sb = null;",
          "75:         for (int i = 0; i < str.length(); i++) {",
          "76:             final char actualChar = str.charAt(i);",
          "77:             if ((Character.isWhitespace(actualChar) && actualChar != ' ') || actualChar == 160) {",
          "78:                 if (sb == null) {",
          "79:                     sb = new StringBuilder(str.length() + 10).append(str.substring(0, i));",
          "80:                 }",
          "81:                 sb.append(' ');",
          "82:             } else if (quotes != null && actualChar == quotes) {",
          "83:                 if (sb == null) {",
          "84:                     sb = new StringBuilder(str.length() + 10).append(str.substring(0, i));",
          "85:                 }",
          "86:                 sb.append('\\\\').append(actualChar);",
          "87:             } else if (sb != null) {",
          "88:                 sb.append(actualChar);",
          "89:             }",
          "90:         }",
          "91:         return sb == null? str : sb.toString();",
          "92:     }",
          "",
          "---------------"
        ],
        "server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java||server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java": [
          "File: server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java -> server-spi/src/test/java/org/keycloak/utils/StringUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.keycloak.utils;",
          "19: import org.junit.Assert;",
          "20: import org.junit.Test;",
          "26: public class StringUtilTest {",
          "28:     @Test",
          "29:     public void testSanitize() {",
          "30:         Assert.assertEquals(\"test1 test2 test3\", StringUtil.sanitizeSpacesAndQuotes(\"test1 test2 test3\", null));",
          "31:         Assert.assertEquals(\"test1 test2 test3\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\", null));",
          "32:         Assert.assertEquals(\"test1 test2 test3 \\\"test4\\\"\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\\r\\\"test4\\\"\", null));",
          "33:         Assert.assertEquals(\"teswith\\\\\\\"quotes\", StringUtil.sanitizeSpacesAndQuotes(\"teswith\\\"quotes\", '\"'));",
          "34:         Assert.assertEquals(\"test1 test2 test3 \\\\\\\"test4\\\\\\\"\", StringUtil.sanitizeSpacesAndQuotes(\"test1\\ntest2\\ttest3\\r\\\"test4\\\"\", '\"'));",
          "35:         Assert.assertEquals(\" \\\\\\\"test\", StringUtil.sanitizeSpacesAndQuotes(\"\\n\\\"test\", '\"'));",
          "36:         Assert.assertEquals(\"\\\\\\\" test\", StringUtil.sanitizeSpacesAndQuotes(\"\\\"\\rtest\", '\"'));",
          "37:     }",
          "38: }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java": [
          "File: services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java -> services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.events.log;",
          "21: import org.jboss.logging.Logger;",
          "22: import org.keycloak.events.Event;",
          "23: import org.keycloak.events.EventListenerProvider;",
          "24: import org.keycloak.events.EventListenerTransaction;",
          "",
          "[Removed Lines]",
          "20: import org.keycloak.common.util.StackUtil;",
          "",
          "[Added Lines]",
          "21: import org.keycloak.common.util.StackUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.keycloak.models.KeycloakContext;",
          "27: import org.keycloak.models.KeycloakSession;",
          "28: import org.keycloak.sessions.AuthenticationSessionModel;",
          "30: import jakarta.ws.rs.core.Cookie;",
          "31: import jakarta.ws.rs.core.HttpHeaders;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.keycloak.utils.StringUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     private final Logger logger;",
          "42:     private final Logger.Level successLevel;",
          "43:     private final Logger.Level errorLevel;",
          "44:     private final EventListenerTransaction tx = new EventListenerTransaction(this::logAdminEvent, this::logEvent);",
          "47:         this.session = session;",
          "48:         this.logger = logger;",
          "49:         this.successLevel = successLevel;",
          "50:         this.errorLevel = errorLevel;",
          "52:         this.session.getTransactionManager().enlistAfterCompletion(tx);",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:     public JBossLoggingEventListenerProvider(KeycloakSession session, Logger logger, Logger.Level successLevel, Logger.Level errorLevel) {",
          "",
          "[Added Lines]",
          "45:     private final boolean sanitize;",
          "46:     private final Character quotes;",
          "49:     public JBossLoggingEventListenerProvider(KeycloakSession session, Logger logger,",
          "50:             Logger.Level successLevel, Logger.Level errorLevel, Character quotes, boolean sanitize) {",
          "55:         this.sanitize = sanitize;",
          "56:         this.quotes = quotes;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:         tx.addAdminEvent(adminEvent, includeRepresentation);",
          "63:     }",
          "65:     private void logEvent(Event event) {",
          "66:         Logger.Level level = event.getError() != null ? errorLevel : successLevel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     private void sanitize(StringBuilder sb, String str) {",
          "71:         if (quotes != null) {",
          "72:             sb.append(quotes);",
          "73:         }",
          "74:         if (sanitize) {",
          "75:             str = StringUtil.sanitizeSpacesAndQuotes(str, quotes);",
          "76:         }",
          "77:         sb.append(str);",
          "78:         if (quotes != null) {",
          "79:             sb.append(quotes);",
          "80:         }",
          "81:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:             StringBuilder sb = new StringBuilder();",
          "71:             sb.append(\"type=\");",
          "73:             sb.append(\", realmId=\");",
          "75:             sb.append(\", clientId=\");",
          "77:             sb.append(\", userId=\");",
          "79:             sb.append(\", ipAddress=\");",
          "82:             if (event.getError() != null) {",
          "83:                 sb.append(\", error=\");",
          "85:             }",
          "87:             if (event.getDetails() != null) {",
          "88:                 for (Map.Entry<String, String> e : event.getDetails().entrySet()) {",
          "89:                     sb.append(\", \");",
          "99:                 }",
          "100:             }",
          "102:             AuthenticationSessionModel authSession = session.getContext().getAuthenticationSession();",
          "103:             if(authSession!=null) {",
          "104:                 sb.append(\", authSessionParentId=\");",
          "106:                 sb.append(\", authSessionTabId=\");",
          "108:             }",
          "110:             if(logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "72:             sb.append(event.getType());",
          "74:             sb.append(event.getRealmId());",
          "76:             sb.append(event.getClientId());",
          "78:             sb.append(event.getUserId());",
          "80:             sb.append(event.getIpAddress());",
          "84:                 sb.append(event.getError());",
          "90:                     sb.append(e.getKey());",
          "91:                     if (e.getValue() == null || e.getValue().indexOf(' ') == -1) {",
          "92:                         sb.append(\"=\");",
          "93:                         sb.append(e.getValue());",
          "94:                     } else {",
          "95:                         sb.append(\"='\");",
          "96:                         sb.append(e.getValue());",
          "97:                         sb.append(\"'\");",
          "98:                     }",
          "105:                 sb.append(authSession.getParentSession().getId());",
          "107:                 sb.append(authSession.getTabId());",
          "",
          "[Added Lines]",
          "90:             sanitize(sb, event.getType().toString());",
          "92:             sanitize(sb, event.getRealmId());",
          "94:             sanitize(sb, event.getClientId());",
          "96:             sanitize(sb, event.getUserId());",
          "98:             sanitize(sb, event.getIpAddress());",
          "102:                 sanitize(sb, event.getError());",
          "108:                     sb.append(StringUtil.sanitizeSpacesAndQuotes(e.getKey(), null));",
          "109:                     sb.append(\"=\");",
          "110:                     sanitize(sb, e.getValue());",
          "117:                 sanitize(sb, authSession.getParentSession().getId());",
          "119:                 sanitize(sb, authSession.getTabId());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:             StringBuilder sb = new StringBuilder();",
          "128:             sb.append(\"operationType=\");",
          "130:             sb.append(\", realmId=\");",
          "132:             sb.append(\", clientId=\");",
          "134:             sb.append(\", userId=\");",
          "136:             sb.append(\", ipAddress=\");",
          "138:             sb.append(\", resourceType=\");",
          "140:             sb.append(\", resourcePath=\");",
          "143:             if (adminEvent.getError() != null) {",
          "144:                 sb.append(\", error=\");",
          "146:             }",
          "148:             if(logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "129:             sb.append(adminEvent.getOperationType());",
          "131:             sb.append(adminEvent.getAuthDetails().getRealmId());",
          "133:             sb.append(adminEvent.getAuthDetails().getClientId());",
          "135:             sb.append(adminEvent.getAuthDetails().getUserId());",
          "137:             sb.append(adminEvent.getAuthDetails().getIpAddress());",
          "139:             sb.append(adminEvent.getResourceTypeAsString());",
          "141:             sb.append(adminEvent.getResourcePath());",
          "145:                 sb.append(adminEvent.getError());",
          "",
          "[Added Lines]",
          "141:             sanitize(sb, adminEvent.getOperationType().toString());",
          "143:             sanitize(sb, adminEvent.getAuthDetails().getRealmId());",
          "145:             sanitize(sb, adminEvent.getAuthDetails().getClientId());",
          "147:             sanitize(sb, adminEvent.getAuthDetails().getUserId());",
          "149:             sanitize(sb, adminEvent.getAuthDetails().getIpAddress());",
          "151:             sanitize(sb, adminEvent.getResourceTypeAsString());",
          "153:             sanitize(sb, adminEvent.getResourcePath());",
          "157:                 sanitize(sb, adminEvent.getError());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163:         HttpHeaders headers = context.getRequestHeaders();",
          "164:         if (uriInfo != null) {",
          "165:             sb.append(\", requestUri=\");",
          "167:         }",
          "169:         if (headers != null) {",
          "",
          "[Removed Lines]",
          "166:             sb.append(uriInfo.getRequestUri().toString());",
          "",
          "[Added Lines]",
          "178:             sanitize(sb, uriInfo.getRequestUri().toString());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175:                 } else {",
          "176:                     sb.append(\", \");",
          "177:                 }",
          "179:             }",
          "180:             sb.append(\"]\");",
          "181:         }",
          "",
          "[Removed Lines]",
          "178:                 sb.append(e.getValue().toString());",
          "",
          "[Added Lines]",
          "190:                 sb.append(StringUtil.sanitizeSpacesAndQuotes(e.getValue().toString(), null));",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java||services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java": [
          "File: services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java -> services/src/main/java/org/keycloak/events/log/JBossLoggingEventListenerProviderFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     private Logger.Level successLevel;",
          "42:     private Logger.Level errorLevel;",
          "44:     @Override",
          "45:     public EventListenerProvider create(KeycloakSession session) {",
          "47:     }",
          "49:     @Override",
          "50:     public void init(Config.Scope config) {",
          "51:         successLevel = Logger.Level.valueOf(config.get(\"success-level\", \"debug\").toUpperCase());",
          "52:         errorLevel = Logger.Level.valueOf(config.get(\"error-level\", \"warn\").toUpperCase());",
          "53:     }",
          "55:     @Override",
          "",
          "[Removed Lines]",
          "46:         return new JBossLoggingEventListenerProvider(session, logger, successLevel, errorLevel);",
          "",
          "[Added Lines]",
          "43:     private boolean sanitize;",
          "44:     private Character quotes;",
          "48:         return new JBossLoggingEventListenerProvider(session, logger, successLevel, errorLevel, quotes, sanitize);",
          "55:         sanitize = config.getBoolean(\"sanitize\", true);",
          "56:         String quotesString = config.get(\"quotes\", \"\\\"\");",
          "57:         if (!quotesString.equals(\"none\") && quotesString.length() > 1) {",
          "58:             logger.warn(\"Invalid quotes configuration, it should be none or one character to use as quotes. Using default \\\" quotes\");",
          "59:             quotesString = \"\\\"\";",
          "60:         }",
          "61:         quotes = quotesString.equals(\"none\")? null : quotesString.charAt(0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                 .options(logLevels)",
          "89:                 .defaultValue(\"warn\")",
          "90:                 .add()",
          "91:                 .build();",
          "92:     }",
          "93: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:                 .property()",
          "101:                 .name(\"sanitize\")",
          "102:                 .type(\"boolean\")",
          "103:                 .helpText(\"If true the log messages are sanitized to avoid line breaks. If false messages are not sanitized.\")",
          "104:                 .defaultValue(\"true\")",
          "105:                 .add()",
          "106:                 .property()",
          "107:                 .name(\"quotes\")",
          "108:                 .type(\"string\")",
          "109:                 .helpText(\"The quotes to use for values, it should be one character like \\\" or '. Use \\\"none\\\" if quotes are not needed.\")",
          "110:                 .defaultValue(\"\\\"\")",
          "111:                 .add()",
          "",
          "---------------"
        ]
      }
    }
  ]
}