{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
  "patch_info": {
    "commit_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "files": [
      "tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py"
    ],
    "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
    "before_after_code_files": [
      "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
    ]
  },
  "patch_diff": {
    "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py": [
      "File: tests/integration/ssh/test_pre_flight.py -> tests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
      "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: Test for ssh_pre_flight roster option",
      "3: \"\"\"",
      "5: import grp",
      "6: import os",
      "7: import pathlib",
      "8: import pwd",
      "9: import shutil",
      "10: import subprocess",
      "12: import pytest",
      "13: import yaml",
      "14: from saltfactories.utils import random_string",
      "16: import salt.utils.files",
      "19: def _custom_roster(roster_file, roster_data):",
      "20:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
      "21:         data = salt.utils.yaml.safe_load(fp)",
      "22:     for key, item in roster_data.items():",
      "23:         data[\"localhost\"][key] = item",
      "24:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
      "25:         yaml.safe_dump(data, fp)",
      "28: @pytest.fixture",
      "29: def _create_roster(salt_ssh_roster_file, tmp_path):",
      "30:     ret = {}",
      "31:     ret[\"roster\"] = salt_ssh_roster_file",
      "32:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
      "33:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
      "34:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
      "36:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
      "37:         data = salt.utils.yaml.safe_load(fp)",
      "38:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
      "39:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
      "40:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
      "41:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
      "42:         yaml.safe_dump(data, fp)",
      "44:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
      "45:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
      "47:     yield ret",
      "48:     if ret[\"thin_dir\"].exists():",
      "49:         shutil.rmtree(ret[\"thin_dir\"])",
      "52: @pytest.mark.slow_test",
      "53: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
      "54:     \"\"\"",
      "55:     test ssh when ssh_pre_flight is set",
      "56:     ensure the script runs successfully",
      "57:     \"\"\"",
      "58:     ret = salt_ssh_cli.run(\"test.ping\")",
      "59:     assert ret.returncode == 0",
      "61:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "64: @pytest.mark.slow_test",
      "65: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
      "66:     \"\"\"",
      "67:     test ssh when --pre-flight is passed to salt-ssh",
      "68:     to ensure the script runs successfully",
      "69:     \"\"\"",
      "70:     # make sure we previously ran a command so the thin dir exists",
      "71:     ret = salt_ssh_cli.run(\"test.ping\")",
      "72:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "74:     # Now remeove the script to ensure pre_flight doesn't run",
      "75:     # without --pre-flight",
      "76:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
      "78:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
      "79:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "81:     # Now ensure",
      "82:     ret = salt_ssh_cli.run(",
      "83:         \"test.ping\",",
      "84:         \"--pre-flight\",",
      "85:     )",
      "86:     assert ret.returncode == 0",
      "87:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "90: @pytest.mark.slow_test",
      "91: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
      "92:     \"\"\"",
      "93:     test ssh when --pre-flight is passed to salt-ssh",
      "94:     to ensure the script runs successfully passing some args",
      "95:     \"\"\"",
      "96:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
      "97:     # Create pre_flight script that accepts args",
      "98:     test_script = _create_roster[\"test_script\"]",
      "99:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
      "100:     test_script_2 = pathlib.Path(test_script + \"-test\")",
      "101:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "102:         fp.write(",
      "103:             f\"\"\"",
      "104:         touch {str(test_script)}-$1",
      "105:         touch {str(test_script)}-$2",
      "106:         \"\"\"",
      "107:         )",
      "108:     ret = salt_ssh_cli.run(\"test.ping\")",
      "109:     assert ret.returncode == 0",
      "110:     assert test_script_1.exists()",
      "111:     assert test_script_2.exists()",
      "112:     pathlib.Path(test_script_1).unlink()",
      "113:     pathlib.Path(test_script_2).unlink()",
      "115:     ret = salt_ssh_cli.run(\"test.ping\")",
      "116:     assert ret.returncode == 0",
      "117:     assert not test_script_1.exists()",
      "118:     assert not test_script_2.exists()",
      "120:     ret = salt_ssh_cli.run(",
      "121:         \"test.ping\",",
      "122:         \"--pre-flight\",",
      "123:     )",
      "124:     assert ret.returncode == 0",
      "125:     assert test_script_1.exists()",
      "126:     assert test_script_2.exists()",
      "129: @pytest.mark.slow_test",
      "130: def test_ssh_run_pre_flight_args_prevent_injection(",
      "131:     salt_ssh_cli, _create_roster, tmp_path",
      "132: ):",
      "133:     \"\"\"",
      "134:     test ssh when --pre-flight is passed to salt-ssh",
      "135:     and evil arguments are used in order to produce shell injection",
      "136:     \"\"\"",
      "137:     injected_file = tmp_path / \"injection\"",
      "138:     _custom_roster(",
      "139:         salt_ssh_cli.roster_file,",
      "140:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
      "141:     )",
      "142:     # Create pre_flight script that accepts args",
      "143:     test_script = _create_roster[\"test_script\"]",
      "144:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
      "145:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
      "146:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "147:         fp.write(",
      "148:             f\"\"\"",
      "149:         touch {str(test_script)}-$1",
      "150:         touch {str(test_script)}-$2",
      "151:         \"\"\"",
      "152:         )",
      "154:     # make sure we previously ran a command so the thin dir exists",
      "155:     ret = salt_ssh_cli.run(\"test.ping\")",
      "156:     assert ret.returncode == 0",
      "157:     assert test_script_1.exists()",
      "158:     assert test_script_2.exists()",
      "159:     test_script_1.unlink()",
      "160:     test_script_2.unlink()",
      "161:     assert not injected_file.is_file()",
      "163:     ret = salt_ssh_cli.run(",
      "164:         \"test.ping\",",
      "165:         \"--pre-flight\",",
      "166:     )",
      "167:     assert ret.returncode == 0",
      "169:     assert test_script_1.exists()",
      "170:     assert test_script_2.exists()",
      "171:     assert not pathlib.Path(",
      "172:         injected_file",
      "173:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
      "176: @pytest.mark.flaky(max_runs=4)",
      "177: @pytest.mark.slow_test",
      "178: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
      "179:     \"\"\"",
      "180:     test ssh_pre_flight when there is a failure",
      "181:     in the script.",
      "182:     \"\"\"",
      "183:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "184:         fp_.write(\"exit 2\")",
      "186:     ret = salt_ssh_cli.run(",
      "187:         \"test.ping\",",
      "188:         \"--pre-flight\",",
      "189:     )",
      "190:     assert ret.data[\"retcode\"] == 2",
      "193: @pytest.fixture",
      "194: def account():",
      "195:     username = random_string(\"test-account-\", uppercase=False)",
      "196:     with pytest.helpers.create_account(username=username) as account:",
      "197:         yield account",
      "200: @pytest.mark.slow_test",
      "201: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
      "202:     \"\"\"",
      "203:     Test to ensure user cannot create and run a script",
      "204:     with the expected pre_flight script path on target.",
      "205:     \"\"\"",
      "206:     try:",
      "207:         script = pathlib.Path.home() / \"hacked\"",
      "208:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
      "209:         tmp_preflight.write_text(f\"touch {script}\")",
      "210:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
      "211:         ret = salt_ssh_cli.run(\"test.ping\")",
      "212:         assert not script.is_file()",
      "213:         assert ret.returncode == 0",
      "214:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
      "215:     finally:",
      "216:         for _file in [script, tmp_preflight]:",
      "217:             if _file.is_file():",
      "218:                 _file.unlink()",
      "221: def demote(user_uid, user_gid):",
      "222:     def result():",
      "223:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
      "224:         os.setgroups([])",
      "225:         os.setgid(user_gid)",
      "226:         os.setuid(user_uid)",
      "228:     return result",
      "231: @pytest.mark.slow_test",
      "232: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
      "233:     \"\"\"",
      "234:     Test to ensure standard user cannot run pre flight script",
      "235:     on target when user sets wrong permissions (777) on",
      "236:     ssh_pre_flight script.",
      "237:     \"\"\"",
      "238:     try:",
      "239:         script = pathlib.Path(\"/tmp\", \"itworked\")",
      "240:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
      "241:         preflight.write_text(f\"touch {str(script)}\")",
      "242:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
      "244:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
      "245:         preflight.chmod(0o0777)",
      "246:         run_script = pathlib.Path(\"/run_script\")",
      "247:         run_script.write_text(",
      "248:             f\"\"\"",
      "249:         x=1",
      "250:         while [ $x -le 200000 ]; do",
      "251:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
      "252:             if [ ${{SCRIPT}} == 0 ]; then",
      "253:                 break",
      "254:             fi",
      "255:             x=$(( $x + 1 ))",
      "256:         done",
      "257:         \"\"\"",
      "258:         )",
      "259:         run_script.chmod(0o0777)",
      "260:         # pylint: disable=W1509",
      "261:         ret = subprocess.Popen(",
      "262:             [\"sh\", f\"{run_script}\"],",
      "263:             preexec_fn=demote(account.info.uid, account.info.gid),",
      "264:             stdout=None,",
      "265:             stderr=None,",
      "266:             stdin=None,",
      "267:             universal_newlines=True,",
      "268:         )",
      "269:         # pylint: enable=W1509",
      "270:         ret = salt_ssh_cli.run(\"test.ping\")",
      "271:         assert ret.returncode == 0",
      "273:         # Lets make sure a different user other than root",
      "274:         # Didn't run the script",
      "275:         assert os.stat(script).st_uid != account.info.uid",
      "276:         assert script.is_file()",
      "277:     finally:",
      "278:         for _file in [script, preflight, tmp_preflight, run_script]:",
      "279:             if _file.is_file():",
      "280:                 _file.unlink()",
      "283: @pytest.mark.slow_test",
      "284: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
      "285:     \"\"\"",
      "286:     test ssh_pre_flight to ensure the target pre flight script",
      "287:     has the correct perms",
      "288:     \"\"\"",
      "289:     perms_file = tmp_path / \"perms\"",
      "290:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "291:         fp_.write(",
      "292:             f\"\"\"",
      "293:         SCRIPT_NAME=$0",
      "294:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
      "295:         \"\"\"",
      "296:         )",
      "298:     ret = salt_ssh_cli.run(",
      "299:         \"test.ping\",",
      "300:         \"--pre-flight\",",
      "301:     )",
      "302:     assert ret.returncode == 0",
      "303:     with salt.utils.files.fopen(perms_file) as fp:",
      "304:         data = fp.read()",
      "305:     assert data.split()[0] == \"600\"",
      "306:     uid = os.getuid()",
      "307:     gid = os.getgid()",
      "308:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
      "309:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e46e33ab9d0e8c9d3d64629d13bf9e94ef4484cb",
      "candidate_info": {
        "commit_hash": "e46e33ab9d0e8c9d3d64629d13bf9e94ef4484cb",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e46e33ab9d0e8c9d3d64629d13bf9e94ef4484cb",
        "files": [
          "tests/pytests/unit/fileclient/test_fileclient.py"
        ],
        "message": "Remove unused variable\n\nAdded while resolving conflicts from merge forward\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py": [
          "File: tests/pytests/unit/fileclient/test_fileclient.py -> tests/pytests/unit/fileclient/test_fileclient.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:             \"request_channel_tries\": 1,",
          "117:         }",
          "118:     )",
          "123:     def mock_dumps(*args):",
          "124:         return b\"meh\"",
          "",
          "[Removed Lines]",
          "119:     master_uri = \"tcp://{master_ip}:{master_port}\".format(",
          "120:         master_ip=\"localhost\", master_port=minion_opts[\"master_port\"]",
          "121:     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "805a8deb74e35dde23b906ecacccba852a707a73",
      "candidate_info": {
        "commit_hash": "805a8deb74e35dde23b906ecacccba852a707a73",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/805a8deb74e35dde23b906ecacccba852a707a73",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py"
        ],
        "message": "Fix logs in ssh tests",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:     with caplog.at_level(logging.TRACE):",
          "411:         with patch_send, patch_exec_cmd, patch_tmp:",
          "412:             ret = single.run_ssh_pre_flight()",
          "418:     assert ret == ret_send",
          "419:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "420:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "413:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "414:     assert (",
          "415:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "416:         in caplog.text",
          "417:     )",
          "",
          "[Added Lines]",
          "413:     assert \"Copying the pre flight script\" in caplog.text",
          "414:     assert \"Could not copy the pre flight script to target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:         with patch_send, patch_exec_cmd, patch_tmp:",
          "506:             ret = single.run_ssh_pre_flight()",
          "509:     assert ret == ret_exec_cmd",
          "510:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "511:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "508:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "",
          "[Added Lines]",
          "505:     assert \"Executing the pre flight script on target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:     assert ret == (",
          "552:         \"\",",
          "554:         1,",
          "555:     )",
          "556:     mock_exec_cmd.assert_not_called()",
          "",
          "[Removed Lines]",
          "553:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "",
          "[Added Lines]",
          "550:         \"Could not copy pre flight script to temporary path\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd49164eec4eec14e6a62785888755b0be52af30",
      "candidate_info": {
        "commit_hash": "dd49164eec4eec14e6a62785888755b0be52af30",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/dd49164eec4eec14e6a62785888755b0be52af30",
        "files": [
          "pkg/tests/conftest.py"
        ],
        "message": "Avoid problematic `grub-efi-amd64-signed` package on Ubuntu\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "pkg/tests/conftest.py||pkg/tests/conftest.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/tests/conftest.py||pkg/tests/conftest.py": [
          "File: pkg/tests/conftest.py -> pkg/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     grains,",
          "50:     shell,",
          "51: ):",
          "52:     if grains[\"os_family\"] == \"Debian\":",
          "53:         ret = shell.run(\"apt\", \"update\")",
          "54:         assert ret.returncode == 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     if grains[\"os\"] == \"Ubuntu\" and grains[\"osarch\"] == \"amd64\":",
          "53:         # The grub-efi-amd64-signed package seems to be a problem",
          "54:         # right now when updating the system",
          "55:         env = os.environ.copy()",
          "56:         env[\"DEBIAN_FRONTEND\"] = \"noninteractive\"",
          "57:         ret = shell.run(",
          "58:             \"apt-mark\",",
          "59:             \"hold\",",
          "60:             \"grub-efi-amd64-signed\",",
          "61:             env=env,",
          "62:         )",
          "63:         assert ret.returncode == 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cf8048421ef253fb0fab5246089ad401567b2cc",
      "candidate_info": {
        "commit_hash": "9cf8048421ef253fb0fab5246089ad401567b2cc",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/9cf8048421ef253fb0fab5246089ad401567b2cc",
        "files": [
          "requirements/darwin.txt",
          "requirements/pytest.txt",
          "requirements/static/ci/common.in",
          "requirements/static/ci/darwin.in",
          "requirements/static/ci/freebsd.in",
          "requirements/static/ci/linux.in",
          "requirements/static/ci/pkgtests-windows.in",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/pkgtests-windows.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "requirements/static/ci/windows.in",
          "requirements/static/pkg/freebsd.in",
          "requirements/static/pkg/linux.in",
          "requirements/static/pkg/py3.10/darwin.txt",
          "requirements/static/pkg/py3.10/windows.txt",
          "requirements/static/pkg/py3.7/windows.txt",
          "requirements/static/pkg/py3.8/windows.txt",
          "requirements/static/pkg/py3.9/darwin.txt",
          "requirements/static/pkg/py3.9/windows.txt",
          "requirements/windows.txt"
        ],
        "message": "The 3006.x branch is Python >= 3.7 already. Remove unnecessary `python_version` markers.\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "requirements/static/ci/common.in||requirements/static/ci/common.in",
          "requirements/static/ci/darwin.in||requirements/static/ci/darwin.in",
          "requirements/static/ci/freebsd.in||requirements/static/ci/freebsd.in",
          "requirements/static/ci/linux.in||requirements/static/ci/linux.in",
          "requirements/static/ci/pkgtests-windows.in||requirements/static/ci/pkgtests-windows.in",
          "requirements/static/ci/windows.in||requirements/static/ci/windows.in",
          "requirements/static/pkg/freebsd.in||requirements/static/pkg/freebsd.in",
          "requirements/static/pkg/linux.in||requirements/static/pkg/linux.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "requirements/static/ci/common.in||requirements/static/ci/common.in": [
          "File: requirements/static/ci/common.in -> requirements/static/ci/common.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # to a particular platform, please add it to the corresponding `<platform>.in` file in this directory.",
          "4: azure==4.0.0; sys_platform != 'win32'",
          "5: apache-libcloud>=1.5.0; sys_platform != 'win32'",
          "8: boto>=2.46.0",
          "9: cassandra-driver>=2.0",
          "10: certifi>=2022.12.07",
          "",
          "[Removed Lines]",
          "6: boto3>=1.16.0,<1.17.0; python_version < '3.6'",
          "7: boto3>=1.17.67; python_version >= '3.6'",
          "",
          "[Added Lines]",
          "6: boto3>=1.17.67",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: croniter>=0.3.0,!=0.3.22\"; sys_platform != 'win32'",
          "15: dnspython",
          "16: docker",
          "19: jmespath",
          "20: jsonschema",
          "21: junos-eznc; sys_platform != 'win32' and python_version <= '3.10'",
          "",
          "[Removed Lines]",
          "17: etcd3-py==0.1.6 ; python_version >= '3.6'",
          "18: gitpython>=3.1.30; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "16: etcd3-py==0.1.6",
          "17: gitpython>=3.1.30",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: keyring==5.7.1",
          "25: kubernetes<4.0",
          "26: libnacl>=1.7.1; sys_platform != 'win32' and sys_platform != 'darwin'",
          "29: # Napalm pulls in pyeapi which does not work on Py3.10",
          "31: paramiko>=2.10.1; sys_platform != 'win32' and sys_platform != 'darwin'",
          "32: passlib[bcrypt]>=1.7.4",
          "33: pynacl>=1.5.0",
          "",
          "[Removed Lines]",
          "27: moto>=1.3.14 ; python_version <= '3.5'",
          "28: moto>=2.0.0 ; python_version >= '3.6'",
          "30: napalm; sys_platform != 'win32' and python_version > '3.6'  and python_version < '3.10'",
          "",
          "[Added Lines]",
          "26: moto>=2.0.0",
          "28: napalm; sys_platform != 'win32' and python_version < '3.10'",
          "",
          "---------------"
        ],
        "requirements/static/ci/darwin.in||requirements/static/ci/darwin.in": [
          "File: requirements/static/ci/darwin.in -> requirements/static/ci/darwin.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # pylxd(or likely ws4py) will cause the test suite to hang at the finish line under runtests.py",
          "4: # pylxd>=2.2.5",
          "5: yamlordereddictloader",
          "7: yamllint",
          "8: mercurial",
          "9: hglib",
          "",
          "[Removed Lines]",
          "6: pygit2>=1.2.0; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "6: pygit2>=1.2.0",
          "",
          "---------------"
        ],
        "requirements/static/ci/freebsd.in||requirements/static/ci/freebsd.in": [
          "File: requirements/static/ci/freebsd.in -> requirements/static/ci/freebsd.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # FreeBSD static CI requirements",
          "3: yamllint",
          "4: mercurial",
          "5: hglib",
          "",
          "[Removed Lines]",
          "2: pygit2==1.8.0; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "2: pygit2==1.8.0",
          "",
          "---------------"
        ],
        "requirements/static/ci/linux.in||requirements/static/ci/linux.in": [
          "File: requirements/static/ci/linux.in -> requirements/static/ci/linux.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: pygit2<1.1.0; python_version <= '3.8'",
          "4: pygit2>=1.4.0; python_version > '3.8'",
          "5: pygit2==1.9.1; python_version >= '3.10'",
          "8: ansible>=4.4.0; python_version < '3.9'",
          "9: ansible>=7.0.0; python_version >= '3.9'",
          "10: twilio",
          "13: yamllint",
          "14: mercurial",
          "15: hglib",
          "",
          "[Removed Lines]",
          "6: pymysql==0.9.3; python_version <= '3.5'",
          "7: pymysql>=1.0.2; python_version > '3.5'",
          "11: python-telegram-bot==12.8; python_version <= '3.5'",
          "12: python-telegram-bot>=13.7; python_version > '3.5'",
          "",
          "[Added Lines]",
          "6: pymysql>=1.0.2",
          "10: python-telegram-bot>=13.7",
          "",
          "---------------"
        ],
        "requirements/static/ci/pkgtests-windows.in||requirements/static/ci/pkgtests-windows.in": [
          "File: requirements/static/ci/pkgtests-windows.in -> requirements/static/ci/pkgtests-windows.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: cherrypy",
          "2: pytest-salt-factories==1.0.0rc17",
          "5: wmi==1.5.1; sys_platform == 'win32'",
          "",
          "[Removed Lines]",
          "3: pythonnet==3.0.1; python_version >= '3.7'",
          "4: pythonnet==2.5.2; python_version < '3.7'",
          "",
          "[Added Lines]",
          "3: pythonnet==3.0.1",
          "",
          "---------------"
        ],
        "requirements/static/ci/windows.in||requirements/static/ci/windows.in": [
          "File: requirements/static/ci/windows.in -> requirements/static/ci/windows.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This is a compilation of requirements installed on salt-jenkins git.salt state run",
          "2: dmidecode",
          "3: patch",
          "5: sed",
          "6: pywinrm>=0.4.1",
          "7: yamllint",
          "",
          "[Removed Lines]",
          "4: pygit2>=1.2.0; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "4: pygit2>=1.2.0",
          "",
          "---------------"
        ],
        "requirements/static/pkg/freebsd.in||requirements/static/pkg/freebsd.in": [
          "File: requirements/static/pkg/freebsd.in -> requirements/static/pkg/freebsd.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Any non hard dependencies of Salt for FreeBSD can go here",
          "3: cherrypy",
          "4: cryptography>=41.0.3",
          "6: pycparser>=2.21; python_version >= '3.9'",
          "7: pyopenssl>=23.2.0",
          "8: python-dateutil>=2.8.0",
          "",
          "[Removed Lines]",
          "5: backports.ssl_match_hostname>=3.7.0.1; python_version < '3.7'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "requirements/static/pkg/linux.in||requirements/static/pkg/linux.in": [
          "File: requirements/static/pkg/linux.in -> requirements/static/pkg/linux.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file only exists to trigger the right static compiled requirements destination.",
          "2: # Any non hard dependencies of Salt for linux can go here",
          "3: cherrypy",
          "5: pycparser>=2.21; python_version >= '3.9'",
          "6: pyopenssl>=23.2.0",
          "7: python-dateutil>=2.8.0",
          "",
          "[Removed Lines]",
          "4: backports.ssl_match_hostname>=3.7.0.1; python_version < '3.7'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88365fb69e725eb6e050208ecafbdf494d56680f",
      "candidate_info": {
        "commit_hash": "88365fb69e725eb6e050208ecafbdf494d56680f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/88365fb69e725eb6e050208ecafbdf494d56680f",
        "files": [
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/pkgtests.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "tests/filename_map.yml",
          "tests/pytests/integration/modules/test_virt.py"
        ],
        "message": "Set `cgroupns` to `host` to fix the libvirt migration tests.\n\nThis needs a newer version of the python docker package.\n\nThe breakage was due to updating the docker container used. - https://github.com/saltstack/salt-ci-containers/pull/42\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/integration/modules/test_virt.py||tests/pytests/integration/modules/test_virt.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/modules/test_virt.py||tests/pytests/integration/modules/test_virt.py": [
          "File: tests/pytests/integration/modules/test_virt.py -> tests/pytests/integration/modules/test_virt.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             \"extra_hosts\": {",
          "67:                 virt_minion_0_id: \"127.0.0.1\",",
          "68:                 virt_minion_1_id: \"127.0.0.1\",",
          "70:         },",
          "71:         pull_before_start=True,",
          "72:         skip_on_pull_failure=True,",
          "",
          "[Removed Lines]",
          "69:             }",
          "",
          "[Added Lines]",
          "69:             },",
          "70:             \"cgroupns\": \"host\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:             \"extra_hosts\": {",
          "104:                 virt_minion_0_id: \"127.0.0.1\",",
          "105:                 virt_minion_1_id: \"127.0.0.1\",",
          "107:         },",
          "108:         pull_before_start=True,",
          "109:         skip_on_pull_failure=True,",
          "",
          "[Removed Lines]",
          "106:             }",
          "",
          "[Added Lines]",
          "107:             },",
          "108:             \"cgroupns\": \"host\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}