{
  "cve_id": "CVE-2019-10158",
  "cve_desc": "A flaw was found in Infinispan through version 9.4.14.Final. An improper implementation of the session fixation protection in the Spring Session integration can result in incorrect session handling.",
  "repo": "infinispan/infinispan",
  "patch_hash": "4b381c5910265972ccaabefbdbd16a2b929f6b72",
  "patch_info": {
    "commit_hash": "4b381c5910265972ccaabefbdbd16a2b929f6b72",
    "repo": "infinispan/infinispan",
    "commit_url": "https://github.com/infinispan/infinispan/commit/4b381c5910265972ccaabefbdbd16a2b929f6b72",
    "files": [
      "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
      "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
      "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
      "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
      "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
      "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
      "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java"
    ],
    "message": "ISPN-10224 Skip Listener notification on remove",
    "before_after_code_files": [
      "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
      "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
      "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
      "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java||spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
      "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java||spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
      "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java||spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
      "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java||spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java"
    ]
  },
  "patch_diff": {
    "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java": [
      "File: spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java -> spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:          return new ValueRetrievalException(key, loader, ex);",
      "252:       }",
      "253:    }",
      "254: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "255:    public long getWriteTimeout() {",
      "256:       return writeTimeout;",
      "257:    }",
      "",
      "---------------"
    ],
    "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java": [
      "File: spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java -> spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:    @Override",
      "68:    public void save(MapSession session) {",
      "69:       if (!session.getId().equals(session.getOriginalId())) {",
      "71:       }",
      "72:       cache.put(session.getId(), session, session.getMaxInactiveInterval().getSeconds(), TimeUnit.SECONDS);",
      "73:    }",
      "75:    @Override",
      "76:    public MapSession findById(String sessionId) {",
      "77:       return getSession(sessionId, true);",
      "",
      "[Removed Lines]",
      "70:          deleteById(session.getOriginalId());",
      "",
      "[Added Lines]",
      "70:          removeFromCacheWithoutNotifications(session.getOriginalId());",
      "75:    protected abstract void removeFromCacheWithoutNotifications(String originalId);",
      "",
      "---------------"
    ],
    "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java": [
      "File: spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java -> spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "66:       EventsWaiter.assertSessionContent(() -> eventsCollector.getEvents(), SessionDeletedEvent.class, sessionToBeDeleted.getId(), \"foo\", \"bar\", 2, TimeUnit.SECONDS);",
      "67:    }",
      "69:    protected void init() throws Exception {",
      "70:       springCache = createSpringCache();",
      "71:       sessionRepository = createRepository(springCache);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:    @Test",
      "70:    public void testEventBridgeWithSessionIdChange() throws Exception {",
      "71:       EventsCollector eventsCollector = new EventsCollector();",
      "72:       sessionRepository.setApplicationEventPublisher(eventsCollector);",
      "74:       MapSession session = sessionRepository.createSession();",
      "76:       sessionRepository.save(session);",
      "77:       session.changeSessionId();",
      "78:       sessionRepository.save(session);",
      "80:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionCreatedEvent.class, 2, 2, TimeUnit.SECONDS);",
      "81:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionDeletedEvent.class, 0, 2, TimeUnit.SECONDS);",
      "82:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionDestroyedEvent.class, 0, 2, TimeUnit.SECONDS);",
      "83:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionExpiredEvent.class, 0, 2, TimeUnit.SECONDS);",
      "84:    }",
      "",
      "---------------"
    ],
    "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java||spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java": [
      "File: spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java -> spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.infinispan.spring.embedded.session;",
      "3: import org.infinispan.spring.common.provider.SpringCache;",
      "4: import org.infinispan.spring.common.session.AbstractInfinispanSessionRepository;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import org.infinispan.Cache;",
      "4: import org.infinispan.context.Flag;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:    public InfinispanEmbeddedSessionRepository(SpringCache cache) {",
      "20:       super(cache, new EmbeddedApplicationPublishedBridge(cache));",
      "21:    }",
      "22: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:    @Override",
      "26:    protected void removeFromCacheWithoutNotifications(String originalId) {",
      "27:       Cache nativeCache = (Cache) cache.getNativeCache();",
      "28:       nativeCache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION).remove(originalId);",
      "29:    }",
      "",
      "---------------"
    ],
    "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java||spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java": [
      "File: spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java -> spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:    public void testUnregistration() throws Exception {",
      "63:       super.testUnregistration();",
      "64:    }",
      "65: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:    @Override",
      "67:    public void testEventBridgeWithSessionIdChange() throws Exception {",
      "68:       super.testEventBridgeWithSessionIdChange();",
      "69:    }",
      "",
      "---------------"
    ],
    "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java||spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java": [
      "File: spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java -> spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.infinispan.spring.remote.session;",
      "4: import org.infinispan.spring.common.provider.SpringCache;",
      "5: import org.infinispan.spring.common.session.AbstractInfinispanSessionRepository;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import java.util.concurrent.ExecutionException;",
      "5: import java.util.concurrent.TimeUnit;",
      "6: import java.util.concurrent.TimeoutException;",
      "8: import org.infinispan.client.hotrod.Flag;",
      "9: import org.infinispan.client.hotrod.RemoteCache;",
      "10: import org.infinispan.commons.CacheException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20:    public InfinispanRemoteSessionRepository(SpringCache cache) {",
      "21:       super(cache, new RemoteApplicationPublishedBridge(cache));",
      "22:    }",
      "23: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30:    @Override",
      "31:    protected void removeFromCacheWithoutNotifications(String originalId) {",
      "32:       RemoteCache remoteCache = (RemoteCache) cache.getNativeCache();",
      "33:       if (cache.getWriteTimeout() > 0) {",
      "34:          try {",
      "35:             remoteCache.withFlags(Flag.SKIP_LISTENER_NOTIFICATION).removeAsync(originalId).get(cache.getWriteTimeout(), TimeUnit.MILLISECONDS);",
      "36:          } catch (InterruptedException e) {",
      "37:             Thread.currentThread().interrupt();",
      "38:             throw new CacheException(e);",
      "39:          } catch (ExecutionException | TimeoutException e) {",
      "40:             throw new CacheException(e);",
      "41:          }",
      "42:       } else {",
      "43:          remoteCache.withFlags(Flag.SKIP_LISTENER_NOTIFICATION).remove(originalId);",
      "44:       }",
      "45:    }",
      "",
      "---------------"
    ],
    "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java||spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java": [
      "File: spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java -> spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:       assertEquals(id, value.getId());",
      "96:    }",
      "98:    class TestEvent implements ClientCacheEntryCustomEvent<byte[]> {",
      "100:       private String sessionId;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98:    @Override",
      "99:    public void testEventBridgeWithSessionIdChange() throws Exception {",
      "100:       super.testEventBridgeWithSessionIdChange();",
      "101:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "debdf5447da3626d2f970050ca79cdf98bf87661",
      "candidate_info": {
        "commit_hash": "debdf5447da3626d2f970050ca79cdf98bf87661",
        "repo": "infinispan/infinispan",
        "commit_url": "https://github.com/infinispan/infinispan/commit/debdf5447da3626d2f970050ca79cdf98bf87661",
        "files": [
          "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
          "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java"
        ],
        "message": "ISPN-10224 Fix session fixation protection",
        "before_after_code_files": [
          "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
          "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/infinispan/infinispan/pull/7025"
        ],
        "olp_code_files": {
          "patch": [
            "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java"
          ],
          "candidate": [
            "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java"
          ]
        }
      },
      "candidate_diff": {
        "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java": [
          "File: spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java -> spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import org.infinispan.spring.common.provider.SpringCache;",
          "13: import org.springframework.beans.factory.DisposableBean;",
          "14: import org.springframework.beans.factory.InitializingBean;",
          "15: import org.springframework.context.ApplicationEventPublisher;",
          "16: import org.springframework.context.ApplicationEventPublisherAware;",
          "17: import org.springframework.session.FindByIndexNameSessionRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import org.springframework.cache.Cache.ValueWrapper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:    @Override",
          "67:    public void save(MapSession session) {",
          "68:       cache.put(session.getId(), session, session.getMaxInactiveInterval().getSeconds(), TimeUnit.SECONDS);",
          "69:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:       if (!session.getId().equals(session.getOriginalId())) {",
          "70:          deleteById(session.getOriginalId());",
          "71:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:    @Override",
          "77:    public void deleteById(String sessionId) {",
          "79:       if (mapSession != null) {",
          "80:          applicationEventPublisher.emitSessionDeletedEvent(mapSession);",
          "81:          cache.evict(sessionId);",
          "",
          "[Removed Lines]",
          "78:       MapSession mapSession = (MapSession) cache.get(sessionId).get();",
          "",
          "[Added Lines]",
          "82:       ValueWrapper valueWrapper = cache.get(sessionId);",
          "83:       if (valueWrapper == null) {",
          "84:          return;",
          "85:       }",
          "86:       MapSession mapSession = (MapSession) valueWrapper.get();",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java": [
          "File: spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java -> spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:       assertTrue(numberOfNonExistingUsers == 0);",
          "133:    }",
          "135:    protected void addEmptySessionWithPrincipal(AbstractInfinispanSessionRepository sessionRepository, String principalName) {",
          "136:       MapSession session = sessionRepository.createSession();",
          "137:       session.setAttribute(PRINCIPAL_NAME_INDEX_NAME, principalName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:    @Test",
          "136:    public void testChangeSessionId() throws Exception {",
          "138:       MapSession session = sessionRepository.createSession();",
          "141:       String originalId = session.getId();",
          "142:       sessionRepository.save(session);",
          "143:       session.changeSessionId();",
          "144:       String newId = session.getId();",
          "145:       sessionRepository.save(session);",
          "148:       assertNotNull(sessionRepository.findById(newId));",
          "149:       assertNull(sessionRepository.findById(originalId));",
          "152:       sessionRepository.save(session );",
          "154:       assertNotNull(sessionRepository.findById(newId));",
          "155:       assertNull(sessionRepository.findById(originalId));",
          "156:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "245a0d0b169001e5a22c0ec9903942e617c0743f",
      "candidate_info": {
        "commit_hash": "245a0d0b169001e5a22c0ec9903942e617c0743f",
        "repo": "infinispan/infinispan",
        "commit_url": "https://github.com/infinispan/infinispan/commit/245a0d0b169001e5a22c0ec9903942e617c0743f",
        "files": [
          "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
          "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
          "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
          "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
          "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
          "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
          "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java"
        ],
        "message": "ISPN-10224 Skip Listener notification on remove",
        "before_after_code_files": [
          "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
          "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
          "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
          "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java||spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
          "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java||spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
          "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java||spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
          "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java||spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
            "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
            "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
            "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java||spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
            "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java||spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
            "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java||spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
            "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java||spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java"
          ],
          "candidate": [
            "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
            "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
            "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
            "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java||spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
            "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java||spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
            "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java||spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
            "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java||spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java"
          ]
        }
      },
      "candidate_diff": {
        "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java": [
          "File: spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java -> spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/provider/SpringCache.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:          return new ValueRetrievalException(key, loader, ex);",
          "252:       }",
          "253:    }",
          "254: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:    public long getWriteTimeout() {",
          "256:       return writeTimeout;",
          "257:    }",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java||spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java": [
          "File: spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java -> spring/spring5/spring5-common/src/main/java/org/infinispan/spring/common/session/AbstractInfinispanSessionRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:    @Override",
          "68:    public void save(MapSession session) {",
          "69:       if (!session.getId().equals(session.getOriginalId())) {",
          "71:       }",
          "72:       cache.put(session.getId(), session, session.getMaxInactiveInterval().getSeconds(), TimeUnit.SECONDS);",
          "73:    }",
          "75:    @Override",
          "76:    public MapSession findById(String sessionId) {",
          "77:       return getSession(sessionId, true);",
          "",
          "[Removed Lines]",
          "70:          deleteById(session.getOriginalId());",
          "",
          "[Added Lines]",
          "70:          removeFromCacheWithoutNotifications(session.getOriginalId());",
          "75:    protected abstract void removeFromCacheWithoutNotifications(String originalId);",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java||spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java": [
          "File: spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java -> spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanApplicationPublishedBridgeTCK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:       EventsWaiter.assertSessionContent(() -> eventsCollector.getEvents(), SessionDeletedEvent.class, sessionToBeDeleted.getId(), \"foo\", \"bar\", 2, TimeUnit.SECONDS);",
          "67:    }",
          "69:    protected void init() throws Exception {",
          "70:       springCache = createSpringCache();",
          "71:       sessionRepository = createRepository(springCache);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:    @Test",
          "70:    public void testEventBridgeWithSessionIdChange() throws Exception {",
          "71:       EventsCollector eventsCollector = new EventsCollector();",
          "72:       sessionRepository.setApplicationEventPublisher(eventsCollector);",
          "74:       MapSession session = sessionRepository.createSession();",
          "76:       sessionRepository.save(session);",
          "77:       session.changeSessionId();",
          "78:       sessionRepository.save(session);",
          "80:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionCreatedEvent.class, 2, 2, TimeUnit.SECONDS);",
          "81:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionDeletedEvent.class, 0, 2, TimeUnit.SECONDS);",
          "82:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionDestroyedEvent.class, 0, 2, TimeUnit.SECONDS);",
          "83:       EventsWaiter.assertNumberOfEvents(() -> eventsCollector.getEvents(), SessionExpiredEvent.class, 0, 2, TimeUnit.SECONDS);",
          "84:    }",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java||spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java": [
          "File: spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java -> spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.infinispan.spring.embedded.session;",
          "3: import org.infinispan.spring.common.provider.SpringCache;",
          "4: import org.infinispan.spring.common.session.AbstractInfinispanSessionRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.infinispan.Cache;",
          "4: import org.infinispan.context.Flag;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:    public InfinispanEmbeddedSessionRepository(SpringCache cache) {",
          "20:       super(cache, new EmbeddedApplicationPublishedBridge(cache));",
          "21:    }",
          "22: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:    @Override",
          "26:    protected void removeFromCacheWithoutNotifications(String originalId) {",
          "27:       Cache nativeCache = (Cache) cache.getNativeCache();",
          "28:       nativeCache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION).remove(originalId);",
          "29:    }",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java||spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java": [
          "File: spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java -> spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/EmbeddedApplicationPublishedBridgeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:    public void testUnregistration() throws Exception {",
          "63:       super.testUnregistration();",
          "64:    }",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:    @Override",
          "67:    public void testEventBridgeWithSessionIdChange() throws Exception {",
          "68:       super.testEventBridgeWithSessionIdChange();",
          "69:    }",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java||spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java": [
          "File: spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java -> spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.infinispan.spring.remote.session;",
          "4: import org.infinispan.spring.common.provider.SpringCache;",
          "5: import org.infinispan.spring.common.session.AbstractInfinispanSessionRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import java.util.concurrent.ExecutionException;",
          "5: import java.util.concurrent.TimeUnit;",
          "6: import java.util.concurrent.TimeoutException;",
          "8: import org.infinispan.client.hotrod.Flag;",
          "9: import org.infinispan.client.hotrod.RemoteCache;",
          "10: import org.infinispan.commons.CacheException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:    public InfinispanRemoteSessionRepository(SpringCache cache) {",
          "21:       super(cache, new RemoteApplicationPublishedBridge(cache));",
          "22:    }",
          "23: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:    @Override",
          "31:    protected void removeFromCacheWithoutNotifications(String originalId) {",
          "32:       RemoteCache remoteCache = (RemoteCache) cache.getNativeCache();",
          "33:       if (cache.getWriteTimeout() > 0) {",
          "34:          try {",
          "35:             remoteCache.withFlags(Flag.SKIP_LISTENER_NOTIFICATION).removeAsync(originalId).get(cache.getWriteTimeout(), TimeUnit.MILLISECONDS);",
          "36:          } catch (InterruptedException e) {",
          "37:             Thread.currentThread().interrupt();",
          "38:             throw new CacheException(e);",
          "39:          } catch (ExecutionException | TimeoutException e) {",
          "40:             throw new CacheException(e);",
          "41:          }",
          "42:       } else {",
          "43:          remoteCache.withFlags(Flag.SKIP_LISTENER_NOTIFICATION).remove(originalId);",
          "44:       }",
          "45:    }",
          "",
          "---------------"
        ],
        "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java||spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java": [
          "File: spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java -> spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/RemoteApplicationPublishedBridgeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:       super.testUnregistration();",
          "85:    }",
          "87:    public void testReadEventWithoutValue() {",
          "88:       RemoteApplicationPublishedBridge remoteApplicationPublishedBridge = new RemoteApplicationPublishedBridge(createSpringCache());",
          "89:       String id = \"1234\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:    @Override",
          "88:    public void testEventBridgeWithSessionIdChange() throws Exception {",
          "89:       super.testEventBridgeWithSessionIdChange();",
          "90:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}