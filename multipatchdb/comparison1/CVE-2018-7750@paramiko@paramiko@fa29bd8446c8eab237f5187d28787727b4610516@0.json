{
  "cve_id": "CVE-2018-7750",
  "cve_desc": "transport.py in the SSH server implementation of Paramiko before 1.17.6, 1.18.x before 1.18.5, 2.0.x before 2.0.8, 2.1.x before 2.1.5, 2.2.x before 2.2.3, 2.3.x before 2.3.2, and 2.4.x before 2.4.1 does not properly check whether authentication is completed before processing other requests, as demonstrated by channel-open. A customized SSH client can simply skip the authentication step.",
  "repo": "paramiko/paramiko",
  "patch_hash": "fa29bd8446c8eab237f5187d28787727b4610516",
  "patch_info": {
    "commit_hash": "fa29bd8446c8eab237f5187d28787727b4610516",
    "repo": "paramiko/paramiko",
    "commit_url": "https://github.com/paramiko/paramiko/commit/fa29bd8446c8eab237f5187d28787727b4610516",
    "files": [
      "paramiko/common.py",
      "paramiko/transport.py"
    ],
    "message": "Fixes CVE-2018-7750 / #1175\n\nAt least, insofar as the new tests pass...!",
    "before_after_code_files": [
      "paramiko/common.py||paramiko/common.py",
      "paramiko/transport.py||paramiko/transport.py"
    ]
  },
  "patch_diff": {
    "paramiko/common.py||paramiko/common.py": [
      "File: paramiko/common.py -> paramiko/common.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: MSG_USERAUTH_GSSAPI_RESPONSE, MSG_USERAUTH_GSSAPI_TOKEN = range(60, 62)",
      "33: MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE, MSG_USERAUTH_GSSAPI_ERROR,\\",
      "34:     MSG_USERAUTH_GSSAPI_ERRTOK, MSG_USERAUTH_GSSAPI_MIC = range(63, 67)",
      "35: MSG_GLOBAL_REQUEST, MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE = range(80, 83)",
      "36: MSG_CHANNEL_OPEN, MSG_CHANNEL_OPEN_SUCCESS, MSG_CHANNEL_OPEN_FAILURE, \\",
      "37:     MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA, \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: HIGHEST_USERAUTH_MESSAGE_ID = 79",
      "",
      "---------------"
    ],
    "paramiko/transport.py||paramiko/transport.py": [
      "File: paramiko/transport.py -> paramiko/transport.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:     MSG_CHANNEL_FAILURE, MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA,",
      "50:     MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_REQUEST, MSG_CHANNEL_EOF,",
      "51:     MSG_CHANNEL_CLOSE, MIN_WINDOW_SIZE, MIN_PACKET_SIZE, MAX_WINDOW_SIZE,",
      "53: )",
      "54: from paramiko.compress import ZlibCompressor, ZlibDecompressor",
      "55: from paramiko.dsskey import DSSKey",
      "",
      "[Removed Lines]",
      "52:     DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE,",
      "",
      "[Added Lines]",
      "52:     DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE, HIGHEST_USERAUTH_MESSAGE_ID,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1760:             max_packet_size = self.default_max_packet_size",
      "1761:         return clamp_value(MIN_PACKET_SIZE, max_packet_size, MAX_WINDOW_SIZE)",
      "1764:     def run(self):",
      "1765:         # (use the exposed \"run\" method, because if we specify a thread target",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1763:     def _ensure_authed(self, ptype, message):",
      "1764:         \"\"\"",
      "1765:         Checks message type against current auth state.",
      "1767:         If server mode, and auth has not succeeded, and the message is of a",
      "1768:         post-auth type (channel open or global request) an appropriate error",
      "1769:         response Message is crafted and returned to caller for sending.",
      "1771:         Otherwise (client mode, authed, or pre-auth message) returns None.",
      "1772:         \"\"\"",
      "1773:         if (",
      "1774:             not self.server_mode",
      "1775:             or ptype <= HIGHEST_USERAUTH_MESSAGE_ID",
      "1776:             or self.is_authenticated()",
      "1777:         ):",
      "1778:             return None",
      "1779:         # WELP. We must be dealing with someone trying to do non-auth things",
      "1780:         # without being authed. Tell them off, based on message class.",
      "1781:         reply = Message()",
      "1782:         # Global requests have no details, just failure.",
      "1783:         if ptype == MSG_GLOBAL_REQUEST:",
      "1784:             reply.add_byte(cMSG_REQUEST_FAILURE)",
      "1785:         # Channel opens let us reject w/ a specific type + message.",
      "1786:         elif ptype == MSG_CHANNEL_OPEN:",
      "1787:             kind = message.get_text()",
      "1788:             chanid = message.get_int()",
      "1789:             reply.add_byte(cMSG_CHANNEL_OPEN_FAILURE)",
      "1790:             reply.add_int(chanid)",
      "1791:             reply.add_int(OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED)",
      "1792:             reply.add_string('')",
      "1793:             reply.add_string('en')",
      "1794:         # NOTE: Post-open channel messages do not need checking; the above will",
      "1795:         # reject attemps to open channels, meaning that even if a malicious",
      "1796:         # user tries to send a MSG_CHANNEL_REQUEST, it will simply fall under",
      "1797:         # the logic that handles unknown channel IDs (as the channel list will",
      "1798:         # be empty.)",
      "1799:         return reply",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1820:                             continue",
      "1822:                     if ptype in self._handler_table:",
      "1824:                     elif ptype in self._channel_handler_table:",
      "1825:                         chanid = m.get_int()",
      "1826:                         chan = self._channels.get(chanid)",
      "",
      "[Removed Lines]",
      "1823:                         self._handler_table[ptype](self, m)",
      "",
      "[Added Lines]",
      "1860:                         error_msg = self._ensure_authed(ptype, m)",
      "1861:                         if error_msg:",
      "1862:                             self._send_message(error_msg)",
      "1863:                         else:",
      "1864:                             self._handler_table[ptype](self, m)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07dbaa585ab22c12658832f17529eef69223081e",
      "candidate_info": {
        "commit_hash": "07dbaa585ab22c12658832f17529eef69223081e",
        "repo": "paramiko/paramiko",
        "commit_url": "https://github.com/paramiko/paramiko/commit/07dbaa585ab22c12658832f17529eef69223081e",
        "files": [
          "tests/test_transport.py"
        ],
        "message": "Initial tests proving CVE-2018-7750 / #1175",
        "before_after_code_files": [
          "tests/test_transport.py||tests/test_transport.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_transport.py||tests/test_transport.py": [
          "File: tests/test_transport.py -> tests/test_transport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: from paramiko import (",
          "35:     Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, SSHException,",
          "37: )",
          "38: from paramiko import AUTH_FAILED, AUTH_SUCCESSFUL",
          "39: from paramiko import OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED",
          "",
          "[Removed Lines]",
          "36:     ChannelException, Packetizer,",
          "",
          "[Added Lines]",
          "36:     ChannelException, Packetizer, Channel,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     def check_global_request(self, kind, msg):",
          "93:         self._global_request = kind",
          "96:     def check_channel_x11_request(self, channel, single_connection, auth_protocol, auth_cookie, screen_number):",
          "97:         self._x11_single_connection = single_connection",
          "",
          "[Removed Lines]",
          "94:         return False",
          "",
          "[Added Lines]",
          "94:         # NOTE: for w/e reason, older impl of this returned False always, even",
          "95:         # tho that's only supposed to occur if the request cannot be served.",
          "96:         # For now, leaving that the default unless test supplies specific",
          "97:         # 'acceptable' request kind",
          "98:         return kind == 'acceptable'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "934:             # sendall() accepts a memoryview instance",
          "935:             chan.sendall(memoryview(data))",
          "936:             self.assertEqual(sfile.read(len(data)), data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "942:     def test_server_rejects_open_channel_without_auth(self):",
          "943:         try:",
          "944:             self.setup_test_server(connect_kwargs={})",
          "945:             self.tc.open_session()",
          "946:         except ChannelException as e:",
          "947:             assert e.code == OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED",
          "948:         else:",
          "949:             assert False, \"Did not raise ChannelException!\"",
          "951:     def test_server_rejects_arbitrary_global_request_without_auth(self):",
          "952:         self.setup_test_server(connect_kwargs={})",
          "953:         # NOTE: this dummy global request kind would normally pass muster",
          "954:         # from the test server.",
          "955:         self.tc.global_request('acceptable')",
          "956:         # Global requests never raise exceptions, even on failure (not sure why",
          "957:         # this was the original design...ugh.) Best we can do to tell failure",
          "958:         # happened is that the client transport's global_response was set back",
          "959:         # to None; if it had succeeded, it would be the response Message.",
          "960:         err = \"Unauthed global response incorrectly succeeded!\"",
          "961:         assert self.tc.global_response is None, err",
          "963:     def test_server_rejects_port_forward_without_auth(self):",
          "964:         # NOTE: at protocol level port forward requests are treated same as a",
          "965:         # regular global request, but Paramiko server implements a special-case",
          "966:         # method for it, so it gets its own test. (plus, THAT actually raises",
          "967:         # an exception on the client side, unlike the general case...)",
          "968:         self.setup_test_server(connect_kwargs={})",
          "969:         try:",
          "970:             self.tc.request_port_forward('localhost', 1234)",
          "971:         except SSHException as e:",
          "972:             assert \"forwarding request denied\" in str(e)",
          "973:         else:",
          "974:             assert False, \"Did not raise SSHException!\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6791c17a5e9ea00f292c2e2eb43488e9303efe1",
      "candidate_info": {
        "commit_hash": "e6791c17a5e9ea00f292c2e2eb43488e9303efe1",
        "repo": "paramiko/paramiko",
        "commit_url": "https://github.com/paramiko/paramiko/commit/e6791c17a5e9ea00f292c2e2eb43488e9303efe1",
        "files": [
          "paramiko/transport.py"
        ],
        "message": "flake8",
        "before_after_code_files": [
          "paramiko/transport.py||paramiko/transport.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "paramiko/transport.py||paramiko/transport.py"
          ],
          "candidate": [
            "paramiko/transport.py||paramiko/transport.py"
          ]
        }
      },
      "candidate_diff": {
        "paramiko/transport.py||paramiko/transport.py": [
          "File: paramiko/transport.py -> paramiko/transport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1771:         Otherwise (client mode, authed, or pre-auth message) returns None.",
          "1772:         \"\"\"",
          "1773:         if (",
          "1777:         ):",
          "1778:             return None",
          "1779:         # WELP. We must be dealing with someone trying to do non-auth things",
          "",
          "[Removed Lines]",
          "1774:             not self.server_mode",
          "1775:             or ptype <= HIGHEST_USERAUTH_MESSAGE_ID",
          "1776:             or self.is_authenticated()",
          "",
          "[Added Lines]",
          "1774:             not self.server_mode or",
          "1775:             ptype <= HIGHEST_USERAUTH_MESSAGE_ID or",
          "1776:             self.is_authenticated()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1784:             reply.add_byte(cMSG_REQUEST_FAILURE)",
          "1785:         # Channel opens let us reject w/ a specific type + message.",
          "1786:         elif ptype == MSG_CHANNEL_OPEN:",
          "1788:             chanid = message.get_int()",
          "1789:             reply.add_byte(cMSG_CHANNEL_OPEN_FAILURE)",
          "1790:             reply.add_int(chanid)",
          "",
          "[Removed Lines]",
          "1787:             kind = message.get_text()",
          "",
          "[Added Lines]",
          "1787:             kind = message.get_text() # noqa",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d5760cf45619ce5aacb567fdc42849d678d93eb",
      "candidate_info": {
        "commit_hash": "9d5760cf45619ce5aacb567fdc42849d678d93eb",
        "repo": "paramiko/paramiko",
        "commit_url": "https://github.com/paramiko/paramiko/commit/9d5760cf45619ce5aacb567fdc42849d678d93eb",
        "files": [
          "paramiko/__init__.py",
          "paramiko/auth_handler.py",
          "paramiko/channel.py",
          "paramiko/file.py",
          "paramiko/packet.py",
          "paramiko/sftp_client.py",
          "paramiko/sftp_file.py",
          "paramiko/sftp_server.py",
          "paramiko/transport.py",
          "tests/stub_sftp.py",
          "tests/test_auth.py",
          "tests/test_transport.py",
          "tests/test_util.py"
        ],
        "message": "Additional house style formatting tweaks, mostly re: removal of line continuations",
        "before_after_code_files": [
          "paramiko/__init__.py||paramiko/__init__.py",
          "paramiko/auth_handler.py||paramiko/auth_handler.py",
          "paramiko/channel.py||paramiko/channel.py",
          "paramiko/file.py||paramiko/file.py",
          "paramiko/packet.py||paramiko/packet.py",
          "paramiko/sftp_client.py||paramiko/sftp_client.py",
          "paramiko/sftp_file.py||paramiko/sftp_file.py",
          "paramiko/sftp_server.py||paramiko/sftp_server.py",
          "paramiko/transport.py||paramiko/transport.py",
          "tests/stub_sftp.py||tests/stub_sftp.py",
          "tests/test_auth.py||tests/test_auth.py",
          "tests/test_transport.py||tests/test_transport.py",
          "tests/test_util.py||tests/test_util.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "paramiko/transport.py||paramiko/transport.py"
          ],
          "candidate": [
            "paramiko/transport.py||paramiko/transport.py"
          ]
        }
      },
      "candidate_diff": {
        "paramiko/__init__.py||paramiko/__init__.py": [
          "File: paramiko/__init__.py -> paramiko/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: from paramiko.transport import SecurityOptions, Transport",
          "34: from paramiko.auth_handler import AuthHandler",
          "35: from paramiko.ssh_gss import GSSAuth, GSS_AUTH_AVAILABLE",
          "36: from paramiko.channel import Channel, ChannelFile",
          "40: from paramiko.server import ServerInterface, SubsystemHandler, InteractiveQuery",
          "41: from paramiko.rsakey import RSAKey",
          "42: from paramiko.dsskey import DSSKey",
          "",
          "[Removed Lines]",
          "32: from paramiko.client import SSHClient, MissingHostKeyPolicy, AutoAddPolicy, \\",
          "33:     RejectPolicy, WarningPolicy",
          "37: from paramiko.ssh_exception import SSHException, PasswordRequiredException, \\",
          "38:     BadAuthenticationType, ChannelException, BadHostKeyException, \\",
          "39:     AuthenticationException, ProxyCommandFailure",
          "",
          "[Added Lines]",
          "32: from paramiko.client import (",
          "33:     SSHClient, MissingHostKeyPolicy, AutoAddPolicy, RejectPolicy,",
          "34:     WarningPolicy,",
          "35: )",
          "39: from paramiko.ssh_exception import (",
          "40:     SSHException, PasswordRequiredException, BadAuthenticationType,",
          "41:     ChannelException, BadHostKeyException, AuthenticationException,",
          "42:     ProxyCommandFailure,",
          "43: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: from paramiko.config import SSHConfig",
          "58: from paramiko.proxy import ProxyCommand",
          "69: from paramiko.common import io_sleep",
          "",
          "[Removed Lines]",
          "60: from paramiko.common import AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, \\",
          "61:     AUTH_FAILED, OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, \\",
          "62:     OPEN_FAILED_CONNECT_FAILED, OPEN_FAILED_UNKNOWN_CHANNEL_TYPE, \\",
          "63:     OPEN_FAILED_RESOURCE_SHORTAGE",
          "65: from paramiko.sftp import SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, \\",
          "66:     SFTP_PERMISSION_DENIED, SFTP_FAILURE, SFTP_BAD_MESSAGE, \\",
          "67:     SFTP_NO_CONNECTION, SFTP_CONNECTION_LOST, SFTP_OP_UNSUPPORTED",
          "",
          "[Added Lines]",
          "64: from paramiko.common import (",
          "65:     AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED, OPEN_SUCCEEDED,",
          "66:     OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, OPEN_FAILED_CONNECT_FAILED,",
          "67:     OPEN_FAILED_UNKNOWN_CHANNEL_TYPE, OPEN_FAILED_RESOURCE_SHORTAGE,",
          "68: )",
          "70: from paramiko.sftp import (",
          "71:     SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED, SFTP_FAILURE,",
          "72:     SFTP_BAD_MESSAGE, SFTP_NO_CONNECTION, SFTP_CONNECTION_LOST,",
          "73:     SFTP_OP_UNSUPPORTED,",
          "74: )",
          "",
          "---------------"
        ],
        "paramiko/auth_handler.py||paramiko/auth_handler.py": [
          "File: paramiko/auth_handler.py -> paramiko/auth_handler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: \"\"\"",
          "23: import weakref",
          "39: from paramiko.message import Message",
          "40: from paramiko.py3compat import bytestring",
          "43: from paramiko.server import InteractiveQuery",
          "44: from paramiko.ssh_gss import GSSAuth",
          "",
          "[Removed Lines]",
          "24: from paramiko.common import cMSG_SERVICE_REQUEST, cMSG_DISCONNECT, \\",
          "25:     DISCONNECT_SERVICE_NOT_AVAILABLE, \\",
          "26:     DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE, \\",
          "27:     cMSG_USERAUTH_REQUEST, cMSG_SERVICE_ACCEPT, DEBUG, AUTH_SUCCESSFUL, INFO, \\",
          "28:     cMSG_USERAUTH_SUCCESS, cMSG_USERAUTH_FAILURE, AUTH_PARTIALLY_SUCCESSFUL, \\",
          "29:     cMSG_USERAUTH_INFO_REQUEST, WARNING, AUTH_FAILED, cMSG_USERAUTH_PK_OK, \\",
          "30:     cMSG_USERAUTH_INFO_RESPONSE, MSG_SERVICE_REQUEST, MSG_SERVICE_ACCEPT, \\",
          "31:     MSG_USERAUTH_REQUEST, MSG_USERAUTH_SUCCESS, MSG_USERAUTH_FAILURE, \\",
          "32:     MSG_USERAUTH_BANNER, MSG_USERAUTH_INFO_REQUEST, \\",
          "33:     MSG_USERAUTH_INFO_RESPONSE, \\",
          "34:     cMSG_USERAUTH_GSSAPI_RESPONSE, cMSG_USERAUTH_GSSAPI_TOKEN, \\",
          "35:     cMSG_USERAUTH_GSSAPI_MIC, MSG_USERAUTH_GSSAPI_RESPONSE, \\",
          "36:     MSG_USERAUTH_GSSAPI_TOKEN, MSG_USERAUTH_GSSAPI_ERROR, \\",
          "37:     MSG_USERAUTH_GSSAPI_ERRTOK, MSG_USERAUTH_GSSAPI_MIC, MSG_NAMES",
          "41: from paramiko.ssh_exception import SSHException, AuthenticationException, \\",
          "42:     BadAuthenticationType, PartialAuthentication",
          "",
          "[Added Lines]",
          "24: from paramiko.common import (",
          "25:     cMSG_SERVICE_REQUEST, cMSG_DISCONNECT, DISCONNECT_SERVICE_NOT_AVAILABLE,",
          "26:     DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE, cMSG_USERAUTH_REQUEST,",
          "27:     cMSG_SERVICE_ACCEPT, DEBUG, AUTH_SUCCESSFUL, INFO, cMSG_USERAUTH_SUCCESS,",
          "28:     cMSG_USERAUTH_FAILURE, AUTH_PARTIALLY_SUCCESSFUL,",
          "29:     cMSG_USERAUTH_INFO_REQUEST, WARNING, AUTH_FAILED, cMSG_USERAUTH_PK_OK,",
          "30:     cMSG_USERAUTH_INFO_RESPONSE, MSG_SERVICE_REQUEST, MSG_SERVICE_ACCEPT,",
          "31:     MSG_USERAUTH_REQUEST, MSG_USERAUTH_SUCCESS, MSG_USERAUTH_FAILURE,",
          "32:     MSG_USERAUTH_BANNER, MSG_USERAUTH_INFO_REQUEST, MSG_USERAUTH_INFO_RESPONSE,",
          "33:     cMSG_USERAUTH_GSSAPI_RESPONSE, cMSG_USERAUTH_GSSAPI_TOKEN,",
          "34:     cMSG_USERAUTH_GSSAPI_MIC, MSG_USERAUTH_GSSAPI_RESPONSE,",
          "35:     MSG_USERAUTH_GSSAPI_TOKEN, MSG_USERAUTH_GSSAPI_ERROR,",
          "36:     MSG_USERAUTH_GSSAPI_ERRTOK, MSG_USERAUTH_GSSAPI_MIC, MSG_NAMES,",
          "37: )",
          "41: from paramiko.ssh_exception import (",
          "42:     SSHException, AuthenticationException, BadAuthenticationType,",
          "43:     PartialAuthentication,",
          "44: )",
          "",
          "---------------"
        ],
        "paramiko/channel.py||paramiko/channel.py": [
          "File: paramiko/channel.py -> paramiko/channel.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from functools import wraps",
          "30: from paramiko import util",
          "35: from paramiko.message import Message",
          "36: from paramiko.py3compat import bytes_types",
          "37: from paramiko.ssh_exception import SSHException",
          "",
          "[Removed Lines]",
          "31: from paramiko.common import cMSG_CHANNEL_REQUEST, cMSG_CHANNEL_WINDOW_ADJUST, \\",
          "32:     cMSG_CHANNEL_DATA, cMSG_CHANNEL_EXTENDED_DATA, DEBUG, ERROR, \\",
          "33:     cMSG_CHANNEL_SUCCESS, cMSG_CHANNEL_FAILURE, cMSG_CHANNEL_EOF, \\",
          "34:     cMSG_CHANNEL_CLOSE",
          "",
          "[Added Lines]",
          "31: from paramiko.common import (",
          "32:     cMSG_CHANNEL_REQUEST, cMSG_CHANNEL_WINDOW_ADJUST, cMSG_CHANNEL_DATA,",
          "33:     cMSG_CHANNEL_EXTENDED_DATA, DEBUG, ERROR, cMSG_CHANNEL_SUCCESS,",
          "34:     cMSG_CHANNEL_FAILURE, cMSG_CHANNEL_EOF, cMSG_CHANNEL_CLOSE,",
          "35: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     \"\"\"",
          "51:     @wraps(func)",
          "52:     def _check(self, *args, **kwds):",
          "55:             raise SSHException('Channel is not open')",
          "56:         return func(self, *args, **kwds)",
          "57:     return _check",
          "",
          "[Removed Lines]",
          "53:         if self.closed or self.eof_received or self.eof_sent or \\",
          "54:                 not self.active:",
          "",
          "[Added Lines]",
          "54:         if (",
          "55:             self.closed or",
          "56:             self.eof_received or",
          "57:             self.eof_sent or",
          "58:             not self.active",
          "59:         ):",
          "",
          "---------------"
        ],
        "paramiko/file.py||paramiko/file.py": [
          "File: paramiko/file.py -> paramiko/file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # You should have received a copy of the GNU Lesser General Public License",
          "16: # along with Paramiko; if not, write to the Free Software Foundation, Inc.,",
          "17: # 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.",
          "20: from paramiko.py3compat import BytesIO, PY2, u, b, bytes_types",
          "22: from paramiko.util import ClosingContextManager",
          "",
          "[Removed Lines]",
          "18: from paramiko.common import linefeed_byte_value, crlf, cr_byte, \\",
          "19:     linefeed_byte, cr_byte_value",
          "",
          "[Added Lines]",
          "18: from paramiko.common import (",
          "19:     linefeed_byte_value, crlf, cr_byte, linefeed_byte, cr_byte_value,",
          "20: )",
          "",
          "---------------"
        ],
        "paramiko/packet.py||paramiko/packet.py": [
          "File: paramiko/packet.py -> paramiko/packet.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from hmac import HMAC",
          "31: from paramiko import util",
          "34: from paramiko.py3compat import u, byte_ord",
          "35: from paramiko.ssh_exception import SSHException, ProxyCommandFailure",
          "36: from paramiko.message import Message",
          "",
          "[Removed Lines]",
          "32: from paramiko.common import linefeed_byte, cr_byte_value, asbytes, MSG_NAMES, \\",
          "33:     DEBUG, xffffffff, zero_byte",
          "",
          "[Added Lines]",
          "32: from paramiko.common import (",
          "33:     linefeed_byte, cr_byte_value, asbytes, MSG_NAMES, DEBUG, xffffffff,",
          "34:     zero_byte,",
          "35: )",
          "",
          "---------------"
        ],
        "paramiko/sftp_client.py||paramiko/sftp_client.py": [
          "File: paramiko/sftp_client.py -> paramiko/sftp_client.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from paramiko.channel import Channel",
          "29: from paramiko.message import Message",
          "30: from paramiko.common import INFO, DEBUG, o777",
          "41: from paramiko.sftp_attr import SFTPAttributes",
          "42: from paramiko.ssh_exception import SSHException",
          "",
          "[Removed Lines]",
          "31: from paramiko.py3compat import bytestring, b, u, long, string_types, \\",
          "32:     bytes_types",
          "33: from paramiko.sftp import BaseSFTP, CMD_OPENDIR, CMD_HANDLE, SFTPError, \\",
          "34:     CMD_READDIR, CMD_NAME, CMD_CLOSE, SFTP_FLAG_READ, SFTP_FLAG_WRITE, \\",
          "35:     SFTP_FLAG_CREATE, SFTP_FLAG_TRUNC, SFTP_FLAG_APPEND, SFTP_FLAG_EXCL, \\",
          "36:     CMD_OPEN, CMD_REMOVE, CMD_RENAME, CMD_MKDIR, CMD_RMDIR, CMD_STAT, \\",
          "37:     CMD_ATTRS, CMD_LSTAT, CMD_SYMLINK, CMD_SETSTAT, CMD_READLINK, \\",
          "38:     CMD_REALPATH, CMD_STATUS, SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, \\",
          "39:     SFTP_PERMISSION_DENIED",
          "",
          "[Added Lines]",
          "31: from paramiko.py3compat import (",
          "32:     bytestring, b, u, long, string_types, bytes_types,",
          "33: )",
          "34: from paramiko.sftp import (",
          "35:     BaseSFTP, CMD_OPENDIR, CMD_HANDLE, SFTPError, CMD_READDIR, CMD_NAME,",
          "36:     CMD_CLOSE, SFTP_FLAG_READ, SFTP_FLAG_WRITE, SFTP_FLAG_CREATE,",
          "37:     SFTP_FLAG_TRUNC, SFTP_FLAG_APPEND, SFTP_FLAG_EXCL, CMD_OPEN, CMD_REMOVE,",
          "38:     CMD_RENAME, CMD_MKDIR, CMD_RMDIR, CMD_STAT, CMD_ATTRS, CMD_LSTAT,",
          "39:     CMD_SYMLINK, CMD_SETSTAT, CMD_READLINK, CMD_REALPATH, CMD_STATUS, SFTP_OK,",
          "40:     SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED,",
          "41: )",
          "",
          "---------------"
        ],
        "paramiko/sftp_file.py||paramiko/sftp_file.py": [
          "File: paramiko/sftp_file.py -> paramiko/sftp_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: from paramiko.file import BufferedFile",
          "33: from paramiko.py3compat import long",
          "36: from paramiko.sftp_attr import SFTPAttributes",
          "",
          "[Removed Lines]",
          "34: from paramiko.sftp import CMD_CLOSE, CMD_READ, CMD_DATA, SFTPError,\\",
          "35:     CMD_WRITE, CMD_STATUS, CMD_FSTAT, CMD_ATTRS, CMD_FSETSTAT, CMD_EXTENDED",
          "",
          "[Added Lines]",
          "34: from paramiko.sftp import (",
          "35:     CMD_CLOSE, CMD_READ, CMD_DATA, SFTPError, CMD_WRITE, CMD_STATUS, CMD_FSTAT,",
          "36:     CMD_ATTRS, CMD_FSETSTAT, CMD_EXTENDED,",
          "37: )",
          "",
          "---------------"
        ],
        "paramiko/sftp_server.py||paramiko/sftp_server.py": [
          "File: paramiko/sftp_server.py -> paramiko/sftp_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from hashlib import md5, sha1",
          "28: from paramiko import util",
          "31: from paramiko.sftp_si import SFTPServerInterface",
          "32: from paramiko.sftp_attr import SFTPAttributes",
          "33: from paramiko.common import DEBUG",
          "",
          "[Removed Lines]",
          "29: from paramiko.sftp import BaseSFTP, Message, SFTP_FAILURE, \\",
          "30:     SFTP_PERMISSION_DENIED, SFTP_NO_SUCH_FILE",
          "",
          "[Added Lines]",
          "29: from paramiko.sftp import (",
          "30:     BaseSFTP, Message, SFTP_FAILURE, SFTP_PERMISSION_DENIED, SFTP_NO_SUCH_FILE,",
          "31: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: # known hash algorithms for the \"check-file\" extension",
          "48: _hash_class = {",
          "49:     'sha1': sha1,",
          "",
          "[Removed Lines]",
          "39: from paramiko.sftp import CMD_HANDLE, SFTP_DESC, CMD_STATUS, SFTP_EOF, \\",
          "40:     CMD_NAME, SFTP_BAD_MESSAGE, CMD_EXTENDED_REPLY, SFTP_FLAG_READ, \\",
          "41:     SFTP_FLAG_WRITE, SFTP_FLAG_APPEND, SFTP_FLAG_CREATE, SFTP_FLAG_TRUNC, \\",
          "42:     SFTP_FLAG_EXCL, CMD_NAMES, CMD_OPEN, CMD_CLOSE, SFTP_OK, CMD_READ, \\",
          "43:     CMD_DATA, CMD_WRITE, CMD_REMOVE, CMD_RENAME, CMD_MKDIR, CMD_RMDIR, \\",
          "44:     CMD_OPENDIR, CMD_READDIR, CMD_STAT, CMD_ATTRS, CMD_LSTAT, CMD_FSTAT, \\",
          "45:     CMD_SETSTAT, CMD_FSETSTAT, CMD_READLINK, CMD_SYMLINK, CMD_REALPATH, \\",
          "46:     CMD_EXTENDED, SFTP_OP_UNSUPPORTED",
          "",
          "[Added Lines]",
          "40: from paramiko.sftp import (",
          "41:     CMD_HANDLE, SFTP_DESC, CMD_STATUS, SFTP_EOF, CMD_NAME, SFTP_BAD_MESSAGE,",
          "42:     CMD_EXTENDED_REPLY, SFTP_FLAG_READ, SFTP_FLAG_WRITE, SFTP_FLAG_APPEND,",
          "43:     SFTP_FLAG_CREATE, SFTP_FLAG_TRUNC, SFTP_FLAG_EXCL, CMD_NAMES, CMD_OPEN,",
          "44:     CMD_CLOSE, SFTP_OK, CMD_READ, CMD_DATA, CMD_WRITE, CMD_REMOVE, CMD_RENAME,",
          "45:     CMD_MKDIR, CMD_RMDIR, CMD_OPENDIR, CMD_READDIR, CMD_STAT, CMD_ATTRS,",
          "46:     CMD_LSTAT, CMD_FSTAT, CMD_SETSTAT, CMD_FSETSTAT, CMD_READLINK, CMD_SYMLINK,",
          "47:     CMD_REALPATH, CMD_EXTENDED, SFTP_OP_UNSUPPORTED,",
          "48: )",
          "",
          "---------------"
        ],
        "paramiko/transport.py||paramiko/transport.py": [
          "File: paramiko/transport.py -> paramiko/transport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: from paramiko.auth_handler import AuthHandler",
          "39: from paramiko.ssh_gss import GSSAuth",
          "40: from paramiko.channel import Channel",
          "53: from paramiko.compress import ZlibCompressor, ZlibDecompressor",
          "54: from paramiko.dsskey import DSSKey",
          "55: from paramiko.kex_gex import KexGex, KexGexSHA256",
          "",
          "[Removed Lines]",
          "41: from paramiko.common import xffffffff, cMSG_CHANNEL_OPEN, cMSG_IGNORE, \\",
          "42:     cMSG_GLOBAL_REQUEST, DEBUG, MSG_KEXINIT, MSG_IGNORE, MSG_DISCONNECT, \\",
          "43:     MSG_DEBUG, ERROR, WARNING, cMSG_UNIMPLEMENTED, INFO, cMSG_KEXINIT, \\",
          "44:     cMSG_NEWKEYS, MSG_NEWKEYS, cMSG_REQUEST_SUCCESS, cMSG_REQUEST_FAILURE, \\",
          "45:     CONNECTION_FAILED_CODE, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, \\",
          "46:     OPEN_SUCCEEDED, cMSG_CHANNEL_OPEN_FAILURE, cMSG_CHANNEL_OPEN_SUCCESS, \\",
          "47:     MSG_GLOBAL_REQUEST, MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE, \\",
          "48:     MSG_CHANNEL_OPEN_SUCCESS, MSG_CHANNEL_OPEN_FAILURE, MSG_CHANNEL_OPEN, \\",
          "49:     MSG_CHANNEL_SUCCESS, MSG_CHANNEL_FAILURE, MSG_CHANNEL_DATA, \\",
          "50:     MSG_CHANNEL_EXTENDED_DATA, MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_REQUEST, \\",
          "51:     MSG_CHANNEL_EOF, MSG_CHANNEL_CLOSE, MIN_WINDOW_SIZE, MIN_PACKET_SIZE, \\",
          "52:     MAX_WINDOW_SIZE, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE",
          "",
          "[Added Lines]",
          "41: from paramiko.common import (",
          "42:     xffffffff, cMSG_CHANNEL_OPEN, cMSG_IGNORE, cMSG_GLOBAL_REQUEST, DEBUG,",
          "43:     MSG_KEXINIT, MSG_IGNORE, MSG_DISCONNECT, MSG_DEBUG, ERROR, WARNING,",
          "44:     cMSG_UNIMPLEMENTED, INFO, cMSG_KEXINIT, cMSG_NEWKEYS, MSG_NEWKEYS,",
          "45:     cMSG_REQUEST_SUCCESS, cMSG_REQUEST_FAILURE, CONNECTION_FAILED_CODE,",
          "46:     OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, OPEN_SUCCEEDED,",
          "47:     cMSG_CHANNEL_OPEN_FAILURE, cMSG_CHANNEL_OPEN_SUCCESS, MSG_GLOBAL_REQUEST,",
          "48:     MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE, MSG_CHANNEL_OPEN_SUCCESS,",
          "49:     MSG_CHANNEL_OPEN_FAILURE, MSG_CHANNEL_OPEN, MSG_CHANNEL_SUCCESS,",
          "50:     MSG_CHANNEL_FAILURE, MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA,",
          "51:     MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_REQUEST, MSG_CHANNEL_EOF,",
          "52:     MSG_CHANNEL_CLOSE, MIN_WINDOW_SIZE, MIN_PACKET_SIZE, MAX_WINDOW_SIZE,",
          "53:     DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE,",
          "54: )",
          "",
          "---------------"
        ],
        "tests/stub_sftp.py||tests/stub_sftp.py": [
          "File: tests/stub_sftp.py -> tests/stub_sftp.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import os",
          "24: import sys",
          "27: from paramiko.common import o666",
          "",
          "[Removed Lines]",
          "25: from paramiko import ServerInterface, SFTPServerInterface, SFTPServer, SFTPAttributes, \\",
          "26:     SFTPHandle, SFTP_OK, AUTH_SUCCESSFUL, OPEN_SUCCEEDED",
          "",
          "[Added Lines]",
          "25: from paramiko import (",
          "26:     ServerInterface, SFTPServerInterface, SFTPServer, SFTPAttributes,",
          "27:     SFTPHandle, SFTP_OK, AUTH_SUCCESSFUL, OPEN_SUCCEEDED,",
          "28: )",
          "",
          "---------------"
        ],
        "tests/test_auth.py||tests/test_auth.py": [
          "File: tests/test_auth.py -> tests/test_auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import threading",
          "25: import unittest",
          "30: from paramiko import AUTH_FAILED, AUTH_PARTIALLY_SUCCESSFUL, AUTH_SUCCESSFUL",
          "31: from paramiko.py3compat import u",
          "32: from tests.loop import LoopSocket",
          "",
          "[Removed Lines]",
          "27: from paramiko import Transport, ServerInterface, RSAKey, DSSKey, \\",
          "28:     BadAuthenticationType, InteractiveQuery, \\",
          "29:     AuthenticationException",
          "",
          "[Added Lines]",
          "27: from paramiko import (",
          "28:     Transport, ServerInterface, RSAKey, DSSKey, BadAuthenticationType,",
          "29:     InteractiveQuery, AuthenticationException,",
          "30: )",
          "",
          "---------------"
        ],
        "tests/test_transport.py||tests/test_transport.py": [
          "File: tests/test_transport.py -> tests/test_transport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: from hashlib import sha1",
          "32: import unittest",
          "36: from paramiko import AUTH_FAILED, AUTH_SUCCESSFUL",
          "37: from paramiko import OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED",
          "41: from paramiko.py3compat import bytes",
          "42: from paramiko.message import Message",
          "43: from tests.loop import LoopSocket",
          "",
          "[Removed Lines]",
          "34: from paramiko import Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, \\",
          "35:     SSHException, ChannelException, Packetizer",
          "38: from paramiko.common import MSG_KEXINIT, cMSG_CHANNEL_WINDOW_ADJUST, \\",
          "39:                             MIN_PACKET_SIZE, MIN_WINDOW_SIZE, MAX_WINDOW_SIZE, \\",
          "40:                             DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE",
          "",
          "[Added Lines]",
          "34: from paramiko import (",
          "35:     Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, SSHException,",
          "36:     ChannelException, Packetizer,",
          "37: )",
          "40: from paramiko.common import (",
          "41:     MSG_KEXINIT, cMSG_CHANNEL_WINDOW_ADJUST, MIN_PACKET_SIZE, MIN_WINDOW_SIZE,",
          "42:     MAX_WINDOW_SIZE, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE,",
          "43: )",
          "",
          "---------------"
        ],
        "tests/test_util.py||tests/test_util.py": [
          "File: tests/test_util.py -> tests/test_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:         safe_has_bytes = safe_string(has_bytes)",
          "476:         expected_bytes = b(\"has %07%03 bytes\")",
          "477:         err = \"{0!r} != {1!r}\"",
          "482:     def test_proxycommand_none_issue_418(self):",
          "483:         test_config_file = \"\"\"",
          "",
          "[Removed Lines]",
          "478:         assert safe_vanilla == vanilla, err.format(safe_vanilla, vanilla)",
          "479:         assert safe_has_bytes == expected_bytes, \\",
          "480:             err.format(safe_has_bytes, expected_bytes)",
          "",
          "[Added Lines]",
          "478:         msg = err.format(safe_vanilla, vanilla)",
          "479:         assert safe_vanilla == vanilla, msg",
          "480:         msg = err.format(safe_has_bytes, expected_bytes)",
          "481:         assert safe_has_bytes == expected_bytes, msg",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9dfd854bdaf8af15d7834f7502a0451d217bb8c",
      "candidate_info": {
        "commit_hash": "e9dfd854bdaf8af15d7834f7502a0451d217bb8c",
        "repo": "paramiko/paramiko",
        "commit_url": "https://github.com/paramiko/paramiko/commit/e9dfd854bdaf8af15d7834f7502a0451d217bb8c",
        "files": [
          "paramiko/common.py",
          "paramiko/transport.py"
        ],
        "message": "Fixes CVE-2018-7750 / #1175\n\nAt least, insofar as the new tests pass...!",
        "before_after_code_files": [
          "paramiko/common.py||paramiko/common.py",
          "paramiko/transport.py||paramiko/transport.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "paramiko/common.py||paramiko/common.py",
            "paramiko/transport.py||paramiko/transport.py"
          ],
          "candidate": [
            "paramiko/common.py||paramiko/common.py",
            "paramiko/transport.py||paramiko/transport.py"
          ]
        }
      },
      "candidate_diff": {
        "paramiko/common.py||paramiko/common.py": [
          "File: paramiko/common.py -> paramiko/common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: MSG_USERAUTH_GSSAPI_RESPONSE, MSG_USERAUTH_GSSAPI_TOKEN = range(60, 62)",
          "33: MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE, MSG_USERAUTH_GSSAPI_ERROR,\\",
          "34: MSG_USERAUTH_GSSAPI_ERRTOK, MSG_USERAUTH_GSSAPI_MIC = range(63, 67)",
          "35: MSG_GLOBAL_REQUEST, MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE = range(80, 83)",
          "36: MSG_CHANNEL_OPEN, MSG_CHANNEL_OPEN_SUCCESS, MSG_CHANNEL_OPEN_FAILURE, \\",
          "37:     MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA, \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: HIGHEST_USERAUTH_MESSAGE_ID = 79",
          "",
          "---------------"
        ],
        "paramiko/transport.py||paramiko/transport.py": [
          "File: paramiko/transport.py -> paramiko/transport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     MSG_CHANNEL_SUCCESS, MSG_CHANNEL_FAILURE, MSG_CHANNEL_DATA, \\",
          "46:     MSG_CHANNEL_EXTENDED_DATA, MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_REQUEST, \\",
          "47:     MSG_CHANNEL_EOF, MSG_CHANNEL_CLOSE, MIN_WINDOW_SIZE, MIN_PACKET_SIZE, \\",
          "49: from paramiko.compress import ZlibCompressor, ZlibDecompressor",
          "50: from paramiko.dsskey import DSSKey",
          "51: from paramiko.kex_gex import KexGex, KexGexSHA256",
          "",
          "[Removed Lines]",
          "48:     MAX_WINDOW_SIZE, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE",
          "",
          "[Added Lines]",
          "48:     MAX_WINDOW_SIZE, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE, \\",
          "49:     HIGHEST_USERAUTH_MESSAGE_ID",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1702:             max_packet_size = self.default_max_packet_size",
          "1703:         return clamp_value(MIN_PACKET_SIZE, max_packet_size, MAX_WINDOW_SIZE)",
          "1706:     def run(self):",
          "1707:         # (use the exposed \"run\" method, because if we specify a thread target",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1706:     def _ensure_authed(self, ptype, message):",
          "1707:         \"\"\"",
          "1708:         Checks message type against current auth state.",
          "1710:         If server mode, and auth has not succeeded, and the message is of a",
          "1711:         post-auth type (channel open or global request) an appropriate error",
          "1712:         response Message is crafted and returned to caller for sending.",
          "1714:         Otherwise (client mode, authed, or pre-auth message) returns None.",
          "1715:         \"\"\"",
          "1716:         if (",
          "1717:             not self.server_mode",
          "1718:             or ptype <= HIGHEST_USERAUTH_MESSAGE_ID",
          "1719:             or self.is_authenticated()",
          "1720:         ):",
          "1721:             return None",
          "1722:         # WELP. We must be dealing with someone trying to do non-auth things",
          "1723:         # without being authed. Tell them off, based on message class.",
          "1724:         reply = Message()",
          "1725:         # Global requests have no details, just failure.",
          "1726:         if ptype == MSG_GLOBAL_REQUEST:",
          "1727:             reply.add_byte(cMSG_REQUEST_FAILURE)",
          "1728:         # Channel opens let us reject w/ a specific type + message.",
          "1729:         elif ptype == MSG_CHANNEL_OPEN:",
          "1730:             kind = message.get_text()",
          "1731:             chanid = message.get_int()",
          "1732:             reply.add_byte(cMSG_CHANNEL_OPEN_FAILURE)",
          "1733:             reply.add_int(chanid)",
          "1734:             reply.add_int(OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED)",
          "1735:             reply.add_string('')",
          "1736:             reply.add_string('en')",
          "1737:         # NOTE: Post-open channel messages do not need checking; the above will",
          "1738:         # reject attemps to open channels, meaning that even if a malicious",
          "1739:         # user tries to send a MSG_CHANNEL_REQUEST, it will simply fall under",
          "1740:         # the logic that handles unknown channel IDs (as the channel list will",
          "1741:         # be empty.)",
          "1742:         return reply",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1761:                             continue",
          "1763:                     if ptype in self._handler_table:",
          "1765:                     elif ptype in self._channel_handler_table:",
          "1766:                         chanid = m.get_int()",
          "1767:                         chan = self._channels.get(chanid)",
          "",
          "[Removed Lines]",
          "1764:                         self._handler_table[ptype](self, m)",
          "",
          "[Added Lines]",
          "1802:                         error_msg = self._ensure_authed(ptype, m)",
          "1803:                         if error_msg:",
          "1804:                             self._send_message(error_msg)",
          "1805:                         else:",
          "1806:                             self._handler_table[ptype](self, m)",
          "",
          "---------------"
        ]
      }
    }
  ]
}