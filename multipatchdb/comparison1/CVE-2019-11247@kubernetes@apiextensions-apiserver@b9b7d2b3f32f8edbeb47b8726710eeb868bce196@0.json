{
  "cve_id": "CVE-2019-11247",
  "cve_desc": "The Kubernetes kube-apiserver mistakenly allows access to a cluster-scoped custom resource if the request is made as if the resource were namespaced. Authorizations for the resource accessed in this manner are enforced using roles and role bindings within the namespace, meaning that a user with access only to a resource in one namespace could create, view update or delete the cluster-scoped resource (according to their namespace role privileges). Kubernetes affected versions include versions prior to 1.13.9, versions prior to 1.14.5, versions prior to 1.15.2, and versions 1.7, 1.8, 1.9, 1.10, 1.11, 1.12.",
  "repo": "kubernetes/apiextensions-apiserver",
  "patch_hash": "b9b7d2b3f32f8edbeb47b8726710eeb868bce196",
  "patch_info": {
    "commit_hash": "b9b7d2b3f32f8edbeb47b8726710eeb868bce196",
    "repo": "kubernetes/apiextensions-apiserver",
    "commit_url": "https://github.com/kubernetes/apiextensions-apiserver/commit/b9b7d2b3f32f8edbeb47b8726710eeb868bce196",
    "files": [
      "pkg/apiserver/customresource_handler.go"
    ],
    "message": "apiextensions: 404 if request scope does not match crd scope\n\nKubernetes-commit: df75700efe80ea2c3cd138f92bce53d7cf7ec63d",
    "before_after_code_files": [
      "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
    ]
  },
  "patch_diff": {
    "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go": [
      "File: pkg/apiserver/customresource_handler.go -> pkg/apiserver/customresource_handler.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "198: var longRunningFilter = genericfilters.BasicLongRunningRequestCheck(sets.NewString(\"watch\"), sets.NewString())",
      "200: func (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {",
      "201:  ctx := req.Context()",
      "202:  requestInfo, ok := apirequest.RequestInfoFrom(ctx)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "202: var possiblyAcrossAllNamespacesVerbs = sets.NewString(\"list\", \"watch\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:   http.Error(w, err.Error(), http.StatusInternalServerError)",
      "233:   return",
      "234:  }",
      "235:  if !apiextensions.HasServedCRDVersion(crd, requestInfo.APIVersion) {",
      "236:   r.delegate.ServeHTTP(w, req)",
      "237:   return",
      "238:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "242:  namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensions.NamespaceScoped, len(requestInfo.Namespace) > 0",
      "243:  if !namespacedCRD && namespacedReq {",
      "244:   r.delegate.ServeHTTP(w, req)",
      "245:   return",
      "246:  }",
      "247:  if namespacedCRD && !namespacedReq && !possiblyAcrossAllNamespacesVerbs.Has(requestInfo.Verb) {",
      "248:   r.delegate.ServeHTTP(w, req)",
      "249:   return",
      "250:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f959818fad8f93931c2bb85c9648a1af71597c6",
      "candidate_info": {
        "commit_hash": "3f959818fad8f93931c2bb85c9648a1af71597c6",
        "repo": "kubernetes/apiextensions-apiserver",
        "commit_url": "https://github.com/kubernetes/apiextensions-apiserver/commit/3f959818fad8f93931c2bb85c9648a1af71597c6",
        "files": [
          "pkg/apihelpers/helpers.go",
          "pkg/apihelpers/helpers_test.go",
          "pkg/apiserver/conversion/converter.go",
          "pkg/apiserver/conversion/converter_test.go",
          "pkg/apiserver/conversion/webhook_converter.go",
          "pkg/apiserver/customresource_discovery_controller.go",
          "pkg/apiserver/customresource_handler.go",
          "pkg/apiserver/customresource_handler_test.go",
          "pkg/controller/apiapproval/apiapproval_controller.go",
          "pkg/controller/apiapproval/apiapproval_controller_test.go",
          "pkg/controller/establish/establishing_controller.go",
          "pkg/controller/finalizer/crd_finalizer.go",
          "pkg/controller/nonstructuralschema/nonstructuralschema_controller.go",
          "pkg/controller/openapi/builder/builder.go",
          "pkg/controller/openapi/builder/builder_test.go",
          "pkg/controller/openapi/controller.go",
          "pkg/controller/status/naming_controller.go",
          "pkg/controller/status/naming_controller_test.go",
          "pkg/registry/customresource/etcd_test.go",
          "pkg/registry/customresource/tableconvertor/tableconvertor.go"
        ],
        "message": "s/apiextensions/apiextensionsv1/ for all imports in k/k\n\nrename alias import\n\nfmt\n\nKubernetes-commit: 15a883b06740ddbb201bd8560524cb22291ce923",
        "before_after_code_files": [
          "pkg/apihelpers/helpers.go||pkg/apihelpers/helpers.go",
          "pkg/apihelpers/helpers_test.go||pkg/apihelpers/helpers_test.go",
          "pkg/apiserver/conversion/converter.go||pkg/apiserver/conversion/converter.go",
          "pkg/apiserver/conversion/converter_test.go||pkg/apiserver/conversion/converter_test.go",
          "pkg/apiserver/conversion/webhook_converter.go||pkg/apiserver/conversion/webhook_converter.go",
          "pkg/apiserver/customresource_discovery_controller.go||pkg/apiserver/customresource_discovery_controller.go",
          "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go",
          "pkg/apiserver/customresource_handler_test.go||pkg/apiserver/customresource_handler_test.go",
          "pkg/controller/apiapproval/apiapproval_controller.go||pkg/controller/apiapproval/apiapproval_controller.go",
          "pkg/controller/apiapproval/apiapproval_controller_test.go||pkg/controller/apiapproval/apiapproval_controller_test.go",
          "pkg/controller/establish/establishing_controller.go||pkg/controller/establish/establishing_controller.go",
          "pkg/controller/finalizer/crd_finalizer.go||pkg/controller/finalizer/crd_finalizer.go",
          "pkg/controller/nonstructuralschema/nonstructuralschema_controller.go||pkg/controller/nonstructuralschema/nonstructuralschema_controller.go",
          "pkg/controller/openapi/builder/builder.go||pkg/controller/openapi/builder/builder.go",
          "pkg/controller/openapi/builder/builder_test.go||pkg/controller/openapi/builder/builder_test.go",
          "pkg/controller/openapi/controller.go||pkg/controller/openapi/controller.go",
          "pkg/controller/status/naming_controller.go||pkg/controller/status/naming_controller.go",
          "pkg/controller/status/naming_controller_test.go||pkg/controller/status/naming_controller_test.go",
          "pkg/registry/customresource/etcd_test.go||pkg/registry/customresource/etcd_test.go",
          "pkg/registry/customresource/tableconvertor/tableconvertor.go||pkg/registry/customresource/tableconvertor/tableconvertor.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ],
          "candidate": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/apihelpers/helpers.go||pkg/apihelpers/helpers.go": [
          "File: pkg/apihelpers/helpers.go -> pkg/apihelpers/helpers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"strings\"",
          "23:  \"time\"",
          "26:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "27: )",
          "",
          "[Removed Lines]",
          "25:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "25:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: func GetAPIApprovalState(annotations map[string]string) (state APIApprovalState, reason string) {",
          "62:  url, annotationURLParseErr := url.ParseRequestURI(annotation)",
          "63:  switch {",
          "64:  case len(annotation) == 0:",
          "66:  case strings.HasPrefix(annotation, \"unapproved\"):",
          "67:   return APIApprovalBypassed, fmt.Sprintf(\"not approved: %q\", annotation)",
          "68:  case annotationURLParseErr == nil && url != nil && len(url.Host) > 0 && len(url.Scheme) > 0:",
          "69:   return APIApproved, fmt.Sprintf(\"approved in %v\", annotation)",
          "70:  default:",
          "72:  }",
          "73: }",
          "77:  newCondition.LastTransitionTime = metav1.NewTime(time.Now())",
          "79:  existingCondition := FindCRDCondition(crd, newCondition.Type)",
          "",
          "[Removed Lines]",
          "59:  annotation := annotations[apiextensions.KubeAPIApprovedAnnotation]",
          "65:   return APIApprovalMissing, fmt.Sprintf(\"protected groups must have approval annotation %q, see https://github.com/kubernetes/enhancements/pull/1111\", apiextensions.KubeAPIApprovedAnnotation)",
          "71:   return APIApprovalInvalid, fmt.Sprintf(\"protected groups must have approval annotation %q with either a URL or a reason starting with \\\"unapproved\\\", see https://github.com/kubernetes/enhancements/pull/1111\", apiextensions.KubeAPIApprovedAnnotation)",
          "76: func SetCRDCondition(crd *apiextensions.CustomResourceDefinition, newCondition apiextensions.CustomResourceDefinitionCondition) {",
          "",
          "[Added Lines]",
          "59:  annotation := annotations[apiextensionsv1.KubeAPIApprovedAnnotation]",
          "65:   return APIApprovalMissing, fmt.Sprintf(\"protected groups must have approval annotation %q, see https://github.com/kubernetes/enhancements/pull/1111\", apiextensionsv1.KubeAPIApprovedAnnotation)",
          "71:   return APIApprovalInvalid, fmt.Sprintf(\"protected groups must have approval annotation %q with either a URL or a reason starting with \\\"unapproved\\\", see https://github.com/kubernetes/enhancements/pull/1111\", apiextensionsv1.KubeAPIApprovedAnnotation)",
          "76: func SetCRDCondition(crd *apiextensionsv1.CustomResourceDefinition, newCondition apiextensionsv1.CustomResourceDefinitionCondition) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: }",
          "97:  for _, condition := range crd.Status.Conditions {",
          "98:   if condition.Type != conditionType {",
          "99:    newConditions = append(newConditions, condition)",
          "",
          "[Removed Lines]",
          "95: func RemoveCRDCondition(crd *apiextensions.CustomResourceDefinition, conditionType apiextensions.CustomResourceDefinitionConditionType) {",
          "96:  newConditions := []apiextensions.CustomResourceDefinitionCondition{}",
          "",
          "[Added Lines]",
          "95: func RemoveCRDCondition(crd *apiextensionsv1.CustomResourceDefinition, conditionType apiextensionsv1.CustomResourceDefinitionConditionType) {",
          "96:  newConditions := []apiextensionsv1.CustomResourceDefinitionCondition{}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103: }",
          "107:  for i := range crd.Status.Conditions {",
          "108:   if crd.Status.Conditions[i].Type == conditionType {",
          "109:    return &crd.Status.Conditions[i]",
          "",
          "[Removed Lines]",
          "106: func FindCRDCondition(crd *apiextensions.CustomResourceDefinition, conditionType apiextensions.CustomResourceDefinitionConditionType) *apiextensions.CustomResourceDefinitionCondition {",
          "",
          "[Added Lines]",
          "106: func FindCRDCondition(crd *apiextensionsv1.CustomResourceDefinition, conditionType apiextensionsv1.CustomResourceDefinitionConditionType) *apiextensionsv1.CustomResourceDefinitionCondition {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114: }",
          "119: }",
          "124: }",
          "128:  for _, condition := range crd.Status.Conditions {",
          "129:   if condition.Type == conditionType {",
          "130:    return condition.Status == status",
          "",
          "[Removed Lines]",
          "117: func IsCRDConditionTrue(crd *apiextensions.CustomResourceDefinition, conditionType apiextensions.CustomResourceDefinitionConditionType) bool {",
          "118:  return IsCRDConditionPresentAndEqual(crd, conditionType, apiextensions.ConditionTrue)",
          "122: func IsCRDConditionFalse(crd *apiextensions.CustomResourceDefinition, conditionType apiextensions.CustomResourceDefinitionConditionType) bool {",
          "123:  return IsCRDConditionPresentAndEqual(crd, conditionType, apiextensions.ConditionFalse)",
          "127: func IsCRDConditionPresentAndEqual(crd *apiextensions.CustomResourceDefinition, conditionType apiextensions.CustomResourceDefinitionConditionType, status apiextensions.ConditionStatus) bool {",
          "",
          "[Added Lines]",
          "117: func IsCRDConditionTrue(crd *apiextensionsv1.CustomResourceDefinition, conditionType apiextensionsv1.CustomResourceDefinitionConditionType) bool {",
          "118:  return IsCRDConditionPresentAndEqual(crd, conditionType, apiextensionsv1.ConditionTrue)",
          "122: func IsCRDConditionFalse(crd *apiextensionsv1.CustomResourceDefinition, conditionType apiextensionsv1.CustomResourceDefinitionConditionType) bool {",
          "123:  return IsCRDConditionPresentAndEqual(crd, conditionType, apiextensionsv1.ConditionFalse)",
          "127: func IsCRDConditionPresentAndEqual(crd *apiextensionsv1.CustomResourceDefinition, conditionType apiextensionsv1.CustomResourceDefinitionConditionType, status apiextensionsv1.ConditionStatus) bool {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134: }",
          "138:  if lhs == nil && rhs == nil {",
          "139:   return true",
          "140:  }",
          "",
          "[Removed Lines]",
          "137: func IsCRDConditionEquivalent(lhs, rhs *apiextensions.CustomResourceDefinitionCondition) bool {",
          "",
          "[Added Lines]",
          "137: func IsCRDConditionEquivalent(lhs, rhs *apiextensionsv1.CustomResourceDefinitionCondition) bool {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "146: }",
          "150:  for _, finalizer := range crd.Finalizers {",
          "151:   if finalizer == needle {",
          "152:    return true",
          "",
          "[Removed Lines]",
          "149: func CRDHasFinalizer(crd *apiextensions.CustomResourceDefinition, needle string) bool {",
          "",
          "[Added Lines]",
          "149: func CRDHasFinalizer(crd *apiextensionsv1.CustomResourceDefinition, needle string) bool {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "157: }",
          "161:  newFinalizers := []string{}",
          "162:  for _, finalizer := range crd.Finalizers {",
          "163:   if finalizer != needle {",
          "",
          "[Removed Lines]",
          "160: func CRDRemoveFinalizer(crd *apiextensions.CustomResourceDefinition, needle string) {",
          "",
          "[Added Lines]",
          "160: func CRDRemoveFinalizer(crd *apiextensionsv1.CustomResourceDefinition, needle string) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "168: }",
          "172:  for _, v := range crd.Spec.Versions {",
          "173:   if v.Name == version {",
          "174:    return v.Served",
          "",
          "[Removed Lines]",
          "171: func HasServedCRDVersion(crd *apiextensions.CustomResourceDefinition, version string) bool {",
          "",
          "[Added Lines]",
          "171: func HasServedCRDVersion(crd *apiextensionsv1.CustomResourceDefinition, version string) bool {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "178: }",
          "182:  for _, v := range crd.Spec.Versions {",
          "183:   if v.Storage {",
          "184:    return v.Name, nil",
          "185:   }",
          "186:  }",
          "189: }",
          "193:  for _, v := range crd.Status.StoredVersions {",
          "194:   if version == v {",
          "195:    return true",
          "",
          "[Removed Lines]",
          "181: func GetCRDStorageVersion(crd *apiextensions.CustomResourceDefinition) (string, error) {",
          "188:  return \"\", fmt.Errorf(\"invalid apiextensions.CustomResourceDefinition, no storage version\")",
          "192: func IsStoredVersion(crd *apiextensions.CustomResourceDefinition, version string) bool {",
          "",
          "[Added Lines]",
          "181: func GetCRDStorageVersion(crd *apiextensionsv1.CustomResourceDefinition) (string, error) {",
          "188:  return \"\", fmt.Errorf(\"invalid apiextensionsv1.CustomResourceDefinition, no storage version\")",
          "192: func IsStoredVersion(crd *apiextensionsv1.CustomResourceDefinition, version string) bool {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "199: }",
          "203:  for _, v := range crd.Spec.Versions {",
          "204:   if version == v.Name {",
          "205:    return v.Schema, nil",
          "206:   }",
          "207:  }",
          "209: }",
          "213:  for _, v := range crd.Spec.Versions {",
          "214:   if version == v.Name {",
          "215:    return v.Subresources, nil",
          "216:   }",
          "217:  }",
          "219: }",
          "223:  for _, v := range versions {",
          "224:   if v.Schema != nil {",
          "225:    return true",
          "",
          "[Removed Lines]",
          "202: func GetSchemaForVersion(crd *apiextensions.CustomResourceDefinition, version string) (*apiextensions.CustomResourceValidation, error) {",
          "208:  return nil, fmt.Errorf(\"version %s not found in apiextensions.CustomResourceDefinition: %v\", version, crd.Name)",
          "212: func GetSubresourcesForVersion(crd *apiextensions.CustomResourceDefinition, version string) (*apiextensions.CustomResourceSubresources, error) {",
          "218:  return nil, fmt.Errorf(\"version %s not found in apiextensions.CustomResourceDefinition: %v\", version, crd.Name)",
          "222: func HasPerVersionSchema(versions []apiextensions.CustomResourceDefinitionVersion) bool {",
          "",
          "[Added Lines]",
          "202: func GetSchemaForVersion(crd *apiextensionsv1.CustomResourceDefinition, version string) (*apiextensionsv1.CustomResourceValidation, error) {",
          "208:  return nil, fmt.Errorf(\"version %s not found in apiextensionsv1.CustomResourceDefinition: %v\", version, crd.Name)",
          "212: func GetSubresourcesForVersion(crd *apiextensionsv1.CustomResourceDefinition, version string) (*apiextensionsv1.CustomResourceSubresources, error) {",
          "218:  return nil, fmt.Errorf(\"version %s not found in apiextensionsv1.CustomResourceDefinition: %v\", version, crd.Name)",
          "222: func HasPerVersionSchema(versions []apiextensionsv1.CustomResourceDefinitionVersion) bool {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "229: }",
          "233:  for _, v := range versions {",
          "234:   if v.Subresources != nil {",
          "235:    return true",
          "",
          "[Removed Lines]",
          "232: func HasPerVersionSubresources(versions []apiextensions.CustomResourceDefinitionVersion) bool {",
          "",
          "[Added Lines]",
          "232: func HasPerVersionSubresources(versions []apiextensionsv1.CustomResourceDefinitionVersion) bool {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "239: }",
          "243:  for _, v := range versions {",
          "244:   if len(v.AdditionalPrinterColumns) > 0 {",
          "245:    return true",
          "",
          "[Removed Lines]",
          "242: func HasPerVersionColumns(versions []apiextensions.CustomResourceDefinitionVersion) bool {",
          "",
          "[Added Lines]",
          "242: func HasPerVersionColumns(versions []apiextensionsv1.CustomResourceDefinitionVersion) bool {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "249: }",
          "253:  for _, v := range crd.Spec.Versions {",
          "254:   if !v.Served || v.Name != version {",
          "255:    continue",
          "",
          "[Removed Lines]",
          "252: func HasVersionServed(crd *apiextensions.CustomResourceDefinition, version string) bool {",
          "",
          "[Added Lines]",
          "252: func HasVersionServed(crd *apiextensionsv1.CustomResourceDefinition, version string) bool {",
          "",
          "---------------"
        ],
        "pkg/apihelpers/helpers_test.go||pkg/apihelpers/helpers_test.go": [
          "File: pkg/apihelpers/helpers_test.go -> pkg/apihelpers/helpers_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"testing\"",
          "22:  \"time\"",
          "25:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "26: )",
          "",
          "[Removed Lines]",
          "24:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "24:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  }{",
          "80:   {",
          "81:    name:        \"bare unapproved\",",
          "83:    expected:    APIApprovalBypassed,",
          "84:   },",
          "85:   {",
          "86:    name:        \"unapproved with message\",",
          "88:    expected:    APIApprovalBypassed,",
          "89:   },",
          "90:   {",
          "91:    name:        \"mismatched case\",",
          "93:    expected:    APIApprovalInvalid,",
          "94:   },",
          "95:   {",
          "96:    name:        \"empty\",",
          "98:    expected:    APIApprovalMissing,",
          "99:   },",
          "100:   {",
          "",
          "[Removed Lines]",
          "82:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"unapproved\"},",
          "87:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"unapproved, experimental-only\"},",
          "92:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"Unapproved\"},",
          "97:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"\"},",
          "",
          "[Added Lines]",
          "82:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"unapproved\"},",
          "87:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"unapproved, experimental-only\"},",
          "92:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"Unapproved\"},",
          "97:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   },",
          "105:   {",
          "106:    name:        \"url\",",
          "108:    expected:    APIApproved,",
          "109:   },",
          "110:   {",
          "111:    name:        \"url - no scheme\",",
          "113:    expected:    APIApprovalInvalid,",
          "114:   },",
          "115:   {",
          "116:    name:        \"url - no host\",",
          "118:    expected:    APIApprovalInvalid,",
          "119:   },",
          "120:   {",
          "121:    name:        \"url - just path\",",
          "123:    expected:    APIApprovalInvalid,",
          "124:   },",
          "125:   {",
          "126:    name:        \"missing scheme\",",
          "128:    expected:    APIApprovalInvalid,",
          "129:   },",
          "130:  }",
          "",
          "[Removed Lines]",
          "107:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"https://github.com/kubernetes/kubernetes/pull/78458\"},",
          "112:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"github.com/kubernetes/kubernetes/pull/78458\"},",
          "117:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"http:///kubernetes/kubernetes/pull/78458\"},",
          "122:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"/\"},",
          "127:    annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: \"github.com/kubernetes/kubernetes/pull/78458\"},",
          "",
          "[Added Lines]",
          "107:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"https://github.com/kubernetes/kubernetes/pull/78458\"},",
          "112:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"github.com/kubernetes/kubernetes/pull/78458\"},",
          "117:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"http:///kubernetes/kubernetes/pull/78458\"},",
          "122:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"/\"},",
          "127:    annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: \"github.com/kubernetes/kubernetes/pull/78458\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: func TestCRDHasFinalizer(t *testing.T) {",
          "144:  tests := []struct {",
          "145:   name             string",
          "147:   finalizerToCheck string",
          "149:   expected bool",
          "150:  }{",
          "151:   {",
          "152:    name: \"missing\",",
          "154:     ObjectMeta: metav1.ObjectMeta{Finalizers: []string{\"not-it\"}},",
          "155:    },",
          "156:    finalizerToCheck: \"it\",",
          "",
          "[Removed Lines]",
          "146:   crd              *apiextensions.CustomResourceDefinition",
          "153:    crd: &apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "146:   crd              *apiextensionsv1.CustomResourceDefinition",
          "153:    crd: &apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:   },",
          "159:   {",
          "160:    name: \"present\",",
          "162:     ObjectMeta: metav1.ObjectMeta{Finalizers: []string{\"not-it\", \"it\"}},",
          "163:    },",
          "164:    finalizerToCheck: \"it\",",
          "",
          "[Removed Lines]",
          "161:    crd: &apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "161:    crd: &apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176: func TestCRDRemoveFinalizer(t *testing.T) {",
          "177:  tests := []struct {",
          "178:   name             string",
          "180:   finalizerToCheck string",
          "182:   expected []string",
          "183:  }{",
          "184:   {",
          "185:    name: \"missing\",",
          "187:     ObjectMeta: metav1.ObjectMeta{Finalizers: []string{\"not-it\"}},",
          "188:    },",
          "189:    finalizerToCheck: \"it\",",
          "",
          "[Removed Lines]",
          "179:   crd              *apiextensions.CustomResourceDefinition",
          "186:    crd: &apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "179:   crd              *apiextensionsv1.CustomResourceDefinition",
          "186:    crd: &apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:   },",
          "192:   {",
          "193:    name: \"present\",",
          "195:     ObjectMeta: metav1.ObjectMeta{Finalizers: []string{\"not-it\", \"it\"}},",
          "196:    },",
          "197:    finalizerToCheck: \"it\",",
          "",
          "[Removed Lines]",
          "194:    crd: &apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "194:    crd: &apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "209: func TestSetCRDCondition(t *testing.T) {",
          "210:  tests := []struct {",
          "211:   name                 string",
          "215:  }{",
          "216:   {",
          "217:    name: \"test setCRDcondition when one condition\",",
          "219:     {",
          "222:      Reason:             \"Accepted\",",
          "223:      Message:            \"the initial names have been accepted\",",
          "224:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "225:     },",
          "226:    },",
          "230:     Reason:             \"NotAccepted\",",
          "231:     Message:            \"Not accepted\",",
          "232:     LastTransitionTime: metav1.Date(2018, 1, 2, 0, 0, 0, 0, time.UTC),",
          "233:    },",
          "235:     {",
          "238:      Reason:             \"NotAccepted\",",
          "239:      Message:            \"Not accepted\",",
          "240:      LastTransitionTime: metav1.Date(2018, 1, 2, 0, 0, 0, 0, time.UTC),",
          "",
          "[Removed Lines]",
          "212:   crdCondition         []apiextensions.CustomResourceDefinitionCondition",
          "213:   newCondition         apiextensions.CustomResourceDefinitionCondition",
          "214:   expectedcrdCondition []apiextensions.CustomResourceDefinitionCondition",
          "218:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "220:      Type:               apiextensions.Established,",
          "221:      Status:             apiextensions.ConditionTrue,",
          "227:    newCondition: apiextensions.CustomResourceDefinitionCondition{",
          "228:     Type:               apiextensions.Established,",
          "229:     Status:             apiextensions.ConditionFalse,",
          "234:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "236:      Type:               apiextensions.Established,",
          "237:      Status:             apiextensions.ConditionFalse,",
          "",
          "[Added Lines]",
          "212:   crdCondition         []apiextensionsv1.CustomResourceDefinitionCondition",
          "213:   newCondition         apiextensionsv1.CustomResourceDefinitionCondition",
          "214:   expectedcrdCondition []apiextensionsv1.CustomResourceDefinitionCondition",
          "218:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "220:      Type:               apiextensionsv1.Established,",
          "221:      Status:             apiextensionsv1.ConditionTrue,",
          "227:    newCondition: apiextensionsv1.CustomResourceDefinitionCondition{",
          "228:     Type:               apiextensionsv1.Established,",
          "229:     Status:             apiextensionsv1.ConditionFalse,",
          "234:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "236:      Type:               apiextensionsv1.Established,",
          "237:      Status:             apiextensionsv1.ConditionFalse,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "243:   },",
          "244:   {",
          "245:    name: \"test setCRDcondition when two condition\",",
          "247:     {",
          "250:      Reason:             \"Accepted\",",
          "251:      Message:            \"the initial names have been accepted\",",
          "252:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "253:     },",
          "254:     {",
          "257:      Reason:             \"NoConflicts\",",
          "258:      Message:            \"no conflicts found\",",
          "259:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "260:     },",
          "261:    },",
          "265:     Reason:             \"Conflicts\",",
          "266:     Message:            \"conflicts found\",",
          "267:     LastTransitionTime: metav1.Date(2018, 1, 2, 0, 0, 0, 0, time.UTC),",
          "268:    },",
          "270:     {",
          "273:      Reason:             \"Accepted\",",
          "274:      Message:            \"the initial names have been accepted\",",
          "275:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "276:     },",
          "277:     {",
          "280:      Reason:             \"Conflicts\",",
          "281:      Message:            \"conflicts found\",",
          "282:      LastTransitionTime: metav1.Date(2018, 1, 2, 0, 0, 0, 0, time.UTC),",
          "",
          "[Removed Lines]",
          "246:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "248:      Type:               apiextensions.Established,",
          "249:      Status:             apiextensions.ConditionTrue,",
          "255:      Type:               apiextensions.NamesAccepted,",
          "256:      Status:             apiextensions.ConditionTrue,",
          "262:    newCondition: apiextensions.CustomResourceDefinitionCondition{",
          "263:     Type:               apiextensions.NamesAccepted,",
          "264:     Status:             apiextensions.ConditionFalse,",
          "269:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "271:      Type:               apiextensions.Established,",
          "272:      Status:             apiextensions.ConditionTrue,",
          "278:      Type:               apiextensions.NamesAccepted,",
          "279:      Status:             apiextensions.ConditionFalse,",
          "",
          "[Added Lines]",
          "246:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "248:      Type:               apiextensionsv1.Established,",
          "249:      Status:             apiextensionsv1.ConditionTrue,",
          "255:      Type:               apiextensionsv1.NamesAccepted,",
          "256:      Status:             apiextensionsv1.ConditionTrue,",
          "262:    newCondition: apiextensionsv1.CustomResourceDefinitionCondition{",
          "263:     Type:               apiextensionsv1.NamesAccepted,",
          "264:     Status:             apiextensionsv1.ConditionFalse,",
          "269:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "271:      Type:               apiextensionsv1.Established,",
          "272:      Status:             apiextensionsv1.ConditionTrue,",
          "278:      Type:               apiextensionsv1.NamesAccepted,",
          "279:      Status:             apiextensionsv1.ConditionFalse,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "285:   },",
          "286:   {",
          "287:    name: \"test setCRDcondition when condition needs to be appended\",",
          "289:     {",
          "292:      Reason:             \"Accepted\",",
          "293:      Message:            \"the initial names have been accepted\",",
          "294:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "295:     },",
          "296:    },",
          "302:     LastTransitionTime: metav1.Date(2018, 2, 1, 0, 0, 0, 0, time.UTC),",
          "303:    },",
          "305:     {",
          "308:      Reason:             \"Accepted\",",
          "309:      Message:            \"the initial names have been accepted\",",
          "310:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "311:     },",
          "312:     {",
          "317:      LastTransitionTime: metav1.Date(2018, 2, 1, 0, 0, 0, 0, time.UTC),",
          "318:     },",
          "319:    },",
          "320:   },",
          "321:   {",
          "322:    name: \"set new condition which doesn't have lastTransitionTime set\",",
          "324:     {",
          "327:      Reason:             \"Accepted\",",
          "328:      Message:            \"the initial names have been accepted\",",
          "329:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "330:     },",
          "331:    },",
          "335:     Reason:  \"NotAccepted\",",
          "336:     Message: \"Not accepted\",",
          "337:    },",
          "339:     {",
          "342:      Reason:             \"NotAccepted\",",
          "343:      Message:            \"Not accepted\",",
          "344:      LastTransitionTime: metav1.Date(2018, 1, 2, 0, 0, 0, 0, time.UTC),",
          "",
          "[Removed Lines]",
          "288:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "290:      Type:               apiextensions.Established,",
          "291:      Status:             apiextensions.ConditionTrue,",
          "297:    newCondition: apiextensions.CustomResourceDefinitionCondition{",
          "298:     Type:               apiextensions.Terminating,",
          "299:     Status:             apiextensions.ConditionFalse,",
          "300:     Reason:             \"Neverapiextensions.Established\",",
          "301:     Message:            \"resource was never apiextensions.Established\",",
          "304:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "306:      Type:               apiextensions.Established,",
          "307:      Status:             apiextensions.ConditionTrue,",
          "313:      Type:               apiextensions.Terminating,",
          "314:      Status:             apiextensions.ConditionFalse,",
          "315:      Reason:             \"Neverapiextensions.Established\",",
          "316:      Message:            \"resource was never apiextensions.Established\",",
          "323:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "325:      Type:               apiextensions.Established,",
          "326:      Status:             apiextensions.ConditionTrue,",
          "332:    newCondition: apiextensions.CustomResourceDefinitionCondition{",
          "333:     Type:    apiextensions.Established,",
          "334:     Status:  apiextensions.ConditionFalse,",
          "338:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "340:      Type:               apiextensions.Established,",
          "341:      Status:             apiextensions.ConditionFalse,",
          "",
          "[Added Lines]",
          "288:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "290:      Type:               apiextensionsv1.Established,",
          "291:      Status:             apiextensionsv1.ConditionTrue,",
          "297:    newCondition: apiextensionsv1.CustomResourceDefinitionCondition{",
          "298:     Type:               apiextensionsv1.Terminating,",
          "299:     Status:             apiextensionsv1.ConditionFalse,",
          "300:     Reason:             \"Neverapiextensionsv1.Established\",",
          "301:     Message:            \"resource was never apiextensionsv1.Established\",",
          "304:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "306:      Type:               apiextensionsv1.Established,",
          "307:      Status:             apiextensionsv1.ConditionTrue,",
          "313:      Type:               apiextensionsv1.Terminating,",
          "314:      Status:             apiextensionsv1.ConditionFalse,",
          "315:      Reason:             \"Neverapiextensionsv1.Established\",",
          "316:      Message:            \"resource was never apiextensionsv1.Established\",",
          "323:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "325:      Type:               apiextensionsv1.Established,",
          "326:      Status:             apiextensionsv1.ConditionTrue,",
          "332:    newCondition: apiextensionsv1.CustomResourceDefinitionCondition{",
          "333:     Type:    apiextensionsv1.Established,",
          "334:     Status:  apiextensionsv1.ConditionFalse,",
          "338:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "340:      Type:               apiextensionsv1.Established,",
          "341:      Status:             apiextensionsv1.ConditionFalse,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "347:   },",
          "348:   {",
          "349:    name: \"append new condition which doesn't have lastTransitionTime set\",",
          "351:     {",
          "354:      Reason:             \"Accepted\",",
          "355:      Message:            \"the initial names have been accepted\",",
          "356:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "357:     },",
          "358:    },",
          "364:    },",
          "366:     {",
          "369:      Reason:             \"Accepted\",",
          "370:      Message:            \"the initial names have been accepted\",",
          "371:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "372:     },",
          "373:     {",
          "378:      LastTransitionTime: metav1.Date(2018, 2, 1, 0, 0, 0, 0, time.UTC),",
          "379:     },",
          "380:    },",
          "",
          "[Removed Lines]",
          "350:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "352:      Type:               apiextensions.Established,",
          "353:      Status:             apiextensions.ConditionTrue,",
          "359:    newCondition: apiextensions.CustomResourceDefinitionCondition{",
          "360:     Type:    apiextensions.Terminating,",
          "361:     Status:  apiextensions.ConditionFalse,",
          "362:     Reason:  \"Neverapiextensions.Established\",",
          "363:     Message: \"resource was never apiextensions.Established\",",
          "365:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "367:      Type:               apiextensions.Established,",
          "368:      Status:             apiextensions.ConditionTrue,",
          "374:      Type:               apiextensions.Terminating,",
          "375:      Status:             apiextensions.ConditionFalse,",
          "376:      Reason:             \"Neverapiextensions.Established\",",
          "377:      Message:            \"resource was never apiextensions.Established\",",
          "",
          "[Added Lines]",
          "350:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "352:      Type:               apiextensionsv1.Established,",
          "353:      Status:             apiextensionsv1.ConditionTrue,",
          "359:    newCondition: apiextensionsv1.CustomResourceDefinitionCondition{",
          "360:     Type:    apiextensionsv1.Terminating,",
          "361:     Status:  apiextensionsv1.ConditionFalse,",
          "362:     Reason:  \"Neverapiextensionsv1.Established\",",
          "363:     Message: \"resource was never apiextensionsv1.Established\",",
          "365:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "367:      Type:               apiextensionsv1.Established,",
          "368:      Status:             apiextensionsv1.ConditionTrue,",
          "374:      Type:               apiextensionsv1.Terminating,",
          "375:      Status:             apiextensionsv1.ConditionFalse,",
          "376:      Reason:             \"Neverapiextensionsv1.Established\",",
          "377:      Message:            \"resource was never apiextensionsv1.Established\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "400: func TestRemoveCRDCondition(t *testing.T) {",
          "401:  tests := []struct {",
          "402:   name                 string",
          "406:  }{",
          "407:   {",
          "408:    name: \"test remove CRDCondition when the conditionType meets\",",
          "410:     {",
          "413:      Reason:             \"Accepted\",",
          "414:      Message:            \"the initial names have been accepted\",",
          "415:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "416:     },",
          "417:     {",
          "420:      Reason:             \"NoConflicts\",",
          "421:      Message:            \"no conflicts found\",",
          "422:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "423:     },",
          "424:    },",
          "427:     {",
          "430:      Reason:             \"Accepted\",",
          "431:      Message:            \"the initial names have been accepted\",",
          "432:      LastTransitionTime: metav1.Date(2011, 1, 2, 0, 0, 0, 0, time.UTC),",
          "",
          "[Removed Lines]",
          "403:   crdCondition         []apiextensions.CustomResourceDefinitionCondition",
          "404:   conditionType        apiextensions.CustomResourceDefinitionConditionType",
          "405:   expectedcrdCondition []apiextensions.CustomResourceDefinitionCondition",
          "409:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "411:      Type:               apiextensions.Established,",
          "412:      Status:             apiextensions.ConditionTrue,",
          "418:      Type:               apiextensions.NamesAccepted,",
          "419:      Status:             apiextensions.ConditionTrue,",
          "425:    conditionType: apiextensions.NamesAccepted,",
          "426:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "428:      Type:               apiextensions.Established,",
          "429:      Status:             apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "403:   crdCondition         []apiextensionsv1.CustomResourceDefinitionCondition",
          "404:   conditionType        apiextensionsv1.CustomResourceDefinitionConditionType",
          "405:   expectedcrdCondition []apiextensionsv1.CustomResourceDefinitionCondition",
          "409:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "411:      Type:               apiextensionsv1.Established,",
          "412:      Status:             apiextensionsv1.ConditionTrue,",
          "418:      Type:               apiextensionsv1.NamesAccepted,",
          "419:      Status:             apiextensionsv1.ConditionTrue,",
          "425:    conditionType: apiextensionsv1.NamesAccepted,",
          "426:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "428:      Type:               apiextensionsv1.Established,",
          "429:      Status:             apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "435:   },",
          "436:   {",
          "437:    name: \"test remove CRDCondition when the conditionType not meets\",",
          "439:     {",
          "442:      Reason:             \"Accepted\",",
          "443:      Message:            \"the initial names have been accepted\",",
          "444:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "445:     },",
          "446:     {",
          "449:      Reason:             \"NoConflicts\",",
          "450:      Message:            \"no conflicts found\",",
          "451:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "452:     },",
          "453:    },",
          "456:     {",
          "459:      Reason:             \"Accepted\",",
          "460:      Message:            \"the initial names have been accepted\",",
          "461:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "462:     },",
          "463:     {",
          "466:      Reason:             \"NoConflicts\",",
          "467:      Message:            \"no conflicts found\",",
          "468:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "",
          "[Removed Lines]",
          "438:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "440:      Type:               apiextensions.Established,",
          "441:      Status:             apiextensions.ConditionTrue,",
          "447:      Type:               apiextensions.NamesAccepted,",
          "448:      Status:             apiextensions.ConditionTrue,",
          "454:    conditionType: apiextensions.Terminating,",
          "455:    expectedcrdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "457:      Type:               apiextensions.Established,",
          "458:      Status:             apiextensions.ConditionTrue,",
          "464:      Type:               apiextensions.NamesAccepted,",
          "465:      Status:             apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "438:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "440:      Type:               apiextensionsv1.Established,",
          "441:      Status:             apiextensionsv1.ConditionTrue,",
          "447:      Type:               apiextensionsv1.NamesAccepted,",
          "448:      Status:             apiextensionsv1.ConditionTrue,",
          "454:    conditionType: apiextensionsv1.Terminating,",
          "455:    expectedcrdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "457:      Type:               apiextensionsv1.Established,",
          "458:      Status:             apiextensionsv1.ConditionTrue,",
          "464:      Type:               apiextensionsv1.NamesAccepted,",
          "465:      Status:             apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "487: func TestIsCRDConditionPresentAndEqual(t *testing.T) {",
          "488:  tests := []struct {",
          "489:   name          string",
          "493:   expectresult  bool",
          "494:  }{",
          "495:   {",
          "496:    name: \"test CRDCondition is not Present\",",
          "498:     {",
          "501:      Reason:             \"Accepted\",",
          "502:      Message:            \"the initial names have been accepted\",",
          "503:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "504:     },",
          "505:     {",
          "508:      Reason:             \"NoConflicts\",",
          "509:      Message:            \"no conflicts found\",",
          "510:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "511:     },",
          "512:    },",
          "515:    expectresult:  false,",
          "516:   },",
          "517:   {",
          "518:    name: \"test CRDCondition is Present but not Equal\",",
          "520:     {",
          "523:      Reason:             \"Accepted\",",
          "524:      Message:            \"the initial names have been accepted\",",
          "525:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "526:     },",
          "527:     {",
          "530:      Reason:             \"NoConflicts\",",
          "531:      Message:            \"no conflicts found\",",
          "532:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "533:     },",
          "534:    },",
          "537:    expectresult:  false,",
          "538:   },",
          "539:   {",
          "540:    name: \"test CRDCondition is Present and Equal\",",
          "542:     {",
          "545:      Reason:             \"Accepted\",",
          "546:      Message:            \"the initial names have been accepted\",",
          "547:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "548:     },",
          "549:     {",
          "552:      Reason:             \"NoConflicts\",",
          "553:      Message:            \"no conflicts found\",",
          "554:      LastTransitionTime: metav1.Date(2018, 1, 1, 0, 0, 0, 0, time.UTC),",
          "555:     },",
          "556:    },",
          "559:    expectresult:  true,",
          "560:   },",
          "561:  }",
          "",
          "[Removed Lines]",
          "490:   crdCondition  []apiextensions.CustomResourceDefinitionCondition",
          "491:   conditionType apiextensions.CustomResourceDefinitionConditionType",
          "492:   status        apiextensions.ConditionStatus",
          "497:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "499:      Type:               apiextensions.Established,",
          "500:      Status:             apiextensions.ConditionTrue,",
          "506:      Type:               apiextensions.NamesAccepted,",
          "507:      Status:             apiextensions.ConditionTrue,",
          "513:    conditionType: apiextensions.Terminating,",
          "514:    status:        apiextensions.ConditionTrue,",
          "519:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "521:      Type:               apiextensions.Established,",
          "522:      Status:             apiextensions.ConditionTrue,",
          "528:      Type:               apiextensions.NamesAccepted,",
          "529:      Status:             apiextensions.ConditionTrue,",
          "535:    conditionType: apiextensions.Established,",
          "536:    status:        apiextensions.ConditionFalse,",
          "541:    crdCondition: []apiextensions.CustomResourceDefinitionCondition{",
          "543:      Type:               apiextensions.Established,",
          "544:      Status:             apiextensions.ConditionTrue,",
          "550:      Type:               apiextensions.NamesAccepted,",
          "551:      Status:             apiextensions.ConditionTrue,",
          "557:    conditionType: apiextensions.NamesAccepted,",
          "558:    status:        apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "490:   crdCondition  []apiextensionsv1.CustomResourceDefinitionCondition",
          "491:   conditionType apiextensionsv1.CustomResourceDefinitionConditionType",
          "492:   status        apiextensionsv1.ConditionStatus",
          "497:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "499:      Type:               apiextensionsv1.Established,",
          "500:      Status:             apiextensionsv1.ConditionTrue,",
          "506:      Type:               apiextensionsv1.NamesAccepted,",
          "507:      Status:             apiextensionsv1.ConditionTrue,",
          "513:    conditionType: apiextensionsv1.Terminating,",
          "514:    status:        apiextensionsv1.ConditionTrue,",
          "519:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "521:      Type:               apiextensionsv1.Established,",
          "522:      Status:             apiextensionsv1.ConditionTrue,",
          "528:      Type:               apiextensionsv1.NamesAccepted,",
          "529:      Status:             apiextensionsv1.ConditionTrue,",
          "535:    conditionType: apiextensionsv1.Established,",
          "536:    status:        apiextensionsv1.ConditionFalse,",
          "541:    crdCondition: []apiextensionsv1.CustomResourceDefinitionCondition{",
          "543:      Type:               apiextensionsv1.Established,",
          "544:      Status:             apiextensionsv1.ConditionTrue,",
          "550:      Type:               apiextensionsv1.NamesAccepted,",
          "551:      Status:             apiextensionsv1.ConditionTrue,",
          "557:    conditionType: apiextensionsv1.NamesAccepted,",
          "558:    status:        apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "568:  }",
          "569: }",
          "572:  testCRDObjectMeta := metav1.ObjectMeta{",
          "573:   Name:            \"plural.group.com\",",
          "574:   ResourceVersion: \"12\",",
          "575:  }",
          "577:   Group: \"group.com\",",
          "579:    Plural:   \"plural\",",
          "580:    Singular: \"singular\",",
          "581:    Kind:     \"kind\",",
          "582:    ListKind: \"listkind\",",
          "583:   },",
          "584:  }",
          "586:   Plural:   \"plural\",",
          "587:   Singular: \"singular\",",
          "588:   Kind:     \"kind\",",
          "589:   ListKind: \"listkind\",",
          "590:  }",
          "592:   ObjectMeta: testCRDObjectMeta,",
          "593:   Spec:       testCRDSpec,",
          "595:    AcceptedNames: testCRDAcceptedNames,",
          "596:    Conditions:    conditions,",
          "597:   },",
          "",
          "[Removed Lines]",
          "571: func generateCRDwithCondition(conditions []apiextensions.CustomResourceDefinitionCondition) *apiextensions.CustomResourceDefinition {",
          "576:  testCRDSpec := apiextensions.CustomResourceDefinitionSpec{",
          "578:   Names: apiextensions.CustomResourceDefinitionNames{",
          "585:  testCRDAcceptedNames := apiextensions.CustomResourceDefinitionNames{",
          "591:  return &apiextensions.CustomResourceDefinition{",
          "594:   Status: apiextensions.CustomResourceDefinitionStatus{",
          "",
          "[Added Lines]",
          "571: func generateCRDwithCondition(conditions []apiextensionsv1.CustomResourceDefinitionCondition) *apiextensionsv1.CustomResourceDefinition {",
          "576:  testCRDSpec := apiextensionsv1.CustomResourceDefinitionSpec{",
          "578:   Names: apiextensionsv1.CustomResourceDefinitionNames{",
          "585:  testCRDAcceptedNames := apiextensionsv1.CustomResourceDefinitionNames{",
          "591:  return &apiextensionsv1.CustomResourceDefinition{",
          "594:   Status: apiextensionsv1.CustomResourceDefinitionStatus{",
          "",
          "---------------"
        ],
        "pkg/apiserver/conversion/converter.go||pkg/apiserver/conversion/converter.go": [
          "File: pkg/apiserver/conversion/converter.go -> pkg/apiserver/conversion/converter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"fmt\"",
          "22:  autoscalingv1 \"k8s.io/api/autoscaling/v1\"",
          "24:  apiextensionsfeatures \"k8s.io/apiextensions-apiserver/pkg/features\"",
          "25:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "26:  \"k8s.io/apimachinery/pkg/runtime\"",
          "",
          "[Removed Lines]",
          "23:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "23:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: }",
          "59:  validVersions := map[schema.GroupVersion]bool{}",
          "60:  for _, version := range crd.Spec.Versions {",
          "61:   validVersions[schema.GroupVersion{Group: crd.Spec.Group, Version: version.Name}] = true",
          "",
          "[Removed Lines]",
          "58: func (m *CRConverterFactory) NewConverter(crd *apiextensions.CustomResourceDefinition) (safe, unsafe runtime.ObjectConvertor, err error) {",
          "",
          "[Added Lines]",
          "58: func (m *CRConverterFactory) NewConverter(crd *apiextensionsv1.CustomResourceDefinition) (safe, unsafe runtime.ObjectConvertor, err error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:  var converter crConverterInterface",
          "65:  switch crd.Spec.Conversion.Strategy {",
          "67:   converter = &nopConverter{}",
          "69:   if !utilfeature.DefaultFeatureGate.Enabled(apiextensionsfeatures.CustomResourceWebhookConversion) {",
          "70:    return nil, nil, fmt.Errorf(\"webhook conversion is disabled on this cluster\")",
          "71:   }",
          "",
          "[Removed Lines]",
          "66:  case apiextensions.NoneConverter:",
          "68:  case apiextensions.WebhookConverter:",
          "",
          "[Added Lines]",
          "66:  case apiextensionsv1.NoneConverter:",
          "68:  case apiextensionsv1.WebhookConverter:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  unsafe = &crConverter{",
          "95:   convertScale:  convertScale,",
          "96:   validVersions: validVersions,",
          "98:   converter:     converter,",
          "99:  }",
          "100:  return &safeConverterWrapper{unsafe}, unsafe, nil",
          "",
          "[Removed Lines]",
          "97:   clusterScoped: crd.Spec.Scope == apiextensions.ClusterScoped,",
          "",
          "[Added Lines]",
          "97:   clusterScoped: crd.Spec.Scope == apiextensionsv1.ClusterScoped,",
          "",
          "---------------"
        ],
        "pkg/apiserver/conversion/converter_test.go||pkg/apiserver/conversion/converter_test.go": [
          "File: pkg/apiserver/conversion/converter_test.go -> pkg/apiserver/conversion/converter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"strings\"",
          "22:  \"testing\"",
          "25:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "26:  \"k8s.io/apimachinery/pkg/runtime\"",
          "27:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "",
          "[Removed Lines]",
          "24:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "24:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   t.Fatalf(\"Cannot create conversion factory: %v\", err)",
          "160:  }",
          "161:  for _, test := range tests {",
          "166:     },",
          "167:    },",
          "168:   }",
          "169:   for _, v := range test.ValidVersions {",
          "170:    gv, _ := schema.ParseGroupVersion(v)",
          "172:    testCRD.Spec.Group = gv.Group",
          "173:   }",
          "174:   safeConverter, _, err := CRConverterFactory.NewConverter(&testCRD)",
          "",
          "[Removed Lines]",
          "162:   testCRD := apiextensions.CustomResourceDefinition{",
          "163:    Spec: apiextensions.CustomResourceDefinitionSpec{",
          "164:     Conversion: &apiextensions.CustomResourceConversion{",
          "165:      Strategy: apiextensions.NoneConverter,",
          "171:    testCRD.Spec.Versions = append(testCRD.Spec.Versions, apiextensions.CustomResourceDefinitionVersion{Name: gv.Version, Served: true})",
          "",
          "[Added Lines]",
          "162:   testCRD := apiextensionsv1.CustomResourceDefinition{",
          "163:    Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "164:     Conversion: &apiextensionsv1.CustomResourceConversion{",
          "165:      Strategy: apiextensionsv1.NoneConverter,",
          "171:    testCRD.Spec.Versions = append(testCRD.Spec.Versions, apiextensionsv1.CustomResourceDefinitionVersion{Name: gv.Version, Served: true})",
          "",
          "---------------"
        ],
        "pkg/apiserver/conversion/webhook_converter.go||pkg/apiserver/conversion/webhook_converter.go": [
          "File: pkg/apiserver/conversion/webhook_converter.go -> pkg/apiserver/conversion/webhook_converter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"fmt\"",
          "23:  \"time\"",
          "26:  v1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "27:  \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1\"",
          "28:  apivalidation \"k8s.io/apimachinery/pkg/api/validation\"",
          "",
          "[Removed Lines]",
          "25:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "25:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  conversionReviewVersions []string",
          "74: }",
          "77:  apiConfig := crd.Spec.Conversion.Webhook.ClientConfig",
          "78:  ret := webhook.ClientConfig{",
          "79:   Name:     fmt.Sprintf(\"conversion_webhook_for_%s\", crd.Name),",
          "",
          "[Removed Lines]",
          "76: func webhookClientConfigForCRD(crd *apiextensions.CustomResourceDefinition) *webhook.ClientConfig {",
          "",
          "[Added Lines]",
          "76: func webhookClientConfigForCRD(crd *apiextensionsv1.CustomResourceDefinition) *webhook.ClientConfig {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: var _ crConverterInterface = &webhookConverter{}",
          "101:  restClient, err := f.clientManager.HookClient(*webhookClientConfigForCRD(crd))",
          "102:  if err != nil {",
          "103:   return nil, err",
          "",
          "[Removed Lines]",
          "100: func (f *webhookConverterFactory) NewWebhookConverter(crd *apiextensions.CustomResourceDefinition) (*webhookConverter, error) {",
          "",
          "[Added Lines]",
          "100: func (f *webhookConverterFactory) NewWebhookConverter(crd *apiextensionsv1.CustomResourceDefinition) (*webhookConverter, error) {",
          "",
          "---------------"
        ],
        "pkg/apiserver/customresource_discovery_controller.go||pkg/apiserver/customresource_discovery_controller.go": [
          "File: pkg/apiserver/customresource_discovery_controller.go -> pkg/apiserver/customresource_discovery_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  \"k8s.io/client-go/util/workqueue\"",
          "37:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "39:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "40:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "41: )",
          "",
          "[Removed Lines]",
          "38:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "38:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:  foundVersion := false",
          "88:  foundGroup := false",
          "89:  for _, crd := range crds {",
          "91:    continue",
          "92:   }",
          "",
          "[Removed Lines]",
          "90:   if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Established) {",
          "",
          "[Added Lines]",
          "90:   if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Established) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:   verbs := metav1.Verbs([]string{\"delete\", \"deletecollection\", \"get\", \"list\", \"patch\", \"create\", \"update\", \"watch\"})",
          "131:    verbs = metav1.Verbs([]string{\"delete\", \"deletecollection\", \"get\", \"list\", \"watch\"})",
          "132:   }",
          "134:   apiResourcesForDiscovery = append(apiResourcesForDiscovery, metav1.APIResource{",
          "135:    Name:               crd.Status.AcceptedNames.Plural,",
          "136:    SingularName:       crd.Status.AcceptedNames.Singular,",
          "138:    Kind:               crd.Status.AcceptedNames.Kind,",
          "139:    Verbs:              verbs,",
          "140:    ShortNames:         crd.Status.AcceptedNames.ShortNames,",
          "",
          "[Removed Lines]",
          "130:   if apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Terminating) {",
          "137:    Namespaced:         crd.Spec.Scope == apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "130:   if apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Terminating) {",
          "137:    Namespaced:         crd.Spec.Scope == apiextensionsv1.NamespaceScoped,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:   if subresources != nil && subresources.Status != nil {",
          "150:    apiResourcesForDiscovery = append(apiResourcesForDiscovery, metav1.APIResource{",
          "151:     Name:       crd.Status.AcceptedNames.Plural + \"/status\",",
          "153:     Kind:       crd.Status.AcceptedNames.Kind,",
          "154:     Verbs:      metav1.Verbs([]string{\"get\", \"patch\", \"update\"}),",
          "155:    })",
          "",
          "[Removed Lines]",
          "152:     Namespaced: crd.Spec.Scope == apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "152:     Namespaced: crd.Spec.Scope == apiextensionsv1.NamespaceScoped,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:     Version:    \"v1\",",
          "162:     Kind:       \"Scale\",",
          "163:     Name:       crd.Status.AcceptedNames.Plural + \"/scale\",",
          "165:     Verbs:      metav1.Verbs([]string{\"get\", \"patch\", \"update\"}),",
          "166:    })",
          "167:   }",
          "",
          "[Removed Lines]",
          "164:     Namespaced: crd.Spec.Scope == apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "164:     Namespaced: crd.Spec.Scope == apiextensionsv1.NamespaceScoped,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "244:  return true",
          "245: }",
          "248:  for _, v := range obj.Spec.Versions {",
          "249:   c.queue.Add(schema.GroupVersion{Group: obj.Spec.Group, Version: v.Name})",
          "250:  }",
          "251: }",
          "253: func (c *DiscoveryController) addCustomResourceDefinition(obj interface{}) {",
          "255:  klog.V(4).Infof(\"Adding customresourcedefinition %s\", castObj.Name)",
          "256:  c.enqueue(castObj)",
          "257: }",
          "259: func (c *DiscoveryController) updateCustomResourceDefinition(oldObj, newObj interface{}) {",
          "262:  klog.V(4).Infof(\"Updating customresourcedefinition %s\", castOldObj.Name)",
          "",
          "[Removed Lines]",
          "247: func (c *DiscoveryController) enqueue(obj *apiextensions.CustomResourceDefinition) {",
          "254:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "260:  castNewObj := newObj.(*apiextensions.CustomResourceDefinition)",
          "261:  castOldObj := oldObj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "247: func (c *DiscoveryController) enqueue(obj *apiextensionsv1.CustomResourceDefinition) {",
          "254:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "260:  castNewObj := newObj.(*apiextensionsv1.CustomResourceDefinition)",
          "261:  castOldObj := oldObj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "267: }",
          "269: func (c *DiscoveryController) deleteCustomResourceDefinition(obj interface{}) {",
          "271:  if !ok {",
          "272:   tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",
          "273:   if !ok {",
          "274:    klog.Errorf(\"Couldn't get object from tombstone %#v\", obj)",
          "275:    return",
          "276:   }",
          "278:   if !ok {",
          "279:    klog.Errorf(\"Tombstone contained object that is not expected %#v\", obj)",
          "280:    return",
          "",
          "[Removed Lines]",
          "270:  castObj, ok := obj.(*apiextensions.CustomResourceDefinition)",
          "277:   castObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "270:  castObj, ok := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "277:   castObj, ok = tombstone.Obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------"
        ],
        "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go": [
          "File: pkg/apiserver/customresource_handler.go -> pkg/apiserver/customresource_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "33:  apiextensionsinternal \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions\"",
          "35:  \"k8s.io/apiextensions-apiserver/pkg/apiserver/conversion\"",
          "36:  structuralschema \"k8s.io/apiextensions-apiserver/pkg/apiserver/schema\"",
          "37:  structuraldefaulting \"k8s.io/apiextensions-apiserver/pkg/apiserver/schema/defaulting\"",
          "",
          "[Removed Lines]",
          "34:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "34:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: type crdInfo struct {",
          "144:  storages map[string]customresource.CustomResourceStorage",
          "",
          "[Removed Lines]",
          "140:  spec          *apiextensions.CustomResourceDefinitionSpec",
          "141:  acceptedNames *apiextensions.CustomResourceDefinitionNames",
          "",
          "[Added Lines]",
          "140:  spec          *apiextensionsv1.CustomResourceDefinitionSpec",
          "141:  acceptedNames *apiextensionsv1.CustomResourceDefinitionNames",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:  if !namespacedCRD && namespacedReq {",
          "284:   r.delegate.ServeHTTP(w, req)",
          "285:   return",
          "",
          "[Removed Lines]",
          "282:  namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensions.NamespaceScoped, len(requestInfo.Namespace) > 0",
          "",
          "[Added Lines]",
          "282:  namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensionsv1.NamespaceScoped, len(requestInfo.Namespace) > 0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:   r.delegate.ServeHTTP(w, req)",
          "304:   return",
          "305:  }",
          "309:  crdInfo, err := r.getOrCreateServingInfoFor(crd.UID, crd.Name)",
          "310:  if apierrors.IsNotFound(err) {",
          "",
          "[Removed Lines]",
          "301:  if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.NamesAccepted) &&",
          "302:   !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Established) {",
          "307:  terminating := apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Terminating)",
          "",
          "[Added Lines]",
          "301:  if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.NamesAccepted) &&",
          "302:   !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Established) {",
          "307:  terminating := apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Terminating)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "452: func (r *crdHandler) createCustomResourceDefinition(obj interface{}) {",
          "454:  r.customStorageLock.Lock()",
          "455:  defer r.customStorageLock.Unlock()",
          "",
          "[Removed Lines]",
          "453:  crd := obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "453:  crd := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "461: func (r *crdHandler) updateCustomResourceDefinition(oldObj, newObj interface{}) {",
          "465:  r.customStorageLock.Lock()",
          "466:  defer r.customStorageLock.Unlock()",
          "",
          "[Removed Lines]",
          "462:  oldCRD := oldObj.(*apiextensions.CustomResourceDefinition)",
          "463:  newCRD := newObj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "462:  oldCRD := oldObj.(*apiextensionsv1.CustomResourceDefinition)",
          "463:  newCRD := newObj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474:   if r.masterCount > 1 {",
          "475:    r.establishingController.QueueCRD(newCRD.Name, 5*time.Second)",
          "476:   } else {",
          "",
          "[Removed Lines]",
          "472:  if !apiextensionshelpers.IsCRDConditionTrue(newCRD, apiextensions.Established) &&",
          "473:   apiextensionshelpers.IsCRDConditionTrue(newCRD, apiextensions.NamesAccepted) {",
          "",
          "[Added Lines]",
          "472:  if !apiextensionshelpers.IsCRDConditionTrue(newCRD, apiextensionsv1.Established) &&",
          "473:   apiextensionshelpers.IsCRDConditionTrue(newCRD, apiextensionsv1.NamesAccepted) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "581:  info, err := r.getOrCreateServingInfoFor(crd.UID, crd.Name)",
          "582:  if err != nil {",
          "583:   return nil, err",
          "",
          "[Removed Lines]",
          "580: func (r *crdHandler) GetCustomResourceListerCollectionDeleter(crd *apiextensions.CustomResourceDefinition) (finalizer.ListerCollectionDeleter, error) {",
          "",
          "[Added Lines]",
          "580: func (r *crdHandler) GetCustomResourceListerCollectionDeleter(crd *apiextensionsv1.CustomResourceDefinition) (finalizer.ListerCollectionDeleter, error) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "633:    continue",
          "634:   }",
          "635:   internalValidation := &apiextensionsinternal.CustomResourceValidation{}",
          "637:    return nil, fmt.Errorf(\"failed converting CRD validation to internal version: %v\", err)",
          "638:   }",
          "639:   s, err := structuralschema.NewStructural(internalValidation.OpenAPIV3Schema)",
          "",
          "[Removed Lines]",
          "636:   if err := apiextensions.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(val, internalValidation, nil); err != nil {",
          "",
          "[Added Lines]",
          "636:   if err := apiextensionsv1.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(val, internalValidation, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "693:   var internalValidationSchema *apiextensionsinternal.CustomResourceValidation",
          "694:   if validationSchema != nil {",
          "695:    internalValidationSchema = &apiextensionsinternal.CustomResourceValidation{}",
          "697:     return nil, fmt.Errorf(\"failed to convert CRD validation to internal version: %v\", err)",
          "698:    }",
          "699:   }",
          "",
          "[Removed Lines]",
          "696:    if err := apiextensions.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(validationSchema, internalValidationSchema, nil); err != nil {",
          "",
          "[Added Lines]",
          "696:    if err := apiextensionsv1.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(validationSchema, internalValidationSchema, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "712:   if utilfeature.DefaultFeatureGate.Enabled(apiextensionsfeatures.CustomResourceSubresources) && subresources != nil && subresources.Status != nil {",
          "713:    equivalentResourceRegistry.RegisterKindFor(resource, \"status\", kind)",
          "714:    statusSpec = &apiextensionsinternal.CustomResourceSubresourceStatus{}",
          "716:     return nil, fmt.Errorf(\"failed converting CRD status subresource to internal version: %v\", err)",
          "717:    }",
          "",
          "[Removed Lines]",
          "715:    if err := apiextensions.Convert_v1_CustomResourceSubresourceStatus_To_apiextensions_CustomResourceSubresourceStatus(subresources.Status, statusSpec, nil); err != nil {",
          "",
          "[Added Lines]",
          "715:    if err := apiextensionsv1.Convert_v1_CustomResourceSubresourceStatus_To_apiextensions_CustomResourceSubresourceStatus(subresources.Status, statusSpec, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "731:   if utilfeature.DefaultFeatureGate.Enabled(apiextensionsfeatures.CustomResourceSubresources) && subresources != nil && subresources.Scale != nil {",
          "732:    equivalentResourceRegistry.RegisterKindFor(resource, \"scale\", autoscalingv1.SchemeGroupVersion.WithKind(\"Scale\"))",
          "733:    scaleSpec = &apiextensionsinternal.CustomResourceSubresourceScale{}",
          "735:     return nil, fmt.Errorf(\"failed converting CRD status subresource to internal version: %v\", err)",
          "736:    }",
          "737:   }",
          "",
          "[Removed Lines]",
          "734:    if err := apiextensions.Convert_v1_CustomResourceSubresourceScale_To_apiextensions_CustomResourceSubresourceScale(subresources.Scale, scaleSpec, nil); err != nil {",
          "",
          "[Added Lines]",
          "734:    if err := apiextensionsv1.Convert_v1_CustomResourceSubresourceScale_To_apiextensions_CustomResourceSubresourceScale(subresources.Scale, scaleSpec, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "752:    schema.GroupVersionKind{Group: crd.Spec.Group, Version: v.Name, Kind: crd.Status.AcceptedNames.ListKind},",
          "753:    customresource.NewStrategy(",
          "754:     typer,",
          "756:     kind,",
          "757:     validator,",
          "758:     statusValidator,",
          "",
          "[Removed Lines]",
          "755:     crd.Spec.Scope == apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "755:     crd.Spec.Scope == apiextensionsv1.NamespaceScoped,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "776:   selfLinkPrefix := \"\"",
          "777:   switch crd.Spec.Scope {",
          "779:    selfLinkPrefix = \"/\" + path.Join(\"apis\", crd.Spec.Group, v.Name) + \"/\" + crd.Status.AcceptedNames.Plural + \"/\"",
          "781:    selfLinkPrefix = \"/\" + path.Join(\"apis\", crd.Spec.Group, v.Name, \"namespaces\") + \"/\"",
          "782:   }",
          "787:   negotiatedSerializer := unstructuredNegotiatedSerializer{",
          "",
          "[Removed Lines]",
          "778:   case apiextensions.ClusterScoped:",
          "780:   case apiextensions.NamespaceScoped:",
          "784:   clusterScoped := crd.Spec.Scope == apiextensions.ClusterScoped",
          "",
          "[Added Lines]",
          "778:   case apiextensionsv1.ClusterScoped:",
          "780:   case apiextensionsv1.NamespaceScoped:",
          "784:   clusterScoped := crd.Spec.Scope == apiextensionsv1.ClusterScoped",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1222: }",
          "1226:  for _, v := range spec.Versions {",
          "1227:   if v.Name == version {",
          "1228:    return v.Served",
          "",
          "[Removed Lines]",
          "1225: func hasServedCRDVersion(spec *apiextensions.CustomResourceDefinitionSpec, version string) bool {",
          "",
          "[Added Lines]",
          "1225: func hasServedCRDVersion(spec *apiextensionsv1.CustomResourceDefinitionSpec, version string) bool {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1250:  if !utilfeature.DefaultFeatureGate.Enabled(features.ServerSideApply) {",
          "1251:   return nil, nil",
          "1252:  }",
          "",
          "[Removed Lines]",
          "1249: func buildOpenAPIModelsForApply(staticOpenAPISpec *spec.Swagger, crd *apiextensions.CustomResourceDefinition) (proto.Models, error) {",
          "",
          "[Added Lines]",
          "1249: func buildOpenAPIModelsForApply(staticOpenAPISpec *spec.Swagger, crd *apiextensionsv1.CustomResourceDefinition) (proto.Models, error) {",
          "",
          "---------------"
        ],
        "pkg/apiserver/customresource_handler_test.go||pkg/apiserver/customresource_handler_test.go": [
          "File: pkg/apiserver/customresource_handler_test.go -> pkg/apiserver/customresource_handler_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"sigs.k8s.io/yaml\"",
          "26:  \"testing\"",
          "29:  \"k8s.io/apiextensions-apiserver/pkg/apiserver/conversion\"",
          "30:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "31:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "28:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "28:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  for _, test := range tests {",
          "79:   t.Run(test.name, func(t *testing.T) {",
          "84:       Strategy: \"None\",",
          "85:      },",
          "86:     },",
          "87:    }",
          "89:    if test.clusterScoped {",
          "91:    } else {",
          "93:    }",
          "94:    f, err := conversion.NewCRConverterFactory(nil, nil)",
          "95:    if err != nil {",
          "",
          "[Removed Lines]",
          "81:    crd := apiextensions.CustomResourceDefinition{",
          "82:     Spec: apiextensions.CustomResourceDefinitionSpec{",
          "83:      Conversion: &apiextensions.CustomResourceConversion{",
          "90:     crd.Spec.Scope = apiextensions.ClusterScoped",
          "92:     crd.Spec.Scope = apiextensions.NamespaceScoped",
          "",
          "[Added Lines]",
          "81:    crd := apiextensionsv1.CustomResourceDefinition{",
          "82:     Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "83:      Conversion: &apiextensionsv1.CustomResourceConversion{",
          "90:     crd.Spec.Scope = apiextensionsv1.ClusterScoped",
          "92:     crd.Spec.Scope = apiextensionsv1.NamespaceScoped",
          "",
          "---------------"
        ],
        "pkg/controller/apiapproval/apiapproval_controller.go||pkg/controller/apiapproval/apiapproval_controller.go": [
          "File: pkg/controller/apiapproval/apiapproval_controller.go -> pkg/controller/apiapproval/apiapproval_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"time\"",
          "24:  \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "26:  client \"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1\"",
          "27:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "28:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "",
          "[Removed Lines]",
          "25:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "25:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: }",
          "81:  if !apihelpers.IsProtectedCommunityGroup(crd.Spec.Group) {",
          "82:   return nil",
          "83:  }",
          "",
          "[Removed Lines]",
          "80: func calculateCondition(crd *apiextensions.CustomResourceDefinition) *apiextensions.CustomResourceDefinitionCondition {",
          "",
          "[Added Lines]",
          "80: func calculateCondition(crd *apiextensionsv1.CustomResourceDefinition) *apiextensionsv1.CustomResourceDefinitionCondition {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:  approvalState, reason := apihelpers.GetAPIApprovalState(crd.Annotations)",
          "86:  switch approvalState {",
          "87:  case apihelpers.APIApprovalInvalid:",
          "91:    Reason:  \"InvalidAnnotation\",",
          "92:    Message: reason,",
          "93:   }",
          "94:  case apihelpers.APIApprovalMissing:",
          "98:    Reason:  \"MissingAnnotation\",",
          "99:    Message: reason,",
          "100:   }",
          "101:  case apihelpers.APIApproved:",
          "105:    Reason:  \"ApprovedAnnotation\",",
          "106:    Message: reason,",
          "107:   }",
          "108:  case apihelpers.APIApprovalBypassed:",
          "112:    Reason:  \"UnapprovedAnnotation\",",
          "113:    Message: reason,",
          "114:   }",
          "115:  default:",
          "119:    Reason:  \"UnknownAnnotation\",",
          "120:    Message: reason,",
          "121:   }",
          "",
          "[Removed Lines]",
          "88:   return &apiextensions.CustomResourceDefinitionCondition{",
          "89:    Type:    apiextensions.KubernetesAPIApprovalPolicyConformant,",
          "90:    Status:  apiextensions.ConditionFalse,",
          "95:   return &apiextensions.CustomResourceDefinitionCondition{",
          "96:    Type:    apiextensions.KubernetesAPIApprovalPolicyConformant,",
          "97:    Status:  apiextensions.ConditionFalse,",
          "102:   return &apiextensions.CustomResourceDefinitionCondition{",
          "103:    Type:    apiextensions.KubernetesAPIApprovalPolicyConformant,",
          "104:    Status:  apiextensions.ConditionTrue,",
          "109:   return &apiextensions.CustomResourceDefinitionCondition{",
          "110:    Type:    apiextensions.KubernetesAPIApprovalPolicyConformant,",
          "111:    Status:  apiextensions.ConditionFalse,",
          "116:   return &apiextensions.CustomResourceDefinitionCondition{",
          "117:    Type:    apiextensions.KubernetesAPIApprovalPolicyConformant,",
          "118:    Status:  apiextensions.ConditionUnknown,",
          "",
          "[Added Lines]",
          "88:   return &apiextensionsv1.CustomResourceDefinitionCondition{",
          "89:    Type:    apiextensionsv1.KubernetesAPIApprovalPolicyConformant,",
          "90:    Status:  apiextensionsv1.ConditionFalse,",
          "95:   return &apiextensionsv1.CustomResourceDefinitionCondition{",
          "96:    Type:    apiextensionsv1.KubernetesAPIApprovalPolicyConformant,",
          "97:    Status:  apiextensionsv1.ConditionFalse,",
          "102:   return &apiextensionsv1.CustomResourceDefinitionCondition{",
          "103:    Type:    apiextensionsv1.KubernetesAPIApprovalPolicyConformant,",
          "104:    Status:  apiextensionsv1.ConditionTrue,",
          "109:   return &apiextensionsv1.CustomResourceDefinitionCondition{",
          "110:    Type:    apiextensionsv1.KubernetesAPIApprovalPolicyConformant,",
          "111:    Status:  apiextensionsv1.ConditionFalse,",
          "116:   return &apiextensionsv1.CustomResourceDefinitionCondition{",
          "117:    Type:    apiextensionsv1.KubernetesAPIApprovalPolicyConformant,",
          "118:    Status:  apiextensionsv1.ConditionUnknown,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:  }",
          "136:  c.lastSeenProtectedAnnotationLock.Lock()",
          "137:  lastSeen, seenBefore := c.lastSeenProtectedAnnotation[inCustomResourceDefinition.Name]",
          "138:  c.lastSeenProtectedAnnotationLock.Unlock()",
          "",
          "[Removed Lines]",
          "135:  protectionAnnotationValue := inCustomResourceDefinition.Annotations[apiextensions.KubeAPIApprovedAnnotation]",
          "",
          "[Added Lines]",
          "135:  protectionAnnotationValue := inCustomResourceDefinition.Annotations[apiextensionsv1.KubeAPIApprovedAnnotation]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:   return nil",
          "148:  }",
          "152:  if old != nil && old.Status == cond.Status && old.Reason == cond.Reason && old.Message == cond.Message {",
          "",
          "[Removed Lines]",
          "149:  old := apihelpers.FindCRDCondition(inCustomResourceDefinition, apiextensions.KubernetesAPIApprovalPolicyConformant)",
          "",
          "[Added Lines]",
          "149:  old := apihelpers.FindCRDCondition(inCustomResourceDefinition, apiextensionsv1.KubernetesAPIApprovalPolicyConformant)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:  return true",
          "221: }",
          "224:  key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)",
          "225:  if err != nil {",
          "226:   utilruntime.HandleError(fmt.Errorf(\"Couldn't get key for object %#v: %v\", obj, err))",
          "",
          "[Removed Lines]",
          "223: func (c *KubernetesAPIApprovalPolicyConformantConditionController) enqueue(obj *apiextensions.CustomResourceDefinition) {",
          "",
          "[Added Lines]",
          "223: func (c *KubernetesAPIApprovalPolicyConformantConditionController) enqueue(obj *apiextensionsv1.CustomResourceDefinition) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231: }",
          "233: func (c *KubernetesAPIApprovalPolicyConformantConditionController) addCustomResourceDefinition(obj interface{}) {",
          "235:  klog.V(4).Infof(\"Adding %s\", castObj.Name)",
          "236:  c.enqueue(castObj)",
          "237: }",
          "239: func (c *KubernetesAPIApprovalPolicyConformantConditionController) updateCustomResourceDefinition(obj, _ interface{}) {",
          "241:  klog.V(4).Infof(\"Updating %s\", castObj.Name)",
          "242:  c.enqueue(castObj)",
          "243: }",
          "245: func (c *KubernetesAPIApprovalPolicyConformantConditionController) deleteCustomResourceDefinition(obj interface{}) {",
          "247:  if !ok {",
          "248:   tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",
          "249:   if !ok {",
          "250:    klog.Errorf(\"Couldn't get object from tombstone %#v\", obj)",
          "251:    return",
          "252:   }",
          "254:   if !ok {",
          "255:    klog.Errorf(\"Tombstone contained object that is not expected %#v\", obj)",
          "256:    return",
          "",
          "[Removed Lines]",
          "234:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "240:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "246:  castObj, ok := obj.(*apiextensions.CustomResourceDefinition)",
          "253:   castObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "234:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "240:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "246:  castObj, ok := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "253:   castObj, ok = tombstone.Obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------"
        ],
        "pkg/controller/apiapproval/apiapproval_controller_test.go||pkg/controller/apiapproval/apiapproval_controller_test.go": [
          "File: pkg/controller/apiapproval/apiapproval_controller_test.go -> pkg/controller/apiapproval/apiapproval_controller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"testing\"",
          "23:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "24: )",
          "26: func TestCalculateCondition(t *testing.T) {",
          "28:   t.Helper()",
          "29:   if condition != nil {",
          "30:    t.Fatal(condition)",
          "31:   }",
          "32:  }",
          "36:    t.Helper()",
          "37:    if condition == nil {",
          "38:     t.Fatal(\"missing condition\")",
          "",
          "[Removed Lines]",
          "22:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "27:  noConditionFn := func(t *testing.T, condition *apiextensions.CustomResourceDefinitionCondition) {",
          "34:  verifyCondition := func(status apiextensions.ConditionStatus, message string) func(t *testing.T, condition *apiextensions.CustomResourceDefinitionCondition) {",
          "35:   return func(t *testing.T, condition *apiextensions.CustomResourceDefinitionCondition) {",
          "",
          "[Added Lines]",
          "22:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "27:  noConditionFn := func(t *testing.T, condition *apiextensionsv1.CustomResourceDefinitionCondition) {",
          "34:  verifyCondition := func(status apiextensionsv1.ConditionStatus, message string) func(t *testing.T, condition *apiextensionsv1.CustomResourceDefinitionCondition) {",
          "35:   return func(t *testing.T, condition *apiextensionsv1.CustomResourceDefinitionCondition) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   group             string",
          "53:   annotationValue   string",
          "55:  }{",
          "56:   {",
          "57:    name:              \"for other group\",",
          "",
          "[Removed Lines]",
          "54:   validateCondition func(t *testing.T, condition *apiextensions.CustomResourceDefinitionCondition)",
          "",
          "[Added Lines]",
          "54:   validateCondition func(t *testing.T, condition *apiextensionsv1.CustomResourceDefinitionCondition)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:    name:              \"missing annotation\",",
          "64:    group:             \"sigs.k8s.io\",",
          "65:    annotationValue:   \"\",",
          "67:   },",
          "68:   {",
          "69:    name:              \"invalid annotation\",",
          "70:    group:             \"sigs.k8s.io\",",
          "71:    annotationValue:   \"bad value\",",
          "73:   },",
          "74:   {",
          "75:    name:              \"approved\",",
          "76:    group:             \"sigs.k8s.io\",",
          "77:    annotationValue:   \"https://github.com/kubernetes/kubernetes/pull/79724\",",
          "79:   },",
          "80:   {",
          "81:    name:              \"unapproved\",",
          "82:    group:             \"sigs.k8s.io\",",
          "83:    annotationValue:   \"unapproved for reasons\",",
          "85:   },",
          "86:  }",
          "88:  for _, test := range tests {",
          "89:   t.Run(test.name, func(t *testing.T) {",
          "93:      Group: test.group,",
          "94:     },",
          "95:    }",
          "",
          "[Removed Lines]",
          "66:    validateCondition: verifyCondition(apiextensions.ConditionFalse, `protected groups must have approval annotation \"api-approved.kubernetes.io\", see https://github.com/kubernetes/enhancements/pull/1111`),",
          "72:    validateCondition: verifyCondition(apiextensions.ConditionFalse, `protected groups must have approval annotation \"api-approved.kubernetes.io\" with either a URL or a reason starting with \"unapproved\", see https://github.com/kubernetes/enhancements/pull/1111`),",
          "78:    validateCondition: verifyCondition(apiextensions.ConditionTrue, `approved in https://github.com/kubernetes/kubernetes/pull/79724`),",
          "84:    validateCondition: verifyCondition(apiextensions.ConditionFalse, `not approved: \"unapproved for reasons\"`),",
          "90:    crd := &apiextensions.CustomResourceDefinition{",
          "91:     ObjectMeta: metav1.ObjectMeta{Name: \"foo\", Annotations: map[string]string{apiextensions.KubeAPIApprovedAnnotation: test.annotationValue}},",
          "92:     Spec: apiextensions.CustomResourceDefinitionSpec{",
          "",
          "[Added Lines]",
          "66:    validateCondition: verifyCondition(apiextensionsv1.ConditionFalse, `protected groups must have approval annotation \"api-approved.kubernetes.io\", see https://github.com/kubernetes/enhancements/pull/1111`),",
          "72:    validateCondition: verifyCondition(apiextensionsv1.ConditionFalse, `protected groups must have approval annotation \"api-approved.kubernetes.io\" with either a URL or a reason starting with \"unapproved\", see https://github.com/kubernetes/enhancements/pull/1111`),",
          "78:    validateCondition: verifyCondition(apiextensionsv1.ConditionTrue, `approved in https://github.com/kubernetes/kubernetes/pull/79724`),",
          "84:    validateCondition: verifyCondition(apiextensionsv1.ConditionFalse, `not approved: \"unapproved for reasons\"`),",
          "90:    crd := &apiextensionsv1.CustomResourceDefinition{",
          "91:     ObjectMeta: metav1.ObjectMeta{Name: \"foo\", Annotations: map[string]string{apiextensionsv1.KubeAPIApprovedAnnotation: test.annotationValue}},",
          "92:     Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "",
          "---------------"
        ],
        "pkg/controller/establish/establishing_controller.go||pkg/controller/establish/establishing_controller.go": [
          "File: pkg/controller/establish/establishing_controller.go -> pkg/controller/establish/establishing_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  \"k8s.io/klog\"",
          "30:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "32:  client \"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1\"",
          "33:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "34:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "",
          "[Removed Lines]",
          "31:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "31:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   return err",
          "121:  }",
          "125:   return nil",
          "126:  }",
          "128:  crd := cachedCRD.DeepCopy()",
          "132:   Reason:  \"InitialNamesAccepted\",",
          "133:   Message: \"the initial names have been accepted\",",
          "134:  }",
          "",
          "[Removed Lines]",
          "123:  if !apiextensionshelpers.IsCRDConditionTrue(cachedCRD, apiextensions.NamesAccepted) ||",
          "124:   apiextensionshelpers.IsCRDConditionTrue(cachedCRD, apiextensions.Established) {",
          "129:  establishedCondition := apiextensions.CustomResourceDefinitionCondition{",
          "130:   Type:    apiextensions.Established,",
          "131:   Status:  apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "123:  if !apiextensionshelpers.IsCRDConditionTrue(cachedCRD, apiextensionsv1.NamesAccepted) ||",
          "124:   apiextensionshelpers.IsCRDConditionTrue(cachedCRD, apiextensionsv1.Established) {",
          "129:  establishedCondition := apiextensionsv1.CustomResourceDefinitionCondition{",
          "130:   Type:    apiextensionsv1.Established,",
          "131:   Status:  apiextensionsv1.ConditionTrue,",
          "",
          "---------------"
        ],
        "pkg/controller/finalizer/crd_finalizer.go||pkg/controller/finalizer/crd_finalizer.go": [
          "File: pkg/controller/finalizer/crd_finalizer.go -> pkg/controller/finalizer/crd_finalizer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  \"k8s.io/client-go/util/workqueue\"",
          "39:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "41:  client \"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1\"",
          "42:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "43:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "",
          "[Removed Lines]",
          "40:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "40:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: type CRClientGetter interface {",
          "81: }",
          "",
          "[Removed Lines]",
          "80:  GetCustomResourceListerCollectionDeleter(crd *apiextensions.CustomResourceDefinition) (ListerCollectionDeleter, error)",
          "",
          "[Added Lines]",
          "80:  GetCustomResourceListerCollectionDeleter(crd *apiextensionsv1.CustomResourceDefinition) (ListerCollectionDeleter, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:  }",
          "118:   return nil",
          "119:  }",
          "121:  crd := cachedCRD.DeepCopy()",
          "127:   Reason:  \"InstanceDeletionInProgress\",",
          "128:   Message: \"CustomResource deletion is in progress\",",
          "129:  })",
          "",
          "[Removed Lines]",
          "117:  if cachedCRD.DeletionTimestamp.IsZero() || !apiextensionshelpers.CRDHasFinalizer(cachedCRD, apiextensions.CustomResourceCleanupFinalizer) {",
          "124:  apiextensionshelpers.SetCRDCondition(crd, apiextensions.CustomResourceDefinitionCondition{",
          "125:   Type:    apiextensions.Terminating,",
          "126:   Status:  apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "117:  if cachedCRD.DeletionTimestamp.IsZero() || !apiextensionshelpers.CRDHasFinalizer(cachedCRD, apiextensionsv1.CustomResourceCleanupFinalizer) {",
          "124:  apiextensionshelpers.SetCRDCondition(crd, apiextensionsv1.CustomResourceDefinitionCondition{",
          "125:   Type:    apiextensionsv1.Terminating,",
          "126:   Status:  apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:  if OverlappingBuiltInResources()[schema.GroupResource{Group: crd.Spec.Group, Resource: crd.Spec.Names.Plural}] {",
          "146:    Reason:  \"OverlappingBuiltInResource\",",
          "147:    Message: \"instances overlap with built-in resources in storage\",",
          "148:   })",
          "150:   cond, deleteErr := c.deleteInstances(crd)",
          "151:   apiextensionshelpers.SetCRDCondition(crd, cond)",
          "152:   if deleteErr != nil {",
          "",
          "[Removed Lines]",
          "143:   apiextensionshelpers.SetCRDCondition(crd, apiextensions.CustomResourceDefinitionCondition{",
          "144:    Type:    apiextensions.Terminating,",
          "145:    Status:  apiextensions.ConditionFalse,",
          "149:  } else if apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Established) {",
          "",
          "[Added Lines]",
          "143:   apiextensionshelpers.SetCRDCondition(crd, apiextensionsv1.CustomResourceDefinitionCondition{",
          "144:    Type:    apiextensionsv1.Terminating,",
          "145:    Status:  apiextensionsv1.ConditionFalse,",
          "149:  } else if apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Established) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:    return deleteErr",
          "157:   }",
          "158:  } else {",
          "162:    Reason:  \"NeverEstablished\",",
          "163:    Message: \"resource was never established\",",
          "164:   })",
          "165:  }",
          "168:  _, err = c.crdClient.CustomResourceDefinitions().UpdateStatus(crd)",
          "169:  if apierrors.IsNotFound(err) || apierrors.IsConflict(err) {",
          "",
          "[Removed Lines]",
          "159:   apiextensionshelpers.SetCRDCondition(crd, apiextensions.CustomResourceDefinitionCondition{",
          "160:    Type:    apiextensions.Terminating,",
          "161:    Status:  apiextensions.ConditionFalse,",
          "167:  apiextensionshelpers.CRDRemoveFinalizer(crd, apiextensions.CustomResourceCleanupFinalizer)",
          "",
          "[Added Lines]",
          "159:   apiextensionshelpers.SetCRDCondition(crd, apiextensionsv1.CustomResourceDefinitionCondition{",
          "160:    Type:    apiextensionsv1.Terminating,",
          "161:    Status:  apiextensionsv1.ConditionFalse,",
          "167:  apiextensionshelpers.CRDRemoveFinalizer(crd, apiextensionsv1.CustomResourceCleanupFinalizer)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "173:  return err",
          "174: }",
          "180:  crClient, err := c.crClientGetter.GetCustomResourceListerCollectionDeleter(crd)",
          "181:  if err != nil {",
          "182:   err = fmt.Errorf(\"unable to find a custom resource client for %s.%s: %v\", crd.Status.AcceptedNames.Plural, crd.Spec.Group, err)",
          "186:    Reason:  \"InstanceDeletionFailed\",",
          "187:    Message: fmt.Sprintf(\"could not list instances: %v\", err),",
          "188:   }, err",
          "",
          "[Removed Lines]",
          "176: func (c *CRDFinalizer) deleteInstances(crd *apiextensions.CustomResourceDefinition) (apiextensions.CustomResourceDefinitionCondition, error) {",
          "183:   return apiextensions.CustomResourceDefinitionCondition{",
          "184:    Type:    apiextensions.Terminating,",
          "185:    Status:  apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "176: func (c *CRDFinalizer) deleteInstances(crd *apiextensionsv1.CustomResourceDefinition) (apiextensionsv1.CustomResourceDefinitionCondition, error) {",
          "183:   return apiextensionsv1.CustomResourceDefinitionCondition{",
          "184:    Type:    apiextensionsv1.Terminating,",
          "185:    Status:  apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:  ctx := genericapirequest.NewContext()",
          "192:  allResources, err := crClient.List(ctx, nil)",
          "193:  if err != nil {",
          "197:    Reason:  \"InstanceDeletionFailed\",",
          "198:    Message: fmt.Sprintf(\"could not list instances: %v\", err),",
          "199:   }, err",
          "",
          "[Removed Lines]",
          "194:   return apiextensions.CustomResourceDefinitionCondition{",
          "195:    Type:    apiextensions.Terminating,",
          "196:    Status:  apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "194:   return apiextensionsv1.CustomResourceDefinitionCondition{",
          "195:    Type:    apiextensionsv1.Terminating,",
          "196:    Status:  apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:   }",
          "220:  }",
          "221:  if deleteError := utilerrors.NewAggregate(deleteErrors); deleteError != nil {",
          "225:    Reason:  \"InstanceDeletionFailed\",",
          "226:    Message: fmt.Sprintf(\"could not issue all deletes: %v\", deleteError),",
          "227:   }, deleteError",
          "",
          "[Removed Lines]",
          "222:   return apiextensions.CustomResourceDefinitionCondition{",
          "223:    Type:    apiextensions.Terminating,",
          "224:    Status:  apiextensions.ConditionTrue,",
          "",
          "[Added Lines]",
          "222:   return apiextensionsv1.CustomResourceDefinitionCondition{",
          "223:    Type:    apiextensionsv1.Terminating,",
          "224:    Status:  apiextensionsv1.ConditionTrue,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "242:   return false, nil",
          "243:  })",
          "244:  if err != nil {",
          "248:    Reason:  \"InstanceDeletionCheck\",",
          "249:    Message: fmt.Sprintf(\"could not confirm zero CustomResources remaining: %v\", err),",
          "250:   }, err",
          "251:  }",
          "255:   Reason:  \"InstanceDeletionCompleted\",",
          "256:   Message: \"removed all instances\",",
          "257:  }, nil",
          "",
          "[Removed Lines]",
          "245:   return apiextensions.CustomResourceDefinitionCondition{",
          "246:    Type:    apiextensions.Terminating,",
          "247:    Status:  apiextensions.ConditionTrue,",
          "252:  return apiextensions.CustomResourceDefinitionCondition{",
          "253:   Type:    apiextensions.Terminating,",
          "254:   Status:  apiextensions.ConditionFalse,",
          "",
          "[Added Lines]",
          "245:   return apiextensionsv1.CustomResourceDefinitionCondition{",
          "246:    Type:    apiextensionsv1.Terminating,",
          "247:    Status:  apiextensionsv1.ConditionTrue,",
          "252:  return apiextensionsv1.CustomResourceDefinitionCondition{",
          "253:   Type:    apiextensionsv1.Terminating,",
          "254:   Status:  apiextensionsv1.ConditionFalse,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "300:  return true",
          "301: }",
          "304:  key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)",
          "305:  if err != nil {",
          "306:   utilruntime.HandleError(fmt.Errorf(\"couldn't get key for object %#v: %v\", obj, err))",
          "",
          "[Removed Lines]",
          "303: func (c *CRDFinalizer) enqueue(obj *apiextensions.CustomResourceDefinition) {",
          "",
          "[Added Lines]",
          "303: func (c *CRDFinalizer) enqueue(obj *apiextensionsv1.CustomResourceDefinition) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311: }",
          "313: func (c *CRDFinalizer) addCustomResourceDefinition(obj interface{}) {",
          "317:   c.enqueue(castObj)",
          "318:  }",
          "319: }",
          "321: func (c *CRDFinalizer) updateCustomResourceDefinition(oldObj, newObj interface{}) {",
          "326:   return",
          "327:  }",
          "",
          "[Removed Lines]",
          "314:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "316:  if !castObj.DeletionTimestamp.IsZero() && apiextensionshelpers.CRDHasFinalizer(castObj, apiextensions.CustomResourceCleanupFinalizer) {",
          "322:  oldCRD := oldObj.(*apiextensions.CustomResourceDefinition)",
          "323:  newCRD := newObj.(*apiextensions.CustomResourceDefinition)",
          "325:  if newCRD.DeletionTimestamp.IsZero() || !apiextensionshelpers.CRDHasFinalizer(newCRD, apiextensions.CustomResourceCleanupFinalizer) {",
          "",
          "[Added Lines]",
          "314:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "316:  if !castObj.DeletionTimestamp.IsZero() && apiextensionshelpers.CRDHasFinalizer(castObj, apiextensionsv1.CustomResourceCleanupFinalizer) {",
          "322:  oldCRD := oldObj.(*apiextensionsv1.CustomResourceDefinition)",
          "323:  newCRD := newObj.(*apiextensionsv1.CustomResourceDefinition)",
          "325:  if newCRD.DeletionTimestamp.IsZero() || !apiextensionshelpers.CRDHasFinalizer(newCRD, apiextensionsv1.CustomResourceCleanupFinalizer) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "340:  newCopy := newCRD.DeepCopy()",
          "341:  oldCopy.ResourceVersion = \"\"",
          "342:  newCopy.ResourceVersion = \"\"",
          "346:  if !reflect.DeepEqual(oldCopy, newCopy) {",
          "347:   c.enqueue(newCRD)",
          "",
          "[Removed Lines]",
          "343:  apiextensionshelpers.RemoveCRDCondition(oldCopy, apiextensions.Terminating)",
          "344:  apiextensionshelpers.RemoveCRDCondition(newCopy, apiextensions.Terminating)",
          "",
          "[Added Lines]",
          "343:  apiextensionshelpers.RemoveCRDCondition(oldCopy, apiextensionsv1.Terminating)",
          "344:  apiextensionshelpers.RemoveCRDCondition(newCopy, apiextensionsv1.Terminating)",
          "",
          "---------------"
        ],
        "pkg/controller/nonstructuralschema/nonstructuralschema_controller.go||pkg/controller/nonstructuralschema/nonstructuralschema_controller.go": [
          "File: pkg/controller/nonstructuralschema/nonstructuralschema_controller.go -> pkg/controller/nonstructuralschema/nonstructuralschema_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "34:  apiextensionsinternal \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions\"",
          "36:  \"k8s.io/apiextensions-apiserver/pkg/apiserver/schema\"",
          "37:  client \"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1\"",
          "38:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "",
          "[Removed Lines]",
          "35:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "35:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  return c",
          "82: }",
          "88:  }",
          "90:  allErrs := field.ErrorList{}",
          "",
          "[Removed Lines]",
          "84: func calculateCondition(in *apiextensions.CustomResourceDefinition) *apiextensions.CustomResourceDefinitionCondition {",
          "85:  cond := &apiextensions.CustomResourceDefinitionCondition{",
          "86:   Type:   apiextensions.NonStructuralSchema,",
          "87:   Status: apiextensions.ConditionUnknown,",
          "",
          "[Added Lines]",
          "84: func calculateCondition(in *apiextensionsv1.CustomResourceDefinition) *apiextensionsv1.CustomResourceDefinitionCondition {",
          "85:  cond := &apiextensionsv1.CustomResourceDefinitionCondition{",
          "86:   Type:   apiextensionsv1.NonStructuralSchema,",
          "87:   Status: apiextensionsv1.ConditionUnknown,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   }",
          "97:   internalSchema := &apiextensionsinternal.CustomResourceValidation{}",
          "99:    klog.Errorf(\"failed to convert CRD validation to internal version: %v\", err)",
          "100:    continue",
          "101:   }",
          "",
          "[Removed Lines]",
          "98:   if err := apiextensions.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(v.Schema, internalSchema, nil); err != nil {",
          "",
          "[Added Lines]",
          "98:   if err := apiextensionsv1.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(v.Schema, internalSchema, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:   return nil",
          "116:  }",
          "119:  cond.Reason = \"Violations\"",
          "120:  cond.Message = allErrs.ToAggregate().Error()",
          "",
          "[Removed Lines]",
          "118:  cond.Status = apiextensions.ConditionTrue",
          "",
          "[Added Lines]",
          "118:  cond.Status = apiextensionsv1.ConditionTrue",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:  cond := calculateCondition(inCustomResourceDefinition)",
          "146:  if cond == nil && old == nil {",
          "147:   return nil",
          "",
          "[Removed Lines]",
          "144:  old := apiextensionshelpers.FindCRDCondition(inCustomResourceDefinition, apiextensions.NonStructuralSchema)",
          "",
          "[Added Lines]",
          "144:  old := apiextensionshelpers.FindCRDCondition(inCustomResourceDefinition, apiextensionsv1.NonStructuralSchema)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:  crd := inCustomResourceDefinition.DeepCopy()",
          "155:  if cond == nil {",
          "157:  } else {",
          "158:   cond.LastTransitionTime = metav1.NewTime(time.Now())",
          "159:   apiextensionshelpers.SetCRDCondition(crd, *cond)",
          "",
          "[Removed Lines]",
          "156:   apiextensionshelpers.RemoveCRDCondition(crd, apiextensions.NonStructuralSchema)",
          "",
          "[Added Lines]",
          "156:   apiextensionshelpers.RemoveCRDCondition(crd, apiextensionsv1.NonStructuralSchema)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:  return true",
          "222: }",
          "225:  key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)",
          "226:  if err != nil {",
          "227:   utilruntime.HandleError(fmt.Errorf(\"couldn't get key for object %#v: %v\", obj, err))",
          "",
          "[Removed Lines]",
          "224: func (c *ConditionController) enqueue(obj *apiextensions.CustomResourceDefinition) {",
          "",
          "[Added Lines]",
          "224: func (c *ConditionController) enqueue(obj *apiextensionsv1.CustomResourceDefinition) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "232: }",
          "234: func (c *ConditionController) addCustomResourceDefinition(obj interface{}) {",
          "236:  klog.V(4).Infof(\"Adding %s\", castObj.Name)",
          "237:  c.enqueue(castObj)",
          "238: }",
          "240: func (c *ConditionController) updateCustomResourceDefinition(obj, _ interface{}) {",
          "242:  klog.V(4).Infof(\"Updating %s\", castObj.Name)",
          "243:  c.enqueue(castObj)",
          "244: }",
          "246: func (c *ConditionController) deleteCustomResourceDefinition(obj interface{}) {",
          "248:  if !ok {",
          "249:   tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",
          "250:   if !ok {",
          "251:    klog.Errorf(\"Couldn't get object from tombstone %#v\", obj)",
          "252:    return",
          "253:   }",
          "255:   if !ok {",
          "256:    klog.Errorf(\"Tombstone contained object that is not expected %#v\", obj)",
          "257:    return",
          "",
          "[Removed Lines]",
          "235:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "241:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "247:  castObj, ok := obj.(*apiextensions.CustomResourceDefinition)",
          "254:   castObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "235:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "241:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "247:  castObj, ok := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "254:   castObj, ok = tombstone.Obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------"
        ],
        "pkg/controller/openapi/builder/builder.go||pkg/controller/openapi/builder/builder.go": [
          "File: pkg/controller/openapi/builder/builder.go -> pkg/controller/openapi/builder/builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  v1 \"k8s.io/api/autoscaling/v1\"",
          "29:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "30:  apiextensionsinternal \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions\"",
          "32:  \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/validation\"",
          "33:  structuralschema \"k8s.io/apiextensions-apiserver/pkg/apiserver/schema\"",
          "34:  openapiv2 \"k8s.io/apiextensions-apiserver/pkg/controller/openapi/v2\"",
          "",
          "[Removed Lines]",
          "31:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "31:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: }",
          "90:  var schema *structuralschema.Structural",
          "91:  s, err := apiextensionshelpers.GetSchemaForVersion(crd, version)",
          "92:  if err != nil {",
          "",
          "[Removed Lines]",
          "89: func BuildSwagger(crd *apiextensions.CustomResourceDefinition, version string, opts Options) (*spec.Swagger, error) {",
          "",
          "[Added Lines]",
          "89: func BuildSwagger(crd *apiextensionsv1.CustomResourceDefinition, version string, opts Options) (*spec.Swagger, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:  if s != nil && s.OpenAPIV3Schema != nil {",
          "97:   internalCRDSchema := &apiextensionsinternal.CustomResourceValidation{}",
          "99:    return nil, fmt.Errorf(\"failed converting CRD validation to internal version: %v\", err)",
          "100:   }",
          "101:   if !validation.SchemaHasInvalidTypes(internalCRDSchema.OpenAPIV3Schema) {",
          "",
          "[Removed Lines]",
          "98:   if err := apiextensions.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(s, internalCRDSchema, nil); err != nil {",
          "",
          "[Added Lines]",
          "98:   if err := apiextensionsv1.Convert_v1_CustomResourceValidation_To_apiextensions_CustomResourceValidation(s, internalCRDSchema, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504:  }",
          "505: }",
          "508:  b := &builder{",
          "509:   schema: &spec.Schema{",
          "510:    SchemaProps: spec.SchemaProps{Type: []string{\"object\"}},",
          "",
          "[Removed Lines]",
          "507: func newBuilder(crd *apiextensions.CustomResourceDefinition, version string, schema *structuralschema.Structural, v2 bool) *builder {",
          "",
          "[Added Lines]",
          "507: func newBuilder(crd *apiextensionsv1.CustomResourceDefinition, version string, schema *structuralschema.Structural, v2 bool) *builder {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "518:   listKind: crd.Spec.Names.ListKind,",
          "519:   plural:   crd.Spec.Names.Plural,",
          "520:  }",
          "522:   b.namespaced = true",
          "523:  }",
          "",
          "[Removed Lines]",
          "521:  if crd.Spec.Scope == apiextensions.NamespaceScoped {",
          "",
          "[Added Lines]",
          "521:  if crd.Spec.Scope == apiextensionsv1.NamespaceScoped {",
          "",
          "---------------"
        ],
        "pkg/controller/openapi/builder/builder_test.go||pkg/controller/openapi/builder/builder_test.go": [
          "File: pkg/controller/openapi/builder/builder_test.go -> pkg/controller/openapi/builder/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"github.com/stretchr/testify/require\"",
          "27:  apiextensionsinternal \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions\"",
          "29:  structuralschema \"k8s.io/apiextensions-apiserver/pkg/apiserver/schema\"",
          "30:  \"k8s.io/apimachinery/pkg/util/diff\"",
          "31:  \"k8s.io/apimachinery/pkg/util/json\"",
          "",
          "[Removed Lines]",
          "28:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "28:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:   t.Run(tt.name, func(t *testing.T) {",
          "353:    var schema *structuralschema.Structural",
          "354:    if len(tt.schema) > 0 {",
          "356:     if err := json.Unmarshal([]byte(tt.schema), &v1beta1Schema); err != nil {",
          "357:      t.Fatal(err)",
          "358:     }",
          "359:     internalSchema := &apiextensionsinternal.JSONSchemaProps{}",
          "361:     var err error",
          "362:     schema, err = structuralschema.NewStructural(internalSchema)",
          "363:     if err != nil {",
          "",
          "[Removed Lines]",
          "355:     v1beta1Schema := &apiextensions.JSONSchemaProps{}",
          "360:     apiextensions.Convert_v1_JSONSchemaProps_To_apiextensions_JSONSchemaProps(v1beta1Schema, internalSchema, nil)",
          "",
          "[Added Lines]",
          "355:     v1beta1Schema := &apiextensionsv1.JSONSchemaProps{}",
          "360:     apiextensionsv1.Convert_v1_JSONSchemaProps_To_apiextensions_JSONSchemaProps(v1beta1Schema, internalSchema, nil)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     schema = schema.Unfold()",
          "370:    }",
          "374:      Group: \"bar.k8s.io\",",
          "376:       {",
          "377:        Name: \"v1\",",
          "378:       },",
          "379:      },",
          "381:       Plural:   \"foos\",",
          "382:       Singular: \"foo\",",
          "383:       Kind:     \"Foo\",",
          "384:       ListKind: \"FooList\",",
          "385:      },",
          "387:     },",
          "388:    }, \"v1\", schema, tt.v2)",
          "",
          "[Removed Lines]",
          "372:    got := newBuilder(&apiextensions.CustomResourceDefinition{",
          "373:     Spec: apiextensions.CustomResourceDefinitionSpec{",
          "375:      Versions: []apiextensions.CustomResourceDefinitionVersion{",
          "380:      Names: apiextensions.CustomResourceDefinitionNames{",
          "386:      Scope: apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "372:    got := newBuilder(&apiextensionsv1.CustomResourceDefinition{",
          "373:     Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "375:      Versions: []apiextensionsv1.CustomResourceDefinitionVersion{",
          "380:      Names: apiextensionsv1.CustomResourceDefinitionNames{",
          "386:      Scope: apiextensionsv1.NamespaceScoped,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:  testCRDResourceName := \"foos\"",
          "436:  testCases := []struct {",
          "438:   paths map[string]struct {",
          "439:    expectNamespaceParam bool",
          "440:    expectNameParam      bool",
          "",
          "[Removed Lines]",
          "437:   scope apiextensions.ResourceScope",
          "",
          "[Added Lines]",
          "437:   scope apiextensionsv1.ResourceScope",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "442:   }",
          "443:  }{",
          "444:   {",
          "446:    paths: map[string]struct {",
          "447:     expectNamespaceParam bool",
          "448:     expectNameParam      bool",
          "",
          "[Removed Lines]",
          "445:    scope: apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "445:    scope: apiextensionsv1.NamespaceScoped,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "456:    },",
          "457:   },",
          "458:   {",
          "460:    paths: map[string]struct {",
          "461:     expectNamespaceParam bool",
          "462:     expectNameParam      bool",
          "",
          "[Removed Lines]",
          "459:    scope: apiextensions.ClusterScoped,",
          "",
          "[Added Lines]",
          "459:    scope: apiextensionsv1.ClusterScoped,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "471:  }",
          "473:  for _, testCase := range testCases {",
          "476:     Scope: testCase.scope,",
          "477:     Group: testCRDGroup,",
          "479:      Kind:   testCRDKind,",
          "480:      Plural: testCRDResourceName,",
          "481:     },",
          "483:      {",
          "484:       Name: testCRDVersion,",
          "488:       },",
          "489:      },",
          "490:     },",
          "",
          "[Removed Lines]",
          "474:   testNamespacedCRD := &apiextensions.CustomResourceDefinition{",
          "475:    Spec: apiextensions.CustomResourceDefinitionSpec{",
          "478:     Names: apiextensions.CustomResourceDefinitionNames{",
          "482:     Versions: []apiextensions.CustomResourceDefinitionVersion{",
          "485:       Subresources: &apiextensions.CustomResourceSubresources{",
          "486:        Status: &apiextensions.CustomResourceSubresourceStatus{},",
          "487:        Scale:  &apiextensions.CustomResourceSubresourceScale{},",
          "",
          "[Added Lines]",
          "474:   testNamespacedCRD := &apiextensionsv1.CustomResourceDefinition{",
          "475:    Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "478:     Names: apiextensionsv1.CustomResourceDefinitionNames{",
          "482:     Versions: []apiextensionsv1.CustomResourceDefinitionVersion{",
          "485:       Subresources: &apiextensionsv1.CustomResourceSubresources{",
          "486:        Status: &apiextensionsv1.CustomResourceSubresourceStatus{},",
          "487:        Scale:  &apiextensionsv1.CustomResourceSubresourceScale{},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "631:  }",
          "632:  for _, tt := range tests {",
          "633:   t.Run(tt.name, func(t *testing.T) {",
          "635:    if len(tt.schema) > 0 {",
          "637:     if err := json.Unmarshal([]byte(tt.schema), &v1Schema); err != nil {",
          "638:      t.Fatal(err)",
          "639:     }",
          "641:      OpenAPIV3Schema: v1Schema,",
          "642:     }",
          "643:    }",
          "",
          "[Removed Lines]",
          "634:    var validation *apiextensions.CustomResourceValidation",
          "636:     v1Schema := &apiextensions.JSONSchemaProps{}",
          "640:     validation = &apiextensions.CustomResourceValidation{",
          "",
          "[Added Lines]",
          "634:    var validation *apiextensionsv1.CustomResourceValidation",
          "636:     v1Schema := &apiextensionsv1.JSONSchemaProps{}",
          "640:     validation = &apiextensionsv1.CustomResourceValidation{",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "646:    }",
          "651:      Group: \"bar.k8s.io\",",
          "653:       {",
          "654:        Name:   \"v1\",",
          "655:        Schema: validation,",
          "656:       },",
          "657:      },",
          "659:       Plural:   \"foos\",",
          "660:       Singular: \"foo\",",
          "661:       Kind:     \"Foo\",",
          "662:       ListKind: \"FooList\",",
          "663:      },",
          "665:     },",
          "666:    }, \"v1\", tt.opts)",
          "667:    if err != nil {",
          "",
          "[Removed Lines]",
          "649:    got, err := BuildSwagger(&apiextensions.CustomResourceDefinition{",
          "650:     Spec: apiextensions.CustomResourceDefinitionSpec{",
          "652:      Versions: []apiextensions.CustomResourceDefinitionVersion{",
          "658:      Names: apiextensions.CustomResourceDefinitionNames{",
          "664:      Scope: apiextensions.NamespaceScoped,",
          "",
          "[Added Lines]",
          "649:    got, err := BuildSwagger(&apiextensionsv1.CustomResourceDefinition{",
          "650:     Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "652:      Versions: []apiextensionsv1.CustomResourceDefinitionVersion{",
          "658:      Names: apiextensionsv1.CustomResourceDefinitionNames{",
          "664:      Scope: apiextensionsv1.NamespaceScoped,",
          "",
          "---------------"
        ],
        "pkg/controller/openapi/controller.go||pkg/controller/openapi/controller.go": [
          "File: pkg/controller/openapi/controller.go -> pkg/controller/openapi/controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  \"k8s.io/kube-openapi/pkg/handler\"",
          "36:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "38:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "39:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "40:  \"k8s.io/apiextensions-apiserver/pkg/controller/openapi/builder\"",
          "",
          "[Removed Lines]",
          "37:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "37:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   return",
          "101:  }",
          "102:  for _, crd := range crds {",
          "104:    continue",
          "105:   }",
          "106:   newSpecs, changed, err := buildVersionSpecs(crd, nil)",
          "",
          "[Removed Lines]",
          "103:   if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Established) {",
          "",
          "[Added Lines]",
          "103:   if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Established) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:  }",
          "168:   if _, found := c.crdSpecs[name]; !found {",
          "169:    return nil",
          "170:   }",
          "",
          "[Removed Lines]",
          "167:  if errors.IsNotFound(err) || !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensions.Established) {",
          "",
          "[Added Lines]",
          "167:  if errors.IsNotFound(err) || !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Established) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:  return c.updateSpecLocked()",
          "196: }",
          "199:  newSpecs := map[string]*spec.Swagger{}",
          "200:  anyChanged := false",
          "201:  for _, v := range crd.Spec.Versions {",
          "",
          "[Removed Lines]",
          "198: func buildVersionSpecs(crd *apiextensions.CustomResourceDefinition, oldSpecs map[string]*spec.Swagger) (map[string]*spec.Swagger, bool, error) {",
          "",
          "[Added Lines]",
          "198: func buildVersionSpecs(crd *apiextensionsv1.CustomResourceDefinition, oldSpecs map[string]*spec.Swagger) (map[string]*spec.Swagger, bool, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235: }",
          "237: func (c *Controller) addCustomResourceDefinition(obj interface{}) {",
          "239:  klog.V(4).Infof(\"Adding customresourcedefinition %s\", castObj.Name)",
          "240:  c.enqueue(castObj)",
          "241: }",
          "243: func (c *Controller) updateCustomResourceDefinition(oldObj, newObj interface{}) {",
          "245:  klog.V(4).Infof(\"Updating customresourcedefinition %s\", castNewObj.Name)",
          "246:  c.enqueue(castNewObj)",
          "247: }",
          "249: func (c *Controller) deleteCustomResourceDefinition(obj interface{}) {",
          "251:  if !ok {",
          "252:   tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",
          "253:   if !ok {",
          "254:    klog.Errorf(\"Couldn't get object from tombstone %#v\", obj)",
          "255:    return",
          "256:   }",
          "258:   if !ok {",
          "259:    klog.Errorf(\"Tombstone contained object that is not expected %#v\", obj)",
          "260:    return",
          "",
          "[Removed Lines]",
          "238:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "244:  castNewObj := newObj.(*apiextensions.CustomResourceDefinition)",
          "250:  castObj, ok := obj.(*apiextensions.CustomResourceDefinition)",
          "257:   castObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "238:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "244:  castNewObj := newObj.(*apiextensionsv1.CustomResourceDefinition)",
          "250:  castObj, ok := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "257:   castObj, ok = tombstone.Obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:  c.enqueue(castObj)",
          "265: }",
          "268:  c.queue.Add(obj.Name)",
          "269: }",
          "",
          "[Removed Lines]",
          "267: func (c *Controller) enqueue(obj *apiextensions.CustomResourceDefinition) {",
          "",
          "[Added Lines]",
          "267: func (c *Controller) enqueue(obj *apiextensionsv1.CustomResourceDefinition) {",
          "",
          "---------------"
        ],
        "pkg/controller/status/naming_controller.go||pkg/controller/status/naming_controller.go": [
          "File: pkg/controller/status/naming_controller.go -> pkg/controller/status/naming_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  \"k8s.io/client-go/util/workqueue\"",
          "37:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "39:  client \"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1\"",
          "40:  informers \"k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions/apiextensions/v1\"",
          "41:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "",
          "[Removed Lines]",
          "38:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "38:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   item := curr",
          "105:   obj, exists, err := c.crdMutationCache.GetByKey(curr.Name)",
          "106:   if exists && err == nil {",
          "108:   }",
          "110:   allResources.Insert(item.Status.AcceptedNames.Plural)",
          "",
          "[Removed Lines]",
          "107:    item = obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "107:    item = obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:  return allResources, allKinds",
          "119: }",
          "123:  allResources, allKinds := c.getAcceptedNamesForGroup(in.Spec.Group)",
          "128:  }",
          "130:  requestedNames := in.Spec.Names",
          "",
          "[Removed Lines]",
          "121: func (c *NamingConditionController) calculateNamesAndConditions(in *apiextensions.CustomResourceDefinition) (apiextensions.CustomResourceDefinitionNames, apiextensions.CustomResourceDefinitionCondition, apiextensions.CustomResourceDefinitionCondition) {",
          "125:  namesAcceptedCondition := apiextensions.CustomResourceDefinitionCondition{",
          "126:   Type:   apiextensions.NamesAccepted,",
          "127:   Status: apiextensions.ConditionUnknown,",
          "",
          "[Added Lines]",
          "121: func (c *NamingConditionController) calculateNamesAndConditions(in *apiextensionsv1.CustomResourceDefinition) (apiextensionsv1.CustomResourceDefinitionNames, apiextensionsv1.CustomResourceDefinitionCondition, apiextensionsv1.CustomResourceDefinitionCondition) {",
          "125:  namesAcceptedCondition := apiextensionsv1.CustomResourceDefinitionCondition{",
          "126:   Type:   apiextensionsv1.NamesAccepted,",
          "127:   Status: apiextensionsv1.ConditionUnknown,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:  if err := equalToAcceptedOrFresh(requestedNames.Plural, acceptedNames.Plural, allResources); err != nil {",
          "138:   namesAcceptedCondition.Reason = \"PluralConflict\"",
          "139:   namesAcceptedCondition.Message = err.Error()",
          "140:  } else {",
          "141:   newNames.Plural = requestedNames.Plural",
          "142:  }",
          "143:  if err := equalToAcceptedOrFresh(requestedNames.Singular, acceptedNames.Singular, allResources); err != nil {",
          "145:   namesAcceptedCondition.Reason = \"SingularConflict\"",
          "146:   namesAcceptedCondition.Message = err.Error()",
          "147:  } else {",
          "",
          "[Removed Lines]",
          "137:   namesAcceptedCondition.Status = apiextensions.ConditionFalse",
          "144:   namesAcceptedCondition.Status = apiextensions.ConditionFalse",
          "",
          "[Added Lines]",
          "137:   namesAcceptedCondition.Status = apiextensionsv1.ConditionFalse",
          "144:   namesAcceptedCondition.Status = apiextensionsv1.ConditionFalse",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:   }",
          "163:   if err := utilerrors.NewAggregate(errs); err != nil {",
          "165:    namesAcceptedCondition.Reason = \"ShortNamesConflict\"",
          "166:    namesAcceptedCondition.Message = err.Error()",
          "167:   } else {",
          "",
          "[Removed Lines]",
          "164:    namesAcceptedCondition.Status = apiextensions.ConditionFalse",
          "",
          "[Added Lines]",
          "164:    namesAcceptedCondition.Status = apiextensionsv1.ConditionFalse",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:  }",
          "172:  if err := equalToAcceptedOrFresh(requestedNames.Kind, acceptedNames.Kind, allKinds); err != nil {",
          "174:   namesAcceptedCondition.Reason = \"KindConflict\"",
          "175:   namesAcceptedCondition.Message = err.Error()",
          "176:  } else {",
          "177:   newNames.Kind = requestedNames.Kind",
          "178:  }",
          "179:  if err := equalToAcceptedOrFresh(requestedNames.ListKind, acceptedNames.ListKind, allKinds); err != nil {",
          "181:   namesAcceptedCondition.Reason = \"ListKindConflict\"",
          "182:   namesAcceptedCondition.Message = err.Error()",
          "183:  } else {",
          "",
          "[Removed Lines]",
          "173:   namesAcceptedCondition.Status = apiextensions.ConditionFalse",
          "180:   namesAcceptedCondition.Status = apiextensions.ConditionFalse",
          "",
          "[Added Lines]",
          "173:   namesAcceptedCondition.Status = apiextensionsv1.ConditionFalse",
          "180:   namesAcceptedCondition.Status = apiextensionsv1.ConditionFalse",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:  newNames.Categories = requestedNames.Categories",
          "192:   namesAcceptedCondition.Reason = \"NoConflicts\"",
          "193:   namesAcceptedCondition.Message = \"no conflicts found\"",
          "194:  }",
          "",
          "[Removed Lines]",
          "190:  if namesAcceptedCondition.Status == apiextensions.ConditionUnknown {",
          "191:   namesAcceptedCondition.Status = apiextensions.ConditionTrue",
          "",
          "[Added Lines]",
          "190:  if namesAcceptedCondition.Status == apiextensionsv1.ConditionUnknown {",
          "191:   namesAcceptedCondition.Status = apiextensionsv1.ConditionTrue",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "203:   Reason:  \"NotAccepted\",",
          "204:   Message: \"not all names are accepted\",",
          "205:  }",
          "207:   establishedCondition = *old",
          "208:  }",
          "213:    Reason:  \"Installing\",",
          "214:    Message: \"the initial names have been accepted\",",
          "215:   }",
          "",
          "[Removed Lines]",
          "200:  establishedCondition := apiextensions.CustomResourceDefinitionCondition{",
          "201:   Type:    apiextensions.Established,",
          "202:   Status:  apiextensions.ConditionFalse,",
          "206:  if old := apiextensionshelpers.FindCRDCondition(in, apiextensions.Established); old != nil {",
          "209:  if establishedCondition.Status != apiextensions.ConditionTrue && namesAcceptedCondition.Status == apiextensions.ConditionTrue {",
          "210:   establishedCondition = apiextensions.CustomResourceDefinitionCondition{",
          "211:    Type:    apiextensions.Established,",
          "212:    Status:  apiextensions.ConditionFalse,",
          "",
          "[Added Lines]",
          "200:  establishedCondition := apiextensionsv1.CustomResourceDefinitionCondition{",
          "201:   Type:    apiextensionsv1.Established,",
          "202:   Status:  apiextensionsv1.ConditionFalse,",
          "206:  if old := apiextensionshelpers.FindCRDCondition(in, apiextensionsv1.Established); old != nil {",
          "209:  if establishedCondition.Status != apiextensionsv1.ConditionTrue && namesAcceptedCondition.Status == apiextensionsv1.ConditionTrue {",
          "210:   establishedCondition = apiextensionsv1.CustomResourceDefinitionCondition{",
          "211:    Type:    apiextensionsv1.Established,",
          "212:    Status:  apiextensionsv1.ConditionFalse,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "254:  if reflect.DeepEqual(inCustomResourceDefinition.Status.AcceptedNames, acceptedNames) &&",
          "256:   return nil",
          "257:  }",
          "",
          "[Removed Lines]",
          "255:   apiextensionshelpers.IsCRDConditionEquivalent(&namingCondition, apiextensionshelpers.FindCRDCondition(inCustomResourceDefinition, apiextensions.NamesAccepted)) {",
          "",
          "[Added Lines]",
          "255:   apiextensionshelpers.IsCRDConditionEquivalent(&namingCondition, apiextensionshelpers.FindCRDCondition(inCustomResourceDefinition, apiextensionsv1.NamesAccepted)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "324:  return true",
          "325: }",
          "328:  key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)",
          "329:  if err != nil {",
          "330:   utilruntime.HandleError(fmt.Errorf(\"couldn't get key for object %#v: %v\", obj, err))",
          "",
          "[Removed Lines]",
          "327: func (c *NamingConditionController) enqueue(obj *apiextensions.CustomResourceDefinition) {",
          "",
          "[Added Lines]",
          "327: func (c *NamingConditionController) enqueue(obj *apiextensionsv1.CustomResourceDefinition) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335: }",
          "337: func (c *NamingConditionController) addCustomResourceDefinition(obj interface{}) {",
          "339:  klog.V(4).Infof(\"Adding %s\", castObj.Name)",
          "340:  c.enqueue(castObj)",
          "341: }",
          "343: func (c *NamingConditionController) updateCustomResourceDefinition(obj, _ interface{}) {",
          "345:  klog.V(4).Infof(\"Updating %s\", castObj.Name)",
          "346:  c.enqueue(castObj)",
          "347: }",
          "349: func (c *NamingConditionController) deleteCustomResourceDefinition(obj interface{}) {",
          "351:  if !ok {",
          "352:   tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",
          "353:   if !ok {",
          "354:    klog.Errorf(\"Couldn't get object from tombstone %#v\", obj)",
          "355:    return",
          "356:   }",
          "358:   if !ok {",
          "359:    klog.Errorf(\"Tombstone contained object that is not expected %#v\", obj)",
          "360:    return",
          "",
          "[Removed Lines]",
          "338:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "344:  castObj := obj.(*apiextensions.CustomResourceDefinition)",
          "350:  castObj, ok := obj.(*apiextensions.CustomResourceDefinition)",
          "357:   castObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)",
          "",
          "[Added Lines]",
          "338:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "344:  castObj := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "350:  castObj, ok := obj.(*apiextensionsv1.CustomResourceDefinition)",
          "357:   castObj, ok = tombstone.Obj.(*apiextensionsv1.CustomResourceDefinition)",
          "",
          "---------------"
        ],
        "pkg/controller/status/naming_controller_test.go||pkg/controller/status/naming_controller_test.go": [
          "File: pkg/controller/status/naming_controller_test.go -> pkg/controller/status/naming_controller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"time\"",
          "25:  apiextensionshelpers \"k8s.io/apiextensions-apiserver/pkg/apihelpers\"",
          "27:  listers \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/v1\"",
          "28:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "29:  \"k8s.io/client-go/tools/cache\"",
          "30: )",
          "32: type crdBuilder struct {",
          "34: }",
          "36: func newCRD(name string) *crdBuilder {",
          "37:  tokens := strings.SplitN(name, \".\", 2)",
          "38:  return &crdBuilder{",
          "40:    ObjectMeta: metav1.ObjectMeta{Name: name},",
          "42:     Group: tokens[1],",
          "44:      Plural: tokens[0],",
          "45:     },",
          "46:    },",
          "",
          "[Removed Lines]",
          "26:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "33:  curr apiextensions.CustomResourceDefinition",
          "39:   curr: apiextensions.CustomResourceDefinition{",
          "41:    Spec: apiextensions.CustomResourceDefinitionSpec{",
          "43:     Names: apiextensions.CustomResourceDefinitionNames{",
          "",
          "[Added Lines]",
          "26:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "33:  curr apiextensionsv1.CustomResourceDefinition",
          "39:   curr: apiextensionsv1.CustomResourceDefinition{",
          "41:    Spec: apiextensionsv1.CustomResourceDefinitionSpec{",
          "43:     Names: apiextensionsv1.CustomResourceDefinitionNames{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:  return b",
          "69: }",
          "72:  b.curr.Status.Conditions = append(b.curr.Status.Conditions, c)",
          "74:  return b",
          "75: }",
          "79:   Plural:     plural,",
          "80:   Singular:   singular,",
          "81:   Kind:       kind,",
          "",
          "[Removed Lines]",
          "71: func (b *crdBuilder) Condition(c apiextensions.CustomResourceDefinitionCondition) *crdBuilder {",
          "77: func names(plural, singular, kind, listKind string, shortNames ...string) apiextensions.CustomResourceDefinitionNames {",
          "78:  ret := apiextensions.CustomResourceDefinitionNames{",
          "",
          "[Added Lines]",
          "71: func (b *crdBuilder) Condition(c apiextensionsv1.CustomResourceDefinitionCondition) *crdBuilder {",
          "77: func names(plural, singular, kind, listKind string, shortNames ...string) apiextensionsv1.CustomResourceDefinitionNames {",
          "78:  ret := apiextensionsv1.CustomResourceDefinitionNames{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:  return ret",
          "86: }",
          "89:  return &b.curr",
          "90: }",
          "95:  Reason:  \"NoConflicts\",",
          "96:  Message: \"no conflicts found\",",
          "97: }",
          "102:  Reason:  \"NotAccepted\",",
          "103:  Message: \"not all names are accepted\",",
          "104: }",
          "109:  Reason:  \"Installing\",",
          "110:  Message: \"the initial names have been accepted\",",
          "111: }",
          "116:  Reason:  \"NotAccepted\",",
          "117:  Message: \"not all names are accepted\",",
          "118: }",
          "124:   Reason:  reason,",
          "125:   Message: message,",
          "126:  }",
          "",
          "[Removed Lines]",
          "88: func (b *crdBuilder) NewOrDie() *apiextensions.CustomResourceDefinition {",
          "92: var acceptedCondition = apiextensions.CustomResourceDefinitionCondition{",
          "93:  Type:    apiextensions.NamesAccepted,",
          "94:  Status:  apiextensions.ConditionTrue,",
          "99: var notAcceptedCondition = apiextensions.CustomResourceDefinitionCondition{",
          "100:  Type:    apiextensions.NamesAccepted,",
          "101:  Status:  apiextensions.ConditionFalse,",
          "106: var installingCondition = apiextensions.CustomResourceDefinitionCondition{",
          "107:  Type:    apiextensions.Established,",
          "108:  Status:  apiextensions.ConditionFalse,",
          "113: var notEstablishedCondition = apiextensions.CustomResourceDefinitionCondition{",
          "114:  Type:    apiextensions.Established,",
          "115:  Status:  apiextensions.ConditionFalse,",
          "120: func nameConflictCondition(reason, message string) apiextensions.CustomResourceDefinitionCondition {",
          "121:  return apiextensions.CustomResourceDefinitionCondition{",
          "122:   Type:    apiextensions.NamesAccepted,",
          "123:   Status:  apiextensions.ConditionFalse,",
          "",
          "[Added Lines]",
          "88: func (b *crdBuilder) NewOrDie() *apiextensionsv1.CustomResourceDefinition {",
          "92: var acceptedCondition = apiextensionsv1.CustomResourceDefinitionCondition{",
          "93:  Type:    apiextensionsv1.NamesAccepted,",
          "94:  Status:  apiextensionsv1.ConditionTrue,",
          "99: var notAcceptedCondition = apiextensionsv1.CustomResourceDefinitionCondition{",
          "100:  Type:    apiextensionsv1.NamesAccepted,",
          "101:  Status:  apiextensionsv1.ConditionFalse,",
          "106: var installingCondition = apiextensionsv1.CustomResourceDefinitionCondition{",
          "107:  Type:    apiextensionsv1.Established,",
          "108:  Status:  apiextensionsv1.ConditionFalse,",
          "113: var notEstablishedCondition = apiextensionsv1.CustomResourceDefinitionCondition{",
          "114:  Type:    apiextensionsv1.Established,",
          "115:  Status:  apiextensionsv1.ConditionFalse,",
          "120: func nameConflictCondition(reason, message string) apiextensionsv1.CustomResourceDefinitionCondition {",
          "121:  return apiextensionsv1.CustomResourceDefinitionCondition{",
          "122:   Type:    apiextensionsv1.NamesAccepted,",
          "123:   Status:  apiextensionsv1.ConditionFalse,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:  tests := []struct {",
          "131:   name string",
          "138:  }{",
          "139:   {",
          "140:    name:     \"first resource\",",
          "141:    in:       newCRD(\"alfa.bravo.com\").NewOrDie(),",
          "144:     Plural: \"alfa\",",
          "145:    },",
          "146:    expectedNameConflictCondition: acceptedCondition,",
          "",
          "[Removed Lines]",
          "133:   in                            *apiextensions.CustomResourceDefinition",
          "134:   existing                      []*apiextensions.CustomResourceDefinition",
          "135:   expectedNames                 apiextensions.CustomResourceDefinitionNames",
          "136:   expectedNameConflictCondition apiextensions.CustomResourceDefinitionCondition",
          "137:   expectedEstablishedCondition  apiextensions.CustomResourceDefinitionCondition",
          "142:    existing: []*apiextensions.CustomResourceDefinition{},",
          "143:    expectedNames: apiextensions.CustomResourceDefinitionNames{",
          "",
          "[Added Lines]",
          "133:   in                            *apiextensionsv1.CustomResourceDefinition",
          "134:   existing                      []*apiextensionsv1.CustomResourceDefinition",
          "135:   expectedNames                 apiextensionsv1.CustomResourceDefinitionNames",
          "136:   expectedNameConflictCondition apiextensionsv1.CustomResourceDefinitionCondition",
          "137:   expectedEstablishedCondition  apiextensionsv1.CustomResourceDefinitionCondition",
          "142:    existing: []*apiextensionsv1.CustomResourceDefinition{},",
          "143:    expectedNames: apiextensionsv1.CustomResourceDefinitionNames{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:   {",
          "150:    name: \"different groups\",",
          "151:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "153:     newCRD(\"alfa.charlie.com\").StatusNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "154:    },",
          "155:    expectedNames:                 names(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "152:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "152:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159:   {",
          "160:    name: \"conflict plural to singular\",",
          "161:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "163:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"alfa\", \"\", \"\").NewOrDie(),",
          "164:    },",
          "165:    expectedNames:                 names(\"\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "162:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "162:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "169:   {",
          "170:    name: \"conflict singular to shortName\",",
          "171:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "173:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"indias\", \"\", \"\", \"delta-singular\").NewOrDie(),",
          "174:    },",
          "175:    expectedNames:                 names(\"alfa\", \"\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "172:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "172:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "179:   {",
          "180:    name: \"conflict on shortName to shortName\",",
          "181:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "183:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"indias\", \"\", \"\", \"hotel-shortname-2\").NewOrDie(),",
          "184:    },",
          "185:    expectedNames:                 names(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\"),",
          "",
          "[Removed Lines]",
          "182:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "182:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "189:   {",
          "190:    name: \"conflict on kind to listkind\",",
          "191:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "193:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"indias\", \"\", \"echo-kind\").NewOrDie(),",
          "194:    },",
          "195:    expectedNames:                 names(\"alfa\", \"delta-singular\", \"\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "192:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "192:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "199:   {",
          "200:    name: \"conflict on listkind to kind\",",
          "201:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "203:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"indias\", \"foxtrot-listkind\", \"\").NewOrDie(),",
          "204:    },",
          "205:    expectedNames:                 names(\"alfa\", \"delta-singular\", \"echo-kind\", \"\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "202:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "202:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "209:   {",
          "210:    name: \"no conflict on resource and kind\",",
          "211:    in:   newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").NewOrDie(),",
          "213:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"echo-kind\", \"\", \"\").NewOrDie(),",
          "214:    },",
          "215:    expectedNames:                 names(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "212:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "212:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "222:     SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "223:     StatusNames(\"zulu\", \"yankee-singular\", \"xray-kind\", \"whiskey-listkind\", \"victor-shortname-1\", \"uniform-shortname-2\").",
          "224:     NewOrDie(),",
          "226:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"indias\", \"foxtrot-listkind\", \"\", \"delta-singular\").NewOrDie(),",
          "227:    },",
          "228:    expectedNames:                 names(\"alfa\", \"yankee-singular\", \"echo-kind\", \"whiskey-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "225:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "225:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "235:     SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "236:     StatusNames(\"zulu\", \"yankee-singular\", \"xray-kind\", \"whiskey-listkind\", \"victor-shortname-1\", \"uniform-shortname-2\").",
          "237:     NewOrDie(),",
          "239:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"indias\", \"foxtrot-listkind\", \"\", \"delta-singular\", \"golf-shortname-1\").NewOrDie(),",
          "240:    },",
          "241:    expectedNames:                 names(\"alfa\", \"yankee-singular\", \"echo-kind\", \"whiskey-listkind\", \"victor-shortname-1\", \"uniform-shortname-2\"),",
          "",
          "[Removed Lines]",
          "238:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "238:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "248:     SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "249:     StatusNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "250:     NewOrDie(),",
          "252:     newCRD(\"alfa.bravo.com\").",
          "253:      SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "254:      StatusNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "",
          "[Removed Lines]",
          "251:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "251:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "264:     SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\").",
          "265:     StatusNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "266:     NewOrDie(),",
          "268:     newCRD(\"alfa.bravo.com\").",
          "269:      SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "270:      StatusNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "",
          "[Removed Lines]",
          "267:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "267:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "277:   {",
          "278:    name:     \"installing before with true condition\",",
          "279:    in:       newCRD(\"alfa.bravo.com\").Condition(acceptedCondition).NewOrDie(),",
          "282:     Plural: \"alfa\",",
          "283:    },",
          "284:    expectedNameConflictCondition: acceptedCondition,",
          "",
          "[Removed Lines]",
          "280:    existing: []*apiextensions.CustomResourceDefinition{},",
          "281:    expectedNames: apiextensions.CustomResourceDefinitionNames{",
          "",
          "[Added Lines]",
          "280:    existing: []*apiextensionsv1.CustomResourceDefinition{},",
          "281:    expectedNames: apiextensionsv1.CustomResourceDefinitionNames{",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "287:   {",
          "288:    name:     \"not installing before with false condition\",",
          "289:    in:       newCRD(\"alfa.bravo.com\").Condition(notAcceptedCondition).NewOrDie(),",
          "292:     Plural: \"alfa\",",
          "293:    },",
          "294:    expectedNameConflictCondition: acceptedCondition,",
          "",
          "[Removed Lines]",
          "290:    existing: []*apiextensions.CustomResourceDefinition{},",
          "291:    expectedNames: apiextensions.CustomResourceDefinitionNames{",
          "",
          "[Added Lines]",
          "290:    existing: []*apiextensionsv1.CustomResourceDefinition{},",
          "291:    expectedNames: apiextensionsv1.CustomResourceDefinitionNames{",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "299:    in: newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "300:     Condition(acceptedCondition).",
          "301:     NewOrDie(),",
          "303:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"alfa\", \"\", \"\").NewOrDie(),",
          "304:    },",
          "305:    expectedNames:                 names(\"\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "302:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "302:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "311:    in: newCRD(\"alfa.bravo.com\").SpecNames(\"alfa\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\").",
          "312:     Condition(notAcceptedCondition).",
          "313:     NewOrDie(),",
          "315:     newCRD(\"india.bravo.com\").StatusNames(\"india\", \"alfa\", \"\", \"\").NewOrDie(),",
          "316:    },",
          "317:    expectedNames:                 names(\"\", \"delta-singular\", \"echo-kind\", \"foxtrot-listkind\", \"golf-shortname-1\", \"hotel-shortname-2\"),",
          "",
          "[Removed Lines]",
          "314:    existing: []*apiextensions.CustomResourceDefinition{",
          "",
          "[Added Lines]",
          "314:    existing: []*apiextensionsv1.CustomResourceDefinition{",
          "",
          "---------------"
        ],
        "pkg/registry/customresource/etcd_test.go||pkg/registry/customresource/etcd_test.go": [
          "File: pkg/registry/customresource/etcd_test.go -> pkg/registry/customresource/etcd_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  etcd3testing \"k8s.io/apiserver/pkg/storage/etcd3/testing\"",
          "42:  apiextensionsinternal \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions\"",
          "44:  \"k8s.io/apiextensions-apiserver/pkg/apiserver\"",
          "45:  \"k8s.io/apiextensions-apiserver/pkg/crdserverscheme\"",
          "46:  \"k8s.io/apiextensions-apiserver/pkg/registry/customresource\"",
          "",
          "[Removed Lines]",
          "43:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "43:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  status := &apiextensionsinternal.CustomResourceSubresourceStatus{}",
          "80:   {Name: \"Age\", Type: \"date\", JSONPath: \".metadata.creationTimestamp\"},",
          "81:   {Name: \"Replicas\", Type: \"integer\", JSONPath: \".spec.replicas\"},",
          "82:   {Name: \"Missing\", Type: \"string\", JSONPath: \".spec.missing\"},",
          "",
          "[Removed Lines]",
          "79:  headers := []apiextensions.CustomResourceColumnDefinition{",
          "",
          "[Added Lines]",
          "79:  headers := []apiextensionsv1.CustomResourceColumnDefinition{",
          "",
          "---------------"
        ],
        "pkg/registry/customresource/tableconvertor/tableconvertor.go||pkg/registry/customresource/tableconvertor/tableconvertor.go": [
          "File: pkg/registry/customresource/tableconvertor/tableconvertor.go -> pkg/registry/customresource/tableconvertor/tableconvertor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"fmt\"",
          "24:  \"reflect\"",
          "27:  \"k8s.io/apimachinery/pkg/api/meta\"",
          "28:  metatable \"k8s.io/apimachinery/pkg/api/meta/table\"",
          "29:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "26:  apiextensions \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "[Added Lines]",
          "26:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:  headers := []metav1.TableColumnDefinition{",
          "41:   {Name: \"Name\", Type: \"string\", Format: \"name\", Description: swaggerMetadataDescriptions[\"name\"]},",
          "42:  }",
          "",
          "[Removed Lines]",
          "39: func New(crdColumns []apiextensions.CustomResourceColumnDefinition) (rest.TableConvertor, error) {",
          "",
          "[Added Lines]",
          "39: func New(crdColumns []apiextensionsv1.CustomResourceColumnDefinition) (rest.TableConvertor, error) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cff6df7fa007f58d407c29c022f98ec501f9ca41",
      "candidate_info": {
        "commit_hash": "cff6df7fa007f58d407c29c022f98ec501f9ca41",
        "repo": "kubernetes/apiextensions-apiserver",
        "commit_url": "https://github.com/kubernetes/apiextensions-apiserver/commit/cff6df7fa007f58d407c29c022f98ec501f9ca41",
        "files": [
          "pkg/apiserver/customresource_handler.go"
        ],
        "message": "apiextensions: 404 if request scope does not match crd scope\n\nKubernetes-commit: 9d3c8b36d992cdbea00040f2c31d39f46e4c4219",
        "before_after_code_files": [
          "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ],
          "candidate": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go": [
          "File: pkg/apiserver/customresource_handler.go -> pkg/apiserver/customresource_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: var longRunningFilter = genericfilters.BasicLongRunningRequestCheck(sets.NewString(\"watch\"), sets.NewString())",
          "195: func (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {",
          "196:  ctx := req.Context()",
          "197:  requestInfo, ok := apirequest.RequestInfoFrom(ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: var possiblyAcrossAllNamespacesVerbs = sets.NewString(\"list\", \"watch\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   http.Error(w, err.Error(), http.StatusInternalServerError)",
          "228:   return",
          "229:  }",
          "230:  if !apiextensions.HasServedCRDVersion(crd, requestInfo.APIVersion) {",
          "231:   r.delegate.ServeHTTP(w, req)",
          "232:   return",
          "233:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:  namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensions.NamespaceScoped, len(requestInfo.Namespace) > 0",
          "238:  if !namespacedCRD && namespacedReq {",
          "239:   r.delegate.ServeHTTP(w, req)",
          "240:   return",
          "241:  }",
          "242:  if namespacedCRD && !namespacedReq && !possiblyAcrossAllNamespacesVerbs.Has(requestInfo.Verb) {",
          "243:   r.delegate.ServeHTTP(w, req)",
          "244:   return",
          "245:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "148a8705ba9a6f207b421bdf98b36938b7db7b36",
      "candidate_info": {
        "commit_hash": "148a8705ba9a6f207b421bdf98b36938b7db7b36",
        "repo": "kubernetes/apiextensions-apiserver",
        "commit_url": "https://github.com/kubernetes/apiextensions-apiserver/commit/148a8705ba9a6f207b421bdf98b36938b7db7b36",
        "files": [
          "pkg/apiserver/customresource_handler.go"
        ],
        "message": "apiextensions: 404 if request scope does not match crd scope\n\nKubernetes-commit: 449163c33576d5d883cf67442618ee53400ebe59",
        "before_after_code_files": [
          "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ],
          "candidate": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go": [
          "File: pkg/apiserver/customresource_handler.go -> pkg/apiserver/customresource_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  \"k8s.io/apimachinery/pkg/runtime/serializer/versioning\"",
          "53:  \"k8s.io/apimachinery/pkg/types\"",
          "54:  utilruntime \"k8s.io/apimachinery/pkg/util/runtime\"",
          "55:  \"k8s.io/apiserver/pkg/admission\"",
          "56:  \"k8s.io/apiserver/pkg/authorization/authorizer\"",
          "57:  \"k8s.io/apiserver/pkg/endpoints/handlers\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:  return ret, nil",
          "170: }",
          "172: func (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {",
          "173:  ctx := req.Context()",
          "174:  requestInfo, ok := apirequest.RequestInfoFrom(ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: var possiblyAcrossAllNamespacesVerbs = sets.NewString(\"list\", \"watch\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:   http.Error(w, err.Error(), http.StatusInternalServerError)",
          "205:   return",
          "206:  }",
          "207:  if !apiextensions.HasServedCRDVersion(crd, requestInfo.APIVersion) {",
          "208:   r.delegate.ServeHTTP(w, req)",
          "209:   return",
          "210:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:  namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensions.NamespaceScoped, len(requestInfo.Namespace) > 0",
          "216:  if !namespacedCRD && namespacedReq {",
          "217:   r.delegate.ServeHTTP(w, req)",
          "218:   return",
          "219:  }",
          "220:  if namespacedCRD && !namespacedReq && !possiblyAcrossAllNamespacesVerbs.Has(requestInfo.Verb) {",
          "221:   r.delegate.ServeHTTP(w, req)",
          "222:   return",
          "223:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e809302d9be5b5169325b0c11995f6573de02996",
      "candidate_info": {
        "commit_hash": "e809302d9be5b5169325b0c11995f6573de02996",
        "repo": "kubernetes/apiextensions-apiserver",
        "commit_url": "https://github.com/kubernetes/apiextensions-apiserver/commit/e809302d9be5b5169325b0c11995f6573de02996",
        "files": [
          "pkg/apiserver/customresource_handler.go"
        ],
        "message": "apiextensions: 404 if request scope does not match crd scope\n\nKubernetes-commit: e060d5805200c96da9052af1c5cfd8d683f42ac8",
        "before_after_code_files": [
          "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ],
          "candidate": [
            "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/apiserver/customresource_handler.go||pkg/apiserver/customresource_handler.go": [
          "File: pkg/apiserver/customresource_handler.go -> pkg/apiserver/customresource_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  \"k8s.io/apimachinery/pkg/runtime/serializer/versioning\"",
          "44:  \"k8s.io/apimachinery/pkg/types\"",
          "45:  utilruntime \"k8s.io/apimachinery/pkg/util/runtime\"",
          "46:  \"k8s.io/apiserver/pkg/admission\"",
          "47:  \"k8s.io/apiserver/pkg/endpoints/handlers\"",
          "48:  \"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:  \"k8s.io/apimachinery/pkg/util/sets\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:  return ret, nil",
          "164: }",
          "166: func (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {",
          "167:  ctx := req.Context()",
          "168:  requestInfo, ok := apirequest.RequestInfoFrom(ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: var possiblyAcrossAllNamespacesVerbs = sets.NewString(\"list\", \"watch\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:   http.Error(w, err.Error(), http.StatusInternalServerError)",
          "199:   return",
          "200:  }",
          "201:  if !apiextensions.HasServedCRDVersion(crd, requestInfo.APIVersion) {",
          "202:   r.delegate.ServeHTTP(w, req)",
          "203:   return",
          "204:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:  namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensions.NamespaceScoped, len(requestInfo.Namespace) > 0",
          "210:  if !namespacedCRD && namespacedReq {",
          "211:   r.delegate.ServeHTTP(w, req)",
          "212:   return",
          "213:  }",
          "214:  if namespacedCRD && !namespacedReq && !possiblyAcrossAllNamespacesVerbs.Has(requestInfo.Verb) {",
          "215:   r.delegate.ServeHTTP(w, req)",
          "216:   return",
          "217:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}