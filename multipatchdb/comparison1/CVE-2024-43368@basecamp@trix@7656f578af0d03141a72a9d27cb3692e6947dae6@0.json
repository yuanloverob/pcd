{
  "cve_id": "CVE-2024-43368",
  "cve_desc": "The Trix editor, versions prior to 2.1.4, is vulnerable to XSS when pasting malicious code. This vulnerability is a bypass of the fix put in place for GHSA-qjqp-xr96-cj99. In pull request 1149, sanitation was added for Trix attachments with a `text/html` content type. However, Trix only checks the content type on the paste event's `dataTransfer` object. As long as the `dataTransfer` has a content type of `text/html`, Trix parses its contents and creates an `Attachment` with them, even if the attachment itself doesn't have a `text/html` content type. Trix then uses the attachment content to set the attachment element's `innerHTML`. An attacker could trick a user to copy and paste malicious code that would execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed. This vulnerability was fixed in version 2.1.4.",
  "repo": "basecamp/trix",
  "patch_hash": "7656f578af0d03141a72a9d27cb3692e6947dae6",
  "patch_info": {
    "commit_hash": "7656f578af0d03141a72a9d27cb3692e6947dae6",
    "repo": "basecamp/trix",
    "commit_url": "https://github.com/basecamp/trix/commit/7656f578af0d03141a72a9d27cb3692e6947dae6",
    "files": [
      "src/test/system/pasting_test.js",
      "src/test/test_helpers/fixtures/fixtures.js",
      "src/trix/models/html_parser.js",
      "src/trix/models/html_sanitizer.js",
      "src/trix/views/attachment_view.js"
    ],
    "message": "Merge pull request #1156 from basecamp/paste-vuln\n\nFix XSS vulnerability on paste",
    "before_after_code_files": [
      "src/test/system/pasting_test.js||src/test/system/pasting_test.js",
      "src/test/test_helpers/fixtures/fixtures.js||src/test/test_helpers/fixtures/fixtures.js",
      "src/trix/models/html_parser.js||src/trix/models/html_parser.js",
      "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js",
      "src/trix/views/attachment_view.js||src/trix/views/attachment_view.js"
    ]
  },
  "patch_diff": {
    "src/test/system/pasting_test.js||src/test/system/pasting_test.js": [
      "File: src/test/system/pasting_test.js -> src/test/system/pasting_test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "109:     const pasteData = {",
      "110:       \"text/plain\": \"x\",",
      "111:       \"text/html\": `\\",
      "113:       `,",
      "114:     }",
      "",
      "[Removed Lines]",
      "112:       copy<div data-trix-attachment=\"{&quot;contentType&quot;:&quot;text/html&quot;,&quot;content&quot;:&quot;&lt;img src=1 onerror=window.unsanitized.push(1)&gt;HELLO123&quot;}\"></div>me",
      "",
      "[Added Lines]",
      "112:       copy<div data-trix-attachment=\"{&quot;contentType&quot;:&quot;text/anything&quot;,&quot;content&quot;:&quot;&lt;img src=1 onerror=window.unsanitized.push(1)&gt;HELLO123&quot;}\"></div>me",
      "",
      "---------------"
    ],
    "src/test/test_helpers/fixtures/fixtures.js||src/test/test_helpers/fixtures/fixtures.js": [
      "File: src/test/test_helpers/fixtures/fixtures.js -> src/test/test_helpers/fixtures/fixtures.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "471:   \"content attachment\": (() => {",
      "472:     const content =",
      "474:     const href = \"https://twitter.com/sstephenson/status/587715996783218688\"",
      "475:     const contentType = \"embed/twitter\"",
      "",
      "[Removed Lines]",
      "473:       \"<blockquote class=\\\"twitter-tweet\\\" data-cards=\\\"hidden\\\"><p>ruby-build 20150413 is out, with definitions for 2.2.2, 2.1.6, and 2.0.0-p645 to address recent security issues: <a href=\\\"https://t.co/YEwV6NtRD8\\\">https://t.co/YEwV6NtRD8</a></p>&mdash; Sam Stephenson (@sstephenson) <a href=\\\"https://twitter.com/sstephenson/status/587715996783218688\\\">April 13, 2015</a></blockquote>\"",
      "",
      "[Added Lines]",
      "473:       \"<blockquote class=\\\"twitter-tweet\\\"><p>ruby-build 20150413 is out, with definitions for 2.2.2, 2.1.6, and 2.0.0-p645 to address recent security issues: <a href=\\\"https://t.co/YEwV6NtRD8\\\">https://t.co/YEwV6NtRD8</a></p>&mdash; Sam Stephenson (@sstephenson) <a href=\\\"https://twitter.com/sstephenson/status/587715996783218688\\\">April 13, 2015</a></blockquote>\"",
      "",
      "---------------"
    ],
    "src/trix/models/html_parser.js||src/trix/models/html_parser.js": [
      "File: src/trix/models/html_parser.js -> src/trix/models/html_parser.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: const parseTrixDataAttribute = (element, name) => {",
      "42:   try {",
      "50:   } catch (error) {",
      "51:     return {}",
      "52:   }",
      "",
      "[Removed Lines]",
      "43:     const data = JSON.parse(element.getAttribute(`data-trix-${name}`))",
      "45:     if (data.contentType === \"text/html\" && data.content) {",
      "46:       data.content = HTMLSanitizer.sanitize(data.content).getHTML()",
      "47:     }",
      "49:     return data",
      "",
      "[Added Lines]",
      "43:     return JSON.parse(element.getAttribute(`data-trix-${name}`))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:   parse() {",
      "91:     try {",
      "92:       this.createHiddenContainer()",
      "95:       const walker = walkTree(this.containerElement, { usingFilter: nodeFilter })",
      "96:       while (walker.nextNode()) {",
      "97:         this.processNode(walker.currentNode)",
      "",
      "[Removed Lines]",
      "93:       const html = HTMLSanitizer.sanitize(this.html).getHTML()",
      "94:       this.containerElement.innerHTML = html",
      "",
      "[Added Lines]",
      "87:       HTMLSanitizer.setHTML(this.containerElement, this.html)",
      "",
      "---------------"
    ],
    "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js": [
      "File: src/trix/models/html_sanitizer.js -> src/trix/models/html_sanitizer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: const DEFAULT_FORBIDDEN_ELEMENTS = \"script iframe form noscript\".split(\" \")",
      "9: export default class HTMLSanitizer extends BasicObject {",
      "10:   static sanitize(html, options) {",
      "11:     const sanitizer = new this(html, options)",
      "12:     sanitizer.sanitize()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:   static setHTML(element, html) {",
      "11:     const sanitizedElement = new this(html).sanitize()",
      "12:     const sanitizedHtml = sanitizedElement.getHTML ? sanitizedElement.getHTML() : sanitizedElement.outerHTML",
      "13:     element.innerHTML = sanitizedHtml",
      "14:   }",
      "",
      "---------------"
    ],
    "src/trix/views/attachment_view.js||src/trix/views/attachment_view.js": [
      "File: src/trix/views/attachment_view.js -> src/trix/views/attachment_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import { ZERO_WIDTH_SPACE } from \"trix/constants\"",
      "3: import { copyObject, makeElement } from \"trix/core/helpers\"",
      "4: import ObjectView from \"trix/views/object_view\"",
      "6: const { css } = config",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: import HTMLSanitizer from \"trix/models/html_sanitizer\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:     }",
      "35:     if (this.attachment.hasContent()) {",
      "37:     } else {",
      "38:       this.createContentNodes().forEach((node) => {",
      "39:         innerElement.appendChild(node)",
      "",
      "[Removed Lines]",
      "36:       innerElement.innerHTML = this.attachment.getContent()",
      "",
      "[Added Lines]",
      "37:       HTMLSanitizer.setHTML(innerElement, this.attachment.getContent())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "166: const htmlContainsTagName = function(html, tagName) {",
      "167:   const div = makeElement(\"div\")",
      "169:   return div.querySelector(tagName)",
      "170: }",
      "",
      "[Removed Lines]",
      "168:   div.innerHTML = html || \"\"",
      "",
      "[Added Lines]",
      "169:   HTMLSanitizer.setHTML(div, html || \"\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8dbd3d5deda2a17e8d76998a84da6adebdf1dcf",
      "candidate_info": {
        "commit_hash": "c8dbd3d5deda2a17e8d76998a84da6adebdf1dcf",
        "repo": "basecamp/trix",
        "commit_url": "https://github.com/basecamp/trix/commit/c8dbd3d5deda2a17e8d76998a84da6adebdf1dcf",
        "files": [
          "src/test/system/pasting_test.js",
          "src/test/test_helpers/fixtures/fixtures.js",
          "src/trix/models/html_parser.js",
          "src/trix/models/html_sanitizer.js",
          "src/trix/views/attachment_view.js"
        ],
        "message": "Ensure we always sanitize HTML we set as innerHTML",
        "before_after_code_files": [
          "src/test/system/pasting_test.js||src/test/system/pasting_test.js",
          "src/test/test_helpers/fixtures/fixtures.js||src/test/test_helpers/fixtures/fixtures.js",
          "src/trix/models/html_parser.js||src/trix/models/html_parser.js",
          "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js",
          "src/trix/views/attachment_view.js||src/trix/views/attachment_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/basecamp/trix/pull/1156"
        ],
        "olp_code_files": {
          "patch": [
            "src/test/system/pasting_test.js||src/test/system/pasting_test.js",
            "src/test/test_helpers/fixtures/fixtures.js||src/test/test_helpers/fixtures/fixtures.js",
            "src/trix/models/html_parser.js||src/trix/models/html_parser.js",
            "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js",
            "src/trix/views/attachment_view.js||src/trix/views/attachment_view.js"
          ],
          "candidate": [
            "src/test/system/pasting_test.js||src/test/system/pasting_test.js",
            "src/test/test_helpers/fixtures/fixtures.js||src/test/test_helpers/fixtures/fixtures.js",
            "src/trix/models/html_parser.js||src/trix/models/html_parser.js",
            "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js",
            "src/trix/views/attachment_view.js||src/trix/views/attachment_view.js"
          ]
        }
      },
      "candidate_diff": {
        "src/test/system/pasting_test.js||src/test/system/pasting_test.js": [
          "File: src/test/system/pasting_test.js -> src/test/system/pasting_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     const pasteData = {",
          "110:       \"text/plain\": \"x\",",
          "111:       \"text/html\": `\\",
          "113:       `,",
          "114:     }",
          "",
          "[Removed Lines]",
          "112:       copy<div data-trix-attachment=\"{&quot;contentType&quot;:&quot;text/html&quot;,&quot;content&quot;:&quot;&lt;img src=1 onerror=window.unsanitized.push(1)&gt;HELLO123&quot;}\"></div>me",
          "",
          "[Added Lines]",
          "112:       copy<div data-trix-attachment=\"{&quot;contentType&quot;:&quot;text/anything&quot;,&quot;content&quot;:&quot;&lt;img src=1 onerror=window.unsanitized.push(1)&gt;HELLO123&quot;}\"></div>me",
          "",
          "---------------"
        ],
        "src/test/test_helpers/fixtures/fixtures.js||src/test/test_helpers/fixtures/fixtures.js": [
          "File: src/test/test_helpers/fixtures/fixtures.js -> src/test/test_helpers/fixtures/fixtures.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:   \"content attachment\": (() => {",
          "472:     const content =",
          "474:     const href = \"https://twitter.com/sstephenson/status/587715996783218688\"",
          "475:     const contentType = \"embed/twitter\"",
          "",
          "[Removed Lines]",
          "473:       \"<blockquote class=\\\"twitter-tweet\\\" data-cards=\\\"hidden\\\"><p>ruby-build 20150413 is out, with definitions for 2.2.2, 2.1.6, and 2.0.0-p645 to address recent security issues: <a href=\\\"https://t.co/YEwV6NtRD8\\\">https://t.co/YEwV6NtRD8</a></p>&mdash; Sam Stephenson (@sstephenson) <a href=\\\"https://twitter.com/sstephenson/status/587715996783218688\\\">April 13, 2015</a></blockquote>\"",
          "",
          "[Added Lines]",
          "473:       \"<blockquote class=\\\"twitter-tweet\\\"><p>ruby-build 20150413 is out, with definitions for 2.2.2, 2.1.6, and 2.0.0-p645 to address recent security issues: <a href=\\\"https://t.co/YEwV6NtRD8\\\">https://t.co/YEwV6NtRD8</a></p>&mdash; Sam Stephenson (@sstephenson) <a href=\\\"https://twitter.com/sstephenson/status/587715996783218688\\\">April 13, 2015</a></blockquote>\"",
          "",
          "---------------"
        ],
        "src/trix/models/html_parser.js||src/trix/models/html_parser.js": [
          "File: src/trix/models/html_parser.js -> src/trix/models/html_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: const parseTrixDataAttribute = (element, name) => {",
          "42:   try {",
          "50:   } catch (error) {",
          "51:     return {}",
          "52:   }",
          "",
          "[Removed Lines]",
          "43:     const data = JSON.parse(element.getAttribute(`data-trix-${name}`))",
          "45:     if (data.contentType === \"text/html\" && data.content) {",
          "46:       data.content = HTMLSanitizer.sanitize(data.content).getHTML()",
          "47:     }",
          "49:     return data",
          "",
          "[Added Lines]",
          "43:     return JSON.parse(element.getAttribute(`data-trix-${name}`))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   parse() {",
          "91:     try {",
          "92:       this.createHiddenContainer()",
          "95:       const walker = walkTree(this.containerElement, { usingFilter: nodeFilter })",
          "96:       while (walker.nextNode()) {",
          "97:         this.processNode(walker.currentNode)",
          "",
          "[Removed Lines]",
          "93:       const html = HTMLSanitizer.sanitize(this.html).getHTML()",
          "94:       this.containerElement.innerHTML = html",
          "",
          "[Added Lines]",
          "87:       HTMLSanitizer.setHTML(this.containerElement, this.html)",
          "",
          "---------------"
        ],
        "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js": [
          "File: src/trix/models/html_sanitizer.js -> src/trix/models/html_sanitizer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const DEFAULT_FORBIDDEN_ELEMENTS = \"script iframe form noscript\".split(\" \")",
          "9: export default class HTMLSanitizer extends BasicObject {",
          "10:   static sanitize(html, options) {",
          "11:     const sanitizer = new this(html, options)",
          "12:     sanitizer.sanitize()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:   static setHTML(element, html) {",
          "11:     element.innerHTML = new this(html).sanitize().getHTML()",
          "12:   }",
          "",
          "---------------"
        ],
        "src/trix/views/attachment_view.js||src/trix/views/attachment_view.js": [
          "File: src/trix/views/attachment_view.js -> src/trix/views/attachment_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { ZERO_WIDTH_SPACE } from \"trix/constants\"",
          "3: import { copyObject, makeElement } from \"trix/core/helpers\"",
          "4: import ObjectView from \"trix/views/object_view\"",
          "6: const { css } = config",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import HTMLSanitizer from \"trix/models/html_sanitizer\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     }",
          "35:     if (this.attachment.hasContent()) {",
          "37:     } else {",
          "38:       this.createContentNodes().forEach((node) => {",
          "39:         innerElement.appendChild(node)",
          "",
          "[Removed Lines]",
          "36:       innerElement.innerHTML = this.attachment.getContent()",
          "",
          "[Added Lines]",
          "37:       HTMLSanitizer.setHTML(innerElement, this.attachment.getContent())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166: const htmlContainsTagName = function(html, tagName) {",
          "167:   const div = makeElement(\"div\")",
          "169:   return div.querySelector(tagName)",
          "170: }",
          "",
          "[Removed Lines]",
          "168:   div.innerHTML = html || \"\"",
          "",
          "[Added Lines]",
          "169:   HTMLSanitizer.setHTML(div, html || \"\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "626a4f41d539586c2113d2f76bf029a7fb366cec",
      "candidate_info": {
        "commit_hash": "626a4f41d539586c2113d2f76bf029a7fb366cec",
        "repo": "basecamp/trix",
        "commit_url": "https://github.com/basecamp/trix/commit/626a4f41d539586c2113d2f76bf029a7fb366cec",
        "files": [
          "src/trix/models/html_sanitizer.js"
        ],
        "message": "Support browsers where getHTML is not supported",
        "before_after_code_files": [
          "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/basecamp/trix/pull/1156"
        ],
        "olp_code_files": {
          "patch": [
            "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js"
          ],
          "candidate": [
            "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js"
          ]
        }
      },
      "candidate_diff": {
        "src/trix/models/html_sanitizer.js||src/trix/models/html_sanitizer.js": [
          "File: src/trix/models/html_sanitizer.js -> src/trix/models/html_sanitizer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: export default class HTMLSanitizer extends BasicObject {",
          "10:   static setHTML(element, html) {",
          "12:   }",
          "14:   static sanitize(html, options) {",
          "",
          "[Removed Lines]",
          "11:     element.innerHTML = new this(html).sanitize().getHTML()",
          "",
          "[Added Lines]",
          "11:     const sanitizedElement = new this(html).sanitize()",
          "12:     const sanitizedHtml = sanitizedElement.getHTML ? sanitizedElement.getHTML() : sanitizedElement.outerHTML",
          "13:     element.innerHTML = sanitizedHtml",
          "",
          "---------------"
        ]
      }
    }
  ]
}