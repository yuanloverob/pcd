{
  "cve_id": "CVE-2024-30171",
  "cve_desc": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing.",
  "repo": "bcgit/bc-csharp",
  "patch_hash": "c984b8bfd8544dfc55dba91a02cbbbb9c580c217",
  "patch_info": {
    "commit_hash": "c984b8bfd8544dfc55dba91a02cbbbb9c580c217",
    "repo": "bcgit/bc-csharp",
    "commit_url": "https://github.com/bcgit/bc-csharp/commit/c984b8bfd8544dfc55dba91a02cbbbb9c580c217",
    "files": [
      "crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
      "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
    ],
    "message": "Improve TLS RSA PreMasterSecret decryption",
    "before_after_code_files": [
      "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
      "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
    ]
  },
  "patch_diff": {
    "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs": [
      "File: crypto/src/crypto/tls/TlsRsaKeyExchange.cs -> crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: {",
      "12:     public static class TlsRsaKeyExchange",
      "13:     {",
      "15:             int protocolVersion, SecureRandom secureRandom)",
      "16:         {",
      "20:             if (!privateKey.IsPrivate)",
      "21:                 throw new ArgumentException(\"must be an RSA private key\", nameof(privateKey));",
      "",
      "[Removed Lines]",
      "14:         public static byte[] DecryptPreMasterSecret(byte[] encryptedPreMasterSecret, RsaKeyParameters privateKey,",
      "17:             if (Arrays.IsNullOrEmpty(encryptedPreMasterSecret))",
      "18:                 throw new ArgumentException(\"cannot be null or empty\", nameof(encryptedPreMasterSecret));",
      "",
      "[Added Lines]",
      "14:         public const int PreMasterSecretLength = 48;",
      "16:         public static byte[] DecryptPreMasterSecret(byte[] buf, int off, int len, RsaKeyParameters privateKey,",
      "19:             if (buf == null || len < 1 || len > GetInputLimit(privateKey) || off < 0 || off > buf.Length - len)",
      "20:                 throw new ArgumentException(\"input not a valid EncryptedPreMasterSecret\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:             secureRandom = CryptoServicesRegistrar.GetSecureRandom(secureRandom);",
      "37:             secureRandom.NextBytes(result);",
      "39:             try",
      "40:             {",
      "42:                 byte[] encoding = RsaBlinded(privateKey, input, secureRandom);",
      "44:                 int pkcs1Length = (bitLength - 1) / 8;",
      "48:                 int badVersionMask = -(Pack.BE_To_UInt16(encoding, plainTextOffset) ^ protocolVersion) >> 31;",
      "49:                 int fallbackMask = badEncodingMask | badVersionMask;",
      "52:                 {",
      "53:                     result[i] = (byte)((result[i] & fallbackMask) | (encoding[plainTextOffset + i] & ~fallbackMask));",
      "54:                 }",
      "",
      "[Removed Lines]",
      "36:             byte[] result = new byte[48];",
      "41:                 BigInteger input = ConvertInput(modulus, encryptedPreMasterSecret);",
      "45:                 int plainTextOffset = encoding.Length - 48;",
      "47:                 int badEncodingMask = CheckPkcs1Encoding2(encoding, pkcs1Length, 48);",
      "51:                 for (int i = 0; i < 48; ++i)",
      "",
      "[Added Lines]",
      "38:             byte[] result = new byte[PreMasterSecretLength];",
      "43:                 BigInteger input = ConvertInput(modulus, buf, off, len);",
      "47:                 int plainTextOffset = encoding.Length - PreMasterSecretLength;",
      "49:                 int badEncodingMask = CheckPkcs1Encoding2(encoding, pkcs1Length, PreMasterSecretLength);",
      "53:                 for (int i = 0; i < PreMasterSecretLength; ++i)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:             return result;",
      "70:         }",
      "72:         private static int CAddTo(int len, int cond, byte[] x, byte[] z)",
      "73:         {",
      "74:             Debug.Assert(cond == 0 || cond == -1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:         public static int GetInputLimit(RsaKeyParameters privateKey)",
      "75:         {",
      "76:             return (privateKey.Modulus.BitLength + 7) / 8;",
      "77:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "116:             return errorSign >> 31;",
      "117:         }",
      "120:         {",
      "130:             throw new DataLengthException(\"input too large for RSA cipher.\");",
      "131:         }",
      "",
      "[Removed Lines]",
      "119:         private static BigInteger ConvertInput(BigInteger modulus, byte[] input)",
      "121:             int inputLimit = (modulus.BitLength + 7) / 8;",
      "123:             if (input.Length <= inputLimit)",
      "124:             {",
      "125:                 BigInteger result = new BigInteger(1, input);",
      "126:                 if (result.CompareTo(modulus) < 0)",
      "127:                     return result;",
      "128:             }",
      "",
      "[Added Lines]",
      "126:         private static BigInteger ConvertInput(BigInteger modulus, byte[] buf, int off, int len)",
      "128:             BigInteger result = BigIntegers.FromUnsignedByteArray(buf, off, len);",
      "129:             if (result.CompareTo(modulus) < 0)",
      "130:                 return result;",
      "",
      "---------------"
    ],
    "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs": [
      "File: crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs -> crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:         protected virtual TlsSecret SafeDecryptPreMasterSecret(TlsCryptoParameters cryptoParams,",
      "57:             RsaKeyParameters rsaServerPrivateKey, byte[] encryptedPreMasterSecret)",
      "58:         {",
      "59:             ProtocolVersion expectedVersion = cryptoParams.RsaPreMasterSecretVersion;",
      "61:             byte[] preMasterSecret = Org.BouncyCastle.Crypto.Tls.TlsRsaKeyExchange.DecryptPreMasterSecret(",
      "64:             return m_crypto.CreateSecret(preMasterSecret);",
      "65:         }",
      "",
      "[Removed Lines]",
      "62:                 encryptedPreMasterSecret, rsaServerPrivateKey, expectedVersion.FullVersion, m_crypto.SecureRandom);",
      "",
      "[Added Lines]",
      "62:                 encryptedPreMasterSecret, 0, encryptedPreMasterSecret.Length, rsaServerPrivateKey,",
      "63:                 expectedVersion.FullVersion, m_crypto.SecureRandom);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca2b4827e130211d6f5a8a743f1bbe99c332eca7",
      "candidate_info": {
        "commit_hash": "ca2b4827e130211d6f5a8a743f1bbe99c332eca7",
        "repo": "bcgit/bc-csharp",
        "commit_url": "https://github.com/bcgit/bc-csharp/commit/ca2b4827e130211d6f5a8a743f1bbe99c332eca7",
        "files": [
          "crypto/src/crypto/engines/RSACoreEngine.cs",
          "crypto/src/crypto/tls/TlsRsaKeyExchange.cs"
        ],
        "message": "RSA: Use input range check from fips",
        "before_after_code_files": [
          "crypto/src/crypto/engines/RSACoreEngine.cs||crypto/src/crypto/engines/RSACoreEngine.cs",
          "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs"
          ],
          "candidate": [
            "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/crypto/engines/RSACoreEngine.cs||crypto/src/crypto/engines/RSACoreEngine.cs": [
          "File: crypto/src/crypto/engines/RSACoreEngine.cs -> crypto/src/crypto/engines/RSACoreEngine.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:             BigInteger input = new BigInteger(1, inBuf, inOff, inLen);",
          "86:                 throw new DataLengthException(\"input too large for RSA cipher.\");",
          "88:             return input;",
          "",
          "[Removed Lines]",
          "85:             if (input.CompareTo(m_key.Modulus) >= 0)",
          "",
          "[Added Lines]",
          "85:             if (input.CompareTo(BigInteger.One) <= 0)",
          "86:                 throw new DataLengthException(\"input too small for RSA cipher.\");",
          "88:             if (input.CompareTo(m_key.Modulus.Subtract(BigInteger.One)) >= 0)",
          "",
          "---------------"
        ],
        "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs": [
          "File: crypto/src/crypto/tls/TlsRsaKeyExchange.cs -> crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:         private static BigInteger ConvertInput(BigInteger modulus, byte[] buf, int off, int len)",
          "127:         {",
          "133:         }",
          "135:         private static BigInteger Rsa(RsaKeyParameters privateKey, BigInteger input)",
          "",
          "[Removed Lines]",
          "128:             BigInteger result = BigIntegers.FromUnsignedByteArray(buf, off, len);",
          "129:             if (result.CompareTo(modulus) < 0)",
          "130:                 return result;",
          "132:             throw new DataLengthException(\"input too large for RSA cipher.\");",
          "",
          "[Added Lines]",
          "128:             BigInteger input = BigIntegers.FromUnsignedByteArray(buf, off, len);",
          "130:             if (input.CompareTo(BigInteger.One) <= 0)",
          "131:                 throw new DataLengthException(\"input too small for RSA cipher.\");",
          "133:             if (input.CompareTo(modulus.Subtract(BigInteger.One)) >= 0)",
          "134:                 throw new DataLengthException(\"input too large for RSA cipher.\");",
          "136:             return input;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88c2bc2a9983e0f2bc063b2a8319719deac726bd",
      "candidate_info": {
        "commit_hash": "88c2bc2a9983e0f2bc063b2a8319719deac726bd",
        "repo": "bcgit/bc-csharp",
        "commit_url": "https://github.com/bcgit/bc-csharp/commit/88c2bc2a9983e0f2bc063b2a8319719deac726bd",
        "files": [
          "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
        ],
        "message": "Refactoring",
        "before_after_code_files": [
          "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
          ],
          "candidate": [
            "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs": [
          "File: crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs -> crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         {",
          "59:             ProtocolVersion expectedVersion = cryptoParams.RsaPreMasterSecretVersion;",
          "65:         }",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "61:             byte[] M = Org.BouncyCastle.Crypto.Tls.TlsRsaKeyExchange.DecryptPreMasterSecret(encryptedPreMasterSecret,",
          "62:                 rsaServerPrivateKey, expectedVersion.FullVersion, m_crypto.SecureRandom);",
          "64:             return m_crypto.CreateSecret(M);",
          "",
          "[Added Lines]",
          "61:             byte[] preMasterSecret = Org.BouncyCastle.Crypto.Tls.TlsRsaKeyExchange.DecryptPreMasterSecret(",
          "62:                 encryptedPreMasterSecret, rsaServerPrivateKey, expectedVersion.FullVersion, m_crypto.SecureRandom);",
          "64:             return m_crypto.CreateSecret(preMasterSecret);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69c6a433921a39d60750dcd1b870d820bd601684",
      "candidate_info": {
        "commit_hash": "69c6a433921a39d60750dcd1b870d820bd601684",
        "repo": "bcgit/bc-csharp",
        "commit_url": "https://github.com/bcgit/bc-csharp/commit/69c6a433921a39d60750dcd1b870d820bd601684",
        "files": [
          "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
        ],
        "message": "Cleanup obsolete TODO",
        "before_after_code_files": [
          "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
          ],
          "candidate": [
            "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs": [
          "File: crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs -> crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:             ProtocolVersion expectedVersion = cryptoParams.RsaPreMasterSecretVersion;",
          "80:             byte[] fallback = new byte[48];",
          "81:             secureRandom.NextBytes(fallback);",
          "",
          "[Removed Lines]",
          "74:             bool versionNumberCheckDisabled = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:             catch (Exception)",
          "92:             {",
          "102:             }",
          "134:             }",
          "136:             return m_crypto.CreateSecret(M);",
          "",
          "[Removed Lines]",
          "108:             if (versionNumberCheckDisabled && !TlsImplUtilities.IsTlsV11(expectedVersion))",
          "109:             {",
          "114:             }",
          "115:             else",
          "116:             {",
          "124:                 int mask = (expectedVersion.MajorVersion ^ (M[0] & 0xFF))",
          "125:                          | (expectedVersion.MinorVersion ^ (M[1] & 0xFF));",
          "128:                 mask = (mask - 1) >> 31;",
          "130:                 for (int i = 0; i < 48; i++)",
          "131:                 {",
          "132:                     M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "133:                 }",
          "",
          "[Added Lines]",
          "105:             int mask = (expectedVersion.MajorVersion ^ M[0])",
          "106:                      | (expectedVersion.MinorVersion ^ M[1]);",
          "109:             mask = (mask - 1) >> 31;",
          "111:             for (int i = 0; i < 48; i++)",
          "112:             {",
          "113:                 M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff0e63681de4e7e215ce05dfc5d58c23adde2e04",
      "candidate_info": {
        "commit_hash": "ff0e63681de4e7e215ce05dfc5d58c23adde2e04",
        "repo": "bcgit/bc-csharp",
        "commit_url": "https://github.com/bcgit/bc-csharp/commit/ff0e63681de4e7e215ce05dfc5d58c23adde2e04",
        "files": [
          "crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
          "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
        ],
        "message": "Factor out TlsRsaKeyExchange to address timing issue",
        "before_after_code_files": [
          "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
          "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
            "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
          ],
          "candidate": [
            "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
            "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs"
          ]
        }
      },
      "candidate_diff": {
        "crypto/src/crypto/tls/TlsRsaKeyExchange.cs||crypto/src/crypto/tls/TlsRsaKeyExchange.cs": [
          "File: crypto/src/crypto/tls/TlsRsaKeyExchange.cs -> crypto/src/crypto/tls/TlsRsaKeyExchange.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeffusing System;",
          "2: using System.Diagnostics;",
          "4: using Org.BouncyCastle.Crypto.Parameters;",
          "5: using Org.BouncyCastle.Crypto.Utilities;",
          "6: using Org.BouncyCastle.Math;",
          "7: using Org.BouncyCastle.Security;",
          "8: using Org.BouncyCastle.Utilities;",
          "10: namespace Org.BouncyCastle.Crypto.Tls",
          "11: {",
          "12:     public static class TlsRsaKeyExchange",
          "13:     {",
          "14:         public static byte[] DecryptPreMasterSecret(byte[] encryptedPreMasterSecret, RsaKeyParameters privateKey,",
          "15:             int protocolVersion, SecureRandom secureRandom)",
          "16:         {",
          "17:             if (Arrays.IsNullOrEmpty(encryptedPreMasterSecret))",
          "18:                 throw new ArgumentException(\"cannot be null or empty\", nameof(encryptedPreMasterSecret));",
          "20:             if (!privateKey.IsPrivate)",
          "21:                 throw new ArgumentException(\"must be an RSA private key\", nameof(privateKey));",
          "23:             BigInteger modulus = privateKey.Modulus;",
          "24:             int bitLength = modulus.BitLength;",
          "25:             if (bitLength < 512)",
          "26:                 throw new ArgumentException(\"must be at least 512 bits\", nameof(privateKey));",
          "28:             if ((protocolVersion & 0xFFFF) != protocolVersion)",
          "29:                 throw new ArgumentException(\"must be a 16 bit value\", nameof(protocolVersion));",
          "31:             secureRandom = CryptoServicesRegistrar.GetSecureRandom(secureRandom);",
          "36:             byte[] result = new byte[48];",
          "37:             secureRandom.NextBytes(result);",
          "39:             try",
          "40:             {",
          "41:                 BigInteger input = ConvertInput(modulus, encryptedPreMasterSecret);",
          "42:                 byte[] encoding = RsaBlinded(privateKey, input, secureRandom);",
          "44:                 int pkcs1Length = (bitLength - 1) / 8;",
          "45:                 int plainTextOffset = encoding.Length - 48;",
          "47:                 int badEncodingMask = CheckPkcs1Encoding2(encoding, pkcs1Length, 48);",
          "48:                 int badVersionMask = -(Pack.BE_To_UInt16(encoding, plainTextOffset) ^ protocolVersion) >> 31;",
          "49:                 int fallbackMask = badEncodingMask | badVersionMask;",
          "51:                 for (int i = 0; i < 48; ++i)",
          "52:                 {",
          "53:                     result[i] = (byte)((result[i] & fallbackMask) | (encoding[plainTextOffset + i] & ~fallbackMask));",
          "54:                 }",
          "56:                 Arrays.Fill(encoding, 0x00);",
          "57:             }",
          "58:             catch (Exception)",
          "59:             {",
          "67:             }",
          "69:             return result;",
          "70:         }",
          "72:         private static int CAddTo(int len, int cond, byte[] x, byte[] z)",
          "73:         {",
          "74:             Debug.Assert(cond == 0 || cond == -1);",
          "76:             int c = 0;",
          "77:             for (int i = len - 1; i >= 0; --i)",
          "78:             {",
          "79:                 c += z[i] + (x[i] & cond);",
          "80:                 z[i] = (byte)c;",
          "81:                 c >>= 8;",
          "82:             }",
          "83:             return c;",
          "84:         }",
          "90:         private static int CheckPkcs1Encoding2(byte[] buf, int pkcs1Length, int plaintextLength)",
          "91:         {",
          "93:             int errorSign = pkcs1Length - plaintextLength - 10;",
          "95:             int firstPadPos = buf.Length - pkcs1Length;",
          "96:             int lastPadPos = buf.Length - 1 - plaintextLength;",
          "99:             for (int i = 0; i < firstPadPos; ++i)",
          "100:             {",
          "101:                 errorSign |= -buf[i];",
          "102:             }",
          "105:             errorSign |= -(buf[firstPadPos] ^ 0x02);",
          "108:             for (int i = firstPadPos + 1; i < lastPadPos; ++i)",
          "109:             {",
          "110:                 errorSign |= buf[i] - 1;",
          "111:             }",
          "114:             errorSign |= -buf[lastPadPos];",
          "116:             return errorSign >> 31;",
          "117:         }",
          "119:         private static BigInteger ConvertInput(BigInteger modulus, byte[] input)",
          "120:         {",
          "121:             int inputLimit = (modulus.BitLength + 7) / 8;",
          "123:             if (input.Length <= inputLimit)",
          "124:             {",
          "125:                 BigInteger result = new BigInteger(1, input);",
          "126:                 if (result.CompareTo(modulus) < 0)",
          "127:                     return result;",
          "128:             }",
          "130:             throw new DataLengthException(\"input too large for RSA cipher.\");",
          "131:         }",
          "133:         private static BigInteger Rsa(RsaKeyParameters privateKey, BigInteger input)",
          "134:         {",
          "135:             return input.ModPow(privateKey.Exponent, privateKey.Modulus);",
          "136:         }",
          "138:         private static byte[] RsaBlinded(RsaKeyParameters privateKey, BigInteger input, SecureRandom secureRandom)",
          "139:         {",
          "140:             BigInteger modulus = privateKey.Modulus;",
          "141:             int resultSize = (modulus.BitLength + 7) / 8;",
          "143:             if (!(privateKey is RsaPrivateCrtKeyParameters crtKey))",
          "144:                 return BigIntegers.AsUnsignedByteArray(resultSize, Rsa(privateKey, input));",
          "146:             BigInteger e = crtKey.PublicExponent;",
          "147:             Debug.Assert(e != null);",
          "149:             BigInteger r = BigIntegers.CreateRandomInRange(BigInteger.One, modulus.Subtract(BigInteger.One),",
          "150:                 secureRandom);",
          "151:             BigInteger blind = r.ModPow(e, modulus);",
          "152:             BigInteger unblind = BigIntegers.ModOddInverse(modulus, r);",
          "154:             BigInteger blindedInput = blind.ModMultiply(input, modulus);",
          "155:             BigInteger blindedResult = RsaCrt(crtKey, blindedInput);",
          "156:             BigInteger offsetResult = unblind.Add(BigInteger.One).ModMultiply(blindedResult, modulus);",
          "161:             byte[] blindedResultBytes = BigIntegers.AsUnsignedByteArray(resultSize, blindedResult);",
          "162:             byte[] modulusBytes = BigIntegers.AsUnsignedByteArray(resultSize, modulus);",
          "163:             byte[] resultBytes = BigIntegers.AsUnsignedByteArray(resultSize, offsetResult);",
          "168:             int carry = SubFrom(resultSize, blindedResultBytes, resultBytes);",
          "169:             CAddTo(resultSize, carry, modulusBytes, resultBytes);",
          "171:             return resultBytes;",
          "172:         }",
          "174:         private static BigInteger RsaCrt(RsaPrivateCrtKeyParameters crtKey, BigInteger input)",
          "175:         {",
          "181:             BigInteger e = crtKey.PublicExponent;",
          "182:             Debug.Assert(e != null);",
          "184:             BigInteger p = crtKey.P;",
          "185:             BigInteger q = crtKey.Q;",
          "186:             BigInteger dP = crtKey.DP;",
          "187:             BigInteger dQ = crtKey.DQ;",
          "188:             BigInteger qInv = crtKey.QInv;",
          "191:             BigInteger mP = input.Remainder(p).ModPow(dP, p);",
          "194:             BigInteger mQ = input.Remainder(q).ModPow(dQ, q);",
          "197:             BigInteger h = mP.Subtract(mQ).ModMultiply(qInv, p);",
          "200:             BigInteger m = h.Multiply(q).Add(mQ);",
          "203:             BigInteger check = m.ModPow(e, crtKey.Modulus);",
          "204:             if (!check.Equals(input))",
          "205:                 throw new InvalidOperationException(\"RSA engine faulty decryption/signing detected\");",
          "207:             return m;",
          "208:         }",
          "210:         private static int SubFrom(int len, byte[] x, byte[] z)",
          "211:         {",
          "212:             int c = 0;",
          "213:             for (int i = len - 1; i >= 0; --i)",
          "214:             {",
          "215:                 c += z[i] - x[i];",
          "216:                 z[i] = (byte)c;",
          "217:                 c >>= 8;",
          "218:             }",
          "219:             return c;",
          "220:         }",
          "221:     }",
          "222: }",
          "",
          "---------------"
        ],
        "crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs||crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs": [
          "File: crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs -> crypto/src/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeffusing System;",
          "3: using Org.BouncyCastle.Crypto;",
          "6: using Org.BouncyCastle.Crypto.Parameters;",
          "10: namespace Org.BouncyCastle.Tls.Crypto.Impl.BC",
          "11: {",
          "",
          "[Removed Lines]",
          "4: using Org.BouncyCastle.Crypto.Encodings;",
          "5: using Org.BouncyCastle.Crypto.Engines;",
          "7: using Org.BouncyCastle.Security;",
          "8: using Org.BouncyCastle.Utilities;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:                 throw new ArgumentException(\"'privateKey' type not supported: \" + privateKey.GetType().FullName);",
          "41:             }",
          "46:         }",
          "53:         public virtual TlsSecret Decrypt(TlsCryptoParameters cryptoParams, byte[] ciphertext)",
          "54:         {",
          "",
          "[Removed Lines]",
          "43:             this.m_crypto = crypto;",
          "44:             this.m_certificate = certificate;",
          "45:             this.m_privateKey = privateKey;",
          "48:         public virtual Certificate Certificate",
          "49:         {",
          "50:             get { return m_certificate; }",
          "51:         }",
          "",
          "[Added Lines]",
          "39:             m_crypto = crypto;",
          "40:             m_certificate = certificate;",
          "41:             m_privateKey = privateKey;",
          "44:         public virtual Certificate Certificate => m_certificate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:         protected virtual TlsSecret SafeDecryptPreMasterSecret(TlsCryptoParameters cryptoParams,",
          "64:             RsaKeyParameters rsaServerPrivateKey, byte[] encryptedPreMasterSecret)",
          "65:         {",
          "71:             ProtocolVersion expectedVersion = cryptoParams.RsaPreMasterSecretVersion;",
          "116:             return m_crypto.CreateSecret(M);",
          "117:         }",
          "",
          "[Removed Lines]",
          "66:             SecureRandom secureRandom = m_crypto.SecureRandom;",
          "76:             byte[] fallback = new byte[48];",
          "77:             secureRandom.NextBytes(fallback);",
          "79:             byte[] M = Arrays.Clone(fallback);",
          "80:             try",
          "81:             {",
          "82:                 Pkcs1Encoding encoding = new Pkcs1Encoding(new RsaBlindedEngine(), fallback);",
          "83:                 encoding.Init(false, new ParametersWithRandom(rsaServerPrivateKey, secureRandom));",
          "85:                 M = encoding.ProcessBlock(encryptedPreMasterSecret, 0, encryptedPreMasterSecret.Length);",
          "86:             }",
          "87:             catch (Exception)",
          "88:             {",
          "97:             }",
          "105:             int mask = (expectedVersion.MajorVersion ^ M[0])",
          "106:                      | (expectedVersion.MinorVersion ^ M[1]);",
          "109:             mask = (mask - 1) >> 31;",
          "111:             for (int i = 0; i < 48; i++)",
          "112:             {",
          "113:                 M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "114:             }",
          "",
          "[Added Lines]",
          "61:             byte[] M = Org.BouncyCastle.Crypto.Tls.TlsRsaKeyExchange.DecryptPreMasterSecret(encryptedPreMasterSecret,",
          "62:                 rsaServerPrivateKey, expectedVersion.FullVersion, m_crypto.SecureRandom);",
          "",
          "---------------"
        ]
      }
    }
  ]
}