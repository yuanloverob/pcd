{
  "cve_id": "CVE-2022-4742",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in json-pointer up to 0.6.1. Affected by this issue is the function set of the file index.js. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. Upgrading to version 0.6.2 is able to address this issue. The patch is identified as 859c9984b6c407fc2d5a0a7e47c7274daa681941. It is recommended to upgrade the affected component. VDB-216794 is the identifier assigned to this vulnerability.",
  "repo": "manuelstofer/json-pointer",
  "patch_hash": "859c9984b6c407fc2d5a0a7e47c7274daa681941",
  "patch_info": {
    "commit_hash": "859c9984b6c407fc2d5a0a7e47c7274daa681941",
    "repo": "manuelstofer/json-pointer",
    "commit_url": "https://github.com/manuelstofer/json-pointer/commit/859c9984b6c407fc2d5a0a7e47c7274daa681941",
    "files": [
      "index.js",
      "test/test.js"
    ],
    "message": "Merge pull request #36 from hhomar/fix-prototype-pollution\n\nFix prototype pollution when pointer is not a string or number",
    "before_after_code_files": [
      "index.js||index.js",
      "test/test.js||test/test.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:     for (var i = 0; i < refTokens.length - 1; ++i) {",
      "77:         var tok = refTokens[i];",
      "78:         if (tok === \"__proto__\" || tok === \"constructor\" || tok === \"prototype\") {",
      "79:             continue",
      "80:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:         if (typeof tok !== 'string' && typeof tok !== 'number') {",
      "79:           tok = String(tok)",
      "80:         }",
      "",
      "---------------"
    ],
    "test/test.js||test/test.js": [
      "File: test/test.js -> test/test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "446:         expect(obj2.polluted).to.be.undefined();",
      "447:     });",
      "449:     it('should not set prototype', function () {",
      "450:         var obj = {}, objPointer = pointer(obj);",
      "451:         expect(obj.polluted).to.be.undefined();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "449:     it('should not set __proto__ (array)', function () {",
      "450:         var obj = {}, objPointer = pointer(obj);",
      "451:         expect(obj.polluted).to.be.undefined();",
      "452:         objPointer.set([['__proto__'], 'polluted'], true);",
      "453:         expect(obj.polluted).to.be.undefined();",
      "454:         var obj2 = {};",
      "455:         expect(obj2.polluted).to.be.undefined();",
      "456:     });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47dae1d369a25bd9bdcdbc963b8699b89a882c81",
      "candidate_info": {
        "commit_hash": "47dae1d369a25bd9bdcdbc963b8699b89a882c81",
        "repo": "manuelstofer/json-pointer",
        "commit_url": "https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81",
        "files": [
          "index.js",
          "test/test.js"
        ],
        "message": "Fix prototype pollution when pointer is not a string or number",
        "before_after_code_files": [
          "index.js||index.js",
          "test/test.js||test/test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/manuelstofer/json-pointer/pull/36"
        ],
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test/test.js||test/test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test/test.js||test/test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     for (var i = 0; i < refTokens.length - 1; ++i) {",
          "77:         var tok = refTokens[i];",
          "78:         if (tok === \"__proto__\" || tok === \"constructor\" || tok === \"prototype\") {",
          "79:             continue",
          "80:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         if (typeof tok !== 'string' && typeof tok !== 'number') {",
          "79:           tok = String(tok)",
          "80:         }",
          "",
          "---------------"
        ],
        "test/test.js||test/test.js": [
          "File: test/test.js -> test/test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:         expect(obj2.polluted).to.be.undefined();",
          "447:     });",
          "449:     it('should not set prototype', function () {",
          "450:         var obj = {}, objPointer = pointer(obj);",
          "451:         expect(obj.polluted).to.be.undefined();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:     it('should not set __proto__ (array)', function () {",
          "450:         var obj = {}, objPointer = pointer(obj);",
          "451:         expect(obj.polluted).to.be.undefined();",
          "452:         objPointer.set([['__proto__'], 'polluted'], true);",
          "453:         expect(obj.polluted).to.be.undefined();",
          "454:         var obj2 = {};",
          "455:         expect(obj2.polluted).to.be.undefined();",
          "456:     });",
          "",
          "---------------"
        ]
      }
    }
  ]
}