{
  "cve_id": "CVE-2022-45688",
  "cve_desc": "A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.",
  "repo": "dromara/hutool",
  "patch_hash": "6a2b585de0a380e8c12016dbaa1620b69be11b8c",
  "patch_info": {
    "commit_hash": "6a2b585de0a380e8c12016dbaa1620b69be11b8c",
    "repo": "dromara/hutool",
    "commit_url": "https://github.com/dromara/hutool/commit/6a2b585de0a380e8c12016dbaa1620b69be11b8c",
    "files": [
      "CHANGELOG.md",
      "hutool-json/src/main/java/cn/hutool/json/XML.java",
      "hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java",
      "hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java",
      "hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java"
    ],
    "message": "\u589e\u52a0ParseConfig\uff0c\u901a\u8fc7\u589e\u52a0maxNestingDepth\u53c2\u6570\u907f\u514dStackOverflowError\u95ee\u9898\uff0c\u4fee\u590dCVE-2022-45688\u6f0f\u6d1e",
    "before_after_code_files": [
      "hutool-json/src/main/java/cn/hutool/json/XML.java||hutool-json/src/main/java/cn/hutool/json/XML.java",
      "hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java||hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java",
      "hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java||hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java",
      "hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java||hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java"
    ]
  },
  "patch_diff": {
    "hutool-json/src/main/java/cn/hutool/json/XML.java||hutool-json/src/main/java/cn/hutool/json/XML.java": [
      "File: hutool-json/src/main/java/cn/hutool/json/XML.java -> hutool-json/src/main/java/cn/hutool/json/XML.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import cn.hutool.core.util.CharUtil;",
      "4: import cn.hutool.json.xml.JSONXMLParser;",
      "5: import cn.hutool.json.xml.JSONXMLSerializer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import cn.hutool.json.xml.ParseConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86:   return toJSONObject(new JSONObject(), string, keepStrings);",
      "87:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:  public static JSONObject toJSONObject(final String string, final ParseConfig parseConfig) throws JSONException {",
      "103:   return toJSONObject(new JSONObject(), string, parseConfig);",
      "104:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "102:   return jo;",
      "103:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:  public static JSONObject toJSONObject(final JSONObject jo, final String xmlStr, final ParseConfig parseConfig) throws JSONException {",
      "134:   JSONXMLParser.parseJSONObject(jo, xmlStr, parseConfig);",
      "135:   return jo;",
      "136:  }",
      "",
      "---------------"
    ],
    "hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java||hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java": [
      "File: hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java -> hutool-json/src/main/java/cn/hutool/json/xml/JSONXMLParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:  public static void parseJSONObject(JSONObject jo, String xmlStr, boolean keepStrings) throws JSONException {",
      "28:   while (x.more() && x.skipPast(\"<\")) {",
      "30:   }",
      "31:  }",
      "",
      "[Removed Lines]",
      "27:   XMLTokener x = new XMLTokener(xmlStr, jo.getConfig());",
      "29:    parse(x, jo, null, keepStrings);",
      "",
      "[Added Lines]",
      "27:   parseJSONObject(jo, xmlStr, ParseConfig.of().setKeepStrings(keepStrings));",
      "28:  }",
      "39:  public static void parseJSONObject(final JSONObject jo, final String xmlStr, final ParseConfig parseConfig) throws JSONException {",
      "40:   final XMLTokener x = new XMLTokener(xmlStr, jo.getConfig());",
      "42:    parse(x, jo, null, parseConfig, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:   char c;",
      "44:   int i;",
      "45:   JSONObject jsonobject;",
      "",
      "[Removed Lines]",
      "42:  private static boolean parse(XMLTokener x, JSONObject context, String name, boolean keepStrings) throws JSONException {",
      "",
      "[Added Lines]",
      "57:  private static boolean parse(XMLTokener x, JSONObject context, String name, ParseConfig parseConfig, int currentNestingDepth) throws JSONException {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:    tagName = (String) token;",
      "113:    token = null;",
      "114:    jsonobject = new JSONObject();",
      "115:    for (; ; ) {",
      "116:     if (token == null) {",
      "117:      token = x.nextToken();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "130:    final boolean keepStrings = parseConfig.isKeepStrings();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "155:        return false;",
      "156:       } else if (token instanceof String) {",
      "157:        string = (String) token;",
      "159:         jsonobject.accumulate(\"content\", keepStrings ? token : InternalJSONUtil.stringToValue(string));",
      "160:        }",
      "162:       } else if (token == XML.LT) {",
      "166:          context.accumulate(tagName, \"\");",
      "167:         } else if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {",
      "168:          context.accumulate(tagName, jsonobject.get(\"content\"));",
      "",
      "[Removed Lines]",
      "158:        if (string.length() > 0) {",
      "164:        if (parse(x, jsonobject, tagName, keepStrings)) {",
      "165:         if (jsonobject.size() == 0) {",
      "",
      "[Added Lines]",
      "174:        if (!string.isEmpty()) {",
      "181:        final int maxNestingDepth = parseConfig.getMaxNestingDepth();",
      "182:        if (maxNestingDepth > -1 && currentNestingDepth >= maxNestingDepth) {",
      "183:         throw x.syntaxError(\"Maximum nesting depth of \" + maxNestingDepth + \" reached\");",
      "184:        }",
      "187:        if (parse(x, jsonobject, tagName, parseConfig, currentNestingDepth + 1)) {",
      "188:         if (jsonobject.isEmpty()) {",
      "",
      "---------------"
    ],
    "hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java||hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java": [
      "File: hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java -> hutool-json/src/main/java/cn/hutool/json/xml/ParseConfig.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: package cn.hutool.json.xml;",
      "15: import java.io.Serializable;",
      "23: public class ParseConfig implements Serializable {",
      "24:  private static final long serialVersionUID = 1L;",
      "29:  public static final int DEFAULT_MAXIMUM_NESTING_DEPTH = 512;",
      "36:  public static ParseConfig of() {",
      "37:   return new ParseConfig();",
      "38:  }",
      "43:  private boolean keepStrings;",
      "47:  private int maxNestingDepth = -1;",
      "54:  public boolean isKeepStrings() {",
      "55:   return keepStrings;",
      "56:  }",
      "64:  public ParseConfig setKeepStrings(final boolean keepStrings) {",
      "65:   this.keepStrings = keepStrings;",
      "66:   return this;",
      "67:  }",
      "74:  public int getMaxNestingDepth() {",
      "75:   return maxNestingDepth;",
      "76:  }",
      "84:  public ParseConfig setMaxNestingDepth(final int maxNestingDepth) {",
      "85:   this.maxNestingDepth = maxNestingDepth;",
      "86:   return this;",
      "87:  }",
      "88: }",
      "",
      "---------------"
    ],
    "hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java||hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java": [
      "File: hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java -> hutool-json/src/test/java/cn/hutool/json/xml/Issue2748Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package cn.hutool.json.xml;",
      "3: import cn.hutool.core.util.StrUtil;",
      "4: import cn.hutool.json.JSONException;",
      "5: import cn.hutool.json.XML;",
      "6: import org.junit.Assert;",
      "7: import org.junit.Test;",
      "9: public class Issue2748Test {",
      "11:  @Test",
      "12:  public void toJSONObjectTest() {",
      "13:   final String s = StrUtil.repeat(\"<a>\", 600);",
      "15:   Assert.assertThrows(JSONException.class, () -> {",
      "16:    XML.toJSONObject(s, ParseConfig.of().setMaxNestingDepth(512));",
      "17:   });",
      "18:  }",
      "19: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69206406d7e2da5c75bf4ced393e17bd3074b0de",
      "candidate_info": {
        "commit_hash": "69206406d7e2da5c75bf4ced393e17bd3074b0de",
        "repo": "dromara/hutool",
        "commit_url": "https://github.com/dromara/hutool/commit/69206406d7e2da5c75bf4ced393e17bd3074b0de",
        "files": [
          "hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java"
        ],
        "message": "fix code",
        "before_after_code_files": [
          "hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java||hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java||hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java",
          "hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java||hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java": [
          "File: hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java -> hutool-core/src/main/java/org/dromara/hutool/core/xml/XmlConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: package org.dromara.hutool.core.xml;",
          "15: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import org.dromara.hutool.core.text.CharUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:  public static final String AMP = \"&amp;\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:  public static final Character C_AMP = CharUtil.AMP;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:  public static final String APOS = \"&apos;\";",
          "47:  public static final String LT = \"&lt;\";",
          "52:  public static final String GT = \"&gt;\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  public static final Character C_APOS = CharUtil.SINGLE_QUOTE;",
          "62:  public static final Character C_LT = '<';",
          "72:  public static final Character C_GT = '>';",
          "77:  public static final Character C_BANG = '!';",
          "82:  public static final Character C_QUEST = '?';",
          "",
          "---------------"
        ],
        "hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java||hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java": [
          "File: hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java -> hutool-json/src/main/java/org/dromara/hutool/json/mapper/JSONObjectMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.dromara.hutool.json.xml.JSONXMLUtil;",
          "30: import org.dromara.hutool.json.serialize.GlobalSerializeMapping;",
          "31: import org.dromara.hutool.json.serialize.JSONSerializer;",
          "33: import java.io.InputStream;",
          "34: import java.io.Reader;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.dromara.hutool.json.xml.ParseConfig;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:   final String jsonStr = StrUtil.trim(source);",
          "171:   if (StrUtil.startWith(jsonStr, '<')) {",
          "174:    return;",
          "175:   }",
          "176:   mapFromTokener(new JSONTokener(StrUtil.trim(source), jsonObject.config()), jsonObject);",
          "",
          "[Removed Lines]",
          "173:    JSONXMLUtil.toJSONObject(jsonObject, jsonStr, false);",
          "",
          "[Added Lines]",
          "174:    JSONXMLUtil.toJSONObject(jsonStr, jsonObject, ParseConfig.of());",
          "",
          "---------------"
        ],
        "hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java": [
          "File: hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java -> hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: package org.dromara.hutool.json.xml;",
          "15: import org.dromara.hutool.core.text.StrUtil;",
          "16: import org.dromara.hutool.json.JSONException;",
          "17: import org.dromara.hutool.json.JSONObject;",
          "18: import org.dromara.hutool.json.mapper.JSONValueMapper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import org.dromara.hutool.core.text.CharUtil;",
          "17: import org.dromara.hutool.core.xml.XmlConstants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   final XMLTokener x = new XMLTokener(xmlStr, jo.config());",
          "39:   while (x.more() && x.skipPast(\"<\")) {",
          "41:   }",
          "42:  }",
          "54:   final char c;",
          "55:   int i;",
          "56:   final JSONObject jsonobject;",
          "",
          "[Removed Lines]",
          "37:  public static void parseJSONObject(final JSONObject jo, final String xmlStr, final boolean keepStrings) throws JSONException {",
          "40:    parse(x, jo, null, keepStrings);",
          "53:  private static boolean parse(final XMLTokener x, final JSONObject context, final String name, final boolean keepStrings) throws JSONException {",
          "",
          "[Added Lines]",
          "39:  public static void parseJSONObject(final String xmlStr, final JSONObject jo, final ParseConfig parseConfig) throws JSONException {",
          "42:    parse(x, jo, null, parseConfig);",
          "55:  private static boolean parse(final XMLTokener x, final JSONObject context, final String name, final ParseConfig parseConfig) throws JSONException {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   token = x.nextToken();",
          "64:    c = x.next();",
          "65:    if (c == '-') {",
          "66:     if (x.next() == '-') {",
          "",
          "[Removed Lines]",
          "63:   if (token == JSONXMLUtil.BANG) {",
          "",
          "[Added Lines]",
          "65:   if (token == XmlConstants.C_BANG) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     token = x.nextMeta();",
          "87:     if (token == null) {",
          "88:      throw x.syntaxError(\"Missing '>' after '<!'.\");",
          "90:      i += 1;",
          "92:      i -= 1;",
          "93:     }",
          "94:    } while (i > 0);",
          "95:    return false;",
          "99:    x.skipPast(\"?>\");",
          "100:    return false;",
          "",
          "[Removed Lines]",
          "89:     } else if (token == JSONXMLUtil.LT) {",
          "91:     } else if (token == JSONXMLUtil.GT) {",
          "96:   } else if (token == JSONXMLUtil.QUEST) {",
          "101:   } else if (token == JSONXMLUtil.SLASH) {",
          "",
          "[Added Lines]",
          "91:     } else if (token == XmlConstants.C_LT) {",
          "93:     } else if (token == XmlConstants.C_GT) {",
          "98:   } else if (token == XmlConstants.C_QUEST) {",
          "103:   } else if (token == Character.valueOf(CharUtil.SLASH)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:    if (!token.equals(name)) {",
          "110:     throw x.syntaxError(\"Mismatched \" + name + \" and \" + token);",
          "111:    }",
          "113:     throw x.syntaxError(\"Misshaped close tag\");",
          "114:    }",
          "115:    return true;",
          "",
          "[Removed Lines]",
          "112:    if (x.nextToken() != JSONXMLUtil.GT) {",
          "",
          "[Added Lines]",
          "114:    if (x.nextToken() != XmlConstants.C_GT) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:    tagName = (String) token;",
          "124:    token = null;",
          "125:    jsonobject = new JSONObject();",
          "126:    for (; ; ) {",
          "127:     if (token == null) {",
          "128:      token = x.nextToken();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:    final boolean keepStrings = parseConfig.isKeepStrings();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "132:     if (token instanceof String) {",
          "133:      string = (String) token;",
          "134:      token = x.nextToken();",
          "136:       token = x.nextToken();",
          "137:       if (!(token instanceof String)) {",
          "138:        throw x.syntaxError(\"Missing value\");",
          "",
          "[Removed Lines]",
          "135:      if (token == JSONXMLUtil.EQ) {",
          "",
          "[Added Lines]",
          "138:      if (token == Character.valueOf(CharUtil.EQUAL)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "143:       jsonobject.append(string, \"\");",
          "144:      }",
          "149:       throw x.syntaxError(\"Misshaped tag\");",
          "150:      }",
          "151:      if (!jsonobject.isEmpty()) {",
          "",
          "[Removed Lines]",
          "146:     } else if (token == JSONXMLUtil.SLASH) {",
          "148:      if (x.nextToken() != JSONXMLUtil.GT) {",
          "",
          "[Added Lines]",
          "149:     } else if (token == Character.valueOf(CharUtil.SLASH)) {",
          "151:      if (x.nextToken() != XmlConstants.C_GT) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "155:      }",
          "156:      return false;",
          "160:      for (; ; ) {",
          "161:       token = x.nextContent();",
          "",
          "[Removed Lines]",
          "158:     } else if (token == JSONXMLUtil.GT) {",
          "",
          "[Added Lines]",
          "161:     } else if (token == XmlConstants.C_GT) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "170:         jsonobject.append(\"content\", keepStrings ? token : JSONValueMapper.toJsonValue(string));",
          "171:        }",
          "176:         if (jsonobject.isEmpty()) {",
          "177:          context.append(tagName, StrUtil.EMPTY);",
          "178:         } else if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {",
          "",
          "[Removed Lines]",
          "173:       } else if (token == JSONXMLUtil.LT) {",
          "175:        if (parse(x, jsonobject, tagName, keepStrings)) {",
          "",
          "[Added Lines]",
          "176:       } else if (token == XmlConstants.C_LT) {",
          "178:        if (parse(x, jsonobject, tagName, parseConfig)) {",
          "",
          "---------------"
        ],
        "hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java": [
          "File: hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java -> hutool-json/src/main/java/org/dromara/hutool/json/xml/JSONXMLUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: package org.dromara.hutool.json.xml;",
          "16: import org.dromara.hutool.json.JSONException;",
          "17: import org.dromara.hutool.json.JSONObject;",
          "",
          "[Removed Lines]",
          "15: import org.dromara.hutool.core.text.CharUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: public class JSONXMLUtil {",
          "",
          "[Removed Lines]",
          "31:  public static final Character AMP = CharUtil.AMP;",
          "36:  public static final Character APOS = CharUtil.SINGLE_QUOTE;",
          "41:  public static final Character BANG = '!';",
          "46:  public static final Character EQ = '=';",
          "51:  public static final Character GT = '>';",
          "56:  public static final Character LT = '<';",
          "61:  public static final Character QUEST = '?';",
          "66:  public static final Character QUOT = CharUtil.DOUBLE_QUOTES;",
          "71:  public static final Character SLASH = CharUtil.SLASH;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:  public static JSONObject toJSONObject(final String string) throws JSONException {",
          "84:  }",
          "",
          "[Removed Lines]",
          "83:   return toJSONObject(string, false);",
          "",
          "[Added Lines]",
          "37:   return toJSONObject(string, ParseConfig.of());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:  }",
          "",
          "[Removed Lines]",
          "97:  public static JSONObject toJSONObject(final String string, final boolean keepStrings) throws JSONException {",
          "98:   return toJSONObject(new JSONObject(), string, keepStrings);",
          "",
          "[Added Lines]",
          "51:  public static JSONObject toJSONObject(final String string, final ParseConfig parseConfig) throws JSONException {",
          "52:   return toJSONObject(string, new JSONObject(), parseConfig);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:   return jo;",
          "115:  }",
          "",
          "[Removed Lines]",
          "112:  public static JSONObject toJSONObject(final JSONObject jo, final String xmlStr, final boolean keepStrings) throws JSONException {",
          "113:   JSONXMLParser.parseJSONObject(jo, xmlStr, keepStrings);",
          "",
          "[Added Lines]",
          "66:  public static JSONObject toJSONObject(final String xmlStr, final JSONObject jo, final ParseConfig parseConfig) throws JSONException {",
          "67:   JSONXMLParser.parseJSONObject(xmlStr, jo, parseConfig);",
          "",
          "---------------"
        ],
        "hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java": [
          "File: hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java -> hutool-json/src/main/java/org/dromara/hutool/json/xml/ParseConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: package org.dromara.hutool.json.xml;",
          "15: import java.io.Serializable;",
          "23: public class ParseConfig implements Serializable {",
          "24:  private static final long serialVersionUID = 1L;",
          "29:  public static final int DEFAULT_MAXIMUM_NESTING_DEPTH = 512;",
          "36:  public static ParseConfig of() {",
          "37:   return new ParseConfig();",
          "38:  }",
          "43:  private boolean keepStrings;",
          "47:  private int maxNestingDepth;",
          "54:  public boolean isKeepStrings() {",
          "55:   return keepStrings;",
          "56:  }",
          "64:  public ParseConfig setKeepStrings(final boolean keepStrings) {",
          "65:   this.keepStrings = keepStrings;",
          "66:   return this;",
          "67:  }",
          "74:  public int getMaxNestingDepth() {",
          "75:   return maxNestingDepth;",
          "76:  }",
          "84:  public ParseConfig setMaxNestingDepth(final int maxNestingDepth) {",
          "85:   this.maxNestingDepth = maxNestingDepth;",
          "86:   return this;",
          "87:  }",
          "88: }",
          "",
          "---------------"
        ],
        "hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java||hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java": [
          "File: hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java -> hutool-json/src/main/java/org/dromara/hutool/json/xml/XMLTokener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: package org.dromara.hutool.json.xml;",
          "15: import org.dromara.hutool.json.JSONConfig;",
          "16: import org.dromara.hutool.json.JSONException;",
          "17: import org.dromara.hutool.json.JSONTokener;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import org.dromara.hutool.core.text.CharUtil;",
          "16: import org.dromara.hutool.core.xml.XmlConstants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:  static {",
          "33:   entity = new java.util.HashMap<>(8);",
          "39:  }",
          "",
          "[Removed Lines]",
          "34:   entity.put(\"amp\", JSONXMLUtil.AMP);",
          "35:   entity.put(\"apos\", JSONXMLUtil.APOS);",
          "36:   entity.put(\"gt\", JSONXMLUtil.GT);",
          "37:   entity.put(\"lt\", JSONXMLUtil.LT);",
          "38:   entity.put(\"quot\", JSONXMLUtil.QUOT);",
          "",
          "[Added Lines]",
          "36:   entity.put(\"amp\", XmlConstants.C_AMP);",
          "37:   entity.put(\"apos\", XmlConstants.C_APOS);",
          "38:   entity.put(\"gt\", XmlConstants.C_GT);",
          "39:   entity.put(\"lt\", XmlConstants.C_LT);",
          "40:   entity.put(\"quot\", CharUtil.DOUBLE_QUOTES);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:    return null;",
          "90:   }",
          "91:   if (c == '<') {",
          "93:   }",
          "94:   sb = new StringBuilder();",
          "95:   for (; ; ) {",
          "",
          "[Removed Lines]",
          "92:    return JSONXMLUtil.LT;",
          "",
          "[Added Lines]",
          "94:    return XmlConstants.C_LT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "175:    case 0:",
          "176:     throw syntaxError(\"Misshaped meta tag\");",
          "177:    case '<':",
          "179:    case '>':",
          "181:    case '/':",
          "183:    case '=':",
          "185:    case '!':",
          "187:    case '?':",
          "189:    case '\"':",
          "190:    case '\\'':",
          "191:     q = c;",
          "",
          "[Removed Lines]",
          "178:     return JSONXMLUtil.LT;",
          "180:     return JSONXMLUtil.GT;",
          "182:     return JSONXMLUtil.SLASH;",
          "184:     return JSONXMLUtil.EQ;",
          "186:     return JSONXMLUtil.BANG;",
          "188:     return JSONXMLUtil.QUEST;",
          "",
          "[Added Lines]",
          "180:     return XmlConstants.C_LT;",
          "182:     return XmlConstants.C_GT;",
          "184:     return CharUtil.SLASH;",
          "186:     return CharUtil.EQUAL;",
          "188:     return XmlConstants.C_BANG;",
          "190:     return XmlConstants.C_QUEST;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "242:    case '<':",
          "243:     throw syntaxError(\"Misplaced '<'\");",
          "244:    case '>':",
          "246:    case '/':",
          "248:    case '=':",
          "250:    case '!':",
          "252:    case '?':",
          "",
          "[Removed Lines]",
          "245:     return JSONXMLUtil.GT;",
          "247:     return JSONXMLUtil.SLASH;",
          "249:     return JSONXMLUtil.EQ;",
          "251:     return JSONXMLUtil.BANG;",
          "253:     return JSONXMLUtil.QUEST;",
          "",
          "[Added Lines]",
          "247:     return XmlConstants.C_GT;",
          "249:     return CharUtil.SLASH;",
          "251:     return CharUtil.EQUAL;",
          "253:     return XmlConstants.C_BANG;",
          "255:     return XmlConstants.C_QUEST;",
          "",
          "---------------"
        ]
      }
    }
  ]
}