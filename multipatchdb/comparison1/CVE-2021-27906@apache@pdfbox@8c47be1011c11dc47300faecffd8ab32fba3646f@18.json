{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e06f6af1580203599e2112c8e7f72d380ee8f76",
      "candidate_info": {
        "commit_hash": "1e06f6af1580203599e2112c8e7f72d380ee8f76",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1e06f6af1580203599e2112c8e7f72d380ee8f76",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java"
        ],
        "message": "PDFBOX-5056: fix double-checked locking, as suggested by Mike Kaplinskiy\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884866 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     protected final Map<Integer, String> codeToName = new HashMap<Integer, String>(250);",
          "65:     protected final Map<String, Integer> inverted = new HashMap<String, Integer>(250);",
          "",
          "[Removed Lines]",
          "66:     private Set<String> names;",
          "",
          "[Added Lines]",
          "66:     private volatile Set<String> names;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         {",
          "141:             synchronized(this)",
          "142:             {",
          "148:             }",
          "150:         }",
          "",
          "[Removed Lines]",
          "144:                 Set<String> tmpSet = new HashSet<String>(codeToName.values());",
          "146:                 names = tmpSet;",
          "",
          "[Added Lines]",
          "143:                 if (names == null)",
          "144:                 {",
          "146:                     Set<String> tmpSet = new HashSet<String>(codeToName.values());",
          "148:                     names = tmpSet;",
          "149:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd5777a186a384b6e02ff6253636fd348fbb894e",
      "candidate_info": {
        "commit_hash": "bd5777a186a384b6e02ff6253636fd348fbb894e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/bd5777a186a384b6e02ff6253636fd348fbb894e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ],
        "message": "PDFBOX-4421: use switch statement\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881801 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:             }",
          "382:             byte[] mdResult;",
          "384:             {",
          "400:             }",
          "402:             this.encryptionKey = new byte[this.keyLength/8];",
          "",
          "[Removed Lines]",
          "383:             if (version == 4)",
          "385:                 dictionary.setSubFilter(SUBFILTER5);",
          "386:                 mdResult = MessageDigests.getSHA1().digest(shaInput);",
          "387:                 prepareEncryptionDictAES(dictionary, COSName.AESV2, recipientsFields);",
          "388:             }",
          "389:             else if (version == 5)",
          "390:             {",
          "391:                 dictionary.setSubFilter(SUBFILTER5);",
          "392:                 mdResult = MessageDigests.getSHA256().digest(shaInput);",
          "393:                 prepareEncryptionDictAES(dictionary, COSName.AESV3, recipientsFields);",
          "394:             }",
          "395:             else",
          "396:             {",
          "397:                 dictionary.setSubFilter(SUBFILTER4);",
          "398:                 mdResult = MessageDigests.getSHA1().digest(shaInput);",
          "399:                 dictionary.setRecipients(recipientsFields);",
          "",
          "[Added Lines]",
          "383:             switch (version)",
          "385:                 case 4:",
          "386:                     dictionary.setSubFilter(SUBFILTER5);",
          "387:                     mdResult = MessageDigests.getSHA1().digest(shaInput);",
          "388:                     prepareEncryptionDictAES(dictionary, COSName.AESV2, recipientsFields);",
          "389:                     break;",
          "390:                 case 5:",
          "391:                     dictionary.setSubFilter(SUBFILTER5);",
          "392:                     mdResult = MessageDigests.getSHA256().digest(shaInput);",
          "393:                     prepareEncryptionDictAES(dictionary, COSName.AESV3, recipientsFields);",
          "394:                     break;",
          "395:                 default:",
          "396:                     dictionary.setSubFilter(SUBFILTER4);",
          "397:                     mdResult = MessageDigests.getSHA1().digest(shaInput);",
          "398:                     dictionary.setRecipients(recipientsFields);",
          "399:                     break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "134e5ee4ca911e852ead1395cf9b4569b41cd816",
      "candidate_info": {
        "commit_hash": "134e5ee4ca911e852ead1395cf9b4569b41cd816",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/134e5ee4ca911e852ead1395cf9b4569b41cd816",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java"
        ],
        "message": "PDFBOX-4892: remove null tests because these values can't be null here\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881463 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:             assertTrue(test1.equals(test2));",
          "66:             assertTrue(test2.equals(test3));",
          "67:             assertTrue(test1.equals(test3));",
          "73:             COSInteger test4 = COSInteger.get(i + 1);",
          "74:             assertFalse(test4.equals(test1));",
          "",
          "[Removed Lines]",
          "69:             assertFalse(test1 == null);",
          "70:             assertFalse(test2 == null);",
          "71:             assertFalse(test3 == null);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:             assertTrue(x1.equals(y1));",
          "315:             assertFalse(y1.equals(x2));",
          "316:             assertFalse(x1.equals(x2));",
          "323:         }",
          "324:     }",
          "",
          "[Removed Lines]",
          "319:             assertFalse(x1 == null);",
          "320:             assertFalse(y1 == null);",
          "321:             assertFalse(z1 == null);",
          "322:             assertFalse(x2 == null);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49c36dcf47b44b651d7de7027a0210840f65b4f4",
      "candidate_info": {
        "commit_hash": "49c36dcf47b44b651d7de7027a0210840f65b4f4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/49c36dcf47b44b651d7de7027a0210840f65b4f4",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java",
          "examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java",
          "examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java"
        ],
        "message": "PDFBOX-5070: refactor to keep TimeStampToken a bit longer\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1885722 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java",
          "examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java||examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java",
          "examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java||examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignedTimestampBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.pdfbox.io.IOUtils;",
          "23: import org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface;",
          "25: public abstract class CreateSignedTimestampBase implements SignatureInterface",
          "26: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.bouncycastle.tsp.TimeStampToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     @Override",
          "52:     public byte[] sign(InputStream content) throws IOException",
          "53:     {",
          "55:     }",
          "56: }",
          "",
          "[Removed Lines]",
          "54:         return getTsaClient().getTimeStampToken(IOUtils.toByteArray(content));",
          "",
          "[Added Lines]",
          "55:         TimeStampToken timeStampToken = getTsaClient().getTimeStampToken(IOUtils.toByteArray(content));",
          "56:         return timeStampToken.getEncoded();",
          "",
          "---------------"
        ],
        "examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java||examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     {",
          "79:         digest.reset();",
          "80:         byte[] hash = digest.digest(content);",
          "",
          "[Removed Lines]",
          "77:     public byte[] getTimeStampToken(byte[] content) throws IOException",
          "",
          "[Added Lines]",
          "77:     public TimeStampToken getTimeStampToken(byte[] content) throws IOException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         {",
          "103:             throw new IOException(e);",
          "104:         }",
          "108:         {",
          "110:             throw new IOException(\"Response from \" + url +",
          "",
          "[Removed Lines]",
          "106:         TimeStampToken token = response.getTimeStampToken();",
          "107:         if (token == null)",
          "",
          "[Added Lines]",
          "106:         TimeStampToken timeStampToken = response.getTimeStampToken();",
          "107:         if (timeStampToken == null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:                     \" (\" + response.getStatusString() + \")\");",
          "113:         }",
          "116:     }",
          "",
          "[Removed Lines]",
          "115:         return token.getEncoded();",
          "",
          "[Added Lines]",
          "115:         return timeStampToken;",
          "",
          "---------------"
        ],
        "examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java||examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.bouncycastle.cms.CMSSignedData;",
          "40: import org.bouncycastle.cms.SignerInformation;",
          "41: import org.bouncycastle.cms.SignerInformationStore;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import org.bouncycastle.tsp.TimeStampToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     public byte[] getTimeStampToken(InputStream content) throws IOException",
          "76:     {",
          "78:     }",
          "",
          "[Removed Lines]",
          "77:         return tsaClient.getTimeStampToken(IOUtils.toByteArray(content));",
          "",
          "[Added Lines]",
          "78:         TimeStampToken timeStampToken = tsaClient.getTimeStampToken(IOUtils.toByteArray(content));",
          "79:         return timeStampToken.getEncoded();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:             vector = unsignedAttributes.toASN1EncodableVector();",
          "120:         }",
          "123:         ASN1ObjectIdentifier oid = PKCSObjectIdentifiers.id_aa_signatureTimeStampToken;",
          "124:         ASN1Encodable signatureTimeStamp = new Attribute(oid,",
          "125:                 new DERSet(ASN1Primitive.fromByteArray(token)));",
          "",
          "[Removed Lines]",
          "122:         byte[] token = tsaClient.getTimeStampToken(signer.getSignature());",
          "",
          "[Added Lines]",
          "124:         TimeStampToken timeStampToken = tsaClient.getTimeStampToken(signer.getSignature());",
          "125:         byte[] token = timeStampToken.getEncoded();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "865d3a81f5c59bcace84ae465405cfe90c750c9f",
      "candidate_info": {
        "commit_hash": "865d3a81f5c59bcace84ae465405cfe90c750c9f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/865d3a81f5c59bcace84ae465405cfe90c750c9f",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ],
        "message": "PDFBOX-5105: avoid null value\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886810 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:         if (isOwnerPassword)",
          "718:         {",
          "719:             byte[] oKeySalt = new byte[8];",
          "720:             System.arraycopy(o, 40, oKeySalt, 0, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719:             if (oe == null)",
          "720:             {",
          "721:                 throw new IOException(\"/Encrypt/OE entry is missing\");",
          "722:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "732:         }",
          "733:         else",
          "734:         {",
          "735:             byte[] uKeySalt = new byte[8];",
          "736:             System.arraycopy(u, 40, uKeySalt, 0, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:             if (ue == null)",
          "740:             {",
          "741:                 throw new IOException(\"/Encrypt/UE entry is missing\");",
          "742:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}