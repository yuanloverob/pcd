{
  "cve_id": "CVE-2021-4231",
  "cve_desc": "A vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 11.0.5 and 11.1.0-next.3 is able to address this issue. The name of the patch is ba8da742e3b243e8f43d4c63aa842b44e14f2b09. It is recommended to upgrade the affected component.",
  "repo": "angular/angular",
  "patch_hash": "ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
  "patch_info": {
    "commit_hash": "ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
    "repo": "angular/angular",
    "commit_url": "https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
    "files": [
      "packages/core/src/util/dom.ts",
      "packages/core/test/acceptance/security_spec.ts",
      "packages/core/test/util/dom_spec.ts"
    ],
    "message": "fix(core): fix possible XSS attack in development through SSR (#40525)\n\nThis is a follow up fix for\nhttps://github.com/angular/angular/pull/40136/commits/894286dd0c92b5af223364237e63798e18b14f58.\n\nIt turns out that comments can be closed in several ways:\n- `<!-->`\n- `<!-- -->`\n- `<!-- --!>`\n\nAll of the above are valid ways to close comment per:\nhttps://html.spec.whatwg.org/multipage/syntax.html#comments\n\nThe new fix surrounds `<` and `>` with zero width space so that it\nrenders in the same way, but it prevents the comment to be closed eagerly.\n\nPR Close #40525",
    "before_after_code_files": [
      "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
      "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
      "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
    ]
  },
  "patch_diff": {
    "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts": [
      "File: packages/core/src/util/dom.ts -> packages/core/src/util/dom.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "9: const END_COMMENT = /-->/g;",
      "10: const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';",
      "",
      "[Added Lines]",
      "14: const COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;",
      "18: const COMMENT_DELIMITER = /(<|>)/;",
      "19: const COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: export function escapeCommentText(value: string): string {",
      "37: }",
      "",
      "[Removed Lines]",
      "36:   return value.replace(END_COMMENT, END_COMMENT_ESCAPED);",
      "",
      "[Added Lines]",
      "49:   return value.replace(",
      "50:       COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));",
      "",
      "---------------"
    ],
    "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts": [
      "File: packages/core/test/acceptance/security_spec.ts -> packages/core/test/acceptance/security_spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: describe('comment node text escaping', () => {",
      "33:   });",
      "34: });",
      "",
      "[Removed Lines]",
      "14:   it('should not be possible to do XSS through comment reflect data', () => {",
      "15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
      "16:     class XSSComp {",
      "17:       xssValue: string = '--> --><script>\"evil\"</script>';",
      "18:     }",
      "20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
      "21:     const fixture = TestBed.createComponent(XSSComp);",
      "22:     fixture.detectChanges();",
      "23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
      "25:     const html = div.innerHTML;",
      "27:     expect(html).not.toContain('--><script');",
      "29:     div.innerHTML = html;",
      "31:     const script = div.querySelector('script');",
      "32:     expect(script).toBeFalsy();",
      "",
      "[Added Lines]",
      "15:   ['>',         // self closing",
      "16:    '-->',       // standard closing",
      "17:    '--!>',      // alternate closing",
      "18:    '<!-- -->',  // embedded comment.",
      "19:   ].forEach((xssValue) => {",
      "20:     it('should not be possible to do XSS through comment reflect data when writing: ' + xssValue,",
      "21:        () => {",
      "22:          @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
      "23:          class XSSComp {",
      "25:            xssValue: string = xssValue + '<script>\"evil\"</script>';",
      "26:          }",
      "28:          TestBed.configureTestingModule({declarations: [XSSComp]});",
      "29:          const fixture = TestBed.createComponent(XSSComp);",
      "30:          fixture.detectChanges();",
      "31:          const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
      "33:          const html = div.innerHTML;",
      "35:          expect(html).not.toContain('--><script');",
      "37:          div.innerHTML = html;",
      "39:          const script = div.querySelector('script');",
      "40:          expect(script).toBeFalsy();",
      "41:        });",
      "",
      "---------------"
    ],
    "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts": [
      "File: packages/core/test/util/dom_spec.ts -> packages/core/test/util/dom_spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:       expect(escapeCommentText('text')).toEqual('text');",
      "15:     });",
      "17:     it('should escape end marker', () => {",
      "19:     });",
      "21:     it('should escape multiple markers', () => {",
      "22:       expect(escapeCommentText('before-->inline-->after'))",
      "24:     });",
      "25:   });",
      "26: });",
      "",
      "[Removed Lines]",
      "18:       expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');",
      "23:           .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');",
      "",
      "[Added Lines]",
      "17:     it('should escape \"<\" or \">\"', () => {",
      "18:       expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');",
      "19:       expect(escapeCommentText('<!--<!--')).toEqual('\\u200b<\\u200b!--\\u200b<\\u200b!--');",
      "20:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
      "21:       expect(escapeCommentText('>-->')).toEqual('\\u200b>\\u200b--\\u200b>\\u200b');",
      "22:     });",
      "25:       expect(escapeCommentText('before-->after')).toEqual('before--\\u200b>\\u200bafter');",
      "30:           .toEqual('before--\\u200b>\\u200binline--\\u200b>\\u200bafter');",
      "31:     });",
      "33:     it('should caver the spec', () => {",
      "35:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
      "36:       expect(escapeCommentText('->')).toEqual('-\\u200b>\\u200b');",
      "37:       expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');",
      "38:       expect(escapeCommentText('-->')).toEqual('--\\u200b>\\u200b');",
      "39:       expect(escapeCommentText('--!>')).toEqual('--!\\u200b>\\u200b');",
      "40:       expect(escapeCommentText('<!-')).toEqual('\\u200b<\\u200b!-');",
      "43:       expect(escapeCommentText('.>')).toEqual('.>');",
      "44:       expect(escapeCommentText('.->')).toEqual('.->');",
      "45:       expect(escapeCommentText('<!-.')).toEqual('<!-.');",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b8e3d53ab188e9759d72f6e28ebebe7d6ab6122",
      "candidate_info": {
        "commit_hash": "0b8e3d53ab188e9759d72f6e28ebebe7d6ab6122",
        "repo": "angular/angular",
        "commit_url": "https://github.com/angular/angular/commit/0b8e3d53ab188e9759d72f6e28ebebe7d6ab6122",
        "files": [
          "packages/core/src/render3/instructions/shared.ts",
          "packages/core/src/util/dom.ts",
          "packages/core/src/view/services.ts",
          "packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts"
        ],
        "message": "fix(core): fix possible XSS attack in development through SSR. (#40152)\n\nEscape the content of the strings so that it can be safely inserted into a comment node.\nThe issue is that HTML does not specify any way to escape comment end text inside the comment.\n`<!-- The way you close a comment is with \"-->\". -->`. Above the `\"-->\"` is meant to be text\nnot an end to the comment. This can be created programmatically through DOM APIs.\n\n```\ndiv.innerHTML = div.innerHTML\n```\nOne would expect that the above code would be safe to do, but it turns out that because comment\ntext is not escaped, the comment may contain text which will prematurely close the comment\nopening up the application for XSS attack. (In SSR we programmatically create comment nodes which\nmay contain such text and expect them to be safe.)\nThis function escapes the comment text by looking for the closing char sequence `-->` and replace\nit with `-_-_>` where the `_` is a zero width space `\\u200B`. The result is that if a comment\ncontains `-->` text it will render normally but it will not cause the HTML parser to close the\ncomment.\n\nPR Close #40152",
        "before_after_code_files": [
          "packages/core/src/render3/instructions/shared.ts||packages/core/src/render3/instructions/shared.ts",
          "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
          "packages/core/src/view/services.ts||packages/core/src/view/services.ts",
          "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ],
          "candidate": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/src/render3/instructions/shared.ts||packages/core/src/render3/instructions/shared.ts": [
          "File: packages/core/src/render3/instructions/shared.ts -> packages/core/src/render3/instructions/shared.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import {validateAgainstEventAttributes, validateAgainstEventProperties} from '../../sanitization/sanitization';",
          "14: import {Sanitizer} from '../../sanitization/sanitizer';",
          "15: import {assertDefined, assertDomNode, assertEqual, assertGreaterThan, assertIndexInRange, assertLessThan, assertNotEqual, assertNotSame, assertSame} from '../../util/assert';",
          "16: import {createNamedArrayType} from '../../util/named_array_type';",
          "17: import {initNgDevMode} from '../../util/ng_dev_mode';",
          "18: import {normalizeDebugBindingName, normalizeDebugBindingValue} from '../../util/ng_reflect';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import {escapeCommentText} from '../../util/dom';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import {AttributeMarker, InitialInputData, InitialInputs, LocalRefExtractor, PropertyAliases, PropertyAliasValue, TAttributes, TConstantsOrFactory, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeProviderIndexes, TNodeType, TProjectionNode} from '../interfaces/node';",
          "30: import {isProceduralRenderer, RComment, RElement, Renderer3, RendererFactory3, RNode, RText} from '../interfaces/renderer';",
          "31: import {SanitizerFn} from '../interfaces/sanitization';",
          "33: import {CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTEXT, DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, InitPhaseState, INJECTOR, LView, LViewFlags, NEXT, PARENT, RENDERER, RENDERER_FACTORY, RootContext, RootContextFlags, SANITIZER, T_HOST, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TVIEW, TView, TViewType} from '../interfaces/view';",
          "34: import {assertNodeNotOfTypes, assertNodeOfPossibleTypes} from '../node_assert';",
          "35: import {isInlineTemplate, isNodeMatchingSelectorList} from '../node_selector_matcher';",
          "",
          "[Removed Lines]",
          "32: import {isComponentDef, isComponentHost, isContentQueryHost, isLContainer, isRootView} from '../interfaces/type_checks';",
          "",
          "[Added Lines]",
          "33: import {isComponentDef, isComponentHost, isContentQueryHost, isRootView} from '../interfaces/type_checks';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1050:           (element as RElement).setAttribute(attrName, debugValue);",
          "1051:     }",
          "1052:   } else {",
          "1054:     if (isProceduralRenderer(renderer)) {",
          "1055:       renderer.setValue((element as RComment), textContent);",
          "1056:     } else {",
          "",
          "[Removed Lines]",
          "1053:     const textContent = `bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`;",
          "",
          "[Added Lines]",
          "1054:     const textContent =",
          "1055:         escapeCommentText(`bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`);",
          "",
          "---------------"
        ],
        "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts": [
          "File: packages/core/src/util/dom.ts -> packages/core/src/util/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: const END_COMMENT = /-->/g;",
          "10: const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';",
          "35: export function escapeCommentText(value: string): string {",
          "36:   return value.replace(END_COMMENT, END_COMMENT_ESCAPED);",
          "37: }",
          "",
          "---------------"
        ],
        "packages/core/src/view/services.ts||packages/core/src/view/services.ts": [
          "File: packages/core/src/view/services.ts -> packages/core/src/view/services.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import {NgModuleRef} from '../linker/ng_module_factory';",
          "16: import {Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2} from '../render/api';",
          "17: import {Sanitizer} from '../sanitization/sanitizer';",
          "18: import {isDevMode} from '../util/is_dev_mode';",
          "19: import {normalizeDebugBindingName, normalizeDebugBindingValue} from '../util/ng_reflect';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import {escapeCommentText} from '../util/dom';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:       const el = asElementData(view, elDef.nodeIndex).renderElement;",
          "448:       if (!elDef.element!.name) {",
          "451:       } else {",
          "453:         for (let attr in bindingValues) {",
          "",
          "[Removed Lines]",
          "450:         view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);",
          "",
          "[Added Lines]",
          "451:         view.renderer.setValue(",
          "452:             el, escapeCommentText(`bindings=${JSON.stringify(bindingValues, null, 2)}`));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:   }",
          "728:   createComment(value: string): any {",
          "730:     const debugCtx = this.createDebugContext(comment);",
          "731:     if (debugCtx) {",
          "732:       indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));",
          "",
          "[Removed Lines]",
          "729:     const comment = this.delegate.createComment(value);",
          "",
          "[Added Lines]",
          "731:     const comment = this.delegate.createComment(escapeCommentText(value));",
          "",
          "---------------"
        ],
        "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts": [
          "File: packages/core/test/acceptance/security_spec.ts -> packages/core/test/acceptance/security_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import {Component} from '@angular/core';",
          "10: import {TestBed} from '@angular/core/testing';",
          "13: describe('comment node text escaping', () => {",
          "14:   it('should not be possible to do XSS through comment reflect data', () => {",
          "15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "16:     class XSSComp {",
          "17:       xssValue: string = '--> --><script>\"evil\"</script>';",
          "18:     }",
          "20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
          "21:     const fixture = TestBed.createComponent(XSSComp);",
          "22:     fixture.detectChanges();",
          "23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "25:     const html = div.innerHTML;",
          "27:     expect(html).not.toContain('--><script');",
          "29:     div.innerHTML = html;",
          "31:     const script = div.querySelector('script');",
          "32:     expect(script).toBeFalsy();",
          "33:   });",
          "34: });",
          "",
          "---------------"
        ],
        "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts": [
          "File: packages/core/test/util/dom_spec.ts -> packages/core/test/util/dom_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import {escapeCommentText} from '@angular/core/src/util/dom';",
          "11: describe('comment node text escaping', () => {",
          "12:   describe('escapeCommentText', () => {",
          "13:     it('should not change anything on basic text', () => {",
          "14:       expect(escapeCommentText('text')).toEqual('text');",
          "15:     });",
          "17:     it('should escape end marker', () => {",
          "18:       expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');",
          "19:     });",
          "21:     it('should escape multiple markers', () => {",
          "22:       expect(escapeCommentText('before-->inline-->after'))",
          "23:           .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');",
          "24:     });",
          "25:   });",
          "26: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bf99e0edaedc6b67e765faa996da867420bf3e7",
      "candidate_info": {
        "commit_hash": "6bf99e0edaedc6b67e765faa996da867420bf3e7",
        "repo": "angular/angular",
        "commit_url": "https://github.com/angular/angular/commit/6bf99e0edaedc6b67e765faa996da867420bf3e7",
        "files": [
          "packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts"
        ],
        "message": "fix(core): fix possible XSS attack in development through SSR (#40525)\n\nThis is a follow up fix for\nhttps://github.com/angular/angular/pull/40136/commits/894286dd0c92b5af223364237e63798e18b14f58.\n\nIt turns out that comments can be closed in several ways:\n- `<!-->`\n- `<!-- -->`\n- `<!-- --!>`\n\nAll of the above are valid ways to close comment per:\nhttps://html.spec.whatwg.org/multipage/syntax.html#comments\n\nThe new fix surrounds `<` and `>` with zero width space so that it\nrenders in the same way, but it prevents the comment to be closed eagerly.\n\nPR Close #40525",
        "before_after_code_files": [
          "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ],
          "candidate": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts": [
          "File: packages/core/src/util/dom.ts -> packages/core/src/util/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9: const END_COMMENT = /-->/g;",
          "10: const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';",
          "",
          "[Added Lines]",
          "14: const COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;",
          "18: const COMMENT_DELIMITER = /(<|>)/;",
          "19: const COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: export function escapeCommentText(value: string): string {",
          "37: }",
          "",
          "[Removed Lines]",
          "36:   return value.replace(END_COMMENT, END_COMMENT_ESCAPED);",
          "",
          "[Added Lines]",
          "49:   return value.replace(",
          "50:       COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));",
          "",
          "---------------"
        ],
        "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts": [
          "File: packages/core/test/acceptance/security_spec.ts -> packages/core/test/acceptance/security_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: describe('comment node text escaping', () => {",
          "33:   });",
          "34: });",
          "",
          "[Removed Lines]",
          "14:   it('should not be possible to do XSS through comment reflect data', () => {",
          "15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "16:     class XSSComp {",
          "17:       xssValue: string = '--> --><script>\"evil\"</script>';",
          "18:     }",
          "20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
          "21:     const fixture = TestBed.createComponent(XSSComp);",
          "22:     fixture.detectChanges();",
          "23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "25:     const html = div.innerHTML;",
          "27:     expect(html).not.toContain('--><script');",
          "29:     div.innerHTML = html;",
          "31:     const script = div.querySelector('script');",
          "32:     expect(script).toBeFalsy();",
          "",
          "[Added Lines]",
          "15:   ['>',         // self closing",
          "16:    '-->',       // standard closing",
          "17:    '--!>',      // alternate closing",
          "18:    '<!-- -->',  // embedded comment.",
          "19:   ].forEach((xssValue) => {",
          "20:     it('should not be possible to do XSS through comment reflect data when writing: ' + xssValue,",
          "21:        () => {",
          "22:          @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "23:          class XSSComp {",
          "25:            xssValue: string = xssValue + '<script>\"evil\"</script>';",
          "26:          }",
          "28:          TestBed.configureTestingModule({declarations: [XSSComp]});",
          "29:          const fixture = TestBed.createComponent(XSSComp);",
          "30:          fixture.detectChanges();",
          "31:          const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "33:          const html = div.innerHTML;",
          "35:          expect(html).not.toContain('--><script');",
          "37:          div.innerHTML = html;",
          "39:          const script = div.querySelector('script');",
          "40:          expect(script).toBeFalsy();",
          "41:        });",
          "",
          "---------------"
        ],
        "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts": [
          "File: packages/core/test/util/dom_spec.ts -> packages/core/test/util/dom_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:       expect(escapeCommentText('text')).toEqual('text');",
          "15:     });",
          "17:     it('should escape end marker', () => {",
          "19:     });",
          "21:     it('should escape multiple markers', () => {",
          "22:       expect(escapeCommentText('before-->inline-->after'))",
          "24:     });",
          "25:   });",
          "26: });",
          "",
          "[Removed Lines]",
          "18:       expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');",
          "23:           .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');",
          "",
          "[Added Lines]",
          "17:     it('should escape \"<\" or \">\"', () => {",
          "18:       expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');",
          "19:       expect(escapeCommentText('<!--<!--')).toEqual('\\u200b<\\u200b!--\\u200b<\\u200b!--');",
          "20:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
          "21:       expect(escapeCommentText('>-->')).toEqual('\\u200b>\\u200b--\\u200b>\\u200b');",
          "22:     });",
          "25:       expect(escapeCommentText('before-->after')).toEqual('before--\\u200b>\\u200bafter');",
          "30:           .toEqual('before--\\u200b>\\u200binline--\\u200b>\\u200bafter');",
          "31:     });",
          "33:     it('should caver the spec', () => {",
          "35:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
          "36:       expect(escapeCommentText('->')).toEqual('-\\u200b>\\u200b');",
          "37:       expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');",
          "38:       expect(escapeCommentText('-->')).toEqual('--\\u200b>\\u200b');",
          "39:       expect(escapeCommentText('--!>')).toEqual('--!\\u200b>\\u200b');",
          "40:       expect(escapeCommentText('<!-')).toEqual('\\u200b<\\u200b!-');",
          "43:       expect(escapeCommentText('.>')).toEqual('.>');",
          "44:       expect(escapeCommentText('.->')).toEqual('.->');",
          "45:       expect(escapeCommentText('<!-.')).toEqual('<!-.');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bf6a9908ca54b56fe2d5e9c81267c56a0f299d1",
      "candidate_info": {
        "commit_hash": "3bf6a9908ca54b56fe2d5e9c81267c56a0f299d1",
        "repo": "angular/angular",
        "commit_url": "https://github.com/angular/angular/commit/3bf6a9908ca54b56fe2d5e9c81267c56a0f299d1",
        "files": [
          "packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts"
        ],
        "message": "fix(core): fix possible XSS attack in development through SSR (#40525)\n\nThis is a follow up fix for\nhttps://github.com/angular/angular/pull/40136/commits/894286dd0c92b5af223364237e63798e18b14f58.\n\nIt turns out that comments can be closed in several ways:\n- `<!-->`\n- `<!-- -->`\n- `<!-- --!>`\n\nAll of the above are valid ways to close comment per:\nhttps://html.spec.whatwg.org/multipage/syntax.html#comments\n\nThe new fix surrounds `<` and `>` with zero width space so that it\nrenders in the same way, but it prevents the comment to be closed eagerly.\n\nPR Close #40525",
        "before_after_code_files": [
          "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ],
          "candidate": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts": [
          "File: packages/core/src/util/dom.ts -> packages/core/src/util/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9: const END_COMMENT = /-->/g;",
          "10: const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';",
          "",
          "[Added Lines]",
          "9: const END_COMMENT = /(<|>)/g;",
          "10: const END_COMMENT_ESCAPED = '\\u200B$1\\u200B';",
          "",
          "---------------"
        ],
        "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts": [
          "File: packages/core/test/acceptance/security_spec.ts -> packages/core/test/acceptance/security_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: describe('comment node text escaping', () => {",
          "33:   });",
          "34: });",
          "",
          "[Removed Lines]",
          "14:   it('should not be possible to do XSS through comment reflect data', () => {",
          "15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "16:     class XSSComp {",
          "17:       xssValue: string = '--> --><script>\"evil\"</script>';",
          "18:     }",
          "20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
          "21:     const fixture = TestBed.createComponent(XSSComp);",
          "22:     fixture.detectChanges();",
          "23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "25:     const html = div.innerHTML;",
          "27:     expect(html).not.toContain('--><script');",
          "29:     div.innerHTML = html;",
          "31:     const script = div.querySelector('script');",
          "32:     expect(script).toBeFalsy();",
          "",
          "[Added Lines]",
          "15:   ['>',         // self closing",
          "16:    '-->',       // standard closing",
          "17:    '--!>',      // alternate closing",
          "18:    '<!-- -->',  // embedded comment.",
          "19:   ].forEach((xssValue) => {",
          "20:     it('should not be possible to do XSS through comment reflect data when writing: ' + xssValue,",
          "21:        () => {",
          "22:          @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "23:          class XSSComp {",
          "25:            xssValue: string = xssValue + '<script>\"evil\"</script>';",
          "26:          }",
          "28:          TestBed.configureTestingModule({declarations: [XSSComp]});",
          "29:          const fixture = TestBed.createComponent(XSSComp);",
          "30:          fixture.detectChanges();",
          "31:          const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "33:          const html = div.innerHTML;",
          "35:          expect(html).not.toContain('--><script');",
          "37:          div.innerHTML = html;",
          "39:          const script = div.querySelector('script');",
          "40:          expect(script).toBeFalsy();",
          "41:        });",
          "",
          "---------------"
        ],
        "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts": [
          "File: packages/core/test/util/dom_spec.ts -> packages/core/test/util/dom_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:       expect(escapeCommentText('text')).toEqual('text');",
          "15:     });",
          "17:     it('should escape end marker', () => {",
          "19:     });",
          "21:     it('should escape multiple markers', () => {",
          "22:       expect(escapeCommentText('before-->inline-->after'))",
          "24:     });",
          "25:   });",
          "26: });",
          "",
          "[Removed Lines]",
          "18:       expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');",
          "23:           .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');",
          "",
          "[Added Lines]",
          "17:     it('should escape \"<\" or \">\"', () => {",
          "18:       expect(escapeCommentText('<')).toEqual('\\u200b<\\u200b');",
          "19:       expect(escapeCommentText('<<')).toEqual('\\u200b<\\u200b\\u200b<\\u200b');",
          "20:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
          "21:       expect(escapeCommentText('>>')).toEqual('\\u200b>\\u200b\\u200b>\\u200b');",
          "22:     });",
          "25:       expect(escapeCommentText('before-->after')).toEqual('before--\\u200b>\\u200bafter');",
          "30:           .toEqual('before--\\u200b>\\u200binline--\\u200b>\\u200bafter');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97ec6e48493bf9418971436d885470a66e71f045",
      "candidate_info": {
        "commit_hash": "97ec6e48493bf9418971436d885470a66e71f045",
        "repo": "angular/angular",
        "commit_url": "https://github.com/angular/angular/commit/97ec6e48493bf9418971436d885470a66e71f045",
        "files": [
          "packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts"
        ],
        "message": "fix(core): fix possible XSS attack in development through SSR (#40525)\n\nThis is a follow up fix for\nhttps://github.com/angular/angular/pull/40136/commits/894286dd0c92b5af223364237e63798e18b14f58.\n\nIt turns out that comments can be closed in several ways:\n- `<!-->`\n- `<!-- -->`\n- `<!-- --!>`\n\nAll of the above are valid ways to close comment per:\nhttps://html.spec.whatwg.org/multipage/syntax.html#comments\n\nThe new fix surrounds `<` and `>` with zero width space so that it\nrenders in the same way, but it prevents the comment to be closed eagerly.\n\nPR Close #40525",
        "before_after_code_files": [
          "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ],
          "candidate": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts": [
          "File: packages/core/src/util/dom.ts -> packages/core/src/util/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9: const END_COMMENT = /-->/g;",
          "10: const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';",
          "",
          "[Added Lines]",
          "14: const COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;",
          "18: const COMMENT_DELIMITER = /(<|>)/;",
          "19: const COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: export function escapeCommentText(value: string): string {",
          "37: }",
          "",
          "[Removed Lines]",
          "36:   return value.replace(END_COMMENT, END_COMMENT_ESCAPED);",
          "",
          "[Added Lines]",
          "49:   return value.replace(",
          "50:       COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));",
          "",
          "---------------"
        ],
        "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts": [
          "File: packages/core/test/acceptance/security_spec.ts -> packages/core/test/acceptance/security_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: describe('comment node text escaping', () => {",
          "33:   });",
          "34: });",
          "",
          "[Removed Lines]",
          "14:   it('should not be possible to do XSS through comment reflect data', () => {",
          "15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "16:     class XSSComp {",
          "17:       xssValue: string = '--> --><script>\"evil\"</script>';",
          "18:     }",
          "20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
          "21:     const fixture = TestBed.createComponent(XSSComp);",
          "22:     fixture.detectChanges();",
          "23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "25:     const html = div.innerHTML;",
          "27:     expect(html).not.toContain('--><script');",
          "29:     div.innerHTML = html;",
          "31:     const script = div.querySelector('script');",
          "32:     expect(script).toBeFalsy();",
          "",
          "[Added Lines]",
          "15:   ['>',         // self closing",
          "16:    '-->',       // standard closing",
          "17:    '--!>',      // alternate closing",
          "18:    '<!-- -->',  // embedded comment.",
          "19:   ].forEach((xssValue) => {",
          "20:     it('should not be possible to do XSS through comment reflect data when writing: ' + xssValue,",
          "21:        () => {",
          "22:          @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "23:          class XSSComp {",
          "25:            xssValue: string = xssValue + '<script>\"evil\"</script>';",
          "26:          }",
          "28:          TestBed.configureTestingModule({declarations: [XSSComp]});",
          "29:          const fixture = TestBed.createComponent(XSSComp);",
          "30:          fixture.detectChanges();",
          "31:          const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "33:          const html = div.innerHTML;",
          "35:          expect(html).not.toContain('--><script');",
          "37:          div.innerHTML = html;",
          "39:          const script = div.querySelector('script');",
          "40:          expect(script).toBeFalsy();",
          "41:        });",
          "",
          "---------------"
        ],
        "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts": [
          "File: packages/core/test/util/dom_spec.ts -> packages/core/test/util/dom_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:       expect(escapeCommentText('text')).toEqual('text');",
          "15:     });",
          "17:     it('should escape end marker', () => {",
          "19:     });",
          "21:     it('should escape multiple markers', () => {",
          "22:       expect(escapeCommentText('before-->inline-->after'))",
          "24:     });",
          "25:   });",
          "26: });",
          "",
          "[Removed Lines]",
          "18:       expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');",
          "23:           .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');",
          "",
          "[Added Lines]",
          "17:     it('should escape \"<\" or \">\"', () => {",
          "18:       expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');",
          "19:       expect(escapeCommentText('<!--<!--')).toEqual('\\u200b<\\u200b!--\\u200b<\\u200b!--');",
          "20:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
          "21:       expect(escapeCommentText('>-->')).toEqual('\\u200b>\\u200b--\\u200b>\\u200b');",
          "22:     });",
          "25:       expect(escapeCommentText('before-->after')).toEqual('before--\\u200b>\\u200bafter');",
          "30:           .toEqual('before--\\u200b>\\u200binline--\\u200b>\\u200bafter');",
          "31:     });",
          "33:     it('should caver the spec', () => {",
          "35:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
          "36:       expect(escapeCommentText('->')).toEqual('-\\u200b>\\u200b');",
          "37:       expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');",
          "38:       expect(escapeCommentText('-->')).toEqual('--\\u200b>\\u200b');",
          "39:       expect(escapeCommentText('--!>')).toEqual('--!\\u200b>\\u200b');",
          "40:       expect(escapeCommentText('<!-')).toEqual('\\u200b<\\u200b!-');",
          "43:       expect(escapeCommentText('.>')).toEqual('.>');",
          "44:       expect(escapeCommentText('.->')).toEqual('.->');",
          "45:       expect(escapeCommentText('<!-.')).toEqual('<!-.');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb3b315eee8a669bf78940a24ecc4279cd04d380",
      "candidate_info": {
        "commit_hash": "bb3b315eee8a669bf78940a24ecc4279cd04d380",
        "repo": "angular/angular",
        "commit_url": "https://github.com/angular/angular/commit/bb3b315eee8a669bf78940a24ecc4279cd04d380",
        "files": [
          "packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts"
        ],
        "message": "fix(core): fix possible XSS attack in development through SSR (#40525)\n\nThis is a follow up fix for\nhttps://github.com/angular/angular/pull/40136/commits/894286dd0c92b5af223364237e63798e18b14f58.\n\nIt turns out that comments can be closed in several ways:\n- `<!-->`\n- `<!-- -->`\n- `<!-- --!>`\n\nAll of the above are valid ways to close comment per:\nhttps://html.spec.whatwg.org/multipage/syntax.html#comments\n\nThe new fix surrounds `<` and `>` with zero width space so that it\nrenders in the same way, but it prevents the comment to be closed eagerly.\n\nPR Close #40525",
        "before_after_code_files": [
          "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
          "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
          "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ],
          "candidate": [
            "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts",
            "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts",
            "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/src/util/dom.ts||packages/core/src/util/dom.ts": [
          "File: packages/core/src/util/dom.ts -> packages/core/src/util/dom.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9: const END_COMMENT = /-->/g;",
          "10: const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';",
          "",
          "[Added Lines]",
          "9: const END_COMMENT = /(<|>)/g;",
          "10: const END_COMMENT_ESCAPED = '\\u200B$1\\u200B';",
          "",
          "---------------"
        ],
        "packages/core/test/acceptance/security_spec.ts||packages/core/test/acceptance/security_spec.ts": [
          "File: packages/core/test/acceptance/security_spec.ts -> packages/core/test/acceptance/security_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: describe('comment node text escaping', () => {",
          "33:   });",
          "34: });",
          "",
          "[Removed Lines]",
          "14:   it('should not be possible to do XSS through comment reflect data', () => {",
          "15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "16:     class XSSComp {",
          "17:       xssValue: string = '--> --><script>\"evil\"</script>';",
          "18:     }",
          "20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
          "21:     const fixture = TestBed.createComponent(XSSComp);",
          "22:     fixture.detectChanges();",
          "23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "25:     const html = div.innerHTML;",
          "27:     expect(html).not.toContain('--><script');",
          "29:     div.innerHTML = html;",
          "31:     const script = div.querySelector('script');",
          "32:     expect(script).toBeFalsy();",
          "",
          "[Added Lines]",
          "15:   ['>',         // self closing",
          "16:    '-->',       // standard closing",
          "17:    '--!>',      // alternate closing",
          "18:    '<!-- -->',  // embedded comment.",
          "19:   ].forEach((xssValue) => {",
          "20:     it('should not be possible to do XSS through comment reflect data when writing: ' + xssValue,",
          "21:        () => {",
          "22:          @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
          "23:          class XSSComp {",
          "25:            xssValue: string = xssValue + '<script>\"evil\"</script>';",
          "26:          }",
          "28:          TestBed.configureTestingModule({declarations: [XSSComp]});",
          "29:          const fixture = TestBed.createComponent(XSSComp);",
          "30:          fixture.detectChanges();",
          "31:          const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
          "33:          const html = div.innerHTML;",
          "35:          expect(html).not.toContain('--><script');",
          "37:          div.innerHTML = html;",
          "39:          const script = div.querySelector('script');",
          "40:          expect(script).toBeFalsy();",
          "41:        });",
          "",
          "---------------"
        ],
        "packages/core/test/util/dom_spec.ts||packages/core/test/util/dom_spec.ts": [
          "File: packages/core/test/util/dom_spec.ts -> packages/core/test/util/dom_spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:       expect(escapeCommentText('text')).toEqual('text');",
          "15:     });",
          "17:     it('should escape end marker', () => {",
          "19:     });",
          "21:     it('should escape multiple markers', () => {",
          "22:       expect(escapeCommentText('before-->inline-->after'))",
          "24:     });",
          "25:   });",
          "26: });",
          "",
          "[Removed Lines]",
          "18:       expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');",
          "23:           .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');",
          "",
          "[Added Lines]",
          "17:     it('should escape \"<\" or \">\"', () => {",
          "18:       expect(escapeCommentText('<')).toEqual('\\u200b<\\u200b');",
          "19:       expect(escapeCommentText('<<')).toEqual('\\u200b<\\u200b\\u200b<\\u200b');",
          "20:       expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');",
          "21:       expect(escapeCommentText('>>')).toEqual('\\u200b>\\u200b\\u200b>\\u200b');",
          "22:     });",
          "25:       expect(escapeCommentText('before-->after')).toEqual('before--\\u200b>\\u200bafter');",
          "30:           .toEqual('before--\\u200b>\\u200binline--\\u200b>\\u200bafter');",
          "",
          "---------------"
        ]
      }
    }
  ]
}