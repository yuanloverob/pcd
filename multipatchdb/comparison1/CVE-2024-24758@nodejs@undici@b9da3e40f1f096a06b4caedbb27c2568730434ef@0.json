{
  "cve_id": "CVE-2024-24758",
  "cve_desc": "Undici is an HTTP/1.1 client, written from scratch for Node.js. Undici already cleared Authorization headers on cross-origin redirects, but did not clear `Proxy-Authentication` headers. This issue has been patched in versions 5.28.3 and 6.6.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "nodejs/undici",
  "patch_hash": "b9da3e40f1f096a06b4caedbb27c2568730434ef",
  "patch_info": {
    "commit_hash": "b9da3e40f1f096a06b4caedbb27c2568730434ef",
    "repo": "nodejs/undici",
    "commit_url": "https://github.com/nodejs/undici/commit/b9da3e40f1f096a06b4caedbb27c2568730434ef",
    "files": [
      "lib/fetch/index.js",
      "test/fetch/redirect-cross-origin-header.js"
    ],
    "message": "Merge pull request from GHSA-3787-6prv-h9w3\n\nSigned-off-by: Matteo Collina <hello@matteocollina.com>",
    "before_after_code_files": [
      "lib/fetch/index.js||lib/fetch/index.js",
      "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
    ]
  },
  "patch_diff": {
    "lib/fetch/index.js||lib/fetch/index.js": [
      "File: lib/fetch/index.js -> lib/fetch/index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1327:     request.headersList.delete('authorization', true)",
      "1330:     request.headersList.delete('cookie', true)",
      "1331:     request.headersList.delete('host', true)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1330:     request.headersList.delete('proxy-authorization', true)",
      "",
      "---------------"
    ],
    "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js": [
      "File: test/fetch/redirect-cross-origin-header.js -> test/fetch/redirect-cross-origin-header.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: const { fetch } = require('../..')",
      "9: test('Cross-origin redirects clear forbidden headers', async (t) => {",
      "12:   const server1 = createServer((req, res) => {",
      "13:     strictEqual(req.headers.cookie, undefined)",
      "14:     strictEqual(req.headers.authorization, undefined)",
      "16:     res.end('redirected')",
      "17:   }).listen(0)",
      "",
      "[Removed Lines]",
      "10:   const { strictEqual } = tspl(t, { plan: 5 })",
      "",
      "[Added Lines]",
      "10:   const { strictEqual } = tspl(t, { plan: 6 })",
      "15:     strictEqual(req.headers['proxy-authorization'], undefined)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:   const res = await fetch(`http://localhost:${server2.address().port}`, {",
      "41:     headers: {",
      "42:       Authorization: 'test',",
      "44:     }",
      "45:   })",
      "",
      "[Removed Lines]",
      "43:       Cookie: 'ddd=dddd'",
      "",
      "[Added Lines]",
      "44:       Cookie: 'ddd=dddd',",
      "45:       'Proxy-Authorization': 'test'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7c8db8b1dbe0b72c68c927d3037db7595f50677",
      "candidate_info": {
        "commit_hash": "f7c8db8b1dbe0b72c68c927d3037db7595f50677",
        "repo": "nodejs/undici",
        "commit_url": "https://github.com/nodejs/undici/commit/f7c8db8b1dbe0b72c68c927d3037db7595f50677",
        "files": [
          "test/fetch/integrity.js",
          "test/fetch/issue-1447.js",
          "test/fetch/issue-2009.js",
          "test/fetch/issue-2021.js",
          "test/fetch/issue-2242.js",
          "test/fetch/issue-2318.js",
          "test/fetch/issue-node-46525.js",
          "test/fetch/iterators.js",
          "test/fetch/jsdom-abortcontroller-1910-1464495619.js",
          "test/fetch/redirect-cross-origin-header.js",
          "test/fetch/redirect.js",
          "test/fetch/relative-url.js",
          "test/fetch/request.js",
          "test/fetch/resource-timing.js",
          "test/fetch/response-json.js",
          "test/fetch/response.js",
          "test/fetch/user-agent.js",
          "test/fetch/util.js"
        ],
        "message": "feat: port remaining fetch tests to node test runner (#2587)",
        "before_after_code_files": [
          "test/fetch/integrity.js||test/fetch/integrity.js",
          "test/fetch/issue-1447.js||test/fetch/issue-1447.js",
          "test/fetch/issue-2009.js||test/fetch/issue-2009.js",
          "test/fetch/issue-2021.js||test/fetch/issue-2021.js",
          "test/fetch/issue-2242.js||test/fetch/issue-2242.js",
          "test/fetch/issue-2318.js||test/fetch/issue-2318.js",
          "test/fetch/issue-node-46525.js||test/fetch/issue-node-46525.js",
          "test/fetch/iterators.js||test/fetch/iterators.js",
          "test/fetch/jsdom-abortcontroller-1910-1464495619.js||test/fetch/jsdom-abortcontroller-1910-1464495619.js",
          "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js",
          "test/fetch/redirect.js||test/fetch/redirect.js",
          "test/fetch/relative-url.js||test/fetch/relative-url.js",
          "test/fetch/request.js||test/fetch/request.js",
          "test/fetch/resource-timing.js||test/fetch/resource-timing.js",
          "test/fetch/response-json.js||test/fetch/response-json.js",
          "test/fetch/response.js||test/fetch/response.js",
          "test/fetch/user-agent.js||test/fetch/user-agent.js",
          "test/fetch/util.js||test/fetch/util.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
          ],
          "candidate": [
            "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
          ]
        }
      },
      "candidate_diff": {
        "test/fetch/integrity.js||test/fetch/integrity.js": [
          "File: test/fetch/integrity.js -> test/fetch/integrity.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { createServer } = require('http')",
          "5: const { createHash, getHashes } = require('crypto')",
          "6: const { gzipSync } = require('zlib')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('node:assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:   keepAliveMaxTimeout: 1",
          "15: }))",
          "18:   const body = 'Hello world!'",
          "19:   const hash = createHash('sha256').update(body).digest('base64')",
          "",
          "[Removed Lines]",
          "17: test('request with correct integrity checksum', (t) => {",
          "",
          "[Added Lines]",
          "18: test('request with correct integrity checksum', (t, done) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "22:     res.end(body)",
          "23:   })",
          "27:   server.listen(0, async () => {",
          "28:     const response = await fetch(`http://localhost:${server.address().port}`, {",
          "29:       integrity: `sha256-${hash}`",
          "30:     })",
          "33:   })",
          "34: })",
          "37:   const body = 'Hello world!'",
          "38:   const hash = 'c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51b'",
          "40:   const server = createServer((req, res) => {",
          "41:     res.end(body)",
          "56:   })",
          "57: })",
          "60:   const body = 'Hello world!'",
          "61:   const hash = createHash('sha256').update(body).digest('base64')",
          "",
          "[Removed Lines]",
          "25:   t.teardown(server.close.bind(server))",
          "31:     t.strictSame(body, await response.text())",
          "32:     t.end()",
          "36: test('request with wrong integrity checksum', (t) => {",
          "42:   })",
          "44:   t.teardown(server.close.bind(server))",
          "46:   server.listen(0, () => {",
          "47:     fetch(`http://localhost:${server.address().port}`, {",
          "48:       integrity: `sha256-${hash}`",
          "49:     }).then(response => {",
          "50:       t.pass('request did not fail')",
          "51:     }).catch((err) => {",
          "52:       t.equal(err.cause.message, 'integrity mismatch')",
          "53:     }).finally(() => {",
          "54:       t.end()",
          "55:     })",
          "59: test('request with integrity checksum on encoded body', (t) => {",
          "",
          "[Added Lines]",
          "26:   t.after(server.close.bind(server))",
          "32:     assert.strictEqual(body, await response.text())",
          "33:     done()",
          "37: test('request with wrong integrity checksum', async (t) => {",
          "43:   }).listen(0)",
          "45:   t.after(server.close.bind(server))",
          "46:   await once(server, 'listening')",
          "48:   const expectedError = new TypeError('fetch failed', {",
          "49:     cause: new Error('integrity mismatch')",
          "52:   await assert.rejects(fetch(`http://localhost:${server.address().port}`, {",
          "53:     integrity: `sha256-${hash}`",
          "54:   }), expectedError)",
          "57: test('request with integrity checksum on encoded body', (t, done) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:     res.end(gzipSync(body))",
          "66:   })",
          "70:   server.listen(0, async () => {",
          "71:     const response = await fetch(`http://localhost:${server.address().port}`, {",
          "72:       integrity: `sha256-${hash}`",
          "73:     })",
          "76:   })",
          "77: })",
          "",
          "[Removed Lines]",
          "68:   t.teardown(server.close.bind(server))",
          "74:     t.strictSame(body, await response.text())",
          "75:     t.end()",
          "",
          "[Added Lines]",
          "66:   t.after(server.close.bind(server))",
          "72:     assert.strictEqual(body, await response.text())",
          "73:     done()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:     res.end()",
          "82:   }).listen(0)",
          "85:   await once(server, 'listening')",
          "88:     integrity: 'what-integrityisthis'",
          "89:   }))",
          "90: })",
          "",
          "[Removed Lines]",
          "84:   t.teardown(server.close.bind(server))",
          "87:   await t.resolves(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "[Added Lines]",
          "82:   t.after(server.close.bind(server))",
          "85:   await assert.doesNotReject(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "97:     res.end(body)",
          "98:   }).listen(0)",
          "101:   await once(server, 'listening')",
          "104:     integrity: `invalid-integrity sha256-${hash}`",
          "105:   }))",
          "106: })",
          "",
          "[Removed Lines]",
          "100:   t.teardown(server.close.bind(server))",
          "103:   await t.resolves(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "[Added Lines]",
          "98:   t.after(server.close.bind(server))",
          "101:   await assert.doesNotReject(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "113:     res.end(body)",
          "114:   }).listen(0)",
          "117:   await once(server, 'listening')",
          "121:     integrity: `sha384-${hash}`",
          "122:   }))",
          "126:     integrity: 'sha384-ypeBEsobvcr6wjGzmiPcTaeG7/gUfE5yuYB3ha/uSLs='",
          "127:   }))",
          "128: })",
          "",
          "[Removed Lines]",
          "116:   t.teardown(server.close.bind(server))",
          "120:   await t.resolves(fetch(`http://localhost:${server.address().port}`, {",
          "125:   await t.rejects(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "[Added Lines]",
          "114:   t.after(server.close.bind(server))",
          "118:   await assert.doesNotReject(fetch(`http://localhost:${server.address().port}`, {",
          "123:   await assert.rejects(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "135:     res.end(body)",
          "136:   }).listen(0)",
          "139:   await once(server, 'listening')",
          "143:     integrity: `sha512-${hash}`",
          "144:   }))",
          "148:     integrity: 'sha512-ypeBEsobvcr6wjGzmiPcTaeG7/gUfE5yuYB3ha/uSLs='",
          "149:   }))",
          "150: })",
          "",
          "[Removed Lines]",
          "138:   t.teardown(server.close.bind(server))",
          "142:   await t.resolves(fetch(`http://localhost:${server.address().port}`, {",
          "147:   await t.rejects(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "[Added Lines]",
          "136:   t.after(server.close.bind(server))",
          "140:   await assert.doesNotReject(fetch(`http://localhost:${server.address().port}`, {",
          "145:   await assert.rejects(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "---------------"
        ],
        "test/fetch/issue-1447.js||test/fetch/issue-1447.js": [
          "File: test/fetch/issue-1447.js -> test/fetch/issue-1447.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "5: const undici = require('../..')",
          "6: const { fetch: theoreticalGlobalFetch } = require('../../undici-fetch')",
          "8: test('Mocking works with both fetches', async (t) => {",
          "9:   const mockAgent = new undici.MockAgent()",
          "10:   const body = JSON.stringify({ foo: 'bar' })",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const { tspl } = require('@matteo.collina/tspl')",
          "10:   const { strictEqual } = tspl(t, { plan: 3 })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     path: '/path',",
          "18:     method: 'POST',",
          "19:     body (bodyString) {",
          "21:       return true",
          "22:     }",
          "23:   }).reply(200, { ok: 1 }).times(2)",
          "",
          "[Removed Lines]",
          "20:       t.equal(bodyString, body)",
          "",
          "[Added Lines]",
          "23:       strictEqual(bodyString, body)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:     method: 'POST',",
          "36:     body",
          "37:   })",
          "40: })",
          "",
          "[Removed Lines]",
          "39:   t.end()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fetch/issue-2009.js||test/fetch/issue-2009.js": [
          "File: test/fetch/issue-2009.js -> test/fetch/issue-2009.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { fetch } = require('../..')",
          "5: const { createServer } = require('http')",
          "6: const { once } = require('events')",
          "8: test('issue 2009', async (t) => {",
          "9:   const server = createServer((req, res) => {",
          "10:     res.setHeader('a', 'b')",
          "11:     res.flushHeaders()",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const { tspl } = require('@matteo.collina/tspl')",
          "10:   const { doesNotReject } = tspl(t, { plan: 10 })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     res.socket.end()",
          "14:   }).listen(0)",
          "17:   await once(server, 'listening')",
          "19:   for (let i = 0; i < 10; i++) {",
          "21:       fetch(`http://localhost:${server.address().port}`).then(",
          "22:         async (resp) => {",
          "23:           await resp.body.cancel('Some message')",
          "",
          "[Removed Lines]",
          "16:   t.teardown(server.close.bind(server))",
          "20:     await t.resolves(",
          "",
          "[Added Lines]",
          "19:   t.after(server.close.bind(server))",
          "23:     await doesNotReject(",
          "",
          "---------------"
        ],
        "test/fetch/issue-2021.js||test/fetch/issue-2021.js": [
          "File: test/fetch/issue-2021.js -> test/fetch/issue-2021.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { once } = require('events')",
          "5: const { createServer } = require('http')",
          "6: const { fetch } = require('../..')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('node:assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     res.end()",
          "18:   }).listen(0).unref()",
          "21:   await once(server, 'listening')",
          "23:   const body = 'a+b+c'",
          "26:     method: 'POST',",
          "27:     body,",
          "28:     headers: {",
          "",
          "[Removed Lines]",
          "20:   t.teardown(server.close.bind(server))",
          "25:   await t.resolves(fetch(`http://localhost:${server.address().port}/redirect`, {",
          "",
          "[Added Lines]",
          "21:   t.after(server.close.bind(server))",
          "26:   await assert.doesNotReject(fetch(`http://localhost:${server.address().port}/redirect`, {",
          "",
          "---------------"
        ],
        "test/fetch/issue-2242.js||test/fetch/issue-2242.js": [
          "File: test/fetch/issue-2242.js -> test/fetch/issue-2242.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { fetch } = require('../..')",
          "8: })",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "6: test('fetch with signal already aborted', async (t) => {",
          "7:   await t.rejects(fetch('http://localhost', { signal: AbortSignal.abort('Already aborted') }), 'Already aborted')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('node:assert')",
          "7: test('fetch with signal already aborted', async () => {",
          "8:   await assert.rejects(",
          "9:     fetch('http://localhost', {",
          "10:       signal: AbortSignal.abort('Already aborted')",
          "11:     }),",
          "12:     /Already aborted/",
          "13:   )",
          "",
          "---------------"
        ],
        "test/fetch/issue-2318.js||test/fetch/issue-2318.js": [
          "File: test/fetch/issue-2318.js -> test/fetch/issue-2318.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { once } = require('events')",
          "5: const { createServer } = require('http')",
          "6: const { fetch } = require('../..')",
          "8: test('Undici overrides user-provided `Host` header', async (t) => {",
          "11:   const server = createServer((req, res) => {",
          "14:     res.end()",
          "15:   }).listen(0)",
          "18:   await once(server, 'listening')",
          "20:   await fetch(`http://localhost:${server.address().port}`, {",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "9:   t.plan(1)",
          "12:     t.equal(req.headers.host, `localhost:${server.address().port}`)",
          "17:   t.teardown(server.close.bind(server))",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const { tspl } = require('@matteo.collina/tspl')",
          "10:   const { strictEqual } = tspl(t, { plan: 1 })",
          "13:     strictEqual(req.headers.host, `localhost:${server.address().port}`)",
          "18:   t.after(server.close.bind(server))",
          "",
          "---------------"
        ],
        "test/fetch/issue-node-46525.js||test/fetch/issue-node-46525.js": [
          "File: test/fetch/issue-node-46525.js -> test/fetch/issue-node-46525.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const { once } = require('events')",
          "4: const { createServer } = require('http')",
          "6: const { fetch } = require('../..')",
          "9: test('No warning when reusing AbortController', async (t) => {",
          "12:   }",
          "14:   const server = createServer((req, res) => res.end()).listen(0)",
          "",
          "[Removed Lines]",
          "5: const { test } = require('tap')",
          "10:   function onWarning (error) {",
          "11:     t.error(error, 'Got warning')",
          "",
          "[Added Lines]",
          "5: const { test } = require('node:test')",
          "10:   function onWarning () {",
          "11:     throw new Error('Got warning')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   await once(server, 'listening')",
          "18:   process.on('warning', onWarning)",
          "20:     process.off('warning', onWarning)",
          "21:     return server.close()",
          "22:   })",
          "",
          "[Removed Lines]",
          "19:   t.teardown(() => {",
          "",
          "[Added Lines]",
          "19:   t.after(() => {",
          "",
          "---------------"
        ],
        "test/fetch/iterators.js||test/fetch/iterators.js": [
          "File: test/fetch/iterators.js -> test/fetch/iterators.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { Headers, FormData } = require('../..')",
          "8:     const headers = new Headers([['a', 'b'], ['c', 'd']])",
          "10:     for (const iterable of ['keys', 'values', 'entries', Symbol.iterator]) {",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "6: test('Implements \" Iterator\" properly', (t) => {",
          "7:   t.test('all Headers iterators implement Headers Iterator', (t) => {",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('node:assert')",
          "7: test('Implements \" Iterator\" properly', async (t) => {",
          "8:   await t.test('all Headers iterators implement Headers Iterator', () => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:       const IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))",
          "14:       const iteratorProto = Object.getPrototypeOf(gen)",
          "28:     }",
          "31:   })",
          "34:     const fd = new FormData()",
          "36:     for (const iterable of ['keys', 'values', 'entries', Symbol.iterator]) {",
          "",
          "[Removed Lines]",
          "16:       t.ok(gen.constructor === Object)",
          "17:       t.ok(gen.prototype === undefined)",
          "19:       t.equal(gen.__proto__[Symbol.toStringTag], 'Headers Iterator')",
          "21:       t.notOk(Headers.prototype[iterable] instanceof function * () {}.constructor)",
          "23:       t.ok(gen.__proto__.next.__proto__ === Function.prototype)",
          "26:       t.equal(gen[Symbol.iterator], IteratorPrototype[Symbol.iterator])",
          "27:       t.equal(Object.getPrototypeOf(iteratorProto), IteratorPrototype)",
          "30:     t.end()",
          "33:   t.test('all FormData iterators implement FormData Iterator', (t) => {",
          "",
          "[Added Lines]",
          "17:       assert.ok(gen.constructor === Object)",
          "18:       assert.ok(gen.prototype === undefined)",
          "20:       assert.strictEqual(gen.__proto__[Symbol.toStringTag], 'Headers Iterator')",
          "22:       assert.ok(!(Headers.prototype[iterable] instanceof function * () {}.constructor))",
          "24:       assert.ok(gen.__proto__.next.__proto__ === Function.prototype)",
          "27:       assert.strictEqual(gen[Symbol.iterator], IteratorPrototype[Symbol.iterator])",
          "28:       assert.strictEqual(Object.getPrototypeOf(iteratorProto), IteratorPrototype)",
          "32:   await t.test('all FormData iterators implement FormData Iterator', () => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:       const IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))",
          "40:       const iteratorProto = Object.getPrototypeOf(gen)",
          "54:     }",
          "57:   })",
          "61:       const headers = new Headers([['a', 'b'], ['c', 'd']])",
          "62:       const gen = headers.entries()",
          "67:     })",
          "70:       const fd = new FormData()",
          "71:       const gen = fd.entries()",
          "76:     })",
          "79:   })",
          "83:       const headers = new Headers([['a', 'b'], ['c', 'd']])",
          "84:       const gen = headers.entries()",
          "91:     })",
          "94:       const fd = new FormData()",
          "95:       const gen = fd.entries()",
          "102:     })",
          "105:   })",
          "109:     const headerValues = new Headers([['a', 'b']]).entries()[Symbol.iterator]()",
          "113:     const formdata = new FormData()",
          "114:     formdata.set('a', 'b')",
          "115:     const formdataValues = formdata.entries()[Symbol.iterator]()",
          "119:   })",
          "124:       const gen = new Headers().entries()",
          "126:       gen.__proto__.next()",
          "127:     }, TypeError)",
          "131:       const gen = new FormData().entries()",
          "133:       gen.__proto__.next()",
          "134:     }, TypeError)",
          "137:   })",
          "140: })",
          "",
          "[Removed Lines]",
          "42:       t.ok(gen.constructor === Object)",
          "43:       t.ok(gen.prototype === undefined)",
          "45:       t.equal(gen.__proto__[Symbol.toStringTag], 'FormData Iterator')",
          "47:       t.notOk(Headers.prototype[iterable] instanceof function * () {}.constructor)",
          "49:       t.ok(gen.__proto__.next.__proto__ === Function.prototype)",
          "52:       t.equal(gen[Symbol.iterator], IteratorPrototype[Symbol.iterator])",
          "53:       t.equal(Object.getPrototypeOf(iteratorProto), IteratorPrototype)",
          "56:     t.end()",
          "59:   t.test('Iterator symbols are properly set', (t) => {",
          "60:     t.test('Headers', (t) => {",
          "64:       t.equal(typeof gen[Symbol.toStringTag], 'string')",
          "65:       t.equal(typeof gen[Symbol.iterator], 'function')",
          "66:       t.end()",
          "69:     t.test('FormData', (t) => {",
          "73:       t.equal(typeof gen[Symbol.toStringTag], 'string')",
          "74:       t.equal(typeof gen[Symbol.iterator], 'function')",
          "75:       t.end()",
          "78:     t.end()",
          "81:   t.test('Iterator does not inherit Generator prototype methods', (t) => {",
          "82:     t.test('Headers', (t) => {",
          "86:       t.equal(gen.return, undefined)",
          "87:       t.equal(gen.throw, undefined)",
          "88:       t.equal(typeof gen.next, 'function')",
          "90:       t.end()",
          "93:     t.test('FormData', (t) => {",
          "97:       t.equal(gen.return, undefined)",
          "98:       t.equal(gen.throw, undefined)",
          "99:       t.equal(typeof gen.next, 'function')",
          "101:       t.end()",
          "104:     t.end()",
          "107:   t.test('Symbol.iterator', (t) => {",
          "110:     t.same(Array.from(headerValues), [['a', 'b']])",
          "116:     t.same(Array.from(formdataValues), [['a', 'b']])",
          "118:     t.end()",
          "121:   t.test('brand check', (t) => {",
          "123:     t.throws(() => {",
          "130:     t.throws(() => {",
          "136:     t.end()",
          "139:   t.end()",
          "",
          "[Added Lines]",
          "41:       assert.ok(gen.constructor === Object)",
          "42:       assert.ok(gen.prototype === undefined)",
          "44:       assert.strictEqual(gen.__proto__[Symbol.toStringTag], 'FormData Iterator')",
          "46:       assert.ok(!(Headers.prototype[iterable] instanceof function * () {}.constructor))",
          "48:       assert.ok(gen.__proto__.next.__proto__ === Function.prototype)",
          "51:       assert.strictEqual(gen[Symbol.iterator], IteratorPrototype[Symbol.iterator])",
          "52:       assert.strictEqual(Object.getPrototypeOf(iteratorProto), IteratorPrototype)",
          "56:   await t.test('Iterator symbols are properly set', async (t) => {",
          "57:     await t.test('Headers', () => {",
          "61:       assert.strictEqual(typeof gen[Symbol.toStringTag], 'string')",
          "62:       assert.strictEqual(typeof gen[Symbol.iterator], 'function')",
          "65:     await t.test('FormData', () => {",
          "69:       assert.strictEqual(typeof gen[Symbol.toStringTag], 'string')",
          "70:       assert.strictEqual(typeof gen[Symbol.iterator], 'function')",
          "74:   await t.test('Iterator does not inherit Generator prototype methods', async (t) => {",
          "75:     await t.test('Headers', () => {",
          "79:       assert.strictEqual(gen.return, undefined)",
          "80:       assert.strictEqual(gen.throw, undefined)",
          "81:       assert.strictEqual(typeof gen.next, 'function')",
          "84:     await t.test('FormData', () => {",
          "88:       assert.strictEqual(gen.return, undefined)",
          "89:       assert.strictEqual(gen.throw, undefined)",
          "90:       assert.strictEqual(typeof gen.next, 'function')",
          "94:   await t.test('Symbol.iterator', () => {",
          "97:     assert.deepStrictEqual(Array.from(headerValues), [['a', 'b']])",
          "103:     assert.deepStrictEqual(Array.from(formdataValues), [['a', 'b']])",
          "106:   await t.test('brand check', () => {",
          "108:     assert.throws(() => {",
          "115:     assert.throws(() => {",
          "",
          "---------------"
        ],
        "test/fetch/jsdom-abortcontroller-1910-1464495619.js||test/fetch/jsdom-abortcontroller-1910-1464495619.js": [
          "File: test/fetch/jsdom-abortcontroller-1910-1464495619.js -> test/fetch/jsdom-abortcontroller-1910-1464495619.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { createServer } = require('http')",
          "5: const { once } = require('events')",
          "6: const { fetch } = require('../..')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('node:assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   const { AbortController } = new JSDOM().window",
          "14:   let controller = new AbortController()",
          "17:     controller.abort()",
          "18:     controller = null",
          "19:     return server.close()",
          "20:   })",
          "21:   await once(server, 'listening')",
          "24:     signal: controller.signal",
          "25:   }))",
          "26: })",
          "",
          "[Removed Lines]",
          "16:   t.teardown(() => {",
          "23:   await t.resolves(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "[Added Lines]",
          "17:   t.after(() => {",
          "24:   await assert.doesNotReject(fetch(`http://localhost:${server.address().port}`, {",
          "",
          "---------------"
        ],
        "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js": [
          "File: test/fetch/redirect-cross-origin-header.js -> test/fetch/redirect-cross-origin-header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { createServer } = require('http')",
          "5: const { once } = require('events')",
          "6: const { fetch } = require('../..')",
          "8: test('Cross-origin redirects clear forbidden headers', async (t) => {",
          "11:   const server1 = createServer((req, res) => {",
          "15:     res.end('redirected')",
          "16:   }).listen(0)",
          "18:   const server2 = createServer((req, res) => {",
          "22:     res.writeHead(302, {",
          "23:       ...req.headers,",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "9:   t.plan(5)",
          "12:     t.equal(req.headers.cookie, undefined)",
          "13:     t.equal(req.headers.authorization, undefined)",
          "19:     t.equal(req.headers.authorization, 'test')",
          "20:     t.equal(req.headers.cookie, 'ddd=dddd')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const { tspl } = require('@matteo.collina/tspl')",
          "10:   const { strictEqual } = tspl(t, { plan: 5 })",
          "13:     strictEqual(req.headers.cookie, undefined)",
          "14:     strictEqual(req.headers.authorization, undefined)",
          "20:     strictEqual(req.headers.authorization, 'test')",
          "21:     strictEqual(req.headers.cookie, 'ddd=dddd')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     res.end()",
          "27:   }).listen(0)",
          "30:     server1.close()",
          "31:     server2.close()",
          "32:   })",
          "",
          "[Removed Lines]",
          "29:   t.teardown(() => {",
          "",
          "[Added Lines]",
          "30:   t.after(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   })",
          "46:   const text = await res.text()",
          "48: })",
          "",
          "[Removed Lines]",
          "47:   t.equal(text, 'redirected')",
          "",
          "[Added Lines]",
          "48:   strictEqual(text, 'redirected')",
          "",
          "---------------"
        ],
        "test/fetch/redirect.js||test/fetch/redirect.js": [
          "File: test/fetch/redirect.js -> test/fetch/redirect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { createServer } = require('http')",
          "5: const { once } = require('events')",
          "6: const { fetch } = require('../..')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('node:assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     res.end()",
          "21:   }).listen(0)",
          "24:   await once(server, 'listening')",
          "26:   const resp = await fetch(`http://localhost:${server.address().port}/redirect`)",
          "29: })",
          "31: test('Redirecting with an empty body does not throw an error - #2027', async (t) => {",
          "",
          "[Removed Lines]",
          "23:   t.teardown(server.close.bind(server))",
          "27:   t.equal(await resp.text(), '/redirect/')",
          "28:   t.ok(resp.redirected)",
          "",
          "[Added Lines]",
          "24:   t.after(server.close.bind(server))",
          "28:   assert.strictEqual(await resp.text(), '/redirect/')",
          "29:   assert.ok(resp.redirected)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     res.end()",
          "42:   }).listen(0)",
          "45:   await once(server, 'listening')",
          "47:   const resp = await fetch(`http://localhost:${server.address().port}/redirect`, { method: 'PUT', body: '' })",
          "50: })",
          "52: test('Redirecting with a body does not fail to write body - #2543', async (t) => {",
          "",
          "[Removed Lines]",
          "44:   t.teardown(server.close.bind(server))",
          "48:   t.equal(await resp.text(), '/redirect/')",
          "49:   t.ok(resp.redirected)",
          "",
          "[Added Lines]",
          "45:   t.after(server.close.bind(server))",
          "49:   assert.strictEqual(await resp.text(), '/redirect/')",
          "50:   assert.ok(resp.redirected)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58:     } else {",
          "59:       let body = ''",
          "60:       req.on('data', (chunk) => { body += chunk })",
          "62:       res.write('ok')",
          "63:       res.end()",
          "64:     }",
          "65:   }).listen(0)",
          "68:   await once(server, 'listening')",
          "70:   const resp = await fetch(`http://localhost:${server.address().port}/redirect`, {",
          "71:     method: 'POST',",
          "72:     body: 'body'",
          "73:   })",
          "76: })",
          "",
          "[Removed Lines]",
          "61:       req.on('end', () => t.equals(body, 'body'))",
          "67:   t.teardown(server.close.bind(server))",
          "74:   t.equal(await resp.text(), 'ok')",
          "75:   t.ok(resp.redirected)",
          "",
          "[Added Lines]",
          "62:       req.on('end', () => assert.strictEqual(body, 'body'))",
          "68:   t.after(server.close.bind(server))",
          "75:   assert.strictEqual(await resp.text(), 'ok')",
          "76:   assert.ok(resp.redirected)",
          "",
          "---------------"
        ],
        "test/fetch/relative-url.js||test/fetch/relative-url.js": [
          "File: test/fetch/relative-url.js -> test/fetch/relative-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { createServer } = require('http')",
          "5: const { once } = require('events')",
          "6: const {",
          "",
          "[Removed Lines]",
          "3: const { test, afterEach } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test, afterEach } = require('node:test')",
          "4: const assert = require('node:assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: afterEach(() => setGlobalOrigin(undefined))",
          "19:   setGlobalOrigin('http://localhost:3000')",
          "22:   setGlobalOrigin(undefined)",
          "25:   setGlobalOrigin(new URL('http://localhost:3000'))",
          "29:     setGlobalOrigin('invalid.url')",
          "30:   }, TypeError)",
          "33:     setGlobalOrigin('wss://invalid.protocol')",
          "34:   }, TypeError)",
          "39: })",
          "43:     Response.redirect('/relative/path', 302)",
          "44:   }, TypeError('Failed to parse URL from /relative/path'))",
          "47:     setGlobalOrigin('http://localhost:3000')",
          "48:     Response.redirect('/relative/path', 302)",
          "49:   })",
          "",
          "[Removed Lines]",
          "16: test('setGlobalOrigin & getGlobalOrigin', (t) => {",
          "17:   t.equal(getGlobalOrigin(), undefined)",
          "20:   t.same(getGlobalOrigin(), new URL('http://localhost:3000'))",
          "23:   t.equal(getGlobalOrigin(), undefined)",
          "26:   t.same(getGlobalOrigin(), new URL('http://localhost:3000'))",
          "28:   t.throws(() => {",
          "32:   t.throws(() => {",
          "36:   t.throws(() => setGlobalOrigin(true))",
          "38:   t.end()",
          "41: test('Response.redirect', (t) => {",
          "42:   t.throws(() => {",
          "46:   t.doesNotThrow(() => {",
          "",
          "[Added Lines]",
          "17: test('setGlobalOrigin & getGlobalOrigin', () => {",
          "18:   assert.strictEqual(getGlobalOrigin(), undefined)",
          "21:   assert.deepStrictEqual(getGlobalOrigin(), new URL('http://localhost:3000'))",
          "24:   assert.strictEqual(getGlobalOrigin(), undefined)",
          "27:   assert.deepStrictEqual(getGlobalOrigin(), new URL('http://localhost:3000'))",
          "29:   assert.throws(() => {",
          "33:   assert.throws(() => {",
          "37:   assert.throws(() => setGlobalOrigin(true))",
          "40: test('Response.redirect', () => {",
          "41:   assert.throws(() => {",
          "45:   assert.doesNotThrow(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   setGlobalOrigin('http://localhost:3000')",
          "52:   const response = Response.redirect('/relative/path', 302)",
          "57: })",
          "59: test('new Request', (t) => {",
          "61:     () => new Request('/relative/path'),",
          "62:     TypeError('Failed to parse URL from /relative/path')",
          "63:   )",
          "66:     setGlobalOrigin('http://localhost:3000')",
          "68:     new Request('/relative/path')",
          "",
          "[Removed Lines]",
          "54:   t.equal(response.headers.get('location'), 'http://localhost:3000/relative/path')",
          "56:   t.end()",
          "60:   t.throws(",
          "65:   t.doesNotThrow(() => {",
          "",
          "[Added Lines]",
          "53:   assert.strictEqual(response.headers.get('location'), 'http://localhost:3000/relative/path')",
          "57:   assert.throws(",
          "62:   assert.doesNotThrow(() => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:   setGlobalOrigin('http://localhost:3000')",
          "72:   const request = new Request('/relative/path')",
          "76: })",
          "78: test('fetch', async (t) => {",
          "84:     const server = createServer((req, res) => {",
          "86:       res.end()",
          "87:     }).listen(0)",
          "89:     setGlobalOrigin(`http://localhost:${server.address().port}`)",
          "91:     await once(server, 'listening')",
          "94:   })",
          "97:     const server = createServer((req, res) => {",
          "99:       res.end()",
          "100:     }).listen(0)",
          "102:     setGlobalOrigin(`http://localhost:${server.address().port}`)",
          "104:     await once(server, 'listening')",
          "106:     const response = await fetch('/relative/path')",
          "109:   })",
          "110: })",
          "",
          "[Removed Lines]",
          "73:   t.equal(request.url, 'http://localhost:3000/relative/path')",
          "75:   t.end()",
          "79:   await t.rejects(async () => {",
          "80:     await fetch('/relative/path')",
          "81:   }, TypeError('Failed to parse URL from /relative/path'))",
          "83:   t.test('Basic fetch', async (t) => {",
          "85:       t.equal(req.url, '/relative/path')",
          "90:     t.teardown(server.close.bind(server))",
          "93:     await t.resolves(fetch('/relative/path'))",
          "96:   t.test('fetch return', async (t) => {",
          "98:       t.equal(req.url, '/relative/path')",
          "103:     t.teardown(server.close.bind(server))",
          "108:     t.equal(response.url, `http://localhost:${server.address().port}/relative/path`)",
          "",
          "[Added Lines]",
          "70:   assert.strictEqual(request.url, 'http://localhost:3000/relative/path')",
          "74:   await assert.rejects(fetch('/relative/path'), TypeError('Failed to parse URL from /relative/path'))",
          "76:   await t.test('Basic fetch', async (t) => {",
          "78:       assert.strictEqual(req.url, '/relative/path')",
          "83:     t.after(server.close.bind(server))",
          "86:     await assert.doesNotReject(fetch('/relative/path'))",
          "89:   await t.test('fetch return', async (t) => {",
          "91:       assert.strictEqual(req.url, '/relative/path')",
          "96:     t.after(server.close.bind(server))",
          "101:     assert.strictEqual(response.url, `http://localhost:${server.address().port}/relative/path`)",
          "",
          "---------------"
        ],
        "test/fetch/request.js||test/fetch/request.js": [
          "File: test/fetch/request.js -> test/fetch/request.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: 'use strict'",
          "6: const {",
          "7:   Request,",
          "8:   Headers,",
          "",
          "[Removed Lines]",
          "5: const { test, teardown } = require('tap')",
          "",
          "[Added Lines]",
          "5: const { test } = require('node:test')",
          "6: const assert = require('node:assert')",
          "7: const { tspl } = require('@matteo.collina/tspl')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: test('arg validation', async (t) => {",
          "22:     new Request()",
          "23:   }, TypeError)",
          "26:     new Request('http://asd', 0)",
          "27:   }, TypeError)",
          "29:     const url = new URL('http://asd')",
          "30:     url.password = 'asd'",
          "32:     new Request(url)",
          "33:   }, TypeError)",
          "35:     const url = new URL('http://asd')",
          "36:     url.username = 'asd'",
          "38:     new Request(url)",
          "39:   }, TypeError)",
          "42:     new Request('http://asd', undefined)",
          "43:   }, TypeError)",
          "46:     new Request('http://asd', {",
          "47:       window: {}",
          "48:     })",
          "49:   }, TypeError)",
          "52:     new Request('http://asd', {",
          "53:       window: 1",
          "54:     })",
          "55:   }, TypeError)",
          "58:     new Request('http://asd', {",
          "59:       mode: 'navigate'",
          "60:     })",
          "61:   })",
          "65:     new Request('http://asd', {",
          "66:       referrerPolicy: 'agjhagna'",
          "67:     })",
          "68:   }, TypeError)",
          "72:     new Request('http://asd', {",
          "73:       mode: 'agjhagna'",
          "74:     })",
          "75:   }, TypeError)",
          "79:     new Request('http://asd', {",
          "80:       credentials: 'agjhagna'",
          "81:     })",
          "82:   }, TypeError)",
          "86:     new Request('http://asd', {",
          "87:       cache: 'agjhagna'",
          "88:     })",
          "89:   }, TypeError)",
          "93:     new Request('http://asd', {",
          "94:       method: 'agjhagna\u00f6\u00f6\u00f6\u00f6'",
          "95:     })",
          "96:   }, TypeError)",
          "100:     new Request('http://asd', {",
          "101:       method: 'TRACE'",
          "102:     })",
          "103:   }, TypeError)",
          "106:     Request.prototype.destination.toString()",
          "107:   }, TypeError)",
          "110:     Request.prototype.referrer.toString()",
          "111:   }, TypeError)",
          "114:     Request.prototype.referrerPolicy.toString()",
          "115:   }, TypeError)",
          "118:     Request.prototype.mode.toString()",
          "119:   }, TypeError)",
          "122:     Request.prototype.credentials.toString()",
          "123:   }, TypeError)",
          "126:     Request.prototype.cache.toString()",
          "127:   }, TypeError)",
          "130:     Request.prototype.redirect.toString()",
          "131:   }, TypeError)",
          "134:     Request.prototype.integrity.toString()",
          "135:   }, TypeError)",
          "138:     Request.prototype.keepalive.toString()",
          "139:   }, TypeError)",
          "142:     Request.prototype.isReloadNavigation.toString()",
          "143:   }, TypeError)",
          "146:     Request.prototype.isHistoryNavigation.toString()",
          "147:   }, TypeError)",
          "150:     Request.prototype.signal.toString()",
          "151:   }, TypeError)",
          "155:     Request.prototype.body",
          "156:   }, TypeError)",
          "160:     Request.prototype.bodyUsed",
          "161:   }, TypeError)",
          "164:     Request.prototype.clone.call(null)",
          "165:   }, TypeError)",
          "168:     Request.prototype[Symbol.toStringTag].charAt(0)",
          "169:   })",
          "",
          "[Removed Lines]",
          "20:   t.throws(() => {",
          "24:   t.throws(() => {",
          "28:   t.throws(() => {",
          "34:   t.throws(() => {",
          "40:   t.doesNotThrow(() => {",
          "44:   t.throws(() => {",
          "50:   t.throws(() => {",
          "56:   t.throws(() => {",
          "63:   t.throws(() => {",
          "70:   t.throws(() => {",
          "77:   t.throws(() => {",
          "84:   t.throws(() => {",
          "91:   t.throws(() => {",
          "98:   t.throws(() => {",
          "105:   t.throws(() => {",
          "109:   t.throws(() => {",
          "113:   t.throws(() => {",
          "117:   t.throws(() => {",
          "121:   t.throws(() => {",
          "125:   t.throws(() => {",
          "129:   t.throws(() => {",
          "133:   t.throws(() => {",
          "137:   t.throws(() => {",
          "141:   t.throws(() => {",
          "145:   t.throws(() => {",
          "149:   t.throws(() => {",
          "153:   t.throws(() => {",
          "158:   t.throws(() => {",
          "163:   t.throws(() => {",
          "167:   t.doesNotThrow(() => {",
          "",
          "[Added Lines]",
          "22:   assert.throws(() => {",
          "26:   assert.throws(() => {",
          "30:   assert.throws(() => {",
          "36:   assert.throws(() => {",
          "42:   assert.doesNotThrow(() => {",
          "46:   assert.throws(() => {",
          "52:   assert.throws(() => {",
          "58:   assert.throws(() => {",
          "65:   assert.throws(() => {",
          "72:   assert.throws(() => {",
          "79:   assert.throws(() => {",
          "86:   assert.throws(() => {",
          "93:   assert.throws(() => {",
          "100:   assert.throws(() => {",
          "107:   assert.throws(() => {",
          "111:   assert.throws(() => {",
          "115:   assert.throws(() => {",
          "119:   assert.throws(() => {",
          "123:   assert.throws(() => {",
          "127:   assert.throws(() => {",
          "131:   assert.throws(() => {",
          "135:   assert.throws(() => {",
          "139:   assert.throws(() => {",
          "143:   assert.throws(() => {",
          "147:   assert.throws(() => {",
          "151:   assert.throws(() => {",
          "155:   assert.throws(() => {",
          "160:   assert.throws(() => {",
          "165:   assert.throws(() => {",
          "169:   assert.doesNotThrow(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:     'blob',",
          "176:     'formData'",
          "177:   ]) {",
          "179:       await new Request('http://localhost')[method].call({",
          "180:         blob () {",
          "181:           return {",
          "",
          "[Removed Lines]",
          "178:     await t.rejects(async () => {",
          "",
          "[Added Lines]",
          "180:     await assert.rejects(async () => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:       })",
          "188:     }, TypeError)",
          "189:   }",
          "192: })",
          "197: })",
          "200:   const req = new Request('http://asd', { body: undefined })",
          "203: })",
          "206:   const req = new Request('http://asd', { method: undefined })",
          "209: })",
          "212:   const req = new Request('http://asd', { headers: undefined })",
          "215: })",
          "218:   const req = new Request('http://asd', { referrer: undefined })",
          "221: })",
          "224:   const req = new Request('http://asd', { referrerPolicy: undefined })",
          "227: })",
          "230:   const req = new Request('http://asd', { mode: undefined })",
          "233: })",
          "236:   const req = new Request('http://asd', { credentials: undefined })",
          "239: })",
          "242:   const req = new Request('http://asd', { cache: undefined })",
          "245: })",
          "248:   const req = new Request('http://asd', { redirect: undefined })",
          "251: })",
          "254:   const req = new Request('http://asd', { keepalive: undefined })",
          "257: })",
          "260:   const req = new Request('http://asd', { integrity: undefined })",
          "263: })",
          "266:   const req = new Request('http://asd', { integrity: null })",
          "269: })",
          "272:   const req = new Request('http://asd', { signal: undefined })",
          "275: })",
          "278:   const ac = new AbortController()",
          "279:   ac.abort('gwak')",
          "280:   const req = new Request('http://asd', { signal: ac.signal })",
          "282:   if (hasSignalReason) {",
          "284:   }",
          "286: })",
          "291:   const ac = new AbortController()",
          "292:   const req = new Request('http://asd', { signal: ac.signal })",
          "294:   ac.signal.addEventListener('abort', () => {",
          "295:     if (hasSignalReason) {",
          "297:     } else {",
          "299:     }",
          "300:   }, { once: true })",
          "301:   ac.abort('gwak')",
          "302: })",
          "305:   const ac = new AbortController()",
          "306:   ac.abort('gwak')",
          "307:   const req = new Request('http://asd', { signal: ac.signal }).clone()",
          "309:   if (hasSignalReason) {",
          "311:   }",
          "313: })",
          "316:   const body = new URLSearchParams({",
          "317:     abc: 123",
          "318:   })",
          "",
          "[Removed Lines]",
          "191:   t.end()",
          "194: test('undefined window', t => {",
          "195:   t.doesNotThrow(() => new Request('http://asd', { window: undefined }))",
          "196:   t.end()",
          "199: test('undefined body', t => {",
          "201:   t.equal(req.body, null)",
          "202:   t.end()",
          "205: test('undefined method', t => {",
          "207:   t.equal(req.method, 'GET')",
          "208:   t.end()",
          "211: test('undefined headers', t => {",
          "213:   t.equal([...req.headers.entries()].length, 0)",
          "214:   t.end()",
          "217: test('undefined referrer', t => {",
          "219:   t.equal(req.referrer, 'about:client')",
          "220:   t.end()",
          "223: test('undefined referrerPolicy', t => {",
          "225:   t.equal(req.referrerPolicy, '')",
          "226:   t.end()",
          "229: test('undefined mode', t => {",
          "231:   t.equal(req.mode, 'cors')",
          "232:   t.end()",
          "235: test('undefined credentials', t => {",
          "237:   t.equal(req.credentials, 'same-origin')",
          "238:   t.end()",
          "241: test('undefined cache', t => {",
          "243:   t.equal(req.cache, 'default')",
          "244:   t.end()",
          "247: test('undefined redirect', t => {",
          "249:   t.equal(req.redirect, 'follow')",
          "250:   t.end()",
          "253: test('undefined keepalive', t => {",
          "255:   t.equal(req.keepalive, false)",
          "256:   t.end()",
          "259: test('undefined integrity', t => {",
          "261:   t.equal(req.integrity, '')",
          "262:   t.end()",
          "265: test('null integrity', t => {",
          "267:   t.equal(req.integrity, 'null')",
          "268:   t.end()",
          "271: test('undefined signal', t => {",
          "273:   t.equal(req.signal.aborted, false)",
          "274:   t.end()",
          "277: test('pre aborted signal', t => {",
          "281:   t.equal(req.signal.aborted, true)",
          "283:     t.equal(req.signal.reason, 'gwak')",
          "285:   t.end()",
          "288: test('post aborted signal', t => {",
          "289:   t.plan(2)",
          "293:   t.equal(req.signal.aborted, false)",
          "296:       t.equal(req.signal.reason, 'gwak')",
          "298:       t.pass()",
          "304: test('pre aborted signal cloned', t => {",
          "308:   t.equal(req.signal.aborted, true)",
          "310:     t.equal(req.signal.reason, 'gwak')",
          "312:   t.end()",
          "315: test('URLSearchParams body with Headers object - issue #1407', async (t) => {",
          "",
          "[Added Lines]",
          "194: test('undefined window', () => {",
          "195:   assert.doesNotThrow(() => new Request('http://asd', { window: undefined }))",
          "198: test('undefined body', () => {",
          "200:   assert.strictEqual(req.body, null)",
          "203: test('undefined method', () => {",
          "205:   assert.strictEqual(req.method, 'GET')",
          "208: test('undefined headers', () => {",
          "210:   assert.strictEqual([...req.headers.entries()].length, 0)",
          "213: test('undefined referrer', () => {",
          "215:   assert.strictEqual(req.referrer, 'about:client')",
          "218: test('undefined referrerPolicy', () => {",
          "220:   assert.strictEqual(req.referrerPolicy, '')",
          "223: test('undefined mode', () => {",
          "225:   assert.strictEqual(req.mode, 'cors')",
          "228: test('undefined credentials', () => {",
          "230:   assert.strictEqual(req.credentials, 'same-origin')",
          "233: test('undefined cache', () => {",
          "235:   assert.strictEqual(req.cache, 'default')",
          "238: test('undefined redirect', () => {",
          "240:   assert.strictEqual(req.redirect, 'follow')",
          "243: test('undefined keepalive', () => {",
          "245:   assert.strictEqual(req.keepalive, false)",
          "248: test('undefined integrity', () => {",
          "250:   assert.strictEqual(req.integrity, '')",
          "253: test('null integrity', () => {",
          "255:   assert.strictEqual(req.integrity, 'null')",
          "258: test('undefined signal', () => {",
          "260:   assert.strictEqual(req.signal.aborted, false)",
          "263: test('pre aborted signal', () => {",
          "267:   assert.strictEqual(req.signal.aborted, true)",
          "269:     assert.strictEqual(req.signal.reason, 'gwak')",
          "273: test('post aborted signal', (t) => {",
          "274:   const { strictEqual, ok } = tspl(t, { plan: 2 })",
          "278:   strictEqual(req.signal.aborted, false)",
          "281:       strictEqual(req.signal.reason, 'gwak')",
          "283:       ok(true)",
          "289: test('pre aborted signal cloned', () => {",
          "293:   assert.strictEqual(req.signal.aborted, true)",
          "295:     assert.strictEqual(req.signal.reason, 'gwak')",
          "299: test('URLSearchParams body with Headers object - issue #1407', async () => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:     }",
          "329:   )",
          "334: })",
          "339:   const ac = new AbortController()",
          "340:   const req = new Request('http://asd', { signal: ac.signal }).clone()",
          "342:   ac.signal.addEventListener('abort', () => {",
          "343:     if (hasSignalReason) {",
          "345:     } else {",
          "347:     }",
          "348:   }, { once: true })",
          "349:   ac.abort('gwak')",
          "350: })",
          "355:     const req = new Request('http://localhost', {",
          "356:       headers: new Headers({ key: 'value' })",
          "357:     })",
          "361:   })",
          "364:     const req = new Request('http://localhost', {",
          "365:       headers: { key: 'value' }",
          "366:     })",
          "370:   })",
          "373:     const req = new Request('http://localhost', {",
          "374:       headers: [['key', 'value']]",
          "375:     })",
          "379:   })",
          "382: })",
          "385:   const req = new Request('http://localhost')",
          "390: })",
          "395:     new Request('http://l', { mode: 'CoRs' })",
          "396:   }, TypeError, 'not exact case = error')",
          "399:     new Request('http://l', { mode: 'random' })",
          "400:   }, TypeError)",
          "403:     new Request('http://l', { credentials: 'OMIt' })",
          "404:   }, TypeError, 'not exact case = error')",
          "407:     new Request('http://l', { credentials: 'random' })",
          "408:   }, TypeError)",
          "411:     new Request('http://l', { cache: 'DeFaULt' })",
          "412:   }, TypeError, 'not exact case = error')",
          "415:     new Request('http://l', { cache: 'random' })",
          "416:   }, TypeError)",
          "419:     new Request('http://l', { redirect: 'FOllOW' })",
          "420:   }, TypeError, 'not exact case = error')",
          "423:     new Request('http://l', { redirect: 'random' })",
          "424:   }, TypeError)",
          "428: })",
          "433:     new Request('http://asd', {",
          "434:       signal: true",
          "435:     })",
          "436:   }, TypeError)",
          "439:     signal: false",
          "440:   }), TypeError)",
          "441: })",
          "444:   const blob = new ThirdPartyBlob(['text'])",
          "445:   const req = new Request('http://asd', {",
          "446:     method: 'POST',",
          "447:     body: blob",
          "448:   })",
          "450: })",
          "452:   const form = new ThirdPartyFormData()",
          "453:   form.set('key', 'value')",
          "454:   const req = new Request('http://asd', {",
          "",
          "[Removed Lines]",
          "331:   t.equal(request.headers.get('content-type'), 'application/x-www-form-urlencoded;charset=UTF-8')",
          "332:   t.equal(request.headers.get('authorization'), 'test')",
          "333:   t.equal(await request.text(), 'abc=123')",
          "336: test('post aborted signal cloned', t => {",
          "337:   t.plan(2)",
          "341:   t.equal(req.signal.aborted, false)",
          "344:       t.equal(req.signal.reason, 'gwak')",
          "346:       t.pass()",
          "352: test('Passing headers in init', (t) => {",
          "354:   t.test('Headers instance', (t) => {",
          "359:     t.equal(req.headers.get('key'), 'value')",
          "360:     t.end()",
          "363:   t.test('key:value object', (t) => {",
          "368:     t.equal(req.headers.get('key'), 'value')",
          "369:     t.end()",
          "372:   t.test('[key, value][]', (t) => {",
          "377:     t.equal(req.headers.get('key'), 'value')",
          "378:     t.end()",
          "381:   t.end()",
          "384: test('Symbol.toStringTag', (t) => {",
          "387:   t.equal(req[Symbol.toStringTag], 'Request')",
          "388:   t.equal(Request.prototype[Symbol.toStringTag], 'Request')",
          "389:   t.end()",
          "392: test('invalid RequestInit values', (t) => {",
          "394:   t.throws(() => {",
          "398:   t.throws(() => {",
          "402:   t.throws(() => {",
          "406:   t.throws(() => {",
          "410:   t.throws(() => {",
          "414:   t.throws(() => {",
          "418:   t.throws(() => {",
          "422:   t.throws(() => {",
          "427:   t.end()",
          "430: test('RequestInit.signal option', async (t) => {",
          "431:   t.throws(() => {",
          "438:   await t.rejects(fetch('http://asd', {",
          "443: test('constructing Request with third party Blob body', async (t) => {",
          "449:   t.equal(await req.text(), 'text')",
          "451: test('constructing Request with third party FormData body', async (t) => {",
          "",
          "[Added Lines]",
          "315:   assert.strictEqual(request.headers.get('content-type'), 'application/x-www-form-urlencoded;charset=UTF-8')",
          "316:   assert.strictEqual(request.headers.get('authorization'), 'test')",
          "317:   assert.strictEqual(await request.text(), 'abc=123')",
          "320: test('post aborted signal cloned', (t) => {",
          "321:   const { strictEqual, ok } = tspl(t, { plan: 2 })",
          "325:   strictEqual(req.signal.aborted, false)",
          "328:       strictEqual(req.signal.reason, 'gwak')",
          "330:       ok(true)",
          "336: test('Passing headers in init', async (t) => {",
          "338:   await t.test('Headers instance', () => {",
          "343:     assert.strictEqual(req.headers.get('key'), 'value')",
          "346:   await t.test('key:value object', () => {",
          "351:     assert.strictEqual(req.headers.get('key'), 'value')",
          "354:   await t.test('[key, value][]', () => {",
          "359:     assert.strictEqual(req.headers.get('key'), 'value')",
          "363: test('Symbol.toStringTag', () => {",
          "366:   assert.strictEqual(req[Symbol.toStringTag], 'Request')",
          "367:   assert.strictEqual(Request.prototype[Symbol.toStringTag], 'Request')",
          "370: test('invalid RequestInit values', () => {",
          "372:   assert.throws(() => {",
          "376:   assert.throws(() => {",
          "380:   assert.throws(() => {",
          "384:   assert.throws(() => {",
          "388:   assert.throws(() => {",
          "392:   assert.throws(() => {",
          "396:   assert.throws(() => {",
          "400:   assert.throws(() => {",
          "406: test('RequestInit.signal option', async () => {",
          "407:   assert.throws(() => {",
          "414:   await assert.rejects(fetch('http://asd', {",
          "419: test('constructing Request with third party Blob body', async () => {",
          "425:   assert.strictEqual(await req.text(), 'text')",
          "427: test('constructing Request with third party FormData body', async () => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "456:     body: form",
          "457:   })",
          "458:   const contentType = req.headers.get('content-type').split('=')",
          "461: })",
          "465:   const req1 = new Request('http://localhost', {",
          "466:     headers: {",
          "467:       'set-cookie': 'a=1'",
          "468:     }",
          "469:   })",
          "472:   const req2 = new Request(req1, { headers: {} })",
          "477: })",
          "481:   for (const referrer of ['about://client', 'about://client:1234']) {",
          "482:     const request = new Request('http://a', { referrer })",
          "485:   }",
          "488: })",
          "491: test('Clone the set-cookie header when Request is passed as the first parameter and no header is passed.', (t) => {",
          "493:   const request = new Request('http://localhost', { headers: { 'set-cookie': 'A' } })",
          "494:   const request2 = new Request(request)",
          "495:   request2.headers.append('set-cookie', 'B')",
          "498: })",
          "501: test('keys to object prototypes method', (t) => {",
          "503:   const request = new Request('http://localhost', { method: 'hasOwnProperty' })",
          "505: })",
          "508: test('Issue#2465', async (t) => {",
          "510:   const request = new Request('http://localhost', { body: new SharedArrayBuffer(0), method: 'POST' })",
          "512: })",
          "",
          "[Removed Lines]",
          "459:   t.equal(contentType[0], 'multipart/form-data; boundary')",
          "460:   t.ok((await req.text()).startsWith(`--${contentType[1]}`))",
          "464: test('set-cookie headers get cleared when passing a Request as first param', (t) => {",
          "471:   t.same([...req1.headers], [['set-cookie', 'a=1']])",
          "474:   t.same([...req2.headers], [])",
          "475:   t.same(req2.headers.getSetCookie(), [])",
          "476:   t.end()",
          "480: test('request.referrer', (t) => {",
          "484:     t.equal(request.referrer, 'about:client')",
          "487:   t.end()",
          "492:   t.plan(2)",
          "496:   t.equal(request.headers.getSetCookie().join(', '), request.headers.get('set-cookie'))",
          "497:   t.equal(request2.headers.getSetCookie().join(', '), request2.headers.get('set-cookie'))",
          "502:   t.plan(1)",
          "504:   t.ok(typeof request.method === 'string')",
          "509:   t.plan(1)",
          "511:   t.equal(await request.text(), '[object SharedArrayBuffer]')",
          "514: teardown(() => process.exit())",
          "",
          "[Added Lines]",
          "435:   assert.strictEqual(contentType[0], 'multipart/form-data; boundary')",
          "436:   assert.ok((await req.text()).startsWith(`--${contentType[1]}`))",
          "440: test('set-cookie headers get cleared when passing a Request as first param', () => {",
          "447:   assert.deepStrictEqual([...req1.headers], [['set-cookie', 'a=1']])",
          "450:   assert.deepStrictEqual([...req2.headers], [])",
          "451:   assert.deepStrictEqual(req2.headers.getSetCookie(), [])",
          "455: test('request.referrer', () => {",
          "459:     assert.strictEqual(request.referrer, 'about:client')",
          "465:   const { strictEqual } = tspl(t, { plan: 2 })",
          "469:   strictEqual(request.headers.getSetCookie().join(', '), request.headers.get('set-cookie'))",
          "470:   strictEqual(request2.headers.getSetCookie().join(', '), request2.headers.get('set-cookie'))",
          "475:   const { ok } = tspl(t, { plan: 1 })",
          "477:   ok(typeof request.method === 'string')",
          "482:   const { strictEqual } = tspl(t, { plan: 1 })",
          "484:   strictEqual(await request.text(), '[object SharedArrayBuffer]')",
          "",
          "---------------"
        ],
        "test/fetch/resource-timing.js||test/fetch/resource-timing.js": [
          "File: test/fetch/resource-timing.js -> test/fetch/resource-timing.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { createServer } = require('http')",
          "5: const { nodeMajor, nodeMinor } = require('../../lib/core/util')",
          "6: const { fetch } = require('../..')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const { tspl } = require('@matteo.collina/tspl')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: const skip = nodeMajor === 18 && nodeMinor < 2",
          "18:   const obs = new PerformanceObserver(list => {",
          "19:     const expectedResourceEntryName = `http://localhost:${server.address().port}/`",
          "21:     const entries = list.getEntries()",
          "23:     const [entry] = entries",
          "30:     const entriesByName = list.getEntriesByName(expectedResourceEntryName)",
          "34:     obs.disconnect()",
          "35:     performance.clearResourceTimings()",
          "36:   })",
          "38:   obs.observe({ entryTypes: ['resource'] })",
          "",
          "[Removed Lines]",
          "15: test('should create a PerformanceResourceTiming after each fetch request', { skip }, (t) => {",
          "16:   t.plan(8)",
          "22:     t.equal(entries.length, 1)",
          "24:     t.same(entry.name, expectedResourceEntryName)",
          "25:     t.strictSame(entry.entryType, 'resource')",
          "27:     t.ok(entry.duration >= 0)",
          "28:     t.ok(entry.startTime >= 0)",
          "31:     t.equal(entriesByName.length, 1)",
          "32:     t.strictSame(entriesByName[0], entry)",
          "",
          "[Added Lines]",
          "16: test('should create a PerformanceResourceTiming after each fetch request', { skip }, (t, done) => {",
          "17:   const { strictEqual, ok, deepStrictEqual } = tspl(t, { plan: 8 })",
          "23:     strictEqual(entries.length, 1)",
          "25:     strictEqual(entry.name, expectedResourceEntryName)",
          "26:     strictEqual(entry.entryType, 'resource')",
          "28:     ok(entry.duration >= 0)",
          "29:     ok(entry.startTime >= 0)",
          "32:     strictEqual(entriesByName.length, 1)",
          "33:     deepStrictEqual(entriesByName[0], entry)",
          "37:     done()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     res.end('ok')",
          "42:   }).listen(0, async () => {",
          "43:     const body = await fetch(`http://localhost:${server.address().port}`)",
          "45:   })",
          "48: })",
          "52:   const obs = new PerformanceObserver(list => {",
          "53:     const [entry] = list.getEntries()",
          "58:     obs.disconnect()",
          "59:     performance.clearResourceTimings()",
          "60:   })",
          "62:   obs.observe({ entryTypes: ['resource'] })",
          "",
          "[Removed Lines]",
          "44:     t.strictSame('ok', await body.text())",
          "47:   t.teardown(server.close.bind(server))",
          "50: test('should include encodedBodySize in performance entry', { skip }, (t) => {",
          "51:   t.plan(4)",
          "54:     t.equal(entry.encodedBodySize, 2)",
          "55:     t.equal(entry.decodedBodySize, 2)",
          "56:     t.equal(entry.transferSize, 2 + 300)",
          "",
          "[Added Lines]",
          "46:     strictEqual('ok', await body.text())",
          "49:   t.after(server.close.bind(server))",
          "52: test('should include encodedBodySize in performance entry', { skip }, (t, done) => {",
          "53:   const { strictEqual } = tspl(t, { plan: 4 })",
          "56:     strictEqual(entry.encodedBodySize, 2)",
          "57:     strictEqual(entry.decodedBodySize, 2)",
          "58:     strictEqual(entry.transferSize, 2 + 300)",
          "62:     done()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:     res.end('ok')",
          "66:   }).listen(0, async () => {",
          "67:     const body = await fetch(`http://localhost:${server.address().port}`)",
          "69:   })",
          "72: })",
          "76:   const obs = new PerformanceObserver(list => {",
          "77:     const [entry] = list.getEntries()",
          "93:     obs.disconnect()",
          "94:     performance.clearResourceTimings()",
          "95:   })",
          "97:   obs.observe({ entryTypes: ['resource'] })",
          "",
          "[Removed Lines]",
          "68:     t.strictSame('ok', await body.text())",
          "71:   t.teardown(server.close.bind(server))",
          "74: test('timing entries should be in order', { skip }, (t) => {",
          "75:   t.plan(13)",
          "79:     t.ok(entry.startTime > 0)",
          "80:     t.ok(entry.fetchStart >= entry.startTime)",
          "81:     t.ok(entry.domainLookupStart >= entry.fetchStart)",
          "82:     t.ok(entry.domainLookupEnd >= entry.domainLookupStart)",
          "83:     t.ok(entry.connectStart >= entry.domainLookupEnd)",
          "84:     t.ok(entry.connectEnd >= entry.connectStart)",
          "85:     t.ok(entry.requestStart >= entry.connectEnd)",
          "86:     t.ok(entry.responseStart >= entry.requestStart)",
          "87:     t.ok(entry.responseEnd >= entry.responseStart)",
          "88:     t.ok(entry.duration > 0)",
          "90:     t.ok(entry.redirectStart === 0)",
          "91:     t.ok(entry.redirectEnd === 0)",
          "",
          "[Added Lines]",
          "71:     strictEqual('ok', await body.text())",
          "74:   t.after(server.close.bind(server))",
          "77: test('timing entries should be in order', { skip }, (t, done) => {",
          "78:   const { ok, strictEqual } = tspl(t, { plan: 13 })",
          "82:     ok(entry.startTime > 0)",
          "83:     ok(entry.fetchStart >= entry.startTime)",
          "84:     ok(entry.domainLookupStart >= entry.fetchStart)",
          "85:     ok(entry.domainLookupEnd >= entry.domainLookupStart)",
          "86:     ok(entry.connectStart >= entry.domainLookupEnd)",
          "87:     ok(entry.connectEnd >= entry.connectStart)",
          "88:     ok(entry.requestStart >= entry.connectEnd)",
          "89:     ok(entry.responseStart >= entry.requestStart)",
          "90:     ok(entry.responseEnd >= entry.responseStart)",
          "91:     ok(entry.duration > 0)",
          "93:     ok(entry.redirectStart === 0)",
          "94:     ok(entry.redirectEnd === 0)",
          "98:     done()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:     res.end('ok')",
          "101:   }).listen(0, async () => {",
          "102:     const body = await fetch(`http://localhost:${server.address().port}/redirect`)",
          "104:   })",
          "107: })",
          "111:   const obs = new PerformanceObserver(list => {",
          "112:     const [entry] = list.getEntries()",
          "118:     obs.disconnect()",
          "119:     performance.clearResourceTimings()",
          "120:   })",
          "122:   obs.observe({ entryTypes: ['resource'] })",
          "",
          "[Removed Lines]",
          "103:     t.strictSame('ok', await body.text())",
          "106:   t.teardown(server.close.bind(server))",
          "109: test('redirect timing entries should be included when redirecting', { skip }, (t) => {",
          "110:   t.plan(4)",
          "114:     t.ok(entry.redirectStart >= entry.startTime)",
          "115:     t.ok(entry.redirectEnd >= entry.redirectStart)",
          "116:     t.ok(entry.connectStart >= entry.redirectEnd)",
          "",
          "[Added Lines]",
          "107:     strictEqual('ok', await body.text())",
          "110:   t.after(server.close.bind(server))",
          "113: test('redirect timing entries should be included when redirecting', { skip }, (t, done) => {",
          "114:   const { ok, strictEqual } = tspl(t, { plan: 4 })",
          "118:     ok(entry.redirectStart >= entry.startTime)",
          "119:     ok(entry.redirectEnd >= entry.redirectStart)",
          "120:     ok(entry.connectStart >= entry.redirectEnd)",
          "124:     done()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131:     res.end('ok')",
          "132:   }).listen(0, async () => {",
          "133:     const body = await fetch(`http://localhost:${server.address().port}/redirect`)",
          "135:   })",
          "138: })",
          "",
          "[Removed Lines]",
          "134:     t.strictSame('ok', await body.text())",
          "137:   t.teardown(server.close.bind(server))",
          "",
          "[Added Lines]",
          "139:     strictEqual('ok', await body.text())",
          "142:   t.after(server.close.bind(server))",
          "",
          "---------------"
        ],
        "test/fetch/response-json.js||test/fetch/response-json.js": [
          "File: test/fetch/response-json.js -> test/fetch/response-json.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { Response } = require('../../')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   [{ headers: { 'x-foo': 'bar' } }, 200, '', APPLICATION_JSON, { 'x-foo': 'bar' }]",
          "18: ]",
          "21:   for (const [init, expectedStatus, expectedStatusText, expectedContentType, expectedHeaders] of INIT_TESTS) {",
          "22:     const response = Response.json('hello world', init)",
          "27:     for (const key in expectedHeaders) {",
          "29:     }",
          "31:     const data = await response.json()",
          "33:   }",
          "36: })",
          "39:   const nullBodyStatus = [204, 205, 304]",
          "41:   for (const status of nullBodyStatus) {",
          "43:       Response.json('hello world', { status })",
          "44:     }, TypeError, `Throws TypeError when calling static json() with a status of ${status}`)",
          "45:   }",
          "48: })",
          "51:   const response = Response.json({ foo: 'bar' })",
          "52:   const data = await response.json()",
          "57: })",
          "61:     Response.json(Symbol('foo'))",
          "62:   }, TypeError)",
          "65: })",
          "68:   const a = { b: 1 }",
          "69:   a.a = a",
          "72:     Response.json(a)",
          "73:   }, TypeError)",
          "76: })",
          "79:   class CustomError extends Error {",
          "80:     name = 'CustomError'",
          "81:   }",
          "84:     Response.json({ get foo () { throw new CustomError('bar') } })",
          "85:   }, CustomError)",
          "88: })",
          "93:     Response.json(Symbol('symbol'))",
          "94:   }, TypeError)",
          "97:     Response.json(undefined)",
          "98:   }, TypeError)",
          "101:     Response.json()",
          "102:   }, TypeError)",
          "105: })",
          "109:     Response.json(null, 3)",
          "110:   }, TypeError)",
          "113: })",
          "",
          "[Removed Lines]",
          "20: test('Check response returned by static json() with init', async (t) => {",
          "23:     t.equal(response.type, 'default', \"Response's type is default\")",
          "24:     t.equal(response.status, expectedStatus, \"Response's status is \" + expectedStatus)",
          "25:     t.equal(response.statusText, expectedStatusText, \"Response's statusText is \" + JSON.stringify(expectedStatusText))",
          "26:     t.equal(response.headers.get('content-type'), expectedContentType, \"Response's content-type is \" + expectedContentType)",
          "28:       t.equal(response.headers.get(key), expectedHeaders[key], \"Response's header \" + key + ' is ' + JSON.stringify(expectedHeaders[key]))",
          "32:     t.equal(data, 'hello world', \"Response's body is 'hello world'\")",
          "35:   t.end()",
          "38: test('Throws TypeError when calling static json() with an invalid status', (t) => {",
          "42:     t.throws(() => {",
          "47:   t.end()",
          "50: test('Check static json() encodes JSON objects correctly', async (t) => {",
          "53:   t.equal(typeof data, 'object', \"Response's json body is an object\")",
          "54:   t.equal(data.foo, 'bar', \"Response's json body is { foo: 'bar' }\")",
          "56:   t.end()",
          "59: test('Check static json() throws when data is not encodable', (t) => {",
          "60:   t.throws(() => {",
          "64:   t.end()",
          "67: test('Check static json() throws when data is circular', (t) => {",
          "71:   t.throws(() => {",
          "75:   t.end()",
          "78: test('Check static json() propagates JSON serializer errors', (t) => {",
          "83:   t.throws(() => {",
          "87:   t.end()",
          "91: test('unserializable values', (t) => {",
          "92:   t.throws(() => {",
          "96:   t.throws(() => {",
          "100:   t.throws(() => {",
          "104:   t.end()",
          "107: test('invalid init', (t) => {",
          "108:   t.throws(() => {",
          "112:   t.end()",
          "",
          "[Added Lines]",
          "21: test('Check response returned by static json() with init', async () => {",
          "24:     assert.strictEqual(response.type, 'default', \"Response's type is default\")",
          "25:     assert.strictEqual(response.status, expectedStatus, \"Response's status is \" + expectedStatus)",
          "26:     assert.strictEqual(response.statusText, expectedStatusText, \"Response's statusText is \" + JSON.stringify(expectedStatusText))",
          "27:     assert.strictEqual(response.headers.get('content-type'), expectedContentType, \"Response's content-type is \" + expectedContentType)",
          "29:       assert.strictEqual(response.headers.get(key), expectedHeaders[key], \"Response's header \" + key + ' is ' + JSON.stringify(expectedHeaders[key]))",
          "33:     assert.strictEqual(data, 'hello world', \"Response's body is 'hello world'\")",
          "37: test('Throws TypeError when calling static json() with an invalid status', () => {",
          "41:     assert.throws(() => {",
          "47: test('Check static json() encodes JSON objects correctly', async () => {",
          "50:   assert.strictEqual(typeof data, 'object', \"Response's json body is an object\")",
          "51:   assert.strictEqual(data.foo, 'bar', \"Response's json body is { foo: 'bar' }\")",
          "54: test('Check static json() throws when data is not encodable', () => {",
          "55:   assert.throws(() => {",
          "60: test('Check static json() throws when data is circular', () => {",
          "64:   assert.throws(() => {",
          "69: test('Check static json() propagates JSON serializer errors', () => {",
          "74:   assert.throws(() => {",
          "80: test('unserializable values', () => {",
          "81:   assert.throws(() => {",
          "85:   assert.throws(() => {",
          "89:   assert.throws(() => {",
          "94: test('invalid init', () => {",
          "95:   assert.throws(() => {",
          "",
          "---------------"
        ],
        "test/fetch/response.js||test/fetch/response.js": [
          "File: test/fetch/response.js -> test/fetch/response.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const {",
          "5:   Response,",
          "6:   FormData",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('assert')",
          "5: const { tspl } = require('@matteo.collina/tspl')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:   FormData: ThirdPartyFormData",
          "11: } = require('formdata-node')",
          "17:     new Response(null, 0)",
          "18:   }, TypeError)",
          "21:     new Response(null, {",
          "22:       status: 99",
          "23:     })",
          "24:   }, RangeError)",
          "27:     new Response(null, {",
          "28:       status: 600",
          "29:     })",
          "30:   }, RangeError)",
          "33:     new Response(null, {",
          "34:       status: '600'",
          "35:     })",
          "36:   }, RangeError)",
          "39:     new Response(null, {",
          "40:       statusText: '\\u0000'",
          "",
          "[Removed Lines]",
          "13: test('arg validation', async (t) => {",
          "15:   t.throws(() => {",
          "19:   t.throws(() => {",
          "25:   t.throws(() => {",
          "31:   t.throws(() => {",
          "37:   t.throws(() => {",
          "",
          "[Added Lines]",
          "15: test('arg validation', async () => {",
          "17:   assert.throws(() => {",
          "21:   assert.throws(() => {",
          "27:   assert.throws(() => {",
          "33:   assert.throws(() => {",
          "39:   assert.throws(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:   }, TypeError)",
          "44:   for (const nullStatus of [204, 205, 304]) {",
          "47:       new Response(new ArrayBuffer(16), {",
          "48:         status: nullStatus",
          "",
          "[Removed Lines]",
          "45:     t.throws(() => {",
          "",
          "[Added Lines]",
          "47:     assert.throws(() => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:     }, TypeError)",
          "51:   }",
          "54:     Response.prototype[Symbol.toStringTag].charAt(0)",
          "55:   }, TypeError)",
          "58:     Response.prototype.type.toString()",
          "59:   }, TypeError)",
          "62:     Response.prototype.url.toString()",
          "63:   }, TypeError)",
          "66:     Response.prototype.redirected.toString()",
          "67:   }, TypeError)",
          "70:     Response.prototype.status.toString()",
          "71:   }, TypeError)",
          "74:     Response.prototype.ok.toString()",
          "75:   }, TypeError)",
          "78:     Response.prototype.statusText.toString()",
          "79:   }, TypeError)",
          "82:     Response.prototype.headers.toString()",
          "83:   }, TypeError)",
          "87:     Response.prototype.body",
          "88:   }, TypeError)",
          "92:     Response.prototype.bodyUsed",
          "93:   }, TypeError)",
          "96:     Response.prototype.clone.call(null)",
          "97:   }, TypeError)",
          "101:       blob () {",
          "102:         return {",
          "103:           text () {",
          "",
          "[Removed Lines]",
          "53:   t.doesNotThrow(() => {",
          "57:   t.throws(() => {",
          "61:   t.throws(() => {",
          "65:   t.throws(() => {",
          "69:   t.throws(() => {",
          "73:   t.throws(() => {",
          "77:   t.throws(() => {",
          "81:   t.throws(() => {",
          "85:   t.throws(() => {",
          "90:   t.throws(() => {",
          "95:   t.throws(() => {",
          "99:   await t.rejects(async () => {",
          "100:     await new Response('http://localhost').text.call({",
          "",
          "[Added Lines]",
          "55:   assert.doesNotThrow(() => {",
          "59:   assert.throws(() => {",
          "63:   assert.throws(() => {",
          "67:   assert.throws(() => {",
          "71:   assert.throws(() => {",
          "75:   assert.throws(() => {",
          "79:   assert.throws(() => {",
          "83:   assert.throws(() => {",
          "87:   assert.throws(() => {",
          "92:   assert.throws(() => {",
          "97:   assert.throws(() => {",
          "101:   await assert.rejects(",
          "102:     new Response('http://localhost').text.call({",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:           }",
          "106:         }",
          "107:       }",
          "112: })",
          "116:   const response1 = new Response(null, { status: 201 })",
          "117:   const response2 = new Response(undefined, { status: 201 })",
          "123: })",
          "126:   const resp = new Response()",
          "131: })",
          "134:   const asyncIterable = {",
          "135:     async * [Symbol.asyncIterator] () {",
          "136:       yield 'a'",
          "",
          "[Removed Lines]",
          "108:     })",
          "109:   }, TypeError)",
          "111:   t.end()",
          "114: test('response clone', (t) => {",
          "119:   t.equal(response1.body, response1.clone().body)",
          "120:   t.equal(response2.body, response2.clone().body)",
          "121:   t.equal(response2.body, null)",
          "122:   t.end()",
          "125: test('Symbol.toStringTag', (t) => {",
          "128:   t.equal(resp[Symbol.toStringTag], 'Response')",
          "129:   t.equal(Response.prototype[Symbol.toStringTag], 'Response')",
          "130:   t.end()",
          "133: test('async iterable body', async (t) => {",
          "",
          "[Added Lines]",
          "110:     }), TypeError)",
          "113: test('response clone', () => {",
          "118:   assert.deepStrictEqual(response1.body, response1.clone().body)",
          "119:   assert.deepStrictEqual(response2.body, response2.clone().body)",
          "120:   assert.strictEqual(response2.body, null)",
          "123: test('Symbol.toStringTag', () => {",
          "126:   assert.strictEqual(resp[Symbol.toStringTag], 'Response')",
          "127:   assert.strictEqual(Response.prototype[Symbol.toStringTag], 'Response')",
          "130: test('async iterable body', async () => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:   }",
          "142:   const response = new Response(asyncIterable)",
          "145: })",
          "149:   const response = new Response('body', {",
          "150:     headers: {",
          "151:       'content-type': 'test/test',",
          "",
          "[Removed Lines]",
          "143:   t.equal(await response.text(), 'abc')",
          "144:   t.end()",
          "148: test('Modifying headers using Headers.prototype.set', (t) => {",
          "",
          "[Added Lines]",
          "140:   assert.strictEqual(await response.text(), 'abc')",
          "144: test('Modifying headers using Headers.prototype.set', () => {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "158:   response.headers.set('content-type', 'application/wasm')",
          "159:   response.headers.set('Content-Encoding', 'world/hello')",
          "164:   response2.headers.delete('content-type')",
          "165:   response2.headers.delete('Content-Encoding')",
          "171: })",
          "",
          "[Removed Lines]",
          "161:   t.equal(response.headers.get('content-type'), 'application/wasm')",
          "162:   t.equal(response.headers.get('Content-Encoding'), 'world/hello')",
          "167:   t.equal(response2.headers.get('content-type'), null)",
          "168:   t.equal(response2.headers.get('Content-Encoding'), null)",
          "170:   t.end()",
          "",
          "[Added Lines]",
          "157:   assert.strictEqual(response.headers.get('content-type'), 'application/wasm')",
          "158:   assert.strictEqual(response.headers.get('Content-Encoding'), 'world/hello')",
          "163:   assert.strictEqual(response2.headers.get('content-type'), null)",
          "164:   assert.strictEqual(response2.headers.get('Content-Encoding'), null)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175:   const text = '{\"foo\":\"bar\"}'",
          "176:   const uint8 = new TextEncoder().encode(text)",
          "179:     const readable = new ReadableStream({",
          "180:       start (controller) {",
          "181:         controller.enqueue(uint8)",
          "",
          "[Removed Lines]",
          "178:   t.test('Readable stream with Uint8Array chunks', async (t) => {",
          "",
          "[Added Lines]",
          "172:   await t.test('Readable stream with Uint8Array chunks', async () => {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "187:     const response2 = response1.clone()",
          "188:     const response3 = response1.clone()",
          "195:   })",
          "198:     const readable = new ReadableStream({",
          "199:       start (controller) {",
          "200:         controller.enqueue(text) // string",
          "",
          "[Removed Lines]",
          "190:     t.equal(await response1.text(), text)",
          "191:     t.same(await response2.arrayBuffer(), uint8.buffer)",
          "192:     t.same(await response3.json(), JSON.parse(text))",
          "194:     t.end()",
          "197:   t.test('Readable stream with non-Uint8Array chunks', async (t) => {",
          "",
          "[Added Lines]",
          "184:     assert.strictEqual(await response1.text(), text)",
          "185:     assert.deepStrictEqual(await response2.arrayBuffer(), uint8.buffer)",
          "186:     assert.deepStrictEqual(await response3.json(), JSON.parse(text))",
          "189:   await t.test('Readable stream with non-Uint8Array chunks', async () => {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "205:     const response = new Response(readable)",
          "210:   })",
          "213:     const readable = new ReadableStream({",
          "214:       start (controller) {",
          "215:         controller.enqueue(uint8.buffer)",
          "",
          "[Removed Lines]",
          "207:     await t.rejects(response.text(), TypeError)",
          "209:     t.end()",
          "212:   t.test('Readable with ArrayBuffer chunk still throws', { skip: process.version.startsWith('v16.') }, async (t) => {",
          "",
          "[Added Lines]",
          "199:     await assert.rejects(response.text(), TypeError)",
          "202:   await t.test('Readable with ArrayBuffer chunk still throws', { skip: process.version.startsWith('v16.') }, async () => {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "222:     const response3 = response1.clone()",
          "233:   })",
          "236: })",
          "239:   const blob = new ThirdPartyBlob(['text'])",
          "240:   const res = new Response(blob)",
          "242: })",
          "244:   const form = new ThirdPartyFormData()",
          "245:   form.set('key', 'value')",
          "246:   const res = new Response(form)",
          "247:   const contentType = res.headers.get('content-type').split('=')",
          "250: })",
          "253: test('Issue#2465', async (t) => {",
          "255:   const response = new Response(new SharedArrayBuffer(0))",
          "257: })",
          "264:     const response = new Response('x=y', { headers: { 'content-type': '_application/x-www-form-urlencoded' } })",
          "266:   })",
          "270:     const formData = new FormData()",
          "271:     formData.append('x', 'y')",
          "272:     const response = new Response(formData, { headers: { 'content-type': '_multipart/form-data' } })",
          "274:   })",
          "278:     const response = new Response('x=y', { headers: { 'content-type': 'application/x-www-form-urlencoded_' } })",
          "280:   })",
          "284:     const formData = new FormData()",
          "285:     formData.append('x', 'y')",
          "286:     const response = new Response(formData, { headers: { 'content-type': 'multipart/form-data_' } })",
          "288:   })",
          "289: })",
          "",
          "[Removed Lines]",
          "225:     await t.rejects(response1.arrayBuffer(), TypeError)",
          "226:     await t.rejects(response2.text(), TypeError)",
          "227:     await t.rejects(response3.json(), TypeError)",
          "232:     t.end()",
          "235:   t.end()",
          "238: test('constructing Response with third party Blob body', async (t) => {",
          "241:   t.equal(await res.text(), 'text')",
          "243: test('constructing Response with third party FormData body', async (t) => {",
          "248:   t.equal(contentType[0], 'multipart/form-data; boundary')",
          "249:   t.ok((await res.text()).startsWith(`--${contentType[1]}`))",
          "254:   t.plan(1)",
          "256:   t.equal(await response.text(), '[object SharedArrayBuffer]')",
          "259: test('Check the Content-Type of invalid formData', (t) => {",
          "260:   t.plan(4)",
          "262:   t.test('_application/x-www-form-urlencoded', async (t) => {",
          "263:     t.plan(1)",
          "265:     await t.rejects(response.formData(), TypeError)",
          "268:   t.test('_multipart/form-data', async (t) => {",
          "269:     t.plan(1)",
          "273:     await t.rejects(response.formData(), TypeError)",
          "276:   t.test('application/x-www-form-urlencoded_', async (t) => {",
          "277:     t.plan(1)",
          "279:     await t.rejects(response.formData(), TypeError)",
          "282:   t.test('multipart/form-data_', async (t) => {",
          "283:     t.plan(1)",
          "287:     await t.rejects(response.formData(), TypeError)",
          "",
          "[Added Lines]",
          "215:     await assert.rejects(response1.arrayBuffer(), TypeError)",
          "216:     await assert.rejects(response2.text(), TypeError)",
          "217:     await assert.rejects(response3.json(), TypeError)",
          "224: test('constructing Response with third party Blob body', async () => {",
          "227:   assert.strictEqual(await res.text(), 'text')",
          "229: test('constructing Response with third party FormData body', async () => {",
          "234:   assert.strictEqual(contentType[0], 'multipart/form-data; boundary')",
          "235:   assert.ok((await res.text()).startsWith(`--${contentType[1]}`))",
          "240:   const { strictEqual } = tspl(t, { plan: 1 })",
          "242:   strictEqual(await response.text(), '[object SharedArrayBuffer]')",
          "245: test('Check the Content-Type of invalid formData', async (t) => {",
          "246:   await t.test('_application/x-www-form-urlencoded', async (t) => {",
          "247:     const { rejects } = tspl(t, { plan: 1 })",
          "249:     await rejects(response.formData(), TypeError)",
          "252:   await t.test('_multipart/form-data', async (t) => {",
          "253:     const { rejects } = tspl(t, { plan: 1 })",
          "257:     await rejects(response.formData(), TypeError)",
          "260:   await t.test('application/x-www-form-urlencoded_', async (t) => {",
          "261:     const { rejects } = tspl(t, { plan: 1 })",
          "263:     await rejects(response.formData(), TypeError)",
          "266:   await t.test('multipart/form-data_', async (t) => {",
          "267:     const { rejects } = tspl(t, { plan: 1 })",
          "271:     await rejects(response.formData(), TypeError)",
          "",
          "---------------"
        ],
        "test/fetch/user-agent.js||test/fetch/user-agent.js": [
          "File: test/fetch/user-agent.js -> test/fetch/user-agent.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const events = require('events')",
          "5: const http = require('http')",
          "6: const undici = require('../../')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('assert')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:   const server = http.createServer((req, res) => {",
          "12:     res.end(JSON.stringify({ userAgentHeader: req.headers['user-agent'] }))",
          "13:   })",
          "16:   server.listen(0)",
          "17:   await events.once(server, 'listening')",
          "",
          "[Removed Lines]",
          "14:   t.teardown(server.close.bind(server))",
          "",
          "[Added Lines]",
          "15:   t.after(server.close.bind(server))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:     undici.fetch(url).then((body) => body.json())",
          "22:   ])",
          "26: })",
          "",
          "[Removed Lines]",
          "24:   t.same(nodeBuildJSON.userAgentHeader, 'node')",
          "25:   t.same(undiciJSON.userAgentHeader, 'undici')",
          "",
          "[Added Lines]",
          "25:   assert.strictEqual(nodeBuildJSON.userAgentHeader, 'node')",
          "26:   assert.strictEqual(undiciJSON.userAgentHeader, 'undici')",
          "",
          "---------------"
        ],
        "test/fetch/util.js||test/fetch/util.js": [
          "File: test/fetch/util.js -> test/fetch/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "6: const util = require('../../lib/fetch/util')",
          "7: const { HeadersList } = require('../../lib/fetch/headers')",
          "8: const { createHash } = require('crypto')",
          "10: test('responseURL', (t) => {",
          "14:     urlList: [",
          "15:       new URL('http://asd'),",
          "16:       new URL('http://fgh')",
          "17:     ]",
          "18:   }))",
          "20:     urlList: []",
          "21:   }))",
          "22: })",
          "24: test('responseLocationURL', (t) => {",
          "27:   const acceptHeaderList = new HeadersList()",
          "28:   acceptHeaderList.append('Accept', '*/*')",
          "",
          "[Removed Lines]",
          "3: const t = require('tap')",
          "4: const { test } = t",
          "11:   t.plan(2)",
          "13:   t.ok(util.responseURL({",
          "19:   t.notOk(util.responseURL({",
          "25:   t.plan(3)",
          "",
          "[Added Lines]",
          "3: const { test } = require('node:test')",
          "4: const assert = require('assert')",
          "5: const { tspl } = require('@matteo.collina/tspl')",
          "11:   const { ok } = tspl(t, { plan: 2 })",
          "13:   ok(util.responseURL({",
          "19:   ok(!util.responseURL({",
          "25:   const { ok } = tspl(t, { plan: 3 })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   const locationHeaderList = new HeadersList()",
          "31:   locationHeaderList.append('Location', 'http://asd')",
          "34:     status: 200",
          "35:   }))",
          "37:     status: 301,",
          "38:     headersList: acceptHeaderList",
          "39:   }))",
          "41:     status: 301,",
          "42:     headersList: locationHeaderList,",
          "43:     urlList: [",
          "",
          "[Removed Lines]",
          "33:   t.notOk(util.responseLocationURL({",
          "36:   t.notOk(util.responseLocationURL({",
          "40:   t.ok(util.responseLocationURL({",
          "",
          "[Added Lines]",
          "33:   ok(!util.responseLocationURL({",
          "36:   ok(!util.responseLocationURL({",
          "40:   ok(util.responseLocationURL({",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48: })",
          "50: test('requestBadPort', (t) => {",
          "54:     urlList: [new URL('https://asd')]",
          "55:   }))",
          "57:     urlList: [new URL('http://asd:7')]",
          "58:   }))",
          "60:     urlList: [new URL('https://asd:7')]",
          "61:   }))",
          "62: })",
          "68:     const A = {",
          "69:       protocol: 'https:',",
          "70:       hostname: 'example.org',",
          "",
          "[Removed Lines]",
          "51:   t.plan(3)",
          "53:   t.equal('allowed', util.requestBadPort({",
          "56:   t.equal('blocked', util.requestBadPort({",
          "59:   t.equal('blocked', util.requestBadPort({",
          "66: test('sameOrigin', (t) => {",
          "67:   t.test('first test', (t) => {",
          "",
          "[Added Lines]",
          "51:   const { strictEqual } = tspl(t, { plan: 3 })",
          "53:   strictEqual('allowed', util.requestBadPort({",
          "56:   strictEqual('blocked', util.requestBadPort({",
          "59:   strictEqual('blocked', util.requestBadPort({",
          "66: test('sameOrigin', async (t) => {",
          "67:   await t.test('first test', () => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:       port: ''",
          "78:     }",
          "82:   })",
          "85:     const A = {",
          "86:       protocol: 'https:',",
          "87:       hostname: 'example.org',",
          "",
          "[Removed Lines]",
          "80:     t.ok(util.sameOrigin(A, B))",
          "81:     t.end()",
          "84:   t.test('second test', (t) => {",
          "",
          "[Added Lines]",
          "80:     assert.ok(util.sameOrigin(A, B))",
          "83:   await t.test('second test', () => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:       port: '420'",
          "95:     }",
          "99:   })",
          "103:       { protocol: 'http:', hostname: 'example.org' },",
          "104:       { protocol: 'https:', hostname: 'example.org' }",
          "105:     ))",
          "108:       { protocol: 'https:', hostname: 'example.org' },",
          "109:       { protocol: 'https:', hostname: 'example.com' }",
          "110:     ))",
          "113:   })",
          "118:     const a = new URL('file:///C:/undici')",
          "119:     const b = new URL('file:///var/undici')",
          "123:   })",
          "126: })",
          "128: test('isURLPotentiallyTrustworthy', (t) => {",
          "",
          "[Removed Lines]",
          "97:     t.notOk(util.sameOrigin(A, B))",
          "98:     t.end()",
          "101:   t.test('obviously shouldn\\'t be equal', (t) => {",
          "102:     t.notOk(util.sameOrigin(",
          "107:     t.notOk(util.sameOrigin(",
          "112:     t.end()",
          "115:   t.test('file:// urls', (t) => {",
          "121:     t.ok(util.sameOrigin(a, b))",
          "122:     t.end()",
          "125:   t.end()",
          "",
          "[Added Lines]",
          "96:     assert.ok(!util.sameOrigin(A, B))",
          "99:   await t.test('obviously shouldn\\'t be equal', () => {",
          "100:     assert.ok(!util.sameOrigin(",
          "105:     assert.ok(!util.sameOrigin(",
          "111:   await t.test('file:// urls', () => {",
          "117:     assert.ok(util.sameOrigin(a, b))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131:     'file:///link/to/file.txt', 'data:text/plain;base64,randomstring', 'about:blank', 'about:srcdoc']",
          "132:   const invalid = ['http://121.3.4.5:55', 'null:8080', 'something:8080']",
          "137:   for (const url of valid) {",
          "138:     const instance = new URL(url)",
          "140:   }",
          "142:   for (const url of invalid) {",
          "143:     const instance = new URL(url)",
          "145:   }",
          "146: })",
          "152:     const request = {",
          "153:       referrerPolicy: 'no-referrer, strict-origin-when-cross-origin'",
          "154:     }",
          "",
          "[Removed Lines]",
          "134:   t.plan(valid.length + invalid.length + 1)",
          "135:   t.notOk(util.isURLPotentiallyTrustworthy('string'))",
          "139:     t.ok(util.isURLPotentiallyTrustworthy(instance))",
          "144:     t.notOk(util.isURLPotentiallyTrustworthy(instance))",
          "148: test('setRequestReferrerPolicyOnRedirect', nested => {",
          "149:   nested.plan(7)",
          "151:   nested.test('should set referrer policy from response headers on redirect', t => {",
          "",
          "[Added Lines]",
          "128:   const { ok } = tspl(t, { plan: valid.length + invalid.length + 1 })",
          "129:   ok(!util.isURLPotentiallyTrustworthy('string'))",
          "133:     ok(util.isURLPotentiallyTrustworthy(instance))",
          "138:     ok(!util.isURLPotentiallyTrustworthy(instance))",
          "142: test('setRequestReferrerPolicyOnRedirect', async (t) => {",
          "143:   await t.test('should set referrer policy from response headers on redirect', (t) => {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "157:       headersList: new HeadersList()",
          "158:     }",
          "162:     actualResponse.headersList.append('Connection', 'close')",
          "163:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "164:     actualResponse.headersList.append('Referrer-Policy', 'origin')",
          "165:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "168:   })",
          "171:     const request = {",
          "172:       referrerPolicy: 'no-referrer, strict-origin-when-cross-origin'",
          "173:     }",
          "",
          "[Removed Lines]",
          "160:     t.plan(1)",
          "167:     t.equal(request.referrerPolicy, 'origin')",
          "170:   nested.test('should select the first valid policy from a response', t => {",
          "",
          "[Added Lines]",
          "152:     const { strictEqual } = tspl(t, { plan: 1 })",
          "159:     strictEqual(request.referrerPolicy, 'origin')",
          "162:   await t.test('should select the first valid policy from a response', (t) => {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "176:       headersList: new HeadersList()",
          "177:     }",
          "181:     actualResponse.headersList.append('Connection', 'close')",
          "182:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "183:     actualResponse.headersList.append('Referrer-Policy', 'asdas, origin')",
          "184:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "187:   })",
          "190:     const request = {",
          "191:       referrerPolicy: 'no-referrer, strict-origin-when-cross-origin'",
          "192:     }",
          "",
          "[Removed Lines]",
          "179:     t.plan(1)",
          "186:     t.equal(request.referrerPolicy, 'origin')",
          "189:   nested.test('should select the first valid policy from a response#2', t => {",
          "",
          "[Added Lines]",
          "171:     const { strictEqual } = tspl(t, { plan: 1 })",
          "178:     strictEqual(request.referrerPolicy, 'origin')",
          "181:   await t.test('should select the first valid policy from a response#2', (t) => {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "195:       headersList: new HeadersList()",
          "196:     }",
          "200:     actualResponse.headersList.append('Connection', 'close')",
          "201:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "202:     actualResponse.headersList.append('Referrer-Policy', 'no-referrer, asdas, origin, 0943sd')",
          "203:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "206:   })",
          "209:     const request = {",
          "210:       referrerPolicy: 'no-referrer, strict-origin-when-cross-origin'",
          "211:     }",
          "",
          "[Removed Lines]",
          "198:     t.plan(1)",
          "205:     t.equal(request.referrerPolicy, 'origin')",
          "208:   nested.test('should pick the last fallback over invalid policy tokens', t => {",
          "",
          "[Added Lines]",
          "190:     const { strictEqual } = tspl(t, { plan: 1 })",
          "197:     strictEqual(request.referrerPolicy, 'origin')",
          "200:   await t.test('should pick the last fallback over invalid policy tokens', (t) => {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "214:       headersList: new HeadersList()",
          "215:     }",
          "219:     actualResponse.headersList.append('Connection', 'close')",
          "220:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "221:     actualResponse.headersList.append('Referrer-Policy', 'origin, asdas, asdaw34')",
          "222:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "225:   })",
          "228:     const request = {",
          "229:       referrerPolicy: 'no-referrer, strict-origin-when-cross-origin'",
          "230:     }",
          "",
          "[Removed Lines]",
          "217:     t.plan(1)",
          "224:     t.equal(request.referrerPolicy, 'origin')",
          "227:   nested.test('should set not change request referrer policy if no Referrer-Policy from initial redirect response', t => {",
          "",
          "[Added Lines]",
          "209:     const { strictEqual } = tspl(t, { plan: 1 })",
          "216:     strictEqual(request.referrerPolicy, 'origin')",
          "219:   await t.test('should set not change request referrer policy if no Referrer-Policy from initial redirect response', (t) => {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "233:       headersList: new HeadersList()",
          "234:     }",
          "238:     actualResponse.headersList.append('Connection', 'close')",
          "239:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "240:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "243:   })",
          "246:     const initial = 'no-referrer, strict-origin-when-cross-origin'",
          "247:     const request = {",
          "248:       referrerPolicy: initial",
          "",
          "[Removed Lines]",
          "236:     t.plan(1)",
          "242:     t.equal(request.referrerPolicy, 'no-referrer, strict-origin-when-cross-origin')",
          "245:   nested.test('should set not change request referrer policy if the policy is a non-valid Referrer Policy', t => {",
          "",
          "[Added Lines]",
          "228:     const { strictEqual } = tspl(t, { plan: 1 })",
          "234:     strictEqual(request.referrerPolicy, 'no-referrer, strict-origin-when-cross-origin')",
          "237:   await t.test('should set not change request referrer policy if the policy is a non-valid Referrer Policy', (t) => {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "251:       headersList: new HeadersList()",
          "252:     }",
          "256:     actualResponse.headersList.append('Connection', 'close')",
          "257:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "258:     actualResponse.headersList.append('Referrer-Policy', 'asdasd')",
          "259:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "262:   })",
          "265:     const initial = 'no-referrer, strict-origin-when-cross-origin'",
          "266:     const request = {",
          "267:       referrerPolicy: initial",
          "",
          "[Removed Lines]",
          "254:     t.plan(1)",
          "261:     t.equal(request.referrerPolicy, initial)",
          "264:   nested.test('should set not change request referrer policy if the policy is a non-valid Referrer Policy', t => {",
          "",
          "[Added Lines]",
          "246:     const { strictEqual } = tspl(t, { plan: 1 })",
          "253:     strictEqual(request.referrerPolicy, initial)",
          "256:   await t.test('should set not change request referrer policy if the policy is a non-valid Referrer Policy', (t) => {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "270:       headersList: new HeadersList()",
          "271:     }",
          "275:     actualResponse.headersList.append('Connection', 'close')",
          "276:     actualResponse.headersList.append('Location', 'https://some-location.com/redirect')",
          "277:     actualResponse.headersList.append('Referrer-Policy', 'asdasd, asdasa, 12daw,')",
          "278:     util.setRequestReferrerPolicyOnRedirect(request, actualResponse)",
          "281:   })",
          "282: })",
          "286:     const body = 'Hello world!'",
          "287:     const hash256 = createHash('sha256').update(body).digest('base64')",
          "288:     const hash384 = createHash('sha384').update(body).digest('base64')",
          "",
          "[Removed Lines]",
          "273:     t.plan(1)",
          "280:     t.equal(request.referrerPolicy, initial)",
          "284: test('parseMetadata', t => {",
          "285:   t.test('should parse valid metadata with option', t => {",
          "",
          "[Added Lines]",
          "265:     const { strictEqual } = tspl(t, { plan: 1 })",
          "272:     strictEqual(request.referrerPolicy, initial)",
          "276: test('parseMetadata', async (t) => {",
          "277:   await t.test('should parse valid metadata with option', () => {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "291:     const validMetadata = `sha256-${hash256} !@ sha384-${hash384} !@ sha512-${hash512} !@`",
          "292:     const result = util.parseMetadata(validMetadata)",
          "295:       { algo: 'sha256', hash: hash256 },",
          "296:       { algo: 'sha384', hash: hash384 },",
          "297:       { algo: 'sha512', hash: hash512 }",
          "298:     ])",
          "301:   })",
          "304:     const body = 'Hello world!'",
          "305:     const hash256 = createHash('sha256').update(body).digest('base64')",
          "306:     const hash384 = createHash('sha384').update(body).digest('base64')",
          "",
          "[Removed Lines]",
          "294:     t.same(result, [",
          "300:     t.end()",
          "303:   t.test('should parse valid metadata with non ASCII chars option', t => {",
          "",
          "[Added Lines]",
          "286:     assert.deepEqual(result, [",
          "293:   await t.test('should parse valid metadata with non ASCII chars option', () => {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "309:     const validMetadata = `sha256-${hash256} !\u00a9 sha384-${hash384} !\u20ac sha512-${hash512} !\u00b5`",
          "310:     const result = util.parseMetadata(validMetadata)",
          "313:       { algo: 'sha256', hash: hash256 },",
          "314:       { algo: 'sha384', hash: hash384 },",
          "315:       { algo: 'sha512', hash: hash512 }",
          "316:     ])",
          "319:   })",
          "322:     const body = 'Hello world!'",
          "323:     const hash256 = createHash('sha256').update(body).digest('base64')",
          "324:     const hash384 = createHash('sha384').update(body).digest('base64')",
          "",
          "[Removed Lines]",
          "312:     t.same(result, [",
          "318:     t.end()",
          "321:   t.test('should parse valid metadata without option', t => {",
          "",
          "[Added Lines]",
          "302:     assert.deepEqual(result, [",
          "309:   await t.test('should parse valid metadata without option', () => {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "327:     const validMetadata = `sha256-${hash256} sha384-${hash384} sha512-${hash512}`",
          "328:     const result = util.parseMetadata(validMetadata)",
          "331:       { algo: 'sha256', hash: hash256 },",
          "332:       { algo: 'sha384', hash: hash384 },",
          "333:       { algo: 'sha512', hash: hash512 }",
          "334:     ])",
          "337:   })",
          "340:     const body = 'Hello world!'",
          "341:     const hash256 = createHash('sha256').update(body).digest('base64')",
          "342:     const invalidHash384 = 'zifp5hE1Xl5LQQqQz[]Bq/iaq9Wb6jVb//T7EfTmbXD2aEP5c2ZdJr9YTDfcTE1ZH+'",
          "",
          "[Removed Lines]",
          "330:     t.same(result, [",
          "336:     t.end()",
          "339:   t.test('should ignore invalid metadata with invalid base64 chars', t => {",
          "",
          "[Added Lines]",
          "318:     assert.deepEqual(result, [",
          "325:   await t.test('should ignore invalid metadata with invalid base64 chars', () => {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "345:     const validMetadata = `sha256-${hash256} sha384-${invalidHash384} sha512-${hash512}`",
          "346:     const result = util.parseMetadata(validMetadata)",
          "349:       { algo: 'sha256', hash: hash256 },",
          "350:       { algo: 'sha512', hash: hash512 }",
          "351:     ])",
          "354:   })",
          "357: })",
          "",
          "[Removed Lines]",
          "348:     t.same(result, [",
          "353:     t.end()",
          "356:   t.end()",
          "",
          "[Added Lines]",
          "334:     assert.deepEqual(result, [",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e041de359221ebeae04c469e8aff4145764e6d76",
      "candidate_info": {
        "commit_hash": "e041de359221ebeae04c469e8aff4145764e6d76",
        "repo": "nodejs/undici",
        "commit_url": "https://github.com/nodejs/undici/commit/e041de359221ebeae04c469e8aff4145764e6d76",
        "files": [
          "lib/fetch/index.js",
          "test/fetch/redirect-cross-origin-header.js"
        ],
        "message": "Merge pull request from GHSA-wqq4-5wpv-mx2g\n\n* fix: delete 'cookie' and 'host' headers on cross-origin redirect\n\n* apply suggestion",
        "before_after_code_files": [
          "lib/fetch/index.js||lib/fetch/index.js",
          "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fetch/index.js||lib/fetch/index.js",
            "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
          ],
          "candidate": [
            "lib/fetch/index.js||lib/fetch/index.js",
            "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/fetch/index.js||lib/fetch/index.js": [
          "File: lib/fetch/index.js -> lib/fetch/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1200:   if (!sameOrigin(requestCurrentURL(request), locationURL)) {",
          "1202:     request.headersList.delete('authorization')",
          "1203:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1205:     request.headersList.delete('cookie')",
          "1206:     request.headersList.delete('host')",
          "",
          "---------------"
        ],
        "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js": [
          "File: test/fetch/redirect-cross-origin-header.js -> test/fetch/redirect-cross-origin-header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 'use strict'",
          "3: const { test } = require('tap')",
          "4: const { createServer } = require('http')",
          "5: const { once } = require('events')",
          "6: const { fetch } = require('../..')",
          "8: test('Cross-origin redirects clear forbidden headers', async (t) => {",
          "9:   t.plan(5)",
          "11:   const server1 = createServer((req, res) => {",
          "12:     t.equal(req.headers.cookie, undefined)",
          "13:     t.equal(req.headers.authorization, undefined)",
          "15:     res.end('redirected')",
          "16:   }).listen(0)",
          "18:   const server2 = createServer((req, res) => {",
          "19:     t.equal(req.headers.authorization, 'test')",
          "20:     t.equal(req.headers.cookie, 'ddd=dddd')",
          "22:     res.writeHead(302, {",
          "23:       ...req.headers,",
          "24:       Location: `http://localhost:${server1.address().port}`",
          "25:     })",
          "26:     res.end()",
          "27:   }).listen(0)",
          "29:   t.teardown(() => {",
          "30:     server1.close()",
          "31:     server2.close()",
          "32:   })",
          "34:   await Promise.all([",
          "35:     once(server1, 'listening'),",
          "36:     once(server2, 'listening')",
          "37:   ])",
          "39:   const res = await fetch(`http://localhost:${server2.address().port}`, {",
          "40:     headers: {",
          "41:       Authorization: 'test',",
          "42:       Cookie: 'ddd=dddd'",
          "43:     }",
          "44:   })",
          "46:   const text = await res.text()",
          "47:   t.equal(text, 'redirected')",
          "48: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3aa574b1259c1d8d329a0f0f495ee82882b1458",
      "candidate_info": {
        "commit_hash": "d3aa574b1259c1d8d329a0f0f495ee82882b1458",
        "repo": "nodejs/undici",
        "commit_url": "https://github.com/nodejs/undici/commit/d3aa574b1259c1d8d329a0f0f495ee82882b1458",
        "files": [
          "lib/fetch/index.js",
          "test/fetch/redirect-cross-origin-header.js"
        ],
        "message": "Merge pull request from GHSA-3787-6prv-h9w3\n\nSigned-off-by: Matteo Collina <hello@matteocollina.com>",
        "before_after_code_files": [
          "lib/fetch/index.js||lib/fetch/index.js",
          "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/fetch/index.js||lib/fetch/index.js",
            "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
          ],
          "candidate": [
            "lib/fetch/index.js||lib/fetch/index.js",
            "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/fetch/index.js||lib/fetch/index.js": [
          "File: lib/fetch/index.js -> lib/fetch/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1204:     request.headersList.delete('authorization')",
          "1207:     request.headersList.delete('cookie')",
          "1208:     request.headersList.delete('host')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1207:     request.headersList.delete('proxy-authorization', true)",
          "",
          "---------------"
        ],
        "test/fetch/redirect-cross-origin-header.js||test/fetch/redirect-cross-origin-header.js": [
          "File: test/fetch/redirect-cross-origin-header.js -> test/fetch/redirect-cross-origin-header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const { fetch } = require('../..')",
          "8: test('Cross-origin redirects clear forbidden headers', async (t) => {",
          "11:   const server1 = createServer((req, res) => {",
          "12:     t.equal(req.headers.cookie, undefined)",
          "13:     t.equal(req.headers.authorization, undefined)",
          "15:     res.end('redirected')",
          "16:   }).listen(0)",
          "",
          "[Removed Lines]",
          "9:   t.plan(5)",
          "",
          "[Added Lines]",
          "9:   t.plan(6)",
          "14:     t.equal(req.headers['proxy-authorization'], undefined)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   const res = await fetch(`http://localhost:${server2.address().port}`, {",
          "40:     headers: {",
          "41:       Authorization: 'test',",
          "43:     }",
          "44:   })",
          "",
          "[Removed Lines]",
          "42:       Cookie: 'ddd=dddd'",
          "",
          "[Added Lines]",
          "43:       Cookie: 'ddd=dddd',",
          "44:       'Proxy-Authorization': 'test'",
          "",
          "---------------"
        ]
      }
    }
  ]
}