{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "feba201e3066e81650b53833576a179f71b4e3b0",
      "candidate_info": {
        "commit_hash": "feba201e3066e81650b53833576a179f71b4e3b0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/feba201e3066e81650b53833576a179f71b4e3b0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java"
        ],
        "message": "PDFBOX-4892: avoid NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884394 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java||pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java -> pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:         beadRectangles = new ArrayList<PDRectangle>();",
          "406:         for (PDThreadBead bead : page.getThreadBeads())",
          "407:         {",
          "409:             {",
          "411:                 beadRectangles.add(null);",
          "",
          "[Removed Lines]",
          "408:             if (bead == null)",
          "",
          "[Added Lines]",
          "408:             if (bead == null || bead.getRectangle() == null)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5b0d20be5dca3671c141243255bbfd7618922b9",
      "candidate_info": {
        "commit_hash": "d5b0d20be5dca3671c141243255bbfd7618922b9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d5b0d20be5dca3671c141243255bbfd7618922b9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java"
        ],
        "message": "PDFBOX-4847: implements (optional) access to raw images as BufferedImage, by Emmeran Seehuber\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881292 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDCIEBasedColorSpace.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "17: package org.apache.pdfbox.pdmodel.graphics.color;",
          "19: import java.awt.image.BufferedImage;",
          "20: import java.awt.image.WritableRaster;",
          "21: import java.io.IOException;",
          "30: public abstract class PDCIEBasedColorSpace extends PDColorSpace",
          "31: {",
          "35:     @Override",
          "36:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "37:     {",
          "42:         int width = raster.getWidth();",
          "43:         int height = raster.getHeight();",
          "45:         BufferedImage rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);",
          "46:         WritableRaster rgbRaster = rgbImage.getRaster();",
          "49:         float[] abc = new float[3];",
          "50:         for (int y = 0; y < height; y++)",
          "51:         {",
          "52:             for (int x = 0; x < width; x++)",
          "53:             {",
          "54:                 raster.getPixel(x, y, abc);",
          "57:                 abc[0] /= 255;",
          "58:                 abc[1] /= 255;",
          "59:                 abc[2] /= 255;",
          "61:                 float[] rgb = toRGB(abc);",
          "64:                 rgb[0] *= 255;",
          "65:                 rgb[1] *= 255;",
          "66:                 rgb[2] *= 255;",
          "68:                 rgbRaster.setPixel(x, y, rgb);",
          "69:             }",
          "70:         }",
          "72:         return rgbImage;",
          "73:     }",
          "75:     @Override",
          "76:     public String toString()",
          "77:     {",
          "78:         return getName();   // TODO return more info",
          "79:     }",
          "80: }",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.graphics.color;",
          "19: import java.awt.image.BufferedImage;",
          "20: import java.awt.image.WritableRaster;",
          "21: import java.io.IOException;",
          "30: public abstract class PDCIEBasedColorSpace extends PDColorSpace",
          "31: {",
          "35:     @Override",
          "36:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "37:     {",
          "42:         int width = raster.getWidth();",
          "43:         int height = raster.getHeight();",
          "45:         BufferedImage rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);",
          "46:         WritableRaster rgbRaster = rgbImage.getRaster();",
          "49:         float[] abc = new float[3];",
          "50:         for (int y = 0; y < height; y++)",
          "51:         {",
          "52:             for (int x = 0; x < width; x++)",
          "53:             {",
          "54:                 raster.getPixel(x, y, abc);",
          "57:                 abc[0] /= 255;",
          "58:                 abc[1] /= 255;",
          "59:                 abc[2] /= 255;",
          "61:                 float[] rgb = toRGB(abc);",
          "64:                 rgb[0] *= 255;",
          "65:                 rgb[1] *= 255;",
          "66:                 rgb[2] *= 255;",
          "68:                 rgbRaster.setPixel(x, y, rgb);",
          "69:             }",
          "70:         }",
          "72:         return rgbImage;",
          "73:     }",
          "75:     @Override",
          "76:     public BufferedImage toRawImage(WritableRaster raster) throws IOException",
          "77:     {",
          "80:         return null;",
          "81:     }",
          "83:     @Override",
          "84:     public String toString()",
          "85:     {",
          "86:         return getName();   // TODO return more info",
          "87:     }",
          "88: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     public abstract BufferedImage toRGBImage(WritableRaster raster) throws IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     public abstract BufferedImage toRawImage(WritableRaster raster) throws IOException;",
          "321:     protected final BufferedImage toRawImage(WritableRaster raster, ColorSpace awtColorSpace)",
          "322:     {",
          "323:         ColorModel colorModel = new ComponentColorModel(awtColorSpace,",
          "324:                 false, false, Transparency.OPAQUE, raster.getDataBuffer().getDataType());",
          "325:         return new BufferedImage(colorModel, raster, false, null);",
          "326:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceCMYK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         return awtColorSpace.toRGB(value);",
          "136:     }",
          "138:     @Override",
          "139:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "140:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     @Override",
          "139:     public BufferedImage toRawImage(WritableRaster raster) throws IOException",
          "140:     {",
          "143:         return null;",
          "144:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceGray.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         return new float[] { value[0], value[0], value[0] };",
          "70:     }",
          "72:     @Override",
          "73:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "74:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     @Override",
          "73:     public BufferedImage toRawImage(WritableRaster raster) throws IOException",
          "74:     {",
          "77:         return null;",
          "78:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:         return alternateColorSpace.toRGB(altValue);",
          "415:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:     @Override",
          "418:     public BufferedImage toRawImage(WritableRaster raster)",
          "419:     {",
          "421:         return null;",
          "422:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         image.setData(raster);",
          "118:         return image;",
          "119:     }",
          "120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     @Override",
          "122:     public BufferedImage toRawImage(WritableRaster raster) throws IOException",
          "123:     {",
          "126:         return null;",
          "127:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:         }",
          "381:     }",
          "383:     @Override",
          "384:     public int getNumberOfComponents()",
          "385:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:     @Override",
          "384:     public BufferedImage toRawImage(WritableRaster raster) throws IOException",
          "385:     {",
          "386:         if(awtColorSpace == null)",
          "387:         {",
          "388:             return alternateColorSpace.toRawImage(raster);",
          "389:         }",
          "390:         return toRawImage(raster, awtColorSpace);",
          "391:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:         stream.getCOSObject().setItem(COSName.METADATA, metadata);",
          "596:     }",
          "598:     @Override",
          "599:     public String toString()",
          "600:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:     boolean isSRGB()",
          "613:     {",
          "614:         return isRGB;",
          "615:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDIndexed.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.Point;",
          "20: import java.awt.image.BufferedImage;",
          "21: import java.awt.image.DataBuffer;",
          "22: import java.awt.image.Raster;",
          "23: import java.awt.image.WritableRaster;",
          "24: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.awt.image.ColorModel;",
          "23: import java.awt.image.IndexColorModel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:         return rgbImage;",
          "211:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:     @Override",
          "216:     public BufferedImage toRawImage(WritableRaster raster)",
          "217:     {",
          "219:         if (baseColorSpace instanceof PDICCBased)",
          "220:         {",
          "221:             if (((PDICCBased) baseColorSpace).isSRGB())",
          "222:             {",
          "223:                 byte[] r = new byte[colorTable.length];",
          "224:                 byte[] g = new byte[colorTable.length];",
          "225:                 byte[] b = new byte[colorTable.length];",
          "226:                 for (int i = 0; i < colorTable.length; i++)",
          "227:                 {",
          "228:                     r[i] = (byte) ((int) (colorTable[i][0] * 255) & 0xFF);",
          "229:                     g[i] = (byte) ((int) (colorTable[i][1] * 255) & 0xFF);",
          "230:                     b[i] = (byte) ((int) (colorTable[i][2] * 255) & 0xFF);",
          "231:                 }",
          "232:                 ColorModel colorModel = new IndexColorModel(8, colorTable.length, r, g, b);",
          "233:                 return new BufferedImage(colorModel, raster, false, null);",
          "234:             }",
          "235:         }",
          "238:         return null;",
          "239:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDJPXColorSpace.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "17: package org.apache.pdfbox.pdmodel.graphics.color;",
          "19: import org.apache.pdfbox.cos.COSBase;",
          "21: import java.awt.color.ColorSpace;",
          "22: import java.awt.image.BufferedImage;",
          "23: import java.awt.image.WritableRaster;",
          "24: import java.io.IOException;",
          "32: public final class PDJPXColorSpace extends PDColorSpace",
          "33: {",
          "34:     private final ColorSpace awtColorSpace;",
          "40:     public PDJPXColorSpace(ColorSpace colorSpace)",
          "41:     {",
          "42:         this.awtColorSpace = colorSpace;",
          "43:     }",
          "45:     @Override",
          "46:     public String getName()",
          "47:     {",
          "48:         return \"JPX\";",
          "49:     }",
          "51:     @Override",
          "52:     public int getNumberOfComponents()",
          "53:     {",
          "54:         return awtColorSpace.getNumComponents();",
          "55:     }",
          "57:     @Override",
          "58:     public float[] getDefaultDecode(int bitsPerComponent)",
          "59:     {",
          "60:         int n = getNumberOfComponents();",
          "61:         float[] decode = new float[n * 2];",
          "62:         for (int i = 0; i < n; i++)",
          "63:         {",
          "64:             decode[i * 2] = awtColorSpace.getMinValue(i);",
          "65:             decode[i * 2 + 1] = awtColorSpace.getMaxValue(i);",
          "66:         }",
          "67:         return decode;",
          "68:     }",
          "70:     @Override",
          "71:     public PDColor getInitialColor()",
          "72:     {",
          "73:         throw new UnsupportedOperationException(\"JPX color spaces don't support drawing\");",
          "74:     }",
          "76:     @Override",
          "77:     public float[] toRGB(float[] value)",
          "78:     {",
          "79:         throw new UnsupportedOperationException(\"JPX color spaces don't support drawing\");",
          "80:     }",
          "82:     @Override",
          "83:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "84:     {",
          "85:         return toRGBImageAWT(raster, awtColorSpace);",
          "86:     }",
          "88:     @Override",
          "89:     public COSBase getCOSObject()",
          "90:     {",
          "91:         throw new UnsupportedOperationException(\"JPX color spaces don't have COS objects\");",
          "92:     }",
          "93: }",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.graphics.color;",
          "19: import org.apache.pdfbox.cos.COSBase;",
          "21: import java.awt.color.ColorSpace;",
          "22: import java.awt.image.BufferedImage;",
          "23: import java.awt.image.WritableRaster;",
          "24: import java.io.IOException;",
          "32: public final class PDJPXColorSpace extends PDColorSpace",
          "33: {",
          "34:     private final ColorSpace awtColorSpace;",
          "40:     public PDJPXColorSpace(ColorSpace colorSpace)",
          "41:     {",
          "42:         this.awtColorSpace = colorSpace;",
          "43:     }",
          "45:     @Override",
          "46:     public String getName()",
          "47:     {",
          "48:         return \"JPX\";",
          "49:     }",
          "51:     @Override",
          "52:     public int getNumberOfComponents()",
          "53:     {",
          "54:         return awtColorSpace.getNumComponents();",
          "55:     }",
          "57:     @Override",
          "58:     public float[] getDefaultDecode(int bitsPerComponent)",
          "59:     {",
          "60:         int n = getNumberOfComponents();",
          "61:         float[] decode = new float[n * 2];",
          "62:         for (int i = 0; i < n; i++)",
          "63:         {",
          "64:             decode[i * 2] = awtColorSpace.getMinValue(i);",
          "65:             decode[i * 2 + 1] = awtColorSpace.getMaxValue(i);",
          "66:         }",
          "67:         return decode;",
          "68:     }",
          "70:     @Override",
          "71:     public PDColor getInitialColor()",
          "72:     {",
          "73:         throw new UnsupportedOperationException(\"JPX color spaces don't support drawing\");",
          "74:     }",
          "76:     @Override",
          "77:     public float[] toRGB(float[] value)",
          "78:     {",
          "79:         throw new UnsupportedOperationException(\"JPX color spaces don't support drawing\");",
          "80:     }",
          "82:     @Override",
          "83:     public BufferedImage toRGBImage(WritableRaster raster) throws IOException",
          "84:     {",
          "85:         return toRGBImageAWT(raster, awtColorSpace);",
          "86:     }",
          "88:     @Override",
          "89:     public BufferedImage toRawImage(WritableRaster raster)",
          "90:     {",
          "91:         return toRawImage(raster, this.awtColorSpace);",
          "92:     }",
          "94:     @Override",
          "95:     public COSBase getCOSObject()",
          "96:     {",
          "97:         throw new UnsupportedOperationException(\"JPX color spaces don't have COS objects\");",
          "98:     }",
          "99: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:         return rgbImage;",
          "107:     }",
          "109:     @Override",
          "110:     public float[] toRGB(float[] value)",
          "111:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     @Override",
          "111:     public BufferedImage toRawImage(WritableRaster raster)",
          "112:     {",
          "114:        return null;",
          "115:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDPattern.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         throw new UnsupportedOperationException();",
          "102:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     @Override",
          "105:     public BufferedImage toRawImage(WritableRaster raster) throws IOException",
          "106:     {",
          "107:         throw new UnsupportedOperationException();",
          "108:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.color;",
          "19: import java.awt.Point;",
          "20: import java.awt.image.BufferedImage;",
          "21: import java.awt.image.DataBuffer;",
          "22: import java.awt.image.Raster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.color.ColorSpace;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:         }",
          "223:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     @Override",
          "227:     public BufferedImage toRawImage(WritableRaster raster)",
          "228:     {",
          "229:         return toRawImage(raster, ColorSpace.getInstance(ColorSpace.CS_GRAY));",
          "230:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     WritableRaster getRawRaster() throws IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     BufferedImage getRawImage() throws IOException;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:         return image;",
          "507:     }",
          "509:     @Override",
          "510:     public WritableRaster getRawRaster() throws IOException",
          "511:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:     @Override",
          "510:     public BufferedImage getRawImage() throws IOException",
          "511:     {",
          "512:         return getColorSpace().toRawImage(getRawRaster());",
          "513:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:         return SampledImageReader.getRawRaster(this);",
          "363:     }",
          "365:     @Override",
          "366:     public BufferedImage getStencilImage(Paint paint) throws IOException",
          "367:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     @Override",
          "366:     public BufferedImage getRawImage() throws IOException",
          "367:     {",
          "368:         return getColorSpace().toRawImage(getRawRaster());",
          "369:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.util.Random;",
          "38: import javax.imageio.ImageIO;",
          "39: import junit.framework.TestCase;",
          "42: import org.apache.pdfbox.pdmodel.PDDocument;",
          "43: import org.apache.pdfbox.pdmodel.PDPage;",
          "44: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "",
          "[Removed Lines]",
          "40: import static junit.framework.TestCase.assertEquals;",
          "41: import static junit.framework.TestCase.assertNotNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:         }",
          "376:     }",
          "378:     private void doBitmaskTransparencyTest(int imageType, String pdfFilename) throws IOException",
          "379:     {",
          "380:         PDDocument document = new PDDocument();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     static void checkIdentRaw(BufferedImage expectedImage, PDImageXObject actualImage)",
          "382:             throws IOException",
          "383:     {",
          "384:         WritableRaster expectedRaster = expectedImage.getRaster();",
          "385:         WritableRaster actualRaster = actualImage.getRawRaster();",
          "386:         int w = expectedRaster.getWidth();",
          "387:         int h = expectedRaster.getHeight();",
          "388:         assertEquals(w, actualRaster.getWidth());",
          "389:         assertEquals(h, actualRaster.getHeight());",
          "390:         assertEquals(expectedRaster.getDataBuffer().getDataType(), actualRaster.getDataBuffer().getDataType());",
          "391:         int numDataElements = expectedRaster.getNumDataElements();",
          "392:         int numDataElementsToCompare;",
          "393:         if (expectedImage.getAlphaRaster() != null)",
          "394:         {",
          "396:             numDataElementsToCompare = numDataElements - 1;",
          "397:             assertEquals(numDataElementsToCompare, actualRaster.getNumDataElements());",
          "398:         }",
          "399:         else",
          "400:         {",
          "401:             numDataElementsToCompare = numDataElements;",
          "402:             assertEquals(numDataElements, actualRaster.getNumDataElements());",
          "403:         }",
          "404:         int[] expectedData = new int[numDataElements];",
          "405:         int[] actualData = new int[numDataElements];",
          "406:         for (int y = 0; y < h; ++y)",
          "407:         {",
          "408:             for (int x = 0; x < w; ++x)",
          "409:             {",
          "410:                 expectedRaster.getPixel(x, y, expectedData);",
          "411:                 actualRaster.getPixel(x, y, actualData);",
          "412:                 for (int i = 0; i < numDataElementsToCompare; i++)",
          "413:                 {",
          "414:                     int expectedValue = expectedData[i];",
          "415:                     int actualValue = actualData[i];",
          "416:                     if (expectedValue != actualValue)",
          "417:                     {",
          "418:                         String errMsg = String.format(\"(%d,%d) Channel %d %04X != %04X\", x, y, i, expectedValue,",
          "419:                                 actualValue);",
          "420:                         assertEquals(errMsg, expectedValue, actualValue);",
          "421:                     }",
          "422:                 }",
          "423:             }",
          "424:         }",
          "425:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "587:         validate(ximage, 16, w, h, \"png\", PDDeviceRGB.INSTANCE.getName());",
          "588:         checkIdent(image, ximage.getImage());",
          "589:         checkIdentRGB(image, ximage.getOpaqueImage());",
          "591:         assertNotNull(ximage.getSoftMask());",
          "592:         validate(ximage.getSoftMask(), 16, w, h, \"png\", PDDeviceGray.INSTANCE.getName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:         checkIdentRaw(image, ximage);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;",
          "42: import org.apache.pdfbox.pdmodel.graphics.color.PDIndexed;",
          "44: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent;",
          "45: import org.junit.Assert;",
          "46: import static org.junit.Assert.assertEquals;",
          "47: import static org.junit.Assert.assertFalse;",
          "48: import static org.junit.Assert.assertNotNull;",
          "49: import static org.junit.Assert.assertNull;",
          "50: import static org.junit.Assert.assertTrue;",
          "51: import org.junit.Before;",
          "52: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import static org.apache.pdfbox.pdmodel.graphics.image.LosslessFactoryTest.checkIdentRaw;",
          "51: import static org.junit.Assert.assertNotNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:         doc.save(new File(parentDir, name + \".pdf\"));",
          "197:         BufferedImage image = pdImageXObject.getImage();",
          "199:         BufferedImage expectedImage = ImageIO.read(new ByteArrayInputStream(imageBytes));",
          "200:         if (imageProfile != null && expectedImage.getColorModel().getColorSpace().isCS_sRGB())",
          "201:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         assertNotNull(pdImageXObject.getRawRaster());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:         checkIdent(expectedImage, image);",
          "209:         doc.close();",
          "210:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:         BufferedImage rawImage = pdImageXObject.getRawImage();",
          "216:         if (rawImage != null)",
          "217:         {",
          "218:             assertEquals(rawImage.getWidth(), pdImageXObject.getWidth());",
          "219:             assertEquals(rawImage.getHeight(), pdImageXObject.getHeight());",
          "221:             checkIdentRaw(expectedImage, pdImageXObject);",
          "222:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/ValidateXImage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         assertNotNull(ximage.getImage());",
          "71:         assertEquals(ximage.getWidth(), ximage.getImage().getWidth());",
          "72:         assertEquals(ximage.getHeight(), ximage.getImage().getHeight());",
          "74:         boolean canEncode = true;",
          "75:         boolean writeOk;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         WritableRaster rawRaster = ximage.getRawRaster();",
          "74:         assertNotNull(rawRaster);",
          "75:         assertEquals(rawRaster.getWidth(), ximage.getWidth());",
          "76:         assertEquals(rawRaster.getHeight(), ximage.getHeight());",
          "77:         if (colorSpaceName.equals(\"ICCBased\"))",
          "78:         {",
          "79:             BufferedImage rawImage = ximage.getRawImage();",
          "80:             assertNotNull(rawImage);",
          "81:             assertEquals(rawImage.getWidth(), ximage.getWidth());",
          "82:             assertEquals(rawImage.getHeight(), ximage.getHeight());",
          "83:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7f78545dfabbe24cd8a68c0c75d2c7f64648bc9",
      "candidate_info": {
        "commit_hash": "d7f78545dfabbe24cd8a68c0c75d2c7f64648bc9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d7f78545dfabbe24cd8a68c0c75d2c7f64648bc9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java"
        ],
        "message": "PDFBOX-5051: avoid very slow rendering for small images, as suggested by Oliver Schmidtmer\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889213 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColorSpace.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.color;",
          "19: import java.awt.Transparency;",
          "20: import java.awt.image.BufferedImage;",
          "21: import java.awt.image.ColorConvertOp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import java.awt.Graphics;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:         BufferedImage src = new BufferedImage(colorModel, raster, false, null);",
          "346:         BufferedImage dest = new BufferedImage(raster.getWidth(), raster.getHeight(),",
          "347:                                                BufferedImage.TYPE_INT_RGB);",
          "348:         ColorConvertOp op = new ColorConvertOp(null);",
          "349:         op.filter(src, dest);",
          "350:         return dest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:         if (src.getWidth() == 1 || src.getHeight() == 1)",
          "350:         {",
          "359:             Graphics g2d = dest.getGraphics();",
          "360:             g2d.drawImage(src, 0, 0, null);",
          "361:             g2d.dispose();",
          "362:             return dest;",
          "363:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "300ffb64fc18b52366b1becc63b86bebf729de93",
      "candidate_info": {
        "commit_hash": "300ffb64fc18b52366b1becc63b86bebf729de93",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/300ffb64fc18b52366b1becc63b86bebf729de93",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java"
        ],
        "message": "PDFBOX-4892: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887909 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java -> examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         else",
          "116:         {",
          "117:             List<PDNameTreeNode<PDComplexFileSpecification>> kids = efTree.getKids();",
          "118:             for (PDNameTreeNode<PDComplexFileSpecification> node : kids)",
          "119:             {",
          "120:                 names = node.getNames();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:             if (kids == null)",
          "119:             {",
          "120:                 return;",
          "121:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d9f9b2028e793a26ca7ca990f5155b87ec258d7",
      "candidate_info": {
        "commit_hash": "9d9f9b2028e793a26ca7ca990f5155b87ec258d7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9d9f9b2028e793a26ca7ca990f5155b87ec258d7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889528 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         BufferedImage rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);",
          "71:         WritableRaster rgbRaster = rgbImage.getRaster();",
          "79:         float[] abc = new float[3];",
          "",
          "[Removed Lines]",
          "73:         float minA = getARange().getMin();",
          "74:         float maxA = getARange().getMax();",
          "75:         float minB = getBRange().getMin();",
          "76:         float maxB = getBRange().getMax();",
          "",
          "[Added Lines]",
          "73:         PDRange aRange = getARange();",
          "74:         PDRange bRange = getBRange();",
          "75:         float minA = aRange.getMin();",
          "76:         float maxA = aRange.getMax();",
          "77:         float minB = bRange.getMin();",
          "78:         float maxB = bRange.getMax();",
          "",
          "---------------"
        ]
      }
    }
  ]
}