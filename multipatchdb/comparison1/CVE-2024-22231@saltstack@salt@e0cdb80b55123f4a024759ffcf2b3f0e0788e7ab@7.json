{
  "cve_id": "CVE-2024-22231",
  "cve_desc": "Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead\u00a0a malicious attacker to create an arbitrary directory on a Salt master.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "602aa0cbf7188e2d2e139f284655316c51702d87",
      "candidate_info": {
        "commit_hash": "602aa0cbf7188e2d2e139f284655316c51702d87",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/602aa0cbf7188e2d2e139f284655316c51702d87",
        "files": [
          ".github/workflows/build-deb-packages.yml",
          ".github/workflows/build-deps-ci-action-linux.yml",
          ".github/workflows/build-deps-ci-action-macos.yml",
          ".github/workflows/build-deps-ci-action-windows.yml",
          ".github/workflows/build-deps-ci-action.yml",
          ".github/workflows/build-deps-onedir-linux.yml",
          ".github/workflows/build-deps-onedir-macos.yml",
          ".github/workflows/build-deps-onedir-windows.yml",
          ".github/workflows/build-deps-onedir.yml",
          ".github/workflows/build-macos-packages.yml",
          ".github/workflows/build-packages.yml",
          ".github/workflows/build-rpm-packages.yml",
          ".github/workflows/build-salt-onedir-linux.yml",
          ".github/workflows/build-salt-onedir-macos.yml",
          ".github/workflows/build-salt-onedir-windows.yml",
          ".github/workflows/build-salt-onedir.yml",
          ".github/workflows/build-windows-packages.yml",
          ".github/workflows/ci.yml",
          ".github/workflows/nightly.yml",
          ".github/workflows/release.yml",
          ".github/workflows/scheduled.yml",
          ".github/workflows/staging.yml",
          ".github/workflows/templates/build-ci-deps.yml.jinja",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja",
          ".github/workflows/templates/build-packages.yml.jinja",
          ".github/workflows/templates/build-repos.yml.jinja",
          ".github/workflows/templates/ci.yml.jinja",
          ".github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja",
          "tools/precommit/workflows.py"
        ],
        "message": "Reduce the number of workflows referenced\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/build-ci-deps.yml.jinja||.github/workflows/templates/build-ci-deps.yml.jinja",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja",
          ".github/workflows/templates/build-packages.yml.jinja||.github/workflows/templates/build-packages.yml.jinja",
          ".github/workflows/templates/build-repos.yml.jinja||.github/workflows/templates/build-repos.yml.jinja",
          ".github/workflows/templates/ci.yml.jinja||.github/workflows/templates/ci.yml.jinja",
          ".github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja||.github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja||.github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja||.github/workflows/templates/test-salt.yml.jinja",
          "tools/precommit/workflows.py||tools/precommit/workflows.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-ci-deps.yml.jinja||.github/workflows/templates/build-ci-deps.yml.jinja": [
          "File: .github/workflows/templates/build-ci-deps.yml.jinja -> .github/workflows/templates/build-ci-deps.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     <%- if workflow_slug != 'release' %>",
          "8:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "9:     <%- endif %>",
          "10:     needs:",
          "11:       - prepare-workflow",
          "12:     <%- if workflow_slug != 'release' %>",
          "43:     <%- else %>",
          "44:       - download-onedir-artifact",
          "45:     <%- endif %>",
          "47:     with:",
          "49:       nox-session: ci-test-onedir",
          "52:       nox-version: <{ nox_version  }>",
          "53:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "54:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "55:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}|<{ python_version }>",
          "",
          "[Removed Lines]",
          "2:   <%- for arch, build_distro_slug in build_ci_deps_listing[\"windows\"] %>",
          "4:   windows-<{ arch }>-ci-deps:",
          "5:     <%- do test_salt_needs.append(\"windows-\" + arch + \"-ci-deps\") %>",
          "6:     name: Windows <{ arch }> CI Deps",
          "13:       - build-salt-onedir-windows",
          "14:     <%- else %>",
          "15:       - download-onedir-artifact",
          "16:     <%- endif %>",
          "17:     uses: ./.github/workflows/build-deps-ci-action-windows.yml",
          "18:     with:",
          "19:       distro-slug: <{ build_distro_slug }>",
          "20:       nox-session: ci-test-onedir",
          "21:       platform: windows",
          "22:       arch: <{ arch }>",
          "23:       nox-version: <{ nox_version  }>",
          "24:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "25:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "26:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}|<{ python_version }>",
          "28:   <%- endfor %>",
          "31:   <%- for arch, build_distro_slug in build_ci_deps_listing[\"macos\"] %>",
          "33:   macos-<{ arch }>-ci-deps:",
          "34:     <%- do test_salt_needs.append(\"macos-\" + arch + \"-ci-deps\") %>",
          "35:     name: MacOS <{ arch }> CI Deps",
          "36:     <%- if workflow_slug != 'release' %>",
          "37:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "38:     <%- endif %>",
          "39:     needs:",
          "40:       - prepare-workflow",
          "41:     <%- if workflow_slug != 'release' %>",
          "42:       - build-salt-onedir-macos",
          "46:     uses: ./.github/workflows/build-deps-ci-action-macos.yml",
          "48:       distro-slug: <{ build_distro_slug }>",
          "50:       platform: darwin",
          "51:       arch: <{ arch }>",
          "57:   <%- endfor %>",
          "60:   <%- for arch, build_distro_slug in build_ci_deps_listing[\"linux\"] %>",
          "62:   linux-<{ arch }>-ci-deps:",
          "63:     <%- do test_salt_needs.append(\"linux-\" + arch + \"-ci-deps\") %>",
          "64:     name: Linux <{ arch }> CI Deps",
          "65:     <%- if workflow_slug != 'release' %>",
          "66:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-deps-ci'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "67:     <%- endif %>",
          "68:     needs:",
          "69:       - prepare-workflow",
          "70:     <%- if workflow_slug != 'release' %>",
          "71:       - build-salt-onedir-linux",
          "72:     <%- else %>",
          "73:       - download-onedir-artifact",
          "74:     <%- endif %>",
          "75:     uses: ./.github/workflows/build-deps-ci-action-linux.yml",
          "76:     with:",
          "77:       distro-slug: <{ build_distro_slug }>",
          "78:       nox-session: ci-test-onedir",
          "79:       platform: linux",
          "80:       arch: <{ arch }>",
          "81:       nox-version: <{ nox_version  }>",
          "82:       python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "83:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "84:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}|<{ python_version }>",
          "86:   <%- endfor %>",
          "",
          "[Added Lines]",
          "2:   build-ci-deps:",
          "3:     <%- do test_salt_needs.append(\"build-ci-deps\") %>",
          "4:     name: CI Deps",
          "11:       - build-salt-onedir",
          "15:     uses: ./.github/workflows/build-deps-ci-action.yml",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja": [
          "File: .github/workflows/templates/build-deps-ci-action.yml.jinja -> .github/workflows/templates/build-deps-ci-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "2: name: Install Test Dependencies",
          "4: on:",
          "5:   workflow_call:",
          "6:     inputs:",
          "7:       nox-session:",
          "8:         required: true",
          "9:         type: string",
          "10:         description: The nox session to run",
          "11:       salt-version:",
          "12:         type: string",
          "13:         required: true",
          "14:         description: The Salt version to set prior to running tests.",
          "15:       cache-prefix:",
          "16:         required: true",
          "17:         type: string",
          "18:         description: Seed used to invalidate caches",
          "19:       nox-version:",
          "20:         required: true",
          "21:         type: string",
          "22:         description: The nox version to install",
          "23:       python-version:",
          "24:         required: false",
          "25:         type: string",
          "26:         description: The python version to run tests with",
          "27:         default: \"3.10\"",
          "28:       package-name:",
          "29:         required: false",
          "30:         type: string",
          "31:         description: The onedir package name to use",
          "32:         default: salt",
          "35: env:",
          "36:   COLUMNS: 190",
          "37:   AWS_MAX_ATTEMPTS: \"10\"",
          "38:   AWS_RETRY_MODE: \"adaptive\"",
          "39:   PIP_INDEX_URL: https://pypi-proxy.saltstack.net/root/local/+simple/",
          "40:   PIP_EXTRA_INDEX_URL: https://pypi.org/simple",
          "42: jobs:",
          "44:   linux-dependencies:",
          "45:     name: Linux",
          "46:     runs-on:",
          "47:       - self-hosted",
          "48:       - linux",
          "49:       - bastion",
          "50:     timeout-minutes: 90",
          "51:     strategy:",
          "52:       fail-fast: false",
          "53:       matrix:",
          "54:         include:",
          "55:         <%- for arch, build_distro_slug in build_ci_deps_listing[\"linux\"] %>",
          "56:           - distro-slug: <{ build_distro_slug }>",
          "57:             arch: <{ arch }>",
          "58:         <%- endfor %>",
          "59:     steps:",
          "61:       - name: \"Throttle Builds\"",
          "62:         shell: bash",
          "63:         run: |",
          "64:           t=$(shuf -i 1-30 -n 1); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "66:       - name: Checkout Source Code",
          "67:         uses: actions/checkout@v4",
          "69:       - name: Cache nox.linux.${{ matrix.arch }}.tar.* for session ${{ inputs.nox-session }}",
          "70:         id: nox-dependencies-cache",
          "71:         uses: actions/cache@v3.3.1",
          "72:         with:",
          "73:           path: nox.linux.${{ matrix.arch }}.tar.*",
          "74:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|linux|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "75:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "76:             }}",
          "78:       - name: Download Onedir Tarball as an Artifact",
          "79:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "80:         uses: actions/download-artifact@v3",
          "81:         with:",
          "82:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-linux-${{ matrix.arch }}.tar.xz",
          "83:           path: artifacts/",
          "85:       - name: Decompress Onedir Tarball",
          "86:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "87:         shell: bash",
          "88:         run: |",
          "89:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "90:           cd artifacts",
          "91:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-linux-${{ matrix.arch }}.tar.xz",
          "93:       - name: PyPi Proxy",
          "94:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "95:         run: |",
          "96:           sed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\\n;' requirements/static/ci/*/*.txt",
          "98:       - name: Setup Python Tools Scripts",
          "99:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "100:         uses: ./.github/actions/setup-python-tools-scripts",
          "101:         with:",
          "102:           cache-prefix: ${{ inputs.cache-prefix }}-build-deps-ci",
          "104:       - name: Get Salt Project GitHub Actions Bot Environment",
          "105:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "106:         run: |",
          "107:           TOKEN=$(curl -sS -f -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 30\")",
          "108:           SPB_ENVIRONMENT=$(curl -sS -f -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/tags/instance/spb:environment)",
          "109:           echo \"SPB_ENVIRONMENT=$SPB_ENVIRONMENT\" >> \"$GITHUB_ENV\"",
          "111:       - name: Start VM",
          "112:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "113:         id: spin-up-vm",
          "114:         run: |",
          "115:           tools --timestamps vm create --environment \"${SPB_ENVIRONMENT}\" --retries=2 ${{ matrix.distro-slug }}",
          "117:       - name: List Free Space",
          "118:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "119:         run: |",
          "120:           tools --timestamps vm ssh ${{ matrix.distro-slug }} -- df -h || true",
          "122:       - name: Upload Checkout To VM",
          "123:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "124:         run: |",
          "125:           tools --timestamps vm rsync ${{ matrix.distro-slug }}",
          "127:       - name: Install Dependencies",
          "128:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "129:         run: |",
          "130:           tools --timestamps vm install-dependencies --nox-session=${{ inputs.nox-session }} ${{ matrix.distro-slug }}",
          "132:       - name: Cleanup .nox Directory",
          "133:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "134:         run: |",
          "135:           tools --timestamps vm pre-archive-cleanup ${{ matrix.distro-slug }}",
          "137:       - name: Compress .nox Directory",
          "138:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "139:         run: |",
          "140:           tools --timestamps vm compress-dependencies ${{ matrix.distro-slug }}",
          "142:       - name: Download Compressed .nox Directory",
          "143:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "144:         run: |",
          "145:           tools --timestamps vm download-dependencies ${{ matrix.distro-slug }}",
          "147:       - name: Destroy VM",
          "148:         if: always() && steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "149:         run: |",
          "150:           tools --timestamps vm destroy --no-wait ${{ matrix.distro-slug }}",
          "152:       - name: Upload Nox Requirements Tarball",
          "153:         uses: actions/upload-artifact@v3",
          "154:         with:",
          "155:           name: nox-linux-${{ matrix.arch }}-${{ inputs.nox-session }}",
          "156:           path: nox.linux.${{ matrix.arch }}.tar.*",
          "158:   macos-dependencies:",
          "159:     name: MacOS",
          "160:     runs-on: ${{ matrix.distro-slug }}",
          "161:     timeout-minutes: 90",
          "162:     strategy:",
          "163:       fail-fast: false",
          "164:       matrix:",
          "165:         include:",
          "166:         <%- for arch, build_distro_slug in build_ci_deps_listing[\"macos\"] %>",
          "167:           - distro-slug: <{ build_distro_slug }>",
          "168:             arch: <{ arch }>",
          "169:         <%- endfor %>",
          "170:     steps:",
          "172:       - name: \"Throttle Builds\"",
          "173:         shell: bash",
          "174:         run: |",
          "175:           t=$(python3 -c 'import random, sys; sys.stdout.write(str(random.randint(1, 15)))'); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "177:       - name: Checkout Source Code",
          "178:         uses: actions/checkout@v4",
          "180:       - name: Cache nox.macos.${{ matrix.arch }}.tar.* for session ${{ inputs.nox-session }}",
          "181:         id: nox-dependencies-cache",
          "182:         uses: actions/cache@v3.3.1",
          "183:         with:",
          "184:           path: nox.macos.${{ matrix.arch }}.tar.*",
          "185:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|macos|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "186:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "187:             }}",
          "189:       - name: Download Onedir Tarball as an Artifact",
          "190:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "191:         uses: actions/download-artifact@v3",
          "192:         with:",
          "193:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "194:           path: artifacts/",
          "196:       - name: Decompress Onedir Tarball",
          "197:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "198:         shell: bash",
          "199:         run: |",
          "200:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "201:           cd artifacts",
          "202:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "204:       - name: Set up Python ${{ inputs.python-version }}",
          "205:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "206:         uses: actions/setup-python@v4",
          "207:         with:",
          "208:           python-version: \"${{ inputs.python-version }}\"",
          "210:       - name: Install System Dependencies",
          "211:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "212:         run: |",
          "213:           brew install openssl@3",
          "215:       - name: Install Nox",
          "216:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "217:         run: |",
          "218:           python3 -m pip install 'nox==${{ inputs.nox-version }}'",
          "220:       - name: Install Dependencies",
          "221:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "222:         env:",
          "223:           PRINT_TEST_SELECTION: \"0\"",
          "224:           PRINT_SYSTEM_INFO: \"0\"",
          "225:         run: |",
          "226:           export PYCURL_SSL_LIBRARY=openssl",
          "227:           export LDFLAGS=\"-L/usr/local/opt/openssl@3/lib\"",
          "228:           export CPPFLAGS=\"-I/usr/local/opt/openssl@3/include\"",
          "229:           export PKG_CONFIG_PATH=\"/usr/local/opt/openssl@3/lib/pkgconfig\"",
          "230:           nox --install-only -e ${{ inputs.nox-session }}",
          "232:       - name: Cleanup .nox Directory",
          "233:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "234:         run: |",
          "235:           nox --force-color -e \"pre-archive-cleanup(pkg=False)\"",
          "237:       - name: Compress .nox Directory",
          "238:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "239:         run: |",
          "240:           nox --force-color -e compress-dependencies -- macos ${{ matrix.arch }}",
          "242:       - name: Upload Nox Requirements Tarball",
          "243:         uses: actions/upload-artifact@v3",
          "244:         with:",
          "245:           name: nox-macos-${{ matrix.arch }}-${{ inputs.nox-session }}",
          "246:           path: nox.macos.${{ matrix.arch }}.tar.*",
          "248:   windows-dependencies:",
          "249:     name: Windows",
          "250:     runs-on:",
          "251:       - self-hosted",
          "252:       - linux",
          "253:       - bastion",
          "254:     timeout-minutes: 90",
          "255:     strategy:",
          "256:       fail-fast: false",
          "257:       matrix:",
          "258:         include:",
          "259:         <%- for arch, build_distro_slug in build_ci_deps_listing[\"windows\"] %>",
          "260:           - distro-slug: <{ build_distro_slug }>",
          "261:             arch: <{ arch }>",
          "262:         <%- endfor %>",
          "263:     steps:",
          "265:       - name: \"Throttle Builds\"",
          "266:         shell: bash",
          "267:         run: |",
          "268:           t=$(shuf -i 1-30 -n 1); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "270:       - name: Checkout Source Code",
          "271:         uses: actions/checkout@v4",
          "273:       - name: Cache nox.windows.${{ matrix.arch }}.tar.* for session ${{ inputs.nox-session }}",
          "274:         id: nox-dependencies-cache",
          "275:         uses: actions/cache@v3.3.1",
          "276:         with:",
          "277:           path: nox.windows.${{ matrix.arch }}.tar.*",
          "278:           key: ${{ inputs.cache-prefix }}|testrun-deps|${{ matrix.arch }}|windows|${{ inputs.nox-session }}|${{ inputs.python-version }}|${{",
          "279:               hashFiles('requirements/**/*.txt', 'cicd/golden-images.json', 'noxfile.py')",
          "280:             }}",
          "282:       - name: Download Onedir Tarball as an Artifact",
          "283:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "284:         uses: actions/download-artifact@v3",
          "285:         with:",
          "286:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "287:           path: artifacts/",
          "289:       - name: Decompress Onedir Tarball",
          "290:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "291:         shell: bash",
          "292:         run: |",
          "293:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "294:           cd artifacts",
          "295:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "297:       - name: PyPi Proxy",
          "298:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "299:         run: |",
          "300:           sed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\\n;' requirements/static/ci/*/*.txt",
          "302:       - name: Setup Python Tools Scripts",
          "303:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "304:         uses: ./.github/actions/setup-python-tools-scripts",
          "305:         with:",
          "306:           cache-prefix: ${{ inputs.cache-prefix }}-build-deps-ci",
          "308:       - name: Get Salt Project GitHub Actions Bot Environment",
          "309:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "310:         run: |",
          "311:           TOKEN=$(curl -sS -f -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 30\")",
          "312:           SPB_ENVIRONMENT=$(curl -sS -f -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/tags/instance/spb:environment)",
          "313:           echo \"SPB_ENVIRONMENT=$SPB_ENVIRONMENT\" >> \"$GITHUB_ENV\"",
          "315:       - name: Start VM",
          "316:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "317:         id: spin-up-vm",
          "318:         run: |",
          "319:           tools --timestamps vm create --environment \"${SPB_ENVIRONMENT}\" --retries=2 ${{ matrix.distro-slug }}",
          "321:       - name: List Free Space",
          "322:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "323:         run: |",
          "324:           tools --timestamps vm ssh ${{ matrix.distro-slug }} -- df -h || true",
          "326:       - name: Upload Checkout To VM",
          "327:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "328:         run: |",
          "329:           tools --timestamps vm rsync ${{ matrix.distro-slug }}",
          "331:       - name: Install Dependencies",
          "332:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "333:         run: |",
          "334:           tools --timestamps vm install-dependencies --nox-session=${{ inputs.nox-session }} ${{ matrix.distro-slug }}",
          "336:       - name: Cleanup .nox Directory",
          "337:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "338:         run: |",
          "339:           tools --timestamps vm pre-archive-cleanup ${{ matrix.distro-slug }}",
          "341:       - name: Compress .nox Directory",
          "342:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "343:         run: |",
          "344:           tools --timestamps vm compress-dependencies ${{ matrix.distro-slug }}",
          "346:       - name: Download Compressed .nox Directory",
          "347:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "348:         run: |",
          "349:           tools --timestamps vm download-dependencies ${{ matrix.distro-slug }}",
          "351:       - name: Destroy VM",
          "352:         if: always() && steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "353:         run: |",
          "354:           tools --timestamps vm destroy --no-wait ${{ matrix.distro-slug }}",
          "356:       - name: Upload Nox Requirements Tarball",
          "357:         uses: actions/upload-artifact@v3",
          "358:         with:",
          "359:           name: nox-windows-${{ matrix.arch }}-${{ inputs.nox-session }}",
          "360:           path: nox.windows.${{ matrix.arch }}.tar.*",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-packages.yml.jinja||.github/workflows/templates/build-packages.yml.jinja": [
          "File: .github/workflows/templates/build-packages.yml.jinja -> .github/workflows/templates/build-packages.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   <%- for backend in (\"onedir\", \"src\") %>",
          "10:   <%- if backend == \"src\" %>",
          "11:     <%- do conclusion_needs.append(job_name) %>",
          "12:   <%- endif %>",
          "14:   <{ job_name }>:",
          "15:     name: Build Packages",
          "17:     needs:",
          "18:       - prepare-workflow",
          "21:     with:",
          "22:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "23:       cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "24:       relenv-version: \"<{ relenv_version }>\"",
          "25:       python-version: \"<{ python_version }>\"",
          "26:       source: \"<{ backend }>\"",
          "28:       environment: <{ gh_environment }>",
          "34:     secrets: inherit",
          "35:     <%- endif %>",
          "37:   <%- endfor %>",
          "",
          "[Removed Lines]",
          "1: <%- for platform, pkg_type, display_name, runner_type in (",
          "2:                                                           (\"linux\", \"rpm\", \"RPM\", \"self-hosted\"),",
          "3:                                                           (\"linux\", \"deb\", \"DEB\", \"self-hosted\"),",
          "4:                                                           (\"windows\", \"windows\", \"Windows\", \"github-hosted\"),",
          "5:                                                           (\"macos\", \"macos\", \"macOS\", \"github-hosted\"),",
          "6:                                                         ) %>",
          "9:   <%- set job_name = \"build-{}-pkgs-{}\".format(pkg_type, backend) %>",
          "16:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-pkgs'] && fromJSON(needs.prepare-workflow.outputs.runners)['<{ runner_type }>'] }}",
          "19:       - build-salt-onedir-<{ platform }>",
          "20:     uses: ./.github/workflows/build-<{ pkg_type }>-packages.yml",
          "27:     <%- if pkg_type in (\"macos\", \"windows\") and gh_environment %>",
          "29:       <%- if pkg_type == \"macos\" %>",
          "30:       sign-packages: true",
          "31:       <%- else %>",
          "32:       sign-packages: <% if gh_environment == 'nightly' -%> false <%- else -%> ${{ inputs.sign-windows-packages }} <%- endif %>",
          "33:       <%- endif %>",
          "38: <%- endfor %>",
          "",
          "[Added Lines]",
          "2:   <%- set job_name = \"build-pkgs-{}\".format(backend) %>",
          "9:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['build-pkgs'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "12:       - build-salt-onedir",
          "13:     uses: ./.github/workflows/build-packages.yml",
          "20:     <%- if gh_environment %>",
          "22:       sign-macos-packages: true",
          "23:       sign-windows-packages: <% if gh_environment == 'nightly' -%> false <%- else -%> ${{ inputs.sign-windows-packages }} <%- endif %>",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-repos.yml.jinja||.github/workflows/templates/build-repos.yml.jinja": [
          "File: .github/workflows/templates/build-repos.yml.jinja -> .github/workflows/templates/build-repos.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     needs:",
          "21:       - prepare-workflow",
          "22:       <%- if type not in (\"src\", \"onedir\") %>",
          "24:       <%- elif type == 'onedir' %>",
          "28:       <%- elif type == 'src' %>",
          "29:       - build-source-tarball",
          "30:       <%- endif %>",
          "",
          "[Removed Lines]",
          "23:       - build-<{ type }>-pkgs-onedir",
          "25:       - build-salt-onedir-linux",
          "26:       - build-salt-onedir-macos",
          "27:       - build-salt-onedir-windows",
          "",
          "[Added Lines]",
          "23:       - build-pkgs-onedir",
          "25:       - build-salt-onedir",
          "",
          "---------------"
        ],
        ".github/workflows/templates/ci.yml.jinja||.github/workflows/templates/ci.yml.jinja": [
          "File: .github/workflows/templates/ci.yml.jinja -> .github/workflows/templates/ci.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:   <%- set job_name = \"build-deps-onedir\" %>",
          "237:   <%- if includes.get(job_name, True) %>",
          "243:     name: Build Dependencies Onedir",
          "244:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['<{ job_name }>'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "245:     needs:",
          "246:       - prepare-workflow",
          "248:     with:",
          "249:       cache-seed: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "250:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "",
          "[Removed Lines]",
          "238:   <%- for platform in (\"linux\", \"windows\", \"macos\") %>",
          "239:     <%- set platform_job_name = \"{}-{}\".format(job_name, platform) %>",
          "241:   <{ platform_job_name }>:",
          "242:     <%- do conclusion_needs.append(platform_job_name) %>",
          "247:     uses: ./.github/workflows/build-deps-onedir-<{ platform }>.yml",
          "",
          "[Added Lines]",
          "239:   <{ job_name }>:",
          "240:     <%- do conclusion_needs.append(job_name) %>",
          "245:     uses: ./.github/workflows/build-deps-onedir.yml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:       relenv-version: \"<{ relenv_version }>\"",
          "254:       python-version: \"<{ python_version }>\"",
          "257:   <%- endif %>",
          "260:   <%- set job_name = \"build-salt-onedir\" %>",
          "261:   <%- if includes.get(job_name, True) %>",
          "267:     name: Build Salt Onedir",
          "268:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['<{ job_name }>'] }}",
          "269:     needs:",
          "270:       - prepare-workflow",
          "272:       - build-source-tarball",
          "274:     with:",
          "275:       cache-seed: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "276:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "",
          "[Removed Lines]",
          "256:   <%- endfor %>",
          "262:   <%- for platform in (\"linux\", \"windows\", \"macos\") %>",
          "263:     <%- set platform_job_name = \"{}-{}\".format(job_name, platform) %>",
          "265:   <{ platform_job_name }>:",
          "266:     <%- do conclusion_needs.append(platform_job_name) %>",
          "271:       - build-deps-onedir-<{ platform }>",
          "273:     uses: ./.github/workflows/build-salt-onedir-<{ platform }>.yml",
          "",
          "[Added Lines]",
          "260:   <{ job_name }>:",
          "261:     <%- do conclusion_needs.append(job_name) %>",
          "266:       - build-deps-onedir",
          "268:     uses: ./.github/workflows/build-salt-onedir.yml",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:       relenv-version: \"<{ relenv_version }>\"",
          "280:       python-version: \"<{ python_version }>\"",
          "283:   <%- endif %>",
          "",
          "[Removed Lines]",
          "282:   <%- endfor %>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja||.github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja": [
          "File: .github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja -> .github/workflows/templates/test-salt-pkg-repo-downloads.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     <%- if gh_environment == \"release\" %>",
          "20:       - download-onedir-artifact",
          "21:     <%- else %>",
          "25:     <%- endif %>",
          "26:     uses: ./.github/workflows/test-package-downloads-action.yml",
          "27:     with:",
          "",
          "[Removed Lines]",
          "22:       - build-salt-onedir-linux",
          "23:       - build-salt-onedir-macos",
          "24:       - build-salt-onedir-windows",
          "",
          "[Added Lines]",
          "22:       - build-salt-onedir",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt-pkg.yml.jinja||.github/workflows/templates/test-salt-pkg.yml.jinja": [
          "File: .github/workflows/templates/test-salt-pkg.yml.jinja -> .github/workflows/templates/test-salt-pkg.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test-pkg'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "8:     needs:",
          "9:       - prepare-workflow",
          "12:     uses: ./.github/workflows/test-packages-action-linux.yml",
          "13:     with:",
          "14:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "10:       - build-<{ pkg_type }>-pkgs-onedir",
          "11:       - linux-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "10:       - build-pkgs-onedir",
          "11:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test-pkg'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "41:     needs:",
          "42:       - prepare-workflow",
          "45:     uses: ./.github/workflows/test-packages-action-macos.yml",
          "46:     with:",
          "47:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "43:       - build-macos-pkgs-onedir",
          "44:       - macos-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "43:       - build-pkgs-onedir",
          "44:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test-pkg'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "71:     needs:",
          "72:       - prepare-workflow",
          "75:     uses: ./.github/workflows/test-packages-action-windows.yml",
          "76:     with:",
          "77:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "73:       - build-windows-pkgs-onedir",
          "74:       - windows-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "73:       - build-pkgs-onedir",
          "74:       - build-ci-deps",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt.yml.jinja||.github/workflows/templates/test-salt.yml.jinja": [
          "File: .github/workflows/templates/test-salt.yml.jinja -> .github/workflows/templates/test-salt.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "13:     needs:",
          "14:       - prepare-workflow",
          "16:     uses: ./.github/workflows/test-action-windows.yml",
          "17:     with:",
          "18:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "15:       - windows-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "15:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['github-hosted'] }}",
          "41:     needs:",
          "42:       - prepare-workflow",
          "44:     uses: ./.github/workflows/test-action-macos.yml",
          "45:     with:",
          "46:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "43:       - macos-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "43:       - build-ci-deps",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     if: ${{ fromJSON(needs.prepare-workflow.outputs.jobs)['test'] && fromJSON(needs.prepare-workflow.outputs.runners)['self-hosted'] }}",
          "68:     needs:",
          "69:       - prepare-workflow",
          "71:     uses: ./.github/workflows/test-action-linux.yml",
          "72:     with:",
          "73:       distro-slug: <{ slug }>",
          "",
          "[Removed Lines]",
          "70:       - linux-<{ arch }>-ci-deps",
          "",
          "[Added Lines]",
          "70:       - build-ci-deps",
          "",
          "---------------"
        ],
        "tools/precommit/workflows.py||tools/precommit/workflows.py": [
          "File: tools/precommit/workflows.py -> tools/precommit/workflows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         \"Test Package Downloads\": {",
          "88:             \"template\": \"test-package-downloads-action.yml\",",
          "89:         },",
          "90:     }",
          "91:     test_salt_listing: dict[str, list[tuple[str, ...]]] = {",
          "92:         \"linux\": [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         \"Build CI Deps\": {",
          "91:             \"template\": \"build-deps-ci-action.yml\",",
          "92:         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:     test_salt_pkg_downloads_needs_slugs = set()",
          "233:     for platform in test_salt_pkg_downloads_listing:",
          "234:         for _, arch, _ in test_salt_pkg_downloads_listing[platform]:",
          "237:     env = Environment(",
          "238:         block_start_string=\"<%\",",
          "",
          "[Removed Lines]",
          "235:             test_salt_pkg_downloads_needs_slugs.add(f\"{platform}-{arch}-ci-deps\")",
          "",
          "[Added Lines]",
          "238:             test_salt_pkg_downloads_needs_slugs.add(\"build-ci-deps\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47de5e790bbb897c15a5d567cb8f6afe4405cb95",
      "candidate_info": {
        "commit_hash": "47de5e790bbb897c15a5d567cb8f6afe4405cb95",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/47de5e790bbb897c15a5d567cb8f6afe4405cb95",
        "files": [
          "tests/pytests/integration/minion/test_return_retries.py"
        ],
        "message": "Even more reliable pillar_timeout test",
        "before_after_code_files": [
          "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py": [
          "File: tests/pytests/integration/minion/test_return_retries.py -> tests/pytests/integration/minion/test_return_retries.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: @pytest.mark.slow_test",
          "56: def test_pillar_timeout(salt_master_factory):",
          "57:     cmd = \"\"\"",
          "59:     \"\"\".strip()",
          "60:     master_overrides = {",
          "61:         \"ext_pillar\": [",
          "",
          "[Removed Lines]",
          "58:     python -c \"import time; time.sleep(3.0); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "",
          "[Added Lines]",
          "58:     python -c \"import time; time.sleep(5); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "225464d3b5b8422b2309042b310c6a8b080f0538",
      "candidate_info": {
        "commit_hash": "225464d3b5b8422b2309042b310c6a8b080f0538",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/225464d3b5b8422b2309042b310c6a8b080f0538",
        "files": [
          "tests/pytests/pkg/download/test_pkg_download.py"
        ],
        "message": "Fix the Mac OS onedir package download tests\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py": [
          "File: tests/pytests/pkg/download/test_pkg_download.py -> tests/pytests/pkg/download/test_pkg_download.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:         assert ret.returncode == 0, ret",
          "432:     else:",
          "433:         # We are testing the onedir download",
          "435:         if repo_subpath == \"minor\":",
          "436:             repo_url_base = f\"{root_url}/onedir/{repo_subpath}/{salt_release}\"",
          "437:         else:",
          "",
          "[Removed Lines]",
          "434:         onedir_name = f\"salt-{salt_release}-onedir-darwin-{arch}.tar.xz\"",
          "",
          "[Added Lines]",
          "434:         onedir_name = f\"salt-{salt_release}-onedir-macos-{arch}.tar.xz\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81e15ea6c9bc53d410322a47916a0f106dee66c5",
      "candidate_info": {
        "commit_hash": "81e15ea6c9bc53d410322a47916a0f106dee66c5",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/81e15ea6c9bc53d410322a47916a0f106dee66c5",
        "files": [
          ".github/workflows/test-packages-action-linux.yml",
          ".github/workflows/test-packages-action-macos.yml",
          ".gitignore",
          "doc/topics/packaging/testing.rst",
          "noxfile.py",
          "pkg/tests/__init__.py",
          "pkg/tests/conftest.py",
          "pkg/tests/downgrade/__init__.py",
          "pkg/tests/downgrade/test_salt_downgrade.py",
          "pkg/tests/download/__init__.py",
          "pkg/tests/download/test_pkg_download.py",
          "pkg/tests/files/check_imports.sls",
          "pkg/tests/files/check_python.py",
          "pkg/tests/integration/__init__.py",
          "pkg/tests/integration/test_check_imports.py",
          "pkg/tests/integration/test_clean_zmq_teardown.py",
          "pkg/tests/integration/test_enabled_disabled.py",
          "pkg/tests/integration/test_help.py",
          "pkg/tests/integration/test_logrotate_config.py",
          "pkg/tests/integration/test_multi_minion.py",
          "pkg/tests/integration/test_pip.py",
          "pkg/tests/integration/test_pip_upgrade.py",
          "pkg/tests/integration/test_pkg.py",
          "pkg/tests/integration/test_python.py",
          "pkg/tests/integration/test_salt_api.py",
          "pkg/tests/integration/test_salt_call.py",
          "pkg/tests/integration/test_salt_exec.py",
          "pkg/tests/integration/test_salt_grains.py",
          "pkg/tests/integration/test_salt_key.py",
          "pkg/tests/integration/test_salt_minion.py",
          "pkg/tests/integration/test_salt_output.py",
          "pkg/tests/integration/test_salt_pillar.py",
          "pkg/tests/integration/test_salt_state_file.py",
          "pkg/tests/integration/test_salt_ufw.py",
          "pkg/tests/integration/test_salt_user.py",
          "pkg/tests/integration/test_ssm.py",
          "pkg/tests/integration/test_systemd_config.py",
          "pkg/tests/integration/test_version.py",
          "pkg/tests/support/__init__.py",
          "pkg/tests/support/coverage/sitecustomize.py",
          "pkg/tests/support/helpers.py",
          "pkg/tests/support/paths.py",
          "pkg/tests/support/runtests.py",
          "pkg/tests/support/sminion.py",
          "pkg/tests/upgrade/__init__.py",
          "pkg/tests/upgrade/test_salt_upgrade.py",
          "tests/pkg/rpm/salt.spec",
          "tests/pytests/pkg/__init__.py",
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/downgrade/__init__.py",
          "tests/pytests/pkg/downgrade/test_salt_downgrade.py",
          "tests/pytests/pkg/download/__init__.py",
          "tests/pytests/pkg/download/test_pkg_download.py",
          "tests/pytests/pkg/files/check_imports.sls",
          "tests/pytests/pkg/files/check_python.py",
          "tests/pytests/pkg/integration/__init__.py",
          "tests/pytests/pkg/integration/test_check_imports.py",
          "tests/pytests/pkg/integration/test_clean_zmq_teardown.py",
          "tests/pytests/pkg/integration/test_enabled_disabled.py",
          "tests/pytests/pkg/integration/test_help.py",
          "tests/pytests/pkg/integration/test_logrotate_config.py",
          "tests/pytests/pkg/integration/test_multi_minion.py",
          "tests/pytests/pkg/integration/test_pip.py",
          "tests/pytests/pkg/integration/test_pip_upgrade.py",
          "tests/pytests/pkg/integration/test_pkg.py",
          "tests/pytests/pkg/integration/test_python.py",
          "tests/pytests/pkg/integration/test_salt_api.py",
          "tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_exec.py",
          "tests/pytests/pkg/integration/test_salt_grains.py",
          "tests/pytests/pkg/integration/test_salt_key.py",
          "tests/pytests/pkg/integration/test_salt_minion.py",
          "tests/pytests/pkg/integration/test_salt_output.py",
          "tests/pytests/pkg/integration/test_salt_pillar.py",
          "tests/pytests/pkg/integration/test_salt_state_file.py",
          "tests/pytests/pkg/integration/test_salt_ufw.py",
          "tests/pytests/pkg/integration/test_salt_user.py",
          "tests/pytests/pkg/integration/test_ssm.py",
          "tests/pytests/pkg/integration/test_systemd_config.py",
          "tests/pytests/pkg/integration/test_version.py",
          "tests/pytests/pkg/rpm/salt.spec",
          "tests/pytests/pkg/support/__init__.py",
          "tests/pytests/pkg/support/coverage/sitecustomize.py",
          "tests/pytests/pkg/support/helpers.py",
          "tests/pytests/pkg/support/paths.py",
          "tests/pytests/pkg/support/runtests.py",
          "tests/pytests/pkg/support/sminion.py",
          "tests/pytests/pkg/upgrade/__init__.py",
          "tests/pytests/pkg/upgrade/test_salt_upgrade.py",
          "tools/vm.py"
        ],
        "message": "Migrate package tests to the main test suite",
        "before_after_code_files": [
          "noxfile.py||noxfile.py",
          "pkg/tests/conftest.py||tests/pytests/pkg/conftest.py",
          "pkg/tests/downgrade/test_salt_downgrade.py||tests/pytests/pkg/downgrade/test_salt_downgrade.py",
          "pkg/tests/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py",
          "pkg/tests/integration/test_enabled_disabled.py||tests/pytests/pkg/integration/test_enabled_disabled.py",
          "pkg/tests/integration/test_help.py||tests/pytests/pkg/integration/test_help.py",
          "pkg/tests/integration/test_python.py||tests/pytests/pkg/integration/test_python.py",
          "pkg/tests/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py",
          "pkg/tests/integration/test_version.py||tests/pytests/pkg/integration/test_version.py",
          "pkg/tests/support/helpers.py||tests/pytests/pkg/support/helpers.py",
          "tools/vm.py||tools/vm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "noxfile.py||noxfile.py": [
          "File: noxfile.py -> noxfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:         xml_coverage_file = COVERAGE_OUTPUT_DIR.relative_to(REPO_ROOT) / \"salt.xml\"",
          "464:         html_coverage_dir = COVERAGE_OUTPUT_DIR.relative_to(REPO_ROOT) / \"html\" / \"salt\"",
          "465:         cmd_args = [",
          "467:             \"--include=salt/*\",",
          "468:         ]",
          "",
          "[Removed Lines]",
          "466:             \"--omit=tests/*,pkg/tests/*\",",
          "",
          "[Added Lines]",
          "466:             \"--omit=tests/*,tests/pytests/pkg/*\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:         )",
          "476:         cmd_args = [",
          "477:             \"--omit=salt/*\",",
          "479:         ]",
          "480:     else:",
          "481:         json_coverage_file = (",
          "",
          "[Removed Lines]",
          "478:             \"--include=tests/*,pkg/tests/*\",",
          "",
          "[Added Lines]",
          "478:             \"--include=tests/*,tests/pytests/pkg/*\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "484:         xml_coverage_file = COVERAGE_OUTPUT_DIR.relative_to(REPO_ROOT) / \"coverage.xml\"",
          "485:         html_coverage_dir = COVERAGE_OUTPUT_DIR.relative_to(REPO_ROOT) / \"html\" / \"full\"",
          "486:         cmd_args = [",
          "488:         ]",
          "490:     if cli_report:",
          "",
          "[Removed Lines]",
          "487:             \"--include=salt/*,tests/*,pkg/tests/*\",",
          "",
          "[Added Lines]",
          "487:             \"--include=salt/*,tests/*,tests/pytests/pkg/*\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1837:         )",
          "1839:     chunks = {",
          "1841:         \"upgrade\": [",
          "1842:             \"--upgrade\",",
          "1843:             \"--no-uninstall\",",
          "1845:         ],",
          "1846:         \"upgrade-classic\": [",
          "1847:             \"--upgrade\",",
          "1848:             \"--no-uninstall\",",
          "1850:         ],",
          "1851:         \"downgrade\": [",
          "1852:             \"--downgrade\",",
          "1853:             \"--no-uninstall\",",
          "1855:         ],",
          "1856:         \"downgrade-classic\": [",
          "1857:             \"--downgrade\",",
          "1858:             \"--no-uninstall\",",
          "1860:         ],",
          "1861:         \"download-pkgs\": [",
          "1862:             \"--download-pkgs\",",
          "1864:         ],",
          "1865:     }",
          "",
          "[Removed Lines]",
          "1840:         \"install\": [\"pkg/tests/\"],",
          "1844:             \"pkg/tests/upgrade/\",",
          "1849:             \"pkg/tests/upgrade/\",",
          "1854:             \"pkg/tests/downgrade/\",",
          "1859:             \"pkg/tests/downgrade/\",",
          "1863:             \"pkg/tests/download/\",",
          "",
          "[Added Lines]",
          "1840:         \"install\": [\"tests/pytests/pkg/\"],",
          "1844:             \"tests/pytests/pkg/upgrade/\",",
          "1849:             \"tests/pytests/pkg/upgrade/\",",
          "1854:             \"tests/pytests/pkg/downgrade/\",",
          "1859:             \"tests/pytests/pkg/downgrade/\",",
          "1863:             \"tests/pytests/pkg/download/\",",
          "",
          "---------------"
        ],
        "pkg/tests/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: pkg/tests/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from saltfactories.utils.tempfiles import SaltPillarTree, SaltStateTree",
          "14: import salt.config",
          "16:     CODE_DIR,",
          "17:     TESTS_DIR,",
          "18:     ApiRequest,",
          "",
          "[Removed Lines]",
          "15: from tests.support.helpers import (",
          "",
          "[Added Lines]",
          "15: from tests.pytests.pkg.support.helpers import (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:     envs = {",
          "210:         \"base\": [",
          "211:             str(file_root),",
          "213:         ],",
          "214:     }",
          "215:     tree = SaltStateTree(envs=envs)",
          "",
          "[Removed Lines]",
          "212:             str(TESTS_DIR / \"files\"),",
          "",
          "[Added Lines]",
          "212:             str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:     test_user = False",
          "346:     master_config = install_salt.config_path / \"master\"",
          "347:     if master_config.exists():",
          "349:             data = yaml.safe_load(fp)",
          "350:             if data and \"user\" in data:",
          "351:                 test_user = True",
          "",
          "[Removed Lines]",
          "348:         with open(master_config) as fp:",
          "",
          "[Added Lines]",
          "348:         with salt.utils.files.fopen(master_config) as fp:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:                 \"-R\",",
          "440:                 \"salt:salt\",",
          "441:                 str(pathlib.Path(\"/etc\", \"salt\", \"pki\", \"master\")),",
          "443:         )",
          "444:         # The engines_dirs is created in .nox path. We need to set correct perms",
          "445:         # for the user running the Salt Master",
          "447:         file_roots = pathlib.Path(\"/srv/\", \"salt\")",
          "448:         pillar_roots = pathlib.Path(\"/srv/\", \"pillar\")",
          "449:         for _dir in [file_roots, pillar_roots]:",
          "452:     with factory.started(start_timeout=start_timeout):",
          "453:         yield factory",
          "",
          "[Removed Lines]",
          "442:             ]",
          "446:         subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(CODE_DIR.parent / \".nox\")])",
          "450:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)])",
          "",
          "[Added Lines]",
          "442:             ],",
          "443:             check=True,",
          "447:         subprocess.run(",
          "448:             [\"chown\", \"-R\", \"salt:salt\", str(CODE_DIR.parent / \".nox\")], check=False",
          "449:         )",
          "453:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=False)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "504:         file_roots = pathlib.Path(\"/srv/\", \"salt\")",
          "505:         pillar_roots = pathlib.Path(\"/srv/\", \"pillar\")",
          "506:         for _dir in [file_roots, pillar_roots]:",
          "509:     factory.after_terminate(",
          "511:     )",
          "512:     with factory.started(start_timeout=start_timeout):",
          "513:         yield factory",
          "",
          "[Removed Lines]",
          "507:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)])",
          "510:         pytest.helpers.remove_stale_minion_key, salt_master, factory.id",
          "",
          "[Added Lines]",
          "510:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=True)",
          "513:         pytest.helpers.remove_stale_minion_key_pkg, salt_master, factory.id",
          "",
          "---------------"
        ],
        "pkg/tests/downgrade/test_salt_downgrade.py||tests/pytests/pkg/downgrade/test_salt_downgrade.py": [
          "File: pkg/tests/downgrade/test_salt_downgrade.py -> tests/pytests/pkg/downgrade/test_salt_downgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import packaging.version",
          "4: import pytest",
          "5: from pytestskipmarkers.utils import platform",
          "",
          "[Removed Lines]",
          "1: import shutil",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/tests/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py": [
          "File: pkg/tests/download/test_pkg_download.py -> tests/pytests/pkg/download/test_pkg_download.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     try:",
          "269:         pytest.helpers.download_file(gpg_file_url, downloads_path / gpg_key_name)",
          "271:         pytest.fail(f\"Failed to download {gpg_file_url}: {exc}\")",
          "273:     ret = shell.run(\"rpm\", \"--import\", str(downloads_path / gpg_key_name), check=False)",
          "",
          "[Removed Lines]",
          "270:     except Exception as exc:",
          "",
          "[Added Lines]",
          "270:     except Exception as exc:  # pylint: disable=broad-except",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:         try:",
          "335:             pytest.helpers.download_file(gpg_file_url, downloads_path / gpg_key_name)",
          "337:             pytest.fail(f\"Failed to download {gpg_file_url}: {exc}\")",
          "339:         salt_sources_path = downloads_path / \"salt.list\"",
          "",
          "[Removed Lines]",
          "336:         except Exception as exc:",
          "",
          "[Added Lines]",
          "336:         except Exception as exc:  # pylint: disable=broad-except",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385:         try:",
          "386:             pytest.helpers.download_file(onedir_url, onedir_location)",
          "388:             pytest.fail(f\"Failed to download {onedir_url}: {exc}\")",
          "390:         shell.run(\"tar\", \"xvf\", str(onedir_location), \"-C\", str(onedir_extracted))",
          "",
          "[Removed Lines]",
          "387:         except Exception as exc:",
          "",
          "[Added Lines]",
          "387:         except Exception as exc:  # pylint: disable=broad-except",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:         try:",
          "441:             pytest.helpers.download_file(onedir_url, onedir_location)",
          "443:             pytest.fail(f\"Failed to download {onedir_url}: {exc}\")",
          "445:         shell.run(\"tar\", \"xvf\", str(onedir_location), \"-C\", str(onedir_extracted))",
          "",
          "[Removed Lines]",
          "442:         except Exception as exc:",
          "",
          "[Added Lines]",
          "442:         except Exception as exc:  # pylint: disable=broad-except",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "517:             try:",
          "518:                 pytest.helpers.download_file(onedir_url, onedir_location)",
          "520:                 pytest.fail(f\"Failed to download {onedir_url}: {exc}\")",
          "522:             shell.run(\"unzip\", str(onedir_location), \"-d\", str(onedir_extracted))",
          "",
          "[Removed Lines]",
          "519:             except Exception as exc:",
          "",
          "[Added Lines]",
          "519:             except Exception as exc:  # pylint: disable=broad-except",
          "",
          "---------------"
        ],
        "pkg/tests/integration/test_enabled_disabled.py||tests/pytests/pkg/integration/test_enabled_disabled.py": [
          "File: pkg/tests/integration/test_enabled_disabled.py -> tests/pytests/pkg/integration/test_enabled_disabled.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "2: from pytestskipmarkers.utils import platform",
          "6: @pytest.mark.skip_on_windows(reason=\"Linux test only\")",
          "",
          "[Removed Lines]",
          "3: from saltfactories.utils.functional import MultiStateResult",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/tests/integration/test_help.py||tests/pytests/pkg/integration/test_help.py": [
          "File: pkg/tests/integration/test_help.py -> tests/pytests/pkg/integration/test_help.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import subprocess",
          "6: def test_help(install_salt):",
          "7:     \"\"\"",
          "",
          "[Removed Lines]",
          "3: from pytestskipmarkers.utils import platform",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/tests/integration/test_python.py||tests/pytests/pkg/integration/test_python.py": [
          "File: pkg/tests/integration/test_python.py -> tests/pytests/pkg/integration/test_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "8: @pytest.fixture",
          "",
          "[Removed Lines]",
          "5: from tests.support.helpers import TESTS_DIR",
          "",
          "[Added Lines]",
          "5: from tests.pytests.pkg.support.helpers import TESTS_DIR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: @pytest.mark.parametrize(\"exp_ret,user_arg\", [(1, \"false\"), (0, \"true\")])",
          "17: def test_python_script(install_salt, exp_ret, user_arg, python_script_bin):",
          "18:     ret = install_salt.proc.run(",
          "20:         stdout=subprocess.PIPE,",
          "21:         stderr=subprocess.PIPE,",
          "22:         check=False,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:             python_script_bin",
          "21:             + [",
          "22:                 str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\" / \"check_python.py\"),",
          "23:                 user_arg,",
          "24:             ]",
          "25:         ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29: def test_python_script_exception(install_salt, python_script_bin):",
          "30:     ret = install_salt.proc.run(",
          "32:         stdout=subprocess.PIPE,",
          "33:         stderr=subprocess.PIPE,",
          "34:         check=False,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:             python_script_bin",
          "39:             + [",
          "40:                 str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\" / \"check_python.py\"),",
          "41:                 \"raise\",",
          "42:             ]",
          "43:         ),",
          "",
          "---------------"
        ],
        "pkg/tests/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py": [
          "File: pkg/tests/integration/test_salt_user.py -> tests/pytests/pkg/integration/test_salt_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     home = \"\"",
          "91:     try:",
          "92:         home = proc.stdout.decode().split(\":\")[5]",
          "94:         pass",
          "95:     assert home == \"/opt/saltstack/salt\"",
          "",
          "[Removed Lines]",
          "93:     except:",
          "",
          "[Added Lines]",
          "93:     except Exception:  # pylint: disable=broad-except",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         for group in proc.stdout.decode().split(\" \"):",
          "107:             if \"salt\" in group:",
          "108:                 in_group = True",
          "110:         pass",
          "111:     assert in_group is True",
          "",
          "[Removed Lines]",
          "109:     except:",
          "",
          "[Added Lines]",
          "109:     except Exception:  # pylint: disable=broad-except",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     try:",
          "125:         shell = proc.stdout.decode().split(\":\")[6].strip()",
          "126:         shell_exists = pathlib.Path(shell).exists()",
          "128:         pass",
          "129:     assert shell_exists is True",
          "",
          "[Removed Lines]",
          "127:     except:",
          "",
          "[Added Lines]",
          "127:     except Exception:  # pylint: disable=broad-except",
          "",
          "---------------"
        ],
        "pkg/tests/integration/test_version.py||tests/pytests/pkg/integration/test_version.py": [
          "File: pkg/tests/integration/test_version.py -> tests/pytests/pkg/integration/test_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     ret.stdout.matcher.fnmatch_lines([\"*Salt Version:*\"])",
          "33:     py_version = subprocess.run(",
          "34:         [str(python_bin), \"--version\"],",
          "35:         stdout=subprocess.PIPE,",
          "36:         stderr=subprocess.PIPE,",
          "37:     ).stdout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         check=True,",
          "",
          "---------------"
        ],
        "pkg/tests/support/helpers.py||tests/pytests/pkg/support/helpers.py": [
          "File: pkg/tests/support/helpers.py -> tests/pytests/pkg/support/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import psutil",
          "17: import pytest",
          "18: import requests",
          "19: from pytestshellutils.shell import DaemonImpl, Subprocess",
          "20: from pytestshellutils.utils.processes import (",
          "21:     ProcessResult,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import saltfactories.cli",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: )",
          "25: from pytestskipmarkers.utils import platform",
          "26: from saltfactories.bases import SystemdSaltDaemonImpl",
          "28: from saltfactories.daemons import api, master, minion",
          "29: from saltfactories.utils import cli_scripts",
          "31: try:",
          "32:     import crypt",
          "",
          "[Removed Lines]",
          "27: from saltfactories.cli import call, key, salt",
          "",
          "[Added Lines]",
          "28: from saltfactories.cli import call, key",
          "32: import salt.utils.files",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: except ImportError:",
          "42:     HAS_PWD = False",
          "45: CODE_DIR = TESTS_DIR.parent",
          "48: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "44: TESTS_DIR = pathlib.Path(__file__).resolve().parent.parent",
          "46: ARTIFACTS_DIR = CODE_DIR / \"artifacts\"",
          "",
          "[Added Lines]",
          "47: TESTS_DIR = pathlib.Path(__file__).resolve().parent.parent.parent.parent",
          "49: ARTIFACTS_DIR = CODE_DIR / \"artifacts\" / \"pkg\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:                 # expects unless we do it via a batch file",
          "421:                 batch_file = pathlib.Path(pkg).parent / \"install_msi.cmd\"",
          "422:                 batch_content = f'msiexec /qn /i \"{str(pkg)}\" START_MINION=\"\"\\n'",
          "424:                     fp.write(batch_content)",
          "425:                 # Now run the batch file",
          "426:                 ret = self.proc.run(\"cmd.exe\", \"/c\", str(batch_file))",
          "",
          "[Removed Lines]",
          "423:                 with open(batch_file, \"w\") as fp:",
          "",
          "[Added Lines]",
          "426:                 with salt.utils.files.fopen(batch_file, \"w\") as fp:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "618:                 f\"https://repo.saltproject.io/{root_url}{distro_name}/{self.distro_version}/{arch}/{major_ver}/{gpg_key}\",",
          "619:                 f\"/etc/apt/keyrings/{gpg_dest}\",",
          "620:             )",
          "622:                 pathlib.Path(\"/etc\", \"apt\", \"sources.list.d\", \"salt.list\"), \"w\"",
          "623:             ) as fp:",
          "624:                 fp.write(",
          "",
          "[Removed Lines]",
          "621:             with open(",
          "",
          "[Added Lines]",
          "624:             with salt.utils.files.fopen(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "665:             # Let's not check the returncode if this is the case",
          "666:             if not (",
          "667:                 downgrade",
          "670:             ):",
          "671:                 self._check_retcode(ret)",
          "672:             if downgrade:",
          "",
          "[Removed Lines]",
          "668:                 and not packaging.version.parse(self.prev_version)",
          "669:                 >= packaging.version.parse(\"3006.0\")",
          "",
          "[Added Lines]",
          "671:                 and packaging.version.parse(self.prev_version)",
          "672:                 < packaging.version.parse(\"3006.0\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "710:                 # expects unless we do it via a batch file",
          "711:                 batch_file = pkg_path.parent / \"install_msi.cmd\"",
          "712:                 batch_content = f'msiexec /qn /i {str(pkg_path)} START_MINION=\"\"'",
          "714:                     fp.write(batch_content)",
          "715:                 # Now run the batch file",
          "716:                 ret = self.proc.run(\"cmd.exe\", \"/c\", str(batch_file))",
          "",
          "[Removed Lines]",
          "713:                 with open(batch_file, \"w\") as fp:",
          "",
          "[Added Lines]",
          "716:                 with salt.utils.files.fopen(batch_file, \"w\") as fp:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "814:             ret = self.proc.run(self.pkg_mngr, self.rm_pkg, \"-y\", *self.salt_pkgs)",
          "815:             self._check_retcode(ret)",
          "851:     def write_launchd_conf(self, service):",
          "852:         service_name = f\"com.saltstack.salt.{service}\"",
          "853:         ret = self.proc.run(\"launchctl\", \"list\", service_name)",
          "",
          "[Removed Lines]",
          "817:     def assert_uninstalled(self):",
          "818:         \"\"\"",
          "819:         Assert that the paths in /opt/saltstack/ were correctly",
          "820:         removed or not removed",
          "821:         \"\"\"",
          "822:         return",
          "823:         if platform.is_windows():",
          "824:             # I'm not sure where the /opt/saltstack path is coming from",
          "825:             # This is the path we're using to test windows",
          "826:             opt_path = pathlib.Path(os.getenv(\"LocalAppData\"), \"salt\", \"pypath\")",
          "827:         else:",
          "828:             opt_path = pathlib.Path(os.sep, \"opt\", \"saltstack\", \"salt\", \"pypath\")",
          "829:         if not opt_path.exists():",
          "830:             if platform.is_windows():",
          "831:                 assert not opt_path.parent.exists()",
          "832:             else:",
          "833:                 assert not opt_path.parent.parent.exists()",
          "834:         else:",
          "835:             opt_path_contents = list(opt_path.rglob(\"*\"))",
          "836:             if not opt_path_contents:",
          "837:                 pytest.fail(",
          "838:                     f\"The path '{opt_path}' exists but there are no files in it.\"",
          "839:                 )",
          "840:             else:",
          "841:                 for path in list(opt_path_contents):",
          "842:                     if path.name in (\".installs.json\", \"__pycache__\"):",
          "843:                         opt_path_contents.remove(path)",
          "844:                 if opt_path_contents:",
          "845:                     pytest.fail(",
          "846:                         \"The test left some files behind: {}\".format(",
          "847:                             \", \".join([str(p) for p in opt_path_contents])",
          "848:                         )",
          "849:                     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "953:     def __exit__(self, *_):",
          "954:         if not self.no_uninstall:",
          "955:             self.uninstall()",
          "959: class PkgSystemdSaltDaemonImpl(SystemdSaltDaemonImpl):",
          "",
          "[Removed Lines]",
          "956:             self.assert_uninstalled()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1335:             factory_class=SaltApi, salt_pkg_install=self.salt_pkg_install, **kwargs",
          "1336:         )",
          "1339:         return super().salt_key_cli(",
          "1343:         )",
          "1346:         return super().salt_cli(",
          "1350:         )",
          "",
          "[Removed Lines]",
          "1338:     def salt_key_cli(self, **factory_class_kwargs):",
          "1340:             factory_class=SaltKey,",
          "1341:             salt_pkg_install=self.salt_pkg_install,",
          "1345:     def salt_cli(self, **factory_class_kwargs):",
          "1347:             factory_class=SaltCli,",
          "1348:             salt_pkg_install=self.salt_pkg_install,",
          "",
          "[Added Lines]",
          "1306:     def salt_key_cli(self, factory_class=None, **factory_class_kwargs):",
          "1307:         if not factory_class:",
          "1308:             factory_class = SaltKey",
          "1309:         factory_class_kwargs[\"salt_pkg_install\"] = self.salt_pkg_install",
          "1311:             factory_class=factory_class,",
          "1315:     def salt_cli(self, factory_class=None, **factory_class_kwargs):",
          "1316:         if not factory_class:",
          "1317:             factory_class = SaltCli",
          "1318:         factory_class_kwargs[\"salt_pkg_install\"] = self.salt_pkg_install",
          "1320:             factory_class=factory_class,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1403:             \"salt-minion\", self.salt_pkg_install.binary_paths[\"minion\"]",
          "1404:         )",
          "1407:         return super().salt_call_cli(",
          "1411:         )",
          "",
          "[Removed Lines]",
          "1406:     def salt_call_cli(self, **factory_class_kwargs):",
          "1408:             factory_class=SaltCall,",
          "1409:             salt_pkg_install=self.salt_pkg_install,",
          "",
          "[Added Lines]",
          "1378:     def salt_call_cli(self, factory_class=None, **factory_class_kwargs):",
          "1379:         if not factory_class:",
          "1380:             factory_class = SaltCall",
          "1381:         factory_class_kwargs[\"salt_pkg_install\"] = self.salt_pkg_install",
          "1383:             factory_class=factory_class,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1455: @attr.s(kw_only=True, slots=True)",
          "1457:     \"\"\"",
          "1458:     Subclassed just to tweak the binary paths if needed.",
          "1459:     \"\"\"",
          "1461:     def __attrs_post_init__(self):",
          "1462:         self.script_name = \"salt\"",
          "1466: @attr.s(kw_only=True, slots=True)",
          "",
          "[Removed Lines]",
          "1456: class SaltCli(PkgMixin, salt.SaltCli):",
          "1463:         salt.SaltCli.__attrs_post_init__(self)",
          "",
          "[Added Lines]",
          "1430: class SaltCli(PkgMixin, saltfactories.cli.salt.SaltCli):",
          "1437:         saltfactories.cli.salt.SaltCli.__attrs_post_init__(self)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1588: @pytest.helpers.register",
          "1590:     key_path = os.path.join(master.config[\"pki_dir\"], \"minions\", minion_id)",
          "1591:     if os.path.exists(key_path):",
          "1592:         os.unlink(key_path)",
          "",
          "[Removed Lines]",
          "1589: def remove_stale_minion_key(master, minion_id):",
          "",
          "[Added Lines]",
          "1563: def remove_stale_minion_key_pkg(master, minion_id):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1624:     # NOTE the stream=True parameter below",
          "1625:     with requests.get(url, stream=True, auth=auth) as r:",
          "1626:         r.raise_for_status()",
          "1628:             for chunk in r.iter_content(chunk_size=8192):",
          "1629:                 if chunk:",
          "1630:                     f.write(chunk)",
          "",
          "[Removed Lines]",
          "1627:         with open(dest, \"wb\") as f:",
          "",
          "[Added Lines]",
          "1601:         with salt.utils.files.fopen(dest, \"wb\") as f:",
          "",
          "---------------"
        ],
        "tools/vm.py||tools/vm.py": [
          "File: tools/vm.py -> tools/vm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1315:             \"--include\",",
          "1316:             \"artifacts/salt\",",
          "1317:             \"--include\",",
          "1319:             # But we also want to exclude all other entries under artifacts/",
          "1320:             \"--exclude\",",
          "1321:             \"artifacts/*\",",
          "",
          "[Removed Lines]",
          "1318:             \"pkg/artifacts/*\",",
          "",
          "[Added Lines]",
          "1318:             \"artifacts/pkg/*\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8da836a4264117da6f00589053a43bd57c3785fa",
      "candidate_info": {
        "commit_hash": "8da836a4264117da6f00589053a43bd57c3785fa",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/8da836a4264117da6f00589053a43bd57c3785fa",
        "files": [
          "salt/netapi/rest_tornado/saltnado.py"
        ],
        "message": "Destroy event_listener when app is no-longer used",
        "before_after_code_files": [
          "salt/netapi/rest_tornado/saltnado.py||salt/netapi/rest_tornado/saltnado.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/netapi/rest_tornado/saltnado.py||salt/netapi/rest_tornado/saltnado.py": [
          "File: salt/netapi/rest_tornado/saltnado.py -> salt/netapi/rest_tornado/saltnado.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:         self.timeout_futures()",
          "514:         # clear local_client objects to disconnect event publisher's IOStream connections",
          "515:         del self.saltclients",
          "518:     def on_connection_close(self):",
          "519:         \"\"\"",
          "",
          "[Removed Lines]",
          "516:         self.application.event_listener.destroy()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}