{
  "cve_id": "CVE-2023-50943",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
  "patch_info": {
    "commit_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "files": [
      "airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py"
    ],
    "message": "Stop deserializing pickle when enable_xcom_pickling is False (#36255)\n\n* Stop deserializing pickle when enable_xcom_pickling is False\n\n* Fix unit tests\n\n(cherry picked from commit 63e97abec5d56bc62a293c93f5227f364561e51c)",
    "before_after_code_files": [
      "airflow/models/xcom.py||airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py||tests/models/test_xcom.py"
    ]
  },
  "patch_diff": {
    "airflow/models/xcom.py||airflow/models/xcom.py": [
      "File: airflow/models/xcom.py -> airflow/models/xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "685:             except pickle.UnpicklingError:",
      "686:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "687:         else:",
      "693:     @staticmethod",
      "694:     def deserialize_value(result: XCom) -> Any:",
      "",
      "[Removed Lines]",
      "688:             try:",
      "689:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "690:             except (json.JSONDecodeError, UnicodeDecodeError):",
      "691:                 return pickle.loads(result.value)",
      "",
      "[Added Lines]",
      "688:             # Since xcom_pickling is disabled, we should only try to deserialize with JSON",
      "689:             return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "",
      "---------------"
    ],
    "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py": [
      "File: tests/api_connexion/schemas/test_xcom_schema.py -> tests/api_connexion/schemas/test_xcom_schema.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from airflow.models import DagRun, XCom",
      "31: from airflow.utils.dates import parse_execution_date",
      "32: from airflow.utils.session import create_session",
      "34: pytestmark = pytest.mark.db_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     default_time = \"2016-04-02T21:00:00+00:00\"",
      "189:     default_time_parsed = parse_execution_date(default_time)",
      "191:     def test_serialize(self, create_xcom, session):",
      "192:         create_xcom(",
      "193:             dag_id=\"test_dag\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208:             \"map_index\": -1,",
      "209:         }",
      "211:     def test_deserialize(self):",
      "212:         xcom_dump = {",
      "213:             \"key\": \"test_key\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------"
    ],
    "tests/models/test_xcom.py||tests/models/test_xcom.py": [
      "File: tests/models/test_xcom.py -> tests/models/test_xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:             ret_value = XCom.get_value(key=\"xcom_test3\", ti_key=ti_key, session=session)",
      "141:         assert ret_value == {\"key\": \"value\"}",
      "144:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"}):",
      "145:             XCom.set(",
      "146:                 key=\"xcom_test3\",",
      "",
      "[Removed Lines]",
      "143:     def test_xcom_deserialize_with_pickle_to_json_switch(self, task_instance, session):",
      "",
      "[Added Lines]",
      "143:     def test_xcom_deserialize_pickle_when_xcom_pickling_is_disabled(self, task_instance, session):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:                 session=session,",
      "152:             )",
      "153:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"False\"}):",
      "163:     @conf_vars({(\"core\", \"xcom_enable_pickling\"): \"False\"})",
      "164:     def test_xcom_disable_pickle_type_fail_on_non_json(self, task_instance, session):",
      "",
      "[Removed Lines]",
      "154:             ret_value = XCom.get_one(",
      "155:                 key=\"xcom_test3\",",
      "156:                 dag_id=task_instance.dag_id,",
      "157:                 task_id=task_instance.task_id,",
      "158:                 run_id=task_instance.run_id,",
      "159:                 session=session,",
      "160:             )",
      "161:         assert ret_value == {\"key\": \"value\"}",
      "",
      "[Added Lines]",
      "154:             with pytest.raises(UnicodeDecodeError):",
      "155:                 XCom.get_one(",
      "156:                     key=\"xcom_test3\",",
      "157:                     dag_id=task_instance.dag_id,",
      "158:                     task_id=task_instance.task_id,",
      "159:                     run_id=task_instance.run_id,",
      "160:                     session=session,",
      "161:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56ecbffc40183834b941cd84b861f997e580a7d3",
      "candidate_info": {
        "commit_hash": "56ecbffc40183834b941cd84b861f997e580a7d3",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/56ecbffc40183834b941cd84b861f997e580a7d3",
        "files": [
          "airflow/serialization/serializers/datetime.py",
          "tests/serialization/serializers/test_serializers.py"
        ],
        "message": "Stop serializing timezone-naive datetime to timezone-aware dateime with UTC tz (#36379)\n\n(cherry picked from commit 69f556dd136598662db9e87478584a3c96362fc9)",
        "before_after_code_files": [
          "airflow/serialization/serializers/datetime.py||airflow/serialization/serializers/datetime.py",
          "tests/serialization/serializers/test_serializers.py||tests/serialization/serializers/test_serializers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/serialization/serializers/datetime.py||airflow/serialization/serializers/datetime.py": [
          "File: airflow/serialization/serializers/datetime.py -> airflow/serialization/serializers/datetime.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     serialize as serialize_timezone,",
          "25: )",
          "26: from airflow.utils.module_loading import qualname",
          "29: if TYPE_CHECKING:",
          "30:     import datetime",
          "",
          "[Removed Lines]",
          "27: from airflow.utils.timezone import convert_to_utc, is_naive",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     if isinstance(o, datetime):",
          "47:         qn = qualname(o)",
          "53:         return {TIMESTAMP: o.timestamp(), TIMEZONE: tz}, qn, __version__, True",
          "",
          "[Removed Lines]",
          "48:         if is_naive(o):",
          "49:             o = convert_to_utc(o)",
          "51:         tz = serialize_timezone(o.tzinfo)",
          "",
          "[Added Lines]",
          "48:         tz = serialize_timezone(o.tzinfo) if o.tzinfo else None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:             else:",
          "84:                 tz = timezone(data[TIMEZONE])",
          "85:         else:",
          "88:     if classname == qualname(datetime.datetime) and isinstance(data, dict):",
          "89:         return datetime.datetime.fromtimestamp(float(data[TIMESTAMP]), tz=tz)",
          "",
          "[Removed Lines]",
          "86:             tz = deserialize_timezone(data[TIMEZONE][1], data[TIMEZONE][2], data[TIMEZONE][0])",
          "",
          "[Added Lines]",
          "83:             tz = (",
          "84:                 deserialize_timezone(data[TIMEZONE][1], data[TIMEZONE][2], data[TIMEZONE][0])",
          "85:                 if data[TIMEZONE]",
          "86:                 else None",
          "87:             )",
          "",
          "---------------"
        ],
        "tests/serialization/serializers/test_serializers.py||tests/serialization/serializers/test_serializers.py": [
          "File: tests/serialization/serializers/test_serializers.py -> tests/serialization/serializers/test_serializers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         d = deserialize(s)",
          "85:         assert i.timestamp() == d.timestamp()",
          "87:     def test_deserialize_datetime_v1(self):",
          "88:         s = {",
          "89:             \"__classname__\": \"pendulum.datetime.DateTime\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         i = datetime.datetime.now()",
          "88:         s = serialize(i)",
          "89:         d = deserialize(s)",
          "90:         assert i.timestamp() == d.timestamp()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d80d6a1a0143055598c0b269c015b426d7191b4e",
      "candidate_info": {
        "commit_hash": "d80d6a1a0143055598c0b269c015b426d7191b4e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/d80d6a1a0143055598c0b269c015b426d7191b4e",
        "files": [
          "airflow/operators/bash.py",
          "tests/operators/test_bash.py"
        ],
        "message": "Fix AirflowSkipException message raised by BashOperator (#36354)\n\n(cherry picked from commit 667a5b2d29c1ce46021d400fa591650855dcf26c)",
        "before_after_code_files": [
          "airflow/operators/bash.py||airflow/operators/bash.py",
          "tests/operators/test_bash.py||tests/operators/test_bash.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/operators/bash.py||airflow/operators/bash.py": [
          "File: airflow/operators/bash.py -> airflow/operators/bash.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:             skip_on_exit_code",
          "163:             if isinstance(skip_on_exit_code, Container)",
          "164:             else [skip_on_exit_code]",
          "166:             else []",
          "167:         )",
          "168:         self.cwd = cwd",
          "",
          "[Removed Lines]",
          "165:             if skip_on_exit_code",
          "",
          "[Added Lines]",
          "165:             if skip_on_exit_code is not None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:             output_encoding=self.output_encoding,",
          "207:             cwd=self.cwd,",
          "208:         )",
          "211:         elif result.exit_code != 0:",
          "212:             raise AirflowException(",
          "213:                 f\"Bash command failed. The command returned a non-zero exit code {result.exit_code}.\"",
          "",
          "[Removed Lines]",
          "209:         if self.skip_on_exit_code is not None and result.exit_code in self.skip_on_exit_code:",
          "210:             raise AirflowSkipException(f\"Bash command returned exit code {self.skip_on_exit_code}. Skipping.\")",
          "",
          "[Added Lines]",
          "209:         if result.exit_code in self.skip_on_exit_code:",
          "210:             raise AirflowSkipException(f\"Bash command returned exit code {result.exit_code}. Skipping.\")",
          "",
          "---------------"
        ],
        "tests/operators/test_bash.py||tests/operators/test_bash.py": [
          "File: tests/operators/test_bash.py -> tests/operators/test_bash.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:     @pytest.mark.parametrize(",
          "170:         \"extra_kwargs,actual_exit_code,expected_exc\",",
          "171:         [",
          "175:             ({\"skip_on_exit_code\": None}, 99, AirflowException),",
          "176:             ({\"skip_on_exit_code\": [100]}, 100, AirflowSkipException),",
          "181:         ],",
          "182:     )",
          "183:     def test_skip(self, extra_kwargs, actual_exit_code, expected_exc):",
          "",
          "[Removed Lines]",
          "172:             (None, 99, AirflowSkipException),",
          "173:             ({\"skip_on_exit_code\": 100}, 100, AirflowSkipException),",
          "174:             ({\"skip_on_exit_code\": 100}, 101, AirflowException),",
          "177:             ({\"skip_on_exit_code\": (100, 101)}, 100, AirflowSkipException),",
          "178:             ({\"skip_on_exit_code\": 100}, 101, AirflowException),",
          "179:             ({\"skip_on_exit_code\": [100, 102]}, 101, AirflowException),",
          "180:             ({\"skip_on_exit_code\": None}, 0, None),",
          "",
          "[Added Lines]",
          "172:             ({}, 0, None),",
          "173:             ({}, 100, AirflowException),",
          "174:             ({}, 99, AirflowSkipException),",
          "175:             ({\"skip_on_exit_code\": None}, 0, None),",
          "176:             ({\"skip_on_exit_code\": None}, 100, AirflowException),",
          "178:             ({\"skip_on_exit_code\": 100}, 0, None),",
          "179:             ({\"skip_on_exit_code\": 100}, 100, AirflowSkipException),",
          "180:             ({\"skip_on_exit_code\": 100}, 99, AirflowException),",
          "181:             ({\"skip_on_exit_code\": 0}, 0, AirflowSkipException),",
          "182:             ({\"skip_on_exit_code\": [100]}, 0, None),",
          "184:             ({\"skip_on_exit_code\": [100]}, 99, AirflowException),",
          "185:             ({\"skip_on_exit_code\": [100, 102]}, 99, AirflowException),",
          "186:             ({\"skip_on_exit_code\": (100,)}, 0, None),",
          "187:             ({\"skip_on_exit_code\": (100,)}, 100, AirflowSkipException),",
          "188:             ({\"skip_on_exit_code\": (100,)}, 99, AirflowException),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0db3bc6b53cdb86720900418b63f515b76db46f8",
      "candidate_info": {
        "commit_hash": "0db3bc6b53cdb86720900418b63f515b76db46f8",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0db3bc6b53cdb86720900418b63f515b76db46f8",
        "files": [
          ".github/workflows/build-images.yml",
          ".github/workflows/ci.yml",
          "airflow/provider.yaml.schema.json",
          "dev/README_RELEASE_PROVIDER_PACKAGES.md",
          "dev/breeze/src/airflow_breeze/commands/common_options.py",
          "dev/breeze/src/airflow_breeze/commands/developer_commands.py",
          "dev/breeze/src/airflow_breeze/commands/developer_commands_config.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py",
          "dev/breeze/src/airflow_breeze/utils/packages.py",
          "images/breeze/output_build-docs.svg",
          "images/breeze/output_build-docs.txt",
          "images/breeze/output_release-management_add-back-references.svg",
          "images/breeze/output_release-management_add-back-references.txt",
          "images/breeze/output_release-management_install-provider-packages.txt",
          "images/breeze/output_release-management_prepare-provider-documentation.svg",
          "images/breeze/output_release-management_prepare-provider-documentation.txt",
          "images/breeze/output_release-management_prepare-provider-packages.svg",
          "images/breeze/output_release-management_prepare-provider-packages.txt",
          "images/breeze/output_release-management_publish-docs.svg",
          "images/breeze/output_release-management_publish-docs.txt",
          "images/breeze/output_release-management_verify-provider-packages.txt",
          "images/breeze/output_shell.txt",
          "images/breeze/output_start-airflow.txt"
        ],
        "message": "Add feture of \"not-ready\" provider. (#36391)\n\nThis PR adds possibility of marking the provider as \"not ready\" in the\nprovider.yaml (by setting optional field as \"not-ready\" to `true\".\n\nSetting provider as \"not-ready\", removes it by default from all the\nrelease management commands - preparing documentation files preparing\nprovider packages, publishing docs.\n\nYou can include such providers via `--include-not-ready-providers`\nflag (or setting INCLUDE_NOT_READY_PROVIDERS environment variable to\ntrue).\n\nThis flag is set to True in our CI, so that we can make sure the\nproviders in-progress are also being tested and verified, but when\nrelease manager prepares packages, those providers are not prepared.\n\nThat will help in early stage of a lifecycle of a provider when we\nalready want to iterate and test it continuously, but - for example\nthe API of such provider is not yet stable or when we are in progress\nof moving functionality for such provider from core.\n\nThis PR also marks `fab` providers as \"not-ready\" as it is still\nearly days and we want to exclude it for now from any kind of release\nprocess.\n\n(cherry picked from commit 341d5b747db78b9be00d5d5dc491e37d413570da)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/commands/common_options.py||dev/breeze/src/airflow_breeze/commands/common_options.py",
          "dev/breeze/src/airflow_breeze/commands/developer_commands.py||dev/breeze/src/airflow_breeze/commands/developer_commands.py",
          "dev/breeze/src/airflow_breeze/commands/developer_commands_config.py||dev/breeze/src/airflow_breeze/commands/developer_commands_config.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands.py||dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py||dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py||dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py",
          "dev/breeze/src/airflow_breeze/utils/packages.py||dev/breeze/src/airflow_breeze/utils/packages.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/commands/common_options.py||dev/breeze/src/airflow_breeze/commands/common_options.py": [
          "File: dev/breeze/src/airflow_breeze/commands/common_options.py -> dev/breeze/src/airflow_breeze/commands/common_options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     required=False,",
          "75:     type=NotVerifiedBetterChoice(",
          "76:         get_available_packages(",
          "78:         )",
          "79:     ),",
          "80: )",
          "",
          "[Removed Lines]",
          "77:             include_non_provider_doc_packages=True, include_all_providers=True, include_removed=True",
          "",
          "[Added Lines]",
          "77:             include_non_provider_doc_packages=True,",
          "78:             include_all_providers=True,",
          "79:             include_removed=True,",
          "80:             include_not_ready=True,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:     is_flag=True,",
          "190:     envvar=\"INCLUDE_REMOVED_PROVIDERS\",",
          "191: )",
          "192: option_include_success_outputs = click.option(",
          "193:     \"--include-success-outputs\",",
          "194:     help=\"Whether to include outputs of successful parallel runs (skipped by default).\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: option_include_not_ready_providers = click.option(",
          "196:     \"--include-not-ready-providers\",",
          "197:     help=\"Whether to include providers that are not yet ready to be released.\",",
          "198:     is_flag=True,",
          "199:     envvar=\"INCLUDE_NOT_READY_PROVIDERS\",",
          "200: )",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/developer_commands.py||dev/breeze/src/airflow_breeze/commands/developer_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/developer_commands.py -> dev/breeze/src/airflow_breeze/commands/developer_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     option_forward_credentials,",
          "45:     option_github_repository,",
          "46:     option_image_tag_for_running,",
          "47:     option_include_removed_providers,",
          "48:     option_installation_package_format,",
          "49:     option_integration,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     option_include_not_ready_providers,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590: @click.option(\"-d\", \"--docs-only\", help=\"Only build documentation.\", is_flag=True)",
          "591: @option_dry_run",
          "592: @option_github_repository",
          "593: @option_include_removed_providers",
          "594: @click.option(",
          "595:     \"--one-pass-only\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594: @option_include_not_ready_providers",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:     clean_build: bool,",
          "613:     docs_only: bool,",
          "614:     github_repository: str,",
          "615:     include_removed_providers: bool,",
          "616:     one_pass_only: bool,",
          "617:     package_filter: tuple[str, ...],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617:     include_not_ready_providers: bool,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "640:         spellcheck_only=spellcheck_only,",
          "641:         one_pass_only=one_pass_only,",
          "642:         short_doc_packages=expand_all_provider_packages(",
          "644:         ),",
          "645:     )",
          "646:     cmd = \"/opt/airflow/scripts/in_container/run_docs_build.sh \" + \" \".join(",
          "",
          "[Removed Lines]",
          "643:             doc_packages, include_removed=include_removed_providers",
          "",
          "[Added Lines]",
          "646:             short_doc_packages=doc_packages,",
          "647:             include_removed=include_removed_providers,",
          "648:             include_not_ready=include_not_ready_providers,",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/developer_commands_config.py||dev/breeze/src/airflow_breeze/commands/developer_commands_config.py": [
          "File: dev/breeze/src/airflow_breeze/commands/developer_commands_config.py -> dev/breeze/src/airflow_breeze/commands/developer_commands_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:                 \"--clean-build\",",
          "295:                 \"--one-pass-only\",",
          "296:                 \"--package-filter\",",
          "297:                 \"--include-removed-providers\",",
          "298:                 \"--github-repository\",",
          "299:                 \"--builder\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:                 \"--include-not-ready-providers\",",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/release_management_commands.py||dev/breeze/src/airflow_breeze/commands/release_management_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/release_management_commands.py -> dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     option_github_repository,",
          "47:     option_historical_python_version,",
          "48:     option_image_tag_for_running,",
          "49:     option_include_removed_providers,",
          "50:     option_include_success_outputs,",
          "51:     option_installation_package_format,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     option_include_not_ready_providers,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     \"provider_packages\",",
          "154:     nargs=-1,",
          "155:     required=False,",
          "157: )",
          "158: option_airflow_site_directory = click.option(",
          "159:     \"-a\",",
          "",
          "[Removed Lines]",
          "156:     type=NotVerifiedBetterChoice(get_available_packages(include_removed=False)),",
          "",
          "[Added Lines]",
          "157:     type=NotVerifiedBetterChoice(get_available_packages(include_removed=False, include_not_ready=False)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346: @argument_provider_packages",
          "347: @option_answer",
          "348: @option_dry_run",
          "349: @option_include_removed_providers",
          "350: @click.option(",
          "351:     \"--non-interactive\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: @option_include_not_ready_providers",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "368: def prepare_provider_documentation(",
          "369:     base_branch: str,",
          "370:     github_repository: str,",
          "371:     include_removed_providers: bool,",
          "372:     non_interactive: bool,",
          "373:     only_min_version_update: bool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:     include_not_ready_providers: bool,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "390:     fix_ownership_using_docker()",
          "391:     cleanup_python_generated_files()",
          "392:     if not provider_packages:",
          "395:     if not skip_git_fetch:",
          "396:         run_command([\"git\", \"remote\", \"rm\", \"apache-https-for-providers\"], check=False, stderr=DEVNULL)",
          "",
          "[Removed Lines]",
          "393:         provider_packages = get_available_packages(include_removed=include_removed_providers)",
          "",
          "[Added Lines]",
          "396:         provider_packages = get_available_packages(",
          "397:             include_removed=include_removed_providers, include_not_ready=include_not_ready_providers",
          "398:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520: )",
          "521: @option_dry_run",
          "522: @option_github_repository",
          "523: @option_include_removed_providers",
          "524: @argument_provider_packages",
          "525: @option_verbose",
          "526: def prepare_provider_packages(",
          "527:     clean_dist: bool,",
          "528:     github_repository: str,",
          "529:     include_removed_providers: bool,",
          "530:     package_format: str,",
          "531:     package_list_file: IO | None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528: @option_include_not_ready_providers",
          "535:     include_not_ready_providers: bool,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "538:     fix_ownership_using_docker()",
          "539:     cleanup_python_generated_files()",
          "540:     packages_list = get_packages_list_to_act_on(",
          "542:     )",
          "543:     if not skip_tag_check:",
          "544:         run_command([\"git\", \"remote\", \"rm\", \"apache-https-for-providers\"], check=False, stderr=DEVNULL)",
          "",
          "[Removed Lines]",
          "541:         package_list_file, provider_packages, include_removed_providers",
          "",
          "[Added Lines]",
          "548:         package_list_file=package_list_file,",
          "549:         provider_packages=provider_packages,",
          "550:         include_removed=include_removed_providers,",
          "551:         include_not_ready=include_not_ready_providers,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1145: @option_airflow_site_directory",
          "1146: @option_debug_resources",
          "1147: @option_dry_run",
          "1148: @option_include_removed_providers",
          "1149: @option_include_success_outputs",
          "1150: @click.option(\"-s\", \"--override-versioned\", help=\"Overrides versioned directories.\", is_flag=True)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158: @option_include_not_ready_providers",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1165:     debug_resources: bool,",
          "1166:     doc_packages: tuple[str, ...],",
          "1167:     include_success_outputs: bool,",
          "1168:     include_removed_providers: bool,",
          "1169:     override_versioned: bool,",
          "1170:     package_filter: tuple[str, ...],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1179:     include_not_ready_providers: bool,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1180:         )",
          "1182:     current_packages = find_matching_long_package_names(",
          "1184:         filters=package_filter,",
          "1185:     )",
          "1186:     print(f\"Publishing docs for {len(current_packages)} package(s)\")",
          "",
          "[Removed Lines]",
          "1183:         short_packages=expand_all_provider_packages(doc_packages, include_removed=include_removed_providers),",
          "",
          "[Added Lines]",
          "1195:         short_packages=expand_all_provider_packages(",
          "1196:             short_doc_packages=doc_packages,",
          "1197:             include_removed=include_removed_providers,",
          "1198:             include_not_ready=include_not_ready_providers,",
          "1199:         ),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1209:     help=\"Command to add back references for documentation to make it backward compatible.\",",
          "1210: )",
          "1211: @option_airflow_site_directory",
          "1212: @option_include_removed_providers",
          "1213: @argument_doc_packages",
          "1214: @option_dry_run",
          "1215: @option_verbose",
          "1216: def add_back_references(",
          "1217:     airflow_site_directory: str,",
          "1218:     include_removed_providers: bool,",
          "1219:     doc_packages: tuple[str, ...],",
          "1220: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1228: @option_include_not_ready_providers",
          "1235:     include_not_ready_providers: bool,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1232:         )",
          "1233:         sys.exit(1)",
          "1234:     start_generating_back_references(",
          "1236:     )",
          "",
          "[Removed Lines]",
          "1235:         site_path, list(expand_all_provider_packages(doc_packages, include_removed=include_removed_providers))",
          "",
          "[Added Lines]",
          "1253:         site_path,",
          "1254:         list(",
          "1255:             expand_all_provider_packages(",
          "1256:                 short_doc_packages=doc_packages,",
          "1257:                 include_removed=include_removed_providers,",
          "1258:                 include_not_ready=include_not_ready_providers,",
          "1259:             )",
          "1260:         ),",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py||dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py": [
          "File: dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py -> dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:             \"options\": [",
          "133:                 \"--clean-dist\",",
          "134:                 \"--github-repository\",",
          "135:                 \"--include-removed-providers\",",
          "136:                 \"--package-format\",",
          "137:                 \"--package-list-file\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:                 \"--include-not-ready-providers\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:             \"options\": [",
          "148:                 \"--base-branch\",",
          "149:                 \"--github-repository\",",
          "150:                 \"--include-removed-providers\",",
          "151:                 \"--non-interactive\",",
          "152:                 \"--only-min-version-update\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:                 \"--include-not-ready-providers\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:             \"name\": \"Publish Docs\",",
          "198:             \"options\": [",
          "199:                 \"--airflow-site-directory\",",
          "200:                 \"--include-removed-providers\",",
          "201:                 \"--override-versioned\",",
          "202:                 \"--package-filter\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:                 \"--include-not-ready-providers\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "218:             \"name\": \"Add Back References to Docs\",",
          "219:             \"options\": [",
          "220:                 \"--airflow-site-directory\",",
          "221:                 \"--include-removed-providers\",",
          "222:             ],",
          "223:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:                 \"--include-not-ready-providers\",",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py||dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py": [
          "File: dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py -> dev/breeze/src/airflow_breeze/prepare_providers/provider_packages.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import sys",
          "23: from pathlib import Path",
          "24: from shutil import copytree, rmtree",
          "27: from airflow_breeze.utils.console import get_console",
          "28: from airflow_breeze.utils.packages import (",
          "29:     get_available_packages,",
          "30:     get_latest_provider_tag,",
          "31:     get_provider_details,",
          "32:     get_provider_jinja_context,",
          "33:     get_removed_provider_ids,",
          "",
          "[Removed Lines]",
          "25: from typing import IO, Any",
          "",
          "[Added Lines]",
          "25: from typing import Any, TextIO",
          "31:     get_not_ready_provider_ids,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: def get_packages_list_to_act_on(",
          "232: ) -> list[str]:",
          "233:     if package_list_file and provider_packages:",
          "234:         get_console().print(",
          "",
          "[Removed Lines]",
          "231:     package_list_file: IO | None, provider_packages: tuple[str, ...], include_removed: bool = False",
          "",
          "[Added Lines]",
          "232:     package_list_file: TextIO | None,",
          "233:     provider_packages: tuple[str, ...],",
          "234:     include_not_ready: bool = False,",
          "235:     include_removed: bool = False,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:         sys.exit(1)",
          "238:     if package_list_file:",
          "239:         removed_provider_ids = get_removed_provider_ids()",
          "240:         return [",
          "241:             package.strip()",
          "242:             for package in package_list_file.readlines()",
          "244:         ]",
          "245:     elif provider_packages:",
          "246:         return list(provider_packages)",
          "",
          "[Removed Lines]",
          "243:             if package.strip() not in removed_provider_ids",
          "247:     return get_available_packages(include_removed=include_removed)",
          "",
          "[Added Lines]",
          "244:         not_ready_provider_ids = get_not_ready_provider_ids()",
          "248:             if (package.strip() not in removed_provider_ids or include_removed)",
          "249:             and (package.strip() not in not_ready_provider_ids or include_not_ready)",
          "253:     return get_available_packages(include_removed=include_removed, include_not_ready=include_not_ready)",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/packages.py||dev/breeze/src/airflow_breeze/utils/packages.py": [
          "File: dev/breeze/src/airflow_breeze/utils/packages.py -> dev/breeze/src/airflow_breeze/utils/packages.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     ]",
          "231: def get_provider_requirements(provider_id: str) -> list[str]:",
          "232:     package_metadata = get_provider_packages_metadata().get(provider_id)",
          "233:     return package_metadata[\"dependencies\"] if package_metadata else []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: @lru_cache",
          "232: def get_not_ready_provider_ids() -> list[str]:",
          "233:     return [",
          "234:         provider_id",
          "235:         for provider_id, provider_metadata in get_provider_packages_metadata().items()",
          "236:         if provider_metadata.get(\"not-ready\", False)",
          "237:     ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     include_all_providers: bool = False,",
          "240:     include_suspended: bool = False,",
          "241:     include_removed: bool = False,",
          "242: ) -> list[str]:",
          "243:     \"\"\"",
          "244:     Return provider ids for all packages that are available currently (not suspended).",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     include_not_ready: bool = False,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:     :rtype: object",
          "247:     :param include_suspended: whether the suspended packages should be included",
          "248:     :param include_removed: whether the removed packages should be included",
          "249:     :param include_non_provider_doc_packages: whether the non-provider doc packages should be included",
          "250:            (packages like apache-airflow, helm-chart, docker-stack)",
          "251:     :param include_all_providers: whether \"all-providers\" should be included ni the list.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:     :param include_not_ready: whether the not-ready ppackages should be included",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:     \"\"\"",
          "254:     provider_ids: list[str] = list(json.loads(PROVIDER_DEPENDENCIES_JSON_FILE_PATH.read_text()).keys())",
          "255:     available_packages = []",
          "256:     if include_non_provider_doc_packages:",
          "257:         available_packages.extend(REGULAR_DOC_PACKAGES)",
          "258:     if include_all_providers:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     not_ready_provider_ids = get_not_ready_provider_ids()",
          "268:     if not include_not_ready:",
          "269:         provider_ids = [",
          "270:             provider_id for provider_id in provider_ids if provider_id not in not_ready_provider_ids",
          "271:         ]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268: def expand_all_provider_packages(",
          "270: ) -> tuple[str, ...]:",
          "271:     \"\"\"In case there are \"all-providers\" in the list, expand the list with all providers.\"\"\"",
          "272:     if \"all-providers\" in short_doc_packages:",
          "273:         packages = [package for package in short_doc_packages if package != \"all-providers\"]",
          "275:         short_doc_packages = tuple(set(packages))",
          "276:     return short_doc_packages",
          "",
          "[Removed Lines]",
          "269:     short_doc_packages: tuple[str, ...], include_removed: bool = False",
          "274:         packages.extend(get_available_packages(include_removed=include_removed))",
          "",
          "[Added Lines]",
          "285:     short_doc_packages: tuple[str, ...],",
          "286:     include_removed: bool = False,",
          "287:     include_not_ready: bool = False,",
          "292:         packages.extend(",
          "293:             get_available_packages(include_removed=include_removed, include_not_ready=include_not_ready)",
          "294:         )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8eb2caad8e4567cf90656c3189f80f7c56a217d5",
      "candidate_info": {
        "commit_hash": "8eb2caad8e4567cf90656c3189f80f7c56a217d5",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8eb2caad8e4567cf90656c3189f80f7c56a217d5",
        "files": [
          "tests/test_utils/www.py",
          "tests/www/views/conftest.py",
          "tests/www/views/test_anonymous_as_admin_role.py"
        ],
        "message": "Add unit test for AUTH_ROLE_PUBLIC=Admin (#36787)\n\nSigned-off-by: BobDu <i@bobdu.cc>\n(cherry picked from commit a87953e8382e2e5d0af98368e896fe78af04da27)",
        "before_after_code_files": [
          "tests/test_utils/www.py||tests/test_utils/www.py",
          "tests/www/views/conftest.py||tests/www/views/conftest.py",
          "tests/www/views/test_anonymous_as_admin_role.py||tests/www/views/test_anonymous_as_admin_role.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_utils/www.py||tests/test_utils/www.py": [
          "File: tests/test_utils/www.py -> tests/test_utils/www.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     return client",
          "42: def check_content_in_response(text, resp, resp_code=200):",
          "43:     resp_html = resp.data.decode(\"utf-8\")",
          "44:     assert resp_code == resp.status_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: def client_without_login_as_admin(app):",
          "43:     # Anonymous users as Admin if set AUTH_ROLE_PUBLIC=Admin",
          "44:     app.config[\"AUTH_ROLE_PUBLIC\"] = \"Admin\"",
          "45:     client = app.test_client()",
          "46:     return client",
          "",
          "---------------"
        ],
        "tests/www/views/conftest.py||tests/www/views/conftest.py": [
          "File: tests/www/views/conftest.py -> tests/www/views/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from tests.test_utils.api_connexion_utils import delete_user",
          "31: from tests.test_utils.config import conf_vars",
          "32: from tests.test_utils.decorators import dont_initialize_flask_app_submodules",
          "36: @pytest.fixture(autouse=True, scope=\"module\")",
          "",
          "[Removed Lines]",
          "33: from tests.test_utils.www import client_with_login, client_without_login",
          "",
          "[Added Lines]",
          "33: from tests.test_utils.www import client_with_login, client_without_login, client_without_login_as_admin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     return client_without_login(app)",
          "133: class _TemplateWithContext(NamedTuple):",
          "134:     template: jinja2.environment.Template",
          "135:     context: dict[str, Any]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: @pytest.fixture()",
          "134: def anonymous_client_as_admin(app):",
          "135:     return client_without_login_as_admin(app)",
          "",
          "---------------"
        ],
        "tests/www/views/test_anonymous_as_admin_role.py||tests/www/views/test_anonymous_as_admin_role.py": [
          "File: tests/www/views/test_anonymous_as_admin_role.py -> tests/www/views/test_anonymous_as_admin_role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: import pytest",
          "22: from airflow.models import Pool",
          "23: from airflow.utils.session import create_session",
          "24: from tests.test_utils.www import check_content_in_response",
          "26: pytestmark = pytest.mark.db_test",
          "28: POOL = {",
          "29:     \"pool\": \"test-pool\",",
          "30:     \"slots\": 777,",
          "31:     \"description\": \"test-pool-description\",",
          "32:     \"include_deferred\": False,",
          "33: }",
          "36: @pytest.fixture(autouse=True)",
          "37: def clear_pools():",
          "38:     with create_session() as session:",
          "39:         session.query(Pool).delete()",
          "42: @pytest.fixture()",
          "43: def pool_factory(session):",
          "44:     def factory(**values):",
          "45:         pool = Pool(**{**POOL, **values})  # Passed in values override defaults.",
          "46:         session.add(pool)",
          "47:         session.commit()",
          "48:         return pool",
          "50:     return factory",
          "53: def test_delete_pool_anonymous_user_no_role(anonymous_client, pool_factory):",
          "54:     pool = pool_factory()",
          "55:     resp = anonymous_client.post(f\"pool/delete/{pool.id}\")",
          "56:     assert 302 == resp.status_code",
          "57:     assert \"/login/\" == resp.headers[\"Location\"]",
          "60: def test_delete_pool_anonymous_user_as_admin(anonymous_client_as_admin, pool_factory):",
          "61:     pool = pool_factory()",
          "62:     resp = anonymous_client_as_admin.post(f\"pool/delete/{pool.id}\", follow_redirects=True)",
          "63:     check_content_in_response(\"Deleted Row\", resp)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1dc0b2ec8401533a87c655e97fe37f04a1319a7e",
      "candidate_info": {
        "commit_hash": "1dc0b2ec8401533a87c655e97fe37f04a1319a7e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1dc0b2ec8401533a87c655e97fe37f04a1319a7e",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/www/app.py"
        ],
        "message": "Add flask config: `MAX_CONTENT_LENGTH` (#36401)\n\n(cherry picked from commit 84063e74fb2b0dd3a8308ff4170cb3e7236cf51e)",
        "before_after_code_files": [
          "airflow/www/app.py||airflow/www/app.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/app.py||airflow/www/app.py": [
          "File: airflow/www/app.py -> airflow/www/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     flask_app.config[\"PERMANENT_SESSION_LIFETIME\"] = timedelta(minutes=settings.get_session_lifetime_config())",
          "78:     webserver_config = conf.get_mandatory_value(\"webserver\", \"config_file\")",
          "79:     # Enable customizations in webserver_config.py to be applied via Flask.current_app.",
          "80:     with flask_app.app_context():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     flask_app.config[\"MAX_CONTENT_LENGTH\"] = conf.getfloat(\"webserver\", \"allowed_payload_size\") * 1024 * 1024",
          "",
          "---------------"
        ]
      }
    }
  ]
}