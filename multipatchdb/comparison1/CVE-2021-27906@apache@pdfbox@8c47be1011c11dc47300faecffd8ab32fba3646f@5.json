{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d3618c7f7de3b94bee9092d79eaed5f7939c0ac",
      "candidate_info": {
        "commit_hash": "5d3618c7f7de3b94bee9092d79eaed5f7939c0ac",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5d3618c7f7de3b94bee9092d79eaed5f7939c0ac",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ],
        "message": "PDFBOX-4892: improve speed, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888026 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:     public String toTextString()",
          "393:     {",
          "395:         InputStream input = null;",
          "396:         try",
          "397:         {",
          "398:             input = createInputStream();",
          "400:         }",
          "401:         catch (IOException e)",
          "402:         {",
          "403:             return \"\";",
          "404:         }",
          "405:         finally",
          "406:         {",
          "407:             IOUtils.closeQuietly(input);",
          "408:         }",
          "410:         return string.getString();",
          "411:     }",
          "",
          "[Removed Lines]",
          "394:         ByteArrayOutputStream out = new ByteArrayOutputStream();",
          "399:             IOUtils.copy(input, out);",
          "409:         COSString string = new COSString(out.toByteArray());",
          "",
          "[Added Lines]",
          "395:         byte[] array;",
          "399:             array = IOUtils.toByteArray(input);",
          "403:             LOG.debug(\"An exception occurred trying to get the content - returning empty string instead\", e);",
          "410:         COSString string = new COSString(array);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dbbff0356370c585220b5f1b15ac1f0ed670f18",
      "candidate_info": {
        "commit_hash": "9dbbff0356370c585220b5f1b15ac1f0ed670f18",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9dbbff0356370c585220b5f1b15ac1f0ed670f18",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java"
        ],
        "message": "PDFBOX-4892: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891660 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java||preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java -> fontbox/src/main/java/org/apache/fontbox/ttf/NamingTable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:         }",
          "203:                         NameRecord.PLATFORM_MACINTOSH,",
          "204:                         NameRecord.ENCODING_MACINTOSH_ROMAN,",
          "205:                         NameRecord.LANGUAGE_MACINTOSH_ENGLISH);",
          "207:     }",
          "",
          "[Removed Lines]",
          "201:         String nameMac =",
          "202:                 getName(nameId,",
          "206:         return nameMac;",
          "",
          "[Added Lines]",
          "201:         return getName(nameId,",
          "",
          "---------------"
        ],
        "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java||preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java -> preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.pdfbox.cos.COSArray;",
          "30: import org.apache.pdfbox.cos.COSBase;",
          "32: import org.apache.pdfbox.cos.COSInteger;",
          "33: import org.apache.pdfbox.cos.COSName;",
          "34: import org.apache.pdfbox.cos.COSNumber;",
          "",
          "[Removed Lines]",
          "31: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c5a837140fbb4ef78bb5ef9f29ad537c872c83e",
      "candidate_info": {
        "commit_hash": "5c5a837140fbb4ef78bb5ef9f29ad537c872c83e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5c5a837140fbb4ef78bb5ef9f29ad537c872c83e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java",
          "pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java"
        ],
        "message": "PDFBOX-4892: sync read/readFully code to get the same behaviour for all classes implementing the same interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886911 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java||pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java||pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java",
          "pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java||pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java||pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java -> pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.io;",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "21: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         checkClosed();",
          "244:         if (pointer >= size)",
          "245:         {",
          "247:         }",
          "248:         int bytesRead = readRemainingBytes(b, offset, length);",
          "249:         while (bytesRead < length && available() > 0)",
          "",
          "[Removed Lines]",
          "246:             return 0;",
          "",
          "[Added Lines]",
          "247:             return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:     private int readRemainingBytes(byte[] b, int offset, int length)",
          "261:     {",
          "266:         int maxLength = (int) Math.min(length, size-pointer);",
          "267:         int remainingBytes = chunkSize - currentBufferPointer;",
          "",
          "[Removed Lines]",
          "262:         if (pointer >= size)",
          "263:         {",
          "264:             return 0;",
          "265:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:     @Override",
          "501:     public byte[] readFully(int length) throws IOException",
          "502:     {",
          "506:         {",
          "510:     }",
          "",
          "[Removed Lines]",
          "503:         byte[] b = new byte[length];",
          "504:         int bytesRead = read(b);",
          "505:         while (bytesRead < length)",
          "507:             bytesRead += read(b, bytesRead, length - bytesRead);",
          "508:         }",
          "509:         return b;",
          "",
          "[Added Lines]",
          "500:         byte[] bytes = new byte[length];",
          "501:         int bytesRead = 0;",
          "502:         do",
          "504:             int count = read(bytes, bytesRead, length - bytesRead);",
          "505:             if (count < 0)",
          "506:             {",
          "507:                 throw new EOFException();",
          "508:             }",
          "509:             bytesRead += count;",
          "510:         } while (bytesRead < length);",
          "511:         return bytes;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java||pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java -> pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.io;",
          "19: import java.io.File;",
          "20: import java.io.FileOutputStream;",
          "21: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:     @Override",
          "337:     public byte[] readFully(int length) throws IOException",
          "338:     {",
          "342:         {",
          "346:     }",
          "348:     @Override",
          "",
          "[Removed Lines]",
          "339:         byte[] b = new byte[length];",
          "340:         int bytesRead = read(b);",
          "341:         while(bytesRead < length)",
          "343:             bytesRead += read(b, bytesRead, length-bytesRead);",
          "344:         }",
          "345:         return b;",
          "",
          "[Added Lines]",
          "340:         byte[] bytes = new byte[length];",
          "341:         int bytesRead = 0;",
          "342:         do",
          "344:             int count = read(bytes, bytesRead, length - bytesRead);",
          "345:             if (count < 0)",
          "346:             {",
          "347:                 throw new EOFException();",
          "348:             }",
          "349:             bytesRead += count;",
          "350:         } while (bytesRead < length);",
          "351:         return bytes;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java||pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java -> pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:     @Override",
          "376:     {",
          "380:         do",
          "381:         {",
          "383:             if (count < 0)",
          "384:             {",
          "385:                 throw new EOFException();",
          "386:             }",
          "391:     }",
          "",
          "[Removed Lines]",
          "375:     public byte[] readFully(int len) throws IOException",
          "377:         byte[] b = new byte[len];",
          "379:         int n = 0;",
          "382:             int count = read(b, n, len - n);",
          "387:             n += count;",
          "388:         } while (n < len);",
          "390:         return b;",
          "",
          "[Added Lines]",
          "375:     public byte[] readFully(int length) throws IOException",
          "377:         byte[] bytes = new byte[length];",
          "378:         int bytesRead = 0;",
          "381:             int count = read(bytes, bytesRead, length - bytesRead);",
          "386:             bytesRead += count;",
          "387:         } while (bytesRead < length);",
          "388:         return bytes;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.pdfbox.pdfparser;",
          "20: import java.io.IOException;",
          "21: import java.io.InputStream;",
          "22: import java.io.PushbackInputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     public byte[] readFully(int length) throws IOException",
          "121:     {",
          "122:         byte[] bytes = new byte[length];",
          "126:         {",
          "129:             {",
          "132:             }",
          "138:         return bytes;",
          "139:     }",
          "",
          "[Removed Lines]",
          "123:         int off = 0;",
          "124:         int len = length;",
          "125:         while (len > 0)",
          "127:             int n = this.read(bytes, off, len);",
          "128:             if (n > 0)",
          "130:                 off += n;",
          "131:                 len -= n;",
          "133:             else",
          "134:             {",
          "135:                 break;",
          "136:             }",
          "137:         }",
          "",
          "[Added Lines]",
          "124:         int bytesRead = 0;",
          "125:         do",
          "127:             int count = read(bytes, bytesRead, length - bytesRead);",
          "128:             if (count < 0)",
          "130:                 throw new EOFException();",
          "132:             bytesRead += count;",
          "133:         } while (bytesRead < length);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdfparser;",
          "19: import java.io.ByteArrayInputStream;",
          "20: import java.io.IOException;",
          "21: import org.junit.Assert;",
          "22: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         inputStreamSource.readFully(5);",
          "39:         Assert.assertEquals(5, inputStreamSource.getPosition());",
          "41:         inputStreamSource.close();",
          "42:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:         try",
          "43:         {",
          "44:             inputStreamSource.readFully(10);",
          "45:             Assert.fail(\"readFully beyond EOF should have triggered an EOFException\");",
          "46:         }",
          "47:         catch(EOFException exception)",
          "48:         {",
          "50:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdfparser;",
          "19: import java.io.ByteArrayInputStream;",
          "20: import java.io.IOException;",
          "22: import org.apache.pdfbox.io.RandomAccessBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         randomAccessSource.readFully(5);",
          "42:         Assert.assertEquals(5, randomAccessSource.getPosition());",
          "44:         randomAccessSource.close();",
          "45:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:         try",
          "46:         {",
          "47:             randomAccessSource.readFully(10);",
          "48:             Assert.fail(\"readFully beyond EOF should have triggered an EOFException\");",
          "49:         }",
          "50:         catch (EOFException exception)",
          "51:         {",
          "53:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3f9dbb123ba20fdb3651412cf623eee73f1efef",
      "candidate_info": {
        "commit_hash": "d3f9dbb123ba20fdb3651412cf623eee73f1efef",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d3f9dbb123ba20fdb3651412cf623eee73f1efef",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java",
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java"
        ],
        "message": "PDFBOX-5057: update to recent changes in twelvemonkeys decoder by Oliver Schmidtmer; closes #82\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884818 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java",
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     private final int columns;",
          "57:     private final byte[] decodedRow;",
          "63:     private final int fillOrder;",
          "64:     private final int type;",
          "66:     private int[] changesReferenceRow;",
          "67:     private int[] changesCurrentRow;",
          "68:     private int changesReferenceRowCount;",
          "69:     private int changesCurrentRowCount;",
          "82:         super(stream);",
          "84:         this.columns = columns;",
          "87:         this.type = type;",
          "89:         this.fillOrder = fillOrder;",
          "94:         switch (type) {",
          "95:             case TIFFExtension.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE:",
          "97:                 break;",
          "98:             case TIFFExtension.COMPRESSION_CCITT_T4:",
          "99:                 optionG32D = (options & TIFFExtension.GROUP3OPT_2DENCODING) != 0;",
          "100:                 optionG3Fill = (options & TIFFExtension.GROUP3OPT_FILLBITS) != 0;",
          "101:                 optionUncompressed = (options & TIFFExtension.GROUP3OPT_UNCOMPRESSED) != 0;",
          "103:                 break;",
          "104:             case TIFFExtension.COMPRESSION_CCITT_T6:",
          "105:                 optionUncompressed = (options & TIFFExtension.GROUP4OPT_UNCOMPRESSED) != 0;",
          "107:                 break;",
          "108:             default:",
          "110:         }",
          "112:     }",
          "114:     private void fetch() throws IOException {",
          "115:         if (decodedPos >= decodedLength) {",
          "116:             decodedLength = 0;",
          "",
          "[Removed Lines]",
          "59:     private int decodedLength;",
          "60:     private int decodedPos;",
          "70:     private int lastChangingElement = 0;",
          "72:     private boolean optionG32D = false;",
          "74:     @SuppressWarnings(\"unused\") // Leading zeros for aligning EOL",
          "75:     private boolean optionG3Fill = false;",
          "77:     private boolean optionUncompressed = false;",
          "78:     private boolean optionByteAligned = false;",
          "80:     CCITTFaxDecoderStream(final InputStream stream, final int columns, final int type, final int fillOrder,",
          "81:                                  final long options) {",
          "86:         this.decodedRow = new byte[(columns + 7) / 8];",
          "91:         this.changesReferenceRow = new int[columns + 2];",
          "92:         this.changesCurrentRow = new int[columns + 2];",
          "96:                 optionByteAligned = (options & TIFFExtension.GROUP3OPT_BYTEALIGNED) != 0;",
          "102:                 optionByteAligned = (options & TIFFExtension.GROUP3OPT_BYTEALIGNED) != 0;",
          "106:                 optionByteAligned = (options & TIFFExtension.GROUP4OPT_BYTEALIGNED) != 0;",
          "109:                 break;",
          "",
          "[Added Lines]",
          "59:     private final boolean optionG32D;",
          "61:     private final boolean optionG3Fill;",
          "62:     private final boolean optionUncompressed;",
          "63:     private final boolean optionByteAligned;",
          "69:     private int decodedLength;",
          "70:     private int decodedPos;",
          "77:     private int lastChangingElement = 0;",
          "93:     public CCITTFaxDecoderStream(final InputStream stream, final int columns, final int type, final int fillOrder,",
          "94:                                  final long options, final boolean byteAligned) {",
          "102:         decodedRow = new byte[(columns + 7) / 8];",
          "103:         changesReferenceRow = new int[columns + 2];",
          "104:         changesCurrentRow = new int[columns + 2];",
          "108:                 optionByteAligned = byteAligned;",
          "109:                 optionG32D = false;",
          "110:                 optionG3Fill = false;",
          "111:                 optionUncompressed = false;",
          "114:                 optionByteAligned = byteAligned;",
          "120:                 optionByteAligned = byteAligned;",
          "121:                 optionG32D = false;",
          "122:                 optionG3Fill = false;",
          "126:                 throw new AssertionError();",
          "142:     public CCITTFaxDecoderStream(final InputStream stream, final int columns, final int type, final int fillOrder,",
          "143:                                  final long options) {",
          "144:         this(stream, columns, type, fillOrder, options, type == TIFFExtension.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE);",
          "145:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:             else {",
          "148:                 completeRun = decodeRun(blackRunTree);",
          "149:             }",
          "156:             index += completeRun;",
          "157:             changesCurrentRow[changesCurrentRowCount++] = index;",
          "",
          "[Removed Lines]",
          "151:             if (completeRun == VALUE_EOL)",
          "152:             {",
          "153:                 continue;",
          "154:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:     }",
          "253:     private void decodeRowType2() throws IOException {",
          "256:             resetBuffer();",
          "257:         }",
          "258:         decode1D();",
          "259:     }",
          "261:     private void decodeRowType4() throws IOException {",
          "263:             resetBuffer();",
          "264:         }",
          "265:         eof: while (true) {",
          "",
          "[Removed Lines]",
          "254:         if (optionByteAligned)",
          "255:         {",
          "262:         if(optionByteAligned) {",
          "",
          "[Added Lines]",
          "282:         if (optionByteAligned) {",
          "289:         if (optionByteAligned) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288:     }",
          "290:     private void decodeRowType6() throws IOException {",
          "292:             resetBuffer();",
          "293:         }",
          "294:         decode2D();",
          "",
          "[Removed Lines]",
          "291:         if(optionByteAligned) {",
          "",
          "[Added Lines]",
          "318:         if (optionByteAligned) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "305:             case TIFFExtension.COMPRESSION_CCITT_T6:",
          "306:                 decodeRowType6();",
          "307:                 break;",
          "310:         }",
          "312:         int index = 0;",
          "313:         boolean white = true;",
          "317:             int nextChange = columns;",
          "319:             if (i != changesCurrentRowCount) {",
          "",
          "[Removed Lines]",
          "308:             default:",
          "309:                 break;",
          "315:             lastChangingElement = 0;",
          "316:             for (int i = 0; i <= changesCurrentRowCount; i++) {",
          "",
          "[Added Lines]",
          "340:         lastChangingElement = 0;",
          "341:         for (int i = 0; i <= changesCurrentRowCount; i++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "361:         decodedLength = (index + 7) / 8;",
          "362:     }",
          "365:         int total = 0;",
          "367:         Node n = tree.root;",
          "",
          "[Removed Lines]",
          "364:     private int decodeRun(final Tree tree) throws IOException {",
          "",
          "[Added Lines]",
          "389:     private int decodeRun(final Tree tree) throws IOException {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "377:             if (n.isLeaf) {",
          "378:                 total += n.value;",
          "380:                     return total;",
          "381:                 }",
          "382:                 else {",
          "384:                 }",
          "385:             }",
          "386:         }",
          "387:     }",
          "391:         bufferPos = -1;",
          "392:     }",
          "",
          "[Removed Lines]",
          "379:                 if (n.value < 64) {",
          "383:                     n = tree.root;",
          "389:     private void resetBuffer()",
          "390:     {",
          "",
          "[Added Lines]",
          "404:                 if (n.value >= 64) {",
          "405:                     n = tree.root;",
          "406:                 }",
          "407:                 else if (n.value >= 0) {",
          "411:                     return columns;",
          "417:     private void resetBuffer() {",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "21: import java.io.OutputStream;",
          "22: import org.apache.pdfbox.cos.COSDictionary;",
          "23: import org.apache.pdfbox.cos.COSName;",
          "24: import org.apache.pdfbox.io.IOUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.io.PushbackInputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:         byte[] decompressed = new byte[arraySize];",
          "64:         CCITTFaxDecoderStream s;",
          "65:         int type;",
          "67:         if (k == 0)",
          "68:         {",
          "71:         }",
          "72:         else",
          "73:         {",
          "86:         }",
          "88:         readFromDecoderStream(s, decompressed);",
          "",
          "[Removed Lines]",
          "66:         long tiffOptions;",
          "69:             tiffOptions = encodedByteAlign ? TIFFExtension.GROUP3OPT_BYTEALIGNED : 0;",
          "70:             type = TIFFExtension.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE;",
          "74:             if (k > 0)",
          "75:             {",
          "76:                 tiffOptions = encodedByteAlign ? TIFFExtension.GROUP3OPT_BYTEALIGNED : 0;",
          "77:                 tiffOptions |= TIFFExtension.GROUP3OPT_2DENCODING;",
          "78:                 type = TIFFExtension.COMPRESSION_CCITT_T4;",
          "79:             }",
          "80:             else",
          "81:             {",
          "83:                 tiffOptions = encodedByteAlign ? TIFFExtension.GROUP4OPT_BYTEALIGNED : 0;",
          "84:                 type = TIFFExtension.COMPRESSION_CCITT_T6;",
          "85:             }",
          "87:         s = new CCITTFaxDecoderStream(encoded, cols, type, TIFFExtension.FILL_LEFT_TO_RIGHT, tiffOptions);",
          "",
          "[Added Lines]",
          "68:         long tiffOptions = 0;",
          "71:             type = TIFFExtension.COMPRESSION_CCITT_T4; // Group 3 1D",
          "72:             byte[] streamData = new byte[20];",
          "73:             encoded.read(streamData);",
          "74:             encoded = new PushbackInputStream(encoded, streamData.length);",
          "75:             ((PushbackInputStream) encoded).unread(streamData);",
          "76:             if (streamData[0] != 0 || (streamData[1] >> 4 != 1 && streamData[1] != 1))",
          "77:             {",
          "80:                 type = TIFFExtension.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE;",
          "81:                 short b = (short) (((streamData[0] << 8) + streamData[1]) >> 4);",
          "82:                 for (int i = 12; i < 160; i++)",
          "83:                 {",
          "84:                     b = (short) ((b << 1) + ((streamData[(i / 8)] >> (7 - (i % 8))) & 0x01));",
          "85:                     if ((b & 0xFFF) == 1)",
          "86:                     {",
          "87:                         type = TIFFExtension.COMPRESSION_CCITT_T4;",
          "88:                         break;",
          "89:                     }",
          "90:                 }",
          "91:             }",
          "92:         }",
          "93:         else if (k > 0)",
          "94:         {",
          "96:             type = TIFFExtension.COMPRESSION_CCITT_T4;",
          "97:             tiffOptions = TIFFExtension.GROUP3OPT_2DENCODING;",
          "102:             type = TIFFExtension.COMPRESSION_CCITT_T6;",
          "104:         s = new CCITTFaxDecoderStream(encoded, cols, type, TIFFExtension.FILL_LEFT_TO_RIGHT, tiffOptions, encodedByteAlign);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0463b18eff2e3b6740d341fec8f4aeb48d9d23e",
      "candidate_info": {
        "commit_hash": "d0463b18eff2e3b6740d341fec8f4aeb48d9d23e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d0463b18eff2e3b6740d341fec8f4aeb48d9d23e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java"
        ],
        "message": "PDFBOX-4892: avoid ClassCastException and NullPointerException and IndexOutOfBoundsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884410 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.awt.geom.GeneralPath;",
          "20: import java.io.IOException;",
          "21: import java.io.InputStream;",
          "22: import org.apache.commons.logging.Log;",
          "23: import org.apache.commons.logging.LogFactory;",
          "24: import org.apache.fontbox.FontBoxFont;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     {",
          "150:         int firstChar = dict.getInt(COSName.FIRST_CHAR, -1);",
          "151:         int lastChar = dict.getInt(COSName.LAST_CHAR, -1);",
          "153:         {",
          "155:             return w == null ? 0 : w;",
          "156:         }",
          "157:         else",
          "",
          "[Removed Lines]",
          "152:         if (!getWidths().isEmpty() && code >= firstChar && code <= lastChar)",
          "154:             Float w = getWidths().get(code - firstChar);",
          "",
          "[Added Lines]",
          "153:         List<Float> widths = getWidths();",
          "154:         if (!widths.isEmpty() && code >= firstChar && code <= lastChar)",
          "156:             if (code - firstChar >= widths.size())",
          "157:             {",
          "158:                 return 0;",
          "159:             }",
          "160:             Float w = widths.get(code - firstChar);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:     {",
          "356:         if (charProcs == null)",
          "357:         {",
          "359:         }",
          "360:         return charProcs;",
          "361:     }",
          "",
          "[Removed Lines]",
          "358:             charProcs = (COSDictionary) dict.getDictionaryObject(COSName.CHAR_PROCS);",
          "",
          "[Added Lines]",
          "364:             charProcs = dict.getCOSDictionary(COSName.CHAR_PROCS);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:     public PDType3CharProc getCharProc(int code)",
          "370:     {",
          "371:         String name = getEncoding().getName(code);",
          "374:         {",
          "376:         }",
          "377:         return null;",
          "378:     }",
          "",
          "[Removed Lines]",
          "372:         COSBase base = getCharProcs().getDictionaryObject(COSName.getPDFName(name));",
          "373:         if (base instanceof COSStream)",
          "375:             return new PDType3CharProc(this, (COSStream) base);",
          "",
          "[Added Lines]",
          "378:         if (getCharProcs() == null)",
          "379:         {",
          "380:             return null;",
          "381:         }",
          "382:         COSStream stream = getCharProcs().getCOSStream(COSName.getPDFName(name));",
          "383:         if (stream != null)",
          "385:             return new PDType3CharProc(this, stream);",
          "",
          "---------------"
        ]
      }
    }
  ]
}