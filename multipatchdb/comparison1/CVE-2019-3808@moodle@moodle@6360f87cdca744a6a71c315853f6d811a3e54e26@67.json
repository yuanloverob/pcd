{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75bb4372ca9878ad5226b91c5421177026334217",
      "candidate_info": {
        "commit_hash": "75bb4372ca9878ad5226b91c5421177026334217",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/75bb4372ca9878ad5226b91c5421177026334217",
        "files": [
          "lib/classes/hub/registration.php",
          "lib/db/upgrade.php",
          "lib/db/upgradelib.php",
          "lib/tests/upgradelib_test.php",
          "version.php"
        ],
        "message": "MDL-66118 hub: Stop using the hub URL as the setting name suffix\n\nSite indicators shared with the registration hub used to have the hub\nURL in the relevant setting names - such as site_name_httpsmoodlenet.\nThis upgrade step converts all such settings and drops the URL suffix\nbecause we do not support alternative hubs any more.\n\nAdditionally the upgrade step renames the official hub and updates its\nURL so that existing registrations with https://moodle.net are still\nvalid.",
        "before_after_code_files": [
          "lib/classes/hub/registration.php||lib/classes/hub/registration.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/db/upgradelib.php||lib/db/upgradelib.php",
          "lib/tests/upgradelib_test.php||lib/tests/upgradelib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/classes/hub/registration.php||lib/classes/hub/registration.php": [
          "File: lib/classes/hub/registration.php -> lib/classes/hub/registration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         require_once($CFG->dirroot . \"/course/lib.php\");",
          "160:         $siteinfo = array();",
          "162:         foreach (self::FORM_FIELDS as $field) {",
          "164:             if ($siteinfo[$field] === false) {",
          "165:                 $siteinfo[$field] = array_key_exists($field, $defaults) ? $defaults[$field] : null;",
          "166:             }",
          "",
          "[Removed Lines]",
          "161:         $cleanhuburl = clean_param(HUB_MOODLEORGHUBURL, PARAM_ALPHANUMEXT);",
          "163:             $siteinfo[$field] = get_config('hub', 'site_'.$field.'_' . $cleanhuburl);",
          "",
          "[Added Lines]",
          "162:             $siteinfo[$field] = get_config('hub', 'site_'.$field);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:     public static function save_site_info($formdata) {",
          "268:         foreach (self::FORM_FIELDS as $field) {",
          "270:         }",
          "274:     }",
          "",
          "[Removed Lines]",
          "267:         $cleanhuburl = clean_param(HUB_MOODLEORGHUBURL, PARAM_ALPHANUMEXT);",
          "269:             set_config('site_' . $field . '_' . $cleanhuburl, $formdata->$field, 'hub');",
          "273:         set_config('site_regupdateversion_' . $cleanhuburl, max(array_keys(self::CONFIRM_NEW_FIELDS)), 'hub');",
          "",
          "[Added Lines]",
          "267:             set_config('site_' . $field, $formdata->$field, 'hub');",
          "271:         set_config('site_regupdateversion', max(array_keys(self::CONFIRM_NEW_FIELDS)), 'hub');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "537:             return $fieldsneedconfirm;",
          "538:         }",
          "542:         foreach (self::CONFIRM_NEW_FIELDS as $version => $fields) {",
          "543:             if ($version > $lastupdated) {",
          "544:                 $fieldsneedconfirm = array_merge($fieldsneedconfirm, $fields);",
          "",
          "[Removed Lines]",
          "540:         $cleanhuburl = clean_param(HUB_MOODLEORGHUBURL, PARAM_ALPHANUMEXT);",
          "541:         $lastupdated = (int)get_config('hub', 'site_regupdateversion_' . $cleanhuburl);",
          "",
          "[Added Lines]",
          "538:         $lastupdated = (int)get_config('hub', 'site_regupdateversion');",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3428:         upgrade_main_savepoint(true, 2019052002.01);",
          "3429:     }",
          "3431:     return true;",
          "3432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3431:     if ($oldversion < 2019052002.07) {",
          "3433:         $DB->execute(\"UPDATE {registration_hubs}",
          "3434:                          SET hubname = ?, huburl = ?",
          "3435:                        WHERE huburl = ?\", ['moodle', 'https://stats.moodle.org', 'https://moodle.net']);",
          "3438:         $hubconfig = get_config('hub');",
          "3440:         if (!empty($hubconfig)) {",
          "3441:             foreach (upgrade_convert_hub_config_site_param_names($hubconfig, 'https://moodle.net') as $name => $value) {",
          "3442:                 set_config($name, $value, 'hub');",
          "3443:             }",
          "3444:         }",
          "3446:         upgrade_main_savepoint(true, 2019052002.07);",
          "3447:     }",
          "",
          "---------------"
        ],
        "lib/db/upgradelib.php||lib/db/upgradelib.php": [
          "File: lib/db/upgradelib.php -> lib/db/upgradelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:     $DB->delete_records_list('files_reference', 'id', $deletedfileids);",
          "568: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: function upgrade_convert_hub_config_site_param_names(stdClass $hubconfig, string $huburl): stdClass {",
          "579:     $cleanhuburl = clean_param($huburl, PARAM_ALPHANUMEXT);",
          "580:     $converted = [];",
          "582:     foreach ($hubconfig as $oldname => $value) {",
          "583:         if (preg_match('/^site_([a-z]+)([A-Za-z0-9_-]*)/', $oldname, $matches)) {",
          "584:             $newname = 'site_'.$matches[1];",
          "586:             if ($oldname === $newname) {",
          "588:                 $converted[$newname] = $value;",
          "590:             } else if (!array_key_exists($newname, $converted)) {",
          "592:                 $converted[$newname] = $value;",
          "593:                 $converted[$oldname] = null;",
          "595:             } else if ($matches[2] === '_'.$cleanhuburl) {",
          "597:                 $converted[$newname] = $value;",
          "598:                 $converted[$oldname] = null;",
          "600:             } else {",
          "602:                 $converted[$oldname] = null;",
          "603:             }",
          "605:         } else {",
          "607:             $converted[$oldname] = $value;",
          "608:         }",
          "609:     }",
          "611:     return (object) $converted;",
          "612: }",
          "",
          "---------------"
        ],
        "lib/tests/upgradelib_test.php||lib/tests/upgradelib_test.php": [
          "File: lib/tests/upgradelib_test.php -> lib/tests/upgradelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1005:         $file = reset($files);",
          "1006:         $this->assertEquals($file, $newstoredfile[1]);",
          "1007:     }",
          "1008: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:     public function test_upgrade_convert_hub_config_site_param_names() {",
          "1014:         $config = (object) [",
          "1016:             'site_name_httpsmoodlenet' => 'Foo Site',",
          "1017:             'site_language_httpsmoodlenet' => 'en',",
          "1018:             'site_emailalert_httpsmoodlenet' => 1,",
          "1020:             'site_name_httphubmoodleorg' => 'Bar Site',",
          "1021:             'site_description_httphubmoodleorg' => 'Old description',",
          "1023:             'site_emailalert' => 0,",
          "1025:             'custom' => 'Do not touch this',",
          "1027:             'site_foo_httpfirsthuborg' => 'First',",
          "1028:             'site_foo_httpanotherhubcom' => 'Another',",
          "1029:             'site_foo_httpyetanotherhubcom' => 'Yet another',",
          "1031:             'site_bar_httpfirsthuborg' => 'First',",
          "1032:             'site_bar_httpanotherhubcom' => 'Another',",
          "1033:             'site_bar_httpsmoodlenet' => 'One hub to rule them all!',",
          "1034:             'site_bar_httpyetanotherhubcom' => 'Yet another',",
          "1035:         ];",
          "1037:         $converted = upgrade_convert_hub_config_site_param_names($config, 'https://moodle.net');",
          "1040:         $this->assertSame($converted->site_name, 'Foo Site');",
          "1041:         $this->assertSame($converted->site_bar, 'One hub to rule them all!');",
          "1042:         $this->assertNull($converted->site_name_httpsmoodlenet);",
          "1043:         $this->assertNull($converted->site_bar_httpfirsthuborg);",
          "1044:         $this->assertNull($converted->site_bar_httpanotherhubcom);",
          "1045:         $this->assertNull($converted->site_bar_httpyetanotherhubcom);",
          "1047:         $this->assertSame($converted->site_foo, 'First');",
          "1048:         $this->assertNull($converted->site_foo_httpfirsthuborg);",
          "1049:         $this->assertNull($converted->site_foo_httpanotherhubcom);",
          "1050:         $this->assertNull($converted->site_foo_httpyetanotherhubcom);",
          "1052:         $this->assertSame($converted->site_emailalert, 0);",
          "1054:         $this->assertSame($converted->custom, 'Do not touch this');",
          "1055:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.06;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.07;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff3c8c0e6c1334a895d5c6aed9bd396ed3352689",
      "candidate_info": {
        "commit_hash": "ff3c8c0e6c1334a895d5c6aed9bd396ed3352689",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ff3c8c0e6c1334a895d5c6aed9bd396ed3352689",
        "files": [
          "blog/classes/external/post_exporter.php",
          "blog/tests/external_test.php",
          "blog/upgrade.txt",
          "course/externallib.php",
          "course/upgrade.txt",
          "lib/db/services.php",
          "mod/book/lib.php",
          "mod/book/tests/lib_test.php",
          "mod/book/upgrade.txt",
          "mod/data/classes/external/record_exporter.php",
          "mod/data/tests/externallib_test.php",
          "mod/data/upgrade.txt",
          "mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php",
          "mod/forum/upgrade.txt",
          "mod/glossary/classes/external.php",
          "mod/glossary/tests/external_test.php",
          "mod/glossary/upgrade.txt",
          "mod/wiki/classes/external.php",
          "mod/wiki/tests/externallib_test.php",
          "mod/wiki/upgrade.txt",
          "tag/classes/external.php",
          "tag/classes/external/tag_area_exporter.php",
          "tag/classes/external/tag_collection_exporter.php",
          "tag/classes/external/tag_item_exporter.php",
          "tag/classes/external/util.php",
          "tag/tests/external_test.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-64656-master' of git://github.com/jleyva/moodle",
        "before_after_code_files": [
          "blog/classes/external/post_exporter.php||blog/classes/external/post_exporter.php",
          "blog/tests/external_test.php||blog/tests/external_test.php",
          "course/externallib.php||course/externallib.php",
          "lib/db/services.php||lib/db/services.php",
          "mod/book/lib.php||mod/book/lib.php",
          "mod/book/tests/lib_test.php||mod/book/tests/lib_test.php",
          "mod/data/classes/external/record_exporter.php||mod/data/classes/external/record_exporter.php",
          "mod/data/tests/externallib_test.php||mod/data/tests/externallib_test.php",
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php",
          "mod/glossary/classes/external.php||mod/glossary/classes/external.php",
          "mod/glossary/tests/external_test.php||mod/glossary/tests/external_test.php",
          "mod/wiki/classes/external.php||mod/wiki/classes/external.php",
          "mod/wiki/tests/externallib_test.php||mod/wiki/tests/externallib_test.php",
          "tag/classes/external.php||tag/classes/external.php",
          "tag/classes/external/tag_area_exporter.php||tag/classes/external/tag_area_exporter.php",
          "tag/classes/external/tag_collection_exporter.php||tag/classes/external/tag_collection_exporter.php",
          "tag/classes/external/tag_item_exporter.php||tag/classes/external/tag_item_exporter.php",
          "tag/classes/external/util.php||tag/classes/external/util.php",
          "tag/tests/external_test.php||tag/tests/external_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "blog/classes/external/post_exporter.php||blog/classes/external/post_exporter.php": [
          "File: blog/classes/external/post_exporter.php -> blog/classes/external/post_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: use external_files;",
          "30: use renderer_base;",
          "31: use context_system;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: use core_tag\\external\\tag_item_exporter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:                 'multiple' => true,",
          "172:                 'optional' => true",
          "173:             ),",
          "174:         );",
          "175:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:             'tags' => array(",
          "176:                 'type' => tag_item_exporter::read_properties_definition(),",
          "177:                 'description' => 'Tags.',",
          "178:                 'multiple' => true,",
          "179:                 'optional' => true,",
          "180:             ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:         $values['summaryfiles'] = external_util::get_area_files($context->id, 'blog', 'post', $this->data->id);",
          "181:         $values['attachmentfiles'] = external_util::get_area_files($context->id, 'blog', 'attachment', $this->data->id);",
          "183:         return $values;",
          "184:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:         if ($this->data->module == 'blog_external') {",
          "191:             $values['tags'] = \\core_tag\\external\\util::get_item_tags('core', 'blog_external', $this->data->content);",
          "192:         } else {",
          "193:             $values['tags'] = \\core_tag\\external\\util::get_item_tags('core', 'post', $this->data->id);",
          "194:         }",
          "",
          "---------------"
        ],
        "blog/tests/external_test.php||blog/tests/external_test.php": [
          "File: blog/tests/external_test.php -> blog/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         $result = core_blog\\external::get_entries();",
          "109:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "110:         $this->assertCount(1, $result['entries']);",
          "111:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "112:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         $this->assertCount(1, $result['entries'][0]['tags']);",
          "112:         $this->assertEquals('tag1', $result['entries'][0]['tags'][0]['rawname']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:         $result = core_blog\\external::get_entries();",
          "142:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "143:         $this->assertCount(1, $result['entries']);",
          "144:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "145:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:         $this->assertCount(1, $result['entries'][0]['tags']);",
          "148:         $this->assertEquals('tag1', $result['entries'][0]['tags'][0]['rawname']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "332:         $this->assertCount(2, $result['entries']);",
          "333:         $this->assertEquals(2, $result['totalentries']);",
          "335:         $result = core_blog\\external::get_entries(array(), 0, 1);",
          "336:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:         $this->assertCount(0, $result['entries'][0]['tags']);",
          "341:         $this->assertCount(1, $result['entries'][1]['tags']);",
          "342:         $this->assertEquals('tag1', $result['entries'][1]['tags'][0]['rawname']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $this->courseid)));",
          "366:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "367:         $this->assertCount(1, $result['entries']);",
          "370:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $anothercourse->id)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:         $this->assertCount(1, $result['entries'][0]['tags']);",
          "378:         $this->assertEquals('tag1', $result['entries'][0]['tags'][0]['rawname']);",
          "",
          "---------------"
        ],
        "course/externallib.php||course/externallib.php": [
          "File: course/externallib.php -> course/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:                                                   'userid' => new external_value(PARAM_INT, 'User who added this content to moodle'),",
          "495:                                                   'author' => new external_value(PARAM_TEXT, 'Content owner'),",
          "496:                                                   'license' => new external_value(PARAM_TEXT, 'Content license'),",
          "497:                                               )",
          "498:                                           ), VALUE_DEFAULT, array()",
          "499:                                       ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:                                                   'tags' => new external_multiple_structure(",
          "498:                                                        \\core_tag\\external\\tag_item_exporter::get_read_structure(), 'Tags',",
          "499:                                                             VALUE_OPTIONAL",
          "500:                                                    ),",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1525:         'description' => 'Gets tag index page for one tag and one tag area',",
          "1526:         'type' => 'read',",
          "1527:         'ajax' => true,",
          "1528:     ),",
          "1529:     'core_tag_get_tags' => array(",
          "1530:         'classname' => 'core_tag_external',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1528:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1540:         'type' => 'write',",
          "1541:         'ajax' => true,",
          "1542:     ),",
          "1543:     'core_update_inplace_editable' => array(",
          "1544:         'classname' => 'core_external',",
          "1545:         'methodname' => 'update_inplace_editable',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1544:     'core_tag_get_tagindex_per_area' => array(",
          "1545:         'classname' => 'core_tag_external',",
          "1546:         'methodname' => 'get_tagindex_per_area',",
          "1547:         'description' => 'Gets tag index page per different areas.',",
          "1548:         'type' => 'read',",
          "1549:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1550:     ),",
          "1551:     'core_tag_get_tag_areas' => array(",
          "1552:         'classname' => 'core_tag_external',",
          "1553:         'methodname' => 'get_tag_areas',",
          "1554:         'description' => 'Retrieves existing tag areas.',",
          "1555:         'type' => 'read',",
          "1556:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1557:     ),",
          "1558:     'core_tag_get_tag_collections' => array(",
          "1559:         'classname' => 'core_tag_external',",
          "1560:         'methodname' => 'get_tag_collections',",
          "1561:         'description' => 'Retrieves existing tag collections.',",
          "1562:         'type' => 'read',",
          "1563:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1564:     ),",
          "1565:     'core_tag_get_tag_cloud' => array(",
          "1566:         'classname' => 'core_tag_external',",
          "1567:         'methodname' => 'get_tag_cloud',",
          "1568:         'description' => 'Retrieves a tag cloud for the given collection and/or query search.',",
          "1569:         'type' => 'read',",
          "1570:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1571:     ),",
          "",
          "---------------"
        ],
        "mod/book/lib.php||mod/book/lib.php": [
          "File: mod/book/lib.php -> mod/book/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         $chapterindexfile['userid']       = null;",
          "612:         $chapterindexfile['author']       = null;",
          "613:         $chapterindexfile['license']      = null;",
          "614:         $contents[] = $chapterindexfile;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:         $chapterindexfile['tags']         = \\core_tag\\external\\util::get_item_tags('mod_book', 'book_chapters', $chapter->id);",
          "",
          "---------------"
        ],
        "mod/book/tests/lib_test.php||mod/book/tests/lib_test.php": [
          "File: mod/book/tests/lib_test.php -> mod/book/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     }",
          "47:     public function test_export_contents() {",
          "50:         $user = $this->getDataGenerator()->create_user();",
          "51:         $course = $this->getDataGenerator()->create_course(array('enablecomment' => 1));",
          "",
          "[Removed Lines]",
          "48:         global $DB;",
          "",
          "[Added Lines]",
          "48:         global $DB, $CFG;",
          "49:         require_once($CFG->dirroot . '/course/externallib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         $cm = get_coursemodule_from_id('book', $book->cmid);",
          "59:         $bookgenerator = $this->getDataGenerator()->get_plugin_generator('mod_book');",
          "61:         $chapter2 = $bookgenerator->create_chapter(array('bookid' => $book->id, \"pagenum\" => 2));",
          "62:         $subchapter = $bookgenerator->create_chapter(array('bookid' => $book->id, \"pagenum\" => 3, \"subchapter\" => 1));",
          "63:         $chapter3 = $bookgenerator->create_chapter(array('bookid' => $book->id, \"pagenum\" => 4, \"hidden\" => 1));",
          "",
          "[Removed Lines]",
          "60:         $chapter1 = $bookgenerator->create_chapter(array('bookid' => $book->id, \"pagenum\" => 1));",
          "",
          "[Added Lines]",
          "61:         $chapter1 = $bookgenerator->create_chapter(array('bookid' => $book->id, \"pagenum\" => 1,",
          "62:             'tags' => array('Cats', 'Dogs')));",
          "63:         $tag = core_tag_tag::get_by_name(0, 'Cats');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:         $this->assertEquals('structure', $contents[0]['filename']);",
          "72:         $this->assertEquals('index.html', $contents[1]['filename']);",
          "73:         $this->assertEquals('Chapter 1', $contents[1]['content']);",
          "74:         $this->assertEquals('index.html', $contents[2]['filename']);",
          "75:         $this->assertEquals('Chapter 2', $contents[2]['content']);",
          "76:         $this->assertEquals('index.html', $contents[3]['filename']);",
          "77:         $this->assertEquals('Chapter 3', $contents[3]['content']);",
          "80:         $emptybook = $this->getDataGenerator()->create_module('book', array('course' => $course->id));",
          "81:         $cm = get_coursemodule_from_id('book', $emptybook->cmid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         $this->assertCount(2, $contents[1]['tags']);",
          "79:         $this->assertEquals('Cats', $contents[1]['tags'][0]['rawname']);",
          "80:         $this->assertEquals($tag->id, $contents[1]['tags'][0]['id']);",
          "81:         $this->assertEquals('Dogs', $contents[1]['tags'][1]['rawname']);",
          "88:         $contents = core_course_external::get_course_contents($course->id, array());",
          "89:         $contents = external_api::clean_returnvalue(core_course_external::get_course_contents_returns(), $contents);",
          "90:         $this->assertEquals('book', $contents[0]['modules'][0]['modname']);",
          "91:         $this->assertEquals($cm->id, $contents[0]['modules'][0]['id']);",
          "92:         $this->assertCount(2, $contents[0]['modules'][0]['contents'][1]['tags']);",
          "93:         $this->assertEquals('Cats', $contents[0]['modules'][0]['contents'][1]['tags'][0]['rawname']);",
          "94:         $this->assertEquals('Dogs', $contents[0]['modules'][0]['contents'][1]['tags'][1]['rawname']);",
          "",
          "---------------"
        ],
        "mod/data/classes/external/record_exporter.php||mod/data/classes/external/record_exporter.php": [
          "File: mod/data/classes/external/record_exporter.php -> mod/data/classes/external/record_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: use core\\external\\exporter;",
          "28: use renderer_base;",
          "29: use core_user;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use core_tag\\external\\tag_item_exporter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:                 'multiple' => true,",
          "103:                 'optional' => true,",
          "104:             ),",
          "105:         );",
          "106:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:             'tags' => array(",
          "107:                 'type' => tag_item_exporter::read_properties_definition(),",
          "108:                 'description' => 'Tags.',",
          "109:                 'multiple' => true,",
          "110:                 'optional' => true,",
          "111:             ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:             }",
          "129:             $values['contents'] = $contents;",
          "130:         }",
          "131:         return $values;",
          "132:     }",
          "133: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:         $values['tags'] = \\core_tag\\external\\util::get_item_tags('mod_data', 'data_records', $this->data->id);",
          "",
          "---------------"
        ],
        "mod/data/tests/externallib_test.php||mod/data/tests/externallib_test.php": [
          "File: mod/data/tests/externallib_test.php -> mod/data/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:         }",
          "414:         $this->setUser($this->student1);",
          "416:         $this->setUser($this->student2);",
          "418:         $entry13 = $generator->create_entry($this->database, $fieldcontents, $this->group1->id);",
          "420:         $entry14 = $generator->create_entry($this->database, $fieldcontents, 0);",
          "",
          "[Removed Lines]",
          "415:         $entry11 = $generator->create_entry($this->database, $fieldcontents, $this->group1->id);",
          "417:         $entry12 = $generator->create_entry($this->database, $fieldcontents, $this->group1->id);",
          "",
          "[Added Lines]",
          "415:         $entry11 = $generator->create_entry($this->database, $fieldcontents, $this->group1->id, ['Cats', 'Dogs']);",
          "417:         $entry12 = $generator->create_entry($this->database, $fieldcontents, $this->group1->id, ['Cats']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:         $this->assertCount(3, $result['entries']);",
          "448:         $this->assertEquals(3, $result['totalcount']);",
          "449:         $this->assertEquals($entry11, $result['entries'][0]['id']);",
          "450:         $this->assertEquals($this->student1->id, $result['entries'][0]['userid']);",
          "451:         $this->assertEquals($this->group1->id, $result['entries'][0]['groupid']);",
          "452:         $this->assertEquals($this->database->id, $result['entries'][0]['dataid']);",
          "453:         $this->assertEquals($entry12, $result['entries'][1]['id']);",
          "454:         $this->assertEquals($this->student2->id, $result['entries'][1]['userid']);",
          "455:         $this->assertEquals($this->group1->id, $result['entries'][1]['groupid']);",
          "456:         $this->assertEquals($this->database->id, $result['entries'][1]['dataid']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:         $this->assertCount(2, $result['entries'][0]['tags']);",
          "455:         $this->assertCount(1, $result['entries'][1]['tags']);",
          "456:         $this->assertEquals('Cats', $result['entries'][1]['tags'][0]['rawname']);",
          "",
          "---------------"
        ],
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:             if (!empty($messageinlinefiles)) {",
          "422:                 $post->messageinlinefiles = $messageinlinefiles;",
          "423:             }",
          "425:             $posts[] = $post;",
          "426:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:             $post->tags = \\core_tag\\external\\util::get_item_tags('mod_forum', 'forum_posts', $post->id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:                                 'userpictureurl' => new external_value(PARAM_URL, 'Post author picture.', VALUE_OPTIONAL),",
          "468:                                 'deleted' => new external_value(PARAM_BOOL, 'This post has been removed.'),",
          "469:                                 'isprivatereply' => new external_value(PARAM_BOOL, 'The post is a private reply'),",
          "470:                             ), 'post'",
          "471:                         )",
          "472:                     ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:                                 'tags' => new external_multiple_structure(",
          "473:                                     \\core_tag\\external\\tag_item_exporter::get_read_structure(), 'Tags', VALUE_OPTIONAL",
          "474:                                 ),",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:         $record->parent = $discussion1reply1->id;",
          "262:         $record->userid = $user3->id;",
          "263:         $discussion1reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:         $record->tags = array('Cats', 'Dogs');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311:             'userpictureurl' => '',",
          "312:             'deleted' => false,",
          "313:             'isprivatereply' => false,",
          "314:         );",
          "316:         $expectedposts['posts'][] = array(",
          "317:             'id' => $discussion1reply1->id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:             'tags' => \\core_tag\\external\\util::get_item_tags('mod_forum', 'forum_posts', $discussion1reply2->id),",
          "318:         $this->assertCount(2, $expectedposts['posts'][0]['tags']);",
          "319:         $expectedposts['posts'][0]['tags'][0]['isstandard'] = (bool) $expectedposts['posts'][0]['tags'][0]['isstandard'];",
          "320:         $expectedposts['posts'][0]['tags'][1]['isstandard'] = (bool) $expectedposts['posts'][0]['tags'][1]['isstandard'];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:             'userpictureurl' => '',",
          "349:             'deleted' => false,",
          "350:             'isprivatereply' => false,",
          "351:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:             'tags' => array(),",
          "",
          "---------------"
        ],
        "mod/glossary/classes/external.php||mod/glossary/classes/external.php": [
          "File: mod/glossary/classes/external.php -> mod/glossary/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:             'casesensitive' => new external_value(PARAM_BOOL, 'When true, the matching is case sensitive'),",
          "102:             'fullmatch' => new external_value(PARAM_BOOL, 'When true, the matching is done on full words only'),",
          "103:             'approved' => new external_value(PARAM_BOOL, 'Whether the entry was approved'),",
          "104:         );",
          "106:         if ($includecat) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:             'tags' => new external_multiple_structure(",
          "105:                 \\core_tag\\external\\tag_item_exporter::get_read_structure(), 'Tags', VALUE_OPTIONAL",
          "106:             ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         if (!empty($definitioninlinefiles)) {",
          "150:             $entry->definitioninlinefiles = $definitioninlinefiles;",
          "151:         }",
          "152:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:         $entry->tags = \\core_tag\\external\\util::get_item_tags('mod_glossary', 'glossary_entries', $entry->id);",
          "",
          "---------------"
        ],
        "mod/glossary/tests/external_test.php||mod/glossary/tests/external_test.php": [
          "File: mod/glossary/tests/external_test.php -> mod/glossary/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:         $ctx = context_module::instance($g1->cmid);",
          "204:         $this->getDataGenerator()->enrol_user($u1->id, $c1->id);",
          "207:         $e1b = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Jane', 'userid' => 2));",
          "208:         $e1c = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Alice', 'userid' => $u1->id));",
          "209:         $e1d = $gg->create_content($g1, array('approved' => 0, 'concept' => '0-day', 'userid' => $u1->id));",
          "",
          "[Removed Lines]",
          "206:         $e1a = $gg->create_content($g1, array('approved' => 0, 'concept' => 'Bob', 'userid' => 2));",
          "",
          "[Added Lines]",
          "206:         $e1a = $gg->create_content($g1, array('approved' => 0, 'concept' => 'Bob', 'userid' => 2, 'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:         $this->assertEquals(3, $return['count']);",
          "219:         $this->assertEquals($e1c->id, $return['entries'][0]['id']);",
          "220:         $this->assertEquals($e1a->id, $return['entries'][1]['id']);",
          "221:         $this->assertEquals($e1b->id, $return['entries'][2]['id']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:         $this->assertEquals('Cats', $return['entries'][1]['tags'][0]['rawname']);",
          "222:         $this->assertEquals('Dogs', $return['entries'][1]['tags'][1]['rawname']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312:         $now = time();",
          "313:         $e1a = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Bob', 'userid' => $u1->id,",
          "315:         $e1b = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Jane', 'userid' => $u1->id,",
          "316:             'timecreated' => $now + 3600, 'timemodified' => 1));",
          "317:         $e1c = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Alice', 'userid' => $u1->id,",
          "",
          "[Removed Lines]",
          "314:             'timecreated' => 1, 'timemodified' => $now + 3600));",
          "",
          "[Added Lines]",
          "316:             'timecreated' => 1, 'timemodified' => $now + 3600, 'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:         $this->assertCount(3, $return['entries']);",
          "329:         $this->assertEquals(3, $return['count']);",
          "330:         $this->assertEquals($e1a->id, $return['entries'][0]['id']);",
          "331:         $this->assertEquals($e1c->id, $return['entries'][1]['id']);",
          "332:         $this->assertEquals($e1b->id, $return['entries'][2]['id']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:         $this->assertEquals('Cats', $return['entries'][0]['tags'][0]['rawname']);",
          "334:         $this->assertEquals('Dogs', $return['entries'][0]['tags'][1]['rawname']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425:         $u1 = $this->getDataGenerator()->create_user();",
          "426:         $ctx = context_module::instance($g1->cmid);",
          "429:         $e1a2 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "430:         $e1a3 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "431:         $e1b1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "",
          "[Removed Lines]",
          "428:         $e1a1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "",
          "[Added Lines]",
          "432:         $e1a1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id, 'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "448:         $this->assertCount(3, $return['entries']);",
          "449:         $this->assertEquals(3, $return['count']);",
          "450:         $this->assertEquals($e1a1->id, $return['entries'][0]['id']);",
          "451:         $this->assertEquals($e1a2->id, $return['entries'][1]['id']);",
          "452:         $this->assertEquals($e1a3->id, $return['entries'][2]['id']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:         $this->assertEquals('Cats', $return['entries'][0]['tags'][0]['rawname']);",
          "456:         $this->assertEquals('Dogs', $return['entries'][0]['tags'][1]['rawname']);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "562:         $e1a2 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "563:         $e1a3 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "564:         $e1b1 = $gg->create_content($g1, array('approved' => 0, 'userid' => $u2->id));",
          "566:         $e1c1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u3->id));",
          "567:         $e1d1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u4->id));",
          "568:         $e2a = $gg->create_content($g2, array('approved' => 1, 'userid' => $u1->id));",
          "",
          "[Removed Lines]",
          "565:         $e1b2 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u2->id));",
          "",
          "[Added Lines]",
          "571:         $e1b2 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u2->id, 'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "575:         $this->assertCount(4, $return['entries']);",
          "576:         $this->assertEquals(4, $return['count']);",
          "577:         $this->assertEquals($e1b2->id, $return['entries'][0]['id']);",
          "578:         $this->assertEquals($e1a1->id, $return['entries'][1]['id']);",
          "579:         $this->assertEquals($e1a2->id, $return['entries'][2]['id']);",
          "580:         $this->assertEquals($e1a3->id, $return['entries'][3]['id']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:         $this->assertEquals('Cats', $return['entries'][0]['tags'][0]['rawname']);",
          "585:         $this->assertEquals('Dogs', $return['entries'][0]['tags'][1]['rawname']);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "781:         $e1 = $gg->create_content($g1, array('approved' => 1, 'concept' => 'House', 'timecreated' => time() + 3600));",
          "782:         $e2 = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Mouse', 'timemodified' => 1));",
          "784:         $e4 = $gg->create_content($g1, array('approved' => 0, 'concept' => 'Toulouse'));",
          "785:         $e5 = $gg->create_content($g1, array('approved' => 1, 'definition' => 'Heroes', 'concept' => 'Abcd'));",
          "786:         $e6 = $gg->create_content($g1, array('approved' => 0, 'definition' => 'When used for Heroes'));",
          "",
          "[Removed Lines]",
          "783:         $e3 = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Hero'));",
          "",
          "[Added Lines]",
          "791:         $e3 = $gg->create_content($g1, array('approved' => 1, 'concept' => 'Hero', 'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "798:         $this->assertCount(1, $return['entries']);",
          "799:         $this->assertEquals(1, $return['count']);",
          "800:         $this->assertEquals($e3->id, $return['entries'][0]['id']);",
          "803:         $query = 'hero';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809:         $this->assertEquals('Cats', $return['entries'][0]['tags'][0]['rawname']);",
          "810:         $this->assertEquals('Dogs', $return['entries'][0]['tags'][1]['rawname']);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "894:         $this->setAdminUser();",
          "897:         $e2 = $gg->create_content($g1, array('userid' => $u1->id, 'approved' => 1), array('cat', 'dog'));",
          "898:         $e3 = $gg->create_content($g1, array('userid' => $u1->id, 'approved' => 1), array('dog'));",
          "899:         $e4 = $gg->create_content($g1, array('userid' => $u1->id, 'approved' => 0, 'concept' => 'dog'));",
          "",
          "[Removed Lines]",
          "896:         $e1 = $gg->create_content($g1, array('userid' => $u1->id, 'approved' => 1, 'concept' => 'cat'));",
          "",
          "[Added Lines]",
          "906:         $e1 = $gg->create_content($g1, array('userid' => $u1->id, 'approved' => 1, 'concept' => 'cat',",
          "907:             'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "908:         $expected = array($e1->id, $e2->id);",
          "909:         $actual = array($return['entries'][0]['id'], $return['entries'][1]['id']);",
          "910:         $this->assertEquals($expected, $actual, '', 0.0, 10, true);",
          "913:         $return = mod_glossary_external::get_entries_by_term($g1->id, 'dog', 0, 20, array('includenotapproved' => false));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:         $this->assertEquals('Cats', $return['entries'][0]['tags'][0]['rawname']);",
          "923:         $this->assertEquals('Dogs', $return['entries'][0]['tags'][1]['rawname']);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1063:         $ctx = context_module::instance($g1->cmid);",
          "1064:         $this->getDataGenerator()->enrol_user($u1->id, $c1->id);",
          "1068:         $filename = 'shouldbeanimage.jpg';",
          "1069:         $filerecordinline = array(",
          "",
          "[Removed Lines]",
          "1066:         $e1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id));",
          "",
          "[Added Lines]",
          "1079:         $e1 = $gg->create_content($g1, array('approved' => 1, 'userid' => $u1->id, 'tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1085:         $return = mod_glossary_external::get_entry_by_id($e1->id);",
          "1086:         $return = external_api::clean_returnvalue(mod_glossary_external::get_entry_by_id_returns(), $return);",
          "1087:         $this->assertEquals($e1->id, $return['entry']['id']);",
          "1088:         $this->assertEquals($filename, $return['entry']['definitioninlinefiles'][0]['filename']);",
          "1090:         $return = mod_glossary_external::get_entry_by_id($e2->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:         $this->assertEquals('Cats', $return['entry']['tags'][0]['rawname']);",
          "1102:         $this->assertEquals('Dogs', $return['entry']['tags'][1]['rawname']);",
          "",
          "---------------"
        ],
        "mod/wiki/classes/external.php||mod/wiki/classes/external.php": [
          "File: mod/wiki/classes/external.php -> mod/wiki/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:                         'pageviews' => $page->pageviews,",
          "493:                         'readonly' => $page->readonly,",
          "494:                         'caneditpage' => $caneditpages,",
          "496:                     );",
          "",
          "[Removed Lines]",
          "495:                         'firstpage' => $page->id == $firstpage->id",
          "",
          "[Added Lines]",
          "495:                         'firstpage' => $page->id == $firstpage->id,",
          "496:                         'tags' => \\core_tag\\external\\util::get_item_tags('mod_wiki', 'wiki_pages', $page->id),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:                             'contentformat' => new external_format_value('cachedcontent', VALUE_OPTIONAL),",
          "556:                             'contentsize' => new external_value(PARAM_INT, 'Size of page contents in bytes (doesn\\'t include'.",
          "557:                                                                             ' size of attached files).', VALUE_OPTIONAL),",
          "558:                         ), 'Pages'",
          "559:                     )",
          "560:                 ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559:                             'tags' => new external_multiple_structure(",
          "560:                                 \\core_tag\\external\\tag_item_exporter::get_read_structure(), 'Tags', VALUE_OPTIONAL",
          "561:                             ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:         $returnedpage['groupid'] = $subwiki->groupid;",
          "624:         $returnedpage['userid'] = $subwiki->userid;",
          "625:         $returnedpage['title'] = $page->title;",
          "628:         if ($page->timerendered + WIKI_REFRESH_CACHE_TIME < time()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:         $returnedpage['tags'] = \\core_tag\\external\\util::get_item_tags('mod_wiki', 'wiki_pages', $page->id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "668:                         'contentformat' => new external_format_value('cachedcontent', VALUE_OPTIONAL),",
          "669:                         'caneditpage' => new external_value(PARAM_BOOL, 'True if user can edit the page.'),",
          "670:                         'version' => new external_value(PARAM_INT, 'Latest version of the page.', VALUE_OPTIONAL),",
          "671:                     ), 'Page'",
          "672:                 ),",
          "673:                 'warnings' => new external_warnings()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:                         'tags' => new external_multiple_structure(",
          "677:                             \\core_tag\\external\\tag_item_exporter::get_read_structure(), 'Tags', VALUE_OPTIONAL",
          "678:                         ),",
          "",
          "---------------"
        ],
        "mod/wiki/tests/externallib_test.php||mod/wiki/tests/externallib_test.php": [
          "File: mod/wiki/tests/externallib_test.php -> mod/wiki/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         $this->getDataGenerator()->enrol_user($this->teacher->id, $this->course->id, $this->teacherrole->id, 'manual');",
          "73:     }",
          "",
          "[Removed Lines]",
          "72:         $this->firstpage = $this->getDataGenerator()->get_plugin_generator('mod_wiki')->create_first_page($this->wiki);",
          "",
          "[Added Lines]",
          "72:         $this->firstpage = $this->getDataGenerator()->get_plugin_generator('mod_wiki')->create_first_page($this->wiki,",
          "73:             array('tags' => array('Cats', 'Dogs')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "616:         $expectedfirstpage['caneditpage'] = true; // No groups and students have 'mod/wiki:editpage' capability.",
          "617:         $expectedfirstpage['firstpage'] = true;",
          "618:         $expectedfirstpage['contentformat'] = 1;",
          "619:         $expectedpages[] = $expectedfirstpage;",
          "621:         $result = mod_wiki_external::get_subwiki_pages($this->wiki->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:         $expectedfirstpage['tags'] = \\core_tag\\external\\util::get_item_tags('mod_wiki', 'wiki_pages', $this->firstpage->id);",
          "622:         $expectedfirstpage['tags'][0]['isstandard'] = (bool) $expectedfirstpage['tags'][0]['isstandard'];",
          "623:         $expectedfirstpage['tags'][1]['isstandard'] = (bool) $expectedfirstpage['tags'][1]['isstandard'];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:         $expectednewpage['caneditpage'] = true; // No groups and students have 'mod/wiki:editpage' capability.",
          "641:         $expectednewpage['firstpage'] = false;",
          "642:         $expectednewpage['contentformat'] = 1;",
          "643:         array_unshift($expectedpages, $expectednewpage); // Add page to the beginning since it orders by title by default.",
          "645:         $result = mod_wiki_external::get_subwiki_pages($this->wiki->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:         $expectednewpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "692:         $expectedteacherpage['caneditpage'] = true;",
          "693:         $expectedteacherpage['firstpage'] = true;",
          "694:         $expectedteacherpage['contentformat'] = 1;",
          "695:         $expectedpages = array($expectedteacherpage);",
          "697:         $result = mod_wiki_external::get_subwiki_pages($indwiki->id, 0, $this->teacher->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701:         $expectedteacherpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "703:         $expectedstudentpage['caneditpage'] = true;",
          "704:         $expectedstudentpage['firstpage'] = true;",
          "705:         $expectedstudentpage['contentformat'] = 1;",
          "706:         $expectedpages = array($expectedstudentpage);",
          "708:         $result = mod_wiki_external::get_subwiki_pages($indwiki->id, 0, $this->student->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:         $expectedstudentpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "738:         $expectedpage['caneditpage'] = true; // User belongs to group and has 'mod/wiki:editpage' capability.",
          "739:         $expectedpage['firstpage'] = true;",
          "740:         $expectedpage['contentformat'] = 1;",
          "741:         $expectedpages = array($expectedpage);",
          "743:         $result = mod_wiki_external::get_subwiki_pages($this->wikisep->id, $this->group1->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "760:         $expectedpage['caneditpage'] = true;",
          "761:         $expectedpage['firstpage'] = true;",
          "762:         $expectedpage['contentformat'] = 1;",
          "763:         $expectedpages = array($expectedpage);",
          "765:         $result = mod_wiki_external::get_subwiki_pages($this->wikisep->id, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "772:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "783:         $expectedpage['caneditpage'] = true; // User belongs to group and has 'mod/wiki:editpage' capability.",
          "784:         $expectedpage['firstpage'] = true;",
          "785:         $expectedpage['contentformat'] = 1;",
          "786:         $expectedpages = array($expectedpage);",
          "788:         $result = mod_wiki_external::get_subwiki_pages($this->wikivis->id, $this->group1->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "794:         $expectedpage['caneditpage'] = false; // User doesn't belong to group so he can't edit the page.",
          "795:         $expectedpage['firstpage'] = true;",
          "796:         $expectedpage['contentformat'] = 1;",
          "797:         $expectedpages = array($expectedpage);",
          "799:         $result = mod_wiki_external::get_subwiki_pages($this->wikivis->id, $this->group2->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "805:         $expectedpage['caneditpage'] = false;",
          "806:         $expectedpage['firstpage'] = true;",
          "807:         $expectedpage['contentformat'] = 1;",
          "808:         $expectedpages = array($expectedpage);",
          "810:         $result = mod_wiki_external::get_subwiki_pages($this->wikivis->id, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "827:         $expectedpage['caneditpage'] = true;",
          "828:         $expectedpage['firstpage'] = true;",
          "829:         $expectedpage['contentformat'] = 1;",
          "830:         $expectedpages = array($expectedpage);",
          "832:         $result = mod_wiki_external::get_subwiki_pages($this->wikisepind->id, $this->group1->id, $this->student->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "850:         $expectedpage['caneditpage'] = false;",
          "851:         $expectedpage['firstpage'] = true;",
          "852:         $expectedpage['contentformat'] = 1;",
          "853:         $expectedpages = array($expectedpage);",
          "855:         $result = mod_wiki_external::get_subwiki_pages($this->wikisepind->id, $this->group1->id, $this->student2->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "872:         $expectedpage['caneditpage'] = true;",
          "873:         $expectedpage['firstpage'] = true;",
          "874:         $expectedpage['contentformat'] = 1;",
          "875:         $expectedpages = array($expectedpage);",
          "877:         $result = mod_wiki_external::get_subwiki_pages($this->wikivisind->id, $this->group1->id, $this->student->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "883:         $expectedpage['caneditpage'] = false;",
          "884:         $expectedpage['firstpage'] = true;",
          "885:         $expectedpage['contentformat'] = 1;",
          "886:         $expectedpages = array($expectedpage);",
          "888:         $result = mod_wiki_external::get_subwiki_pages($this->wikivisind->id, $this->group2->id, $this->teacher->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "902:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "894:         $expectedpage['caneditpage'] = false;",
          "895:         $expectedpage['firstpage'] = true;",
          "896:         $expectedpage['contentformat'] = 1;",
          "897:         $expectedpages = array($expectedpage);",
          "899:         $result = mod_wiki_external::get_subwiki_pages($this->wikivisind->id, 0, $this->teacher->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "987:             'cachedcontent' => $this->firstpage->cachedcontent,",
          "988:             'contentformat' => 1,",
          "989:             'caneditpage' => true,",
          "991:         );",
          "993:         $result = mod_wiki_external::get_page_contents($this->firstpage->id);",
          "994:         $result = external_api::clean_returnvalue(mod_wiki_external::get_page_contents_returns(), $result);",
          "",
          "[Removed Lines]",
          "990:             'version' => 1",
          "",
          "[Added Lines]",
          "1008:             'version' => 1,",
          "1009:             'tags' => \\core_tag\\external\\util::get_item_tags('mod_wiki', 'wiki_pages', $this->firstpage->id),",
          "1012:         $expectedpage['tags'][0]['isstandard'] = (bool) $expectedpage['tags'][0]['isstandard'];",
          "1013:         $expectedpage['tags'][1]['isstandard'] = (bool) $expectedpage['tags'][1]['isstandard'];",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1000:         $expectedpage['id'] = $newpage->id;",
          "1001:         $expectedpage['title'] = $newpage->title;",
          "1002:         $expectedpage['cachedcontent'] = $newpage->cachedcontent;",
          "1004:         $result = mod_wiki_external::get_page_contents($newpage->id);",
          "1005:         $result = external_api::clean_returnvalue(mod_wiki_external::get_page_contents_returns(), $result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:         $expectedpage['tags'] = array();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1028:             'cachedcontent' => $this->fpsepg1indstu->cachedcontent,",
          "1029:             'contentformat' => 1,",
          "1030:             'caneditpage' => true,",
          "1032:         );",
          "1034:         $result = mod_wiki_external::get_page_contents($this->fpsepg1indstu->id);",
          "",
          "[Removed Lines]",
          "1031:             'version' => 1",
          "",
          "[Added Lines]",
          "1054:             'version' => 1,",
          "1055:             'tags' => array(),",
          "",
          "---------------"
        ],
        "tag/classes/external.php||tag/classes/external.php": [
          "File: tag/classes/external.php -> tag/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:             ), 'tag index'",
          "336:         );",
          "337:     }",
          "338: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:     public static function get_tagindex_per_area_parameters() {",
          "347:         return new external_function_parameters(",
          "348:             array(",
          "349:                 'tagindex' => new external_single_structure(array(",
          "350:                     'id' => new external_value(PARAM_INT, 'tag id', VALUE_OPTIONAL, 0),",
          "351:                     'tag' => new external_value(PARAM_TAG, 'tag name', VALUE_OPTIONAL, ''),",
          "352:                     'tc' => new external_value(PARAM_INT, 'tag collection id', VALUE_OPTIONAL, 0),",
          "353:                     'ta' => new external_value(PARAM_INT, 'tag area id', VALUE_OPTIONAL, 0),",
          "354:                     'excl' => new external_value(PARAM_BOOL, 'exlusive mode for this tag area', VALUE_OPTIONAL, 0),",
          "355:                     'from' => new external_value(PARAM_INT, 'context id where the link was displayed', VALUE_OPTIONAL, 0),",
          "356:                     'ctx' => new external_value(PARAM_INT, 'context id where to search for items', VALUE_OPTIONAL, 0),",
          "357:                     'rec' => new external_value(PARAM_INT, 'search in the context recursive', VALUE_OPTIONAL, 1),",
          "358:                     'page' => new external_value(PARAM_INT, 'page number (0-based)', VALUE_OPTIONAL, 0),",
          "359:                 ), 'parameters')",
          "360:             )",
          "361:         );",
          "362:     }",
          "371:     public static function get_tagindex_per_area($params) {",
          "372:         global $CFG, $PAGE;",
          "374:         $tagindex = self::validate_parameters(",
          "375:             self::get_tagindex_per_area_parameters(), array('tagindex' => $params));",
          "376:         $params = $tagindex['tagindex'] + array(    // Force defaults.",
          "377:             'id' => 0,",
          "378:             'tag' => '',",
          "379:             'tc' => 0,",
          "380:             'ta' => 0,",
          "381:             'excl' => 0,",
          "382:             'from' => 0,",
          "383:             'ctx' => 0,",
          "384:             'rec' => 1,",
          "385:             'page' => 0,",
          "386:         );",
          "388:         if (empty($CFG->usetags)) {",
          "389:             throw new moodle_exception('tagsaredisabled', 'tag');",
          "390:         }",
          "392:         if (!empty($params['tag'])) {",
          "393:             if (empty($params['tc'])) {",
          "395:                 $tags = core_tag_tag::guess_by_name($params['tag'], '*');",
          "396:                 if (count($tags) > 1) {",
          "398:                     throw new moodle_exception('Tag is in more that one collection, please indicate one.');",
          "399:                 } else if (count($tags) == 1) {",
          "400:                     $tag = reset($tags);",
          "401:                 }",
          "402:             } else {",
          "403:                 if (!$tag = core_tag_tag::get_by_name($params['tc'], $params['tag'], '*')) {",
          "405:                     throw new moodle_exception('notagsfound', 'tag');",
          "406:                 }",
          "407:             }",
          "408:         } else if (!empty($params['id'])) {",
          "409:             $tag = core_tag_tag::get($params['id'], '*');",
          "410:         }",
          "412:         if (empty($tag)) {",
          "413:             throw new moodle_exception('notagsfound', 'tag');",
          "414:         }",
          "417:         $context = !empty($params['ctx']) ? context::instance_by_id($params['ctx']) : context_system::instance();",
          "418:         self::validate_context($context);",
          "420:         $tag = core_tag_tag::get_by_name($params['tc'], $tag->name, '*', MUST_EXIST);",
          "421:         $tagareas = core_tag_collection::get_areas($params['tc']);",
          "422:         $tagareaid = $params['ta'];",
          "424:          $exclusivemode = 0;",
          "426:         if ($tagareaid) {",
          "427:             $tagareas = array($tagareas[$tagareaid]);",
          "428:         }",
          "429:         if (!$tagareaid && count($tagareas) == 1) {",
          "431:             $params['excl'] = 1;",
          "432:         }",
          "434:         $renderer = $PAGE->get_renderer('core');",
          "435:         $result = array();",
          "436:         foreach ($tagareas as $ta) {",
          "437:             $tagindex = $tag->get_tag_index($ta, $params['excl'], $params['from'], $params['ctx'], $params['rec'], $params['page']);",
          "438:             if (!empty($tagindex->hascontent)) {",
          "439:                 $result[] = $tagindex->export_for_template($renderer);",
          "440:             }",
          "441:         }",
          "442:         return $result;",
          "443:     }",
          "451:     public static function get_tagindex_per_area_returns() {",
          "452:         return new external_multiple_structure(",
          "453:             self::get_tagindex_returns()",
          "454:         );",
          "455:     }",
          "463:     public static function get_tag_areas_parameters() {",
          "464:         return new external_function_parameters(array());",
          "465:     }",
          "474:     public static function get_tag_areas() {",
          "475:         global $CFG, $PAGE;",
          "477:         if (empty($CFG->usetags)) {",
          "478:             throw new moodle_exception('tagsaredisabled', 'tag');",
          "479:         }",
          "481:         $context = context_system::instance();",
          "482:         self::validate_context($context);",
          "483:         $PAGE->set_context($context); // Needed by internal APIs.",
          "484:         $output = $PAGE->get_renderer('core');",
          "486:         $areas = core_tag_area::get_areas();",
          "487:         $exportedareas = array();",
          "488:         foreach ($areas as $itemtype => $component) {",
          "489:             foreach ($component as $area) {",
          "491:                 $locked = false;",
          "492:                 if (isset($area->locked)) {",
          "493:                     $locked = $area->locked;",
          "494:                     unset($area->locked);",
          "495:                 }",
          "496:                 $exporter = new \\core_tag\\external\\tag_area_exporter($area, array('locked' => $locked));",
          "497:                 $exportedareas[] = $exporter->export($output);",
          "498:             }",
          "499:         }",
          "501:         return array(",
          "502:             'areas' => $exportedareas,",
          "503:             'warnings' => array(),",
          "504:         );",
          "505:     }",
          "513:     public static function get_tag_areas_returns() {",
          "514:         return new external_single_structure(",
          "515:             array(",
          "516:                 'areas' => new external_multiple_structure(",
          "517:                     \\core_tag\\external\\tag_area_exporter::get_read_structure()",
          "518:                 ),",
          "519:                 'warnings' => new external_warnings(),",
          "520:             )",
          "521:         );",
          "522:     }",
          "530:     public static function get_tag_collections_parameters() {",
          "531:         return new external_function_parameters(array());",
          "532:     }",
          "541:     public static function get_tag_collections() {",
          "542:         global $CFG, $PAGE;",
          "544:         if (empty($CFG->usetags)) {",
          "545:             throw new moodle_exception('tagsaredisabled', 'tag');",
          "546:         }",
          "548:         $context = context_system::instance();",
          "549:         self::validate_context($context);",
          "550:         $PAGE->set_context($context); // Needed by internal APIs.",
          "551:         $output = $PAGE->get_renderer('core');",
          "553:         $collections = core_tag_collection::get_collections();",
          "554:         $exportedcollections = array();",
          "555:         foreach ($collections as $collection) {",
          "556:             $exporter = new \\core_tag\\external\\tag_collection_exporter($collection);",
          "557:             $exportedcollections[] = $exporter->export($output);",
          "558:         }",
          "560:         return array(",
          "561:             'collections' => $exportedcollections,",
          "562:             'warnings' => array(),",
          "563:         );",
          "564:     }",
          "572:     public static function get_tag_collections_returns() {",
          "573:         return new external_single_structure(",
          "574:             array(",
          "575:                 'collections' => new external_multiple_structure(",
          "576:                     \\core_tag\\external\\tag_collection_exporter::get_read_structure()",
          "577:                 ),",
          "578:                 'warnings' => new external_warnings(),",
          "579:             )",
          "580:         );",
          "581:     }",
          "589:     public static function get_tag_cloud_parameters() {",
          "590:         return new external_function_parameters(",
          "591:             array(",
          "592:                 'tagcollid' => new external_value(PARAM_INT, 'Tag collection id.', VALUE_DEFAULT, 0),",
          "593:                 'isstandard' => new external_value(PARAM_BOOL, 'Whether to return only standard tags.', VALUE_DEFAULT, false),",
          "594:                 'limit' => new external_value(PARAM_INT, 'Maximum number of tags to retrieve.', VALUE_DEFAULT, 150),",
          "595:                 'sort' => new external_value(PARAM_ALPHA, 'Sort order for display",
          "596:                     (id, name, rawname, count, flag, isstandard, tagcollid).', VALUE_DEFAULT, 'name'),",
          "597:                 'search' => new external_value(PARAM_RAW, 'Search string.', VALUE_DEFAULT, ''),",
          "598:                 'fromctx' => new external_value(PARAM_INT, 'Context id where this tag cloud is displayed.', VALUE_DEFAULT, 0),",
          "599:                 'ctx' => new external_value(PARAM_INT, 'Only retrieve tag instances in this context.', VALUE_DEFAULT, 0),",
          "600:                 'rec' => new external_value(PARAM_INT, 'Retrieve tag instances in the $ctx context and it\\'s children.',",
          "601:                     VALUE_DEFAULT, 1),",
          "602:             )",
          "603:         );",
          "604:     }",
          "622:     public static function get_tag_cloud($tagcollid = 0, $isstandard = false, $limit = 150, $sort = 'name',",
          "623:             $search = '', $fromctx = 0, $ctx = 0, $rec = 1) {",
          "624:         global $CFG, $PAGE;",
          "626:         $params = self::validate_parameters(self::get_tag_cloud_parameters(),",
          "627:             array(",
          "628:                 'tagcollid' => $tagcollid,",
          "629:                 'isstandard' => $isstandard,",
          "630:                 'limit' => $limit,",
          "631:                 'sort' => $sort,",
          "632:                 'search' => $search,",
          "633:                 'fromctx' => $fromctx,",
          "634:                 'ctx' => $ctx,",
          "635:                 'rec' => $rec,",
          "636:             )",
          "637:         );",
          "639:         if (empty($CFG->usetags)) {",
          "640:             throw new moodle_exception('tagsaredisabled', 'tag');",
          "641:         }",
          "643:         $context = context_system::instance();",
          "644:         self::validate_context($context);",
          "645:         $PAGE->set_context($context); // Needed by internal APIs.",
          "646:         $output = $PAGE->get_renderer('core');",
          "648:         $tagcloud = core_tag_collection::get_tag_cloud($params['tagcollid'], $params['isstandard'], $params['limit'],",
          "649:             $params['sort'], $params['search'], $params['fromctx'], $params['ctx'], $params['rec']);",
          "651:         $result = $tagcloud->export_for_template($output);",
          "652:         $result->warnings = array();",
          "654:         return (array) $result;",
          "655:     }",
          "663:     public static function get_tag_cloud_returns() {",
          "664:         return new external_single_structure(",
          "665:             array(",
          "666:                 'tags' => new external_multiple_structure(",
          "667:                     new external_single_structure(",
          "668:                         array(",
          "669:                             'name' => new external_value(PARAM_TAG, 'Tag name.'),",
          "670:                             'viewurl' => new external_value(PARAM_RAW, 'URL to view the tag index.'),",
          "671:                             'flag' => new external_value(PARAM_BOOL, 'Whether the tag is flagged as inappropriate.',",
          "672:                                 VALUE_OPTIONAL),",
          "673:                             'isstandard' => new external_value(PARAM_BOOL, 'Whether is a standard tag or not.', VALUE_OPTIONAL),",
          "674:                             'count' => new external_value(PARAM_INT, 'Number of tag instances.', VALUE_OPTIONAL),",
          "675:                             'size' => new external_value(PARAM_INT, 'Proportional size to display the tag.', VALUE_OPTIONAL),",
          "676:                         ), 'Tags.'",
          "677:                     )",
          "678:                 ),",
          "679:                 'tagscount' => new external_value(PARAM_INT, 'Number of tags returned.'),",
          "680:                 'totalcount' => new external_value(PARAM_INT, 'Total count of tags.'),",
          "681:                 'warnings' => new external_warnings(),",
          "682:             )",
          "683:         );",
          "684:     }",
          "",
          "---------------"
        ],
        "tag/classes/external/tag_area_exporter.php||tag/classes/external/tag_area_exporter.php": [
          "File: tag/classes/external/tag_area_exporter.php -> tag/classes/external/tag_area_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_tag\\external;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: use core\\external\\exporter;",
          "30: use renderer_base;",
          "39: class tag_area_exporter extends exporter {",
          "46:     protected static function define_properties() {",
          "47:         return [",
          "48:             'id' => [",
          "49:                 'type' => PARAM_INT,",
          "50:                 'description' => 'Area id.',",
          "51:             ],",
          "52:             'component' => [",
          "53:                 'type' => PARAM_COMPONENT,",
          "54:                 'description' => 'Component the area is related to.',",
          "55:             ],",
          "56:             'itemtype' => [",
          "57:                 'type' => PARAM_ALPHANUMEXT,",
          "58:                 'description' => 'Type of item in the component.',",
          "59:             ],",
          "60:             'enabled' => [",
          "61:                 'type' => PARAM_BOOL,",
          "62:                 'description' => 'Whether this area is enabled.',",
          "63:                 'default' => true,",
          "64:             ],",
          "65:             'tagcollid' => [",
          "66:                 'type' => PARAM_INT,",
          "67:                 'description' => 'The tag collection this are belongs to.',",
          "68:             ],",
          "69:             'callback' => [",
          "70:                 'type' => PARAM_ALPHANUMEXT,",
          "71:                 'description' => 'Component callback for processing tags.',",
          "72:                 'null' => NULL_ALLOWED,",
          "73:             ],",
          "74:             'callbackfile' => [",
          "75:                 'type' => PARAM_RAW,",
          "76:                 'description' => 'Component callback file.',",
          "77:                 'null' => NULL_ALLOWED,",
          "78:             ],",
          "79:             'showstandard' => [",
          "80:                 'type' => PARAM_INT,",
          "81:                 'description' => 'Return whether to display only standard, only non-standard or both tags.',",
          "82:                 'default' => 0,",
          "83:             ],",
          "84:             'multiplecontexts' => [",
          "85:                 'type' => PARAM_BOOL,",
          "86:                 'description' => 'Whether the tag area allows tag instances to be created in multiple contexts. ',",
          "87:                 'default' => false,",
          "88:             ],",
          "89:         ];",
          "90:     }",
          "92:     protected static function define_related() {",
          "93:         return array(",
          "94:             'locked' => 'bool?'",
          "95:         );",
          "96:     }",
          "98:     protected static function define_other_properties() {",
          "99:         return array(",
          "100:             'locked' => [",
          "101:                 'type' => PARAM_BOOL,",
          "102:                 'description' => 'Whether the area is locked.',",
          "103:                 'null' => NULL_ALLOWED,",
          "104:                 'default' => false,",
          "105:                 'optional' => true,",
          "106:             ]",
          "107:         );",
          "108:     }",
          "110:     protected function get_other_values(renderer_base $output) {",
          "112:         $values['locked'] = $this->related['locked'] ? true : false;",
          "114:         return $values;",
          "115:     }",
          "116: }",
          "",
          "---------------"
        ],
        "tag/classes/external/tag_collection_exporter.php||tag/classes/external/tag_collection_exporter.php": [
          "File: tag/classes/external/tag_collection_exporter.php -> tag/classes/external/tag_collection_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_tag\\external;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: use core\\external\\exporter;",
          "38: class tag_collection_exporter extends exporter {",
          "45:     protected static function define_properties() {",
          "46:         return [",
          "47:             'id' => [",
          "48:                 'type' => PARAM_INT,",
          "49:                 'description' => 'Collection id.',",
          "50:             ],",
          "51:             'name' => [",
          "52:                 'type' => PARAM_NOTAGS,",
          "53:                 'description' => 'Collection name.',",
          "54:                 'null' => NULL_ALLOWED,",
          "55:             ],",
          "56:             'isdefault' => [",
          "57:                 'type' => PARAM_BOOL,",
          "58:                 'description' => 'Whether is the default collection.',",
          "59:                 'default' => false,",
          "60:             ],",
          "61:             'component' => [",
          "62:                 'type' => PARAM_COMPONENT,",
          "63:                 'description' => 'Component the collection is related to.',",
          "64:                 'null' => NULL_ALLOWED,",
          "65:             ],",
          "66:             'sortorder' => [",
          "67:                 'type' => PARAM_INT,",
          "68:                 'description' => 'Collection ordering in the list.',",
          "69:             ],",
          "70:             'searchable' => [",
          "71:                 'type' => PARAM_BOOL,",
          "72:                 'description' => 'Whether the tag collection is searchable.',",
          "73:                 'default' => true,",
          "74:             ],",
          "75:             'customurl' => [",
          "76:                 'type' => PARAM_NOTAGS,",
          "77:                 'description' => 'Custom URL for the tag page instead of /tag/index.php.',",
          "78:                 'null' => NULL_ALLOWED,",
          "79:             ],",
          "80:         ];",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "tag/classes/external/tag_item_exporter.php||tag/classes/external/tag_item_exporter.php": [
          "File: tag/classes/external/tag_item_exporter.php -> tag/classes/external/tag_item_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_tag\\external;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: use core\\external\\exporter;",
          "38: class tag_item_exporter extends exporter {",
          "45:     protected static function define_properties() {",
          "46:         return [",
          "47:             'id' => [",
          "48:                 'type' => PARAM_INT,",
          "49:                 'description' => 'Tag id.',",
          "50:             ],",
          "51:             'name' => [",
          "52:                 'type' => PARAM_TAG,",
          "53:                 'description' => 'Tag name.',",
          "54:             ],",
          "55:             'rawname' => [",
          "56:                 'type' => PARAM_RAW,",
          "57:                 'description' => 'The raw, unnormalised name for the tag as entered by users.',",
          "58:             ],",
          "59:             'isstandard' => [",
          "60:                 'type' => PARAM_BOOL,",
          "61:                 'description' => 'Whether this tag is standard.',",
          "62:                 'default' => false,",
          "63:             ],",
          "64:             'tagcollid' => [",
          "65:                 'type' => PARAM_INT,",
          "66:                 'description' => 'Tag collection id.',",
          "67:             ],",
          "68:             'taginstanceid' => [",
          "69:                 'type' => PARAM_INT,",
          "70:                 'description' => 'Tag instance id.',",
          "71:             ],",
          "72:             'taginstancecontextid' => [",
          "73:                 'type' => PARAM_INT,",
          "74:                 'description' => 'Context the tag instance belongs to.',",
          "75:             ],",
          "76:             'itemid' => [",
          "77:                 'type' => PARAM_INT,",
          "78:                 'description' => 'Id of the record tagged.',",
          "79:             ],",
          "80:             'ordering' => [",
          "81:                 'type' => PARAM_INT,",
          "82:                 'description' => 'Tag ordering.',",
          "83:             ],",
          "84:             'flag' => [",
          "85:                 'type' => PARAM_INT,",
          "86:                 'description' => 'Whether the tag is flagged as inappropriate.',",
          "87:                 'default' => 0,",
          "88:                 'null' => NULL_ALLOWED,",
          "89:             ],",
          "90:         ];",
          "91:     }",
          "92: }",
          "",
          "---------------"
        ],
        "tag/classes/external/util.php||tag/classes/external/util.php": [
          "File: tag/classes/external/util.php -> tag/classes/external/util.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_tag\\external;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: require_once($CFG->libdir . '/externallib.php');",
          "31: use core_tag\\external\\tag_item_exporter;",
          "32: use core_tag_tag;",
          "42: class util {",
          "56:     public static function get_item_tags($component, $itemtype, $itemid, $standardonly = core_tag_tag::BOTH_STANDARD_AND_NOT,",
          "57:             $tiuserid = 0) {",
          "58:         global $PAGE;",
          "60:         $output = $PAGE->get_renderer('core');",
          "62:         $tagitems = core_tag_tag::get_item_tags($component, $itemtype, $itemid, $standardonly, $tiuserid);",
          "63:         $exportedtags = [];",
          "64:         foreach ($tagitems as $tagitem) {",
          "65:             $exporter = new tag_item_exporter($tagitem->to_object());",
          "66:             $exportedtags[] = (array) $exporter->export($output);",
          "67:         }",
          "68:         return $exportedtags;",
          "69:     }",
          "70: }",
          "",
          "---------------"
        ],
        "tag/tests/external_test.php||tag/tests/external_test.php": [
          "File: tag/tests/external_test.php -> tag/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:         $this->assertEquals('Rename me again', $res['value']);",
          "182:         $this->assertEquals('Rename me again', $DB->get_field('tag', 'rawname', array('id' => $tag->id)));",
          "183:     }",
          "184: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     public function test_get_tagindex_per_area() {",
          "189:         global $USER;",
          "190:         $this->resetAfterTest(true);",
          "193:         $this->setAdminUser();",
          "194:         $context = context_user::instance($USER->id);",
          "195:         core_tag_tag::set_item_tags('core', 'user', $USER->id, $context, array('test'));",
          "197:         $this->setUser($this->getDataGenerator()->create_user());",
          "198:         $context = context_user::instance($USER->id);",
          "199:         core_tag_tag::set_item_tags('core', 'user', $USER->id, $context, array('test'));",
          "201:         $course = $this->getDataGenerator()->create_course();",
          "202:         $context = context_course::instance($course->id);",
          "203:         core_tag_tag::set_item_tags('core', 'course', $course->id, $context, array('test'));",
          "205:         $tag = core_tag_tag::get_by_name(0, 'test');",
          "208:         $result = core_tag_external::get_tagindex_per_area(array('id' => $tag->id));",
          "209:         $result = external_api::clean_returnvalue(core_tag_external::get_tagindex_per_area_returns(), $result);",
          "210:         $this->assertCount(2, $result); // Two different areas: course and user.",
          "211:         $this->assertEquals($tag->id, $result[0]['tagid']);",
          "212:         $this->assertEquals('course', $result[0]['itemtype']);",
          "213:         $this->assertEquals($tag->id, $result[1]['tagid']);",
          "214:         $this->assertEquals('user', $result[1]['itemtype']);",
          "217:         $result = core_tag_external::get_tagindex_per_area(array('tag' => 'test'));",
          "218:         $result = external_api::clean_returnvalue(core_tag_external::get_tagindex_per_area_returns(), $result);",
          "219:         $this->assertCount(2, $result); // Two different areas: course and user.",
          "220:         $this->assertEquals($tag->id, $result[0]['tagid']);",
          "221:         $this->assertEquals('course', $result[0]['itemtype']);",
          "222:         $this->assertEquals($tag->id, $result[1]['tagid']);",
          "223:         $this->assertEquals('user', $result[1]['itemtype']);",
          "226:         $result = core_tag_external::get_tagindex_per_area(array('tag' => 'test', 'ta' => $result[0]['ta']));",
          "227:         $result = external_api::clean_returnvalue(core_tag_external::get_tagindex_per_area_returns(), $result);",
          "228:         $this->assertCount(1, $result); // Just the given area.",
          "229:         $this->assertEquals($tag->id, $result[0]['tagid']);",
          "230:         $this->assertEquals('course', $result[0]['itemtype']);",
          "233:         $result = core_tag_external::get_tagindex_per_area(array('id' => $tag->id, 'tc' => 1));",
          "234:         $result = external_api::clean_returnvalue(core_tag_external::get_tagindex_per_area_returns(), $result);",
          "235:         $this->assertCount(2, $result); // Two different areas: course and user.",
          "236:     }",
          "241:     public function test_get_tag_areas() {",
          "242:         global $DB;",
          "243:         $this->resetAfterTest(true);",
          "245:         $this->setAdminUser();",
          "246:         $result = core_tag_external::get_tag_areas();",
          "247:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_areas_returns(), $result);",
          "248:         $areas = $DB->get_records('tag_area');",
          "249:         $this->assertCount(count($areas), $result['areas']);",
          "250:         foreach ($result['areas'] as $area) {",
          "251:             $this->assertEquals($areas[$area['id']]->component, $area['component']);",
          "252:             $this->assertEquals($areas[$area['id']]->itemtype, $area['itemtype']);",
          "253:         }",
          "254:     }",
          "259:     public function test_get_tag_collections() {",
          "260:         global $DB;",
          "261:         $this->resetAfterTest(true);",
          "264:         $data = (object) array('name' => 'new tag coll');",
          "265:         core_tag_collection::create($data);",
          "267:         $this->setAdminUser();",
          "268:         $result = core_tag_external::get_tag_collections();",
          "269:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_collections_returns(), $result);",
          "271:         $collections = $DB->get_records('tag_coll');",
          "272:         $this->assertCount(count($collections), $result['collections']);",
          "273:         foreach ($result['collections'] as $collection) {",
          "274:             $this->assertEquals($collections[$collection['id']]->component, $collection['component']);",
          "275:             $this->assertEquals($collections[$collection['id']]->name, $collection['name']);",
          "276:         }",
          "277:     }",
          "282:     public function test_get_tag_cloud() {",
          "283:         global $USER, $DB;",
          "284:         $this->resetAfterTest(true);",
          "287:         $this->setAdminUser();",
          "288:         $context = context_user::instance($USER->id);",
          "289:         core_tag_tag::set_item_tags('core', 'user', $USER->id, $context, array('Cats', 'Dogs'));",
          "291:         $this->setUser($this->getDataGenerator()->create_user());",
          "292:         $context = context_user::instance($USER->id);",
          "293:         core_tag_tag::set_item_tags('core', 'user', $USER->id, $context, array('Mice'));",
          "295:         $course = $this->getDataGenerator()->create_course();",
          "296:         $coursecontext = context_course::instance($course->id);",
          "297:         core_tag_tag::set_item_tags('core', 'course', $course->id, $coursecontext, array('Cats'));",
          "299:         $post = new stdClass();",
          "300:         $post->userid = $USER->id;",
          "301:         $post->content = 'test post content text';",
          "302:         $post->id = $DB->insert_record('post', $post);",
          "303:         $context = context_system::instance();",
          "304:         core_tag_tag::set_item_tags('core', 'post', $post->id, $context, array('Horses', 'Cats'));",
          "307:         $result = core_tag_external::get_tag_cloud();",
          "308:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "309:         $this->assertCount(4, $result['tags']); // Four different tags: Cats, Dogs, Mice, Horses.",
          "310:         $this->assertEquals(4, $result['tagscount']);",
          "311:         $this->assertEquals(4, $result['totalcount']);",
          "313:         foreach ($result['tags'] as $tag) {",
          "314:             if ($tag['name'] == 'Cats') {",
          "315:                 $this->assertEquals(3, $tag['count']);",
          "316:             } else {",
          "317:                 $this->assertEquals(1, $tag['count']);",
          "318:             }",
          "319:         }",
          "322:         $defaultcoll = core_tag_collection::get_default();",
          "323:         $result = core_tag_external::get_tag_cloud($defaultcoll, false, 2, 'count');",
          "324:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "325:         $this->assertCount(2, $result['tags']); // Only two tags.",
          "326:         $this->assertEquals(2, $result['tagscount']);",
          "327:         $this->assertEquals(4, $result['totalcount']);",
          "328:         $this->assertEquals('Dogs', $result['tags'][0]['name']); // Lower count first.",
          "331:         $result = core_tag_external::get_tag_cloud(0, false, 150, 'name', 'Mice');",
          "332:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "333:         $this->assertCount(1, $result['tags']); // Only the searched tags.",
          "334:         $this->assertEquals(1, $result['tagscount']);",
          "335:         $this->assertEquals(1, $result['totalcount']); // When searching, the total is always for the search.",
          "336:         $this->assertEquals('Mice', $result['tags'][0]['name']);",
          "338:         $result = core_tag_external::get_tag_cloud(0, false, 150, 'name', 'Conejo');",
          "339:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "340:         $this->assertCount(0, $result['tags']); // Nothing found.",
          "341:         $this->assertEquals(0, $result['tagscount']);",
          "342:         $this->assertEquals(0, $result['totalcount']); // When searching, the total is always for the search.",
          "345:         $micetag = core_tag_tag::get_by_name($defaultcoll, 'Mice', '*');",
          "346:         $micetag->update(array('isstandard' => 1));",
          "348:         $result = core_tag_external::get_tag_cloud(0, true);",
          "349:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "350:         $this->assertCount(1, $result['tags']);",
          "351:         $this->assertEquals(1, $result['tagscount']);",
          "352:         $this->assertEquals(1, $result['totalcount']); // When searching, the total is always for the search.",
          "353:         $this->assertEquals('Mice', $result['tags'][0]['name']);",
          "356:         $result = core_tag_external::get_tag_cloud(0, false, 150, 'name', '', 0, $coursecontext->id);",
          "357:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "358:         $this->assertCount(1, $result['tags']);",
          "359:         $this->assertEquals(1, $result['tagscount']);",
          "360:         $this->assertEquals(1, $result['totalcount']); // When searching, the total is always for the search.",
          "361:         $this->assertEquals('Cats', $result['tags'][0]['name']);",
          "364:         $result = core_tag_external::get_tag_cloud(0, false, 150, 'name', '', 0, context_system::instance()->id);",
          "365:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "366:         $this->assertCount(4, $result['tags']);",
          "367:         $this->assertEquals(4, $result['tagscount']);",
          "370:         $result = core_tag_external::get_tag_cloud(0, false, 150, 'name', '', 0, context_system::instance()->id, 0);",
          "371:         $result = external_api::clean_returnvalue(core_tag_external::get_tag_cloud_returns(), $result);",
          "372:         $this->assertCount(2, $result['tags']);",
          "373:         $this->assertEquals(2, $result['tagscount']); // Horses and Cats.",
          "374:         $this->assertEquals('Cats', $result['tags'][0]['name']);",
          "375:         $this->assertEquals('Horses', $result['tags'][1]['name']);",
          "376:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041000.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019041000.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a7451ff1b7f1f0ff84b920b1b6013e40fa8bad0",
      "candidate_info": {
        "commit_hash": "6a7451ff1b7f1f0ff84b920b1b6013e40fa8bad0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6a7451ff1b7f1f0ff84b920b1b6013e40fa8bad0",
        "files": [
          "version.php"
        ],
        "message": "Moodle release 3.7beta",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019050800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190508)'; // Human-friendly version name",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Added Lines]",
          "32: $version  = 2019051100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7beta (Build: 20190511)'; // Human-friendly version name",
          "39: $maturity = MATURITY_BETA;             // This version's maturity level.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9528b1ff5b8c8ff439d5502cfb509c5aacd306b0",
      "candidate_info": {
        "commit_hash": "9528b1ff5b8c8ff439d5502cfb509c5aacd306b0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9528b1ff5b8c8ff439d5502cfb509c5aacd306b0",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019092000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190920)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019092700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190927)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e04a73ccc06e18d8d3b3661f8f9bc16911747830",
      "candidate_info": {
        "commit_hash": "e04a73ccc06e18d8d3b3661f8f9bc16911747830",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e04a73ccc06e18d8d3b3661f8f9bc16911747830",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.8dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019103000.13;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191030)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019103100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191031)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}