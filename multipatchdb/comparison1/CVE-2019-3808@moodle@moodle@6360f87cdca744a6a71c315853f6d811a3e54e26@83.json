{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "852bf8fa58805d9eea8996f07af1b6a844a3c04c",
      "candidate_info": {
        "commit_hash": "852bf8fa58805d9eea8996f07af1b6a844a3c04c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/852bf8fa58805d9eea8996f07af1b6a844a3c04c",
        "files": [
          "competency/classes/api.php",
          "competency/classes/external.php",
          "competency/tests/api_test.php",
          "competency/tests/external_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-65078-master' of git://github.com/peterRd/moodle",
        "before_after_code_files": [
          "competency/classes/api.php||competency/classes/api.php",
          "competency/classes/external.php||competency/classes/external.php",
          "competency/tests/api_test.php||competency/tests/api_test.php",
          "competency/tests/external_test.php||competency/tests/external_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "competency/classes/api.php||competency/classes/api.php": [
          "File: competency/classes/api.php -> competency/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:         return $uc;",
          "1204:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212:     public static function count_course_module_competencies($cmorid) {",
          "1213:         static::require_enabled();",
          "1214:         $cm = $cmorid;",
          "1215:         if (!is_object($cmorid)) {",
          "1216:             $cm = get_coursemodule_from_id('', $cmorid, 0, true, MUST_EXIST);",
          "1217:         }",
          "1220:         self::validate_course_module($cm);",
          "1221:         $context = context_module::instance($cm->id);",
          "1223:         $capabilities = array('moodle/competency:coursecompetencyview', 'moodle/competency:coursecompetencymanage');",
          "1224:         if (!has_any_capability($capabilities, $context)) {",
          "1225:             throw new required_capability_exception($context, 'moodle/competency:coursecompetencyview', 'nopermissions', '');",
          "1226:         }",
          "1228:         return course_module_competency::count_competencies($cm->id);",
          "1229:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1231:         $result = array();",
          "1235:         $competencies = course_module_competency::list_competencies($cm->id);",
          "",
          "[Removed Lines]",
          "1234:         $coursemodulecompetencies = course_competency::list_course_module_competencies($cm->id);",
          "",
          "[Added Lines]",
          "1259:         $coursemodulecompetencies = course_module_competency::list_course_module_competencies($cm->id);",
          "",
          "---------------"
        ],
        "competency/classes/external.php||competency/classes/external.php": [
          "File: competency/classes/external.php -> competency/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: use context;",
          "32: use context_system;",
          "33: use context_course;",
          "34: use context_helper;",
          "35: use context_user;",
          "36: use coding_exception;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: use context_module;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: use core_competency\\external\\competency_framework_exporter;",
          "49: use core_competency\\external\\course_competency_exporter;",
          "50: use core_competency\\external\\course_competency_settings_exporter;",
          "51: use core_competency\\external\\evidence_exporter;",
          "52: use core_competency\\external\\performance_helper;",
          "53: use core_competency\\external\\plan_exporter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: use core_competency\\external\\course_module_competency_exporter;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1275:         foreach ($apiresult as $cmrecord) {",
          "1276:             $one = new \\stdClass();",
          "1278:             $one->competency = $exporter->export($output);",
          "1280:             $one->coursemodulecompetency = $exporter->export($output);",
          "1282:             $result[] = (array) $one;",
          "",
          "[Removed Lines]",
          "1277:             $exporter = new competency_exporter($cmrecord['competency']);",
          "1279:             $exporter = new course_module_competency_exporter($cmrecord['coursemodulecompetency']);",
          "",
          "[Added Lines]",
          "1279:             $exporter = new competency_exporter($cmrecord['competency'], ['context' => $context]);",
          "1281:             $exporter = new course_module_competency_exporter($cmrecord['coursemodulecompetency'], ['context' => $context]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1316:         return new external_function_parameters($params);",
          "1317:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1326:     public static function count_course_module_competencies_parameters() {",
          "1327:         $cmid = new external_value(",
          "1328:             PARAM_INT,",
          "1329:             'The course module id',",
          "1330:             VALUE_REQUIRED",
          "1331:         );",
          "1332:         $params = array(",
          "1333:             'cmid' => $cmid",
          "1334:         );",
          "1335:         return new external_function_parameters($params);",
          "1336:     }",
          "1344:     public static function count_course_module_competencies($cmid) {",
          "1345:         $params = self::validate_parameters(self::count_course_module_competencies_parameters(), array(",
          "1346:             'cmid' => $cmid",
          "1347:         ));",
          "1349:         $context = context_module::instance($params['cmid']);",
          "1350:         self::validate_context($context);",
          "1352:         return api::count_course_module_competencies($params['cmid']);",
          "1353:     }",
          "1360:     public static function count_course_module_competencies_returns() {",
          "1361:         return new external_value(PARAM_INT, 'The number of competencies found.');",
          "1362:     }",
          "",
          "---------------"
        ],
        "competency/tests/api_test.php||competency/tests/api_test.php": [
          "File: competency/tests/api_test.php -> competency/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2757:         $result = api::list_course_module_competencies_in_course_module($cm->id);",
          "2758:         $this->assertEquals($result[0]->get('competencyid'), $c->get('id'));",
          "2759:         $this->assertEquals($result[1]->get('competencyid'), $c2->get('id'));",
          "2760:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2762:         $result = api::list_course_module_competencies($cm->id);",
          "2765:         foreach ($result as $instance) {",
          "2766:             $cmc = $instance['coursemodulecompetency'];",
          "2767:             $c = $instance['competency'];",
          "2768:             $this->assertEquals($cmc->get('competencyid'), $c->get('id'));",
          "2769:         }",
          "",
          "---------------"
        ],
        "competency/tests/external_test.php||competency/tests/external_test.php": [
          "File: competency/tests/external_test.php -> competency/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2838:         $this->assertEquals($filter, $result[0]->shortname);",
          "2839:     }",
          "2841: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2846:     public function test_list_competencies_with_course_module() {",
          "2847:         $this->resetAfterTest(true);",
          "2848:         $this->setAdminUser();",
          "2849:         $dg = $this->getDataGenerator();",
          "2850:         $lpg = $this->getDataGenerator()->get_plugin_generator('core_competency');",
          "2851:         $course = $dg->create_course();",
          "2853:         $framework = $lpg->create_framework();",
          "2854:         $c1 = $lpg->create_competency(array('competencyframeworkid' => $framework->get('id')));",
          "2855:         $c2 = $lpg->create_competency(array('competencyframeworkid' => $framework->get('id')));",
          "2856:         $c3 = $lpg->create_competency(array('competencyframeworkid' => $framework->get('id')));",
          "2857:         $c4 = $lpg->create_competency(array('competencyframeworkid' => $framework->get('id')));",
          "2858:         $c5 = $lpg->create_competency(array('competencyframeworkid' => $framework->get('id')));",
          "2860:         $cc1 = api::add_competency_to_course($course->id, $c1->get('id'));",
          "2861:         $cc2 = api::add_competency_to_course($course->id, $c2->get('id'));",
          "2862:         $cc3 = api::add_competency_to_course($course->id, $c3->get('id'));",
          "2864:         $pagegenerator = $this->getDataGenerator()->get_plugin_generator('mod_page');",
          "2865:         $page = $pagegenerator->create_instance(array('course' => $course->id));",
          "2867:         $cm = get_coursemodule_from_instance('page', $page->id);",
          "2869:         $ccm1 = api::add_competency_to_course_module($cm, $c1->get('id'));",
          "2870:         $ccm2 = api::add_competency_to_course_module($cm, $c2->get('id'));",
          "2873:         $total = external::count_course_module_competencies($cm->id);",
          "2874:         $result = external::list_course_module_competencies($cm->id);",
          "2875:         $this->assertCount($total, $result);",
          "2879:         foreach ($result as $instance) {",
          "2880:             $cmc = $instance['coursemodulecompetency'];",
          "2881:             $c = $instance['competency'];",
          "2882:             $this->assertEquals($cmc->competencyid, $c->id);",
          "2883:         }",
          "2885:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1966:         'capabilities' => 'moodle/competency:competencymanage',",
          "1967:         'ajax'         => true,",
          "1968:     ),",
          "1969:     'core_competency_list_course_competencies' => array(",
          "1970:         'classname'    => 'core_competency\\external',",
          "1971:         'methodname'   => 'list_course_competencies',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1969:     'core_competency_list_course_module_competencies' => array(",
          "1970:         'classname'    => 'core_competency\\external',",
          "1971:         'methodname'   => 'list_course_module_competencies',",
          "1972:         'classpath'    => '',",
          "1973:         'description'  => 'List the competencies in a course module',",
          "1974:         'type'         => 'read',",
          "1975:         'capabilities' => 'moodle/competency:coursecompetencyview',",
          "1976:         'ajax'         => true,",
          "1977:     ),",
          "1978:     'core_competency_count_course_module_competencies' => array(",
          "1979:         'classname'    => 'core_competency\\external',",
          "1980:         'methodname'   => 'count_course_module_competencies',",
          "1981:         'classpath'    => '',",
          "1982:         'description'  => 'Count the competencies in a course module',",
          "1983:         'type'         => 'read',",
          "1984:         'capabilities' => 'moodle/competency:coursecompetencyview',",
          "1985:         'ajax'         => true,",
          "1986:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019072200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019072200.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e4178a46525c35ba38185694c2fc16b7095eef9",
      "candidate_info": {
        "commit_hash": "9e4178a46525c35ba38185694c2fc16b7095eef9",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9e4178a46525c35ba38185694c2fc16b7095eef9",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019081600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190816)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019082300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190823)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7983fb830e5418a340092a115ea35be3d41e830a",
      "candidate_info": {
        "commit_hash": "7983fb830e5418a340092a115ea35be3d41e830a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7983fb830e5418a340092a115ea35be3d41e830a",
        "files": [
          "lang/en/role.php",
          "lib/db/access.php",
          "message/classes/api.php",
          "message/tests/api_test.php",
          "version.php"
        ],
        "message": "MDL-63289 message: Bypass privacy user preferences for teachers\n\nCreated capability 'moodle/site:messageanyuser' to allow\nbypass user privacy preferences for messaging participants in a course,\neven when some of them has blocked the teacher.",
        "before_after_code_files": [
          "lang/en/role.php||lang/en/role.php",
          "lib/db/access.php||lib/db/access.php",
          "message/classes/api.php||message/classes/api.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/role.php||lang/en/role.php": [
          "File: lang/en/role.php -> lang/en/role.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "409: $string['site:maintenanceaccess'] = 'Access site while in maintenance mode';",
          "410: $string['site:manageallmessaging'] = 'Add, remove, block and unblock contacts for any user';",
          "411: $string['site:manageblocks'] = 'Manage blocks on a page';",
          "412: $string['site:mnetloginfromremote'] = 'Login from a remote application via MNet';",
          "413: $string['site:mnetlogintoremote'] = 'Roam to a remote application via MNet';",
          "414: $string['site:readallmessages'] = 'Read all messages on site';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412: $string['site:messageanyuser'] = 'Bypass user privacy preferences for messaging any user';",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2410:         'archetypes' => array(",
          "2411:         )",
          "2412:     ),",
          "2414: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2414:     'moodle/site:messageanyuser' => array(",
          "2415:         'riskbitmask' => RISK_SPAM,",
          "2416:         'captype' => 'write',",
          "2417:         'contextlevel' => CONTEXT_SYSTEM,",
          "2418:         'archetypes' => array(",
          "2419:             'teacher' => CAP_ALLOW,",
          "2420:             'editingteacher' => CAP_ALLOW,",
          "2421:             'manager' => CAP_ALLOW",
          "2422:         )",
          "2423:     ),",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:             $sender = $USER;",
          "940:         }",
          "949:             return false;",
          "950:         }",
          "959:             return true;",
          "960:         }",
          "968:     }",
          "",
          "[Removed Lines]",
          "942:         if (!has_capability('moodle/site:sendmessage', \\context_system::instance(), $sender)) {",
          "943:             return false;",
          "944:         }",
          "948:         if (self::is_user_non_contact_blocked($recipient, $sender)) {",
          "952:         $senderid = null;",
          "953:         if ($sender !== null && isset($sender->id)) {",
          "954:             $senderid = $sender->id;",
          "955:         }",
          "957:         $systemcontext = \\context_system::instance();",
          "958:         if (has_capability('moodle/site:readallmessages', $systemcontext, $senderid)) {",
          "963:         if (self::is_blocked($recipient->id, $senderid)) {",
          "964:             return false;",
          "965:         }",
          "967:         return true;",
          "",
          "[Added Lines]",
          "942:         $systemcontext = \\context_system::instance();",
          "943:         if (!has_capability('moodle/site:sendmessage', $systemcontext, $sender)) {",
          "947:         if (has_capability('moodle/site:readallmessages', $systemcontext, $sender->id)) {",
          "952:         return (self::can_contact_user($recipient, $sender));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1688:         return $DB->record_exists('message_conversation_members', ['conversationid' => $conversationid,",
          "1689:             'userid' => $userid]);",
          "1691:     }",
          "1692: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1675:     }",
          "1684:     protected static function can_contact_user(\\stdClass $recipient, \\stdClass $sender) : bool {",
          "1685:         global $CFG;",
          "1687:         if (has_capability('moodle/site:messageanyuser', \\context_system::instance(), $sender->id)) {",
          "1689:             return true;",
          "1690:         }",
          "1693:         $cancontact = null;",
          "1695:         if (self::is_blocked($recipient->id, $sender->id)) {",
          "1697:             $cancontact = false;",
          "1698:         }",
          "1700:         $sharedcourses = null;",
          "1701:         if (null === $cancontact) {",
          "1709:             $privacypreference = self::get_user_privacy_messaging_preference($recipient->id);",
          "1710:             if (self::MESSAGE_PRIVACY_SITE === $privacypreference) {",
          "1713:                 $cancontact = true;",
          "1714:             } else {",
          "1717:                 $cancontact = self::is_contact($sender->id, $recipient->id);",
          "1719:                 if (!$cancontact && self::MESSAGE_PRIVACY_COURSEMEMBER === $privacypreference) {",
          "1722:                     $sharedcourses = enrol_get_shared_courses($recipient->id, $sender->id, true);",
          "1723:                     $cancontact = (!empty($sharedcourses));",
          "1724:                 }",
          "1725:             }",
          "1726:         }",
          "1728:         if (false === $cancontact) {",
          "1734:             if (null === $sharedcourses) {",
          "1735:                 $sharedcourses = enrol_get_shared_courses($recipient->id, $sender->id, true);",
          "1736:             }",
          "1738:             foreach ($sharedcourses as $course) {",
          "1740:                 if (has_capability('moodle/site:messageanyuser', \\context_course::instance($course->id), $sender->id)) {",
          "1741:                     $cancontact = true;",
          "1742:                     break;",
          "1743:                 }",
          "1744:             }",
          "1745:         }",
          "1747:         return $cancontact;",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1356:         global $DB;",
          "",
          "[Removed Lines]",
          "1355:     public function test_can_post_message_without_cap() {",
          "",
          "[Added Lines]",
          "1355:     public function test_can_post_message_without_sendmessage_cap() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1442:         $this->setUser($user1);",
          "1447:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1450:         set_config('messagingallusers', true);",
          "1452:         $this->assertTrue(\\core_message\\api::can_post_message($user2));",
          "1453:     }",
          "",
          "[Removed Lines]",
          "1446:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_SITE, $user2->id);",
          "",
          "[Added Lines]",
          "1451:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_SITE, $user2->id);",
          "1458:         set_config('messagingallusers', false);",
          "1461:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1464:         $course = $this->getDataGenerator()->create_course();",
          "1465:         $this->getDataGenerator()->enrol_user($user1->id, $course->id);",
          "1466:         $this->getDataGenerator()->enrol_user($user2->id, $course->id);",
          "1468:         $this->assertTrue(\\core_message\\api::can_post_message($user2));",
          "1471:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $user2->id);",
          "1473:         $this->assertFalse(\\core_message\\api::can_post_message($user2));",
          "1476:         \\core_message\\api::add_contact($user2->id, $user1->id);",
          "1478:         $this->assertTrue(\\core_message\\api::can_post_message($user2));",
          "1479:     }",
          "1484:     public function test_can_post_message_with_messageanyuser_cap() {",
          "1485:         global $DB;",
          "1488:         $teacher1 = self::getDataGenerator()->create_user();",
          "1489:         $student1 = self::getDataGenerator()->create_user();",
          "1490:         $student2 = self::getDataGenerator()->create_user();",
          "1493:         $user1 = self::getDataGenerator()->create_user();",
          "1496:         $course1 = $this->getDataGenerator()->create_course();",
          "1499:         $this->getDataGenerator()->enrol_user($teacher1->id, $course1->id, 'editingteacher');",
          "1500:         $this->getDataGenerator()->enrol_user($student1->id, $course1->id, 'student');",
          "1501:         $this->getDataGenerator()->enrol_user($student2->id, $course1->id, 'student');",
          "1504:         set_user_preference('message_blocknoncontacts', \\core_message\\api::MESSAGE_PRIVACY_ONLYCONTACTS, $student1->id);",
          "1507:         $this->assertTrue(\\core_message\\api::can_post_message($student1, $teacher1));",
          "1509:         $this->assertFalse(\\core_message\\api::can_post_message($user1, $teacher1));",
          "1512:         $coursecontext = context_course::instance($course1->id);",
          "1513:         $teacherrole = $DB->get_record('role', ['shortname' => 'editingteacher']);",
          "1514:         assign_capability('moodle/site:messageanyuser', CAP_PROHIBIT, $teacherrole->id, $coursecontext->id);",
          "1515:         $coursecontext->mark_dirty();",
          "1518:         $this->assertFalse(\\core_message\\api::can_post_message($student1, $teacher1));",
          "1520:         $this->assertTrue(\\core_message\\api::can_post_message($student2, $teacher1));",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59f98779fb9ef6db5ed4a29da791cec7632c0dd2",
      "candidate_info": {
        "commit_hash": "59f98779fb9ef6db5ed4a29da791cec7632c0dd2",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/59f98779fb9ef6db5ed4a29da791cec7632c0dd2",
        "files": [
          "lang/en/role.php",
          "lib/db/access.php",
          "version.php"
        ],
        "message": "MDL-63691 core: added capability for creating group conversations",
        "before_after_code_files": [
          "lang/en/role.php||lang/en/role.php",
          "lib/db/access.php||lib/db/access.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/role.php||lang/en/role.php": [
          "File: lang/en/role.php -> lang/en/role.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: $string['course:activityvisibility'] = 'Hide/show activities';",
          "156: $string['course:bulkmessaging'] = 'Send a message to many people';",
          "157: $string['course:create'] = 'Create courses';",
          "158: $string['course:delete'] = 'Delete courses';",
          "159: $string['course:viewsuspendedusers'] = 'View suspended users';",
          "160: $string['course:changecategory'] = 'Change course category';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158: $string['course:creategroupconversations'] = 'Create group conversations';",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:         )",
          "789:     ),",
          "791:     'moodle/course:request' => array(",
          "792:         'captype' => 'write',",
          "793:         'contextlevel' => CONTEXT_SYSTEM,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:     'moodle/course:creategroupconversations' => array(",
          "792:         'riskbitmask' => RISK_XSS,",
          "793:         'captype' => 'write',",
          "794:         'contextlevel' => CONTEXT_COURSE,",
          "795:         'archetypes' => array(",
          "796:             'editingteacher' => CAP_ALLOW,",
          "797:             'manager' => CAP_ALLOW",
          "798:         )",
          "799:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101900.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101900.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da16e3e3dcfbd958f3a36576d6d8d3f660b39bd6",
      "candidate_info": {
        "commit_hash": "da16e3e3dcfbd958f3a36576d6d8d3f660b39bd6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/da16e3e3dcfbd958f3a36576d6d8d3f660b39bd6",
        "files": [
          "lang/en/message.php",
          "lib/moodlelib.php",
          "message/classes/helper.php",
          "message/classes/task/migrate_message_data.php",
          "message/index.php",
          "message/output/popup/classes/api.php",
          "message/output/popup/db/install.xml",
          "message/output/popup/db/upgrade.php",
          "message/output/popup/message_output_popup.php",
          "message/output/popup/notifications.php",
          "message/output/popup/tests/base.php",
          "message/output/popup/version.php",
          "message/tests/migrate_message_data_task_test.php",
          "message/upgrade.txt",
          "version.php"
        ],
        "message": "Merge branch 'MDL-61255_master' of git://github.com/markn86/moodle",
        "before_after_code_files": [
          "lang/en/message.php||lang/en/message.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "message/classes/helper.php||message/classes/helper.php",
          "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php",
          "message/index.php||message/index.php",
          "message/output/popup/classes/api.php||message/output/popup/classes/api.php",
          "message/output/popup/db/upgrade.php||message/output/popup/db/upgrade.php",
          "message/output/popup/message_output_popup.php||message/output/popup/message_output_popup.php",
          "message/output/popup/notifications.php||message/output/popup/notifications.php",
          "message/output/popup/tests/base.php||message/output/popup/tests/base.php",
          "message/output/popup/version.php||message/output/popup/version.php",
          "message/tests/migrate_message_data_task_test.php||message/tests/migrate_message_data_task_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: $string['message'] = 'Message';",
          "72: $string['messagepreferences'] = 'Message preferences';",
          "73: $string['messages'] = 'Messages';",
          "74: $string['messagingdisabled'] = 'Messaging is disabled on this site, emails will be sent instead';",
          "75: $string['newonlymsg'] = 'Show only new';",
          "76: $string['newmessage'] = 'New message';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: $string['messagingdatahasnotbeenmigrated'] = 'Your messages are temporarily unavailable due to upgrades in the messaging infrastructure. Please wait for them to be migrated.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: $string['noreply'] = 'Do not reply to this message';",
          "84: $string['noncontacts'] = 'Non-contacts';",
          "85: $string['nonotifications'] = 'You have no notifications';",
          "86: $string['notificationwindow'] = 'Notification window';",
          "87: $string['notificationpreferences'] = 'Notification preferences';",
          "88: $string['notificationimage'] = 'Notification image';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: $string['notificationdatahasnotbeenmigrated'] = 'Your notifications are temporarily unavailable due to upgrades in the notification infrastructure. Please wait for them to be migrated.';",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4407: function complete_user_login($user) {",
          "4410:     \\core\\session\\manager::login_user($user);",
          "",
          "[Removed Lines]",
          "4408:     global $CFG, $USER, $SESSION;",
          "",
          "[Added Lines]",
          "4408:     global $CFG, $DB, $USER, $SESSION;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4429:     );",
          "4430:     $event->trigger();",
          "4432:     if (isguestuser()) {",
          "4434:         return $USER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4433:     if (!get_user_preferences('core_message_migrate_data', false, $USER->id)) {",
          "4435:         if (\\core_message\\helper::legacy_messages_exist($USER->id)) {",
          "4436:             \\core_message\\task\\migrate_message_data::queue_task($USER->id);",
          "4437:         } else {",
          "4438:             set_user_preference('core_message_migrate_data', true, $USER->id);",
          "4439:         }",
          "4440:     }",
          "",
          "---------------"
        ],
        "message/classes/helper.php||message/classes/helper.php": [
          "File: message/classes/helper.php -> message/classes/helper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:         sort($ids);",
          "331:         return implode('_', $ids);",
          "332:     }",
          "333: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:     public static function legacy_messages_exist($userid) {",
          "341:         global $DB;",
          "343:         $sql = \"SELECT id",
          "344:                   FROM {message} m",
          "345:                  WHERE useridfrom = ?",
          "346:                     OR useridto = ?\";",
          "347:         $messageexists = $DB->record_exists_sql($sql, [$userid, $userid]);",
          "349:         $sql = \"SELECT id",
          "350:                   FROM {message_read} m",
          "351:                  WHERE useridfrom = ?",
          "352:                     OR useridto = ?\";",
          "353:         $messagereadexists = $DB->record_exists_sql($sql, [$userid, $userid]);",
          "355:         return $messageexists || $messagereadexists;",
          "356:     }",
          "",
          "---------------"
        ],
        "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php": [
          "File: message/classes/task/migrate_message_data.php -> message/classes/task/migrate_message_data.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_message\\task;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class migrate_message_data extends \\core\\task\\adhoc_task {",
          "41:     public function execute() {",
          "42:         global $DB;",
          "44:         $userid = $this->get_custom_data()->userid;",
          "47:         $hasbeenmigrated = get_user_preferences('core_message_migrate_data', false, $userid);",
          "49:         if (!$hasbeenmigrated) {",
          "51:             $updatepreference = true;",
          "54:             $sql = \"SELECT DISTINCT(useridfrom)",
          "55:                       FROM {message} m",
          "56:                      WHERE useridto = ?",
          "57:                      UNION",
          "58:                     SELECT DISTINCT(useridfrom)",
          "59:                       FROM {message_read} m",
          "60:                      WHERE useridto = ?\";",
          "61:             $users = $DB->get_records_sql($sql, [$userid, $userid]);",
          "64:             $sql = \"SELECT DISTINCT(useridto)",
          "65:                       FROM {message} m",
          "66:                      WHERE useridfrom = ?",
          "67:                      UNION",
          "68:                     SELECT DISTINCT(useridto)",
          "69:                       FROM {message_read} m",
          "70:                      WHERE useridfrom = ?\";",
          "71:             $users = $users + $DB->get_records_sql($sql, [$userid, $userid]);",
          "72:             if (!empty($users)) {",
          "74:                 foreach ($users as $otheruserid => $user) {",
          "75:                     $ids = [$userid, $otheruserid];",
          "76:                     sort($ids);",
          "77:                     $key = implode('_', $ids);",
          "80:                     $timeout = 5; // In seconds.",
          "81:                     $locktype = 'core_message_migrate_data';",
          "84:                     $lockfactory = \\core\\lock\\lock_config::get_lock_factory($locktype);",
          "87:                     if ($lock = $lockfactory->get_lock($key, $timeout)) {",
          "88:                         try {",
          "89:                             $transaction = $DB->start_delegated_transaction();",
          "90:                             $this->migrate_data($userid, $otheruserid);",
          "91:                             $transaction->allow_commit();",
          "92:                         } catch (\\Throwable $e) {",
          "93:                             $updatepreference = false;",
          "94:                         }",
          "96:                         $lock->release();",
          "97:                     } else {",
          "100:                         $updatepreference = false;",
          "101:                         continue;",
          "102:                     }",
          "103:                 }",
          "104:             }",
          "106:             if ($updatepreference) {",
          "107:                 set_user_preference('core_message_migrate_data', true, $userid);",
          "108:             } else {",
          "110:                 throw new \\moodle_exception('Task failed.');",
          "111:             }",
          "112:         }",
          "113:     }",
          "122:     private function migrate_data($userid, $otheruserid) {",
          "123:         global $DB;",
          "125:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "126:             $conversationid = \\core_message\\api::create_conversation_between_users([$userid, $otheruserid]);",
          "127:         }",
          "130:         $select = \"(useridfrom = ? AND useridto = ?) OR (useridfrom = ? AND useridto = ?)\";",
          "131:         $params = [$userid, $otheruserid, $otheruserid, $userid];",
          "132:         $messages = $DB->get_recordset_select('message', $select, $params, 'id ASC');",
          "133:         foreach ($messages as $message) {",
          "134:             if ($message->notification) {",
          "135:                 $this->migrate_notification($message, false);",
          "136:             } else {",
          "137:                 $this->migrate_message($conversationid, $message);",
          "138:             }",
          "139:         }",
          "140:         $messages->close();",
          "143:         $DB->delete_records_select('message', $select, $params);",
          "146:         $messages = $DB->get_recordset_select('message_read', $select, $params, 'id ASC');",
          "147:         foreach ($messages as $message) {",
          "148:             if ($message->notification) {",
          "149:                 $this->migrate_notification($message, true);",
          "150:             } else {",
          "151:                 $this->migrate_message($conversationid, $message);",
          "152:             }",
          "153:         }",
          "154:         $messages->close();",
          "157:         $DB->delete_records_select('message_read', $select, $params);",
          "158:     }",
          "167:     private function migrate_notification($notification, $isread) {",
          "168:         global $DB;",
          "170:         $tabledata = new \\stdClass();",
          "171:         $tabledata->useridfrom = $notification->useridfrom;",
          "172:         $tabledata->useridto = $notification->useridto;",
          "173:         $tabledata->subject = $notification->subject;",
          "174:         $tabledata->fullmessage = $notification->fullmessage;",
          "175:         $tabledata->fullmessageformat = $notification->fullmessageformat;",
          "176:         $tabledata->fullmessagehtml = $notification->fullmessagehtml;",
          "177:         $tabledata->smallmessage = $notification->smallmessage;",
          "178:         $tabledata->component = $notification->component;",
          "179:         $tabledata->eventtype = $notification->eventtype;",
          "180:         $tabledata->contexturl = $notification->contexturl;",
          "181:         $tabledata->contexturlname = $notification->contexturlname;",
          "182:         $tabledata->timeread = $notification->timeread ?? null;",
          "183:         $tabledata->timecreated = $notification->timecreated;",
          "185:         $newid = $DB->insert_record('notifications', $tabledata);",
          "188:         if ($mp = $DB->get_record('message_popup', ['messageid' => $notification->id, 'isread' => (int) $isread])) {",
          "189:             $mpn = new \\stdClass();",
          "190:             $mpn->notificationid = $newid;",
          "191:             $DB->insert_record('message_popup_notifications', $mpn);",
          "193:             $DB->delete_records('message_popup', ['id' => $mp->id]);",
          "194:         }",
          "195:     }",
          "204:     private function migrate_message($conversationid, $message) {",
          "205:         global $DB;",
          "208:         $tabledata = new \\stdClass();",
          "209:         $tabledata->useridfrom = $message->useridfrom;",
          "210:         $tabledata->conversationid = $conversationid;",
          "211:         $tabledata->subject = $message->subject;",
          "212:         $tabledata->fullmessage = $message->fullmessage;",
          "213:         $tabledata->fullmessageformat = $message->fullmessageformat;",
          "214:         $tabledata->fullmessagehtml = $message->fullmessagehtml;",
          "215:         $tabledata->smallmessage = $message->smallmessage;",
          "216:         $tabledata->timecreated = $message->timecreated;",
          "218:         $messageid = $DB->insert_record('messages', $tabledata);",
          "221:         if ($message->timeuserfromdeleted) {",
          "222:             $mua = new \\stdClass();",
          "223:             $mua->userid = $message->useridfrom;",
          "224:             $mua->messageid = $messageid;",
          "225:             $mua->action = \\core_message\\api::MESSAGE_ACTION_DELETED;",
          "226:             $mua->timecreated = $message->timeuserfromdeleted;",
          "228:             $DB->insert_record('message_user_actions', $mua);",
          "229:         }",
          "232:         if ($message->timeusertodeleted) {",
          "233:             $mua = new \\stdClass();",
          "234:             $mua->userid = $message->useridto;",
          "235:             $mua->messageid = $messageid;",
          "236:             $mua->action = \\core_message\\api::MESSAGE_ACTION_DELETED;",
          "237:             $mua->timecreated = $message->timeusertodeleted;",
          "239:             $DB->insert_record('message_user_actions', $mua);",
          "240:         }",
          "244:         if (isset($message->timeread)) {",
          "245:             $mua = new \\stdClass();",
          "246:             $mua->userid = $message->useridto;",
          "247:             $mua->messageid = $messageid;",
          "248:             $mua->action = \\core_message\\api::MESSAGE_ACTION_READ;",
          "249:             $mua->timecreated = $message->timeread;",
          "251:             $DB->insert_record('message_user_actions', $mua);",
          "252:         }",
          "253:     }",
          "260:     public static function queue_task($userid) {",
          "262:         $task = new \\core_message\\task\\migrate_message_data();",
          "263:         $task->set_custom_data(",
          "264:             [",
          "265:                 'userid' => $userid",
          "266:             ]",
          "267:         );",
          "270:         \\core\\task\\manager::queue_adhoc_task($task, true);",
          "271:     }",
          "272: }",
          "",
          "---------------"
        ],
        "message/index.php||message/index.php": [
          "File: message/index.php -> message/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "148: echo $OUTPUT->header();",
          "149: echo $OUTPUT->heading(get_string('messages', 'message'));",
          "151: if (!$currentuser) {",
          "152:     $notify = new \\core\\output\\notification(get_string('viewinganotherusersmessagearea', 'message'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: if (!get_user_preferences('core_message_migrate_data', false, $user1id)) {",
          "153:     $notify = new \\core\\output\\notification(get_string('messagingdatahasnotbeenmigrated', 'message'),",
          "154:         \\core\\output\\notification::NOTIFY_WARNING);",
          "155:     echo $OUTPUT->render($notify);",
          "156: }",
          "",
          "---------------"
        ],
        "message/output/popup/classes/api.php||message/output/popup/classes/api.php": [
          "File: message/output/popup/classes/api.php -> message/output/popup/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:             $useridto = $USER->id;",
          "57:         }",
          "65:         if ($useridto == $USER->id) {",
          "66:             $disabled = $USER->emailstop;",
          "",
          "[Removed Lines]",
          "59:         $params = [",
          "60:             'useridto1' => $useridto,",
          "61:             'useridto2' => $useridto,",
          "62:         ];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:                        n.contexturlname, n.timecreated, n.component,",
          "80:                        n.eventtype, n.timeread",
          "81:                   FROM {notifications} n",
          "83:               ORDER BY timecreated $sort, timeread $sort, id $sort\";",
          "85:         $notifications = [];",
          "87:         foreach ($records as $record) {",
          "88:             $notifications[] = (object) $record;",
          "89:         }",
          "",
          "[Removed Lines]",
          "82:                  WHERE n.useridto = :useridto1",
          "86:         $records = $DB->get_recordset_sql($sql, $params, $offset, $limit);",
          "",
          "[Added Lines]",
          "77:                  WHERE n.id IN (SELECT notificationid FROM {message_popup_notifications})",
          "78:                    AND n.useridto = ?",
          "82:         $records = $DB->get_recordset_sql($sql, [$useridto], $offset, $limit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         return $DB->count_records_sql(",
          "110:             \"SELECT count(id)",
          "111:                FROM {notifications}",
          "113:                 AND timeread is NULL\",",
          "114:             [$useridto]",
          "115:         );",
          "",
          "[Removed Lines]",
          "112:               WHERE useridto = ?",
          "",
          "[Added Lines]",
          "108:               WHERE id IN (SELECT notificationid FROM {message_popup_notifications})",
          "109:                 AND useridto = ?",
          "",
          "---------------"
        ],
        "message/output/popup/db/upgrade.php||message/output/popup/db/upgrade.php": [
          "File: message/output/popup/db/upgrade.php -> message/output/popup/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     return true;",
          "87: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     if ($oldversion < 2018032800) {",
          "88:         $table = new xmldb_table('message_popup_notifications');",
          "91:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "92:         $table->add_field('notificationid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "95:         $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));",
          "96:         $table->add_key('notificationid', XMLDB_KEY_FOREIGN, array('notificationid'), 'notifications', array('id'));",
          "99:         if (!$dbman->table_exists($table)) {",
          "100:             $dbman->create_table($table);",
          "101:         }",
          "104:         upgrade_plugin_savepoint(true, 2018032800, 'message', 'popup');",
          "105:     }",
          "",
          "---------------"
        ],
        "message/output/popup/message_output_popup.php||message/output/popup/message_output_popup.php": [
          "File: message/output/popup/message_output_popup.php -> message/output/popup/message_output_popup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: class message_output_popup extends message_output {",
          "43:     public function send_message($eventdata) {",
          "44:         return true;",
          "45:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:         global $DB;",
          "52:         if ($eventdata->userfrom->id != $eventdata->userto->id && $eventdata->notification) {",
          "53:             if (!$DB->record_exists('message_popup_notifications', ['notificationid' => $eventdata->savedmessageid])) {",
          "54:                 $record = new stdClass();",
          "55:                 $record->notificationid = $eventdata->savedmessageid;",
          "57:                 $DB->insert_record('message_popup_notifications', $record);",
          "58:             }",
          "59:         }",
          "",
          "---------------"
        ],
        "message/output/popup/notifications.php||message/output/popup/notifications.php": [
          "File: message/output/popup/notifications.php -> message/output/popup/notifications.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: echo $OUTPUT->header();",
          "67: echo $OUTPUT->heading(get_string('notifications', 'message'));",
          "68: echo $renderer->render_from_template('message_popup/notification_area', $context);",
          "69: echo $OUTPUT->footer();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: if (!get_user_preferences('core_message_migrate_data', false, $userid)) {",
          "71:     $notify = new \\core\\output\\notification(get_string('notificationdatahasnotbeenmigrated', 'message'),",
          "72:         \\core\\output\\notification::NOTIFY_WARNING);",
          "73:     echo $OUTPUT->render($notify);",
          "74: }",
          "",
          "---------------"
        ],
        "message/output/popup/tests/base.php||message/output/popup/tests/base.php": [
          "File: message/output/popup/tests/base.php -> message/output/popup/tests/base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         $record->smallmessage = $message;",
          "51:         $record->timecreated = $timecreated ? $timecreated : time();",
          "54:     }",
          "",
          "[Removed Lines]",
          "53:         return $DB->insert_record('notifications', $record);",
          "",
          "[Added Lines]",
          "53:         $id = $DB->insert_record('notifications', $record);",
          "55:         $popup = new stdClass();",
          "56:         $popup->notificationid = $id;",
          "58:         $DB->insert_record('message_popup_notifications', $popup);",
          "60:         return $id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         \\core_message\\api::mark_notification_as_read($record);",
          "89:         return $record->id;",
          "90:     }",
          "91: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:         $popup = new stdClass();",
          "97:         $popup->notificationid = $record->id;",
          "98:         $DB->insert_record('message_popup_notifications', $popup);",
          "",
          "---------------"
        ],
        "message/output/popup/version.php||message/output/popup/version.php": [
          "File: message/output/popup/version.php -> message/output/popup/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2017110800;        // Requires this Moodle version",
          "29: $plugin->component = 'message_popup';  // Full name of the plugin (used for diagnostics)",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2018022000;        // The current plugin version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2018032800;        // The current plugin version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "message/tests/migrate_message_data_task_test.php||message/tests/migrate_message_data_task_test.php": [
          "File: message/tests/migrate_message_data_task_test.php -> message/tests/migrate_message_data_task_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: global $CFG;",
          "30: require_once($CFG->dirroot . '/message/tests/messagelib_test.php');",
          "40: class core_message_migrate_message_data_task_testcase extends advanced_testcase {",
          "47:     public function setUp() {",
          "48:         $this->resetAfterTest();",
          "49:     }",
          "54:     public function test_migrating_messages() {",
          "55:         global $DB;",
          "58:         $user1 = $this->getDataGenerator()->create_user();",
          "59:         $user2 = $this->getDataGenerator()->create_user();",
          "60:         $user3 = $this->getDataGenerator()->create_user();",
          "63:         $now = time();",
          "64:         $timedeleted1 = $now - (2 * DAYSECS);",
          "65:         $timedeleted2 = $now - (2 * DAYSECS) + 1;",
          "66:         $timeread1 = $now - DAYSECS;",
          "67:         $timeread2 = $now - DAYSECS + 1;",
          "68:         $timeread3 = $now - DAYSECS + 2;",
          "71:         $m1 = $this->create_legacy_message_or_notification($user1->id, $user2->id, 1, false, $timeread1);",
          "72:         $m2 = $this->create_legacy_message_or_notification($user1->id, $user2->id, 2);",
          "73:         $m3 = $this->create_legacy_message_or_notification($user1->id, $user2->id, 3);",
          "76:         $m4 = $this->create_legacy_message_or_notification($user3->id, $user1->id, 4, false, $timeread2);",
          "77:         $m5 = $this->create_legacy_message_or_notification($user3->id, $user1->id, 5);",
          "78:         $m6 = $this->create_legacy_message_or_notification($user3->id, $user1->id, 6);",
          "81:         $m7 = $this->create_legacy_message_or_notification($user3->id, $user2->id, 7, false, $timeread3);",
          "82:         $m8 = $this->create_legacy_message_or_notification($user3->id, $user2->id, 8);",
          "83:         $m9 = $this->create_legacy_message_or_notification($user3->id, $user2->id, 9);",
          "86:         $messageupdate = new stdClass();",
          "87:         $messageupdate->id = $m1;",
          "88:         $messageupdate->timeusertodeleted = $timedeleted1;",
          "89:         $DB->update_record('message_read', $messageupdate);",
          "91:         $messageupdate = new stdClass();",
          "92:         $messageupdate->id = $m5;",
          "93:         $messageupdate->timeuserfromdeleted = $timedeleted2;",
          "94:         $DB->update_record('message', $messageupdate);",
          "97:         $task = new \\core_message\\task\\migrate_message_data();",
          "98:         $task->set_custom_data(",
          "99:             [",
          "100:                 'userid' => $user1->id",
          "101:             ]",
          "102:         );",
          "103:         $task->execute();",
          "107:         $this->assertEquals(2, $DB->count_records('message'));",
          "108:         $this->assertEquals(1, $DB->count_records('message_read'));",
          "109:         $this->assertEquals(6, $DB->count_records('messages'));",
          "110:         $this->assertEquals(0, $DB->count_records('notifications'));",
          "111:         $this->assertEquals(0, $DB->count_records('message_popup_notifications'));",
          "114:         $conversation1 = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "115:         $conversation2 = \\core_message\\api::get_conversation_between_users([$user1->id, $user3->id]);",
          "118:         $messages = $DB->get_records('messages', [], 'timecreated ASC');",
          "119:         $i = 1;",
          "120:         foreach ($messages as $message) {",
          "121:             $useridfrom = $user1->id;",
          "122:             $conversationid = $conversation1;",
          "123:             if ($i > 3) {",
          "124:                 $useridfrom = $user3->id;",
          "125:                 $conversationid = $conversation2;",
          "126:             }",
          "128:             if ($i == 1) {",
          "129:                 $messagereadid1 = $message->id;",
          "130:                 $messagedeletedid1 = $message->id;",
          "131:             } else if ($i == 4) {",
          "132:                 $messagereadid2 = $message->id;",
          "133:             } else if ($i == 5) {",
          "134:                 $messagedeletedid2 = $message->id;",
          "135:             }",
          "137:             $this->assertEquals($useridfrom, $message->useridfrom);",
          "138:             $this->assertEquals($conversationid, $message->conversationid);",
          "139:             $this->assertEquals('Subject ' . $i, $message->subject);",
          "140:             $this->assertEquals('Full message ' . $i, $message->fullmessage);",
          "141:             $this->assertEquals(FORMAT_PLAIN, $message->fullmessageformat);",
          "142:             $this->assertEquals('Full message HTML '. $i, $message->fullmessagehtml);",
          "143:             $this->assertEquals('Small message ' . $i, $message->smallmessage);",
          "144:             $this->assertEquals($i, $message->timecreated);",
          "145:             $i++;",
          "146:         }",
          "149:         $this->assertEquals(4, $DB->count_records('message_user_actions'));",
          "152:         $muas = $DB->get_records('message_user_actions', ['action' => \\core_message\\api::MESSAGE_ACTION_READ], 'timecreated DESC');",
          "153:         $this->assertCount(2, $muas);",
          "156:         $mua1 = array_shift($muas);",
          "158:         $mua2 = array_shift($muas);",
          "160:         $this->assertEquals($user1->id, $mua1->userid);",
          "161:         $this->assertEquals($messagereadid2, $mua1->messageid);",
          "162:         $this->assertEquals($timeread2, $mua1->timecreated);",
          "164:         $this->assertEquals($user2->id, $mua2->userid);",
          "165:         $this->assertEquals($messagereadid1, $mua2->messageid);",
          "166:         $this->assertEquals($timeread1, $mua2->timecreated);",
          "169:         $muas = $DB->get_records('message_user_actions', ['action' => \\core_message\\api::MESSAGE_ACTION_DELETED],",
          "170:             'timecreated DESC');",
          "171:         $this->assertCount(2, $muas);",
          "174:         $mua1 = array_shift($muas);",
          "176:         $mua2 = array_shift($muas);",
          "178:         $this->assertEquals($user3->id, $mua1->userid);",
          "179:         $this->assertEquals($messagedeletedid2, $mua1->messageid);",
          "180:         $this->assertEquals($timedeleted2, $mua1->timecreated);",
          "182:         $this->assertEquals($user2->id, $mua2->userid);",
          "183:         $this->assertEquals($messagedeletedid1, $mua2->messageid);",
          "184:         $this->assertEquals($timedeleted1, $mua2->timecreated);",
          "185:     }",
          "190:     public function test_migrating_notifications() {",
          "191:         global $DB;",
          "194:         $user1 = $this->getDataGenerator()->create_user();",
          "195:         $user2 = $this->getDataGenerator()->create_user();",
          "196:         $user3 = $this->getDataGenerator()->create_user();",
          "199:         $timeread = time() - DAYSECS;",
          "202:         $this->create_legacy_message_or_notification($user1->id, $user2->id, 1, true, $timeread);",
          "203:         $this->create_legacy_message_or_notification($user1->id, $user2->id, 2, true);",
          "204:         $this->create_legacy_message_or_notification($user1->id, $user2->id, 3, true);",
          "207:         $this->create_legacy_message_or_notification($user3->id, $user1->id, 4, true, $timeread);",
          "208:         $this->create_legacy_message_or_notification($user3->id, $user1->id, 5, true);",
          "209:         $this->create_legacy_message_or_notification($user3->id, $user1->id, 6, true);",
          "212:         $this->create_legacy_message_or_notification($user3->id, $user2->id, 7, true, $timeread);",
          "213:         $this->create_legacy_message_or_notification($user3->id, $user2->id, 8, true);",
          "214:         $this->create_legacy_message_or_notification($user3->id, $user2->id, 9, true);",
          "217:         $task = new \\core_message\\task\\migrate_message_data();",
          "218:         $task->set_custom_data(",
          "219:             [",
          "220:                 'userid' => $user1->id",
          "221:             ]",
          "222:         );",
          "223:         $task->execute();",
          "227:         $this->assertEquals(2, $DB->count_records('message'));",
          "228:         $this->assertEquals(1, $DB->count_records('message_read'));",
          "229:         $this->assertEquals(3, $DB->count_records('message_popup'));",
          "230:         $this->assertEquals(6, $DB->count_records('notifications'));",
          "231:         $this->assertEquals(6, $DB->count_records('message_popup_notifications'));",
          "234:         $notifications = $DB->get_records('notifications', [], 'timecreated ASC');",
          "235:         $popupnotifications = $DB->get_records('message_popup_notifications', [], 'notificationid ASC', 'notificationid');",
          "236:         $i = 1;",
          "237:         foreach ($notifications as $notification) {",
          "239:             $this->assertArrayHasKey($notification->id, $popupnotifications);",
          "241:             $useridfrom = $user1->id;",
          "242:             $useridto = $user2->id;",
          "243:             if ($i > 3) {",
          "244:                 $useridfrom = $user3->id;",
          "245:                 $useridto = $user1->id;",
          "246:             }",
          "248:             $this->assertEquals($useridfrom, $notification->useridfrom);",
          "249:             $this->assertEquals($useridto, $notification->useridto);",
          "250:             $this->assertEquals('Subject ' . $i, $notification->subject);",
          "251:             $this->assertEquals('Full message ' . $i, $notification->fullmessage);",
          "252:             $this->assertEquals(FORMAT_PLAIN, $notification->fullmessageformat);",
          "253:             $this->assertEquals('Full message HTML '. $i, $notification->fullmessagehtml);",
          "254:             $this->assertEquals('Small message ' . $i, $notification->smallmessage);",
          "255:             $this->assertEquals('mod_assign', $notification->component);",
          "256:             $this->assertEquals('assign_notification', $notification->eventtype);",
          "257:             $this->assertEquals('https://www.google.com', $notification->contexturl);",
          "258:             $this->assertEquals('google', $notification->contexturlname);",
          "259:             $this->assertEquals($i, $notification->timecreated);",
          "261:             if (($i == 1) || ($i == 4)) {",
          "262:                 $this->assertEquals($timeread, $notification->timeread);",
          "263:             } else {",
          "264:                 $this->assertNull($notification->timeread);",
          "265:             }",
          "267:             $i++;",
          "268:         }",
          "269:     }",
          "282:     private function create_legacy_message_or_notification($useridfrom, $useridto, $timecreated = null,",
          "283:             $notification = false, $timeread = null) {",
          "284:         global $DB;",
          "286:         $tabledata = new \\stdClass();",
          "288:         if (is_null($timecreated)) {",
          "289:             $timecreated = time();",
          "290:         }",
          "292:         if (!is_null($timeread)) {",
          "293:             $table = 'message_read';",
          "294:             $tabledata->timeread = $timeread;",
          "295:         } else {",
          "296:             $table = 'message';",
          "297:         }",
          "299:         if ($notification) {",
          "300:             $tabledata->eventtype = 'assign_notification';",
          "301:             $tabledata->component = 'mod_assign';",
          "302:             $tabledata->notification = 1;",
          "303:             $tabledata->contexturl = 'https://www.google.com';",
          "304:             $tabledata->contexturlname = 'google';",
          "305:         } else {",
          "306:             $tabledata->eventtype = 'instantmessage';",
          "307:             $tabledata->component = 'moodle';",
          "308:             $tabledata->notification = 0;",
          "309:         }",
          "311:         $tabledata->useridfrom = $useridfrom;",
          "312:         $tabledata->useridto = $useridto;",
          "313:         $tabledata->subject = 'Subject ' . $timecreated;",
          "314:         $tabledata->fullmessage = 'Full message ' . $timecreated;",
          "315:         $tabledata->fullmessageformat = FORMAT_PLAIN;",
          "316:         $tabledata->fullmessagehtml = 'Full message HTML ' . $timecreated;",
          "317:         $tabledata->smallmessage = 'Small message ' . $timecreated;",
          "318:         $tabledata->timecreated = $timecreated;",
          "320:         $id = $DB->insert_record($table, $tabledata);",
          "323:         if ($notification) {",
          "324:             $mp = new stdClass();",
          "325:             $mp->messageid = $id;",
          "326:             $mp->isread = (!is_null($timeread)) ? 1 : 0;",
          "328:             $DB->insert_record('message_popup', $mp);",
          "329:         }",
          "331:         return $id;",
          "332:     }",
          "333: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018040500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018040500.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}