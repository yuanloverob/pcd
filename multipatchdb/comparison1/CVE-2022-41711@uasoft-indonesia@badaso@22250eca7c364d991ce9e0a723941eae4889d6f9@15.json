{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08f3829e37fb680e6b6251e30c0cdc4a94f18057",
      "candidate_info": {
        "commit_hash": "08f3829e37fb680e6b6251e30c0cdc4a94f18057",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/08f3829e37fb680e6b6251e30c0cdc4a94f18057",
        "files": [
          "src/Helpers/CallHelperTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     public static function login(TestCase $test_case)",
          "123:     {",
          "124:         $user = self::getUserAdminRole();",
          "126:         $login = $test_case->post(CallHelperTest::getApiAuth('login'), [",
          "130:         ]);",
          "133:     }",
          "135:     public static function getApiAuth($path)",
          "136:     {",
          "138:     }",
          "140:     public static function getApiV1($path)",
          "141:     {",
          "143:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "127:             \"email\" => $user->email,",
          "128:             \"password\" => $user->name,",
          "129:             \"remember\" => false",
          "132:         return $login->json(\"data.accessToken\");",
          "137:         return \"badaso-api/v1/auth/\" . $path;",
          "142:         return \"badaso-api/module/post/v1\" . $path;",
          "",
          "[Added Lines]",
          "127:             'email' => $user->email,",
          "128:             'password' => $user->name,",
          "129:             'remember' => false,",
          "132:         return $login->json('data.accessToken');",
          "137:         return 'badaso-api/v1/auth/'.$path;",
          "142:         return 'badaso-api/module/post/v1'.$path;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac0343bf6479ad72f27f1d6300e04c80c7b746ae",
      "candidate_info": {
        "commit_hash": "ac0343bf6479ad72f27f1d6300e04c80c7b746ae",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/ac0343bf6479ad72f27f1d6300e04c80c7b746ae",
        "files": [
          "src/resources/js/components/BadasoNavbar.vue",
          "src/resources/js/components/BadasoNotificationMessage.vue",
          "src/resources/js/layout/admin/header/Navbar.vue",
          "src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/file-manager/browse.vue"
        ],
        "message": "commit",
        "before_after_code_files": [
          "src/resources/js/components/BadasoNavbar.vue||src/resources/js/components/BadasoNavbar.vue",
          "src/resources/js/components/BadasoNotificationMessage.vue||src/resources/js/components/BadasoNotificationMessage.vue",
          "src/resources/js/layout/admin/header/Navbar.vue||src/resources/js/layout/admin/header/Navbar.vue",
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/file-manager/browse.vue||src/resources/js/pages/file-manager/browse.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resources/js/components/BadasoNavbar.vue||src/resources/js/components/BadasoNavbar.vue": [
          "File: src/resources/js/components/BadasoNavbar.vue -> src/resources/js/components/BadasoNavbar.vue"
        ],
        "src/resources/js/components/BadasoNotificationMessage.vue||src/resources/js/components/BadasoNotificationMessage.vue": [
          "File: src/resources/js/components/BadasoNotificationMessage.vue -> src/resources/js/components/BadasoNotificationMessage.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:           class=\"notification-item\"",
          "41:         >",
          "42:           <h5>{{ message.title }}</h5>",
          "47:                 : message.content",
          "51:           <vs-row>",
          "52:             <vs-icon icon=\"schedule\" :color=\"topbarFontColor\"></vs-icon>",
          "54:           </vs-row>",
          "55:         </div>",
          "56:       </vs-sidebar-item>",
          "57:     </vs-sidebar>",
          "",
          "[Removed Lines]",
          "43:           <p>",
          "44:             {{",
          "45:               message.content.lenght > 100",
          "46:                 ? message.content.substring(0, 100) + \"...\"",
          "48:             }}",
          "49:           </p>",
          "53:             <p>{{ message.createdAt }}</p>",
          "",
          "[Added Lines]",
          "44:           <span",
          "45:             v-html=\"",
          "46:               message.content.length > 20",
          "47:                 ? message.content.substring(0, 20) + '...'",
          "49:             \"",
          "50:           >",
          "51:           </span>",
          "57:            <span>{{ getDate(message.createdAt) }}</span>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:       <vs-row>",
          "79:         <div class=\"m-3\">",
          "80:           <h5>{{ detailMessage.title }}</h5>",
          "83:           <vs-divider></vs-divider>",
          "",
          "[Removed Lines]",
          "81:           <p class=\"mt-2\">{{ detailMessage.content }}</p>",
          "",
          "[Added Lines]",
          "86:           <span v-html=\"detailMessage.content\"></span>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:                 icon=\"schedule\"",
          "101:                 :color=\"topbarFontColor\"",
          "102:               ></vs-icon>",
          "104:             </vs-row>",
          "105:           </div>",
          "106:         </div>",
          "",
          "[Removed Lines]",
          "103:               <span>{{ detailMessage.createdAt }}</span>",
          "",
          "[Added Lines]",
          "108:               <span>{{ getDate(detailMessage.createdAt) }}</span>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110: </template>",
          "112: <script>",
          "113: export default {",
          "114:   data() {",
          "115:     return {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: import moment from \"moment\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     },",
          "128:   },",
          "129:   methods: {",
          "130:     openSideBarDetailMessage(message, index) {",
          "131:       this.sideBarDetailMessage = true;",
          "132:       this.sideBarNotification = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     getDate(date) {",
          "137:       return moment(date).format(\"DD MMMM YYYY\");",
          "138:     },",
          "",
          "---------------"
        ],
        "src/resources/js/layout/admin/header/Navbar.vue||src/resources/js/layout/admin/header/Navbar.vue": [
          "File: src/resources/js/layout/admin/header/Navbar.vue -> src/resources/js/layout/admin/header/Navbar.vue"
        ],
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032:     handleSelect(data) {",
          "1033:       this.selected = data;",
          "1034:     },",
          "1036:       if (dataRow.relation) {",
          "1037:         const relationType = dataRow.relation.relationType;",
          "1038:         const table = this.$caseConvert.stringSnakeToCamel(",
          "",
          "[Removed Lines]",
          "1035:     displayRelationData(record, dataRow) {",
          "",
          "[Added Lines]",
          "1035:     displayRelationData(record, dataRow) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:             flatList.push(lists[ls][displayColumn]);",
          "1070:           });",
          "1071:           return flatList.join(\",\").replace(\",\", \", \");",
          "1073:       } else {",
          "1074:         return null;",
          "1075:       }",
          "",
          "[Removed Lines]",
          "1072:         }",
          "",
          "[Added Lines]",
          "1072:         }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/file-manager/browse.vue||src/resources/js/pages/file-manager/browse.vue": [
          "File: src/resources/js/pages/file-manager/browse.vue -> src/resources/js/pages/file-manager/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         .get(this.urlFileManager)",
          "53:         .then((result) => {",
          "54:           this.urlIframe = this.urlFileManager;",
          "55:           this.isShow = true;",
          "56:         })",
          "57:         .catch((error) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:           console.log(this.urlIframe,'u');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7051dd011c44ecb725cae4c66cd441d7cabde2a",
      "candidate_info": {
        "commit_hash": "f7051dd011c44ecb725cae4c66cd441d7cabde2a",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/f7051dd011c44ecb725cae4c66cd441d7cabde2a",
        "files": [
          "src/Helpers/GetData.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Helpers/GetData.php||src/Helpers/GetData.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:                     $relation_data = DB::table($destination_table)->select([",
          "306:                         $destination_table_column,",
          "307:                         $destination_table_display_column,",
          "309:                         ->where($destination_table_column, $row->{$field->field})",
          "310:                         ->get();",
          "",
          "[Removed Lines]",
          "308:                         ])",
          "",
          "[Added Lines]",
          "308:                     ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35e7d4fee44db5c47475aaa4dc6be9ac2969af1e",
      "candidate_info": {
        "commit_hash": "35e7d4fee44db5c47475aaa4dc6be9ac2969af1e",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/35e7d4fee44db5c47475aaa4dc6be9ac2969af1e",
        "files": [
          "phpstan-baseline.neon"
        ],
        "message": "test1",
        "before_after_code_files": [
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     - '#Call to an undefined static method Illuminate\\\\Support\\\\Facades\\\\DB::[a-zA-Z0-9-()\\_]+.#'",
          "20:     - '#Call to an undefined static method Illuminate\\\\Support\\\\Facades\\\\Redis::[a-zA-Z0-9-()\\_]+.#'",
          "21:     - '#Parameter \\$test_case of method Uasoft\\\\Badaso\\\\Helpers\\\\CallHelperTest::[a-zA-Z0-9-()\\_]+ has invalid type Tests\\\\TestCase.#'",
          "23:     - '#Class Tests\\\\TestCase not found.#'",
          "26:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class Route.#'",
          "27:     - '#Result of method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ [a-zA-Z0-9-()\\_]+ is used.#'",
          "28:     - '#Method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ should return int but return statement is missing.#'",
          "",
          "[Removed Lines]",
          "22:     - '#Class App\\\\Http\\\\Controllers\\\\Controller not found.#'",
          "",
          "[Added Lines]",
          "22:     - '#Class [a-zA-Z0-9-()\\\\_]+ not found.#'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92d622eb95a6eb9ea4dc8a455ca0c72dde4476e9",
      "candidate_info": {
        "commit_hash": "92d622eb95a6eb9ea4dc8a455ca0c72dde4476e9",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/92d622eb95a6eb9ea4dc8a455ca0c72dde4476e9",
        "files": [
          "src/Commands/BadasoTestSetup.php",
          "src/Config/badaso.php",
          "src/Controllers/BadasoMenuController.php",
          "src/Controllers/BadasoRolePermissionController.php",
          "src/Controllers/BadasoUserRoleController.php",
          "src/Helpers/CallHelperTest.php",
          "src/Models/MenuItem.php",
          "tests/Feature/BadasoApiCrudManagementTest.php",
          "tests/Feature/BadasoApiMenuItemTest.php",
          "tests/Feature/BadasoApiMenuTest.php",
          "tests/Feature/BadasoApiPermissionTest copy.php",
          "tests/Feature/BadasoApiPermissionTest.php",
          "tests/Feature/BadasoApiRolePermissionTest.php",
          "tests/Feature/BadasoApiRoleTest.php",
          "tests/Feature/BadasoApiUserRoleTest.php"
        ],
        "message": "add new unit test",
        "before_after_code_files": [
          "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php",
          "src/Config/badaso.php||src/Config/badaso.php",
          "src/Controllers/BadasoMenuController.php||src/Controllers/BadasoMenuController.php",
          "src/Controllers/BadasoRolePermissionController.php||src/Controllers/BadasoRolePermissionController.php",
          "src/Controllers/BadasoUserRoleController.php||src/Controllers/BadasoUserRoleController.php",
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php",
          "src/Models/MenuItem.php||src/Models/MenuItem.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php",
          "tests/Feature/BadasoApiMenuItemTest.php||tests/Feature/BadasoApiMenuItemTest.php",
          "tests/Feature/BadasoApiMenuTest.php||tests/Feature/BadasoApiMenuTest.php",
          "tests/Feature/BadasoApiPermissionTest.php||tests/Feature/BadasoApiPermissionTest.php",
          "tests/Feature/BadasoApiRolePermissionTest.php||tests/Feature/BadasoApiRolePermissionTest.php",
          "tests/Feature/BadasoApiRoleTest.php||tests/Feature/BadasoApiRoleTest.php",
          "tests/Feature/BadasoApiUserRoleTest.php||tests/Feature/BadasoApiUserRoleTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php": [
          "File: src/Commands/BadasoTestSetup.php -> src/Commands/BadasoTestSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: {",
          "10:     public static $PHPUNIT_XML_PATH = 'phpunit.xml';",
          "11:     public static $BADASO_UNIT_TEST_PATHS = [",
          "13:     ];",
          "14:     public static $BADASO_FEATURE_TEST_PATHS = [",
          "16:     ];",
          "",
          "[Removed Lines]",
          "12:         './packages/badaso/core/tests/Unit',",
          "15:         './packages/badaso/core/tests/Feature',",
          "",
          "[Added Lines]",
          "12:         './vendor/badaso/core/tests/Unit',",
          "15:         './vendor/badaso/core/tests/Feature',",
          "",
          "---------------"
        ],
        "src/Config/badaso.php||src/Config/badaso.php": [
          "File: src/Config/badaso.php -> src/Config/badaso.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:             '/v1/file/*',",
          "34:         ],",
          "35:     ],",
          "36:     'manifest' => [",
          "37:         'name' => 'Badaso',",
          "38:         'short_name' => 'Badaso',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     'unit-test' => [",
          "37:         'prefix' => '/vendor',",
          "38:     ],",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoMenuController.php||src/Controllers/BadasoMenuController.php": [
          "File: src/Controllers/BadasoMenuController.php -> src/Controllers/BadasoMenuController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:         try {",
          "347:             $request->validate([",
          "348:                 'menu_id'      => ['required', 'exists:Uasoft\\Badaso\\Models\\Menu,id'],",
          "350:                 'display_name' => ['required'],",
          "351:             ]);",
          "",
          "[Removed Lines]",
          "349:                 'key'          => ['required', \"unique:Uasoft\\Badaso\\Models\\Menu,id,{$request->menu_id}\"],",
          "",
          "[Added Lines]",
          "349:                 'key'          => ['required', \"unique:Uasoft\\Badaso\\Models\\Menu,key,{$request->menu_id}\"],",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoRolePermissionController.php||src/Controllers/BadasoRolePermissionController.php": [
          "File: src/Controllers/BadasoRolePermissionController.php -> src/Controllers/BadasoRolePermissionController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     {",
          "17:         try {",
          "18:             $role_permissions = RolePermission::all();",
          "22:             $data['role_permissions'] = $role_permissions;",
          "",
          "[Removed Lines]",
          "20:             $role_permissions = $this->getDataRelations($role_permissions);",
          "",
          "[Added Lines]",
          "19:             foreach ($role_permissions as $index => $role_permission) {",
          "20:                 $role_permissions[$index]->permission = $role_permission->permission ;",
          "21:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:             ]);",
          "36:             $role_permissions = RolePermission::where('role_id', $request->role_id)->get();",
          "40:             $data['role_permissions'] = $role_permissions;",
          "",
          "[Removed Lines]",
          "38:             $role_permissions = $this->getDataRelations($role_permissions);",
          "",
          "[Added Lines]",
          "41:             foreach ($role_permissions as $index => $role_permission) {",
          "42:                 $role_permissions[$index]->permission = $role_permission->permission;",
          "43:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     {",
          "78:         try {",
          "79:             $request->validate([",
          "82:             ]);",
          "83:             $permissions = $request->permissions;",
          "",
          "[Removed Lines]",
          "80:                 'role_id'     => 'required|exists:Uasoft\\Badaso\\Models\\Role,id',",
          "81:                 'permissions' => 'required',",
          "",
          "[Added Lines]",
          "87:                 'permissions' => ['required'],",
          "88:                 'role_id'     => ['required', 'exists:Uasoft\\Badaso\\Models\\Role,id'],",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoUserRoleController.php||src/Controllers/BadasoUserRoleController.php": [
          "File: src/Controllers/BadasoUserRoleController.php -> src/Controllers/BadasoUserRoleController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     {",
          "17:         try {",
          "18:             $user_roles = UserRole::all();",
          "22:             $data['user_roles'] = $user_roles;",
          "",
          "[Removed Lines]",
          "20:             $user_roles = $this->getDataRelations($user_roles);",
          "",
          "[Added Lines]",
          "19:             foreach ($user_roles as $index => $user_role) {",
          "20:                 $user_role->role ;",
          "21:                 $user_role->user ;",
          "22:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:             ]);",
          "36:             $user_roles = UserRole::where('user_id', $request->user_id)->get();",
          "40:             $data['user_roles'] = $user_roles;",
          "",
          "[Removed Lines]",
          "38:             $user_roles = $this->getDataRelations($user_roles);",
          "",
          "[Added Lines]",
          "40:             foreach ($user_roles as $index => $user_role) {",
          "41:                 $user_role->role;",
          "42:                 $user_role->user;",
          "43:             }",
          "",
          "---------------"
        ],
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         $test_case->assertSame($bearer_token_authorize, $bearer_cache_token_authorize);",
          "100:     }",
          "102:     public static function withAuthorizeBearer(TestCase $test_case): TestCase",
          "103:     {",
          "104:         return $test_case->withHeader('Authorization', self::getTokenUserAdminAuthorizeBearer());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     public static function handleDeleteUserAdmin(){",
          "103:         $name = env('BADASO_USER_NAME', 'badaso.test');",
          "104:         $email = \"{$name}@test.com\";",
          "105:         User::where('email', $email)->first()->delete();",
          "106:     }",
          "",
          "---------------"
        ],
        "src/Models/MenuItem.php||src/Models/MenuItem.php": [
          "File: src/Models/MenuItem.php -> src/Models/MenuItem.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         'color',",
          "32:         'parent_id',",
          "33:         'order',",
          "34:     ];",
          "36:     public function highestOrderMenuItem($menu_id = null, $parent = null)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:         'permissions',",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "5: use Illuminate\\Database\\Schema\\Blueprint;",
          "6: use Illuminate\\Support\\Facades\\DB;",
          "",
          "[Removed Lines]",
          "3: namespace Tests\\Feature;",
          "",
          "[Added Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature ;",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiMenuItemTest.php||tests/Feature/BadasoApiMenuItemTest.php": [
          "File: tests/Feature/BadasoApiMenuItemTest.php -> tests/Feature/BadasoApiMenuItemTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature ;",
          "5: use Tests\\TestCase;",
          "6: use Prophecy\\Call\\Call;",
          "7: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Models\\Menu;",
          "9: use Uasoft\\Badaso\\Models\\MenuItem;",
          "10: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "11: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "12: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "13: use Uasoft\\Badaso\\Models\\Permission;",
          "15: class BadasoApiMenuItemTest extends TestCase",
          "16: {",
          "18:     public static $KEY_DATA_CREATED_MENU_ITEMS  = 'DATA_CREATED_MENU_ITEMS';",
          "20:     public function testStartInit()",
          "21:     {",
          "23:         CallHelperTest::handleUserAdminAuthorize($this);",
          "24:     }",
          "26:     public function testMenuItemBrowse()",
          "27:     {",
          "28:         $menus = Menu::all();",
          "29:         foreach ($menus as $index => $menu) {",
          "30:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/menus/item\"), [",
          "31:                 'menuId' => $menu->id,",
          "32:             ]);",
          "33:             $response->assertSuccessful();",
          "35:             $response_menu_items = $response->json('data.menuItems');",
          "36:             foreach ($response_menu_items as $index_response_menu_item => $response_menu_item) {",
          "37:                 $menu_item_id = $response_menu_item['id'];",
          "39:                 $menu_item = MenuItem::find($menu_item_id);",
          "40:                 $this->assertNotEmpty($menu_item);",
          "41:                 $this->assertTrue($menu_item['menu_id'] == $response_menu_item['menuId']);",
          "42:                 $this->assertTrue($menu_item['title'] == $response_menu_item['title']);",
          "43:                 $this->assertTrue($menu_item['url'] == $response_menu_item['url']);",
          "44:                 $this->assertTrue($menu_item['target'] == $response_menu_item['target']);",
          "45:                 $this->assertTrue($menu_item['icon_class'] == $response_menu_item['iconClass']);",
          "46:                 $this->assertTrue($menu_item['color'] == $response_menu_item['color']);",
          "47:                 $this->assertTrue($menu_item['parent_id'] == $response_menu_item['parentId']);",
          "48:                 $this->assertTrue($menu_item['order'] == $response_menu_item['order']);",
          "49:                 $this->assertTrue($menu_item['is_expand'] == $response_menu_item['isExpand']);",
          "50:                 $this->assertTrue($menu_item['permissions'] == $response_menu_item['permissions']);",
          "51:             }",
          "52:         }",
          "53:     }",
          "55:     public function testMenuItemBrowseKey()",
          "56:     {",
          "57:         $menus = Menu::all();",
          "58:         foreach ($menus as $index => $menu) {",
          "59:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/menus/item-by-key\"), [",
          "60:                 'menu_key' => $menu->key,",
          "61:             ]);",
          "62:             $response->assertSuccessful();",
          "64:             $response_menu_items = $response->json('data.menuItems');",
          "65:             foreach ($response_menu_items as $index_response_menu_item => $response_menu_item) {",
          "66:                 $menu_item_id = $response_menu_item['id'];",
          "68:                 $menu_item = MenuItem::find($menu_item_id);",
          "69:                 $this->assertNotEmpty($menu_item);",
          "70:                 $this->assertTrue($menu_item['menu_id'] == $response_menu_item['menuId']);",
          "71:                 $this->assertTrue($menu_item['title'] == $response_menu_item['title']);",
          "72:                 $this->assertTrue($menu_item['url'] == $response_menu_item['url']);",
          "73:                 $this->assertTrue($menu_item['target'] == $response_menu_item['target']);",
          "74:                 $this->assertTrue($menu_item['icon_class'] == $response_menu_item['iconClass']);",
          "75:                 $this->assertTrue($menu_item['color'] == $response_menu_item['color']);",
          "76:                 $this->assertTrue($menu_item['parent_id'] == $response_menu_item['parentId']);",
          "77:                 $this->assertTrue($menu_item['order'] == $response_menu_item['order']);",
          "78:                 $this->assertTrue($menu_item['is_expand'] == $response_menu_item['isExpand']);",
          "79:                 $this->assertTrue($menu_item['permissions'] == $response_menu_item['permissions']);",
          "80:             }",
          "81:         }",
          "82:     }",
          "84:     public function testMenuItemAdd()",
          "85:     {",
          "86:         $menu_items = [];",
          "87:         $menus = Menu::all();",
          "88:         foreach ($menus as $index => $menu) {",
          "89:             $request_data = [",
          "90:                 \"menuId\" =>  $menu->id,",
          "91:                 \"title\" =>  Str::random(10),",
          "92:                 \"url\" =>  Str::random(10),",
          "93:                 \"target\" =>  \"_self\",",
          "94:                 \"iconClass\" =>  'add',",
          "95:                 \"color\" =>  '#FFFFFF',",
          "96:                 \"parentId\" =>  null,",
          "97:                 \"order\" =>  null",
          "98:             ];",
          "99:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/menus/item/add\"), $request_data);",
          "100:             $response->assertSuccessful();",
          "102:             $response_menu_item = $response->json('data');",
          "103:             $menu_item_id = $response_menu_item['id'];",
          "104:             $menu_item = MenuItem::find($menu_item_id);",
          "106:             $this->assertNotEmpty($menu_item);",
          "107:             $this->assertTrue($menu_item['menu_id'] == $response_menu_item['menuId']);",
          "108:             $this->assertTrue($menu_item['title'] == $response_menu_item['title']);",
          "109:             $this->assertTrue($menu_item['url'] == $response_menu_item['url']);",
          "110:             $this->assertTrue($menu_item['target'] == $response_menu_item['target']);",
          "111:             $this->assertTrue($menu_item['icon_class'] == $response_menu_item['iconClass']);",
          "112:             $this->assertTrue($menu_item['color'] == $response_menu_item['color']);",
          "113:             $this->assertTrue($menu_item['parent_id'] == $response_menu_item['parentId']);",
          "114:             $this->assertTrue($menu_item['order'] == $response_menu_item['order']);",
          "116:             $menu_items[] = [",
          "117:                 'menu_id' => $menu->id,",
          "118:                 'menu_item_id' => $menu_item_id,",
          "119:             ];",
          "120:         }",
          "122:         CallHelperTest::setCache(self::$KEY_DATA_CREATED_MENU_ITEMS, $menu_items);",
          "123:     }",
          "125:     public function testMenuItemEdit()",
          "126:     {",
          "127:         $data_created_menu_items = CallHelperTest::getCache(self::$KEY_DATA_CREATED_MENU_ITEMS);",
          "129:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "130:             $request_data = [",
          "131:                 'menuItemId' => $menu_item_id,",
          "132:                 \"menuId\" =>  $menu_id,",
          "133:                 \"title\" =>  Str::random(10),",
          "134:                 \"url\" =>  \"/\" . Str::random(10),",
          "135:                 \"target\" =>  \"_self\",",
          "136:                 \"iconClass\" =>  'add',",
          "137:                 \"color\" =>  '#OOOOOO',",
          "138:             ];",
          "140:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/edit\"), $request_data);",
          "141:             $response->assertSuccessful();",
          "143:             $menu_item = MenuItem::find($menu_item_id)->toArray();",
          "144:             $this->assertNotEmpty($menu_item);",
          "145:             $this->assertTrue($menu_item['menu_id'] == $request_data['menuId']);",
          "146:             $this->assertTrue($menu_item['title'] == $request_data['title']);",
          "147:             $this->assertTrue($menu_item['url'] == $request_data['url']);",
          "148:             $this->assertTrue($menu_item['target'] == $request_data['target']);",
          "149:             $this->assertTrue($menu_item['icon_class'] == $request_data['iconClass']);",
          "150:             $this->assertTrue($menu_item['color'] == $request_data['color']);",
          "151:         }",
          "152:     }",
          "154:     public function testMenuItemRead()",
          "155:     {",
          "156:         $data_created_menu_items = CallHelperTest::getCache(self::$KEY_DATA_CREATED_MENU_ITEMS);",
          "158:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "160:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/read\"), [",
          "161:                 'menu_id' => $menu_id,",
          "162:                 'menu_item_id' => $menu_item_id,",
          "163:             ]);",
          "164:             $response->assertSuccessful();",
          "166:             $response_menu_item = $response->json('data.menuItem');",
          "168:             $menu_item = MenuItem::find($menu_item_id)->toArray();",
          "169:             $this->assertNotEmpty($menu_item);",
          "170:             $this->assertTrue($menu_item['menu_id'] == $response_menu_item['menuId']);",
          "171:             $this->assertTrue($menu_item['title'] == $response_menu_item['title']);",
          "172:             $this->assertTrue($menu_item['url'] == $response_menu_item['url']);",
          "173:             $this->assertTrue($menu_item['target'] == $response_menu_item['target']);",
          "174:             $this->assertTrue($menu_item['icon_class'] == $response_menu_item['iconClass']);",
          "175:             $this->assertTrue($menu_item['color'] == $response_menu_item['color']);",
          "176:         }",
          "177:     }",
          "179:     public function testMenuItemArrangeItems()",
          "180:     {",
          "181:         $data_created_menu_items = CallHelperTest::getCache(self::$KEY_DATA_CREATED_MENU_ITEMS);",
          "182:         $menuId = $data_created_menu_items[0]['menu_id'];",
          "183:         $menu_items = [];",
          "184:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "185:             $menu_items[] = MenuItem::find($menu_item_id)->toArray();",
          "186:         }",
          "188:         $menu_items = collect($menu_items)->map(function ($item) {",
          "189:             return [",
          "190:                 'id' => $item['id'],",
          "191:             ];",
          "192:         })->toArray();",
          "194:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/arrange-items\"), [",
          "195:             'menuId' => $menuId,",
          "196:             'menuItems' => (array) $menu_items,",
          "197:         ]);",
          "198:         $response->assertSuccessful();",
          "200:         foreach ($menu_items as $index => $menu_item) {",
          "201:             $order = $index + 1;",
          "202:             $menu_item_id = $menu_item['id'];",
          "204:             $menu_item = MenuItem::find($menu_item_id);",
          "205:             $this->assertNotEmpty($menu_item);",
          "206:             $this->assertTrue($menu_item['order'] == $order);",
          "207:         }",
          "208:     }",
          "210:     public function testMenuItemDelete()",
          "211:     {",
          "212:         $data_created_menu_items = CallHelperTest::getCache(self::$KEY_DATA_CREATED_MENU_ITEMS);",
          "213:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "214:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/delete\"), [",
          "215:                 \"menuId\" =>  $menu_id,",
          "216:                 \"menuItemId\" =>  $menu_item_id",
          "217:             ]);",
          "218:             $response->assertSuccessful();",
          "220:             $menu_item = MenuItem::find($menu_item_id);",
          "221:             $this->assertEmpty($menu_item);",
          "222:         }",
          "223:     }",
          "225:     public function testMenuItemGetPermission()",
          "226:     {",
          "228:         $permission_keys = Permission::get()->map(function ($item) {",
          "229:             return $item->key;",
          "230:         })->toArray();",
          "233:         $menus = Menu::all();",
          "234:         foreach ($menus as $index => $menu) {",
          "235:             shuffle($permission_keys);",
          "236:             $permission_menu_keys = array_slice($permission_keys, 0, rand(1, 5));",
          "237:             $permissions = join(\",\", $permission_menu_keys);",
          "239:             $menu_id = $menu->id;",
          "240:             $create_data = [",
          "241:                 \"menu_id\" =>  $menu_id,",
          "242:                 \"title\" =>  Str::random(10),",
          "243:                 \"url\" =>  Str::random(10),",
          "244:                 \"target\" =>  \"_self\",",
          "245:                 \"icon_class\" =>  'add',",
          "246:                 \"color\" =>  '#FFFFFF',",
          "247:                 'order' => 1,",
          "248:                 \"permissions\" => $permissions,",
          "249:             ];",
          "250:             $menu_item = MenuItem::create($create_data);",
          "252:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/permissions\"), [",
          "253:                 'menu_id' => $menu_id,",
          "254:                 \"menu_item_id\" => $menu_item->id",
          "255:             ]);",
          "256:             $response->assertSuccessful();",
          "258:             $response_menu_item_permissions = $response->json('data.menuItemPermissions');",
          "259:             $response_menu_item_permissions = collect($response_menu_item_permissions)->filter(function ($item) {",
          "260:                 return $item['selected'];",
          "261:             })->each(function ($permission) use ($permission_menu_keys) {",
          "262:                 $permission_key = $permission['key'];",
          "263:                 $this->assertTrue(in_array($permission_key, $permission_menu_keys));",
          "264:             });",
          "266:             $menu_item->delete();",
          "267:         }",
          "268:     }",
          "270:     public function testMenuItemEditPermission()",
          "271:     {",
          "272:         $menu_permissions = Permission::get()->toArray();",
          "274:         $menus = Menu::all();",
          "275:         foreach ($menus as $index => $menu) {",
          "276:             shuffle($menu_permissions);",
          "277:             $rand_menu_permissions = array_slice($menu_permissions, 0, rand(1, 5));",
          "279:             $permission_menu_ids = collect($rand_menu_permissions)->map(function ($item) {",
          "280:                 return $item['id'];",
          "281:             })->toArray();",
          "283:             $permission_menu_keys = collect($rand_menu_permissions)->map(function ($item) {",
          "284:                 return $item['key'];",
          "285:             })->toArray();",
          "286:             $permission_menu_keys = join(\",\", $permission_menu_keys);",
          "288:             $menu_id = $menu->id;",
          "289:             $create_data = [",
          "290:                 \"menu_id\" =>  $menu_id,",
          "291:                 \"title\" =>  Str::random(10),",
          "292:                 \"url\" =>  Str::random(10),",
          "293:                 \"target\" =>  \"_self\",",
          "294:                 \"icon_class\" =>  'add',",
          "295:                 \"color\" =>  '#FFFFFF',",
          "296:                 'order' => 1,",
          "297:                 \"permissions\" => null,",
          "298:             ];",
          "299:             $menu_item = MenuItem::create($create_data);",
          "301:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/permissions\"), [",
          "302:                 \"menuId\" => $menu_id,",
          "303:                 \"menuItemId\" => $menu_item->id,",
          "304:                 \"permissions\" => (array) $permission_menu_ids,",
          "305:             ]);",
          "306:             $response->assertSuccessful();",
          "308:             $menu_item = MenuItem::find($menu_item->id);",
          "309:             $this->assertNotEmpty($menu_item->permissions);",
          "310:             $menu_item_permissions = explode(\",\", $menu_item->permissions);",
          "312:             foreach ($rand_menu_permissions as $index => $rand_menu_permission) {",
          "313:                 $menu_item_permission_key = $rand_menu_permission['key'] ;",
          "315:                 $this->assertTrue(in_array($menu_item_permission_key, $menu_item_permissions));",
          "316:             }",
          "318:             $menu_item->delete();",
          "319:         }",
          "320:     }",
          "322:     public function testFinish()",
          "323:     {",
          "324:         CallHelperTest::clearCache();",
          "325:         CallHelperTest::handleDeleteUserAdmin();",
          "326:         $this->assertTrue(true);",
          "327:     }",
          "328: }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiMenuTest.php||tests/Feature/BadasoApiMenuTest.php": [
          "File: tests/Feature/BadasoApiMenuTest.php -> tests/Feature/BadasoApiMenuTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "5: use Tests\\TestCase;",
          "6: use Illuminate\\Support\\Str;",
          "7: use Uasoft\\Badaso\\Models\\Menu;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "9: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "10: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "12: class BadasoApiMenuTest extends TestCase",
          "13: {",
          "14:     public static $KEY_MENU_LAST_CREATED_ID = 'MENU_LAST_CREATED_ID';",
          "16:     public function testStartInit()",
          "17:     {",
          "19:         CallHelperTest::handleUserAdminAuthorize($this);",
          "20:     }",
          "22:     public function testBrowseMenu()",
          "23:     {",
          "24:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus\"));",
          "25:         $response->assertSuccessful();",
          "27:         $response_menus = $response->json('data.menus');",
          "28:         foreach ($response_menus as $index => $response_menu) {",
          "29:             $menu_id = $response_menu['id'];",
          "30:             $menu = Menu::find($menu_id);",
          "32:             $this->assertNotEmpty($menu);",
          "33:             $this->assertTrue($response_menu['key'] == $menu['key']);",
          "34:             $this->assertTrue($response_menu['displayName'] == $menu['display_name']);",
          "35:             $this->assertTrue($response_menu['icon'] == $menu['icon']);",
          "36:             $this->assertTrue($response_menu['order'] == $menu['order']);",
          "37:             $this->assertTrue($response_menu['isExpand'] == $menu['is_expand']);",
          "38:             $this->assertTrue($response_menu['isShowHeader'] == $menu['is_show_header']);",
          "39:         }",
          "40:     }",
          "42:     public function testReadMenu()",
          "43:     {",
          "44:         $menus = Menu::all();",
          "45:         foreach ($menus as $index => $menu) {",
          "46:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus/read\"), [",
          "47:                 'menu_id' => $menu->id,",
          "48:             ]);",
          "49:             $response->assertSuccessful();",
          "50:             $response_menu = $response->json('data.menu');",
          "52:             $this->assertTrue($response_menu['key'] == $menu['key']);",
          "53:             $this->assertTrue($response_menu['displayName'] == $menu['display_name']);",
          "54:             $this->assertTrue($response_menu['icon'] == $menu['icon']);",
          "55:             $this->assertTrue($response_menu['order'] == $menu['order']);",
          "56:             $this->assertTrue($response_menu['isExpand'] == $menu['is_expand']);",
          "57:             $this->assertTrue($response_menu['isShowHeader'] == $menu['is_show_header']);",
          "58:         }",
          "59:     }",
          "61:     public function testAddMenu()",
          "62:     {",
          "63:         $request_data = [",
          "64:             \"key\" => Str::uuid(),",
          "65:             \"displayName\" => Str::random(20),",
          "66:             \"icon\" => 'add',",
          "67:         ];",
          "69:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/menus/add\"), $request_data);",
          "70:         $response->assertSuccessful();",
          "72:         $menu_id = $response->json('data.id');",
          "73:         $menu = Menu::find($menu_id);",
          "75:         $this->assertNotEmpty($menu);",
          "76:         $this->assertTrue($menu['key'] == $request_data['key']);",
          "77:         $this->assertTrue($menu['display_name'] == $request_data['displayName']);",
          "78:         $this->assertTrue($menu['icon'] == $request_data['icon']);",
          "80:         CallHelperTest::setCache(self::$KEY_MENU_LAST_CREATED_ID, $menu_id);",
          "81:     }",
          "83:     public function testEditMenu()",
          "84:     {",
          "85:         $menu_id = CallHelperTest::getCache(self::$KEY_MENU_LAST_CREATED_ID);",
          "86:         $menu = Menu::find($menu_id);",
          "87:         $request_data = [",
          "88:             \"key\" => $menu->key,",
          "89:             \"displayName\" => Str::random(20),",
          "90:             \"icon\" => 'add',",
          "91:             'menu_id' => $menu_id,",
          "92:         ];",
          "94:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"PUT\", CallHelperTest::getUrlApiV1Prefix(\"/menus/edit\"), $request_data);",
          "95:         $response->assertSuccessful();",
          "97:         $menu = Menu::find($menu_id);",
          "99:         $this->assertNotEmpty($menu);",
          "100:         $this->assertTrue($menu['key'] == $request_data['key']);",
          "101:         $this->assertTrue($menu['display_name'] == $request_data['displayName']);",
          "102:         $this->assertTrue($menu['icon'] == $request_data['icon']);",
          "103:     }",
          "105:     public function testDeleteMenu()",
          "106:     {",
          "107:         $menu_id = CallHelperTest::getCache(self::$KEY_MENU_LAST_CREATED_ID);",
          "109:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/menus/delete\"), [",
          "110:             \"menu_id\" => $menu_id,",
          "111:         ]);",
          "112:         $response->assertSuccessful();",
          "114:         $menu = Menu::find($menu_id);",
          "115:         $this->assertEmpty($menu);",
          "116:     }",
          "118:     public function testArrangeMenu()",
          "119:     {",
          "120:         $order = [];",
          "121:         for ($i = 0; $i <= 5; $i++) {",
          "122:             $request_data = [",
          "123:                 \"key\" => Str::uuid(),",
          "124:                 \"display_name\" => Str::random(20),",
          "125:                 \"icon\" => 'add',",
          "126:             ];",
          "128:             $order[] = Menu::create($request_data);",
          "129:         }",
          "130:         $order = collect($order)->map(function ($item) {",
          "131:             return $item->id;",
          "132:         })->toArray();",
          "133:         shuffle($order);",
          "135:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/menu-options\"), [",
          "136:             'order' => (array) $order,",
          "137:         ]);",
          "138:         $response->assertSuccessful();",
          "140:         foreach ($order as $index => $menu_id) {",
          "141:             $menu = Menu::find($menu_id);",
          "142:             $this->assertTrue($menu->order == $index+1);",
          "144:             $menu->delete();",
          "145:         }",
          "146:     }",
          "148:     public function testFinish()",
          "149:     {",
          "150:         CallHelperTest::clearCache();",
          "151:         CallHelperTest::handleDeleteUserAdmin();",
          "152:         $this->assertTrue(true);",
          "153:     }",
          "154: }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiPermissionTest.php||tests/Feature/BadasoApiPermissionTest.php": [
          "File: tests/Feature/BadasoApiPermissionTest.php -> tests/Feature/BadasoApiPermissionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "5: use Tests\\TestCase;",
          "6: use Illuminate\\Support\\Str;",
          "7: use Uasoft\\Badaso\\Models\\Permission;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "10: class BadasoApiPermissionTest extends TestCase",
          "11: {",
          "12:     public static $KEY_PERMISSION_LAST_CREATED_ID = 'PERMISSION_LAST_CREATED_ID';",
          "14:     public function testStartInit()",
          "15:     {",
          "17:         CallHelperTest::handleUserAdminAuthorize($this);",
          "18:     }",
          "20:     public function testBrowsePermission()",
          "21:     {",
          "22:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/permissions\"));",
          "23:         $response->assertSuccessful();",
          "24:     }",
          "26:     public function testReadPermission()",
          "27:     {",
          "28:         $permissions = Permission::all();",
          "29:         foreach ($permissions as $key => $permission) {",
          "30:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/permissions/read\"), [",
          "31:                 'id' => $permission->id,",
          "32:             ]);",
          "33:             $response->assertSuccessful();",
          "35:             $response_data = $response->json('data.permission');",
          "37:             $this->assertSame($permission->key, $response_data['key']);",
          "38:             $this->assertSame($permission->table_name, $response_data['tableName']);",
          "39:             $this->assertSame($permission->always_allow, $response_data['alwaysAllow']);",
          "40:             $this->assertSame($permission->is_public, $response_data['isPublic']);",
          "41:         }",
          "42:     }",
          "44:     public function testAddPermission()",
          "45:     {",
          "46:         $request_data = [",
          "47:             'always_allow' =>  true,",
          "48:             'description' =>  Str::uuid(),",
          "49:             'is_public' =>  true,",
          "50:             'key' =>  Str::uuid(),",
          "51:         ];",
          "53:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/permissions/add\"), $request_data);",
          "54:         $response->assertSuccessful();",
          "56:         $permission_id = $response->json('data.id');",
          "57:         $permission = Permission::find($permission_id)->toArray();",
          "59:         $this->assertNotEmpty($permission);",
          "60:         foreach ($request_data as $key => $permission_data) {",
          "61:             $this->assertTrue($permission[$key] == $permission_data);",
          "62:         }",
          "64:         CallHelperTest::setCache(self::$KEY_PERMISSION_LAST_CREATED_ID, $permission_id);",
          "65:     }",
          "67:     public function testEditPermission()",
          "68:     {",
          "69:         $permission_id = CallHelperTest::getCache(self::$KEY_PERMISSION_LAST_CREATED_ID);",
          "70:         $request_data = [",
          "71:             'always_allow' =>  true,",
          "72:             'description' =>  Str::uuid(),",
          "73:             'is_public' =>  true,",
          "74:             'key' =>  Str::uuid(),",
          "75:             'id' => $permission_id,",
          "76:         ];",
          "78:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/permissions/edit\"), $request_data);",
          "79:         $response->assertSuccessful();",
          "81:         $permission_id = $response->json('data.id');",
          "82:         $permission = Permission::find($permission_id)->toArray();",
          "84:         $this->assertNotEmpty($permission);",
          "85:         foreach ($request_data as $key => $permission_data) {",
          "86:             $this->assertTrue($permission[$key] == $permission_data);",
          "87:         }",
          "88:     }",
          "90:     public function testDeletePermission()",
          "91:     {",
          "92:         $permission_id = CallHelperTest::getCache(self::$KEY_PERMISSION_LAST_CREATED_ID);",
          "94:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/permissions/delete\"), [",
          "95:             'id' => $permission_id,",
          "96:         ]);",
          "97:         $response->assertSuccessful();",
          "99:         $permission = Permission::find($permission_id);",
          "100:         $this->assertEmpty($permission);",
          "101:     }",
          "103:     public function testDeleteMultiplePermission()",
          "104:     {",
          "105:         $maximal_count = 10;",
          "106:         $ids = [] ;",
          "107:         for ($i = 1; $i <= $maximal_count; $i++) {",
          "108:             $request_data = [",
          "109:                 'always_allow' =>  true,",
          "110:                 'description' =>  Str::uuid(),",
          "111:                 'is_public' =>  true,",
          "112:                 'key' =>  Str::uuid(),",
          "113:             ];",
          "115:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/permissions/add\"), $request_data);",
          "116:             $response->assertSuccessful();",
          "118:             $ids[] = $response->json('data.id');",
          "119:         }",
          "121:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/permissions/delete-multiple\"), [",
          "122:             'ids' => join(\",\", $ids),",
          "123:         ]);",
          "124:         $response->assertSuccessful();",
          "126:         $permissions = Permission::whereIn('id', $ids)->get();",
          "127:         $permission_count = $permissions->count();",
          "128:         $this->assertTrue($permission_count == 0);",
          "129:     }",
          "131:     public function testFinish()",
          "132:     {",
          "133:         $this->assertTrue(true);",
          "134:     }",
          "135: }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiRolePermissionTest.php||tests/Feature/BadasoApiRolePermissionTest.php": [
          "File: tests/Feature/BadasoApiRolePermissionTest.php -> tests/Feature/BadasoApiRolePermissionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "5: use Tests\\TestCase;",
          "6: use Illuminate\\Support\\Str;",
          "7: use Uasoft\\Badaso\\Models\\Role;",
          "8: use Uasoft\\Badaso\\Models\\Permission;",
          "9: use Uasoft\\Badaso\\Models\\RolePermission;",
          "10: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "11: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "12: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "14: class BadasoApiRolePermissionTest extends TestCase",
          "15: {",
          "16:     public function testStartInit()",
          "17:     {",
          "19:         CallHelperTest::handleUserAdminAuthorize($this);",
          "20:     }",
          "22:     public function testRoleInPermissions()",
          "23:     {",
          "25:         $roles = Role::all();",
          "26:         foreach ($roles as $index => $role) {",
          "27:             $role_id = $role->id;",
          "28:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/role-permissions/all-permission\"), [",
          "29:                 'roleId' => $role_id,",
          "30:             ]);",
          "31:             $response->assertSuccessful();",
          "33:             $response_data = $response->json('data.rolePermissions');",
          "34:             foreach ($response_data as $index => $response_permission) {",
          "35:                 $permission_id = $response_permission['id'];",
          "36:                 $permission = Permission::find($permission_id)->toArray();",
          "38:                 $this->assertNotEmpty($permission);",
          "39:                 $this->assertTrue($permission['key'] == $response_permission['key']);",
          "40:                 $this->assertTrue($permission['description'] == $response_permission['description']);",
          "41:                 $this->assertTrue($permission['table_name'] == $response_permission['tableName']);",
          "42:                 $this->assertTrue($permission['always_allow'] == $response_permission['alwaysAllow']);",
          "43:                 $this->assertTrue($permission['is_public'] == $response_permission['isPublic']);",
          "44:             }",
          "45:         }",
          "46:     }",
          "48:     public function testRolePermissionAll()",
          "49:     {",
          "50:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/role-permissions/all\"));",
          "51:         $response->assertSuccessful();",
          "53:         $response_data_permissions = $response->json('data.rolePermissions');",
          "54:         foreach ($response_data_permissions as $index => $response_data_permission) {",
          "55:             $permission_id = $response_data_permission['id'];",
          "56:             $role_permission = RolePermission::find($permission_id)->toArray();",
          "58:             $this->assertTrue($role_permission['role_id'] == $response_data_permission['roleId']);",
          "59:             $this->assertTrue($role_permission['permission_id'] == $response_data_permission['permissionId']);",
          "60:         }",
          "61:     }",
          "63:     public function testRolePermission()",
          "64:     {",
          "66:         $roles = Role::all();",
          "67:         foreach ($roles as $index => $role) {",
          "68:             $role_id = $role['id'];",
          "69:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/role-permissions\"), [",
          "70:                 'roleId' => $role_id,",
          "71:             ]);",
          "72:             $response->assertSuccessful();",
          "73:             $response_role_permissions = $response->json('data.rolePermissions');",
          "75:             foreach ($response_role_permissions as $index => $response_role_permission) {",
          "76:                 $role_permission_id = $response_role_permission['id'];",
          "77:                 $role_permission = RolePermission::find($role_permission_id);",
          "79:                 $this->assertNotEmpty($role_permission);",
          "80:                 $this->assertTrue($role_permission['role_id'] == $response_role_permission['roleId']);",
          "81:                 $this->assertTrue($role_permission['permission_id'] == $response_role_permission['permissionId']);",
          "82:             }",
          "83:         }",
          "84:     }",
          "86:     public function testAddRolePermissionUser()",
          "87:     {",
          "88:         $role = Role::create([",
          "89:             'name' => Str::random(10),",
          "90:             'display_name' => Str::random(10),",
          "91:             'description' => Str::random(10),",
          "92:         ]);",
          "94:         $role_id = $role->id;",
          "95:         $default_permissions = RolePermission::get()->map(function ($item) {",
          "96:             return $item['permission_id'];",
          "97:         })->values()->toArray();",
          "99:         $request_permissions = $default_permissions;",
          "100:         shuffle($request_permissions);",
          "101:         $request_permissions = array_slice($request_permissions, 0, rand(1, count($request_permissions)));",
          "103:         $request_data = [",
          "104:             'roleId' => $role_id,",
          "105:             'permissions' => $request_permissions,",
          "106:         ];",
          "107:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/role-permissions/add-edit\"), $request_data);",
          "108:         $response->assertSuccessful();",
          "110:         foreach ($request_permissions as $index => $request_permission) {",
          "111:             $role_permission = RolePermission::where('role_id', $role_id)->where('permission_id', $request_permission)->first();",
          "112:             $this->assertNotEmpty($role_permission);",
          "113:         }",
          "115:         foreach ($default_permissions as $key => $default_permission) {",
          "116:             $role_permission = RolePermission::where('role_id', $role_id)->where('permission_id', $default_permission)->first();",
          "117:             if (isset($role_permission)) {",
          "118:                 $role_permission->update([",
          "119:                     'role_id' => $role_id,",
          "120:                     'permission_id' => $default_permission,",
          "121:                 ]);",
          "122:             } else {",
          "123:                 $role_permission = RolePermission::create([",
          "124:                     'role_id' => $role_id,",
          "125:                     'permission_id' => $default_permission,",
          "126:                 ]);",
          "127:             }",
          "128:         }",
          "130:         $role->delete();",
          "131:     }",
          "133:     public function testFinish()",
          "134:     {",
          "135:         CallHelperTest::clearCache();",
          "136:         CallHelperTest::handleDeleteUserAdmin();",
          "137:         $this->assertTrue(true);",
          "138:     }",
          "139: }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiRoleTest.php||tests/Feature/BadasoApiRoleTest.php": [
          "File: tests/Feature/BadasoApiRoleTest.php -> tests/Feature/BadasoApiRoleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "5: use Tests\\TestCase;",
          "6: use Illuminate\\Support\\Str;",
          "7: use Uasoft\\Badaso\\Models\\Role;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "9: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "10: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "12: class BadasoApiRoleTest extends TestCase",
          "13: {",
          "14:     public static $KEY_ROLE_LAST_CREATE_ID = \"ROLE_LAST_CREATE_ID\";",
          "16:     public function testStartInit()",
          "17:     {",
          "19:         CallHelperTest::handleUserAdminAuthorize($this);",
          "20:     }",
          "22:     public function testAddRole()",
          "23:     {",
          "24:         $request_data = [",
          "25:             \"name\" => Str::uuid(),",
          "26:             \"display_name\" => \"Example Display Name\",",
          "27:             \"description\" => \"Example Description\",",
          "28:         ];",
          "29:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/roles/add\"), $request_data);",
          "30:         $response->assertSuccessful();",
          "32:         $role_id = $response->json('data.id');",
          "33:         $role = Role::find($role_id);",
          "35:         $this->assertNotEmpty($role);",
          "36:         $this->assertTrue($role['name'] == $request_data['name']);",
          "37:         $this->assertTrue($role['display_name'] == $request_data['display_name']);",
          "38:         $this->assertTrue($role['description'] == $request_data['description']);",
          "40:         CallHelperTest::setCache(self::$KEY_ROLE_LAST_CREATE_ID, $role_id);",
          "41:     }",
          "43:     public function testReadRole()",
          "44:     {",
          "45:         $role_id = CallHelperTest::getCache(self::$KEY_ROLE_LAST_CREATE_ID);",
          "46:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/roles/read\"), [",
          "47:             'id' => $role_id,",
          "48:         ]);",
          "49:         $response->assertSuccessful();",
          "51:         $response_data = $response->json('data.role');",
          "53:         $role = Role::find($role_id)->toArray();",
          "55:         $this->assertNotEmpty($role) ;",
          "56:         $this->assertTrue($role['name'] == $response_data['name']);",
          "57:         $this->assertTrue($role['display_name'] == $response_data['displayName']);",
          "58:         $this->assertTrue($role['description'] == $response_data['description']);",
          "59:     }",
          "61:     public function testEditRole()",
          "62:     {",
          "63:         $role_id = CallHelperTest::getCache(self::$KEY_ROLE_LAST_CREATE_ID);",
          "64:         $request_data = [",
          "65:             'id' => $role_id,",
          "66:             \"name\" => Str::uuid(),",
          "67:             \"display_name\" => \"Example Display Name\",",
          "68:             \"description\" => \"Example Description\",",
          "69:         ];",
          "70:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"PUT\", CallHelperTest::getUrlApiV1Prefix(\"/roles/edit\"), $request_data);",
          "71:         $response->assertSuccessful();",
          "73:         $response_data = $response->json('data');",
          "75:         $role = Role::find($role_id)->toArray();",
          "77:         $this->assertTrue($role['name'] == $response_data['name']);",
          "78:         $this->assertTrue($role['display_name'] == $response_data['displayName']);",
          "79:         $this->assertTrue($role['description'] == $response_data['description']);",
          "80:     }",
          "82:     public function testBrowseRole()",
          "83:     {",
          "84:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/roles\"));",
          "85:         $response->assertSuccessful();",
          "87:         $response_data = $response->json('data.roles');",
          "89:         $roles = Role::all();",
          "90:         foreach ($roles as $index => $role) {",
          "91:             $this->assertSame($response_data[$index]['id'], $role['id']);",
          "92:             $this->assertSame($response_data[$index]['name'], $role['name']);",
          "93:             $this->assertSame($response_data[$index]['displayName'], $role['display_name']);",
          "94:             $this->assertSame($response_data[$index]['description'], $role['description']);",
          "95:         }",
          "96:     }",
          "98:     public function testDeleteRole()",
          "99:     {",
          "100:         $request_data = [",
          "101:             \"name\" => Str::uuid(),",
          "102:             \"display_name\" => \"Example Display Name\",",
          "103:             \"description\" => \"Example Description\",",
          "104:         ];",
          "105:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/roles/add\"), $request_data);",
          "106:         $response->assertSuccessful();",
          "108:         $role_id = $response->json('data.id');",
          "109:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/roles/delete\"), [",
          "110:             'id' => $role_id,",
          "111:         ]);",
          "112:         $response->assertSuccessful();",
          "114:         $role = Role::find($role_id) ;",
          "115:         $this->assertEmpty($role);",
          "116:     }",
          "118:     public function testDeleteMultipleRole()",
          "119:     {",
          "120:         $role_id = CallHelperTest::getCache(self::$KEY_ROLE_LAST_CREATE_ID);",
          "121:         $maximal_count = 10;",
          "122:         $ids = [$role_id] ;",
          "123:         for($i=1; $i<= $maximal_count; $i++){",
          "124:             $request_data = [",
          "125:                 \"name\" => Str::uuid(),",
          "126:                 \"display_name\" => \"Example Display Name $i\",",
          "127:                 \"description\" => \"Example Description\",",
          "128:             ];",
          "129:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/roles/add\"), $request_data);",
          "130:             $response->assertSuccessful();",
          "132:             $role_id = $response->json('data.id');",
          "133:             $ids[] = $role_id ;",
          "134:         }",
          "136:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/roles/delete-multiple\"), [",
          "137:             \"ids\" => join(\",\", $ids),",
          "138:         ]);",
          "139:         $response->assertSuccessful();",
          "141:         $roles = Role::whereIn('id', $ids)->get();",
          "142:         $this->assertTrue($roles->count() == 0);",
          "143:     }",
          "145:     public function testFinish()",
          "146:     {",
          "147:         CallHelperTest::clearCache();",
          "148:         CallHelperTest::handleDeleteUserAdmin();",
          "149:         $this->assertTrue(true);",
          "150:     }",
          "151: }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiUserRoleTest.php||tests/Feature/BadasoApiUserRoleTest.php": [
          "File: tests/Feature/BadasoApiUserRoleTest.php -> tests/Feature/BadasoApiUserRoleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "5: use Tests\\TestCase;",
          "6: use Illuminate\\Support\\Str;",
          "7: use Uasoft\\Badaso\\Models\\Role;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "9: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "10: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "11: use Illuminate\\Support\\Facades\\Hash;",
          "12: use Uasoft\\Badaso\\Models\\User;",
          "13: use Uasoft\\Badaso\\Models\\UserRole;",
          "15: class BadasoApiUserRoleTest extends TestCase",
          "16: {",
          "18:     public function testStartInit()",
          "19:     {",
          "21:         CallHelperTest::handleUserAdminAuthorize($this);",
          "22:     }",
          "24:     public function testAddUserRole()",
          "25:     {",
          "26:         $roles = Role::all();",
          "27:         $role_ids = $roles->map(function ($item) {",
          "28:             return $item->id;",
          "29:         })->toArray();",
          "31:         $name = Str::random(10);",
          "32:         $create_user = [",
          "33:             'name' => $name,",
          "34:             'username' => $name,",
          "35:             'email' => $name . \"@gmail.com\",",
          "36:             'password' => Hash::make($name),",
          "37:         ];",
          "38:         $user = User::create($create_user);",
          "40:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/user-roles/add-edit\"), [",
          "41:             \"userId\" => $user->id,",
          "42:             \"roles\" => (array) $role_ids,",
          "43:         ]);",
          "44:         $response->assertSuccessful();",
          "46:         $user_roles = [];",
          "47:         foreach ($role_ids as $key => $role_id) {",
          "48:             $user_role = UserRole::where('user_id', $user->id)->where('role_id', $role_id)->first();",
          "49:             $this->assertNotEmpty($user_role);",
          "51:             $user_role->delete();",
          "52:         }",
          "53:         $user->delete();",
          "54:     }",
          "56:     public function testUserRoleAll()",
          "57:     {",
          "58:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/user-roles/all\"));",
          "59:         $response->assertSuccessful();",
          "61:         $response_user_roles = $response->json('data.userRoles');",
          "62:         foreach ($response_user_roles as $index => $response_user_role) {",
          "63:             $user_role = UserRole::where('user_id', $response_user_role['userId'])->where('role_id', $response_user_role['roleId'])->first();",
          "64:             $this->assertNotEmpty($user_role);",
          "65:         }",
          "66:     }",
          "68:     public function testUserRole()",
          "69:     {",
          "70:         $roles = Role::all();",
          "71:         $name = Str::random(10);",
          "72:         $create_user = [",
          "73:             'name' => $name,",
          "74:             'username' => $name,",
          "75:             'email' => $name . \"@gmail.com\",",
          "76:             'password' => Hash::make($name),",
          "77:         ];",
          "78:         $user = User::create($create_user);",
          "80:         $user_roles = [];",
          "81:         foreach ($roles as $index => $role) {",
          "82:             $user_roles[] = UserRole::create([",
          "83:                 'user_id' => $user->id,",
          "84:                 'role_id' => $role->id,",
          "85:             ]);",
          "86:         }",
          "88:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/user-roles\"), [",
          "89:             'userId' => $user->id,",
          "90:         ]);",
          "91:         $response->assertSuccessful();",
          "93:         $response_user_roles = $response->json('data.userRoles');",
          "94:         foreach ($response_user_roles as $key => $response_user_role) {",
          "95:             $role_id = $response_user_role['roleId'];",
          "97:             $user_role = collect($user_roles)->where('role_id', $role_id)->first();",
          "98:             $this->assertNotEmpty($user_role);",
          "99:         }",
          "101:         foreach ($user_roles as $key => $user_role) {",
          "102:             $user_role->delete();",
          "103:         }",
          "104:         $user->delete();",
          "105:     }",
          "107:     public function testUserInRole()",
          "108:     {",
          "109:         $roles = Role::all();",
          "110:         $name = Str::random(10);",
          "111:         $create_user = [",
          "112:             'name' => $name,",
          "113:             'username' => $name,",
          "114:             'email' => $name . \"@gmail.com\",",
          "115:             'password' => Hash::make($name),",
          "116:         ];",
          "117:         $user = User::create($create_user);",
          "119:         $user_roles = [];",
          "120:         foreach ($roles as $index => $role) {",
          "121:             $user_roles[] = UserRole::create([",
          "122:                 'user_id' => $user->id,",
          "123:                 'role_id' => $role->id,",
          "124:             ]);",
          "125:         }",
          "127:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/user-roles/all-role\"), [",
          "128:             'userId' => $user->id,",
          "129:         ]);",
          "130:         $response->assertSuccessful();",
          "132:         $response_user_roles = $response->json('data.userRoles');",
          "134:         foreach ($user_roles as $key => $user_role) {",
          "135:             $user_role_id = $user_role->role_id ;",
          "137:             $response_user_role = collect($response_user_roles)->where('id', $user_role_id)->first();",
          "138:             $this->assertNotEmpty($response_user_role);",
          "139:             $this->assertTrue($response_user_role['selected'] == 1);",
          "141:             $user_role->delete();",
          "142:         }",
          "143:         $user->delete();",
          "144:     }",
          "146:     public function testFinish()",
          "147:     {",
          "148:         CallHelperTest::clearCache();",
          "149:         CallHelperTest::handleDeleteUserAdmin();",
          "150:         $this->assertTrue(true);",
          "151:     }",
          "152: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}