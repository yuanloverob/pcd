{
  "cve_id": "CVE-2022-3866",
  "cve_desc": "HashiCorp Nomad and Nomad Enterprise 1.4.0 up to 1.4.1 workload identity token can list non-sensitive metadata for paths under nomad/ that belong to other jobs in the same namespace. Fixed in 1.4.2.",
  "repo": "hashicorp/nomad",
  "patch_hash": "3b24f26603e2b116ba324101afa8a7e3a7a769a5",
  "patch_info": {
    "commit_hash": "3b24f26603e2b116ba324101afa8a7e3a7a769a5",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/3b24f26603e2b116ba324101afa8a7e3a7a769a5",
    "files": [
      ".changelog/15012.txt",
      ".semgrep/rpc_endpoint.yml",
      "nomad/variables_endpoint.go",
      "nomad/variables_endpoint_test.go"
    ],
    "message": "variables: fix filter on List RPC\n\nThe List RPC correctly authorized against the prefix argument. But when\nfiltering results underneath the prefix, it only checked authorization for\nstandard ACL tokens and not Workload Identity. This results in WI tokens being\nable to read List results (metadata only: variable paths and timestamps) for\nvariables under the `nomad/` prefix that belong to other jobs in the same\nnamespace.\n\nFixes the filtering and split the `handleMixedAuthEndpoint` function into\nseparate authentication and authorization steps so that we don't need to\nre-verify the claim token on each filtered object.\n\nAlso includes:\n* update semgrep rule for mixed auth endpoints\n* variables: List returns empty set when all results are filtered",
    "before_after_code_files": [
      "nomad/variables_endpoint.go||nomad/variables_endpoint.go",
      "nomad/variables_endpoint_test.go||nomad/variables_endpoint_test.go"
    ]
  },
  "patch_diff": {
    "nomad/variables_endpoint.go||nomad/variables_endpoint.go": [
      "File: nomad/variables_endpoint.go -> nomad/variables_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "218:  }",
      "219:  defer metrics.MeasureSince([]string{\"nomad\", \"variables\", \"read\"}, time.Now())",
      "222:   acl.PolicyRead, args.Path)",
      "223:  if err != nil {",
      "224:   return err",
      "",
      "[Removed Lines]",
      "221:  _, err := sv.handleMixedAuthEndpoint(args.QueryOptions,",
      "",
      "[Added Lines]",
      "221:  _, _, err := sv.handleMixedAuthEndpoint(args.QueryOptions,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:   return sv.listAllVariables(args, reply)",
      "270:  }",
      "274:  if err != nil {",
      "275:   return err",
      "276:  }",
      "",
      "[Removed Lines]",
      "272:  aclObj, err := sv.handleMixedAuthEndpoint(args.QueryOptions,",
      "273:   acl.PolicyList, args.Prefix)",
      "",
      "[Added Lines]",
      "272:  aclObj, claims, err := sv.authenticate(args.QueryOptions)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "299:    filters := []paginator.Filter{",
      "300:     paginator.GenericFilter{",
      "301:      Allow: func(raw interface{}) (bool, error) {",
      "305:      },",
      "306:     },",
      "307:    }",
      "",
      "[Removed Lines]",
      "302:       sv := raw.(*structs.VariableEncrypted)",
      "303:       return strings.HasPrefix(sv.Path, args.Prefix) &&",
      "304:        (aclObj == nil || aclObj.AllowVariableOperation(sv.Namespace, sv.Path, acl.PolicyList)), nil",
      "",
      "[Added Lines]",
      "301:       v := raw.(*structs.VariableEncrypted)",
      "302:       if !strings.HasPrefix(v.Path, args.Prefix) {",
      "303:        return false, nil",
      "304:       }",
      "305:       err := sv.authorize(aclObj, claims, v.Namespace, acl.PolicyList, v.Path)",
      "306:       return err == nil, nil",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "349:  args *structs.VariablesListRequest,",
      "350:  reply *structs.VariablesListResponse) error {",
      "355:  if err != nil {",
      "356:   return err",
      "357:  }",
      "367:   queryOpts: &args.QueryOptions,",
      "368:   queryMeta: &reply.QueryMeta,",
      "369:   run: func(ws memdb.WatchSet, stateStore *state.StateStore) error {",
      "386:    iter, err := stateStore.Variables(ws)",
      "387:    if err != nil {",
      "",
      "[Removed Lines]",
      "348: func (s *Variables) listAllVariables(",
      "354:  aclObj, err := s.srv.ResolveToken(args.AuthToken)",
      "361:  allowFunc := func(ns string) bool {",
      "362:   return aclObj.AllowVariableOperation(ns, \"\", acl.PolicyList)",
      "363:  }",
      "366:  return s.srv.blockingRPC(&blockingOptions{",
      "374:    _, err := allowedNSes(aclObj, stateStore, allowFunc)",
      "375:    switch err {",
      "376:    case structs.ErrPermissionDenied:",
      "377:     reply.Data = make([]*structs.VariableMetadata, 0)",
      "378:     return nil",
      "379:    case nil:",
      "381:    default:",
      "382:     return err",
      "383:    }",
      "",
      "[Added Lines]",
      "350: func (sv *Variables) listAllVariables(",
      "356:  aclObj, claims, err := sv.authenticate(args.QueryOptions)",
      "362:  return sv.srv.blockingRPC(&blockingOptions{",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "396:     paginator.StructsTokenizerOptions{",
      "397:      WithNamespace: true,",
      "398:      WithID:        true,",
      "402:    filters := []paginator.Filter{",
      "403:     paginator.GenericFilter{",
      "404:      Allow: func(raw interface{}) (bool, error) {",
      "408:      },",
      "409:     },",
      "410:    }",
      "",
      "[Removed Lines]",
      "399:     },",
      "400:    )",
      "405:       sv := raw.(*structs.VariableEncrypted)",
      "406:       return strings.HasPrefix(sv.Path, args.Prefix) &&",
      "407:        (aclObj == nil || aclObj.AllowVariableOperation(sv.Namespace, sv.Path, acl.PolicyList)), nil",
      "",
      "[Added Lines]",
      "381:     })",
      "386:       v := raw.(*structs.VariableEncrypted)",
      "387:       if !strings.HasPrefix(v.Path, args.Prefix) {",
      "388:        return false, nil",
      "389:       }",
      "390:       err := sv.authorize(aclObj, claims, v.Namespace, acl.PolicyList, v.Path)",
      "391:       return err == nil, nil",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "414:    paginatorImpl, err := paginator.NewPaginator(iter, tokenizer, filters, args.QueryOptions,",
      "415:     func(raw interface{}) error {",
      "418:      svs = append(svs, &svStub)",
      "419:      return nil",
      "420:     })",
      "",
      "[Removed Lines]",
      "416:      sv := raw.(*structs.VariableEncrypted)",
      "417:      svStub := sv.VariableMetadata",
      "",
      "[Added Lines]",
      "400:      v := raw.(*structs.VariableEncrypted)",
      "401:      svStub := v.VariableMetadata",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "441:   },",
      "442:  })",
      "443: }",
      "",
      "[Removed Lines]",
      "440:    return s.srv.setReplyQueryMeta(stateStore, state.TableVariables, &reply.QueryMeta)",
      "",
      "[Added Lines]",
      "424:    return sv.srv.setReplyQueryMeta(stateStore, state.TableVariables, &reply.QueryMeta)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "481:  aclObj, err := sv.srv.ResolveToken(args.AuthToken)",
      "482:  if err == nil {",
      "491:  }",
      "492:  if helper.IsUUID(args.AuthToken) {",
      "496:  }",
      "",
      "[Removed Lines]",
      "478: func (sv *Variables) handleMixedAuthEndpoint(args structs.QueryOptions, cap, pathOrPrefix string) (*acl.ACL, error) {",
      "485:   if aclObj != nil {",
      "486:    if !aclObj.AllowVariableOperation(args.RequestNamespace(), pathOrPrefix, cap) {",
      "487:     return nil, structs.ErrPermissionDenied",
      "488:    }",
      "489:   }",
      "490:   return aclObj, nil",
      "495:   return nil, err",
      "",
      "[Added Lines]",
      "462: func (sv *Variables) handleMixedAuthEndpoint(args structs.QueryOptions, cap, pathOrPrefix string) (*acl.ACL, *structs.IdentityClaims, error) {",
      "464:  aclObj, claims, err := sv.authenticate(args)",
      "465:  if err != nil {",
      "466:   return aclObj, claims, err",
      "467:  }",
      "468:  err = sv.authorize(aclObj, claims, args.RequestNamespace(), cap, pathOrPrefix)",
      "469:  if err != nil {",
      "470:   return aclObj, claims, err",
      "471:  }",
      "473:  return aclObj, claims, nil",
      "474: }",
      "476: func (sv *Variables) authenticate(args structs.QueryOptions) (*acl.ACL, *structs.IdentityClaims, error) {",
      "481:   return aclObj, nil, nil",
      "486:   return nil, nil, err",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "502:   metrics.IncrCounter([]string{",
      "503:    \"nomad\", \"variables\", \"invalid_allocation_identity\"}, 1)",
      "504:   sv.logger.Trace(\"allocation identity was not valid\", \"error\", err)",
      "506:  }",
      "513:  }",
      "520:  }",
      "524:  }",
      "526: }",
      "",
      "[Removed Lines]",
      "505:   return nil, structs.ErrPermissionDenied",
      "510:  err = sv.authValidatePrefix(claims, args.RequestNamespace(), pathOrPrefix)",
      "511:  if err == nil {",
      "512:   return aclObj, nil",
      "517:  aclObj, err = sv.srv.ResolveClaims(claims)",
      "518:  if err != nil {",
      "519:   return nil, err // this only returns an error when the state store has gone wrong",
      "521:  if aclObj != nil && aclObj.AllowVariableOperation(",
      "522:   args.RequestNamespace(), pathOrPrefix, cap) {",
      "523:   return aclObj, nil",
      "525:  return nil, structs.ErrPermissionDenied",
      "",
      "[Added Lines]",
      "496:   return nil, nil, structs.ErrPermissionDenied",
      "498:  return nil, claims, nil",
      "499: }",
      "501: func (sv *Variables) authorize(aclObj *acl.ACL, claims *structs.IdentityClaims, ns, cap, pathOrPrefix string) error {",
      "503:  if aclObj == nil && claims == nil {",
      "504:   return nil // ACLs aren't enabled",
      "509:  if aclObj != nil {",
      "510:   if !aclObj.AllowVariableOperation(ns, pathOrPrefix, cap) {",
      "511:    return structs.ErrPermissionDenied",
      "512:   }",
      "513:   return nil",
      "516:  if claims != nil {",
      "519:   err := sv.authValidatePrefix(claims, ns, pathOrPrefix)",
      "520:   if err == nil {",
      "521:    return nil",
      "522:   }",
      "526:   aclObj, err = sv.srv.ResolveClaims(claims)",
      "527:   if err != nil {",
      "528:    return err // this only returns an error when the state store has gone wrong",
      "529:   }",
      "530:   if aclObj != nil && aclObj.AllowVariableOperation(",
      "531:    ns, pathOrPrefix, cap) {",
      "532:    return nil",
      "533:   }",
      "535:  return structs.ErrPermissionDenied",
      "",
      "---------------"
    ],
    "nomad/variables_endpoint_test.go||nomad/variables_endpoint_test.go": [
      "File: nomad/variables_endpoint_test.go -> nomad/variables_endpoint_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:  alloc3.Namespace = ns",
      "51:  alloc3.Job.ParentID = jobID",
      "53:  store := srv.fsm.State()",
      "54:  must.NoError(t, store.UpsertNamespaces(1000, []*structs.Namespace{{Name: ns}}))",
      "55:  must.NoError(t, store.UpsertAllocs(",
      "58:  claims1 := alloc1.ToTaskIdentityClaims(nil, \"web\")",
      "59:  idToken, err := srv.encrypter.SignClaims(claims1)",
      "",
      "[Removed Lines]",
      "56:   structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc1, alloc2, alloc3}))",
      "",
      "[Added Lines]",
      "53:  alloc4 := mock.Alloc()",
      "54:  alloc4.ClientStatus = structs.AllocClientStatusRunning",
      "55:  alloc4.Job.Namespace = ns",
      "56:  alloc4.Namespace = ns",
      "61:   structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc1, alloc2, alloc3, alloc4}))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:  idTokenParts[2] = strings.Join(sig, \"\")",
      "78:  invalidIDToken := strings.Join(idTokenParts, \".\")",
      "80:  policy := mock.ACLPolicy()",
      "81:  policy.Rules = `namespace \"nondefault-namespace\" {",
      "82:   variables {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:  claims4 := alloc4.ToTaskIdentityClaims(alloc4.Job, \"web\")",
      "86:  wiOnlyToken, err := srv.encrypter.SignClaims(claims4)",
      "87:  must.NoError(t, err)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:  must.NoError(t, err)",
      "100:  t.Run(\"terminal alloc should be denied\", func(t *testing.T) {",
      "103:    fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID))",
      "104:   must.EqError(t, err, structs.ErrPermissionDenied.Error())",
      "105:  })",
      "",
      "[Removed Lines]",
      "101:   _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
      "102:    structs.QueryOptions{AuthToken: idToken, Namespace: ns}, \"n/a\",",
      "",
      "[Added Lines]",
      "110:   _, _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
      "111:    structs.QueryOptions{AuthToken: idToken, Namespace: ns}, acl.PolicyList,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:   structs.MsgTypeTestSetup, 1200, []*structs.Allocation{alloc1}))",
      "112:  t.Run(\"wrong namespace should be denied\", func(t *testing.T) {",
      "115:    fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID))",
      "116:   must.EqError(t, err, structs.ErrPermissionDenied.Error())",
      "117:  })",
      "",
      "[Removed Lines]",
      "113:   _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
      "114:    structs.QueryOptions{AuthToken: idToken, Namespace: structs.DefaultNamespace}, \"n/a\",",
      "",
      "[Added Lines]",
      "122:   _, _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
      "123:    structs.QueryOptions{AuthToken: idToken, Namespace: structs.DefaultNamespace}, acl.PolicyList,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "126:   {",
      "127:    name:        \"valid claim for path with task secret\",",
      "128:    token:       idToken,",
      "130:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
      "131:    expectedErr: nil,",
      "132:   },",
      "133:   {",
      "134:    name:        \"valid claim for path with group secret\",",
      "135:    token:       idToken,",
      "137:    path:        fmt.Sprintf(\"nomad/jobs/%s/web\", jobID),",
      "138:    expectedErr: nil,",
      "139:   },",
      "140:   {",
      "141:    name:        \"valid claim for path with job secret\",",
      "142:    token:       idToken,",
      "144:    path:        fmt.Sprintf(\"nomad/jobs/%s\", jobID),",
      "145:    expectedErr: nil,",
      "146:   },",
      "147:   {",
      "148:    name:        \"valid claim for path with dispatch job secret\",",
      "149:    token:       idDispatchToken,",
      "151:    path:        fmt.Sprintf(\"nomad/jobs/%s\", jobID),",
      "152:    expectedErr: nil,",
      "153:   },",
      "154:   {",
      "155:    name:        \"valid claim for path with namespace secret\",",
      "156:    token:       idToken,",
      "158:    path:        \"nomad/jobs\",",
      "159:    expectedErr: nil,",
      "160:   },",
      "",
      "[Removed Lines]",
      "129:    cap:         \"n/a\",",
      "136:    cap:         \"n/a\",",
      "143:    cap:         \"n/a\",",
      "150:    cap:         \"n/a\",",
      "157:    cap:         \"n/a\",",
      "",
      "[Added Lines]",
      "138:    cap:         acl.PolicyRead,",
      "145:    cap:         acl.PolicyRead,",
      "152:    cap:         acl.PolicyRead,",
      "159:    cap:         acl.PolicyRead,",
      "166:    cap:         acl.PolicyRead,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "189:   {",
      "190:    name:        \"valid claim with no permissions denied by path\",",
      "191:    token:       noPermissionsToken,",
      "193:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", jobID),",
      "194:    expectedErr: structs.ErrPermissionDenied,",
      "195:   },",
      "196:   {",
      "197:    name:        \"valid claim with no permissions allowed by namespace\",",
      "198:    token:       noPermissionsToken,",
      "200:    path:        \"nomad/jobs\",",
      "201:    expectedErr: nil,",
      "202:   },",
      "",
      "[Removed Lines]",
      "192:    cap:         \"n/a\",",
      "199:    cap:         \"n/a\",",
      "",
      "[Added Lines]",
      "201:    cap:         acl.PolicyList,",
      "208:    cap:         acl.PolicyList,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "207:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", jobID),",
      "208:    expectedErr: structs.ErrPermissionDenied,",
      "209:   },",
      "224:   {",
      "225:    name:        \"missing auth token is denied\",",
      "227:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
      "228:    expectedErr: structs.ErrPermissionDenied,",
      "229:   },",
      "230:   {",
      "231:    name:        \"invalid signature is denied\",",
      "232:    token:       invalidIDToken,",
      "234:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
      "235:    expectedErr: structs.ErrPermissionDenied,",
      "236:   },",
      "237:   {",
      "238:    name:        \"invalid claim for dispatched ID\",",
      "239:    token:       idDispatchToken,",
      "241:    path:        fmt.Sprintf(\"nomad/jobs/%s\", alloc3.JobID),",
      "242:    expectedErr: structs.ErrPermissionDenied,",
      "243:   },",
      "",
      "[Removed Lines]",
      "210:   {",
      "211:    name:        \"extra trailing slash is denied\",",
      "212:    token:       idToken,",
      "213:    cap:         \"n/a\",",
      "214:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/\", jobID),",
      "215:    expectedErr: structs.ErrPermissionDenied,",
      "216:   },",
      "217:   {",
      "218:    name:        \"invalid prefix is denied\",",
      "219:    token:       idToken,",
      "220:    cap:         \"n/a\",",
      "221:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", jobID),",
      "222:    expectedErr: structs.ErrPermissionDenied,",
      "223:   },",
      "226:    cap:         \"n/a\",",
      "233:    cap:         \"n/a\",",
      "240:    cap:         \"n/a\",",
      "",
      "[Added Lines]",
      "221:    cap:         acl.PolicyList,",
      "228:    cap:         acl.PolicyList,",
      "235:    cap:         acl.PolicyList,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
      "256:    expectedErr: structs.ErrPermissionDenied,",
      "257:   },",
      "258:  }",
      "260:  for _, tc := range testCases {",
      "261:   tc := tc",
      "262:   t.Run(tc.name, func(t *testing.T) {",
      "264:     structs.QueryOptions{AuthToken: tc.token, Namespace: ns}, tc.cap, tc.path)",
      "265:    if tc.expectedErr == nil {",
      "266:     must.NoError(t, err)",
      "",
      "[Removed Lines]",
      "263:    _, err := srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
      "",
      "[Added Lines]",
      "254:   {",
      "255:    name:        \"WI token can read own task\",",
      "256:    token:       wiOnlyToken,",
      "257:    cap:         acl.PolicyRead,",
      "258:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", alloc4.JobID),",
      "259:    expectedErr: nil,",
      "260:   },",
      "261:   {",
      "262:    name:        \"WI token can list own task\",",
      "263:    token:       wiOnlyToken,",
      "264:    cap:         acl.PolicyList,",
      "265:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", alloc4.JobID),",
      "266:    expectedErr: nil,",
      "267:   },",
      "268:   {",
      "269:    name:        \"WI token can read own group\",",
      "270:    token:       wiOnlyToken,",
      "271:    cap:         acl.PolicyRead,",
      "272:    path:        fmt.Sprintf(\"nomad/jobs/%s/web\", alloc4.JobID),",
      "273:    expectedErr: nil,",
      "274:   },",
      "275:   {",
      "276:    name:        \"WI token can list own group\",",
      "277:    token:       wiOnlyToken,",
      "278:    cap:         acl.PolicyList,",
      "279:    path:        fmt.Sprintf(\"nomad/jobs/%s/web\", alloc4.JobID),",
      "280:    expectedErr: nil,",
      "281:   },",
      "283:   {",
      "284:    name:        \"WI token cannot read another task in group\",",
      "285:    token:       wiOnlyToken,",
      "286:    cap:         acl.PolicyRead,",
      "287:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/other\", alloc4.JobID),",
      "288:    expectedErr: structs.ErrPermissionDenied,",
      "289:   },",
      "290:   {",
      "291:    name:        \"WI token cannot list another task in group\",",
      "292:    token:       wiOnlyToken,",
      "293:    cap:         acl.PolicyList,",
      "294:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/other\", alloc4.JobID),",
      "295:    expectedErr: structs.ErrPermissionDenied,",
      "296:   },",
      "297:   {",
      "298:    name:        \"WI token cannot read another task in group\",",
      "299:    token:       wiOnlyToken,",
      "300:    cap:         acl.PolicyRead,",
      "301:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/other\", alloc4.JobID),",
      "302:    expectedErr: structs.ErrPermissionDenied,",
      "303:   },",
      "304:   {",
      "305:    name:        \"WI token cannot list a task in another group\",",
      "306:    token:       wiOnlyToken,",
      "307:    cap:         acl.PolicyRead,",
      "308:    path:        fmt.Sprintf(\"nomad/jobs/%s/other/web\", alloc4.JobID),",
      "309:    expectedErr: structs.ErrPermissionDenied,",
      "310:   },",
      "311:   {",
      "312:    name:        \"WI token cannot read a task in another group\",",
      "313:    token:       wiOnlyToken,",
      "314:    cap:         acl.PolicyRead,",
      "315:    path:        fmt.Sprintf(\"nomad/jobs/%s/other/web\", alloc4.JobID),",
      "316:    expectedErr: structs.ErrPermissionDenied,",
      "317:   },",
      "318:   {",
      "319:    name:        \"WI token cannot read a group in another job\",",
      "320:    token:       wiOnlyToken,",
      "321:    cap:         acl.PolicyRead,",
      "322:    path:        \"nomad/jobs/other/web/web\",",
      "323:    expectedErr: structs.ErrPermissionDenied,",
      "324:   },",
      "325:   {",
      "326:    name:        \"WI token cannot list a group in another job\",",
      "327:    token:       wiOnlyToken,",
      "328:    cap:         acl.PolicyList,",
      "329:    path:        \"nomad/jobs/other/web/web\",",
      "330:    expectedErr: structs.ErrPermissionDenied,",
      "331:   },",
      "333:   {",
      "334:    name:        \"WI token extra trailing slash is denied\",",
      "335:    token:       wiOnlyToken,",
      "336:    cap:         acl.PolicyList,",
      "337:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/\", alloc4.JobID),",
      "338:    expectedErr: structs.ErrPermissionDenied,",
      "339:   },",
      "340:   {",
      "341:    name:        \"WI token invalid prefix is denied\",",
      "342:    token:       wiOnlyToken,",
      "343:    cap:         acl.PolicyList,",
      "344:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", alloc4.JobID),",
      "345:    expectedErr: structs.ErrPermissionDenied,",
      "346:   },",
      "352:    _, _, err := srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "453:  })",
      "454: }",
      "456: func TestVariablesEndpoint_ComplexACLPolicies(t *testing.T) {",
      "458:  ci.Parallel(t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545: func TestVariablesEndpoint_ListFiltering(t *testing.T) {",
      "546:  ci.Parallel(t)",
      "547:  srv, _, shutdown := TestACLServer(t, func(c *Config) {",
      "548:   c.NumSchedulers = 0 // Prevent automatic dequeue",
      "549:  })",
      "550:  defer shutdown()",
      "551:  testutil.WaitForLeader(t, srv.RPC)",
      "552:  codec := rpcClient(t, srv)",
      "554:  ns := \"nondefault-namespace\"",
      "555:  idx := uint64(1000)",
      "557:  alloc := mock.Alloc()",
      "558:  alloc.Job.ID = \"job1\"",
      "559:  alloc.JobID = \"job1\"",
      "560:  alloc.TaskGroup = \"group\"",
      "561:  alloc.Job.TaskGroups[0].Name = \"group\"",
      "562:  alloc.ClientStatus = structs.AllocClientStatusRunning",
      "563:  alloc.Job.Namespace = ns",
      "564:  alloc.Namespace = ns",
      "566:  store := srv.fsm.State()",
      "567:  must.NoError(t, store.UpsertNamespaces(idx, []*structs.Namespace{{Name: ns}}))",
      "568:  idx++",
      "569:  must.NoError(t, store.UpsertAllocs(",
      "570:   structs.MsgTypeTestSetup, idx, []*structs.Allocation{alloc}))",
      "572:  claims := alloc.ToTaskIdentityClaims(alloc.Job, \"web\")",
      "573:  token, err := srv.encrypter.SignClaims(claims)",
      "574:  must.NoError(t, err)",
      "576:  writeVar := func(ns, path string) {",
      "577:   idx++",
      "578:   sv := mock.VariableEncrypted()",
      "579:   sv.Namespace = ns",
      "580:   sv.Path = path",
      "581:   resp := store.VarSet(idx, &structs.VarApplyStateRequest{",
      "582:    Op:  structs.VarOpSet,",
      "583:    Var: sv,",
      "584:   })",
      "585:   must.NoError(t, resp.Error)",
      "586:  }",
      "588:  writeVar(ns, \"nomad/jobs/job1/group/web\")",
      "589:  writeVar(ns, \"nomad/jobs/job1/group\")",
      "590:  writeVar(ns, \"nomad/jobs/job1\")",
      "592:  writeVar(ns, \"nomad/jobs/job1/group/other\")",
      "593:  writeVar(ns, \"nomad/jobs/job1/other/web\")",
      "594:  writeVar(ns, \"nomad/jobs/job2/group/web\")",
      "596:  req := &structs.VariablesListRequest{",
      "597:   QueryOptions: structs.QueryOptions{",
      "598:    Namespace: ns,",
      "599:    Prefix:    \"nomad\",",
      "600:    AuthToken: token,",
      "601:    Region:    \"global\",",
      "602:   },",
      "603:  }",
      "604:  var resp structs.VariablesListResponse",
      "605:  must.NoError(t, msgpackrpc.CallWithCodec(codec, \"Variables.List\", req, &resp))",
      "606:  found := []string{}",
      "607:  for _, variable := range resp.Data {",
      "608:   found = append(found, variable.Path)",
      "609:  }",
      "610:  expect := []string{",
      "611:   \"nomad/jobs/job1\",",
      "612:   \"nomad/jobs/job1/group\",",
      "613:   \"nomad/jobs/job1/group/web\",",
      "614:  }",
      "615:  must.Eq(t, expect, found)",
      "617: }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "560:  testListPrefix(\"prod\", \"project\", 1, nil)",
      "561:  testListPrefix(\"prod\", \"\", 4, nil)",
      "569:  testListPrefix(\"*\", \"system\", 1, nil)",
      "570:  testListPrefix(\"*\", \"config/system\", 1, nil)",
      "",
      "[Removed Lines]",
      "563:  testListPrefix(\"other\", \"system\", 0, structs.ErrPermissionDenied)",
      "564:  testListPrefix(\"other\", \"config/system\", 0, structs.ErrPermissionDenied)",
      "565:  testListPrefix(\"other\", \"config\", 0, structs.ErrPermissionDenied)",
      "566:  testListPrefix(\"other\", \"project\", 0, structs.ErrPermissionDenied)",
      "567:  testListPrefix(\"other\", \"\", 0, structs.ErrPermissionDenied)",
      "",
      "[Added Lines]",
      "727:  testListPrefix(\"other\", \"system\", 0, nil)",
      "728:  testListPrefix(\"other\", \"config/system\", 0, nil)",
      "729:  testListPrefix(\"other\", \"config\", 0, nil)",
      "730:  testListPrefix(\"other\", \"project\", 0, nil)",
      "731:  testListPrefix(\"other\", \"\", 0, nil)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1f684400fd1911aa9f19dc906e29079701a19ca",
      "candidate_info": {
        "commit_hash": "f1f684400fd1911aa9f19dc906e29079701a19ca",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/f1f684400fd1911aa9f19dc906e29079701a19ca",
        "files": [
          ".changelog/15012.txt",
          ".semgrep/rpc_endpoint.yml",
          "nomad/variables_endpoint.go",
          "nomad/variables_endpoint_test.go"
        ],
        "message": "variables: fix filter on List RPC\n\nThe List RPC correctly authorized against the prefix argument. But when\nfiltering results underneath the prefix, it only checked authorization for\nstandard ACL tokens and not Workload Identity. This results in WI tokens being\nable to read List results (metadata only: variable paths and timestamps) for\nvariables under the `nomad/` prefix that belong to other jobs in the same\nnamespace.\n\nFixes the filtering and split the `handleMixedAuthEndpoint` function into\nseparate authentication and authorization steps so that we don't need to\nre-verify the claim token on each filtered object.\n\nAlso includes:\n* update semgrep rule for mixed auth endpoints\n* variables: List returns empty set when all results are filtered",
        "before_after_code_files": [
          "nomad/variables_endpoint.go||nomad/variables_endpoint.go",
          "nomad/variables_endpoint_test.go||nomad/variables_endpoint_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "nomad/variables_endpoint.go||nomad/variables_endpoint.go",
            "nomad/variables_endpoint_test.go||nomad/variables_endpoint_test.go"
          ],
          "candidate": [
            "nomad/variables_endpoint.go||nomad/variables_endpoint.go",
            "nomad/variables_endpoint_test.go||nomad/variables_endpoint_test.go"
          ]
        }
      },
      "candidate_diff": {
        "nomad/variables_endpoint.go||nomad/variables_endpoint.go": [
          "File: nomad/variables_endpoint.go -> nomad/variables_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:  }",
          "219:  defer metrics.MeasureSince([]string{\"nomad\", \"variables\", \"read\"}, time.Now())",
          "222:   acl.PolicyRead, args.Path)",
          "223:  if err != nil {",
          "224:   return err",
          "",
          "[Removed Lines]",
          "221:  _, err := sv.handleMixedAuthEndpoint(args.QueryOptions,",
          "",
          "[Added Lines]",
          "221:  _, _, err := sv.handleMixedAuthEndpoint(args.QueryOptions,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:   return sv.listAllVariables(args, reply)",
          "270:  }",
          "274:  if err != nil {",
          "275:   return err",
          "276:  }",
          "",
          "[Removed Lines]",
          "272:  aclObj, err := sv.handleMixedAuthEndpoint(args.QueryOptions,",
          "273:   acl.PolicyList, args.Prefix)",
          "",
          "[Added Lines]",
          "272:  aclObj, claims, err := sv.authenticate(args.QueryOptions)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:    filters := []paginator.Filter{",
          "300:     paginator.GenericFilter{",
          "301:      Allow: func(raw interface{}) (bool, error) {",
          "305:      },",
          "306:     },",
          "307:    }",
          "",
          "[Removed Lines]",
          "302:       sv := raw.(*structs.VariableEncrypted)",
          "303:       return strings.HasPrefix(sv.Path, args.Prefix) &&",
          "304:        (aclObj == nil || aclObj.AllowVariableOperation(sv.Namespace, sv.Path, acl.PolicyList)), nil",
          "",
          "[Added Lines]",
          "301:       v := raw.(*structs.VariableEncrypted)",
          "302:       if !strings.HasPrefix(v.Path, args.Prefix) {",
          "303:        return false, nil",
          "304:       }",
          "305:       err := sv.authorize(aclObj, claims, v.Namespace, acl.PolicyList, v.Path)",
          "306:       return err == nil, nil",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:  args *structs.VariablesListRequest,",
          "350:  reply *structs.VariablesListResponse) error {",
          "355:  if err != nil {",
          "356:   return err",
          "357:  }",
          "367:   queryOpts: &args.QueryOptions,",
          "368:   queryMeta: &reply.QueryMeta,",
          "369:   run: func(ws memdb.WatchSet, stateStore *state.StateStore) error {",
          "386:    iter, err := stateStore.Variables(ws)",
          "387:    if err != nil {",
          "",
          "[Removed Lines]",
          "348: func (s *Variables) listAllVariables(",
          "354:  aclObj, err := s.srv.ResolveToken(args.AuthToken)",
          "361:  allowFunc := func(ns string) bool {",
          "362:   return aclObj.AllowVariableOperation(ns, \"\", acl.PolicyList)",
          "363:  }",
          "366:  return s.srv.blockingRPC(&blockingOptions{",
          "374:    _, err := allowedNSes(aclObj, stateStore, allowFunc)",
          "375:    switch err {",
          "376:    case structs.ErrPermissionDenied:",
          "377:     reply.Data = make([]*structs.VariableMetadata, 0)",
          "378:     return nil",
          "379:    case nil:",
          "381:    default:",
          "382:     return err",
          "383:    }",
          "",
          "[Added Lines]",
          "350: func (sv *Variables) listAllVariables(",
          "356:  aclObj, claims, err := sv.authenticate(args.QueryOptions)",
          "362:  return sv.srv.blockingRPC(&blockingOptions{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "396:     paginator.StructsTokenizerOptions{",
          "397:      WithNamespace: true,",
          "398:      WithID:        true,",
          "402:    filters := []paginator.Filter{",
          "403:     paginator.GenericFilter{",
          "404:      Allow: func(raw interface{}) (bool, error) {",
          "408:      },",
          "409:     },",
          "410:    }",
          "",
          "[Removed Lines]",
          "399:     },",
          "400:    )",
          "405:       sv := raw.(*structs.VariableEncrypted)",
          "406:       return strings.HasPrefix(sv.Path, args.Prefix) &&",
          "407:        (aclObj == nil || aclObj.AllowVariableOperation(sv.Namespace, sv.Path, acl.PolicyList)), nil",
          "",
          "[Added Lines]",
          "381:     })",
          "386:       v := raw.(*structs.VariableEncrypted)",
          "387:       if !strings.HasPrefix(v.Path, args.Prefix) {",
          "388:        return false, nil",
          "389:       }",
          "390:       err := sv.authorize(aclObj, claims, v.Namespace, acl.PolicyList, v.Path)",
          "391:       return err == nil, nil",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "414:    paginatorImpl, err := paginator.NewPaginator(iter, tokenizer, filters, args.QueryOptions,",
          "415:     func(raw interface{}) error {",
          "418:      svs = append(svs, &svStub)",
          "419:      return nil",
          "420:     })",
          "",
          "[Removed Lines]",
          "416:      sv := raw.(*structs.VariableEncrypted)",
          "417:      svStub := sv.VariableMetadata",
          "",
          "[Added Lines]",
          "400:      v := raw.(*structs.VariableEncrypted)",
          "401:      svStub := v.VariableMetadata",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "441:   },",
          "442:  })",
          "443: }",
          "",
          "[Removed Lines]",
          "440:    return s.srv.setReplyQueryMeta(stateStore, state.TableVariables, &reply.QueryMeta)",
          "",
          "[Added Lines]",
          "424:    return sv.srv.setReplyQueryMeta(stateStore, state.TableVariables, &reply.QueryMeta)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "481:  aclObj, err := sv.srv.ResolveToken(args.AuthToken)",
          "482:  if err == nil {",
          "491:  }",
          "492:  if helper.IsUUID(args.AuthToken) {",
          "496:  }",
          "",
          "[Removed Lines]",
          "478: func (sv *Variables) handleMixedAuthEndpoint(args structs.QueryOptions, cap, pathOrPrefix string) (*acl.ACL, error) {",
          "485:   if aclObj != nil {",
          "486:    if !aclObj.AllowVariableOperation(args.RequestNamespace(), pathOrPrefix, cap) {",
          "487:     return nil, structs.ErrPermissionDenied",
          "488:    }",
          "489:   }",
          "490:   return aclObj, nil",
          "495:   return nil, err",
          "",
          "[Added Lines]",
          "462: func (sv *Variables) handleMixedAuthEndpoint(args structs.QueryOptions, cap, pathOrPrefix string) (*acl.ACL, *structs.IdentityClaims, error) {",
          "464:  aclObj, claims, err := sv.authenticate(args)",
          "465:  if err != nil {",
          "466:   return aclObj, claims, err",
          "467:  }",
          "468:  err = sv.authorize(aclObj, claims, args.RequestNamespace(), cap, pathOrPrefix)",
          "469:  if err != nil {",
          "470:   return aclObj, claims, err",
          "471:  }",
          "473:  return aclObj, claims, nil",
          "474: }",
          "476: func (sv *Variables) authenticate(args structs.QueryOptions) (*acl.ACL, *structs.IdentityClaims, error) {",
          "481:   return aclObj, nil, nil",
          "486:   return nil, nil, err",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "502:   metrics.IncrCounter([]string{",
          "503:    \"nomad\", \"variables\", \"invalid_allocation_identity\"}, 1)",
          "504:   sv.logger.Trace(\"allocation identity was not valid\", \"error\", err)",
          "506:  }",
          "513:  }",
          "520:  }",
          "524:  }",
          "526: }",
          "",
          "[Removed Lines]",
          "505:   return nil, structs.ErrPermissionDenied",
          "510:  err = sv.authValidatePrefix(claims, args.RequestNamespace(), pathOrPrefix)",
          "511:  if err == nil {",
          "512:   return aclObj, nil",
          "517:  aclObj, err = sv.srv.ResolveClaims(claims)",
          "518:  if err != nil {",
          "519:   return nil, err // this only returns an error when the state store has gone wrong",
          "521:  if aclObj != nil && aclObj.AllowVariableOperation(",
          "522:   args.RequestNamespace(), pathOrPrefix, cap) {",
          "523:   return aclObj, nil",
          "525:  return nil, structs.ErrPermissionDenied",
          "",
          "[Added Lines]",
          "496:   return nil, nil, structs.ErrPermissionDenied",
          "498:  return nil, claims, nil",
          "499: }",
          "501: func (sv *Variables) authorize(aclObj *acl.ACL, claims *structs.IdentityClaims, ns, cap, pathOrPrefix string) error {",
          "503:  if aclObj == nil && claims == nil {",
          "504:   return nil // ACLs aren't enabled",
          "509:  if aclObj != nil {",
          "510:   if !aclObj.AllowVariableOperation(ns, pathOrPrefix, cap) {",
          "511:    return structs.ErrPermissionDenied",
          "512:   }",
          "513:   return nil",
          "516:  if claims != nil {",
          "519:   err := sv.authValidatePrefix(claims, ns, pathOrPrefix)",
          "520:   if err == nil {",
          "521:    return nil",
          "522:   }",
          "526:   aclObj, err = sv.srv.ResolveClaims(claims)",
          "527:   if err != nil {",
          "528:    return err // this only returns an error when the state store has gone wrong",
          "529:   }",
          "530:   if aclObj != nil && aclObj.AllowVariableOperation(",
          "531:    ns, pathOrPrefix, cap) {",
          "532:    return nil",
          "533:   }",
          "535:  return structs.ErrPermissionDenied",
          "",
          "---------------"
        ],
        "nomad/variables_endpoint_test.go||nomad/variables_endpoint_test.go": [
          "File: nomad/variables_endpoint_test.go -> nomad/variables_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  alloc3.Namespace = ns",
          "51:  alloc3.Job.ParentID = jobID",
          "53:  store := srv.fsm.State()",
          "54:  must.NoError(t, store.UpsertNamespaces(1000, []*structs.Namespace{{Name: ns}}))",
          "55:  must.NoError(t, store.UpsertAllocs(",
          "58:  claims1 := alloc1.ToTaskIdentityClaims(nil, \"web\")",
          "59:  idToken, err := srv.encrypter.SignClaims(claims1)",
          "",
          "[Removed Lines]",
          "56:   structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc1, alloc2, alloc3}))",
          "",
          "[Added Lines]",
          "53:  alloc4 := mock.Alloc()",
          "54:  alloc4.ClientStatus = structs.AllocClientStatusRunning",
          "55:  alloc4.Job.Namespace = ns",
          "56:  alloc4.Namespace = ns",
          "61:   structs.MsgTypeTestSetup, 1001, []*structs.Allocation{alloc1, alloc2, alloc3, alloc4}))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  idTokenParts[2] = strings.Join(sig, \"\")",
          "78:  invalidIDToken := strings.Join(idTokenParts, \".\")",
          "80:  policy := mock.ACLPolicy()",
          "81:  policy.Rules = `namespace \"nondefault-namespace\" {",
          "82:   variables {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  claims4 := alloc4.ToTaskIdentityClaims(alloc4.Job, \"web\")",
          "86:  wiOnlyToken, err := srv.encrypter.SignClaims(claims4)",
          "87:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:  must.NoError(t, err)",
          "100:  t.Run(\"terminal alloc should be denied\", func(t *testing.T) {",
          "103:    fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID))",
          "104:   must.EqError(t, err, structs.ErrPermissionDenied.Error())",
          "105:  })",
          "",
          "[Removed Lines]",
          "101:   _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
          "102:    structs.QueryOptions{AuthToken: idToken, Namespace: ns}, \"n/a\",",
          "",
          "[Added Lines]",
          "110:   _, _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
          "111:    structs.QueryOptions{AuthToken: idToken, Namespace: ns}, acl.PolicyList,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   structs.MsgTypeTestSetup, 1200, []*structs.Allocation{alloc1}))",
          "112:  t.Run(\"wrong namespace should be denied\", func(t *testing.T) {",
          "115:    fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID))",
          "116:   must.EqError(t, err, structs.ErrPermissionDenied.Error())",
          "117:  })",
          "",
          "[Removed Lines]",
          "113:   _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
          "114:    structs.QueryOptions{AuthToken: idToken, Namespace: structs.DefaultNamespace}, \"n/a\",",
          "",
          "[Added Lines]",
          "122:   _, _, err = srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
          "123:    structs.QueryOptions{AuthToken: idToken, Namespace: structs.DefaultNamespace}, acl.PolicyList,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:   {",
          "127:    name:        \"valid claim for path with task secret\",",
          "128:    token:       idToken,",
          "130:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
          "131:    expectedErr: nil,",
          "132:   },",
          "133:   {",
          "134:    name:        \"valid claim for path with group secret\",",
          "135:    token:       idToken,",
          "137:    path:        fmt.Sprintf(\"nomad/jobs/%s/web\", jobID),",
          "138:    expectedErr: nil,",
          "139:   },",
          "140:   {",
          "141:    name:        \"valid claim for path with job secret\",",
          "142:    token:       idToken,",
          "144:    path:        fmt.Sprintf(\"nomad/jobs/%s\", jobID),",
          "145:    expectedErr: nil,",
          "146:   },",
          "147:   {",
          "148:    name:        \"valid claim for path with dispatch job secret\",",
          "149:    token:       idDispatchToken,",
          "151:    path:        fmt.Sprintf(\"nomad/jobs/%s\", jobID),",
          "152:    expectedErr: nil,",
          "153:   },",
          "154:   {",
          "155:    name:        \"valid claim for path with namespace secret\",",
          "156:    token:       idToken,",
          "158:    path:        \"nomad/jobs\",",
          "159:    expectedErr: nil,",
          "160:   },",
          "",
          "[Removed Lines]",
          "129:    cap:         \"n/a\",",
          "136:    cap:         \"n/a\",",
          "143:    cap:         \"n/a\",",
          "150:    cap:         \"n/a\",",
          "157:    cap:         \"n/a\",",
          "",
          "[Added Lines]",
          "138:    cap:         acl.PolicyRead,",
          "145:    cap:         acl.PolicyRead,",
          "152:    cap:         acl.PolicyRead,",
          "159:    cap:         acl.PolicyRead,",
          "166:    cap:         acl.PolicyRead,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:   {",
          "190:    name:        \"valid claim with no permissions denied by path\",",
          "191:    token:       noPermissionsToken,",
          "193:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", jobID),",
          "194:    expectedErr: structs.ErrPermissionDenied,",
          "195:   },",
          "196:   {",
          "197:    name:        \"valid claim with no permissions allowed by namespace\",",
          "198:    token:       noPermissionsToken,",
          "200:    path:        \"nomad/jobs\",",
          "201:    expectedErr: nil,",
          "202:   },",
          "",
          "[Removed Lines]",
          "192:    cap:         \"n/a\",",
          "199:    cap:         \"n/a\",",
          "",
          "[Added Lines]",
          "201:    cap:         acl.PolicyList,",
          "208:    cap:         acl.PolicyList,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "207:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", jobID),",
          "208:    expectedErr: structs.ErrPermissionDenied,",
          "209:   },",
          "224:   {",
          "225:    name:        \"missing auth token is denied\",",
          "227:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
          "228:    expectedErr: structs.ErrPermissionDenied,",
          "229:   },",
          "230:   {",
          "231:    name:        \"invalid signature is denied\",",
          "232:    token:       invalidIDToken,",
          "234:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
          "235:    expectedErr: structs.ErrPermissionDenied,",
          "236:   },",
          "237:   {",
          "238:    name:        \"invalid claim for dispatched ID\",",
          "239:    token:       idDispatchToken,",
          "241:    path:        fmt.Sprintf(\"nomad/jobs/%s\", alloc3.JobID),",
          "242:    expectedErr: structs.ErrPermissionDenied,",
          "243:   },",
          "",
          "[Removed Lines]",
          "210:   {",
          "211:    name:        \"extra trailing slash is denied\",",
          "212:    token:       idToken,",
          "213:    cap:         \"n/a\",",
          "214:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/\", jobID),",
          "215:    expectedErr: structs.ErrPermissionDenied,",
          "216:   },",
          "217:   {",
          "218:    name:        \"invalid prefix is denied\",",
          "219:    token:       idToken,",
          "220:    cap:         \"n/a\",",
          "221:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", jobID),",
          "222:    expectedErr: structs.ErrPermissionDenied,",
          "223:   },",
          "226:    cap:         \"n/a\",",
          "233:    cap:         \"n/a\",",
          "240:    cap:         \"n/a\",",
          "",
          "[Added Lines]",
          "221:    cap:         acl.PolicyList,",
          "228:    cap:         acl.PolicyList,",
          "235:    cap:         acl.PolicyList,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", jobID),",
          "256:    expectedErr: structs.ErrPermissionDenied,",
          "257:   },",
          "258:  }",
          "260:  for _, tc := range testCases {",
          "261:   tc := tc",
          "262:   t.Run(tc.name, func(t *testing.T) {",
          "264:     structs.QueryOptions{AuthToken: tc.token, Namespace: ns}, tc.cap, tc.path)",
          "265:    if tc.expectedErr == nil {",
          "266:     must.NoError(t, err)",
          "",
          "[Removed Lines]",
          "263:    _, err := srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
          "",
          "[Added Lines]",
          "254:   {",
          "255:    name:        \"WI token can read own task\",",
          "256:    token:       wiOnlyToken,",
          "257:    cap:         acl.PolicyRead,",
          "258:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", alloc4.JobID),",
          "259:    expectedErr: nil,",
          "260:   },",
          "261:   {",
          "262:    name:        \"WI token can list own task\",",
          "263:    token:       wiOnlyToken,",
          "264:    cap:         acl.PolicyList,",
          "265:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/web\", alloc4.JobID),",
          "266:    expectedErr: nil,",
          "267:   },",
          "268:   {",
          "269:    name:        \"WI token can read own group\",",
          "270:    token:       wiOnlyToken,",
          "271:    cap:         acl.PolicyRead,",
          "272:    path:        fmt.Sprintf(\"nomad/jobs/%s/web\", alloc4.JobID),",
          "273:    expectedErr: nil,",
          "274:   },",
          "275:   {",
          "276:    name:        \"WI token can list own group\",",
          "277:    token:       wiOnlyToken,",
          "278:    cap:         acl.PolicyList,",
          "279:    path:        fmt.Sprintf(\"nomad/jobs/%s/web\", alloc4.JobID),",
          "280:    expectedErr: nil,",
          "281:   },",
          "283:   {",
          "284:    name:        \"WI token cannot read another task in group\",",
          "285:    token:       wiOnlyToken,",
          "286:    cap:         acl.PolicyRead,",
          "287:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/other\", alloc4.JobID),",
          "288:    expectedErr: structs.ErrPermissionDenied,",
          "289:   },",
          "290:   {",
          "291:    name:        \"WI token cannot list another task in group\",",
          "292:    token:       wiOnlyToken,",
          "293:    cap:         acl.PolicyList,",
          "294:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/other\", alloc4.JobID),",
          "295:    expectedErr: structs.ErrPermissionDenied,",
          "296:   },",
          "297:   {",
          "298:    name:        \"WI token cannot read another task in group\",",
          "299:    token:       wiOnlyToken,",
          "300:    cap:         acl.PolicyRead,",
          "301:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/other\", alloc4.JobID),",
          "302:    expectedErr: structs.ErrPermissionDenied,",
          "303:   },",
          "304:   {",
          "305:    name:        \"WI token cannot list a task in another group\",",
          "306:    token:       wiOnlyToken,",
          "307:    cap:         acl.PolicyRead,",
          "308:    path:        fmt.Sprintf(\"nomad/jobs/%s/other/web\", alloc4.JobID),",
          "309:    expectedErr: structs.ErrPermissionDenied,",
          "310:   },",
          "311:   {",
          "312:    name:        \"WI token cannot read a task in another group\",",
          "313:    token:       wiOnlyToken,",
          "314:    cap:         acl.PolicyRead,",
          "315:    path:        fmt.Sprintf(\"nomad/jobs/%s/other/web\", alloc4.JobID),",
          "316:    expectedErr: structs.ErrPermissionDenied,",
          "317:   },",
          "318:   {",
          "319:    name:        \"WI token cannot read a group in another job\",",
          "320:    token:       wiOnlyToken,",
          "321:    cap:         acl.PolicyRead,",
          "322:    path:        \"nomad/jobs/other/web/web\",",
          "323:    expectedErr: structs.ErrPermissionDenied,",
          "324:   },",
          "325:   {",
          "326:    name:        \"WI token cannot list a group in another job\",",
          "327:    token:       wiOnlyToken,",
          "328:    cap:         acl.PolicyList,",
          "329:    path:        \"nomad/jobs/other/web/web\",",
          "330:    expectedErr: structs.ErrPermissionDenied,",
          "331:   },",
          "333:   {",
          "334:    name:        \"WI token extra trailing slash is denied\",",
          "335:    token:       wiOnlyToken,",
          "336:    cap:         acl.PolicyList,",
          "337:    path:        fmt.Sprintf(\"nomad/jobs/%s/web/\", alloc4.JobID),",
          "338:    expectedErr: structs.ErrPermissionDenied,",
          "339:   },",
          "340:   {",
          "341:    name:        \"WI token invalid prefix is denied\",",
          "342:    token:       wiOnlyToken,",
          "343:    cap:         acl.PolicyList,",
          "344:    path:        fmt.Sprintf(\"nomad/jobs/%s/w\", alloc4.JobID),",
          "345:    expectedErr: structs.ErrPermissionDenied,",
          "346:   },",
          "352:    _, _, err := srv.staticEndpoints.Variables.handleMixedAuthEndpoint(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "453:  })",
          "454: }",
          "456: func TestVariablesEndpoint_ComplexACLPolicies(t *testing.T) {",
          "458:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: func TestVariablesEndpoint_ListFiltering(t *testing.T) {",
          "546:  ci.Parallel(t)",
          "547:  srv, _, shutdown := TestACLServer(t, func(c *Config) {",
          "548:   c.NumSchedulers = 0 // Prevent automatic dequeue",
          "549:  })",
          "550:  defer shutdown()",
          "551:  testutil.WaitForLeader(t, srv.RPC)",
          "552:  codec := rpcClient(t, srv)",
          "554:  ns := \"nondefault-namespace\"",
          "555:  idx := uint64(1000)",
          "557:  alloc := mock.Alloc()",
          "558:  alloc.Job.ID = \"job1\"",
          "559:  alloc.JobID = \"job1\"",
          "560:  alloc.TaskGroup = \"group\"",
          "561:  alloc.Job.TaskGroups[0].Name = \"group\"",
          "562:  alloc.ClientStatus = structs.AllocClientStatusRunning",
          "563:  alloc.Job.Namespace = ns",
          "564:  alloc.Namespace = ns",
          "566:  store := srv.fsm.State()",
          "567:  must.NoError(t, store.UpsertNamespaces(idx, []*structs.Namespace{{Name: ns}}))",
          "568:  idx++",
          "569:  must.NoError(t, store.UpsertAllocs(",
          "570:   structs.MsgTypeTestSetup, idx, []*structs.Allocation{alloc}))",
          "572:  claims := alloc.ToTaskIdentityClaims(alloc.Job, \"web\")",
          "573:  token, err := srv.encrypter.SignClaims(claims)",
          "574:  must.NoError(t, err)",
          "576:  writeVar := func(ns, path string) {",
          "577:   idx++",
          "578:   sv := mock.VariableEncrypted()",
          "579:   sv.Namespace = ns",
          "580:   sv.Path = path",
          "581:   resp := store.VarSet(idx, &structs.VarApplyStateRequest{",
          "582:    Op:  structs.VarOpSet,",
          "583:    Var: sv,",
          "584:   })",
          "585:   must.NoError(t, resp.Error)",
          "586:  }",
          "588:  writeVar(ns, \"nomad/jobs/job1/group/web\")",
          "589:  writeVar(ns, \"nomad/jobs/job1/group\")",
          "590:  writeVar(ns, \"nomad/jobs/job1\")",
          "592:  writeVar(ns, \"nomad/jobs/job1/group/other\")",
          "593:  writeVar(ns, \"nomad/jobs/job1/other/web\")",
          "594:  writeVar(ns, \"nomad/jobs/job2/group/web\")",
          "596:  req := &structs.VariablesListRequest{",
          "597:   QueryOptions: structs.QueryOptions{",
          "598:    Namespace: ns,",
          "599:    Prefix:    \"nomad\",",
          "600:    AuthToken: token,",
          "601:    Region:    \"global\",",
          "602:   },",
          "603:  }",
          "604:  var resp structs.VariablesListResponse",
          "605:  must.NoError(t, msgpackrpc.CallWithCodec(codec, \"Variables.List\", req, &resp))",
          "606:  found := []string{}",
          "607:  for _, variable := range resp.Data {",
          "608:   found = append(found, variable.Path)",
          "609:  }",
          "610:  expect := []string{",
          "611:   \"nomad/jobs/job1\",",
          "612:   \"nomad/jobs/job1/group\",",
          "613:   \"nomad/jobs/job1/group/web\",",
          "614:  }",
          "615:  must.Eq(t, expect, found)",
          "617: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "560:  testListPrefix(\"prod\", \"project\", 1, nil)",
          "561:  testListPrefix(\"prod\", \"\", 4, nil)",
          "569:  testListPrefix(\"*\", \"system\", 1, nil)",
          "570:  testListPrefix(\"*\", \"config/system\", 1, nil)",
          "",
          "[Removed Lines]",
          "563:  testListPrefix(\"other\", \"system\", 0, structs.ErrPermissionDenied)",
          "564:  testListPrefix(\"other\", \"config/system\", 0, structs.ErrPermissionDenied)",
          "565:  testListPrefix(\"other\", \"config\", 0, structs.ErrPermissionDenied)",
          "566:  testListPrefix(\"other\", \"project\", 0, structs.ErrPermissionDenied)",
          "567:  testListPrefix(\"other\", \"\", 0, structs.ErrPermissionDenied)",
          "",
          "[Added Lines]",
          "727:  testListPrefix(\"other\", \"system\", 0, nil)",
          "728:  testListPrefix(\"other\", \"config/system\", 0, nil)",
          "729:  testListPrefix(\"other\", \"config\", 0, nil)",
          "730:  testListPrefix(\"other\", \"project\", 0, nil)",
          "731:  testListPrefix(\"other\", \"\", 0, nil)",
          "",
          "---------------"
        ]
      }
    }
  ]
}