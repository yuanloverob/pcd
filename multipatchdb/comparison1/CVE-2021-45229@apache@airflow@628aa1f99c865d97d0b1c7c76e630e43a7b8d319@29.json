{
  "cve_id": "CVE-2021-45229",
  "cve_desc": "It was discovered that the \"Trigger DAG with config\" screen was susceptible to XSS attacks via the `origin` query argument. This issue affects Apache Airflow versions 2.2.3 and below.",
  "repo": "apache/airflow",
  "patch_hash": "628aa1f99c865d97d0b1c7c76e630e43a7b8d319",
  "patch_info": {
    "commit_hash": "628aa1f99c865d97d0b1c7c76e630e43a7b8d319",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/628aa1f99c865d97d0b1c7c76e630e43a7b8d319",
    "files": [
      "airflow/www/templates/airflow/trigger.html",
      "tests/www/views/test_views_trigger_dag.py"
    ],
    "message": "Simplify trigger cancel button (#21591)\n\nCo-authored-by: Jed Cunningham <jedcunningham@apache.org>\n(cherry picked from commit 65297673a318660fba76797e50d0c06804dfcafc)",
    "before_after_code_files": [
      "airflow/www/templates/airflow/trigger.html||airflow/www/templates/airflow/trigger.html",
      "tests/www/views/test_views_trigger_dag.py||tests/www/views/test_views_trigger_dag.py"
    ]
  },
  "patch_diff": {
    "airflow/www/templates/airflow/trigger.html||airflow/www/templates/airflow/trigger.html": [
      "File: airflow/www/templates/airflow/trigger.html -> airflow/www/templates/airflow/trigger.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:       </label>",
      "64:     </div>",
      "65:     <button type=\"submit\" class=\"btn btn-primary\">Trigger</button>",
      "67:   </form>",
      "68: {% endblock %}",
      "",
      "[Removed Lines]",
      "66:     <button type=\"button\" class=\"btn\" onclick=\"location.href = '{{ origin }}'; return false\">Cancel</button>",
      "",
      "[Added Lines]",
      "66:     <a class=\"btn\" href=\"{{ origin }}\">Cancel</a>",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_trigger_dag.py||tests/www/views/test_views_trigger_dag.py": [
      "File: tests/www/views/test_views_trigger_dag.py -> tests/www/views/test_views_trigger_dag.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         (\"javascript:alert(1)\", \"/home\"),",
      "134:         (\"http://google.com\", \"/home\"),",
      "135:         (\"36539'%3balert(1)%2f%2f166\", \"/home\"),",
      "136:         (",
      "137:             \"%2Ftree%3Fdag_id%3Dexample_bash_operator';alert(33)//\",",
      "138:             \"/home\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "136:         (",
      "137:             '\"><script>alert(99)</script><a href=\"',",
      "138:             \"&#34;&gt;&lt;script&gt;alert(99)&lt;/script&gt;&lt;a href=&#34;\",",
      "139:         ),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:     test_dag_id = \"example_bash_operator\"",
      "147:     resp = admin_client.get(f'trigger?dag_id={test_dag_id}&origin={test_origin}')",
      "156: @pytest.mark.parametrize(",
      "",
      "[Removed Lines]",
      "148:     check_content_in_response(",
      "149:         '<button type=\"button\" class=\"btn\" onclick=\"location.href = \\'{}\\'; return false\">'.format(",
      "150:             expected_origin",
      "151:         ),",
      "152:         resp,",
      "153:     )",
      "",
      "[Added Lines]",
      "152:     check_content_in_response(f'<a class=\"btn\" href=\"{expected_origin}\">Cancel</a>', resp)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bccf2f57c3ca62ad7103571d03ea18013d08f3e5",
      "candidate_info": {
        "commit_hash": "bccf2f57c3ca62ad7103571d03ea18013d08f3e5",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/bccf2f57c3ca62ad7103571d03ea18013d08f3e5",
        "files": [
          "setup.cfg"
        ],
        "message": "Bump croniter from `<1.1` to `<1.2` (#20489)\n\n(cherry picked from commit 8a03a505e1df0f9de276038c5509135ac569a667)",
        "before_after_code_files": [
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     # Required by vendored-in connexion",
          "93:     clickclick>=1.2",
          "94:     colorlog>=4.0.2, <6.0",
          "96:     cryptography>=0.9.3",
          "97:     dataclasses;python_version<\"3.7\"",
          "98:     dill>=0.2.2, <0.4",
          "",
          "[Removed Lines]",
          "95:     croniter>=0.3.17, <1.1",
          "",
          "[Added Lines]",
          "95:     croniter>=0.3.17",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fab8b121c6906f62e28ea6485d8d8e493cb8b769",
      "candidate_info": {
        "commit_hash": "fab8b121c6906f62e28ea6485d8d8e493cb8b769",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/fab8b121c6906f62e28ea6485d8d8e493cb8b769",
        "files": [
          "airflow/www/views.py",
          "tests/www/views/test_views_dagrun.py",
          "tests/www/views/test_views_tasks.py"
        ],
        "message": "Allow Viewing DagRuns and TIs if a user has DAG \"read\" perms (#20663)\n\nThis was updated in Airflow 2.2.0 via https://github.com/apache/airflow/pull/16634 which restricts a user to even views the DagRuns and TI records if they don't have \"edit\" permissions on DAG even though it has \"read\" permissions.\n\nThe Behaviour seems inconsistent as a User can still view those from the Graph and Tree View of the DAG.\n\nAnd since we have got `@action_has_dag_edit_access` on all the Actions like Delete/Clear etc the approach in this PR is better as when a user will try to perform any actions from the List Dag Run view like deleting the record it will give an Access Denied error.\n\n(cherry picked from commit 05b9f3db5471e49e894e4148d8d1deb4361a9b53)",
        "before_after_code_files": [
          "airflow/www/views.py||airflow/www/views.py",
          "tests/www/views/test_views_dagrun.py||tests/www/views/test_views_dagrun.py",
          "tests/www/views/test_views_tasks.py||tests/www/views/test_views_tasks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3144:         return query.filter(self.model.dag_id.in_(filter_dag_ids))",
          "3155: class AirflowModelView(ModelView):",
          "3156:     \"\"\"Airflow Mode View.\"\"\"",
          "",
          "[Removed Lines]",
          "3147: class DagEditFilter(BaseFilter):",
          "3148:     \"\"\"Filter using DagIDs\"\"\"",
          "3150:     def apply(self, query, func):  # pylint: disable=redefined-outer-name,unused-argument",
          "3151:         filter_dag_ids = current_app.appbuilder.sm.get_editable_dag_ids(g.user)",
          "3152:         return query.filter(self.model.dag_id.in_(filter_dag_ids))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3952:     base_order = ('execution_date', 'desc')",
          "3956:     edit_form = DagRunEditForm",
          "",
          "[Removed Lines]",
          "3954:     base_filters = [['dag_id', DagEditFilter, lambda: []]]",
          "",
          "[Added Lines]",
          "3946:     base_filters = [['dag_id', DagFilter, lambda: []]]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4300:     base_order = ('job_id', 'asc')",
          "4304:     def log_url_formatter(self):",
          "4305:         \"\"\"Formats log URL.\"\"\"",
          "",
          "[Removed Lines]",
          "4302:     base_filters = [['dag_id', DagEditFilter, lambda: []]]",
          "",
          "[Added Lines]",
          "4294:     base_filters = [['dag_id', DagFilter, lambda: []]]",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_dagrun.py||tests/www/views/test_views_dagrun.py": [
          "File: tests/www/views/test_views_dagrun.py -> tests/www/views/test_views_dagrun.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: import pytest",
          "19: import werkzeug",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import flask",
          "19: import markupsafe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         session.query(TaskInstance).delete()",
          "76: def test_create_dagrun_permission_denied(session, client_dr_without_dag_edit):",
          "77:     data = {",
          "78:         \"state\": \"running\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: def test_get_dagrun_can_view_dags_without_edit_perms(session, running_dag_run, client_dr_without_dag_edit):",
          "79:     \"\"\"Test that a user without dag_edit but with dag_read permission can view the records\"\"\"",
          "80:     assert session.query(DagRun).filter(DagRun.dag_id == running_dag_run.dag_id).count() == 1",
          "81:     resp = client_dr_without_dag_edit.get('/dagrun/list/', follow_redirects=True)",
          "83:     with client_dr_without_dag_edit.application.test_request_context():",
          "84:         url = flask.url_for(",
          "85:             'Airflow.graph', dag_id=running_dag_run.dag_id, execution_date=running_dag_run.execution_date",
          "86:         )",
          "87:         dag_url_link = markupsafe.Markup('<a href=\"{url}\">{dag_id}</a>').format(",
          "88:             url=url, dag_id=running_dag_run.dag_id",
          "89:         )",
          "90:     check_content_in_response(dag_url_link, resp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         TaskInstance(dag.get_task(\"runme_1\"), run_id=dr.run_id, state=\"failed\"),",
          "103:     ]",
          "104:     session.bulk_save_objects(tis)",
          "106:     return dr",
          "",
          "[Removed Lines]",
          "105:     session.flush()",
          "",
          "[Added Lines]",
          "122:     session.commit()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:     assert session.query(DagRun).filter(DagRun.dag_id == running_dag_run.dag_id).count() == 0",
          "117:     composite_key = _get_appbuilder_pk_string(DagRunModelView, running_dag_run)",
          "119:     assert session.query(DagRun).filter(DagRun.dag_id == running_dag_run.dag_id).count() == 1",
          "120:     resp = client_dr_without_dag_edit.post(f\"/dagrun/delete/{composite_key}\", follow_redirects=True)",
          "122:     assert session.query(DagRun).filter(DagRun.dag_id == running_dag_run.dag_id).count() == 1",
          "",
          "[Removed Lines]",
          "116: def test_delete_dagrun_permission_denied(session, client_dr_without_dag_edit, running_dag_run):",
          "121:     assert resp.status_code == 404  # If it doesn't fully succeed it gives a 404.",
          "",
          "[Added Lines]",
          "133: def test_delete_dagrun_permission_denied(session, running_dag_run, client_dr_without_dag_edit):",
          "138:     check_content_in_response(f\"Access denied for dag_id {running_dag_run.dag_id}\", resp)",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_tasks.py||tests/www/views/test_views_tasks.py": [
          "File: tests/www/views/test_views_tasks.py -> tests/www/views/test_views_tasks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:         task_id=\"test_task_instance_delete_permission_denied\",",
          "636:         execution_date=timezone.utcnow(),",
          "637:         state=State.DEFERRED,",
          "638:     )",
          "639:     composite_key = _get_appbuilder_pk_string(TaskInstanceModelView, task_instance_to_delete)",
          "640:     task_id = task_instance_to_delete.task_id",
          "642:     assert session.query(TaskInstance).filter(TaskInstance.task_id == task_id).count() == 1",
          "643:     resp = client_ti_without_dag_edit.post(f\"/taskinstance/delete/{composite_key}\", follow_redirects=True)",
          "645:     assert session.query(TaskInstance).filter(TaskInstance.task_id == task_id).count() == 1",
          "",
          "[Removed Lines]",
          "644:     assert resp.status_code == 404  # If it doesn't fully succeed it gives a 404.",
          "",
          "[Added Lines]",
          "638:         session=session,",
          "640:     session.commit()",
          "646:     check_content_in_response(f\"Access denied for dag_id {task_instance_to_delete.dag_id}\", resp)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01de1b7b7e3cc86ebd119cb3d04c47a210644610",
      "candidate_info": {
        "commit_hash": "01de1b7b7e3cc86ebd119cb3d04c47a210644610",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/01de1b7b7e3cc86ebd119cb3d04c47a210644610",
        "files": [
          "scripts/ci/testing/ci_run_airflow_testing.sh"
        ],
        "message": "Remove duplicate line call in CI (#19728)\n\n(cherry picked from commit c6c662798b3cdee88a760cfeccd1be83ec7922f2)",
        "before_after_code_files": [
          "scripts/ci/testing/ci_run_airflow_testing.sh||scripts/ci/testing/ci_run_airflow_testing.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/ci/testing/ci_run_airflow_testing.sh||scripts/ci/testing/ci_run_airflow_testing.sh": [
          "File: scripts/ci/testing/ci_run_airflow_testing.sh -> scripts/ci/testing/ci_run_airflow_testing.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     do",
          "41:         export TEST_TYPE",
          "42:         mkdir -p \"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}\"",
          "44:         export JOB_LOG=\"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}/stdout\"",
          "45:         export PARALLEL_JOB_STATUS=\"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}/status\"",
          "46:         # Each test job will get SIGTERM followed by SIGTERM 200ms later and SIGKILL 200ms later after 45 mins",
          "",
          "[Removed Lines]",
          "43:         mkdir -p \"${PARALLEL_MONITORED_DIR}/${SEMAPHORE_NAME}/${TEST_TYPE}\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fa15357718c1bab97e506c571d34ddceaf42f9b",
      "candidate_info": {
        "commit_hash": "3fa15357718c1bab97e506c571d34ddceaf42f9b",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/3fa15357718c1bab97e506c571d34ddceaf42f9b",
        "files": [
          "tests/www/views/test_views_rendered.py"
        ],
        "message": "Fix failing main. (#20094)\n\n(cherry picked from commit 50b72961124db7fc83ab4695a958d009869f4d4c)",
        "before_after_code_files": [
          "tests/www/views/test_views_rendered.py||tests/www/views/test_views_rendered.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/www/views/test_views_rendered.py||tests/www/views/test_views_rendered.py": [
          "File: tests/www/views/test_views_rendered.py -> tests/www/views/test_views_rendered.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     assert resp.status_code == 200",
          "159:     resp_html: str = resp.data.decode(\"utf-8\")",
          "161:     assert (",
          "162:         \"Webserver does not have access to User-defined Macros or Filters when \"",
          "163:         \"Dag Serialization is enabled. Hence for the task that have not yet \"",
          "",
          "[Removed Lines]",
          "160:     assert \"echo Hello Apache Airflow\" in resp_html",
          "",
          "[Added Lines]",
          "160:     assert \"echo Hello Apache Airflow\" not in resp_html",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0746bc837525d7c731d7c59a2e47cdc489fba487",
      "candidate_info": {
        "commit_hash": "0746bc837525d7c731d7c59a2e47cdc489fba487",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0746bc837525d7c731d7c59a2e47cdc489fba487",
        "files": [
          "scripts/ci/libraries/_initialization.sh"
        ],
        "message": "Checks if the user running Breeze has permissions to run docker cmd (#20462)\n\n(cherry picked from commit 3ccabbcf93fa695513163903c412bf65f52e2d4e)",
        "before_after_code_files": [
          "scripts/ci/libraries/_initialization.sh||scripts/ci/libraries/_initialization.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/21659"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/ci/libraries/_initialization.sh||scripts/ci/libraries/_initialization.sh": [
          "File: scripts/ci/libraries/_initialization.sh -> scripts/ci/libraries/_initialization.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "915: }",
          "917: function initialization::check_docker_version() {",
          "918:     local docker_version",
          "919:     # In GitHub Code QL, the version of docker has +azure suffix which we should remove",
          "920:     docker_version=$(docker version --format '{{.Client.Version}}' | sed 's/\\+.*$//' || true)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "918:     local permission_denied",
          "919:     permission_denied=$(docker info 2>/dev/null | grep \"ERROR: Got permission denied while trying \" || true)",
          "920:     if [[ ${permission_denied} != \"\" ]]; then",
          "921:         echo",
          "922:         echo \"${COLOR_RED}ERROR: You have 'permission denied' error when trying to communicate with docker.${COLOR_RESET}\"",
          "923:         echo",
          "924:         echo \"${COLOR_YELLOW}Most likely you need to add your user to 'docker' group: https://docs.docker.com/engine/install/linux-postinstall/ .${COLOR_RESET}\"",
          "925:         echo",
          "926:         exit 1",
          "927:     fi",
          "",
          "---------------"
        ]
      }
    }
  ]
}