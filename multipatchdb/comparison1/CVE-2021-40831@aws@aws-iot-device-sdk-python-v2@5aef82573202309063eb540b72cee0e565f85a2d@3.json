{
  "cve_id": "CVE-2021-40831",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been \u201coverridden\u201d. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to address this behavior. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.7.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.14.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.6.0 on macOS. Amazon Web Services AWS-C-IO 0.10.7 on macOS.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
  "patch_info": {
    "commit_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5aef82573202309063eb540b72cee0e565f85a2d",
    "files": [
      "setup.py"
    ],
    "message": "Fix CA override functions (#223)\n\nUpdate to awscrt 0.12.0. This fixes the issue where \"override_default_trust_store\" functions did not actually override the system trust store on Linux and Apple platforms.",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.12.0',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80f1a9d427f5107a5db632231757173b7290a051",
      "candidate_info": {
        "commit_hash": "80f1a9d427f5107a5db632231757173b7290a051",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/80f1a9d427f5107a5db632231757173b7290a051",
        "files": [
          "setup.py"
        ],
        "message": "latest-awscrt (#158)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.10.6',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.10.7',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba59a745d446d79995a784e29156917ed293b512",
      "candidate_info": {
        "commit_hash": "ba59a745d446d79995a784e29156917ed293b512",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/ba59a745d446d79995a784e29156917ed293b512",
        "files": [
          "setup.py"
        ],
        "message": "Update CRT submodule to pull in fix for OpenSSL CVE-2022-0778 (#289)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.3',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.5',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b16659bda760a8589c654b342df7cdf5618d6d1",
      "candidate_info": {
        "commit_hash": "8b16659bda760a8589c654b342df7cdf5618d6d1",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/8b16659bda760a8589c654b342df7cdf5618d6d1",
        "files": [
          "setup.py"
        ],
        "message": "update awscrt for raspberry pi fix (#192)\n\nIssue: wheels were unavailable for the previous awscrt on piwheels.org",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.14',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.17',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e4e91f8c7bb243b9c83feea5bc4dbd4986d8da5",
      "candidate_info": {
        "commit_hash": "0e4e91f8c7bb243b9c83feea5bc4dbd4986d8da5",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0e4e91f8c7bb243b9c83feea5bc4dbd4986d8da5",
        "files": [
          "README.md",
          "awsiot/__init__.py",
          "builder.json",
          "continuous-delivery/publish_to_prod_pypi.yml",
          "continuous-delivery/publish_to_test_pypi.yml",
          "setup.py"
        ],
        "message": "update awscrt to 0.11.19. Remove support for python3.5 as it's EOL (#194)\n\n- update awscrt to 0.11.19. Remove support for python3.5 as it's EOL\n- Version and metadata of life updates",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import json",
          "16: from typing import Any, Callable, Dict, Optional, Tuple, TypeVar",
          "18: T = TypeVar('T')",
          "20: PayloadObj = Dict[str, Any]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: __version__ = '1.0.0-dev'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     \"\"\"",
          "32:     def __init__(self, mqtt_connection: mqtt.Connection):",
          "35:     @property",
          "36:     def mqtt_connection(self) -> mqtt.Connection:",
          "",
          "[Removed Lines]",
          "33:         self._mqtt_connection = mqtt_connection # type: mqtt.Connection",
          "",
          "[Added Lines]",
          "35:         self._mqtt_connection = mqtt_connection  # type: mqtt.Connection",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:             `Future` whose result will be `None` when the server",
          "51:             has acknowledged the unsubscribe.",
          "52:         \"\"\"",
          "54:         try:",
          "55:             def on_unsuback(unsuback_future):",
          "56:                 if unsuback_future.exception():",
          "",
          "[Removed Lines]",
          "53:         future = Future() # type: Future",
          "",
          "[Added Lines]",
          "55:         future = Future()  # type: Future",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         server has acknowledged the message, or an exception if the",
          "81:         publish fails.",
          "82:         \"\"\"",
          "84:         try:",
          "85:             def on_puback(puback_future):",
          "86:                 if puback_future.exception():",
          "",
          "[Removed Lines]",
          "83:         future = Future() # type: Future",
          "",
          "[Added Lines]",
          "85:         future = Future()  # type: Future",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:         Note that messages may arrive before the subscription is acknowledged.",
          "136:         \"\"\"",
          "139:         try:",
          "140:             def on_suback(suback_future):",
          "141:                 try:",
          "",
          "[Removed Lines]",
          "138:         future = Future() # type: Future",
          "",
          "[Added Lines]",
          "140:         future = Future()  # type: Future",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "4: # SPDX-License-Identifier: Apache-2.0.",
          "6: from setuptools import setup, find_packages",
          "8: setup(",
          "9:     name='awsiotsdk',",
          "11:     license='License :: OSI Approved :: Apache Software License',",
          "12:     description='AWS IoT SDK based on the AWS Common Runtime',",
          "13:     author='AWS SDK Common Runtime Team',",
          "14:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "15:     packages=find_packages(include=['awsiot*']),",
          "",
          "[Removed Lines]",
          "10:     version='1.0.0-dev',",
          "",
          "[Added Lines]",
          "6: import codecs",
          "7: import re",
          "8: import os",
          "11: VERSION_RE = re.compile(r\"\"\".*__version__ = [\"'](.*?)['\"]\"\"\", re.S)",
          "12: PROJECT_DIR = os.path.dirname(os.path.realpath(__file__))",
          "15: def _load_readme():",
          "16:     readme_path = os.path.join(PROJECT_DIR, 'README.md')",
          "17:     with codecs.open(readme_path, 'r', 'utf-8') as f:",
          "18:         return f.read()",
          "21: def _load_version():",
          "22:     init_path = os.path.join(PROJECT_DIR, 'awsiot', '__init__.py')",
          "23:     with open(init_path) as fp:",
          "24:         return VERSION_RE.match(fp.read()).group(1)",
          "29:     version=_load_version(),",
          "32:     long_description=_load_readme(),",
          "33:     long_description_content_type='text/markdown',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.17',",
          "24:     python_requires='>=3.5',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.19',",
          "45:     python_requires='>=3.6',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb4eac9d248fa330a294ee314aef6fda59e4904b",
      "candidate_info": {
        "commit_hash": "fb4eac9d248fa330a294ee314aef6fda59e4904b",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fb4eac9d248fa330a294ee314aef6fda59e4904b",
        "files": [
          "awsiot/__init__.py",
          "samples/basic_discovery.py",
          "samples/pubsub.py",
          "setup.py"
        ],
        "message": "adapt to awscrt.mqtt on-message callbacks taking additional args (#156)\n\nAlso update awscrt version",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "samples/basic_discovery.py||samples/basic_discovery.py",
          "samples/pubsub.py||samples/pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:                 except Exception as e:",
          "133:                     future.set_exception(e)",
          "136:                 try:",
          "137:                     payload_obj = json.loads(payload.decode())",
          "138:                     event = payload_to_class_fn(payload_obj)",
          "",
          "[Removed Lines]",
          "135:             def callback_wrapper(topic, payload, **kwargs):",
          "",
          "[Added Lines]",
          "135:             def callback_wrapper(topic, payload, dup, qos, retain, **kwargs):",
          "",
          "---------------"
        ],
        "samples/basic_discovery.py||samples/basic_discovery.py": [
          "File: samples/basic_discovery.py -> samples/basic_discovery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: if args.mode == 'both' or args.mode == 'subscribe':",
          "102:         print('Publish received on topic {}'.format(topic))",
          "103:         print(payload)",
          "",
          "[Removed Lines]",
          "101:     def on_publish(topic, payload, **kwargs):",
          "",
          "[Added Lines]",
          "101:     def on_publish(topic, payload, dup, qos, retain, **kwargs):",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: # Callback when the subscribed topic receives a message",
          "80:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "81:     global received_count",
          "82:     received_count += 1",
          "",
          "[Removed Lines]",
          "79: def on_message_received(topic, payload, **kwargs):",
          "",
          "[Added Lines]",
          "79: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.9.15',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.10.6',",
          "",
          "---------------"
        ]
      }
    }
  ]
}