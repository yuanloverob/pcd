{
  "cve_id": "CVE-2021-3911",
  "cve_desc": "If the ROA that a repository returns contains too many bits for the IP address then OctoRPKI will crash.",
  "repo": "cloudflare/cfrpki",
  "patch_hash": "2882307febd66801de97b2a2ce4d93fe58132005",
  "patch_info": {
    "commit_hash": "2882307febd66801de97b2a2ce4d93fe58132005",
    "repo": "cloudflare/cfrpki",
    "commit_url": "https://github.com/cloudflare/cfrpki/commit/2882307febd66801de97b2a2ce4d93fe58132005",
    "files": [
      "validator/lib/cert.go",
      "validator/lib/roa.go"
    ],
    "message": "VULN-8286: Prevent oob read when validating IP ranges",
    "before_after_code_files": [
      "validator/lib/cert.go||validator/lib/cert.go",
      "validator/lib/roa.go||validator/lib/roa.go"
    ]
  },
  "patch_diff": {
    "validator/lib/cert.go||validator/lib/cert.go": [
      "File: validator/lib/cert.go -> validator/lib/cert.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: }",
      "64: func (ipn *IPNet) GetRange() (net.IP, net.IP, bool) {",
      "66:  return min, max, false",
      "67: }",
      "",
      "[Removed Lines]",
      "65:  min, max := GetRangeIP(ipn.IPNet)",
      "",
      "[Added Lines]",
      "65:  err, min, max := GetRangeIP(ipn.IPNet)",
      "66:  if err != nil {",
      "67:   return nil, nil, false",
      "68:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "474:    valids = append(valids, ip)",
      "475:    continue",
      "476:   }",
      "477:   valid, checkParent := parent.IsIPRangeInCertificate(min, max)",
      "478:   if valid {",
      "479:    valids = append(valids, ip)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:   if min == nil && max == nil {",
      "481:    invalids = append(invalids, ip)",
      "482:   }",
      "",
      "---------------"
    ],
    "validator/lib/roa.go||validator/lib/roa.go": [
      "File: validator/lib/roa.go -> validator/lib/roa.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:  return roa, nil",
      "134: }",
      "137:  ip := ipnet.IP",
      "138:  mask := ipnet.Mask",
      "140:  beginIP := make([]byte, len(ip))",
      "141:  endIP := make([]byte, len(ip))",
      "142:  for i := range []byte(ip) {",
      "143:   beginIP[i] = ip[i] & mask[i]",
      "144:   endIP[i] = ip[i] | ^mask[i]",
      "145:  }",
      "147: }",
      "",
      "[Removed Lines]",
      "136: func GetRangeIP(ipnet *net.IPNet) (net.IP, net.IP) {",
      "146:  return net.IP(beginIP), net.IP(endIP)",
      "",
      "[Added Lines]",
      "136: func GetRangeIP(ipnet *net.IPNet) (error, net.IP, net.IP) {",
      "144:   if i >= len(mask) {",
      "145:    return errors.New(\"Invalid IP address mask\"), nil, nil",
      "146:   }",
      "150:  return nil, net.IP(beginIP), net.IP(endIP)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "191:  invalids := make([]*ROAEntry, 0)",
      "192:  checkParents := make([]*ROAEntry, 0)",
      "193:  for _, entry := range entries {",
      "195:   valid, checkParent := cert.IsIPRangeInCertificate(min, max)",
      "196:   if valid {",
      "197:    valids = append(valids, entry)",
      "",
      "[Removed Lines]",
      "194:   min, max := GetRangeIP(entry.IPNet)",
      "",
      "[Added Lines]",
      "198:   err, min, max := GetRangeIP(entry.IPNet)",
      "199:   if err != nil {",
      "200:    invalids = append(invalids, entry)",
      "201:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e6193cb104f4b10d21ef777fe0c8f99c1d08c61",
      "candidate_info": {
        "commit_hash": "3e6193cb104f4b10d21ef777fe0c8f99c1d08c61",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/3e6193cb104f4b10d21ef777fe0c8f99c1d08c61",
        "files": [
          "sync/lib/rrdp.go"
        ],
        "message": "VULN-8282: Adjust threshold a smidge for max file size",
        "before_after_code_files": [
          "sync/lib/rrdp.go||sync/lib/rrdp.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sync/lib/rrdp.go||sync/lib/rrdp.go": [
          "File: sync/lib/rrdp.go -> sync/lib/rrdp.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"github.com/getsentry/sentry-go\"",
          "14: )",
          "18: type RRDPFetcher interface {",
          "19:  GetXML(string) (string, error)",
          "",
          "[Removed Lines]",
          "16: const ResponseLimit int64 = 100000000 // (100mb)",
          "",
          "[Added Lines]",
          "16: const ResponseLimit int64 = 1000000000 // (5Gb)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76f0f7a98da001fa04e5bc0407c6702f91096bfa",
      "candidate_info": {
        "commit_hash": "76f0f7a98da001fa04e5bc0407c6702f91096bfa",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/76f0f7a98da001fa04e5bc0407c6702f91096bfa",
        "files": [
          "validator/lib/ber.go"
        ],
        "message": "VULN-8284: Prevent oob read on BER data containing NUL contents",
        "before_after_code_files": [
          "validator/lib/ber.go||validator/lib/ber.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "validator/lib/ber.go||validator/lib/ber.go": [
          "File: validator/lib/ber.go -> validator/lib/ber.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  var length int",
          "165:  l := ber[offset]",
          "166:  offset++",
          "167:  indefinite := false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:  if len(ber) <= offset {",
          "167:   return nil, 0, errors.New(\"ber2der: invalid BER tag length\")",
          "168:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a053a808feeb3115c76b6cc263ee55598ce6e8cd",
      "candidate_info": {
        "commit_hash": "a053a808feeb3115c76b6cc263ee55598ce6e8cd",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/a053a808feeb3115c76b6cc263ee55598ce6e8cd",
        "files": [
          "cmd/octorpki/octorpki.go",
          "validator/pki/pki.go"
        ],
        "message": "VULN-8290: Prevent parent directory traversal on file writes/reads",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
          "validator/pki/pki.go||validator/pki/pki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:  if err != nil {",
          "315:   log.Fatal(err)",
          "316:  }",
          "317:  f, err := os.Create(filepath.Join(s.Basepath, fPath))",
          "318:  if err != nil {",
          "319:   return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:  fPath = strings.ReplaceAll(fPath, \"../\", \"\")",
          "",
          "---------------"
        ],
        "validator/pki/pki.go||validator/pki/pki.go": [
          "File: validator/pki/pki.go -> validator/pki/pki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"encoding/asn1\"",
          "8:  \"errors\"",
          "9:  \"fmt\"",
          "11:  \"time\"",
          "12: )",
          "14: const (",
          "",
          "[Removed Lines]",
          "10:  \"github.com/cloudflare/cfrpki/validator/lib\"",
          "",
          "[Added Lines]",
          "10:  \"strings\"",
          "13:  librpki \"github.com/cloudflare/cfrpki/validator/lib\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "754:  for _, file := range mft.Content.FileList {",
          "755:   curFile := file.Name",
          "756:   path := string(curFile)",
          "757:   item := PKIFile{",
          "758:    Type:         DetermineType(path),",
          "759:    Path:         path,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:   path = strings.ReplaceAll(path, \"../\", \"\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbc038f83197edc1f3360ab35af193a1557063c6",
      "candidate_info": {
        "commit_hash": "dbc038f83197edc1f3360ab35af193a1557063c6",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/dbc038f83197edc1f3360ab35af193a1557063c6",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "VULN-8283: Removing test lines",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  AppVersion = \"OctoRPKI \" + version + \" \" + buildinfos",
          "56:  UseManifest = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "57:  Basepath    = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "58:  LogLevel    = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "",
          "[Removed Lines]",
          "52:  RootTAL  = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "[Added Lines]",
          "52:  RootTAL     = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames    = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d518c2cae618d41cf574ee05cf639777d7309c4",
      "candidate_info": {
        "commit_hash": "6d518c2cae618d41cf574ee05cf639777d7309c4",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/6d518c2cae618d41cf574ee05cf639777d7309c4",
        "files": [
          "validator/lib/cert.go"
        ],
        "message": "VULN-8286: Remove superfluous invalids check",
        "before_after_code_files": [
          "validator/lib/cert.go||validator/lib/cert.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [
            "validator/lib/cert.go||validator/lib/cert.go"
          ],
          "candidate": [
            "validator/lib/cert.go||validator/lib/cert.go"
          ]
        }
      },
      "candidate_diff": {
        "validator/lib/cert.go||validator/lib/cert.go": [
          "File: validator/lib/cert.go -> validator/lib/cert.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:    valids = append(valids, ip)",
          "478:    continue",
          "479:   }",
          "483:   valid, checkParent := parent.IsIPRangeInCertificate(min, max)",
          "484:   if valid {",
          "485:    valids = append(valids, ip)",
          "",
          "[Removed Lines]",
          "480:   if min == nil && max == nil {",
          "481:    invalids = append(invalids, ip)",
          "482:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}