{
  "cve_id": "CVE-2023-4639",
  "cve_desc": "A flaw was found in Undertow, which incorrectly parses cookies with certain value-delimiting characters in incoming requests. This issue could allow an attacker to construct a cookie value to exfiltrate HttpOnly cookie values or spoof arbitrary additional cookie values, leading to unauthorized data access or modification. The main threat from this flaw impacts data confidentiality and integrity.",
  "repo": "undertow-io/undertow",
  "patch_hash": "1f93a979d2ac264798e5779b5b7172dfafe0066f",
  "patch_info": {
    "commit_hash": "1f93a979d2ac264798e5779b5b7172dfafe0066f",
    "repo": "undertow-io/undertow",
    "commit_url": "https://github.com/undertow-io/undertow/commit/1f93a979d2ac264798e5779b5b7172dfafe0066f",
    "files": [
      "core/src/main/java/io/undertow/util/Cookies.java",
      "core/src/test/java/io/undertow/util/CookiesTestCase.java"
    ],
    "message": "[UNDERTOW-2342] CVE-2023-4639 ignore cookie with improper quotes\n\nSigned-off-by: Flavia Rainone <frainone@redhat.com>",
    "before_after_code_files": [
      "core/src/main/java/io/undertow/util/Cookies.java||core/src/main/java/io/undertow/util/Cookies.java",
      "core/src/test/java/io/undertow/util/CookiesTestCase.java||core/src/test/java/io/undertow/util/CookiesTestCase.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/io/undertow/util/Cookies.java||core/src/main/java/io/undertow/util/Cookies.java": [
      "File: core/src/main/java/io/undertow/util/Cookies.java -> core/src/main/java/io/undertow/util/Cookies.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "318:                         cookieCount = createCookie(name, containsEscapedQuotes ? unescapeDoubleQuotes(cookie.substring(start, i)) : cookie.substring(start, i), maxCookies, cookieCount, cookies, additional);",
      "319:                         state = 0;",
      "320:                         start = i + 1;",
      "321:                     }",
      "323:                     if (c == '\\\\' && (i + 1 < cookie.length()) && cookie.charAt(i + 1) == '\"') {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "321:                     } else if (c == ';' || (commaIsSeperator && c == ',')) {",
      "322:                         state = 0;",
      "323:                         start = i + 1;",
      "",
      "---------------"
    ],
    "core/src/test/java/io/undertow/util/CookiesTestCase.java||core/src/test/java/io/undertow/util/CookiesTestCase.java": [
      "File: core/src/test/java/io/undertow/util/CookiesTestCase.java -> core/src/test/java/io/undertow/util/CookiesTestCase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "450:         Assert.assertNull(cookie.getSameSiteMode());",
      "451:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "453:     @Test",
      "454:     public void testNoDoubleQuoteTermination() {",
      "455:         Map<String, Cookie> cookies = Cookies.parseRequestCookies(4, false, Arrays.asList(\"CUSTOMER=\\\"WILE_E_COYOTE\\\"; BAD=\\\"X; SHIPPING=FEDEX\"), true);",
      "456:         Assert.assertEquals(2, cookies.size());",
      "457:         Cookie cookie = cookies.get(\"CUSTOMER\");",
      "458:         Assert.assertEquals(\"CUSTOMER\", cookie.getName());",
      "459:         Assert.assertEquals(\"WILE_E_COYOTE\", cookie.getValue());",
      "460:         cookie = cookies.get(\"BAD\");",
      "461:         Assert.assertNull(cookie);",
      "462:         cookie = cookies.get(\"SHIPPING\");",
      "463:         Assert.assertEquals(\"SHIPPING\", cookie.getName());",
      "464:         Assert.assertEquals(\"FEDEX\", cookie.getValue());",
      "465:         Assert.assertNotNull(cookie);",
      "466:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea7ea2525d9acad0fcf8f3dfd4972f91394796ee",
      "candidate_info": {
        "commit_hash": "ea7ea2525d9acad0fcf8f3dfd4972f91394796ee",
        "repo": "undertow-io/undertow",
        "commit_url": "https://github.com/undertow-io/undertow/commit/ea7ea2525d9acad0fcf8f3dfd4972f91394796ee",
        "files": [
          "core/src/main/java/io/undertow/util/Cookies.java",
          "core/src/test/java/io/undertow/util/CookiesTestCase.java"
        ],
        "message": "[UNDERTOW-2342] CVE-2023-4639 ignore cookie with improper quotes\n\nSigned-off-by: Flavia Rainone <frainone@redhat.com>",
        "before_after_code_files": [
          "core/src/main/java/io/undertow/util/Cookies.java||core/src/main/java/io/undertow/util/Cookies.java",
          "core/src/test/java/io/undertow/util/CookiesTestCase.java||core/src/test/java/io/undertow/util/CookiesTestCase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/io/undertow/util/Cookies.java||core/src/main/java/io/undertow/util/Cookies.java",
            "core/src/test/java/io/undertow/util/CookiesTestCase.java||core/src/test/java/io/undertow/util/CookiesTestCase.java"
          ],
          "candidate": [
            "core/src/main/java/io/undertow/util/Cookies.java||core/src/main/java/io/undertow/util/Cookies.java",
            "core/src/test/java/io/undertow/util/CookiesTestCase.java||core/src/test/java/io/undertow/util/CookiesTestCase.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/io/undertow/util/Cookies.java||core/src/main/java/io/undertow/util/Cookies.java": [
          "File: core/src/main/java/io/undertow/util/Cookies.java -> core/src/main/java/io/undertow/util/Cookies.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:                         cookieCount = createCookie(name, containsEscapedQuotes ? unescapeDoubleQuotes(cookie.substring(start, i)) : cookie.substring(start, i), maxCookies, cookieCount, cookies, additional);",
          "317:                         state = 0;",
          "318:                         start = i + 1;",
          "319:                     }",
          "321:                     if (c == '\\\\' && (i + 1 < cookie.length()) && cookie.charAt(i + 1) == '\"') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:                     } else if (c == ';' || (commaIsSeperator && c == ',')) {",
          "320:                         state = 0;",
          "321:                         start = i + 1;",
          "",
          "---------------"
        ],
        "core/src/test/java/io/undertow/util/CookiesTestCase.java||core/src/test/java/io/undertow/util/CookiesTestCase.java": [
          "File: core/src/test/java/io/undertow/util/CookiesTestCase.java -> core/src/test/java/io/undertow/util/CookiesTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:         Assert.assertNull(cookie.getSameSiteMode());",
          "450:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     @Test",
          "453:     public void testNoDoubleQuoteTermination() {",
          "454:         Map<String, Cookie> cookies = Cookies.parseRequestCookies(4, false, Arrays.asList(\"CUSTOMER=\\\"WILE_E_COYOTE\\\"; BAD=\\\"X; SHIPPING=FEDEX\"), true);",
          "455:         Assert.assertEquals(2, cookies.size());",
          "456:         Cookie cookie = cookies.get(\"CUSTOMER\");",
          "457:         Assert.assertEquals(\"CUSTOMER\", cookie.getName());",
          "458:         Assert.assertEquals(\"WILE_E_COYOTE\", cookie.getValue());",
          "459:         cookie = cookies.get(\"BAD\");",
          "460:         Assert.assertNull(cookie);",
          "461:         cookie = cookies.get(\"SHIPPING\");",
          "462:         Assert.assertEquals(\"SHIPPING\", cookie.getName());",
          "463:         Assert.assertEquals(\"FEDEX\", cookie.getValue());",
          "464:         Assert.assertNotNull(cookie);",
          "465:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}