{
  "cve_id": "CVE-2019-1107",
  "cve_desc": "A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1062, CVE-2019-1092, CVE-2019-1103, CVE-2019-1106.",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "214dec9461f9acb9a4b9004368d2a81e0c125652",
  "patch_info": {
    "commit_hash": "214dec9461f9acb9a4b9004368d2a81e0c125652",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/214dec9461f9acb9a4b9004368d2a81e0c125652",
    "files": [
      "lib/Backend/GlobOptFields.cpp"
    ],
    "message": "[CVE-2019-1107] Chakra JIT Type Confusion FinishOptPropOp",
    "before_after_code_files": [
      "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
    ]
  },
  "patch_diff": {
    "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
      "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "410:         if (inGlobOpt)",
      "411:         {",
      "412:             KillObjectHeaderInlinedTypeSyms(this->currentBlock, false);",
      "413:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "413:             if (this->objectTypeSyms)",
      "414:             {",
      "415:                 if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)",
      "416:                 {",
      "417:                     this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);",
      "418:                 }",
      "419:                 this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);",
      "420:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "efab3101028045cbfa0cc21bd852f75bcc037dba",
      "candidate_info": {
        "commit_hash": "efab3101028045cbfa0cc21bd852f75bcc037dba",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/efab3101028045cbfa0cc21bd852f75bcc037dba",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BailOut.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/Opnd.h"
        ],
        "message": "[CVE-2019-1103] Chakra JIT Type Confusion",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/BailOut.h||lib/Backend/BailOut.h",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/Opnd.h||lib/Backend/Opnd.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6196"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4152:     IR::BailOutKind implicitCallBailOutKind = needsBailOutOnImplicitCall ? IR::BailOutOnImplicitCalls : IR::BailOutInvalid;",
          "4155:     if (instrBailOutKind & IR::BailOutMarkTempObject)",
          "4156:     {",
          "4161:     }",
          "4163:     const IR::BailOutKind instrImplicitCallBailOutKind = instrBailOutKind & ~IR::BailOutKindBits;",
          "",
          "[Removed Lines]",
          "4154:     const IR::BailOutKind instrBailOutKind = instr->GetBailOutKind();",
          "4159:         instr->SetBailOutKind(instrBailOutKind & ~IR::BailOutMarkTempObject);",
          "4160:         return true;",
          "",
          "[Added Lines]",
          "4154:     IR::BailOutKind instrBailOutKind = instr->GetBailOutKind();",
          "4158:         instrBailOutKind &= ~IR::BailOutMarkTempObject;",
          "4159:         instr->SetBailOutKind(instrBailOutKind);",
          "4161:         if (!instr->GetBailOutInfo()->canDeadStore)",
          "4162:         {",
          "4163:             return true;",
          "4164:         }",
          "",
          "---------------"
        ],
        "lib/Backend/BailOut.h||lib/Backend/BailOut.h": [
          "File: lib/Backend/BailOut.h -> lib/Backend/BailOut.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     BailOutInfo(uint32 bailOutOffset, Func* bailOutFunc) :",
          "28:         bailOutOffset(bailOutOffset), bailOutFunc(bailOutFunc),",
          "29:         byteCodeUpwardExposedUsed(nullptr), polymorphicCacheIndex((uint)-1), startCallCount(0), startCallInfo(nullptr), bailOutInstr(nullptr),",
          "31:         outParamInlinedArgSlot(nullptr), liveVarSyms(nullptr), liveLosslessInt32Syms(nullptr), liveFloat64Syms(nullptr),",
          "32:         branchConditionOpnd(nullptr),",
          "33:         stackLiteralBailOutInfoCount(0), stackLiteralBailOutInfo(nullptr)",
          "",
          "[Removed Lines]",
          "30:         totalOutParamCount(0), argOutSyms(nullptr), bailOutRecord(nullptr), wasCloned(false), isInvertedBranch(false), sharedBailOutKind(true), isLoopTopBailOutInfo(false),",
          "",
          "[Added Lines]",
          "30:         totalOutParamCount(0), argOutSyms(nullptr), bailOutRecord(nullptr), wasCloned(false), isInvertedBranch(false), sharedBailOutKind(true), isLoopTopBailOutInfo(false), canDeadStore(true),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: #endif",
          "70:     bool wasCloned;",
          "71:     bool isInvertedBranch;",
          "72:     bool sharedBailOutKind;",
          "73:     bool isLoopTopBailOutInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     bool canDeadStore;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16531:         if (instr->HasBailOutInfo())",
          "16532:         {",
          "16533:             instr->SetBailOutKind(instr->GetBailOutKind() | IR::BailOutMarkTempObject);",
          "16534:         }",
          "16535:         else",
          "16536:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16534:             instr->GetBailOutInfo()->canDeadStore = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16540:                 || (instr->m_opcode == Js::OpCode::FromVar && !opnd->GetValueType().IsPrimitive())",
          "16541:                 || propertySymOpnd == nullptr",
          "16542:                 || !propertySymOpnd->IsTypeCheckProtected())",
          "16543:             {",
          "16544:                 this->GenerateBailAtOperation(&instr, IR::BailOutMarkTempObject);",
          "16545:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16544:             {",
          "16545:                 this->GenerateBailAtOperation(&instr, IR::BailOutMarkTempObject);",
          "16546:                 instr->GetBailOutInfo()->canDeadStore = false;",
          "16547:             }",
          "16548:             else if (propertySymOpnd->MayHaveImplicitCall())",
          "",
          "---------------"
        ],
        "lib/Backend/Opnd.h||lib/Backend/Opnd.h": [
          "File: lib/Backend/Opnd.h -> lib/Backend/Opnd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:     bool MayHaveImplicitCall() const",
          "1140:     {",
          "1142:     }",
          "",
          "[Removed Lines]",
          "1141:         return !IsRootObjectNonConfigurableFieldLoad() && !UsesFixedValue() && (!IsTypeCheckSeqCandidate() || !IsTypeCheckProtected());",
          "",
          "[Added Lines]",
          "1141:         return !IsRootObjectNonConfigurableFieldLoad() && !UsesFixedValue() && (!IsTypeCheckSeqCandidate() || !IsTypeCheckProtected()",
          "1142:             || (IsLoadedFromProto() && NeedsWriteGuardTypeCheck()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "362e96537af207be3ecf7fa32f338229ee1dcc46",
      "candidate_info": {
        "commit_hash": "362e96537af207be3ecf7fa32f338229ee1dcc46",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/362e96537af207be3ecf7fa32f338229ee1dcc46",
        "files": [
          "lib/Backend/Func.cpp",
          "lib/Backend/Func.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/JITOutput.cpp",
          "lib/Backend/JITOutput.h",
          "lib/Backend/NativeCodeGenerator.cpp",
          "lib/JITIDL/JITTypes.h"
        ],
        "message": "[CVE-2019-1106] Chakra JIT Overflow",
        "before_after_code_files": [
          "lib/Backend/Func.cpp||lib/Backend/Func.cpp",
          "lib/Backend/Func.h||lib/Backend/Func.h",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/JITOutput.cpp||lib/Backend/JITOutput.cpp",
          "lib/Backend/JITOutput.h||lib/Backend/JITOutput.h",
          "lib/Backend/NativeCodeGenerator.cpp||lib/Backend/NativeCodeGenerator.cpp",
          "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6196"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/Func.cpp||lib/Backend/Func.cpp": [
          "File: lib/Backend/Func.cpp -> lib/Backend/Func.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:             case RejitReason::TrackIntOverflowDisabled:",
          "346:                 outputData->disableTrackCompoundedIntOverflow = TRUE;",
          "347:                 break;",
          "348:             default:",
          "349:                 Assume(UNREACHED);",
          "350:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:             case RejitReason::MemOpDisabled:",
          "349:                 outputData->disableMemOp = TRUE;",
          "350:                 break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:     return (HasProfileInfo() && GetReadOnlyProfileInfo()->IsTrackCompoundedIntOverflowDisabled()) || m_output.IsTrackCompoundedIntOverflowDisabled();",
          "1125: }",
          "1127: bool",
          "1128: Func::IsArrayCheckHoistDisabled() const",
          "1129: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130: bool",
          "1131: Func::IsMemOpDisabled() const",
          "1132: {",
          "1133:     return (HasProfileInfo() && GetReadOnlyProfileInfo()->IsMemOpDisabled()) || m_output.IsMemOpDisabled();",
          "1134: }",
          "",
          "---------------"
        ],
        "lib/Backend/Func.h||lib/Backend/Func.h": [
          "File: lib/Backend/Func.h -> lib/Backend/Func.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     void SetScopeObjSym(StackSym * sym);",
          "996:     StackSym * GetScopeObjSym();",
          "997:     bool IsTrackCompoundedIntOverflowDisabled() const;",
          "998:     bool IsArrayCheckHoistDisabled() const;",
          "999:     bool IsStackArgOptDisabled() const;",
          "1000:     bool IsSwitchOptDisabled() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "998:     bool IsMemOpDisabled() const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2624:         !(instr->IsJitProfilingInstr()) &&",
          "2625:         this->currentBlock->loop && !IsLoopPrePass() &&",
          "2626:         !func->IsJitInDebugMode() &&",
          "2628:         this->currentBlock->loop->doMemOp)",
          "2629:     {",
          "2630:         CollectMemOpInfo(instrPrev, instr, src1Val, src2Val);",
          "",
          "[Removed Lines]",
          "2627:         (func->HasProfileInfo() && !func->GetReadOnlyProfileInfo()->IsMemOpDisabled()) &&",
          "",
          "[Added Lines]",
          "2627:         !func->IsMemOpDisabled() &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16686:     }",
          "16687:     else",
          "16688:     {",
          "16690:         sizeOpnd = IR::IntConstOpnd::New(size, IRType::TyUint32, localFunc);",
          "16691:     }",
          "16692:     loop->memOpInfo->inductionVariableOpndPerUnrollMap->Add(unroll, sizeOpnd);",
          "",
          "[Removed Lines]",
          "16689:         uint size = (loopCount->LoopCountMinusOneConstantValue() + 1)  * unroll;",
          "",
          "[Added Lines]",
          "16689:         int32 loopCountMinusOnePlusOne;",
          "16690:         int32 size;",
          "16691:         if (Int32Math::Add(loopCount->LoopCountMinusOneConstantValue(), 1, &loopCountMinusOnePlusOne) ||",
          "16692:             Int32Math::Mul(loopCountMinusOnePlusOne, unroll, &size))",
          "16693:         {",
          "16694:             throw Js::RejitException(RejitReason::MemOpDisabled);",
          "16695:         }",
          "16696:         Assert(size > 0);",
          "",
          "---------------"
        ],
        "lib/Backend/JITOutput.cpp||lib/Backend/JITOutput.cpp": [
          "File: lib/Backend/JITOutput.cpp -> lib/Backend/JITOutput.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     return m_outputData->disableTrackCompoundedIntOverflow != FALSE;",
          "66: }",
          "68: bool",
          "69: JITOutput::IsArrayCheckHoistDisabled() const",
          "70: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: bool",
          "69: JITOutput::IsMemOpDisabled() const",
          "70: {",
          "71:     return m_outputData->disableMemOp != FALSE;",
          "72: }",
          "",
          "---------------"
        ],
        "lib/Backend/JITOutput.h||lib/Backend/JITOutput.h": [
          "File: lib/Backend/JITOutput.h -> lib/Backend/JITOutput.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     void RecordXData(BYTE * xdata);",
          "23: #endif",
          "24:     bool IsTrackCompoundedIntOverflowDisabled() const;",
          "25:     bool IsArrayCheckHoistDisabled() const;",
          "26:     bool IsStackArgOptDisabled() const;",
          "27:     bool IsSwitchOptDisabled() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     bool IsMemOpDisabled() const;",
          "",
          "---------------"
        ],
        "lib/Backend/NativeCodeGenerator.cpp||lib/Backend/NativeCodeGenerator.cpp": [
          "File: lib/Backend/NativeCodeGenerator.cpp -> lib/Backend/NativeCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1234:         {",
          "1235:             body->GetAnyDynamicProfileInfo()->DisableTrackCompoundedIntOverflow();",
          "1236:         }",
          "1237:     }",
          "1239:     if (jitWriteData.disableInlineApply)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237:         if (jitWriteData.disableMemOp)",
          "1238:         {",
          "1239:             body->GetAnyDynamicProfileInfo()->DisableMemOp();",
          "1240:         }",
          "",
          "---------------"
        ],
        "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h": [
          "File: lib/JITIDL/JITTypes.h -> lib/JITIDL/JITTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "838:     boolean disableStackArgOpt;",
          "839:     boolean disableSwitchOpt;",
          "840:     boolean disableTrackCompoundedIntOverflow;",
          "843:     boolean hasBailoutInstr;",
          "845:     boolean hasJittedStackClosure;",
          "847:     unsigned short pdataCount;",
          "848:     unsigned short xdataSize;",
          "850:     unsigned short argUsedForBranch;",
          "852:     int localVarSlotsOffset; // FunctionEntryPointInfo only",
          "853:     int localVarChangedOffset; // FunctionEntryPointInfo only",
          "854:     unsigned int frameHeight;",
          "857:     unsigned int codeSize;",
          "858:     unsigned int throwMapOffset;",
          "859:     unsigned int throwMapCount;",
          "860:     unsigned int inlineeFrameOffsetArrayOffset;",
          "863:     unsigned int propertyGuardCount;",
          "864:     unsigned int ctorCachesCount;",
          "866: #if TARGET_64",
          "867:     CHAKRA_PTR xdataAddr;",
          "868: #elif defined(_M_ARM)",
          "869:     unsigned int xdataOffset;",
          "870: #else",
          "872: #endif",
          "873:     CHAKRA_PTR codeAddress;",
          "874:     CHAKRA_PTR thunkAddress;",
          "",
          "[Removed Lines]",
          "841:     boolean isInPrereservedRegion;",
          "861:     unsigned int inlineeFrameOffsetArrayCount;",
          "871:     X86_PAD4(0)",
          "",
          "[Added Lines]",
          "841:     boolean disableMemOp;",
          "843:     boolean isInPrereservedRegion;",
          "846:     IDL_PAD1(0)",
          "852:     IDL_PAD2(1)",
          "865:     unsigned int inlineeFrameOffsetArrayCount;",
          "869:     X64_PAD4(2)",
          "876:     X86_PAD4(3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f0d390ad77d838cbb81d4586c83ec822f384ce8",
      "candidate_info": {
        "commit_hash": "7f0d390ad77d838cbb81d4586c83ec822f384ce8",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/7f0d390ad77d838cbb81d4586c83ec822f384ce8",
        "files": [
          "lib/Backend/Opnd.cpp"
        ],
        "message": "[CVE-2019-1062] Chakra JIT Type Confusion",
        "before_after_code_files": [
          "lib/Backend/Opnd.cpp||lib/Backend/Opnd.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6196"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/Opnd.cpp||lib/Backend/Opnd.cpp": [
          "File: lib/Backend/Opnd.cpp -> lib/Backend/Opnd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "962: bool",
          "963: PropertySymOpnd::ChangesObjectLayout() const",
          "964: {",
          "967:     JITTypeHolder finalType = this->GetFinalType();",
          "",
          "[Removed Lines]",
          "965:     JITTypeHolder cachedType = this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();",
          "",
          "[Added Lines]",
          "965:     JITTypeHolder cachedType = this->HasInitialType() ? this->GetInitialType() :",
          "966:         this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:         const JITTypeHandler * initialTypeHandler = initialType->GetTypeHandler();",
          "997:     }",
          "999:     return false;",
          "",
          "[Removed Lines]",
          "990:         Assert(cachedType != nullptr && Js::DynamicType::Is(cachedType->GetTypeId()));",
          "992:         const JITTypeHandler * cachedTypeHandler = cachedType->GetTypeHandler();",
          "995:         return cachedTypeHandler->GetInlineSlotCapacity() != initialTypeHandler->GetInlineSlotCapacity() ||",
          "996:             cachedTypeHandler->GetOffsetOfInlineSlots() != initialTypeHandler->GetOffsetOfInlineSlots();",
          "",
          "[Added Lines]",
          "995:         return initialTypeHandler->IsObjectHeaderInlinedTypeHandler();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4e767fb946128c135d77edda7a794561e1c1f06",
      "candidate_info": {
        "commit_hash": "d4e767fb946128c135d77edda7a794561e1c1f06",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/d4e767fb946128c135d77edda7a794561e1c1f06",
        "files": [
          "lib/Backend/GlobOptBlockData.cpp",
          "lib/Backend/GlobOptBlockData.h"
        ],
        "message": "[CVE-2019-1092] Chakra JIT OOB R/W",
        "before_after_code_files": [
          "lib/Backend/GlobOptBlockData.cpp||lib/Backend/GlobOptBlockData.cpp",
          "lib/Backend/GlobOptBlockData.h||lib/Backend/GlobOptBlockData.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6196"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptBlockData.cpp||lib/Backend/GlobOptBlockData.cpp": [
          "File: lib/Backend/GlobOptBlockData.cpp -> lib/Backend/GlobOptBlockData.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:                 fromDataValueInfo->AsArrayValueInfo(),",
          "975:                 fromDataSym,",
          "976:                 symsRequiringCompensation,",
          "978:     }",
          "",
          "[Removed Lines]",
          "977:                 symsCreatedForMerge);",
          "",
          "[Added Lines]",
          "977:                 symsCreatedForMerge,",
          "978:                 isLoopBackEdge);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1072:     const ArrayValueInfo *const fromDataValueInfo,",
          "1073:     Sym *const arraySym,",
          "1074:     BVSparse<JitArenaAllocator> *const symsRequiringCompensation,",
          "1076: {",
          "1077:     Assert(mergedValueType.IsAnyOptimizedArray());",
          "1078:     Assert(toDataValueInfo);",
          "",
          "[Removed Lines]",
          "1075:     BVSparse<JitArenaAllocator> *const symsCreatedForMerge)",
          "",
          "[Added Lines]",
          "1076:     BVSparse<JitArenaAllocator> *const symsCreatedForMerge,",
          "1077:     bool isLoopBackEdge)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1095:         }",
          "1096:         else",
          "1097:         {",
          "1099:             {",
          "1101:                 Assert(symsRequiringCompensation);",
          "",
          "[Removed Lines]",
          "1098:             if (!this->globOpt->IsLoopPrePass())",
          "",
          "[Added Lines]",
          "1100:             if (!this->globOpt->IsLoopPrePass() && !isLoopBackEdge)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1123:         }",
          "1124:         else",
          "1125:         {",
          "1127:             {",
          "1128:                 Assert(symsRequiringCompensation);",
          "1129:                 symsRequiringCompensation->Set(arraySym->m_id);",
          "",
          "[Removed Lines]",
          "1126:             if (!this->globOpt->IsLoopPrePass())",
          "",
          "[Added Lines]",
          "1128:             if (!this->globOpt->IsLoopPrePass() && !isLoopBackEdge)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1150:         }",
          "1151:         else",
          "1152:         {",
          "1154:             {",
          "1155:                 Assert(symsRequiringCompensation);",
          "1156:                 symsRequiringCompensation->Set(arraySym->m_id);",
          "",
          "[Removed Lines]",
          "1153:             if (!this->globOpt->IsLoopPrePass())",
          "",
          "[Added Lines]",
          "1155:             if (!this->globOpt->IsLoopPrePass() && !isLoopBackEdge)",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptBlockData.h||lib/Backend/GlobOptBlockData.h": [
          "File: lib/Backend/GlobOptBlockData.h -> lib/Backend/GlobOptBlockData.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     Value *                 MergeValues(Value *toDataValue, Value *fromDataValue, Sym *fromDataSym, bool isLoopBackEdge, BVSparse<JitArenaAllocator> *const symsRequiringCompensation, BVSparse<JitArenaAllocator> *const symsCreatedForMerge);",
          "265:     ValueInfo *             MergeValueInfo(Value *toDataVal, Value *fromDataVal, Sym *fromDataSym, bool isLoopBackEdge, bool sameValueNumber, BVSparse<JitArenaAllocator> *const symsRequiringCompensation, BVSparse<JitArenaAllocator> *const symsCreatedForMerge);",
          "266:     JsTypeValueInfo *       MergeJsTypeValueInfo(JsTypeValueInfo * toValueInfo, JsTypeValueInfo * fromValueInfo, bool isLoopBackEdge, bool sameValueNumber);",
          "270: public:",
          "",
          "[Removed Lines]",
          "267:     ValueInfo *             MergeArrayValueInfo(const ValueType mergedValueType, const ArrayValueInfo *const toDataValueInfo, const ArrayValueInfo *const fromDataValueInfo, Sym *const arraySym, BVSparse<JitArenaAllocator> *const symsRequiringCompensation, BVSparse<JitArenaAllocator> *const symsCreatedForMerge);",
          "",
          "[Added Lines]",
          "267:     ValueInfo *             MergeArrayValueInfo(const ValueType mergedValueType, const ArrayValueInfo *const toDataValueInfo, const ArrayValueInfo *const fromDataValueInfo, Sym *const arraySym, BVSparse<JitArenaAllocator> *const symsRequiringCompensation, BVSparse<JitArenaAllocator> *const symsCreatedForMerge, bool isLoopBackEdge);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12c31f0e83ddc511e57b9aa1e78533899199eb32",
      "candidate_info": {
        "commit_hash": "12c31f0e83ddc511e57b9aa1e78533899199eb32",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/12c31f0e83ddc511e57b9aa1e78533899199eb32",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h"
        ],
        "message": "Update version to 1.11.11",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6196"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 10",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 11",
          "",
          "---------------"
        ]
      }
    }
  ]
}