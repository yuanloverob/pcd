{
  "cve_id": "CVE-2023-43620",
  "cve_desc": "An issue was discovered in Croc through 9.6.5. A sender may place ANSI or CSI escape sequences in a filename to attack the terminal device of a receiver.",
  "repo": "schollz/croc",
  "patch_hash": "3f12f75fae2e844c555ec01eeba0b8474938e93a",
  "patch_info": {
    "commit_hash": "3f12f75fae2e844c555ec01eeba0b8474938e93a",
    "repo": "schollz/croc",
    "commit_url": "https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a",
    "files": [
      "src/croc/croc.go",
      "src/utils/utils.go"
    ],
    "message": "Merge pull request #697 from schollz/issue593\n\nfix: client quits when discovering dangerous paths",
    "before_after_code_files": [
      "src/croc/croc.go||src/croc/croc.go",
      "src/utils/utils.go||src/utils/utils.go"
    ]
  },
  "patch_diff": {
    "src/croc/croc.go||src/croc/croc.go": [
      "File: src/croc/croc.go -> src/croc/croc.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1092:  c.EmptyFoldersToTransfer = senderInfo.EmptyFoldersToTransfer",
      "1093:  c.TotalNumberFolders = senderInfo.TotalNumberFolders",
      "1094:  c.FilesToTransfer = senderInfo.FilesToTransfer",
      "1095:  c.TotalNumberOfContents = 0",
      "1096:  if c.FilesToTransfer != nil {",
      "1097:   c.TotalNumberOfContents += len(c.FilesToTransfer)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1095:  for i, fi := range c.FilesToTransfer {",
      "1097:   c.FilesToTransfer[i].FolderRemote = filepath.Clean(fi.FolderRemote)",
      "1098:   if strings.Contains(c.FilesToTransfer[i].FolderRemote, \"..\") {",
      "1099:    return true, fmt.Errorf(\"invalid path detected: '%s'\", fi.FolderRemote)",
      "1100:   }",
      "1102:   if strings.Contains(c.FilesToTransfer[i].FolderRemote, \".ssh\") {",
      "1103:    return true, fmt.Errorf(\"invalid path detected: '%s'\", fi.FolderRemote)",
      "1104:   }",
      "1107:   if !utils.ValidFileName(path.Join(c.FilesToTransfer[i].FolderRemote, fi.Name)) {",
      "1108:    return true, fmt.Errorf(\"invalid filename detected: '%s'\", fi.Name)",
      "1109:   }",
      "1110:  }",
      "",
      "---------------"
    ],
    "src/utils/utils.go||src/utils/utils.go": [
      "File: src/utils/utils.go -> src/utils/utils.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "438:   filePath := filepath.Join(destination, f.Name)",
      "439:   fmt.Fprintf(os.Stderr, \"\\r\\033[2K\")",
      "440:   fmt.Fprintf(os.Stderr, \"\\rUnzipping file %s\", filePath)",
      "441:   if f.FileInfo().IsDir() {",
      "442:    os.MkdirAll(filePath, os.ModePerm)",
      "443:    continue",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "443:   filePath = filepath.Clean(filePath)",
      "444:   if strings.Contains(filePath, \"..\") {",
      "445:    log.Fatalf(\"Invalid file path %s\\n\", filePath)",
      "446:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:  fmt.Fprintf(os.Stderr, \"\\n\")",
      "468:  return nil",
      "469: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480: func ValidFileName(fname string) bool {",
      "481:  for _, r := range fname {",
      "482:   if !((r >= '0' && r <= '9') ||",
      "483:    (r >= 'a' && r <= 'z') ||",
      "484:    (r >= 'A' && r <= 'Z') ||",
      "485:    r == '.' || r == '_' || r == '-' || r == ' ' || r == '/') {",
      "486:    return false",
      "487:   }",
      "488:  }",
      "489:  return true",
      "490: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b05c3c8c42eb681f1586824e1887ea74845f6154",
      "candidate_info": {
        "commit_hash": "b05c3c8c42eb681f1586824e1887ea74845f6154",
        "repo": "schollz/croc",
        "commit_url": "https://github.com/schollz/croc/commit/b05c3c8c42eb681f1586824e1887ea74845f6154",
        "files": [
          "src/croc/croc.go",
          "src/utils/utils.go"
        ],
        "message": "fix: client quits when discovering dangerous paths",
        "before_after_code_files": [
          "src/croc/croc.go||src/croc/croc.go",
          "src/utils/utils.go||src/utils/utils.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/schollz/croc/pull/697"
        ],
        "olp_code_files": {
          "patch": [
            "src/croc/croc.go||src/croc/croc.go",
            "src/utils/utils.go||src/utils/utils.go"
          ],
          "candidate": [
            "src/croc/croc.go||src/croc/croc.go",
            "src/utils/utils.go||src/utils/utils.go"
          ]
        }
      },
      "candidate_diff": {
        "src/croc/croc.go||src/croc/croc.go": [
          "File: src/croc/croc.go -> src/croc/croc.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092:  c.EmptyFoldersToTransfer = senderInfo.EmptyFoldersToTransfer",
          "1093:  c.TotalNumberFolders = senderInfo.TotalNumberFolders",
          "1094:  c.FilesToTransfer = senderInfo.FilesToTransfer",
          "1095:  c.TotalNumberOfContents = 0",
          "1096:  if c.FilesToTransfer != nil {",
          "1097:   c.TotalNumberOfContents += len(c.FilesToTransfer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1095:  for i, fi := range c.FilesToTransfer {",
          "1097:   c.FilesToTransfer[i].FolderRemote = filepath.Clean(fi.FolderRemote)",
          "1098:   if strings.Contains(c.FilesToTransfer[i].FolderRemote, \"..\") {",
          "1099:    return true, fmt.Errorf(\"invalid path detected: '%s'\", fi.FolderRemote)",
          "1100:   }",
          "1102:   if strings.Contains(c.FilesToTransfer[i].FolderRemote, \".ssh\") {",
          "1103:    return true, fmt.Errorf(\"invalid path detected: '%s'\", fi.FolderRemote)",
          "1104:   }",
          "1106:  }",
          "",
          "---------------"
        ],
        "src/utils/utils.go||src/utils/utils.go": [
          "File: src/utils/utils.go -> src/utils/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:   filePath := filepath.Join(destination, f.Name)",
          "439:   fmt.Fprintf(os.Stderr, \"\\r\\033[2K\")",
          "440:   fmt.Fprintf(os.Stderr, \"\\rUnzipping file %s\", filePath)",
          "441:   if f.FileInfo().IsDir() {",
          "442:    os.MkdirAll(filePath, os.ModePerm)",
          "443:    continue",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:   filePath = filepath.Clean(filePath)",
          "444:   if strings.Contains(filePath, \"..\") {",
          "445:    log.Fatalf(\"Invalid file path %s\\n\", filePath)",
          "446:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a591833dbf8a5c00920f7d6b0ebef59b4eb2c64b",
      "candidate_info": {
        "commit_hash": "a591833dbf8a5c00920f7d6b0ebef59b4eb2c64b",
        "repo": "schollz/croc",
        "commit_url": "https://github.com/schollz/croc/commit/a591833dbf8a5c00920f7d6b0ebef59b4eb2c64b",
        "files": [
          "src/croc/croc.go",
          "src/utils/utils.go"
        ],
        "message": "fix: filter escape sequences in filenames",
        "before_after_code_files": [
          "src/croc/croc.go||src/croc/croc.go",
          "src/utils/utils.go||src/utils/utils.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/schollz/croc/pull/697"
        ],
        "olp_code_files": {
          "patch": [
            "src/croc/croc.go||src/croc/croc.go",
            "src/utils/utils.go||src/utils/utils.go"
          ],
          "candidate": [
            "src/croc/croc.go||src/croc/croc.go",
            "src/utils/utils.go||src/utils/utils.go"
          ]
        }
      },
      "candidate_diff": {
        "src/croc/croc.go||src/croc/croc.go": [
          "File: src/croc/croc.go -> src/croc/croc.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:   if strings.Contains(c.FilesToTransfer[i].FolderRemote, \".ssh\") {",
          "1103:    return true, fmt.Errorf(\"invalid path detected: '%s'\", fi.FolderRemote)",
          "1104:   }",
          "1106:  }",
          "1107:  c.TotalNumberOfContents = 0",
          "1108:  if c.FilesToTransfer != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107:   if !utils.ValidFileName(path.Join(c.FilesToTransfer[i].FolderRemote, fi.Name)) {",
          "1108:    return true, fmt.Errorf(\"invalid filename detected: '%s'\", fi.Name)",
          "1109:   }",
          "",
          "---------------"
        ],
        "src/utils/utils.go||src/utils/utils.go": [
          "File: src/utils/utils.go -> src/utils/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "473:  fmt.Fprintf(os.Stderr, \"\\n\")",
          "474:  return nil",
          "475: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480: func ValidFileName(fname string) bool {",
          "481:  for _, r := range fname {",
          "482:   if !((r >= '0' && r <= '9') ||",
          "483:    (r >= 'a' && r <= 'z') ||",
          "484:    (r >= 'A' && r <= 'Z') ||",
          "485:    r == '.' || r == '_' || r == '-' || r == ' ' || r == '/') {",
          "486:    return false",
          "487:   }",
          "488:  }",
          "489:  return true",
          "490: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}