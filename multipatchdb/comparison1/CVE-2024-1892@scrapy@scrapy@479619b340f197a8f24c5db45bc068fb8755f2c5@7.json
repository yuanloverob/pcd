{
  "cve_id": "CVE-2024-1892",
  "cve_desc": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the XMLFeedSpider class of the scrapy/scrapy project, specifically in the parsing of XML content. By crafting malicious XML content that exploits inefficient regular expression complexity used in the parsing process, an attacker can cause a denial-of-service (DoS) condition. This vulnerability allows for the system to hang and consume significant resources, potentially rendering services that utilize Scrapy for XML processing unresponsive.",
  "repo": "scrapy/scrapy",
  "patch_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
  "patch_info": {
    "commit_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
    "repo": "scrapy/scrapy",
    "commit_url": "https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5",
    "files": [
      "docs/faq.rst",
      "docs/news.rst",
      "docs/topics/debug.rst",
      "scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py",
      "scrapy/utils/response.py",
      "tests/test_spider.py",
      "tests/test_utils_iterators.py",
      "tests/test_utils_response.py"
    ],
    "message": "Merge branch '2.11-redos' into 2.11",
    "before_after_code_files": [
      "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
      "scrapy/utils/response.py||scrapy/utils/response.py",
      "tests/test_spider.py||tests/test_spider.py",
      "tests/test_utils_iterators.py||tests/test_utils_iterators.py",
      "tests/test_utils_response.py||tests/test_utils_response.py"
    ]
  },
  "patch_diff": {
    "scrapy/spiders/feed.py||scrapy/spiders/feed.py": [
      "File: scrapy/spiders/feed.py -> scrapy/spiders/feed.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from scrapy.exceptions import NotConfigured, NotSupported",
      "8: from scrapy.selector import Selector",
      "9: from scrapy.spiders import Spider",
      "11: from scrapy.utils.spider import iterate_spider_output",
      "",
      "[Removed Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter",
      "",
      "[Added Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter_lxml",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:         return self.parse_nodes(response, nodes)",
      "86:     def _iternodes(self, response):",
      "88:             self._register_namespaces(node)",
      "89:             yield node",
      "",
      "[Removed Lines]",
      "87:         for node in xmliter(response, self.itertag):",
      "",
      "[Added Lines]",
      "87:         for node in xmliter_lxml(response, self.itertag):",
      "",
      "---------------"
    ],
    "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
      "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     cast,",
      "17:     overload,",
      "18: )",
      "20: from scrapy.http import Response, TextResponse",
      "21: from scrapy.selector import Selector",
      "22: from scrapy.utils.python import re_rsearch, to_unicode",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from warnings import warn",
      "21: from lxml import etree",
      "23: from scrapy.exceptions import ScrapyDeprecationWarning",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     - a unicode string",
      "39:     - a string encoded as utf-8",
      "40:     \"\"\"",
      "41:     nodename_patt = re.escape(nodename)",
      "43:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     warn(",
      "46:         (",
      "47:             \"xmliter is deprecated and its use strongly discouraged because \"",
      "48:             \"it is vulnerable to ReDoS attacks. Use xmliter_lxml instead. See \"",
      "49:             \"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\"",
      "50:         ),",
      "51:         ScrapyDeprecationWarning,",
      "52:         stacklevel=2,",
      "53:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     namespace: Optional[str] = None,",
      "82:     prefix: str = \"x\",",
      "83: ) -> Generator[Selector, Any, None]:",
      "86:     reader = _StreamReader(obj)",
      "87:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
      "88:     iterable = etree.iterparse(",
      "90:     )",
      "91:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
      "93:         nodetext = etree.tostring(node, encoding=\"unicode\")",
      "94:         node.clear()",
      "95:         xs = Selector(text=nodetext, type=\"xml\")",
      "",
      "[Removed Lines]",
      "84:     from lxml import etree",
      "89:         cast(\"SupportsReadClose[bytes]\", reader), tag=tag, encoding=reader.encoding",
      "92:     for _, node in iterable:",
      "",
      "[Added Lines]",
      "101:         cast(\"SupportsReadClose[bytes]\", reader),",
      "102:         encoding=reader.encoding,",
      "103:         events=(\"end\", \"start-ns\"),",
      "104:         huge_tree=True,",
      "107:     needs_namespace_resolution = not namespace and \":\" in nodename",
      "108:     if needs_namespace_resolution:",
      "109:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
      "110:     for event, data in iterable:",
      "111:         if event == \"start-ns\":",
      "112:             assert isinstance(data, tuple)",
      "113:             if needs_namespace_resolution:",
      "114:                 _prefix, _namespace = data",
      "115:                 if _prefix != prefix:",
      "116:                     continue",
      "117:                 namespace = _namespace",
      "118:                 needs_namespace_resolution = False",
      "119:                 selxpath = f\"//{prefix}:{nodename}\"",
      "120:                 tag = f\"{{{namespace}}}{nodename}\"",
      "121:             continue",
      "122:         assert isinstance(data, etree._Element)",
      "123:         node = data",
      "124:         if node.tag != tag:",
      "125:             continue",
      "",
      "---------------"
    ],
    "scrapy/utils/response.py||scrapy/utils/response.py": [
      "File: scrapy/utils/response.py -> scrapy/utils/response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     return b\"\".join(values)",
      "77: def open_in_browser(",
      "78:     response: Union[",
      "79:         \"scrapy.http.response.html.HtmlResponse\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77: def _remove_html_comments(body):",
      "78:     start = body.find(b\"<!--\")",
      "79:     while start != -1:",
      "80:         end = body.find(b\"-->\", start + 1)",
      "81:         if end == -1:",
      "82:             return body[:start]",
      "83:         else:",
      "84:             body = body[:start] + body[end + 3 :]",
      "85:             start = body.find(b\"<!--\")",
      "86:     return body",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     ],",
      "82:     _openfunc: Callable[[str], Any] = webbrowser.open,",
      "83: ) -> Any:",
      "86:     \"\"\"",
      "87:     from scrapy.http import HtmlResponse, TextResponse",
      "",
      "[Removed Lines]",
      "84:     \"\"\"Open the given response in a local web browser, populating the <base>",
      "85:     tag for external links to work",
      "",
      "[Added Lines]",
      "96:     \"\"\"Open *response* in a local web browser, adjusting the `base tag`_ for",
      "97:     external links to work, e.g. so that images and styles are displayed.",
      "99:     .. _base tag: https://www.w3schools.com/tags/tag_base.asp",
      "101:     For example:",
      "103:     .. code-block:: python",
      "105:         from scrapy.utils.response import open_in_browser",
      "108:         def parse_details(self, response):",
      "109:             if \"item name\" not in response.body:",
      "110:                 open_in_browser(response)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:     body = response.body",
      "91:     if isinstance(response, HtmlResponse):",
      "92:         if b\"<base\" not in body:",
      "96:         ext = \".html\"",
      "97:     elif isinstance(response, TextResponse):",
      "98:         ext = \".txt\"",
      "",
      "[Removed Lines]",
      "93:             repl = rf'\\1<base href=\"{response.url}\">'",
      "94:             body = re.sub(b\"<!--.*?-->\", b\"\", body, flags=re.DOTALL)",
      "95:             body = re.sub(rb\"(<head(?:>|\\s.*?>))\", to_bytes(repl), body)",
      "",
      "[Added Lines]",
      "118:             _remove_html_comments(body)",
      "119:             repl = rf'\\0<base href=\"{response.url}\">'",
      "120:             body = re.sub(rb\"<head(?:[^<>]*?>)\", to_bytes(repl), body, count=1)",
      "",
      "---------------"
    ],
    "tests/test_spider.py||tests/test_spider.py": [
      "File: tests/test_spider.py -> tests/test_spider.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "152:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
      "153:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
      "155:             <other value=\"bar\" y:custom=\"fuu\"/>",
      "156:         </url>",
      "158:         </urlset>\"\"\"",
      "159:         response = XmlResponse(url=\"http://example.com/sitemap.xml\", body=body)",
      "",
      "[Removed Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
      "",
      "[Added Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
      "",
      "---------------"
    ],
    "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
      "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: from twisted.trial import unittest",
      "4: from scrapy.http import Response, TextResponse, XmlResponse",
      "5: from scrapy.utils.iterators import _body_or_str, csviter, xmliter, xmliter_lxml",
      "6: from tests import get_testdata",
      "12:     def test_xmliter(self):",
      "13:         body = b\"\"\"",
      "14:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "1: from pytest import mark",
      "9: class XmliterTestCase(unittest.TestCase):",
      "10:     xmliter = staticmethod(xmliter)",
      "",
      "[Added Lines]",
      "1: import pytest",
      "4: from scrapy.exceptions import ScrapyDeprecationWarning",
      "10: class XmliterBaseTestCase:",
      "11:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:             attrs, [(\"001\", [\"Name 1\"], [\"Type 1\"]), (\"002\", [\"Name 2\"], [\"Type 2\"])]",
      "41:         )",
      "43:     def test_xmliter_unusual_node(self):",
      "44:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "45:             <root>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:         ]",
      "54:         self.assertEqual(nodenames, [[\"matchme...\"]])",
      "56:     def test_xmliter_unicode(self):",
      "57:         # example taken from https://github.com/scrapy/scrapy/issues/1665",
      "58:         body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:                 [(\"26\", [\"-\"], [\"80\"]), (\"21\", [\"Ab\"], [\"76\"]), (\"27\", [\"A\"], [\"27\"])],",
      "113:             )",
      "115:     def test_xmliter_text(self):",
      "116:         body = (",
      "117:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123:             [[\"one\"], [\"two\"]],",
      "124:         )",
      "126:     def test_xmliter_namespaces(self):",
      "127:         body = b\"\"\"",
      "128:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "162:         self.assertEqual(node.xpath(\"id/text()\").getall(), [])",
      "163:         self.assertEqual(node.xpath(\"price/text()\").getall(), [])",
      "165:     def test_xmliter_namespaced_nodename(self):",
      "166:         body = b\"\"\"",
      "167:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "190:             [\"http://www.mydummycompany.com/images/item1.jpg\"],",
      "191:         )",
      "193:     def test_xmliter_namespaced_nodename_missing(self):",
      "194:         body = b\"\"\"",
      "195:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "214:         with self.assertRaises(StopIteration):",
      "215:             next(my_iter)",
      "217:     def test_xmliter_exception(self):",
      "218:         body = (",
      "219:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "227:         self.assertRaises(StopIteration, next, iter)",
      "229:     def test_xmliter_objtype_exception(self):",
      "230:         i = self.xmliter(42, \"product\")",
      "231:         self.assertRaises(TypeError, next, i)",
      "233:     def test_xmliter_encoding(self):",
      "234:         body = (",
      "235:             b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "241:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "244:         )",
      "254:     def test_xmliter_iterate_namespace(self):",
      "255:         body = b\"\"\"",
      "",
      "[Removed Lines]",
      "247: class LxmlXmliterTestCase(XmliterTestCase):",
      "248:     xmliter = staticmethod(xmliter_lxml)",
      "250:     @mark.xfail(reason=\"known bug of the current implementation\")",
      "251:     def test_xmliter_namespaced_nodename(self):",
      "252:         super().test_xmliter_namespaced_nodename()",
      "",
      "[Added Lines]",
      "256: class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "257:     xmliter = staticmethod(xmliter)",
      "259:     def test_deprecation(self):",
      "260:         body = b\"\"\"",
      "261:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "262:             <products>",
      "263:               <product></product>",
      "264:             </products>",
      "265:         \"\"\"",
      "266:         with pytest.warns(",
      "267:             ScrapyDeprecationWarning,",
      "268:             match=\"xmliter\",",
      "269:         ):",
      "270:             next(self.xmliter(body, \"product\"))",
      "273: class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "274:     xmliter = staticmethod(xmliter_lxml)",
      "",
      "---------------"
    ],
    "tests/test_utils_response.py||tests/test_utils_response.py": [
      "File: tests/test_utils_response.py -> tests/test_utils_response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import unittest",
      "2: import warnings",
      "3: from pathlib import Path",
      "4: from urllib.parse import urlparse",
      "6: from scrapy.exceptions import ScrapyDeprecationWarning",
      "7: from scrapy.http import HtmlResponse, Response, TextResponse",
      "8: from scrapy.utils.python import to_bytes",
      "9: from scrapy.utils.response import (",
      "10:     get_base_url,",
      "11:     get_meta_refresh,",
      "12:     open_in_browser,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from time import process_time",
      "7: import pytest",
      "13:     _remove_html_comments,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:         assert open_in_browser(",
      "199:             r5, _openfunc=check_base_url",
      "200:         ), \"Inject unique base url with conditional comment\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:     def test_open_in_browser_redos_comment(self):",
      "207:         MAX_CPU_TIME = 0.001",
      "209:         # Exploit input from",
      "210:         # https://makenowjust-labs.github.io/recheck/playground/",
      "211:         # for /<!--.*?-->/ (old pattern to remove comments).",
      "212:         body = b\"-><!--\\x00\" * 25_000 + b\"->\\n<!---->\"",
      "214:         response = HtmlResponse(\"https://example.com\", body=body)",
      "216:         start_time = process_time()",
      "218:         open_in_browser(response, lambda url: True)",
      "220:         end_time = process_time()",
      "221:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "223:     def test_open_in_browser_redos_head(self):",
      "224:         MAX_CPU_TIME = 0.001",
      "226:         # Exploit input from",
      "227:         # https://makenowjust-labs.github.io/recheck/playground/",
      "228:         # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
      "229:         body = b\"<head\\t\" * 8_000",
      "231:         response = HtmlResponse(\"https://example.com\", body=body)",
      "233:         start_time = process_time()",
      "235:         open_in_browser(response, lambda url: True)",
      "237:         end_time = process_time()",
      "238:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "241: @pytest.mark.parametrize(",
      "242:     \"input_body,output_body\",",
      "243:     (",
      "244:         (",
      "245:             b\"a<!--\",",
      "246:             b\"a\",",
      "247:         ),",
      "248:         (",
      "249:             b\"a<!---->b\",",
      "250:             b\"ab\",",
      "251:         ),",
      "252:         (",
      "253:             b\"a<!--b-->c\",",
      "254:             b\"ac\",",
      "255:         ),",
      "256:         (",
      "257:             b\"a<!--b-->c<!--\",",
      "258:             b\"ac\",",
      "259:         ),",
      "260:         (",
      "261:             b\"a<!--b-->c<!--d\",",
      "262:             b\"ac\",",
      "263:         ),",
      "264:         (",
      "265:             b\"a<!--b-->c<!---->d\",",
      "266:             b\"acd\",",
      "267:         ),",
      "268:         (",
      "269:             b\"a<!--b--><!--c-->d\",",
      "270:             b\"ad\",",
      "271:         ),",
      "272:     ),",
      "273: )",
      "274: def test_remove_html_comments(input_body, output_body):",
      "275:     assert (",
      "276:         _remove_html_comments(input_body) == output_body",
      "277:     ), f\"{_remove_html_comments(input_body)=} == {output_body=}\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5dad41190551578c2973c34520952f26f75dc7b",
      "candidate_info": {
        "commit_hash": "c5dad41190551578c2973c34520952f26f75dc7b",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/c5dad41190551578c2973c34520952f26f75dc7b",
        "files": [
          ".github/workflows/tests-ubuntu.yml",
          "scrapy/utils/response.py",
          "tests/test_utils_response.py",
          "tox.ini"
        ],
        "message": "Speed up tests, remove comments without regexps",
        "before_after_code_files": [
          "scrapy/utils/response.py||scrapy/utils/response.py",
          "tests/test_utils_response.py||tests/test_utils_response.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/utils/response.py||scrapy/utils/response.py",
            "tests/test_utils_response.py||tests/test_utils_response.py"
          ],
          "candidate": [
            "scrapy/utils/response.py||scrapy/utils/response.py",
            "tests/test_utils_response.py||tests/test_utils_response.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/utils/response.py||scrapy/utils/response.py": [
          "File: scrapy/utils/response.py -> scrapy/utils/response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     return b\"\".join(values)",
          "77: def open_in_browser(",
          "78:     response: Union[",
          "79:         \"scrapy.http.response.html.HtmlResponse\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: def _remove_html_comments(body):",
          "78:     start = body.find(b\"<!--\")",
          "79:     while start != -1:",
          "80:         end = body.find(b\"-->\", start + 1)",
          "81:         if end == -1:",
          "82:             return body[:start]",
          "83:         else:",
          "84:             body = body[:start] + body[end + 3 :]",
          "85:             start = body.find(b\"<!--\")",
          "86:     return body",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     body = response.body",
          "104:     if isinstance(response, HtmlResponse):",
          "105:         if b\"<base\" not in body:",
          "106:             repl = rf'\\0<base href=\"{response.url}\">'",
          "108:             body = re.sub(rb\"<head(?:[^<>]*?>)\", to_bytes(repl), body, count=1)",
          "109:         ext = \".html\"",
          "110:     elif isinstance(response, TextResponse):",
          "",
          "[Removed Lines]",
          "107:             body = re.sub(b\"(?s)<!--.*?(?:-->|$)\", b\"\", body)",
          "",
          "[Added Lines]",
          "118:             _remove_html_comments(body)",
          "",
          "---------------"
        ],
        "tests/test_utils_response.py||tests/test_utils_response.py": [
          "File: tests/test_utils_response.py -> tests/test_utils_response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from scrapy.exceptions import ScrapyDeprecationWarning",
          "10: from scrapy.http import HtmlResponse, Response, TextResponse",
          "12: from scrapy.utils.python import to_bytes",
          "13: from scrapy.utils.response import (",
          "14:     get_base_url,",
          "15:     get_meta_refresh,",
          "16:     open_in_browser,",
          "",
          "[Removed Lines]",
          "11: from scrapy.settings.default_settings import DOWNLOAD_MAXSIZE",
          "",
          "[Added Lines]",
          "13:     _remove_html_comments,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:             r5, _openfunc=check_base_url",
          "204:         ), \"Inject unique base url with conditional comment\"",
          "207:     def test_open_in_browser_redos_comment(self):",
          "210:         # Exploit input from",
          "211:         # https://makenowjust-labs.github.io/recheck/playground/",
          "212:         # for /<!--.*?-->/ (old pattern to remove comments).",
          "215:         response = HtmlResponse(\"https://example.com\", body=body)",
          "",
          "[Removed Lines]",
          "206:     @pytest.mark.slow",
          "208:         MAX_CPU_TIME = 30",
          "213:         body = b\"-><!--\\x00\" * (int(DOWNLOAD_MAXSIZE / 7) - 10) + b\"->\\n<!---->\"",
          "",
          "[Added Lines]",
          "207:         MAX_CPU_TIME = 0.001",
          "212:         body = b\"-><!--\\x00\" * 25_000 + b\"->\\n<!---->\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:         end_time = process_time()",
          "222:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
          "225:     def test_open_in_browser_redos_head(self):",
          "228:         # Exploit input from",
          "229:         # https://makenowjust-labs.github.io/recheck/playground/",
          "230:         # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
          "233:         response = HtmlResponse(\"https://example.com\", body=body)",
          "",
          "[Removed Lines]",
          "224:     @pytest.mark.slow",
          "226:         MAX_CPU_TIME = 15",
          "231:         body = b\"<head\\t\" * int(DOWNLOAD_MAXSIZE / 6)",
          "",
          "[Added Lines]",
          "224:         MAX_CPU_TIME = 0.001",
          "229:         body = b\"<head\\t\" * 8_000",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:         end_time = process_time()",
          "240:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: @pytest.mark.parametrize(",
          "242:     \"input_body,output_body\",",
          "243:     (",
          "244:         (",
          "245:             b\"a<!--\",",
          "246:             b\"a\",",
          "247:         ),",
          "248:         (",
          "249:             b\"a<!---->b\",",
          "250:             b\"ab\",",
          "251:         ),",
          "252:         (",
          "253:             b\"a<!--b-->c\",",
          "254:             b\"ac\",",
          "255:         ),",
          "256:         (",
          "257:             b\"a<!--b-->c<!--\",",
          "258:             b\"ac\",",
          "259:         ),",
          "260:         (",
          "261:             b\"a<!--b-->c<!--d\",",
          "262:             b\"ac\",",
          "263:         ),",
          "264:         (",
          "265:             b\"a<!--b-->c<!---->d\",",
          "266:             b\"acd\",",
          "267:         ),",
          "268:         (",
          "269:             b\"a<!--b--><!--c-->d\",",
          "270:             b\"ad\",",
          "271:         ),",
          "272:     ),",
          "273: )",
          "274: def test_remove_html_comments(input_body, output_body):",
          "275:     assert (",
          "276:         _remove_html_comments(input_body) == output_body",
          "277:     ), f\"{_remove_html_comments(input_body)=} == {output_body=}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1045856a50d379d145e514ec9c7aeeed231aefd6",
      "candidate_info": {
        "commit_hash": "1045856a50d379d145e514ec9c7aeeed231aefd6",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/1045856a50d379d145e514ec9c7aeeed231aefd6",
        "files": [
          "tests/CrawlerProcess/sleeping.py",
          "tests/test_command_shell.py",
          "tests/test_crawler.py"
        ],
        "message": "Merge pull request #6112 from wRAR/test-shutdown-forced\n\nMake shutdown tests more robust.",
        "before_after_code_files": [
          "tests/CrawlerProcess/sleeping.py||tests/CrawlerProcess/sleeping.py",
          "tests/test_command_shell.py||tests/test_command_shell.py",
          "tests/test_crawler.py||tests/test_crawler.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/CrawlerProcess/sleeping.py||tests/CrawlerProcess/sleeping.py": [
          "File: tests/CrawlerProcess/sleeping.py -> tests/CrawlerProcess/sleeping.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:         from twisted.internet import reactor",
          "16:         d = Deferred()",
          "18:         await maybe_deferred_to_future(d)",
          "",
          "[Removed Lines]",
          "17:         reactor.callLater(3, d.callback, None)",
          "",
          "[Added Lines]",
          "17:         reactor.callLater(int(self.sleep), d.callback, None)",
          "",
          "---------------"
        ],
        "tests/test_command_shell.py||tests/test_command_shell.py": [
          "File: tests/test_command_shell.py -> tests/test_command_shell.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import sys",
          "2: from io import BytesIO",
          "3: from pathlib import Path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:             \"scrapy.cmdline\",",
          "148:             \"shell\",",
          "149:         )",
          "150:         logfile = BytesIO()",
          "152:         p.logfile_read = logfile",
          "153:         p.expect_exact(\"Available Scrapy objects\")",
          "154:         with MockServer() as mockserver:",
          "",
          "[Removed Lines]",
          "151:         p = PopenSpawn(args, timeout=5)",
          "",
          "[Added Lines]",
          "151:         env = os.environ.copy()",
          "152:         env[\"SCRAPY_PYTHON_SHELL\"] = \"python\"",
          "154:         p = PopenSpawn(args, env=env, timeout=5)",
          "",
          "---------------"
        ],
        "tests/test_crawler.py||tests/test_crawler.py": [
          "File: tests/test_crawler.py -> tests/test_crawler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:     def test_shutdown_graceful(self):",
          "527:         sig = signal.SIGINT if sys.platform != \"win32\" else signal.SIGBREAK",
          "529:         p = PopenSpawn(args, timeout=5)",
          "530:         p.expect_exact(\"Spider opened\")",
          "531:         p.expect_exact(\"Crawled (200)\")",
          "",
          "[Removed Lines]",
          "528:         args = self.get_script_args(\"sleeping.py\")",
          "",
          "[Added Lines]",
          "528:         args = self.get_script_args(\"sleeping.py\", \"-a\", \"sleep=3\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:         p.expect_exact(\"Spider closed (shutdown)\")",
          "535:         p.wait()",
          "537:     def test_shutdown_forced(self):",
          "538:         sig = signal.SIGINT if sys.platform != \"win32\" else signal.SIGBREAK",
          "540:         p = PopenSpawn(args, timeout=5)",
          "541:         p.expect_exact(\"Spider opened\")",
          "542:         p.expect_exact(\"Crawled (200)\")",
          "543:         p.kill(sig)",
          "544:         p.expect_exact(\"shutting down gracefully\")",
          "545:         p.kill(sig)",
          "546:         p.expect_exact(\"forcing unclean shutdown\")",
          "547:         p.wait()",
          "",
          "[Removed Lines]",
          "539:         args = self.get_script_args(\"sleeping.py\")",
          "",
          "[Added Lines]",
          "537:     @defer.inlineCallbacks",
          "539:         from twisted.internet import reactor",
          "542:         args = self.get_script_args(\"sleeping.py\", \"-a\", \"sleep=10\")",
          "548:         # sending the second signal too fast often causes problems",
          "549:         d = defer.Deferred()",
          "550:         reactor.callLater(0.1, d.callback, None)",
          "551:         yield d",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2538c0e8629b46bd34bb0555aeca6714a6f9e571",
      "candidate_info": {
        "commit_hash": "2538c0e8629b46bd34bb0555aeca6714a6f9e571",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/2538c0e8629b46bd34bb0555aeca6714a6f9e571",
        "files": [
          "scrapy/utils/iterators.py"
        ],
        "message": "Restore the implementation of xmliter",
        "before_after_code_files": [
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ],
          "candidate": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     \"\"\"",
          "44:     nodename_patt = re.escape(nodename)",
          "47:     HEADER_END_RE = re.compile(rf\"<\\s*/{nodename_patt}\\s*>\", re.S)",
          "50:     text = _body_or_str(obj)",
          "52:     document_header_match = re.search(DOCUMENT_HEADER_RE, text)",
          "",
          "[Removed Lines]",
          "46:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]{1,1024}>\\s*\", re.S)",
          "48:     END_TAG_RE = re.compile(r\"<\\s*/([^\\s>]{1,1024})\\s*>\", re.S)",
          "49:     NAMESPACE_RE = re.compile(r\"((xmlns[:A-Za-z]{,1024})=[^>\\s]+)\", re.S)",
          "",
          "[Added Lines]",
          "46:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)",
          "48:     END_TAG_RE = re.compile(r\"<\\s*/([^\\s>]+)\\s*>\", re.S)",
          "49:     NAMESPACE_RE = re.compile(r\"((xmlns[:A-Za-z]*)=[^>\\s]+)\", re.S)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         for tagname in reversed(re.findall(END_TAG_RE, header_end)):",
          "61:             assert header_end_idx",
          "62:             tag = re.search(",
          "66:             )",
          "67:             if tag:",
          "68:                 for x in re.findall(NAMESPACE_RE, tag.group()):",
          "69:                     namespaces[x[1]] = x[0]",
          "72:     for match in r.finditer(text):",
          "73:         nodetext = (",
          "74:             document_header",
          "",
          "[Removed Lines]",
          "63:                 rf\"<\\s*{tagname}.{{,1024}}?xmlns[:=][^>]{{,1024}}>\",",
          "64:                 text[: header_end_idx[1]],",
          "65:                 re.S,",
          "71:     r = re.compile(rf\"<{nodename_patt}[\\s>].{{,1024}}?</{nodename_patt}>\", re.DOTALL)",
          "",
          "[Added Lines]",
          "63:                 rf\"<\\s*{tagname}.*?xmlns[:=][^>]*>\", text[: header_end_idx[1]], re.S",
          "69:     r = re.compile(rf\"<{nodename_patt}[\\s>].*?</{nodename_patt}>\", re.DOTALL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bf29a7b1b9b6a641c486780b7b0fa455577bf39",
      "candidate_info": {
        "commit_hash": "0bf29a7b1b9b6a641c486780b7b0fa455577bf39",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/0bf29a7b1b9b6a641c486780b7b0fa455577bf39",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Update test expectations",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     \"\"\"This middleware allows compressed (gzip, deflate) traffic to be",
          "31:     sent/received from web sites\"\"\"",
          "34:         self.stats = crawler.stats",
          "35:         self._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "",
          "[Removed Lines]",
          "33:     def __init__(self, crawler=None):",
          "",
          "[Added Lines]",
          "33:     def __init__(self, *, crawler=None):",
          "34:         if not crawler:",
          "35:             return",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         self.assertStatsEqual(\"httpcompression/response_count\", 1)",
          "128:         self.assertStatsEqual(\"httpcompression/response_bytes\", 74837)",
          "142:     def test_process_response_br(self):",
          "143:         try:",
          "144:             import brotli  # noqa: F401",
          "",
          "[Removed Lines]",
          "130:     def test_process_response_gzip_no_stats(self):",
          "131:         mw = HttpCompressionMiddleware()",
          "132:         response = self._getresponse(\"gzip\")",
          "133:         request = response.request",
          "135:         self.assertEqual(response.headers[\"Content-Encoding\"], b\"gzip\")",
          "136:         newresponse = mw.process_response(request, response, self.spider)",
          "137:         self.assertEqual(mw.stats, None)",
          "138:         assert newresponse is not response",
          "139:         assert newresponse.body.startswith(b\"<!DOCTYPE\")",
          "140:         assert \"Content-Encoding\" not in newresponse.headers",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "418:             (",
          "419:                 (",
          "420:                     \"HttpCompressionMiddleware subclasses must either modify \"",
          "423:                 ),",
          "424:             ),",
          "425:         )",
          "",
          "[Removed Lines]",
          "421:                     \"their '__init__' method to support a 'stats' parameter \"",
          "422:                     \"or reimplement the 'from_crawler' method.\"",
          "",
          "[Added Lines]",
          "409:                     \"their '__init__' method to support a 'crawler' parameter \"",
          "410:                     \"or reimplement their 'from_crawler' method.\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73e7c0ed011a0565a1584b8052ec757b54e5270b",
      "candidate_info": {
        "commit_hash": "73e7c0ed011a0565a1584b8052ec757b54e5270b",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b",
        "files": [
          "docs/faq.rst",
          "docs/news.rst",
          "scrapy/spiders/feed.py",
          "scrapy/utils/iterators.py",
          "tests/test_spider.py",
          "tests/test_utils_iterators.py"
        ],
        "message": "Backport the latest 2.11 implementation",
        "before_after_code_files": [
          "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
          "tests/test_spider.py||tests/test_spider.py",
          "tests/test_utils_iterators.py||tests/test_utils_iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
            "tests/test_spider.py||tests/test_spider.py",
            "tests/test_utils_iterators.py||tests/test_utils_iterators.py"
          ],
          "candidate": [
            "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
            "tests/test_spider.py||tests/test_spider.py",
            "tests/test_utils_iterators.py||tests/test_utils_iterators.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/spiders/feed.py||scrapy/spiders/feed.py": [
          "File: scrapy/spiders/feed.py -> scrapy/spiders/feed.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: See documentation in docs/topics/spiders.rst",
          "6: \"\"\"",
          "7: from scrapy.spiders import Spider",
          "9: from scrapy.utils.spider import iterate_spider_output",
          "10: from scrapy.selector import Selector",
          "11: from scrapy.exceptions import NotConfigured, NotSupported",
          "",
          "[Removed Lines]",
          "8: from scrapy.utils.iterators import xmliter, csviter",
          "",
          "[Added Lines]",
          "8: from scrapy.utils.iterators import csviter, xmliter_lxml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         return self.parse_nodes(response, nodes)",
          "84:     def _iternodes(self, response):",
          "86:             self._register_namespaces(node)",
          "87:             yield node",
          "",
          "[Removed Lines]",
          "85:         for node in xmliter(response, self.itertag):",
          "",
          "[Added Lines]",
          "85:         for node in xmliter_lxml(response, self.itertag):",
          "",
          "---------------"
        ],
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: except ImportError:",
          "7:     from io import BytesIO",
          "8: from io import StringIO",
          "9: import six",
          "11: from scrapy.http import TextResponse, Response",
          "12: from scrapy.selector import Selector",
          "13: from scrapy.utils.python import re_rsearch, to_unicode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from warnings import warn",
          "12: from lxml import etree",
          "14: from scrapy.exceptions import ScrapyDeprecationWarning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     - a unicode string",
          "25:     - a string encoded as utf-8",
          "26:     \"\"\"",
          "27:     nodename_patt = re.escape(nodename)",
          "29:     HEADER_START_RE = re.compile(r'^(.{,1024}?)<\\s*%s(?:\\s|>)' % nodename_patt, re.S)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     warn(",
          "32:         (",
          "33:             \"xmliter is deprecated and its use strongly discouraged because \"",
          "34:             \"it is vulnerable to ReDoS attacks. Use xmliter_lxml instead. See \"",
          "35:             \"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\"",
          "36:         ),",
          "37:         ScrapyDeprecationWarning,",
          "38:         stacklevel=2,",
          "39:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: def xmliter_lxml(obj, nodename, namespace=None, prefix='x'):",
          "46:     reader = _StreamReader(obj)",
          "47:     tag = '{%s}%s' % (namespace, nodename) if namespace else nodename",
          "49:     selxpath = '//' + ('%s:%s' % (prefix, nodename) if namespace else nodename)",
          "51:         nodetext = etree.tostring(node, encoding='unicode')",
          "52:         node.clear()",
          "53:         xs = Selector(text=nodetext, type='xml')",
          "",
          "[Removed Lines]",
          "45:     from lxml import etree",
          "48:     iterable = etree.iterparse(reader, tag=tag, encoding=reader.encoding)",
          "50:     for _, node in iterable:",
          "",
          "[Added Lines]",
          "60:     iterable = etree.iterparse(",
          "61:         reader,",
          "62:         encoding=reader.encoding,",
          "63:         events=(\"end\", \"start-ns\"),",
          "64:         huge_tree=True,",
          "65:     )",
          "67:     needs_namespace_resolution = not namespace and \":\" in nodename",
          "68:     if needs_namespace_resolution:",
          "69:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
          "70:     for event, data in iterable:",
          "71:         if event == \"start-ns\":",
          "72:             assert isinstance(data, tuple)",
          "73:             if needs_namespace_resolution:",
          "74:                 _prefix, _namespace = data",
          "75:                 if _prefix != prefix:",
          "76:                     continue",
          "77:                 namespace = _namespace",
          "78:                 needs_namespace_resolution = False",
          "79:                 selxpath = \"//{prefix}:{nodename}\".format(prefix=prefix, nodename=nodename)",
          "80:                 tag = \"{{{namespace}}}{nodename}\".format(namespace=namespace, nodename=nodename)",
          "81:             continue",
          "82:         assert isinstance(data, etree._Element)",
          "83:         node = data",
          "84:         if node.tag != tag:",
          "85:             continue",
          "",
          "---------------"
        ],
        "tests/test_spider.py||tests/test_spider.py": [
          "File: tests/test_spider.py -> tests/test_spider.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "123:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
          "124:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
          "127:         </urlset>\"\"\"",
          "128:         response = XmlResponse(url='http://example.com/sitemap.xml', body=body)",
          "",
          "[Removed Lines]",
          "125:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated><other value=\"bar\" y:custom=\"fuu\"/></url>",
          "126:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
          "",
          "[Added Lines]",
          "125:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated><other value=\"bar\" y:custom=\"fuu\"/></url>",
          "126:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
          "",
          "---------------"
        ],
        "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
          "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import six",
          "4: from twisted.trial import unittest",
          "6: from scrapy.utils.iterators import csviter, xmliter, _body_or_str, xmliter_lxml",
          "7: from scrapy.http import XmlResponse, TextResponse, Response",
          "8: from tests import get_testdata",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import pytest",
          "8: from scrapy.exceptions import ScrapyDeprecationWarning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: FOOBAR_NL = u\"foo\\nbar\"",
          "17:     def test_xmliter(self):",
          "18:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\",
          "19:             <products xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"someschmea.xsd\">\\",
          "",
          "[Removed Lines]",
          "13: class XmliterTestCase(unittest.TestCase):",
          "15:     xmliter = staticmethod(xmliter)",
          "",
          "[Added Lines]",
          "16: class XmliterBaseTestCase:",
          "17:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:         self.assertEqual(attrs,",
          "39:                          [('001', ['Name 1'], ['Type 1']), ('002', ['Name 2'], ['Type 2'])])",
          "41:     def test_xmliter_unusual_node(self):",
          "42:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "43:             <root>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:                  for e in self.xmliter(response, 'matchme...')]",
          "51:         self.assertEqual(nodenames, [['matchme...']])",
          "53:     def test_xmliter_unicode(self):",
          "54:         # example taken from https://github.com/scrapy/scrapy/issues/1665",
          "55:         body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:                               (u'21', [u'Ab'], [u'76']),",
          "106:                               (u'27', [u'A'], [u'27'])])",
          "108:     def test_xmliter_text(self):",
          "109:         body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><products><product>one</product><product>two</product></products>\"\"\"",
          "111:         self.assertEqual([x.xpath(\"text()\").getall() for x in self.xmliter(body, 'product')],",
          "112:                          [[u'one'], [u'two']])",
          "114:     def test_xmliter_namespaces(self):",
          "115:         body = b\"\"\"\\",
          "116:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "118:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "145:         self.assertEqual(node.xpath('id/text()').getall(), [])",
          "146:         self.assertEqual(node.xpath('price/text()').getall(), [])",
          "148:     def test_xmliter_exception(self):",
          "149:         body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><products><product>one</product><product>two</product></products>\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:         self.assertRaises(StopIteration, next, iter)",
          "157:     def test_xmliter_objtype_exception(self):",
          "158:         i = self.xmliter(42, 'product')",
          "159:         self.assertRaises(AssertionError, next, i)",
          "161:     def test_xmliter_encoding(self):",
          "162:         body = b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n<xml>\\n    <item>Some Turkish Characters \\xd6\\xc7\\xde\\xdd\\xd0\\xdc \\xfc\\xf0\\xfd\\xfe\\xe7\\xf6</item>\\n</xml>\\n\\n'",
          "163:         response = XmlResponse('http://www.example.com', body=body)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "168:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "166:             u'<item>Some Turkish Characters \\xd6\\xc7\\u015e\\u0130\\u011e\\xdc \\xfc\\u011f\\u0131\\u015f\\xe7\\xf6</item>'",
          "167:         )",
          "171:     xmliter = staticmethod(xmliter_lxml)",
          "173:     def test_xmliter_iterate_namespace(self):",
          "",
          "[Removed Lines]",
          "170: class LxmlXmliterTestCase(XmliterTestCase):",
          "",
          "[Added Lines]",
          "177: class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
          "178:     xmliter = staticmethod(xmliter)",
          "180:     def test_deprecation(self):",
          "181:         body = b\"\"\"",
          "182:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "183:             <products>",
          "184:               <product></product>",
          "185:             </products>",
          "186:         \"\"\"",
          "187:         with pytest.warns(",
          "188:             ScrapyDeprecationWarning,",
          "189:             match=\"xmliter\",",
          "190:         ):",
          "191:             next(self.xmliter(body, \"product\"))",
          "194: class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
          "",
          "---------------"
        ]
      }
    }
  ]
}