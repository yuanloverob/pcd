{
  "cve_id": "CVE-2021-41114",
  "cve_desc": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that TYPO3 CMS is susceptible to host spoofing due to improper validation of the HTTP Host header. TYPO3 uses the HTTP Host header, for example, to generate absolute URLs during the frontend rendering process. Since the host header itself is provided by the client, it can be forged to any value, even in a name-based virtual hosts environment. This vulnerability is the same as described in TYPO3-CORE-SA-2014-001 (CVE-2014-3941). A regression, introduced during TYPO3 v11 development, led to this situation. The already existing setting $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] (used as an effective mitigation strategy in previous TYPO3 versions) was not evaluated anymore, and reintroduced the vulnerability.",
  "repo": "TYPO3/typo3",
  "patch_hash": "5cbff85506cebe343e5ae59228977547cf8e3cf4",
  "patch_info": {
    "commit_hash": "5cbff85506cebe343e5ae59228977547cf8e3cf4",
    "repo": "TYPO3/typo3",
    "commit_url": "https://github.com/TYPO3/typo3/commit/5cbff85506cebe343e5ae59228977547cf8e3cf4",
    "files": [
      "typo3/sysext/backend/Configuration/RequestMiddlewares.php",
      "typo3/sysext/core/Classes/Http/NormalizedParams.php",
      "typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php",
      "typo3/sysext/core/Classes/ServiceProvider.php",
      "typo3/sysext/core/Classes/Utility/GeneralUtility.php",
      "typo3/sysext/core/Documentation/Changelog/11.5/Deprecation-95395-GeneralUtilityIsAllowedHostHeaderValueAndTrustedHostsPatternConstants.rst",
      "typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php",
      "typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php",
      "typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php",
      "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
      "typo3/sysext/frontend/Configuration/RequestMiddlewares.php",
      "typo3/sysext/install/Classes/Controller/InstallerController.php",
      "typo3/sysext/install/Classes/ServiceProvider.php",
      "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php",
      "typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php",
      "typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php",
      "typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php"
    ],
    "message": "[SECURITY] Verify HTTP_HOST via FE/BE middleware\n\nAvoid a dependency cycle between HTTP_HOST generation\nand verification.\nAs $GLOBALS['TYPO3_REQUEST'] is not available\nduring ServerRequestFactory::fromGlobals(), HTTP_HOST\nverification can not be performed at that point.\nIt is therefore delayed into a context aware middleware\ninstead of being skipped because of missing $GLOBALS.\n\nPositive advantage of moving the verification into\nfrontend and backend middlewares, is that context\nchecks to exclude CLI/installtool can be dropped.\n\nAs a side effect this also fixes the frontend to installtool\nredirect if TYPO3 is not yet configured and running with\nan invalid SERVER_NAME, as ServerRequestFactory::fromGlobals()\ndoesn't fail.\n\nReleases: master\nResolves: #95395\nChange-Id: Idd3a3449a878cd625dad0d04892d9f0e710ca1a9\nSecurity-Bulletin: TYPO3-CORE-SA-2021-015\nSecurity-References: CVE-2021-41114\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/71438\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
    "before_after_code_files": [
      "typo3/sysext/backend/Configuration/RequestMiddlewares.php||typo3/sysext/backend/Configuration/RequestMiddlewares.php",
      "typo3/sysext/core/Classes/Http/NormalizedParams.php||typo3/sysext/core/Classes/Http/NormalizedParams.php",
      "typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php||typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php",
      "typo3/sysext/core/Classes/ServiceProvider.php||typo3/sysext/core/Classes/ServiceProvider.php",
      "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
      "typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php||typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php",
      "typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php||typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php",
      "typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php||typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php",
      "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
      "typo3/sysext/frontend/Configuration/RequestMiddlewares.php||typo3/sysext/frontend/Configuration/RequestMiddlewares.php",
      "typo3/sysext/install/Classes/Controller/InstallerController.php||typo3/sysext/install/Classes/Controller/InstallerController.php",
      "typo3/sysext/install/Classes/ServiceProvider.php||typo3/sysext/install/Classes/ServiceProvider.php",
      "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php||typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php",
      "typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php||typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php",
      "typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php||typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php",
      "typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php||typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php"
    ]
  },
  "patch_diff": {
    "typo3/sysext/backend/Configuration/RequestMiddlewares.php||typo3/sysext/backend/Configuration/RequestMiddlewares.php": [
      "File: typo3/sysext/backend/Configuration/RequestMiddlewares.php -> typo3/sysext/backend/Configuration/RequestMiddlewares.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: return [",
      "13:     'backend' => [",
      "15:         'typo3/cms-core/normalized-params-attribute' => [",
      "16:             'target' => \\TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute::class,",
      "17:         ],",
      "18:         'typo3/cms-backend/locked-backend' => [",
      "19:             'target' => \\TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard::class,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15:         'typo3/cms-core/verify-host-header' => [",
      "16:             'target' => \\TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader::class,",
      "17:         ],",
      "21:             'after' => [",
      "22:                 'typo3/cms-core/verify-host-header',",
      "23:             ],",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/Http/NormalizedParams.php||typo3/sysext/core/Classes/Http/NormalizedParams.php": [
      "File: typo3/sysext/core/Classes/Http/NormalizedParams.php -> typo3/sysext/core/Classes/Http/NormalizedParams.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "585:                 $httpHost = $xForwardedHost;",
      "586:             }",
      "587:         }",
      "596:         return $httpHost;",
      "597:     }",
      "",
      "[Removed Lines]",
      "588:         if (!GeneralUtility::isAllowedHostHeaderValue($httpHost)) {",
      "589:             throw new \\UnexpectedValueException(",
      "590:                 'The current host header value does not match the configured trusted hosts pattern!'",
      "591:                 . ' Check the pattern defined in $GLOBALS[\\'TYPO3_CONF_VARS\\'][\\'SYS\\'][\\'trustedHostsPattern\\']'",
      "592:                 . ' and adapt it, if you want to allow the current host header \\'' . $httpHost . '\\' for your installation.',",
      "593:                 1396795886",
      "594:             );",
      "595:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php||typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php": [
      "File: typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php -> typo3/sysext/core/Classes/Middleware/VerifyHostHeader.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "18: namespace TYPO3\\CMS\\Core\\Middleware;",
      "20: use Psr\\Http\\Message\\ResponseInterface;",
      "21: use Psr\\Http\\Message\\ServerRequestInterface;",
      "22: use Psr\\Http\\Server\\MiddlewareInterface;",
      "23: use Psr\\Http\\Server\\RequestHandlerInterface;",
      "30: class VerifyHostHeader implements MiddlewareInterface",
      "31: {",
      "32:     public const ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL = '.*';",
      "33:     public const ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME = 'SERVER_NAME';",
      "35:     protected string $trustedHostsPattern;",
      "37:     public function __construct(string $trustedHostsPattern)",
      "38:     {",
      "39:         $this->trustedHostsPattern = $trustedHostsPattern;",
      "40:     }",
      "42:     public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface",
      "43:     {",
      "44:         $serverParams = $request->getServerParams();",
      "45:         $httpHost = $serverParams['HTTP_HOST'] ?? '';",
      "46:         if (!$this->isAllowedHostHeaderValue($httpHost, $serverParams)) {",
      "47:             throw new \\UnexpectedValueException(",
      "48:                 'The current host header value does not match the configured trusted hosts pattern!'",
      "49:                 . ' Check the pattern defined in $GLOBALS[\\'TYPO3_CONF_VARS\\'][\\'SYS\\'][\\'trustedHostsPattern\\']'",
      "50:                 . ' and adapt it, if you want to allow the current host header \\'' . $httpHost . '\\' for your installation.',",
      "51:                 1396795884",
      "52:             );",
      "53:         }",
      "55:         return $handler->handle($request);",
      "56:     }",
      "64:     public function isAllowedHostHeaderValue(string $hostHeaderValue, array $serverParams): bool",
      "65:     {",
      "67:         if ($this->trustedHostsPattern === '') {",
      "68:             return false;",
      "69:         }",
      "71:         if ($this->trustedHostsPattern === self::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
      "72:             return true;",
      "73:         }",
      "75:         return $this->hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue, $serverParams);",
      "76:     }",
      "81:     protected function hostHeaderValueMatchesTrustedHostsPattern(string $hostHeaderValue, array $serverParams): bool",
      "82:     {",
      "83:         if ($this->trustedHostsPattern === self::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME) {",
      "84:             $host = strtolower($hostHeaderValue);",
      "88:             $port = self::webserverUsesHttps($serverParams) ? '443' : '80';",
      "90:             $parsedHostValue = parse_url('http://' . $host);",
      "91:             if (isset($parsedHostValue['port'])) {",
      "92:                 $host = $parsedHostValue['host'];",
      "93:                 $port = (string)$parsedHostValue['port'];",
      "94:             }",
      "98:             $hostMatch = $host === strtolower($serverParams['SERVER_NAME']) && $port === $serverParams['SERVER_PORT'];",
      "99:         } else {",
      "102:             $hostMatch = (bool)preg_match('/^' . $this->trustedHostsPattern . '$/i', $hostHeaderValue);",
      "103:         }",
      "105:         return $hostMatch;",
      "106:     }",
      "116:     protected function webserverUsesHttps(array $serverParams): bool",
      "117:     {",
      "118:         if (!empty($serverParams['SSL_SESSION_ID'])) {",
      "119:             return true;",
      "120:         }",
      "124:         return !empty($serverParams['HTTPS']) && strtolower($serverParams['HTTPS']) !== 'off';",
      "125:     }",
      "126: }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/ServiceProvider.php||typo3/sysext/core/Classes/ServiceProvider.php": [
      "File: typo3/sysext/core/Classes/ServiceProvider.php -> typo3/sysext/core/Classes/ServiceProvider.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:             Mail\\TransportFactory::class => [ static::class, 'getMailTransportFactory' ],",
      "71:             Messaging\\FlashMessageService::class => [ static::class, 'getFlashMessageService' ],",
      "72:             Middleware\\ResponsePropagation::class => [ static::class, 'getResponsePropagationMiddleware' ],",
      "73:             Package\\FailsafePackageManager::class => [ static::class, 'getFailsafePackageManager' ],",
      "74:             Package\\Cache\\PackageDependentCacheIdentifier::class => [ static::class, 'getPackageDependentCacheIdentifier' ],",
      "75:             Registry::class => [ static::class, 'getRegistry' ],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:             Middleware\\VerifyHostHeader::class => [ static::class, 'getVerifyHostHeaderMiddleware' ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "369:         return self::new($container, Middleware\\ResponsePropagation::class);",
      "370:     }",
      "372:     public static function getFailsafePackageManager(ContainerInterface $container): Package\\FailsafePackageManager",
      "373:     {",
      "374:         $packageManager = $container->get(Package\\PackageManager::class);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:     public static function getVerifyHostHeaderMiddleware(ContainerInterface $container): Middleware\\VerifyHostHeader",
      "374:     {",
      "375:         return self::new($container, Middleware\\VerifyHostHeader::class, [",
      "376:             $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] ?? '',",
      "377:         ]);",
      "378:     }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php": [
      "File: typo3/sysext/core/Classes/Utility/GeneralUtility.php -> typo3/sysext/core/Classes/Utility/GeneralUtility.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: use TYPO3\\CMS\\Core\\Http\\ApplicationType;",
      "31: use TYPO3\\CMS\\Core\\Http\\RequestFactory;",
      "32: use TYPO3\\CMS\\Core\\Log\\LogManager;",
      "33: use TYPO3\\CMS\\Core\\Package\\Exception as PackageException;",
      "34: use TYPO3\\CMS\\Core\\SingletonInterface;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: use TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: class GeneralUtility",
      "48: {",
      "49:     const ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL = '.*';",
      "50:     const ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME = 'SERVER_NAME';",
      "",
      "[Removed Lines]",
      "58:     protected static $allowHostHeaderValue = false;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2563:                         $retVal = $host;",
      "2564:                     }",
      "2565:                 }",
      "2572:                 break;",
      "2573:             case 'HTTP_REFERER':",
      "",
      "[Removed Lines]",
      "2566:                 if (!static::isAllowedHostHeaderValue($retVal)) {",
      "2567:                     throw new \\UnexpectedValueException(",
      "2568:                         'The current host header value does not match the configured trusted hosts pattern! Check the pattern defined in $GLOBALS[\\'TYPO3_CONF_VARS\\'][\\'SYS\\'][\\'trustedHostsPattern\\'] and adapt it, if you want to allow the current host header \\'' . $retVal . '\\' for your installation.',",
      "2569:                         1396795884",
      "2570:                     );",
      "2571:                 }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2704:     public static function isAllowedHostHeaderValue($hostHeaderValue)",
      "2705:     {",
      "2760:     }",
      "",
      "[Removed Lines]",
      "2706:         if (static::$allowHostHeaderValue === true) {",
      "2707:             return true;",
      "2708:         }",
      "2710:         if (static::isInternalRequestType()) {",
      "2711:             return static::$allowHostHeaderValue = true;",
      "2712:         }",
      "2715:         if (empty($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'])) {",
      "2716:             return false;",
      "2717:         }",
      "2719:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === self::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
      "2720:             static::$allowHostHeaderValue = true;",
      "2721:         } else {",
      "2722:             static::$allowHostHeaderValue = static::hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue);",
      "2723:         }",
      "2725:         return static::$allowHostHeaderValue;",
      "2726:     }",
      "2735:     public static function hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue)",
      "2736:     {",
      "2737:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === self::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME) {",
      "2738:             $host = strtolower($hostHeaderValue);",
      "2742:             $port = self::webserverUsesHttps() ? '443' : '80';",
      "2744:             $parsedHostValue = parse_url('http://' . $host);",
      "2745:             if (isset($parsedHostValue['port'])) {",
      "2746:                 $host = $parsedHostValue['host'];",
      "2747:                 $port = (string)$parsedHostValue['port'];",
      "2748:             }",
      "2752:             $hostMatch = $host === strtolower($_SERVER['SERVER_NAME']) && $port === $_SERVER['SERVER_PORT'];",
      "2753:         } else {",
      "2756:             $hostMatch = (bool)preg_match('/^' . $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] . '$/i', $hostHeaderValue);",
      "2757:         }",
      "2759:         return $hostMatch;",
      "",
      "[Added Lines]",
      "2694:         trigger_error('GeneralUtility::isAllowedHostHeaderValue() will be removed in TYPO3 v12.0. Host header is verified by frontend and backend middlewares.', E_USER_DEPRECATED);",
      "2696:         $verifyHostHeader = new VerifyHostHeader($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] ?? '');",
      "2697:         return $verifyHostHeader->isAllowedHostHeaderValue($hostHeaderValue, $_SERVER);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2780:         return !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off';",
      "2781:     }",
      "",
      "[Removed Lines]",
      "2793:     protected static function isInternalRequestType()",
      "2794:     {",
      "2795:         return Environment::isCli()",
      "2796:             || !isset($GLOBALS['TYPO3_REQUEST'])",
      "2797:             || !($GLOBALS['TYPO3_REQUEST'] instanceof ServerRequestInterface)",
      "2798:             || (bool)((int)($GLOBALS['TYPO3_REQUEST'])->getAttribute('applicationType') & TYPO3_REQUESTTYPE_INSTALL);",
      "2799:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php||typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php": [
      "File: typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php -> typo3/sysext/core/Tests/Acceptance/Application/InstallTool/UpgradeCest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:         $I->click($versionPanel . ' a[data-bs-toggle=\"collapse\"]');",
      "86:         $I->click($versionPanel . ' .t3js-upgradeDocs-markRead');",
      "91:         $I->amGoingTo('mark an item as unread');",
      "92:         $I->click('#heading-read');",
      "",
      "[Removed Lines]",
      "88:         $textNewFirstPanelHeading = $I->grabTextFrom($versionPanel . ' .panel-heading');",
      "89:         $I->assertNotEquals($textCurrentFirstPanelHeading, $textNewFirstPanelHeading);",
      "",
      "[Added Lines]",
      "88:         $I->dontSee($textCurrentFirstPanelHeading, '#version-1');",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php||typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php": [
      "File: typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php -> typo3/sysext/core/Tests/Unit/Middleware/VerifyHostHeaderTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "18: namespace TYPO3\\CMS\\Core\\Tests\\Unit\\Middleware;",
      "20: use Prophecy\\PhpUnit\\ProphecyTrait;",
      "21: use Psr\\Http\\Message\\ResponseInterface;",
      "22: use Psr\\Http\\Message\\ServerRequestInterface;",
      "23: use Psr\\Http\\Server\\RequestHandlerInterface;",
      "24: use TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader;",
      "25: use TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase;",
      "27: class VerifyHostHeaderTest extends UnitTestCase",
      "28: {",
      "29:     use ProphecyTrait;",
      "34:     public function isAllowedHostHeaderValueReturnsFalseIfTrustedHostsIsNotConfigured(): void",
      "35:     {",
      "36:         $subject = new VerifyHostHeader('');",
      "37:         $serverParams = $_SERVER;",
      "38:         self::assertFalse($subject->isAllowedHostHeaderValue('evil.foo.bar', $serverParams));",
      "39:     }",
      "41:     public static function hostnamesMatchingTrustedHostsConfigurationDataProvider(): array",
      "42:     {",
      "43:         return [",
      "44:             'hostname without port matching' => ['lolli.did.this', '.*\\.did\\.this'],",
      "45:             'other hostname without port matching' => ['helmut.did.this', '.*\\.did\\.this'],",
      "46:             'two different hostnames without port matching 1st host' => ['helmut.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "47:             'two different hostnames without port matching 2nd host' => ['lolli.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "48:             'hostname with port matching' => ['lolli.did.this:42', '.*\\.did\\.this:42'],",
      "49:             'hostnames are case insensitive 1' => ['lolli.DID.this:42', '.*\\.did.this:42'],",
      "50:             'hostnames are case insensitive 2' => ['lolli.did.this:42', '.*\\.DID.this:42'],",
      "51:         ];",
      "52:     }",
      "54:     public static function hostnamesNotMatchingTrustedHostsConfigurationDataProvider(): array",
      "55:     {",
      "56:         return [",
      "57:             'hostname without port' => ['lolli.did.this', 'helmut\\.did\\.this'],",
      "58:             'hostname with port, but port not allowed' => ['lolli.did.this:42', 'helmut\\.did\\.this'],",
      "59:             'two different hostnames in pattern but host header starts with different value #1' => ['sub.helmut.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "60:             'two different hostnames in pattern but host header starts with different value #2' => ['sub.lolli.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "61:             'two different hostnames in pattern but host header ends with different value #1' => ['helmut.is.secure.tld', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "62:             'two different hostnames in pattern but host header ends with different value #2' => ['lolli.is.secure.tld', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "63:         ];",
      "64:     }",
      "72:     public function isAllowedHostHeaderValueReturnsTrueIfHostValueMatches(string $httpHost, string $hostNamePattern): void",
      "73:     {",
      "74:         $serverParams = $_SERVER;",
      "76:         $subject = new VerifyHostHeader($hostNamePattern);",
      "77:         self::assertTrue($subject->isAllowedHostHeaderValue($httpHost, $serverParams));",
      "78:     }",
      "86:     public function isAllowedHostHeaderValueReturnsFalseIfHostValueMatches(string $httpHost, string $hostNamePattern): void",
      "87:     {",
      "88:         $serverParams = $_SERVER;",
      "90:         $subject = new VerifyHostHeader($hostNamePattern);",
      "91:         self::assertFalse($subject->isAllowedHostHeaderValue($httpHost, $serverParams));",
      "92:     }",
      "94:     public function serverNamePatternDataProvider(): array",
      "95:     {",
      "96:         return [",
      "97:             'host value matches server name and server port is default http' => [",
      "98:                 'httpHost' => 'secure.web.server',",
      "99:                 'serverName' => 'secure.web.server',",
      "100:                 'isAllowed' => true,",
      "101:                 'serverPort' => '80',",
      "102:                 'ssl' => 'Off',",
      "103:             ],",
      "104:             'host value matches server name if compared case insensitive 1' => [",
      "105:                 'httpHost' => 'secure.web.server',",
      "106:                 'serverName' => 'secure.WEB.server',",
      "107:                 'isAllowed' => true,",
      "108:             ],",
      "109:             'host value matches server name if compared case insensitive 2' => [",
      "110:                 'httpHost' => 'secure.WEB.server',",
      "111:                 'serverName' => 'secure.web.server',",
      "112:                 'isAllowed' => true,",
      "113:             ],",
      "114:             'host value matches server name and server port is default https' => [",
      "115:                 'httpHost' => 'secure.web.server',",
      "116:                 'serverName' => 'secure.web.server',",
      "117:                 'isAllowed' => true,",
      "118:                 'serverPort' => '443',",
      "119:                 'ssl' => 'On',",
      "120:             ],",
      "121:             'host value matches server name and server port' => [",
      "122:                 'httpHost' => 'secure.web.server:88',",
      "123:                 'serverName' => 'secure.web.server',",
      "124:                 'isAllowed' => true,",
      "125:                 'serverPort' => '88',",
      "126:             ],",
      "127:             'host value matches server name case insensitive 1 and server port' => [",
      "128:                 'httpHost' => 'secure.WEB.server:88',",
      "129:                 'serverName' => 'secure.web.server',",
      "130:                 'isAllowed' => true,",
      "131:                 'serverPort' => '88',",
      "132:             ],",
      "133:             'host value matches server name case insensitive 2 and server port' => [",
      "134:                 'httpHost' => 'secure.web.server:88',",
      "135:                 'serverName' => 'secure.WEB.server',",
      "136:                 'isAllowed' => true,",
      "137:                 'serverPort' => '88',",
      "138:             ],",
      "139:             'host value is ipv6 but matches server name and server port' => [",
      "140:                 'httpHost' => '[::1]:81',",
      "141:                 'serverName' => '[::1]',",
      "142:                 'isAllowed' => true,",
      "143:                 'serverPort' => '81',",
      "144:             ],",
      "145:             'host value does not match server name' => [",
      "146:                 'httpHost' => 'insecure.web.server',",
      "147:                 'serverName' => 'secure.web.server',",
      "148:                 'isAllowed' => false,",
      "149:             ],",
      "150:             'host value does not match server port' => [",
      "151:                 'httpHost' => 'secure.web.server:88',",
      "152:                 'serverName' => 'secure.web.server',",
      "153:                 'isAllowed' => false,",
      "154:                 'serverPort' => '89',",
      "155:             ],",
      "156:             'host value has default port that does not match server port' => [",
      "157:                 'httpHost' => 'secure.web.server',",
      "158:                 'serverName' => 'secure.web.server',",
      "159:                 'isAllowed' => false,",
      "160:                 'serverPort' => '81',",
      "161:                 'ssl' => 'Off',",
      "162:             ],",
      "163:             'host value has default port that does not match server ssl port' => [",
      "164:                 'httpHost' => 'secure.web.server',",
      "165:                 'serverName' => 'secure.web.server',",
      "166:                 'isAllowed' => false,",
      "167:                 'serverPort' => '444',",
      "168:                 'ssl' => 'On',",
      "169:             ],",
      "170:         ];",
      "171:     }",
      "183:     public function isAllowedHostHeaderValueWorksCorrectlyWithWithServerNamePattern(",
      "184:         string $httpHost,",
      "185:         string $serverName,",
      "186:         bool $isAllowed,",
      "187:         string $serverPort = '80',",
      "188:         string $ssl = 'Off'",
      "189:     ): void {",
      "190:         $serverParams = $_SERVER;",
      "191:         $serverParams['SERVER_NAME'] = $serverName;",
      "192:         $serverParams['SERVER_PORT'] = $serverPort;",
      "193:         $serverParams['HTTPS'] = $ssl;",
      "195:         $subject = new VerifyHostHeader(VerifyHostHeader::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME);",
      "197:         self::assertSame($isAllowed, $subject->isAllowedHostHeaderValue($httpHost, $serverParams));",
      "198:     }",
      "210:     public function isAllowedHostHeaderValueWorksCorrectlyWithWithServerNamePatternAndSslProxy(",
      "211:         string $httpHost,",
      "212:         string $serverName,",
      "213:         bool $isAllowed,",
      "214:         string $serverPort = '80',",
      "215:         string $ssl = 'Off'",
      "216:     ): void {",
      "217:         $serverParams = $_SERVER;",
      "218:         $serverParams['REMOTE_ADDR'] = '10.0.0.1';",
      "219:         $serverParams['SERVER_NAME'] = $serverName;",
      "220:         $serverParams['SERVER_PORT'] = $serverPort;",
      "221:         $serverParams['HTTPS'] = $ssl;",
      "223:         $subject = new VerifyHostHeader(VerifyHostHeader::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME);",
      "225:         self::assertSame($isAllowed, $subject->isAllowedHostHeaderValue($httpHost, $serverParams));",
      "226:     }",
      "234:     public function processThrowsExceptionForNotAllowedHostnameValues(string $httpHost, string $hostNamePattern): void",
      "235:     {",
      "236:         $this->expectException(\\UnexpectedValueException::class);",
      "237:         $this->expectExceptionCode(1396795884);",
      "239:         $serverParams = $_SERVER;",
      "240:         $serverParams['HTTP_HOST'] = $httpHost;",
      "242:         $subject = new VerifyHostHeader($hostNamePattern);",
      "244:         $requestProphecy = $this->prophesize(ServerRequestInterface::class);",
      "245:         $requestProphecy->getServerParams()->willReturn($serverParams);",
      "247:         $requestHandlerProphecy = $this->prophesize(RequestHandlerInterface::class);",
      "249:         $subject->process($requestProphecy->reveal(), $requestHandlerProphecy->reveal());",
      "250:     }",
      "258:     public function processAllowsAllHostnameValuesIfHostPatternIsSetToAllowAll(string $httpHost, string $hostNamePattern): void",
      "259:     {",
      "260:         $serverParams = $_SERVER;",
      "261:         $serverParams['HTTP_HOST'] = $httpHost;",
      "263:         $subject = new VerifyHostHeader(VerifyHostHeader::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL);",
      "264:         $requestProphecy = $this->prophesize(ServerRequestInterface::class);",
      "265:         $requestProphecy->getServerParams()->willReturn($serverParams);",
      "267:         $responseProphecy = $this->prophesize(ResponseInterface::class);",
      "269:         $requestHandlerProphecy = $this->prophesize(RequestHandlerInterface::class);",
      "270:         $requestHandlerProphecy->handle($requestProphecy)->willReturn($responseProphecy->reveal())->shouldBeCalled();",
      "272:         $subject->process($requestProphecy->reveal(), $requestHandlerProphecy->reveal());",
      "273:     }",
      "274: }",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php||typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php": [
      "File: typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php -> typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityFixture.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: class GeneralUtilityFixture extends GeneralUtility",
      "26: {",
      "",
      "[Removed Lines]",
      "27:     public static int $isAllowedHostHeaderValueCallCount = 0;",
      "35:     public static function isAllowedHostHeaderValue($hostHeaderValue): bool",
      "36:     {",
      "37:         self::$isAllowedHostHeaderValueCallCount++;",
      "38:         return parent::isAllowedHostHeaderValue($hostHeaderValue);",
      "39:     }",
      "44:     public static function setAllowHostHeaderValue(bool $allowHostHeaderValue): void",
      "45:     {",
      "46:         static::$allowHostHeaderValue = $allowHostHeaderValue;",
      "47:     }",
      "54:     protected static function isInternalRequestType(): bool",
      "55:     {",
      "56:         return false;",
      "57:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php": [
      "File: typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php -> typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     protected function setUp(): void",
      "72:     {",
      "73:         parent::setUp();",
      "77:         $this->backupPackageManager = ExtensionManagementUtilityAccessibleProxy::getPackageManager();",
      "78:     }",
      "",
      "[Removed Lines]",
      "74:         GeneralUtilityFixture::$isAllowedHostHeaderValueCallCount = 0;",
      "75:         GeneralUtilityFixture::setAllowHostHeaderValue(false);",
      "76:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1294:         self::assertEquals($expectedIp, GeneralUtility::getIndpEnv('TYPO3_HOST_ONLY'));",
      "1295:     }",
      "",
      "[Removed Lines]",
      "1300:     public function isAllowedHostHeaderValueReturnsFalseIfTrustedHostsIsNotConfigured(): void",
      "1301:     {",
      "1302:         unset($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern']);",
      "1303:         self::assertFalse(GeneralUtilityFixture::isAllowedHostHeaderValue('evil.foo.bar'));",
      "1304:     }",
      "1309:     public static function hostnamesMatchingTrustedHostsConfigurationDataProvider(): array",
      "1310:     {",
      "1311:         return [",
      "1312:             'hostname without port matching' => ['lolli.did.this', '.*\\.did\\.this'],",
      "1313:             'other hostname without port matching' => ['helmut.did.this', '.*\\.did\\.this'],",
      "1314:             'two different hostnames without port matching 1st host' => ['helmut.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "1315:             'two different hostnames without port matching 2nd host' => ['lolli.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "1316:             'hostname with port matching' => ['lolli.did.this:42', '.*\\.did\\.this:42'],",
      "1317:             'hostnames are case insensitive 1' => ['lolli.DID.this:42', '.*\\.did.this:42'],",
      "1318:             'hostnames are case insensitive 2' => ['lolli.did.this:42', '.*\\.DID.this:42'],",
      "1319:         ];",
      "1320:     }",
      "1325:     public static function hostnamesNotMatchingTrustedHostsConfigurationDataProvider(): array",
      "1326:     {",
      "1327:         return [",
      "1328:             'hostname without port' => ['lolli.did.this', 'helmut\\.did\\.this'],",
      "1329:             'hostname with port, but port not allowed' => ['lolli.did.this:42', 'helmut\\.did\\.this'],",
      "1330:             'two different hostnames in pattern but host header starts with different value #1' => ['sub.helmut.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "1331:             'two different hostnames in pattern but host header starts with different value #2' => ['sub.lolli.is.secure', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "1332:             'two different hostnames in pattern but host header ends with different value #1' => ['helmut.is.secure.tld', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "1333:             'two different hostnames in pattern but host header ends with different value #2' => ['lolli.is.secure.tld', '(helmut\\.is\\.secure|lolli\\.is\\.secure)'],",
      "1334:         ];",
      "1335:     }",
      "1343:     public function isAllowedHostHeaderValueReturnsTrueIfHostValueMatches(string $httpHost, string $hostNamePattern): void",
      "1344:     {",
      "1345:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = $hostNamePattern;",
      "1346:         self::assertTrue(GeneralUtilityFixture::isAllowedHostHeaderValue($httpHost));",
      "1347:     }",
      "1355:     public function isAllowedHostHeaderValueReturnsFalseIfHostValueMatches(string $httpHost, string $hostNamePattern): void",
      "1356:     {",
      "1357:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = $hostNamePattern;",
      "1358:         self::assertFalse(GeneralUtilityFixture::isAllowedHostHeaderValue($httpHost));",
      "1359:     }",
      "1361:     public function serverNamePatternDataProvider(): array",
      "1362:     {",
      "1363:         return [",
      "1364:             'host value matches server name and server port is default http' => [",
      "1365:                 'httpHost' => 'secure.web.server',",
      "1366:                 'serverName' => 'secure.web.server',",
      "1367:                 'isAllowed' => true,",
      "1368:                 'serverPort' => '80',",
      "1369:                 'ssl' => 'Off',",
      "1370:             ],",
      "1371:             'host value matches server name if compared case insensitive 1' => [",
      "1372:                 'httpHost' => 'secure.web.server',",
      "1373:                 'serverName' => 'secure.WEB.server',",
      "1374:                 'isAllowed' => true,",
      "1375:             ],",
      "1376:             'host value matches server name if compared case insensitive 2' => [",
      "1377:                 'httpHost' => 'secure.WEB.server',",
      "1378:                 'serverName' => 'secure.web.server',",
      "1379:                 'isAllowed' => true,",
      "1380:             ],",
      "1381:             'host value matches server name and server port is default https' => [",
      "1382:                 'httpHost' => 'secure.web.server',",
      "1383:                 'serverName' => 'secure.web.server',",
      "1384:                 'isAllowed' => true,",
      "1385:                 'serverPort' => '443',",
      "1386:                 'ssl' => 'On',",
      "1387:             ],",
      "1388:             'host value matches server name and server port' => [",
      "1389:                 'httpHost' => 'secure.web.server:88',",
      "1390:                 'serverName' => 'secure.web.server',",
      "1391:                 'isAllowed' => true,",
      "1392:                 'serverPort' => '88',",
      "1393:             ],",
      "1394:             'host value matches server name case insensitive 1 and server port' => [",
      "1395:                 'httpHost' => 'secure.WEB.server:88',",
      "1396:                 'serverName' => 'secure.web.server',",
      "1397:                 'isAllowed' => true,",
      "1398:                 'serverPort' => '88',",
      "1399:             ],",
      "1400:             'host value matches server name case insensitive 2 and server port' => [",
      "1401:                 'httpHost' => 'secure.web.server:88',",
      "1402:                 'serverName' => 'secure.WEB.server',",
      "1403:                 'isAllowed' => true,",
      "1404:                 'serverPort' => '88',",
      "1405:             ],",
      "1406:             'host value is ipv6 but matches server name and server port' => [",
      "1407:                 'httpHost' => '[::1]:81',",
      "1408:                 'serverName' => '[::1]',",
      "1409:                 'isAllowed' => true,",
      "1410:                 'serverPort' => '81',",
      "1411:             ],",
      "1412:             'host value does not match server name' => [",
      "1413:                 'httpHost' => 'insecure.web.server',",
      "1414:                 'serverName' => 'secure.web.server',",
      "1415:                 'isAllowed' => false,",
      "1416:             ],",
      "1417:             'host value does not match server port' => [",
      "1418:                 'httpHost' => 'secure.web.server:88',",
      "1419:                 'serverName' => 'secure.web.server',",
      "1420:                 'isAllowed' => false,",
      "1421:                 'serverPort' => '89',",
      "1422:             ],",
      "1423:             'host value has default port that does not match server port' => [",
      "1424:                 'httpHost' => 'secure.web.server',",
      "1425:                 'serverName' => 'secure.web.server',",
      "1426:                 'isAllowed' => false,",
      "1427:                 'serverPort' => '81',",
      "1428:                 'ssl' => 'Off',",
      "1429:             ],",
      "1430:             'host value has default port that does not match server ssl port' => [",
      "1431:                 'httpHost' => 'secure.web.server',",
      "1432:                 'serverName' => 'secure.web.server',",
      "1433:                 'isAllowed' => false,",
      "1434:                 'serverPort' => '444',",
      "1435:                 'ssl' => 'On',",
      "1436:             ],",
      "1437:         ];",
      "1438:     }",
      "1450:     public function isAllowedHostHeaderValueWorksCorrectlyWithWithServerNamePattern(",
      "1451:         string $httpHost,",
      "1452:         string $serverName,",
      "1453:         bool $isAllowed,",
      "1454:         string $serverPort = '80',",
      "1455:         string $ssl = 'Off'",
      "1456:     ): void {",
      "1457:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME;",
      "1458:         $_SERVER['SERVER_NAME'] = $serverName;",
      "1459:         $_SERVER['SERVER_PORT'] = $serverPort;",
      "1460:         $_SERVER['HTTPS'] = $ssl;",
      "1461:         self::assertSame($isAllowed, GeneralUtilityFixture::isAllowedHostHeaderValue($httpHost));",
      "1462:     }",
      "1474:     public function isAllowedHostHeaderValueWorksCorrectlyWithWithServerNamePatternAndSslProxy(",
      "1475:         string $httpHost,",
      "1476:         string $serverName,",
      "1477:         bool $isAllowed,",
      "1478:         string $serverPort = '80',",
      "1479:         string $ssl = 'Off'",
      "1480:     ): void {",
      "1481:         $backup = ['sys' => $GLOBALS['TYPO3_CONF_VARS']['SYS'], 'server' => $_SERVER];",
      "1483:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME;",
      "1484:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxySSL'] = '*';",
      "1485:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxyIP'] = '10.0.0.1';",
      "1487:         $_SERVER['REMOTE_ADDR'] = '10.0.0.1';",
      "1488:         $_SERVER['SERVER_NAME'] = $serverName;",
      "1489:         $_SERVER['SERVER_PORT'] = $serverPort;",
      "1490:         $_SERVER['HTTPS'] = $ssl;",
      "1492:         self::assertSame($isAllowed, GeneralUtilityFixture::isAllowedHostHeaderValue($httpHost));",
      "1494:         $GLOBALS['TYPO3_CONF_VARS']['SYS'] = $backup['sys'];",
      "1495:         $_SERVER = $backup['server'];",
      "1496:     }",
      "1501:     public function allGetIndpEnvCallsRelatedToHostNamesCallIsAllowedHostHeaderValue(): void",
      "1502:     {",
      "1503:         GeneralUtilityFixture::getIndpEnv('HTTP_HOST');",
      "1504:         GeneralUtility::flushInternalRuntimeCaches();",
      "1505:         GeneralUtilityFixture::getIndpEnv('TYPO3_HOST_ONLY');",
      "1506:         GeneralUtility::flushInternalRuntimeCaches();",
      "1507:         GeneralUtilityFixture::getIndpEnv('TYPO3_REQUEST_HOST');",
      "1508:         GeneralUtility::flushInternalRuntimeCaches();",
      "1509:         GeneralUtilityFixture::getIndpEnv('TYPO3_REQUEST_URL');",
      "1510:         self::assertSame(4, GeneralUtilityFixture::$isAllowedHostHeaderValueCallCount);",
      "1511:     }",
      "1519:     public function getIndpEnvForHostThrowsExceptionForNotAllowedHostnameValues(string $httpHost, string $hostNamePattern): void",
      "1520:     {",
      "1521:         $this->expectException(\\UnexpectedValueException::class);",
      "1522:         $this->expectExceptionCode(1396795884);",
      "1523:         $_SERVER['HTTP_HOST'] = $httpHost;",
      "1524:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = $hostNamePattern;",
      "1525:         GeneralUtilityFixture::getIndpEnv('HTTP_HOST');",
      "1526:     }",
      "1534:     public function getIndpEnvForHostAllowsAllHostnameValuesIfHostPatternIsSetToAllowAll(string $httpHost, string $hostNamePattern): void",
      "1535:     {",
      "1536:         $_SERVER['HTTP_HOST'] = $httpHost;",
      "1537:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL;",
      "1538:         self::assertSame($httpHost, GeneralUtility::getIndpEnv('HTTP_HOST'));",
      "1539:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "typo3/sysext/frontend/Configuration/RequestMiddlewares.php||typo3/sysext/frontend/Configuration/RequestMiddlewares.php": [
      "File: typo3/sysext/frontend/Configuration/RequestMiddlewares.php -> typo3/sysext/frontend/Configuration/RequestMiddlewares.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:             'target' => \\TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization::class,",
      "17:         ],",
      "19:         'typo3/cms-core/normalized-params-attribute' => [",
      "20:             'target' => \\TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute::class,",
      "21:             'after' => [",
      "23:             ],",
      "24:         ],",
      "",
      "[Removed Lines]",
      "22:                 'typo3/cms-frontend/timetracker',",
      "",
      "[Added Lines]",
      "19:         'typo3/cms-core/verify-host-header' => [",
      "20:             'target' => \\TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader::class,",
      "21:             'after' => [",
      "22:                 'typo3/cms-frontend/timetracker',",
      "23:             ],",
      "24:         ],",
      "29:                 'typo3/cms-core/verify-host-header',",
      "",
      "---------------"
    ],
    "typo3/sysext/install/Classes/Controller/InstallerController.php||typo3/sysext/install/Classes/Controller/InstallerController.php": [
      "File: typo3/sysext/install/Classes/Controller/InstallerController.php -> typo3/sysext/install/Classes/Controller/InstallerController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: use TYPO3\\CMS\\Core\\Information\\Typo3Version;",
      "50: use TYPO3\\CMS\\Core\\Messaging\\FlashMessage;",
      "51: use TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue;",
      "52: use TYPO3\\CMS\\Core\\Package\\FailsafePackageManager;",
      "53: use TYPO3\\CMS\\Core\\Registry;",
      "54: use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: use TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:     private $packageManager;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:     private $verifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "124:         SiteConfiguration $siteConfiguration,",
      "125:         Registry $registry,",
      "126:         FailsafePackageManager $packageManager,",
      "127:         PermissionsCheck $databasePermissionsCheck",
      "128:     ) {",
      "129:         $this->lateBootService = $lateBootService;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         VerifyHostHeader $verifyHostHeader,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         $this->siteConfiguration = $siteConfiguration;",
      "134:         $this->registry = $registry;",
      "135:         $this->packageManager = $packageManager;",
      "136:         $this->databasePermissionsCheck = $databasePermissionsCheck;",
      "137:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:         $this->verifyHostHeader = $verifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "271:     {",
      "272:         return new JsonResponse([",
      "274:         ]);",
      "275:     }",
      "283:     {",
      "285:             $this->configurationManager->setLocalConfigurationValueByPath('SYS/trustedHostsPattern', '.*');",
      "286:         }",
      "287:         return new JsonResponse([",
      "",
      "[Removed Lines]",
      "270:     public function checkTrustedHostsPatternAction(): ResponseInterface",
      "273:             'success' => GeneralUtility::hostHeaderValueMatchesTrustedHostsPattern($_SERVER['HTTP_HOST']),",
      "282:     public function executeAdjustTrustedHostsPatternAction(): ResponseInterface",
      "284:         if (!GeneralUtility::hostHeaderValueMatchesTrustedHostsPattern($_SERVER['HTTP_HOST'])) {",
      "",
      "[Added Lines]",
      "279:     public function checkTrustedHostsPatternAction(ServerRequestInterface $request): ResponseInterface",
      "281:         $serverParams = $request->getServerParams();",
      "282:         $host = $serverParams['HTTP_HOST'] ?? '';",
      "285:             'success' => $this->verifyHostHeader->isAllowedHostHeaderValue($host, $serverParams),",
      "295:     public function executeAdjustTrustedHostsPatternAction(ServerRequestInterface $request): ResponseInterface",
      "297:         $serverParams = $request->getServerParams();",
      "298:         $host = $serverParams['HTTP_HOST'] ?? '';",
      "300:         if (!$this->verifyHostHeader->isAllowedHostHeaderValue($host, $serverParams)) {",
      "",
      "---------------"
    ],
    "typo3/sysext/install/Classes/ServiceProvider.php||typo3/sysext/install/Classes/ServiceProvider.php": [
      "File: typo3/sysext/install/Classes/ServiceProvider.php -> typo3/sysext/install/Classes/ServiceProvider.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: use TYPO3\\CMS\\Core\\Log\\LogManager;",
      "35: use TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute as NormalizedParamsMiddleware;",
      "36: use TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation as ResponsePropagationMiddleware;",
      "37: use TYPO3\\CMS\\Core\\Package\\AbstractServiceProvider;",
      "38: use TYPO3\\CMS\\Core\\Package\\FailsafePackageManager;",
      "39: use TYPO3\\CMS\\Core\\Package\\PackageManager;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: use TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "240:             $container->get(SiteConfiguration::class),",
      "241:             $container->get(Registry::class),",
      "242:             $container->get(FailsafePackageManager::class),",
      "243:             $container->get(PermissionsCheck::class)",
      "244:         );",
      "245:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "244:             $container->get(VerifyHostHeader::class),",
      "",
      "---------------"
    ],
    "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php||typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php": [
      "File: typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php -> typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: use TYPO3\\CMS\\Core\\Core\\Environment;",
      "19: use TYPO3\\CMS\\Core\\Messaging\\FlashMessage;",
      "20: use TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue;",
      "21: use TYPO3\\CMS\\Core\\Service\\OpcodeCacheService;",
      "22: use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: use TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     protected function checkTrustedHostPattern()",
      "66:     {",
      "68:             $this->messageQueue->enqueue(new FlashMessage(",
      "69:                 'Trusted hosts pattern is configured to allow all header values. Check the pattern defined in Admin'",
      "70:                     . ' Tools -> Settings -> Configure Installation-Wide Options -> System -> trustedHostsPattern'",
      "",
      "[Removed Lines]",
      "67:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
      "",
      "[Added Lines]",
      "68:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === VerifyHostHeader::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "73:                 FlashMessage::WARNING",
      "74:             ));",
      "75:         } else {",
      "77:                 $this->messageQueue->enqueue(new FlashMessage(",
      "78:                     '',",
      "79:                     'Trusted hosts pattern is configured to allow current host value.'",
      "",
      "[Removed Lines]",
      "76:             if (GeneralUtility::hostHeaderValueMatchesTrustedHostsPattern($_SERVER['HTTP_HOST'])) {",
      "",
      "[Added Lines]",
      "77:             $verifyHostHeader = new VerifyHostHeader($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] ?? '');",
      "78:             if ($verifyHostHeader->isAllowedHostHeaderValue($_SERVER['HTTP_HOST'], $_SERVER)) {",
      "",
      "---------------"
    ],
    "typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php||typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php": [
      "File: typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php -> typo3/sysext/install/Configuration/ExtensionScanner/Php/ClassConstantMatcher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:             'Breaking-93003-LimitationOfPageRendererToOnlyRenderFullPage.rst',",
      "443:         ],",
      "444:     ],",
      "445: ];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "445:     'TYPO3\\CMS\\Core\\Utility\\GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL' => [",
      "446:         'restFiles' => [",
      "447:             'Deprecation-95395-GeneralUtilityIsAllowedHostHeaderValueAndTrustedHostsPatternConstants.rst',",
      "448:         ],",
      "449:     ],",
      "450:     'TYPO3\\CMS\\Core\\Utility\\GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME' => [",
      "451:         'restFiles' => [",
      "452:             'Deprecation-95395-GeneralUtilityIsAllowedHostHeaderValueAndTrustedHostsPatternConstants.rst',",
      "453:         ],",
      "454:     ],",
      "",
      "---------------"
    ],
    "typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php||typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php": [
      "File: typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php -> typo3/sysext/install/Configuration/ExtensionScanner/Php/MethodCallStaticMatcher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1261:             'Deprecation-95367-GeneralUtilityisAbsPath.rst',",
      "1262:         ],",
      "1263:     ],",
      "1264: ];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1264:     'TYPO3\\CMS\\Core\\Utility\\GeneralUtility::isAllowedHostHeaderValue' => [",
      "1265:         'numberOfMandatoryArguments' => 1,",
      "1266:         'maximumNumberOfArguments' => 1,",
      "1267:         'restFiles' => [",
      "1268:             'Deprecation-95395-GeneralUtilityIsAllowedHostHeaderValueAndTrustedHostsPatternConstants.rst',",
      "1269:         ],",
      "1270:     ],",
      "",
      "---------------"
    ],
    "typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php||typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php": [
      "File: typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php -> typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: use TYPO3\\CMS\\Core\\Database\\ConnectionPool;",
      "26: use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DeletedRestriction;",
      "27: use TYPO3\\CMS\\Core\\Localization\\LanguageService;",
      "28: use TYPO3\\CMS\\Core\\Resource\\Security\\FileNameValidator;",
      "29: use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;",
      "30: use TYPO3\\CMS\\Reports\\RequestAwareStatusProviderInterface;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: use TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:         $message = '';",
      "129:         $severity = ReportStatus::OK;",
      "132:             $value = $this->getLanguageService()->getLL('status_insecure');",
      "133:             $severity = ReportStatus::ERROR;",
      "134:             $message = $this->getLanguageService()->sL('LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:warning.install_trustedhosts');",
      "",
      "[Removed Lines]",
      "131:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
      "",
      "[Added Lines]",
      "132:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === VerifyHostHeader::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b61ace1c36f6c69fb1466bf33a4224a4a12665bf",
      "candidate_info": {
        "commit_hash": "b61ace1c36f6c69fb1466bf33a4224a4a12665bf",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/b61ace1c36f6c69fb1466bf33a4224a4a12665bf",
        "files": [
          "typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php",
          "typo3/sysext/core/Classes/Package/PackageManager.php",
          "typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php",
          "typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php"
        ],
        "message": "[TASK] Let PackageManager resolve EXT: paths\n\nThe PackageManager has all information on which\npackages are installed and how they are named,\nthus it should serve as only source of truth\nregarding package path resolving.\n\nResolves: #95435\nReleases: master\nChange-Id: Ib77fdd2a82f6669fc2420ec0e90935c5f1d7dc37\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/71405\nTested-by: core-ci <typo3@b13.com>\nTested-by: Simon Gilli <typo3@gilbertsoft.org>\nTested-by: Benni Mack <benni@typo3.org>\nReviewed-by: Simon Gilli <typo3@gilbertsoft.org>\nReviewed-by: Benni Mack <benni@typo3.org>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php||typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php",
          "typo3/sysext/core/Classes/Package/PackageManager.php||typo3/sysext/core/Classes/Package/PackageManager.php",
          "typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php||typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php",
          "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
            "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
            "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php||typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php": [
          "File: typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php -> typo3/sysext/core/Classes/Package/Exception/UnknownPackagePathException.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "16: namespace TYPO3\\CMS\\Core\\Package\\Exception;",
          "18: use TYPO3\\CMS\\Core\\Package\\Exception;",
          "23: class UnknownPackagePathException extends Exception",
          "24: {",
          "25: }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Package/PackageManager.php||typo3/sysext/core/Classes/Package/PackageManager.php": [
          "File: typo3/sysext/core/Classes/Package/PackageManager.php -> typo3/sysext/core/Classes/Package/PackageManager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: use TYPO3\\CMS\\Core\\Package\\Exception\\PackageStatesFileNotWritableException;",
          "32: use TYPO3\\CMS\\Core\\Package\\Exception\\ProtectedPackageKeyException;",
          "33: use TYPO3\\CMS\\Core\\Package\\Exception\\UnknownPackageException;",
          "34: use TYPO3\\CMS\\Core\\Package\\MetaData\\PackageConstraint;",
          "35: use TYPO3\\CMS\\Core\\Service\\DependencyOrderingService;",
          "36: use TYPO3\\CMS\\Core\\Service\\OpcodeCacheService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: use TYPO3\\CMS\\Core\\Package\\Exception\\UnknownPackagePathException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     protected $packageStatesConfiguration = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     protected ?string $packagePathMatchRegex;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:     {",
          "232:         $this->activePackages = [];",
          "233:         $this->packageStatesConfiguration['packages'][$package->getPackageKey()] = ['packagePath' => str_replace($this->packagesBasePath, '', $package->getPackagePath())];",
          "234:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:         $this->packagePathMatchRegex = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:         $this->registerPackagesFromConfiguration($packages, $registerOnlyNewPackages);",
          "252:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:     public function resolvePackagePath(string $path): string",
          "272:     {",
          "273:         if (!PathUtility::isExtensionPath($path)) {",
          "274:             throw new UnknownPackageException('Given path is not an extension path starting with \"EXT:\" ' . $path, 1631630764);",
          "275:         }",
          "276:         if (!isset($this->packagePathMatchRegex)) {",
          "277:             $this->packagePathMatchRegex = sprintf(",
          "278:                 '/^EXT:(%s)\\//',",
          "279:                 implode(",
          "280:                     '|',",
          "281:                     array_map(",
          "282:                         static function ($packageKey) {",
          "283:                             return preg_quote($packageKey, '/');",
          "284:                         },",
          "285:                         array_merge(",
          "286:                             array_keys($this->getActivePackages()),",
          "287:                             array_keys($this->packageAliasMap),",
          "288:                             array_keys($this->composerNameToPackageKeyMap)",
          "289:                         )",
          "290:                     )",
          "291:                 )",
          "292:             );",
          "293:         }",
          "294:         $result = preg_match($this->packagePathMatchRegex, $path, $matches);",
          "295:         if (!$result) {",
          "296:             throw new UnknownPackagePathException('Package path\"' . $path . '\" is not available. Please check if the package referenced in the path exists and that the package key is correct (package keys are case sensitive).', 1631630087);",
          "297:         }",
          "299:         return preg_replace($this->packagePathMatchRegex, $this->getPackage($matches[1])->getPackagePath(), $path);",
          "300:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:         if (!$this->isPackageRegistered($packageKey) && !$this->isPackageAvailable($packageKey)) {",
          "418:             throw new UnknownPackageException('Package \"' . $packageKey . '\" is not available. Please check if the package exists and that the package key is correct (package keys are case sensitive).', 1166546734);",
          "419:         }",
          "421:     }",
          "",
          "[Removed Lines]",
          "420:         return $this->packages[$packageKey];",
          "",
          "[Added Lines]",
          "468:         return $this->packages[$this->getPackageKeyFromComposerName($packageKey)];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "487:         }",
          "489:         $this->activePackages = [];",
          "490:         unset($this->packageStatesConfiguration['packages'][$packageKey]);",
          "491:         $this->sortAndSavePackageStates();",
          "492:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:         $this->packagePathMatchRegex = null;",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php||typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php": [
          "File: typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php -> typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: use TYPO3\\CMS\\Core\\Log\\LogManager;",
          "29: use TYPO3\\CMS\\Core\\Migrations\\TcaMigration;",
          "30: use TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier;",
          "32: use TYPO3\\CMS\\Core\\Package\\PackageManager;",
          "33: use TYPO3\\CMS\\Core\\Preparations\\TcaPreparation;",
          "34: use TYPO3\\CMS\\Core\\Resource\\Filter\\FileExtensionFilter;",
          "",
          "[Removed Lines]",
          "31: use TYPO3\\CMS\\Core\\Package\\Exception;",
          "",
          "[Added Lines]",
          "31: use TYPO3\\CMS\\Core\\Package\\Exception as PackageException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:         return static::$packageManager->isPackageActive($key);",
          "121:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     public static function resolvePackagePath(string $path): string",
          "134:     {",
          "135:         return static::$packageManager->resolvePackagePath($path);",
          "136:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:         }",
          "169:         $version = static::$packageManager->getPackage($key)->getPackageMetaData()->getVersion();",
          "170:         if (empty($version)) {",
          "172:         }",
          "173:         return $version;",
          "174:     }",
          "",
          "[Removed Lines]",
          "171:             throw new Exception('Version number in composer manifest of package \"' . $key . '\" is missing or invalid', 1395614959);",
          "",
          "[Added Lines]",
          "186:             throw new PackageException('Version number in composer manifest of package \"' . $key . '\" is missing or invalid', 1395614959);",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php": [
          "File: typo3/sysext/core/Classes/Utility/GeneralUtility.php -> typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: use TYPO3\\CMS\\Core\\Http\\ApplicationType;",
          "31: use TYPO3\\CMS\\Core\\Http\\RequestFactory;",
          "32: use TYPO3\\CMS\\Core\\Log\\LogManager;",
          "33: use TYPO3\\CMS\\Core\\SingletonInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: use TYPO3\\CMS\\Core\\Package\\Exception as PackageException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2818:         }",
          "2820:         if (PathUtility::isExtensionPath($filename)) {",
          "2825:             }",
          "2826:         } elseif (!PathUtility::isAbsolutePath($filename)) {",
          "",
          "[Removed Lines]",
          "2821:             [$extKey, $local] = explode('/', substr($filename, 4), 2);",
          "2822:             $filename = '';",
          "2823:             if ((string)$extKey !== '' && ExtensionManagementUtility::isLoaded($extKey) && (string)$local !== '') {",
          "2824:                 $filename = ExtensionManagementUtility::extPath($extKey) . $local;",
          "",
          "[Added Lines]",
          "2822:             try {",
          "2823:                 $filename = ExtensionManagementUtility::resolvePackagePath($filename);",
          "2824:             } catch (PackageException $e) {",
          "2825:                 $filename = '';",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php": [
          "File: typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php -> typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3725:             ->getMock();",
          "3727:         $packageManager = $this->getMockBuilder(PackageManager::class)",
          "3729:             ->disableOriginalConstructor()",
          "3730:             ->getMock();",
          "3731:         $package->expects(self::any())",
          "3732:             ->method('getPackagePath')",
          "3733:             ->willReturn('/path/to/foo/');",
          "3734:         $packageManager->expects(self::any())",
          "3735:             ->method('isPackageActive')",
          "3736:             ->with(self::equalTo('foo'))",
          "",
          "[Removed Lines]",
          "3728:             ->onlyMethods(['isPackageActive', 'getPackage'])",
          "",
          "[Added Lines]",
          "3728:             ->onlyMethods(['isPackageActive', 'getPackage', 'getActivePackages'])",
          "3734:         $packageManager->expects(self::any())",
          "3735:             ->method('getActivePackages')",
          "3736:             ->willReturn(['foo' => $package]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2da5fed05699307d6a71994ffa8588dd3b0f70c0",
      "candidate_info": {
        "commit_hash": "2da5fed05699307d6a71994ffa8588dd3b0f70c0",
        "repo": "TYPO3/typo3",
        "commit_url": "https://github.com/TYPO3/typo3/commit/2da5fed05699307d6a71994ffa8588dd3b0f70c0",
        "files": [
          "typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
          "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php"
        ],
        "message": "[BUGFIX] Fix HTTP_HOST verification when HTTPS is proxied to HTTP\n\nThe HTTP_HOST verification failed if the proxy server port was\ndifferent to the local webserver port, due to an assumption in\nhostHeaderValueMatchesTrustedHostsPattern() that concluded\nthat the local webserver port needs to match the default\nport of the proxy server.\n\nIn case a HTTPS termination proxy is used, that\nassumption can not be made, as it is common\npractice to use HTTP backends behind a HTTPS\nproxy in private networks. Therefore the port\nis now verified against the default port of\nthe current webserver, not a possible proxy server.\n\nScenario:\n * Proxy Server HTTPS (SSL termination) => Port 443\n * Application Server HTTP => Port 80\n * Default trustedHostsPattern setting\n\nIt was previously required to configure a (slow)\ntrustedHostsPattern to circumvent this issue.\n\nReleases: master, 10.4\nResolves: #94113\nChange-Id: I294b87164aee834d8c0b5e0a75da3e19051fe592\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/66613\nTested-by: core-ci <typo3@b13.com>\nTested-by: Christian Kuhn <lolli@schwarzbu.ch>\nTested-by: Jochen <rothjochen@gmail.com>\nTested-by: Benjamin Franzke <bfr@qbus.de>\nReviewed-by: Christian Kuhn <lolli@schwarzbu.ch>\nReviewed-by: Jochen <rothjochen@gmail.com>\nReviewed-by: Benjamin Franzke <bfr@qbus.de>",
        "before_after_code_files": [
          "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
          "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php||typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
            "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
            "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php||typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php"
          ],
          "candidate": [
            "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php",
            "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
            "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php||typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php"
          ]
        }
      },
      "candidate_diff": {
        "typo3/sysext/core/Classes/Utility/GeneralUtility.php||typo3/sysext/core/Classes/Utility/GeneralUtility.php": [
          "File: typo3/sysext/core/Classes/Utility/GeneralUtility.php -> typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2620:                 if (self::cmpIP($_SERVER['REMOTE_ADDR'] ?? '', $proxySSL)) {",
          "2621:                     $retVal = true;",
          "2622:                 } else {",
          "2627:                 }",
          "2628:                 break;",
          "2629:             case '_ARRAY':",
          "",
          "[Removed Lines]",
          "2625:                     $retVal = !empty($_SERVER['SSL_SESSION_ID'])",
          "2626:                         || (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off');",
          "",
          "[Added Lines]",
          "2623:                     $retVal = self::webserverUsesHttps();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2706:     public static function hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue)",
          "2707:     {",
          "2708:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === self::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME) {",
          "2713:             if (isset($parsedHostValue['port'])) {",
          "2717:             }",
          "2718:         } else {",
          "",
          "[Removed Lines]",
          "2711:             $defaultPort = self::getIndpEnv('TYPO3_SSL') ? '443' : '80';",
          "2712:             $parsedHostValue = parse_url('http://' . $hostHeaderValue);",
          "2714:                 $hostMatch = (strtolower($parsedHostValue['host']) === strtolower($_SERVER['SERVER_NAME']) && (string)$parsedHostValue['port'] === $_SERVER['SERVER_PORT']);",
          "2715:             } else {",
          "2716:                 $hostMatch = (strtolower($hostHeaderValue) === strtolower($_SERVER['SERVER_NAME']) && $defaultPort === $_SERVER['SERVER_PORT']);",
          "",
          "[Added Lines]",
          "2706:             $host = strtolower($hostHeaderValue);",
          "2710:             $port = self::webserverUsesHttps() ? '443' : '80';",
          "2712:             $parsedHostValue = parse_url('http://' . $host);",
          "2714:                 $host = $parsedHostValue['host'];",
          "2715:                 $port = (string)$parsedHostValue['port'];",
          "2720:             $hostMatch = $host === strtolower($_SERVER['SERVER_NAME']) && $port === $_SERVER['SERVER_PORT'];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2724:         return $hostMatch;",
          "2725:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:     protected static function webserverUsesHttps()",
          "2741:     {",
          "2742:         if (!empty($_SERVER['SSL_SESSION_ID'])) {",
          "2743:             return true;",
          "2744:         }",
          "2748:         return !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off';",
          "2749:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php||typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php": [
          "File: typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php -> typo3/sysext/core/Tests/Unit/Utility/GeneralUtilityTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:         self::assertSame($isAllowed, GeneralUtilityFixture::isAllowedHostHeaderValue($httpHost));",
          "1587:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1599:     public function isAllowedHostHeaderValueWorksCorrectlyWithWithServerNamePatternAndSslProxy($httpHost, $serverName, $isAllowed, $serverPort = '80', $ssl = 'Off')",
          "1600:     {",
          "1601:         $backup = ['sys' => $GLOBALS['TYPO3_CONF_VARS']['SYS'], 'server' => $_SERVER];",
          "1603:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] = GeneralUtility::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME;",
          "1604:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxySSL'] = '*';",
          "1605:         $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxyIP'] = '10.0.0.1';",
          "1607:         $_SERVER['REMOTE_ADDR'] = '10.0.0.1';",
          "1608:         $_SERVER['SERVER_NAME'] = $serverName;",
          "1609:         $_SERVER['SERVER_PORT'] = $serverPort;",
          "1610:         $_SERVER['HTTPS'] = $ssl;",
          "1612:         self::assertSame($isAllowed, GeneralUtilityFixture::isAllowedHostHeaderValue($httpHost));",
          "1614:         $GLOBALS['TYPO3_CONF_VARS']['SYS'] = $backup['sys'];",
          "1615:         $_SERVER = $backup['server'];",
          "1616:     }",
          "",
          "---------------"
        ],
        "typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php||typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php": [
          "File: typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php -> typo3/sysext/install/Classes/SystemEnvironment/SetupCheck.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:                     'Trusted hosts pattern is configured to allow current host value.'",
          "80:                 ));",
          "81:             } else {",
          "83:                 $this->messageQueue->enqueue(new FlashMessage(",
          "87:                         . ' Tools -> Settings -> Configure Installation-Wide Options -> System -> trustedHostsPattern'",
          "88:                         . ' and adapt it to expected host value(s).',",
          "89:                     'Trusted hosts pattern mismatch',",
          "",
          "[Removed Lines]",
          "82:                 $defaultPort = GeneralUtility::getIndpEnv('TYPO3_SSL') ? '443' : '80';",
          "84:                     'The trusted hosts pattern will be configured to allow all header values. This is because your $SERVER_NAME:[defaultPort]'",
          "85:                         . ' is \"' . $_SERVER['SERVER_NAME'] . ':' . $defaultPort . '\" while your HTTP_HOST:SERVER_PORT is \"'",
          "86:                         . $_SERVER['HTTP_HOST'] . ':' . $_SERVER['SERVER_PORT'] . '\". Check the pattern defined in Admin'",
          "",
          "[Added Lines]",
          "83:                     'The trusted hosts pattern will be configured to allow all header values. This is because your $SERVER_NAME:$SERVER_PORT'",
          "84:                         . ' is \"' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . '\" while your HTTP_HOST is \"'",
          "85:                         . $_SERVER['HTTP_HOST'] . '\". Check the pattern defined in Admin'",
          "",
          "---------------"
        ]
      }
    }
  ]
}