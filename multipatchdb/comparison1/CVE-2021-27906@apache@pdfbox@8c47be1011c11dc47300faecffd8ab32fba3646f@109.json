{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29da8d27991a19e9847d9c8e47ee8d18569c1d5e",
      "candidate_info": {
        "commit_hash": "29da8d27991a19e9847d9c8e47ee8d18569c1d5e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/29da8d27991a19e9847d9c8e47ee8d18569c1d5e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java"
        ],
        "message": "PDFBOX-4892: don't create PD object, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890919 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     public boolean hasChildren()",
          "172:     {",
          "174:     }",
          "176:     PDOutlineItem getOutlineItem(COSName name)",
          "",
          "[Removed Lines]",
          "173:         return getFirstChild() != null;",
          "",
          "[Added Lines]",
          "173:         return getCOSObject().getCOSDictionary(COSName.FIRST) != null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2ccb4ab8fd368e28aac15dd7bd60cccb33e215d",
      "candidate_info": {
        "commit_hash": "e2ccb4ab8fd368e28aac15dd7bd60cccb33e215d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e2ccb4ab8fd368e28aac15dd7bd60cccb33e215d",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java",
          "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881497 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java",
          "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java||pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     {",
          "217:         String theString = \"\\u4e16\";",
          "218:         COSString string = new COSString(theString);",
          "221:         String textAscii = \"This is some regular text. It should all be expressible in ASCII\";",
          "",
          "[Removed Lines]",
          "219:         assertTrue(string.getString().equals(theString));",
          "",
          "[Added Lines]",
          "219:         Assert.assertEquals(string.getString(), theString);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java||pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java -> pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:         doc.save(pdfFile);",
          "373:         doc.close();",
          "374:         long sizeEncrypted = pdfFile.length();",
          "376:                 + \"-bit \" + (preferAES ? \"AES\" : \"RC4\") + \" encrypted pdf should not have same size as plain one\",",
          "380:         PDDocument encryptedDoc = PDDocument.load(pdfFile, ownerpassword);",
          "",
          "[Removed Lines]",
          "375:         Assert.assertTrue(keyLength",
          "377:                 sizeEncrypted != sizePriorToEncr);",
          "",
          "[Added Lines]",
          "375:         Assert.assertNotEquals(keyLength",
          "377:                 sizeEncrypted, sizePriorToEncr);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "28: import org.apache.pdfbox.cos.COSArray;",
          "29: import org.apache.pdfbox.cos.COSBase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import junit.framework.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:         for (int i = 0; i < cosArrayList.size(); i++) {",
          "119:             PDAnnotation annot = cosArrayList.get(i);",
          "126:             assertEquals(\"PDAnnotations cosObject at \" + i + \" shall be at position \" + i + \" of Array\",",
          "127:                 tbcAnnotationsArray[i], annot.getCOSObject());",
          "128:         }",
          "",
          "[Removed Lines]",
          "120:             assertTrue(\"PDAnnotations cosObject at \" + i + \" shall be equal to index \" + i + \" of COSArray\",",
          "121:                 annotationsArray.get(i).equals(annot.getCOSObject()));",
          "124:             assertTrue(\"PDAnnotations at \" + i + \" shall be at index \" + i + \" of List\",",
          "125:                 tbcAnnotationsList.get(i).equals((annot)));",
          "",
          "[Added Lines]",
          "121:             assertEquals(\"PDAnnotations cosObject at \" + i + \" shall be equal to index \" + i + \" of COSArray\",",
          "122:                 annotationsArray.get(i), annot.getCOSObject());",
          "125:             assertEquals(\"PDAnnotations at \" + i + \" shall be at index \" + i + \" of List\",",
          "126:                 tbcAnnotationsList.get(i), annot);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be652a1d3c3279b5ccd783ea776dce649e3f5e7a",
      "candidate_info": {
        "commit_hash": "be652a1d3c3279b5ccd783ea776dce649e3f5e7a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/be652a1d3c3279b5ccd783ea776dce649e3f5e7a",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java"
        ],
        "message": "PDFBOX-4892: remove unneeded code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888770 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java||fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java||fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java -> fontbox/src/main/java/org/apache/fontbox/cff/Type1FontUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     {",
          "95:         byte[] buffer = new byte[plaintextBytes.length + n];",
          "102:         System.arraycopy(plaintextBytes, 0, buffer, n, buffer.length - n);",
          "104:         int c1 = 52845;",
          "",
          "[Removed Lines]",
          "97:         for (int i = 0; i < n; i++)",
          "98:         {",
          "99:             buffer[i] = 0;",
          "100:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d46b3e0f0faf5a876dcc386b6e926aa645ee8768",
      "candidate_info": {
        "commit_hash": "d46b3e0f0faf5a876dcc386b6e926aa645ee8768",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d46b3e0f0faf5a876dcc386b6e926aa645ee8768",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java"
        ],
        "message": "PDFBOX-3017: certify signature must be the first one (mentioned by Dr. Bernd Wild in OctoberPDFest webinar)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882329 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java||examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java||examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/SigUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     }",
          "133:     public static void setMDPPermission(PDDocument doc, PDSignature signature, int accessPermissions)",
          "134:     {",
          "135:         COSDictionary sigDict = signature.getCOSObject();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:             throws IOException",
          "138:         for (PDSignature sig : doc.getSignatureDictionaries())",
          "139:         {",
          "140:             if (sig.getCOSObject().containsKey(COSName.CONTENTS))",
          "141:             {",
          "144:                 throw new IOException(\"DocMDP transform method not allowed if a signature exists\");",
          "145:             }",
          "146:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d946a734216d9e4de424edc3f8714c7d1d400093",
      "candidate_info": {
        "commit_hash": "d946a734216d9e4de424edc3f8714c7d1d400093",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d946a734216d9e4de424edc3f8714c7d1d400093",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java"
        ],
        "message": "PDFBOX-4892: fix bug-by-typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889542 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDLab.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     public float[] getDefaultDecode(int bitsPerComponent)",
          "158:     {",
          "159:         PDRange a = getARange();",
          "161:         return new float[] { 0, 100, a.getMin(), a.getMax(), b.getMin(), b.getMax() };",
          "162:     }",
          "",
          "[Removed Lines]",
          "160:         PDRange b = getARange();",
          "",
          "[Added Lines]",
          "160:         PDRange b = getBRange();",
          "",
          "---------------"
        ]
      }
    }
  ]
}