{
  "cve_id": "CVE-2024-22232",
  "cve_desc": "A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master\u2019s filesystem.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02f0daab696d2b7f1466b21e137b559e1aa36d0f",
      "candidate_info": {
        "commit_hash": "02f0daab696d2b7f1466b21e137b559e1aa36d0f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/02f0daab696d2b7f1466b21e137b559e1aa36d0f",
        "files": [
          ".github/workflows/nightly.yml",
          ".github/workflows/staging.yml",
          "tools/precommit/workflows.py"
        ],
        "message": "Programmatically discover which OS versions to build repos\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/precommit/workflows.py||tools/precommit/workflows.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/precommit/workflows.py||tools/precommit/workflows.py": [
          "File: tools/precommit/workflows.py -> tools/precommit/workflows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:             test_salt_pkg_downloads_needs_slugs.add(\"build-ci-deps\")",
          "255:     build_rpms_listing = []",
          "263:             for arch in (\"x86_64\", \"arm64\", \"aarch64\"):",
          "264:                 build_rpms_listing.append((distro, release, arch))",
          "266:     build_debs_listing = []",
          "275:     env = Environment(",
          "276:         block_start_string=\"<%\",",
          "",
          "[Removed Lines]",
          "256:     for distro, releases in (",
          "257:         (\"amazon\", (\"2\", \"2023\")),",
          "258:         (\"redhat\", (\"7\", \"8\", \"9\")),",
          "259:         (\"fedora\", (\"36\", \"37\", \"38\")),",
          "260:         (\"photon\", (\"3\", \"4\", \"5\")),",
          "261:     ):",
          "262:         for release in releases:",
          "267:     for distro, releases in (",
          "268:         (\"debian\", (\"10\", \"11\", \"12\")),",
          "269:         (\"ubuntu\", (\"20.04\", \"22.04\")),",
          "270:     ):",
          "271:         for release in releases:",
          "272:             for arch in (\"x86_64\", \"arm64\"):",
          "273:                 build_debs_listing.append((distro, release, arch))",
          "",
          "[Added Lines]",
          "256:     rpm_os_versions: dict[str, list[str]] = {",
          "257:         \"amazon\": [],",
          "258:         \"fedora\": [],",
          "259:         \"photon\": [],",
          "260:         \"redhat\": [],",
          "261:     }",
          "262:     for slug in sorted(AMIS):",
          "263:         if slug.endswith(\"-arm64\"):",
          "264:             continue",
          "265:         if not slug.startswith(",
          "266:             (\"amazonlinux\", \"almalinux\", \"centos\", \"fedora\", \"photonos\")",
          "267:         ):",
          "268:             continue",
          "269:         os_name, os_version = slug.split(\"-\")",
          "270:         if os_name == \"amazonlinux\":",
          "271:             rpm_os_versions[\"amazon\"].append(os_version)",
          "272:         elif os_name == \"photonos\":",
          "273:             rpm_os_versions[\"photon\"].append(os_version)",
          "274:         elif os_name == \"fedora\":",
          "275:             rpm_os_versions[\"fedora\"].append(os_version)",
          "276:         else:",
          "277:             rpm_os_versions[\"redhat\"].append(os_version)",
          "279:     for distro, releases in sorted(rpm_os_versions.items()):",
          "280:         for release in sorted(set(releases)):",
          "285:     for slug in sorted(AMIS):",
          "286:         if not slug.startswith((\"debian-\", \"ubuntu-\")):",
          "287:             continue",
          "288:         if slug.endswith(\"-arm64\"):",
          "289:             continue",
          "290:         os_name, os_version = slug.split(\"-\")",
          "291:         for arch in (\"x86_64\", \"arm64\"):",
          "292:             build_debs_listing.append((os_name, os_version, arch))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e75bc47c0007b882aa0b93f5e728de97043d739c",
      "candidate_info": {
        "commit_hash": "e75bc47c0007b882aa0b93f5e728de97043d739c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e75bc47c0007b882aa0b93f5e728de97043d739c",
        "files": [
          "tests/pytests/functional/states/file/test_accumulated.py",
          "tests/pytests/integration/states/test_file.py"
        ],
        "message": "Migrate test to functional\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/functional/states/file/test_accumulated.py||tests/pytests/functional/states/file/test_accumulated.py",
          "tests/pytests/integration/states/test_file.py||tests/pytests/integration/states/test_file.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/functional/states/file/test_accumulated.py||tests/pytests/functional/states/file/test_accumulated.py": [
          "File: tests/pytests/functional/states/file/test_accumulated.py -> tests/pytests/functional/states/file/test_accumulated.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     for item in (\"\", \"bar\", \"baz\"):",
          "126:         block_contents.remove(item)",
          "127:     assert block_contents == []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: def test_issue_60426(modules, tmp_path, state_tree):",
          "131:     target_path = tmp_path.joinpath(\"etc/foo/bar\")",
          "132:     jinja_name = \"foo_bar\"",
          "133:     jinja_contents = (",
          "134:         \"{% for item in accumulator['accumulated configstuff'] %}{{ item }}{% endfor %}\"",
          "135:     )",
          "137:     sls_name = \"issue-60426\"",
          "138:     sls_contents = f\"\"\"",
          "139:     configuration file:",
          "140:       file.managed:",
          "141:         - name: {target_path}",
          "142:         - source: salt://foo_bar.jinja",
          "143:         - template: jinja",
          "144:         - makedirs: True",
          "146:     accumulated configstuff:",
          "147:       file.accumulated:",
          "148:         - filename: {target_path}",
          "149:         - text:",
          "150:           - some",
          "151:           - good",
          "152:           - stuff",
          "153:         - watch_in:",
          "154:           - configuration file",
          "155:     \"\"\"",
          "157:     sls_tempfile = pytest.helpers.temp_file(",
          "158:         f\"{sls_name}.sls\", directory=state_tree, contents=sls_contents",
          "159:     )",
          "161:     jinja_tempfile = pytest.helpers.temp_file(",
          "162:         f\"{jinja_name}.jinja\", directory=state_tree, contents=jinja_contents",
          "163:     )",
          "165:     with sls_tempfile, jinja_tempfile:",
          "166:         ret = modules.state.apply(sls_name)",
          "167:         for state_run in ret:",
          "168:             assert state_run.result is True",
          "169:         # Check to make sure the file was created",
          "170:         assert target_path.is_file()",
          "171:         # The type of new line, ie, `\\n` vs `\\r\\n` is not important",
          "172:         assert target_path.read_text() == \"somegoodstuff\"",
          "174:     sls_contents = f\"\"\"",
          "175:     configuration file:",
          "176:       file.managed:",
          "177:         - name: {target_path}",
          "178:         - source: salt://foo_bar.jinja",
          "179:         - template: jinja",
          "180:         - makedirs: True",
          "182:     accumulated configstuff:",
          "183:       file.accumulated:",
          "184:         - filename: {target_path}",
          "185:         - text:",
          "186:           - some",
          "187:           - more",
          "188:           - good",
          "189:           - stuff",
          "190:         - watch_in:",
          "191:           - file: configuration file",
          "192:     \"\"\"",
          "194:     sls_tempfile = pytest.helpers.temp_file(",
          "195:         f\"{sls_name}.sls\", directory=state_tree, contents=sls_contents",
          "196:     )",
          "197:     jinja_tempfile = pytest.helpers.temp_file(",
          "198:         f\"{jinja_name}.jinja\", directory=state_tree, contents=jinja_contents",
          "199:     )",
          "201:     with sls_tempfile, jinja_tempfile:",
          "202:         ret = modules.state.apply(sls_name)",
          "203:         for state_run in ret:",
          "204:             assert state_run.result is True",
          "205:         # Check to make sure the file was created",
          "206:         assert target_path.is_file()",
          "207:         # The type of new line, ie, `\\n` vs `\\r\\n` is not important",
          "208:         assert target_path.read_text() == \"somemoregoodstuff\"",
          "",
          "---------------"
        ],
        "tests/pytests/integration/states/test_file.py||tests/pytests/integration/states/test_file.py": [
          "File: tests/pytests/integration/states/test_file.py -> tests/pytests/integration/states/test_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:         assert target_path.read_text().replace(\"\\r\\n\", \"\\n\") == expected_content",
          "481: @pytest.fixture",
          "482: def _check_min_patch_version(shell):",
          "483:     min_patch_ver = \"2.6\"",
          "",
          "[Removed Lines]",
          "387: def test_issue_60426(",
          "388:     salt_master,",
          "389:     salt_call_cli,",
          "390:     tmp_path,",
          "391: ):",
          "392:     target_path = tmp_path.joinpath(\"etc/foo/bar\")",
          "393:     jinja_name = \"foo_bar\"",
          "394:     jinja_contents = (",
          "395:         \"{% for item in accumulator['accumulated configstuff'] %}{{ item }}{% endfor %}\"",
          "396:     )",
          "398:     sls_name = \"issue-60426\"",
          "399:     sls_contents = \"\"\"",
          "400:     configuration file:",
          "401:       file.managed:",
          "402:         - name: {target_path}",
          "403:         - source: salt://foo_bar.jinja",
          "404:         - template: jinja",
          "405:         - makedirs: True",
          "407:     accumulated configstuff:",
          "408:       file.accumulated:",
          "409:         - filename: {target_path}",
          "410:         - text:",
          "411:           - some",
          "412:           - good",
          "413:           - stuff",
          "414:         - watch_in:",
          "415:           - configuration file",
          "416:     \"\"\".format(",
          "417:         target_path=target_path",
          "418:     )",
          "420:     sls_tempfile = salt_master.state_tree.base.temp_file(",
          "421:         \"{}.sls\".format(sls_name), sls_contents",
          "422:     )",
          "424:     jinja_tempfile = salt_master.state_tree.base.temp_file(",
          "425:         \"{}.jinja\".format(jinja_name), jinja_contents",
          "426:     )",
          "428:     with sls_tempfile, jinja_tempfile:",
          "429:         ret = salt_call_cli.run(\"state.apply\", sls_name)",
          "430:         assert ret.returncode == 0",
          "431:         assert ret.data",
          "432:         state_run = next(iter(ret.data.values()))",
          "433:         assert state_run[\"result\"] is True",
          "434:         # Check to make sure the file was created",
          "435:         assert target_path.is_file()",
          "436:         # The type of new line, ie, `\\n` vs `\\r\\n` is not important",
          "437:         assert target_path.read_text() == \"somegoodstuff\"",
          "439:     sls_name = \"issue-60426\"",
          "440:     sls_contents = \"\"\"",
          "441:     configuration file:",
          "442:       file.managed:",
          "443:         - name: {target_path}",
          "444:         - source: salt://foo_bar.jinja",
          "445:         - template: jinja",
          "446:         - makedirs: True",
          "448:     accumulated configstuff:",
          "449:       file.accumulated:",
          "450:         - filename: {target_path}",
          "451:         - text:",
          "452:           - some",
          "453:           - more",
          "454:           - good",
          "455:           - stuff",
          "456:         - watch_in:",
          "457:           - file: configuration file",
          "458:     \"\"\".format(",
          "459:         target_path=target_path",
          "460:     )",
          "462:     sls_tempfile = salt_master.state_tree.base.temp_file(",
          "463:         \"{}.sls\".format(sls_name), sls_contents",
          "464:     )",
          "465:     jinja_tempfile = salt_master.state_tree.base.temp_file(",
          "466:         \"{}.jinja\".format(jinja_name), jinja_contents",
          "467:     )",
          "469:     with sls_tempfile, jinja_tempfile:",
          "470:         ret = salt_call_cli.run(\"state.apply\", sls_name)",
          "471:         assert ret.returncode == 0",
          "472:         assert ret.data",
          "473:         state_run = next(iter(ret.data.values()))",
          "474:         assert state_run[\"result\"] is True",
          "475:         # Check to make sure the file was created",
          "476:         assert target_path.is_file()",
          "477:         # The type of new line, ie, `\\n` vs `\\r\\n` is not important",
          "478:         assert target_path.read_text() == \"somemoregoodstuff\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aae627286d0e395463c317e56e6691764bf06ca4",
      "candidate_info": {
        "commit_hash": "aae627286d0e395463c317e56e6691764bf06ca4",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/aae627286d0e395463c317e56e6691764bf06ca4",
        "files": [
          "noxfile.py"
        ],
        "message": "Don't rerun the packages tests on failures by default\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "noxfile.py||noxfile.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "noxfile.py||noxfile.py": [
          "File: noxfile.py -> noxfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:     try:",
          "1906:         _pytest(session, coverage=False, cmd_args=pytest_args, env=env)",
          "1907:     except CommandFailed:",
          "1909:         # Don't print the system information, not the test selection on reruns",
          "1910:         global PRINT_TEST_SELECTION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1908:         if os.environ.get(\"RERUN_FAILURES\", \"0\") == \"0\":",
          "1909:             # Don't rerun on failures",
          "1910:             return",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "689696858bddaefc655d1d94cd81e218662bef12",
      "candidate_info": {
        "commit_hash": "689696858bddaefc655d1d94cd81e218662bef12",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/689696858bddaefc655d1d94cd81e218662bef12",
        "files": [
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/files/check_imports.sls",
          "tests/pytests/pkg/files/check_python.py",
          "tests/pytests/pkg/integration/test_check_imports.py",
          "tests/pytests/pkg/integration/test_pip.py",
          "tests/pytests/pkg/integration/test_python.py",
          "tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_user.py",
          "tests/pytests/pkg/support/__init__.py",
          "tests/pytests/pkg/support/coverage/sitecustomize.py",
          "tests/pytests/pkg/support/helpers.py",
          "tests/pytests/pkg/support/paths.py",
          "tests/pytests/pkg/support/runtests.py",
          "tests/pytests/pkg/support/sminion.py",
          "tests/support/pkg.py"
        ],
        "message": "Reduce duplication, de-clutter, simplify\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/files/check_imports.sls||tests/pytests/pkg/files/check_imports.sls",
          "tests/pytests/pkg/files/check_python.py||tests/pytests/pkg/files/check_python.py",
          "tests/pytests/pkg/integration/test_check_imports.py||tests/pytests/pkg/integration/test_check_imports.py",
          "tests/pytests/pkg/integration/test_pip.py||tests/pytests/pkg/integration/test_pip.py",
          "tests/pytests/pkg/integration/test_python.py||tests/pytests/pkg/integration/test_python.py",
          "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py",
          "tests/pytests/pkg/support/coverage/sitecustomize.py||tests/pytests/pkg/support/coverage/sitecustomize.py",
          "tests/pytests/pkg/support/paths.py||tests/pytests/pkg/support/paths.py",
          "tests/pytests/pkg/support/runtests.py||tests/pytests/pkg/support/runtests.py",
          "tests/pytests/pkg/support/sminion.py||tests/pytests/pkg/support/sminion.py",
          "tests/pytests/pkg/support/helpers.py||tests/support/pkg.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: tests/pytests/pkg/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from saltfactories.utils.tempfiles import SaltPillarTree, SaltStateTree",
          "14: import salt.config",
          "25: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "15: from tests.pytests.pkg.support.helpers import (",
          "16:     CODE_DIR,",
          "17:     TESTS_DIR,",
          "18:     ApiRequest,",
          "19:     SaltMaster,",
          "20:     SaltMasterWindows,",
          "21:     SaltPkgInstall,",
          "22:     TestUser,",
          "23: )",
          "",
          "[Added Lines]",
          "15: from tests.conftest import CODE_DIR, TESTS_DIR",
          "16: from tests.support.pkg import ApiRequest, SaltMaster, SaltMasterWindows, SaltPkgInstall",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305: @pytest.fixture(scope=\"session\")",
          "307:     \"\"\"",
          "308:     Start up a master",
          "309:     \"\"\"",
          "",
          "[Removed Lines]",
          "306: def salt_master(salt_factories, install_salt, state_tree, pillar_tree):",
          "",
          "[Added Lines]",
          "299: def salt_master(",
          "300:     salt_factories, install_salt, state_tree, pillar_tree, pkg_tests_account",
          "301: ):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:         \"pillar_roots\": pillar_tree.as_dict(),",
          "328:         \"rest_cherrypy\": {\"port\": 8000, \"disable_ssl\": True},",
          "329:         \"netapi_enable_clients\": [\"local\"],",
          "331:         \"fips_mode\": FIPS_TESTRUN,",
          "332:         \"open_mode\": True,",
          "333:     }",
          "",
          "[Removed Lines]",
          "330:         \"external_auth\": {\"auto\": {\"saltdev\": [\".*\"]}},",
          "",
          "[Added Lines]",
          "325:         \"external_auth\": {",
          "326:             \"auto\": {",
          "327:                 pkg_tests_account.username: [",
          "328:                     \".*\",",
          "329:                 ],",
          "330:             },",
          "331:         },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "520:     return salt_minion.salt_call_cli()",
          "526:         yield account",
          "",
          "[Removed Lines]",
          "523: @pytest.fixture(scope=\"module\")",
          "524: def test_account(salt_call_cli):",
          "525:     with TestUser(salt_call_cli=salt_call_cli) as account:",
          "",
          "[Added Lines]",
          "524: @pytest.fixture(scope=\"session\")",
          "525: def pkg_tests_account():",
          "526:     with pytest.helpers.create_account() as account:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559: @pytest.fixture(scope=\"module\")",
          "562:         yield session",
          "",
          "[Removed Lines]",
          "560: def api_request(test_account, salt_api):",
          "561:     with ApiRequest(salt_api=salt_api, test_account=test_account) as session:",
          "",
          "[Added Lines]",
          "561: def api_request(pkg_tests_account, salt_api):",
          "562:     with ApiRequest(",
          "563:         port=salt_api.config[\"rest_cherrypy\"][\"port\"], account=pkg_tests_account",
          "564:     ) as session:",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/files/check_imports.sls||tests/pytests/pkg/files/check_imports.sls": [
          "File: tests/pytests/pkg/files/check_imports.sls -> tests/pytests/pkg/files/check_imports.sls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/files/check_python.py||tests/pytests/pkg/files/check_python.py": [
          "File: tests/pytests/pkg/files/check_python.py -> tests/pytests/pkg/files/check_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_check_imports.py||tests/pytests/pkg/integration/test_check_imports.py": [
          "File: tests/pytests/pkg/integration/test_check_imports.py -> tests/pytests/pkg/integration/test_check_imports.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: log = logging.getLogger(__name__)",
          "14:     \"\"\"",
          "15:     Test imports",
          "16:     \"\"\"",
          "18:     assert ret.returncode == 0",
          "19:     assert ret.data",
          "20:     result = MultiStateResult(raw=ret.data)",
          "",
          "[Removed Lines]",
          "13: def test_check_imports(salt_cli, salt_minion):",
          "17:     ret = salt_cli.run(\"state.sls\", \"check_imports\", minion_tgt=salt_minion.id)",
          "",
          "[Added Lines]",
          "13: CHECK_IMPORTS_SLS_CONTENTS = \"\"\"",
          "14: #!py",
          "15: import importlib",
          "17: def run():",
          "18:     config = {}",
          "19:     for test_import in [",
          "20:         'templates', 'platform', 'cli', 'executors', 'config', 'wheel', 'netapi',",
          "21:         'cache', 'proxy', 'transport', 'metaproxy', 'modules', 'tokens', 'matchers',",
          "22:         'acl', 'auth', 'log', 'engines', 'client', 'returners', 'runners', 'tops',",
          "23:         'output', 'daemons', 'thorium', 'renderers', 'states', 'cloud', 'roster',",
          "24:         'beacons', 'pillar', 'spm', 'utils', 'sdb', 'fileserver', 'defaults',",
          "25:         'ext', 'queues', 'grains', 'serializers'",
          "26:     ]:",
          "27:         try:",
          "28:             import_name = \"salt.{}\".format(test_import)",
          "29:             importlib.import_module(import_name)",
          "30:             config['test_imports_succeeded'] = {",
          "31:                 'test.succeed_without_changes': [",
          "32:                     {",
          "33:                         'name': import_name",
          "34:                     },",
          "35:                 ],",
          "36:             }",
          "37:         except ModuleNotFoundError as err:",
          "38:             config['test_imports_failed'] = {",
          "39:                 'test.fail_without_changes': [",
          "40:                     {",
          "41:                         'name': import_name,",
          "42:                         'comment': \"The imports test failed. The error was: {}\".format(err)",
          "43:                     },",
          "44:                 ],",
          "45:             }",
          "47:     for stdlib_import in [\"telnetlib\"]:",
          "48:         try:",
          "49:             importlib.import_module(stdlib_import)",
          "50:             config['stdlib_imports_succeeded'] = {",
          "51:                 'test.succeed_without_changes': [",
          "52:                     {",
          "53:                         'name': stdlib_import",
          "54:                     },",
          "55:                 ],",
          "56:             }",
          "57:         except ModuleNotFoundError as err:",
          "58:             config['stdlib_imports_failed'] = {",
          "59:                 'test.fail_without_changes': [",
          "60:                     {",
          "61:                         'name': stdlib_import,",
          "62:                         'comment': \"The stdlib imports test failed. The error was: {}\".format(err)",
          "63:                     },",
          "64:                 ],",
          "65:             }",
          "66:     return config",
          "67: \"\"\"",
          "70: @pytest.fixture",
          "71: def state_name(salt_master):",
          "72:     name = \"check-imports\"",
          "73:     with salt_master.state_tree.base.temp_file(",
          "74:         f\"{name}.sls\", CHECK_IMPORTS_SLS_CONTENTS",
          "75:     ):",
          "76:         yield name",
          "79: def test_check_imports(salt_cli, salt_minion, state_name):",
          "83:     ret = salt_cli.run(\"state.sls\", state_name, minion_tgt=salt_minion.id)",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_pip.py||tests/pytests/pkg/integration/test_pip.py": [
          "File: tests/pytests/pkg/integration/test_pip.py -> tests/pytests/pkg/integration/test_pip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             shutil.rmtree(dirname, ignore_errors=True)",
          "45: def test_pip_install(salt_call_cli, install_salt, shell):",
          "46:     \"\"\"",
          "47:     Test pip.install and ensure module can use installed library",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: @pytest.fixture",
          "46: def pkg_tests_account_environ(pkg_tests_account):",
          "47:     environ = os.environ.copy()",
          "48:     environ[\"LOGNAME\"] = environ[\"USER\"] = pkg_tests_account.username",
          "49:     environ[\"HOME\"] = pkg_tests_account.info.home",
          "50:     return environ",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     assert ret.returncode == 0",
          "102:     def result():",
          "103:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
          "104:         os.setgroups([])",
          "108:     return result",
          "111: @pytest.mark.skip_on_windows(reason=\"We can't easily demote users on Windows\")",
          "113:     if install_salt.classic:",
          "114:         pytest.skip(\"We can install non-root for classic packages\")",
          "115:     check_path = extras_pypath_bin / \"pep8\"",
          "",
          "[Removed Lines]",
          "101: def demote(user_uid, user_gid):",
          "105:         os.setgid(user_gid)",
          "106:         os.setuid(user_uid)",
          "112: def test_pip_non_root(shell, install_salt, test_account, extras_pypath_bin, pypath):",
          "",
          "[Added Lines]",
          "109: def demote(account):",
          "113:         os.setgid(account.info.gid)",
          "114:         os.setuid(account.info.uid)",
          "120: def test_pip_non_root(",
          "121:     shell,",
          "122:     install_salt,",
          "123:     pkg_tests_account,",
          "124:     extras_pypath_bin,",
          "125:     pypath,",
          "126:     pkg_tests_account_environ,",
          "127: ):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     # We should be able to issue a --help without being root",
          "119:     ret = subprocess.run(",
          "120:         install_salt.binary_paths[\"salt\"] + [\"--help\"],",
          "123:         stdout=subprocess.PIPE,",
          "124:         stderr=subprocess.PIPE,",
          "125:         check=False,",
          "",
          "[Removed Lines]",
          "121:         preexec_fn=demote(test_account.uid, test_account.gid),",
          "122:         env=test_account.env,",
          "",
          "[Added Lines]",
          "136:         preexec_fn=demote(pkg_tests_account),",
          "137:         env=pkg_tests_account_environ,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:     # Now, we should still not be able to install as non-root",
          "142:     ret = subprocess.run(",
          "143:         install_salt.binary_paths[\"pip\"] + [\"install\", \"pep8\"],",
          "146:         stdout=subprocess.PIPE,",
          "147:         stderr=subprocess.PIPE,",
          "148:         check=False,",
          "",
          "[Removed Lines]",
          "144:         preexec_fn=demote(test_account.uid, test_account.gid),",
          "145:         env=test_account.env,",
          "",
          "[Added Lines]",
          "159:         preexec_fn=demote(pkg_tests_account),",
          "160:         env=pkg_tests_account_environ,",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_python.py||tests/pytests/pkg/integration/test_python.py": [
          "File: tests/pytests/pkg/integration/test_python.py -> tests/pytests/pkg/integration/test_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import subprocess",
          "3: import pytest",
          "8: @pytest.fixture",
          "9: def python_script_bin(install_salt):",
          "",
          "[Removed Lines]",
          "5: from tests.pytests.pkg.support.helpers import TESTS_DIR",
          "",
          "[Added Lines]",
          "2: import textwrap",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     return install_salt.binary_paths[\"python\"]",
          "16: @pytest.mark.parametrize(\"exp_ret,user_arg\", [(1, \"false\"), (0, \"true\")])",
          "18:     ret = install_salt.proc.run(",
          "20:             python_script_bin",
          "21:             + [",
          "23:                 user_arg,",
          "24:             ]",
          "25:         ),",
          "",
          "[Removed Lines]",
          "17: def test_python_script(install_salt, exp_ret, user_arg, python_script_bin):",
          "22:                 str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\" / \"check_python.py\"),",
          "",
          "[Added Lines]",
          "15: @pytest.fixture",
          "16: def check_python_file(tmp_path):",
          "17:     script_path = tmp_path / \"check_python.py\"",
          "18:     script_path.write_text(",
          "19:         textwrap.dedent(",
          "20:             \"\"\"",
          "21:         import sys",
          "23:         import salt.utils.data",
          "25:         user_arg = sys.argv",
          "27:         if user_arg[1] == \"raise\":",
          "28:             raise Exception(\"test\")",
          "30:         if salt.utils.data.is_true(user_arg[1]):",
          "31:             sys.exit(0)",
          "32:         else:",
          "33:             sys.exit(1)",
          "34:         \"\"\"",
          "35:         )",
          "36:     )",
          "37:     return script_path",
          "41: def test_python_script(",
          "42:     install_salt, exp_ret, user_arg, python_script_bin, check_python_file",
          "43: ):",
          "48:                 str(check_python_file),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:     assert ret.returncode == exp_ret, ret.stderr",
          "36:     ret = install_salt.proc.run(",
          "38:             python_script_bin",
          "39:             + [",
          "41:                 \"raise\",",
          "42:             ]",
          "43:         ),",
          "",
          "[Removed Lines]",
          "35: def test_python_script_exception(install_salt, python_script_bin):",
          "40:                 str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\" / \"check_python.py\"),",
          "",
          "[Added Lines]",
          "61: def test_python_script_exception(install_salt, python_script_bin, check_python_file):",
          "66:                 str(check_python_file),",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py": [
          "File: tests/pytests/pkg/integration/test_salt_call.py -> tests/pytests/pkg/integration/test_salt_call.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: @pytest.mark.skip_on_windows()",
          "53:     \"\"\"",
          "54:     Test salt-call --local cmd_run id with runas",
          "55:     \"\"\"",
          "57:     assert \"Environment could not be retrieved for user\" not in caplog.text",
          "",
          "[Removed Lines]",
          "52: def test_salt_call_cmd_run_id_runas(salt_call_cli, test_account, caplog):",
          "56:     ret = salt_call_cli.run(\"--local\", \"cmd.run\", \"id\", runas=test_account.username)",
          "58:     assert str(test_account.uid) in ret.stdout",
          "59:     assert str(test_account.gid) in ret.stdout",
          "",
          "[Added Lines]",
          "52: def test_salt_call_cmd_run_id_runas(salt_call_cli, pkg_tests_account, caplog):",
          "56:     ret = salt_call_cli.run(",
          "57:         \"--local\", \"cmd.run\", \"id\", runas=pkg_tests_account.username",
          "58:     )",
          "60:     assert str(pkg_tests_account.info.uid) in ret.stdout",
          "61:     assert str(pkg_tests_account.info.gid) in ret.stdout",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_user.py||tests/pytests/pkg/integration/test_salt_user.py": [
          "File: tests/pytests/pkg/integration/test_salt_user.py -> tests/pytests/pkg/integration/test_salt_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: @pytest.mark.skip_if_binaries_missing(\"logrotate\")",
          "177: def test_paths_log_rotation(",
          "179: ):",
          "180:     \"\"\"",
          "181:     Test the correct ownership is assigned when log rotation occurs",
          "",
          "[Removed Lines]",
          "178:     salt_master, salt_minion, salt_call_cli, install_salt, test_account",
          "",
          "[Added Lines]",
          "178:     salt_master, salt_minion, salt_call_cli, install_salt, pkg_tests_account",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:                                 \"file.replace\",",
          "268:                                 f\"{install_salt.conf_dir}/master\",",
          "269:                                 \"user: salt\",",
          "271:                                 \"flags=['IGNORECASE']\",",
          "272:                                 \"append_if_not_found=True\",",
          "273:                             )",
          "",
          "[Removed Lines]",
          "270:                                 f\"user: {test_account.username}\",",
          "",
          "[Added Lines]",
          "270:                                 f\"user: {pkg_tests_account.username}\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "276:                             # change ownership of appropriate paths to user",
          "277:                             for _path in log_pkg_paths:",
          "278:                                 chg_ownership_cmd = (",
          "280:                                 )",
          "281:                                 ret = salt_call_cli.run(",
          "282:                                     \"--local\", \"cmd.run\", chg_ownership_cmd",
          "",
          "[Removed Lines]",
          "279:                                     f\"chown -R {test_account.username} {_path}\"",
          "",
          "[Added Lines]",
          "279:                                     f\"chown -R {pkg_tests_account.username} {_path}\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:                                 for _path in log_files_list:",
          "318:                                     log_path = pathlib.Path(_path)",
          "319:                                     assert log_path.exists()",
          "321:                                     assert log_path.stat().st_mode & 0o7777 == 0o640",
          "323:                             # cleanup",
          "",
          "[Removed Lines]",
          "320:                                     assert log_path.owner() == test_account.username",
          "",
          "[Added Lines]",
          "320:                                     assert (",
          "321:                                         log_path.owner() == pkg_tests_account.username",
          "322:                                     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:                                 \"--local\",",
          "329:                                 \"file.replace\",",
          "330:                                 f\"{install_salt.conf_dir}/master\",",
          "332:                                 \"user: salt\",",
          "333:                                 \"flags=['IGNORECASE']\",",
          "334:                                 \"append_if_not_found=True\",",
          "",
          "[Removed Lines]",
          "331:                                 f\"user: {test_account.username}\",",
          "",
          "[Added Lines]",
          "333:                                 f\"user: {pkg_tests_account.username}\",",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/coverage/sitecustomize.py||tests/pytests/pkg/support/coverage/sitecustomize.py": [
          "File: tests/pytests/pkg/support/coverage/sitecustomize.py -> tests/pytests/pkg/support/coverage/sitecustomize.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/paths.py||tests/pytests/pkg/support/paths.py": [
          "File: tests/pytests/pkg/support/paths.py -> tests/pytests/pkg/support/paths.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/runtests.py||tests/pytests/pkg/support/runtests.py": [
          "File: tests/pytests/pkg/support/runtests.py -> tests/pytests/pkg/support/runtests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/sminion.py||tests/pytests/pkg/support/sminion.py": [
          "File: tests/pytests/pkg/support/sminion.py -> tests/pytests/pkg/support/sminion.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/helpers.py||tests/support/pkg.py": [
          "File: tests/pytests/pkg/support/helpers.py -> tests/support/pkg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from saltfactories.utils import cli_scripts",
          "32: import salt.utils.files",
          "49: ARTIFACTS_DIR = CODE_DIR / \"artifacts\" / \"pkg\"",
          "51: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "34: try:",
          "35:     import crypt",
          "37:     HAS_CRYPT = True",
          "38: except ImportError:",
          "39:     HAS_CRYPT = False",
          "40: try:",
          "41:     import pwd",
          "43:     HAS_PWD = True",
          "44: except ImportError:",
          "45:     HAS_PWD = False",
          "47: TESTS_DIR = pathlib.Path(__file__).resolve().parent.parent.parent.parent",
          "48: CODE_DIR = TESTS_DIR.parent",
          "",
          "[Added Lines]",
          "33: from tests.conftest import CODE_DIR",
          "34: from tests.support.pytest.helpers import TestAccount",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1451:         key.SaltKey.__attrs_post_init__(self)",
          "1526: @attr.s(kw_only=True, slots=True)",
          "1527: class ApiRequest:",
          "1530:     session: requests.Session = attr.ib(init=False, repr=False)",
          "1531:     api_uri: str = attr.ib(init=False)",
          "1532:     auth_data: Dict[str, str] = attr.ib(init=False)",
          "",
          "[Removed Lines]",
          "1454: @attr.s(kw_only=True, slots=True)",
          "1455: class TestUser:",
          "1456:     \"\"\"",
          "1457:     Add a test user",
          "1458:     \"\"\"",
          "1460:     salt_call_cli = attr.ib()",
          "1462:     username = attr.ib(default=\"saltdev\")",
          "1463:     # Must follow Windows Password Complexity requirements",
          "1464:     password = attr.ib(default=\"P@ssW0rd\")",
          "1465:     _pw_record = attr.ib(init=False, repr=False, default=None)",
          "1467:     def salt_call_local(self, *args):",
          "1468:         ret = self.salt_call_cli.run(\"--local\", *args)",
          "1469:         if ret.returncode != 0:",
          "1470:             log.error(ret)",
          "1471:         assert ret.returncode == 0",
          "1472:         return ret.data",
          "1474:     def add_user(self):",
          "1475:         log.debug(\"Adding system account %r\", self.username)",
          "1476:         if platform.is_windows():",
          "1477:             self.salt_call_local(\"user.add\", self.username, self.password)",
          "1478:         else:",
          "1479:             self.salt_call_local(\"user.add\", self.username)",
          "1480:             hash_passwd = crypt.crypt(self.password, crypt.mksalt(crypt.METHOD_SHA512))",
          "1481:             self.salt_call_local(\"shadow.set_password\", self.username, hash_passwd)",
          "1482:         assert self.username in self.salt_call_local(\"user.list_users\")",
          "1484:     def remove_user(self):",
          "1485:         log.debug(\"Removing system account %r\", self.username)",
          "1486:         if platform.is_windows():",
          "1487:             self.salt_call_local(",
          "1488:                 \"user.delete\", self.username, \"purge=True\", \"force=True\"",
          "1489:             )",
          "1490:         else:",
          "1491:             self.salt_call_local(\"user.delete\", self.username, \"remove=True\")",
          "1493:     @property",
          "1494:     def pw_record(self):",
          "1495:         if self._pw_record is None and HAS_PWD:",
          "1496:             self._pw_record = pwd.getpwnam(self.username)",
          "1497:         return self._pw_record",
          "1499:     @property",
          "1500:     def uid(self):",
          "1501:         if HAS_PWD:",
          "1502:             return self.pw_record.pw_uid",
          "1503:         return None",
          "1505:     @property",
          "1506:     def gid(self):",
          "1507:         if HAS_PWD:",
          "1508:             return self.pw_record.pw_gid",
          "1509:         return None",
          "1511:     @property",
          "1512:     def env(self):",
          "1513:         environ = os.environ.copy()",
          "1514:         environ[\"LOGNAME\"] = environ[\"USER\"] = self.username",
          "1515:         environ[\"HOME\"] = self.pw_record.pw_dir",
          "1516:         return environ",
          "1518:     def __enter__(self):",
          "1519:         self.add_user()",
          "1520:         return self",
          "1522:     def __exit__(self, *_):",
          "1523:         self.remove_user()",
          "1528:     salt_api: SaltApi = attr.ib(repr=False)",
          "1529:     test_account: TestUser = attr.ib(repr=False)",
          "",
          "[Added Lines]",
          "1443:     port: int = attr.ib(repr=False)",
          "1444:     account: TestAccount = attr.ib(repr=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1538:     @api_uri.default",
          "1539:     def _default_api_uri(self):",
          "1542:     @auth_data.default",
          "1543:     def _default_auth_data(self):",
          "1544:         return {",
          "1547:             \"eauth\": \"auto\",",
          "1548:             \"out\": \"json\",",
          "1549:         }",
          "",
          "[Removed Lines]",
          "1540:         return f\"http://localhost:{self.salt_api.config['rest_cherrypy']['port']}\"",
          "1545:             \"username\": self.test_account.username,",
          "1546:             \"password\": self.test_account.password,",
          "",
          "[Added Lines]",
          "1455:         return f\"http://localhost:{self.port}\"",
          "1460:             \"username\": self.account.username,",
          "1461:             \"password\": self.account.password,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfe7e1fecb3ada1e4ff7d74b0d0071b7d18d9f69",
      "candidate_info": {
        "commit_hash": "cfe7e1fecb3ada1e4ff7d74b0d0071b7d18d9f69",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/cfe7e1fecb3ada1e4ff7d74b0d0071b7d18d9f69",
        "files": [
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_pillar.py",
          "tests/pytests/pkg/integration/test_salt_state_file.py"
        ],
        "message": "Define and laydown the state and pillar files only when required for tests\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py",
          "tests/pytests/pkg/integration/test_salt_pillar.py||tests/pytests/pkg/integration/test_salt_pillar.py",
          "tests/pytests/pkg/integration/test_salt_state_file.py||tests/pytests/pkg/integration/test_salt_state_file.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: tests/pytests/pkg/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import yaml",
          "10: from pytestskipmarkers.utils import platform",
          "11: from saltfactories.utils import random_string",
          "14: import salt.config",
          "16: from tests.support.pkg import ApiRequest, SaltMaster, SaltMasterWindows, SaltPkgInstall",
          "18: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "12: from saltfactories.utils.tempfiles import SaltPillarTree, SaltStateTree",
          "15: from tests.conftest import CODE_DIR, TESTS_DIR",
          "",
          "[Added Lines]",
          "14: from tests.conftest import CODE_DIR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183: @pytest.fixture(scope=\"session\")",
          "229:     \"\"\"",
          "231:     \"\"\"",
          "232:     if platform.is_windows():",
          "234:     elif platform.is_darwin():",
          "236:     else:",
          "305:     start_timeout = None",
          "306:     # Since the daemons are \"packaged\" with tiamat, the salt plugins provided",
          "307:     # by salt-factories won't be discovered. Provide the required `*_dirs` on",
          "",
          "[Removed Lines]",
          "184: def state_tree():",
          "185:     if platform.is_windows():",
          "186:         file_root = pathlib.Path(\"C:/salt/srv/salt\")",
          "187:     elif platform.is_darwin():",
          "188:         file_root = pathlib.Path(\"/opt/srv/salt\")",
          "189:     else:",
          "190:         file_root = pathlib.Path(\"/srv/salt\")",
          "191:     envs = {",
          "192:         \"base\": [",
          "193:             str(file_root),",
          "194:             str(TESTS_DIR / \"pytests\" / \"pkg\" / \"files\"),",
          "195:         ],",
          "196:     }",
          "197:     tree = SaltStateTree(envs=envs)",
          "198:     test_sls_contents = \"\"\"",
          "199:     test_foo:",
          "200:       test.succeed_with_changes:",
          "201:           - name: foo",
          "202:     \"\"\"",
          "203:     states_sls_contents = \"\"\"",
          "204:     update:",
          "205:       pkg.installed:",
          "206:         - name: bash",
          "207:     salt_dude:",
          "208:       user.present:",
          "209:         - name: dude",
          "210:         - fullname: Salt Dude",
          "211:     \"\"\"",
          "212:     win_states_sls_contents = \"\"\"",
          "213:     create_empty_file:",
          "214:       file.managed:",
          "215:         - name: C://salt/test/txt",
          "216:     salt_dude:",
          "217:       user.present:",
          "218:         - name: dude",
          "219:         - fullname: Salt Dude",
          "220:     \"\"\"",
          "221:     with tree.base.temp_file(\"test.sls\", test_sls_contents), tree.base.temp_file(",
          "222:         \"states.sls\", states_sls_contents",
          "223:     ), tree.base.temp_file(\"win_states.sls\", win_states_sls_contents):",
          "224:         yield tree",
          "227: @pytest.fixture(scope=\"session\")",
          "228: def pillar_tree():",
          "230:     Add pillar files",
          "233:         pillar_root = pathlib.Path(\"C:/salt/srv/pillar\")",
          "235:         pillar_root = pathlib.Path(\"/opt/srv/pillar\")",
          "237:         pillar_root = pathlib.Path(\"/srv/pillar\")",
          "238:     pillar_root.mkdir(mode=0o777, parents=True, exist_ok=True)",
          "239:     tree = SaltPillarTree(",
          "240:         envs={",
          "241:             \"base\": [",
          "242:                 str(pillar_root),",
          "243:             ]",
          "244:         },",
          "245:     )",
          "246:     top_file_contents = \"\"\"",
          "247:     base:",
          "248:       '*':",
          "249:         - test",
          "250:     \"\"\"",
          "251:     test_file_contents = \"\"\"",
          "252:     info: test",
          "253:     \"\"\"",
          "254:     with tree.base.temp_file(\"top.sls\", top_file_contents), tree.base.temp_file(",
          "255:         \"test.sls\", test_file_contents",
          "256:     ):",
          "257:         yield tree",
          "260: @pytest.fixture(scope=\"module\")",
          "261: def sls(state_tree):",
          "262:     \"\"\"",
          "263:     Add an sls file",
          "264:     \"\"\"",
          "265:     test_sls_contents = \"\"\"",
          "266:     test_foo:",
          "267:       test.succeed_with_changes:",
          "268:           - name: foo",
          "269:     \"\"\"",
          "270:     states_sls_contents = \"\"\"",
          "271:     update:",
          "272:       pkg.installed:",
          "273:         - name: bash",
          "274:     salt_dude:",
          "275:       user.present:",
          "276:         - name: dude",
          "277:         - fullname: Salt Dude",
          "278:     \"\"\"",
          "279:     win_states_sls_contents = \"\"\"",
          "280:     create_empty_file:",
          "281:       file.managed:",
          "282:         - name: C://salt/test/txt",
          "283:     salt_dude:",
          "284:       user.present:",
          "285:         - name: dude",
          "286:         - fullname: Salt Dude",
          "287:     \"\"\"",
          "288:     with state_tree.base.temp_file(",
          "289:         \"tests.sls\", test_sls_contents",
          "290:     ), state_tree.base.temp_file(",
          "291:         \"states.sls\", states_sls_contents",
          "292:     ), state_tree.base.temp_file(",
          "293:         \"win_states.sls\", win_states_sls_contents",
          "294:     ):",
          "295:         yield",
          "298: @pytest.fixture(scope=\"session\")",
          "299: def salt_master(",
          "300:     salt_factories, install_salt, state_tree, pillar_tree, pkg_tests_account",
          "301: ):",
          "302:     \"\"\"",
          "303:     Start up a master",
          "304:     \"\"\"",
          "",
          "[Added Lines]",
          "183: def salt_master(salt_factories, install_salt, pkg_tests_account):",
          "185:     Start up a master",
          "188:         state_tree = \"C:/salt/srv/salt\"",
          "189:         pillar_tree = \"C:/salt/srv/pillar\"",
          "191:         state_tree = \"/opt/srv/salt\"",
          "192:         pillar_tree = \"/opt/srv/pillar\"",
          "194:         state_tree = \"/srv/salt\"",
          "195:         pillar_tree = \"/srv/pillar\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:         config_defaults[\"enable_fqdns_grains\"] = False",
          "319:     config_overrides = {",
          "320:         \"timeout\": 30,",
          "324:         \"netapi_enable_clients\": [\"local\"],",
          "325:         \"external_auth\": {",
          "326:             \"auto\": {",
          "",
          "[Removed Lines]",
          "321:         \"file_roots\": state_tree.as_dict(),",
          "322:         \"pillar_roots\": pillar_tree.as_dict(),",
          "323:         \"rest_cherrypy\": {\"port\": 8000, \"disable_ssl\": True},",
          "",
          "[Added Lines]",
          "213:         \"file_roots\": {",
          "214:             \"base\": [",
          "215:                 state_tree,",
          "216:             ]",
          "217:         },",
          "218:         \"pillar_roots\": {",
          "219:             \"base\": [",
          "220:                 pillar_tree,",
          "221:             ]",
          "222:         },",
          "223:         \"rest_cherrypy\": {",
          "224:             \"port\": 8000,",
          "225:             \"disable_ssl\": True,",
          "226:         },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "432:             ],",
          "433:             check=True,",
          "434:         )",
          "435:         # The engines_dirs is created in .nox path. We need to set correct perms",
          "436:         # for the user running the Salt Master",
          "445:     with factory.started(start_timeout=start_timeout):",
          "446:         yield factory",
          "",
          "[Removed Lines]",
          "437:         subprocess.run(",
          "438:             [\"chown\", \"-R\", \"salt:salt\", str(CODE_DIR.parent / \".nox\")], check=False",
          "439:         )",
          "440:         file_roots = pathlib.Path(\"/srv/\", \"salt\")",
          "441:         pillar_roots = pathlib.Path(\"/srv/\", \"pillar\")",
          "442:         for _dir in [file_roots, pillar_roots]:",
          "443:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=False)",
          "",
          "[Added Lines]",
          "341:         check_paths = [state_tree, pillar_tree, CODE_DIR / \".nox\"]",
          "342:         for path in check_paths:",
          "343:             if os.path.exists(path) is False:",
          "344:                 continue",
          "345:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(path)], check=False)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     # which sets root perms on /srv/salt and /srv/pillar since we are running",
          "495:     # the test suite as root, but we want to run Salt master as salt",
          "496:     if not platform.is_windows() and not platform.is_darwin():",
          "502:     factory.after_terminate(",
          "503:         pytest.helpers.remove_stale_minion_key, salt_master, factory.id",
          "",
          "[Removed Lines]",
          "497:         file_roots = pathlib.Path(\"/srv/\", \"salt\")",
          "498:         pillar_roots = pathlib.Path(\"/srv/\", \"pillar\")",
          "499:         for _dir in [file_roots, pillar_roots]:",
          "500:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=True)",
          "",
          "[Added Lines]",
          "399:         state_tree = \"/srv/salt\"",
          "400:         pillar_tree = \"/srv/pillar\"",
          "401:         check_paths = [state_tree, pillar_tree, CODE_DIR / \".nox\"]",
          "402:         for path in check_paths:",
          "403:             if os.path.exists(path) is False:",
          "404:                 continue",
          "405:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(path)], check=False)",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_call.py||tests/pytests/pkg/integration/test_salt_call.py": [
          "File: tests/pytests/pkg/integration/test_salt_call.py -> tests/pytests/pkg/integration/test_salt_call.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     Test salt-call --local test.ping",
          "7:     \"\"\"",
          "8:     ret = salt_call_cli.run(\"--local\", \"test.ping\")",
          "10:     assert ret.returncode == 0",
          "13: def test_salt_call(salt_call_cli):",
          "",
          "[Removed Lines]",
          "9:     assert ret.data is True",
          "",
          "[Added Lines]",
          "10:     assert ret.data is True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     Test salt-call test.ping",
          "16:     \"\"\"",
          "17:     ret = salt_call_cli.run(\"test.ping\")",
          "19:     assert ret.returncode == 0",
          "23:     \"\"\"",
          "24:     Test calling a sls file",
          "25:     \"\"\"",
          "28:     sls_ret = ret.data[next(iter(ret.data))]",
          "29:     assert sls_ret[\"changes\"][\"testing\"][\"new\"] == \"Something pretended to change\"",
          "33: def test_salt_call_local_sys_doc_none(salt_call_cli):",
          "",
          "[Removed Lines]",
          "18:     assert ret.data is True",
          "22: def test_sls(salt_call_cli):",
          "26:     ret = salt_call_cli.run(\"state.apply\", \"test\")",
          "27:     assert ret.data, ret",
          "30:     assert ret.returncode == 0",
          "",
          "[Added Lines]",
          "19:     assert ret.data is True",
          "22: @pytest.fixture",
          "23: def state_name(salt_master):",
          "24:     name = \"some-test-state\"",
          "25:     sls_contents = \"\"\"",
          "26:     test_foo:",
          "27:       test.succeed_with_changes:",
          "28:           - name: foo",
          "29:     \"\"\"",
          "30:     with salt_master.state_tree.base.temp_file(f\"{name}.sls\", sls_contents):",
          "31:         yield name",
          "34: def test_sls(salt_call_cli, state_name):",
          "38:     ret = salt_call_cli.run(\"state.apply\", state_name)",
          "39:     assert ret.returncode == 0",
          "40:     assert ret.data",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:     Test salt-call --local sys.doc none",
          "36:     \"\"\"",
          "37:     ret = salt_call_cli.run(\"--local\", \"sys.doc\", \"none\")",
          "39:     assert ret.returncode == 0",
          "42: def test_salt_call_local_sys_doc_aliases(salt_call_cli):",
          "",
          "[Removed Lines]",
          "38:     assert not ret.data",
          "",
          "[Added Lines]",
          "51:     assert not ret.data",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "44:     Test salt-call --local sys.doc aliases",
          "45:     \"\"\"",
          "46:     ret = salt_call_cli.run(\"--local\", \"sys.doc\", \"aliases.list_aliases\")",
          "48:     assert ret.returncode == 0",
          "52: def test_salt_call_cmd_run_id_runas(salt_call_cli, pkg_tests_account, caplog):",
          "53:     \"\"\"",
          "54:     Test salt-call --local cmd_run id with runas",
          "",
          "[Removed Lines]",
          "47:     assert \"aliases.list_aliases\" in ret.data",
          "51: @pytest.mark.skip_on_windows()",
          "",
          "[Added Lines]",
          "60:     assert \"aliases.list_aliases\" in ret.data",
          "63: @pytest.mark.skip_on_windows",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_pillar.py||tests/pytests/pkg/integration/test_salt_pillar.py": [
          "File: tests/pytests/pkg/integration/test_salt_pillar.py -> tests/pytests/pkg/integration/test_salt_pillar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: ]",
          "9:     \"\"\"",
          "10:     Test pillar.items",
          "11:     \"\"\"",
          "12:     ret = salt_cli.run(\"pillar.items\", minion_tgt=salt_minion.id)",
          "",
          "[Removed Lines]",
          "8: def test_salt_pillar(salt_cli, salt_minion):",
          "13:     assert \"info\" in ret.data",
          "",
          "[Added Lines]",
          "8: @pytest.fixture",
          "9: def pillar_name(salt_master):",
          "10:     name = \"info\"",
          "11:     top_file_contents = \"\"\"",
          "12:     base:",
          "13:       '*':",
          "14:         - test",
          "15:     \"\"\"",
          "16:     test_file_contents = f\"\"\"",
          "17:     {name}: test",
          "18:     \"\"\"",
          "19:     with salt_master.pillar_tree.base.temp_file(",
          "20:         \"top.sls\", top_file_contents",
          "21:     ), salt_master.pillar_tree.base.temp_file(\"test.sls\", test_file_contents):",
          "22:         yield name",
          "25: def test_salt_pillar(salt_cli, salt_minion, pillar_name):",
          "30:     assert ret.returncode == 0",
          "31:     assert pillar_name in ret.data",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/integration/test_salt_state_file.py||tests/pytests/pkg/integration/test_salt_state_file.py": [
          "File: tests/pytests/pkg/integration/test_salt_state_file.py -> tests/pytests/pkg/integration/test_salt_state_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: ]",
          "14:     if sys.platform.startswith(\"win\"):",
          "16:     else:",
          "20:     if ret.stdout and \"Minion did not return\" in ret.stdout:",
          "21:         pytest.skip(\"Skipping test, state took too long to apply\")",
          "22:     sls_ret = ret.data[next(iter(ret.data))]",
          "",
          "[Removed Lines]",
          "10: def test_salt_state_file(salt_cli, salt_minion):",
          "11:     \"\"\"",
          "12:     Test state file",
          "13:     \"\"\"",
          "15:         ret = salt_cli.run(\"state.apply\", \"win_states\", minion_tgt=salt_minion.id)",
          "17:         ret = salt_cli.run(\"state.apply\", \"states\", minion_tgt=salt_minion.id)",
          "19:     assert ret.data, ret",
          "",
          "[Added Lines]",
          "10: @pytest.fixture",
          "11: def state_name(salt_master):",
          "12:     name = \"some-state\"",
          "14:         sls_contents = \"\"\"",
          "15:     create_empty_file:",
          "16:       file.managed:",
          "17:         - name: C://salt/test/txt",
          "18:     salt_dude:",
          "19:       user.present:",
          "20:         - name: dude",
          "21:         - fullname: Salt Dude",
          "22:     \"\"\"",
          "24:         sls_contents = \"\"\"",
          "25:     update:",
          "26:       pkg.installed:",
          "27:         - name: bash",
          "28:     salt_dude:",
          "29:       user.present:",
          "30:         - name: dude",
          "31:         - fullname: Salt Dude",
          "32:     \"\"\"",
          "33:     with salt_master.state_tree.base.temp_file(f\"{name}.sls\", sls_contents):",
          "34:         yield name",
          "37: def test_salt_state_file(salt_cli, salt_minion, state_name):",
          "38:     \"\"\"",
          "39:     Test state file",
          "40:     \"\"\"",
          "41:     ret = salt_cli.run(\"state.apply\", state_name, minion_tgt=salt_minion.id)",
          "42:     assert ret.returncode == 0",
          "43:     assert ret.data",
          "",
          "---------------"
        ]
      }
    }
  ]
}