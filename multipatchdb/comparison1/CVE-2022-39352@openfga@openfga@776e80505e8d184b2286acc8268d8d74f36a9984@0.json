{
  "cve_id": "CVE-2022-39352",
  "cve_desc": "OpenFGA is a high-performance authorization/permission engine inspired by Google Zanzibar. Versions prior to 0.2.5 are vulnerable to authorization bypass under certain conditions. You are affected by this vulnerability if you added a tuple with a wildcard (*) assigned to a tupleset relation (the right hand side of a \u2018from\u2019 statement). This issue has been patched in version v0.2.5. This update is not backward compatible with any authorization model that uses wildcard on a tupleset relation.",
  "repo": "openfga/openfga",
  "patch_hash": "776e80505e8d184b2286acc8268d8d74f36a9984",
  "patch_info": {
    "commit_hash": "776e80505e8d184b2286acc8268d8d74f36a9984",
    "repo": "openfga/openfga",
    "commit_url": "https://github.com/openfga/openfga/commit/776e80505e8d184b2286acc8268d8d74f36a9984",
    "files": [
      "pkg/tuple/validation.go",
      "pkg/typesystem/typesystem.go",
      "pkg/typesystem/typesystem_test.go",
      "server/commands/check.go",
      "server/commands/expand.go",
      "server/commands/write.go",
      "server/test/check.go",
      "server/test/expand.go",
      "server/test/write.go",
      "server/test/write_authzmodel.go",
      "server/validation/validation.go"
    ],
    "message": "Merge pull request from GHSA-3gfj-fxx4-f22w\n\n* wip\n\n* do not expand. fail!\n\n* follow zanzibar style\n\n* address comments\n\n* format comment\n\n* add test\n\n* address feedback\n\n* fix Expand as well\n\n* chore: fix Check and Expand so all usersets return an error\n\nCo-authored-by: Jonathan Whitaker <jon.whitaker@auth0.com>",
    "before_after_code_files": [
      "pkg/tuple/validation.go||pkg/tuple/validation.go",
      "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
      "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
      "server/commands/check.go||server/commands/check.go",
      "server/commands/expand.go||server/commands/expand.go",
      "server/commands/write.go||server/commands/write.go",
      "server/test/check.go||server/test/check.go",
      "server/test/expand.go||server/test/expand.go",
      "server/test/write.go||server/test/write.go",
      "server/test/write_authzmodel.go||server/test/write_authzmodel.go",
      "server/validation/validation.go||server/validation/validation.go"
    ]
  },
  "patch_diff": {
    "pkg/tuple/validation.go||pkg/tuple/validation.go": [
      "File: pkg/tuple/validation.go -> pkg/tuple/validation.go"
    ],
    "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
      "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "546: func validateRelationTypeRestrictions(model *openfgapb.AuthorizationModel) error {",
      "547:  t := New(model)",
      "549:  for objectType := range t.typeDefinitions {",
      "550:   relations, err := t.GetRelations(objectType)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "548:  allTupleToUsersetDefinitions := t.GetAllTupleToUsersetsDefinitions()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "576:      if _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {",
      "577:       return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
      "578:      }",
      "579:     }",
      "580:    }",
      "581:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:      for _, arrayOfTtus := range allTupleToUsersetDefinitions[objectType] {",
      "583:       for _, tupleToUserSetDef := range arrayOfTtus {",
      "584:        if tupleToUserSetDef.Tupleset.Relation == name {",
      "585:         return &InvalidRelationError{ObjectType: objectType, Relation: name}",
      "586:        }",
      "587:       }",
      "588:      }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "726:  return fmt.Errorf(\"the relation type '%s' on '%s' in object type '%s' is not valid\", relationType, relation, objectType)",
      "727: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "741: func (t *TypeSystem) GetAllTupleToUsersetsDefinitions() map[string]map[string][]*openfgapb.TupleToUserset {",
      "742:  response := make(map[string]map[string][]*openfgapb.TupleToUserset, 0)",
      "743:  for typeName, typeDef := range t.GetTypeDefinitions() {",
      "744:   response[typeName] = make(map[string][]*openfgapb.TupleToUserset, 0)",
      "745:   for relationName, relationDef := range typeDef.GetRelations() {",
      "746:    ttus := make([]*openfgapb.TupleToUserset, 0)",
      "747:    response[typeName][relationName] = t.getAllTupleToUsersetsDefinitions(relationDef, &ttus)",
      "748:   }",
      "749:  }",
      "750:  return response",
      "751: }",
      "753: func (t *TypeSystem) getAllTupleToUsersetsDefinitions(relationDef *openfgapb.Userset, resp *[]*openfgapb.TupleToUserset) []*openfgapb.TupleToUserset {",
      "754:  if relationDef.GetTupleToUserset() != nil {",
      "756:  }",
      "757:  if relationDef.GetUnion() != nil {",
      "758:   for _, child := range relationDef.GetUnion().GetChild() {",
      "759:    t.getAllTupleToUsersetsDefinitions(child, resp)",
      "760:   }",
      "761:  }",
      "762:  if relationDef.GetIntersection() != nil {",
      "763:   for _, child := range relationDef.GetIntersection().GetChild() {",
      "764:    t.getAllTupleToUsersetsDefinitions(child, resp)",
      "765:   }",
      "766:  }",
      "767:  if relationDef.GetDifference() != nil {",
      "768:   t.getAllTupleToUsersetsDefinitions(relationDef.GetDifference().GetBase(), resp)",
      "769:   t.getAllTupleToUsersetsDefinitions(relationDef.GetDifference().GetSubtract(), resp)",
      "770:  }",
      "771:  return *resp",
      "772: }",
      "",
      "---------------"
    ],
    "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
      "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "868:    },",
      "869:    err: NonAssignableRelationError(\"document\", \"reader\"),",
      "870:   },",
      "871:  }",
      "873:  for _, test := range tests {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "871:   {",
      "872:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite\",",
      "873:    model: &openfgapb.AuthorizationModel{",
      "874:     SchemaVersion: SchemaVersion1_1,",
      "875:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "876:      {",
      "877:       Type: \"user\",",
      "878:      },",
      "879:      {",
      "880:       Type: \"folder\",",
      "881:       Relations: map[string]*openfgapb.Userset{",
      "882:        \"member\": This(),",
      "883:       },",
      "884:       Metadata: &openfgapb.Metadata{",
      "885:        Relations: map[string]*openfgapb.RelationMetadata{",
      "886:         \"member\": {",
      "887:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "888:           {",
      "889:            Type: \"user\",",
      "890:           },",
      "891:          },",
      "892:         },",
      "893:        },",
      "894:       },",
      "895:      },",
      "896:      {",
      "897:       Type: \"document\",",
      "898:       Relations: map[string]*openfgapb.Userset{",
      "899:        \"parent\":   This(),",
      "900:        \"can_view\": TupleToUserset(\"parent\", \"member\"),",
      "901:       },",
      "902:       Metadata: &openfgapb.Metadata{",
      "903:        Relations: map[string]*openfgapb.RelationMetadata{",
      "904:         \"parent\": {",
      "905:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "906:           {",
      "907:            Type:     \"folder\",",
      "908:            Relation: \"member\", //this isn't allowed",
      "909:           },",
      "910:          },",
      "911:         },",
      "912:        },",
      "913:       },",
      "914:      },",
      "915:     },",
      "916:    },",
      "917:    err: &InvalidRelationError{ObjectType: \"document\", Relation: \"parent\"},",
      "918:   },",
      "919:   {",
      "920:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite included in a union\",",
      "921:    model: &openfgapb.AuthorizationModel{",
      "922:     SchemaVersion: SchemaVersion1_1,",
      "923:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "924:      {",
      "925:       Type: \"user\",",
      "926:      },",
      "927:      {",
      "928:       Type: \"folder\",",
      "929:       Relations: map[string]*openfgapb.Userset{",
      "930:        \"parent\": This(),",
      "931:        \"viewer\": This(),",
      "932:       },",
      "933:       Metadata: &openfgapb.Metadata{",
      "934:        Relations: map[string]*openfgapb.RelationMetadata{",
      "935:         \"parent\": {",
      "936:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "937:           {",
      "938:            Type: \"folder\",",
      "939:           },",
      "940:          },",
      "941:         },",
      "942:         \"viewer\": {",
      "943:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "944:           {",
      "945:            Type: \"user\",",
      "946:           },",
      "947:          },",
      "948:         },",
      "949:        },",
      "950:       },",
      "951:      },",
      "952:      {",
      "953:       Type: \"document\",",
      "954:       Relations: map[string]*openfgapb.Userset{",
      "955:        \"parent\": This(),",
      "956:        \"viewer\": Union(TupleToUserset(\"parent\", \"viewer\"), This()),",
      "957:       },",
      "958:       Metadata: &openfgapb.Metadata{",
      "959:        Relations: map[string]*openfgapb.RelationMetadata{",
      "960:         \"parent\": {",
      "961:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "962:           {",
      "963:            Type:     \"folder\",",
      "964:            Relation: \"parent\", // this isn't allowed",
      "965:           },",
      "966:          },",
      "967:         },",
      "968:         \"viewer\": {",
      "969:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
      "970:           {",
      "971:            Type:     \"folder\",",
      "972:            Relation: \"parent\",",
      "973:           },",
      "974:           {",
      "975:            Type: \"user\",",
      "976:           },",
      "977:          },",
      "978:         },",
      "979:        },",
      "980:       },",
      "981:      },",
      "982:     },",
      "983:    },",
      "984:    err: &InvalidRelationError{ObjectType: \"document\", Relation: \"parent\"},",
      "985:   },",
      "",
      "---------------"
    ],
    "server/commands/check.go||server/commands/check.go": [
      "File: server/commands/check.go -> server/commands/check.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "463:   relation = rc.tk.GetRelation()",
      "464:  }",
      "468:  tracer := rc.tracer.AppendTupleToUserset().AppendString(tupleUtils.ToObjectRelationString(findTK.GetObject(), relation))",
      "469:  iter, err := rc.read(ctx, query.datastore, findTK)",
      "",
      "[Removed Lines]",
      "466:  findTK := tupleUtils.NewTupleKey(rc.tk.GetObject(), relation, \"\")",
      "",
      "[Added Lines]",
      "488:  findTK := tupleUtils.NewTupleKey(rc.tk.GetObject(), relation, \"\") //findTk=document:budget#parent@",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "490:    break // the user was resolved already, avoid launching extra lookups",
      "491:   }",
      "495:   if userObj == Wildcard {",
      "498:    query.logger.WarnWithContext(",
      "499:     ctx,",
      "501:     zap.String(\"store_id\", rc.store),",
      "502:     zap.String(\"authorization_model_id\", rc.modelID),",
      "503:     zap.String(\"object_type\", objectType),",
      "",
      "[Removed Lines]",
      "493:   userObj, userRel := tupleUtils.SplitObjectRelation(tuple.GetUser())",
      "496:    objectType, _ := tupleUtils.SplitObject(rc.tk.GetObject())",
      "500:     fmt.Sprintf(\"unexpected wildcard evaluated on tupleset relation '%s'\", relation),",
      "",
      "[Added Lines]",
      "515:   userObj, userRel := tupleUtils.SplitObjectRelation(tuple.GetUser()) // userObj=folder:budgets, userRel=\"\"",
      "517:   objectType, _ := tupleUtils.SplitObject(rc.tk.GetObject())",
      "523:     fmt.Sprintf(\"unexpected wildcard evaluated on tupleset relation '%s#%s'\", objectType, relation),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "509:    )",
      "510:   }",
      "512:   if !tupleUtils.IsValidObject(userObj) {",
      "513:    continue // TupleToUserset tuplesets should be of the form 'objectType:id' or 'objectType:id#relation' but are not guaranteed to be because it is neither a user or userset",
      "514:   }",
      "519:   if userRel == \"\" {",
      "525:   }",
      "527:   tupleKey := &openfgapb.TupleKey{",
      "533:   }",
      "534:   tracer := tracer.AppendString(tupleUtils.ToObjectRelationString(userObj, userRel))",
      "535:   nestedRC := rc.fork(tupleKey, tracer, false)",
      "",
      "[Removed Lines]",
      "516:   usersetRel := node.TupleToUserset.GetComputedUserset().GetRelation()",
      "520:    userRel = usersetRel",
      "521:   }",
      "523:   if userRel != usersetRel {",
      "524:    continue",
      "529:    Object:   userObj,",
      "530:    Relation: userRel,",
      "532:    User: rc.tk.GetUser(),",
      "",
      "[Added Lines]",
      "535:   if tupleUtils.UserSet == tupleUtils.GetUserTypeFromUser(tuple.GetUser()) {",
      "536:    query.logger.WarnWithContext(",
      "537:     ctx,",
      "538:     fmt.Sprintf(\"unexpected userset evaluated on tupleset relation '%s#%s'\", objectType, relation),",
      "539:     zap.String(\"store_id\", rc.store),",
      "540:     zap.String(\"authorization_model_id\", rc.modelID),",
      "541:     zap.String(\"object_type\", objectType),",
      "542:    )",
      "544:    return serverErrors.InvalidTuple(",
      "545:     fmt.Sprintf(\"unexpected userset evaluated on relation '%s#%s'\", tupleUtils.GetType(rc.tk.GetObject()), relation),",
      "546:     tupleUtils.NewTupleKey(tuple.GetObject(), relation, tuple.GetUser()),",
      "547:    )",
      "548:   }",
      "554:   usersetRel := node.TupleToUserset.GetComputedUserset().GetRelation() //reader",
      "557:    userRel = usersetRel // userRel=reader",
      "561:    Object:   userObj,         //folder:budgets",
      "562:    Relation: userRel,         //reader",
      "563:    User:     rc.tk.GetUser(), //anne",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "538:   go func(c chan<- *chanResolveResult) {",
      "539:    defer wg.Done()",
      "542:    if err == nil {",
      "543:     err = query.resolveNode(ctx, nestedRC, userset, typesys)",
      "544:    }",
      "",
      "[Removed Lines]",
      "541:    userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC)",
      "",
      "[Added Lines]",
      "572:    userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC) // folder:budgets#reader",
      "",
      "---------------"
    ],
    "server/commands/expand.go||server/commands/expand.go": [
      "File: server/commands/expand.go -> server/commands/expand.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "258:    continue",
      "259:   }",
      "261:   tObject, tRelation := tupleUtils.SplitObjectRelation(user)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "261:   userType := tupleUtils.GetUserTypeFromUser(user)",
      "262:   if userType == tupleUtils.UserSet {",
      "263:    return nil, serverErrors.InvalidTuple(",
      "264:     fmt.Sprintf(\"unexpected userset evaluated on relation '%s#%s'\", objectType, tupleset),",
      "265:     tupleUtils.NewTupleKey(targetObject, tupleset, user),",
      "266:    )",
      "267:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "265:    tRelation = userset.GetComputedUserset().GetRelation()",
      "266:   }",
      "272:   cs := &openfgapb.TupleKey{",
      "273:    Object:   tObject,",
      "274:    Relation: tRelation,",
      "",
      "[Removed Lines]",
      "268:   if tRelation != userset.GetComputedUserset().GetRelation() {",
      "269:    continue",
      "270:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/commands/write.go||server/commands/write.go": [
      "File: server/commands/write.go -> server/commands/write.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:    return serverErrors.HandleTupleValidateError(&tupleUtils.IndirectWriteError{Reason: IndirectWriteErrorReason, TupleKey: tk})",
      "85:   }",
      "87:   if err := c.validateTypesForTuple(authModel, tk); err != nil {",
      "88:    return err",
      "89:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:   if err := c.validateNoUsersetForRelationReferencedInTupleset(authModel, tk); err != nil {",
      "88:    return err",
      "89:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "103:  return nil",
      "104: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110: func (c *WriteCommand) validateNoUsersetForRelationReferencedInTupleset(authModel *openfgapb.AuthorizationModel, tk *openfgapb.TupleKey) error {",
      "111:  if !tupleUtils.IsObjectRelation(tk.GetUser()) {",
      "112:   return nil",
      "113:  }",
      "115:  objType := tupleUtils.GetType(tk.GetObject())",
      "119:  ts := typesystem.New(authModel)",
      "120:  for _, arrayOfTtus := range ts.GetAllTupleToUsersetsDefinitions()[objType] {",
      "121:   for _, tupleToUserSetDef := range arrayOfTtus {",
      "122:    if tupleToUserSetDef.Tupleset.Relation == tk.Relation {",
      "123:     return serverErrors.InvalidTuple(fmt.Sprintf(\"Userset '%s' is not allowed to have relation '%s' with '%s'\", tk.User, tk.Relation, tk.Object), tk)",
      "124:    }",
      "125:   }",
      "126:  }",
      "128:  return nil",
      "129: }",
      "",
      "---------------"
    ],
    "server/test/check.go||server/test/check.go": [
      "File: server/test/check.go -> server/test/check.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "764:    },",
      "765:   },",
      "766:   {",
      "768:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "769:     {",
      "770:      Type: \"repo\",",
      "",
      "[Removed Lines]",
      "767:    name: \"ExecuteReturnsAllowedForTupleToUserset\",",
      "",
      "[Added Lines]",
      "767:    name: \"Error if userset encountered in tupleset relation of a TTU definition\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "779:            Relation: \"manager\",",
      "780:           },",
      "781:           ComputedUserset: &openfgapb.ObjectRelation{",
      "783:            Relation: \"repo_admin\",",
      "784:           },",
      "785:          }}},",
      "",
      "[Removed Lines]",
      "782:            Object:   \"$TUPLE_USERSET_OBJECT\",",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "789:      },",
      "790:     },",
      "791:     {",
      "793:      Relations: map[string]*openfgapb.Userset{",
      "796:      },",
      "797:     },",
      "798:    },",
      "799:    tuples: []*openfgapb.TupleKey{",
      "800:     tuple.NewTupleKey(\"repo:openfga/canaveral\", \"manager\", \"org:openfga#repo_admin\"),",
      "802:    },",
      "803:    resolveNodeLimit: defaultResolveNodeLimit,",
      "804:    request: &openfgapb.CheckRequest{",
      "805:     TupleKey: tuple.NewTupleKey(\"repo:openfga/canaveral\", \"admin\", \"github|jose@openfga\"),",
      "806:     Trace:    true,",
      "807:    },",
      "812:   },",
      "813:   {",
      "814:    name: \"ExecuteCanResolveRecursiveComputedUserSets\",",
      "",
      "[Removed Lines]",
      "792:      Type: \"org\",",
      "795:       \"repo_admin\": {},",
      "801:     tuple.NewTupleKey(\"org:openfga\", \"repo_admin\", \"github|jose@openfga\"),",
      "808:    response: &openfgapb.CheckResponse{",
      "809:     Allowed:    true,",
      "810:     Resolution: \".union.1(tuple-to-userset).repo:openfga/canaveral#manager.org:openfga#repo_admin.(direct).\",",
      "811:    },",
      "",
      "[Added Lines]",
      "791:      Type: \"group\",",
      "793:       \"member\": typesystem.This(),",
      "799:     tuple.NewTupleKey(\"org:openfga\", \"repo_admin\", \"group:eng#member\"),",
      "800:     tuple.NewTupleKey(\"group:eng\", \"member\", \"github|jose@openfga\"),",
      "807:    err: serverErrors.InvalidTuple(",
      "808:     \"unexpected userset evaluated on relation 'repo#manager'\",",
      "809:     tuple.NewTupleKey(\"repo:openfga/canaveral\", \"manager\", \"org:openfga#repo_admin\"),",
      "810:    ),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1288:     errors.New(\"unexpected rewrite on relation 'document#parent'\"),",
      "1289:    ),",
      "1290:   },",
      "1291:  }",
      "1293:  ctx := context.Background()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1290:   {",
      "1299:    name:             \"Fails if expanding the computed userset of a tupleToUserset rewrite\",",
      "1300:    resolveNodeLimit: defaultResolveNodeLimit,",
      "1301:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "1302:     {",
      "1303:      Type: \"document\",",
      "1304:      Relations: map[string]*openfgapb.Userset{",
      "1305:       \"parent\": typesystem.This(),",
      "1306:       \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "1307:      },",
      "1308:     },",
      "1309:     {",
      "1310:      Type: \"org\",",
      "1311:      Relations: map[string]*openfgapb.Userset{",
      "1312:       \"viewer\":   typesystem.This(),",
      "1313:       \"can_view\": typesystem.ComputedUserset(\"viewer\"),",
      "1314:      },",
      "1315:     },",
      "1316:    },",
      "1317:    tuples: []*openfgapb.TupleKey{",
      "1318:     tuple.NewTupleKey(\"org:x\", \"viewer\", \"org:y\"),",
      "1319:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:y#can_view\"),",
      "1320:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:z#can_view\"), //not relevant",
      "1321:    },",
      "1322:    request: &openfgapb.CheckRequest{",
      "1323:     TupleKey:         tuple.NewTupleKey(\"document:1\", \"viewer\", \"org:y\"),",
      "1324:     ContextualTuples: &openfgapb.ContextualTupleKeys{},",
      "1325:    },",
      "1326:    err: serverErrors.InvalidTuple(",
      "1327:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "1328:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:y#can_view\"),",
      "1329:    ),",
      "1330:   },",
      "1331:   {",
      "1340:    name:             \"Fails if expanding the computed userset of a tupleToUserset rewrite\",",
      "1341:    resolveNodeLimit: defaultResolveNodeLimit,",
      "1342:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "1343:     {",
      "1344:      Type: \"document\",",
      "1345:      Relations: map[string]*openfgapb.Userset{",
      "1346:       \"parent\": typesystem.This(),",
      "1347:       \"viewer\": typesystem.Union(",
      "1348:        typesystem.This(),",
      "1349:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "1350:       ),",
      "1351:      },",
      "1352:     },",
      "1353:    },",
      "1354:    tuples: []*openfgapb.TupleKey{",
      "1355:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "1356:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
      "1357:    },",
      "1358:    request: &openfgapb.CheckRequest{",
      "1359:     TupleKey:         tuple.NewTupleKey(\"document:1\", \"viewer\", \"org:y\"),",
      "1360:     ContextualTuples: &openfgapb.ContextualTupleKeys{},",
      "1361:    },",
      "1362:    err: serverErrors.InvalidTuple(",
      "1363:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "1364:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "1365:    ),",
      "1366:   },",
      "",
      "---------------"
    ],
    "server/test/expand.go||server/test/expand.go": [
      "File: server/test/expand.go -> server/test/expand.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "706:     },",
      "707:    },",
      "708:   },",
      "709:  }",
      "711:  require := require.New(t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709:   {",
      "710:    name: \"Tuple involving userset that is not involved in TTU rewrite\",",
      "711:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "712:     {",
      "713:      Type: \"document\",",
      "714:      Relations: map[string]*openfgapb.Userset{",
      "715:       \"parent\": typesystem.This(),",
      "716:       \"editor\": typesystem.This(),",
      "717:      },",
      "718:     },",
      "719:    },",
      "720:    tuples: []*openfgapb.TupleKey{",
      "721:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
      "722:    },",
      "723:    request: &openfgapb.ExpandRequest{",
      "724:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"\"),",
      "725:    },",
      "726:    expected: &openfgapb.ExpandResponse{",
      "727:     Tree: &openfgapb.UsersetTree{",
      "728:      Root: &openfgapb.UsersetTree_Node{",
      "729:       Name: \"document:1#parent\",",
      "730:       Value: &openfgapb.UsersetTree_Node_Leaf{",
      "731:        Leaf: &openfgapb.UsersetTree_Leaf{",
      "732:         Value: &openfgapb.UsersetTree_Leaf_Users{",
      "733:          Users: &openfgapb.UsersetTree_Users{",
      "734:           Users: []string{\"document:2#editor\"},",
      "735:          },",
      "736:         },",
      "737:        },",
      "738:       },",
      "739:      },",
      "740:     },",
      "741:    },",
      "742:   },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "858:     errors.Errorf(\"unexpected rewrite on relation '%s#%s'\", \"document\", \"parent\"),",
      "859:    ),",
      "860:   },",
      "861:  }",
      "863:  require := require.New(t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "895:   {",
      "896:    name: \"Tuple involving userset returns error if it is referenced in a TTU rewrite\",",
      "897:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "898:     {",
      "899:      Type: \"folder\",",
      "900:      Relations: map[string]*openfgapb.Userset{",
      "901:       \"viewer\": typesystem.This(),",
      "902:      },",
      "903:     },",
      "904:     {",
      "905:      Type: \"document\",",
      "906:      Relations: map[string]*openfgapb.Userset{",
      "907:       \"parent\": typesystem.This(),",
      "908:       \"editor\": typesystem.This(),",
      "909:       \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "910:      },",
      "911:     },",
      "912:    },",
      "913:    tuples: []*openfgapb.TupleKey{",
      "914:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
      "915:    },",
      "916:    request: &openfgapb.ExpandRequest{",
      "917:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
      "918:    },",
      "919:    expected: serverErrors.InvalidTuple(",
      "920:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "921:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
      "922:    ),",
      "923:   },",
      "924:   {",
      "925:    name: \"Tuple involving userset returns error if same ComputedUserset involved in TTU rewrite\",",
      "926:    typeDefinitions: []*openfgapb.TypeDefinition{",
      "927:     {",
      "928:      Type: \"document\",",
      "929:      Relations: map[string]*openfgapb.Userset{",
      "930:       \"parent\": typesystem.This(),",
      "931:       \"viewer\": typesystem.Union(",
      "932:        typesystem.This(),",
      "933:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
      "934:       ),",
      "935:      },",
      "936:     },",
      "937:    },",
      "938:    tuples: []*openfgapb.TupleKey{",
      "939:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "940:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
      "941:    },",
      "942:    request: &openfgapb.ExpandRequest{",
      "943:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
      "944:    },",
      "945:    expected: serverErrors.InvalidTuple(",
      "946:     \"unexpected userset evaluated on relation 'document#parent'\",",
      "947:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
      "948:    ),",
      "949:   },",
      "",
      "---------------"
    ],
    "server/test/write.go||server/test/write.go": [
      "File: server/test/write.go -> server/test/write.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1268:   },",
      "1269:   err: serverErrors.NewInternalError(\"invalid authorization model\", errors.New(\"invalid authorization model\")),",
      "1270:  },",
      "1271: }",
      "1273: func TestWriteCommand(t *testing.T, datastore storage.OpenFGADatastore) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1272:  {",
      "1273:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation\",",
      "1274:   model: &openfgapb.AuthorizationModel{",
      "1275:    Id:            ulid.Make().String(),",
      "1276:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1277:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1278:     {",
      "1279:      Type: \"folder\",",
      "1280:      Relations: map[string]*openfgapb.Userset{",
      "1281:       \"owner\": typesystem.This(),",
      "1282:       \"admin\": typesystem.This(),",
      "1283:      },",
      "1284:     },",
      "1285:     {",
      "1286:      Type: \"document\",",
      "1287:      Relations: map[string]*openfgapb.Userset{",
      "1288:       \"parent\":   typesystem.This(),",
      "1289:       \"can_view\": typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1290:      },",
      "1291:     },",
      "1292:    },",
      "1293:   },",
      "1294:   request: &openfgapb.WriteRequest{",
      "1295:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1296:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1297:    }},",
      "1298:   },",
      "1299:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1300:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1301:   ),",
      "1302:  },",
      "1303:  {",
      "1304:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as union)\",",
      "1305:   model: &openfgapb.AuthorizationModel{",
      "1306:    Id:            ulid.Make().String(),",
      "1307:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1308:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1309:     {",
      "1310:      Type: \"folder\",",
      "1311:      Relations: map[string]*openfgapb.Userset{",
      "1312:       \"owner\": typesystem.This(),",
      "1313:       \"admin\": typesystem.This(),",
      "1314:      },",
      "1315:     },",
      "1316:     {",
      "1317:      Type: \"document\",",
      "1318:      Relations: map[string]*openfgapb.Userset{",
      "1319:       \"parent\": typesystem.This(),",
      "1320:       \"can_view\": typesystem.Union(",
      "1321:        typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1322:        typesystem.TupleToUserset(\"parent\", \"admin\"), //admin from parent",
      "1323:       ),",
      "1324:      },",
      "1325:     },",
      "1326:    },",
      "1327:   },",
      "1328:   request: &openfgapb.WriteRequest{",
      "1329:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1330:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1331:    }},",
      "1332:   },",
      "1333:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1334:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1335:   ),",
      "1336:  },",
      "1337:  {",
      "1338:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as intersection)\",",
      "1339:   model: &openfgapb.AuthorizationModel{",
      "1340:    Id:            ulid.Make().String(),",
      "1341:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1342:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1343:     {",
      "1344:      Type: \"folder\",",
      "1345:      Relations: map[string]*openfgapb.Userset{",
      "1346:       \"owner\": typesystem.This(),",
      "1347:       \"admin\": typesystem.This(),",
      "1348:      },",
      "1349:     },",
      "1350:     {",
      "1351:      Type: \"document\",",
      "1352:      Relations: map[string]*openfgapb.Userset{",
      "1353:       \"parent\": typesystem.This(),",
      "1354:       \"can_view\": typesystem.Intersection(",
      "1355:        typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1356:        typesystem.TupleToUserset(\"parent\", \"admin\"), //admin from parent",
      "1357:       ),",
      "1358:      },",
      "1359:     },",
      "1360:    },",
      "1361:   },",
      "1362:   request: &openfgapb.WriteRequest{",
      "1363:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1364:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1365:    }},",
      "1366:   },",
      "1367:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1368:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1369:   ),",
      "1370:  },",
      "1371:  {",
      "1372:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as difference)\",",
      "1373:   model: &openfgapb.AuthorizationModel{",
      "1374:    Id:            ulid.Make().String(),",
      "1375:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1376:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1377:     {",
      "1378:      Type: \"folder\",",
      "1379:      Relations: map[string]*openfgapb.Userset{",
      "1380:       \"owner\": typesystem.This(),",
      "1381:       \"admin\": typesystem.This(),",
      "1382:      },",
      "1383:     },",
      "1384:     {",
      "1385:      Type: \"document\",",
      "1386:      Relations: map[string]*openfgapb.Userset{",
      "1387:       \"parent\": typesystem.This(),",
      "1388:       \"can_view\": typesystem.Difference(",
      "1389:        typesystem.TupleToUserset(\"parent\", \"owner\"), //owner from parent",
      "1390:        typesystem.TupleToUserset(\"parent\", \"admin\"), //admin from parent",
      "1391:       ),",
      "1392:      },",
      "1393:     },",
      "1394:    },",
      "1395:   },",
      "1396:   request: &openfgapb.WriteRequest{",
      "1397:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1398:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1399:    }},",
      "1400:   },",
      "1401:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
      "1402:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1403:   ),",
      "1404:  },",
      "1405:  {",
      "1406:   _name: \"Write succeeds if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation of another type\",",
      "1407:   model: &openfgapb.AuthorizationModel{",
      "1408:    Id:            ulid.Make().String(),",
      "1409:    SchemaVersion: typesystem.SchemaVersion1_0,",
      "1410:    TypeDefinitions: []*openfgapb.TypeDefinition{",
      "1411:     {",
      "1412:      Type: \"folder\",",
      "1413:      Relations: map[string]*openfgapb.Userset{",
      "1414:       \"owner\": typesystem.This(),",
      "1415:       \"parent\": typesystem.Union( // let's confuse the code. if this were defined in 'document' type, it would fail",
      "1416:        typesystem.TupleToUserset(\"parent\", \"owner\"),",
      "1417:       ),",
      "1418:      },",
      "1419:     },",
      "1420:     {",
      "1421:      Type: \"document\",",
      "1422:      Relations: map[string]*openfgapb.Userset{",
      "1423:       \"owner\":  typesystem.This(),",
      "1424:       \"parent\": typesystem.This(),",
      "1425:      },",
      "1426:     },",
      "1427:    },",
      "1428:   },",
      "1429:   request: &openfgapb.WriteRequest{",
      "1430:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
      "1431:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
      "1432:    }},",
      "1433:   },",
      "1434:  },",
      "",
      "---------------"
    ],
    "server/test/write_authzmodel.go||server/test/write_authzmodel.go": [
      "File: server/test/write_authzmodel.go -> server/test/write_authzmodel.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   err     error",
      "36:  }{",
      "37:   {",
      "39:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "40:     StoreId: storeID,",
      "41:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "38:    name: \"succeeds\",",
      "",
      "[Added Lines]",
      "38:    name: \"succeeds with a simple model\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:    },",
      "50:   },",
      "51:   {",
      "53:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "54:     StoreId: \"somestoreid\",",
      "55:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "52:    name: \"succeeds part II\",",
      "",
      "[Added Lines]",
      "52:    name: \"succeeds with a complex model\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:    err: serverErrors.ExceededEntityLimit(\"type definitions in an authorization model\", datastore.MaxTypesInTypeDefinition()),",
      "113:   },",
      "114:   {",
      "116:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "117:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "118:      {",
      "",
      "[Removed Lines]",
      "115:    name: \"empty relations is valid\",",
      "",
      "[Added Lines]",
      "115:    name: \"succeeds with empty relations\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:    },",
      "123:   },",
      "124:   {",
      "126:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "127:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "128:      {",
      "",
      "[Removed Lines]",
      "125:    name: \"zero length relations is valid\",",
      "",
      "[Added Lines]",
      "125:    name: \"succeeds with zero length relations\",",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "133:    },",
      "134:   },",
      "135:   {",
      "137:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "138:     StoreId: storeID,",
      "139:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "136:    name: \"ExecuteWriteFailsIfSameTypeTwice\",",
      "",
      "[Added Lines]",
      "136:    name: \"fails if the same type appears twice\",",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "154:    err: serverErrors.InvalidAuthorizationModelInput(typesystem.ErrDuplicateTypes),",
      "155:   },",
      "156:   {",
      "158:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "159:     StoreId: storeID,",
      "160:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "157:    name: \"ExecuteWriteFailsIfEmptyRewrites\",",
      "",
      "[Added Lines]",
      "157:    name: \"fails if a relation is not defined\",",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "169:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "170:   },",
      "171:   {",
      "173:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "174:     StoreId: storeID,",
      "175:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "172:    name: \"ExecuteWriteFailsIfUnknownRelationInComputedUserset\",",
      "",
      "[Added Lines]",
      "172:    name: \"fails if unknown relation in computed userset definition\",",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "191:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "192:   },",
      "193:   {",
      "195:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "196:     StoreId: storeID,",
      "197:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "194:    name: \"ExecuteWriteFailsIfUnknownRelationInTupleToUserset\",",
      "",
      "[Added Lines]",
      "194:    name: \"fails if unknown relation in tuple to userset definition (computed userset component)\",",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "218:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"\", Relation: \"owner\"}),",
      "219:   },",
      "220:   {",
      "222:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "223:     StoreId: storeID,",
      "224:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "221:    name: \"ExecuteWriteFailsIfUnknownRelationInUnion\",",
      "",
      "[Added Lines]",
      "221:    name: \"fails if unknown relation in union\",",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "253:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "254:   },",
      "255:   {",
      "257:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "258:     StoreId: storeID,",
      "259:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "256:    name: \"ExecuteWriteFailsIfUnknownRelationInDifferenceBaseArgument\",",
      "",
      "[Added Lines]",
      "256:    name: \"fails if unknown relation in difference base argument\",",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "288:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "289:   },",
      "290:   {",
      "292:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "293:     StoreId: storeID,",
      "294:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "291:    name: \"ExecuteWriteFailsIfUnknownRelationInDifferenceSubtractArgument\",",
      "",
      "[Added Lines]",
      "291:    name: \"fails if unknown relation in difference subtract argument\",",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "323:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "324:   },",
      "325:   {",
      "327:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "328:     StoreId: storeID,",
      "329:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "326:    name: \"ExecuteWriteFailsIfUnknownRelationInTupleToUsersetTupleset\",",
      "",
      "[Added Lines]",
      "326:    name: \"fails if unknown relation in tuple to userset definition (tupleset component)\",",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "352:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "353:   },",
      "354:   {",
      "385:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "386:     StoreId: storeID,",
      "387:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "355:    name: \"ExecuteWriteFailsIfUnknownRelationInTupleToUsersetComputedUserset\",",
      "356:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "357:     StoreId: storeID,",
      "358:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "359:      {",
      "360:       Type: \"repo\",",
      "361:       Relations: map[string]*openfgapb.Userset{",
      "362:        \"writer\": {",
      "363:         Userset: &openfgapb.Userset_This{},",
      "364:        },",
      "365:        \"viewer\": {",
      "366:         Userset: &openfgapb.Userset_TupleToUserset{",
      "367:          TupleToUserset: &openfgapb.TupleToUserset{",
      "368:           Tupleset: &openfgapb.ObjectRelation{",
      "369:            Relation: \"writer\",",
      "370:           },",
      "371:           ComputedUserset: &openfgapb.ObjectRelation{",
      "372:            Relation: \"owner\",",
      "373:           },",
      "374:          },",
      "375:         },",
      "376:        },",
      "377:       },",
      "378:      },",
      "379:     },",
      "380:    },",
      "381:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"\", Relation: \"owner\"}),",
      "382:   },",
      "383:   {",
      "384:    name: \"ExecuteWriteFailsIfTupleToUsersetReferencesUnknownRelation\",",
      "",
      "[Added Lines]",
      "355:    name: \"fails if unknown relation in computed userset\",",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "417:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"bar\", Relation: \"writer\"}),",
      "418:   },",
      "419:   {",
      "421:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "422:     StoreId: storeID,",
      "423:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "420:    name: \"ExecuteWriteFailsIfUnknownRelationInIntersection\",",
      "",
      "[Added Lines]",
      "391:    name: \"fails if unknown relation in intersection\",",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "450:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
      "451:   },",
      "452:   {",
      "454:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "455:     StoreId: storeID,",
      "456:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "453:    name: \"ExecuteWriteFailsIfDifferenceIncludesSameRelationTwice\",",
      "",
      "[Added Lines]",
      "424:    name: \"fails if difference includes same relation twice\",",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "480:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
      "481:   },",
      "482:   {",
      "484:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "485:     StoreId: storeID,",
      "486:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "483:    name: \"ExecuteWriteFailsIfUnionIncludesSameRelationTwice\",",
      "",
      "[Added Lines]",
      "454:    name: \"fails if union includes same relation twice\",",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "507:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
      "508:   },",
      "509:   {",
      "511:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "512:     StoreId: storeID,",
      "513:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "510:    name: \"ExecuteWriteFailsIfIntersectionIncludesSameRelationTwice\",",
      "",
      "[Added Lines]",
      "481:    name: \"fails if intersection includes same relation twice\",",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "533:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
      "534:   },",
      "535:   {",
      "537:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "538:     StoreId: storeID,",
      "539:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "536:    name: \"Union Rewrite Contains Repeated Definitions\",",
      "",
      "[Added Lines]",
      "507:    name: \"Success if Union Rewrite Contains Repeated Definitions\",",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "556:    },",
      "557:   },",
      "558:   {",
      "560:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "561:     StoreId: storeID,",
      "562:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "559:    name: \"Intersection Rewrite Contains Repeated Definitions\",",
      "",
      "[Added Lines]",
      "530:    name: \"Success if Intersection Rewrite Contains Repeated Definitions\",",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "579:    },",
      "580:   },",
      "581:   {",
      "583:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "584:     StoreId: storeID,",
      "585:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "582:    name: \"Exclusion Rewrite Contains Repeated Definitions\",",
      "",
      "[Added Lines]",
      "553:    name: \"Success if Exclusion Rewrite Contains Repeated Definitions\",",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "602:    },",
      "603:   },",
      "604:   {",
      "606:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "607:     StoreId: storeID,",
      "608:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "605:    name: \"Tupleset relation involves ComputedUserset rewrite\",",
      "",
      "[Added Lines]",
      "576:    name: \"Fails if Tupleset relation involves ComputedUserset rewrite\",",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "621:    ),",
      "622:   },",
      "623:   {",
      "625:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "626:     StoreId: storeID,",
      "627:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "624:    name: \"Tupleset relation involves Union rewrite\",",
      "",
      "[Added Lines]",
      "595:    name: \"Fails if Tupleset relation involves Union rewrite\",",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "640:    ),",
      "641:   },",
      "642:   {",
      "644:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "645:     StoreId: storeID,",
      "646:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "643:    name: \"Tupleset relation involves Intersection rewrite\",",
      "",
      "[Added Lines]",
      "614:    name: \"Fails if Tupleset relation involves Intersection rewrite\",",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "659:    ),",
      "660:   },",
      "661:   {",
      "663:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "664:     StoreId: storeID,",
      "665:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "662:    name: \"Tupleset relation involves Exclusion rewrite\",",
      "",
      "[Added Lines]",
      "633:    name: \"Fails if Tupleset relation involves Exclusion rewrite\",",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "678:    ),",
      "679:   },",
      "680:   {",
      "682:    request: &openfgapb.WriteAuthorizationModelRequest{",
      "683:     StoreId: storeID,",
      "684:     TypeDefinitions: []*openfgapb.TypeDefinition{",
      "",
      "[Removed Lines]",
      "681:    name: \"Tupleset relation involves TupleToUserset rewrite\",",
      "",
      "[Added Lines]",
      "652:    name: \"Fails if Tupleset relation involves TupleToUserset rewrite\",",
      "",
      "---------------"
    ],
    "server/validation/validation.go||server/validation/validation.go": [
      "File: server/validation/validation.go -> server/validation/validation.go"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9966aa74b8ad21a9390ed126d601693c4ea03614",
      "candidate_info": {
        "commit_hash": "9966aa74b8ad21a9390ed126d601693c4ea03614",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/9966aa74b8ad21a9390ed126d601693c4ea03614",
        "files": [
          "pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go"
        ],
        "message": "feat: add wildcard validation to write model (#350)",
        "before_after_code_files": [
          "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ],
          "candidate": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
          "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  }",
          "59: }",
          "62:  return &openfgapb.Userset{",
          "63:   Userset: &openfgapb.Userset_TupleToUserset{",
          "64:    TupleToUserset: &openfgapb.TupleToUserset{",
          "65:     Tupleset: &openfgapb.ObjectRelation{",
          "67:     },",
          "68:     ComputedUserset: &openfgapb.ObjectRelation{",
          "70:     },",
          "71:    },",
          "72:   },",
          "",
          "[Removed Lines]",
          "61: func TupleToUserset(tuplesetRelation, targetRelation string) *openfgapb.Userset {",
          "66:      Relation: tuplesetRelation,",
          "69:      Relation: targetRelation,",
          "",
          "[Added Lines]",
          "61: func TupleToUserset(tupleset, computedUserset string) *openfgapb.Userset {",
          "66:      Relation: tupleset,",
          "69:      Relation: computedUserset,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570: }",
          "572: func validateRelationTypeRestrictions(model *openfgapb.AuthorizationModel) error {",
          "578:   if err != nil {",
          "579:    return err",
          "580:   }",
          "582:   for name, relation := range relations {",
          "583:    relatedTypes := relation.GetTypeInfo().GetDirectlyRelatedUserTypes()",
          "586:    if assignable && len(relatedTypes) == 0 {",
          "587:     return AssignableRelationError(objectType, name)",
          "",
          "[Removed Lines]",
          "573:  t := New(model)",
          "574:  allTupleToUsersetDefinitions := t.getAllTupleToUsersetsDefinitions()",
          "576:  for objectType := range t.typeDefinitions {",
          "577:   relations, err := t.GetRelations(objectType)",
          "584:    assignable := t.IsDirectlyAssignable(relation)",
          "",
          "[Added Lines]",
          "573:  typesys := New(model)",
          "575:  for objectType := range typesys.typeDefinitions {",
          "576:   relations, err := typesys.GetRelations(objectType)",
          "583:    assignable := typesys.IsDirectlyAssignable(relation)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "595:     relatedObjectType := related.GetType()",
          "596:     relatedRelation := related.GetRelation()",
          "599:      return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "600:     }",
          "604:       return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "605:      }",
          "613:       }",
          "614:      }",
          "615:     }",
          "616:    }",
          "617:   }",
          "618:  }",
          "",
          "[Removed Lines]",
          "598:     if _, err := t.GetRelations(relatedObjectType); err != nil {",
          "602:     if relatedRelation != \"\" {",
          "603:      if _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {",
          "608:      for _, arrayOfTtus := range allTupleToUsersetDefinitions[objectType] {",
          "609:       for _, tupleToUserSetDef := range arrayOfTtus {",
          "610:        if tupleToUserSetDef.Tupleset.Relation == name {",
          "611:         return &InvalidRelationError{ObjectType: objectType, Relation: name}",
          "612:        }",
          "",
          "[Added Lines]",
          "597:     if _, err := typesys.GetRelations(relatedObjectType); err != nil {",
          "601:     if related.GetRelationOrWildcard() != nil {",
          "603:      if ok, _ := typesys.IsTuplesetRelation(objectType, name); ok {",
          "607:      if relatedRelation != \"\" {",
          "608:       if _, err := typesys.GetRelation(relatedObjectType, relatedRelation); err != nil {",
          "609:        return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "899:      },",
          "900:     },",
          "901:    },",
          "903:   },",
          "904:   {",
          "905:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite included in a union\",",
          "",
          "[Removed Lines]",
          "902:    err: &InvalidRelationError{ObjectType: \"document\", Relation: \"parent\"},",
          "",
          "[Added Lines]",
          "902:    err: InvalidRelationTypeError(\"document\", \"parent\", \"folder\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "958:      },",
          "959:     },",
          "960:    },",
          "962:   },",
          "963:  }",
          "",
          "[Removed Lines]",
          "961:    err: &InvalidRelationError{ObjectType: \"document\", Relation: \"parent\"},",
          "",
          "[Added Lines]",
          "961:    err: InvalidRelationTypeError(\"document\", \"parent\", \"folder\", \"parent\"),",
          "962:   },",
          "963:   {",
          "964:    name: \"WildcardNotAllowedInTheTuplesetPartOfTTU\",",
          "965:    model: &openfgapb.AuthorizationModel{",
          "966:     SchemaVersion: SchemaVersion1_1,",
          "967:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "968:      {",
          "969:       Type: \"user\",",
          "970:      },",
          "971:      {",
          "972:       Type: \"folder\",",
          "973:       Relations: map[string]*openfgapb.Userset{",
          "974:        \"viewer\": This(),",
          "975:       },",
          "976:       Metadata: &openfgapb.Metadata{",
          "977:        Relations: map[string]*openfgapb.RelationMetadata{",
          "978:         \"viewer\": {",
          "979:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "980:           DirectRelationReference(\"user\", \"\"),",
          "981:          },",
          "982:         },",
          "983:        },",
          "984:       },",
          "985:      },",
          "986:      {",
          "987:       Type: \"document\",",
          "988:       Relations: map[string]*openfgapb.Userset{",
          "989:        \"parent\": This(),",
          "990:        \"viewer\": Union(This(), TupleToUserset(\"parent\", \"viewer\")),",
          "991:       },",
          "992:       Metadata: &openfgapb.Metadata{",
          "993:        Relations: map[string]*openfgapb.RelationMetadata{",
          "994:         \"parent\": {",
          "995:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "996:           WildcardRelationReference(\"folder\"),",
          "997:          },",
          "998:         },",
          "999:         \"viewer\": {",
          "1000:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1001:           DirectRelationReference(\"user\", \"\"),",
          "1002:          },",
          "1003:         },",
          "1004:        },",
          "1005:       },",
          "1006:      },",
          "1007:     },",
          "1008:    },",
          "1009:    err: InvalidRelationTypeError(\"document\", \"parent\", \"folder\", \"\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f799d836f3267a75773f4a149b3b3d082d1b1ce5",
      "candidate_info": {
        "commit_hash": "f799d836f3267a75773f4a149b3b3d082d1b1ce5",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/f799d836f3267a75773f4a149b3b3d082d1b1ce5",
        "files": [
          "internal/validation/validation.go",
          "internal/validation/validation_test.go",
          "pkg/tuple/tuple.go",
          "pkg/tuple/tuple_test.go",
          "pkg/tuple/validation.go",
          "pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go",
          "server/commands/check.go",
          "server/commands/check_utils.go",
          "server/commands/connected_objects.go",
          "server/commands/expand.go",
          "server/commands/write.go",
          "server/commands/write_assertions.go",
          "server/commands/write_test.go",
          "server/test/check.go",
          "server/test/connected_objects.go",
          "server/test/expand.go",
          "server/test/write.go",
          "server/test/write_authzmodel.go",
          "server/validation/validation.go",
          "storage/storage.go",
          "storage/storage_test.go"
        ],
        "message": "chore: cleanup tuple validations across packages (#341)\n\nCo-authored-by: Maria Ines Parnisari <maineparnisari@gmail.com>",
        "before_after_code_files": [
          "internal/validation/validation.go||internal/validation/validation.go",
          "internal/validation/validation_test.go||internal/validation/validation_test.go",
          "pkg/tuple/tuple.go||pkg/tuple/tuple.go",
          "pkg/tuple/tuple_test.go||pkg/tuple/tuple_test.go",
          "pkg/tuple/validation.go||pkg/tuple/validation.go",
          "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
          "server/commands/check.go||server/commands/check.go",
          "server/commands/check_utils.go||server/commands/check_utils.go",
          "server/commands/connected_objects.go||server/commands/connected_objects.go",
          "server/commands/expand.go||server/commands/expand.go",
          "server/commands/write.go||server/commands/write.go",
          "server/commands/write_assertions.go||server/commands/write_assertions.go",
          "server/commands/write_test.go||server/commands/write_test.go",
          "server/test/check.go||server/test/check.go",
          "server/test/connected_objects.go||server/test/connected_objects.go",
          "server/test/expand.go||server/test/expand.go",
          "server/test/write.go||server/test/write.go",
          "server/test/write_authzmodel.go||server/test/write_authzmodel.go",
          "server/validation/validation.go||server/validation/validation.go",
          "storage/storage.go||storage/storage.go",
          "storage/storage_test.go||storage/storage_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/tuple/validation.go||pkg/tuple/validation.go",
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
            "server/commands/check.go||server/commands/check.go",
            "server/commands/expand.go||server/commands/expand.go",
            "server/commands/write.go||server/commands/write.go",
            "server/test/check.go||server/test/check.go",
            "server/test/expand.go||server/test/expand.go",
            "server/test/write.go||server/test/write.go",
            "server/test/write_authzmodel.go||server/test/write_authzmodel.go",
            "server/validation/validation.go||server/validation/validation.go"
          ],
          "candidate": [
            "pkg/tuple/validation.go||pkg/tuple/validation.go",
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
            "server/commands/check.go||server/commands/check.go",
            "server/commands/expand.go||server/commands/expand.go",
            "server/commands/write.go||server/commands/write.go",
            "server/test/check.go||server/test/check.go",
            "server/test/expand.go||server/test/expand.go",
            "server/test/write.go||server/test/write.go",
            "server/test/write_authzmodel.go||server/test/write_authzmodel.go",
            "server/validation/validation.go||server/validation/validation.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/validation/validation.go||internal/validation/validation.go": [
          "File: internal/validation/validation.go -> internal/validation/validation.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package validation",
          "3: import (",
          "4:  \"errors\"",
          "5:  \"fmt\"",
          "6:  \"reflect\"",
          "8:  \"github.com/openfga/openfga/pkg/tuple\"",
          "9:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "10:  \"github.com/openfga/openfga/storage\"",
          "11:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "12: )",
          "15: func ValidateTuple(typesys *typesystem.TypeSystem, tk *openfgapb.TupleKey) error {",
          "17:  if err := ValidateUser(typesys, tk); err != nil {",
          "18:   return err",
          "19:  }",
          "21:  if err := ValidateObject(typesys, tk); err != nil {",
          "22:   return err",
          "23:  }",
          "25:  if err := ValidateRelation(typesys, tk); err != nil {",
          "26:   return err",
          "27:  }",
          "32:  err := validateTuplesetRestrictions(typesys, tk)",
          "33:  if err != nil {",
          "34:   return err",
          "35:  }",
          "37:  objectType := tuple.GetType(tk.GetObject())",
          "38:  relation := tk.GetRelation()",
          "40:  hasTypeInfo, err := typesys.HasTypeInfo(objectType, relation)",
          "41:  if err != nil {",
          "42:   return err",
          "43:  }",
          "45:  if hasTypeInfo {",
          "46:   err := validateTypeRestrictions(typesys, tk)",
          "47:   if err != nil {",
          "48:    return err",
          "49:   }",
          "50:  }",
          "52:  return nil",
          "53: }",
          "63: func validateTuplesetRestrictions(typesys *typesystem.TypeSystem, tk *openfgapb.TupleKey) error {",
          "65:  objectType := tuple.GetType(tk.GetObject())",
          "66:  relation := tk.GetRelation()",
          "68:  isTupleset, err := typesys.IsTuplesetRelation(objectType, relation)",
          "69:  if err != nil {",
          "70:   return err",
          "71:  }",
          "73:  if !isTupleset {",
          "74:   return nil",
          "75:  }",
          "77:  rel, err := typesys.GetRelation(objectType, relation)",
          "78:  if err != nil {",
          "79:   return err",
          "80:  }",
          "82:  rewrite := rel.GetRewrite().GetUserset()",
          "85:  if rewrite != nil && reflect.TypeOf(rewrite) != reflect.TypeOf(&openfgapb.Userset_This{}) {",
          "86:   return &tuple.InvalidTupleError{",
          "87:    Reason:   fmt.Sprintf(\"unexpected rewrite encountered with tupleset relation '%s#%s'\", objectType, relation),",
          "88:    TupleKey: tk,",
          "89:   }",
          "90:  }",
          "92:  user := tk.GetUser()",
          "96:  if tuple.IsValidObject(user) && !tuple.IsTypedWildcard(user) {",
          "97:   return nil",
          "98:  }",
          "101:  if tuple.IsWildcard(user) {",
          "102:   return &tuple.InvalidTupleError{",
          "103:    Reason:   fmt.Sprintf(\"unexpected wildcard relationship with tupleset relation '%s#%s'\", objectType, relation),",
          "104:    TupleKey: tk,",
          "105:   }",
          "106:  }",
          "109:  if !tuple.IsValidObject(user) {",
          "110:   return &tuple.InvalidTupleError{",
          "111:    Reason:   fmt.Sprintf(\"unexpected user '%s' with tupleset relation '%s#%s'\", user, objectType, relation),",
          "112:    TupleKey: tk,",
          "113:   }",
          "114:  }",
          "116:  return nil",
          "117: }",
          "123: func validateTypeRestrictions(typesys *typesystem.TypeSystem, tk *openfgapb.TupleKey) error {",
          "124:  objectType := tuple.GetType(tk.GetObject())           // e.g. \"doc\"",
          "125:  userType, userID := tuple.SplitObject(tk.GetUser())   // e.g. (person, bob) or (group, abc#member) or (\"\", *)",
          "126:  _, userRel := tuple.SplitObjectRelation(tk.GetUser()) // e.g. (person:bob, \"\") or (group:abc, member) or (*, \"\")",
          "128:  typeDefinitionForObject, ok := typesys.GetTypeDefinition(objectType)",
          "129:  if !ok {",
          "130:   return &tuple.InvalidTupleError{",
          "131:    Reason:   fmt.Sprintf(\"type '%s' does not exist in the authorization model\", objectType),",
          "132:    TupleKey: tk,",
          "133:   }",
          "134:  }",
          "136:  relationsForObject := typeDefinitionForObject.GetMetadata().GetRelations()",
          "138:  relationInformation := relationsForObject[tk.Relation]",
          "141:  if userRel == \"\" && userID != \"*\" {",
          "142:   for _, typeInformation := range relationInformation.GetDirectlyRelatedUserTypes() {",
          "143:    if typeInformation.GetType() == userType {",
          "144:     return nil",
          "145:    }",
          "146:   }",
          "147:  } else if userRel != \"\" { // case 2",
          "148:   for _, typeInformation := range relationInformation.GetDirectlyRelatedUserTypes() {",
          "149:    if typeInformation.GetType() == userType && typeInformation.GetRelation() == userRel {",
          "150:     return nil",
          "151:    }",
          "152:   }",
          "153:  } else if userID == \"*\" { // case 3",
          "154:   for _, typeInformation := range relationInformation.GetDirectlyRelatedUserTypes() {",
          "155:    if typeInformation.GetType() != \"\" && typeInformation.GetRelation() == \"\" {",
          "156:     return nil",
          "157:    }",
          "158:   }",
          "159:  }",
          "161:  return &tuple.InvalidTupleError{Reason: fmt.Sprintf(\"User '%s' is not allowed to have relation %s with %s\", tk.User, tk.Relation, tk.Object), TupleKey: tk}",
          "162: }",
          "168: func FilterInvalidTuples(model *openfgapb.AuthorizationModel) storage.TupleKeyFilterFunc {",
          "170:  return func(tupleKey *openfgapb.TupleKey) bool {",
          "171:   typesys := typesystem.New(model)",
          "173:   err := ValidateTuple(typesys, tupleKey)",
          "174:   return err == nil",
          "175:  }",
          "176: }",
          "181: func ValidateObject(typesys *typesystem.TypeSystem, tk *openfgapb.TupleKey) error {",
          "183:  object := tk.GetObject()",
          "185:  if !tuple.IsValidObject(object) {",
          "186:   return &tuple.InvalidObjectFormatError{TupleKey: tk}",
          "187:  }",
          "189:  objectType := tuple.GetType(object)",
          "190:  _, ok := typesys.GetTypeDefinition(objectType)",
          "191:  if !ok {",
          "192:   return &tuple.TypeNotFoundError{TypeName: objectType}",
          "193:  }",
          "195:  return nil",
          "196: }",
          "201: func ValidateRelation(typesys *typesystem.TypeSystem, tk *openfgapb.TupleKey) error {",
          "203:  object := tk.GetObject()",
          "204:  relation := tk.GetRelation()",
          "206:  if !tuple.IsValidRelation(relation) {",
          "207:   return &tuple.InvalidTupleError{Reason: \"invalid relation\", TupleKey: tk}",
          "208:  }",
          "210:  objectType := tuple.GetType(object)",
          "212:  _, err := typesys.GetRelation(objectType, relation)",
          "213:  if err != nil {",
          "214:   if errors.Is(err, typesystem.ErrObjectTypeUndefined) {",
          "215:    return &tuple.TypeNotFoundError{TypeName: objectType}",
          "216:   }",
          "218:   if errors.Is(err, typesystem.ErrRelationUndefined) {",
          "219:    return &tuple.RelationNotFoundError{Relation: relation, TypeName: objectType, TupleKey: tk}",
          "220:   }",
          "222:   return err",
          "223:  }",
          "225:  return nil",
          "226: }",
          "233: func ValidateUser(typesys *typesystem.TypeSystem, tk *openfgapb.TupleKey) error {",
          "235:  if !tuple.IsValidUser(tk.GetUser()) {",
          "236:   return &tuple.InvalidTupleError{Reason: \"the 'user' field is invalid\", TupleKey: tk}",
          "237:  }",
          "239:  schemaVersion := typesys.GetSchemaVersion()",
          "241:  user := tk.GetUser()",
          "244:  if schemaVersion == typesystem.SchemaVersion1_1 {",
          "245:   if !tuple.IsValidObject(user) && !tuple.IsObjectRelation(user) {",
          "246:    return &tuple.InvalidTupleError{",
          "247:     Reason:   \"the 'user' field must be an object (e.g. document:1) or an 'object#relation' or a typed wildcard (e.g. group:*)\",",
          "248:     TupleKey: tk,",
          "249:    }",
          "250:   }",
          "251:  }",
          "253:  userObject, userRelation := tuple.SplitObjectRelation(user)",
          "254:  userObjectType := tuple.GetType(userObject)",
          "258:  if tuple.IsObjectRelation(user) {",
          "260:   _, err := typesys.GetRelation(userObjectType, userRelation)",
          "261:   if err != nil {",
          "262:    if errors.Is(err, typesystem.ErrObjectTypeUndefined) {",
          "263:     return &tuple.TypeNotFoundError{TypeName: userObjectType}",
          "264:    }",
          "266:    if errors.Is(err, typesystem.ErrRelationUndefined) {",
          "267:     return &tuple.RelationNotFoundError{Relation: userRelation, TypeName: userObjectType, TupleKey: tk}",
          "268:    }",
          "269:   }",
          "270:  }",
          "274:  if schemaVersion == typesystem.SchemaVersion1_1 {",
          "275:   _, ok := typesys.GetTypeDefinition(userObjectType)",
          "276:   if !ok {",
          "277:    return &tuple.TypeNotFoundError{TypeName: userObjectType}",
          "278:   }",
          "279:  }",
          "281:  return nil",
          "282: }",
          "",
          "---------------"
        ],
        "internal/validation/validation_test.go||internal/validation/validation_test.go": [
          "File: internal/validation/validation_test.go -> internal/validation/validation_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package validation",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/openfga/openfga/pkg/tuple\"",
          "7:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "8:  \"github.com/stretchr/testify/require\"",
          "9:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "10: )",
          "12: func TestValidateTuple(t *testing.T) {",
          "14:  tests := []struct {",
          "15:   name          string",
          "16:   tuple         *openfgapb.TupleKey",
          "17:   model         *openfgapb.AuthorizationModel",
          "18:   expectedError error",
          "19:  }{",
          "20:   {",
          "21:    name:  \"malformed_object_1\",",
          "22:    tuple: tuple.NewTupleKey(\"group#group1:member\", \"relation\", \"user:jon\"),",
          "23:    expectedError: &tuple.InvalidObjectFormatError{",
          "24:     TupleKey: tuple.NewTupleKey(\"group#group1:member\", \"relation\", \"user:jon\"),",
          "25:    },",
          "26:   },",
          "27:   {",
          "28:    name:  \"malformed_object_2\",",
          "29:    tuple: tuple.NewTupleKey(\"repo:sand castle\", \"relation\", \"user:jon\"),",
          "30:    expectedError: &tuple.InvalidObjectFormatError{",
          "31:     TupleKey: tuple.NewTupleKey(\"repo:sand castle\", \"relation\", \"user:jon\"),",
          "32:    },",
          "33:   },",
          "34:   {",
          "35:    name:  \"malformed_object_3\",",
          "36:    tuple: tuple.NewTupleKey(\"fga\", \"relation\", \"user:jon\"),",
          "37:    expectedError: &tuple.InvalidObjectFormatError{",
          "38:     TupleKey: tuple.NewTupleKey(\"fga\", \"relation\", \"user:jon\"),",
          "39:    },",
          "40:   },",
          "41:   {",
          "42:    name:  \"malformed_object_4\",",
          "43:    tuple: tuple.NewTupleKey(\"github:org-iam#member\", \"relation\", \"user:jon\"),",
          "44:    expectedError: &tuple.InvalidObjectFormatError{",
          "45:     TupleKey: tuple.NewTupleKey(\"github:org-iam#member\", \"relation\", \"user:jon\"),",
          "46:    },",
          "47:   },",
          "48:   {",
          "49:    name:  \"malformed_object_5\",",
          "50:    tuple: tuple.NewTupleKey(\"group:group:group\", \"relation\", \"user:jon\"),",
          "51:    expectedError: &tuple.InvalidObjectFormatError{",
          "52:     TupleKey: tuple.NewTupleKey(\"group:group:group\", \"relation\", \"user:jon\"),",
          "53:    },",
          "54:   },",
          "55:   {",
          "56:    name:  \"malformed_object_6\",",
          "57:    tuple: tuple.NewTupleKey(\":\", \"relation\", \"user:jon\"),",
          "58:    expectedError: &tuple.InvalidObjectFormatError{",
          "59:     TupleKey: tuple.NewTupleKey(\":\", \"relation\", \"user:jon\"),",
          "60:    },",
          "61:   },",
          "62:   {",
          "63:    name:  \"malformed_relation_1\",",
          "64:    tuple: tuple.NewTupleKey(\"document:1\", \"group#group\", \"user:jon\"),",
          "65:    model: &openfgapb.AuthorizationModel{",
          "66:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "67:      {Type: \"document\"},",
          "68:     },",
          "69:    },",
          "70:    expectedError: &tuple.InvalidTupleError{",
          "71:     Reason:   \"invalid relation\",",
          "72:     TupleKey: tuple.NewTupleKey(\"document:1\", \"group#group\", \"user:jon\"),",
          "73:    },",
          "74:   },",
          "75:   {",
          "76:    name:  \"malformed_relation_2\",",
          "77:    tuple: tuple.NewTupleKey(\"document:1\", \"organization:openfga\", \"user:jon\"),",
          "78:    model: &openfgapb.AuthorizationModel{",
          "79:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "80:      {Type: \"document\"},",
          "81:     },",
          "82:    },",
          "83:    expectedError: &tuple.InvalidTupleError{",
          "84:     Reason:   \"invalid relation\",",
          "85:     TupleKey: tuple.NewTupleKey(\"document:1\", \"organization:openfga\", \"user:jon\"),",
          "86:    },",
          "87:   },",
          "88:   {",
          "89:    name:  \"malformed_relation_3\",",
          "90:    tuple: tuple.NewTupleKey(\"document:1\", \"my relation\", \"user:jon\"),",
          "91:    model: &openfgapb.AuthorizationModel{",
          "92:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "93:      {Type: \"document\"},",
          "94:     },",
          "95:    },",
          "96:    expectedError: &tuple.InvalidTupleError{",
          "97:     Reason:   \"invalid relation\",",
          "98:     TupleKey: tuple.NewTupleKey(\"document:1\", \"my relation\", \"user:jon\"),",
          "99:    },",
          "100:   },",
          "101:   {",
          "102:    name:  \"malformed_user_1\",",
          "103:    tuple: tuple.NewTupleKey(\"document:1\", \"relation\", \"john:albert:doe\"),",
          "104:    expectedError: &tuple.InvalidTupleError{",
          "105:     Reason:   \"the 'user' field is invalid\",",
          "106:     TupleKey: tuple.NewTupleKey(\"document:1\", \"relation\", \"john:albert:doe\"),",
          "107:    },",
          "108:   },",
          "109:   {",
          "110:    name:  \"malformed_user_2\",",
          "111:    tuple: tuple.NewTupleKey(\"document:1\", \"relation\", \"john#albert#doe\"),",
          "112:    expectedError: &tuple.InvalidTupleError{",
          "113:     Reason:   \"the 'user' field is invalid\",",
          "114:     TupleKey: tuple.NewTupleKey(\"document:1\", \"relation\", \"john#albert#doe\"),",
          "115:    },",
          "116:   },",
          "117:   {",
          "118:    name:  \"malformed_user_3\",",
          "119:    tuple: tuple.NewTupleKey(\"document:1\", \"relation\", \"invalid#test:go\"),",
          "120:    expectedError: &tuple.InvalidTupleError{",
          "121:     Reason:   \"the 'user' field is invalid\",",
          "122:     TupleKey: tuple.NewTupleKey(\"document:1\", \"relation\", \"invalid#test:go\"),",
          "123:    },",
          "124:   },",
          "125:   {",
          "126:    name:  \"malformed_user_4\",",
          "127:    tuple: tuple.NewTupleKey(\"document:1\", \"relation\", \"anne@openfga .com\"),",
          "128:    expectedError: &tuple.InvalidTupleError{",
          "129:     Reason:   \"the 'user' field is invalid\",",
          "130:     TupleKey: tuple.NewTupleKey(\"document:1\", \"relation\", \"anne@openfga .com\"),",
          "131:    },",
          "132:   },",
          "133:   {",
          "134:    name:  \"malformed_user_4_(invalid_user_for_1.1_model)\",",
          "135:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"anne\"), // user must be 'object' or 'object#relation' in 1.1 models",
          "136:    model: &openfgapb.AuthorizationModel{",
          "137:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "138:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "139:      {",
          "140:       Type: \"document\",",
          "141:       Relations: map[string]*openfgapb.Userset{",
          "142:        \"viewer\": typesystem.This(),",
          "143:       },",
          "144:      },",
          "145:     },",
          "146:    },",
          "147:    expectedError: &tuple.InvalidTupleError{",
          "148:     Reason:   \"the 'user' field must be an object (e.g. document:1) or an 'object#relation' or a typed wildcard (e.g. group:*)\",",
          "149:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"anne\"),",
          "150:    },",
          "151:   },",
          "152:   {",
          "153:    name:  \"undefined_user_type_(1.1_model)\",",
          "154:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"employee:anne\"),",
          "155:    model: &openfgapb.AuthorizationModel{",
          "156:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "157:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "158:      {",
          "159:       Type: \"user\",",
          "160:      },",
          "161:      {",
          "162:       Type: \"document\",",
          "163:       Relations: map[string]*openfgapb.Userset{",
          "164:        \"viewer\": typesystem.This(),",
          "165:       },",
          "166:       Metadata: &openfgapb.Metadata{",
          "167:        Relations: map[string]*openfgapb.RelationMetadata{",
          "168:         \"viewer\": {",
          "169:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "170:           {Type: \"user\"},",
          "171:          },",
          "172:         },",
          "173:        },",
          "174:       },",
          "175:      },",
          "176:     },",
          "177:    },",
          "178:    expectedError: &tuple.TypeNotFoundError{TypeName: \"employee\"},",
          "179:   },",
          "180:   {",
          "181:    name:  \"undefined_user_type_in_userset_value_(1.1_model)\",",
          "182:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"group:eng#member\"),",
          "183:    model: &openfgapb.AuthorizationModel{",
          "184:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "185:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "186:      {",
          "187:       Type: \"user\",",
          "188:      },",
          "189:      {",
          "190:       Type: \"document\",",
          "191:       Relations: map[string]*openfgapb.Userset{",
          "192:        \"viewer\": typesystem.This(),",
          "193:       },",
          "194:       Metadata: &openfgapb.Metadata{",
          "195:        Relations: map[string]*openfgapb.RelationMetadata{",
          "196:         \"viewer\": {",
          "197:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "198:           {Type: \"user\"},",
          "199:          },",
          "200:         },",
          "201:        },",
          "202:       },",
          "203:      },",
          "204:     },",
          "205:    },",
          "206:    expectedError: &tuple.TypeNotFoundError{TypeName: \"group\"},",
          "207:   },",
          "208:   {",
          "209:    name:  \"undefined_userset_relation_in_userset_value_(1.1_model)\",",
          "210:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"group:eng#member\"),",
          "211:    model: &openfgapb.AuthorizationModel{",
          "212:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "213:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "214:      {",
          "215:       Type: \"user\",",
          "216:      },",
          "217:      {",
          "218:       Type: \"group\",",
          "219:      },",
          "220:      {",
          "221:       Type: \"document\",",
          "222:       Relations: map[string]*openfgapb.Userset{",
          "223:        \"viewer\": typesystem.This(),",
          "224:       },",
          "225:       Metadata: &openfgapb.Metadata{",
          "226:        Relations: map[string]*openfgapb.RelationMetadata{",
          "227:         \"viewer\": {",
          "228:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "229:           {Type: \"user\"},",
          "230:          },",
          "231:         },",
          "232:        },",
          "233:       },",
          "234:      },",
          "235:     },",
          "236:    },",
          "237:    expectedError: &tuple.RelationNotFoundError{",
          "238:     TypeName: \"group\",",
          "239:     Relation: \"member\",",
          "240:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"group:eng#member\"),",
          "241:    },",
          "242:   },",
          "243:   {",
          "244:    name:  \"untyped_wildcard_(1.0_model)\",",
          "245:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"*\"),",
          "246:    model: &openfgapb.AuthorizationModel{",
          "247:     SchemaVersion: typesystem.SchemaVersion1_0,",
          "248:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "249:      {",
          "250:       Type: \"document\",",
          "251:       Relations: map[string]*openfgapb.Userset{",
          "252:        \"viewer\": typesystem.This(),",
          "253:       },",
          "254:      },",
          "255:     },",
          "256:    },",
          "257:   },",
          "258:   {",
          "259:    name:  \"typed_wildcard_with_undefined_object_type\",",
          "260:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"employee:*\"),",
          "261:    model: &openfgapb.AuthorizationModel{",
          "262:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "263:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "264:      {",
          "265:       Type: \"user\",",
          "266:      },",
          "267:      {",
          "268:       Type: \"document\",",
          "269:       Relations: map[string]*openfgapb.Userset{",
          "270:        \"viewer\": typesystem.This(),",
          "271:       },",
          "272:       Metadata: &openfgapb.Metadata{",
          "273:        Relations: map[string]*openfgapb.RelationMetadata{",
          "274:         \"viewer\": {",
          "275:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "276:           {Type: \"user\"},",
          "277:          },",
          "278:         },",
          "279:        },",
          "280:       },",
          "281:      },",
          "282:     },",
          "283:    },",
          "284:    expectedError: &tuple.TypeNotFoundError{TypeName: \"employee\"},",
          "285:   },",
          "286:   {",
          "287:    name:  \"untyped_wildcard_in_1.1_model\",",
          "288:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"*\"),",
          "289:    model: &openfgapb.AuthorizationModel{",
          "290:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "291:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "292:      {",
          "293:       Type: \"user\",",
          "294:      },",
          "295:      {",
          "296:       Type: \"document\",",
          "297:       Relations: map[string]*openfgapb.Userset{",
          "298:        \"viewer\": typesystem.This(),",
          "299:       },",
          "300:       Metadata: &openfgapb.Metadata{",
          "301:        Relations: map[string]*openfgapb.RelationMetadata{",
          "302:         \"viewer\": {",
          "303:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "304:           {Type: \"user\"},",
          "305:          },",
          "306:         },",
          "307:        },",
          "308:       },",
          "309:      },",
          "310:     },",
          "311:    },",
          "312:    expectedError: &tuple.InvalidTupleError{",
          "313:     Reason:   \"the 'user' field must be an object (e.g. document:1) or an 'object#relation' or a typed wildcard (e.g. group:*)\",",
          "314:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"*\"),",
          "315:    },",
          "316:   },",
          "317:   {",
          "318:    name:  \"typed_wildcard_with_valid_object_type_in_1.1_model\",",
          "319:    tuple: tuple.NewTupleKey(\"document:1\", \"viewer\", \"user:*\"),",
          "320:    model: &openfgapb.AuthorizationModel{",
          "321:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "322:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "323:      {",
          "324:       Type: \"user\",",
          "325:      },",
          "326:      {",
          "327:       Type: \"document\",",
          "328:       Relations: map[string]*openfgapb.Userset{",
          "329:        \"viewer\": typesystem.This(),",
          "330:       },",
          "331:       Metadata: &openfgapb.Metadata{",
          "332:        Relations: map[string]*openfgapb.RelationMetadata{",
          "333:         \"viewer\": {",
          "334:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "335:           {Type: \"user\"},",
          "336:           typesystem.WildcardRelationReference(\"user\"),",
          "337:          },",
          "338:         },",
          "339:        },",
          "340:       },",
          "341:      },",
          "342:     },",
          "343:    },",
          "344:   },",
          "345:   {",
          "346:    name:  \"incorrect_user_object_reference_in_tupleset_relation\",",
          "347:    tuple: tuple.NewTupleKey(\"document:1\", \"parent\", \"someuser\"),",
          "348:    model: &openfgapb.AuthorizationModel{",
          "349:     SchemaVersion: typesystem.SchemaVersion1_0,",
          "350:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "351:      {",
          "352:       Type: \"document\",",
          "353:       Relations: map[string]*openfgapb.Userset{",
          "354:        \"parent\": typesystem.This(),",
          "355:        \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "356:       },",
          "357:      },",
          "358:     },",
          "359:    },",
          "360:    expectedError: &tuple.InvalidTupleError{",
          "361:     Reason:   \"unexpected user 'someuser' with tupleset relation 'document#parent'\",",
          "362:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"someuser\"),",
          "363:    },",
          "364:   },",
          "365:   {",
          "366:    name:  \"untyped_wildcard_value_in_tupleset_relation\",",
          "367:    tuple: tuple.NewTupleKey(\"document:1\", \"parent\", \"*\"),",
          "368:    model: &openfgapb.AuthorizationModel{",
          "369:     SchemaVersion: typesystem.SchemaVersion1_0,",
          "370:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "371:      {",
          "372:       Type: \"document\",",
          "373:       Relations: map[string]*openfgapb.Userset{",
          "374:        \"parent\": typesystem.This(),",
          "375:        \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "376:       },",
          "377:      },",
          "378:     },",
          "379:    },",
          "380:    expectedError: &tuple.InvalidTupleError{",
          "381:     Reason:   \"unexpected wildcard relationship with tupleset relation 'document#parent'\",",
          "382:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"*\"),",
          "383:    },",
          "384:   },",
          "385:   {",
          "386:    name:  \"userset_user_value_in_tupleset_relation\",",
          "387:    tuple: tuple.NewTupleKey(\"document:1\", \"ancestor\", \"folder:1#parent\"),",
          "388:    model: &openfgapb.AuthorizationModel{",
          "389:     SchemaVersion: typesystem.SchemaVersion1_0,",
          "390:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "391:      {",
          "392:       Type: \"folder\",",
          "393:       Relations: map[string]*openfgapb.Userset{",
          "394:        \"parent\": typesystem.This(),",
          "395:       },",
          "396:      },",
          "397:      {",
          "398:       Type: \"document\",",
          "399:       Relations: map[string]*openfgapb.Userset{",
          "400:        \"ancestor\": typesystem.This(),",
          "401:        \"viewer\":   typesystem.TupleToUserset(\"ancestor\", \"viewer\"),",
          "402:       },",
          "403:      },",
          "404:     },",
          "405:    },",
          "406:    expectedError: &tuple.InvalidTupleError{",
          "407:     Reason:   \"unexpected user 'folder:1#parent' with tupleset relation 'document#parent'\",",
          "408:     TupleKey: tuple.NewTupleKey(\"document:1\", \"ancestor\", \"folder:1#parent\"),",
          "409:    },",
          "410:   },",
          "411:   {",
          "412:    name:  \"typed_wildcard_value_in_tupleset_relation_(1.1_models)\",",
          "413:    tuple: tuple.NewTupleKey(\"document:1\", \"parent\", \"folder:*\"),",
          "414:    model: &openfgapb.AuthorizationModel{",
          "415:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "416:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "417:      {",
          "418:       Type: \"folder\",",
          "419:       Relations: map[string]*openfgapb.Userset{",
          "420:        \"viewer\": typesystem.This(),",
          "421:       },",
          "422:       Metadata: &openfgapb.Metadata{",
          "423:        Relations: map[string]*openfgapb.RelationMetadata{",
          "424:         \"viewer\": {",
          "425:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "426:           {Type: \"user\"},",
          "427:          },",
          "428:         },",
          "429:        },",
          "430:       },",
          "431:      },",
          "432:      {",
          "433:       Type: \"document\",",
          "434:       Relations: map[string]*openfgapb.Userset{",
          "435:        \"parent\": typesystem.This(),",
          "436:        \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "437:       },",
          "438:       Metadata: &openfgapb.Metadata{",
          "439:        Relations: map[string]*openfgapb.RelationMetadata{",
          "440:         \"parent\": {",
          "441:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "442:           {Type: \"folder\"},",
          "443:          },",
          "444:         },",
          "445:        },",
          "446:       },",
          "447:      },",
          "448:     },",
          "449:    },",
          "450:    expectedError: &tuple.InvalidTupleError{",
          "451:     Reason:   \"unexpected wildcard relationship with tupleset relation 'document#parent'\",",
          "452:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"folder:*\"),",
          "453:    },",
          "454:   },",
          "455:   {",
          "456:    name:  \"tupleset_relation_involving_rewrite_returns_error\",",
          "457:    tuple: tuple.NewTupleKey(\"document:1\", \"parent\", \"folder:1\"),",
          "458:    model: &openfgapb.AuthorizationModel{",
          "459:     SchemaVersion: typesystem.SchemaVersion1_0,",
          "460:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "461:      {",
          "462:       Type: \"folder\",",
          "463:       Relations: map[string]*openfgapb.Userset{",
          "464:        \"viewer\": typesystem.This(),",
          "465:       },",
          "466:      },",
          "467:      {",
          "468:       Type: \"document\",",
          "469:       Relations: map[string]*openfgapb.Userset{",
          "470:        \"parent\": typesystem.ComputedUserset(\"editor\"),",
          "471:        \"editor\": typesystem.This(),",
          "472:        \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "473:       },",
          "474:      },",
          "475:     },",
          "476:    },",
          "477:    expectedError: &tuple.InvalidTupleError{",
          "478:     Reason:   \"unexpected rewrite encountered with tupelset relation 'document#parent'\",",
          "479:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"folder:1\"),",
          "480:    },",
          "481:   },",
          "482:  }",
          "484:  for _, test := range tests {",
          "485:   t.Run(test.name, func(t *testing.T) {",
          "487:    err := ValidateTuple(typesystem.New(test.model), test.tuple)",
          "488:    require.ErrorIs(t, err, test.expectedError)",
          "489:   })",
          "490:  }",
          "491: }",
          "",
          "---------------"
        ],
        "pkg/tuple/tuple.go||pkg/tuple/tuple.go": [
          "File: pkg/tuple/tuple.go -> pkg/tuple/tuple.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  UserSet UserType = \"userset\"",
          "16: )",
          "18: var (",
          "19:  userIDRegex   = regexp.MustCompile(`^[^:#\\s]+$`)",
          "20:  objectRegex   = regexp.MustCompile(`^[^:#\\s]+:[^#:\\s]+$`)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: const Wildcard = \"*\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  return GetType(userset) != \"\" && GetRelation(userset) != \"\"",
          "86: }",
          "96: func ToObjectRelationString(object, relation string) string {",
          "",
          "[Removed Lines]",
          "89: func IsType(object string) bool {",
          "90:  t, id := SplitObject(object)",
          "91:  return t != \"\" && id == \"\"",
          "92: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:  return false",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: func IsWildcard(s string) bool {",
          "134:  return s == Wildcard || IsTypedWildcard(s)",
          "135: }",
          "139: func IsTypedWildcard(s string) bool {",
          "140:  if IsValidObject(s) {",
          "141:   _, id := SplitObject(s)",
          "142:   if id == Wildcard {",
          "143:    return true",
          "144:   }",
          "145:  }",
          "147:  return false",
          "148: }",
          "",
          "---------------"
        ],
        "pkg/tuple/tuple_test.go||pkg/tuple/tuple_test.go": [
          "File: pkg/tuple/tuple_test.go -> pkg/tuple/tuple_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:  }",
          "222: }",
          "224: func TestIsValidUser(t *testing.T) {",
          "225:  for _, tc := range []struct {",
          "226:   name  string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: func TestBuildObject(t *testing.T) {",
          "225:  require.Equal(t, \"document:1\", BuildObject(\"document\", \"1\"))",
          "226:  require.Equal(t, \":\", BuildObject(\"\", \"\"))",
          "227: }",
          "229: func TestGetType(t *testing.T) {",
          "230:  require.Equal(t, \"document\", GetType(\"document:1\"))",
          "231:  require.Equal(t, \"\", GetType(\"doc\"))",
          "232:  require.Equal(t, \"\", GetType(\":\"))",
          "233:  require.Equal(t, \"\", GetType(\"\"))",
          "234: }",
          "236: func TestToObjectRelationString(t *testing.T) {",
          "237:  require.Equal(t, \"document:1#viewer\", ToObjectRelationString(\"document:1\", \"viewer\"))",
          "238:  require.Equal(t, \"#viewer\", ToObjectRelationString(\"\", \"viewer\"))",
          "239:  require.Equal(t, \"#\", ToObjectRelationString(\"\", \"\"))",
          "240: }",
          "242: func TestTupleKeyToString(t *testing.T) {",
          "243:  require.Equal(t, \"document:1#viewer@jon\", TupleKeyToString(NewTupleKey(\"document:1\", \"viewer\", \"jon\")))",
          "244:  require.Equal(t, \"document:1#viewer@user:bob\", TupleKeyToString(NewTupleKey(\"document:1\", \"viewer\", \"user:bob\")))",
          "245:  require.Equal(t, \"document:1#viewer@\", TupleKeyToString(NewTupleKey(\"document:1\", \"viewer\", \"\")))",
          "246:  require.Equal(t, \"document:1#@jon\", TupleKeyToString(NewTupleKey(\"document:1\", \"\", \"jon\")))",
          "247:  require.Equal(t, \"#viewer@jon\", TupleKeyToString(NewTupleKey(\"\", \"viewer\", \"jon\")))",
          "248:  require.Equal(t, \"#@\", TupleKeyToString(NewTupleKey(\"\", \"\", \"\")))",
          "249: }",
          "251: func TestIsWildcard(t *testing.T) {",
          "252:  require.Equal(t, true, IsWildcard(\"*\"))",
          "253:  require.Equal(t, true, IsWildcard(\"user:*\"))",
          "254:  require.Equal(t, false, IsWildcard(\"user:jon\"))",
          "255:  require.Equal(t, false, IsWildcard(\"jon\"))",
          "256: }",
          "258: func TestIsTypedWildcard(t *testing.T) {",
          "259:  require.Equal(t, false, IsTypedWildcard(\"*\"))",
          "260:  require.Equal(t, true, IsTypedWildcard(\"user:*\"))",
          "261:  require.Equal(t, false, IsTypedWildcard(\"user:jon\"))",
          "262:  require.Equal(t, false, IsTypedWildcard(\"jon\"))",
          "263: }",
          "",
          "---------------"
        ],
        "pkg/tuple/validation.go||pkg/tuple/validation.go": [
          "File: pkg/tuple/validation.go -> pkg/tuple/validation.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  return fmt.Sprintf(\"Invalid tuple '%s'. Reason: %s\", i.TupleKey, i.Reason)",
          "19: }",
          "22: type InvalidObjectFormatError struct {",
          "23:  TupleKey *openfgapb.TupleKey",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: func (i *InvalidTupleError) Is(target error) bool {",
          "22:  _, ok := target.(*InvalidTupleError)",
          "23:  return ok",
          "24: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:  return fmt.Sprintf(\"Invalid object format '%s'.\", i.TupleKey.String())",
          "28: }",
          "31: type TypeNotFoundError struct {",
          "32:  TypeName string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: func (i *InvalidObjectFormatError) Is(target error) bool {",
          "36:  _, ok := target.(*InvalidObjectFormatError)",
          "37:  return ok",
          "38: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:  return fmt.Sprintf(\"Type not found for %s\", i.TypeName)",
          "37: }",
          "40: type RelationNotFoundError struct {",
          "41:  TupleKey *openfgapb.TupleKey",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: func (i *TypeNotFoundError) Is(target error) bool {",
          "50:  _, ok := target.(*TypeNotFoundError)",
          "51:  return ok",
          "52: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47:  return fmt.Sprintf(\"Relation '%s' not found in type definition '%s' for tuple (%s)\", i.Relation, i.TypeName, i.TupleKey.String())",
          "48: }",
          "51: type IndirectWriteError struct {",
          "52:  Reason   string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: func (i *RelationNotFoundError) Is(target error) bool {",
          "66:  _, ok := target.(*RelationNotFoundError)",
          "67:  return ok",
          "68: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "56: func (i *IndirectWriteError) Error() string {",
          "57:  return fmt.Sprintf(\"Cannot write tuple '%s'. Reason: %s\", i.TupleKey, i.Reason)",
          "58: }",
          "",
          "[Removed Lines]",
          "61: func ValidateUser(tk *openfgapb.TupleKey) error {",
          "62:  if !IsValidUser(tk.GetUser()) {",
          "63:   return &InvalidTupleError{Reason: \"the 'user' field is invalid\", TupleKey: tk}",
          "64:  }",
          "65:  return nil",
          "66: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
          "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: }",
          "107: type TypeSystem struct {",
          "108:  schemaVersion   string",
          "109:  typeDefinitions map[string]*openfgapb.TypeDefinition",
          "110: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:  model           *openfgapb.AuthorizationModel",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  }",
          "120:  return &TypeSystem{",
          "121:   schemaVersion:   model.GetSchemaVersion(),",
          "122:   typeDefinitions: tds,",
          "123:  }",
          "124: }",
          "126: func (t *TypeSystem) GetSchemaVersion() string {",
          "127:  return t.schemaVersion",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   model:           model,",
          "130: func (t *TypeSystem) GetAuthorizationModel() *openfgapb.AuthorizationModel {",
          "131:  return t.model",
          "132: }",
          "136: func (t *TypeSystem) GetAuthorizationModelID() string {",
          "137:  return t.model.GetId()",
          "138: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "558: func validateRelationTypeRestrictions(model *openfgapb.AuthorizationModel) error {",
          "559:  t := New(model)",
          "562:  for objectType := range t.typeDefinitions {",
          "563:   relations, err := t.GetRelations(objectType)",
          "",
          "[Removed Lines]",
          "560:  allTupleToUsersetDefinitions := t.GetAllTupleToUsersetsDefinitions()",
          "",
          "[Added Lines]",
          "574:  allTupleToUsersetDefinitions := t.getAllTupleToUsersetsDefinitions()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "748:  return fmt.Errorf(\"the relation type '%s' on '%s' in object type '%s' is not valid\", relationType, relation, objectType)",
          "749: }",
          "754:  response := make(map[string]map[string][]*openfgapb.TupleToUserset, 0)",
          "755:  for typeName, typeDef := range t.GetTypeDefinitions() {",
          "756:   response[typeName] = make(map[string][]*openfgapb.TupleToUserset, 0)",
          "757:   for relationName, relationDef := range typeDef.GetRelations() {",
          "758:    ttus := make([]*openfgapb.TupleToUserset, 0)",
          "760:   }",
          "761:  }",
          "762:  return response",
          "763: }",
          "766:  if relationDef.GetTupleToUserset() != nil {",
          "768:  }",
          "769:  if relationDef.GetUnion() != nil {",
          "770:   for _, child := range relationDef.GetUnion().GetChild() {",
          "772:   }",
          "773:  }",
          "774:  if relationDef.GetIntersection() != nil {",
          "775:   for _, child := range relationDef.GetIntersection().GetChild() {",
          "777:   }",
          "778:  }",
          "779:  if relationDef.GetDifference() != nil {",
          "782:  }",
          "783:  return *resp",
          "784: }",
          "",
          "[Removed Lines]",
          "753: func (t *TypeSystem) GetAllTupleToUsersetsDefinitions() map[string]map[string][]*openfgapb.TupleToUserset {",
          "759:    response[typeName][relationName] = t.getAllTupleToUsersetsDefinitions(relationDef, &ttus)",
          "765: func (t *TypeSystem) getAllTupleToUsersetsDefinitions(relationDef *openfgapb.Userset, resp *[]*openfgapb.TupleToUserset) []*openfgapb.TupleToUserset {",
          "771:    t.getAllTupleToUsersetsDefinitions(child, resp)",
          "776:    t.getAllTupleToUsersetsDefinitions(child, resp)",
          "780:   t.getAllTupleToUsersetsDefinitions(relationDef.GetDifference().GetBase(), resp)",
          "781:   t.getAllTupleToUsersetsDefinitions(relationDef.GetDifference().GetSubtract(), resp)",
          "",
          "[Added Lines]",
          "767: func (t *TypeSystem) getAllTupleToUsersetsDefinitions() map[string]map[string][]*openfgapb.TupleToUserset {",
          "773:    response[typeName][relationName] = t.tupleToUsersetsDefinitions(relationDef, &ttus)",
          "782: func (t *TypeSystem) IsTuplesetRelation(objectType, relation string) (bool, error) {",
          "784:  _, err := t.GetRelation(objectType, relation)",
          "785:  if err != nil {",
          "786:   return false, err",
          "787:  }",
          "789:  for _, ttuDefinitions := range t.getAllTupleToUsersetsDefinitions()[objectType] {",
          "790:   for _, ttuDef := range ttuDefinitions {",
          "791:    if ttuDef.Tupleset.Relation == relation {",
          "792:     return true, nil",
          "793:    }",
          "794:   }",
          "795:  }",
          "797:  return false, nil",
          "798: }",
          "800: func (t *TypeSystem) tupleToUsersetsDefinitions(relationDef *openfgapb.Userset, resp *[]*openfgapb.TupleToUserset) []*openfgapb.TupleToUserset {",
          "806:    t.tupleToUsersetsDefinitions(child, resp)",
          "811:    t.tupleToUsersetsDefinitions(child, resp)",
          "815:   t.tupleToUsersetsDefinitions(relationDef.GetDifference().GetBase(), resp)",
          "816:   t.tupleToUsersetsDefinitions(relationDef.GetDifference().GetSubtract(), resp)",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1306:   })",
          "1307:  }",
          "1308: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1310: func TestIsTuplesetRelation(t *testing.T) {",
          "1312:  tests := []struct {",
          "1313:   name          string",
          "1314:   model         *openfgapb.AuthorizationModel",
          "1315:   objectType    string",
          "1316:   relation      string",
          "1317:   expected      bool",
          "1318:   expectedError error",
          "1319:  }{",
          "1320:   {",
          "1321:    name:          \"undefined_object_type_returns_error\",",
          "1322:    objectType:    \"document\",",
          "1323:    relation:      \"viewer\",",
          "1324:    expected:      false,",
          "1325:    expectedError: ErrObjectTypeUndefined,",
          "1326:   },",
          "1327:   {",
          "1328:    name: \"undefined_relation_returns_error\",",
          "1329:    model: &openfgapb.AuthorizationModel{",
          "1330:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1331:      {",
          "1332:       Type: \"document\",",
          "1333:      },",
          "1334:     },",
          "1335:    },",
          "1336:    objectType:    \"document\",",
          "1337:    relation:      \"viewer\",",
          "1338:    expected:      false,",
          "1339:    expectedError: ErrRelationUndefined,",
          "1340:   },",
          "1341:   {",
          "1342:    name: \"direct_tupleset_relation\",",
          "1343:    model: &openfgapb.AuthorizationModel{",
          "1344:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1345:      {",
          "1346:       Type: \"document\",",
          "1347:       Relations: map[string]*openfgapb.Userset{",
          "1348:        \"parent\": This(),",
          "1349:        \"viewer\": TupleToUserset(\"parent\", \"viewer\"),",
          "1350:       },",
          "1351:      },",
          "1352:     },",
          "1353:    },",
          "1354:    objectType: \"document\",",
          "1355:    relation:   \"parent\",",
          "1356:    expected:   true,",
          "1357:   },",
          "1358:   {",
          "1359:    name: \"tupleset_relation_under_union\",",
          "1360:    model: &openfgapb.AuthorizationModel{",
          "1361:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1362:      {",
          "1363:       Type: \"document\",",
          "1364:       Relations: map[string]*openfgapb.Userset{",
          "1365:        \"parent\": This(),",
          "1366:        \"viewer\": Union(",
          "1367:         This(),",
          "1368:         TupleToUserset(\"parent\", \"viewer\"),",
          "1369:        ),",
          "1370:       },",
          "1371:      },",
          "1372:     },",
          "1373:    },",
          "1374:    objectType: \"document\",",
          "1375:    relation:   \"parent\",",
          "1376:    expected:   true,",
          "1377:   },",
          "1378:   {",
          "1379:    name: \"tupleset_relation_under_intersection\",",
          "1380:    model: &openfgapb.AuthorizationModel{",
          "1381:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1382:      {",
          "1383:       Type: \"document\",",
          "1384:       Relations: map[string]*openfgapb.Userset{",
          "1385:        \"parent\": This(),",
          "1386:        \"viewer\": Intersection(",
          "1387:         This(),",
          "1388:         TupleToUserset(\"parent\", \"viewer\"),",
          "1389:        ),",
          "1390:       },",
          "1391:      },",
          "1392:     },",
          "1393:    },",
          "1394:    objectType: \"document\",",
          "1395:    relation:   \"parent\",",
          "1396:    expected:   true,",
          "1397:   },",
          "1398:   {",
          "1399:    name: \"tupleset_relation_under_exclusion\",",
          "1400:    model: &openfgapb.AuthorizationModel{",
          "1401:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1402:      {",
          "1403:       Type: \"document\",",
          "1404:       Relations: map[string]*openfgapb.Userset{",
          "1405:        \"parent\": This(),",
          "1406:        \"viewer\": Difference(",
          "1407:         This(),",
          "1408:         TupleToUserset(\"parent\", \"viewer\"),",
          "1409:        ),",
          "1410:       },",
          "1411:      },",
          "1412:     },",
          "1413:    },",
          "1414:    objectType: \"document\",",
          "1415:    relation:   \"parent\",",
          "1416:    expected:   true,",
          "1417:   },",
          "1418:   {",
          "1419:    name: \"tupleset_relation_under_nested_union\",",
          "1420:    model: &openfgapb.AuthorizationModel{",
          "1421:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1422:      {",
          "1423:       Type: \"document\",",
          "1424:       Relations: map[string]*openfgapb.Userset{",
          "1425:        \"parent\": This(),",
          "1426:        \"viewer\": Intersection(",
          "1427:         This(),",
          "1428:         Union(TupleToUserset(\"parent\", \"viewer\")),",
          "1429:        ),",
          "1430:       },",
          "1431:      },",
          "1432:     },",
          "1433:    },",
          "1434:    objectType: \"document\",",
          "1435:    relation:   \"parent\",",
          "1436:    expected:   true,",
          "1437:   },",
          "1438:   {",
          "1439:    name: \"tupleset_relation_under_nested_intersection\",",
          "1440:    model: &openfgapb.AuthorizationModel{",
          "1441:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1442:      {",
          "1443:       Type: \"document\",",
          "1444:       Relations: map[string]*openfgapb.Userset{",
          "1445:        \"parent\": This(),",
          "1446:        \"viewer\": Union(",
          "1447:         This(),",
          "1448:         Intersection(TupleToUserset(\"parent\", \"viewer\")),",
          "1449:        ),",
          "1450:       },",
          "1451:      },",
          "1452:     },",
          "1453:    },",
          "1454:    objectType: \"document\",",
          "1455:    relation:   \"parent\",",
          "1456:    expected:   true,",
          "1457:   },",
          "1458:   {",
          "1459:    name: \"tupleset_relation_under_nested_exclusion\",",
          "1460:    model: &openfgapb.AuthorizationModel{",
          "1461:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1462:      {",
          "1463:       Type: \"document\",",
          "1464:       Relations: map[string]*openfgapb.Userset{",
          "1465:        \"parent\": This(),",
          "1466:        \"viewer\": Union(",
          "1467:         This(),",
          "1468:         Difference(This(), TupleToUserset(\"parent\", \"viewer\")),",
          "1469:        ),",
          "1470:       },",
          "1471:      },",
          "1472:     },",
          "1473:    },",
          "1474:    objectType: \"document\",",
          "1475:    relation:   \"parent\",",
          "1476:    expected:   true,",
          "1477:   },",
          "1478:   {",
          "1479:    name: \"not_a_tupleset_relation\",",
          "1480:    model: &openfgapb.AuthorizationModel{",
          "1481:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1482:      {",
          "1483:       Type: \"document\",",
          "1484:       Relations: map[string]*openfgapb.Userset{",
          "1485:        \"parent\": This(),",
          "1486:        \"viewer\": TupleToUserset(\"parent\", \"viewer\"),",
          "1487:       },",
          "1488:      },",
          "1489:     },",
          "1490:    },",
          "1491:    objectType: \"document\",",
          "1492:    relation:   \"viewer\",",
          "1493:    expected:   false,",
          "1494:   },",
          "1495:  }",
          "1497:  for _, test := range tests {",
          "1498:   t.Run(test.name, func(t *testing.T) {",
          "1499:    typesys := New(test.model)",
          "1501:    actual, err := typesys.IsTuplesetRelation(test.objectType, test.relation)",
          "1502:    require.ErrorIs(t, err, test.expectedError)",
          "1503:    require.Equal(t, test.expected, actual)",
          "1504:   })",
          "1505:  }",
          "1506: }",
          "",
          "---------------"
        ],
        "server/commands/check.go||server/commands/check.go": [
          "File: server/commands/check.go -> server/commands/check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"sync\"",
          "10:  \"github.com/openfga/openfga/internal/utils\"",
          "11:  \"github.com/openfga/openfga/pkg/logger\"",
          "12:  tupleUtils \"github.com/openfga/openfga/pkg/tuple\"",
          "13:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "14:  serverErrors \"github.com/openfga/openfga/server/errors\"",
          "16:  \"github.com/openfga/openfga/storage\"",
          "17:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "18:  \"go.opentelemetry.io/otel/attribute\"",
          "",
          "[Removed Lines]",
          "15:  \"github.com/openfga/openfga/server/validation\"",
          "",
          "[Added Lines]",
          "11:  \"github.com/openfga/openfga/internal/validation\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  \"golang.org/x/sync/errgroup\"",
          "25: )",
          "31: type CheckQuery struct {",
          "",
          "[Removed Lines]",
          "27: const Wildcard = \"*\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  model, err := query.datastore.ReadAuthorizationModel(ctx, req.GetStoreId(), req.GetAuthorizationModelId())",
          "70:  if err != nil {",
          "72:    return nil, serverErrors.AuthorizationModelNotFound(req.GetAuthorizationModelId())",
          "73:   }",
          "",
          "[Removed Lines]",
          "71:   if err == storage.ErrNotFound {",
          "",
          "[Added Lines]",
          "69:   if errors.Is(err, storage.ErrNotFound) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:  typesys := typesystem.New(model)",
          "83:  if err != nil {",
          "84:   return nil, err",
          "85:  }",
          "86:  if userset == nil {",
          "89:   return nil, serverErrors.HandleTupleValidateError(actualErr)",
          "90:  }",
          "",
          "[Removed Lines]",
          "80:  rc := newResolutionContext(req.GetStoreId(), req.GetAuthorizationModelId(), tk, contextualTuples, resolutionTracer, utils.NewResolutionMetadata(), &circuitBreaker{breakerState: false})",
          "82:  userset, err := query.getTypeDefinitionRelationUsersets(ctx, rc)",
          "88:   _, actualErr := validation.ValidateTuple(ctx, query.datastore, rc.store, rc.modelID, rc.tk)",
          "",
          "[Added Lines]",
          "78:  rc := newResolutionContext(req.GetStoreId(), model, tk, contextualTuples, resolutionTracer, utils.NewResolutionMetadata(), &circuitBreaker{breakerState: false})",
          "80:  userset, err := getTypeDefinitionRelationUsersets(rc.tk, typesys)",
          "86:   actualErr := validation.ValidateTuple(typesys, rc.tk)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110: }",
          "118:  if err != nil {",
          "120:   return nil, nil",
          "121:  }",
          "123: }",
          "",
          "[Removed Lines]",
          "113: func (query *CheckQuery) getTypeDefinitionRelationUsersets(ctx context.Context, rc *resolutionContext) (*openfgapb.Userset, error) {",
          "114:  ctx, span := query.tracer.Start(ctx, \"getTypeDefinitionRelationUsersets\")",
          "115:  defer span.End()",
          "117:  userset, err := validation.ValidateTuple(ctx, query.datastore, rc.store, rc.modelID, rc.tk)",
          "122:  return userset, nil",
          "",
          "[Added Lines]",
          "111: func getTypeDefinitionRelationUsersets(tk *openfgapb.TupleKey, typesys *typesystem.TypeSystem) (*openfgapb.Userset, error) {",
          "113:  objectType := tupleUtils.GetType(tk.GetObject())",
          "115:  relation, err := typesys.GetRelation(objectType, tk.GetRelation())",
          "116:  if err != nil {",
          "117:   if errors.Is(err, typesystem.ErrObjectTypeUndefined) {",
          "118:    return nil, serverErrors.HandleTupleValidateError(",
          "119:     &tupleUtils.TypeNotFoundError{",
          "120:      TypeName: objectType,",
          "121:     },",
          "122:    )",
          "123:   }",
          "125:   if errors.Is(err, typesystem.ErrRelationUndefined) {",
          "126:    return nil, serverErrors.HandleTupleValidateError(",
          "127:     &tupleUtils.RelationNotFoundError{",
          "128:      TypeName: objectType,",
          "129:      Relation: tk.GetRelation(),",
          "130:      TupleKey: tk,",
          "131:     },",
          "132:    )",
          "133:   }",
          "135:   return nil, err",
          "136:  }",
          "138:  err = validation.ValidateTuple(typesys, tk)",
          "144:  return relation.GetRewrite(), nil",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:    query.logger.Warn(",
          "172:     fmt.Sprintf(\"unexpected rewrite on tupleset relation '%s#%s'\", objectType, tupleset),",
          "173:     zap.String(\"store_id\", rc.store),",
          "175:     zap.String(\"object_type\", objectType),",
          "176:     zap.String(\"relation\", tupleset),",
          "177:    )",
          "",
          "[Removed Lines]",
          "174:     zap.String(\"authorization_model_id\", rc.modelID),",
          "",
          "[Added Lines]",
          "197:     zap.String(\"authorization_model_id\", rc.model.Id),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:  computedTK := &openfgapb.TupleKey{Object: rc.tk.GetObject(), Relation: nodes.ComputedUserset.GetRelation(), User: rc.tk.GetUser()}",
          "198:  tracer := rc.tracer.AppendComputed().AppendString(tupleUtils.ToObjectRelationString(computedTK.GetObject(), computedTK.GetRelation()))",
          "199:  nestedRC := rc.fork(computedTK, tracer, false)",
          "201:  if err != nil {",
          "202:   return err",
          "203:  }",
          "",
          "[Removed Lines]",
          "200:  userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC)",
          "",
          "[Added Lines]",
          "223:  userset, err := getTypeDefinitionRelationUsersets(nestedRC.tk, typesys)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284:   go func(c chan<- *chanResolveResult) {",
          "285:    defer wg.Done()",
          "288:    if err == nil {",
          "289:     err = query.resolveNode(ctx, nestedRC, userset, typesys)",
          "290:    }",
          "",
          "[Removed Lines]",
          "287:    userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC)",
          "",
          "[Added Lines]",
          "310:    userset, err := getTypeDefinitionRelationUsersets(nestedRC.tk, typesys)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "372:  for idx, userset := range nodes.Intersection.Child {",
          "373:   idx, userset := idx, userset",
          "374:   tracer := rc.tracer.AppendIndex(idx)",
          "376:   grp.Go(func() error {",
          "377:    err := query.resolveNode(ctx, nestedRC, userset, typesys)",
          "378:    if err != nil {",
          "",
          "[Removed Lines]",
          "375:   nestedRC := newResolutionContext(rc.store, rc.modelID, rc.tk, rc.contextualTuples, tracer, rc.metadata, breaker)",
          "",
          "[Added Lines]",
          "398:   nestedRC := newResolutionContext(rc.store, rc.model, rc.tk, rc.contextualTuples, tracer, rc.metadata, breaker)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "441:  for idx, set := range sets {",
          "442:   idx, set := idx, set",
          "443:   tracer := rc.tracer.AppendIndex(idx)",
          "445:   grp.Go(func() error {",
          "446:    err := query.resolveNode(ctx, nestedRC, set, typesys)",
          "447:    if err != nil {",
          "",
          "[Removed Lines]",
          "444:   nestedRC := newResolutionContext(rc.store, rc.modelID, rc.tk, rc.contextualTuples, tracer, rc.metadata, breaker)",
          "",
          "[Added Lines]",
          "467:   nestedRC := newResolutionContext(rc.store, rc.model, rc.tk, rc.contextualTuples, tracer, rc.metadata, breaker)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "525:   }",
          "527:   userObj, userRel := tupleUtils.SplitObjectRelation(tuple.GetUser()) // userObj=folder:budgets, userRel=\"\"",
          "564:   usersetRel := node.TupleToUserset.GetComputedUserset().GetRelation() //reader",
          "565:   if userRel == \"\" {",
          "",
          "[Removed Lines]",
          "528:   objectType, _ := tupleUtils.SplitObject(rc.tk.GetObject())",
          "530:   if userObj == Wildcard {",
          "531:    query.logger.WarnWithContext(",
          "532:     ctx,",
          "533:     fmt.Sprintf(\"unexpected wildcard evaluated on tupleset relation '%s#%s'\", objectType, relation),",
          "534:     zap.String(\"store_id\", rc.store),",
          "535:     zap.String(\"authorization_model_id\", rc.modelID),",
          "536:     zap.String(\"object_type\", objectType),",
          "537:    )",
          "539:    return serverErrors.InvalidTuple(",
          "540:     fmt.Sprintf(\"unexpected wildcard evaluated on relation '%s#%s'\", objectType, relation),",
          "541:     tupleUtils.NewTupleKey(rc.tk.GetObject(), relation, Wildcard),",
          "542:    )",
          "543:   }",
          "545:   if tupleUtils.UserSet == tupleUtils.GetUserTypeFromUser(tuple.GetUser()) {",
          "546:    query.logger.WarnWithContext(",
          "547:     ctx,",
          "548:     fmt.Sprintf(\"unexpected userset evaluated on tupleset relation '%s#%s'\", objectType, relation),",
          "549:     zap.String(\"store_id\", rc.store),",
          "550:     zap.String(\"authorization_model_id\", rc.modelID),",
          "551:     zap.String(\"object_type\", objectType),",
          "552:    )",
          "554:    return serverErrors.InvalidTuple(",
          "555:     fmt.Sprintf(\"unexpected userset evaluated on relation '%s#%s'\", tupleUtils.GetType(rc.tk.GetObject()), relation),",
          "556:     tupleUtils.NewTupleKey(tuple.GetObject(), relation, tuple.GetUser()),",
          "557:    )",
          "558:   }",
          "560:   if !tupleUtils.IsValidObject(userObj) {",
          "561:    continue // TupleToUserset tuplesets should be of the form 'objectType:id' or 'objectType:id#relation' but are not guaranteed to be because it is neither a user or userset",
          "562:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "584:   go func(c chan<- *chanResolveResult) {",
          "585:    defer wg.Done()",
          "588:    if err == nil {",
          "589:     err = query.resolveNode(ctx, nestedRC, userset, typesys)",
          "590:    }",
          "",
          "[Removed Lines]",
          "587:    userset, err := query.getTypeDefinitionRelationUsersets(ctx, nestedRC) // folder:budgets#reader",
          "",
          "[Added Lines]",
          "575:    userset, err := getTypeDefinitionRelationUsersets(nestedRC.tk, typesys) // folder:budgets#reader",
          "",
          "---------------"
        ],
        "server/commands/check_utils.go||server/commands/check_utils.go": [
          "File: server/commands/check_utils.go -> server/commands/check_utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"sync\"",
          "8:  \"github.com/openfga/openfga/internal/utils\"",
          "9:  tupleUtils \"github.com/openfga/openfga/pkg/tuple\"",
          "10:  serverErrors \"github.com/openfga/openfga/server/errors\"",
          "11:  \"github.com/openfga/openfga/storage\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"github.com/openfga/openfga/internal/validation\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:  var found bool",
          "196:  var rt resolutionTracer",
          "197:  if rt, found = u.u[value]; !found {",
          "199:    return nil, false",
          "200:   }",
          "201:  }",
          "",
          "[Removed Lines]",
          "198:   if rt, found = u.u[Wildcard]; !found {",
          "",
          "[Added Lines]",
          "199:   if rt, found = u.u[tupleUtils.Wildcard]; !found {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270: type resolutionContext struct {",
          "271:  store            string",
          "273:  users            *userSet",
          "274:  targetUser       string",
          "275:  tk               *openfgapb.TupleKey",
          "",
          "[Removed Lines]",
          "272:  modelID          string",
          "",
          "[Added Lines]",
          "273:  model            *openfgapb.AuthorizationModel",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:  externalCB       *circuitBreaker // Open is controlled from caller, Used for Difference and Intersection.",
          "281: }",
          "284:  return &resolutionContext{",
          "285:   store:            store,",
          "287:   users:            newUserSet(),",
          "288:   targetUser:       tk.GetUser(),",
          "289:   tk:               tk,",
          "",
          "[Removed Lines]",
          "283: func newResolutionContext(store, modelID string, tk *openfgapb.TupleKey, contextualTuples *contextualTuples, tracer resolutionTracer, metadata *utils.ResolutionMetadata, externalBreaker *circuitBreaker) *resolutionContext {",
          "286:   modelID:          modelID,",
          "",
          "[Added Lines]",
          "284: func newResolutionContext(store string, model *openfgapb.AuthorizationModel, tk *openfgapb.TupleKey, contextualTuples *contextualTuples, tracer resolutionTracer, metadata *utils.ResolutionMetadata, externalBreaker *circuitBreaker) *resolutionContext {",
          "287:   model:            model,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "323:  return &resolutionContext{",
          "324:   store:            rc.store,",
          "326:   users:            rc.users,",
          "327:   targetUser:       rc.targetUser,",
          "328:   tk:               tk,",
          "",
          "[Removed Lines]",
          "325:   modelID:          rc.modelID,",
          "",
          "[Added Lines]",
          "326:   model:            rc.model,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "357:  iter1 := storage.NewStaticTupleKeyIterator(cUsersetTuples)",
          "358:  iter2 := storage.NewTupleKeyIteratorFromTupleIterator(usersetTuples)",
          "361: }",
          "363: func (rc *resolutionContext) read(ctx context.Context, backend storage.TupleBackend, tk *openfgapb.TupleKey) (storage.TupleKeyIterator, error) {",
          "",
          "[Removed Lines]",
          "360:  return storage.NewCombinedIterator(iter1, iter2), nil",
          "",
          "[Added Lines]",
          "361:  return storage.NewFilteredTupleKeyIterator(",
          "362:   storage.NewCombinedIterator(iter1, iter2),",
          "363:   validation.FilterInvalidTuples(rc.model),",
          "364:  ), nil",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "370:  iter1 := storage.NewStaticTupleKeyIterator(cTuples)",
          "371:  iter2 := storage.NewTupleKeyIteratorFromTupleIterator(tuples)",
          "374: }",
          "376: type contextualTuples struct {",
          "",
          "[Removed Lines]",
          "373:  return storage.NewCombinedIterator(iter1, iter2), nil",
          "",
          "[Added Lines]",
          "377:  return storage.NewFilteredTupleKeyIterator(",
          "378:   storage.NewCombinedIterator(iter1, iter2),",
          "379:   validation.FilterInvalidTuples(rc.model),",
          "380:  ), nil",
          "",
          "---------------"
        ],
        "server/commands/connected_objects.go||server/commands/connected_objects.go": [
          "File: server/commands/connected_objects.go -> server/commands/connected_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   targetUserStr := req.targetUserRef.GetObject()",
          "157:   userObj, _ := tuple.SplitObjectRelation(t.GetUser())",
          "159:    tuples = append(tuples, &openfgapb.Tuple{Key: t})",
          "160:   }",
          "161:  }",
          "",
          "[Removed Lines]",
          "158:   if userObj == targetUserStr || userObj == Wildcard {",
          "",
          "[Added Lines]",
          "158:   if userObj == targetUserStr || userObj == tuple.Wildcard {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:   Relation:   tuplesetRelation,",
          "167:   UserFilter: []*openfgapb.ObjectRelation{",
          "168:    {Object: req.targetUserRef.Object},",
          "170:   },",
          "171:  })",
          "172:  if err != nil {",
          "",
          "[Removed Lines]",
          "169:    {Object: Wildcard},",
          "",
          "[Added Lines]",
          "169:    {Object: tuple.Wildcard},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:   userObj, _ := tuple.SplitObjectRelation(tk.GetUser())",
          "200:    return serverErrors.InvalidTuple(",
          "201:     fmt.Sprintf(\"unexpected wildcard evaluated on relation '%s#%s'\", foundObjectType, tuplesetRelation),",
          "203:    )",
          "204:   }",
          "",
          "[Removed Lines]",
          "198:   if userObj == Wildcard {",
          "202:     tuple.NewTupleKey(foundObject, tuplesetRelation, Wildcard),",
          "",
          "[Added Lines]",
          "198:   if userObj == tuple.Wildcard {",
          "202:     tuple.NewTupleKey(foundObject, tuplesetRelation, tuple.Wildcard),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:    targetUserStr = fmt.Sprintf(\"%s#%s\", targetUserStr, req.targetUserRef.GetRelation())",
          "268:   }",
          "271:    tuples = append(tuples, &openfgapb.Tuple{Key: t})",
          "272:   }",
          "273:  }",
          "",
          "[Removed Lines]",
          "270:   if t.GetUser() == targetUserStr || t.GetUser() == Wildcard {",
          "",
          "[Added Lines]",
          "270:   if t.GetUser() == targetUserStr || t.GetUser() == tuple.Wildcard {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:   Relation:   ingress.GetRelation(),",
          "279:   UserFilter: []*openfgapb.ObjectRelation{",
          "280:    req.targetUserRef,",
          "282:   },",
          "283:  })",
          "284:  if err != nil {",
          "",
          "[Removed Lines]",
          "281:    {Object: Wildcard},",
          "",
          "[Added Lines]",
          "281:    {Object: tuple.Wildcard},",
          "",
          "---------------"
        ],
        "server/commands/expand.go||server/commands/expand.go": [
          "File: server/commands/expand.go -> server/commands/expand.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"errors\"",
          "9:  \"github.com/openfga/openfga/pkg/logger\"",
          "10:  tupleUtils \"github.com/openfga/openfga/pkg/tuple\"",
          "11:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "12:  serverErrors \"github.com/openfga/openfga/server/errors\"",
          "14:  \"github.com/openfga/openfga/storage\"",
          "15:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "16:  \"go.opentelemetry.io/otel/trace\"",
          "18:  \"golang.org/x/sync/errgroup\"",
          "19: )",
          "",
          "[Removed Lines]",
          "6:  \"fmt\"",
          "7:  \"reflect\"",
          "13:  \"github.com/openfga/openfga/server/validation\"",
          "17:  \"go.uber.org/zap\"",
          "",
          "[Added Lines]",
          "7:  \"github.com/openfga/openfga/internal/validation\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:  tk := tupleUtils.NewTupleKey(object, relation, \"\")",
          "47:  if err != nil {",
          "49:  }",
          "52:  if err != nil {",
          "55:   }",
          "57:   return nil, serverErrors.HandleError(\"\", err)",
          "58:  }",
          "61:  if err != nil {",
          "62:   return nil, err",
          "63:  }",
          "",
          "[Removed Lines]",
          "46:  userset, err := query.getUserset(ctx, store, modelID, tk)",
          "48:   return nil, err",
          "51:  model, err := query.datastore.ReadAuthorizationModel(ctx, req.GetStoreId(), req.GetAuthorizationModelId())",
          "53:   if err == storage.ErrNotFound {",
          "54:    return nil, serverErrors.AuthorizationModelNotFound(req.GetAuthorizationModelId())",
          "60:  root, err := query.resolveUserset(ctx, store, modelID, userset, tk, typesystem.New(model))",
          "",
          "[Added Lines]",
          "43:  model, err := query.datastore.ReadAuthorizationModel(ctx, store, modelID)",
          "45:   if errors.Is(err, storage.ErrNotFound) {",
          "46:    return nil, serverErrors.AuthorizationModelNotFound(modelID)",
          "47:   }",
          "49:   return nil, serverErrors.HandleError(\"\", err)",
          "52:  typesys := typesystem.New(model)",
          "54:  err = validation.ValidateObject(typesys, tk)",
          "56:   return nil, serverErrors.HandleTupleValidateError(err)",
          "57:  }",
          "59:  err = validation.ValidateRelation(typesys, tk)",
          "60:  if err != nil {",
          "61:   return nil, serverErrors.HandleTupleValidateError(err)",
          "62:  }",
          "64:  objectType := tupleUtils.GetType(object)",
          "65:  rel, err := typesys.GetRelation(objectType, relation)",
          "66:  if err != nil {",
          "67:   if errors.Is(err, typesystem.ErrObjectTypeUndefined) {",
          "68:    return nil, serverErrors.TypeNotFound(objectType)",
          "69:   }",
          "71:   if errors.Is(err, typesystem.ErrRelationUndefined) {",
          "72:    return nil, serverErrors.RelationNotFound(relation, objectType, tk)",
          "78:  userset := rel.GetRewrite()",
          "80:  root, err := query.resolveUserset(ctx, store, userset, tk, typesys)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: func (query *ExpandQuery) resolveUserset(",
          "73:  ctx context.Context,",
          "75:  userset *openfgapb.Userset,",
          "76:  tk *openfgapb.TupleKey,",
          "77:  typesys *typesystem.TypeSystem,",
          "",
          "[Removed Lines]",
          "74:  store, modelID string,",
          "",
          "[Added Lines]",
          "94:  store string,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:  switch us := userset.Userset.(type) {",
          "83:  case nil, *openfgapb.Userset_This:",
          "85:  case *openfgapb.Userset_ComputedUserset:",
          "86:   return query.resolveComputedUserset(ctx, us.ComputedUserset, tk)",
          "87:  case *openfgapb.Userset_TupleToUserset:",
          "89:  case *openfgapb.Userset_Union:",
          "91:  case *openfgapb.Userset_Difference:",
          "93:  case *openfgapb.Userset_Intersection:",
          "95:  default:",
          "96:   return nil, serverErrors.UnsupportedUserSet",
          "97:  }",
          "98: }",
          "102:  ctx, span := query.tracer.Start(ctx, \"resolveThis\")",
          "103:  defer span.End()",
          "106:  if err != nil {",
          "107:   return nil, serverErrors.HandleError(\"\", err)",
          "108:  }",
          "110:  distinctUsers := make(map[string]bool)",
          "111:  for {",
          "113:   if err != nil {",
          "114:    if err == storage.ErrIteratorDone {",
          "115:     break",
          "116:    }",
          "117:    return nil, serverErrors.HandleError(\"\", err)",
          "118:   }",
          "120:  }",
          "121:  users := make([]string, 0, len(distinctUsers))",
          "122:  for u := range distinctUsers {",
          "123:   users = append(users, u)",
          "124:  }",
          "125:  return &openfgapb.UsersetTree_Node{",
          "126:   Name: toObjectRelation(tk),",
          "127:   Value: &openfgapb.UsersetTree_Node_Leaf{",
          "",
          "[Removed Lines]",
          "84:   return query.resolveThis(ctx, store, tk)",
          "88:   return query.resolveTupleToUserset(ctx, store, modelID, us.TupleToUserset, tk, typesys)",
          "90:   return query.resolveUnionUserset(ctx, store, modelID, us.Union, tk, typesys)",
          "92:   return query.resolveDifferenceUserset(ctx, store, modelID, us.Difference, tk, typesys)",
          "94:   return query.resolveIntersectionUserset(ctx, store, modelID, us.Intersection, tk, typesys)",
          "101: func (query *ExpandQuery) resolveThis(ctx context.Context, store string, tk *openfgapb.TupleKey) (*openfgapb.UsersetTree_Node, error) {",
          "105:  iter, err := query.datastore.Read(ctx, store, tk)",
          "109:  defer iter.Stop()",
          "112:   tuple, err := iter.Next()",
          "119:   distinctUsers[tuple.GetKey().GetUser()] = true",
          "",
          "[Added Lines]",
          "104:   return query.resolveThis(ctx, store, tk, typesys)",
          "108:   return query.resolveTupleToUserset(ctx, store, us.TupleToUserset, tk, typesys)",
          "110:   return query.resolveUnionUserset(ctx, store, us.Union, tk, typesys)",
          "112:   return query.resolveDifferenceUserset(ctx, store, us.Difference, tk, typesys)",
          "114:   return query.resolveIntersectionUserset(ctx, store, us.Intersection, tk, typesys)",
          "121: func (query *ExpandQuery) resolveThis(ctx context.Context, store string, tk *openfgapb.TupleKey, typesys *typesystem.TypeSystem) (*openfgapb.UsersetTree_Node, error) {",
          "125:  tupleIter, err := query.datastore.Read(ctx, store, tk)",
          "130:  filteredIter := storage.NewFilteredTupleKeyIterator(",
          "131:   storage.NewTupleKeyIteratorFromTupleIterator(tupleIter),",
          "132:   validation.FilterInvalidTuples(typesys.GetAuthorizationModel()),",
          "133:  )",
          "134:  defer filteredIter.Stop()",
          "138:   tk, err := filteredIter.Next()",
          "145:   distinctUsers[tk.GetUser()] = true",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171: func (query *ExpandQuery) resolveTupleToUserset(",
          "172:  ctx context.Context,",
          "174:  userset *openfgapb.TupleToUserset,",
          "175:  tk *openfgapb.TupleKey,",
          "176:  typesys *typesystem.TypeSystem,",
          "",
          "[Removed Lines]",
          "173:  store, modelID string,",
          "",
          "[Added Lines]",
          "204:  store string,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:  tupleset := userset.GetTupleset().GetRelation()",
          "187:  if err != nil {",
          "188:   if errors.Is(err, typesystem.ErrObjectTypeUndefined) {",
          "189:    return nil, serverErrors.TypeNotFound(objectType)",
          "",
          "[Removed Lines]",
          "185:  objectType, _ := tupleUtils.SplitObject(targetObject)",
          "186:  relation, err := typesys.GetRelation(objectType, tupleset)",
          "",
          "[Added Lines]",
          "216:  objectType := tupleUtils.GetType(targetObject)",
          "217:  _, err := typesys.GetRelation(objectType, tupleset)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "194:   }",
          "195:  }",
          "212:  tsKey := &openfgapb.TupleKey{",
          "213:   Object:   targetObject,",
          "214:   Relation: tupleset,",
          "",
          "[Removed Lines]",
          "197:  tuplesetRewrite := relation.GetRewrite().GetUserset()",
          "198:  if tuplesetRewrite != nil && reflect.TypeOf(tuplesetRewrite) != reflect.TypeOf(&openfgapb.Userset_This{}) {",
          "199:   query.logger.Warn(",
          "200:    fmt.Sprintf(\"unexpected rewrite on tupleset relation '%s#%s'\", objectType, tupleset),",
          "201:    zap.String(\"store_id\", store),",
          "202:    zap.String(\"authorization_model_id\", modelID),",
          "203:    zap.String(\"object_type\", objectType),",
          "204:    zap.String(\"relation\", tupleset),",
          "205:   )",
          "207:   return nil, serverErrors.InvalidAuthorizationModelInput(",
          "208:    fmt.Errorf(\"unexpected rewrite on relation '%s#%s'\", objectType, tupleset),",
          "209:   )",
          "210:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218:   tsKey.Relation = tk.GetRelation()",
          "219:  }",
          "222:  if err != nil {",
          "223:   return nil, serverErrors.HandleError(\"\", err)",
          "224:  }",
          "227:  var computed []*openfgapb.UsersetTree_Computed",
          "228:  seen := make(map[string]bool)",
          "229:  for {",
          "231:   if err != nil {",
          "232:    if err == storage.ErrIteratorDone {",
          "233:     break",
          "234:    }",
          "235:    return nil, serverErrors.HandleError(\"\", err)",
          "236:   }",
          "269:   tObject, tRelation := tupleUtils.SplitObjectRelation(user)",
          "",
          "[Removed Lines]",
          "221:  iter, err := query.datastore.Read(ctx, store, tsKey)",
          "225:  defer iter.Stop()",
          "230:   tuple, err := iter.Next()",
          "237:   user := tuple.GetKey().GetUser()",
          "239:   if user == Wildcard {",
          "240:    objectType, _ := tupleUtils.SplitObject(targetObject)",
          "242:    query.logger.WarnWithContext(",
          "243:     ctx,",
          "244:     fmt.Sprintf(\"unexpected wildcard evaluated on tupleset relation '%s'\", tupleset),",
          "245:     zap.String(\"store_id\", store),",
          "246:     zap.String(\"authorization_model_id\", modelID),",
          "247:     zap.String(\"object_type\", objectType),",
          "248:    )",
          "250:    return nil, serverErrors.InvalidTuple(",
          "251:     fmt.Sprintf(\"unexpected wildcard evaluated on relation '%s#%s'\", objectType, tupleset),",
          "252:     tupleUtils.NewTupleKey(targetObject, tupleset, Wildcard),",
          "253:    )",
          "254:   }",
          "257:   if tupleUtils.GetType(user) == \"\" {",
          "258:    continue",
          "259:   }",
          "261:   userType := tupleUtils.GetUserTypeFromUser(user)",
          "262:   if userType == tupleUtils.UserSet {",
          "263:    return nil, serverErrors.InvalidTuple(",
          "264:     fmt.Sprintf(\"unexpected userset evaluated on relation '%s#%s'\", objectType, tupleset),",
          "265:     tupleUtils.NewTupleKey(targetObject, tupleset, user),",
          "266:    )",
          "267:   }",
          "",
          "[Added Lines]",
          "237:  tupleIter, err := query.datastore.Read(ctx, store, tsKey)",
          "242:  filteredIter := storage.NewFilteredTupleKeyIterator(",
          "243:   storage.NewTupleKeyIteratorFromTupleIterator(tupleIter),",
          "244:   validation.FilterInvalidTuples(typesys.GetAuthorizationModel()),",
          "245:  )",
          "246:  defer filteredIter.Stop()",
          "251:   tk, err := filteredIter.Next()",
          "258:   user := tk.GetUser()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "304: func (query *ExpandQuery) resolveUnionUserset(",
          "305:  ctx context.Context,",
          "307:  usersets *openfgapb.Usersets,",
          "308:  tk *openfgapb.TupleKey,",
          "309:  typesys *typesystem.TypeSystem,",
          "",
          "[Removed Lines]",
          "306:  store, modelID string,",
          "",
          "[Added Lines]",
          "297:  store string,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311:  ctx, span := query.tracer.Start(ctx, \"resolveUnionUserset\")",
          "312:  defer span.End()",
          "315:  if err != nil {",
          "316:   return nil, err",
          "317:  }",
          "",
          "[Removed Lines]",
          "314:  nodes, err := query.resolveUsersets(ctx, store, modelID, usersets.Child, tk, typesys)",
          "",
          "[Added Lines]",
          "305:  nodes, err := query.resolveUsersets(ctx, store, usersets.Child, tk, typesys)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "329: func (query *ExpandQuery) resolveIntersectionUserset(",
          "330:  ctx context.Context,",
          "332:  usersets *openfgapb.Usersets,",
          "333:  tk *openfgapb.TupleKey,",
          "334:  typesys *typesystem.TypeSystem,",
          "",
          "[Removed Lines]",
          "331:  store, modelID string,",
          "",
          "[Added Lines]",
          "322:  store string,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "336:  ctx, span := query.tracer.Start(ctx, \"resolveIntersectionUserset\")",
          "337:  defer span.End()",
          "340:  if err != nil {",
          "341:   return nil, err",
          "342:  }",
          "",
          "[Removed Lines]",
          "339:  nodes, err := query.resolveUsersets(ctx, store, modelID, usersets.Child, tk, typesys)",
          "",
          "[Added Lines]",
          "330:  nodes, err := query.resolveUsersets(ctx, store, usersets.Child, tk, typesys)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "354: func (query *ExpandQuery) resolveDifferenceUserset(",
          "355:  ctx context.Context,",
          "357:  userset *openfgapb.Difference,",
          "358:  tk *openfgapb.TupleKey,",
          "359:  typesys *typesystem.TypeSystem,",
          "",
          "[Removed Lines]",
          "356:  store, modelID string,",
          "",
          "[Added Lines]",
          "347:  store string,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "361:  ctx, span := query.tracer.Start(ctx, \"resolveDifferenceUserset\")",
          "362:  defer span.End()",
          "365:  if err != nil {",
          "366:   return nil, err",
          "367:  }",
          "",
          "[Removed Lines]",
          "364:  nodes, err := query.resolveUsersets(ctx, store, modelID, []*openfgapb.Userset{userset.Base, userset.Subtract}, tk, typesys)",
          "",
          "[Added Lines]",
          "355:  nodes, err := query.resolveUsersets(ctx, store, []*openfgapb.Userset{userset.Base, userset.Subtract}, tk, typesys)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "382: func (query *ExpandQuery) resolveUsersets(",
          "383:  ctx context.Context,",
          "385:  usersets []*openfgapb.Userset,",
          "386:  tk *openfgapb.TupleKey,",
          "387:  typesys *typesystem.TypeSystem,",
          "",
          "[Removed Lines]",
          "384:  store, modelID string,",
          "",
          "[Added Lines]",
          "375:  store string,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "396:   i, us := i, us",
          "397:   grp.Go(func() error {",
          "399:    if err != nil {",
          "400:     return err",
          "401:    }",
          "",
          "[Removed Lines]",
          "398:    node, err := query.resolveUserset(ctx, store, modelID, us, tk, typesys)",
          "",
          "[Added Lines]",
          "389:    node, err := query.resolveUserset(ctx, store, us, tk, typesys)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "409:  return out, nil",
          "410: }",
          "424: func toObjectRelation(tk *openfgapb.TupleKey) string {",
          "425:  return tupleUtils.ToObjectRelationString(tk.GetObject(), tk.GetRelation())",
          "426: }",
          "",
          "[Removed Lines]",
          "413: func (query *ExpandQuery) getUserset(ctx context.Context, store, modelID string, tk *openfgapb.TupleKey) (*openfgapb.Userset, error) {",
          "414:  ctx, span := query.tracer.Start(ctx, \"getUserset\")",
          "415:  defer span.End()",
          "417:  userset, err := validation.ValidateObjectsRelations(ctx, query.datastore, store, modelID, tk)",
          "418:  if err != nil {",
          "419:   return nil, serverErrors.HandleTupleValidateError(err)",
          "420:  }",
          "421:  return userset, nil",
          "422: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/commands/write.go||server/commands/write.go": [
          "File: server/commands/write.go -> server/commands/write.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"errors\"",
          "8:  \"github.com/openfga/openfga/pkg/logger\"",
          "9:  tupleUtils \"github.com/openfga/openfga/pkg/tuple\"",
          "10:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "11:  serverErrors \"github.com/openfga/openfga/server/errors\"",
          "13:  \"github.com/openfga/openfga/storage\"",
          "14:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "15:  \"go.opentelemetry.io/otel/trace\"",
          "",
          "[Removed Lines]",
          "6:  \"fmt\"",
          "12:  \"github.com/openfga/openfga/server/validation\"",
          "",
          "[Added Lines]",
          "7:  \"github.com/openfga/openfga/internal/validation\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: func (c *WriteCommand) Execute(ctx context.Context, req *openfgapb.WriteRequest) (*openfgapb.WriteResponse, error) {",
          "41:   return nil, err",
          "42:  }",
          "",
          "[Removed Lines]",
          "40:  if err := c.validateTuplesets(ctx, req); err != nil {",
          "",
          "[Added Lines]",
          "39:  if err := c.validateWriteRequest(ctx, req); err != nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:  return &openfgapb.WriteResponse{}, nil",
          "50: }",
          "53:  ctx, span := c.tracer.Start(ctx, \"validateTuplesets\")",
          "54:  defer span.End()",
          "",
          "[Removed Lines]",
          "52: func (c *WriteCommand) validateTuplesets(ctx context.Context, req *openfgapb.WriteRequest) error {",
          "",
          "[Added Lines]",
          "51: func (c *WriteCommand) validateWriteRequest(ctx context.Context, req *openfgapb.WriteRequest) error {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:   return serverErrors.InvalidWriteInput",
          "63:  }",
          "67:  if len(writes) > 0 {",
          "78:   if err != nil {",
          "88:    return err",
          "89:   }",
          "124:    }",
          "157:   }",
          "158:  }",
          "164:   }",
          "165:  }",
          "188:  }",
          "191: }",
          "194: func (c *WriteCommand) validateNoDuplicatesAndCorrectSize(deletes []*openfgapb.TupleKey, writes []*openfgapb.TupleKey) error {",
          "195:  tuples := map[string]struct{}{}",
          "196:  for _, tk := range deletes {",
          "197:   key := tupleUtils.TupleKeyToString(tk)",
          "198:   if _, ok := tuples[key]; ok {",
          "",
          "[Removed Lines]",
          "65:  var authModel *openfgapb.AuthorizationModel",
          "69:   var err error",
          "70:   authModel, err = c.datastore.ReadAuthorizationModel(ctx, store, modelID)",
          "71:   if err != nil {",
          "72:    return err",
          "73:   }",
          "74:  }",
          "76:  for _, tk := range writes {",
          "77:   tupleUserset, err := validation.ValidateTuple(ctx, c.datastore, store, modelID, tk)",
          "79:    return serverErrors.HandleTupleValidateError(err)",
          "80:   }",
          "83:   if !typesystem.RewriteContainsSelf(tupleUserset) {",
          "84:    return serverErrors.HandleTupleValidateError(&tupleUtils.IndirectWriteError{Reason: IndirectWriteErrorReason, TupleKey: tk})",
          "85:   }",
          "87:   if err := c.validateNoUsersetForRelationReferencedInTupleset(authModel, tk); err != nil {",
          "91:   if err := c.validateTypesForTuple(authModel, tk); err != nil {",
          "92:    return err",
          "93:   }",
          "94:  }",
          "96:  for _, tk := range deletes {",
          "98:   if err := tupleUtils.ValidateUser(tk); err != nil {",
          "99:    return serverErrors.HandleTupleValidateError(err)",
          "100:   }",
          "101:  }",
          "103:  if err := c.validateNoDuplicatesAndCorrectSize(deletes, writes); err != nil {",
          "104:   return err",
          "105:  }",
          "107:  return nil",
          "108: }",
          "110: func (c *WriteCommand) validateNoUsersetForRelationReferencedInTupleset(authModel *openfgapb.AuthorizationModel, tk *openfgapb.TupleKey) error {",
          "111:  if !tupleUtils.IsObjectRelation(tk.GetUser()) {",
          "112:   return nil",
          "113:  }",
          "115:  objType := tupleUtils.GetType(tk.GetObject())",
          "119:  ts := typesystem.New(authModel)",
          "120:  for _, arrayOfTtus := range ts.GetAllTupleToUsersetsDefinitions()[objType] {",
          "121:   for _, tupleToUserSetDef := range arrayOfTtus {",
          "122:    if tupleToUserSetDef.Tupleset.Relation == tk.Relation {",
          "123:     return serverErrors.InvalidTuple(fmt.Sprintf(\"Userset '%s' is not allowed to have relation '%s' with '%s'\", tk.User, tk.Relation, tk.Object), tk)",
          "125:   }",
          "126:  }",
          "128:  return nil",
          "129: }",
          "135: func (c *WriteCommand) validateTypesForTuple(authModel *openfgapb.AuthorizationModel, tk *openfgapb.TupleKey) error {",
          "136:  objectType, _ := tupleUtils.SplitObject(tk.GetObject())    // e.g. \"doc\"",
          "137:  userType, userID := tupleUtils.SplitObject(tk.GetUser())   // e.g. (person, bob) or (group, abc#member) or (\"\", *)",
          "138:  _, userRel := tupleUtils.SplitObjectRelation(tk.GetUser()) // e.g. (person:bob, \"\") or (group:abc, member) or (*, \"\")",
          "140:  ts := typesystem.New(authModel)",
          "142:  typeDefinitionForObject, ok := ts.GetTypeDefinition(objectType)",
          "143:  if !ok {",
          "144:   msg := fmt.Sprintf(\"type '%s' does not exist in the authorization model\", objectType)",
          "145:   return serverErrors.NewInternalError(msg, errors.New(msg))",
          "146:  }",
          "148:  relationsForObject := typeDefinitionForObject.GetMetadata().GetRelations()",
          "149:  if relationsForObject == nil {",
          "150:   if ts.GetSchemaVersion() == typesystem.SchemaVersion1_1 {",
          "152:    msg := \"invalid authorization model\"",
          "153:    return serverErrors.NewInternalError(msg, errors.New(msg))",
          "154:   } else {",
          "156:    return nil",
          "161:  if userType != \"\" {",
          "162:   if _, ok := ts.GetTypeDefinition(userType); !ok {",
          "163:    return serverErrors.InvalidWriteInput",
          "167:  relationInformation := relationsForObject[tk.Relation]",
          "170:  if userRel == \"\" && userID != \"*\" {",
          "171:   for _, typeInformation := range relationInformation.GetDirectlyRelatedUserTypes() {",
          "172:    if typeInformation.GetType() == userType {",
          "173:     return nil",
          "174:    }",
          "175:   }",
          "176:  } else if userRel != \"\" { // case 2",
          "177:   for _, typeInformation := range relationInformation.GetDirectlyRelatedUserTypes() {",
          "178:    if typeInformation.GetType() == userType && typeInformation.GetRelation() == userRel {",
          "179:     return nil",
          "180:    }",
          "181:   }",
          "182:  } else if userID == \"*\" { // case 3",
          "183:   for _, typeInformation := range relationInformation.GetDirectlyRelatedUserTypes() {",
          "184:    if typeInformation.GetType() != \"\" && typeInformation.GetRelation() == \"\" {",
          "185:     return nil",
          "186:    }",
          "187:   }",
          "190:  return serverErrors.InvalidTuple(fmt.Sprintf(\"User '%s' is not allowed to have relation %s with %s\", tk.User, tk.Relation, tk.Object), tk)",
          "",
          "[Added Lines]",
          "66:   authModel, err := c.datastore.ReadAuthorizationModel(ctx, store, modelID)",
          "71:   typesys := typesystem.New(authModel)",
          "73:   for _, tk := range writes {",
          "74:    err := validation.ValidateTuple(typesys, tk)",
          "75:    if err != nil {",
          "76:     return serverErrors.HandleTupleValidateError(err)",
          "77:    }",
          "79:    objectType, _ := tupleUtils.SplitObject(tk.GetObject())",
          "81:    relation, err := typesys.GetRelation(objectType, tk.GetRelation())",
          "82:    if err != nil {",
          "83:     if errors.Is(err, typesystem.ErrObjectTypeUndefined) {",
          "84:      return serverErrors.TypeNotFound(objectType)",
          "85:     }",
          "87:     if errors.Is(err, typesystem.ErrRelationUndefined) {",
          "88:      return serverErrors.RelationNotFound(tk.GetRelation(), objectType, tk)",
          "89:     }",
          "91:     return serverErrors.HandleError(\"\", err)",
          "95:    if !typesystem.RewriteContainsSelf(relation.GetRewrite()) {",
          "96:     return serverErrors.HandleTupleValidateError(&tupleUtils.IndirectWriteError{Reason: IndirectWriteErrorReason, TupleKey: tk})",
          "97:    }",
          "101:  for _, tk := range deletes {",
          "102:   if ok := tupleUtils.IsValidUser(tk.GetUser()); !ok {",
          "103:    return serverErrors.InvalidTuple(\"the 'user' field is invalid\", tk)",
          "107:  if err := c.validateNoDuplicatesAndCorrectSize(deletes, writes); err != nil {",
          "108:   return err",
          "111:  return nil",
          "",
          "---------------"
        ],
        "server/commands/write_assertions.go||server/commands/write_assertions.go": [
          "File: server/commands/write_assertions.go -> server/commands/write_assertions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "6:  \"github.com/openfga/openfga/pkg/logger\"",
          "7:  serverErrors \"github.com/openfga/openfga/server/errors\"",
          "9:  \"github.com/openfga/openfga/storage\"",
          "10:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "11: )",
          "",
          "[Removed Lines]",
          "8:  \"github.com/openfga/openfga/server/validation\"",
          "",
          "[Added Lines]",
          "5:  \"errors\"",
          "7:  \"github.com/openfga/openfga/internal/validation\"",
          "9:  \"github.com/openfga/openfga/pkg/typesystem\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  modelID := req.GetAuthorizationModelId()",
          "31:  assertions := req.GetAssertions()",
          "33:  for _, assertion := range assertions {",
          "35:    return nil, serverErrors.HandleTupleValidateError(err)",
          "36:   }",
          "37:  }",
          "40:  if err != nil {",
          "41:   return nil, serverErrors.HandleError(\"\", err)",
          "42:  }",
          "",
          "[Removed Lines]",
          "34:   if _, err := validation.ValidateTuple(ctx, w.datastore, store, modelID, assertion.TupleKey); err != nil {",
          "39:  err := w.datastore.WriteAssertions(ctx, store, modelID, assertions)",
          "",
          "[Added Lines]",
          "35:  model, err := w.datastore.ReadAuthorizationModel(ctx, store, modelID)",
          "36:  if err != nil {",
          "37:   if errors.Is(err, storage.ErrNotFound) {",
          "38:    return nil, serverErrors.AuthorizationModelNotFound(req.GetAuthorizationModelId())",
          "39:   }",
          "41:   return nil, serverErrors.HandleError(\"\", err)",
          "42:  }",
          "44:  typesys := typesystem.New(model)",
          "47:   if err := validation.ValidateTuple(typesys, assertion.TupleKey); err != nil {",
          "52:  err = w.datastore.WriteAssertions(ctx, store, modelID, assertions)",
          "",
          "---------------"
        ],
        "server/commands/write_test.go||server/commands/write_test.go": [
          "File: server/commands/write_test.go -> server/commands/write_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:  }",
          "90: }",
          "93:  type test struct {",
          "94:   name          string",
          "95:   deletes       []*openfgapb.TupleKey",
          "",
          "[Removed Lines]",
          "92: func TestValidateWriteTuples(t *testing.T) {",
          "",
          "[Added Lines]",
          "92: func TestValidateWriteRequest(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  }",
          "100:  badItem := &openfgapb.TupleKey{",
          "102:   Relation: testutils.CreateRandomString(50),",
          "103:   User:     \"\",",
          "104:  }",
          "",
          "[Removed Lines]",
          "101:   Object:   fmt.Sprintf(\"%s:1\", testutils.CreateRandomString(459)),",
          "",
          "[Added Lines]",
          "101:   Object:   fmt.Sprintf(\"%s:1\", testutils.CreateRandomString(20)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:     Deletes: &openfgapb.TupleKeys{TupleKeys: test.deletes},",
          "148:    }",
          "151:    require.ErrorIs(t, err, test.expectedError)",
          "152:   })",
          "153:  }",
          "",
          "[Removed Lines]",
          "150:    err := cmd.validateTuplesets(ctx, req)",
          "",
          "[Added Lines]",
          "150:    err := cmd.validateWriteRequest(ctx, req)",
          "",
          "---------------"
        ],
        "server/test/check.go||server/test/check.go": [
          "File: server/test/check.go -> server/test/check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:     TupleKey: tuple.NewTupleKey(\"repo:openfga/canaveral\", \"admin\", \"github|jose@openfga\"),",
          "842:     Trace:    true,",
          "843:    },",
          "848:   },",
          "849:   {",
          "850:    name: \"ExecuteCanResolveRecursiveComputedUserSets\",",
          "",
          "[Removed Lines]",
          "844:    err: serverErrors.InvalidTuple(",
          "845:     \"unexpected userset evaluated on relation 'repo#manager'\",",
          "846:     tuple.NewTupleKey(\"repo:openfga/canaveral\", \"manager\", \"org:openfga#repo_admin\"),",
          "847:    ),",
          "",
          "[Added Lines]",
          "844:    response: &openfgapb.CheckResponse{Allowed: false},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "955:     {",
          "956:      Type: \"document\",",
          "957:      Relations: map[string]*openfgapb.Userset{",
          "989:      },",
          "990:     },",
          "991:    },",
          "",
          "[Removed Lines]",
          "958:       \"parent\": {Userset: &openfgapb.Userset_This{}},",
          "959:       \"owner\":  {Userset: &openfgapb.Userset_This{}},",
          "960:       \"editor\": {",
          "961:        Userset: &openfgapb.Userset_Union{",
          "962:         Union: &openfgapb.Usersets{Child: []*openfgapb.Userset{",
          "963:          {Userset: &openfgapb.Userset_This{}},",
          "964:          {Userset: &openfgapb.Userset_ComputedUserset{ComputedUserset: &openfgapb.ObjectRelation{",
          "965:           Relation: \"owner\",",
          "966:          }}},",
          "967:         }},",
          "968:        },",
          "969:       },",
          "970:       \"viewer\": {",
          "971:        Userset: &openfgapb.Userset_Union{",
          "972:         Union: &openfgapb.Usersets{Child: []*openfgapb.Userset{",
          "973:          {Userset: &openfgapb.Userset_This{}},",
          "974:          {Userset: &openfgapb.Userset_ComputedUserset{ComputedUserset: &openfgapb.ObjectRelation{",
          "975:           Relation: \"editor\",",
          "976:          }}},",
          "977:          {Userset: &openfgapb.Userset_TupleToUserset{TupleToUserset: &openfgapb.TupleToUserset{",
          "978:           Tupleset: &openfgapb.ObjectRelation{",
          "979:            Relation: \"parent\",",
          "980:           },",
          "981:           ComputedUserset: &openfgapb.ObjectRelation{",
          "982:            Object:   \"$TUPLE_USERSET_OBJECT\",",
          "983:            Relation: \"viewer\",",
          "984:           },",
          "985:          }}},",
          "986:         }},",
          "987:        },",
          "988:       },",
          "",
          "[Added Lines]",
          "955:       \"parent\": typesystem.This(),",
          "956:       \"owner\":  typesystem.This(),",
          "957:       \"editor\": typesystem.Union(",
          "958:        typesystem.This(),",
          "959:        typesystem.ComputedUserset(\"owner\"),",
          "960:       ),",
          "961:       \"viewer\": typesystem.Union(",
          "962:        typesystem.This(),",
          "963:        typesystem.ComputedUserset(\"editor\"),",
          "964:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "965:       ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1279:     tuple.NewTupleKey(\"document:doc1\", \"parent\", \"*\"), // wildcard not allowed on tupleset relations",
          "1280:     tuple.NewTupleKey(\"folder:folder1\", \"viewer\", \"user:anne\"),",
          "1281:    },",
          "1286:   },",
          "1287:   {",
          "1288:    name:             \"Error if * encountered in TTU evaluation including ContextualTuples\",",
          "",
          "[Removed Lines]",
          "1282:    err: serverErrors.InvalidTuple(",
          "1283:     \"unexpected wildcard evaluated on relation 'document#parent'\",",
          "1284:     tuple.NewTupleKey(\"document:doc1\", \"parent\", commands.Wildcard),",
          "1285:    ),",
          "",
          "[Added Lines]",
          "1259:    response: &openfgapb.CheckResponse{Allowed: false},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1329:      },",
          "1330:     },",
          "1331:    },",
          "1336:   },",
          "1337:   {",
          "1338:    name:             \"Error if rewrite encountered in tupleset relation\",",
          "",
          "[Removed Lines]",
          "1332:    err: serverErrors.InvalidTuple(",
          "1333:     \"unexpected wildcard evaluated on relation 'document#parent'\",",
          "1334:     tuple.NewTupleKey(\"document:doc1\", \"parent\", commands.Wildcard),",
          "1335:    ),",
          "",
          "[Added Lines]",
          "1306:    response: &openfgapb.CheckResponse{Allowed: false},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1391:     TupleKey:         tuple.NewTupleKey(\"document:1\", \"viewer\", \"org:y\"),",
          "1392:     ContextualTuples: &openfgapb.ContextualTupleKeys{},",
          "1393:    },",
          "1398:   },",
          "1399:   {",
          "",
          "[Removed Lines]",
          "1394:    err: serverErrors.InvalidTuple(",
          "1395:     \"unexpected userset evaluated on relation 'document#parent'\",",
          "1396:     tuple.NewTupleKey(\"document:1\", \"parent\", \"org:y#can_view\"),",
          "1397:    ),",
          "",
          "[Added Lines]",
          "1365:    response: &openfgapb.CheckResponse{Allowed: false},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1427:     TupleKey:         tuple.NewTupleKey(\"document:1\", \"viewer\", \"org:y\"),",
          "1428:     ContextualTuples: &openfgapb.ContextualTupleKeys{},",
          "1429:    },",
          "1434:   },",
          "1435:   {",
          "1436:    name:             \"CheckWithUsersetContainingUndefinedType\",",
          "",
          "[Removed Lines]",
          "1430:    err: serverErrors.InvalidTuple(",
          "1431:     \"unexpected userset evaluated on relation 'document#parent'\",",
          "1432:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
          "1433:    ),",
          "",
          "[Added Lines]",
          "1398:    response: &openfgapb.CheckResponse{Allowed: false},",
          "",
          "---------------"
        ],
        "server/test/connected_objects.go||server/test/connected_objects.go": [
          "File: server/test/connected_objects.go -> server/test/connected_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:    },",
          "83:    expectedError: serverErrors.InvalidTuple(",
          "84:     fmt.Sprintf(\"unexpected wildcard evaluated on relation '%s#%s'\", \"folder\", \"parent\"),",
          "86:    ),",
          "87:   },",
          "88:   {",
          "",
          "[Removed Lines]",
          "85:     tuple.NewTupleKey(\"folder:folderX\", \"parent\", commands.Wildcard),",
          "",
          "[Added Lines]",
          "85:     tuple.NewTupleKey(\"folder:folderX\", \"parent\", tuple.Wildcard),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:    tuples: []*openfgapb.TupleKey{},",
          "138:    expectedError: serverErrors.InvalidTuple(",
          "139:     fmt.Sprintf(\"unexpected wildcard evaluated on relation '%s#%s'\", \"folder\", \"parent\"),",
          "141:    ),",
          "142:   },",
          "143:   {",
          "",
          "[Removed Lines]",
          "140:     tuple.NewTupleKey(\"folder:folderX\", \"parent\", commands.Wildcard),",
          "",
          "[Added Lines]",
          "140:     tuple.NewTupleKey(\"folder:folderX\", \"parent\", tuple.Wildcard),",
          "",
          "---------------"
        ],
        "server/test/expand.go||server/test/expand.go": [
          "File: server/test/expand.go -> server/test/expand.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"github.com/openfga/openfga/server/commands\"",
          "15:  serverErrors \"github.com/openfga/openfga/server/errors\"",
          "16:  \"github.com/openfga/openfga/storage\"",
          "18:  \"github.com/stretchr/testify/require\"",
          "19:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "20:  \"google.golang.org/protobuf/testing/protocmp\"",
          "",
          "[Removed Lines]",
          "17:  \"github.com/pkg/errors\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     {",
          "134:      Type: \"repo\",",
          "135:      Relations: map[string]*openfgapb.Userset{",
          "150:      },",
          "151:     },",
          "152:     {",
          "153:      Type: \"org\",",
          "154:      Relations: map[string]*openfgapb.Userset{",
          "156:      },",
          "157:     },",
          "158:    },",
          "",
          "[Removed Lines]",
          "136:       \"admin\": {",
          "137:        Userset: &openfgapb.Userset_TupleToUserset{",
          "138:         TupleToUserset: &openfgapb.TupleToUserset{",
          "139:          Tupleset: &openfgapb.ObjectRelation{",
          "140:           Relation: \"manager\",",
          "141:          },",
          "142:          ComputedUserset: &openfgapb.ObjectRelation{",
          "143:           Object:   \"$TUPLE_USERSET_OBJECT\",",
          "144:           Relation: \"repo_admin\",",
          "145:          },",
          "146:         },",
          "147:        },",
          "148:       },",
          "149:       \"manager\": {},",
          "155:       \"repo_admin\": {},",
          "",
          "[Added Lines]",
          "135:       \"admin\":   typesystem.TupleToUserset(\"manager\", \"repo_admin\"),",
          "136:       \"manager\": typesystem.This(),",
          "142:       \"repo_admin\": typesystem.This(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239:     {",
          "240:      Object:   \"repo:openfga/foo\",",
          "241:      Relation: \"manager\",",
          "243:     },",
          "244:    },",
          "245:    request: &openfgapb.ExpandRequest{",
          "",
          "[Removed Lines]",
          "242:      User:     \"amy\",",
          "",
          "[Added Lines]",
          "229:      User:     \"amy\", // should be skipped since it's not a valid target for a tupleset relation",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "740:     },",
          "741:    },",
          "742:   },",
          "743:  }",
          "745:  require := require.New(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730:   {",
          "731:    name: \"TupleToUserset involving wildcard is skipped\",",
          "732:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "733:     {",
          "734:      Type: \"document\",",
          "735:      Relations: map[string]*openfgapb.Userset{",
          "736:       \"parent\": typesystem.This(),",
          "737:       \"viewer\": typesystem.Union(",
          "738:        typesystem.This(), typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "739:       ),",
          "740:      },",
          "741:     },",
          "742:    },",
          "743:    tuples: []*openfgapb.TupleKey{",
          "744:     tuple.NewTupleKey(\"document:1\", \"parent\", \"*\"),",
          "745:     tuple.NewTupleKey(\"document:X\", \"viewer\", \"jon\"),",
          "746:    },",
          "747:    request: &openfgapb.ExpandRequest{",
          "748:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "749:    },",
          "750:    expected: &openfgapb.ExpandResponse{",
          "751:     Tree: &openfgapb.UsersetTree{",
          "752:      Root: &openfgapb.UsersetTree_Node{",
          "753:       Name: \"document:1#viewer\",",
          "754:       Value: &openfgapb.UsersetTree_Node_Union{",
          "755:        Union: &openfgapb.UsersetTree_Nodes{",
          "756:         Nodes: []*openfgapb.UsersetTree_Node{",
          "757:          {",
          "758:           Name: \"document:1#viewer\",",
          "759:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "760:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "761:             Value: &openfgapb.UsersetTree_Leaf_Users{},",
          "762:            },",
          "763:           },",
          "764:          },",
          "765:          {",
          "766:           Name: \"document:1#viewer\",",
          "767:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "768:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "769:             Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "770:              TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "771:               Tupleset: \"document:1#parent\",",
          "772:              },",
          "773:             },",
          "774:            },",
          "775:           },",
          "776:          },",
          "777:         },",
          "778:        },",
          "779:       },",
          "780:      },",
          "781:     },",
          "782:    },",
          "783:   },",
          "784:   {",
          "785:    name: \"Tuple involving userset skipped if it is referenced in a TTU rewrite\",",
          "786:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "787:     {",
          "788:      Type: \"folder\",",
          "789:      Relations: map[string]*openfgapb.Userset{",
          "790:       \"viewer\": typesystem.This(),",
          "791:      },",
          "792:     },",
          "793:     {",
          "794:      Type: \"document\",",
          "795:      Relations: map[string]*openfgapb.Userset{",
          "796:       \"parent\": typesystem.This(),",
          "797:       \"editor\": typesystem.This(),",
          "798:       \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "799:      },",
          "800:     },",
          "801:    },",
          "802:    tuples: []*openfgapb.TupleKey{",
          "803:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
          "804:    },",
          "805:    request: &openfgapb.ExpandRequest{",
          "806:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "807:    },",
          "808:    expected: &openfgapb.ExpandResponse{",
          "809:     Tree: &openfgapb.UsersetTree{",
          "810:      Root: &openfgapb.UsersetTree_Node{",
          "811:       Name: \"document:1#viewer\",",
          "812:       Value: &openfgapb.UsersetTree_Node_Leaf{",
          "813:        Leaf: &openfgapb.UsersetTree_Leaf{",
          "814:         Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "815:          TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "816:           Tupleset: \"document:1#parent\",",
          "817:          },",
          "818:         },",
          "819:        },",
          "820:       },",
          "821:      },",
          "822:     },",
          "823:    },",
          "824:   },",
          "825:   {",
          "826:    name: \"Tuple involving userset skipped if same ComputedUserset involved in TTU rewrite\",",
          "827:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "828:     {",
          "829:      Type: \"document\",",
          "830:      Relations: map[string]*openfgapb.Userset{",
          "831:       \"parent\": typesystem.This(),",
          "832:       \"viewer\": typesystem.Union(",
          "833:        typesystem.This(),",
          "834:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "835:       ),",
          "836:      },",
          "837:     },",
          "838:    },",
          "839:    tuples: []*openfgapb.TupleKey{",
          "840:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
          "841:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
          "842:    },",
          "843:    request: &openfgapb.ExpandRequest{",
          "844:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "845:    },",
          "846:    expected: &openfgapb.ExpandResponse{",
          "847:     Tree: &openfgapb.UsersetTree{",
          "848:      Root: &openfgapb.UsersetTree_Node{",
          "849:       Name: \"document:1#viewer\",",
          "850:       Value: &openfgapb.UsersetTree_Node_Union{",
          "851:        Union: &openfgapb.UsersetTree_Nodes{",
          "852:         Nodes: []*openfgapb.UsersetTree_Node{",
          "853:          {",
          "854:           Name: \"document:1#viewer\",",
          "855:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "856:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "857:             Value: &openfgapb.UsersetTree_Leaf_Users{},",
          "858:            },",
          "859:           },",
          "860:          },",
          "861:          {",
          "862:           Name: \"document:1#viewer\",",
          "863:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "864:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "865:             Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "866:              TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "867:               Tupleset: \"document:1#parent\",",
          "868:              },",
          "869:             },",
          "870:            },",
          "871:           },",
          "872:          },",
          "873:         },",
          "874:        },",
          "875:       },",
          "876:      },",
          "877:     },",
          "878:    },",
          "879:   },",
          "880:   {",
          "881:    name: \"Tupleset relation involving rewrite skipped\",",
          "882:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "883:     {",
          "884:      Type: \"document\",",
          "885:      Relations: map[string]*openfgapb.Userset{",
          "886:       \"parent\": typesystem.ComputedUserset(\"editor\"),",
          "887:       \"editor\": typesystem.This(),",
          "888:       \"viewer\": typesystem.Union(",
          "889:        typesystem.This(), typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "890:       ),",
          "891:      },",
          "892:     },",
          "893:    },",
          "894:    request: &openfgapb.ExpandRequest{",
          "895:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "896:    },",
          "897:    tuples: []*openfgapb.TupleKey{",
          "898:     tuple.NewTupleKey(\"document:1\", \"editor\", \"document:2\"),",
          "899:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
          "900:    },",
          "901:    expected: &openfgapb.ExpandResponse{",
          "902:     Tree: &openfgapb.UsersetTree{",
          "903:      Root: &openfgapb.UsersetTree_Node{",
          "904:       Name: \"document:1#viewer\",",
          "905:       Value: &openfgapb.UsersetTree_Node_Union{",
          "906:        Union: &openfgapb.UsersetTree_Nodes{",
          "907:         Nodes: []*openfgapb.UsersetTree_Node{",
          "908:          {",
          "909:           Name: \"document:1#viewer\",",
          "910:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "911:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "912:             Value: &openfgapb.UsersetTree_Leaf_Users{},",
          "913:            },",
          "914:           },",
          "915:          },",
          "916:          {",
          "917:           Name: \"document:1#viewer\",",
          "918:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "919:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "920:             Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "921:              TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "922:               Tupleset: \"document:1#parent\",",
          "923:              },",
          "924:             },",
          "925:            },",
          "926:           },",
          "927:          },",
          "928:         },",
          "929:        },",
          "930:       },",
          "931:      },",
          "932:     },",
          "933:    },",
          "934:   },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "781:      Relation: \"bar\",",
          "782:     },",
          "783:    },",
          "784:    expected: serverErrors.InvalidExpandInput,",
          "785:   },",
          "786:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "976:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "977:     {Type: \"repo\"},",
          "978:    },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "791:      Relation: \"bar\",",
          "792:     },",
          "793:    },",
          "794:    expected: serverErrors.InvalidObjectFormat(&openfgapb.TupleKey{",
          "795:     Object:   \":\",",
          "796:     Relation: \"bar\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "989:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "990:     {Type: \"repo\"},",
          "991:    },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "804:      Relation: \"bar\",",
          "805:     },",
          "806:    },",
          "807:    expected: serverErrors.InvalidObjectFormat(&openfgapb.TupleKey{",
          "808:     Object:   \"github:\",",
          "809:     Relation: \"bar\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "1006:     {Type: \"repo\"},",
          "1007:    },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "816:      Object: \"bar\",",
          "817:     },",
          "818:    },",
          "819:    expected: serverErrors.InvalidExpandInput,",
          "820:   },",
          "821:   {",
          "823:    request: &openfgapb.ExpandRequest{",
          "824:     TupleKey: &openfgapb.TupleKey{",
          "825:      Object:   \"foo:bar\",",
          "826:      Relation: \"baz\",",
          "827:     },",
          "828:    },",
          "829:    expected: serverErrors.TypeNotFound(\"foo\"),",
          "830:   },",
          "831:   {",
          "",
          "[Removed Lines]",
          "822:    name: \"type not found\",",
          "",
          "[Added Lines]",
          "1020:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "1021:     {Type: \"repo\"},",
          "1022:    },",
          "1026:    name: \"object type not found\",",
          "1033:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "1034:     {Type: \"repo\"},",
          "1035:    },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "839:     TupleKey: &openfgapb.TupleKey{",
          "840:      Object:   \"repo:bar\",",
          "841:      Relation: \"baz\",",
          "842:     },",
          "843:    },",
          "844:    expected: serverErrors.RelationNotFound(\"baz\", \"repo\", &openfgapb.TupleKey{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1049:      User:     \"jon\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "846:     Relation: \"baz\",",
          "847:    }),",
          "848:   },",
          "950:  }",
          "952:  require := require.New(t)",
          "",
          "[Removed Lines]",
          "849:   {",
          "850:    name: \"TupleToUserset involving wildcard returns error\",",
          "851:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "852:     {",
          "853:      Type: \"document\",",
          "854:      Relations: map[string]*openfgapb.Userset{",
          "855:       \"parent\": typesystem.This(),",
          "856:       \"viewer\": typesystem.Union(",
          "857:        typesystem.This(), typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "858:       ),",
          "859:      },",
          "860:     },",
          "861:    },",
          "862:    tuples: []*openfgapb.TupleKey{",
          "863:     tuple.NewTupleKey(\"document:1\", \"parent\", \"*\"),",
          "864:     tuple.NewTupleKey(\"document:X\", \"viewer\", \"jon\"),",
          "865:    },",
          "866:    request: &openfgapb.ExpandRequest{",
          "867:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "868:    },",
          "869:    expected: serverErrors.InvalidTuple(",
          "870:     \"unexpected wildcard evaluated on relation 'document#parent'\",",
          "871:     tuple.NewTupleKey(\"document:1\", \"parent\", \"*\"),",
          "872:    ),",
          "873:   },",
          "874:   {",
          "875:    name: \"Tupleset relation involving rewrite returns error\",",
          "876:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "877:     {",
          "878:      Type: \"document\",",
          "879:      Relations: map[string]*openfgapb.Userset{",
          "880:       \"parent\": typesystem.ComputedUserset(\"editor\"),",
          "881:       \"editor\": typesystem.This(),",
          "882:       \"viewer\": typesystem.Union(",
          "883:        typesystem.This(), typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "884:       ),",
          "885:      },",
          "886:     },",
          "887:    },",
          "888:    request: &openfgapb.ExpandRequest{",
          "889:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "890:    },",
          "891:    expected: serverErrors.InvalidAuthorizationModelInput(",
          "892:     errors.Errorf(\"unexpected rewrite on relation '%s#%s'\", \"document\", \"parent\"),",
          "893:    ),",
          "894:   },",
          "895:   {",
          "896:    name: \"Tuple involving userset returns error if it is referenced in a TTU rewrite\",",
          "897:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "898:     {",
          "899:      Type: \"folder\",",
          "900:      Relations: map[string]*openfgapb.Userset{",
          "901:       \"viewer\": typesystem.This(),",
          "902:      },",
          "903:     },",
          "904:     {",
          "905:      Type: \"document\",",
          "906:      Relations: map[string]*openfgapb.Userset{",
          "907:       \"parent\": typesystem.This(),",
          "908:       \"editor\": typesystem.This(),",
          "909:       \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "910:      },",
          "911:     },",
          "912:    },",
          "913:    tuples: []*openfgapb.TupleKey{",
          "914:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
          "915:    },",
          "916:    request: &openfgapb.ExpandRequest{",
          "917:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "918:    },",
          "919:    expected: serverErrors.InvalidTuple(",
          "920:     \"unexpected userset evaluated on relation 'document#parent'\",",
          "921:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
          "922:    ),",
          "923:   },",
          "924:   {",
          "925:    name: \"Tuple involving userset returns error if same ComputedUserset involved in TTU rewrite\",",
          "926:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "927:     {",
          "928:      Type: \"document\",",
          "929:      Relations: map[string]*openfgapb.Userset{",
          "930:       \"parent\": typesystem.This(),",
          "931:       \"viewer\": typesystem.Union(",
          "932:        typesystem.This(),",
          "933:        typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "934:       ),",
          "935:      },",
          "936:     },",
          "937:    },",
          "938:    tuples: []*openfgapb.TupleKey{",
          "939:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
          "940:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"jon\"),",
          "941:    },",
          "942:    request: &openfgapb.ExpandRequest{",
          "943:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "944:    },",
          "945:    expected: serverErrors.InvalidTuple(",
          "946:     \"unexpected userset evaluated on relation 'document#parent'\",",
          "947:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
          "948:    ),",
          "949:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/test/write.go||server/test/write.go": [
          "File: server/test/write.go -> server/test/write.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "6:  \"testing\"",
          "8:  \"github.com/oklog/ulid/v2\"",
          "",
          "[Removed Lines]",
          "5:  \"errors\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "868:    },",
          "869:    },",
          "870:   },",
          "872:  },",
          "873:  {",
          "874:   _name: \"Write fails if user field contains a type that is not allowed by the authorization model (which only allows group:...)\",",
          "",
          "[Removed Lines]",
          "871:   err: serverErrors.InvalidWriteInput,",
          "",
          "[Added Lines]",
          "870:   err: serverErrors.TypeNotFound(\"impossible\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1081:      Relations: map[string]*openfgapb.Userset{",
          "1082:       \"member\": typesystem.This(),",
          "1083:      },",
          "1084:     },",
          "1085:     {",
          "1086:      Type: \"document\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1083:      Metadata: &openfgapb.Metadata{",
          "1084:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1085:        \"member\": {",
          "1086:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1087:          {Type: \"user\"},",
          "1088:         },",
          "1089:        },",
          "1090:       },",
          "1091:      },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1123:      Relations: map[string]*openfgapb.Userset{",
          "1124:       \"member\": typesystem.This(),",
          "1125:      },",
          "1126:     },",
          "1127:     {",
          "1128:      Type: \"document\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134:      Metadata: &openfgapb.Metadata{",
          "1135:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1136:        \"member\": {",
          "1137:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1138:          {Type: \"user\"},",
          "1139:         },",
          "1140:        },",
          "1141:       },",
          "1142:      },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1155:   },",
          "1156:  },",
          "1157:  {",
          "1160:   model: &openfgapb.AuthorizationModel{",
          "1161:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1158:   _name: \"Write succeeds if user is * and type references a specific type\",",
          "",
          "[Added Lines]",
          "1175:   _name: \"Write succeeds if user is wildcard and type references a specific type\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1164:     {",
          "1165:      Type: \"user\",",
          "1166:     },",
          "1170:     {",
          "1171:      Type: \"document\",",
          "1172:      Relations: map[string]*openfgapb.Userset{",
          "",
          "[Removed Lines]",
          "1167:     {",
          "1168:      Type: \"group\",",
          "1169:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1177:        \"reader\": {",
          "1178:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1179:          {",
          "1181:          },",
          "1182:         },",
          "1183:        },",
          "1184:       },",
          "",
          "[Removed Lines]",
          "1180:           Type: \"group\",",
          "",
          "[Added Lines]",
          "1194:           Type: \"user\",",
          "1196:          typesystem.WildcardRelationReference(\"user\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1188:   },",
          "1189:   request: &openfgapb.WriteRequest{",
          "1190:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
          "1192:    }},",
          "1193:   },",
          "1194:  },",
          "1195:  {",
          "1198:   model: &openfgapb.AuthorizationModel{",
          "1199:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1191:     tuple.NewTupleKey(\"document:budget\", \"reader\", \"*\"),",
          "1196:   _name: \"Write fails if user is * and type does not reference a specific type\",",
          "",
          "[Added Lines]",
          "1206:     tuple.NewTupleKey(\"document:budget\", \"reader\", \"user:*\"),",
          "1211:   _name: \"Write fails if user is a typed wildcard and the type restrictions don't permit it\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1214:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1215:        \"reader\": {",
          "1216:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1221:         },",
          "1222:        },",
          "1223:       },",
          "",
          "[Removed Lines]",
          "1217:          {",
          "1218:           Type:               \"group\",",
          "1219:           RelationOrWildcard: &openfgapb.RelationReference_Relation{Relation: \"member\"},",
          "1220:          },",
          "",
          "[Added Lines]",
          "1232:          typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1227:   },",
          "1228:   request: &openfgapb.WriteRequest{",
          "1229:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
          "1231:    }},",
          "1232:   },",
          "1235:   ),",
          "1236:  },",
          "1260:  {",
          "1261:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation\",",
          "1262:   model: &openfgapb.AuthorizationModel{",
          "",
          "[Removed Lines]",
          "1230:     tuple.NewTupleKey(\"document:budget\", \"reader\", \"*\"),",
          "1233:   err: serverErrors.InvalidTuple(\"User '*' is not allowed to have relation reader with document:budget\",",
          "1234:    tuple.NewTupleKey(\"document:budget\", \"reader\", \"*\"),",
          "1237:  {",
          "1238:   _name: \"Write fails if schema version is 1.1 but type definitions are lacking metadata\",",
          "1240:   model: &openfgapb.AuthorizationModel{",
          "1241:    Id:            ulid.Make().String(),",
          "1242:    SchemaVersion: typesystem.SchemaVersion1_1,",
          "1243:    TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1244:     {",
          "1245:      Type: \"document\",",
          "1246:      Relations: map[string]*openfgapb.Userset{",
          "1247:       \"reader\": {Userset: &openfgapb.Userset_This{}},",
          "1248:      },",
          "1249:     },",
          "1250:    },",
          "1251:   },",
          "1252:   request: &openfgapb.WriteRequest{",
          "1253:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
          "1254:     tuple.NewTupleKey(\"document:budget\", \"reader\", \"*\"),",
          "1255:    }},",
          "1256:   },",
          "1257:   err: serverErrors.NewInternalError(\"invalid authorization model\", errors.New(\"invalid authorization model\")),",
          "1258:  },",
          "",
          "[Added Lines]",
          "1242:     tuple.NewTupleKey(\"document:budget\", \"reader\", \"group:*\"),",
          "1245:   err: serverErrors.InvalidTuple(\"User 'group:*' is not allowed to have relation reader with document:budget\",",
          "1246:    tuple.NewTupleKey(\"document:budget\", \"reader\", \"group:*\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1284:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1285:    }},",
          "1286:   },",
          "1288:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1289:   ),",
          "1290:  },",
          "",
          "[Removed Lines]",
          "1287:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
          "",
          "[Added Lines]",
          "1276:   err: serverErrors.InvalidTuple(\"unexpected user 'folder:budgets#admin' with tupleset relation 'document#parent'\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1318:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1319:    }},",
          "1320:   },",
          "1322:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1323:   ),",
          "1324:  },",
          "",
          "[Removed Lines]",
          "1321:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
          "",
          "[Added Lines]",
          "1310:   err: serverErrors.InvalidTuple(\"unexpected user 'folder:budgets#admin' with tupleset relation 'document#parent'\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1352:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1353:    }},",
          "1354:   },",
          "1356:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1357:   ),",
          "1358:  },",
          "",
          "[Removed Lines]",
          "1355:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
          "",
          "[Added Lines]",
          "1344:   err: serverErrors.InvalidTuple(\"unexpected user 'folder:budgets#admin' with tupleset relation 'document#parent'\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1386:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1387:    }},",
          "1388:   },",
          "1390:    tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "1391:   ),",
          "1392:  },",
          "",
          "[Removed Lines]",
          "1389:   err: serverErrors.InvalidTuple(\"Userset 'folder:budgets#admin' is not allowed to have relation 'parent' with 'document:budget'\",",
          "",
          "[Added Lines]",
          "1378:   err: serverErrors.InvalidTuple(\"unexpected user 'folder:budgets#admin' with tupleset relation 'document#parent'\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1399:     {",
          "1400:      Type: \"folder\",",
          "1401:      Relations: map[string]*openfgapb.Userset{",
          "1403:       \"owner\": typesystem.This(),",
          "1406:       ),",
          "1407:      },",
          "1408:     },",
          "",
          "[Removed Lines]",
          "1402:       \"admin\": typesystem.This(),",
          "1404:       \"parent\": typesystem.Union( // let's confuse the code. if this were defined in 'document' type, it would fail",
          "1405:        typesystem.TupleToUserset(\"parent\", \"owner\"),",
          "",
          "[Added Lines]",
          "1392:       \"parent\": typesystem.Union(",
          "1393:        typesystem.TupleToUserset(\"parent\", \"owner\"), // 'folder#parent' is a tupleset relation but 'document#parent' is not",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1417:   },",
          "1418:   request: &openfgapb.WriteRequest{",
          "1419:    Writes: &openfgapb.TupleKeys{TupleKeys: []*openfgapb.TupleKey{",
          "1421:    }},",
          "1422:   },",
          "1423:  },",
          "",
          "[Removed Lines]",
          "1420:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#admin\"),",
          "",
          "[Added Lines]",
          "1408:     tuple.NewTupleKey(\"document:budget\", \"parent\", \"folder:budgets#owner\"), // the 'document#parent' relation isn't a tupleset so this is fine",
          "",
          "---------------"
        ],
        "server/test/write_authzmodel.go||server/test/write_authzmodel.go": [
          "File: server/test/write_authzmodel.go -> server/test/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:     errors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),",
          "668:    ),",
          "669:   },",
          "670:  }",
          "672:  ctx := context.Background()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:   {",
          "671:    name: \"Fails if type info metadata is omitted in 1.1 model\",",
          "672:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "673:     StoreId:       storeID,",
          "674:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "675:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "676:      {",
          "677:       Type: \"document\",",
          "678:       Relations: map[string]*openfgapb.Userset{",
          "679:        \"reader\": typesystem.This(),",
          "680:       },",
          "681:      },",
          "682:     },",
          "683:    },",
          "684:    err: serverErrors.InvalidAuthorizationModelInput(",
          "685:     errors.New(\"the assignable relation 'reader' in object type 'document' must contain at least one relation type\"),",
          "686:    ),",
          "687:   },",
          "",
          "---------------"
        ],
        "server/validation/validation.go||server/validation/validation.go": [
          "File: server/validation/validation.go -> server/validation/validation.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "storage/storage.go||storage/storage.go": [
          "File: storage/storage.go -> storage/storage.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:  }",
          "224: }",
          "228: type Writes = []*openfgapb.TupleKey",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: type TupleKeyFilterFunc func(tupleKey *openfgapb.TupleKey) bool",
          "231: type filteredTupleKeyIterator struct {",
          "232:  iter   TupleKeyIterator",
          "233:  filter TupleKeyFilterFunc",
          "234: }",
          "236: var _ TupleKeyIterator = &filteredTupleKeyIterator{}",
          "240: func (f *filteredTupleKeyIterator) Next() (*openfgapb.TupleKey, error) {",
          "242:  for {",
          "243:   tuple, err := f.iter.Next()",
          "244:   if err != nil {",
          "245:    return nil, err",
          "246:   }",
          "248:   if f.filter(tuple) {",
          "249:    return tuple, nil",
          "250:   }",
          "251:  }",
          "252: }",
          "255: func (f *filteredTupleKeyIterator) Stop() {",
          "256:  f.iter.Stop()",
          "257: }",
          "261: func NewFilteredTupleKeyIterator(iter TupleKeyIterator, filter TupleKeyFilterFunc) TupleKeyIterator {",
          "263:  return &filteredTupleKeyIterator{",
          "264:   iter,",
          "265:   filter,",
          "266:  }",
          "267: }",
          "",
          "---------------"
        ],
        "storage/storage_test.go||storage/storage_test.go": [
          "File: storage/storage_test.go -> storage/storage_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  fmt.Println(objects)",
          "192: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: func ExampleNewFilteredTupleKeyIterator() {",
          "196:  tuples := []*openfgapb.TupleKey{",
          "197:   tuple.NewTupleKey(\"document:doc1\", \"viewer\", \"user:jon\"),",
          "198:   tuple.NewTupleKey(\"document:doc1\", \"editor\", \"user:elbuo\"),",
          "199:  }",
          "201:  iter := NewFilteredTupleKeyIterator(",
          "202:   NewStaticTupleKeyIterator(tuples),",
          "203:   func(tk *openfgapb.TupleKey) bool {",
          "204:    return tk.GetRelation() == \"editor\"",
          "205:   },",
          "206:  )",
          "207:  defer iter.Stop()",
          "209:  var filtered []string",
          "210:  for {",
          "211:   tuple, err := iter.Next()",
          "212:   if err != nil {",
          "213:    if err == ErrIteratorDone {",
          "214:     break",
          "215:    }",
          "218:    panic(err)",
          "219:   }",
          "221:   filtered = append(filtered, fmt.Sprintf(\"%s#%s@%s\", tuple.GetObject(), tuple.GetRelation(), tuple.GetUser()))",
          "222:  }",
          "224:  fmt.Println(filtered)",
          "226: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c0b36c6daaeea2cae8aa4e7fdc7b30fb7483163",
      "candidate_info": {
        "commit_hash": "2c0b36c6daaeea2cae8aa4e7fdc7b30fb7483163",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/2c0b36c6daaeea2cae8aa4e7fdc7b30fb7483163",
        "files": [
          "cmd/openfga/main_test.go",
          "cmd/run_test.go",
          "internal/graph/graph_test.go",
          "pkg/encrypter/gcm_encrypter_test.go",
          "pkg/tuple/tuple_test.go",
          "pkg/typesystem/typesystem_test.go",
          "server/commands/write_test.go",
          "server/errors/encoded_errors_test.go",
          "server/server_test.go",
          "server/test/check.go",
          "server/test/connected_objects.go",
          "server/test/delete_store.go",
          "server/test/list_objects.go",
          "server/test/read_authzmodel.go",
          "server/test/read_authzmodels.go",
          "server/test/read_changes.go",
          "server/test/write.go",
          "server/test/write_assertions.go",
          "server/test/write_authzmodel.go",
          "storage/mysql/utils_test.go",
          "storage/postgres/utils_test.go",
          "storage/test/assertions.go",
          "storage/test/authz_models.go",
          "storage/test/stores.go",
          "storage/test/tuples.go"
        ],
        "message": "style: put underscores in all test names (#418)",
        "before_after_code_files": [
          "cmd/openfga/main_test.go||cmd/openfga/main_test.go",
          "cmd/run_test.go||cmd/run_test.go",
          "internal/graph/graph_test.go||internal/graph/graph_test.go",
          "pkg/encrypter/gcm_encrypter_test.go||pkg/encrypter/gcm_encrypter_test.go",
          "pkg/tuple/tuple_test.go||pkg/tuple/tuple_test.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
          "server/commands/write_test.go||server/commands/write_test.go",
          "server/errors/encoded_errors_test.go||server/errors/encoded_errors_test.go",
          "server/server_test.go||server/server_test.go",
          "server/test/check.go||server/test/check.go",
          "server/test/connected_objects.go||server/test/connected_objects.go",
          "server/test/delete_store.go||server/test/delete_store.go",
          "server/test/list_objects.go||server/test/list_objects.go",
          "server/test/read_authzmodel.go||server/test/read_authzmodel.go",
          "server/test/read_authzmodels.go||server/test/read_authzmodels.go",
          "server/test/read_changes.go||server/test/read_changes.go",
          "server/test/write.go||server/test/write.go",
          "server/test/write_assertions.go||server/test/write_assertions.go",
          "server/test/write_authzmodel.go||server/test/write_authzmodel.go",
          "storage/mysql/utils_test.go||storage/mysql/utils_test.go",
          "storage/postgres/utils_test.go||storage/postgres/utils_test.go",
          "storage/test/assertions.go||storage/test/assertions.go",
          "storage/test/authz_models.go||storage/test/authz_models.go",
          "storage/test/stores.go||storage/test/stores.go",
          "storage/test/tuples.go||storage/test/tuples.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
            "server/test/check.go||server/test/check.go",
            "server/test/write.go||server/test/write.go",
            "server/test/write_authzmodel.go||server/test/write_authzmodel.go"
          ],
          "candidate": [
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
            "server/test/check.go||server/test/check.go",
            "server/test/write.go||server/test/write.go",
            "server/test/write_authzmodel.go||server/test/write_authzmodel.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/openfga/main_test.go||cmd/openfga/main_test.go": [
          "File: cmd/openfga/main_test.go -> cmd/openfga/main_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   output output",
          "315:  }{",
          "316:   {",
          "318:    input: &openfgapb.CreateStoreRequest{},",
          "319:    output: output{",
          "320:     errorCode: codes.InvalidArgument,",
          "321:    },",
          "322:   },",
          "323:   {",
          "325:    input: &openfgapb.CreateStoreRequest{",
          "326:     Name: \"a\",",
          "327:    },",
          "",
          "[Removed Lines]",
          "317:    name:  \"empty request\",",
          "324:    name: \"invalid 'name' length\",",
          "",
          "[Added Lines]",
          "317:    name:  \"empty_request\",",
          "324:    name: \"invalid_name_length\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:    },",
          "331:   },",
          "332:   {",
          "334:    input: &openfgapb.CreateStoreRequest{",
          "335:     Name: \"$openfga\",",
          "336:    },",
          "",
          "[Removed Lines]",
          "333:    name: \"invalid 'name' characters\",",
          "",
          "[Added Lines]",
          "333:    name: \"invalid_name_characters\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:    },",
          "346:   },",
          "347:   {",
          "349:    input: &openfgapb.CreateStoreRequest{",
          "350:     Name: \"openfga\",",
          "351:    },",
          "",
          "[Removed Lines]",
          "348:    name: \"duplicate store 'name' is allowed\",",
          "",
          "[Added Lines]",
          "348:    name: \"duplicate_store_name_is_allowed\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:   testData *testData",
          "502:  }{",
          "503:   {",
          "505:    input: &openfgapb.CheckRequest{},",
          "506:    output: output{",
          "507:     errorCode: codes.InvalidArgument,",
          "508:    },",
          "509:   },",
          "510:   {",
          "512:    input: &openfgapb.CheckRequest{",
          "513:     StoreId:              \"1\",",
          "514:     AuthorizationModelId: ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "504:    name:  \"empty request\",",
          "511:    name: \"invalid storeID (too short)\",",
          "",
          "[Added Lines]",
          "504:    name:  \"empty_request\",",
          "511:    name: \"invalid_storeID_because_too_short\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "519:    },",
          "520:   },",
          "521:   {",
          "523:    input: &openfgapb.CheckRequest{",
          "524:     StoreId:              ulid.Make().String() + \"A\",",
          "525:     AuthorizationModelId: ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "522:    name: \"invalid storeID (extra chars)\",",
          "",
          "[Added Lines]",
          "522:    name: \"invalid_storeID_because_extra_chars\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "530:    },",
          "531:   },",
          "532:   {",
          "534:    input: &openfgapb.CheckRequest{",
          "535:     StoreId:              \"ABCDEFGHIJKLMNOPQRSTUVWXY@\",",
          "536:     AuthorizationModelId: ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "533:    name: \"invalid storeID (invalid chars)\",",
          "",
          "[Added Lines]",
          "533:    name: \"invalid_storeID_because_invalid_chars\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "541:    },",
          "542:   },",
          "543:   {",
          "545:    input: &openfgapb.CheckRequest{",
          "546:     StoreId:              ulid.Make().String(),",
          "547:     AuthorizationModelId: ulid.Make().String() + \"A\",",
          "",
          "[Removed Lines]",
          "544:    name: \"invalid authorization model ID (extra chars)\",",
          "",
          "[Added Lines]",
          "544:    name: \"invalid_authorization_model_ID_because_extra_chars\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "552:    },",
          "553:   },",
          "554:   {",
          "556:    input: &openfgapb.CheckRequest{",
          "557:     StoreId:              ulid.Make().String(),",
          "558:     AuthorizationModelId: \"ABCDEFGHIJKLMNOPQRSTUVWXY@\",",
          "",
          "[Removed Lines]",
          "555:    name: \"invalid authorization model ID (invalid chars)\",",
          "",
          "[Added Lines]",
          "555:    name: \"invalid_authorization_model_ID_because_invalid_chars\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "563:    },",
          "564:   },",
          "565:   {",
          "567:    input: &openfgapb.CheckRequest{",
          "568:     StoreId:              ulid.Make().String(),",
          "569:     AuthorizationModelId: ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "566:    name: \"missing tuplekey field\",",
          "",
          "[Added Lines]",
          "566:    name: \"missing_tuplekey_field\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1114:   testData *testData",
          "1115:  }{",
          "1116:   {",
          "1118:    input: &openfgapb.ReadAuthorizationModelRequest{},",
          "1119:    output: output{",
          "1120:     errorCode: codes.InvalidArgument,",
          "1121:    },",
          "1122:   },",
          "1123:   {",
          "1125:    input: &openfgapb.ReadAuthorizationModelRequest{",
          "1126:     StoreId: \"1\",",
          "1127:     Id:      ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1117:    name:  \"empty request\",",
          "1124:    name: \"invalid storeID (too short)\",",
          "",
          "[Added Lines]",
          "1117:    name:  \"empty_request\",",
          "1124:    name: \"invalid_storeID_because_too_short\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1131:    },",
          "1132:   },",
          "1133:   {",
          "1135:    input: &openfgapb.ReadAuthorizationModelRequest{",
          "1136:     StoreId: ulid.Make().String() + \"A\",",
          "1137:     Id:      ulid.Make().String(), // ulids aren't required at this time",
          "",
          "[Removed Lines]",
          "1134:    name: \"invalid storeID (extra chars)\",",
          "",
          "[Added Lines]",
          "1134:    name: \"invalid_storeID_because_extra_chars\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1141:    },",
          "1142:   },",
          "1143:   {",
          "1145:    input: &openfgapb.ReadAuthorizationModelRequest{",
          "1146:     StoreId: ulid.Make().String(),",
          "1147:     Id:      ulid.Make().String() + \"A\",",
          "",
          "[Removed Lines]",
          "1144:    name: \"invalid authorization model ID (extra chars)\",",
          "",
          "[Added Lines]",
          "1144:    name: \"invalid_authorization_model_ID_because_extra_chars\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1241:   output output",
          "1242:  }{",
          "1243:   {",
          "1245:    input: &openfgapb.WriteAuthorizationModelRequest{},",
          "1246:    output: output{",
          "1247:     errorCode: codes.InvalidArgument,",
          "1248:    },",
          "1249:   },",
          "1250:   {",
          "1252:    input: &openfgapb.WriteAuthorizationModelRequest{",
          "1253:     StoreId: \"1\",",
          "1254:    },",
          "",
          "[Removed Lines]",
          "1244:    name:  \"empty request\",",
          "1251:    name: \"invalid storeID (too short)\",",
          "",
          "[Added Lines]",
          "1244:    name:  \"empty_request\",",
          "1251:    name: \"invalid_storeID_because_too_short\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1257:    },",
          "1258:   },",
          "1259:   {",
          "1261:    input: &openfgapb.WriteAuthorizationModelRequest{",
          "1262:     StoreId: ulid.Make().String() + \"A\",",
          "1263:    },",
          "",
          "[Removed Lines]",
          "1260:    name: \"invalid storeID (extra chars)\",",
          "",
          "[Added Lines]",
          "1260:    name: \"invalid_storeID_because_extra_chars\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1266:    },",
          "1267:   },",
          "1268:   {",
          "1270:    input: &openfgapb.WriteAuthorizationModelRequest{",
          "1271:     StoreId: ulid.Make().String(),",
          "1272:    },",
          "",
          "[Removed Lines]",
          "1269:    name: \"missing type definitions\",",
          "",
          "[Added Lines]",
          "1269:    name: \"missing_type_definitions\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1275:    },",
          "1276:   },",
          "1277:   {",
          "1279:    input: &openfgapb.WriteAuthorizationModelRequest{",
          "1280:     StoreId: ulid.Make().String(),",
          "1281:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "1278:    name: \"invalid type definition (empty type name)\",",
          "",
          "[Added Lines]",
          "1278:    name: \"invalid_type_definition_because_empty_type_name\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1292:    },",
          "1293:   },",
          "1294:   {",
          "1296:    input: &openfgapb.WriteAuthorizationModelRequest{",
          "1297:     StoreId: ulid.Make().String(),",
          "1298:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "1295:    name: \"invalid type definition (too many chars in name)\",",
          "",
          "[Added Lines]",
          "1295:    name: \"invalid_type_definition_because_too_many_chars_in_name\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1309:    },",
          "1310:   },",
          "1311:   {",
          "1313:    input: &openfgapb.WriteAuthorizationModelRequest{",
          "1314:     StoreId: ulid.Make().String(),",
          "1315:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "1312:    name: \"invalid type definition (invalid chars in name)\",",
          "",
          "[Added Lines]",
          "1312:    name: \"invalid_type_definition_because_invalid_chars_in_name\",",
          "",
          "---------------"
        ],
        "cmd/run_test.go||cmd/run_test.go": [
          "File: cmd/run_test.go -> cmd/run_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "215: }",
          "217: func TestVerifyConfig(t *testing.T) {",
          "219:   cfg := DefaultConfig()",
          "220:   cfg.ListObjectsDeadline = 5 * time.Minute",
          "221:   cfg.HTTP.UpstreamTimeout = 2 * time.Second",
          "",
          "[Removed Lines]",
          "218:  t.Run(\"UpstreamTimeout cannot be less than ListObjectsDeadline\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "218:  t.Run(\"UpstreamTimeout_cannot_be_less_than_ListObjectsDeadline\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   require.EqualError(t, err, \"config 'http.upstreamTimeout' (2s) cannot be lower than 'listObjectsDeadline' config (5m0s)\")",
          "225:  })",
          "228:   cfg := DefaultConfig()",
          "229:   cfg.HTTP.TLS = &TLSConfig{",
          "230:    Enabled: true,",
          "",
          "[Removed Lines]",
          "227:  t.Run(\"failing to set http cert path will not allow server to start\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "227:  t.Run(\"failing_to_set_http_cert_path_will_not_allow_server_to_start\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:   require.EqualError(t, err, \"'http.tls.cert' and 'http.tls.key' configs must be set\")",
          "236:  })",
          "239:   cfg := DefaultConfig()",
          "240:   cfg.GRPC.TLS = &TLSConfig{",
          "241:    Enabled: true,",
          "",
          "[Removed Lines]",
          "238:  t.Run(\"failing to set grpc cert path will not allow server to start\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "238:  t.Run(\"failing_to_set_grpc_cert_path_will_not_allow_server_to_start\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:   require.EqualError(t, err, \"'grpc.tls.cert' and 'grpc.tls.key' configs must be set\")",
          "247:  })",
          "250:   cfg := DefaultConfig()",
          "251:   cfg.HTTP.TLS = &TLSConfig{",
          "252:    Enabled:  true,",
          "",
          "[Removed Lines]",
          "249:  t.Run(\"failing to set http key path will not allow server to start\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "249:  t.Run(\"failing_to_set_http_key_path_will_not_allow_server_to_start\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "257:   require.EqualError(t, err, \"'http.tls.cert' and 'http.tls.key' configs must be set\")",
          "258:  })",
          "261:   cfg := DefaultConfig()",
          "262:   cfg.GRPC.TLS = &TLSConfig{",
          "263:    Enabled:  true,",
          "",
          "[Removed Lines]",
          "260:  t.Run(\"failing to set grpc key path will not allow server to start\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "260:  t.Run(\"failing_to_set_grpc_key_path_will_not_allow_server_to_start\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:  ensureServiceUp(t, cfg.GRPC.Addr, cfg.HTTP.Addr, nil, true)",
          "323:  tests := []authTest{{",
          "325:   authHeader: \"Bearer incorrectkey\",",
          "326:   expectedErrorResponse: &serverErrors.ErrorResponse{",
          "327:    Code:    \"unauthenticated\",",
          "",
          "[Removed Lines]",
          "324:   _name:      \"Header with incorrect key fails\",",
          "",
          "[Added Lines]",
          "324:   _name:      \"Header_with_incorrect_key_fails\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329:   },",
          "330:   expectedStatusCode: 401,",
          "331:  }, {",
          "333:   authHeader: \"\",",
          "334:   expectedErrorResponse: &serverErrors.ErrorResponse{",
          "335:    Code:    \"bearer_token_missing\",",
          "",
          "[Removed Lines]",
          "332:   _name:      \"Missing header fails\",",
          "",
          "[Added Lines]",
          "332:   _name:      \"Missing_header_fails\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "337:   },",
          "338:   expectedStatusCode: 401,",
          "339:  }, {",
          "341:   authHeader:         fmt.Sprintf(\"Bearer %s\", cfg.Authn.AuthnPresharedKeyConfig.Keys[0]),",
          "342:   expectedStatusCode: 200,",
          "343:  }, {",
          "345:   authHeader:         fmt.Sprintf(\"Bearer %s\", cfg.Authn.AuthnPresharedKeyConfig.Keys[1]),",
          "346:   expectedStatusCode: 200,",
          "347:  }}",
          "",
          "[Removed Lines]",
          "340:   _name:              \"Correct key one succeeds\",",
          "344:   _name:              \"Correct key two succeeds\",",
          "",
          "[Added Lines]",
          "340:   _name:              \"Correct_key_one_succeeds\",",
          "344:   _name:              \"Correct_key_two_succeeds\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "458:   want want",
          "459:  }{",
          "460:   {",
          "462:    args: args{",
          "463:     origin: \"http://localhost\",",
          "464:     header: \"Authorization, X-Custom-Header\",",
          "",
          "[Removed Lines]",
          "461:    name: \"Good Origin\",",
          "",
          "[Added Lines]",
          "461:    name: \"Good_Origin\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "469:    },",
          "470:   },",
          "471:   {",
          "473:    args: args{",
          "474:     origin: \"http://openfga.example\",",
          "475:     header: \"X-Custom-Header\",",
          "",
          "[Removed Lines]",
          "472:    name: \"Bad Origin\",",
          "",
          "[Added Lines]",
          "472:    name: \"Bad_Origin\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "480:    },",
          "481:   },",
          "482:   {",
          "484:    args: args{",
          "485:     origin: \"http://localhost\",",
          "486:     header: \"Bad-Custom-Header\",",
          "",
          "[Removed Lines]",
          "483:    name: \"Bad Header\",",
          "",
          "[Added Lines]",
          "483:    name: \"Bad_Header\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "550:  tests := []authTest{",
          "551:   {",
          "553:    authHeader: \"Bearer incorrecttoken\",",
          "554:    expectedErrorResponse: &serverErrors.ErrorResponse{",
          "555:     Code:    \"auth_failed_invalid_bearer_token\",",
          "",
          "[Removed Lines]",
          "552:    _name:      \"Header with invalid token fails\",",
          "",
          "[Added Lines]",
          "552:    _name:      \"Header_with_invalid_token_fails\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "558:    expectedStatusCode: 401,",
          "559:   },",
          "560:   {",
          "562:    authHeader: \"\",",
          "563:    expectedErrorResponse: &serverErrors.ErrorResponse{",
          "564:     Code:    \"bearer_token_missing\",",
          "",
          "[Removed Lines]",
          "561:    _name:      \"Missing header fails\",",
          "",
          "[Added Lines]",
          "561:    _name:      \"Missing_header_fails\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "567:    expectedStatusCode: 401,",
          "568:   },",
          "569:   {",
          "571:    authHeader:         \"Bearer \" + trustedToken,",
          "572:    expectedStatusCode: 200,",
          "573:   },",
          "",
          "[Removed Lines]",
          "570:    _name:              \"Correct token succeeds\",",
          "",
          "[Added Lines]",
          "570:    _name:              \"Correct_token_succeeds\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "586: }",
          "588: func TestHTTPServingTLS(t *testing.T) {",
          "590:   certsAndKeys := createCertsAndKeys(t)",
          "591:   defer certsAndKeys.Clean()",
          "",
          "[Removed Lines]",
          "589:  t.Run(\"enable HTTP TLS is false, even with keys set, will serve plaintext\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "589:  t.Run(\"enable_HTTP_TLS_is_false,_even_with_keys_set,_will_serve_plaintext\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "608:   ensureServiceUp(t, cfg.GRPC.Addr, cfg.HTTP.Addr, nil, true)",
          "609:  })",
          "612:   certsAndKeys := createCertsAndKeys(t)",
          "613:   defer certsAndKeys.Clean()",
          "",
          "[Removed Lines]",
          "611:  t.Run(\"enable HTTP TLS is true will serve HTTP TLS\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "611:  t.Run(\"enable_HTTP_TLS_is_true_will_serve_HTTP_TLS\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "644: }",
          "646: func TestGRPCServingTLS(t *testing.T) {",
          "648:   certsAndKeys := createCertsAndKeys(t)",
          "649:   defer certsAndKeys.Clean()",
          "",
          "[Removed Lines]",
          "647:  t.Run(\"enable grpc TLS is false, even with keys set, will serve plaintext\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "647:  t.Run(\"enable_grpc_TLS_is_false,_even_with_keys_set,_will_serve_plaintext\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "667:   ensureServiceUp(t, cfg.GRPC.Addr, cfg.HTTP.Addr, nil, false)",
          "668:  })",
          "671:   certsAndKeys := createCertsAndKeys(t)",
          "672:   defer certsAndKeys.Clean()",
          "",
          "[Removed Lines]",
          "670:  t.Run(\"enable grpc TLS is true will serve grpc TLS\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "670:  t.Run(\"enable_grpc_TLS_is_true_will_serve_grpc_TLS\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "internal/graph/graph_test.go||internal/graph/graph_test.go": [
          "File: internal/graph/graph_test.go -> internal/graph/graph_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:    },",
          "256:   },",
          "257:   {",
          "259:    model: &openfgapb.AuthorizationModel{",
          "260:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "261:      {",
          "",
          "[Removed Lines]",
          "258:    name: \"Circular reference\",",
          "",
          "[Added Lines]",
          "258:    name: \"Circular_reference\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:    },",
          "306:   },",
          "307:   {",
          "309:    model: &openfgapb.AuthorizationModel{",
          "310:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "311:      {",
          "",
          "[Removed Lines]",
          "308:    name: \"Cyclical parent/child definition\",",
          "",
          "[Added Lines]",
          "308:    name: \"Cyclical_parent/child_definition\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:    },",
          "348:   },",
          "349:   {",
          "351:    model: &openfgapb.AuthorizationModel{",
          "352:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "353:      {",
          "",
          "[Removed Lines]",
          "350:    name: \"No graph relationship connectivity\",",
          "",
          "[Added Lines]",
          "350:    name: \"No_graph_relationship_connectivity\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "575:    },",
          "576:   },",
          "577:   {",
          "579:    model: &openfgapb.AuthorizationModel{",
          "580:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "581:      {",
          "",
          "[Removed Lines]",
          "578:    name: \"Undefined relation on one type involved in a tuple to userset\",",
          "",
          "[Added Lines]",
          "578:    name: \"Undefined_relation_on_one_type_involved_in_a_tuple_to_userset\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "628:    },",
          "629:   },",
          "630:   {",
          "632:    model: &openfgapb.AuthorizationModel{",
          "633:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "634:      {",
          "",
          "[Removed Lines]",
          "631:    name: \"Nested group membership returns only top-level ingress\",",
          "",
          "[Added Lines]",
          "631:    name: \"Nested_group_membership_returns_only_top-level_ingress\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "662:    },",
          "663:   },",
          "664:   {",
          "666:    model: &openfgapb.AuthorizationModel{",
          "667:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "668:      {",
          "",
          "[Removed Lines]",
          "665:    name: \"Ingresses for non-assignable relation\",",
          "",
          "[Added Lines]",
          "665:    name: \"Ingresses_for_non-assignable_relation\",",
          "",
          "---------------"
        ],
        "pkg/encrypter/gcm_encrypter_test.go||pkg/encrypter/gcm_encrypter_test.go": [
          "File: pkg/encrypter/gcm_encrypter_test.go -> pkg/encrypter/gcm_encrypter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: }",
          "27: func TestEncryptDecrypt(t *testing.T) {",
          "29:   encrypter, err := NewGCMEncrypter(\"baz\")",
          "30:   require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "28:  t.Run(\"encrypt-decrypt returns original\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "28:  t.Run(\"encrypt-decrypt_returns_original\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   require.Equal(t, want, got)",
          "41:  })",
          "44:   e1, err := NewGCMEncrypter(\"somekey\")",
          "45:   require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "43:  t.Run(\"two different encrypters don't work together\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "43:  t.Run(\"two_different_encrypters_do_not_work_together\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "pkg/tuple/tuple_test.go||pkg/tuple/tuple_test.go": [
          "File: pkg/tuple/tuple_test.go -> pkg/tuple/tuple_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:    name: \"empty\",",
          "19:   },",
          "20:   {",
          "22:    objectID:     \"foo:\",",
          "23:    expectedType: \"foo\",",
          "24:   },",
          "25:   {",
          "27:    objectID:    \"foo\",",
          "28:    expectedOID: \"foo\",",
          "29:   },",
          "30:   {",
          "32:    objectID:     \":foo\",",
          "33:    expectedType: \"\",",
          "34:    expectedOID:  \"foo\",",
          "35:   },",
          "36:   {",
          "38:    objectID:     \"foo:bar\",",
          "39:    expectedType: \"foo\",",
          "40:    expectedOID:  \"bar\",",
          "41:   },",
          "42:   {",
          "44:    objectID:     \"url:https://bar/baz\",",
          "45:    expectedType: \"url\",",
          "46:    expectedOID:  \"https://bar/baz\",",
          "",
          "[Removed Lines]",
          "21:    name:         \"type only\",",
          "26:    name:        \"no separator\",",
          "31:    name:         \"missing type\",",
          "37:    name:         \"valid input\",",
          "43:    name:         \"separator in OID\",",
          "",
          "[Added Lines]",
          "21:    name:         \"type_only\",",
          "26:    name:        \"no_separator\",",
          "31:    name:         \"missing_type\",",
          "37:    name:         \"valid_input\",",
          "43:    name:         \"separator_in_OID\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:    name: \"empty\",",
          "79:   },",
          "80:   {",
          "82:    objectRelation: \"github|foo@bar.com\",",
          "83:    expectedObject: \"github|foo@bar.com\",",
          "84:   },",
          "85:   {",
          "87:    objectRelation:   \"foo:bar#baz\",",
          "88:    expectedObject:   \"foo:bar\",",
          "89:    expectedRelation: \"baz\",",
          "90:   },",
          "91:   {",
          "93:    objectRelation: \"foo:bar#\",",
          "94:    expectedObject: \"foo:bar\",",
          "95:   },",
          "96:   {",
          "98:    objectRelation:   \"foo:bar#baz#reader\",",
          "99:    expectedObject:   \"foo:bar#baz\",",
          "100:    expectedRelation: \"reader\",",
          "",
          "[Removed Lines]",
          "81:    name:           \"userset with no separator\",",
          "86:    name:             \"valid input\",",
          "92:    name:           \"trailing separator\",",
          "97:    name:             \"# in objectid\",",
          "",
          "[Added Lines]",
          "81:    name:           \"userset_with_no_separator\",",
          "86:    name:             \"valid_input\",",
          "92:    name:           \"trailing_separator\",",
          "97:    name:             \"#_in_objectid\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:    expected: false,",
          "125:   },",
          "126:   {",
          "128:    objectRelation: \"foo#bar\",",
          "129:    expected:       false,",
          "130:   },",
          "131:   {",
          "133:    objectRelation: \"github|foo@bar.com\",",
          "134:    expected:       false,",
          "135:   },",
          "",
          "[Removed Lines]",
          "127:    name:           \"invalid object (missing type)\",",
          "132:    name:           \"user literal\",",
          "",
          "[Added Lines]",
          "127:    name:           \"invalid_object_(missing_type)\",",
          "132:    name:           \"user_literal\",",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   model *openfgapb.AuthorizationModel",
          "14:  }{",
          "15:   {",
          "17:    model: &openfgapb.AuthorizationModel{",
          "18:     SchemaVersion: SchemaVersion1_0,",
          "19:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "16:    name: \"empty relations\",",
          "",
          "[Added Lines]",
          "16:    name: \"empty_relations\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:    },",
          "25:   },",
          "26:   {",
          "28:    model: &openfgapb.AuthorizationModel{",
          "29:     SchemaVersion: SchemaVersion1_0,",
          "30:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "27:    name: \"zero length relations is valid\",",
          "",
          "[Added Lines]",
          "27:    name: \"zero_length_relations_is_valid\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   err   error",
          "54:  }{",
          "55:   {",
          "57:    model: &openfgapb.AuthorizationModel{",
          "58:     SchemaVersion: SchemaVersion1_0,",
          "59:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "56:    name: \"empty rewrites\",",
          "",
          "[Added Lines]",
          "56:    name: \"empty_rewrites\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:    err: ErrInvalidUsersetRewrite,",
          "69:   },",
          "70:   {",
          "72:    model: &openfgapb.AuthorizationModel{",
          "73:     SchemaVersion: SchemaVersion1_0,",
          "74:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "71:    name: \"invalid relation: self reference in computedUserset\",",
          "",
          "[Added Lines]",
          "71:    name: \"invalid_relation:_self_reference_in_computedUserset\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:    err: ErrInvalidUsersetRewrite,",
          "88:   },",
          "89:   {",
          "91:    model: &openfgapb.AuthorizationModel{",
          "92:     SchemaVersion: SchemaVersion1_0,",
          "93:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "90:    name: \"invalid relation: self reference in union\",",
          "",
          "[Added Lines]",
          "90:    name: \"invalid_relation:_self_reference_in_union\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "117:    err: ErrInvalidUsersetRewrite,",
          "118:   },",
          "119:   {",
          "121:    model: &openfgapb.AuthorizationModel{",
          "122:     SchemaVersion: SchemaVersion1_0,",
          "123:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "120:    name: \"invalid relation: self reference in intersection\",",
          "",
          "[Added Lines]",
          "120:    name: \"invalid_relation:_self_reference_in_intersection\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "147:    err: ErrInvalidUsersetRewrite,",
          "148:   },",
          "149:   {",
          "151:    model: &openfgapb.AuthorizationModel{",
          "152:     SchemaVersion: SchemaVersion1_0,",
          "153:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "150:    name: \"invalid relation: self reference in difference base\",",
          "",
          "[Added Lines]",
          "150:    name: \"invalid_relation:_self_reference_in_difference_base\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175:    err: ErrInvalidUsersetRewrite,",
          "176:   },",
          "177:   {",
          "179:    model: &openfgapb.AuthorizationModel{",
          "180:     SchemaVersion: SchemaVersion1_0,",
          "181:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "178:    name: \"invalid relation: self reference in difference subtract\",",
          "",
          "[Added Lines]",
          "178:    name: \"invalid_relation:_self_reference_in_difference_subtract\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "203:    err: ErrInvalidUsersetRewrite,",
          "204:   },",
          "205:   {",
          "207:    model: &openfgapb.AuthorizationModel{",
          "208:     SchemaVersion: SchemaVersion1_0,",
          "209:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "206:    name: \"invalid relation: computedUserset to relation which does not exist\",",
          "",
          "[Added Lines]",
          "206:    name: \"invalid_relation:_computedUserset_to_relation_which_does_not_exist\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "222:    err: ErrRelationUndefined,",
          "223:   },",
          "224:   {",
          "226:    model: &openfgapb.AuthorizationModel{",
          "227:     SchemaVersion: SchemaVersion1_0,",
          "228:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "225:    name: \"invalid relation: computedUserset in a union\",",
          "",
          "[Added Lines]",
          "225:    name: \"invalid_relation:_computedUserset_in_a_union\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "252:    err: ErrRelationUndefined,",
          "253:   },",
          "254:   {",
          "256:    model: &openfgapb.AuthorizationModel{",
          "257:     SchemaVersion: SchemaVersion1_0,",
          "258:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "255:    name: \"invalid relation: computedUserset in a intersection\",",
          "",
          "[Added Lines]",
          "255:    name: \"invalid_relation:_computedUserset_in_a_intersection\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "282:    err: ErrRelationUndefined,",
          "283:   },",
          "284:   {",
          "286:    model: &openfgapb.AuthorizationModel{",
          "287:     SchemaVersion: SchemaVersion1_0,",
          "288:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "285:    name: \"invalid relation: computedUserset in a difference base\",",
          "",
          "[Added Lines]",
          "285:    name: \"invalid_relation:_computedUserset_in_a_difference_base\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "310:    err: ErrRelationUndefined,",
          "311:   },",
          "312:   {",
          "314:    model: &openfgapb.AuthorizationModel{",
          "315:     SchemaVersion: SchemaVersion1_0,",
          "316:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "313:    name: \"invalid relation: computedUserset in a difference subtract\",",
          "",
          "[Added Lines]",
          "313:    name: \"invalid_relation:_computedUserset_in_a_difference_subtract\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "338:    err: ErrRelationUndefined,",
          "339:   },",
          "340:   {",
          "342:    model: &openfgapb.AuthorizationModel{",
          "343:     SchemaVersion: SchemaVersion1_0,",
          "344:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "341:    name: \"invalid relation: tupleToUserset where tupleset is not valid\",",
          "",
          "[Added Lines]",
          "341:    name: \"invalid_relation:_tupleToUserset_where_tupleset_is_not_valid\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "386:    err: ErrRelationUndefined,",
          "387:   },",
          "388:   {",
          "390:    model: &openfgapb.AuthorizationModel{",
          "391:     SchemaVersion: SchemaVersion1_0,",
          "392:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "389:    name: \"invalid relation: tupleToUserset where computed userset is not valid\",",
          "",
          "[Added Lines]",
          "389:    name: \"invalid_relation:_tupleToUserset_where_computed_userset_is_not_valid\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "448:   model *openfgapb.AuthorizationModel",
          "449:  }{",
          "450:   {",
          "452:    model: &openfgapb.AuthorizationModel{",
          "453:     SchemaVersion: SchemaVersion1_1,",
          "454:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "451:    name: \"succeeds on a valid typeSystem with an objectType type\",",
          "",
          "[Added Lines]",
          "451:    name: \"succeeds_on_a_valid_typeSystem_with_an_objectType_type\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "476:    },",
          "477:   },",
          "478:   {",
          "480:    model: &openfgapb.AuthorizationModel{",
          "481:     SchemaVersion: SchemaVersion1_1,",
          "482:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "479:    name: \"succeeds on a valid typeSystem with a type and type#relation type\",",
          "",
          "[Added Lines]",
          "479:    name: \"succeeds_on_a_valid_typeSystem_with_a_type_and_type#relation_type\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "551:   err   error",
          "552:  }{",
          "553:   {",
          "555:    model: &openfgapb.AuthorizationModel{",
          "556:     SchemaVersion: SchemaVersion1_1,",
          "557:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "554:    name: \"relational type which does not exist\",",
          "",
          "[Added Lines]",
          "554:    name: \"relational_type_which_does_not_exist\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "577:    err: InvalidRelationTypeError(\"document\", \"reader\", \"group\", \"\"),",
          "578:   },",
          "579:   {",
          "581:    model: &openfgapb.AuthorizationModel{",
          "582:     SchemaVersion: SchemaVersion1_1,",
          "583:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "580:    name: \"relation type of form type#relation where relation doesn't exist\",",
          "",
          "[Added Lines]",
          "580:    name: \"relation_type_of_form_type#relation_where_relation_doesn't_exist\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "607:    err: InvalidRelationTypeError(\"document\", \"reader\", \"group\", \"admin\"),",
          "608:   },",
          "609:   {",
          "611:    model: &openfgapb.AuthorizationModel{",
          "612:     SchemaVersion: SchemaVersion1_1,",
          "613:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "610:    name: \"assignable relation with no type: this\",",
          "",
          "[Added Lines]",
          "610:    name: \"assignable_relation_with_no_type:_this\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "624:    err: AssignableRelationError(\"document\", \"reader\"),",
          "625:   },",
          "626:   {",
          "628:    model: &openfgapb.AuthorizationModel{",
          "629:     SchemaVersion: SchemaVersion1_1,",
          "630:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "627:    name: \"assignable relation with no type: union\",",
          "",
          "[Added Lines]",
          "627:    name: \"assignable_relation_with_no_type:_union\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "673:    err: AssignableRelationError(\"document\", \"reader\"),",
          "674:   },",
          "675:   {",
          "677:    model: &openfgapb.AuthorizationModel{",
          "678:     SchemaVersion: SchemaVersion1_1,",
          "679:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "676:    name: \"assignable relation with no type: intersection\",",
          "",
          "[Added Lines]",
          "676:    name: \"assignable_relation_wit_no_type:_intersection\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "722:    err: AssignableRelationError(\"document\", \"reader\"),",
          "723:   },",
          "724:   {",
          "726:    model: &openfgapb.AuthorizationModel{",
          "727:     SchemaVersion: SchemaVersion1_1,",
          "728:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "725:    name: \"assignable relation with no type: difference base\",",
          "",
          "[Added Lines]",
          "725:    name: \"assignable_relation_with_no_type:_difference base\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "769:    err: AssignableRelationError(\"document\", \"reader\"),",
          "770:   },",
          "771:   {",
          "773:    model: &openfgapb.AuthorizationModel{",
          "774:     SchemaVersion: SchemaVersion1_1,",
          "775:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "772:    name: \"assignable relation with no type: difference subtract\",",
          "",
          "[Added Lines]",
          "772:    name: \"assignable_relation_with_no_type:_difference_subtract\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "816:    err: AssignableRelationError(\"document\", \"reader\"),",
          "817:   },",
          "818:   {",
          "820:    model: &openfgapb.AuthorizationModel{",
          "821:     SchemaVersion: SchemaVersion1_1,",
          "822:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "819:    name: \"non-assignable relation with a type\",",
          "",
          "[Added Lines]",
          "819:    name: \"non-assignable_relation_with_a_type\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "859:    err: NonAssignableRelationError(\"document\", \"reader\"),",
          "860:   },",
          "861:   {",
          "863:    model: &openfgapb.AuthorizationModel{",
          "864:     SchemaVersion: SchemaVersion1_1,",
          "865:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "862:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite\",",
          "",
          "[Added Lines]",
          "862:    name: \"userset_specified_as_allowed_type_but_the_relation_is_used_in_a_TTU_rewrite\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "902:    err: InvalidRelationTypeError(\"document\", \"parent\", \"folder\", \"member\"),",
          "903:   },",
          "904:   {",
          "906:    model: &openfgapb.AuthorizationModel{",
          "907:     SchemaVersion: SchemaVersion1_1,",
          "908:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "905:    name: \"userset specified as allowed type, but the relation is used in a TTU rewrite included in a union\",",
          "",
          "[Added Lines]",
          "905:    name: \"userset_specified_as_allowed_type_but_the_relation_is_used_in_a_TTU_rewrite_included_in_a_union\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1027:   expectedErr error",
          "1028:  }{",
          "1029:   {",
          "1031:    model: &openfgapb.AuthorizationModel{",
          "1032:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1033:      {",
          "",
          "[Removed Lines]",
          "1030:    name: \"Indirect ComputedUserset through TTU Containing Intersection\",",
          "",
          "[Added Lines]",
          "1030:    name: \"Indirect_ComputedUserset_through_TTU_Containing_Intersection\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1077:    expected: true,",
          "1078:   },",
          "1079:   {",
          "1081:    model: &openfgapb.AuthorizationModel{",
          "1082:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1083:      {",
          "",
          "[Removed Lines]",
          "1080:    name: \"TupleToUserset Relations Containing Intersection\",",
          "",
          "[Added Lines]",
          "1080:    name: \"TupleToUserset_Relations_Containing_Intersection\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1126:    expected: true,",
          "1127:   },",
          "1128:   {",
          "1130:    model: &openfgapb.AuthorizationModel{",
          "1131:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1132:      {",
          "",
          "[Removed Lines]",
          "1129:    name: \"Indirect Relations Containing Intersection\",",
          "",
          "[Added Lines]",
          "1129:    name: \"Indirect_Relations_Containing_Intersection\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1144:    expected: true,",
          "1145:   },",
          "1146:   {",
          "1148:    model: &openfgapb.AuthorizationModel{",
          "1149:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1150:      {",
          "",
          "[Removed Lines]",
          "1147:    name: \"Undefined type\",",
          "",
          "[Added Lines]",
          "1147:    name: \"Undefined_type\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1157:    expectedErr: ErrObjectTypeUndefined,",
          "1158:   },",
          "1159:   {",
          "1161:    model: &openfgapb.AuthorizationModel{",
          "1162:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1163:      {",
          "",
          "[Removed Lines]",
          "1160:    name: \"Undefined relation\",",
          "",
          "[Added Lines]",
          "1160:    name: \"Undefined_relation\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1195:   expectedErr error",
          "1196:  }{",
          "1197:   {",
          "1199:    model: &openfgapb.AuthorizationModel{",
          "1200:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1201:      {",
          "",
          "[Removed Lines]",
          "1198:    name: \"Indirect ComputedUserset through TTU Containing Exclusion\",",
          "",
          "[Added Lines]",
          "1198:    name: \"Indirect_ComputedUserset_through_TTU_Containing_Exclusion\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1245:    expected: true,",
          "1246:   },",
          "1247:   {",
          "1249:    model: &openfgapb.AuthorizationModel{",
          "1250:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1251:      {",
          "",
          "[Removed Lines]",
          "1248:    name: \"TupleToUserset Relations Containing Exclusion\",",
          "",
          "[Added Lines]",
          "1248:    name: \"TupleToUserset_Relations_Containing_Exclusion\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1294:    expected: true,",
          "1295:   },",
          "1296:   {",
          "1298:    model: &openfgapb.AuthorizationModel{",
          "1299:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1300:      {",
          "",
          "[Removed Lines]",
          "1297:    name: \"Indirect Relations Containing Exclusion\",",
          "",
          "[Added Lines]",
          "1297:    name: \"Indirect_Relations_Containing_Exclusion\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1314:    expected: true,",
          "1315:   },",
          "1316:   {",
          "1318:    model: &openfgapb.AuthorizationModel{",
          "1319:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1320:      {",
          "",
          "[Removed Lines]",
          "1317:    name: \"Undefined type\",",
          "",
          "[Added Lines]",
          "1317:    name: \"Undefined_type\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1327:    expectedErr: ErrObjectTypeUndefined,",
          "1328:   },",
          "1329:   {",
          "1331:    model: &openfgapb.AuthorizationModel{",
          "1332:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1333:      {",
          "",
          "[Removed Lines]",
          "1330:    name: \"Undefined relation\",",
          "",
          "[Added Lines]",
          "1330:    name: \"Undefined_relation\",",
          "",
          "---------------"
        ],
        "server/commands/write_test.go||server/commands/write_test.go": [
          "File: server/commands/write_test.go -> server/commands/write_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  tests := []test{",
          "49:   {",
          "51:    deletes: []*openfgapb.TupleKey{},",
          "52:    writes:  []*openfgapb.TupleKey{},",
          "53:   },",
          "54:   {",
          "56:    deletes: []*openfgapb.TupleKey{items[0], items[1]},",
          "57:    writes:  []*openfgapb.TupleKey{items[2], items[3]},",
          "58:   },",
          "59:   {",
          "61:    deletes:       []*openfgapb.TupleKey{items[0], items[1], items[0]},",
          "62:    writes:        []*openfgapb.TupleKey{},",
          "63:    expectedError: serverErrors.DuplicateTupleInWrite(items[0]),",
          "64:   },",
          "65:   {",
          "67:    deletes:       []*openfgapb.TupleKey{},",
          "68:    writes:        []*openfgapb.TupleKey{items[0], items[1], items[0]},",
          "69:    expectedError: serverErrors.DuplicateTupleInWrite(items[0]),",
          "70:   },",
          "71:   {",
          "73:    deletes:       []*openfgapb.TupleKey{items[2], items[1]},",
          "74:    writes:        []*openfgapb.TupleKey{items[0], items[1]},",
          "75:    expectedError: serverErrors.DuplicateTupleInWrite(items[1]),",
          "76:   },",
          "77:   {",
          "79:    deletes:       items[:5],",
          "80:    writes:        items[5:],",
          "81:    expectedError: serverErrors.ExceededEntityLimit(\"write operations\", maxTuplesInWriteOp),",
          "",
          "[Removed Lines]",
          "50:    name:    \"empty deletes and writes\",",
          "55:    name:    \"good deletes and writes\",",
          "60:    name:          \"duplicate deletes\",",
          "66:    name:          \"duplicate writes\",",
          "72:    name:          \"same item appeared in writes and deletes\",",
          "78:    name:          \"too many items writes and deletes\",",
          "",
          "[Added Lines]",
          "50:    name:    \"empty_deletes_and_writes\",",
          "55:    name:    \"good_deletes_and_writes\",",
          "60:    name:          \"duplicate_deletes\",",
          "66:    name:          \"duplicate_writes\",",
          "72:    name:          \"same_item_appeared_in_writes_and_deletes\",",
          "78:    name:          \"too_many_items_writes_and_deletes\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:  tests := []test{",
          "108:   {",
          "110:    deletes:       nil,",
          "111:    writes:        nil,",
          "112:    expectedError: serverErrors.InvalidWriteInput,",
          "113:   },",
          "114:   {",
          "116:    deletes: []*openfgapb.TupleKey{},",
          "117:    writes:  []*openfgapb.TupleKey{badItem},",
          "118:    expectedError: serverErrors.ValidationError(",
          "",
          "[Removed Lines]",
          "109:    name:          \"nil for deletes and writes\",",
          "115:    name:    \"write failure with invalid user\",",
          "",
          "[Added Lines]",
          "109:    name:          \"nil_for_deletes_and_writes\",",
          "115:    name:    \"write_failure_with_invalid_user\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:    ),",
          "124:   },",
          "125:   {",
          "127:    deletes: []*openfgapb.TupleKey{badItem},",
          "128:    writes:  []*openfgapb.TupleKey{},",
          "129:    expectedError: serverErrors.ValidationError(",
          "",
          "[Removed Lines]",
          "126:    name:    \"delete failure with invalid user\",",
          "",
          "[Added Lines]",
          "126:    name:    \"delete_failure_with_invalid_user\",",
          "",
          "---------------"
        ],
        "server/errors/encoded_errors_test.go||server/errors/encoded_errors_test.go": [
          "File: server/errors/encoded_errors_test.go -> server/errors/encoded_errors_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  }",
          "22:  var tests = []encodedTests{",
          "23:   {",
          "25:    errorCode:              20,",
          "26:    message:                \"error message\",",
          "27:    expectedHTTPStatusCode: http.StatusInternalServerError,",
          "",
          "[Removed Lines]",
          "24:    _name:                  \"invalid error\",",
          "",
          "[Added Lines]",
          "24:    _name:                  \"invalid_error\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:    isValidEncodedError:    false,",
          "31:   },",
          "32:   {",
          "34:    errorCode:              int32(openfgapb.AuthErrorCode_auth_failed_invalid_subject),",
          "35:    message:                \"error message\",",
          "36:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "33:    _name:                  \"auth error: invalid subject\",",
          "",
          "[Added Lines]",
          "33:    _name:                  \"auth_error:_invalid subject\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:    isValidEncodedError:    true,",
          "40:   },",
          "41:   {",
          "43:    errorCode:              int32(openfgapb.AuthErrorCode_auth_failed_invalid_audience),",
          "44:    message:                \"error message\",",
          "45:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "42:    _name:                  \"auth error: invalid audience\",",
          "",
          "[Added Lines]",
          "42:    _name:                  \"auth_error:_invalid_audience\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "48:    isValidEncodedError:    true,",
          "49:   },",
          "50:   {",
          "52:    errorCode:              int32(openfgapb.AuthErrorCode_auth_failed_invalid_issuer),",
          "53:    message:                \"error message\",",
          "54:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "51:    _name:                  \"auth error: invalid issuer\",",
          "",
          "[Added Lines]",
          "51:    _name:                  \"auth_error:_invalid issuer\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "57:    isValidEncodedError:    true,",
          "58:   },",
          "59:   {",
          "61:    errorCode:              int32(openfgapb.AuthErrorCode_invalid_claims),",
          "62:    message:                \"error message\",",
          "63:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "60:    _name:                  \"auth error: invalid claims\",",
          "",
          "[Added Lines]",
          "60:    _name:                  \"auth_error:_invalid_claims\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "66:    isValidEncodedError:    true,",
          "67:   },",
          "68:   {",
          "70:    errorCode:              int32(openfgapb.AuthErrorCode_auth_failed_invalid_bearer_token),",
          "71:    message:                \"error message\",",
          "72:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "69:    _name:                  \"auth error: invalid bearer token\",",
          "",
          "[Added Lines]",
          "69:    _name:                  \"auth_error:_invalid_bearer_token\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "75:    isValidEncodedError:    true,",
          "76:   },",
          "77:   {",
          "79:    errorCode:              int32(openfgapb.AuthErrorCode_bearer_token_missing),",
          "80:    message:                \"error message\",",
          "81:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "78:    _name:                  \"auth error: missing bearer token\",",
          "",
          "[Added Lines]",
          "78:    _name:                  \"auth_error:_missing_bearer_token\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "84:    isValidEncodedError:    true,",
          "85:   },",
          "86:   {",
          "88:    errorCode:              int32(openfgapb.AuthErrorCode_unauthenticated),",
          "89:    message:                \"error message\",",
          "90:    expectedHTTPStatusCode: http.StatusUnauthorized,",
          "",
          "[Removed Lines]",
          "87:    _name:                  \"auth error: unauthorized\",",
          "",
          "[Added Lines]",
          "87:    _name:                  \"auth_error:_unauthorized\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "93:    isValidEncodedError:    true,",
          "94:   },",
          "95:   {",
          "97:    errorCode:              int32(openfgapb.ErrorCode_validation_error),",
          "98:    message:                \"error message\",",
          "99:    expectedHTTPStatusCode: http.StatusBadRequest,",
          "",
          "[Removed Lines]",
          "96:    _name:                  \"validation error\",",
          "",
          "[Added Lines]",
          "96:    _name:                  \"validation_error\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "102:    isValidEncodedError:    true,",
          "103:   },",
          "104:   {",
          "106:    errorCode:              int32(openfgapb.InternalErrorCode_internal_error),",
          "107:    message:                \"error message\",",
          "108:    expectedHTTPStatusCode: http.StatusInternalServerError,",
          "",
          "[Removed Lines]",
          "105:    _name:                  \"internal error\",",
          "",
          "[Added Lines]",
          "105:    _name:                  \"internal_error\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "111:    isValidEncodedError:    true,",
          "112:   },",
          "113:   {",
          "115:    errorCode:              int32(openfgapb.NotFoundErrorCode_undefined_endpoint),",
          "116:    message:                \"error message\",",
          "117:    expectedHTTPStatusCode: http.StatusNotFound,",
          "",
          "[Removed Lines]",
          "114:    _name:                  \"undefined endpoint\",",
          "",
          "[Added Lines]",
          "114:    _name:                  \"undefined_endpoint\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "150:  }",
          "151:  var tests = []encodedTests{",
          "152:   {",
          "154:    status:            status.New(codes.Code(openfgapb.ErrorCode_validation_error), \"other error\"),",
          "155:    expectedErrorCode: int32(openfgapb.ErrorCode_validation_error),",
          "156:   },",
          "157:   {",
          "159:    status:            status.New(codes.OK, \"other error\"),",
          "160:    expectedErrorCode: int32(codes.OK),",
          "161:   },",
          "",
          "[Removed Lines]",
          "153:    _name:             \"normal code\",",
          "158:    _name:             \"no error\",",
          "",
          "[Added Lines]",
          "153:    _name:             \"normal_code\",",
          "158:    _name:             \"no_error\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "170:    expectedErrorCode: int32(openfgapb.InternalErrorCode_internal_error),",
          "171:   },",
          "172:   {",
          "174:    status:            status.New(codes.DeadlineExceeded, \"other error\"),",
          "175:    expectedErrorCode: int32(openfgapb.InternalErrorCode_deadline_exceeded),",
          "176:   },",
          "177:   {",
          "179:    status:            status.New(codes.NotFound, \"other error\"),",
          "180:    expectedErrorCode: int32(openfgapb.NotFoundErrorCode_undefined_endpoint),",
          "181:   },",
          "182:   {",
          "184:    status:            status.New(codes.AlreadyExists, \"other error\"),",
          "185:    expectedErrorCode: int32(openfgapb.InternalErrorCode_already_exists),",
          "186:   },",
          "187:   {",
          "189:    status:            status.New(codes.ResourceExhausted, \"other error\"),",
          "190:    expectedErrorCode: int32(openfgapb.InternalErrorCode_resource_exhausted),",
          "191:   },",
          "192:   {",
          "194:    status:            status.New(codes.FailedPrecondition, \"other error\"),",
          "195:    expectedErrorCode: int32(openfgapb.InternalErrorCode_failed_precondition),",
          "196:   },",
          "",
          "[Removed Lines]",
          "173:    _name:             \"deadline exceeded\",",
          "178:    _name:             \"not found\",",
          "183:    _name:             \"already exceed\",",
          "188:    _name:             \"resource exhausted\",",
          "193:    _name:             \"failed precondition\",",
          "",
          "[Added Lines]",
          "173:    _name:             \"deadline_exceeded\",",
          "178:    _name:             \"not_found\",",
          "183:    _name:             \"already_exceed\",",
          "188:    _name:             \"resource_exhausted\",",
          "193:    _name:             \"failed_precondition\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "200:    expectedErrorCode: int32(openfgapb.InternalErrorCode_aborted),",
          "201:   },",
          "202:   {",
          "204:    status:            status.New(codes.OutOfRange, \"other error\"),",
          "205:    expectedErrorCode: int32(openfgapb.InternalErrorCode_out_of_range),",
          "206:   },",
          "",
          "[Removed Lines]",
          "203:    _name:             \"out of range\",",
          "",
          "[Added Lines]",
          "203:    _name:             \"out_of_range\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "220:    expectedErrorCode: int32(openfgapb.InternalErrorCode_unavailable),",
          "221:   },",
          "222:   {",
          "224:    status:            status.New(codes.DataLoss, \"other error\"),",
          "225:    expectedErrorCode: int32(openfgapb.InternalErrorCode_data_loss),",
          "226:   },",
          "227:   {",
          "229:    status:            status.New(25, \"other error\"),",
          "230:    expectedErrorCode: int32(openfgapb.InternalErrorCode_internal_error),",
          "231:   },",
          "232:   {",
          "234:    status:            status.New(codes.InvalidArgument, \"other error\"),",
          "235:    expectedErrorCode: int32(openfgapb.ErrorCode_validation_error),",
          "236:   },",
          "237:   {",
          "239:    status:            status.New(codes.InvalidArgument, \"no dot | foo :other error\"),",
          "240:    expectedErrorCode: int32(openfgapb.ErrorCode_validation_error),",
          "241:   },",
          "242:   {",
          "244:    status:            status.New(codes.InvalidArgument, \"| foo :other error\"),",
          "245:    expectedErrorCode: int32(openfgapb.ErrorCode_validation_error),",
          "246:   },",
          "247:   {",
          "249:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.UnknowObject: value must be absolute\"),",
          "250:    expectedErrorCode: int32(openfgapb.ErrorCode_validation_error),",
          "251:   },",
          "252:   {",
          "254:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.StoreId: value length must be less than 26 runes\"),",
          "255:    expectedErrorCode: int32(openfgapb.ErrorCode_store_id_invalid_length),",
          "256:   },",
          "257:   {",
          "259:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.IssuerUrl: other error\"),",
          "260:    expectedErrorCode: int32(openfgapb.ErrorCode_validation_error),",
          "261:   },",
          "262:   {",
          "264:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Assertions: value must contain no more than 40 runes\"),",
          "265:    expectedErrorCode: int32(openfgapb.ErrorCode_assertions_too_many_items),",
          "266:   },",
          "267:   {",
          "269:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.AuthorizationModelId: value length must be at most 40 runes\"),",
          "270:    expectedErrorCode: int32(openfgapb.ErrorCode_authorization_model_id_too_long),",
          "271:   },",
          "272:   {",
          "274:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Base: value is required\"),",
          "275:    expectedErrorCode: int32(openfgapb.ErrorCode_difference_base_missing_value),",
          "276:   },",
          "277:   {",
          "279:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Id: value length must be at most 40 runes\"),",
          "280:    expectedErrorCode: int32(openfgapb.ErrorCode_id_too_long),",
          "281:   },",
          "282:   {",
          "284:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Object: value length must be at most 256 bytes\"),",
          "285:    expectedErrorCode: int32(openfgapb.ErrorCode_object_too_long),",
          "286:   },",
          "287:   {",
          "289:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Object: value does not match regex pattern\"),",
          "290:    expectedErrorCode: int32(openfgapb.ErrorCode_object_invalid_pattern),",
          "291:   },",
          "292:   {",
          "294:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.PageSize: value must be inside range 1 to 100\"),",
          "295:    expectedErrorCode: int32(openfgapb.ErrorCode_page_size_invalid),",
          "296:   },",
          "297:   {",
          "299:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Params: value is required\"),",
          "300:    expectedErrorCode: int32(openfgapb.ErrorCode_param_missing_value),",
          "301:   },",
          "302:   {",
          "304:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Relation: value length must be at most 50 bytes\"),",
          "305:    expectedErrorCode: int32(openfgapb.ErrorCode_relation_too_long),",
          "306:   },",
          "307:   {",
          "309:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Relations: value must contain at least 1 pair\"),",
          "310:    expectedErrorCode: int32(openfgapb.ErrorCode_relations_too_few_items),",
          "311:   },",
          "312:   {",
          "314:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Relations[abc]: value length must be at most 50 bytes\"),",
          "315:    expectedErrorCode: int32(openfgapb.ErrorCode_relations_too_long),",
          "316:   },",
          "317:   {",
          "319:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Relations[abc]: value does not match regex pattern\"),",
          "320:    expectedErrorCode: int32(openfgapb.ErrorCode_relations_invalid_pattern),",
          "321:   },",
          "322:   {",
          "324:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Subtract: value is required\"),",
          "325:    expectedErrorCode: int32(openfgapb.ErrorCode_subtract_base_missing_value),",
          "326:   },",
          "327:   {",
          "329:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.TupleKey: value is required\"),",
          "330:    expectedErrorCode: int32(openfgapb.ErrorCode_tuple_key_value_not_specified),",
          "331:   },",
          "332:   {",
          "334:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.TupleKeys: value must contain between 1 to 10 items\"),",
          "335:    expectedErrorCode: int32(openfgapb.ErrorCode_tuple_keys_too_many_or_too_few_items),",
          "336:   },",
          "337:   {",
          "339:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Type: value length must be at least 1\"),",
          "340:    expectedErrorCode: int32(openfgapb.ErrorCode_type_invalid_length),",
          "341:   },",
          "342:   {",
          "344:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Type: value length must be at most 254 bytes\"),",
          "345:    expectedErrorCode: int32(openfgapb.ErrorCode_type_invalid_length),",
          "346:   },",
          "347:   {",
          "349:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.Type: value does not match regex pattern \\\"^[^:#]*$\\\"\"),",
          "350:    expectedErrorCode: int32(openfgapb.ErrorCode_type_invalid_pattern),",
          "351:   },",
          "352:   {",
          "354:    status:            status.New(codes.InvalidArgument, \"invalid WriteTokenIssuersRequest.Params: embedded message failed validation | caused by: invalid WriteTokenIssuersRequestParams.TypeDefinitions: value must contain at least 1 item\"),",
          "355:    expectedErrorCode: int32(openfgapb.ErrorCode_type_definitions_too_few_items),",
          "356:   },",
          "",
          "[Removed Lines]",
          "223:    _name:             \"data loss\",",
          "228:    _name:             \"undefined error number\",",
          "233:    _name:             \"invalid argument - unknown format\",",
          "238:    _name:             \"invalid argument - unknown format (2)\",",
          "243:    _name:             \"invalid argument - unknown format (3)\",",
          "248:    _name:             \"invalid argument - unknown type\",",
          "253:    _name:             \"invalid argument - store id\",",
          "258:    _name:             \"invalid argument - issuer url other error\",",
          "263:    _name:             \"invalid argument - Assertions\",",
          "268:    _name:             \"invalid argument - AuthorizationModelId\",",
          "273:    _name:             \"invalid argument - Base\",",
          "278:    _name:             \"invalid argument - Id\",",
          "283:    _name:             \"invalid argument - Object length\",",
          "288:    _name:             \"invalid argument - Object invalid pattern\",",
          "293:    _name:             \"invalid argument - PageSize\",",
          "298:    _name:             \"invalid argument - Params\",",
          "303:    _name:             \"invalid argument - Relation\",",
          "308:    _name:             \"invalid argument - Relations\",",
          "313:    _name:             \"invalid argument - Relations[abc]\",",
          "318:    _name:             \"invalid argument - Relations[abc]\",",
          "323:    _name:             \"invalid argument - Subtract\",",
          "328:    _name:             \"invalid argument - TupleKey\",",
          "333:    _name:             \"invalid argument - TupleKeys\",",
          "338:    _name:             \"invalid argument - Type length at least\",",
          "343:    _name:             \"invalid argument - Type length at most\",",
          "348:    _name:             \"invalid argument - Type regex\",",
          "353:    _name:             \"invalid argument - TypeDefinitions\",",
          "",
          "[Added Lines]",
          "223:    _name:             \"data_loss\",",
          "228:    _name:             \"undefined_error_number\",",
          "233:    _name:             \"invalid_argument_-_unknown_format\",",
          "238:    _name:             \"invalid_argument_-_unknown_format_(2)\",",
          "243:    _name:             \"invalid_argument_-_unknown_format_(3)\",",
          "248:    _name:             \"invalid_argument_-_unknown_type\",",
          "253:    _name:             \"invalid_argument_-_store_id\",",
          "258:    _name:             \"invalid_argument_-_issuer_url_other_error\",",
          "263:    _name:             \"invalid_argument_-_Assertions\",",
          "268:    _name:             \"invalid_argument_-_AuthorizationModelId\",",
          "273:    _name:             \"invalid_argument_-_Base\",",
          "278:    _name:             \"invalid_argument_-_Id\",",
          "283:    _name:             \"invalid_argument_-_Object_length\",",
          "288:    _name:             \"invalid_argument_-_Object_invalid_pattern\",",
          "293:    _name:             \"invalid_argument_-_PageSize\",",
          "298:    _name:             \"invalid_argument_-_Params\",",
          "303:    _name:             \"invalid_argument_-_Relation\",",
          "308:    _name:             \"invalid_argument_-_Relations\",",
          "313:    _name:             \"invalid_argument_-_Relations[abc]\",",
          "318:    _name:             \"invalid_argument_-_Relations[abc]\",",
          "323:    _name:             \"invalid_argument_-_Subtract\",",
          "328:    _name:             \"invalid_argument_-_TupleKey\",",
          "333:    _name:             \"invalid_argument_-_TupleKeys\",",
          "338:    _name:             \"invalid_argument_-_Type_length_at_least\",",
          "343:    _name:             \"invalid_argument_-_Type_length_at_most\",",
          "348:    _name:             \"invalid_argument_-_Type_regex\",",
          "353:    _name:             \"invalid_argument_-_TypeDefinitions\",",
          "",
          "---------------"
        ],
        "server/server_test.go||server/server_test.go": [
          "File: server/server_test.go -> server/server_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  logger := logger.NewNoopLogger()",
          "105:  transport := gateway.NewNoopTransport()",
          "109:   store := ulid.Make().String()",
          "",
          "[Removed Lines]",
          "107:  t.Run(\"no latest authorization model id found\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "107:  t.Run(\"no_latest_authorization_model_id_found\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   }",
          "129:  })",
          "132:   store := ulid.Make().String()",
          "133:   modelID := ulid.Make().String()",
          "",
          "[Removed Lines]",
          "131:  t.Run(\"read existing authorization model\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "131:  t.Run(\"read_existing_authorization_model\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:   }",
          "155:  })",
          "158:   store := ulid.Make().String()",
          "159:   modelID := \"foo\"",
          "160:   want := serverErrors.AuthorizationModelNotFound(modelID)",
          "",
          "[Removed Lines]",
          "157:  t.Run(\"non-valid modelID returns error\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "157:  t.Run(\"non-valid_modelID_returns_error\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:   },",
          "234:  }",
          "237:   res, err := s.ListObjects(ctx, &openfgapb.ListObjectsRequest{",
          "238:    StoreId:              store,",
          "239:    AuthorizationModelId: modelID,",
          "",
          "[Removed Lines]",
          "236:  t.Run(\"error listing objects from storage in non-streaming version\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "236:  t.Run(\"error_listing_objects_from_storage_in_non-streaming_version\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:   require.ErrorIs(t, err, serverErrors.NewInternalError(\"\", errors.New(\"error reading from storage\")))",
          "247:  })",
          "250:   err = s.StreamedListObjects(&openfgapb.StreamedListObjectsRequest{",
          "251:    StoreId:              store,",
          "252:    AuthorizationModelId: modelID,",
          "",
          "[Removed Lines]",
          "249:  t.Run(\"error listing objects from storage in streaming version\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "249:  t.Run(\"error_listing_objects_from_storage_in_streaming_version\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "311:   },",
          "312:  }",
          "315:   res, err := s.ListObjects(ctx, &openfgapb.ListObjectsRequest{",
          "316:    StoreId:              store,",
          "317:    AuthorizationModelId: modelID,",
          "",
          "[Removed Lines]",
          "314:  t.Run(\"error listing objects from storage in non-streaming version\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "314:  t.Run(\"error_listing_objects_from_storage_in_non-streaming_version\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "324:   require.ErrorIs(t, err, serverErrors.NewInternalError(\"\", errors.New(\"error reading from storage\")))",
          "325:  })",
          "328:   err := s.StreamedListObjects(&openfgapb.StreamedListObjectsRequest{",
          "329:    StoreId:              store,",
          "330:    AuthorizationModelId: modelID,",
          "",
          "[Removed Lines]",
          "327:  t.Run(\"error listing objects from storage in streaming version\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "327:  t.Run(\"error_listing_objects_from_storage_in_streaming_version\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "server/test/check.go||server/test/check.go": [
          "File: server/test/check.go -> server/test/check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   response         *openfgapb.CheckResponse",
          "38:  }{",
          "39:   {",
          "41:    schemaVersion: typesystem.SchemaVersion1_0,",
          "42:    typeDefinitions: []*openfgapb.TypeDefinition{{",
          "43:     Type: \"document\",",
          "",
          "[Removed Lines]",
          "40:    name:          \"Success when a tuple with an invalid objectType exists in the store\",",
          "",
          "[Added Lines]",
          "40:    name:          \"Success_when_a_tuple_with_an_invalid_objectType_exists_in_the_store\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:    response: &openfgapb.CheckResponse{Allowed: false},",
          "57:   },",
          "58:   {",
          "60:    schemaVersion: typesystem.SchemaVersion1_0,",
          "61:    typeDefinitions: []*openfgapb.TypeDefinition{{",
          "62:     Type: \"document\",",
          "",
          "[Removed Lines]",
          "59:    name:          \"Success when a tuple with an invalid relation exists in the store\",",
          "",
          "[Added Lines]",
          "59:    name:          \"Success_when_a_tuple_with_an_invalid_relation_exists_in_the_store\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430:    },",
          "431:   },",
          "432:   {",
          "434:    resolveNodeLimit: defaultResolveNodeLimit,",
          "435:    request: &openfgapb.CheckRequest{",
          "436:     TupleKey: tuple.NewTupleKey(\"document:doc1\", \"viewer\", \"user:anne\"),",
          "",
          "[Removed Lines]",
          "433:    name:             \"Error if * encountered in TupleToUserset evaluation\",",
          "",
          "[Added Lines]",
          "433:    name:             \"Error_if_*_encountered_in_TupleToUserset_evaluation\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "476:    response: &openfgapb.CheckResponse{Allowed: false},",
          "477:   },",
          "478:   {",
          "480:    resolveNodeLimit: defaultResolveNodeLimit,",
          "481:    request: &openfgapb.CheckRequest{",
          "482:     TupleKey: tuple.NewTupleKey(\"document:doc1\", \"viewer\", \"user:anne\"),",
          "",
          "[Removed Lines]",
          "479:    name:             \"Error if * encountered in TTU evaluation including ContextualTuples\",",
          "",
          "[Added Lines]",
          "479:    name:             \"Error_if_*_encountered_in_TTU_evaluation_including_ContextualTuples\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "526:    ),",
          "527:   },",
          "528:   {",
          "530:    resolveNodeLimit: defaultResolveNodeLimit,",
          "531:    request: &openfgapb.CheckRequest{",
          "532:     TupleKey:         tuple.NewTupleKey(\"document:doc1\", \"viewer\", \"anne\"),",
          "",
          "[Removed Lines]",
          "529:    name:             \"Error if rewrite encountered in tupleset relation\",",
          "",
          "[Added Lines]",
          "529:    name:             \"Error_if_rewrite_encountered_in_tupleset_relation\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "561:    resolveNodeLimit: defaultResolveNodeLimit,",
          "562:    schemaVersion:    typesystem.SchemaVersion1_0,",
          "563:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "560:    name:             \"Fails if expanding the computed userset of a tupleToUserset rewrite\",",
          "",
          "[Added Lines]",
          "560:    name:             \"Fails_if_expanding_the_computed_userset_of_a_tupleToUserset_rewrite\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "601:    resolveNodeLimit: defaultResolveNodeLimit,",
          "602:    schemaVersion:    typesystem.SchemaVersion1_0,",
          "603:    typeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "600:    name:             \"Fails if expanding the computed userset of a tupleToUserset rewrite\",",
          "",
          "[Added Lines]",
          "600:    name:             \"Fails_if_expanding_the_computed_userset_of_a_tupleToUserset_rewrite\",",
          "",
          "---------------"
        ],
        "server/test/connected_objects.go||server/test/connected_objects.go": [
          "File: server/test/connected_objects.go -> server/test/connected_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:    ),",
          "85:   },",
          "86:   {",
          "88:    request: &commands.ConnectedObjectsRequest{",
          "89:     StoreID:          ulid.Make().String(),",
          "90:     ObjectType:       \"folder\",",
          "",
          "[Removed Lines]",
          "87:    name: \"restrict_results_based_on limit\",",
          "",
          "[Added Lines]",
          "87:    name: \"restrict_results_based_on_limit\",",
          "",
          "---------------"
        ],
        "server/test/delete_store.go||server/test/delete_store.go": [
          "File: server/test/delete_store.go -> server/test/delete_store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  }",
          "31:  var tests = []deleteStoreTest{",
          "32:   {",
          "34:    request: &openfgapb.DeleteStoreRequest{",
          "35:     StoreId: \"unknownstore\",",
          "36:    },",
          "37:   },",
          "38:   {",
          "40:    request: &openfgapb.DeleteStoreRequest{",
          "41:     StoreId: createStoreResponse.Id,",
          "42:    },",
          "",
          "[Removed Lines]",
          "33:    _name: \"Execute Delete Store With Non Existent Store Succeeds\",",
          "39:    _name: \"Execute Succeeds\",",
          "",
          "[Added Lines]",
          "33:    _name: \"Execute_Delete_Store_With_Non_Existent_Store_Succeeds\",",
          "39:    _name: \"Execute_Succeeds\",",
          "",
          "---------------"
        ],
        "server/test/list_objects.go||server/test/list_objects.go": [
          "File: server/test/list_objects.go -> server/test/list_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  ctx := context.Background()",
          "59:  tracer := telemetry.NewNoopTracer()",
          "62:   store := ulid.Make().String()",
          "64:   data, err := os.ReadFile(gitHubTestDataFile)",
          "",
          "[Removed Lines]",
          "61:  t.Run(\"Github without TypeInfo\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "61:  t.Run(\"Github_without_TypeInfo\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   testCases := []listObjectsTestCase{",
          "84:    {",
          "86:     request:        newListObjectsRequest(store, \"repo\", \"admin\", \"anna\", model.Id, nil),",
          "87:     expectedResult: []string{\"repo:1\", \"repo:2\", \"repo:3\", \"repo:4\", \"repo:6\"},",
          "88:     expectedError:  nil,",
          "89:    },",
          "91:    {",
          "93:     request: newListObjectsRequest(store, \"repo\", \"admin\", \"anna\", model.Id, &openfgapb.ContextualTupleKeys{",
          "94:      TupleKeys: []*openfgapb.TupleKey{{",
          "95:       User:     \"anna\",",
          "",
          "[Removed Lines]",
          "85:     name:           \"does not return duplicates\",",
          "92:     name: \"respects max results\",",
          "",
          "[Added Lines]",
          "85:     name:           \"does_not_return_duplicates\",",
          "92:     name: \"respects_max_results\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     expectedError:  nil,",
          "101:    },",
          "102:    {",
          "104:     request:        newListObjectsRequest(store, \"repo\", \"admin\", \"bob\", model.Id, nil),",
          "105:     expectedResult: []string{\"repo:2\", \"repo:6\"},",
          "106:     expectedError:  nil,",
          "107:    },",
          "108:    {",
          "110:     request: newListObjectsRequest(store, \"repo\", \"admin\", \"bob\", model.Id, &openfgapb.ContextualTupleKeys{",
          "111:      TupleKeys: []*openfgapb.TupleKey{{",
          "112:       User:     \"bob\",",
          "",
          "[Removed Lines]",
          "103:     name:           \"performs correct checks\",",
          "109:     name: \"includes contextual tuples in the checks\",",
          "",
          "[Added Lines]",
          "103:     name:           \"performs_correct_checks\",",
          "109:     name: \"includes_contextual_tuples_in_the_checks\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     expectedError:  nil,",
          "122:    },",
          "123:    {",
          "125:     request: newListObjectsRequest(store, \"repo\", \"admin\", \"bob\", model.Id, &openfgapb.ContextualTupleKeys{",
          "126:      TupleKeys: []*openfgapb.TupleKey{{",
          "127:       User:     \"bob\",",
          "",
          "[Removed Lines]",
          "124:     name: \"ignores irrelevant contextual tuples in the checks\",",
          "",
          "[Added Lines]",
          "124:     name: \"ignores_irrelevant_contextual_tuples_in_the_checks\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:     expectedError:  nil,",
          "133:    },",
          "134:    {",
          "136:     request: newListObjectsRequest(store, \"repo\", \"owner\", \"bob\", model.Id, &openfgapb.ContextualTupleKeys{",
          "137:      TupleKeys: []*openfgapb.TupleKey{{",
          "138:       User:     \"bob\",",
          "",
          "[Removed Lines]",
          "135:     name: \"ignores irrelevant contextual tuples in the checks because they are not of the same type\",",
          "",
          "[Added Lines]",
          "135:     name: \"ignores_irrelevant_contextual_tuples_in_the_checks_because_they_are_not_of_the_same_type\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:     expectedError:  serverErrors.DuplicateContextualTuple(tuple.NewTupleKey(\"repo:5\", \"admin\", \"bob\")),",
          "159:    },",
          "160:    {",
          "162:     request:        newListObjectsRequest(store, \"unknown\", \"admin\", \"anna\", model.Id, nil),",
          "163:     expectedResult: nil,",
          "164:     expectedError:  serverErrors.TypeNotFound(\"unknown\"),",
          "165:    },",
          "166:    {",
          "168:     request:        newListObjectsRequest(store, \"repo\", \"unknown\", \"anna\", model.Id, nil),",
          "169:     expectedResult: nil,",
          "170:     expectedError:  serverErrors.RelationNotFound(\"unknown\", \"repo\", nil),",
          "",
          "[Removed Lines]",
          "161:     name:           \"returns error if unknown type\",",
          "167:     name:           \"returns error if unknown relation\",",
          "",
          "[Added Lines]",
          "161:     name:           \"returns_error_if_unknown_type\",",
          "167:     name:           \"returns_error_if_unknown_relation\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:   runListObjectsTests(t, ctx, testCases, listObjectsQuery)",
          "185:  })",
          "188:   store := ulid.Make().String()",
          "190:   data, err := os.ReadFile(\"testdata/github/typedefs.json\")",
          "",
          "[Removed Lines]",
          "187:  t.Run(\"Github with TypeInfo\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "187:  t.Run(\"Github_with_TypeInfo\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "216:   testCases := []listObjectsTestCase{",
          "217:    {",
          "219:     request:        newListObjectsRequest(store, \"repo\", \"admin\", \"user:anna\", model.Id, nil),",
          "220:     expectedResult: []string{\"repo:1\", \"repo:2\", \"repo:3\", \"repo:4\", \"repo:6\"},",
          "221:     expectedError:  nil,",
          "222:    },",
          "224:    {",
          "226:     request: newListObjectsRequest(store, \"repo\", \"admin\", \"user:anna\", model.Id, &openfgapb.ContextualTupleKeys{",
          "227:      TupleKeys: []*openfgapb.TupleKey{{",
          "228:       User:     \"user:anna\",",
          "",
          "[Removed Lines]",
          "218:     name:           \"does not return duplicates\",",
          "225:     name: \"respects max results\",",
          "",
          "[Added Lines]",
          "218:     name:           \"does_not_return_duplicates\",",
          "225:     name: \"respects_max_results\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "233:     expectedError:  nil,",
          "234:    },",
          "235:    {",
          "237:     request:        newListObjectsRequest(store, \"repo\", \"admin\", \"user:bob\", model.Id, nil),",
          "238:     expectedResult: []string{\"repo:2\", \"repo:6\"},",
          "239:     expectedError:  nil,",
          "240:    },",
          "241:    {",
          "243:     request: newListObjectsRequest(store, \"repo\", \"admin\", \"user:bob\", model.Id, &openfgapb.ContextualTupleKeys{",
          "244:      TupleKeys: []*openfgapb.TupleKey{{",
          "245:       User:     \"user:bob\",",
          "",
          "[Removed Lines]",
          "236:     name:           \"performs correct checks\",",
          "242:     name: \"includes contextual tuples in the checks\",",
          "",
          "[Added Lines]",
          "236:     name:           \"performs_correct_checks\",",
          "242:     name: \"includes_contextual_tuples_in_the_checks\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "254:     expectedError:  nil,",
          "255:    },",
          "256:    {",
          "258:     request: newListObjectsRequest(store, \"repo\", \"admin\", \"user:bob\", model.Id, &openfgapb.ContextualTupleKeys{",
          "259:      TupleKeys: []*openfgapb.TupleKey{{",
          "260:       User:     \"user:bob\",",
          "",
          "[Removed Lines]",
          "257:     name: \"ignores irrelevant contextual tuples in the checks\",",
          "",
          "[Added Lines]",
          "257:     name: \"ignores_irrelevant_contextual_tuples_in_the_checks\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "265:     expectedError:  nil,",
          "266:    },",
          "267:    {",
          "269:     request: newListObjectsRequest(store, \"repo\", \"owner\", \"user:bob\", model.Id, &openfgapb.ContextualTupleKeys{",
          "270:      TupleKeys: []*openfgapb.TupleKey{{",
          "271:       User:     \"user:bob\",",
          "",
          "[Removed Lines]",
          "268:     name: \"ignores irrelevant contextual tuples in the checks because they are not of the same type\",",
          "",
          "[Added Lines]",
          "268:     name: \"ignores_irrelevant_contextual_tuples_in_the_checks_because_they_are_not_of_the_same_type\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "305:     expectedError:  serverErrors.DuplicateContextualTuple(tuple.NewTupleKey(\"repo:5\", \"admin\", \"user:bob\")),",
          "306:    },",
          "307:    {",
          "309:     request:        newListObjectsRequest(store, \"unknown\", \"admin\", \"user:anna\", model.Id, nil),",
          "310:     expectedResult: nil,",
          "311:     expectedError:  serverErrors.TypeNotFound(\"unknown\"),",
          "312:    },",
          "313:    {",
          "315:     request:        newListObjectsRequest(store, \"repo\", \"unknown\", \"user:anna\", model.Id, nil),",
          "316:     expectedResult: nil,",
          "317:     expectedError:  serverErrors.RelationNotFound(\"unknown\", \"repo\", nil),",
          "",
          "[Removed Lines]",
          "308:     name:           \"returns error if unknown type\",",
          "314:     name:           \"returns error if unknown relation\",",
          "",
          "[Added Lines]",
          "308:     name:           \"returns_error_if_unknown_type\",",
          "314:     name:           \"returns_error_if_unknown_relation\",",
          "",
          "---------------"
        ],
        "server/test/read_authzmodel.go||server/test/read_authzmodel.go": [
          "File: server/test/read_authzmodel.go -> server/test/read_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   model   *openfgapb.AuthorizationModel",
          "22:  }{",
          "23:   {",
          "25:    storeID: ulid.Make().String(),",
          "26:    model: &openfgapb.AuthorizationModel{",
          "27:     Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "24:    name:    \"write and read a 1.0 model\",",
          "",
          "[Added Lines]",
          "24:    name:    \"write_and_read_a_1.0_model\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:    },",
          "43:   },",
          "44:   {",
          "46:    storeID: ulid.Make().String(),",
          "47:    model: &openfgapb.AuthorizationModel{",
          "48:     Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "45:    name:    \"write and read an 1.1 model\",",
          "",
          "[Added Lines]",
          "45:    name:    \"write_and_read_an_1.1_model\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:  logger := logger.NewNoopLogger()",
          "130:  storeID := ulid.Make().String()",
          "133:   model := &openfgapb.AuthorizationModel{",
          "134:    Id:              ulid.Make().String(),",
          "135:    SchemaVersion:   typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "132:  t.Run(\"writing without any type definitions doesn't write anything\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "132:  t.Run(\"writing_without_any_type_definitions_does_not_write_anything\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "server/test/read_authzmodels.go||server/test/read_authzmodels.go": [
          "File: server/test/read_authzmodels.go -> server/test/read_authzmodels.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:    expectedNumModelsReturned: 0,",
          "35:   },",
          "36:   {",
          "38:    model: &openfgapb.AuthorizationModel{",
          "39:     Id:            ulid.Make().String(),",
          "40:     SchemaVersion: typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "37:    name: \"non-empty type definitions\",",
          "",
          "[Added Lines]",
          "37:    name: \"non-empty_type_definitions\",",
          "",
          "---------------"
        ],
        "server/test/read_changes.go||server/test/read_changes.go": [
          "File: server/test/read_changes.go -> server/test/read_changes.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  encoder := encoder.NewTokenEncoder(encrypter, encoder.NewBase64Encoder())",
          "74:   testCases := []testCase{",
          "75:    {",
          "77:     request: newReadChangesRequest(store, \"\", \"\", 2),",
          "78:     expectedChanges: []*openfgapb.TupleChange{",
          "79:      {",
          "",
          "[Removed Lines]",
          "73:  t.Run(\"read changes without type\", func(t *testing.T) {",
          "76:     _name:   \"request with pageSize=2 returns 2 tuple and a token\",",
          "",
          "[Added Lines]",
          "73:  t.Run(\"read_changes_without_type\", func(t *testing.T) {",
          "76:     _name:   \"request_with_pageSize=2_returns_2_tuple_and_a_token\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     saveContinuationTokenForNextTest: true,",
          "91:    },",
          "92:    {",
          "94:     request: newReadChangesRequest(store, \"\", \"\", storage.DefaultPageSize),",
          "95:     expectedChanges: []*openfgapb.TupleChange{",
          "96:      {",
          "",
          "[Removed Lines]",
          "93:     _name:   \"request with previous token returns all remaining changes\",",
          "",
          "[Added Lines]",
          "93:     _name:   \"request_with_previous_token_returns_all_remaining_changes\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:     saveContinuationTokenForNextTest: true,",
          "108:    },",
          "109:    {",
          "111:     request:                          newReadChangesRequest(store, \"\", \"\", storage.DefaultPageSize),",
          "112:     expectedChanges:                  nil,",
          "113:     expectEmptyContinuationToken:     false,",
          "",
          "[Removed Lines]",
          "110:     _name:                            \"request with previous token returns no more changes\",",
          "",
          "[Added Lines]",
          "110:     _name:                            \"request_with_previous_token_returns_no_more_changes\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     saveContinuationTokenForNextTest: false,",
          "116:    },",
          "117:    {",
          "119:     request:                          newReadChangesRequest(store, \"\", \"foo\", storage.DefaultPageSize),",
          "120:     expectedChanges:                  nil,",
          "121:     expectEmptyContinuationToken:     false,",
          "",
          "[Removed Lines]",
          "118:     _name:                            \"request with invalid token returns invalid token error\",",
          "",
          "[Added Lines]",
          "118:     _name:                            \"request_with_invalid_token_returns_invalid_token_error\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:   runTests(t, ctx, testCases, readChangesQuery)",
          "129:  })",
          "132:   testCases := []testCase{",
          "133:    {",
          "135:     request:                      newReadChangesRequest(store, \"type-not-found\", \"\", 1),",
          "136:     expectedChanges:              nil,",
          "137:     expectEmptyContinuationToken: true,",
          "138:     expectedError:                nil,",
          "139:    },",
          "140:    {",
          "142:     request: newReadChangesRequest(store, \"org\", \"\", storage.DefaultPageSize),",
          "143:     expectedChanges: []*openfgapb.TupleChange{{",
          "144:      TupleKey:  tkMariaOrg,",
          "",
          "[Removed Lines]",
          "131:  t.Run(\"read changes with type\", func(t *testing.T) {",
          "134:     _name:                        \"if no tuples with type, return empty changes and no token\",",
          "141:     _name:   \"if 1 tuple with 'org type', read changes with 'org' filter returns 1 change and a token\",",
          "",
          "[Added Lines]",
          "131:  t.Run(\"read_changes_with_type\", func(t *testing.T) {",
          "134:     _name:                        \"if_no_tuples_with_type,_return_empty_changes_and_no_token\",",
          "141:     _name:   \"if_1_tuple_with_'org type',_read_changes_with_'org'_filter_returns_1_change_and_a_token\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:     expectedError:                nil,",
          "149:    },",
          "150:    {",
          "152:     request: newReadChangesRequest(store, \"repo\", \"\", 1),",
          "153:     expectedChanges: []*openfgapb.TupleChange{{",
          "154:      TupleKey:  tkMaria,",
          "",
          "[Removed Lines]",
          "151:     _name:   \"if 2 tuples with 'repo' type, read changes with 'repo' filter and page size of 1 returns 1 change and a token\",",
          "",
          "[Added Lines]",
          "151:     _name:   \"if_2_tuples_with_'repo'_type,_read_changes_with_'repo'_filter and page size of 1 returns 1 change and a token\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "158:     expectedError:                    nil,",
          "159:     saveContinuationTokenForNextTest: true,",
          "160:    }, {",
          "162:     request: newReadChangesRequest(store, \"repo\", \"\", storage.DefaultPageSize),",
          "163:     expectedChanges: []*openfgapb.TupleChange{{",
          "164:      TupleKey:  tkCraig,",
          "",
          "[Removed Lines]",
          "161:     _name:   \"using the token from the previous test yields 1 change and a token\",",
          "",
          "[Added Lines]",
          "161:     _name:   \"using_the_token_from_the_previous_test_yields_1_change_and_a_token\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "171:     expectedError:                    nil,",
          "172:     saveContinuationTokenForNextTest: true,",
          "173:    }, {",
          "175:     request:                          newReadChangesRequest(store, \"repo\", \"\", storage.DefaultPageSize),",
          "176:     expectedChanges:                  nil,",
          "177:     expectEmptyContinuationToken:     false,",
          "178:     expectedError:                    nil,",
          "179:     saveContinuationTokenForNextTest: true,",
          "180:    }, {",
          "182:     request:       newReadChangesRequest(store, \"does-not-match\", \"\", storage.DefaultPageSize),",
          "183:     expectedError: serverErrors.MismatchObjectType,",
          "184:    },",
          "",
          "[Removed Lines]",
          "174:     _name:                            \"using the token from the previous test yields 0 changes and a token\",",
          "181:     _name:         \"using the token from the previous test yields an error because the types in the token and the request don't match\",",
          "",
          "[Added Lines]",
          "174:     _name:                            \"using_the_token_from_the_previous_test_yields_0_changes_and_a_token\",",
          "181:     _name:         \"using_the_token_from_the_previous_test_yields_an_error_because_the_types_in_the_token_and_the_request_don't_match\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "188:   runTests(t, ctx, testCases, readChangesQuery)",
          "189:  })",
          "192:   testCases := []testCase{",
          "193:    {",
          "195:     request: &openfgapb.ReadChangesRequest{",
          "196:      StoreId: store,",
          "197:     },",
          "",
          "[Removed Lines]",
          "191:  t.Run(\"read changes with horizon offset\", func(t *testing.T) {",
          "194:     _name: \"when the horizon offset is non-zero no tuples should be returned\",",
          "",
          "[Added Lines]",
          "191:  t.Run(\"read_changes_with_horizon_offset\", func(t *testing.T) {",
          "194:     _name: \"when_the_horizon_offset_is_non-zero_no_tuples_should_be_returned\",",
          "",
          "---------------"
        ],
        "server/test/write.go||server/test/write.go": [
          "File: server/test/write.go -> server/test/write.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:  },",
          "837:  {",
          "840:   model: &openfgapb.AuthorizationModel{",
          "841:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "838:   _name: \"Delete succeeds even if user field contains a type that is not allowed by the current authorization model\",",
          "",
          "[Added Lines]",
          "838:   _name: \"Delete_succeeds_even_if_user_field_contains_a_type_that_is_not_allowed_by_the_current_authorization_model\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "878:   },",
          "879:  },",
          "880:  {",
          "883:   model: &openfgapb.AuthorizationModel{",
          "884:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "881:   _name: \"Write fails if user field contains a type that does not exist\",",
          "",
          "[Added Lines]",
          "881:   _name: \"Write_fails_if_user_field_contains_a_type_that_does_not_exist\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "920:   ),",
          "921:  },",
          "922:  {",
          "925:   model: &openfgapb.AuthorizationModel{",
          "926:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "923:   _name: \"Write fails if user field contains a type that is not allowed by the authorization model (which only allows group:...)\",",
          "",
          "[Added Lines]",
          "923:   _name: \"Write_fails_if_user_field_contains_a_type_that_is_not_allowed_by_the_authorization_model_(which_only_allows_group:...)\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1055:   ),",
          "1056:  },",
          "1057:  {",
          "1060:   model: &openfgapb.AuthorizationModel{",
          "1061:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1058:   _name: \"Write succeeds if user field contains a type that is allowed by the authorization model (which only allows user:...)\",",
          "",
          "[Added Lines]",
          "1058:   _name: \"Write_succeeds_if_user_field_contains_a_type_that_is_allowed_by_the_authorization_model_(which_only_allows_user:...)\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1090:   },",
          "1091:  },",
          "1092:  {",
          "1095:   model: &openfgapb.AuthorizationModel{",
          "1096:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1093:   _name: \"Write fails if user field contains a type that is not allowed by the authorization model (which only allows group:...#member)\",",
          "",
          "[Added Lines]",
          "1093:   _name: \"Write_fails_if_user_field_contains_a_type_that_is_not_allowed_by_the_authorization_model_(which_only_allows_group:...#member)\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1132:   ),",
          "1133:  },",
          "1134:  {",
          "1137:   model: &openfgapb.AuthorizationModel{",
          "1138:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1135:   _name: \"Write succeeds if user field contains a type that is allowed by the authorization model (which only allows group:...#member)\",",
          "",
          "[Added Lines]",
          "1135:   _name: \"Write_succeeds_if_user_field_contains_a_type_that_is_allowed_by_the_authorization_model_(which_only_allows_group:...#member)\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1183:   },",
          "1184:  },",
          "1185:  {",
          "1188:   model: &openfgapb.AuthorizationModel{",
          "1189:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1186:   _name: \"Multiple writes succeed if user fields contain a type that is allowed by the authorization model\",",
          "",
          "[Added Lines]",
          "1186:   _name: \"Multiple_writes_succeed_if_user_fields_contain_a_type_that_is_allowed_by_the_authorization_model\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1238:   },",
          "1239:  },",
          "1240:  {",
          "1243:   model: &openfgapb.AuthorizationModel{",
          "1244:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1241:   _name: \"Write succeeds if user is wildcard and type references a specific type\",",
          "",
          "[Added Lines]",
          "1241:   _name: \"Write_succeeds_if_user_is_wildcard_and_type_references_a_specific_type\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1274:   },",
          "1275:  },",
          "1276:  {",
          "1279:   model: &openfgapb.AuthorizationModel{",
          "1280:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "1277:   _name: \"Write fails if user is a typed wildcard and the type restrictions don't permit it\",",
          "",
          "[Added Lines]",
          "1277:   _name: \"Write_fails_if_user_is_a_typed_wildcard_and_the_type_restrictions_do_not_permit_it\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1316:   ),",
          "1317:  },",
          "1318:  {",
          "1320:   model: &openfgapb.AuthorizationModel{",
          "1321:    Id:            ulid.Make().String(),",
          "1322:    SchemaVersion: typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "1319:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation\",",
          "",
          "[Added Lines]",
          "1319:   _name: \"Write_fails_if_a._schema_version_is_1.0_b._user_is_a_userset_c._relation_is_referenced_in_a_tupleset_of_a_tupleToUserset_relation\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1350:   ),",
          "1351:  },",
          "1352:  {",
          "1354:   model: &openfgapb.AuthorizationModel{",
          "1355:    Id:            ulid.Make().String(),",
          "1356:    SchemaVersion: typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "1353:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as union)\",",
          "",
          "[Added Lines]",
          "1353:   _name: \"Write_fails_if_a._schema_version_is_1.0_b._user_is_a_userset_c._relation_is_referenced_in_a_tupleset_of_a_tupleToUserset_relation_(defined_as_union)\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1387:   ),",
          "1388:  },",
          "1389:  {",
          "1391:   model: &openfgapb.AuthorizationModel{",
          "1392:    Id:            ulid.Make().String(),",
          "1393:    SchemaVersion: typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "1390:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as intersection)\",",
          "",
          "[Added Lines]",
          "1390:   _name: \"Write_fails_if_a._schema_version_is_1.0_b._user_is_a_userset_c._relation_is_referenced_in_a_tupleset_of_a_tupleToUserset_relation_(defined_as_intersection)\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1424:   ),",
          "1425:  },",
          "1426:  {",
          "1428:   model: &openfgapb.AuthorizationModel{",
          "1429:    Id:            ulid.Make().String(),",
          "1430:    SchemaVersion: typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "1427:   _name: \"Write fails if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation (defined as difference)\",",
          "",
          "[Added Lines]",
          "1427:   _name: \"Write_fails_if_a._schema_version_is_1.0_b._user_is_a_userset_c._relation_is_referenced_in_a_tupleset_of_a_tupleToUserset_relation_(defined_as_difference)\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1461:   ),",
          "1462:  },",
          "1463:  {",
          "1465:   model: &openfgapb.AuthorizationModel{",
          "1466:    Id:            ulid.Make().String(),",
          "1467:    SchemaVersion: typesystem.SchemaVersion1_0,",
          "",
          "[Removed Lines]",
          "1464:   _name: \"Write succeeds if a. schema version is 1.0 b. user is a userset c. relation is referenced in a tupleset of a tupleToUserset relation of another type\",",
          "",
          "[Added Lines]",
          "1464:   _name: \"Write_succeeds_if_a._schema_version_is_1.0_b._user_is_a_userset_c._relation_is_referenced_in_a_tupleset_of_a_tupleToUserset_relation_of_another_type\",",
          "",
          "---------------"
        ],
        "server/test/write_assertions.go||server/test/write_assertions.go": [
          "File: server/test/write_assertions.go -> server/test/write_assertions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  var tests = []writeAssertionsTestSettings{",
          "45:   {",
          "47:    request: &openfgapb.WriteAssertionsRequest{",
          "48:     StoreId: store,",
          "49:     Assertions: []*openfgapb.Assertion{{",
          "",
          "[Removed Lines]",
          "46:    _name: \"writing assertions succeeds\",",
          "",
          "[Added Lines]",
          "46:    _name: \"writing_assertions_succeeds\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:    },",
          "58:   },",
          "59:   {",
          "61:    request: &openfgapb.WriteAssertionsRequest{",
          "62:     StoreId: store,",
          "63:     Assertions: []*openfgapb.Assertion{{",
          "",
          "[Removed Lines]",
          "60:    _name: \"writing assertions succeeds when it is not directly assignable\",",
          "",
          "[Added Lines]",
          "60:    _name: \"writing_assertions_succeeds_when_it_is_not_directly_assignable\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:    },",
          "72:   },",
          "73:   {",
          "75:    request: &openfgapb.WriteAssertionsRequest{",
          "76:     StoreId:    store,",
          "77:     Assertions: []*openfgapb.Assertion{},",
          "78:    },",
          "79:   },",
          "80:   {",
          "82:    request: &openfgapb.WriteAssertionsRequest{",
          "83:     StoreId: store,",
          "84:     Assertions: []*openfgapb.Assertion{",
          "",
          "[Removed Lines]",
          "74:    _name: \"writing empty assertions succeeds\",",
          "81:    _name: \"writing assertion with invalid relation fails\",",
          "",
          "[Added Lines]",
          "74:    _name: \"writing_empty_assertions_succeeds\",",
          "81:    _name: \"writing_assertion_with_invalid_relation_fails\",",
          "",
          "---------------"
        ],
        "server/test/write_authzmodel.go||server/test/write_authzmodel.go": [
          "File: server/test/write_authzmodel.go -> server/test/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   err     error",
          "36:  }{",
          "37:   {",
          "39:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "40:     StoreId: storeID,",
          "41:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "38:    name: \"succeeds with a simple model\",",
          "",
          "[Added Lines]",
          "38:    name: \"succeeds_with_a_simple_model\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:    },",
          "50:   },",
          "51:   {",
          "53:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "54:     StoreId: \"somestoreid\",",
          "55:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "52:    name: \"succeeds with a complex model\",",
          "",
          "[Added Lines]",
          "52:    name: \"succeeds_with_a_complex_model\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:    },",
          "105:   },",
          "106:   {",
          "108:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "109:     StoreId:         storeID,",
          "110:     TypeDefinitions: items,",
          "",
          "[Removed Lines]",
          "107:    name: \"fails if too many types\",",
          "",
          "[Added Lines]",
          "107:    name: \"fails_if_too_many_types\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:    err: serverErrors.ExceededEntityLimit(\"type definitions in an authorization model\", datastore.MaxTypesPerAuthorizationModel()),",
          "113:   },",
          "114:   {",
          "116:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "117:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "118:      {",
          "",
          "[Removed Lines]",
          "115:    name: \"succeeds with empty relations\",",
          "",
          "[Added Lines]",
          "115:    name: \"succeeds_with_empty_relations\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:    },",
          "123:   },",
          "124:   {",
          "126:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "127:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "128:      {",
          "",
          "[Removed Lines]",
          "125:    name: \"succeeds with zero length relations\",",
          "",
          "[Added Lines]",
          "125:    name: \"succeeds_with_zero_length_relations\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "133:    },",
          "134:   },",
          "135:   {",
          "137:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "138:     StoreId: storeID,",
          "139:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "136:    name: \"fails if the same type appears twice\",",
          "",
          "[Added Lines]",
          "136:    name: \"fails_if_the_same_type_appears_twice\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "154:    err: serverErrors.InvalidAuthorizationModelInput(typesystem.ErrDuplicateTypes),",
          "155:   },",
          "156:   {",
          "158:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "159:     StoreId: storeID,",
          "160:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "157:    name: \"fails if a relation is not defined\",",
          "",
          "[Added Lines]",
          "157:    name: \"fails_if_a_relation_is_not_defined\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "169:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "170:   },",
          "171:   {",
          "173:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "174:     StoreId: storeID,",
          "175:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "172:    name: \"fails if unknown relation in computed userset definition\",",
          "",
          "[Added Lines]",
          "172:    name: \"fails_if_unknown_relation_in_computed_userset_definition\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "191:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "192:   },",
          "193:   {",
          "195:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "196:     StoreId: storeID,",
          "197:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "194:    name: \"fails if unknown relation in tuple to userset definition (computed userset component)\",",
          "",
          "[Added Lines]",
          "194:    name: \"fails_if_unknown_relation_in_tuple_to_userset_definition_(computed_userset_component)\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "218:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"\", Relation: \"owner\"}),",
          "219:   },",
          "220:   {",
          "222:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "223:     StoreId: storeID,",
          "224:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "221:    name: \"fails if unknown relation in union\",",
          "",
          "[Added Lines]",
          "221:    name: \"fails_if_unknown_relation_in_union\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "253:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "254:   },",
          "255:   {",
          "257:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "258:     StoreId: storeID,",
          "259:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "256:    name: \"fails if unknown relation in difference base argument\",",
          "",
          "[Added Lines]",
          "256:    name: \"fails_if_unknown_relation_in_difference_base_argument\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "288:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "289:   },",
          "290:   {",
          "292:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "293:     StoreId: storeID,",
          "294:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "291:    name: \"fails if unknown relation in difference subtract argument\",",
          "",
          "[Added Lines]",
          "291:    name: \"fails_if_unknown_relation_in_difference_subtract_argument\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "323:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "324:   },",
          "325:   {",
          "327:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "328:     StoreId: storeID,",
          "329:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "326:    name: \"fails if unknown relation in tuple to userset definition (tupleset component)\",",
          "",
          "[Added Lines]",
          "326:    name: \"fails_if_unknown_relation_in_tuple_to_userset_definition_(tupleset_component)\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "352:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "353:   },",
          "354:   {",
          "356:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "357:     StoreId: storeID,",
          "358:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "355:    name: \"fails if unknown relation in computed userset\",",
          "",
          "[Added Lines]",
          "355:    name: \"fails_if_unknown_relation_in_computed_userset\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "388:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"bar\", Relation: \"writer\"}),",
          "389:   },",
          "390:   {",
          "392:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "393:     StoreId: storeID,",
          "394:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "391:    name: \"fails if unknown relation in intersection\",",
          "",
          "[Added Lines]",
          "391:    name: \"fails_if_unknown_relation_in_intersection\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "421:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.RelationUndefinedError{ObjectType: \"repo\", Relation: \"owner\"}),",
          "422:   },",
          "423:   {",
          "425:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "426:     StoreId: storeID,",
          "427:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "424:    name: \"fails if difference includes same relation twice\",",
          "",
          "[Added Lines]",
          "424:    name: \"fails_if_difference_includes_same_relation_twice\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "451:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
          "452:   },",
          "453:   {",
          "455:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "456:     StoreId: storeID,",
          "457:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "454:    name: \"fails if union includes same relation twice\",",
          "",
          "[Added Lines]",
          "454:    name: \"fails_if_union_includes_same_relation_twice\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "478:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
          "479:   },",
          "480:   {",
          "482:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "483:     StoreId: storeID,",
          "484:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "481:    name: \"fails if intersection includes same relation twice\",",
          "",
          "[Added Lines]",
          "481:    name: \"fails_if_intersection_includes_same_relation_twice\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "504:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{ObjectType: \"repo\", Relation: \"viewer\"}),",
          "505:   },",
          "506:   {",
          "508:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "509:     StoreId: storeID,",
          "510:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "507:    name: \"Success if Union Rewrite Contains Repeated Definitions\",",
          "",
          "[Added Lines]",
          "507:    name: \"Success_if_Union_Rewrite_Contains_Repeated_Definitions\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "527:    },",
          "528:   },",
          "529:   {",
          "531:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "532:     StoreId: storeID,",
          "533:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "530:    name: \"Success if Intersection Rewrite Contains Repeated Definitions\",",
          "",
          "[Added Lines]",
          "530:    name: \"Success_if_Intersection_Rewrite_Contains_Repeated_Definitions\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "550:    },",
          "551:   },",
          "552:   {",
          "554:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "555:     StoreId: storeID,",
          "556:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "553:    name: \"Success if Exclusion Rewrite Contains Repeated Definitions\",",
          "",
          "[Added Lines]",
          "553:    name: \"Success_if_Exclusion_Rewrite_Contains_Repeated_Definitions\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "573:    },",
          "574:   },",
          "575:   {",
          "577:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "578:     StoreId: storeID,",
          "579:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "576:    name: \"Fails if Tupleset relation involves ComputedUserset rewrite\",",
          "",
          "[Added Lines]",
          "576:    name: \"Fails_if_Tupleset_relation_involves_ComputedUserset_rewrite\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "592:    ),",
          "593:   },",
          "594:   {",
          "596:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "597:     StoreId: storeID,",
          "598:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "595:    name: \"Fails if Tupleset relation involves Union rewrite\",",
          "",
          "[Added Lines]",
          "595:    name: \"Fails_if_Tupleset_relation_involves_Union_rewrite\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "611:    ),",
          "612:   },",
          "613:   {",
          "615:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "616:     StoreId: storeID,",
          "617:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "614:    name: \"Fails if Tupleset relation involves Intersection rewrite\",",
          "",
          "[Added Lines]",
          "614:    name: \"Fails_if_Tupleset_relation_involves_Intersection_rewrite\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "630:    ),",
          "631:   },",
          "632:   {",
          "634:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "635:     StoreId: storeID,",
          "636:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "633:    name: \"Fails if Tupleset relation involves Exclusion rewrite\",",
          "",
          "[Added Lines]",
          "633:    name: \"Fails_if_Tupleset_relation_involves_Exclusion_rewrite\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "649:    ),",
          "650:   },",
          "651:   {",
          "653:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "654:     StoreId: storeID,",
          "655:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "",
          "[Removed Lines]",
          "652:    name: \"Fails if Tupleset relation involves TupleToUserset rewrite\",",
          "",
          "[Added Lines]",
          "652:    name: \"Fails_if_Tupleset_relation_involves_TupleToUserset_rewrite\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "668:    ),",
          "669:   },",
          "670:   {",
          "672:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "673:     StoreId:       storeID,",
          "674:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "",
          "[Removed Lines]",
          "671:    name: \"Fails if type info metadata is omitted in 1.1 model\",",
          "",
          "[Added Lines]",
          "671:    name: \"Fails_if_type_info_metadata_is_omitted_in_1.1_model\",",
          "",
          "---------------"
        ],
        "storage/mysql/utils_test.go||storage/mysql/utils_test.go": [
          "File: storage/mysql/utils_test.go -> storage/mysql/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: )",
          "13: func TestHandleMySQLError(t *testing.T) {",
          "15:   duplicateKeyError := &mysql.MySQLError{",
          "16:    Number:  1062,",
          "17:    Message: \"Duplicate entry '' for key ''\",",
          "",
          "[Removed Lines]",
          "14:  t.Run(\"duplicate entry value error with tuple key wraps ErrInvalidWriteInput\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "14:  t.Run(\"duplicate_entry_value_error_with_tuple_key_wraps_ErrInvalidWriteInput\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   require.ErrorIs(t, err, storage.ErrInvalidWriteInput)",
          "25:  })",
          "28:   duplicateKeyError := &mysql.MySQLError{",
          "29:    Number:  1062,",
          "30:    Message: \"Duplicate entry '' for key ''\",",
          "",
          "[Removed Lines]",
          "27:  t.Run(\"duplicate entry value error without tuple key returns collision\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "27:  t.Run(\"duplicate_entry_value_error_without_tuple_key_returns_collision\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:   require.ErrorIs(t, err, storage.ErrCollision)",
          "35:  })",
          "38:   err := handleMySQLError(sql.ErrNoRows)",
          "40:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "",
          "[Removed Lines]",
          "37:  t.Run(\"sql.ErrNoRows is converted to storage.ErrNotFound error\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "37:  t.Run(\"sql.ErrNoRows_is_converted_to_storage.ErrNotFound_error\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "storage/postgres/utils_test.go||storage/postgres/utils_test.go": [
          "File: storage/postgres/utils_test.go -> storage/postgres/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: )",
          "13: func TestHandlePostgresError(t *testing.T) {",
          "15:   err := handlePostgresError(errors.New(\"duplicate key value\"), &openfgapb.TupleKey{",
          "16:    Object:   \"object\",",
          "17:    Relation: \"relation\",",
          "",
          "[Removed Lines]",
          "14:  t.Run(\"duplicate key value error with tuple key wraps ErrInvalidWriteInput\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "14:  t.Run(\"duplicate_key_value_error_with_tuple_key_wraps_ErrInvalidWriteInput\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   require.ErrorIs(t, err, storage.ErrInvalidWriteInput)",
          "21:  })",
          "24:   duplicateKeyError := errors.New(\"duplicate key value\")",
          "25:   err := handlePostgresError(duplicateKeyError)",
          "26:   require.ErrorIs(t, err, storage.ErrCollision)",
          "27:  })",
          "30:   err := handlePostgresError(sql.ErrNoRows)",
          "31:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "32:  })",
          "",
          "[Removed Lines]",
          "23:  t.Run(\"duplicate key value error without tuple key returns collision\", func(t *testing.T) {",
          "29:  t.Run(\"sql.ErrNoRows is converted to storage.ErrNotFound error\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "23:  t.Run(\"duplicate_key_value_error_without_tuple_key_returns_collision\", func(t *testing.T) {",
          "29:  t.Run(\"sql.ErrNoRows_is_converted_to_storage.ErrNotFound_error\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "storage/test/assertions.go||storage/test/assertions.go": [
          "File: storage/test/assertions.go -> storage/test/assertions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  ctx := context.Background()",
          "19:   store := ulid.Make().String()",
          "20:   modelID := ulid.Make().String()",
          "21:   assertions := []*openfgapb.Assertion{",
          "",
          "[Removed Lines]",
          "18:  t.Run(\"writing and reading assertions succeeds\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "18:  t.Run(\"writing_and_reading_assertions_succeeds\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   }",
          "41:  })",
          "44:   store := ulid.Make().String()",
          "45:   modelID := ulid.Make().String()",
          "46:   assertions := []*openfgapb.Assertion{{TupleKey: &openfgapb.TupleKey{Object: \"doc:readme\", Relation: \"viewer\", User: \"11\"}, Expectation: true}}",
          "",
          "[Removed Lines]",
          "43:  t.Run(\"writing twice overwrites assertions\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "43:  t.Run(\"writing_twice_overwrites_assertions\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   }",
          "65:  })",
          "68:   store := ulid.Make().String()",
          "69:   oldModelID := ulid.Make().String()",
          "70:   newModelID := ulid.Make().String()",
          "",
          "[Removed Lines]",
          "67:  t.Run(\"writing to one modelID and reading from other returns nothing\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "67:  t.Run(\"writing_to_one_modelID_and_reading_from_other_returns_nothing\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "storage/test/authz_models.go||storage/test/authz_models.go": [
          "File: storage/test/authz_models.go -> storage/test/authz_models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   }",
          "37:  })",
          "40:   _, err := datastore.ReadAuthorizationModel(ctx, storeID, ulid.Make().String())",
          "41:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "42:  })",
          "",
          "[Removed Lines]",
          "39:  t.Run(\"trying to get a model which doesn't exist returns not found\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "39:  t.Run(\"trying_to_get_a_model_which_does_not_exist_returns_not_found\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: func FindLatestAuthorizationModelIDTest(t *testing.T, datastore storage.OpenFGADatastore) {",
          "114:  ctx := context.Background()",
          "117:   store := testutils.CreateRandomString(10)",
          "118:   _, err := datastore.FindLatestAuthorizationModelID(ctx, store)",
          "119:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "120:  })",
          "123:   store := ulid.Make().String()",
          "125:   oldModel := &openfgapb.AuthorizationModel{",
          "",
          "[Removed Lines]",
          "116:  t.Run(\"find latest authorization model should return not found when no models\", func(t *testing.T) {",
          "122:  t.Run(\"find latest authorization model should succeed\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "116:  t.Run(\"find_latest_authorization_model_should_return_not_found_when_no_models\", func(t *testing.T) {",
          "122:  t.Run(\"find_latest_authorization_model_should_succeed\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165: func ReadTypeDefinitionTest(t *testing.T, datastore storage.OpenFGADatastore) {",
          "166:  ctx := context.Background()",
          "169:   store := ulid.Make().String()",
          "170:   modelID := ulid.Make().String()",
          "",
          "[Removed Lines]",
          "168:  t.Run(\"read type definition of nonexistent type should return not found\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "168:  t.Run(\"read_type_definition_of_nonexistent_type_should_return_not_found\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "174:  })",
          "177:   store := ulid.Make().String()",
          "178:   model := &openfgapb.AuthorizationModel{",
          "179:    Id:            ulid.Make().String(),",
          "",
          "[Removed Lines]",
          "176:  t.Run(\"read type definition should succeed\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "176:  t.Run(\"read_type_definition_should_succeed\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "storage/test/stores.go||storage/test/stores.go": [
          "File: storage/test/stores.go -> storage/test/stores.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   stores = append(stores, store)",
          "35:  }",
          "38:   if _, err := datastore.CreateStore(ctx, stores[0]); !errors.Is(err, storage.ErrCollision) {",
          "39:    t.Fatalf(\"got '%v', expected '%v'\", err, storage.ErrCollision)",
          "40:   }",
          "41:  })",
          "44:   gotStores, ct, err := datastore.ListStores(ctx, storage.PaginationOptions{PageSize: 1})",
          "45:   if err != nil {",
          "46:    t.Fatal(err)",
          "",
          "[Removed Lines]",
          "37:  t.Run(\"inserting store in twice fails\", func(t *testing.T) {",
          "43:  t.Run(\"list stores succeeds\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "37:  t.Run(\"inserting_store_in_twice_fails\", func(t *testing.T) {",
          "43:  t.Run(\"list_stores_succeeds\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   }",
          "65:  })",
          "68:   store := stores[0]",
          "69:   gotStore, err := datastore.GetStore(ctx, store.Id)",
          "70:   if err != nil {",
          "",
          "[Removed Lines]",
          "67:  t.Run(\"get store succeeds\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "67:  t.Run(\"get_store_succeeds\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:   }",
          "77:  })",
          "80:   _, err := datastore.GetStore(ctx, \"foo\")",
          "81:   if !errors.Is(err, storage.ErrNotFound) {",
          "82:    t.Errorf(\"got '%v', expected '%v'\", err, storage.ErrNotFound)",
          "83:   }",
          "84:  })",
          "87:   store := stores[1]",
          "88:   err := datastore.DeleteStore(ctx, store.Id)",
          "89:   if err != nil {",
          "",
          "[Removed Lines]",
          "79:  t.Run(\"get non-existent store returns not found\", func(t *testing.T) {",
          "86:  t.Run(\"delete store succeeds\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "79:  t.Run(\"get_non-existent_store_returns_not_found\", func(t *testing.T) {",
          "86:  t.Run(\"delete_store_succeeds\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:   }",
          "98:  })",
          "101:   store := stores[2]",
          "102:   err := datastore.DeleteStore(ctx, store.Id)",
          "103:   if err != nil {",
          "",
          "[Removed Lines]",
          "100:  t.Run(\"deleted store does not appear in list\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "100:  t.Run(\"deleted_store_does_not_appear_in_list\", func(t *testing.T) {",
          "",
          "---------------"
        ],
        "storage/test/tuples.go||storage/test/tuples.go": [
          "File: storage/test/tuples.go -> storage/test/tuples.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: func ReadChangesTest(t *testing.T, datastore storage.OpenFGADatastore) {",
          "18:  ctx := context.Background()",
          "21:   storeID := ulid.Make().String()",
          "23:   tk1 := &openfgapb.TupleKey{",
          "",
          "[Removed Lines]",
          "20:  t.Run(\"read changes with continuation token\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "20:  t.Run(\"read_changes_with_continuation_token\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:   }",
          "70:  })",
          "73:   storeID := ulid.Make().String()",
          "75:   _, _, err := datastore.ReadChanges(ctx, storeID, \"\", storage.PaginationOptions{PageSize: storage.DefaultPageSize}, 0)",
          "76:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "77:  })",
          "80:   storeID := ulid.Make().String()",
          "82:   tk1 := &openfgapb.TupleKey{",
          "",
          "[Removed Lines]",
          "72:  t.Run(\"read changes with no changes should return not found\", func(t *testing.T) {",
          "79:  t.Run(\"read changes with horizon offset should return not found (no changes)\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "72:  t.Run(\"read_changes_with_no_changes_should_return_not_found\", func(t *testing.T) {",
          "79:  t.Run(\"read_changes_with_horizon_offset_should_return_not_found_(no_changes)\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "98:  })",
          "101:   storeID := ulid.Make().String()",
          "103:   tk1 := &openfgapb.TupleKey{",
          "",
          "[Removed Lines]",
          "100:  t.Run(\"read changes with non-empty object type should only read that object type\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "100:  t.Run(\"read_changes_with_non-empty_object_type_should_only_read_that_object_type\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133: func TupleWritingAndReadingTest(t *testing.T, datastore storage.OpenFGADatastore) {",
          "134:  ctx := context.Background()",
          "137:   storeID := ulid.Make().String()",
          "138:   tks := []*openfgapb.TupleKey{",
          "139:    {",
          "",
          "[Removed Lines]",
          "136:  t.Run(\"deletes would succeed and write would fail, fails and introduces no changes\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "136:  t.Run(\"deletes_would_succeed_and_write_would_fail,_fails_and_introduces_no_changes\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167:   require.Equal(t, len(tks), len(tuples))",
          "168:  })",
          "171:   storeID := ulid.Make().String()",
          "172:   tk := &openfgapb.TupleKey{Object: \"doc:readme\", Relation: \"owner\", User: \"10\"}",
          "173:   expectedError := storage.InvalidWriteInputError(tk, openfgapb.TupleOperation_TUPLE_OPERATION_DELETE)",
          "",
          "[Removed Lines]",
          "170:  t.Run(\"delete fails if the tuple does not exist\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "170:  t.Run(\"delete_fails_if_the_tuple_does_not_exist\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:   require.EqualError(t, err, expectedError.Error())",
          "177:  })",
          "180:   storeID := ulid.Make().String()",
          "181:   tk := &openfgapb.TupleKey{Object: \"doc:readme\", Relation: \"owner\", User: \"10\"}",
          "",
          "[Removed Lines]",
          "179:  t.Run(\"deleting a tuple which exists succeeds\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "179:  t.Run(\"deleting_a_tuple_which_exists_succeeds\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "194:  })",
          "197:   storeID := ulid.Make().String()",
          "198:   tk := &openfgapb.TupleKey{Object: \"doc:readme\", Relation: \"owner\", User: \"10\"}",
          "199:   expectedError := storage.InvalidWriteInputError(tk, openfgapb.TupleOperation_TUPLE_OPERATION_WRITE)",
          "",
          "[Removed Lines]",
          "196:  t.Run(\"inserting a tuple twice fails\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "196:  t.Run(\"inserting_a_tuple_twice_fails\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:   }",
          "239:  })",
          "242:   storeID := ulid.Make().String()",
          "243:   tk := &openfgapb.TupleKey{Object: \"doc:readme\", Relation: \"owner\", User: \"10\"}",
          "",
          "[Removed Lines]",
          "241:  t.Run(\"reading a tuple that does not exist returns not found\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "241:  t.Run(\"reading_a_tuple_that_does_not_exist_returns_not_found\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "246:   require.ErrorIs(t, err, storage.ErrNotFound)",
          "247:  })",
          "250:   storeID := ulid.Make().String()",
          "251:   tks := []*openfgapb.TupleKey{",
          "252:    {",
          "",
          "[Removed Lines]",
          "249:  t.Run(\"reading userset tuples that exists succeeds\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "249:  t.Run(\"reading_userset_tuples_that_exists_succeeds\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "305:   }",
          "306:  })",
          "309:   storeID := ulid.Make().String()",
          "311:   gotTuples, err := datastore.ReadUsersetTuples(ctx, storeID, &openfgapb.TupleKey{Object: \"doc:readme\", Relation: \"owner\"})",
          "",
          "[Removed Lines]",
          "308:  t.Run(\"reading userset tuples that don't exist should an empty iterator\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "308:  t.Run(\"reading_userset_tuples_that_don't_exist_should_an_empty_iterator\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "326:  err := datastore.Write(ctx, storeID, nil, []*openfgapb.TupleKey{tk0, tk1})",
          "327:  require.NoError(t, err)",
          "330:   tuples0, contToken0, err := datastore.ReadPage(ctx, storeID, &openfgapb.TupleKey{Object: \"doc:readme\"}, storage.PaginationOptions{PageSize: 1})",
          "331:   require.NoError(t, err)",
          "332:   require.Len(t, tuples0, 1)",
          "",
          "[Removed Lines]",
          "329:  t.Run(\"readPage pagination works properly\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "329:  t.Run(\"readPage_pagination_works_properly\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "346:   }",
          "347:  })",
          "350:   tuples, contToken, err := datastore.ReadPage(ctx, storeID, &openfgapb.TupleKey{Object: \"doc:readme\"}, storage.PaginationOptions{PageSize: 2})",
          "351:   require.NoError(t, err)",
          "352:   require.Len(t, tuples, 2)",
          "353:   require.Empty(t, contToken)",
          "354:  })",
          "357:   tuples, contToken, err := datastore.ReadPage(ctx, storeID, &openfgapb.TupleKey{Object: \"doc:readme\"}, storage.PaginationOptions{PageSize: 1})",
          "358:   require.NoError(t, err)",
          "359:   require.Len(t, tuples, 1)",
          "",
          "[Removed Lines]",
          "349:  t.Run(\"reading a page completely does not return a continuation token\", func(t *testing.T) {",
          "356:  t.Run(\"reading a page partially returns a continuation token\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "349:  t.Run(\"reading_a_page_completely_does_not_return_a_continuation_token\", func(t *testing.T) {",
          "356:  t.Run(\"reading_a_page_partially_returns_a_continuation_token\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "380:   }",
          "381:  })",
          "384:   tuples, contToken, err := datastore.ReadPage(ctx, storeID, nil, storage.PaginationOptions{PageSize: 2})",
          "385:   require.NoError(t, err)",
          "386:   require.Len(t, tuples, 2)",
          "387:   require.Empty(t, contToken)",
          "388:  })",
          "391:   tuples, contToken, err := datastore.ReadPage(ctx, storeID, nil, storage.PaginationOptions{PageSize: 1})",
          "392:   require.NoError(t, err)",
          "393:   require.Len(t, tuples, 1)",
          "",
          "[Removed Lines]",
          "383:  t.Run(\"reading by storeID completely does not return a continuation token\", func(t *testing.T) {",
          "390:  t.Run(\"reading by storeID partially returns a continuation token\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "383:  t.Run(\"reading_by_storeID_completely_does_not_return_a_continuation_token\", func(t *testing.T) {",
          "390:  t.Run(\"reading_by_storeID_partially_returns_a_continuation_token\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "436:   tuple.NewTupleKey(\"folder:folder1\", \"viewer\", \"user:jon\"),",
          "437:  }",
          "440:   storeID := ulid.Make().String()",
          "442:   err := datastore.Write(ctx, storeID, nil, tuples)",
          "",
          "[Removed Lines]",
          "439:  t.Run(\"returns results with two user filters\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "439:  t.Run(\"returns_results_with_two_user_filters\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "466:   require.ElementsMatch([]string{\"document:doc1\", \"document:doc2\"}, objects)",
          "467:  })",
          "470:   storeID := ulid.Make().String()",
          "472:   err := datastore.Write(ctx, storeID, nil, tuples)",
          "",
          "[Removed Lines]",
          "469:  t.Run(\"returns no results if the input users do not match the tuples\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "469:  t.Run(\"returns_no_results_if_the_input_users_do_not_match_the_tuples\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "492:   require.Empty(objects)",
          "493:  })",
          "496:   storeID := ulid.Make().String()",
          "498:   err := datastore.Write(ctx, storeID, nil, tuples)",
          "",
          "[Removed Lines]",
          "495:  t.Run(\"returns no results if the input relation does not match any tuples\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "495:  t.Run(\"returns_no_results_if_the_input_relation_does_not_match_any_tuples\", func(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "518:   require.Empty(objects)",
          "519:  })",
          "522:   storeID := ulid.Make().String()",
          "524:   err := datastore.Write(ctx, storeID, nil, tuples)",
          "",
          "[Removed Lines]",
          "521:  t.Run(\"returns no results if the input object type does not match any tuples\", func(t *testing.T) {",
          "",
          "[Added Lines]",
          "521:  t.Run(\"returns_no_results_if_the_input_object_type_does_not_match_any_tuples\", func(t *testing.T) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85c6edcaf93c8e6b2697fab934fb27f1828b1d1f",
      "candidate_info": {
        "commit_hash": "85c6edcaf93c8e6b2697fab934fb27f1828b1d1f",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/85c6edcaf93c8e6b2697fab934fb27f1828b1d1f",
        "files": [
          "Makefile",
          "go.mod",
          "go.sum",
          "internal/graph/graph.go",
          "internal/graph/graph_test.go",
          "pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go",
          "server/commands/connected_objects.go",
          "server/test/check.go",
          "server/test/connected_objects.go",
          "server/test/list_objects.go",
          "server/test/write.go"
        ],
        "message": "chore: update api dependency with wildcards (#348)",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/graph/graph.go||internal/graph/graph.go",
          "internal/graph/graph_test.go||internal/graph/graph_test.go",
          "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
          "server/commands/connected_objects.go||server/commands/connected_objects.go",
          "server/test/check.go||server/test/check.go",
          "server/test/connected_objects.go||server/test/connected_objects.go",
          "server/test/list_objects.go||server/test/list_objects.go",
          "server/test/write.go||server/test/write.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
            "server/test/check.go||server/test/check.go",
            "server/test/write.go||server/test/write.go"
          ],
          "candidate": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go",
            "server/test/check.go||server/test/check.go",
            "server/test/write.go||server/test/write.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  github.com/spf13/viper v1.14.0",
          "27:  github.com/stretchr/testify v1.8.1",
          "28:  github.com/tidwall/gjson v1.14.3",
          "30:  go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.36.4",
          "31:  go.opentelemetry.io/otel v1.11.1",
          "32:  go.opentelemetry.io/otel/metric v0.33.0",
          "",
          "[Removed Lines]",
          "29:  go.buf.build/openfga/go/openfga/api v1.2.35",
          "",
          "[Added Lines]",
          "29:  go.buf.build/openfga/go/openfga/api v1.2.36",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: go.buf.build/openfga/go/envoyproxy/protoc-gen-validate v1.2.7/go.mod h1:vDGPWmgcenDF3BKV1EZjWm1O62Ux8j64NPrvQIbvurg=",
          "359: go.buf.build/openfga/go/grpc-ecosystem/grpc-gateway v1.2.46 h1:4/UxOmJ4RSykBiR10PtVAUGLKPGRYpIug7GPnmhqpYI=",
          "360: go.buf.build/openfga/go/grpc-ecosystem/grpc-gateway v1.2.46/go.mod h1:WfhNIqSEXCpV/mxdYvyo5KgLNYPsDEom6n2IFagP9PQ=",
          "363: go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=",
          "364: go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=",
          "365: go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=",
          "",
          "[Removed Lines]",
          "361: go.buf.build/openfga/go/openfga/api v1.2.35 h1:G5IM9HbvJ3bt2zG+kKzM6F78rOpKsW6rzWWzk5rhefg=",
          "362: go.buf.build/openfga/go/openfga/api v1.2.35/go.mod h1:gkcP+Zq/lLcXi2GOpjzqecB5hCjwiZSfVq44NLbjJz4=",
          "",
          "[Added Lines]",
          "361: go.buf.build/openfga/go/openfga/api v1.2.36 h1:6UN9hb6DMK7sY2UI6TTg1mHbEWB3+fa+m/KFwGLyx9c=",
          "362: go.buf.build/openfga/go/openfga/api v1.2.36/go.mod h1:gkcP+Zq/lLcXi2GOpjzqecB5hCjwiZSfVq44NLbjJz4=",
          "",
          "---------------"
        ],
        "internal/graph/graph.go||internal/graph/graph.go": [
          "File: internal/graph/graph.go -> internal/graph/graph.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   if ok {",
          "128:    res = append(res, &RelationshipIngress{",
          "134:    })",
          "135:   }",
          "",
          "[Removed Lines]",
          "129:     Type: DirectIngress,",
          "130:     Ingress: &openfgapb.RelationReference{",
          "131:      Type:     target.GetType(),",
          "132:      Relation: target.GetRelation(),",
          "133:     },",
          "",
          "[Added Lines]",
          "129:     Type:    DirectIngress,",
          "130:     Ingress: typesystem.DirectRelationReference(target.GetType(), target.GetRelation()),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:      visited[key] = struct{}{}",
          "150:      res = append(res, &RelationshipIngress{",
          "156:      })",
          "157:     }",
          "158:    }",
          "",
          "[Removed Lines]",
          "151:       Type: DirectIngress,",
          "152:       Ingress: &openfgapb.RelationReference{",
          "153:        Type:     relatedUserType.GetType(),",
          "154:        Relation: relatedUserType.GetRelation(),",
          "155:       },",
          "",
          "[Added Lines]",
          "148:       Type:    DirectIngress,",
          "149:       Ingress: typesystem.DirectRelationReference(relatedUserType.GetType(), relatedUserType.GetRelation()),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:   return res, nil",
          "162:  case *openfgapb.Userset_ComputedUserset:",
          "168:  case *openfgapb.Userset_TupleToUserset:",
          "169:   tupleset := t.TupleToUserset.GetTupleset().GetRelation()",
          "170:   computedUserset := t.TupleToUserset.GetComputedUserset().GetRelation()",
          "",
          "[Removed Lines]",
          "163:   return g.findIngresses(&openfgapb.RelationReference{",
          "164:    Type:     target.GetType(),",
          "165:    Relation: t.ComputedUserset.GetRelation(),",
          "166:   },",
          "167:    source, visited)",
          "",
          "[Added Lines]",
          "157:   return g.findIngresses(",
          "158:    typesystem.DirectRelationReference(target.GetType(), t.ComputedUserset.GetRelation()),",
          "159:    source,",
          "160:    visited,",
          "161:   )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:   relatedToSourceRef, _ := g.typesystem.IsDirectlyRelated(relationReference, source)",
          "",
          "[Removed Lines]",
          "176:   relationReference := &openfgapb.RelationReference{",
          "177:    Type:     target.GetType(),",
          "178:    Relation: tupleset,",
          "179:   }",
          "",
          "[Added Lines]",
          "170:   relationReference := typesystem.DirectRelationReference(target.GetType(), tupleset)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:   if relatedToSourceRef || relatedToSourceObjType {",
          "186:    res = append(res, &RelationshipIngress{",
          "196:    })",
          "197:   }",
          "",
          "[Removed Lines]",
          "187:     Type: TupleToUsersetIngress,",
          "188:     Ingress: &openfgapb.RelationReference{",
          "189:      Type:     target.GetType(),",
          "190:      Relation: target.GetRelation(),",
          "191:     },",
          "192:     TuplesetRelation: &openfgapb.RelationReference{",
          "193:      Type:     target.GetType(),",
          "194:      Relation: tupleset,",
          "195:     },",
          "",
          "[Added Lines]",
          "178:     Type:             TupleToUsersetIngress,",
          "179:     Ingress:          typesystem.DirectRelationReference(target.GetType(), target.GetRelation()),",
          "180:     TuplesetRelation: typesystem.DirectRelationReference(target.GetType(), tupleset),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201:   for _, relatedUserType := range tuplesetDirectlyRelatedTypes {",
          "202:    _, err := g.typesystem.GetRelation(relatedUserType.GetType(), computedUserset)",
          "203:    if err == nil {",
          "208:     if err != nil {",
          "209:      return nil, err",
          "210:     }",
          "",
          "[Removed Lines]",
          "204:     subResults, err := g.findIngresses(&openfgapb.RelationReference{",
          "205:      Type:     relatedUserType.GetType(),",
          "206:      Relation: computedUserset,",
          "207:     }, source, visited)",
          "",
          "[Added Lines]",
          "189:     subResults, err := g.findIngresses(",
          "190:      typesystem.DirectRelationReference(relatedUserType.GetType(), computedUserset),",
          "191:      source,",
          "192:      visited,",
          "193:     )",
          "",
          "---------------"
        ],
        "internal/graph/graph_test.go||internal/graph/graph_test.go": [
          "File: internal/graph/graph_test.go -> internal/graph/graph_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:        Relations: map[string]*openfgapb.RelationMetadata{",
          "36:         \"editor\": {",
          "37:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "40:          },",
          "41:         },",
          "42:        },",
          "",
          "[Removed Lines]",
          "38:           typesystem.RelationReference(\"user\", \"\"),",
          "39:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "38:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "39:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:        Relations: map[string]*openfgapb.RelationMetadata{",
          "52:         \"member\": {",
          "53:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "56:          },",
          "57:         },",
          "58:        },",
          "",
          "[Removed Lines]",
          "54:           typesystem.RelationReference(\"user\", \"\"),",
          "55:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "54:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "55:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:      },",
          "61:     },",
          "62:    },",
          "65:    expected: []*RelationshipIngress{",
          "66:     {",
          "67:      Type:    DirectIngress,",
          "69:     },",
          "70:     {",
          "71:      Type:    DirectIngress,",
          "73:     },",
          "74:    },",
          "75:   },",
          "",
          "[Removed Lines]",
          "63:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "64:    source: typesystem.RelationReference(\"user\", \"\"),",
          "68:      Ingress: typesystem.RelationReference(\"document\", \"editor\"),",
          "72:      Ingress: typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "63:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "64:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "68:      Ingress: typesystem.DirectRelationReference(\"document\", \"editor\"),",
          "72:      Ingress: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:        Relations: map[string]*openfgapb.RelationMetadata{",
          "91:         \"editor\": {",
          "92:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "94:          },",
          "95:         },",
          "96:        },",
          "",
          "[Removed Lines]",
          "93:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "93:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:      },",
          "99:     },",
          "100:    },",
          "103:    expected: []*RelationshipIngress{",
          "104:     {",
          "105:      Type:    DirectIngress,",
          "107:     },",
          "108:    },",
          "109:   },",
          "",
          "[Removed Lines]",
          "101:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "102:    source: typesystem.RelationReference(\"user\", \"\"),",
          "106:      Ingress: typesystem.RelationReference(\"document\", \"editor\"),",
          "",
          "[Added Lines]",
          "101:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "102:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "106:      Ingress: typesystem.DirectRelationReference(\"document\", \"editor\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:        Relations: map[string]*openfgapb.RelationMetadata{",
          "124:         \"member\": {",
          "125:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "127:          },",
          "128:         },",
          "129:        },",
          "",
          "[Removed Lines]",
          "126:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "126:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "138:        Relations: map[string]*openfgapb.RelationMetadata{",
          "139:         \"viewer\": {",
          "140:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "143:          },",
          "144:         },",
          "145:        },",
          "",
          "[Removed Lines]",
          "141:           typesystem.RelationReference(\"user\", \"\"),",
          "142:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "141:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "142:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "158:        Relations: map[string]*openfgapb.RelationMetadata{",
          "159:         \"parent\": {",
          "160:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "162:          },",
          "163:         },",
          "164:         \"viewer\": {",
          "165:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "167:          },",
          "168:         },",
          "169:        },",
          "",
          "[Removed Lines]",
          "161:           typesystem.RelationReference(\"folder\", \"\"),",
          "166:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "161:           typesystem.DirectRelationReference(\"folder\", \"\"),",
          "166:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "171:      },",
          "172:     },",
          "173:    },",
          "176:    expected: []*RelationshipIngress{",
          "177:     {",
          "178:      Type:    DirectIngress,",
          "180:     },",
          "181:     {",
          "182:      Type:    DirectIngress,",
          "184:     },",
          "185:     {",
          "186:      Type:    DirectIngress,",
          "188:     },",
          "189:    },",
          "190:   },",
          "",
          "[Removed Lines]",
          "174:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "175:    source: typesystem.RelationReference(\"user\", \"\"),",
          "179:      Ingress: typesystem.RelationReference(\"document\", \"viewer\"),",
          "183:      Ingress: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "187:      Ingress: typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "174:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "175:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "179:      Ingress: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "183:      Ingress: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "187:      Ingress: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "207:        Relations: map[string]*openfgapb.RelationMetadata{",
          "208:         \"editor\": {",
          "209:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "212:          },",
          "213:         },",
          "214:         \"viewer\": {",
          "215:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "217:          },",
          "218:         },",
          "219:        },",
          "",
          "[Removed Lines]",
          "210:           typesystem.RelationReference(\"user\", \"\"),",
          "211:           typesystem.RelationReference(\"group\", \"member\"),",
          "216:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "210:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "211:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "216:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "228:        Relations: map[string]*openfgapb.RelationMetadata{",
          "229:         \"member\": {",
          "230:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "233:          },",
          "234:         },",
          "235:        },",
          "",
          "[Removed Lines]",
          "231:           typesystem.RelationReference(\"user\", \"\"),",
          "232:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "231:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "232:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "237:      },",
          "238:     },",
          "239:    },",
          "242:    expected: []*RelationshipIngress{",
          "243:     {",
          "244:      Type:    DirectIngress,",
          "246:     },",
          "247:     {",
          "248:      Type:    DirectIngress,",
          "250:     },",
          "251:     {",
          "252:      Type:    DirectIngress,",
          "254:     },",
          "255:    },",
          "256:   },",
          "",
          "[Removed Lines]",
          "240:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "241:    source: typesystem.RelationReference(\"user\", \"\"),",
          "245:      Ingress: typesystem.RelationReference(\"document\", \"viewer\"),",
          "249:      Ingress: typesystem.RelationReference(\"document\", \"editor\"),",
          "253:      Ingress: typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "240:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "241:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "245:      Ingress: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "249:      Ingress: typesystem.DirectRelationReference(\"document\", \"editor\"),",
          "253:      Ingress: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "270:        Relations: map[string]*openfgapb.RelationMetadata{",
          "271:         \"member\": {",
          "272:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "274:          },",
          "275:         },",
          "276:        },",
          "",
          "[Removed Lines]",
          "273:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "273:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "286:        Relations: map[string]*openfgapb.RelationMetadata{",
          "287:         \"member\": {",
          "288:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "291:          },",
          "292:         },",
          "293:        },",
          "",
          "[Removed Lines]",
          "289:           typesystem.RelationReference(\"user\", \"\"),",
          "290:           typesystem.RelationReference(\"team\", \"member\"),",
          "",
          "[Added Lines]",
          "289:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "290:           typesystem.DirectRelationReference(\"team\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "295:      },",
          "296:     },",
          "297:    },",
          "300:    expected: []*RelationshipIngress{",
          "301:     {",
          "302:      Type:    DirectIngress,",
          "304:     },",
          "305:    },",
          "306:   },",
          "",
          "[Removed Lines]",
          "298:    target: typesystem.RelationReference(\"team\", \"member\"),",
          "299:    source: typesystem.RelationReference(\"user\", \"\"),",
          "303:      Ingress: typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "298:    target: typesystem.DirectRelationReference(\"team\", \"member\"),",
          "299:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "303:      Ingress: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "324:        Relations: map[string]*openfgapb.RelationMetadata{",
          "325:         \"parent\": {",
          "326:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "328:          },",
          "329:         },",
          "330:         \"viewer\": {",
          "331:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "333:          },",
          "334:         },",
          "335:        },",
          "",
          "[Removed Lines]",
          "327:           typesystem.RelationReference(\"folder\", \"\"),",
          "332:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "327:           typesystem.DirectRelationReference(\"folder\", \"\"),",
          "332:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "337:      },",
          "338:     },",
          "339:    },",
          "342:    expected: []*RelationshipIngress{",
          "343:     {",
          "344:      Type:    DirectIngress,",
          "346:     },",
          "347:    },",
          "348:   },",
          "",
          "[Removed Lines]",
          "340:    target: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "341:    source: typesystem.RelationReference(\"user\", \"\"),",
          "345:      Ingress: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "",
          "[Added Lines]",
          "340:    target: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "341:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "345:      Ingress: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "362:        Relations: map[string]*openfgapb.RelationMetadata{",
          "363:         \"member\": {",
          "364:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "366:          },",
          "367:         },",
          "368:        },",
          "",
          "[Removed Lines]",
          "365:           typesystem.RelationReference(\"team\", \"member\"),",
          "",
          "[Added Lines]",
          "365:           typesystem.DirectRelationReference(\"team\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "370:      },",
          "371:     },",
          "372:    },",
          "375:    expected: []*RelationshipIngress{},",
          "376:   },",
          "377:   {",
          "",
          "[Removed Lines]",
          "373:    target:   typesystem.RelationReference(\"team\", \"member\"),",
          "374:    source:   typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "373:    target:   typesystem.DirectRelationReference(\"team\", \"member\"),",
          "374:    source:   typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "390:        Relations: map[string]*openfgapb.RelationMetadata{",
          "391:         \"member\": {",
          "392:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "394:          },",
          "395:         },",
          "396:        },",
          "",
          "[Removed Lines]",
          "393:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "393:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "405:        Relations: map[string]*openfgapb.RelationMetadata{",
          "406:         \"viewer\": {",
          "407:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "410:          },",
          "411:         },",
          "412:        },",
          "",
          "[Removed Lines]",
          "408:           typesystem.RelationReference(\"user\", \"\"),",
          "409:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "408:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "409:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "422:        Relations: map[string]*openfgapb.RelationMetadata{",
          "423:         \"parent\": {",
          "424:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "426:          },",
          "427:         },",
          "428:        },",
          "",
          "[Removed Lines]",
          "425:           typesystem.RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "425:           typesystem.DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "430:      },",
          "431:     },",
          "432:    },",
          "435:    expected: []*RelationshipIngress{",
          "436:     {",
          "437:      Type:    DirectIngress,",
          "439:     },",
          "440:     {",
          "441:      Type:    DirectIngress,",
          "443:     },",
          "444:    },",
          "445:   },",
          "",
          "[Removed Lines]",
          "433:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "434:    source: typesystem.RelationReference(\"user\", \"\"),",
          "438:      Ingress: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "442:      Ingress: typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "433:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "434:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "438:      Ingress: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "442:      Ingress: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "459:        Relations: map[string]*openfgapb.RelationMetadata{",
          "460:         \"member\": {",
          "461:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "463:          },",
          "464:         },",
          "465:        },",
          "",
          "[Removed Lines]",
          "462:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "462:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "474:        Relations: map[string]*openfgapb.RelationMetadata{",
          "475:         \"viewer\": {",
          "476:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "479:          },",
          "480:         },",
          "481:        },",
          "",
          "[Removed Lines]",
          "477:           typesystem.RelationReference(\"user\", \"\"),",
          "478:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "477:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "478:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "491:        Relations: map[string]*openfgapb.RelationMetadata{",
          "492:         \"parent\": {",
          "493:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "495:          },",
          "496:         },",
          "497:        },",
          "",
          "[Removed Lines]",
          "494:           typesystem.RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "494:           typesystem.DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "499:      },",
          "500:     },",
          "501:    },",
          "504:    expected: []*RelationshipIngress{",
          "505:     {",
          "506:      Type:    DirectIngress,",
          "508:     },",
          "509:    },",
          "510:   },",
          "",
          "[Removed Lines]",
          "502:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "503:    source: typesystem.RelationReference(\"group\", \"member\"),",
          "507:      Ingress: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "",
          "[Added Lines]",
          "502:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "503:    source: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "507:      Ingress: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "524:        Relations: map[string]*openfgapb.RelationMetadata{",
          "525:         \"member\": {",
          "526:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "528:          },",
          "529:         },",
          "530:        },",
          "",
          "[Removed Lines]",
          "527:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "527:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "539:        Relations: map[string]*openfgapb.RelationMetadata{",
          "540:         \"viewer\": {",
          "541:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "544:          },",
          "545:         },",
          "546:        },",
          "",
          "[Removed Lines]",
          "542:           typesystem.RelationReference(\"user\", \"\"),",
          "543:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "542:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "543:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "556:        Relations: map[string]*openfgapb.RelationMetadata{",
          "557:         \"parent\": {",
          "558:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "560:          },",
          "561:         },",
          "562:        },",
          "",
          "[Removed Lines]",
          "559:           typesystem.RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "559:           typesystem.DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "564:      },",
          "565:     },",
          "566:    },",
          "569:    expected: []*RelationshipIngress{",
          "570:     {",
          "571:      Type:             TupleToUsersetIngress,",
          "574:     },",
          "575:    },",
          "576:   },",
          "",
          "[Removed Lines]",
          "567:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "568:    source: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "572:      Ingress:          typesystem.RelationReference(\"document\", \"viewer\"),",
          "573:      TuplesetRelation: typesystem.RelationReference(\"document\", \"parent\"),",
          "",
          "[Added Lines]",
          "567:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "568:    source: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "572:      Ingress:          typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "573:      TuplesetRelation: typesystem.DirectRelationReference(\"document\", \"parent\"),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "593:        Relations: map[string]*openfgapb.RelationMetadata{",
          "594:         \"viewer\": {",
          "595:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "597:          },",
          "598:         },",
          "599:        },",
          "",
          "[Removed Lines]",
          "596:           typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "596:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "609:        Relations: map[string]*openfgapb.RelationMetadata{",
          "610:         \"parent\": {",
          "611:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "614:          },",
          "615:         },",
          "616:        },",
          "",
          "[Removed Lines]",
          "612:           typesystem.RelationReference(\"folder\", \"\"),",
          "613:           typesystem.RelationReference(\"organization\", \"\"),",
          "",
          "[Added Lines]",
          "612:           typesystem.DirectRelationReference(\"folder\", \"\"),",
          "613:           typesystem.DirectRelationReference(\"organization\", \"\"),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "618:      },",
          "619:     },",
          "620:    },",
          "623:    expected: []*RelationshipIngress{",
          "624:     {",
          "625:      Type:    DirectIngress,",
          "627:     },",
          "628:    },",
          "629:   },",
          "",
          "[Removed Lines]",
          "621:    target: typesystem.RelationReference(\"document\", \"viewer\"),",
          "622:    source: typesystem.RelationReference(\"user\", \"\"),",
          "626:      Ingress: typesystem.RelationReference(\"folder\", \"viewer\"),",
          "",
          "[Added Lines]",
          "621:    target: typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "622:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "626:      Ingress: typesystem.DirectRelationReference(\"folder\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "643:        Relations: map[string]*openfgapb.RelationMetadata{",
          "644:         \"member\": {",
          "645:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "648:          },",
          "649:         },",
          "650:        },",
          "",
          "[Removed Lines]",
          "646:           typesystem.RelationReference(\"user\", \"\"),",
          "647:           typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "646:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "647:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "652:      },",
          "653:     },",
          "654:    },",
          "657:    expected: []*RelationshipIngress{",
          "658:     {",
          "659:      Type:    DirectIngress,",
          "661:     },",
          "662:    },",
          "663:   },",
          "",
          "[Removed Lines]",
          "655:    target: typesystem.RelationReference(\"group\", \"member\"),",
          "656:    source: typesystem.RelationReference(\"user\", \"\"),",
          "660:      Ingress: typesystem.RelationReference(\"group\", \"member\"),",
          "",
          "[Added Lines]",
          "655:    target: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "656:    source: typesystem.DirectRelationReference(\"user\", \"\"),",
          "660:      Ingress: typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "675:        Relations: map[string]*openfgapb.RelationMetadata{",
          "676:         \"viewer\": {",
          "677:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "679:          },",
          "680:         },",
          "681:        },",
          "",
          "[Removed Lines]",
          "678:           typesystem.RelationReference(\"organization\", \"\"),",
          "",
          "[Added Lines]",
          "678:           typesystem.DirectRelationReference(\"organization\", \"\"),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "691:        Relations: map[string]*openfgapb.RelationMetadata{",
          "692:         \"parent\": {",
          "693:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "695:          },",
          "696:         },",
          "697:        },",
          "",
          "[Removed Lines]",
          "694:           typesystem.RelationReference(\"organization\", \"viewer\"),",
          "",
          "[Added Lines]",
          "694:           typesystem.DirectRelationReference(\"organization\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "699:      },",
          "700:     },",
          "701:    },",
          "704:    expected: []*RelationshipIngress{",
          "705:     {",
          "706:      Type:    DirectIngress,",
          "708:     },",
          "709:    },",
          "710:   },",
          "",
          "[Removed Lines]",
          "702:    target: typesystem.RelationReference(\"document\", \"view\"),",
          "703:    source: typesystem.RelationReference(\"organization\", \"\"),",
          "707:      Ingress: typesystem.RelationReference(\"organization\", \"viewer\"),",
          "",
          "[Added Lines]",
          "702:    target: typesystem.DirectRelationReference(\"document\", \"view\"),",
          "703:    source: typesystem.DirectRelationReference(\"organization\", \"\"),",
          "707:      Ingress: typesystem.DirectRelationReference(\"organization\", \"viewer\"),",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
          "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  ErrInvalidUsersetRewrite = errors.New(\"invalid userset rewrite definition\")",
          "23: )",
          "26:  return &openfgapb.RelationReference{",
          "29:  }",
          "30: }",
          "",
          "[Removed Lines]",
          "25: func RelationReference(objectType, relation string) *openfgapb.RelationReference {",
          "27:   Type:     objectType,",
          "28:   Relation: relation,",
          "",
          "[Added Lines]",
          "25: func DirectRelationReference(objectType, relation string) *openfgapb.RelationReference {",
          "26:  relationReference := &openfgapb.RelationReference{",
          "27:   Type: objectType,",
          "28:  }",
          "29:  if relation != \"\" {",
          "30:   relationReference.RelationOrWildcard = &openfgapb.RelationReference_Relation{",
          "31:    Relation: relation,",
          "32:   }",
          "33:  }",
          "35:  return relationReference",
          "36: }",
          "38: func WildcardRelationReference(objectType string) *openfgapb.RelationReference {",
          "40:   Type:               objectType,",
          "41:   RelationOrWildcard: &openfgapb.RelationReference_Wildcard{},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "709: func (e *RelationUndefinedError) Error() string {",
          "711:  if e.ObjectType != \"\" {",
          "713:  }",
          "715:  return fmt.Sprintf(\"'%s' relation is undefined\", e.Relation)",
          "",
          "[Removed Lines]",
          "712:   return fmt.Sprintf(\"'%s#%s' relation is undefiend\", e.ObjectType, e.Relation)",
          "",
          "[Added Lines]",
          "724:   return fmt.Sprintf(\"'%s#%s' relation is undefined\", e.ObjectType, e.Relation)",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:        Relations: map[string]*openfgapb.RelationMetadata{",
          "519:         \"reader\": {",
          "520:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "528:          },",
          "529:         },",
          "530:         \"writer\": {",
          "531:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "539:          },",
          "540:         },",
          "541:        },",
          "",
          "[Removed Lines]",
          "521:           {",
          "522:            Type: \"user\",",
          "523:           },",
          "524:           {",
          "525:            Type:     \"group\",",
          "526:            Relation: \"member\",",
          "527:           },",
          "532:           {",
          "533:            Type: \"user\",",
          "534:           },",
          "535:           {",
          "536:            Type:     \"group\",",
          "537:            Relation: \"admin\",",
          "538:           },",
          "",
          "[Added Lines]",
          "521:           DirectRelationReference(\"user\", \"\"),",
          "522:           DirectRelationReference(\"group\", \"member\"),",
          "527:           DirectRelationReference(\"user\", \"\"),",
          "528:           DirectRelationReference(\"group\", \"admin\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "604:         \"reader\": {",
          "605:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "606:           {",
          "609:           },",
          "610:          },",
          "611:         },",
          "",
          "[Removed Lines]",
          "607:            Type:     \"group\",",
          "608:            Relation: \"admin\",",
          "",
          "[Added Lines]",
          "597:            Type:               \"group\",",
          "598:            RelationOrWildcard: &openfgapb.RelationReference_Relation{Relation: \"admin\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:        Relations: map[string]*openfgapb.RelationMetadata{",
          "886:         \"member\": {",
          "887:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "891:          },",
          "892:         },",
          "893:        },",
          "",
          "[Removed Lines]",
          "888:           {",
          "889:            Type: \"user\",",
          "890:           },",
          "",
          "[Added Lines]",
          "878:           DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "903:        Relations: map[string]*openfgapb.RelationMetadata{",
          "904:         \"parent\": {",
          "905:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "910:          },",
          "911:         },",
          "912:        },",
          "",
          "[Removed Lines]",
          "906:           {",
          "907:            Type:     \"folder\",",
          "908:            Relation: \"member\", //this isn't allowed",
          "909:           },",
          "",
          "[Added Lines]",
          "894:           DirectRelationReference(\"folder\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "959:        Relations: map[string]*openfgapb.RelationMetadata{",
          "960:         \"parent\": {",
          "961:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "966:          },",
          "967:         },",
          "968:         \"viewer\": {",
          "969:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "977:          },",
          "978:         },",
          "979:        },",
          "",
          "[Removed Lines]",
          "962:           {",
          "963:            Type:     \"folder\",",
          "964:            Relation: \"parent\", // this isn't allowed",
          "965:           },",
          "970:           {",
          "971:            Type:     \"folder\",",
          "972:            Relation: \"parent\",",
          "973:           },",
          "974:           {",
          "975:            Type: \"user\",",
          "976:           },",
          "",
          "[Added Lines]",
          "947:           DirectRelationReference(\"folder\", \"parent\"),",
          "952:           DirectRelationReference(\"user\", \"\"),",
          "953:           DirectRelationReference(\"folder\", \"parent\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1019:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1020:         \"parent\": {",
          "1021:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1023:          },",
          "1024:         },",
          "1025:        },",
          "",
          "[Removed Lines]",
          "1022:           RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "999:           DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1035:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1036:         \"manage\": {",
          "1037:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1039:          },",
          "1040:         },",
          "1041:         \"editor\": {",
          "1042:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1044:          },",
          "1045:         },",
          "1046:        },",
          "",
          "[Removed Lines]",
          "1038:           RelationReference(\"user\", \"\"),",
          "1043:           RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "1015:           DirectRelationReference(\"user\", \"\"),",
          "1020:           DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1048:      },",
          "1049:     },",
          "1050:    },",
          "1052:    expected: true,",
          "1053:   },",
          "1054:   {",
          "",
          "[Removed Lines]",
          "1051:    rr:       RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1028:    rr:       DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1068:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1069:         \"parent\": {",
          "1070:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1072:          },",
          "1073:         },",
          "1074:        },",
          "",
          "[Removed Lines]",
          "1071:           RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "1048:           DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1084:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1085:         \"editor\": {",
          "1086:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1088:          },",
          "1089:         },",
          "1090:         \"viewer\": {",
          "1091:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1093:          },",
          "1094:         },",
          "1095:        },",
          "",
          "[Removed Lines]",
          "1087:           RelationReference(\"user\", \"\"),",
          "1092:           RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "1064:           DirectRelationReference(\"user\", \"\"),",
          "1069:           DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1097:      },",
          "1098:     },",
          "1099:    },",
          "1101:    expected: true,",
          "1102:   },",
          "1103:   {",
          "",
          "[Removed Lines]",
          "1100:    rr:       RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1077:    rr:       DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1115:      },",
          "1116:     },",
          "1117:    },",
          "1119:    expected: true,",
          "1120:   },",
          "1121:   {",
          "",
          "[Removed Lines]",
          "1118:    rr:       RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1095:    rr:       DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1127:      },",
          "1128:     },",
          "1129:    },",
          "1131:    expected:    false,",
          "1132:    expectedErr: ErrObjectTypeUndefined,",
          "1133:   },",
          "",
          "[Removed Lines]",
          "1130:    rr:          RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1107:    rr:          DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1140:      },",
          "1141:     },",
          "1142:    },",
          "1144:    expected:    false,",
          "1145:    expectedErr: ErrRelationUndefined,",
          "1146:   },",
          "",
          "[Removed Lines]",
          "1143:    rr:          RelationReference(\"user\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1120:    rr:          DirectRelationReference(\"user\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1187:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1188:         \"parent\": {",
          "1189:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1191:          },",
          "1192:         },",
          "1193:        },",
          "",
          "[Removed Lines]",
          "1190:           RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "1167:           DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1203:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1204:         \"restricted\": {",
          "1205:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1207:          },",
          "1208:         },",
          "1209:         \"editor\": {",
          "1210:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1212:          },",
          "1213:         },",
          "1214:        },",
          "",
          "[Removed Lines]",
          "1206:           RelationReference(\"user\", \"\"),",
          "1211:           RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "1183:           DirectRelationReference(\"user\", \"\"),",
          "1188:           DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1216:      },",
          "1217:     },",
          "1218:    },",
          "1220:    expected: true,",
          "1221:   },",
          "1222:   {",
          "",
          "[Removed Lines]",
          "1219:    rr:       RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1196:    rr:       DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1236:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1237:         \"parent\": {",
          "1238:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1240:          },",
          "1241:         },",
          "1242:        },",
          "",
          "[Removed Lines]",
          "1239:           RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "1216:           DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1252:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1253:         \"restricted\": {",
          "1254:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1256:          },",
          "1257:         },",
          "1258:         \"viewer\": {",
          "1259:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1261:          },",
          "1262:         },",
          "1263:        },",
          "",
          "[Removed Lines]",
          "1255:           RelationReference(\"user\", \"\"),",
          "1260:           RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "1232:           DirectRelationReference(\"user\", \"\"),",
          "1237:           DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1265:      },",
          "1266:     },",
          "1267:    },",
          "1269:    expected: true,",
          "1270:   },",
          "1271:   {",
          "",
          "[Removed Lines]",
          "1268:    rr:       RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1245:    rr:       DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1285:      },",
          "1286:     },",
          "1287:    },",
          "1289:    expected: true,",
          "1290:   },",
          "1291:   {",
          "",
          "[Removed Lines]",
          "1288:    rr:       RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1265:    rr:       DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1297:      },",
          "1298:     },",
          "1299:    },",
          "1301:    expected:    false,",
          "1302:    expectedErr: ErrObjectTypeUndefined,",
          "1303:   },",
          "",
          "[Removed Lines]",
          "1300:    rr:          RelationReference(\"document\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1277:    rr:          DirectRelationReference(\"document\", \"viewer\"),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1310:      },",
          "1311:     },",
          "1312:    },",
          "1314:    expected:    false,",
          "1315:    expectedErr: ErrRelationUndefined,",
          "1316:   },",
          "",
          "[Removed Lines]",
          "1313:    rr:          RelationReference(\"user\", \"viewer\"),",
          "",
          "[Added Lines]",
          "1290:    rr:          DirectRelationReference(\"user\", \"viewer\"),",
          "",
          "---------------"
        ],
        "server/commands/connected_objects.go||server/commands/connected_objects.go": [
          "File: server/commands/connected_objects.go -> server/commands/connected_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  storeID := req.StoreID",
          "71:  g := graph.BuildConnectedObjectGraph(c.Typesystem)",
          "",
          "[Removed Lines]",
          "58:  targetUserType, _ := tuple.SplitObject(req.User.Object)",
          "60:  targetUserRef := &openfgapb.RelationReference{",
          "61:   Type:     targetUserType,",
          "62:   Relation: req.User.Relation,",
          "63:  }",
          "65:  sourceObjRef := &openfgapb.RelationReference{",
          "66:   Type:     req.ObjectType,",
          "67:   Relation: req.Relation,",
          "68:  }",
          "",
          "[Added Lines]",
          "58:  targetUserType, _ := tuple.SplitObject(req.User.GetObject())",
          "59:  targetUserRef := typesystem.DirectRelationReference(targetUserType, req.User.GetRelation())",
          "60:  sourceObjRef := typesystem.DirectRelationReference(req.ObjectType, req.Relation)",
          "",
          "---------------"
        ],
        "server/test/check.go||server/test/check.go": [
          "File: server/test/check.go -> server/test/check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1222:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1223:        \"parent\": {",
          "1224:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1226:         },",
          "1227:        },",
          "1228:       },",
          "",
          "[Removed Lines]",
          "1225:          typesystem.RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "1225:          typesystem.DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1237:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1238:        \"viewer\": {",
          "1239:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1241:         },",
          "1242:        },",
          "1243:       },",
          "",
          "[Removed Lines]",
          "1240:          typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "1240:          typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1276:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1277:        \"parent\": {",
          "1278:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1280:         },",
          "1281:        },",
          "1282:       },",
          "",
          "[Removed Lines]",
          "1279:          typesystem.RelationReference(\"folder\", \"\"),",
          "",
          "[Added Lines]",
          "1279:          typesystem.DirectRelationReference(\"folder\", \"\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1291:       Relations: map[string]*openfgapb.RelationMetadata{",
          "1292:        \"viewer\": {",
          "1293:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1295:         },",
          "1296:        },",
          "1297:       },",
          "",
          "[Removed Lines]",
          "1294:          typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "1294:          typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------"
        ],
        "server/test/connected_objects.go||server/test/connected_objects.go": [
          "File: server/test/connected_objects.go -> server/test/connected_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:        Relations: map[string]*openfgapb.RelationMetadata{",
          "61:         \"parent\": {",
          "62:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "64:          },",
          "65:         },",
          "66:         \"viewer\": {",
          "67:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "69:          },",
          "70:         },",
          "71:        },",
          "",
          "[Removed Lines]",
          "63:           {Type: \"folder\"},",
          "68:           {Type: \"user\"},",
          "",
          "[Added Lines]",
          "63:           {",
          "64:            Type: \"folder\",",
          "65:           },",
          "70:           {",
          "71:            Type: \"user\",",
          "72:           },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:        Relations: map[string]*openfgapb.RelationMetadata{",
          "114:         \"parent\": {",
          "115:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "117:          },",
          "118:         },",
          "119:         \"viewer\": {",
          "120:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "122:          },",
          "123:         },",
          "124:        },",
          "",
          "[Removed Lines]",
          "116:           {Type: \"folder\"},",
          "121:           {Type: \"user\"},",
          "",
          "[Added Lines]",
          "120:           {",
          "121:            Type: \"folder\",",
          "122:           },",
          "127:           {",
          "128:            Type: \"user\",",
          "129:           },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:        Relations: map[string]*openfgapb.RelationMetadata{",
          "159:         \"viewer\": {",
          "160:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "162:          },",
          "163:         },",
          "164:        },",
          "",
          "[Removed Lines]",
          "161:           {Type: \"user\"},",
          "",
          "[Added Lines]",
          "169:           {",
          "170:            Type: \"user\",",
          "171:           },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:        Relations: map[string]*openfgapb.RelationMetadata{",
          "254:         \"viewer\": {",
          "255:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "258:          },",
          "259:         },",
          "260:        },",
          "",
          "[Removed Lines]",
          "256:           {Type: \"user\"},",
          "257:           {Type: \"group\", Relation: \"member\"},",
          "",
          "[Added Lines]",
          "266:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "267:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:        Relations: map[string]*openfgapb.RelationMetadata{",
          "311:         \"owner\": {",
          "312:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "315:          },",
          "316:         },",
          "317:        },",
          "",
          "[Removed Lines]",
          "313:           {Type: \"user\"},",
          "314:           {Type: \"group\", Relation: \"member\"},",
          "",
          "[Added Lines]",
          "323:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "324:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "355:        Relations: map[string]*openfgapb.RelationMetadata{",
          "356:         \"member\": {",
          "357:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "360:          },",
          "361:         },",
          "362:        },",
          "",
          "[Removed Lines]",
          "358:           {Type: \"user\"},",
          "359:           {Type: \"group\", Relation: \"member\"},",
          "",
          "[Added Lines]",
          "368:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "369:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "380:         },",
          "381:         \"viewer\": {",
          "382:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "385:          },",
          "386:         },",
          "387:        },",
          "",
          "[Removed Lines]",
          "383:           {Type: \"user\"},",
          "384:           {Type: \"group\", Relation: \"member\"},",
          "",
          "[Added Lines]",
          "393:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "394:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "541:        Relations: map[string]*openfgapb.RelationMetadata{",
          "542:         \"member\": {",
          "543:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "546:          },",
          "547:         },",
          "548:        },",
          "",
          "[Removed Lines]",
          "544:           {Type: \"group\", Relation: \"member\"},",
          "545:           {Type: \"user\"},",
          "",
          "[Added Lines]",
          "554:           typesystem.DirectRelationReference(\"user\", \"\"),",
          "555:           typesystem.DirectRelationReference(\"group\", \"member\"),",
          "",
          "---------------"
        ],
        "server/test/list_objects.go||server/test/list_objects.go": [
          "File: server/test/list_objects.go -> server/test/list_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:      Relations: map[string]*openfgapb.RelationMetadata{",
          "365:       \"viewer\": {",
          "366:        DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "368:        },",
          "369:       },",
          "370:      },",
          "",
          "[Removed Lines]",
          "367:         typesystem.RelationReference(\"user\", \"\"),",
          "",
          "[Added Lines]",
          "367:         typesystem.DirectRelationReference(\"user\", \"\"),",
          "",
          "---------------"
        ],
        "server/test/write.go||server/test/write.go": [
          "File: server/test/write.go -> server/test/write.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:        \"reader\": {",
          "1066:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1067:          {",
          "1070:          },",
          "1071:         },",
          "1072:        },",
          "",
          "[Removed Lines]",
          "1068:           Type:     \"group\",",
          "1069:           Relation: \"member\",",
          "",
          "[Added Lines]",
          "1068:           Type:               \"group\",",
          "1069:           RelationOrWildcard: &openfgapb.RelationReference_Relation{Relation: \"member\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1107:        \"reader\": {",
          "1108:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1109:          {",
          "1112:          },",
          "1113:         },",
          "1114:        },",
          "",
          "[Removed Lines]",
          "1110:           Type:     \"group\",",
          "1111:           Relation: \"member\",",
          "",
          "[Added Lines]",
          "1110:           Type:               \"group\",",
          "1111:           RelationOrWildcard: &openfgapb.RelationReference_Relation{Relation: \"member\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1149:           Type: \"user\",",
          "1150:          },",
          "1151:          {",
          "1154:          },",
          "1155:         },",
          "1156:        },",
          "",
          "[Removed Lines]",
          "1152:           Type:     \"group\",",
          "1153:           Relation: \"member\",",
          "",
          "[Added Lines]",
          "1152:           Type:               \"group\",",
          "1153:           RelationOrWildcard: &openfgapb.RelationReference_Relation{Relation: \"member\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1227:        \"reader\": {",
          "1228:         DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1229:          {",
          "1232:          },",
          "1233:         },",
          "1234:        },",
          "",
          "[Removed Lines]",
          "1230:           Type:     \"group\",",
          "1231:           Relation: \"member\",",
          "",
          "[Added Lines]",
          "1230:           Type:               \"group\",",
          "1231:           RelationOrWildcard: &openfgapb.RelationReference_Relation{Relation: \"member\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "087ce392595f3c319ab3028b5089118ea4063452",
      "candidate_info": {
        "commit_hash": "087ce392595f3c319ab3028b5089118ea4063452",
        "repo": "openfga/openfga",
        "commit_url": "https://github.com/openfga/openfga/commit/087ce392595f3c319ab3028b5089118ea4063452",
        "files": [
          "cmd/validatemodels/validate_models.go",
          "pkg/server/commands/expand.go",
          "pkg/server/commands/write_authzmodel.go",
          "pkg/server/server.go",
          "pkg/server/server_test.go",
          "pkg/server/test/connected_objects.go",
          "pkg/server/test/expand.go",
          "pkg/server/test/list_objects.go",
          "pkg/server/test/server.go",
          "pkg/server/test/write_authzmodel.go",
          "pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go"
        ],
        "message": "Merge pull request from GHSA-hr9r-8phq-5x8j\n\n* fix: validate models with no entrypoints correctly\n\n* chore: fix map clone on union case\n\n* fix: clone visited map for base and subtract set in exclusion\n\n* fix: tidy up godoc and resolve issues with tests\n\n* test: drop duplicate test cases\n\n* test: add another valid model to the WriteAuthorizationModel test cases\n\n* fix: add more model validations on empty type name and relations\n\n* fix: add in model validation for check, list object and expand\n\n* chore: fix linter warnings\n\n* chore: fix usage of NewAndValidate\n\n---------\n\nCo-authored-by: Adrian Tam <adrian.tam@okta.com>",
        "before_after_code_files": [
          "cmd/validatemodels/validate_models.go||cmd/validatemodels/validate_models.go",
          "pkg/server/commands/expand.go||pkg/server/commands/expand.go",
          "pkg/server/commands/write_authzmodel.go||pkg/server/commands/write_authzmodel.go",
          "pkg/server/server.go||pkg/server/server.go",
          "pkg/server/server_test.go||pkg/server/server_test.go",
          "pkg/server/test/connected_objects.go||pkg/server/test/connected_objects.go",
          "pkg/server/test/expand.go||pkg/server/test/expand.go",
          "pkg/server/test/list_objects.go||pkg/server/test/list_objects.go",
          "pkg/server/test/server.go||pkg/server/test/server.go",
          "pkg/server/test/write_authzmodel.go||pkg/server/test/write_authzmodel.go",
          "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
          "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ],
          "candidate": [
            "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go",
            "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/validatemodels/validate_models.go||cmd/validatemodels/validate_models.go": [
          "File: cmd/validatemodels/validate_models.go -> cmd/validatemodels/validate_models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     for _, model := range models {",
          "131:      validationResult := validationResult{",
          "132:       StoreID:       store.Id,",
          "",
          "[Removed Lines]",
          "129:      _, err := typesystem.NewAndValidate(model)",
          "",
          "[Added Lines]",
          "129:      _, err := typesystem.NewAndValidate(context.Background(), model)",
          "",
          "---------------"
        ],
        "pkg/server/commands/expand.go||pkg/server/commands/expand.go": [
          "File: pkg/server/commands/expand.go -> pkg/server/commands/expand.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   return nil, serverErrors.ValidationError(typesystem.ErrInvalidSchemaVersion)",
          "52:  }",
          "56:  if err = validation.ValidateObject(typesys, tk); err != nil {",
          "57:   return nil, serverErrors.ValidationError(err)",
          "",
          "[Removed Lines]",
          "54:  typesys := typesystem.New(model)",
          "",
          "[Added Lines]",
          "54:  typesys, err := typesystem.NewAndValidate(ctx, model)",
          "55:  if err != nil {",
          "56:   return nil, serverErrors.ValidationError(typesystem.ErrInvalidModel)",
          "57:  }",
          "",
          "---------------"
        ],
        "pkg/server/commands/write_authzmodel.go||pkg/server/commands/write_authzmodel.go": [
          "File: pkg/server/commands/write_authzmodel.go -> pkg/server/commands/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   TypeDefinitions: req.GetTypeDefinitions(),",
          "46:  }",
          "49:  if err != nil {",
          "50:   return nil, serverErrors.InvalidAuthorizationModelInput(err)",
          "51:  }",
          "",
          "[Removed Lines]",
          "48:  _, err := typesystem.NewAndValidate(model)",
          "",
          "[Added Lines]",
          "48:  _, err := typesystem.NewAndValidate(ctx, model)",
          "",
          "---------------"
        ],
        "pkg/server/server.go||pkg/server/server.go": [
          "File: pkg/server/server.go -> pkg/server/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   return nil, err",
          "106:  }",
          "110:  ctx = typesystem.ContextWithTypesystem(ctx, typesys)",
          "",
          "[Removed Lines]",
          "108:  typesys := typesystem.New(model)",
          "",
          "[Added Lines]",
          "108:  typesys, err := typesystem.NewAndValidate(ctx, model)",
          "109:  if err != nil {",
          "110:   return nil, serverErrors.ValidationError(typesystem.ErrInvalidModel)",
          "111:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   return serverErrors.HandleError(\"\", err)",
          "152:  }",
          "156:  ctx = typesystem.ContextWithTypesystem(ctx, typesys)",
          "",
          "[Removed Lines]",
          "154:  typesys := typesystem.New(model)",
          "",
          "[Added Lines]",
          "157:  typesys, err := typesystem.NewAndValidate(ctx, model)",
          "158:  if err != nil {",
          "159:   return serverErrors.ValidationError(typesystem.ErrInvalidModel)",
          "160:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:   return nil, serverErrors.ValidationError(typesystem.ErrInvalidSchemaVersion)",
          "238:  }",
          "242:  if err := validation.ValidateUserObjectRelation(typesys, tk); err != nil {",
          "243:   return nil, serverErrors.ValidationError(err)",
          "",
          "[Removed Lines]",
          "240:  typesys := typesystem.New(model)",
          "",
          "[Added Lines]",
          "246:  typesys, err := typesystem.NewAndValidate(ctx, model)",
          "247:  if err != nil {",
          "248:   return nil, serverErrors.ValidationError(typesystem.ErrInvalidModel)",
          "249:  }",
          "",
          "---------------"
        ],
        "pkg/server/server_test.go||pkg/server/server_test.go": [
          "File: pkg/server/server_test.go -> pkg/server/server_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   Logger:    logger.NewNoopLogger(),",
          "176:   Transport: gateway.NewNoopTransport(),",
          "177:  }, &Config{",
          "179:  })",
          "181:  checkResponse, err := s.Check(ctx, &openfgapb.CheckRequest{",
          "",
          "[Removed Lines]",
          "178:   ResolveNodeLimit: 25,",
          "",
          "[Added Lines]",
          "178:   ResolveNodeLimit: test.DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:  require.Equal(t, true, checkResponse.Allowed)",
          "188: }",
          "190: func TestShortestPathToSolutionWins(t *testing.T) {",
          "191:  ctx := context.Background()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: func TestOperationsWithInvalidModel(t *testing.T) {",
          "191:  ctx := context.Background()",
          "192:  storeID := ulid.Make().String()",
          "193:  modelID := ulid.Make().String()",
          "196:  typedefs := parser.MustParse(`",
          "197:  type user",
          "199:  type repo",
          "200:    relations",
          "201:         define admin: [user] as self",
          "202:      define r1: [user] as self and r2 and r3",
          "203:      define r2: [user] as self and r1 and r3",
          "204:      define r3: [user] as self and r1 and r2",
          "205:  `)",
          "207:  tk := tuple.NewTupleKey(\"repo:openfga\", \"r1\", \"user:anne\")",
          "208:  mockController := gomock.NewController(t)",
          "209:  defer mockController.Finish()",
          "211:  mockDatastore := mockstorage.NewMockOpenFGADatastore(mockController)",
          "213:  mockDatastore.EXPECT().",
          "214:   ReadAuthorizationModel(gomock.Any(), storeID, modelID).",
          "215:   AnyTimes().",
          "216:   Return(&openfgapb.AuthorizationModel{",
          "217:    SchemaVersion:   typesystem.SchemaVersion1_1,",
          "218:    TypeDefinitions: typedefs,",
          "219:   }, nil)",
          "223:  s := New(&Dependencies{",
          "224:   Datastore: mockDatastore,",
          "225:   Logger:    logger.NewNoopLogger(),",
          "226:   Transport: gateway.NewNoopTransport(),",
          "227:  }, &Config{",
          "228:   ResolveNodeLimit: test.DefaultResolveNodeLimit,",
          "229:  })",
          "231:  _, err := s.Check(ctx, &openfgapb.CheckRequest{",
          "232:   StoreId:              storeID,",
          "233:   TupleKey:             tk,",
          "234:   AuthorizationModelId: modelID,",
          "235:  })",
          "236:  require.Error(t, err)",
          "237:  e, ok := status.FromError(err)",
          "238:  require.True(t, ok)",
          "239:  require.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())",
          "241:  _, err = s.ListObjects(ctx, &openfgapb.ListObjectsRequest{",
          "242:   StoreId:              storeID,",
          "243:   AuthorizationModelId: modelID,",
          "244:   Type:                 \"repo\",",
          "245:   Relation:             \"r1\",",
          "246:   User:                 \"user:anne\",",
          "247:  })",
          "248:  require.Error(t, err)",
          "249:  e, ok = status.FromError(err)",
          "250:  require.True(t, ok)",
          "251:  require.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())",
          "253:  err = s.StreamedListObjects(&openfgapb.StreamedListObjectsRequest{",
          "254:   StoreId:              storeID,",
          "255:   AuthorizationModelId: modelID,",
          "256:   Type:                 \"repo\",",
          "257:   Relation:             \"r1\",",
          "258:   User:                 \"user:anne\",",
          "259:  }, NewMockStreamServer())",
          "260:  require.Error(t, err)",
          "261:  e, ok = status.FromError(err)",
          "262:  require.True(t, ok)",
          "263:  require.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())",
          "265:  _, err = s.Expand(ctx, &openfgapb.ExpandRequest{",
          "266:   StoreId:              storeID,",
          "267:   AuthorizationModelId: modelID,",
          "268:   TupleKey:             tk,",
          "269:  })",
          "270:  require.Error(t, err)",
          "271:  e, ok = status.FromError(err)",
          "272:  require.True(t, ok)",
          "273:  require.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())",
          "275: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:   Logger:    logger.NewNoopLogger(),",
          "246:   Transport: gateway.NewNoopTransport(),",
          "247:  }, &Config{",
          "249:  })",
          "251:  start := time.Now()",
          "",
          "[Removed Lines]",
          "248:   ResolveNodeLimit: 25,",
          "",
          "[Added Lines]",
          "335:   ResolveNodeLimit: test.DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "380:   Transport: transport,",
          "381:   Logger:    logger,",
          "382:  }, &Config{",
          "384:   ListObjectsDeadline:   5 * time.Second,",
          "385:   ListObjectsMaxResults: 1000,",
          "386:  })",
          "",
          "[Removed Lines]",
          "383:   ResolveNodeLimit:      25,",
          "",
          "[Added Lines]",
          "470:   ResolveNodeLimit:      test.DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "440:   Transport: transport,",
          "441:   Logger:    logger,",
          "442:  }, &Config{",
          "444:   ListObjectsDeadline:   5 * time.Second,",
          "445:   ListObjectsMaxResults: 1000,",
          "446:  })",
          "",
          "[Removed Lines]",
          "443:   ResolveNodeLimit:      25,",
          "",
          "[Added Lines]",
          "530:   ResolveNodeLimit:      test.DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521:   Transport: transport,",
          "522:   Logger:    logger,",
          "523:  }, &Config{",
          "525:   ListObjectsDeadline:   5 * time.Second,",
          "526:   ListObjectsMaxResults: 1000,",
          "527:  })",
          "",
          "[Removed Lines]",
          "524:   ResolveNodeLimit:      25,",
          "",
          "[Added Lines]",
          "611:   ResolveNodeLimit:      test.DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587:   transport: transport,",
          "588:   logger:    logger,",
          "589:   config: &Config{",
          "591:    ListObjectsDeadline:   5 * time.Second,",
          "592:    ListObjectsMaxResults: 1000,",
          "593:   },",
          "",
          "[Removed Lines]",
          "590:    ResolveNodeLimit:      25,",
          "",
          "[Added Lines]",
          "677:    ResolveNodeLimit:      test.DefaultResolveNodeLimit,",
          "",
          "---------------"
        ],
        "pkg/server/test/connected_objects.go||pkg/server/test/connected_objects.go": [
          "File: pkg/server/test/connected_objects.go -> pkg/server/test/connected_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:    require.NoError(err)",
          "910:    if test.resolveNodeLimit == 0 {",
          "912:    }",
          "914:    connectedObjectsCmd := commands.ConnectedObjectsCommand{",
          "",
          "[Removed Lines]",
          "911:     test.resolveNodeLimit = defaultResolveNodeLimit",
          "",
          "[Added Lines]",
          "911:     test.resolveNodeLimit = DefaultResolveNodeLimit",
          "",
          "---------------"
        ],
        "pkg/server/test/expand.go||pkg/server/test/expand.go": [
          "File: pkg/server/test/expand.go -> pkg/server/test/expand.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     Id:            ulid.Make().String(),",
          "91:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "92:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "93:      {",
          "94:       Type: \"repo\",",
          "95:       Relations: map[string]*openfgapb.Userset{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:      {",
          "94:       Type: \"user\",",
          "95:      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "811:     Id:            ulid.Make().String(),",
          "812:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "813:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "814:      {",
          "815:       Type: \"document\",",
          "816:       Relations: map[string]*openfgapb.Userset{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:      {",
          "818:       Type: \"user\",",
          "819:      },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "824:           typesystem.DirectRelationReference(\"document\", \"editor\"),",
          "825:          },",
          "826:         },",
          "876:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "878:           {",
          "879:            Type: \"user\",",
          "880:           },",
          "",
          "[Removed Lines]",
          "827:        },",
          "828:       },",
          "829:      },",
          "830:     },",
          "831:    },",
          "832:    tuples: []*openfgapb.TupleKey{",
          "833:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
          "834:    },",
          "835:    request: &openfgapb.ExpandRequest{",
          "836:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"\"),",
          "837:    },",
          "838:    expected: &openfgapb.ExpandResponse{",
          "839:     Tree: &openfgapb.UsersetTree{",
          "840:      Root: &openfgapb.UsersetTree_Node{",
          "841:       Name: \"document:1#parent\",",
          "842:       Value: &openfgapb.UsersetTree_Node_Leaf{",
          "843:        Leaf: &openfgapb.UsersetTree_Leaf{",
          "844:         Value: &openfgapb.UsersetTree_Leaf_Users{",
          "845:          Users: &openfgapb.UsersetTree_Users{",
          "846:           Users: []string{\"document:2#editor\"},",
          "847:          },",
          "848:         },",
          "849:        },",
          "850:       },",
          "851:      },",
          "852:     },",
          "853:    },",
          "854:   },",
          "855:   {",
          "856:    name: \"1.1_TupleToUserset_involving_wildcard_is_skipped\",",
          "857:    model: &openfgapb.AuthorizationModel{",
          "858:     Id:            ulid.Make().String(),",
          "859:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "860:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "861:      {",
          "862:       Type: \"user\",",
          "863:      },",
          "864:      {",
          "865:       Type: \"document\",",
          "866:       Relations: map[string]*openfgapb.Userset{",
          "867:        \"parent\": typesystem.This(),",
          "868:        \"viewer\": typesystem.Union(",
          "869:         typesystem.This(),",
          "870:         typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "871:        ),",
          "872:       },",
          "873:       Metadata: &openfgapb.Metadata{",
          "874:        Relations: map[string]*openfgapb.RelationMetadata{",
          "875:         \"parent\": {",
          "877:           typesystem.WildcardRelationReference(\"user\"),",
          "",
          "[Added Lines]",
          "833:         \"editor\": {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "885:      },",
          "886:     },",
          "887:    },",
          "960:    tuples: []*openfgapb.TupleKey{",
          "961:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),",
          "962:    },",
          "963:    request: &openfgapb.ExpandRequest{",
          "965:    },",
          "966:    expected: &openfgapb.ExpandResponse{",
          "967:     Tree: &openfgapb.UsersetTree{",
          "968:      Root: &openfgapb.UsersetTree_Node{",
          "970:       Value: &openfgapb.UsersetTree_Node_Leaf{",
          "971:        Leaf: &openfgapb.UsersetTree_Leaf{",
          "1127:          },",
          "1128:         },",
          "1129:        },",
          "",
          "[Removed Lines]",
          "888:    tuples: []*openfgapb.TupleKey{",
          "889:     tuple.NewTupleKey(\"document:1\", \"parent\", \"user:*\"),",
          "890:     tuple.NewTupleKey(\"document:X\", \"viewer\", \"user:jon\"),",
          "891:    },",
          "892:    request: &openfgapb.ExpandRequest{",
          "893:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "894:    },",
          "895:    expected: &openfgapb.ExpandResponse{",
          "896:     Tree: &openfgapb.UsersetTree{",
          "897:      Root: &openfgapb.UsersetTree_Node{",
          "898:       Name: \"document:1#viewer\",",
          "899:       Value: &openfgapb.UsersetTree_Node_Union{",
          "900:        Union: &openfgapb.UsersetTree_Nodes{",
          "901:         Nodes: []*openfgapb.UsersetTree_Node{",
          "902:          {",
          "903:           Name: \"document:1#viewer\",",
          "904:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "905:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "906:             Value: &openfgapb.UsersetTree_Leaf_Users{},",
          "907:            },",
          "908:           },",
          "909:          },",
          "910:          {",
          "911:           Name: \"document:1#viewer\",",
          "912:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "913:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "914:             Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "915:              TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "916:               Tupleset: \"document:1#parent\",",
          "917:              },",
          "918:             },",
          "919:            },",
          "920:           },",
          "921:          },",
          "922:         },",
          "923:        },",
          "924:       },",
          "925:      },",
          "926:     },",
          "927:    },",
          "928:   },",
          "929:   {",
          "930:    name: \"1.1_Tuple_involving_userset_skipped_if_it_is_referenced_in_a_TTU_rewrite\",",
          "931:    model: &openfgapb.AuthorizationModel{",
          "932:     Id:            ulid.Make().String(),",
          "933:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "934:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "935:      {",
          "936:       Type: \"folder\",",
          "937:       Relations: map[string]*openfgapb.Userset{",
          "938:        \"viewer\": typesystem.This(),",
          "939:       },",
          "940:      },",
          "941:      {",
          "942:       Type: \"document\",",
          "943:       Relations: map[string]*openfgapb.Userset{",
          "944:        \"parent\": typesystem.This(),",
          "945:        \"editor\": typesystem.This(),",
          "946:        \"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "947:       },",
          "948:       Metadata: &openfgapb.Metadata{",
          "949:        Relations: map[string]*openfgapb.RelationMetadata{",
          "950:         \"parent\": {",
          "951:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "952:           typesystem.DirectRelationReference(\"document\", \"editor\"),",
          "953:          },",
          "954:         },",
          "955:        },",
          "956:       },",
          "957:      },",
          "958:     },",
          "959:    },",
          "964:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "969:       Name: \"document:1#viewer\",",
          "972:         Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "973:          TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "974:           Tupleset: \"document:1#parent\",",
          "975:          },",
          "976:         },",
          "977:        },",
          "978:       },",
          "979:      },",
          "980:     },",
          "981:    },",
          "982:   },",
          "983:   {",
          "984:    name: \"1.1_Tuple_involving_userset_skipped_if_same_ComputedUserset_involved_in_TTU_rewrite\",",
          "985:    model: &openfgapb.AuthorizationModel{",
          "986:     Id:            ulid.Make().String(),",
          "987:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "988:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "989:      {",
          "990:       Type: \"user\",",
          "991:      },",
          "992:      {",
          "993:       Type: \"document\",",
          "994:       Relations: map[string]*openfgapb.Userset{",
          "995:        \"parent\": typesystem.This(),",
          "996:        \"viewer\": typesystem.Union(",
          "997:         typesystem.This(),",
          "998:         typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "999:        ),",
          "1000:       },",
          "1001:       Metadata: &openfgapb.Metadata{",
          "1002:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1003:         \"viewer\": {",
          "1004:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1005:           {Type: \"user\"},",
          "1006:          },",
          "1007:         },",
          "1008:         \"parent\": {",
          "1009:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1010:           typesystem.DirectRelationReference(\"document\", \"viewer\"),",
          "1011:          },",
          "1012:         },",
          "1013:        },",
          "1014:       },",
          "1015:      },",
          "1016:     },",
          "1017:    },",
          "1018:    tuples: []*openfgapb.TupleKey{",
          "1019:     tuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),",
          "1020:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"user:jon\"),",
          "1021:    },",
          "1022:    request: &openfgapb.ExpandRequest{",
          "1023:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "1024:    },",
          "1025:    expected: &openfgapb.ExpandResponse{",
          "1026:     Tree: &openfgapb.UsersetTree{",
          "1027:      Root: &openfgapb.UsersetTree_Node{",
          "1028:       Name: \"document:1#viewer\",",
          "1029:       Value: &openfgapb.UsersetTree_Node_Union{",
          "1030:        Union: &openfgapb.UsersetTree_Nodes{",
          "1031:         Nodes: []*openfgapb.UsersetTree_Node{",
          "1032:          {",
          "1033:           Name: \"document:1#viewer\",",
          "1034:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "1035:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "1036:             Value: &openfgapb.UsersetTree_Leaf_Users{},",
          "1037:            },",
          "1038:           },",
          "1039:          },",
          "1040:          {",
          "1041:           Name: \"document:1#viewer\",",
          "1042:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "1043:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "1044:             Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "1045:              TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "1046:               Tupleset: \"document:1#parent\",",
          "1047:              },",
          "1048:             },",
          "1049:            },",
          "1050:           },",
          "1051:          },",
          "1052:         },",
          "1053:        },",
          "1054:       },",
          "1055:      },",
          "1056:     },",
          "1057:    },",
          "1058:   },",
          "1059:   {",
          "1060:    name: \"1.1_Tupleset_relation_involving_rewrite_skipped\",",
          "1061:    model: &openfgapb.AuthorizationModel{",
          "1062:     Id:            ulid.Make().String(),",
          "1063:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "1064:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "1065:      {",
          "1066:       Type: \"user\",",
          "1067:      },",
          "1068:      {",
          "1069:       Type: \"document\",",
          "1070:       Relations: map[string]*openfgapb.Userset{",
          "1071:        \"parent\": typesystem.ComputedUserset(\"editor\"),",
          "1072:        \"editor\": typesystem.This(),",
          "1073:        \"viewer\": typesystem.Union(",
          "1074:         typesystem.This(), typesystem.TupleToUserset(\"parent\", \"viewer\"),",
          "1075:        ),",
          "1076:       },",
          "1077:       Metadata: &openfgapb.Metadata{",
          "1078:        Relations: map[string]*openfgapb.RelationMetadata{",
          "1079:         \"editor\": {",
          "1080:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1081:           {Type: \"document\"},",
          "1082:          },",
          "1083:         },",
          "1084:         \"viewer\": {",
          "1085:          DirectlyRelatedUserTypes: []*openfgapb.RelationReference{",
          "1086:           {Type: \"user\"},",
          "1087:          },",
          "1088:         },",
          "1089:        },",
          "1090:       },",
          "1091:      },",
          "1092:     },",
          "1093:    },",
          "1094:    tuples: []*openfgapb.TupleKey{",
          "1095:     tuple.NewTupleKey(\"document:1\", \"editor\", \"document:2\"),",
          "1096:     tuple.NewTupleKey(\"document:2\", \"viewer\", \"user:jon\"),",
          "1097:    },",
          "1098:    request: &openfgapb.ExpandRequest{",
          "1099:     TupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),",
          "1100:    },",
          "1101:    expected: &openfgapb.ExpandResponse{",
          "1102:     Tree: &openfgapb.UsersetTree{",
          "1103:      Root: &openfgapb.UsersetTree_Node{",
          "1104:       Name: \"document:1#viewer\",",
          "1105:       Value: &openfgapb.UsersetTree_Node_Union{",
          "1106:        Union: &openfgapb.UsersetTree_Nodes{",
          "1107:         Nodes: []*openfgapb.UsersetTree_Node{",
          "1108:          {",
          "1109:           Name: \"document:1#viewer\",",
          "1110:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "1111:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "1112:             Value: &openfgapb.UsersetTree_Leaf_Users{},",
          "1113:            },",
          "1114:           },",
          "1115:          },",
          "1116:          {",
          "1117:           Name: \"document:1#viewer\",",
          "1118:           Value: &openfgapb.UsersetTree_Node_Leaf{",
          "1119:            Leaf: &openfgapb.UsersetTree_Leaf{",
          "1120:             Value: &openfgapb.UsersetTree_Leaf_TupleToUserset{",
          "1121:              TupleToUserset: &openfgapb.UsersetTree_TupleToUserset{",
          "1122:               Tupleset: \"document:1#parent\",",
          "1123:              },",
          "1124:             },",
          "1125:            },",
          "1126:           },",
          "",
          "[Added Lines]",
          "849:     TupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"\"),",
          "854:       Name: \"document:1#parent\",",
          "857:         Value: &openfgapb.UsersetTree_Leaf_Users{",
          "858:          Users: &openfgapb.UsersetTree_Users{",
          "859:           Users: []string{\"document:2#editor\"},",
          "",
          "---------------"
        ],
        "pkg/server/test/list_objects.go||pkg/server/test/list_objects.go": [
          "File: pkg/server/test/list_objects.go -> pkg/server/test/list_objects.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     Logger:                logger.NewNoopLogger(),",
          "204:     ListObjectsDeadline:   listObjectsDeadline,",
          "205:     ListObjectsMaxResults: test.maxResults,",
          "207:    }",
          "208:    typesys := typesystem.New(model)",
          "209:    ctx = typesystem.ContextWithTypesystem(ctx, typesys)",
          "",
          "[Removed Lines]",
          "206:     ResolveNodeLimit:      defaultResolveNodeLimit,",
          "",
          "[Added Lines]",
          "206:     ResolveNodeLimit:      DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:  listObjectsQuery := commands.ListObjectsQuery{",
          "314:   Datastore:        ds,",
          "315:   Logger:           logger.NewNoopLogger(),",
          "317:  }",
          "319:  var r *openfgapb.ListObjectsResponse",
          "",
          "[Removed Lines]",
          "316:   ResolveNodeLimit: defaultResolveNodeLimit,",
          "",
          "[Added Lines]",
          "316:   ResolveNodeLimit: DefaultResolveNodeLimit,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:  listObjectsQuery := commands.ListObjectsQuery{",
          "380:   Datastore:        ds,",
          "381:   Logger:           logger.NewNoopLogger(),",
          "383:  }",
          "385:  var r *openfgapb.ListObjectsResponse",
          "",
          "[Removed Lines]",
          "382:   ResolveNodeLimit: defaultResolveNodeLimit,",
          "",
          "[Added Lines]",
          "382:   ResolveNodeLimit: DefaultResolveNodeLimit,",
          "",
          "---------------"
        ],
        "pkg/server/test/server.go||pkg/server/test/server.go": [
          "File: pkg/server/test/server.go -> pkg/server/test/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: )",
          "9: const (",
          "11: )",
          "13: func RunAllTests(t *testing.T, ds storage.OpenFGADatastore) {",
          "",
          "[Removed Lines]",
          "10:  defaultResolveNodeLimit = 25",
          "",
          "[Added Lines]",
          "10:  DefaultResolveNodeLimit = 25",
          "",
          "---------------"
        ],
        "pkg/server/test/write_authzmodel.go||pkg/server/test/write_authzmodel.go": [
          "File: pkg/server/test/write_authzmodel.go -> pkg/server/test/write_authzmodel.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"fmt\"",
          "7:  \"testing\"",
          "9:  \"github.com/oklog/ulid/v2\"",
          "10:  \"github.com/openfga/openfga/pkg/logger\"",
          "11:  \"github.com/openfga/openfga/pkg/server/commands\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  parser \"github.com/craigpastro/openfga-dsl-parser/v2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     },",
          "136:    },",
          "137:   },",
          "138:  }",
          "140:  ctx := context.Background()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   {",
          "140:    name: \"self_referencing_type_restriction_with_entrypoint\",",
          "141:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "142:     StoreId: storeID,",
          "143:     TypeDefinitions: parser.MustParse(`",
          "144:     type user",
          "146:     type document",
          "147:       relations",
          "148:         define editor: [user] as self",
          "149:         define viewer: [document#viewer] as self or editor",
          "150:     `),",
          "151:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "152:    },",
          "153:   },",
          "154:   {",
          "155:    name: \"self_referencing_type_restriction_without_entrypoint_1\",",
          "156:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "157:     StoreId: storeID,",
          "158:     TypeDefinitions: parser.MustParse(`",
          "159:     type user",
          "160:     type document",
          "161:       relations",
          "162:         define viewer: [document#viewer] as self",
          "163:     `),",
          "164:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "165:    },",
          "166:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "167:     ObjectType: \"document\",",
          "168:     Relation:   \"viewer\",",
          "169:     Cause:      typesystem.ErrCycle,",
          "170:    }),",
          "171:   },",
          "172:   {",
          "173:    name: \"self_referencing_type_restriction_without_entrypoint_2\",",
          "174:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "175:     StoreId: storeID,",
          "176:     TypeDefinitions: parser.MustParse(`",
          "177:     type user",
          "178:     type document",
          "179:       relations",
          "180:         define editor: [user] as self",
          "181:         define viewer: [document#viewer] as self and editor",
          "182:     `),",
          "183:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "184:    },",
          "185:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "186:     ObjectType: \"document\",",
          "187:     Relation:   \"viewer\",",
          "188:     Cause:      typesystem.ErrNoEntrypoints,",
          "189:    }),",
          "190:   },",
          "191:   {",
          "192:    name: \"self_referencing_type_restriction_without_entrypoint_3\",",
          "193:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "194:     StoreId: storeID,",
          "195:     TypeDefinitions: parser.MustParse(`",
          "196:     type user",
          "197:     type document",
          "198:       relations",
          "199:         define restricted: [user] as self",
          "200:         define viewer: [document#viewer] as self but not restricted",
          "201:     `),",
          "202:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "203:    },",
          "204:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "205:     ObjectType: \"document\",",
          "206:     Relation:   \"viewer\",",
          "207:     Cause:      typesystem.ErrCycle,",
          "208:    }),",
          "209:   },",
          "210:   {",
          "211:    name: \"rewritten_relation_in_intersection_unresolvable\",",
          "212:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "213:     StoreId: storeID,",
          "214:     TypeDefinitions: parser.MustParse(`",
          "215:     type user",
          "217:     type document",
          "218:       relations",
          "219:         define admin: [user] as self",
          "220:         define action1 as admin and action2 and action3",
          "221:         define action2 as admin and action1 and action3",
          "222:         define action3 as admin and action1 and action2",
          "223:     `),",
          "224:     SchemaVersion: typesystem.SchemaVersion1_1,",
          "225:    },",
          "226:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "227:     ObjectType: \"document\",",
          "228:     Relation:   \"action1\",",
          "229:     Cause:      typesystem.ErrNoEntrypoints,",
          "230:    }),",
          "231:   },",
          "232:   {",
          "233:    name: \"direct_relationship_with_entrypoint\",",
          "234:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "235:     StoreId: storeID,",
          "236:     TypeDefinitions: parser.MustParse(`",
          "237:     type user",
          "239:     type document",
          "240:       relations",
          "241:         define viewer: [user] as self",
          "242:     `),",
          "243:    },",
          "244:   },",
          "245:   {",
          "246:    name: \"computed_relationship_with_entrypoint\",",
          "247:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "248:     StoreId: storeID,",
          "249:     TypeDefinitions: parser.MustParse(`",
          "250:     type user",
          "252:     type document",
          "253:       relations",
          "254:         define editor: [user] as self",
          "255:         define viewer as editor",
          "256:     `),",
          "257:    },",
          "258:   },",
          "260:   {",
          "261:    name: \"rewritten_relation_in_exclusion_unresolvable\",",
          "262:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "263:     StoreId: storeID,",
          "264:     TypeDefinitions: parser.MustParse(`",
          "265:     type user",
          "267:     type document",
          "268:       relations",
          "269:         define admin: [user] as self",
          "270:         define action1 as admin but not action2",
          "271:         define action2 as admin but not action3",
          "272:         define action3 as admin but not action1",
          "273:     `),",
          "274:    },",
          "275:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "276:     ObjectType: \"document\",",
          "277:     Relation:   \"action1\",",
          "278:     Cause:      typesystem.ErrNoEntrypoints,",
          "279:    }),",
          "280:   },",
          "281:   {",
          "282:    name: \"no_entrypoint_3a\",",
          "283:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "284:     StoreId: storeID,",
          "285:     TypeDefinitions: parser.MustParse(`",
          "286:     type user",
          "288:     type document",
          "289:       relations",
          "290:         define viewer: [document#viewer] as self and editor",
          "291:         define editor: [user] as self",
          "292:     `),",
          "293:    },",
          "294:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "295:     ObjectType: \"document\",",
          "296:     Relation:   \"viewer\",",
          "297:     Cause:      typesystem.ErrNoEntrypoints,",
          "298:    }),",
          "299:   },",
          "301:   {",
          "302:    name: \"no_entrypoint_3b\",",
          "303:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "304:     StoreId: storeID,",
          "305:     TypeDefinitions: parser.MustParse(`",
          "306:     type user",
          "308:     type document",
          "309:       relations",
          "310:         define viewer: [document#viewer] as self but not editor",
          "311:         define editor: [user] as self",
          "312:     `),",
          "313:    },",
          "314:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "315:     ObjectType: \"document\",",
          "316:     Relation:   \"viewer\",",
          "317:     Cause:      typesystem.ErrNoEntrypoints,",
          "318:    }),",
          "319:   },",
          "320:   {",
          "321:    name: \"no_entrypoint_4\",",
          "322:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "323:     StoreId: storeID,",
          "324:     TypeDefinitions: parser.MustParse(`",
          "325:     type user",
          "327:     type folder",
          "328:       relations",
          "329:         define parent: [document] as self",
          "330:         define viewer as editor from parent",
          "332:     type document",
          "333:       relations",
          "334:         define parent: [folder] as self",
          "335:         define editor as viewer",
          "336:         define viewer as editor from parent",
          "337:     `),",
          "338:    },",
          "339:    err: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{",
          "340:     ObjectType: \"document\",",
          "341:     Relation:   \"editor\",",
          "342:     Cause:      typesystem.ErrNoEntrypoints,",
          "343:    }),",
          "344:   },",
          "345:   {",
          "346:    name: \"self_referencing_type_restriction_with_entrypoint_1\",",
          "347:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "348:     StoreId: storeID,",
          "349:     TypeDefinitions: parser.MustParse(`",
          "350:     type user",
          "352:     type document",
          "353:       relations",
          "354:         define restricted: [user] as self",
          "355:         define editor: [user] as self",
          "356:         define viewer: [document#viewer] as self or editor",
          "357:         define can_view as viewer but not restricted",
          "358:         define can_view_actual as can_view",
          "359:     `),",
          "360:    },",
          "361:   },",
          "362:   {",
          "363:    name: \"self_referencing_type_restriction_with_entrypoint_2\",",
          "364:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "365:     StoreId: storeID,",
          "366:     TypeDefinitions: parser.MustParse(`",
          "367:     type user",
          "369:     type document",
          "370:       relations",
          "371:         define editor: [user] as self",
          "372:         define viewer: [document#viewer] as self or editor",
          "373:     `),",
          "374:    },",
          "375:   },",
          "376:   {",
          "377:    name: \"relation_with_union_of_ttu_rewrites\",",
          "378:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "379:     StoreId: storeID,",
          "380:     TypeDefinitions: parser.MustParse(`",
          "381:     type user",
          "382:     type org",
          "383:       relations",
          "384:         define admin: [user] as self",
          "385:         define member: [user] as self",
          "386:     type group",
          "387:       relations",
          "388:         define member: [user] as self",
          "389:     type feature",
          "390:       relations",
          "391:         define accessible as admin from subscriber_org or member from subscriber_group",
          "392:         define subscriber_group: [group] as self",
          "393:         define subscriber_org: [org] as self",
          "394:     `),",
          "395:    },",
          "396:   },",
          "397:   {",
          "398:    name: \"type_name_is_empty_string\",",
          "399:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "400:     StoreId: storeID,",
          "401:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "402:      {",
          "403:       Type: \"\",",
          "404:      },",
          "405:     },",
          "406:    },",
          "407:    err: serverErrors.InvalidAuthorizationModelInput(",
          "408:     fmt.Errorf(\"the type name of a type definition cannot be an empty string\"),",
          "409:    ),",
          "410:   },",
          "411:   {",
          "412:    name: \"relation_name_is_empty_string\",",
          "413:    request: &openfgapb.WriteAuthorizationModelRequest{",
          "414:     StoreId: storeID,",
          "415:     TypeDefinitions: []*openfgapb.TypeDefinition{",
          "416:      {",
          "417:       Type: \"user\",",
          "418:       Relations: map[string]*openfgapb.Userset{",
          "419:        \"\": typesystem.This(),",
          "420:       },",
          "421:      },",
          "422:      {",
          "423:       Type: \"other\",",
          "424:      },",
          "425:     },",
          "426:    },",
          "427:    err: serverErrors.InvalidAuthorizationModelInput(",
          "428:     fmt.Errorf(\"type 'user' defines a relation with an empty string for a name\"),",
          "429:    ),",
          "430:   },",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem.go||pkg/typesystem/typesystem.go": [
          "File: pkg/typesystem/typesystem.go -> pkg/typesystem/typesystem.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"errors\"",
          "6:  \"fmt\"",
          "7:  \"reflect\"",
          "9:  \"github.com/openfga/openfga/pkg/tuple\"",
          "10:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "11: )",
          "13: type ctxKey string",
          "15: const (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"sort\"",
          "12:  \"go.opentelemetry.io/otel\"",
          "13:  \"golang.org/x/exp/maps\"",
          "16: var tracer = otel.Tracer(\"openfga/pkg/typesystem\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  ErrInvalidUsersetRewrite = errors.New(\"invalid userset rewrite definition\")",
          "29:  ErrReservedKeywords      = errors.New(\"self and this are reserved keywords\")",
          "30:  ErrCycle                 = errors.New(\"an authorization model cannot contain a cycle\")",
          "31: )",
          "33: func IsSchemaVersionSupported(version string) bool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  ErrNoEntrypoints         = errors.New(\"no entrypoints defined\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:  relations := make(map[string]map[string]*openfgapb.Relation, len(model.GetTypeDefinitions()))",
          "152:  for _, td := range model.GetTypeDefinitions() {",
          "154:   tdRelations := make(map[string]*openfgapb.Relation, len(td.GetRelations()))",
          "156:   for relation, rewrite := range td.GetRelations() {",
          "",
          "[Removed Lines]",
          "153:   tds[td.GetType()] = td",
          "",
          "[Added Lines]",
          "159:   typeName := td.GetType()",
          "161:   tds[typeName] = td",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:    tdRelations[relation] = r",
          "168:   }",
          "170:  }",
          "172:  return &TypeSystem{",
          "",
          "[Removed Lines]",
          "169:   relations[td.GetType()] = tdRelations",
          "",
          "[Added Lines]",
          "177:   relations[typeName] = tdRelations",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "596:  return false, nil",
          "597: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612: func hasEntrypoints(",
          "613:  typedefs map[string]map[string]*openfgapb.Relation,",
          "614:  typeName, relationName string,",
          "615:  rewrite *openfgapb.Userset,",
          "616:  visitedRelations map[string]map[string]struct{},",
          "617: ) (bool, error) {",
          "619:  v := maps.Clone(visitedRelations)",
          "621:  if val, ok := v[typeName]; ok {",
          "622:   val[relationName] = struct{}{}",
          "623:  } else {",
          "624:   v[typeName] = map[string]struct{}{",
          "625:    relationName: {},",
          "626:   }",
          "627:  }",
          "629:  relation, ok := typedefs[typeName][relationName]",
          "630:  if !ok {",
          "631:   return false, fmt.Errorf(\"undefined type definition for '%s#%s'\", typeName, relationName)",
          "632:  }",
          "634:  switch rw := rewrite.Userset.(type) {",
          "635:  case *openfgapb.Userset_This:",
          "636:   for _, assignableType := range relation.GetTypeInfo().GetDirectlyRelatedUserTypes() {",
          "637:    if assignableType.GetRelationOrWildcard() == nil || assignableType.GetWildcard() != nil {",
          "638:     return true, nil",
          "639:    }",
          "641:    assignableTypeName := assignableType.GetType()",
          "642:    assignableRelationName := assignableType.GetRelation()",
          "644:    assignableRelation, ok := typedefs[assignableTypeName][assignableRelationName]",
          "645:    if !ok {",
          "646:     return false, fmt.Errorf(\"undefined type definition for '%s#%s'\", assignableTypeName, assignableRelationName)",
          "647:    }",
          "649:    if _, ok := v[assignableTypeName][assignableRelationName]; ok {",
          "650:     continue",
          "651:    }",
          "653:    hasEntrypoint, err := hasEntrypoints(typedefs, assignableTypeName, assignableRelationName, assignableRelation.GetRewrite(), v)",
          "654:    if err != nil {",
          "655:     return false, err",
          "656:    }",
          "658:    if hasEntrypoint {",
          "659:     return true, nil",
          "660:    }",
          "661:   }",
          "663:   return false, nil",
          "664:  case *openfgapb.Userset_ComputedUserset:",
          "666:   computedRelationName := rw.ComputedUserset.GetRelation()",
          "667:   computedRelation, ok := typedefs[typeName][computedRelationName]",
          "668:   if !ok {",
          "669:    return false, fmt.Errorf(\"undefined type definition for '%s#%s'\", typeName, computedRelationName)",
          "670:   }",
          "672:   if _, ok := v[typeName][computedRelationName]; ok {",
          "673:    return false, nil",
          "674:   }",
          "676:   hasEntrypoint, err := hasEntrypoints(typedefs, typeName, computedRelationName, computedRelation.GetRewrite(), v)",
          "677:   if err != nil {",
          "678:    return false, err",
          "679:   }",
          "681:   return hasEntrypoint, nil",
          "682:  case *openfgapb.Userset_TupleToUserset:",
          "683:   tuplesetRelationName := rw.TupleToUserset.GetTupleset().GetRelation()",
          "684:   computedRelationName := rw.TupleToUserset.ComputedUserset.GetRelation()",
          "686:   tuplesetRelation, ok := typedefs[typeName][tuplesetRelationName]",
          "687:   if !ok {",
          "688:    return false, fmt.Errorf(\"undefined type definition for '%s#%s'\", typeName, tuplesetRelationName)",
          "689:   }",
          "691:   for _, assignableType := range tuplesetRelation.GetTypeInfo().GetDirectlyRelatedUserTypes() {",
          "692:    assignableTypeName := assignableType.GetType()",
          "694:    if assignableRelation, ok := typedefs[assignableTypeName][computedRelationName]; ok {",
          "695:     if _, ok := v[assignableTypeName][computedRelationName]; ok {",
          "696:      continue",
          "697:     }",
          "699:     hasEntrypoint, err := hasEntrypoints(typedefs, assignableTypeName, computedRelationName, assignableRelation.GetRewrite(), v)",
          "700:     if err != nil {",
          "701:      return false, err",
          "702:     }",
          "704:     if hasEntrypoint {",
          "705:      return true, nil",
          "706:     }",
          "707:    }",
          "708:   }",
          "710:   return false, nil",
          "712:  case *openfgapb.Userset_Union:",
          "714:   for _, child := range rw.Union.Child {",
          "716:    hasEntrypoints, err := hasEntrypoints(typedefs, typeName, relationName, child, maps.Clone(visitedRelations))",
          "717:    if err != nil {",
          "718:     return false, err",
          "719:    }",
          "721:    if hasEntrypoints {",
          "722:     return true, nil",
          "723:    }",
          "724:   }",
          "726:   return false, nil",
          "727:  case *openfgapb.Userset_Intersection:",
          "729:   for _, child := range rw.Intersection.Child {",
          "732:    hasEntrypoints, err := hasEntrypoints(typedefs, typeName, relationName, child, maps.Clone(visitedRelations))",
          "733:    if err != nil {",
          "734:     return false, err",
          "735:    }",
          "737:    if !hasEntrypoints {",
          "738:     return false, nil",
          "739:    }",
          "740:   }",
          "742:   return true, nil",
          "743:  case *openfgapb.Userset_Difference:",
          "745:   v := maps.Clone(visitedRelations)",
          "747:   hasEntrypoint, err := hasEntrypoints(typedefs, typeName, relationName, rw.Difference.GetBase(), v)",
          "748:   if err != nil {",
          "749:    return false, err",
          "750:   }",
          "752:   if !hasEntrypoint {",
          "753:    return false, nil",
          "754:   }",
          "756:   hasEntrypoint, err = hasEntrypoints(typedefs, typeName, relationName, rw.Difference.GetSubtract(), v)",
          "757:   if err != nil {",
          "758:    return false, err",
          "759:   }",
          "761:   if !hasEntrypoint {",
          "762:    return false, nil",
          "763:   }",
          "765:   return true, nil",
          "766:  }",
          "768:  return false, nil",
          "769: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "614:  t := New(model)",
          "615:  schemaVersion := t.GetSchemaVersion()",
          "",
          "[Removed Lines]",
          "613: func NewAndValidate(model *openfgapb.AuthorizationModel) (*TypeSystem, error) {",
          "",
          "[Added Lines]",
          "785: func NewAndValidate(ctx context.Context, model *openfgapb.AuthorizationModel) (*TypeSystem, error) {",
          "786:  _, span := tracer.Start(ctx, \"typesystem.NewAndValidate\")",
          "787:  defer span.End()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "626:   return nil, err",
          "627:  }",
          "633:    if err != nil {",
          "634:     return nil, err",
          "635:    }",
          "",
          "[Removed Lines]",
          "630:  for _, td := range t.typeDefinitions {",
          "631:   for relation, rewrite := range td.GetRelations() {",
          "632:    err := t.isUsersetRewriteValid(td.GetType(), relation, rewrite)",
          "",
          "[Added Lines]",
          "804:  typedefsMap := t.typeDefinitions",
          "806:  typeNames := make([]string, 0, len(typedefsMap))",
          "807:  for typeName := range typedefsMap {",
          "808:   typeNames = append(typeNames, typeName)",
          "809:  }",
          "812:  sort.Strings(typeNames)",
          "814:  for _, typeName := range typeNames {",
          "815:   typedef := typedefsMap[typeName]",
          "817:   relationMap := typedef.GetRelations()",
          "818:   relationNames := make([]string, 0, len(relationMap))",
          "819:   for relationName := range relationMap {",
          "820:    relationNames = append(relationNames, relationName)",
          "821:   }",
          "824:   sort.Strings(relationNames)",
          "826:   for _, relationName := range relationNames {",
          "828:    err := t.validateRelation(typeName, relationName, relationMap)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "644:   return nil, err",
          "645:  }",
          "650:   }",
          "651:  }",
          "654: }",
          "656: func containsDuplicateType(model *openfgapb.AuthorizationModel) bool {",
          "",
          "[Removed Lines]",
          "647:  if schemaVersion == SchemaVersion1_1 {",
          "648:   if err := t.validateRelationTypeRestrictions(); err != nil {",
          "649:    return nil, err",
          "653:  return t, nil",
          "",
          "[Added Lines]",
          "843:  return t, nil",
          "844: }",
          "849: func (t *TypeSystem) validateRelation(typeName, relationName string, relationMap map[string]*openfgapb.Userset) error {",
          "851:  rewrite := relationMap[relationName]",
          "853:  err := t.isUsersetRewriteValid(typeName, relationName, rewrite)",
          "854:  if err != nil {",
          "855:   return err",
          "856:  }",
          "858:  err = t.validateTypeRestrictions(typeName, relationName)",
          "859:  if err != nil {",
          "860:   return err",
          "861:  }",
          "863:  visitedRelations := map[string]map[string]struct{}{}",
          "865:  hasEntrypoints, err := hasEntrypoints(t.relations, typeName, relationName, rewrite, visitedRelations)",
          "866:  if err != nil {",
          "867:   return err",
          "868:  }",
          "870:  if !hasEntrypoints {",
          "871:   return &InvalidRelationError{",
          "872:    ObjectType: typeName,",
          "873:    Relation:   relationName,",
          "874:    Cause:      fmt.Errorf(\"no entrypoints found for relation '%s#%s': %w\", typeName, relationName, ErrNoEntrypoints),",
          "878:  return nil",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "670: func (t *TypeSystem) validateNames() error {",
          "671:  for _, td := range t.typeDefinitions {",
          "672:   objectType := td.GetType()",
          "673:   if objectType == \"self\" || objectType == \"this\" {",
          "674:    return &InvalidTypeError{ObjectType: objectType, Cause: ErrReservedKeywords}",
          "675:   }",
          "677:   for relation := range td.GetRelations() {",
          "678:    if relation == \"self\" || relation == \"this\" {",
          "679:     return &InvalidRelationError{ObjectType: objectType, Relation: relation, Cause: ErrReservedKeywords}",
          "680:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "899:   if objectType == \"\" {",
          "900:    return fmt.Errorf(\"the type name of a type definition cannot be an empty string\")",
          "901:   }",
          "908:    if relation == \"\" {",
          "909:     return fmt.Errorf(\"type '%s' defines a relation with an empty string for a name\", objectType)",
          "910:    }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "762:  return nil",
          "763: }",
          "811:     }",
          "813:    }",
          "814:   }",
          "815:  }",
          "",
          "[Removed Lines]",
          "765: func (t *TypeSystem) validateRelationTypeRestrictions() error {",
          "766:  for objectType := range t.typeDefinitions {",
          "767:   relations, err := t.GetRelations(objectType)",
          "768:   if err != nil {",
          "769:    return err",
          "770:   }",
          "772:   for name, relation := range relations {",
          "773:    relatedTypes := relation.GetTypeInfo().GetDirectlyRelatedUserTypes()",
          "774:    assignable := t.IsDirectlyAssignable(relation)",
          "776:    if assignable && len(relatedTypes) == 0 {",
          "777:     return AssignableRelationError(objectType, name)",
          "778:    }",
          "780:    if assignable && len(relatedTypes) == 1 {",
          "781:     relatedObjectType := relatedTypes[0].GetType()",
          "782:     relatedRelation := relatedTypes[0].GetRelation()",
          "783:     if objectType == relatedObjectType && name == relatedRelation {",
          "784:      return &InvalidRelationError{ObjectType: objectType, Relation: name, Cause: ErrCycle}",
          "785:     }",
          "786:    }",
          "788:    if !assignable && len(relatedTypes) != 0 {",
          "789:     return NonAssignableRelationError(objectType, name)",
          "790:    }",
          "792:    for _, related := range relatedTypes {",
          "793:     relatedObjectType := related.GetType()",
          "794:     relatedRelation := related.GetRelation()",
          "796:     if _, err := t.GetRelations(relatedObjectType); err != nil {",
          "797:      return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "798:     }",
          "800:     if related.GetRelationOrWildcard() != nil {",
          "802:      if ok, _ := t.IsTuplesetRelation(objectType, name); ok {",
          "803:       return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "804:      }",
          "806:      if relatedRelation != \"\" {",
          "807:       if _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {",
          "808:        return InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)",
          "809:       }",
          "810:      }",
          "",
          "[Added Lines]",
          "1005: func (t *TypeSystem) validateTypeRestrictions(objectType string, relationName string) error {",
          "1007:  relation, err := t.GetRelation(objectType, relationName)",
          "1008:  if err != nil {",
          "1009:   return err",
          "1010:  }",
          "1012:  relatedTypes := relation.GetTypeInfo().GetDirectlyRelatedUserTypes()",
          "1013:  assignable := t.IsDirectlyAssignable(relation)",
          "1015:  if assignable && len(relatedTypes) == 0 {",
          "1016:   return AssignableRelationError(objectType, relationName)",
          "1017:  }",
          "1019:  if !assignable && len(relatedTypes) != 0 {",
          "1020:   return NonAssignableRelationError(objectType, relationName)",
          "1021:  }",
          "1023:  for _, related := range relatedTypes {",
          "1024:   relatedObjectType := related.GetType()",
          "1025:   relatedRelation := related.GetRelation()",
          "1027:   if _, err := t.GetRelations(relatedObjectType); err != nil {",
          "1028:    return InvalidRelationTypeError(objectType, relationName, relatedObjectType, relatedRelation)",
          "1029:   }",
          "1031:   if related.GetRelationOrWildcard() != nil {",
          "1033:    if ok, _ := t.IsTuplesetRelation(objectType, relationName); ok {",
          "1034:     return InvalidRelationTypeError(objectType, relationName, relatedObjectType, relatedRelation)",
          "1035:    }",
          "1037:    if relatedRelation != \"\" {",
          "1038:     if _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {",
          "1039:      return InvalidRelationTypeError(objectType, relationName, relatedObjectType, relatedRelation)",
          "",
          "---------------"
        ],
        "pkg/typesystem/typesystem_test.go||pkg/typesystem/typesystem_test.go": [
          "File: pkg/typesystem/typesystem_test.go -> pkg/typesystem/typesystem_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package typesystem",
          "3: import (",
          "4:  \"testing\"",
          "6:  parser \"github.com/craigpastro/openfga-dsl-parser/v2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:  openfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"",
          "9: )",
          "11: func TestSuccessfulRewriteValidations(t *testing.T) {",
          "12:  var tests = []struct {",
          "13:   name  string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: func TestNewAndValidate(t *testing.T) {",
          "14:  tests := []struct {",
          "15:   name          string",
          "16:   model         string",
          "17:   expectedError error",
          "18:  }{",
          "19:   {",
          "20:    name: \"direct_relationship_with_entrypoint\",",
          "21:    model: `",
          "22:    type user",
          "24:    type document",
          "25:      relations",
          "26:        define viewer: [user] as self",
          "27:    `,",
          "28:   },",
          "29:   {",
          "30:    name: \"computed_relationship_with_entrypoint\",",
          "31:    model: `",
          "32:    type user",
          "34:    type document",
          "35:      relations",
          "36:        define editor: [user] as self",
          "37:        define viewer as editor",
          "38:    `,",
          "39:   },",
          "40:   {",
          "41:    name: \"no_entrypoint_1\",",
          "42:    model: `",
          "43:    type user",
          "45:    type document",
          "46:      relations",
          "47:        define admin: [user] as self",
          "48:        define action1 as admin and action2 and action3",
          "49:        define action2 as admin and action1 and action3",
          "50:        define action3 as admin and action1 and action2",
          "51:    `,",
          "52:    expectedError: ErrNoEntrypoints,",
          "53:   },",
          "54:   {",
          "55:    name: \"no_entrypoint_2\",",
          "56:    model: `",
          "57:    type user",
          "59:    type document",
          "60:      relations",
          "61:     define admin: [user] as self",
          "62:     define action1 as admin but not action2",
          "63:     define action2 as admin but not action3",
          "64:     define action3 as admin but not action1",
          "65:    `,",
          "66:    expectedError: ErrNoEntrypoints,",
          "67:   },",
          "68:   {",
          "69:    name: \"no_entrypoint_3a\",",
          "70:    model: `",
          "71:    type user",
          "73:    type document",
          "74:      relations",
          "75:        define viewer: [document#viewer] as self and editor",
          "76:        define editor: [user] as self",
          "77:    `,",
          "78:    expectedError: ErrNoEntrypoints,",
          "79:   },",
          "80:   {",
          "81:    name: \"no_entrypoint_3b\",",
          "82:    model: `",
          "83:    type user",
          "85:    type document",
          "86:      relations",
          "87:        define viewer: [document#viewer] as self but not editor",
          "88:        define editor: [user] as self",
          "89:    `,",
          "90:    expectedError: ErrNoEntrypoints,",
          "91:   },",
          "92:   {",
          "93:    name: \"no_entrypoint_4\",",
          "94:    model: `",
          "95:    type user",
          "97:    type folder",
          "98:      relations",
          "99:        define parent: [document] as self",
          "100:        define viewer as editor from parent",
          "102:    type document",
          "103:      relations",
          "104:        define parent: [folder] as self",
          "105:     define editor as viewer",
          "106:        define viewer as editor from parent",
          "107:    `,",
          "108:    expectedError: ErrNoEntrypoints,",
          "109:   },",
          "110:   {",
          "111:    name: \"self_referencing_type_restriction_with_entrypoint_1\",",
          "112:    model: `",
          "113:    type user",
          "115:    type document",
          "116:      relations",
          "117:        define restricted: [user] as self",
          "118:        define editor: [user] as self",
          "119:        define viewer: [document#viewer] as self or editor",
          "120:        define can_view as viewer but not restricted",
          "121:        define can_view_actual as can_view",
          "122:    `,",
          "123:   },",
          "124:   {",
          "125:    name: \"self_referencing_type_restriction_with_entrypoint_2\",",
          "126:    model: `",
          "127:    type user",
          "129:    type document",
          "130:      relations",
          "131:        define editor: [user] as self",
          "132:        define viewer: [document#viewer] as self or editor",
          "133:    `,",
          "134:   },",
          "135:  }",
          "137:  for _, test := range tests {",
          "138:   t.Run(test.name, func(t *testing.T) {",
          "139:    _, err := NewAndValidate(context.Background(), &openfgapb.AuthorizationModel{",
          "140:     SchemaVersion:   SchemaVersion1_1,",
          "141:     TypeDefinitions: parser.MustParse(test.model),",
          "142:    })",
          "143:    require.ErrorIs(t, err, test.expectedError)",
          "144:   })",
          "145:  }",
          "146: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:     },",
          "37:    },",
          "38:   },",
          "39:  }",
          "41:  for _, test := range tests {",
          "42:   t.Run(test.name, func(t *testing.T) {",
          "44:    require.NoError(t, err)",
          "45:   })",
          "46:  }",
          "",
          "[Removed Lines]",
          "43:    _, err := NewAndValidate(test.model)",
          "",
          "[Added Lines]",
          "176:   {",
          "177:    name: \"self_referencing_type_restriction_with_entrypoint\",",
          "178:    model: &openfgapb.AuthorizationModel{",
          "179:     TypeDefinitions: parser.MustParse(`",
          "180:     type user",
          "182:     type document",
          "183:       relations",
          "184:         define editor: [user] as self",
          "185:         define viewer: [document#viewer] as self or editor",
          "186:     `),",
          "187:     SchemaVersion: SchemaVersion1_1,",
          "188:    },",
          "189:   },",
          "190:   {",
          "191:    name: \"intersection_may_contain_repeated_relations\",",
          "192:    model: &openfgapb.AuthorizationModel{",
          "193:     TypeDefinitions: parser.MustParse(`",
          "194:     type user",
          "195:     type document",
          "196:       relations",
          "197:      define editor: [user] as self",
          "198:      define viewer as editor and editor",
          "199:     `),",
          "200:     SchemaVersion: SchemaVersion1_1,",
          "201:    },",
          "202:   },",
          "203:   {",
          "204:    name: \"exclusion_may_contain_repeated_relations\",",
          "205:    model: &openfgapb.AuthorizationModel{",
          "206:     TypeDefinitions: parser.MustParse(`",
          "207:     type user",
          "208:     type document",
          "209:       relations",
          "210:      define editor: [user] as self",
          "211:      define viewer as editor but not editor",
          "212:     `),",
          "213:     SchemaVersion: SchemaVersion1_1,",
          "214:    },",
          "215:   },",
          "220:    _, err := NewAndValidate(context.Background(), test.model)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "471:      define viewer as viewer from parent",
          "472:     `),",
          "473:    },",
          "475:   },",
          "476:  }",
          "478:  for _, test := range tests {",
          "479:   t.Run(test.name, func(t *testing.T) {",
          "481:    require.ErrorIs(t, err, test.err)",
          "482:   })",
          "483:  }",
          "",
          "[Removed Lines]",
          "474:    err: ErrCycle,",
          "480:    _, err := NewAndValidate(test.model)",
          "",
          "[Added Lines]",
          "651:    err: ErrNoEntrypoints,",
          "657:    _, err := NewAndValidate(context.Background(), test.model)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "579:  for _, test := range tests {",
          "580:   t.Run(test.name, func(t *testing.T) {",
          "582:    require.NoError(t, err)",
          "583:   })",
          "584:  }",
          "",
          "[Removed Lines]",
          "581:    _, err := NewAndValidate(test.model)",
          "",
          "[Added Lines]",
          "758:    _, err := NewAndValidate(context.Background(), test.model)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1053:  for _, test := range tests {",
          "1054:   t.Run(test.name, func(t *testing.T) {",
          "1056:    require.EqualError(t, err, test.err.Error())",
          "1057:   })",
          "1058:  }",
          "",
          "[Removed Lines]",
          "1055:    _, err := NewAndValidate(test.model)",
          "",
          "[Added Lines]",
          "1232:    _, err := NewAndValidate(context.Background(), test.model)",
          "",
          "---------------"
        ]
      }
    }
  ]
}