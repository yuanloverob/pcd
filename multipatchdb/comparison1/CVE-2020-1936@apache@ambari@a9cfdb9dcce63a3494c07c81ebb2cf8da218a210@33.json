{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d486d9b15e281896bfca954d13d3ba4c3e9e9d7",
      "candidate_info": {
        "commit_hash": "8d486d9b15e281896bfca954d13d3ba4c3e9e9d7",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8d486d9b15e281896bfca954d13d3ba4c3e9e9d7",
        "files": [
          "ambari-metrics/ambari-metrics-timelineservice/conf/unix/metrics_whitelist",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java"
        ],
        "message": "AMBARI-25383 Ambari Metrics whitelisting is failing on * wildcard for Kafka Topics (santal) (#3095)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricsFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     if (configuration.isWhitelistingEnabled()) {",
          "77:       String whitelistFile = metricsConf.get(TimelineMetricConfiguration.TIMELINE_METRICS_WHITELIST_FILE, TimelineMetricConfiguration.TIMELINE_METRICS_WHITELIST_FILE_LOCATION_DEFAULT);",
          "78:       readMetricWhitelistFromFile(whitelistedMetrics, whitelistedMetricPatterns, whitelistFile);",
          "80:       LOG.debug(\"Whitelisted metrics : \" + Arrays.toString(whitelistedMetrics.toArray()));",
          "81:     }",
          "",
          "[Removed Lines]",
          "79:       LOG.info(\"Whitelisting \" + whitelistedMetrics.size() + \" metrics\");",
          "",
          "[Added Lines]",
          "79:       LOG.info(\"Whitelisting \" + whitelistedMetrics.size() + \" metrics and \" + whitelistedMetricPatterns.size() + \" metric patterns\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77af783f5634d8ff7e2770fa9fecbae3664bb0d5",
      "candidate_info": {
        "commit_hash": "77af783f5634d8ff7e2770fa9fecbae3664bb0d5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/77af783f5634d8ff7e2770fa9fecbae3664bb0d5",
        "files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js"
        ],
        "message": "[AMBARI-25361] Unable to import Workflow into Workflow Manager Due to Script Error",
        "before_after_code_files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js||contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js||contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js -> contrib/views/wfmanager/src/main/resources/ui/app/domain/workflow-importer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     var nodeMap=this.setupNodeMap(workflowAppJson,workflow,Ember.$(xmlDoc));",
          "64:     this.setupTransitions(workflowAppJson,nodeMap);",
          "65:     workflow.set(\"startNode\",nodeMap.get(\"start\").node);",
          "67:     if(workflowJson[\"workflow-app\"].global) {",
          "68:       if(Ember.isArray(globalProperties)) {",
          "69:         workflow.set(\"globalSetting\", workflowJson[\"workflow-app\"].global);",
          "70:       } else  {",
          "",
          "[Removed Lines]",
          "66:     let globalProperties = workflowJson[\"workflow-app\"].global.configuration.property;",
          "",
          "[Added Lines]",
          "67:     let globalProperties = workflowJson[\"workflow-app\"].global.configuration.property;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e9fe7fe0550caf7d9ab3e3fd0de139376ffc1a8",
      "candidate_info": {
        "commit_hash": "5e9fe7fe0550caf7d9ab3e3fd0de139376ffc1a8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/5e9fe7fe0550caf7d9ab3e3fd0de139376ffc1a8",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/AmbariConfig.py",
          "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py"
        ],
        "message": "AMBARI-25455. Ambari-agent does not restart the agent when memory leak happens (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/AmbariConfig.py||ambari-agent/src/main/python/ambari_agent/AmbariConfig.py",
          "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py||ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/AmbariConfig.py||ambari-agent/src/main/python/ambari_agent/AmbariConfig.py": [
          "File: ambari-agent/src/main/python/ambari_agent/AmbariConfig.py -> ambari-agent/src/main/python/ambari_agent/AmbariConfig.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:   def host_status_report_interval(self):",
          "191:     return int(self.get('heartbeat', 'state_interval_seconds', '60'))",
          "193:   @property",
          "194:   def log_max_symbols_size(self):",
          "195:     return int(self.get('heartbeat', 'log_max_symbols_size', '900000'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   @property",
          "194:   def max_ram_soft(self):",
          "195:     return int(self.get('agent', 'memory_threshold_soft_mb', default='0'))",
          "197:   @property",
          "198:   def max_ram_hard(self):",
          "199:     return int(self.get('agent', 'memory_threshold_hard_mb', default='0'))",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py||ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py": [
          "File: ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py -> ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: from ambari_agent.listeners.AlertDefinitionsEventListener import AlertDefinitionsEventListener",
          "39: from ambari_agent import security",
          "40: from ambari_stomp.adapter.websocket import ConnectionIsAlreadyClosed",
          "42: HEARTBEAT_INTERVAL = 10",
          "43: REQUEST_RESPONSE_TIMEOUT = 10",
          "45: logger = logging.getLogger(__name__)",
          "47: class HeartbeatThread(threading.Thread):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: from ambari_commons.os_utils import get_used_ram",
          "46: AGENT_AUTO_RESTART_EXIT_CODE = 77",
          "47: AGENT_RAM_OVERUSE_MESSAGE = \"Ambari-agent RAM usage {used_ram} MB went above {config_name}={max_ram} MB. Restarting ambari-agent to clean the RAM.\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         if not self.initializer_module.is_registered:",
          "95:           self.register()",
          "97:         heartbeat_body = self.get_heartbeat_body()",
          "98:         logger.debug(\"Heartbeat body is {0}\".format(heartbeat_body))",
          "99:         response = self.blocking_request(heartbeat_body, Constants.HEARTBEAT_ENDPOINT)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         self.check_for_memory_leak()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "276:       return self.server_responses_listener.responses.blocking_pop(correlation_id, timeout=timeout)",
          "277:     except BlockingDictionary.DictionaryPopTimeout:",
          "278:       raise Exception(\"{0} seconds timeout expired waiting for response from server at {1} to message from {2}\".format(timeout, Constants.SERVER_RESPONSES_TOPIC, destination))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   def check_for_memory_leak(self):",
          "287:     used_ram = get_used_ram()/1000",
          "288:     # dealing with a possible memory leaks",
          "289:     if self.config.max_ram_soft and used_ram >= self.config.max_ram_soft and not self.initializer_module.action_queue.tasks_in_progress_or_pending():",
          "290:       logger.error(AGENT_RAM_OVERUSE_MESSAGE.format(used_ram=used_ram, config_name=\"memory_threshold_soft_mb\", max_ram=self.config.max_ram_soft))",
          "291:       Utils.restartAgent(self.stop_event)",
          "292:     if self.config.max_ram_hard and used_ram >= self.config.max_ram_hard:",
          "293:       logger.error(AGENT_RAM_OVERUSE_MESSAGE.format(used_ram=used_ram, config_name=\"memory_threshold_hard_mb\", max_ram=self.config.max_ram_hard))",
          "294:       Utils.restartAgent(self.stop_event)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2ad409d8cff0f32bc6617138c2561ba79c41e86",
      "candidate_info": {
        "commit_hash": "b2ad409d8cff0f32bc6617138c2561ba79c41e86",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b2ad409d8cff0f32bc6617138c2561ba79c41e86",
        "files": [
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-env.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-hbase-env.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py"
        ],
        "message": "AMBARI-24576. Ambari Metrics should handle a customized Zookeeper service principal name (amagyar) (#2220)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: dfs_type = default(\"/clusterLevelParams/dfs_type\", \"\")",
          "66: hbase_regionserver_shutdown_timeout = expect('/configurations/ams-hbase-env/hbase_regionserver_shutdown_timeout', int,",
          "67:                                              30)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: zk_principal_name = default(\"/configurations/zookeeper-env/zookeeper_principal_name\", \"zookeeper/_HOST@EXAMPLE.COM\")",
          "67: zk_principal_user = zk_principal_name.split('/')[0]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f830c9382eb6e69d9e4182f60b649c2c8ef2d47",
      "candidate_info": {
        "commit_hash": "6f830c9382eb6e69d9e4182f60b649c2c8ef2d47",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6f830c9382eb6e69d9e4182f60b649c2c8ef2d47",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ClusterCache.py",
          "ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py",
          "ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py",
          "ambari-agent/src/main/python/ambari_agent/InitializerModule.py",
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py",
          "ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py"
        ],
        "message": "AMBARI-25464. Components autostart does not work sometimes and ambari-agent restart\n\n* AMBARI-25464. Components autostart does not work sometimes and ambari-agent restart (aonishuk)\n\n* AMBARI-25464. Components autostart does not work sometimes and ambari-agent restart (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ClusterCache.py||ambari-agent/src/main/python/ambari_agent/ClusterCache.py",
          "ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py||ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py",
          "ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py||ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py",
          "ambari-agent/src/main/python/ambari_agent/InitializerModule.py||ambari-agent/src/main/python/ambari_agent/InitializerModule.py",
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py||ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py",
          "ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py||ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ClusterCache.py||ambari-agent/src/main/python/ambari_agent/ClusterCache.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ClusterCache.py -> ambari-agent/src/main/python/ambari_agent/ClusterCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:       # Example: hostname change and restart causes old topology loading to fail with exception",
          "76:       logger.exception(\"Loading saved cache for {0} failed\".format(self.__class__.__name__))",
          "77:       self.rewrite_cache({}, None)",
          "79:   def get_cluster_indepedent_data(self):",
          "80:     return self[ClusterCache.COMMON_DATA_CLUSTER]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:       os.remove(self.__current_cache_hash_file)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         del self[cache_id_to_delete]",
          "101:     self.on_cache_update()",
          "104:     # if all of above are sucessful finally set the hash",
          "105:     self.hash = cache_hash",
          "",
          "[Removed Lines]",
          "102:     self.persist_cache()",
          "",
          "[Added Lines]",
          "103:     self.persist_cache(cache_hash)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:     with self._cache_lock:",
          "132:       self[cluster_id] = immutable_cache",
          "135:     # ensure that our cache directory exists",
          "136:     if not os.path.exists(self.cluster_cache_dir):",
          "137:       os.makedirs(self.cluster_cache_dir)",
          "",
          "[Removed Lines]",
          "134:   def persist_cache(self):",
          "",
          "[Added Lines]",
          "135:   def persist_cache(self, cache_hash):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:       with open(self.__current_cache_json_file, 'w') as f:",
          "141:         json.dump(self, f, indent=2)",
          "144:         with open(self.__current_cache_hash_file, 'w') as fp:",
          "147:   def _get_mutable_copy(self):",
          "148:     with self._cache_lock:",
          "",
          "[Removed Lines]",
          "143:       if self.hash is not None:",
          "145:           fp.write(self.hash)",
          "",
          "[Added Lines]",
          "144:       if cache_hash is not None:",
          "146:           fp.write(cache_hash)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py||ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py -> ambari-agent/src/main/python/ambari_agent/ClusterConfigurationCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   configuration properties.",
          "31:   \"\"\"",
          "34:     \"\"\"",
          "35:     Initializes the configuration cache.",
          "36:     :param cluster_cache_dir: directory the changed json are saved",
          "37:     :return:",
          "38:     \"\"\"",
          "39:     super(ClusterConfigurationCache, self).__init__(cluster_cache_dir)",
          "41:   def get_cache_name(self):",
          "42:     return 'configurations'",
          "",
          "[Removed Lines]",
          "33:   def __init__(self, cluster_cache_dir):",
          "",
          "[Added Lines]",
          "33:   def __init__(self, cluster_cache_dir, initializer_module):",
          "39:     self.initializer_module = initializer_module",
          "42:   def on_cache_update(self):",
          "43:     for cluster_id, configurations in self.iteritems():",
          "44:       # FIXME: Recovery manager does not support multiple cluster as of now.",
          "45:       self.initializer_module.recovery_manager.cluster_id = cluster_id",
          "46:       self.initializer_module.recovery_manager.on_config_update(configurations)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py||ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py -> ambari-agent/src/main/python/ambari_agent/ClusterHostLevelParamsCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   differently for every host.",
          "34:   \"\"\"",
          "37:     \"\"\"",
          "38:     Initializes the host level params cache.",
          "39:     :param cluster_cache_dir:",
          "40:     :return:",
          "41:     \"\"\"",
          "42:     super(ClusterHostLevelParamsCache, self).__init__(cluster_cache_dir)",
          "44:   def get_cache_name(self):",
          "45:     return 'host_level_params'",
          "",
          "[Removed Lines]",
          "36:   def __init__(self, cluster_cache_dir):",
          "",
          "[Added Lines]",
          "36:   def __init__(self, cluster_cache_dir, initializer_module):",
          "42:     self.initializer_module = initializer_module",
          "45:   def on_cache_update(self):",
          "46:     for cluster_id, host_level_params in self.iteritems():",
          "47:       # FIXME: Recovery manager does not support multiple cluster as of now.",
          "48:       if 'recoveryConfig' in host_level_params:",
          "49:         logger.info(\"Updating recoveryConfig from hostLevelParams\")",
          "51:         self.initializer_module.recovery_manager.cluster_id = cluster_id",
          "52:         self.initializer_module.recovery_manager.update_recovery_config(host_level_params)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/InitializerModule.py||ambari-agent/src/main/python/ambari_agent/InitializerModule.py": [
          "File: ambari-agent/src/main/python/ambari_agent/InitializerModule.py -> ambari-agent/src/main/python/ambari_agent/InitializerModule.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     self.action_queue = None",
          "77:     self.alert_scheduler_handler = None",
          "81:   def init(self):",
          "82:     \"\"\"",
          "83:     Initialize properties",
          "84:     \"\"\"",
          "85:     self.is_registered = False",
          "87:     self.metadata_cache = ClusterMetadataCache(self.config.cluster_cache_dir)",
          "88:     self.topology_cache = ClusterTopologyCache(self.config.cluster_cache_dir, self.config)",
          "91:     self.alert_definitions_cache = ClusterAlertDefinitionsCache(self.config.cluster_cache_dir)",
          "92:     self.configuration_builder = ConfigurationBuilder(self)",
          "93:     self.stale_alerts_monitor = StaleAlertsMonitor(self)",
          "94:     self.server_responses_listener = ServerResponsesListener(self)",
          "95:     self.file_cache = FileCache(self.config)",
          "97:     self.hooks_orchestrator = HooksOrchestrator(self)",
          "99:     self.commandStatuses = CommandStatusDict(self)",
          "101:     self.init_threads()",
          "",
          "[Removed Lines]",
          "79:     self.init()",
          "89:     self.host_level_params_cache = ClusterHostLevelParamsCache(self.config.cluster_cache_dir)",
          "90:     self.configurations_cache = ClusterConfigurationCache(self.config.cluster_cache_dir)",
          "96:     self.customServiceOrchestrator = CustomServiceOrchestrator(self)",
          "98:     self.recovery_manager = RecoveryManager(self)",
          "",
          "[Added Lines]",
          "85:     self.recovery_manager = RecoveryManager(self)",
          "88:     self.host_level_params_cache = ClusterHostLevelParamsCache(self.config.cluster_cache_dir, self)",
          "89:     self.configurations_cache = ClusterConfigurationCache(self.config.cluster_cache_dir, self)",
          "96:     self.customServiceOrchestrator = CustomServiceOrchestrator(self)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py": [
          "File: ambari-agent/src/main/python/ambari_agent/RecoveryManager.py -> ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     self.active_command_count = 0",
          "99:     self.cluster_id = None",
          "100:     self.initializer_module = initializer_module",
          "103:     self.actions = {}",
          "104:     self.update_config(6, 60, 5, 12, recovery_enabled, auto_start_only, auto_install_start)",
          "",
          "[Removed Lines]",
          "101:     self.host_level_params_cache = initializer_module.host_level_params_cache",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   def is_blueprint_provisioning_for_component(self, component_name):",
          "115:     try:",
          "117:     except KeyError:",
          "118:       blueprint_state = 'NONE'",
          "",
          "[Removed Lines]",
          "116:       blueprint_state = self.host_level_params_cache[self.cluster_id]['blueprint_provisioning_state'][component_name]",
          "",
          "[Added Lines]",
          "115:       blueprint_state = self.initializer_module.host_level_params_cache[self.cluster_id]['blueprint_provisioning_state'][component_name]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:         self.enabled_components = enabled_components_list",
          "485:     recovery_enabled = False",
          "486:     auto_start_only = False",
          "487:     auto_install_start = False",
          "",
          "[Removed Lines]",
          "484:   def on_config_update(self):",
          "",
          "[Added Lines]",
          "483:   def on_config_update(self, cluster_cache):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "490:     retry_gap = 5",
          "491:     max_lifetime_count = 12",
          "495:     if 'configurations' in cluster_cache and 'cluster-env' in cluster_cache['configurations']:",
          "496:       config = cluster_cache['configurations']['cluster-env']",
          "497:       if \"recovery_type\" in config:",
          "",
          "[Removed Lines]",
          "493:     cluster_cache = self.initializer_module.configurations_cache[self.cluster_id]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py||ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py": [
          "File: ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py -> ambari-agent/src/main/python/ambari_agent/listeners/ConfigurationEventListener.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     self.configurations_cache.rewrite_cache(message['clusters'], message['hash'])",
          "58:   def get_handled_path(self):",
          "59:     return Constants.CONFIGURATIONS_TOPIC",
          "",
          "[Removed Lines]",
          "53:     if message['clusters']:",
          "54:       # FIXME: Recovery manager does not support multiple cluster as of now.",
          "55:       self.recovery_manager.cluster_id = message['clusters'].keys()[0]",
          "56:       self.recovery_manager.on_config_update()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py||ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py": [
          "File: ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py -> ambari-agent/src/main/python/ambari_agent/listeners/HostLevelParamsEventListener.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     self.host_level_params_cache.rewrite_cache(message['clusters'], message['hash'])",
          "60:   def get_handled_path(self):",
          "61:     return Constants.HOST_LEVEL_PARAMS_TOPIC",
          "",
          "[Removed Lines]",
          "51:     if message['clusters']:",
          "52:       # FIXME: Recovery manager does not support multiple cluster as of now.",
          "53:       cluster_id = message['clusters'].keys()[0]",
          "55:       if 'recoveryConfig' in message['clusters'][cluster_id]:",
          "56:         logging.info(\"Updating recoveryConfig from hostLevelParams\")",
          "57:         self.recovery_manager.cluster_id = cluster_id",
          "58:         self.recovery_manager.update_recovery_config(self.host_level_params_cache[cluster_id])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}