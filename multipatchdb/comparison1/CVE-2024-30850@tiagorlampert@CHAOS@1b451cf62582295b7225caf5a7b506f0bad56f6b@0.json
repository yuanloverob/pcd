{
  "cve_id": "CVE-2024-30850",
  "cve_desc": "An issue in tiagorlampert CHAOS v5.0.1 allows a remote attacker to execute arbitrary code via the BuildClient function within client_service.go",
  "repo": "tiagorlampert/CHAOS",
  "patch_hash": "1b451cf62582295b7225caf5a7b506f0bad56f6b",
  "patch_info": {
    "commit_hash": "1b451cf62582295b7225caf5a7b506f0bad56f6b",
    "repo": "tiagorlampert/CHAOS",
    "commit_url": "https://github.com/tiagorlampert/CHAOS/commit/1b451cf62582295b7225caf5a7b506f0bad56f6b",
    "files": [
      "cmd/chaos/main.go",
      "delivery/http/handler.go",
      "internal/middleware/jwt.go",
      "internal/utilities/base64.go",
      "internal/utilities/byte.go",
      "internal/utilities/checkbox.go",
      "internal/utilities/constants/constants.go",
      "internal/utilities/image/png.go",
      "internal/utilities/jwt/jwt.go",
      "internal/utilities/network/address.go",
      "internal/utilities/network/http.go",
      "internal/utilities/password.go",
      "internal/utilities/string.go",
      "internal/utilities/system/directory.go",
      "internal/utilities/system/os.go",
      "internal/utilities/template/template.go",
      "internal/utilities/ui/logo.go",
      "internal/utils/base64.go",
      "internal/utils/byte.go",
      "internal/utils/checkbox.go",
      "internal/utils/constants/constants.go",
      "internal/utils/image/png.go",
      "internal/utils/jwt/jwt.go",
      "internal/utils/network/address.go",
      "internal/utils/network/http.go",
      "internal/utils/password.go",
      "internal/utils/string.go",
      "internal/utils/system/directory.go",
      "internal/utils/system/os.go",
      "internal/utils/template/template.go",
      "internal/utils/ui/logo.go",
      "internal/utils/validation.go",
      "services/auth_service.go",
      "services/client.go",
      "services/client_service.go",
      "services/device_service.go",
      "services/user_service.go",
      "web/static/js/app/generate.js"
    ],
    "message": "validate input values",
    "before_after_code_files": [
      "cmd/chaos/main.go||cmd/chaos/main.go",
      "delivery/http/handler.go||delivery/http/handler.go",
      "internal/middleware/jwt.go||internal/middleware/jwt.go",
      "internal/utilities/string.go||internal/utilities/string.go",
      "internal/utilities/base64.go||internal/utils/base64.go",
      "internal/utilities/byte.go||internal/utils/byte.go",
      "internal/utilities/checkbox.go||internal/utils/checkbox.go",
      "internal/utilities/image/png.go||internal/utils/image/png.go",
      "internal/utilities/password.go||internal/utils/password.go",
      "internal/utils/string.go||internal/utils/string.go",
      "internal/utils/validation.go||internal/utils/validation.go",
      "services/auth_service.go||services/auth_service.go",
      "services/client.go||services/client.go",
      "services/client_service.go||services/client_service.go",
      "services/device_service.go||services/device_service.go",
      "services/user_service.go||services/user_service.go",
      "web/static/js/app/generate.js||web/static/js/app/generate.js"
    ]
  },
  "patch_diff": {
    "cmd/chaos/main.go||cmd/chaos/main.go": [
      "File: cmd/chaos/main.go -> cmd/chaos/main.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:  \"github.com/tiagorlampert/CHAOS/infrastructure/database\"",
      "10:  \"github.com/tiagorlampert/CHAOS/internal/environment\"",
      "11:  \"github.com/tiagorlampert/CHAOS/internal/middleware\"",
      "16:  \"github.com/tiagorlampert/CHAOS/repositories/sqlite\"",
      "17:  \"github.com/tiagorlampert/CHAOS/services\"",
      "18:  \"net/http\"",
      "",
      "[Removed Lines]",
      "12:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
      "13:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
      "14:  \"github.com/tiagorlampert/CHAOS/internal/utilities/template\"",
      "15:  \"github.com/tiagorlampert/CHAOS/internal/utilities/ui\"",
      "",
      "[Added Lines]",
      "12:  \"github.com/tiagorlampert/CHAOS/internal/utils/constants\"",
      "13:  \"github.com/tiagorlampert/CHAOS/internal/utils/system\"",
      "14:  \"github.com/tiagorlampert/CHAOS/internal/utils/template\"",
      "15:  \"github.com/tiagorlampert/CHAOS/internal/utils/ui\"",
      "",
      "---------------"
    ],
    "delivery/http/handler.go||delivery/http/handler.go": [
      "File: delivery/http/handler.go -> delivery/http/handler.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  \"github.com/sirupsen/logrus\"",
      "11:  \"github.com/tiagorlampert/CHAOS/delivery/http/request\"",
      "12:  \"github.com/tiagorlampert/CHAOS/entities\"",
      "17:  \"github.com/tiagorlampert/CHAOS/services\"",
      "18:  \"net/http\"",
      "19:  \"path/filepath\"",
      "",
      "[Removed Lines]",
      "13:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
      "14:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
      "15:  \"github.com/tiagorlampert/CHAOS/internal/utilities/network\"",
      "16:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
      "",
      "[Added Lines]",
      "13:  \"github.com/tiagorlampert/CHAOS/internal/utils\"",
      "14:  \"github.com/tiagorlampert/CHAOS/internal/utils/constants\"",
      "15:  \"github.com/tiagorlampert/CHAOS/internal/utils/network\"",
      "16:  \"github.com/tiagorlampert/CHAOS/internal/utils/system\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "186: func (h *httpController) getCommandHandler(c *gin.Context) {",
      "187:  address := c.Query(\"address\")",
      "189:  if err != nil {",
      "190:   c.String(http.StatusBadRequest, err.Error())",
      "191:   return",
      "",
      "[Removed Lines]",
      "188:  decoded, err := utilities.DecodeBase64(address)",
      "",
      "[Added Lines]",
      "188:  decoded, err := utils.DecodeBase64(address)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "239:   ServerPort:    req.Port,",
      "240:   OSTarget:      system.OSTargetIntMap[osTarget],",
      "241:   Filename:      req.Filename,",
      "243:  })",
      "244:  if err != nil {",
      "245:   h.Logger.Error(err)",
      "247:   return",
      "248:  }",
      "249:  c.String(http.StatusOK, binary)",
      "",
      "[Removed Lines]",
      "242:   RunHidden:     utilities.ParseCheckboxBoolean(req.RunHidden),",
      "246:   c.String(http.StatusInternalServerError, err.Error())",
      "",
      "[Added Lines]",
      "242:   RunHidden:     utils.ParseCheckboxBoolean(req.RunHidden),",
      "246:   c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "274:   c.String(http.StatusBadRequest, err.Error())",
      "275:   return",
      "276:  }",
      "278:  if err != nil {",
      "279:   c.String(http.StatusBadRequest, err.Error())",
      "280:   return",
      "",
      "[Removed Lines]",
      "277:  path, err := utilities.DecodeBase64(req.Path)",
      "",
      "[Added Lines]",
      "277:  path, err := utils.DecodeBase64(req.Path)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "293:  }",
      "295:  var fileExplorer entities.FileExplorer",
      "297:  if err != nil {",
      "298:   c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})",
      "299:   return",
      "",
      "[Removed Lines]",
      "296:  err = json.Unmarshal(utilities.StringToByte(payload.Response), &fileExplorer)",
      "",
      "[Added Lines]",
      "296:  err = json.Unmarshal(utils.StringToByte(payload.Response), &fileExplorer)",
      "",
      "---------------"
    ],
    "internal/middleware/jwt.go||internal/middleware/jwt.go": [
      "File: internal/middleware/jwt.go -> internal/middleware/jwt.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"github.com/appleboy/gin-jwt/v2\"",
      "5:  \"github.com/gin-gonic/gin\"",
      "6:  \"github.com/tiagorlampert/CHAOS/entities\"",
      "8:  \"github.com/tiagorlampert/CHAOS/services\"",
      "9:  \"net/http\"",
      "10:  \"time\"",
      "",
      "[Removed Lines]",
      "7:  jwtUtil \"github.com/tiagorlampert/CHAOS/internal/utilities/jwt\"",
      "",
      "[Added Lines]",
      "7:  jwtUtil \"github.com/tiagorlampert/CHAOS/internal/utils/jwt\"",
      "",
      "---------------"
    ],
    "internal/utilities/string.go||internal/utilities/string.go": [
      "File: internal/utilities/string.go -> internal/utilities/string.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "internal/utilities/base64.go||internal/utils/base64.go": [
      "File: internal/utilities/base64.go -> internal/utils/base64.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import \"encoding/base64\"",
      "",
      "[Removed Lines]",
      "1: package utilities",
      "",
      "[Added Lines]",
      "1: package utils",
      "",
      "---------------"
    ],
    "internal/utilities/byte.go||internal/utils/byte.go": [
      "File: internal/utilities/byte.go -> internal/utils/byte.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: func ByteToString(value []byte) string {",
      "4:  return string(value)",
      "",
      "[Removed Lines]",
      "1: package utilities",
      "",
      "[Added Lines]",
      "1: package utils",
      "",
      "---------------"
    ],
    "internal/utilities/checkbox.go||internal/utils/checkbox.go": [
      "File: internal/utilities/checkbox.go -> internal/utils/checkbox.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: func ParseCheckboxBoolean(value string) bool {",
      "4:  if value == \"true\" {",
      "",
      "[Removed Lines]",
      "1: package utilities",
      "",
      "[Added Lines]",
      "1: package utils",
      "",
      "---------------"
    ],
    "internal/utilities/image/png.go||internal/utils/image/png.go": [
      "File: internal/utilities/image/png.go -> internal/utils/image/png.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"fmt\"",
      "5:  \"github.com/google/uuid\"",
      "7:  \"os\"",
      "8: )",
      "",
      "[Removed Lines]",
      "6:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
      "",
      "[Added Lines]",
      "6:  \"github.com/tiagorlampert/CHAOS/internal/utils/constants\"",
      "",
      "---------------"
    ],
    "internal/utilities/password.go||internal/utils/password.go": [
      "File: internal/utilities/password.go -> internal/utils/password.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"golang.org/x/crypto/bcrypt\"",
      "",
      "[Removed Lines]",
      "1: package utilities",
      "",
      "[Added Lines]",
      "1: package utils",
      "",
      "---------------"
    ],
    "internal/utils/string.go||internal/utils/string.go": [
      "File: internal/utils/string.go -> internal/utils/string.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package utils",
      "3: import (",
      "4:  \"crypto/rand\"",
      "5:  \"regexp\"",
      "6:  \"strconv\"",
      "7:  \"strings\"",
      "8: )",
      "10: const characters = `0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`",
      "13: func GenerateRandomString(size int) string {",
      "14:  var bytes = make([]byte, size)",
      "15:  rand.Read(bytes)",
      "16:  for i, x := range bytes {",
      "17:   bytes[i] = characters[x%byte(len(characters))]",
      "18:  }",
      "19:  return string(bytes)",
      "20: }",
      "22: func NormalizeString(s string) (string, error) {",
      "23:  re, err := regexp.Compile(`\\W`)",
      "24:  if err != nil {",
      "25:   return \"\", err",
      "26:  }",
      "27:  return strings.TrimSpace(re.ReplaceAllString(s, \"\")), nil",
      "28: }",
      "30: func StringIsNumber(s string) bool {",
      "31:  if _, err := strconv.Atoi(s); err == nil {",
      "32:   return true",
      "33:  }",
      "34:  return false",
      "35: }",
      "",
      "---------------"
    ],
    "internal/utils/validation.go||internal/utils/validation.go": [
      "File: internal/utils/validation.go -> internal/utils/validation.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package utils",
      "3: import (",
      "4:  \"net\"",
      "5:  \"net/url\"",
      "6: )",
      "8: func IsValidIPAddress(s string) bool {",
      "9:  return net.ParseIP(s) != nil",
      "10: }",
      "12: func IsValidURL(s string) bool {",
      "13:  u, err := url.ParseRequestURI(s)",
      "14:  _ = u",
      "15:  if err != nil {",
      "16:   return false",
      "17:  }",
      "18:  return true",
      "19: }",
      "",
      "---------------"
    ],
    "services/auth_service.go||services/auth_service.go": [
      "File: services/auth_service.go -> services/auth_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "5:  \"fmt\"",
      "6:  \"github.com/sirupsen/logrus\"",
      "7:  \"github.com/tiagorlampert/CHAOS/entities\"",
      "9:  \"github.com/tiagorlampert/CHAOS/repositories\"",
      "10:  \"strings\"",
      "11: )",
      "",
      "[Removed Lines]",
      "8:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
      "",
      "[Added Lines]",
      "8:  \"github.com/tiagorlampert/CHAOS/internal/utils\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:   if hasProvidedSecretKey {",
      "48:    dummyAuth.SecretKey = s.secretKey",
      "49:   } else {",
      "51:   }",
      "52:   return &dummyAuth, s.authRepository.Insert(dummyAuth)",
      "53:  }",
      "",
      "[Removed Lines]",
      "50:    dummyAuth.SecretKey = utilities.GenerateRandomString(secretKeySize)",
      "",
      "[Added Lines]",
      "50:    dummyAuth.SecretKey = utils.GenerateRandomString(secretKeySize)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "74:  }",
      "75:  if err := s.authRepository.Update(entities.Auth{",
      "76:   DBModel:   auth.DBModel,",
      "78:  }); err != nil {",
      "79:   return \"\", err",
      "80:  }",
      "",
      "[Removed Lines]",
      "77:   SecretKey: utilities.GenerateRandomString(secretKeySize),",
      "",
      "[Added Lines]",
      "77:   SecretKey: utils.GenerateRandomString(secretKeySize),",
      "",
      "---------------"
    ],
    "services/client.go||services/client.go": [
      "File: services/client.go -> services/client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"context\"",
      "6: )",
      "8: type (",
      "",
      "[Removed Lines]",
      "5:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
      "",
      "[Added Lines]",
      "5:  \"errors\"",
      "6:  \"github.com/tiagorlampert/CHAOS/internal/utils/system\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:  }",
      "22: )",
      "24: type Client interface {",
      "25:  SendCommand(ctx context.Context, input SendCommandInput) (SendCommandOutput, error)",
      "26:  BuildClient(BuildClientBinaryInput) (string, error)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: var (",
      "26:  ErrInvalidServerAddress = errors.New(\"the server address provided is invalid\")",
      "27:  ErrInvalidServerPort    = errors.New(\"the server port provided is invalid\")",
      "28: )",
      "",
      "---------------"
    ],
    "services/client_service.go||services/client_service.go": [
      "File: services/client_service.go -> services/client_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"context\"",
      "5:  \"fmt\"",
      "6:  \"github.com/google/uuid\"",
      "12:  repo \"github.com/tiagorlampert/CHAOS/repositories\"",
      "13:  \"os/exec\"",
      "14:  \"strings\"",
      "",
      "[Removed Lines]",
      "7:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
      "8:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
      "9:  \"github.com/tiagorlampert/CHAOS/internal/utilities/image\"",
      "10:  \"github.com/tiagorlampert/CHAOS/internal/utilities/jwt\"",
      "11:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
      "",
      "[Added Lines]",
      "7:  \"github.com/tiagorlampert/CHAOS/internal/utils\"",
      "8:  \"github.com/tiagorlampert/CHAOS/internal/utils/constants\"",
      "9:  \"github.com/tiagorlampert/CHAOS/internal/utils/image\"",
      "10:  \"github.com/tiagorlampert/CHAOS/internal/utils/jwt\"",
      "11:  \"github.com/tiagorlampert/CHAOS/internal/utils/system\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38: }",
      "40: func (c clientService) SendCommand(ctx context.Context, input SendCommandInput) (SendCommandOutput, error) {",
      "42:  if err != nil {",
      "43:   return SendCommandOutput{}, fmt.Errorf(`error decoding base64: %w`, err)",
      "44:  }",
      "",
      "[Removed Lines]",
      "41:  addr, err := utilities.DecodeBase64(input.MacAddress)",
      "",
      "[Added Lines]",
      "41:  addr, err := utils.DecodeBase64(input.MacAddress)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "60:   }",
      "61:  }",
      "64:  if payload.HasError {",
      "65:   return SendCommandOutput{}, fmt.Errorf(res)",
      "66:  }",
      "",
      "[Removed Lines]",
      "63:  res := utilities.ByteToString(payload.Response)",
      "",
      "[Added Lines]",
      "63:  res := utils.ByteToString(payload.Response)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "77:   if err != nil {",
      "78:    return nil, err",
      "79:   }",
      "81:   break",
      "82:  default:",
      "83:   return payload, nil",
      "",
      "[Removed Lines]",
      "80:   payload.Response = utilities.StringToByte(file)",
      "",
      "[Added Lines]",
      "80:   payload.Response = utils.StringToByte(file)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "86: }",
      "88: func (c clientService) BuildClient(input BuildClientBinaryInput) (string, error) {",
      "89:  token, err := c.GenerateNewToken()",
      "90:  if err != nil {",
      "91:   return \"\", err",
      "92:  }",
      "94:  const buildStr = `GO_ENABLED=1 GOOS=%s GOARCH=amd64 go build -ldflags '%s -s -w -X main.Version=%s -X main.ServerPort=%s -X main.ServerAddress=%s -X main.Token=%s -extldflags \"-static\"' -o ../temp/%s main.go`",
      "96:  buildCmd := fmt.Sprintf(buildStr, handleOSType(input.OSTarget), runHidden(input.RunHidden), c.appVersion, input.ServerPort, input.ServerAddress, token, filename)",
      "97:  cmd := exec.Command(\"sh\", \"-c\", buildCmd)",
      "98:  cmd.Dir = \"client/\"",
      "",
      "[Removed Lines]",
      "95:  filename := handleFilename(input.OSTarget, input.Filename)",
      "",
      "[Added Lines]",
      "89:  if !utils.IsValidIPAddress(input.ServerAddress) &&",
      "90:   !utils.IsValidURL(input.ServerAddress) {",
      "91:   return \"\", ErrInvalidServerAddress",
      "92:  }",
      "94:  if !utils.StringIsNumber(input.ServerPort) {",
      "95:   return \"\", ErrInvalidServerPort",
      "96:  }",
      "98:  filename, err := utils.NormalizeString(input.Filename)",
      "99:  if err != nil {",
      "100:   return \"\", err",
      "101:  }",
      "109:  filename = handleFilename(input.OSTarget, filename)",
      "",
      "---------------"
    ],
    "services/device_service.go||services/device_service.go": [
      "File: services/device_service.go -> services/device_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"errors\"",
      "5:  \"github.com/tiagorlampert/CHAOS/entities\"",
      "7:  \"github.com/tiagorlampert/CHAOS/repositories\"",
      "8:  \"time\"",
      "9: )",
      "",
      "[Removed Lines]",
      "6:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
      "",
      "[Added Lines]",
      "6:  \"github.com/tiagorlampert/CHAOS/internal/utils\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:   return nil, err",
      "31:  }",
      "32:  for index, device := range devices {",
      "34:  }",
      "35:  return devices, nil",
      "36: }",
      "",
      "[Removed Lines]",
      "33:   devices[index].MacAddressBase64 = utilities.EncodeBase64(device.MacAddress)",
      "",
      "[Added Lines]",
      "33:   devices[index].MacAddressBase64 = utils.EncodeBase64(device.MacAddress)",
      "",
      "---------------"
    ],
    "services/user_service.go||services/user_service.go": [
      "File: services/user_service.go -> services/user_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
      "6:  repo \"github.com/tiagorlampert/CHAOS/repositories\"",
      "7: )",
      "",
      "[Removed Lines]",
      "5:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
      "",
      "[Added Lines]",
      "5:  \"github.com/tiagorlampert/CHAOS/internal/utils\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:  if err != nil {",
      "25:   return false",
      "26:  }",
      "28: }",
      "30: func (u userService) Insert(input entities.User) error {",
      "",
      "[Removed Lines]",
      "27:  return utilities.PasswordsMatch(user.Password, password)",
      "",
      "[Added Lines]",
      "27:  return utils.PasswordsMatch(user.Password, password)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:  if err != nil {",
      "43:   return err",
      "44:  }",
      "46:   return ErrInvalidPassword",
      "47:  }",
      "50:  if err != nil {",
      "51:   return err",
      "52:  }",
      "",
      "[Removed Lines]",
      "45:  if !utilities.PasswordsMatch(user.Password, input.OldPassword) {",
      "49:  passwordHash, err := utilities.HashAndSalt(input.NewPassword)",
      "",
      "[Added Lines]",
      "45:  if !utils.PasswordsMatch(user.Password, input.OldPassword) {",
      "49:  passwordHash, err := utils.HashAndSalt(input.NewPassword)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:   return err",
      "64:  }",
      "67:  if err != nil {",
      "68:   return err",
      "69:  }",
      "",
      "[Removed Lines]",
      "66:  passwordHash, err := utilities.HashAndSalt(defaultPassword)",
      "",
      "[Added Lines]",
      "66:  passwordHash, err := utils.HashAndSalt(defaultPassword)",
      "",
      "---------------"
    ],
    "web/static/js/app/generate.js||web/static/js/app/generate.js": [
      "File: web/static/js/app/generate.js -> web/static/js/app/generate.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "21:         .then(response => {",
      "22:             if (!response.ok) {",
      "23:                 return response.text().then(err => {",
      "25:                 });",
      "26:             }",
      "27:             return response.text();",
      "",
      "[Removed Lines]",
      "24:                     throw new Error(err.message);",
      "",
      "[Added Lines]",
      "24:                     throw new Error(err);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:         })",
      "33:         .catch(err => {",
      "34:             console.log('Error: ', err);",
      "35:             ShowNotification('danger', 'Ops!', 'Failed building client binary.\\n' + JSON.parse(err.message).error)",
      "36:         });",
      "37: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:             Swal.close();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6606c7a3d307797abfb04f3165cbe1157a70eb8b",
      "candidate_info": {
        "commit_hash": "6606c7a3d307797abfb04f3165cbe1157a70eb8b",
        "repo": "tiagorlampert/CHAOS",
        "commit_url": "https://github.com/tiagorlampert/CHAOS/commit/6606c7a3d307797abfb04f3165cbe1157a70eb8b",
        "files": [
          "app.json",
          "client/app/gateway/client/client_gateway.go",
          "cmd/chaos/main.go",
          "heroku.yml",
          "internal/environment/configuration.go",
          "repositories/repositories.go",
          "repositories/sqlite/auth_repository.go",
          "services/auth.go",
          "services/auth_service.go",
          "services/user.go",
          "services/user_service.go"
        ],
        "message": "refact heroku deployment",
        "before_after_code_files": [
          "client/app/gateway/client/client_gateway.go||client/app/gateway/client/client_gateway.go",
          "cmd/chaos/main.go||cmd/chaos/main.go",
          "internal/environment/configuration.go||internal/environment/configuration.go",
          "repositories/repositories.go||repositories/repositories.go",
          "repositories/sqlite/auth_repository.go||repositories/sqlite/auth_repository.go",
          "services/auth.go||services/auth.go",
          "services/auth_service.go||services/auth_service.go",
          "services/user.go||services/user.go",
          "services/user_service.go||services/user_service.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/chaos/main.go||cmd/chaos/main.go",
            "services/auth_service.go||services/auth_service.go",
            "services/user_service.go||services/user_service.go"
          ],
          "candidate": [
            "cmd/chaos/main.go||cmd/chaos/main.go",
            "services/auth_service.go||services/auth_service.go",
            "services/user_service.go||services/user_service.go"
          ]
        }
      },
      "candidate_diff": {
        "client/app/gateway/client/client_gateway.go||client/app/gateway/client/client_gateway.go": [
          "File: client/app/gateway/client/client_gateway.go -> client/app/gateway/client/client_gateway.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"bytes\"",
          "5:  \"github.com/tiagorlampert/CHAOS/client/app/gateway\"",
          "6:  \"github.com/tiagorlampert/CHAOS/client/app/shared/environment\"",
          "7:  \"io\"",
          "8:  \"net/http\"",
          "9: )",
          "11: type ClientGateway struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"fmt\"",
          "10:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  req.Header.Set(c.Configuration.Connection.ContentTypeHeader, c.Configuration.Connection.ContentTypeJSON)",
          "29:  req.Header.Set(c.Configuration.Connection.CookieHeader, c.Configuration.Connection.Token)",
          "31:  res, err := c.HttpClient.Do(req)",
          "32:  if err != nil {",
          "33:   return nil, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  fmt.Printf(\"request: %s %s\\n\", strings.ToUpper(method), req.URL)",
          "35:  fmt.Println(c.Configuration.Connection.CookieHeader, c.Configuration.Connection.Token)",
          "",
          "---------------"
        ],
        "cmd/chaos/main.go||cmd/chaos/main.go": [
          "File: cmd/chaos/main.go -> cmd/chaos/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: func init() {",
          "32:  system.ClearScreen()",
          "33: }",
          "35: func main() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  if err := Setup(); err != nil {",
          "35:   logrus.Error(err)",
          "36:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  payloadService := services.NewPayload()",
          "63:  userService := services.NewUser(userRepository)",
          "64:  deviceService := services.NewDevice(deviceRepository)",
          "65:  clientService := services.NewClient(Version, authRepository, payloadService, authService)",
          "",
          "[Removed Lines]",
          "62:  authService := services.NewAuth(authRepository, userRepository)",
          "",
          "[Added Lines]",
          "66:  authService := services.NewAuth(logger, configuration.SecretKey, authRepository)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:  if err != nil {",
          "80:   logger.WithField(`cause`, err).Fatal(`error creating jwt middleware`)",
          "81:  }",
          "83:  httpDelivery.NewController(",
          "84:   configuration,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:  if err := userService.CreateDefaultUser(); err != nil {",
          "87:   logger.WithField(`cause`, err).Fatal(`error creating default user`)",
          "88:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:  }",
          "101: }",
          "104:  return system.CreateDirs(",
          "105:   constants.TempDirectory, constants.DatabaseDirectory)",
          "106: }",
          "",
          "[Removed Lines]",
          "103: func (a *App) Setup() error {",
          "",
          "[Added Lines]",
          "110: func Setup() error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:  a.logger.WithFields(",
          "112:   logrus.Fields{`version`: Version, `port`: a.configuration.Server.Port}).Info(`Starting `, AppName)",
          "118:  return http.ListenAndServe(",
          "119:   fmt.Sprintf(\":%s\", a.configuration.Server.Port),",
          "120:   http.TimeoutHandler(a.router, constants.TimeoutDuration, constants.TimeoutExceeded))",
          "",
          "[Removed Lines]",
          "114:  if err := a.Setup(); err != nil {",
          "115:   a.logger.Error(err)",
          "116:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/environment/configuration.go||internal/environment/configuration.go": [
          "File: internal/environment/configuration.go -> internal/environment/configuration.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: )",
          "8: type Configuration struct {",
          "11: }",
          "13: type Server struct {",
          "",
          "[Removed Lines]",
          "9:  Server   Server",
          "10:  Database Database",
          "",
          "[Added Lines]",
          "9:  Server    Server",
          "10:  Database  Database",
          "11:  SecretKey string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   Database: Database{",
          "27:    Name: os.Getenv(`DATABASE_NAME`),",
          "28:   },",
          "29:  }",
          "30: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   SecretKey: os.Getenv(`SECRET_KEY`),",
          "",
          "---------------"
        ],
        "repositories/repositories.go||repositories/repositories.go": [
          "File: repositories/repositories.go -> repositories/repositories.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: type Auth interface {",
          "12:  Insert(auth entities.Auth) error",
          "13:  Update(auth entities.Auth) error",
          "15: }",
          "17: type User interface {",
          "",
          "[Removed Lines]",
          "14:  First() (*entities.Auth, error)",
          "",
          "[Added Lines]",
          "14:  First() (entities.Auth, error)",
          "",
          "---------------"
        ],
        "repositories/sqlite/auth_repository.go||repositories/sqlite/auth_repository.go": [
          "File: repositories/sqlite/auth_repository.go -> repositories/sqlite/auth_repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  return s.dbClient.Model(&auth).Update(&auth).Error",
          "23: }",
          "26:  var auth entities.Auth",
          "27:  if err := s.dbClient.Find(&auth).Error; err != nil {",
          "29:  }",
          "31: }",
          "",
          "[Removed Lines]",
          "25: func (s authSqliteRepository) First() (*entities.Auth, error) {",
          "28:   return nil, handleError(err)",
          "30:  return &auth, nil",
          "",
          "[Added Lines]",
          "25: func (s authSqliteRepository) First() (entities.Auth, error) {",
          "28:   return entities.Auth{}, handleError(err)",
          "30:  return auth, nil",
          "",
          "---------------"
        ],
        "services/auth.go||services/auth.go": [
          "File: services/auth.go -> services/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package services",
          "3: import (",
          "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "5: )",
          "7: type Auth interface {",
          "8:  Setup() (*entities.Auth, error)",
          "10:  RefreshSecret() (string, error)",
          "11: }",
          "",
          "[Removed Lines]",
          "9:  First() (*entities.Auth, error)",
          "",
          "[Added Lines]",
          "4:  \"errors\"",
          "8: var ErrFailedRefreshProvidedSecretKey = errors.New(\"the secret key provided from environment variable cannot be redefined\")",
          "12:  First() (entities.Auth, error)",
          "",
          "---------------"
        ],
        "services/auth_service.go||services/auth_service.go": [
          "File: services/auth_service.go -> services/auth_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package services",
          "3: import (",
          "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "5:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
          "6:  \"github.com/tiagorlampert/CHAOS/repositories\"",
          "7: )",
          "11: type authService struct {",
          "12:  authRepository repositories.Auth",
          "14: }",
          "16: func NewAuth(",
          "19:  return &authService{",
          "20:   authRepository: authRepository,",
          "22:  }",
          "23: }",
          "25: func (s authService) Setup() (*entities.Auth, error) {",
          "26:  auth, err := s.authRepository.First()",
          "33:   return nil, err",
          "34:  }",
          "39:  }",
          "45:  }",
          "47: }",
          "50:  return s.authRepository.First()",
          "51: }",
          "53: func (s authService) RefreshSecret() (string, error) {",
          "54:  auth, err := s.authRepository.First()",
          "55:  if err != nil {",
          "56:   return \"\", err",
          "",
          "[Removed Lines]",
          "9: const defaultPassword = \"admin\"",
          "13:  userRepository repositories.User",
          "17:  authRepository repositories.Auth,",
          "18:  userRepository repositories.User) Auth {",
          "21:   userRepository: userRepository,",
          "27:  if err == nil {",
          "28:   return auth, nil",
          "29:  }",
          "30:  if err := s.authRepository.Insert(",
          "31:   entities.Auth{SecretKey: utilities.GenerateRandomString(secretKeySize)},",
          "32:  ); err != nil {",
          "36:  passwordHash, err := utilities.HashAndSalt(defaultPassword)",
          "37:  if err != nil {",
          "38:   return nil, err",
          "40:  if err := s.userRepository.Insert(entities.User{",
          "41:   Username: \"admin\",",
          "42:   Password: passwordHash,",
          "43:  }); err != nil {",
          "44:   return nil, err",
          "46:  return s.authRepository.First()",
          "49: func (s authService) First() (*entities.Auth, error) {",
          "",
          "[Added Lines]",
          "4:  \"errors\"",
          "5:  \"fmt\"",
          "6:  \"github.com/sirupsen/logrus\"",
          "10:  \"strings\"",
          "14:  logger         *logrus.Logger",
          "15:  secretKey      string",
          "20:  logger *logrus.Logger,",
          "21:  secretKey string,",
          "22:  authRepository repositories.Auth) Auth {",
          "24:   logger:         logger,",
          "26:   secretKey:      strings.TrimSpace(secretKey),",
          "32:  switch err {",
          "33:  case nil, repositories.ErrNotFound:",
          "34:   break",
          "35:  default:",
          "39:  hasProvidedSecretKey := len(s.secretKey) > 0",
          "40:  if hasProvidedSecretKey {",
          "41:   defer s.logger.WithFields(logrus.Fields{\"key\": s.secretKey}).",
          "42:    Info(\"Using a provided Secret Key from environment variable\")",
          "45:  if errors.Is(err, repositories.ErrNotFound) {",
          "46:   dummyAuth := entities.Auth{}",
          "47:   if hasProvidedSecretKey {",
          "48:    dummyAuth.SecretKey = s.secretKey",
          "49:   } else {",
          "50:    dummyAuth.SecretKey = utilities.GenerateRandomString(secretKeySize)",
          "51:   }",
          "52:   return &dummyAuth, s.authRepository.Insert(dummyAuth)",
          "55:  if hasProvidedSecretKey && auth.SecretKey != s.secretKey {",
          "56:   auth.SecretKey = s.secretKey",
          "57:   return &auth, s.authRepository.Update(auth)",
          "58:  }",
          "59:  return &auth, nil",
          "62: func (s authService) First() (entities.Auth, error) {",
          "67:  if len(s.secretKey) != 0 {",
          "68:   return \"\", fmt.Errorf(\"%s\", ErrFailedRefreshProvidedSecretKey)",
          "69:  }",
          "",
          "---------------"
        ],
        "services/user.go||services/user.go": [
          "File: services/user.go -> services/user.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  Insert(entities.User) error",
          "19:  Login(username, password string) bool",
          "20:  UpdatePassword(UpdateUserPasswordInput) error",
          "21: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  CreateDefaultUser() error",
          "",
          "---------------"
        ],
        "services/user_service.go||services/user_service.go": [
          "File: services/user_service.go -> services/user_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  repo \"github.com/tiagorlampert/CHAOS/repositories\"",
          "7: )",
          "9: type userService struct {",
          "10:  repository repo.User",
          "11: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: const (",
          "10:  defaultUser     = \"admin\"",
          "11:  defaultPassword = \"admin\"",
          "12: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  user.Password = passwordHash",
          "49:  return u.repository.Update(user)",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: func (u userService) CreateDefaultUser() error {",
          "58:  _, err := u.repository.Get(defaultUser)",
          "59:  switch err {",
          "60:  case repo.ErrNotFound:",
          "61:   break",
          "62:  default:",
          "63:   return err",
          "64:  }",
          "66:  passwordHash, err := utilities.HashAndSalt(defaultPassword)",
          "67:  if err != nil {",
          "68:   return err",
          "69:  }",
          "70:  return u.repository.Insert(entities.User{",
          "71:   Username: defaultUser,",
          "72:   Password: passwordHash,",
          "73:  })",
          "74: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24c9e109b5be34df7b2bce8368eae669c481ed5e",
      "candidate_info": {
        "commit_hash": "24c9e109b5be34df7b2bce8368eae669c481ed5e",
        "repo": "tiagorlampert/CHAOS",
        "commit_url": "https://github.com/tiagorlampert/CHAOS/commit/24c9e109b5be34df7b2bce8368eae669c481ed5e",
        "files": [
          "internal/utils/validation.go"
        ],
        "message": "r",
        "before_after_code_files": [
          "internal/utils/validation.go||internal/utils/validation.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/utils/validation.go||internal/utils/validation.go"
          ],
          "candidate": [
            "internal/utils/validation.go||internal/utils/validation.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/utils/validation.go||internal/utils/validation.go": [
          "File: internal/utils/validation.go -> internal/utils/validation.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: }",
          "12: func IsValidURL(s string) bool {",
          "16:   return false",
          "17:  }",
          "18:  return true",
          "",
          "[Removed Lines]",
          "13:  u, err := url.ParseRequestURI(s)",
          "14:  _ = u",
          "15:  if err != nil {",
          "",
          "[Added Lines]",
          "13:  if _, err := url.ParseRequestURI(s); err != nil {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "828ee6c6746371bdb8f9609f570cc1eb046ed64c",
      "candidate_info": {
        "commit_hash": "828ee6c6746371bdb8f9609f570cc1eb046ed64c",
        "repo": "tiagorlampert/CHAOS",
        "commit_url": "https://github.com/tiagorlampert/CHAOS/commit/828ee6c6746371bdb8f9609f570cc1eb046ed64c",
        "files": [
          "README.md",
          "cmd/chaos/main.go",
          "delivery/http/controller.go",
          "delivery/http/handler.go",
          "internal/environment/configuration.go",
          "internal/utilities/base64.go",
          "internal/utilities/byte.go",
          "internal/utilities/checkbox.go",
          "internal/utilities/constants/constants.go",
          "internal/utilities/image/png.go",
          "internal/utilities/jwt/jwt.go",
          "internal/utilities/network/address.go",
          "internal/utilities/network/http.go",
          "internal/utilities/password.go",
          "internal/utilities/string.go",
          "internal/utilities/system/directory.go",
          "internal/utilities/system/os.go",
          "internal/utilities/template/template.go",
          "internal/utilities/ui/logo.go",
          "middleware/jwt.go",
          "services/auth_service.go",
          "services/client.go",
          "services/client_service.go",
          "services/device_service.go",
          "services/user_service.go",
          "shared/environment/configuration.go",
          "shared/utilities/base64.go",
          "shared/utilities/byte.go",
          "shared/utilities/checkbox.go",
          "shared/utilities/constants/constants.go",
          "shared/utilities/image/png.go",
          "shared/utilities/jwt/jwt.go",
          "shared/utilities/network/address.go",
          "shared/utilities/network/http.go",
          "shared/utilities/password.go",
          "shared/utilities/string.go",
          "shared/utilities/system/directory.go",
          "shared/utilities/system/os.go",
          "shared/utilities/template/template.go",
          "shared/utilities/ui/logo.go"
        ],
        "message": "rename package",
        "before_after_code_files": [
          "cmd/chaos/main.go||cmd/chaos/main.go",
          "delivery/http/controller.go||delivery/http/controller.go",
          "delivery/http/handler.go||delivery/http/handler.go",
          "shared/utilities/image/png.go||internal/utilities/image/png.go",
          "middleware/jwt.go||middleware/jwt.go",
          "services/auth_service.go||services/auth_service.go",
          "services/client.go||services/client.go",
          "services/client_service.go||services/client_service.go",
          "services/device_service.go||services/device_service.go",
          "services/user_service.go||services/user_service.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/chaos/main.go||cmd/chaos/main.go",
            "delivery/http/handler.go||delivery/http/handler.go",
            "services/auth_service.go||services/auth_service.go",
            "services/client.go||services/client.go",
            "services/client_service.go||services/client_service.go",
            "services/device_service.go||services/device_service.go",
            "services/user_service.go||services/user_service.go"
          ],
          "candidate": [
            "cmd/chaos/main.go||cmd/chaos/main.go",
            "delivery/http/handler.go||delivery/http/handler.go",
            "services/auth_service.go||services/auth_service.go",
            "services/client.go||services/client.go",
            "services/client_service.go||services/client_service.go",
            "services/device_service.go||services/device_service.go",
            "services/user_service.go||services/user_service.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/chaos/main.go||cmd/chaos/main.go": [
          "File: cmd/chaos/main.go -> cmd/chaos/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"github.com/sirupsen/logrus\"",
          "8:  \"github.com/tiagorlampert/CHAOS/database\"",
          "9:  httpDelivery \"github.com/tiagorlampert/CHAOS/delivery/http\"",
          "10:  \"github.com/tiagorlampert/CHAOS/middleware\"",
          "11:  \"github.com/tiagorlampert/CHAOS/repositories/sqlite\"",
          "12:  \"github.com/tiagorlampert/CHAOS/services\"",
          "18:  \"net/http\"",
          "19: )",
          "",
          "[Removed Lines]",
          "13:  \"github.com/tiagorlampert/CHAOS/shared/environment\"",
          "14:  \"github.com/tiagorlampert/CHAOS/shared/utilities/constants\"",
          "15:  \"github.com/tiagorlampert/CHAOS/shared/utilities/system\"",
          "16:  \"github.com/tiagorlampert/CHAOS/shared/utilities/template\"",
          "17:  \"github.com/tiagorlampert/CHAOS/shared/utilities/ui\"",
          "",
          "[Added Lines]",
          "10:  \"github.com/tiagorlampert/CHAOS/internal/environment\"",
          "11:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
          "12:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
          "13:  \"github.com/tiagorlampert/CHAOS/internal/utilities/template\"",
          "14:  \"github.com/tiagorlampert/CHAOS/internal/utilities/ui\"",
          "",
          "---------------"
        ],
        "delivery/http/controller.go||delivery/http/controller.go": [
          "File: delivery/http/controller.go -> delivery/http/controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"github.com/gin-gonic/gin\"",
          "5:  \"github.com/sirupsen/logrus\"",
          "6:  \"github.com/tiagorlampert/CHAOS/middleware\"",
          "7:  \"github.com/tiagorlampert/CHAOS/services\"",
          "9: )",
          "11: type httpController struct {",
          "",
          "[Removed Lines]",
          "8:  \"github.com/tiagorlampert/CHAOS/shared/environment\"",
          "",
          "[Added Lines]",
          "6:  \"github.com/tiagorlampert/CHAOS/internal/environment\"",
          "",
          "---------------"
        ],
        "delivery/http/handler.go||delivery/http/handler.go": [
          "File: delivery/http/handler.go -> delivery/http/handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"github.com/sirupsen/logrus\"",
          "10:  \"github.com/tiagorlampert/CHAOS/delivery/http/request\"",
          "11:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "12:  \"github.com/tiagorlampert/CHAOS/services\"",
          "17:  \"net/http\"",
          "18:  \"path/filepath\"",
          "19:  \"strconv\"",
          "",
          "[Removed Lines]",
          "13:  \"github.com/tiagorlampert/CHAOS/shared/utilities\"",
          "14:  \"github.com/tiagorlampert/CHAOS/shared/utilities/constants\"",
          "15:  \"github.com/tiagorlampert/CHAOS/shared/utilities/network\"",
          "16:  \"github.com/tiagorlampert/CHAOS/shared/utilities/system\"",
          "",
          "[Added Lines]",
          "12:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
          "13:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
          "14:  \"github.com/tiagorlampert/CHAOS/internal/utilities/network\"",
          "15:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
          "",
          "---------------"
        ],
        "shared/utilities/image/png.go||internal/utilities/image/png.go": [
          "File: shared/utilities/image/png.go -> internal/utilities/image/png.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"github.com/google/uuid\"",
          "7:  \"os\"",
          "8: )",
          "",
          "[Removed Lines]",
          "6:  \"github.com/tiagorlampert/CHAOS/shared/utilities/constants\"",
          "",
          "[Added Lines]",
          "6:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
          "",
          "---------------"
        ],
        "middleware/jwt.go||middleware/jwt.go": [
          "File: middleware/jwt.go -> middleware/jwt.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"github.com/appleboy/gin-jwt/v2\"",
          "5:  \"github.com/gin-gonic/gin\"",
          "6:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "7:  \"github.com/tiagorlampert/CHAOS/services\"",
          "9:  \"net/http\"",
          "10:  \"time\"",
          "11: )",
          "",
          "[Removed Lines]",
          "8:  jwtUtil \"github.com/tiagorlampert/CHAOS/shared/utilities/jwt\"",
          "",
          "[Added Lines]",
          "7:  jwtUtil \"github.com/tiagorlampert/CHAOS/internal/utilities/jwt\"",
          "",
          "---------------"
        ],
        "services/auth_service.go||services/auth_service.go": [
          "File: services/auth_service.go -> services/auth_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "5:  \"github.com/tiagorlampert/CHAOS/repositories\"",
          "7: )",
          "9: const defaultPassword = \"admin\"",
          "",
          "[Removed Lines]",
          "6:  \"github.com/tiagorlampert/CHAOS/shared/utilities\"",
          "",
          "[Added Lines]",
          "5:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
          "",
          "---------------"
        ],
        "services/client.go||services/client.go": [
          "File: services/client.go -> services/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "6: )",
          "8: type (",
          "",
          "[Removed Lines]",
          "5:  \"github.com/tiagorlampert/CHAOS/shared/utilities/system\"",
          "",
          "[Added Lines]",
          "5:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
          "",
          "---------------"
        ],
        "services/client_service.go||services/client_service.go": [
          "File: services/client_service.go -> services/client_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"github.com/google/uuid\"",
          "7:  repo \"github.com/tiagorlampert/CHAOS/repositories\"",
          "13:  \"os/exec\"",
          "14:  \"strings\"",
          "15:  \"time\"",
          "",
          "[Removed Lines]",
          "8:  \"github.com/tiagorlampert/CHAOS/shared/utilities\"",
          "9:  \"github.com/tiagorlampert/CHAOS/shared/utilities/constants\"",
          "10:  \"github.com/tiagorlampert/CHAOS/shared/utilities/image\"",
          "11:  \"github.com/tiagorlampert/CHAOS/shared/utilities/jwt\"",
          "12:  \"github.com/tiagorlampert/CHAOS/shared/utilities/system\"",
          "",
          "[Added Lines]",
          "7:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
          "8:  \"github.com/tiagorlampert/CHAOS/internal/utilities/constants\"",
          "9:  \"github.com/tiagorlampert/CHAOS/internal/utilities/image\"",
          "10:  \"github.com/tiagorlampert/CHAOS/internal/utilities/jwt\"",
          "11:  \"github.com/tiagorlampert/CHAOS/internal/utilities/system\"",
          "",
          "---------------"
        ],
        "services/device_service.go||services/device_service.go": [
          "File: services/device_service.go -> services/device_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"errors\"",
          "5:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "6:  \"github.com/tiagorlampert/CHAOS/repositories\"",
          "8:  \"time\"",
          "9: )",
          "",
          "[Removed Lines]",
          "7:  \"github.com/tiagorlampert/CHAOS/shared/utilities\"",
          "",
          "[Added Lines]",
          "6:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
          "",
          "---------------"
        ],
        "services/user_service.go||services/user_service.go": [
          "File: services/user_service.go -> services/user_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "5:  repo \"github.com/tiagorlampert/CHAOS/repositories\"",
          "7: )",
          "9: type userService struct {",
          "",
          "[Removed Lines]",
          "6:  \"github.com/tiagorlampert/CHAOS/shared/utilities\"",
          "",
          "[Added Lines]",
          "5:  \"github.com/tiagorlampert/CHAOS/internal/utilities\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3074fcef7eb0ce1e3f278122b69473b3ed4e63c8",
      "candidate_info": {
        "commit_hash": "3074fcef7eb0ce1e3f278122b69473b3ed4e63c8",
        "repo": "tiagorlampert/CHAOS",
        "commit_url": "https://github.com/tiagorlampert/CHAOS/commit/3074fcef7eb0ce1e3f278122b69473b3ed4e63c8",
        "files": [
          "README.md",
          "cmd/chaos/main.go",
          "database/sqlite.go",
          "delivery/http/controller.go",
          "entities/auth.go",
          "entities/system.go",
          "repositories/repositories.go",
          "repositories/sqlite/auth_repository.go",
          "repositories/sqlite/device_repository.go",
          "repositories/sqlite/system_repository.go",
          "repositories/sqlite/user_repository.go",
          "services/auth.go",
          "services/auth_service.go",
          "services/client_service.go",
          "services/device_service.go",
          "services/system.go",
          "services/system_service.go",
          "shared/utils/system/directory.go",
          "shared/utils/system/os.go"
        ],
        "message": "refact main and auth service",
        "before_after_code_files": [
          "cmd/chaos/main.go||cmd/chaos/main.go",
          "database/sqlite.go||database/sqlite.go",
          "delivery/http/controller.go||delivery/http/controller.go",
          "entities/system.go||entities/auth.go",
          "repositories/repositories.go||repositories/repositories.go",
          "repositories/sqlite/auth_repository.go||repositories/sqlite/auth_repository.go",
          "repositories/sqlite/device_repository.go||repositories/sqlite/device_repository.go",
          "repositories/sqlite/system_repository.go||repositories/sqlite/system_repository.go",
          "repositories/sqlite/user_repository.go||repositories/sqlite/user_repository.go",
          "services/auth.go||services/auth.go",
          "services/auth_service.go||services/auth_service.go",
          "services/client_service.go||services/client_service.go",
          "services/device_service.go||services/device_service.go",
          "services/system.go||services/system.go",
          "services/system_service.go||services/system_service.go",
          "shared/utils/system/directory.go||shared/utils/system/directory.go",
          "shared/utils/system/os.go||shared/utils/system/os.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/chaos/main.go||cmd/chaos/main.go",
            "services/auth_service.go||services/auth_service.go",
            "services/client_service.go||services/client_service.go",
            "services/device_service.go||services/device_service.go"
          ],
          "candidate": [
            "cmd/chaos/main.go||cmd/chaos/main.go",
            "services/auth_service.go||services/auth_service.go",
            "services/client_service.go||services/client_service.go",
            "services/device_service.go||services/device_service.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/chaos/main.go||cmd/chaos/main.go": [
          "File: cmd/chaos/main.go -> cmd/chaos/main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  logger := logrus.New()",
          "37:  logger.Info(`Loading environment variables`)",
          "41:   logger.WithField(`cause`, err.Error()).Fatal(`error validating environment config variables`)",
          "42:  }",
          "45:  if err != nil {",
          "46:   logger.WithField(`cause`, err).Fatal(`error connecting with database`)",
          "47:  }",
          "50:   logger.WithField(`cause`, err).Fatal(fmt.Sprintf(\"failed to start %s Application\", AppName))",
          "51:  }",
          "52: }",
          "54: func NewApp(logger *logrus.Logger, configuration *environment.Configuration, dbClient *gorm.DB) *App {",
          "57:  userRepository := sqlite.NewUserRepository(dbClient)",
          "58:  deviceRepository := sqlite.NewDeviceRepository(dbClient)",
          "61:  payloadService := services.NewPayload()",
          "63:  userService := services.NewUser(userRepository)",
          "64:  deviceService := services.NewDevice(deviceRepository)",
          "66:  urlService := services.NewURLService(clientService)",
          "",
          "[Removed Lines]",
          "39:  cfg := environment.Load()",
          "40:  if err := cfg.Validate(); err != nil {",
          "44:  dbClient, err := database.NewSQLiteClient(constants.DatabaseDirectory, cfg.Database.Name)",
          "49:  if err := NewApp(logger, cfg, dbClient.Conn).Run(); err != nil {",
          "56:  systemRepository := sqlite.NewSystemRepository(dbClient)",
          "62:  systemService := services.NewSystem(systemRepository, userRepository)",
          "65:  clientService := services.NewClient(Version, systemRepository, payloadService, systemService)",
          "",
          "[Added Lines]",
          "39:  configuration := environment.Load()",
          "40:  if err := configuration.Validate(); err != nil {",
          "44:  dbClient, err := database.NewSQLiteClient(constants.DatabaseDirectory, configuration.Database.Name)",
          "49:  if err := NewApp(logger, configuration, dbClient.Conn).Run(); err != nil {",
          "56:  authRepository := sqlite.NewAuthRepository(dbClient)",
          "62:  authService := services.NewAuth(authRepository, userRepository)",
          "65:  clientService := services.NewClient(Version, authRepository, payloadService, authService)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:  router.Static(\"/static\", \"web/static\")",
          "72:  router.HTMLRender = template.LoadTemplates(\"web\")",
          "75:  if err != nil {",
          "77:  }",
          "79:  if err != nil {",
          "80:   logger.WithField(`cause`, err).Fatal(`error creating jwt middleware`)",
          "81:  }",
          "86:  ui.ShowMenu(configuration.Server.Port)",
          "",
          "[Removed Lines]",
          "74:  params, err := systemService.Load()",
          "76:   logger.WithField(`cause`, err).Fatal(`error loading system params`)",
          "78:  jwtMiddleware, err := middleware.NewJWTMiddleware(params.SecretKey, userService)",
          "83:  httpDelivery.NewController(configuration, router, logger, jwtMiddleware, clientService, systemService, payloadService,",
          "84:   userService, deviceService, urlService)",
          "",
          "[Added Lines]",
          "74:  auth, err := authService.Setup()",
          "76:   logger.WithField(`cause`, err).Fatal(`error preparing authentication`)",
          "78:  jwtMiddleware, err := middleware.NewJWTMiddleware(auth.SecretKey, userService)",
          "83:  httpDelivery.NewController(",
          "84:   configuration,",
          "85:   router,",
          "86:   logger,",
          "87:   jwtMiddleware,",
          "88:   clientService,",
          "89:   authService,",
          "90:   payloadService,",
          "91:   userService,",
          "92:   deviceService,",
          "93:   urlService,",
          "94:  )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: }",
          "95: func (a *App) Setup() error {",
          "103: }",
          "105: func (a *App) Run() error {",
          "106:  a.logger.WithFields(",
          "107:   logrus.Fields{`version`: Version, `port`: a.configuration.Server.Port}).Info(`Starting `, AppName)",
          "",
          "[Removed Lines]",
          "96:  if err := system.CreateDirectory(constants.TempDirectory); err != nil {",
          "97:   return fmt.Errorf(\"error creating %s directory: %w\", constants.TempDirectory, err)",
          "98:  }",
          "99:  if err := system.CreateDirectory(constants.DatabaseDirectory); err != nil {",
          "100:   return fmt.Errorf(\"error creating %s directory: %w\", constants.DatabaseDirectory, err)",
          "101:  }",
          "102:  return nil",
          "",
          "[Added Lines]",
          "106:  return system.CreateDirs(",
          "107:   constants.TempDirectory, constants.DatabaseDirectory)",
          "111:  if err := a.Setup(); err != nil {",
          "112:   a.logger.Error(err)",
          "113:  }",
          "",
          "---------------"
        ],
        "database/sqlite.go||database/sqlite.go": [
          "File: database/sqlite.go -> database/sqlite.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  d.Conn.AutoMigrate(",
          "34:   &entities.User{},",
          "35:   &entities.Device{},",
          "37:  )",
          "38: }",
          "",
          "[Removed Lines]",
          "36:   &entities.System{},",
          "",
          "[Added Lines]",
          "36:   &entities.Auth{},",
          "",
          "---------------"
        ],
        "delivery/http/controller.go||delivery/http/controller.go": [
          "File: delivery/http/controller.go -> delivery/http/controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  Logger         *logrus.Logger",
          "28:  AuthMiddleware *middleware.JWT",
          "29:  ClientService  services.Client",
          "31:  UserService    services.User",
          "32:  DeviceService  services.Device",
          "33:  PayloadService services.Payload",
          "",
          "[Removed Lines]",
          "30:  SystemService  services.System",
          "",
          "[Added Lines]",
          "30:  AuthService    services.Auth",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:  log *logrus.Logger,",
          "41:  authMiddleware *middleware.JWT,",
          "42:  clientService services.Client,",
          "44:  payloadService services.Payload,",
          "45:  userService services.User,",
          "46:  deviceService services.Device,",
          "",
          "[Removed Lines]",
          "43:  systemService services.System,",
          "",
          "[Added Lines]",
          "43:  systemService services.Auth,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   Logger:         log,",
          "52:   ClientService:  clientService,",
          "53:   PayloadService: payloadService,",
          "55:   UserService:    userService,",
          "56:   DeviceService:  deviceService,",
          "57:   UrlService:     urlService,",
          "",
          "[Removed Lines]",
          "54:   SystemService:  systemService,",
          "",
          "[Added Lines]",
          "54:   AuthService:    systemService,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118: }",
          "120: func (h *httpController) getSettingsHandler(c *gin.Context) {",
          "122:  if err != nil {",
          "123:   h.Logger.Error(err)",
          "124:   c.Status(http.StatusInternalServerError)",
          "125:   return",
          "126:  }",
          "127:  c.HTML(http.StatusOK, \"settings.html\", gin.H{",
          "129:  })",
          "130:  return",
          "131: }",
          "133: func (h *httpController) refreshTokenHandler(c *gin.Context) {",
          "135:  if err != nil {",
          "136:   h.Logger.Error(err.Error())",
          "137:   c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})",
          "",
          "[Removed Lines]",
          "121:  config, err := h.SystemService.GetParams()",
          "128:   \"SecretKey\": config.SecretKey,",
          "134:  secret, err := h.SystemService.RefreshSecretKey()",
          "",
          "[Added Lines]",
          "121:  auth, err := h.AuthService.First()",
          "128:   \"SecretKey\": auth.SecretKey,",
          "134:  secret, err := h.AuthService.RefreshSecret()",
          "",
          "---------------"
        ],
        "entities/system.go||entities/auth.go": [
          "File: entities/system.go -> entities/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package entities",
          "4:  DBModel",
          "5:  SecretKey string",
          "6: }",
          "",
          "[Removed Lines]",
          "3: type System struct {",
          "",
          "[Added Lines]",
          "3: type Auth struct {",
          "",
          "---------------"
        ],
        "repositories/repositories.go||repositories/repositories.go": [
          "File: repositories/repositories.go -> repositories/repositories.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: var ErrNotFound = errors.New(\"not found\")",
          "15: }",
          "17: type User interface {",
          "",
          "[Removed Lines]",
          "11: type System interface {",
          "12:  Insert(system entities.System) error",
          "13:  Update(system entities.System) (*entities.System, error)",
          "14:  Get() (*entities.System, error)",
          "",
          "[Added Lines]",
          "11: type Auth interface {",
          "12:  Insert(auth entities.Auth) error",
          "13:  Update(auth entities.Auth) error",
          "14:  First() (*entities.Auth, error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: type Device interface {",
          "24:  Insert(device entities.Device) error",
          "25:  Update(device entities.Device) error",
          "28: }",
          "",
          "[Removed Lines]",
          "26:  Get(macAddress string) (*entities.Device, error)",
          "27:  List(dateTime time.Time) ([]entities.Device, error)",
          "",
          "[Added Lines]",
          "26:  GetByMacAddress(macAddr string) (*entities.Device, error)",
          "27:  List(updatedAt time.Time) ([]entities.Device, error)",
          "",
          "---------------"
        ],
        "repositories/sqlite/auth_repository.go||repositories/sqlite/auth_repository.go": [
          "File: repositories/sqlite/auth_repository.go -> repositories/sqlite/auth_repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package sqlite",
          "3: import (",
          "4:  \"github.com/jinzhu/gorm\"",
          "5:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "6:  \"github.com/tiagorlampert/CHAOS/repositories\"",
          "7: )",
          "9: type authSqliteRepository struct {",
          "10:  dbClient *gorm.DB",
          "11: }",
          "13: func NewAuthRepository(dbClient *gorm.DB) repositories.Auth {",
          "14:  return &authSqliteRepository{dbClient: dbClient}",
          "15: }",
          "17: func (s authSqliteRepository) Insert(auth entities.Auth) error {",
          "18:  return s.dbClient.Create(&auth).Error",
          "19: }",
          "21: func (s authSqliteRepository) Update(auth entities.Auth) error {",
          "22:  return s.dbClient.Model(&auth).Update(&auth).Error",
          "23: }",
          "25: func (s authSqliteRepository) First() (*entities.Auth, error) {",
          "26:  var auth entities.Auth",
          "27:  if err := s.dbClient.Find(&auth).Error; err != nil {",
          "28:   return nil, handleError(err)",
          "29:  }",
          "30:  return &auth, nil",
          "31: }",
          "",
          "---------------"
        ],
        "repositories/sqlite/device_repository.go||repositories/sqlite/device_repository.go": [
          "File: repositories/sqlite/device_repository.go -> repositories/sqlite/device_repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"time\"",
          "9: )",
          "13: }",
          "17: }",
          "22:   return errors.New(\"error saving device\")",
          "23:  }",
          "24:  return nil",
          "25: }",
          "29: }",
          "32:  var device entities.Device",
          "39:  }",
          "40:  return &device, nil",
          "41: }",
          "44:  var devices []entities.Device",
          "46:   return nil, err",
          "47:  }",
          "48:  return devices, nil",
          "49: }",
          "",
          "[Removed Lines]",
          "11: type deviceRepository struct {",
          "12:  database *gorm.DB",
          "15: func NewDeviceRepository(database *gorm.DB) repositories.Device {",
          "16:  return &deviceRepository{database: database}",
          "19: func (r deviceRepository) Insert(input entities.Device) error {",
          "20:  rowsAffected := r.database.Create(&input).RowsAffected",
          "21:  if rowsAffected <= 0 {",
          "27: func (r deviceRepository) Update(device entities.Device) error {",
          "28:  return r.database.Model(&device).Where(entities.Device{MacAddress: device.MacAddress}).Update(&device).Error",
          "31: func (r deviceRepository) Get(macAddress string) (*entities.Device, error) {",
          "33:  err := r.database.Where(entities.Device{MacAddress: macAddress}).First(&device).Error",
          "34:  if err != nil {",
          "35:   if err == gorm.ErrRecordNotFound {",
          "36:    return nil, repositories.ErrNotFound",
          "37:   }",
          "38:   return nil, err",
          "43: func (r deviceRepository) List(dateTime time.Time) ([]entities.Device, error) {",
          "45:  if err := r.database.Where(\"updated_at > ?\", dateTime.String()).Find(&devices).Error; err != nil {",
          "",
          "[Added Lines]",
          "11: type deviceSqliteRepository struct {",
          "12:  dbClient *gorm.DB",
          "15: func NewDeviceRepository(dbClient *gorm.DB) repositories.Device {",
          "16:  return &deviceSqliteRepository{dbClient: dbClient}",
          "19: func (r deviceSqliteRepository) Insert(input entities.Device) error {",
          "20:  result := r.dbClient.Create(&input)",
          "21:  if result.Error != nil {",
          "22:   return handleError(result.Error)",
          "23:  }",
          "24:  if result.RowsAffected <= 0 {",
          "30: func (r deviceSqliteRepository) Update(device entities.Device) error {",
          "31:  return r.dbClient.Model(&device).Where(",
          "32:   entities.Device{MacAddress: device.MacAddress}).Update(&device).Error",
          "35: func (r deviceSqliteRepository) GetByMacAddress(macAddr string) (*entities.Device, error) {",
          "37:  if err := r.dbClient.Where(entities.Device{MacAddress: macAddr}).First(&device).Error; err != nil {",
          "38:   return nil, handleError(err)",
          "43: func (r deviceSqliteRepository) List(updatedAt time.Time) ([]entities.Device, error) {",
          "45:  if err := r.dbClient.Where(",
          "46:   \"updated_at > ?\", updatedAt.String()).Find(&devices).Error; err != nil {",
          "52: func handleError(err error) error {",
          "53:  switch err {",
          "54:  case gorm.ErrRecordNotFound:",
          "55:   return repositories.ErrNotFound",
          "56:  default:",
          "57:   return err",
          "58:  }",
          "59: }",
          "",
          "---------------"
        ],
        "repositories/sqlite/system_repository.go||repositories/sqlite/system_repository.go": [
          "File: repositories/sqlite/system_repository.go -> repositories/sqlite/system_repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "repositories/sqlite/user_repository.go||repositories/sqlite/user_repository.go": [
          "File: repositories/sqlite/user_repository.go -> repositories/sqlite/user_repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"github.com/tiagorlampert/CHAOS/repositories\"",
          "7: )",
          "11: }",
          "13: func NewUserRepository(database *gorm.DB) repositories.User {",
          "15: }",
          "19: }",
          "23: }",
          "26:  var user entities.User",
          "32:  }",
          "33:  return &user, nil",
          "34: }",
          "",
          "[Removed Lines]",
          "9: type userRepository struct {",
          "10:  database *gorm.DB",
          "14:  return &userRepository{database: database}",
          "17: func (u userRepository) Insert(user entities.User) error {",
          "18:  return u.database.Create(&user).Error",
          "21: func (u userRepository) Update(user *entities.User) error {",
          "22:  return u.database.Model(&user).Where(entities.User{Username: user.Username}).Update(&user).Error",
          "25: func (u userRepository) Get(username string) (*entities.User, error) {",
          "27:  if err := u.database.Where(\"username = ?\", username).First(&user).Error; err != nil {",
          "28:   if err == gorm.ErrRecordNotFound {",
          "29:    return nil, repositories.ErrNotFound",
          "30:   }",
          "31:   return nil, err",
          "",
          "[Added Lines]",
          "9: type userSqliteRepository struct {",
          "10:  dbClient *gorm.DB",
          "14:  return &userSqliteRepository{dbClient: database}",
          "17: func (u userSqliteRepository) Insert(user entities.User) error {",
          "18:  return u.dbClient.Create(&user).Error",
          "21: func (u userSqliteRepository) Update(user *entities.User) error {",
          "22:  return u.dbClient.Model(&user).Where(",
          "23:   entities.User{Username: user.Username}).Update(&user).Error",
          "26: func (u userSqliteRepository) Get(username string) (*entities.User, error) {",
          "28:  if err := u.dbClient.Where(\"username = ?\", username).First(&user).Error; err != nil {",
          "29:   return nil, handleError(err)",
          "",
          "---------------"
        ],
        "services/auth.go||services/auth.go": [
          "File: services/auth.go -> services/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package services",
          "3: import (",
          "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "5: )",
          "7: type Auth interface {",
          "8:  Setup() (*entities.Auth, error)",
          "9:  First() (*entities.Auth, error)",
          "10:  RefreshSecret() (string, error)",
          "11: }",
          "",
          "---------------"
        ],
        "services/auth_service.go||services/auth_service.go": [
          "File: services/auth_service.go -> services/auth_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package services",
          "3: import (",
          "4:  \"github.com/tiagorlampert/CHAOS/entities\"",
          "5:  \"github.com/tiagorlampert/CHAOS/repositories\"",
          "6:  \"github.com/tiagorlampert/CHAOS/shared/utils\"",
          "7: )",
          "9: const defaultPassword = \"admin\"",
          "11: type authService struct {",
          "12:  authRepository repositories.Auth",
          "13:  userRepository repositories.User",
          "14: }",
          "16: func NewAuth(",
          "17:  authRepository repositories.Auth,",
          "18:  userRepository repositories.User) Auth {",
          "19:  return &authService{",
          "20:   authRepository: authRepository,",
          "21:   userRepository: userRepository,",
          "22:  }",
          "23: }",
          "25: func (s authService) Setup() (*entities.Auth, error) {",
          "26:  auth, err := s.authRepository.First()",
          "27:  if err == nil {",
          "28:   return auth, nil",
          "29:  }",
          "30:  if err := s.authRepository.Insert(",
          "31:   entities.Auth{SecretKey: utils.GenerateRandomString(secretKeySize)},",
          "32:  ); err != nil {",
          "33:   return nil, err",
          "34:  }",
          "36:  passwordHash, err := utils.HashAndSalt(defaultPassword)",
          "37:  if err != nil {",
          "38:   return nil, err",
          "39:  }",
          "40:  if err := s.userRepository.Insert(entities.User{",
          "41:   Username: \"admin\",",
          "42:   Password: passwordHash,",
          "43:  }); err != nil {",
          "44:   return nil, err",
          "45:  }",
          "46:  return s.authRepository.First()",
          "47: }",
          "49: func (s authService) First() (*entities.Auth, error) {",
          "50:  return s.authRepository.First()",
          "51: }",
          "53: func (s authService) RefreshSecret() (string, error) {",
          "54:  auth, err := s.authRepository.First()",
          "55:  if err != nil {",
          "56:   return \"\", err",
          "57:  }",
          "58:  if err := s.authRepository.Update(entities.Auth{",
          "59:   DBModel:   auth.DBModel,",
          "60:   SecretKey: utils.GenerateRandomString(secretKeySize),",
          "61:  }); err != nil {",
          "62:   return \"\", err",
          "63:  }",
          "64:  auth, err = s.authRepository.First()",
          "65:  if err != nil {",
          "66:   return \"\", err",
          "67:  }",
          "68:  return auth.SecretKey, nil",
          "69: }",
          "",
          "---------------"
        ],
        "services/client_service.go||services/client_service.go": [
          "File: services/client_service.go -> services/client_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: type clientService struct {",
          "21:  appVersion     string",
          "23:  payloadService Payload",
          "25: }",
          "28:  return &clientService{",
          "29:   repository:     repository,",
          "30:   payloadService: payloadCache,",
          "31:   appVersion:     appVersion,",
          "33:  }",
          "34: }",
          "",
          "[Removed Lines]",
          "22:  repository     repo.System",
          "24:  systemService  System",
          "27: func NewClient(appVersion string, repository repo.System, payloadCache Payload, systemService System) Client {",
          "32:   systemService:  systemService,",
          "",
          "[Added Lines]",
          "22:  repository     repo.Auth",
          "24:  authService    Auth",
          "27: func NewClient(",
          "28:  appVersion string,",
          "29:  repository repo.Auth,",
          "30:  payloadCache Payload,",
          "31:  authService Auth) Client {",
          "36:   authService:    authService,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101: }",
          "103: func (c clientService) generateNewToken() (string, error) {",
          "105:  if err != nil {",
          "106:   return \"\", err",
          "107:  }",
          "109: }",
          "111: func handleOSType(osType system.OSType) string {",
          "",
          "[Removed Lines]",
          "104:  params, err := c.systemService.GetParams()",
          "108:  return jwt.NewToken(params.SecretKey, jwt.IdentityDefaultUser)",
          "",
          "[Added Lines]",
          "108:  auth, err := c.authService.First()",
          "112:  return jwt.NewToken(auth.SecretKey, jwt.IdentityDefaultUser)",
          "",
          "---------------"
        ],
        "services/device_service.go||services/device_service.go": [
          "File: services/device_service.go -> services/device_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: }",
          "20: func (d deviceService) Insert(input entities.Device) error {",
          "22:  if err != nil {",
          "23:   if err == repo.ErrNotFound {",
          "24:    if err := d.repository.Insert(input); err != nil {",
          "",
          "[Removed Lines]",
          "21:  _, err := d.repository.Get(input.MacAddress)",
          "",
          "[Added Lines]",
          "21:  _, err := d.repository.GetByMacAddress(input.MacAddress)",
          "",
          "---------------"
        ],
        "services/system.go||services/system.go": [
          "File: services/system.go -> services/system.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "services/system_service.go||services/system_service.go": [
          "File: services/system_service.go -> services/system_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shared/utils/system/directory.go||shared/utils/system/directory.go": [
          "File: shared/utils/system/directory.go -> shared/utils/system/directory.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import \"os\"",
          "7:  if _, err := os.Stat(path); os.IsNotExist(err) {",
          "9:    return err",
          "10:   }",
          "11:  }",
          "",
          "[Removed Lines]",
          "6: func CreateDirectory(path string) error {",
          "8:   if err := os.Mkdir(path, os.ModePerm); err != nil {",
          "",
          "[Added Lines]",
          "6: func CreateDir(path string) error {",
          "8:   return os.Mkdir(path, os.ModePerm)",
          "9:  }",
          "10:  return nil",
          "11: }",
          "14: func CreateDirs(paths ...string) error {",
          "15:  for _, path := range paths {",
          "16:   if err := CreateDir(path); err != nil {",
          "",
          "---------------"
        ],
        "shared/utils/system/os.go||shared/utils/system/os.go": [
          "File: shared/utils/system/os.go -> shared/utils/system/os.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: }",
          "46:  cmd := exec.Command(\"clear\")",
          "47:  cmd.Stdout = os.Stdout",
          "49: }",
          "",
          "[Removed Lines]",
          "45: func ClearScreen() {",
          "48:  cmd.Run()",
          "",
          "[Added Lines]",
          "45: func ClearScreen() error {",
          "48:  return cmd.Run()",
          "",
          "---------------"
        ]
      }
    }
  ]
}