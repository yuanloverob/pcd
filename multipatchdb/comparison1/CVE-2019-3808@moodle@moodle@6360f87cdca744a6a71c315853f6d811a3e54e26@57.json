{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b402a163e3243e59d0f828ed3d678e9465989e7a",
      "candidate_info": {
        "commit_hash": "b402a163e3243e59d0f828ed3d678e9465989e7a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b402a163e3243e59d0f828ed3d678e9465989e7a",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-64140 core_message: add get_unread_conversation_counts() web service",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1143:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1144:         'ajax' => true,",
          "1145:     ),",
          "1146:     'core_message_get_conversation_members' => array(",
          "1147:         'classname' => 'core_message_external',",
          "1148:         'methodname' => 'get_conversation_members',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1146:     'core_message_get_unread_conversation_counts' => array(",
          "1147:         'classname' => 'core_message_external',",
          "1148:         'methodname' => 'get_unread_conversation_counts',",
          "1149:         'classpath' => 'message/externallib.php',",
          "1150:         'description' => 'Retrieve a list of unread conversation counts, indexed by type.',",
          "1151:         'type' => 'read',",
          "1152:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1153:         'ajax' => true,",
          "1154:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4480:             ]",
          "4481:         );",
          "4482:     }",
          "4483: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4489:     public static function get_unread_conversation_counts_parameters() {",
          "4490:         return new external_function_parameters(",
          "4491:             [",
          "4492:                 'userid' => new external_value(PARAM_INT, 'id of the user, 0 for current user', VALUE_DEFAULT, 0)",
          "4493:             ]",
          "4494:         );",
          "4495:     }",
          "4513:     public static function get_unread_conversation_counts(int $userid) {",
          "4514:         global $CFG, $USER;",
          "4517:         if (empty($CFG->messaging)) {",
          "4518:             throw new moodle_exception('disabled', 'message');",
          "4519:         }",
          "4521:         if (empty($userid)) {",
          "4522:             $userid = $USER->id;",
          "4523:         }",
          "4525:         $params = ['userid' => $userid];",
          "4526:         $params = self::validate_parameters(self::get_unread_conversation_counts_parameters(), $params);",
          "4528:         $systemcontext = context_system::instance();",
          "4529:         self::validate_context($systemcontext);",
          "4531:         if (($USER->id != $params['userid']) && !has_capability('moodle/site:readallmessages', $systemcontext)) {",
          "4532:             throw new moodle_exception('You do not have permission to perform this action.');",
          "4533:         }",
          "4535:         return \\core_message\\api::get_unread_conversation_counts($params['userid']);",
          "4536:     }",
          "4543:     public static function get_unread_conversation_counts_returns() {",
          "4544:         return new external_single_structure(",
          "4545:             [",
          "4546:                 'favourites' => new external_value(PARAM_INT, 'Total number of unread favourite conversations'),",
          "4547:                 'types' => new external_single_structure(",
          "4548:                     [",
          "4549:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => new external_value(PARAM_INT,",
          "4550:                             'Total number of unread individual conversations'),",
          "4551:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => new external_value(PARAM_INT,",
          "4552:                             'Total number of unread group conversations'),",
          "4553:                     ]",
          "4554:                 ),",
          "4555:             ]",
          "4556:         );",
          "4557:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6143:             [",
          "6144:                 'type' => $typeindividual,",
          "6145:                 'users' => [$user1, $user2],",
          "6147:                 'favourites' => [$user1],",
          "6148:                 'enabled' => null // Individual conversations cannot be disabled.",
          "6149:             ],",
          "6150:             [",
          "6151:                 'type' => $typeindividual,",
          "6152:                 'users' => [$user1, $user3],",
          "6154:                 'favourites' => [],",
          "6155:                 'enabled' => null // Individual conversations cannot be disabled.",
          "6156:             ],",
          "",
          "[Removed Lines]",
          "6146:                 'messages' => [$user1, $user2],",
          "6153:                 'messages' => [$user1, $user1],",
          "",
          "[Added Lines]",
          "6146:                 'messages' => [$user1, $user2, $user2],",
          "6153:                 'messages' => [$user1, $user3, $user1],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6161:                 'favourites' => [],",
          "6162:                 'enabled' => true",
          "6163:             ],",
          "6164:             [",
          "6165:                 'type' => $typegroup,",
          "6166:                 'users' => [$user6, $user7],",
          "6168:                 'favourites' => [$user6],",
          "6169:                 'enabled' => false",
          "6170:             ],",
          "",
          "[Removed Lines]",
          "6167:                 'messages' => [$user6, $user7],",
          "",
          "[Added Lines]",
          "6164:             [",
          "6165:                 'type' => $typegroup,",
          "6166:                 'users' => [$user2, $user3, $user4],",
          "6167:                 'messages' => [$user2, $user3, $user4],",
          "6168:                 'favourites' => [],",
          "6169:                 'enabled' => true",
          "6170:             ],",
          "6174:                 'messages' => [$user6, $user7, $user7],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6183:                 'deletemessagesuser' => null,",
          "6184:                 'deletemessages' => [],",
          "6185:                 'arguments' => [$user5],",
          "6187:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6188:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6189:                 ]],",
          "6190:                 'deletedusers' => []",
          "6191:             ],",
          "6193:                 'conversationConfigs' => $conversations,",
          "6194:                 'deletemessagesuser' => null,",
          "6195:                 'deletemessages' => [],",
          "6196:                 'arguments' => [$user4],",
          "6198:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6200:                 ]],",
          "6201:                 'deletedusers' => []",
          "6202:             ],",
          "",
          "[Removed Lines]",
          "6186:                 'expected' => ['favourites' => 0, 'types' => [",
          "6192:             'No individual conversations, 1 group conversation' => [",
          "6197:                 'expected' => ['favourites' => 0, 'types' => [",
          "6199:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6193:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6194:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6195:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6196:                 ]],",
          "6197:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6203:             'No individual conversations, 2 group conversations' => [",
          "6208:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6210:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6211:                 ]],",
          "6212:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6213:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6214:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6205:                 'deletemessagesuser' => null,",
          "6206:                 'deletemessages' => [],",
          "6207:                 'arguments' => [$user1],",
          "6209:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6210:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6211:                 ]],",
          "6212:                 'deletedusers' => []",
          "6213:             ],",
          "6215:                 'conversationConfigs' => $conversations,",
          "6216:                 'deletemessagesuser' => null,",
          "6217:                 'deletemessages' => [],",
          "6218:                 'arguments' => [$user2],",
          "6220:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6222:                 ]],",
          "6223:                 'deletedusers' => []",
          "6224:             ],",
          "6226:                 'conversationConfigs' => $conversations,",
          "6227:                 'deletemessagesuser' => null,",
          "6228:                 'deletemessages' => [],",
          "6229:                 'arguments' => [$user4],",
          "6231:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6233:                 ]],",
          "6234:                 'deletedusers' => []",
          "6235:             ],",
          "",
          "[Removed Lines]",
          "6208:                 'expected' => ['favourites' => 1, 'types' => [",
          "6214:             '1 individual conversation, 1 group conversation' => [",
          "6219:                 'expected' => ['favourites' => 0, 'types' => [",
          "6221:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6225:             '1 group conversation only' => [",
          "6230:                 'expected' => ['favourites' => 0, 'types' => [",
          "6232:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6223:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6224:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6225:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6226:                 ]],",
          "6227:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6233:             '1 individual conversation, 2 group conversations' => [",
          "6238:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6240:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6241:                 ]],",
          "6242:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6243:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6244:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6248:             '2 group conversations only' => [",
          "6253:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6255:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6256:                 ]],",
          "6257:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6258:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6259:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6238:                 'deletemessagesuser' => $user1,",
          "6239:                 'deletemessages' => [0],",
          "6240:                 'arguments' => [$user1],",
          "6242:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6243:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6244:                 ]],",
          "",
          "[Removed Lines]",
          "6241:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6268:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6269:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6270:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6271:                 ]],",
          "6272:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6247:             'All conversation types, delete a message from individual non-favourited, messages remaining' => [",
          "6248:                 'conversationConfigs' => $conversations,",
          "6249:                 'deletemessagesuser' => $user1,",
          "6251:                 'arguments' => [$user1],",
          "6253:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6254:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6255:                 ]],",
          "",
          "[Removed Lines]",
          "6250:                 'deletemessages' => [2],",
          "6252:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6281:                 'deletemessages' => [3],",
          "6283:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6284:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6285:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6286:                 ]],",
          "6287:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6258:             'All conversation types, delete all messages from individual favourited, no messages remaining' => [",
          "6259:                 'conversationConfigs' => $conversations,",
          "6260:                 'deletemessagesuser' => $user1,",
          "6262:                 'arguments' => [$user1],",
          "6264:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6265:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6266:                 ]],",
          "",
          "[Removed Lines]",
          "6261:                 'deletemessages' => [0, 1],",
          "6263:                 'expected' => ['favourites' => 0, 'types' => [",
          "",
          "[Added Lines]",
          "6296:                 'deletemessages' => [0, 1, 2],",
          "6298:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6299:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6300:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6301:                 ]],",
          "6302:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6269:             'All conversation types, delete all messages from individual non-favourited, no messages remaining' => [",
          "6270:                 'conversationConfigs' => $conversations,",
          "6271:                 'deletemessagesuser' => $user1,",
          "6273:                 'arguments' => [$user1],",
          "6275:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6276:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6277:                 ]],",
          "",
          "[Removed Lines]",
          "6272:                 'deletemessages' => [2, 3],",
          "6274:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6311:                 'deletemessages' => [3, 4, 5],",
          "6313:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6314:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6315:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6316:                 ]],",
          "6317:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6280:             'All conversation types, delete all messages from individual favourited, no messages remaining, different user' => [",
          "6281:                 'conversationConfigs' => $conversations,",
          "6282:                 'deletemessagesuser' => $user1,",
          "6284:                 'arguments' => [$user2],",
          "6286:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6288:                 ]],",
          "6289:                 'deletedusers' => []",
          "6290:             ],",
          "6291:             'All conversation types, delete all messages from individual non-favourited, no messages remaining, different user' => [",
          "6292:                 'conversationConfigs' => $conversations,",
          "6293:                 'deletemessagesuser' => $user1,",
          "6295:                 'arguments' => [$user3],",
          "6297:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6299:                 ]],",
          "6300:                 'deletedusers' => []",
          "6301:             ],",
          "6302:             'All conversation types, delete some messages from group non-favourited, messages remaining,' => [",
          "6303:                 'conversationConfigs' => $conversations,",
          "6304:                 'deletemessagesuser' => $user1,",
          "6306:                 'arguments' => [$user1],",
          "6308:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6309:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6310:                 ]],",
          "",
          "[Removed Lines]",
          "6283:                 'deletemessages' => [0, 1],",
          "6285:                 'expected' => ['favourites' => 0, 'types' => [",
          "6287:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6294:                 'deletemessages' => [2, 3],",
          "6296:                 'expected' => ['favourites' => 0, 'types' => [",
          "6298:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6305:                 'deletemessages' => [4, 5],",
          "6307:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6326:                 'deletemessages' => [0, 1, 2],",
          "6328:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6330:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6331:                 ]],",
          "6332:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6333:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6334:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6341:                 'deletemessages' => [3, 4, 5],",
          "6343:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6345:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6346:                 ]],",
          "6347:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6348:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6349:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6356:                 'deletemessages' => [6, 7],",
          "6358:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6359:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6360:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6361:                 ]],",
          "6362:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6313:             'All conversation types, delete all messages from group non-favourited, no messages remaining,' => [",
          "6314:                 'conversationConfigs' => $conversations,",
          "6315:                 'deletemessagesuser' => $user1,",
          "6317:                 'arguments' => [$user1],",
          "6319:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6320:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6321:                 ]],",
          "6322:                 'deletedusers' => []",
          "6323:             ],",
          "6324:             'All conversation types, another user soft deleted' => [",
          "",
          "[Removed Lines]",
          "6316:                 'deletemessages' => [4, 5, 6, 7],",
          "6318:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6371:                 'deletemessages' => [6, 7, 8, 9],",
          "6373:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6377:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6378:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6379:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6380:                 ]],",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6326:                 'deletemessagesuser' => null,",
          "6327:                 'deletemessages' => [],",
          "6328:                 'arguments' => [$user1],",
          "6330:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6331:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6332:                 ]],",
          "",
          "[Removed Lines]",
          "6329:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6388:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6389:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6390:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6391:                 ]],",
          "6392:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6337:                 'deletemessagesuser' => null,",
          "6338:                 'deletemessages' => [],",
          "6339:                 'arguments' => [$user1],",
          "6341:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6342:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6343:                 ]],",
          "",
          "[Removed Lines]",
          "6340:                 'expected' => ['favourites' => 1, 'types' => [",
          "",
          "[Added Lines]",
          "6403:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6404:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6405:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6406:                 ]],",
          "6407:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6348:                 'deletemessagesuser' => null,",
          "6349:                 'deletemessages' => [],",
          "6350:                 'arguments' => [$user6],",
          "6352:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6353:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6354:                 ]],",
          "",
          "[Removed Lines]",
          "6351:                 'expected' => ['favourites' => 0, 'types' => [",
          "",
          "[Added Lines]",
          "6418:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6419:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6420:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6421:                 ]],",
          "6422:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6359:                 'deletemessagesuser' => null,",
          "6360:                 'deletemessages' => [],",
          "6361:                 'arguments' => [$user7],",
          "6363:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6364:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6365:                 ]],",
          "",
          "[Removed Lines]",
          "6362:                 'expected' => ['favourites' => 0, 'types' => [",
          "",
          "[Added Lines]",
          "6433:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6434:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6435:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6436:                 ]],",
          "6437:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6370:                 'deletemessagesuser' => null,",
          "6371:                 'deletemessages' => [],",
          "6372:                 'arguments' => [$user8],",
          "6374:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6375:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6376:                 ]],",
          "",
          "[Removed Lines]",
          "6373:                 'expected' => ['favourites' => 0, 'types' => [",
          "",
          "[Added Lines]",
          "6448:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6449:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6450:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6451:                 ]],",
          "6452:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6395:         $deletemessagesuser,",
          "6396:         $deletemessages,",
          "6397:         $arguments,",
          "6399:         $deletedusers",
          "6400:     ) {",
          "6401:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "6398:         $expected,",
          "",
          "[Added Lines]",
          "6478:         $expectedcounts,",
          "6479:         $expectedunreadcounts,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6454:         $counts = core_message_external::get_conversation_counts(...$arguments);",
          "6455:         $counts = external_api::clean_returnvalue(core_message_external::get_conversation_counts_returns(), $counts);",
          "6459:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6461:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6462:     }",
          "6463: }",
          "",
          "[Removed Lines]",
          "6457:         $this->assertEquals($expected['favourites'], $counts['favourites']);",
          "6458:         $this->assertEquals($expected['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL],",
          "6460:         $this->assertEquals($expected['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "",
          "[Added Lines]",
          "6538:         $this->assertEquals($expectedcounts['favourites'], $counts['favourites']);",
          "6539:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL],",
          "6540:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6541:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6542:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6543:     }",
          "6557:     public function test_get_unread_conversation_counts(",
          "6558:         $conversationconfigs,",
          "6559:         $deletemessagesuser,",
          "6560:         $deletemessages,",
          "6561:         $arguments,",
          "6562:         $expectedcounts,",
          "6563:         $expectedunreadcounts,",
          "6564:         $deletedusers",
          "6565:     ) {",
          "6566:         $this->resetAfterTest();",
          "6567:         $generator = $this->getDataGenerator();",
          "6568:         $users = [",
          "6569:             $generator->create_user(),",
          "6570:             $generator->create_user(),",
          "6571:             $generator->create_user(),",
          "6572:             $generator->create_user(),",
          "6573:             $generator->create_user(),",
          "6574:             $generator->create_user(),",
          "6575:             $generator->create_user(),",
          "6576:             $generator->create_user()",
          "6577:         ];",
          "6579:         $deleteuser = !is_null($deletemessagesuser) ? $users[$deletemessagesuser] : null;",
          "6580:         $this->setUser($users[$arguments[0]]);",
          "6581:         $arguments[0] = $users[$arguments[0]]->id;",
          "6582:         $systemcontext = \\context_system::instance();",
          "6583:         $conversations = [];",
          "6584:         $messageids = [];",
          "6586:         foreach ($conversationconfigs as $config) {",
          "6587:             $conversation = \\core_message\\api::create_conversation(",
          "6588:                 $config['type'],",
          "6589:                 array_map(function($userindex) use ($users) {",
          "6590:                     return $users[$userindex]->id;",
          "6591:                 }, $config['users']),",
          "6592:                 null,",
          "6593:                 ($config['enabled'] ?? true)",
          "6594:             );",
          "6596:             foreach ($config['messages'] as $userfromindex) {",
          "6597:                 $userfrom = $users[$userfromindex];",
          "6598:                 $messageids[] = testhelper::send_fake_message_to_conversation($userfrom, $conversation->id);",
          "6599:             }",
          "6601:             foreach ($config['favourites'] as $userfromindex) {",
          "6602:                 $userfrom = $users[$userfromindex];",
          "6603:                 $usercontext = \\context_user::instance($userfrom->id);",
          "6604:                 $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($usercontext);",
          "6605:                 $ufservice->create_favourite('core_message', 'message_conversations', $conversation->id, $systemcontext);",
          "6606:             }",
          "6608:             $conversations[] = $conversation;",
          "6609:         }",
          "6611:         foreach ($deletemessages as $messageindex) {",
          "6612:             \\core_message\\api::delete_message($deleteuser->id, $messageids[$messageindex]);",
          "6613:         }",
          "6615:         foreach ($deletedusers as $deleteduser) {",
          "6616:             delete_user($users[$deleteduser]);",
          "6617:         }",
          "6619:         $counts = core_message_external::get_unread_conversation_counts(...$arguments);",
          "6620:         $counts = external_api::clean_returnvalue(core_message_external::get_unread_conversation_counts_returns(), $counts);",
          "6622:         $this->assertEquals($expectedunreadcounts['favourites'], $counts['favourites']);",
          "6623:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL],",
          "6625:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018112500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018112500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "569c0bae9c68df4cd047d338117a560f6225ce00",
      "candidate_info": {
        "commit_hash": "569c0bae9c68df4cd047d338117a560f6225ce00",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/569c0bae9c68df4cd047d338117a560f6225ce00",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "version.php"
        ],
        "message": "MDL-63303 message: add get_conversation_between_users external func",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1096:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1097:         'ajax' => true",
          "1098:     ),",
          "1099:     'core_message_get_messages' => array(",
          "1100:         'classname' => 'core_message_external',",
          "1101:         'methodname' => 'get_messages',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1097:         'ajax' => true",
          "1098:     ),",
          "1099:     'core_message_get_conversation_between_users' => array(",
          "1100:         'classname' => 'core_message_external',",
          "1101:         'methodname' => 'get_conversation_between_users',",
          "1102:         'classpath' => 'message/externallib.php',",
          "1103:         'description' => 'Retrieve a conversation for a user between another user',",
          "1104:         'type' => 'read',",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1715:         return self::get_conversation_structure();",
          "1716:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1723:     public static function get_conversation_between_users_parameters() {",
          "1724:         return new external_function_parameters(",
          "1725:             array(",
          "1726:                 'userid' => new external_value(PARAM_INT, 'The id of the user who we are viewing conversations for'),",
          "1727:                 'otheruserid' => new external_value(PARAM_INT, 'The other user id'),",
          "1728:                 'includecontactrequests' => new external_value(PARAM_BOOL, 'Include contact requests in the members'),",
          "1729:                 'includeprivacyinfo' => new external_value(PARAM_BOOL, 'Include privacy info in the members'),",
          "1730:                 'memberlimit' => new external_value(PARAM_INT, 'Limit for number of members', VALUE_DEFAULT, 0),",
          "1731:                 'memberoffset' => new external_value(PARAM_INT, 'Offset for member list', VALUE_DEFAULT, 0),",
          "1732:                 'messagelimit' => new external_value(PARAM_INT, 'Limit for number of messages', VALUE_DEFAULT, 100),",
          "1733:                 'messageoffset' => new external_value(PARAM_INT, 'Offset for messages list', VALUE_DEFAULT, 0),",
          "1734:                 'newestmessagesfirst' => new external_value(PARAM_BOOL, 'Order messages by newest first', VALUE_DEFAULT, true)",
          "1735:             )",
          "1736:         );",
          "1737:     }",
          "1754:     public static function get_conversation_between_users(",
          "1755:         int $userid,",
          "1756:         int $otheruserid,",
          "1757:         bool $includecontactrequests = false,",
          "1758:         bool $includeprivacyinfo = false,",
          "1759:         int $memberlimit = 0,",
          "1760:         int $memberoffset = 0,",
          "1761:         int $messagelimit = 0,",
          "1762:         int $messageoffset = 0,",
          "1763:         bool $newestmessagesfirst = true",
          "1764:     ) {",
          "1765:         global $CFG, $DB, $USER;",
          "1768:         if (empty($CFG->messaging)) {",
          "1769:             throw new moodle_exception('disabled', 'message');",
          "1770:         }",
          "1772:         $params = [",
          "1773:             'userid' => $userid,",
          "1774:             'otheruserid' => $otheruserid,",
          "1775:             'includecontactrequests' => $includecontactrequests,",
          "1776:             'includeprivacyinfo' => $includeprivacyinfo,",
          "1777:             'memberlimit' => $memberlimit,",
          "1778:             'memberoffset' => $memberoffset,",
          "1779:             'messagelimit' => $messagelimit,",
          "1780:             'messageoffset' => $messageoffset,",
          "1781:             'newestmessagesfirst' => $newestmessagesfirst",
          "1782:         ];",
          "1783:         self::validate_parameters(self::get_conversation_between_users_parameters(), $params);",
          "1785:         $systemcontext = context_system::instance();",
          "1786:         self::validate_context($systemcontext);",
          "1788:         $conversationid = \\core_message\\api::get_conversation_between_users([$params['userid'], $params['otheruserid']]);",
          "1789:         $conversation = null;",
          "1791:         if ($conversationid) {",
          "1792:             $conversation = \\core_message\\api::get_conversation(",
          "1793:                 $params['userid'],",
          "1794:                 $conversationid,",
          "1795:                 $params['includecontactrequests'],",
          "1796:                 $params['includeprivacyinfo'],",
          "1797:                 $params['memberlimit'],",
          "1798:                 $params['memberoffset'],",
          "1799:                 $params['messagelimit'],",
          "1800:                 $params['messageoffset'],",
          "1801:                 $params['newestmessagesfirst']",
          "1802:             );",
          "1803:         }",
          "1805:         if ($conversation) {",
          "1806:             return $conversation;",
          "1807:         } else {",
          "1810:             throw new \\moodle_exception('Conversation does not exist');",
          "1811:         }",
          "1812:     }",
          "1819:     public static function get_conversation_between_users_returns() {",
          "1820:         return self::get_conversation_structure(true);",
          "1821:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111301.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018111301.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bdc254cd2429670f5d2d7965cc85e2a3de3f66b",
      "candidate_info": {
        "commit_hash": "2bdc254cd2429670f5d2d7965cc85e2a3de3f66b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2bdc254cd2429670f5d2d7965cc85e2a3de3f66b",
        "files": [
          "badges/assertion.php",
          "badges/badge_json.php",
          "badges/classes/assertion.php",
          "badges/competency.php",
          "badges/competency_action.php",
          "badges/competency_form.php",
          "badges/edit.php",
          "badges/edit_form.php",
          "badges/endorsement.php",
          "badges/endorsement_form.php",
          "badges/endorsement_json.php",
          "badges/image_author_json.php",
          "badges/newbadge.php",
          "badges/related.php",
          "badges/related_action.php",
          "badges/related_form.php",
          "badges/renderer.php",
          "badges/tests/badgeslib_test.php",
          "badges/tests/behat/add_badge.feature",
          "lang/en/badges.php",
          "lib/badgeslib.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-58454-master' of git://github.com/junpataleta/moodle",
        "before_after_code_files": [
          "badges/assertion.php||badges/assertion.php",
          "badges/badge_json.php||badges/badge_json.php",
          "badges/classes/assertion.php||badges/classes/assertion.php",
          "badges/competency.php||badges/competency.php",
          "badges/competency_action.php||badges/competency_action.php",
          "badges/competency_form.php||badges/competency_form.php",
          "badges/edit.php||badges/edit.php",
          "badges/edit_form.php||badges/edit_form.php",
          "badges/endorsement.php||badges/endorsement.php",
          "badges/endorsement_form.php||badges/endorsement_form.php",
          "badges/endorsement_json.php||badges/endorsement_json.php",
          "badges/image_author_json.php||badges/image_author_json.php",
          "badges/newbadge.php||badges/newbadge.php",
          "badges/related.php||badges/related.php",
          "badges/related_action.php||badges/related_action.php",
          "badges/related_form.php||badges/related_form.php",
          "badges/renderer.php||badges/renderer.php",
          "badges/tests/badgeslib_test.php||badges/tests/badgeslib_test.php",
          "badges/tests/behat/add_badge.feature||badges/tests/behat/add_badge.feature",
          "lang/en/badges.php||lang/en/badges.php",
          "lib/badgeslib.php||lib/badgeslib.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "badges/assertion.php||badges/assertion.php": [
          "File: badges/assertion.php -> badges/assertion.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: $hash = required_param('b', PARAM_ALPHANUM); // Issued badge unique hash for badge assertion.",
          "37: $action = optional_param('action', null, PARAM_BOOL); // Generates badge class if true.",
          "41: if (!is_null($action)) {",
          "",
          "[Removed Lines]",
          "39: $assertion = new core_badges_assertion($hash);",
          "",
          "[Added Lines]",
          "38: $obversion = optional_param('obversion', OPEN_BADGES_V1, PARAM_INT); // For control format OB specification version.",
          "40: $assertion = new core_badges_assertion($hash, $obversion);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         $json = $assertion->get_badge_assertion();",
          "49:     } else { // Revoked badge.",
          "50:         header(\"HTTP/1.0 410 Gone\");",
          "52:         die();",
          "53:     }",
          "54: }",
          "57: echo $OUTPUT->header();",
          "58: echo json_encode($json);",
          "",
          "[Removed Lines]",
          "51:         echo json_encode(array(\"revoked\" => true));",
          "",
          "[Added Lines]",
          "52:         $assertion = array();",
          "53:         if ($obversion == OPEN_BADGES_V2) {",
          "54:             $assertionurl = new moodle_url('/badges/assertion.php', array('b' => $hash));",
          "55:             $assertion['id'] = $assertionurl->out();",
          "56:         }",
          "57:         $assertion['revoked'] = true;",
          "58:         echo json_encode($assertion);",
          "",
          "---------------"
        ],
        "badges/badge_json.php||badges/badge_json.php": [
          "File: badges/badge_json.php -> badges/badge_json.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: define('AJAX_SCRIPT', true);",
          "27: define('NO_MOODLE_COOKIES', true); // No need for a session here.",
          "29: require_once(__DIR__ . '/../config.php');",
          "30: require_once($CFG->libdir . '/badgeslib.php');",
          "32: $id = required_param('id', PARAM_INT);",
          "33: $action = optional_param('action', null, PARAM_INT); // Generates badge class if true.",
          "34: $json = array();",
          "35: $badge = new badge($id);",
          "36: if ($badge->status != BADGE_STATUS_INACTIVE) {",
          "37:     if (is_null($action)) {",
          "39:         if (empty($badge->courseid)) {",
          "40:             $context = context_system::instance();",
          "41:         } else {",
          "42:             $context = context_course::instance($badge->courseid);",
          "43:         }",
          "44:         $urlimage = moodle_url::make_pluginfile_url($context->id, 'badges', 'badgeimage', $badge->id, '/', 'f1')->out(false);",
          "46:         $url = new moodle_url('/badges/badge_json.php', array('id' => $badge->id));",
          "48:         $json['name'] = $badge->name;",
          "49:         $json['description'] = $badge->description;",
          "50:         if ($badge->imageauthorname ||",
          "51:                 $badge->imageauthoremail ||",
          "52:                 $badge->imageauthorurl ||",
          "53:                 $badge->imagecaption) {",
          "54:             $urlimage = moodle_url::make_pluginfile_url($context->id,",
          "55:                 'badges', 'badgeimage', $badge->id, '/', 'f1')->out(false);",
          "56:             $json['image'] = array();",
          "57:             $json['image']['id'] = $urlimage;",
          "58:             if ($badge->imageauthorname || $badge->imageauthoremail || $badge->imageauthorurl) {",
          "59:                 $authorimage = new moodle_url('/badges/image_author_json.php', array('id' => $badge->id));",
          "60:                 $json['image']['author'] = $authorimage->out(false);",
          "61:             }",
          "62:             if ($badge->imagecaption) {",
          "63:                 $json['image']['caption'] = $badge->imagecaption;",
          "64:             }",
          "65:         } else {",
          "66:             $json['image'] = $urlimage;",
          "67:         }",
          "69:         $json['criteria']['id'] = $url->out(false);",
          "70:         $json['criteria']['narrative'] = $badge->markdown_badge_criteria();",
          "71:         $json['issuer'] = $badge->get_badge_issuer();",
          "72:         $json['@context'] = OPEN_BADGES_V2_CONTEXT;",
          "73:         $json['id'] = $url->out();",
          "74:         $json['type'] = OPEN_BADGES_V2_TYPE_BADGE;",
          "75:         if (!empty($badge->version)) {",
          "76:             $json['version'] = $badge->version;",
          "77:         }",
          "78:         if (!empty($badge->language)) {",
          "79:             $json['@language'] = $badge->language;",
          "80:         }",
          "82:         $relatedbadges = $badge->get_related_badges(true);",
          "83:         if (!empty($relatedbadges)) {",
          "84:             foreach ($relatedbadges as $related) {",
          "85:                 $relatedurl = new moodle_url('/badges/badge_json.php', array('id' => $related->id));",
          "86:                 $relateds[] = array('id' => $relatedurl->out(false),",
          "87:                     'version' => $related->version, '@language' => $related->language);",
          "88:             }",
          "89:              $json['related'] = $relateds;",
          "90:         }",
          "92:         $endorsement = $badge->get_endorsement();",
          "93:         if (!empty($endorsement)) {",
          "94:             $endorsementurl = new moodle_url('/badges/endorsement_json.php', array('id' => $badge->id));",
          "95:             $json['endorsement'] = $endorsementurl->out(false);",
          "96:         }",
          "98:         $competencies = $badge->get_alignment();",
          "99:         if (!empty($competencies)) {",
          "100:             foreach ($competencies as $item) {",
          "101:                 $alignment = array('targetName' => $item->targetname, 'targetUrl' => $item->targeturl);",
          "102:                 if ($item->targetdescription) {",
          "103:                     $alignment['targetDescription'] = $item->targetdescription;",
          "104:                 }",
          "105:                 if ($item->targetframework) {",
          "106:                     $alignment['targetFramework'] = $item->targetframework;",
          "107:                 }",
          "108:                 if ($item->targetcode) {",
          "109:                     $alignment['targetCode'] = $item->targetcode;",
          "110:                 }",
          "111:                 $json['alignment'][] = $alignment;",
          "112:             }",
          "113:         }",
          "114:     } else if ($action == 0) {",
          "116:         $json = $badge->get_json_issuer_related_badge();",
          "117:     }",
          "118: } else {",
          "120:     header(\"HTTP/1.0 410 Gone\");",
          "121:     $badgeurl = new moodle_url('/badges/badge_json.php', array('id' => $id));",
          "122:     $json['id'] = $badgeurl->out();",
          "123:     $json['error'] = get_string('error:relatedbadgedoesntexist', 'badges');",
          "124: }",
          "125: echo $OUTPUT->header();",
          "126: echo json_encode($json);",
          "",
          "---------------"
        ],
        "badges/classes/assertion.php||badges/classes/assertion.php": [
          "File: badges/classes/assertion.php -> badges/classes/assertion.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: require_once($CFG->libdir . '/badgeslib.php');",
          "38: require_once($CFG->dirroot . '/badges/renderer.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     private $_url;",
          "55:         global $DB;",
          "57:         $this->_data = $DB->get_record_sql('",
          "",
          "[Removed Lines]",
          "54:     public function __construct($hash) {",
          "",
          "[Added Lines]",
          "52:     private $_obversion = OPEN_BADGES_V1;",
          "60:     public function __construct($hash, $obversion = OPEN_BADGES_V1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         } else {",
          "79:             $this->_url = new moodle_url('/badges/badge.php');",
          "80:         }",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         $this->_obversion = $obversion;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:             if (!empty($this->_data->dateexpire)) {",
          "112:                 $assertion['expires'] = $this->_data->dateexpire;",
          "113:             }",
          "114:         }",
          "115:         return $assertion;",
          "116:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:             $this->embed_data_badge_version2($assertion, OPEN_BADGES_V2_TYPE_ASSERTION);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:             $class['image'] = moodle_url::make_pluginfile_url($context->id, 'badges', 'badgeimage', $this->_data->id, '/', 'f1')->out(false);",
          "137:             $class['criteria'] = $this->_url->out(false); // Currently issued badge URL.",
          "138:             $class['issuer'] = $issuerurl->out(false);",
          "139:         }",
          "140:         return $class;",
          "141:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:             $this->embed_data_badge_version2($class, OPEN_BADGES_V2_TYPE_BADGE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:                 $issuer['email'] = $this->_data->issuercontact;",
          "157:             }",
          "158:         }",
          "159:         return $issuer;",
          "160:     }",
          "162: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:         $this->embed_data_badge_version2($issuer, OPEN_BADGES_V2_TYPE_ISSUER);",
          "178:     public function get_related_badges(badge $badge) {",
          "179:         global $DB;",
          "180:         $arraybadges = array();",
          "181:         $relatedbadges = $badge->get_related_badges(true);",
          "182:         if ($relatedbadges) {",
          "183:             foreach ($relatedbadges as $rb) {",
          "184:                 $url = new moodle_url('/badges/badge_json.php', array('id' => $rb->id));",
          "185:                 $arraybadges[] = array(",
          "186:                     'id'        => $url->out(false),",
          "187:                     'version'   => $rb->version,",
          "188:                     '@language' => $rb->language",
          "189:                 );",
          "190:             }",
          "191:         }",
          "192:         return $arraybadges;",
          "193:     }",
          "200:     public function get_endorsement() {",
          "201:         global $DB;",
          "202:         $endorsement = array();",
          "203:         $record = $DB->get_record_select('badge_endorsement', 'badgeid = ?', array($this->_data->id));",
          "204:         return $record;",
          "205:     }",
          "212:     public function get_criteria_badge_class() {",
          "213:         $badge = new badge($this->_data->id);",
          "214:         $narrative = $badge->markdown_badge_criteria();",
          "215:         if (!empty($narrative)) {",
          "216:             $criteria = array();",
          "217:             $criteria['id'] = $this->_url->out(false);",
          "218:             $criteria['narrative'] = $narrative;",
          "219:             return $criteria;",
          "220:         } else {",
          "221:             return $this->_url->out(false);",
          "222:         }",
          "223:     }",
          "230:     public function get_competencies_alignment() {",
          "231:         global $DB;",
          "232:         $badgeid = $this->_data->id;",
          "233:         $alignments = array();",
          "234:         $items = $DB->get_records_select('badge_competencies', 'badgeid = ?', array($badgeid));",
          "235:         foreach ($items as $item) {",
          "236:             $alignment = array('targetName' => $item->targetname, 'targetUrl' => $item->targeturl);",
          "237:             if ($item->targetdescription) {",
          "238:                 $alignment['targetDescription'] = $item->targetdescription;",
          "239:             }",
          "240:             if ($item->targetframework) {",
          "241:                 $alignment['targetFramework'] = $item->targetframework;",
          "242:             }",
          "243:             if ($item->targetcode) {",
          "244:                 $alignment['targetCode'] = $item->targetcode;",
          "245:             }",
          "246:             $alignments[] = $alignment;",
          "247:         }",
          "248:         return $alignments;",
          "249:     }",
          "257:     protected function embed_data_badge_version2 (&$json, $type = OPEN_BADGES_V2_TYPE_ASSERTION) {",
          "259:         if ($this->_obversion == OPEN_BADGES_V2) {",
          "260:             $badge = new badge($this->_data->id);",
          "261:             if (empty($this->_data->courseid)) {",
          "262:                 $context = context_system::instance();",
          "263:             } else {",
          "264:                 $context = context_course::instance($this->_data->courseid);",
          "265:             }",
          "267:             $hash = $this->_data->uniquehash;",
          "268:             $assertionsurl = new moodle_url('/badges/assertion.php', array('b' => $hash, 'obversion' => $this->_obversion));",
          "269:             $classurl = new moodle_url(",
          "270:                 '/badges/assertion.php',",
          "271:                 array('b' => $hash, 'action' => 1, 'obversion' => $this->_obversion)",
          "272:             );",
          "273:             $issuerurl = new moodle_url('/badges/assertion.php', array('b' => $this->_data->uniquehash, 'action' => 0,",
          "274:                 'obversion' => $this->_obversion));",
          "276:             if ($type == OPEN_BADGES_V2_TYPE_ASSERTION) {",
          "277:                 $json['@context'] = OPEN_BADGES_V2_CONTEXT;",
          "278:                 $json['type'] = OPEN_BADGES_V2_TYPE_ASSERTION;",
          "279:                 $json['id'] = $assertionsurl->out(false);",
          "280:                 $json['badge'] = $this->get_badge_class();",
          "281:                 $json['issuedOn'] = date('c', $this->_data->dateissued);",
          "282:                 if (!empty($this->_data->dateexpire)) {",
          "283:                     $json['expires'] = date('c', $this->_data->dateexpire);",
          "284:                 }",
          "285:                 unset($json['uid']);",
          "286:             }",
          "289:             if ($type == OPEN_BADGES_V2_TYPE_BADGE) {",
          "290:                 $json['@context'] = OPEN_BADGES_V2_CONTEXT;",
          "291:                 $json['id'] = $classurl->out(false);",
          "292:                 $json['type'] = OPEN_BADGES_V2_TYPE_BADGE;",
          "293:                 $json['version'] = $this->_data->version;",
          "294:                 $json['criteria'] = $this->get_criteria_badge_class();",
          "295:                 $json['issuer'] = $this->get_issuer();",
          "296:                 $json['@language'] = $this->_data->language;",
          "297:                 if (!empty($relatedbadges = $this->get_related_badges($badge))) {",
          "298:                     $json['related'] = $relatedbadges;",
          "299:                 }",
          "300:                 if ($endorsement = $this->get_endorsement()) {",
          "301:                     $endorsementurl = new moodle_url('/badges/endorsement_json.php', array('id' => $this->_data->id));",
          "302:                     $json['endorsement'] = $endorsementurl->out(false);",
          "303:                 }",
          "304:                 if ($competencies = $this->get_competencies_alignment()) {",
          "305:                     $json['alignment'] = $competencies;",
          "306:                 }",
          "307:                 if ($this->_data->imageauthorname ||",
          "308:                         $this->_data->imageauthoremail ||",
          "309:                         $this->_data->imageauthorurl ||",
          "310:                         $this->_data->imagecaption) {",
          "311:                     $urlimage = moodle_url::make_pluginfile_url($context->id,",
          "312:                         'badges', 'badgeimage', $this->_data->id, '/', 'f1')->out(false);",
          "313:                     $json['image'] = array();",
          "314:                     $json['image']['id'] = $urlimage;",
          "315:                     if ($this->_data->imageauthorname || $this->_data->imageauthoremail || $this->_data->imageauthorurl) {",
          "316:                         $authorimage = new moodle_url('/badges/image_author_json.php', array('id' => $this->_data->id));",
          "317:                         $json['image']['author'] = $authorimage->out(false);",
          "318:                     }",
          "319:                     if ($this->_data->imagecaption) {",
          "320:                         $json['image']['caption'] = $this->_data->imagecaption;",
          "321:                     }",
          "322:                 }",
          "323:             }",
          "326:             if ($type == OPEN_BADGES_V2_TYPE_ISSUER) {",
          "327:                 $json['@context'] = OPEN_BADGES_V2_CONTEXT;",
          "328:                 $json['id'] = $issuerurl->out(false);",
          "329:                 $json['type'] = OPEN_BADGES_V2_TYPE_ISSUER;",
          "330:             }",
          "331:         }",
          "332:     }",
          "",
          "---------------"
        ],
        "badges/competency.php||badges/competency.php": [
          "File: badges/competency.php -> badges/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../config.php');",
          "26: require_once($CFG->libdir . '/badgeslib.php');",
          "27: require_once($CFG->dirroot . '/badges/competency_form.php');",
          "29: $badgeid = required_param('id', PARAM_INT);",
          "30: $alignmentid = optional_param('alignmentid', 0, PARAM_INT);",
          "31: $action = optional_param('action', '', PARAM_TEXT);",
          "32: $lang = current_language();",
          "34: require_login();",
          "35: if (empty($CFG->enablebadges)) {",
          "36:     print_error('badgesdisabled', 'badges');",
          "37: }",
          "38: $badge = new badge($badgeid);",
          "39: $context = $badge->get_context();",
          "40: $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type));",
          "41: require_capability('moodle/badges:configuredetails', $context);",
          "43: if ($badge->type == BADGE_TYPE_COURSE) {",
          "44:     if (empty($CFG->badges_allowcoursebadges)) {",
          "45:         print_error('coursebadgesdisabled', 'badges');",
          "46:     }",
          "47:     require_login($badge->courseid);",
          "48:     $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type, 'id' => $badge->courseid));",
          "49:     $PAGE->set_pagelayout('standard');",
          "50:     navigation_node::override_active_url($navurl);",
          "51: } else {",
          "52:     $PAGE->set_pagelayout('admin');",
          "53:     navigation_node::override_active_url($navurl, true);",
          "54: }",
          "56: $currenturl = new moodle_url('/badges/competency.php', array('id' => $badge->id));",
          "57: $PAGE->set_context($context);",
          "58: $PAGE->set_url($currenturl);",
          "59: $PAGE->set_heading($badge->name);",
          "60: $PAGE->set_title($badge->name);",
          "61: $PAGE->navbar->add($badge->name);",
          "63: $output = $PAGE->get_renderer('core', 'badges');",
          "64: $msg = optional_param('msg', '', PARAM_TEXT);",
          "65: $emsg = optional_param('emsg', '', PARAM_TEXT);",
          "66: $url = new moodle_url('/badges/competency.php', array('id' => $badge->id, 'action' => $action, 'alignmentid' => $alignmentid));",
          "67: $mform = new competency_alignment_form($url, array('badge' => $badge, 'action' => $action, 'alignmentid' => $alignmentid));",
          "68: if ($mform->is_cancelled()) {",
          "69:     redirect($currenturl);",
          "70: } else if ($mform->is_submitted() && $mform->is_validated() && ($data = $mform->get_data())) {",
          "71:     $alignment = new stdClass();",
          "72:     $alignment->badgeid = $badgeid;",
          "73:     $alignment->targetname = $data->targetname;",
          "74:     $alignment->targeturl = $data->targeturl;",
          "75:     $alignment->targetframework = $data->targetframework;",
          "76:     $alignment->targetcode = $data->targetcode;",
          "77:     $alignment->targetdescription = trim($data->targetdescription);",
          "78:     $badge->save_alignment($alignment, $alignmentid);",
          "79:     redirect($currenturl);",
          "80: }",
          "82: echo $OUTPUT->header();",
          "83: echo $OUTPUT->heading(print_badge_image($badge, $context, 'small') . ' ' . $badge->name);",
          "84: echo $output->print_badge_status_box($badge);",
          "85: $output->print_badge_tabs($badgeid, $context, 'alignment');",
          "86: if ($emsg !== '') {",
          "87:     echo $OUTPUT->notification($emsg);",
          "88: } else if ($msg !== '') {",
          "89:     echo $OUTPUT->notification(get_string($msg, 'badges'), 'notifysuccess');",
          "90: }",
          "91: echo $output->notification(get_string('notealignment', 'badges'), 'info');",
          "93: if ($alignmentid || $action == 'add' || $action == 'edit') {",
          "94:     $mform->display();",
          "95: } else if (empty($action)) {",
          "96:     if (!$badge->is_active() && !$badge->is_locked()) {",
          "97:         $urlbutton = new moodle_url('/badges/competency.php', array('id' => $badge->id, 'action' => 'add'));",
          "98:         echo $OUTPUT->box($OUTPUT->single_button($urlbutton, get_string('addalignment', 'badges')), 'clearfix mdl-align');",
          "99:     }",
          "100:     $alignment = $badge->get_alignment();",
          "101:     if (count($alignment) > 0) {",
          "102:         $renderrelated = new badge_competencies_alignment($alignment, $badgeid);",
          "103:         echo $output->render($renderrelated);",
          "104:     } else {",
          "105:         echo $output->notification(get_string('noalignment', 'badges'));",
          "106:     }",
          "107: }",
          "109: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "badges/competency_action.php||badges/competency_action.php": [
          "File: badges/competency_action.php -> badges/competency_action.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../config.php');",
          "26: require_once($CFG->libdir . '/badgeslib.php');",
          "28: $alignmentid = required_param('alignmentid', PARAM_INT); // Related badge ID.",
          "29: $badgeid = required_param('id', PARAM_INT); // Badge ID.",
          "30: $action = optional_param('action', 'remove', PARAM_TEXT); // Remove.",
          "32: require_login();",
          "33: $return = new moodle_url('/badges/competency.php', array('id' => $badgeid));",
          "34: $badge = new badge($badgeid);",
          "35: $context = $badge->get_context();",
          "36: require_capability('moodle/badges:configuredetails', $context);",
          "38: if ($action == 'remove') {",
          "39:     $badge->delete_alignment($alignmentid);",
          "40: }",
          "41: redirect($return);",
          "",
          "---------------"
        ],
        "badges/competency_form.php||badges/competency_form.php": [
          "File: badges/competency_form.php -> badges/competency_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: require_once($CFG->libdir . '/formslib.php');",
          "27: require_once($CFG->libdir . '/badgeslib.php');",
          "36: class competency_alignment_form extends moodleform {",
          "41:     public function definition() {",
          "42:         global $DB;",
          "43:         $mform = $this->_form;",
          "44:         $badge = $this->_customdata['badge'];",
          "45:         $action = $this->_customdata['action'];",
          "46:         $alignmentid = $this->_customdata['alignmentid'];",
          "47:         $mform->addElement('header', 'alignment', get_string('alignment', 'badges'));",
          "48:         $mform->addElement('text', 'targetname', get_string('targetname', 'badges'), array('size' => '70'));",
          "49:         $mform->setType('targetname', PARAM_TEXT);",
          "50:         $mform->addRule('targetname', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');",
          "51:         $mform->addRule('targetname', null, 'required');",
          "52:         $mform->addHelpButton('targetname', 'targetname', 'badges');",
          "53:         $mform->addElement('text', 'targeturl', get_string('targeturl', 'badges'), array('size' => '70'));",
          "54:         $mform->setType('targeturl', PARAM_URL);",
          "55:         $mform->addRule('targeturl', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');",
          "56:         $mform->addRule('targeturl', null, 'required');",
          "57:         $mform->addHelpButton('targeturl', 'targeturl', 'badges');",
          "58:         $mform->addElement('text', 'targetframework', get_string('targetframework', 'badges'), array('size' => '70'));",
          "59:         $mform->setType('targetframework', PARAM_TEXT);",
          "60:         $mform->addRule('targetframework', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');",
          "61:         $mform->addHelpButton('targetframework', 'targetframework', 'badges');",
          "62:         $mform->addElement('text', 'targetcode', get_string('targetcode', 'badges'), array('size' => '70'));",
          "63:         $mform->setType('targetcode', PARAM_TEXT);",
          "64:         $mform->addRule('targetcode', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');",
          "65:         $mform->addHelpButton('targetcode', 'targetcode', 'badges');",
          "66:         $mform->addElement('textarea', 'targetdescription', get_string('targetdescription', 'badges'),",
          "67:             'wrap=\"virtual\" rows=\"8\" cols=\"70\"');",
          "68:         $this->add_action_buttons();",
          "69:         if ($action == 'edit' || $alignmentid) {",
          "70:             $alignment = new stdClass();",
          "71:             $alignment = $DB->get_record_select('badge_competencies', 'id = ?', array($alignmentid));",
          "72:             $this->set_data($alignment);",
          "74:             if ($badge->is_active() || $badge->is_locked()) {",
          "75:                 $mform->hardFreezeAllVisibleExcept(array());",
          "76:             }",
          "77:         }",
          "78:     }",
          "79: }",
          "",
          "---------------"
        ],
        "badges/edit.php||badges/edit.php": [
          "File: badges/edit.php -> badges/edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         );",
          "85: $badge = file_prepare_standard_editor($badge, 'message', $editoroptions, $context);",
          "90: if ($form->is_cancelled()) {",
          "91:     redirect(new moodle_url('/badges/overview.php', array('id' => $badgeid)));",
          "92: } else if ($form->is_submitted() && $form->is_validated() && ($data = $form->get_data())) {",
          "93:     if ($action == 'details') {",
          "94:         $badge->name = $data->name;",
          "95:         $badge->description = $data->description;",
          "96:         $badge->usermodified = $USER->id;",
          "97:         $badge->issuername = $data->issuername;",
          "98:         $badge->issuerurl = $data->issuerurl;",
          "",
          "[Removed Lines]",
          "87: $form_class = 'edit_' . $action . '_form';",
          "88: $form = new $form_class($currenturl, array('badge' => $badge, 'action' => $action, 'editoroptions' => $editoroptions));",
          "",
          "[Added Lines]",
          "87: $formclass = 'edit_' . $action . '_form';",
          "88: $form = new $formclass($currenturl, array('badge' => $badge, 'action' => $action, 'editoroptions' => $editoroptions));",
          "95:         $badge->version = trim($data->version);",
          "96:         $badge->language = $data->language;",
          "98:         $badge->imageauthorname = $data->imageauthorname;",
          "99:         $badge->imageauthoremail = $data->imageauthoremail;",
          "100:         $badge->imageauthorurl = $data->imageauthorurl;",
          "101:         $badge->imagecaption = $data->imagecaption;",
          "",
          "---------------"
        ],
        "badges/edit_form.php||badges/edit_form.php": [
          "File: badges/edit_form.php -> badges/edit_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         $mform = $this->_form;",
          "46:         $badge = (isset($this->_customdata['badge'])) ? $this->_customdata['badge'] : false;",
          "47:         $action = $this->_customdata['action'];",
          "49:         $mform->addElement('header', 'badgedetails', get_string('badgedetails', 'badges'));",
          "50:         $mform->addElement('text', 'name', get_string('name'), array('size' => '70'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:         $languages = get_string_manager()->get_list_of_languages();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         $mform->addRule('name', null, 'required');",
          "54:         $mform->addRule('name', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');",
          "56:         $mform->addElement('textarea', 'description', get_string('description', 'badges'), 'wrap=\"virtual\" rows=\"8\" cols=\"70\"');",
          "57:         $mform->setType('description', PARAM_NOTAGS);",
          "58:         $mform->addRule('description', null, 'required');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         $mform->addElement('text', 'version', get_string('version', 'badges'), array('size' => '70'));",
          "58:         $mform->setType('version', PARAM_TEXT);",
          "59:         $mform->addHelpButton('version', 'version', 'badges');",
          "60:         $mform->addElement('select', 'language', get_string('language'), $languages);",
          "61:         $mform->addHelpButton('language', 'language', 'badges');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:             $mform->insertElementBefore($currentimage, 'image');",
          "69:         }",
          "70:         $mform->addHelpButton('image', 'badgeimage', 'badges');",
          "72:         $mform->addElement('header', 'issuerdetails', get_string('issuerdetails', 'badges'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         $mform->addElement('text', 'imageauthorname', get_string('imageauthorname', 'badges'), array('size' => '70'));",
          "79:         $mform->setType('imageauthorname', PARAM_TEXT);",
          "80:         $mform->addHelpButton('imageauthorname', 'imageauthorname', 'badges');",
          "81:         $mform->addElement('text', 'imageauthoremail', get_string('imageauthoremail', 'badges'), array('size' => '70'));",
          "82:         $mform->setType('imageauthoremail', PARAM_TEXT);",
          "83:         $mform->addHelpButton('imageauthoremail', 'imageauthoremail', 'badges');",
          "84:         $mform->addElement('text', 'imageauthorurl', get_string('imageauthorurl', 'badges'), array('size' => '70'));",
          "85:         $mform->setType('imageauthorurl', PARAM_URL);",
          "86:         $mform->addHelpButton('imageauthorurl', 'imageauthorurl', 'badges');",
          "87:         $mform->addElement('text', 'imagecaption', get_string('imagecaption', 'badges'), array('size' => '70'));",
          "88:         $mform->setType('imagecaption', PARAM_TEXT);",
          "89:         $mform->addHelpButton('imagecaption', 'imagecaption', 'badges');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:         $mform->setType('action', PARAM_TEXT);",
          "120:         if ($action == 'new') {",
          "121:             $this->add_action_buttons(true, get_string('createbutton', 'badges'));",
          "122:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:             $mform->setDefault('language', $CFG->lang);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:             $errors['expirydategr'] = get_string('error:invalidexpiredate', 'badges');",
          "175:         }",
          "178:         if ($data['action'] == 'new') {",
          "179:             $duplicate = $DB->record_exists_select('badge', 'name = :name AND status != :deleted',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:         if ($data['imageauthoremail'] && !validate_email($data['imageauthoremail'])) {",
          "198:             $errors['imageauthoremail'] = get_string('invalidemail');",
          "199:         }",
          "",
          "---------------"
        ],
        "badges/endorsement.php||badges/endorsement.php": [
          "File: badges/endorsement.php -> badges/endorsement.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../config.php');",
          "26: require_once($CFG->libdir . '/badgeslib.php');",
          "27: require_once($CFG->dirroot . '/badges/endorsement_form.php');",
          "29: $badgeid = required_param('id', PARAM_INT);",
          "31: require_login();",
          "33: if (empty($CFG->enablebadges)) {",
          "34:     print_error('badgesdisabled', 'badges');",
          "35: }",
          "37: $badge = new badge($badgeid);",
          "38: $context = $badge->get_context();",
          "39: $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type));",
          "40: require_capability('moodle/badges:configuredetails', $context);",
          "42: if ($badge->type == BADGE_TYPE_COURSE) {",
          "43:     if (empty($CFG->badges_allowcoursebadges)) {",
          "44:         print_error('coursebadgesdisabled', 'badges');",
          "45:     }",
          "46:     require_login($badge->courseid);",
          "47:     $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type, 'id' => $badge->courseid));",
          "48:     $PAGE->set_pagelayout('standard');",
          "49:     navigation_node::override_active_url($navurl);",
          "50: } else {",
          "51:     $PAGE->set_pagelayout('admin');",
          "52:     navigation_node::override_active_url($navurl, true);",
          "53: }",
          "55: $currenturl = new moodle_url('/badges/endorsement.php', array('id' => $badgeid));",
          "56: $PAGE->set_context($context);",
          "57: $PAGE->set_url($currenturl);",
          "58: $PAGE->set_heading($badge->name);",
          "59: $PAGE->set_title($badge->name);",
          "60: $PAGE->navbar->add($badge->name);",
          "62: $output = $PAGE->get_renderer('core', 'badges');",
          "63: $msg = optional_param('msg', '', PARAM_TEXT);",
          "64: $emsg = optional_param('emsg', '', PARAM_TEXT);",
          "66: echo $OUTPUT->header();",
          "67: echo $OUTPUT->heading(print_badge_image($badge, $context, 'small') . ' ' . $badge->name);",
          "69: echo $output->print_badge_status_box($badge);",
          "70: $output->print_badge_tabs($badgeid, $context, 'bendorsement');",
          "72: $form = new endorsement_form($currenturl, array('badge' => $badge));",
          "73: if ($form->is_cancelled()) {",
          "74:     redirect(new moodle_url('/badges/overview.php', array('id' => $badgeid)));",
          "75: } else if ($form->is_submitted() && $form->is_validated() && ($data = $form->get_data())) {",
          "76:     $endorsement = new stdClass();",
          "77:     $endorsement->badgeid = $badgeid;",
          "78:     $endorsement->issuername = $data->issuername;",
          "79:     $endorsement->issueremail = $data->issueremail;",
          "80:     $endorsement->issuerurl = $data->issuerurl;",
          "81:     $endorsement->claimid = $data->claimid;",
          "82:     $endorsement->claimcomment = strip_tags($data->claimcomment);",
          "83:     $endorsement->dateissued = $data->dateissued;",
          "85:     if ($badge->save_endorsement($endorsement)) {",
          "86:         $msg = get_string('changessaved');",
          "87:     } else {",
          "88:         $emsg = get_string('error:save', 'badges');",
          "89:     }",
          "90: }",
          "92: if ($emsg !== '') {",
          "93:     echo $OUTPUT->notification($emsg);",
          "95: } else if ($msg !== '') {",
          "96:     echo $OUTPUT->notification($msg, 'notifysuccess');",
          "97: }",
          "98: echo $output->notification(get_string('noteendorsement', 'badges'), 'info');",
          "99: $form->display();",
          "100: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "badges/endorsement_form.php||badges/endorsement_form.php": [
          "File: badges/endorsement_form.php -> badges/endorsement_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: require_once($CFG->libdir . '/formslib.php');",
          "27: require_once($CFG->libdir . '/badgeslib.php');",
          "35: class endorsement_form extends moodleform {",
          "40:     public function definition() {",
          "41:         $mform = $this->_form;",
          "42:         $badge = $this->_customdata['badge'];",
          "43:         $mform->addElement('header', 'endorsement', get_string('issuerdetails', 'badges'));",
          "44:         $mform->addElement('text', 'issuername', get_string('issuername_endorsement', 'badges'), array('size' => '70'));",
          "45:         $mform->setType('issuername', PARAM_TEXT);",
          "46:         $mform->addRule('issuername', null, 'required');",
          "47:         $mform->addHelpButton('issuername', 'issuername_endorsement', 'badges');",
          "48:         $mform->addElement('text', 'issueremail', get_string('issueremail', 'badges'), array('size' => '70'));",
          "49:         $mform->addRule('issueremail', null, 'required');",
          "50:         $mform->setType('issueremail', PARAM_RAW);",
          "51:         $mform->addHelpButton('issueremail', 'issueremail', 'badges');",
          "52:         $mform->addElement('text', 'issuerurl', get_string('issuerurl', 'badges'), array('size' => '70'));",
          "53:         $mform->setType('issuerurl', PARAM_URL);",
          "54:         $mform->addRule('issuerurl', null, 'required');",
          "55:         $mform->addHelpButton('issuerurl', 'issuerurl', 'badges');",
          "56:         $mform->addElement('date_time_selector', 'dateissued',",
          "57:             get_string('dateawarded', 'badges'));",
          "58:         $mform->addElement('header', 'claim', get_string('claim', 'badges'));",
          "59:         $mform->addElement('text', 'claimid', get_string('claimid', 'badges'), array('size' => '70'));",
          "60:         $mform->setType('claimid', PARAM_URL);",
          "61:         $mform->addRule('claimid', null, 'required');",
          "62:         $mform->addElement('textarea', 'claimcomment', get_string('claimcomment', 'badges'), 'wrap=\"virtual\" rows=\"8\" cols=\"70\"');",
          "63:         $mform->setType('claimcomment', PARAM_NOTAGS);",
          "64:         $endorsement = new stdClass();",
          "65:         $endorsement = $badge->get_endorsement();",
          "66:         if ($endorsement) {",
          "67:             $mform->setDefault('dateissued', $endorsement->dateissued);",
          "68:             $this->set_data($endorsement);",
          "69:         }",
          "70:         $this->add_action_buttons();",
          "72:         if ($badge->is_active() || $badge->is_locked()) {",
          "73:             $mform->hardFreezeAllVisibleExcept(array());",
          "74:         }",
          "75:     }",
          "84:     public function validation($data, $files) {",
          "85:         $errors = parent::validation($data, $files);",
          "86:         if ($data['issueremail'] && !validate_email($data['issueremail'])) {",
          "87:             $errors['issueremail'] = get_string('invalidemail');",
          "88:         }",
          "89:         return $errors;",
          "90:     }",
          "91: }",
          "",
          "---------------"
        ],
        "badges/endorsement_json.php||badges/endorsement_json.php": [
          "File: badges/endorsement_json.php -> badges/endorsement_json.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: define('AJAX_SCRIPT', true);",
          "26: define('NO_MOODLE_COOKIES', true); // No need for a session here.",
          "27: require_once(__DIR__ . '/../config.php');",
          "28: require_once($CFG->libdir . '/badgeslib.php');",
          "30: if (empty($CFG->enablebadges)) {",
          "31:     print_error('badgesdisabled', 'badges');",
          "32: }",
          "34: global $DB;",
          "35: $id = required_param('id', PARAM_INT);",
          "36: $action = optional_param('action', null, PARAM_BOOL); // Generates endorsement issuer class if true.",
          "37: $badge = new badge($id);",
          "39: $json = array();",
          "40: $endorsement = $badge->get_endorsement();",
          "41: $endorsementurl = new moodle_url('/badges/endorsement_json.php', array('id' => $id));",
          "43: if ($endorsement) {",
          "44:     $issuer = array();",
          "45:     $issuerurl = new moodle_url('/badges/endorsement_json.php', array('id' => $id, 'action' => 1));",
          "46:     $issuer['id'] = $issuerurl->out(false);",
          "47:     $issuer['name'] = $endorsement->issuername;",
          "48:     $issuer['email'] = $endorsement->issueremail;",
          "49:     $issuer['url'] = $endorsement->issuerurl;",
          "50:     if ($action) {",
          "51:         $json = $issuer;",
          "52:     } else {",
          "53:         $json['@context'] = OPEN_BADGES_V2_CONTEXT;",
          "54:         $json['type'] = OPEN_BADGES_V2_TYPE_ENDORSEMENT;",
          "55:         $json['id'] = $endorsementurl->out(false);",
          "56:         $json['issuer'] = $issuer;",
          "57:         if (!empty($endorsement->claimcomment)) {",
          "58:             $json['claim']['id'] = $endorsement->claimid;",
          "59:             $json['claim']['endorsementComment'] = $endorsement->claimcomment;",
          "60:         } else {",
          "61:             $json['claim'] = $endorsement->claimid;",
          "62:         }",
          "63:         $json['issuedOn'] = date('c', $endorsement->dateissued);",
          "64:         $json['verification'] = array('type' => 'hosted');",
          "65:     }",
          "66: }",
          "68: echo $OUTPUT->header();",
          "69: echo json_encode($json);",
          "",
          "---------------"
        ],
        "badges/image_author_json.php||badges/image_author_json.php": [
          "File: badges/image_author_json.php -> badges/image_author_json.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: define('AJAX_SCRIPT', true);",
          "27: define('NO_MOODLE_COOKIES', true); // No need for a session here.",
          "28: require_once(__DIR__ . '/../config.php');",
          "29: require_once($CFG->libdir . '/badgeslib.php');",
          "31: if (empty($CFG->enablebadges)) {",
          "32:     print_error('badgesdisabled', 'badges');",
          "33: }",
          "35: $id = required_param('id', PARAM_INT); // Unique hash of badge assertion.",
          "36: $badge = new badge($id);",
          "38: $json = array();",
          "39: $authorimage = new moodle_url('/badges/image_author_json.php', array('id' => $badge->id));",
          "40: $json['id'] = $authorimage->out(false);",
          "41: $json['type'] = OPEN_BADGES_V2_TYPE_AUTHOR;",
          "42: if (!empty($badge->imageauthorname)) {",
          "43:     $json['name'] = $badge->imageauthorname;",
          "44: }",
          "45: if (!empty($badge->imageauthoremail)) {",
          "46:     $json['email'] = $badge->imageauthoremail;",
          "47: }",
          "48: if (!empty($badge->imageauthorurl)) {",
          "49:     $json['url'] = $badge->imageauthorurl;",
          "50: }",
          "51: echo $OUTPUT->header();",
          "52: echo json_encode($json);",
          "",
          "---------------"
        ],
        "badges/newbadge.php||badges/newbadge.php": [
          "File: badges/newbadge.php -> badges/newbadge.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     $now = time();",
          "79:     $fordb->name = $data->name;",
          "80:     $fordb->description = $data->description;",
          "81:     $fordb->timecreated = $now;",
          "82:     $fordb->timemodified = $now;",
          "83:     $fordb->usercreated = $USER->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     $fordb->version = $data->version;",
          "81:     $fordb->language = $data->language;",
          "83:     $fordb->imageauthorname = $data->imageauthorname;",
          "84:     $fordb->imageauthoremail = $data->imageauthoremail;",
          "85:     $fordb->imageauthorurl = $data->imageauthorurl;",
          "86:     $fordb->imagecaption = $data->imagecaption;",
          "",
          "---------------"
        ],
        "badges/related.php||badges/related.php": [
          "File: badges/related.php -> badges/related.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: require_once(__DIR__ . '/../config.php');",
          "28: require_once($CFG->libdir . '/badgeslib.php');",
          "29: require_once($CFG->dirroot . '/badges/related_form.php');",
          "31: $badgeid = required_param('id', PARAM_INT);",
          "32: $action = optional_param('action', null, PARAM_TEXT);",
          "33: $lang = current_language();",
          "35: require_login();",
          "37: if (empty($CFG->enablebadges)) {",
          "38:     print_error('badgesdisabled', 'badges');",
          "39: }",
          "41: $badge = new badge($badgeid);",
          "42: $context = $badge->get_context();",
          "43: $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type));",
          "44: require_capability('moodle/badges:configuredetails', $context);",
          "46: if ($badge->type == BADGE_TYPE_COURSE) {",
          "47:     if (empty($CFG->badges_allowcoursebadges)) {",
          "48:         print_error('coursebadgesdisabled', 'badges');",
          "49:     }",
          "50:     require_login($badge->courseid);",
          "51:     $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type, 'id' => $badge->courseid));",
          "52:     $PAGE->set_pagelayout('standard');",
          "53:     navigation_node::override_active_url($navurl);",
          "54: } else {",
          "55:     $PAGE->set_pagelayout('admin');",
          "56:     navigation_node::override_active_url($navurl, true);",
          "57: }",
          "59: $currenturl = new moodle_url('/badges/related.php', array('id' => $badge->id));",
          "60: $PAGE->set_context($context);",
          "61: $PAGE->set_url($currenturl);",
          "62: $PAGE->set_heading($badge->name);",
          "63: $PAGE->set_title($badge->name);",
          "64: $PAGE->navbar->add($badge->name);",
          "65: $output = $PAGE->get_renderer('core', 'badges');",
          "66: $msg = optional_param('msg', '', PARAM_TEXT);",
          "67: $emsg = optional_param('emsg', '', PARAM_TEXT);",
          "68: $url = new moodle_url('/badges/related.php', array('id' => $badge->id, 'action' => 'add'));",
          "70: $mform = new edit_relatedbadge_form($url, array('badge' => $badge));",
          "71: if ($mform->is_cancelled()) {",
          "72:     redirect($currenturl);",
          "73: } else if ($mform->is_submitted() && $mform->is_validated() && ($data = $mform->get_data())) {",
          "75:     if (isset($data->relatedbadgeids)) {",
          "76:         $badge->add_related_badges($data->relatedbadgeids);",
          "77:     }",
          "78:     redirect($currenturl);",
          "79: }",
          "80: echo $OUTPUT->header();",
          "81: echo $OUTPUT->heading(print_badge_image($badge, $context, 'small') . ' ' . $badge->name);",
          "82: echo $output->print_badge_status_box($badge);",
          "84: $output->print_badge_tabs($badgeid, $context, 'brelated');",
          "85: if ($emsg !== '') {",
          "86:     echo $OUTPUT->notification($emsg);",
          "87: } else if ($msg !== '') {",
          "88:     echo $OUTPUT->notification(get_string($msg, 'badges'), 'notifysuccess');",
          "89: }",
          "91: echo $output->notification(get_string('noterelated', 'badges'), 'info');",
          "92: if (is_null($action)) {",
          "93:     if (!$badge->is_active() && !$badge->is_locked()) {",
          "94:         echo $OUTPUT->box($OUTPUT->single_button($url, get_string('addrelated', 'badges')), 'clearfix mdl-align');",
          "95:     }",
          "96:     if ($badge->has_related()) {",
          "97:         $badgerelated = $badge->get_related_badges();",
          "98:         $renderrelated = new badge_related($badgerelated, $badgeid);",
          "99:         echo $output->render($renderrelated);",
          "100:     } else {",
          "101:         echo $output->notification(get_string('norelated', 'badges'));",
          "102:     }",
          "103: } else if ($action == 'add') {",
          "104:     $mform->display();",
          "105: }",
          "106: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "badges/related_action.php||badges/related_action.php": [
          "File: badges/related_action.php -> badges/related_action.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../config.php');",
          "26: require_once($CFG->libdir . '/badgeslib.php');",
          "28: $relatedid = optional_param('relatedid', 0, PARAM_INT); // Related badge ID.",
          "29: $badgeid = optional_param('badgeid', 0, PARAM_INT); // Badge ID.",
          "30: $action = optional_param('action', 'remove', PARAM_TEXT); // Add, remove option.",
          "32: require_login();",
          "33: $return = new moodle_url('/badges/related.php', array('id' => $badgeid));",
          "34: $badge = new badge($badgeid);",
          "35: $context = $badge->get_context();",
          "36: require_capability('moodle/badges:configuredetails', $context);",
          "38: if ($action == 'remove') {",
          "39:     $badge->delete_related_badge($relatedid);",
          "40: }",
          "42: redirect($return);",
          "",
          "---------------"
        ],
        "badges/related_form.php||badges/related_form.php": [
          "File: badges/related_form.php -> badges/related_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: require_once($CFG->libdir . '/formslib.php');",
          "27: require_once($CFG->libdir . '/badgeslib.php');",
          "36: class edit_relatedbadge_form extends moodleform {",
          "41:     public function definition() {",
          "42:         $mform = $this->_form;",
          "43:         $badge = $this->_customdata['badge'];",
          "44:         $badgesarray = $this->get_badges_option($badge);",
          "45:         $mform->addElement('header', 'alignment', get_string('relatedbages', 'badges'));",
          "46:         if (!$badgesarray) {",
          "47:             $badgesarray = array(get_string('none'));",
          "48:             $attributes = array('size' => '3', 'disabled' => true, 'style' => 'min-width: 200px');",
          "49:         } else {",
          "50:             $attributes = array('size' => '10');",
          "51:         }",
          "52:         $mform->addElement('select', 'relatedbadgeids', get_string('relatedbages', 'badges'), $badgesarray, $attributes);",
          "53:         $mform->getElement('relatedbadgeids')->setMultiple(true);",
          "54:         $this->add_action_buttons();",
          "57:         if ($badge->is_active() || $badge->is_locked()) {",
          "58:             $mform->hardFreezeAllVisibleExcept(array());",
          "59:         }",
          "60:     }",
          "69:     public function validation($data, $files) {",
          "70:         $errors = parent::validation($data, $files);",
          "71:         return $errors;",
          "72:     }",
          "80:     public function get_badges_option($badge) {",
          "81:         global $DB;",
          "82:         $sql = \"SELECT b.id, b.name, b.version, b.language, b.type",
          "83:                   FROM {badge} b",
          "84:                  WHERE b.id <> :badgeid",
          "85:                        AND b.id NOT IN (SELECT br.relatedbadgeid",
          "86:                   FROM {badge_related} br WHERE br.badgeid = :badgeid1)\";",
          "87:         $params = array('badgeid' => $badge->id, 'badgeid1' => $badge->id);",
          "88:         if ($badge->type == BADGE_TYPE_COURSE) {",
          "89:             $sql .= \" AND (b.courseid = :courseid OR b.type = :badgetype)\";",
          "90:             $params['courseid'] = $badge->courseid;",
          "91:             $params['badgetype'] = BADGE_TYPE_SITE;",
          "92:         }",
          "94:         $records = $DB->get_records_sql($sql, $params);",
          "95:         $languages = get_string_manager()->get_list_of_languages();",
          "96:         $options = array();",
          "97:         foreach ($records as $record) {",
          "98:             $language = isset($languages[$record->language]) ? $languages[$record->language] : '';",
          "99:             $options[$record->id] = $record->name .",
          "100:                 ' (version: ' . $record->version . ', language: ' . $language . ', ' .",
          "101:                 ($record->type == BADGE_TYPE_COURSE ? get_string('badgesview', 'badges') : get_string('sitebadges', 'badges')) .",
          "102:                 ')';",
          "103:         }",
          "104:         return $options;",
          "105:     }",
          "107: }",
          "",
          "---------------"
        ],
        "badges/renderer.php||badges/renderer.php": [
          "File: badges/renderer.php -> badges/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     public function print_badge_overview($badge, $context) {",
          "141:         $display = \"\";",
          "145:         $display .= $this->heading(get_string('badgedetails', 'badges'), 3);",
          "146:         $dl = array();",
          "147:         $dl[get_string('name')] = $badge->name;",
          "148:         $dl[get_string('description', 'badges')] = $badge->description;",
          "149:         $dl[get_string('createdon', 'search')] = userdate($badge->timecreated);",
          "150:         $dl[get_string('badgeimage', 'badges')] = print_badge_image($badge, $context, 'large');",
          "151:         $display .= $this->definition_list($dl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         $languages = get_string_manager()->get_list_of_languages();",
          "148:         $dl[get_string('version', 'badges')] = $badge->version;",
          "149:         $dl[get_string('language')] = $languages[$badge->language];",
          "153:         $dl[get_string('imageauthorname', 'badges')] =",
          "154:             html_writer::link($badge->imageauthorname, $badge->imageauthorname, array('target' => '_blank'));",
          "155:         $dl[get_string('imageauthoremail', 'badges')] =",
          "156:             html_writer::tag('a', $badge->imageauthoremail, array('href' => 'mailto:' . $badge->imageauthoremail));",
          "157:         $dl[get_string('imageauthorurl', 'badges')] =",
          "158:             html_writer::link($badge->imageauthorurl, $badge->imageauthorurl, array('target' => '_blank'));",
          "159:         $dl[get_string('imagecaption', 'badges')] = $badge->imagecaption;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:             }",
          "213:         }",
          "215:         return html_writer::div($display, null, array('id' => 'badge-overview'));",
          "216:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:         $display .= self::print_badge_endorsement($badge);",
          "225:         $display .= self::print_badge_related($badge);",
          "226:         $display .= self::print_badge_competencies($badge);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:         $badge = new badge($ibadge->badgeid);",
          "278:         $now = time();",
          "279:         $expiration = isset($issued['expires']) ? $issued['expires'] : $now + 86400;",
          "281:         $output = '';",
          "282:         $output .= html_writer::start_tag('div', array('id' => 'badge'));",
          "283:         $output .= html_writer::start_tag('div', array('id' => 'badge-image'));",
          "285:         if ($expiration < $now) {",
          "286:             $output .= $this->output->pix_icon('i/expired',",
          "287:             get_string('expireddate', 'badges', userdate($issued['expires'])),",
          "",
          "[Removed Lines]",
          "284:         $output .= html_writer::empty_tag('img', array('src' => $badgeclass['image'], 'alt' => $badge->name));",
          "",
          "[Added Lines]",
          "293:         $badgeimage = is_array($badgeclass['image']) ? $badgeclass['image']['id'] : $badgeclass['image'];",
          "294:         $languages = get_string_manager()->get_list_of_languages();",
          "299:         $output .= html_writer::empty_tag('img', array('src' => $badgeimage, 'alt' => $badge->name));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:         $output .= $this->output->heading(get_string('badgedetails', 'badges'), 3);",
          "335:         $dl = array();",
          "336:         $dl[get_string('name')] = $badge->name;",
          "337:         $dl[get_string('description', 'badges')] = $badge->description;",
          "339:         if ($badge->type == BADGE_TYPE_COURSE && isset($badge->courseid)) {",
          "340:             $coursename = $DB->get_field('course', 'fullname', array('id' => $badge->courseid));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:         $dl[get_string('version', 'badges')] = $badge->version;",
          "353:         $dl[get_string('language')] = $languages[$badge->language];",
          "355:         $dl[get_string('imageauthorname', 'badges')] =",
          "356:             html_writer::link($badge->imageauthorname, $badge->imageauthorname, array('target' => '_blank'));",
          "357:         $dl[get_string('imageauthoremail', 'badges')] =",
          "358:             html_writer::tag('a', $badge->imageauthoremail, array('href' => 'mailto:' . $badge->imageauthoremail));",
          "359:         $dl[get_string('imageauthorurl', 'badges')] =",
          "360:             html_writer::link($badge->imageauthorurl, $badge->imageauthorurl, array('target' => '_blank'));",
          "361:         $dl[get_string('imagecaption', 'badges')] = $badge->imagecaption;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "346:         $output .= $this->output->heading(get_string('issuancedetails', 'badges'), 3);",
          "347:         $dl = array();",
          "348:         $dl[get_string('dateawarded', 'badges')] = userdate($issued['issuedOn']);",
          "349:         if (isset($issued['expires'])) {",
          "350:             if ($issued['expires'] < $now) {",
          "351:                 $dl[get_string('expirydate', 'badges')] = userdate($issued['expires']) . get_string('warnexpired', 'badges');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:         $issued['issuedOn'] = !preg_match( '~^[1-9][0-9]*$~', $issued['issuedOn'] ) ?",
          "373:             strtotime($issued['issuedOn']) : $issued['issuedOn'];",
          "376:             $issued['expires'] = !preg_match( '~^[1-9][0-9]*$~', $issued['expires'] ) ?",
          "377:                 strtotime($issued['expires']) : $issued['expires'];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "378:         $dl[get_string('evidence', 'badges')] = get_string('completioninfo', 'badges') . html_writer::alist($items, array(), 'ul');",
          "379:         $output .= $this->definition_list($dl);",
          "380:         $output .= html_writer::end_tag('div');",
          "382:         return $output;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:         $output .= self::print_badge_endorsement($badge);",
          "409:         $relatedbadges = $badge->get_related_badges();",
          "410:         $output .= $this->heading(get_string('relatedbages', 'badges'), 3);",
          "411:         if (!empty($relatedbadges)) {",
          "412:             $items = array();",
          "413:             foreach ($relatedbadges as $related) {",
          "414:                 $items[] = $related->name;",
          "415:             }",
          "416:             $output .= html_writer::alist($items, array(), 'ul');",
          "417:         } else {",
          "418:             $output .= get_string('norelated', 'badges');",
          "419:         }",
          "420:         $output .= $this->heading(get_string('alignment', 'badges'), 3);",
          "421:         $competencies = $badge->get_alignment();",
          "422:         if (!empty($competencies)) {",
          "423:             $items = array();",
          "424:             foreach ($competencies as $competency) {",
          "425:                 $items[] = html_writer::link($competency->targeturl, $competency->targetname, array('target' => '_blank'));",
          "426:             }",
          "427:             $output .= html_writer::alist($items, array(), 'ul');",
          "428:         } else {",
          "429:             $output .= get_string('noalignment', 'badges');",
          "430:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "627:     public function print_badge_tabs($badgeid, $context, $current = 'overview') {",
          "628:         global $DB;",
          "630:         $row = array();",
          "632:         $row[] = new tabobject('overview',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:         $badge = new badge($badgeid);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "665:                     );",
          "666:         }",
          "668:         echo $this->tabtree($row, $current);",
          "669:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720:         if (has_capability('moodle/badges:configuredetails', $context)) {",
          "721:             $row[] = new tabobject('bendorsement',",
          "722:                 new moodle_url('/badges/endorsement.php', array('id' => $badgeid)),",
          "723:                 get_string('bendorsement', 'badges')",
          "724:             );",
          "725:         }",
          "727:         if (has_capability('moodle/badges:configuredetails', $context)) {",
          "728:             $related = $DB->count_records_sql(\"SELECT COUNT(br.badgeid)",
          "729:                       FROM {badge_related} br WHERE br.badgeid = :badgeid\", array('badgeid' => $badgeid));",
          "730:             $row[] = new tabobject('brelated',",
          "731:                 new moodle_url('/badges/related.php', array('id' => $badgeid)),",
          "732:                 get_string('brelated', 'badges', $related)",
          "733:             );",
          "734:         }",
          "736:         if (has_capability('moodle/badges:configuredetails', $context)) {",
          "737:             $competencies = $DB->count_records_sql(\"SELECT COUNT(bc.id)",
          "738:                       FROM {badge_competencies} bc WHERE bc.badgeid = :badgeid\", array('badgeid' => $badgeid));",
          "739:             $row[] = new tabobject('balignment',",
          "740:                 new moodle_url('/badges/competency.php', array('id' => $badgeid)),",
          "741:                 get_string('balignment', 'badges', $competencies)",
          "742:             );",
          "743:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "957:         $output .= html_writer::end_tag('dl');",
          "958:         return $output;",
          "959:     }",
          "960: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1044:     protected function print_badge_endorsement(badge $badge) {",
          "1045:         $output = '';",
          "1046:         $endorsement = $badge->get_endorsement();",
          "1047:         $dl = array();",
          "1048:         $output .= $this->heading(get_string('endorsement', 'badges'), 3);",
          "1049:         if (!empty($endorsement)) {",
          "1050:             $dl[get_string('issuername', 'badges')] = $endorsement->issuername;",
          "1051:             $dl[get_string('issueremail', 'badges')] = $endorsement->issueremail;",
          "1052:             $dl[get_string('issuerurl', 'badges')] = html_writer::link($endorsement->issuerurl, $endorsement->issuerurl,",
          "1053:                 array('target' => '_blank'));",
          "1054:             $dl[get_string('dateawarded', 'badges')] = date('c', $endorsement->dateissued);",
          "1055:             $dl[get_string('claimid', 'badges')] = html_writer::link($endorsement->claimid, $endorsement->claimid,",
          "1056:             array('target' => '_blank'));",
          "1057:             $dl[get_string('claimcomment', 'badges')] = $endorsement->claimcomment;",
          "1058:             $output .= $this->definition_list($dl);",
          "1059:         } else {",
          "1060:             $output .= get_string('noendorsement', 'badges');",
          "1061:         }",
          "1062:         return $output;",
          "1063:     }",
          "1071:     protected function print_badge_related(badge $badge) {",
          "1072:         $output = '';",
          "1073:         $relatedbadges = $badge->get_related_badges();",
          "1074:         $output .= $this->heading(get_string('relatedbages', 'badges'), 3);",
          "1075:         if (!empty($relatedbadges)) {",
          "1076:             $items = array();",
          "1077:             foreach ($relatedbadges as $related) {",
          "1078:                 $relatedurl = new moodle_url('/badges/overview.php', array('id' => $related->id));",
          "1079:                 $items[] = html_writer::link($relatedurl->out(), $related->name, array('target' => '_blank'));",
          "1080:             }",
          "1081:             $output .= html_writer::alist($items, array(), 'ul');",
          "1082:         } else {",
          "1083:             $output .= get_string('norelated', 'badges');",
          "1084:         }",
          "1085:         return $output;",
          "1086:     }",
          "1094:     protected function print_badge_competencies(badge $badge) {",
          "1095:         $output = '';",
          "1096:         $output .= $this->heading(get_string('alignment', 'badges'), 3);",
          "1097:         $competencies = $badge->get_alignment();",
          "1098:         if (!empty($competencies)) {",
          "1099:             $items = array();",
          "1100:             foreach ($competencies as $competency) {",
          "1101:                 $urlaligment = new moodle_url('competency.php',",
          "1102:                     array('id' => $badge->id, 'alignmentid' => $competency->id)",
          "1103:                 );",
          "1104:                 $items[] = html_writer::link($urlaligment, $competency->targetname, array('target' => '_blank'));",
          "1105:             }",
          "1106:             $output .= html_writer::alist($items, array(), 'ul');",
          "1107:         } else {",
          "1108:             $output .= get_string('noalignment', 'badges');",
          "1109:         }",
          "1110:         return $output;",
          "1111:     }",
          "1119:     protected function render_badge_related(badge_related $related) {",
          "1120:         $currentbadge = new badge($related->currentbadgeid);",
          "1121:         $languages = get_string_manager()->get_list_of_languages();",
          "1122:         $paging = new paging_bar($related->totalcount, $related->page, $related->perpage, $this->page->url, 'page');",
          "1123:         $htmlpagingbar = $this->render($paging);",
          "1124:         $table = new html_table();",
          "1125:         $table->attributes['class'] = 'generaltable boxaligncenter boxwidthwide';",
          "1126:         $table->head = array(",
          "1127:             get_string('name'),",
          "1128:             get_string('version', 'badges'),",
          "1129:             get_string('language', 'badges'),",
          "1130:             get_string('type', 'badges')",
          "1131:         );",
          "1132:         if (!$currentbadge->is_active() && !$currentbadge->is_locked()) {",
          "1133:             array_push($table->head, '');",
          "1134:         }",
          "1136:         foreach ($related->badges as $badge) {",
          "1137:             $badgeobject = new badge($badge->id);",
          "1138:             $style = array('title' => $badgeobject->name);",
          "1139:             if (!$badgeobject->is_active()) {",
          "1140:                 $style['class'] = 'dimmed';",
          "1141:             }",
          "1142:             $context = ($badgeobject->type == BADGE_TYPE_SITE) ?",
          "1143:                 context_system::instance() : context_course::instance($badgeobject->courseid);",
          "1144:             $forlink = print_badge_image($badgeobject, $context) . ' ' .",
          "1145:                 html_writer::start_tag('span') . $badgeobject->name . html_writer::end_tag('span');",
          "1146:             $name = html_writer::link(new moodle_url('/badges/overview.php', array('id' => $badgeobject->id)), $forlink, $style);",
          "1148:             $row = array(",
          "1149:                 $name,",
          "1150:                 $badge->version,",
          "1151:                 $badge->language ? $languages[$badge->language] : '',",
          "1152:                 $badge->type == BADGE_TYPE_COURSE ? get_string('badgesview', 'badges') : get_string('sitebadges', 'badges')",
          "1153:             );",
          "1154:             if (!$currentbadge->is_active() && !$currentbadge->is_locked()) {",
          "1155:                 $action = $this->output->action_icon(",
          "1156:                     new moodle_url('related_action.php',",
          "1157:                         array(",
          "1158:                             'badgeid' => $related->currentbadgeid,",
          "1159:                             'relatedid' => $badge->id,",
          "1160:                             'action' => 'remove'",
          "1161:                         )",
          "1162:                     ), new pix_icon('t/delete', get_string('delete')));",
          "1163:                 $actions = html_writer::tag('div', $action, array('class' => 'badge-actions'));",
          "1164:                 array_push($row, $actions);",
          "1165:             }",
          "1166:             $table->data[] = $row;",
          "1167:         }",
          "1168:         $htmltable = html_writer::table($table);",
          "1170:         return $htmlpagingbar . $htmltable . $htmlpagingbar;",
          "1171:     }",
          "1179:     protected function render_badge_competencies_alignment(badge_competencies_alignment $alignment) {",
          "1180:         $currentbadge = new badge($alignment->currentbadgeid);",
          "1181:         $paging = new paging_bar($alignment->totalcount, $alignment->page, $alignment->perpage, $this->page->url, 'page');",
          "1182:         $htmlpagingbar = $this->render($paging);",
          "1183:         $table = new html_table();",
          "1184:         $table->attributes['class'] = 'generaltable boxaligncenter boxwidthwide';",
          "1185:         $table->head = array('Name', 'URL', '');",
          "1187:         foreach ($alignment->alignments as $item) {",
          "1188:             $urlaligment = new moodle_url('competency.php',",
          "1189:                 array(",
          "1190:                     'id' => $currentbadge->id,",
          "1191:                     'alignmentid' => $item->id,",
          "1192:                 )",
          "1193:             );",
          "1194:             $row = array(",
          "1195:                 html_writer::link($urlaligment, $item->targetname),",
          "1196:                 html_writer::link($item->targeturl, $item->targeturl, array('target' => '_blank'))",
          "1197:             );",
          "1198:             if (!$currentbadge->is_active() && !$currentbadge->is_locked()) {",
          "1199:                 $delete = $this->output->action_icon(",
          "1200:                     new moodle_url('competency_action.php',",
          "1201:                         array(",
          "1202:                             'id' => $currentbadge->id,",
          "1203:                             'alignmentid' => $item->id,",
          "1204:                             'action' => 'remove'",
          "1205:                         )",
          "1206:                     ), new pix_icon('t/delete', get_string('delete')));",
          "1207:                 $edit = $this->output->action_icon(",
          "1208:                     new moodle_url('competency.php',",
          "1209:                         array(",
          "1210:                             'id' => $currentbadge->id,",
          "1211:                             'alignmentid' => $item->id,",
          "1212:                             'action' => 'edit'",
          "1213:                         )",
          "1214:                     ), new pix_icon('t/edit', get_string('edit')));",
          "1215:                 $actions = html_writer::tag('div', $edit . $delete, array('class' => 'badge-actions'));",
          "1216:                 array_push($row, $actions);",
          "1217:             }",
          "1218:             $table->data[] = $row;",
          "1219:         }",
          "1220:         $htmltable = html_writer::table($table);",
          "1222:         return $htmlpagingbar . $htmltable . $htmlpagingbar;",
          "1223:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1157:         }",
          "1158:     }",
          "1159: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1432: class badge_related implements renderable {",
          "1435:     public $sort = 'name';",
          "1438:     public $dir = 'ASC';",
          "1441:     public $page = 0;",
          "1444:     public $perpage = BADGE_PERPAGE;",
          "1447:     public $totalcount = null;",
          "1450:     public $currentbadgeid = 0;",
          "1453:     public $badges = array();",
          "1461:     public function __construct($badges, $currentbadgeid) {",
          "1462:         $this->badges = $badges;",
          "1463:         $this->currentbadgeid = $currentbadgeid;",
          "1464:     }",
          "1465: }",
          "1474: class badge_competencies_alignment implements renderable",
          "1475: {",
          "1477:     public $sort = 'name';",
          "1480:     public $dir = 'ASC';",
          "1483:     public $page = 0;",
          "1486:     public $perpage = BADGE_PERPAGE;",
          "1489:     public $totalcount = null;",
          "1492:     public $alignments = array();",
          "1495:     public $currentbadgeid = 0;",
          "1503:     public function __construct($alignments, $currentbadgeid) {",
          "1504:         $this->alignments = $alignments;",
          "1505:         $this->currentbadgeid = $currentbadgeid;",
          "1506:     }",
          "1507: }",
          "",
          "---------------"
        ],
        "badges/tests/badgeslib_test.php||badges/tests/badgeslib_test.php": [
          "File: badges/tests/badgeslib_test.php -> badges/tests/badgeslib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     protected $coursebadge;",
          "39:     protected $assertion;",
          "41:     protected function setUp() {",
          "42:         global $DB, $CFG;",
          "43:         $this->resetAfterTest(true);",
          "45:         $CFG->enablecompletion = true;",
          "47:         $user = $this->getDataGenerator()->create_user();",
          "49:         $fordb = new stdClass();",
          "50:         $fordb->id = null;",
          "51:         $fordb->name = \"Test badge with 'apostrophe' and other friends (<>&@#)\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     protected $assertion2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         $fordb->expiredate = null;",
          "61:         $fordb->expireperiod = null;",
          "62:         $fordb->type = BADGE_TYPE_SITE;",
          "63:         $fordb->courseid = null;",
          "64:         $fordb->messagesubject = \"Test message subject\";",
          "65:         $fordb->message = \"Test message body\";",
          "66:         $fordb->attachment = 1;",
          "67:         $fordb->notification = 0;",
          "68:         $fordb->status = BADGE_STATUS_INACTIVE;",
          "70:         $this->badgeid = $DB->insert_record('badge', $fordb, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         $fordb->version = 1;",
          "64:         $fordb->language = 'en';",
          "70:         $fordb->imageauthorname = \"Image Author 1\";",
          "71:         $fordb->imageauthoremail = \"author@example.com\";",
          "72:         $fordb->imageauthorurl = \"http://author-url.example.com\";",
          "73:         $fordb->imagecaption = \"Test caption image\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         $fordb->type = BADGE_TYPE_COURSE;",
          "90:         $fordb->courseid = $this->course->id;",
          "91:         $fordb->status = BADGE_STATUS_ACTIVE;",
          "93:         $this->coursebadge = $DB->insert_record('badge', $fordb, true);",
          "94:         $this->assertion = new stdClass();",
          "95:         $this->assertion->badge = '{\"uid\":\"%s\",\"recipient\":{\"identity\":\"%s\",\"type\":\"email\",\"hashed\":true,\"salt\":\"%s\"},\"badge\":\"%s\",\"verify\":{\"type\":\"hosted\",\"url\":\"%s\"},\"issuedOn\":\"%d\",\"evidence\":\"%s\"}';",
          "96:         $this->assertion->class = '{\"name\":\"%s\",\"description\":\"%s\",\"image\":\"%s\",\"criteria\":\"%s\",\"issuer\":\"%s\"}';",
          "97:         $this->assertion->issuer = '{\"name\":\"%s\",\"url\":\"%s\",\"email\":\"%s\"}';",
          "98:     }",
          "100:     public function test_create_badge() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         $endorsement = new stdClass();",
          "101:         $endorsement->badgeid = $this->coursebadge;",
          "102:         $endorsement->issuername = \"Issuer 123\";",
          "103:         $endorsement->issueremail = \"issuer123@email.com\";",
          "104:         $endorsement->issuerurl = \"https://example.org/issuer-123\";",
          "105:         $endorsement->dateissued = 1524567747;",
          "106:         $endorsement->claimid = \"https://example.org/robotics-badge.json\";",
          "107:         $endorsement->claimcomment = \"Test endorser comment\";",
          "108:         $DB->insert_record('badge_endorsement', $endorsement, true);",
          "111:         $badge = new badge($this->coursebadge);",
          "112:         $clonedid = $badge->make_clone();",
          "113:         $badgeclone = new badge($clonedid);",
          "114:         $badgeclone->status = BADGE_STATUS_ACTIVE;",
          "115:         $badgeclone->save();",
          "117:         $relatebadge = new stdClass();",
          "118:         $relatebadge->badgeid = $this->coursebadge;",
          "119:         $relatebadge->relatedbadgeid = $clonedid;",
          "120:         $relatebadge->relatedid = $DB->insert_record('badge_related', $relatebadge, true);",
          "123:         $competency = new stdClass();",
          "124:         $competency->badgeid = $this->coursebadge;",
          "125:         $competency->targetname = 'CCSS.ELA-Literacy.RST.11-12.3';",
          "126:         $competency->targeturl = 'http://www.corestandards.org/ELA-Literacy/RST/11-12/3';",
          "127:         $competency->targetdescription = 'Test target description';",
          "128:         $competency->targetframework = 'CCSS.RST.11-12.3';",
          "129:         $competency->targetcode = 'CCSS.RST.11-12.3';",
          "130:         $DB->insert_record('badge_competencies', $competency, true);",
          "137:         $this->assertion2 = new stdClass();",
          "138:         $this->assertion2->badge = '{\"recipient\":{\"identity\":\"%s\",\"type\":\"email\",\"hashed\":true,\"salt\":\"%s\"},' .",
          "139:             '\"badge\":{\"name\":\"%s\",\"description\":\"%s\",\"image\":{\"id\":\"%s\",\"author\":\"%s\",\"caption\":\"%s\"},' .",
          "140:             '\"criteria\":{\"id\":\"%s\",\"narrative\":\"%s\"},\"issuer\":{\"name\":\"%s\",\"url\":\"%s\",\"email\":\"%s\",' .",
          "141:             '\"@context\":\"https:\\/\\/w3id.org\\/openbadges\\/v2\",\"id\":\"%s\",\"type\":\"Issuer\"},' .",
          "142:             '\"@context\":\"https:\\/\\/w3id.org\\/openbadges\\/v2\",\"id\":\"%s\",\"type\":\"BadgeClass\",\"version\":\"%s\",' .",
          "143:             '\"@language\":\"%s\",\"related\":[{\"id\":\"%s\",\"version\":\"%s\",\"@language\":\"%s\"}],\"endorsement\":\"%s\",' .",
          "144:             '\"alignment\":[{\"targetName\":\"%s\",\"targetUrl\":\"%s\",\"targetDescription\":\"%s\",\"targetFramework\":\"%s\",' .",
          "145:             '\"targetCode\":\"%s\"}]},\"verify\":{\"type\":\"hosted\",\"url\":\"%s\"},\"issuedOn\":\"%s\",\"evidence\":\"%s\",' .",
          "146:             '\"@context\":\"https:\\/\\/w3id.org\\/openbadges\\/v2\",\"type\":\"Assertion\",\"id\":\"%s\"}';",
          "147:         $this->assertion2->class = '{\"name\":\"%s\",\"description\":\"%s\",\"image\":{\"id\":\"%s\",\"author\":\"%s\",\"caption\":\"%s\"},' .",
          "148:             '\"criteria\":{\"id\":\"%s\",\"narrative\":\"%s\"},\"issuer\":{\"name\":\"%s\",\"url\":\"%s\",\"email\":\"%s\",' .",
          "149:             '\"@context\":\"https:\\/\\/w3id.org\\/openbadges\\/v2\",\"id\":\"%s\",\"type\":\"Issuer\"},' .",
          "150:             '\"@context\":\"https:\\/\\/w3id.org\\/openbadges\\/v2\",\"id\":\"%s\",\"type\":\"BadgeClass\",\"version\":\"%s\",' .",
          "151:             '\"@language\":\"%s\",\"related\":[{\"id\":\"%s\",\"version\":\"%s\",\"@language\":\"%s\"}],\"endorsement\":\"%s\",' .",
          "152:             '\"alignment\":[{\"targetName\":\"%s\",\"targetUrl\":\"%s\",\"targetDescription\":\"%s\",\"targetFramework\":\"%s\",' .",
          "153:             '\"targetCode\":\"%s\"}]}';",
          "154:         $this->assertion2->issuer = '{\"name\":\"%s\",\"url\":\"%s\",\"email\":\"%s\",' .",
          "155:             '\"@context\":\"https:\\/\\/w3id.org\\/openbadges\\/v2\",\"id\":\"%s\",\"type\":\"Issuer\"}';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     public function test_clone_badge() {",
          "108:         $badge = new badge($this->badgeid);",
          "109:         $newid = $badge->make_clone();",
          "125:     }",
          "127:     public function test_badge_status() {",
          "",
          "[Removed Lines]",
          "110:         $cloned_badge = new badge($newid);",
          "112:         $this->assertEquals($badge->description, $cloned_badge->description);",
          "113:         $this->assertEquals($badge->issuercontact, $cloned_badge->issuercontact);",
          "114:         $this->assertEquals($badge->issuername, $cloned_badge->issuername);",
          "115:         $this->assertEquals($badge->issuercontact, $cloned_badge->issuercontact);",
          "116:         $this->assertEquals($badge->issuerurl, $cloned_badge->issuerurl);",
          "117:         $this->assertEquals($badge->expiredate, $cloned_badge->expiredate);",
          "118:         $this->assertEquals($badge->expireperiod, $cloned_badge->expireperiod);",
          "119:         $this->assertEquals($badge->type, $cloned_badge->type);",
          "120:         $this->assertEquals($badge->courseid, $cloned_badge->courseid);",
          "121:         $this->assertEquals($badge->message, $cloned_badge->message);",
          "122:         $this->assertEquals($badge->messagesubject, $cloned_badge->messagesubject);",
          "123:         $this->assertEquals($badge->attachment, $cloned_badge->attachment);",
          "124:         $this->assertEquals($badge->notification, $cloned_badge->notification);",
          "",
          "[Added Lines]",
          "168:         $clonedbadge = new badge($newid);",
          "170:         $this->assertEquals($badge->description, $clonedbadge->description);",
          "171:         $this->assertEquals($badge->issuercontact, $clonedbadge->issuercontact);",
          "172:         $this->assertEquals($badge->issuername, $clonedbadge->issuername);",
          "173:         $this->assertEquals($badge->issuercontact, $clonedbadge->issuercontact);",
          "174:         $this->assertEquals($badge->issuerurl, $clonedbadge->issuerurl);",
          "175:         $this->assertEquals($badge->expiredate, $clonedbadge->expiredate);",
          "176:         $this->assertEquals($badge->expireperiod, $clonedbadge->expireperiod);",
          "177:         $this->assertEquals($badge->type, $clonedbadge->type);",
          "178:         $this->assertEquals($badge->courseid, $clonedbadge->courseid);",
          "179:         $this->assertEquals($badge->message, $clonedbadge->message);",
          "180:         $this->assertEquals($badge->messagesubject, $clonedbadge->messagesubject);",
          "181:         $this->assertEquals($badge->attachment, $clonedbadge->attachment);",
          "182:         $this->assertEquals($badge->notification, $clonedbadge->notification);",
          "183:         $this->assertEquals($badge->version, $clonedbadge->version);",
          "184:         $this->assertEquals($badge->language, $clonedbadge->language);",
          "185:         $this->assertEquals($badge->imagecaption, $clonedbadge->imagecaption);",
          "186:         $this->assertEquals($badge->imageauthorname, $clonedbadge->imageauthorname);",
          "187:         $this->assertEquals($badge->imageauthoremail, $clonedbadge->imageauthoremail);",
          "188:         $this->assertEquals($badge->imageauthorurl, $clonedbadge->imageauthorurl);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:         $this->assertAttributeEquals(BADGE_STATUS_ARCHIVED, 'status', $badge);",
          "140:     }",
          "142:     public function test_create_badge_criteria() {",
          "143:         $badge = new badge($this->badgeid);",
          "144:         $criteria_overall = award_criteria::build(array('criteriatype' => BADGE_CRITERIA_TYPE_OVERALL, 'badgeid' => $badge->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:     public function test_delete_badge_for_real() {",
          "210:         global $DB;",
          "212:         $badge = new badge($this->badgeid);",
          "214:         $newid1 = $badge->make_clone();",
          "215:         $newid2 = $badge->make_clone();",
          "216:         $newid3 = $badge->make_clone();",
          "219:         $badge->add_related_badges([$newid1, $newid2, $newid3]);",
          "222:         $badge2 = new badge($newid2);",
          "224:         $badge2->add_related_badges([$this->badgeid]);",
          "227:         $relatedsql = 'badgeid = :badgeid OR relatedbadgeid = :relatedbadgeid';",
          "228:         $relatedparams = array(",
          "229:             'badgeid' => $this->badgeid,",
          "230:             'relatedbadgeid' => $this->badgeid",
          "231:         );",
          "233:         $this->assertEquals(4, $DB->count_records_select('badge_related', $relatedsql, $relatedparams));",
          "236:         $badge->delete(false);",
          "239:         $this->assertFalse($DB->record_exists('badge', ['id' => $this->badgeid]));",
          "242:         $this->assertFalse($DB->record_exists_select('badge_related', $relatedsql, $relatedparams));",
          "243:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:             $badge->attachment = 1;",
          "240:             $badge->notification = 0;",
          "241:             $badge->status = BADGE_STATUS_INACTIVE;",
          "243:             $badgeid = $DB->insert_record('badge', $badge, true);",
          "244:             $badges[$badgeid] = new badge($badgeid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:             $badge->version = \"Version $i\";",
          "346:             $badge->language = \"en\";",
          "347:             $badge->imagecaption = \"Image caption $i\";",
          "348:             $badge->imageauthorname = \"Image author's name $i\";",
          "349:             $badge->imageauthoremail = \"author$i@example.com\";",
          "350:             $badge->imageauthorname = \"Image author's name $i\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:         $badge->attachment = 1;",
          "315:         $badge->notification = 0;",
          "316:         $badge->status = BADGE_STATUS_ACTIVE;",
          "318:         $badgeid = $DB->insert_record('badge', $badge, true);",
          "319:         $badges[$badgeid] = new badge($badgeid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:         $badge->version = \"Version $i\";",
          "427:         $badge->language = \"en\";",
          "428:         $badge->imagecaption = \"Image caption\";",
          "429:         $badge->imageauthorname = \"Image author's name\";",
          "430:         $badge->imageauthoremail = \"author@example.com\";",
          "431:         $badge->imageauthorname = \"Image author's name\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "545:         $this->assertStringMatchesFormat($testassertion->badge, json_encode($assertion->get_badge_assertion()));",
          "546:         $this->assertStringMatchesFormat($testassertion->class, json_encode($assertion->get_badge_class()));",
          "547:         $this->assertStringMatchesFormat($testassertion->issuer, json_encode($assertion->get_issuer()));",
          "548:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:         $award = reset($awards);",
          "667:         $assertion2 = new core_badges_assertion($award->uniquehash, OPEN_BADGES_V2);",
          "668:         $testassertion2 = $this->assertion2;",
          "671:         $this->assertStringMatchesFormat($testassertion2->badge, json_encode($assertion2->get_badge_assertion()));",
          "672:         $this->assertStringMatchesFormat($testassertion2->class, json_encode($assertion2->get_badge_class()));",
          "673:         $this->assertStringMatchesFormat($testassertion2->issuer, json_encode($assertion2->get_issuer()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "611:         $nodes->setAccessible(true);",
          "612:         $this->assertArrayHasKey('localbadges', $nodes->getValue($tree));",
          "613:     }",
          "614: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     public function test_badge_endorsement() {",
          "745:         $badge = new badge($this->badgeid);",
          "748:         $endorsement = new stdClass();",
          "749:         $endorsement->badgeid = $this->badgeid;",
          "750:         $endorsement->issuername = \"Issuer 123\";",
          "751:         $endorsement->issueremail = \"issuer123@email.com\";",
          "752:         $endorsement->issuerurl = \"https://example.org/issuer-123\";",
          "753:         $endorsement->dateissued = 1524567747;",
          "754:         $endorsement->claimid = \"https://example.org/robotics-badge.json\";",
          "755:         $endorsement->claimcomment = \"Test endorser comment\";",
          "757:         $badge->save_endorsement($endorsement);",
          "758:         $endorsement1 = $badge->get_endorsement();",
          "759:         $this->assertEquals($endorsement->badgeid, $endorsement1->badgeid);",
          "760:         $this->assertEquals($endorsement->issuername, $endorsement1->issuername);",
          "761:         $this->assertEquals($endorsement->issueremail, $endorsement1->issueremail);",
          "762:         $this->assertEquals($endorsement->issuerurl, $endorsement1->issuerurl);",
          "763:         $this->assertEquals($endorsement->dateissued, $endorsement1->dateissued);",
          "764:         $this->assertEquals($endorsement->claimid, $endorsement1->claimid);",
          "765:         $this->assertEquals($endorsement->claimcomment, $endorsement1->claimcomment);",
          "768:         $endorsement1->issuername = \"Issuer update\";",
          "769:         $badge->save_endorsement($endorsement1);",
          "770:         $endorsement2 = $badge->get_endorsement();",
          "771:         $this->assertEquals($endorsement1->id, $endorsement2->id);",
          "772:         $this->assertEquals($endorsement1->issuername, $endorsement2->issuername);",
          "773:     }",
          "778:     public function test_badge_related() {",
          "779:         $badge = new badge($this->badgeid);",
          "780:         $newid1 = $badge->make_clone();",
          "781:         $newid2 = $badge->make_clone();",
          "782:         $newid3 = $badge->make_clone();",
          "785:         $badge->add_related_badges([$newid1, $newid2, $newid3]);",
          "786:         $this->assertCount(3, $badge->get_related_badges());",
          "789:         $clonedbage1 = new badge($newid1);",
          "790:         $clonedbage1->status = BADGE_STATUS_ACTIVE;",
          "791:         $clonedbage1->save();",
          "792:         $this->assertCount(1, $badge->get_related_badges(true));",
          "795:         $badge->delete_related_badge($newid2);",
          "796:         $this->assertCount(2, $badge->get_related_badges());",
          "797:     }",
          "802:     public function test_competencies_alignment() {",
          "803:         $badge = new badge($this->badgeid);",
          "806:         $competency1 = new stdClass();",
          "807:         $competency1->badgeid = $this->badgeid;",
          "808:         $competency1->targetname = 'CCSS.ELA-Literacy.RST.11-12.3';",
          "809:         $competency1->targeturl = 'http://www.corestandards.org/ELA-Literacy/RST/11-12/3';",
          "810:         $competency1->targetdescription = 'Test target description';",
          "811:         $competency1->targetframework = 'CCSS.RST.11-12.3';",
          "812:         $competency1->targetcode = 'CCSS.RST.11-12.3';",
          "813:         $competency2 = clone $competency1;",
          "814:         $newid1 = $badge->save_alignment($competency1);",
          "815:         $newid2 = $badge->save_alignment($competency2);",
          "816:         $competencies1 = $badge->get_alignment();",
          "817:         $this->assertCount(2, $competencies1);",
          "819:         $this->assertEquals($competency1->badgeid, $competencies1[$newid1]->badgeid);",
          "820:         $this->assertEquals($competency1->targetname, $competencies1[$newid1]->targetname);",
          "821:         $this->assertEquals($competency1->targeturl, $competencies1[$newid1]->targeturl);",
          "822:         $this->assertEquals($competency1->targetdescription, $competencies1[$newid1]->targetdescription);",
          "823:         $this->assertEquals($competency1->targetframework, $competencies1[$newid1]->targetframework);",
          "824:         $this->assertEquals($competency1->targetcode, $competencies1[$newid1]->targetcode);",
          "827:         $competencies1[$newid1]->targetname = 'CCSS.ELA-Literacy.RST.11-12.3 update';",
          "828:         $badge->save_alignment($competencies1[$newid1], $competencies1[$newid1]->id);",
          "829:         $competencies2 = $badge->get_alignment();",
          "830:         $this->assertEquals($competencies1[$newid1]->id, $competencies2[$newid1]->id);",
          "831:         $this->assertEquals($competencies1[$newid1]->targetname, $competencies2[$newid1]->targetname);",
          "834:         $badge->delete_alignment($competencies1[$newid2]->id);",
          "835:         $this->assertCount(1, $badge->get_alignment());",
          "836:     }",
          "",
          "---------------"
        ],
        "badges/tests/behat/add_badge.feature||badges/tests/behat/add_badge.feature": [
          "File: badges/tests/behat/add_badge.feature -> badges/tests/behat/add_badge.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     Given I navigate to \"Badges > Add a new badge\" in site administration",
          "34:     And I set the following fields to these values:",
          "35:       | Name | Test badge with 'apostrophe' and other friends (<>&@#) |",
          "36:       | Description | Test badge description |",
          "37:       | issuername | Test Badge Site |",
          "38:       | issuercontact | testuser@example.com |",
          "39:     And I upload \"badges/tests/behat/badge.png\" file to \"Image\" filemanager",
          "40:     When I press \"Create badge\"",
          "41:     Then I should see \"Edit details\"",
          "42:     And I should see \"Test badge with 'apostrophe' and other friends (&@#)\"",
          "43:     And I should not see \"Create badge\"",
          "44:     And I follow \"Manage badges\"",
          "45:     And I should see \"Number of badges available: 1\"",
          "46:     And I should not see \"There are no badges available.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:       | Version | v1 |",
          "37:       | Language | English |",
          "39:       | Image author | http://author.example.com |",
          "40:       | Image caption | Test caption image |",
          "47:     And I should see \"Endorsement\"",
          "48:     And I should see \"Related badges (0)\"",
          "49:     And I should see \"Competencies (0)\"",
          "55:   @javascript @_file_upload",
          "56:   Scenario: Add a badge related",
          "57:     Given I navigate to \"Badges > Add a new badge\" in site administration",
          "58:     And I set the following fields to these values:",
          "59:       | Name | Test Badge 1 |",
          "60:       | Version | v1 |",
          "61:       | Language | French |",
          "62:       | Description | Test badge related description |",
          "63:       | Image author | http://author.example.com |",
          "64:       | Image caption | Test caption image |",
          "65:       | issuername | Test Badge Site |",
          "66:       | issuercontact | testuser@example.com |",
          "67:     And I upload \"badges/tests/behat/badge.png\" file to \"Image\" filemanager",
          "68:     And I press \"Create badge\"",
          "69:     And I wait until the page is ready",
          "70:     And I follow \"Manage badges\"",
          "71:     And I should see \"Number of badges available: 1\"",
          "72:     And I press \"Add a new badge\"",
          "73:     And I set the following fields to these values:",
          "74:       | Name | Test Badge 2 |",
          "75:       | Version | v2 |",
          "76:       | Language | English |",
          "77:       | Description | Test badge description |",
          "78:       | Image author | http://author.example.com |",
          "79:       | Image caption | Test caption image |",
          "80:       | issuername | Test Badge Site |",
          "81:       | issuercontact | testuser@example.com |",
          "82:     And I upload \"badges/tests/behat/badge.png\" file to \"Image\" filemanager",
          "83:     And I press \"Create badge\"",
          "84:     And I follow \"Related badges (0)\"",
          "85:     And I should see \"This badge does not have related badges.\"",
          "86:     And I press \"Add related badge\"",
          "87:     And I follow \"Related badges\"",
          "88:     And I wait until the page is ready",
          "89:     And I follow \"Related badges\"",
          "90:     And I set the field \"relatedbadgeids[]\" to \"Test Badge 1 (version: v1, language: French, Site badges)\"",
          "91:     When I press \"Save changes\"",
          "92:     Then I should see \"Related badges (1)\"",
          "94:   @javascript @_file_upload",
          "95:   Scenario: Endorsement for Badge",
          "96:     Given I navigate to \"Badges > Add a new badge\" in site administration",
          "97:     And I set the following fields to these values:",
          "98:       | Name | Test Badge Enrolment |",
          "99:       | Version | v1 |",
          "100:       | Language | English |",
          "101:       | Description | Test badge description |",
          "102:       | Image author | http://author.example.com |",
          "103:       | Image caption | Test caption image |",
          "104:       | issuername | Test Badge Site |",
          "105:       | issuercontact | testuser@example.com |",
          "106:     And I upload \"badges/tests/behat/badge.png\" file to \"Image\" filemanager",
          "107:     When I press \"Create badge\"",
          "108:     Then I should see \"Edit details\"",
          "109:     And I should see \"Endorsement\"",
          "110:     And I follow \"Endorsement\"",
          "111:     And I set the following fields to these values:",
          "112:       | Name | Endorser |",
          "113:       | Email | endorsement@example.com |",
          "114:       | Issuer URL | http://example.com  |",
          "115:       | Claim URL | http://claimurl.example.com |",
          "116:       | Endorsement Comment | Test Endorsement Comment |",
          "117:     And I press \"Save changes\"",
          "118:     Then I should see \"Changes saved\"",
          "120:   @javascript @_file_upload",
          "121:   Scenario: Competencies alignment for Badge",
          "122:     Given I navigate to \"Badges > Add a new badge\" in site administration",
          "123:     And I set the following fields to these values:",
          "124:       | Name | Test Badge |",
          "125:       | Version | v1 |",
          "126:       | Language | English |",
          "127:       | Description | Test badge description |",
          "128:       | Image author | http://author.example.com |",
          "129:       | Image caption | Test caption image |",
          "130:       | issuername | Test Badge Site |",
          "131:       | issuercontact | testuser@example.com |",
          "132:     And I upload \"badges/tests/behat/badge.png\" file to \"Image\" filemanager",
          "133:     When I press \"Create badge\"",
          "134:     Then I should see \"Test Badge\"",
          "135:     And I should see \"Endorsement\"",
          "136:     And I follow \"Competencies (0)\"",
          "137:     And I should see \"This badge does not have a competencies alignment.\"",
          "138:     And I press \"Add competency alignment\"",
          "139:     And I follow \"Competencies alignment\"",
          "140:     And I wait until the page is ready",
          "141:     And I follow \"Competencies alignment\"",
          "142:     And I set the following fields to these values:",
          "143:       | Name | Test Badge Competencies |",
          "144:       | URL | https://competencies.example.com |",
          "145:       | Description | Test Badge Competencies description |",
          "146:     When I press \"Save changes\"",
          "147:     And I should see \"Competencies (1)\"",
          "",
          "---------------"
        ],
        "lang/en/badges.php||lang/en/badges.php": [
          "File: lang/en/badges.php -> lang/en/badges.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: $string['actions'] = 'Actions';",
          "28: $string['activate'] = 'Enable access';",
          "29: $string['activatesuccess'] = 'Access to the badges was successfully enabled.';",
          "30: $string['addbadge'] = 'Add badges';",
          "31: $string['addbadge_help'] = 'Select all badges that should be added to this badge requirement. Hold CTRL key to select multiple items.';",
          "32: $string['addbadgecriteria'] = 'Add badge criteria';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: $string['addalignment'] = 'Add competency alignment';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: $string['addcohort_help'] = 'Select all cohorts that should be added to this badge requirement. Hold CTRL key to select multiple items.';",
          "37: $string['addcourse'] = 'Add courses';",
          "38: $string['addcourse_help'] = 'Select all courses that should be added to this badge requirement. Hold CTRL key to select multiple items.';",
          "39: $string['addtobackpack'] = 'Add to backpack';",
          "40: $string['adminonly'] = 'This page is restricted to site administrators only.';",
          "41: $string['after'] = 'after the date of issue.';",
          "42: $string['aggregationmethod'] = 'Aggregation method';",
          "43: $string['all'] = 'All';",
          "44: $string['allmethod'] = 'All of the selected conditions are met';",
          "45: $string['allmethodactivity'] = 'All of the selected activities are complete';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: $string['addrelated'] = 'Add related badge';",
          "45: $string['alignment'] = 'Competencies alignment';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: <p>If you would like your users to retain access to the earned badges it is important to select this option instead of fully deleting badges.</p>';",
          "69: $string['attachment'] = 'Attach badge to message';",
          "70: $string['attachment_help'] = 'If enabled, an issued badge file will be attached to the recipient\\'s email for download. (Attachments must be enabled in Site administration > Plugins > Message outputs > Email to use this option.)';",
          "71: $string['award'] = 'Award badge';",
          "72: $string['awardedtoyou'] = 'Issued to me';",
          "73: $string['awardoncron'] = 'Access to the badges was successfully enabled. Too many users can instantly earn this badge. To ensure site performance, this action will take some time to process.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: $string['authorimage'] = 'Image author';",
          "75: $string['authorimage_help'] = 'Author of the image, must be an URL.';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150: $string['bawards'] = 'Recipients ({$a})';",
          "151: $string['bcriteria'] = 'Criteria';",
          "152: $string['bdetails'] = 'Edit details';",
          "153: $string['bmessage'] = 'Message';",
          "154: $string['boverview'] = 'Overview';",
          "155: $string['bydate'] = ' complete by';",
          "156: $string['clearsettings'] = 'Clear settings';",
          "157: $string['completionnotenabled'] = 'Course completion is not enabled for this course, so it cannot be included in badge criteria. Course completion may be enabled in the course settings.';",
          "158: $string['completioninfo'] = 'This badge was issued for completing: ';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158: $string['bendorsement'] = 'Endorsement';",
          "161: $string['brelated'] = 'Related badges ({$a})';",
          "162: $string['balignment'] = 'Competencies ({$a})';",
          "164: $string['imagecaption'] = 'Image caption';",
          "165: $string['imagecaption_help'] = 'Caption for the image.';",
          "166: $string['claim'] = 'Claim';",
          "167: $string['claimcomment'] = 'Endorsement Comment';",
          "168: $string['claimid'] = 'Claim URL';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249: $string['donotaward'] = 'Currently, this badge is not active, so it cannot be awarded to users. If you would like to award this badge, please set its status to active.';",
          "250: $string['editsettings'] = 'Edit settings';",
          "251: $string['enablebadges'] = 'Enable badges';",
          "252: $string['error:backpackdatainvalid'] = 'The data return from the backpack was invalid.';",
          "253: $string['error:backpackemailnotfound'] = 'The email \\'{$a}\\' is not associated with a backpack. You need to <a href=\"http://backpack.openbadges.org\">create a backpack</a> for that account or sign in with another email address.';",
          "254: $string['error:backpacknotavailable'] = 'Your site is not accessible from the Internet, so any badges issued from this site cannot be verified by external backpack services.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: $string['endorsement'] = 'Endorsement';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "289: $string['error:parameter'] = 'Warning: At least one parameter should be selected to ensure correct badge issuing workflow.';",
          "290: $string['error:requesttimeout'] = 'The connection request timed out before it could complete.';",
          "291: $string['error:requesterror'] = 'The connection request failed (error code {$a}).';",
          "292: $string['error:save'] = 'Cannot save the badge.';",
          "293: $string['error:userdeleted'] = '{$a->user} (This user no longer exists in {$a->site})';",
          "294: $string['eventbadgearchived'] = 'Badge archived';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306: $string['error:relatedbadgedoesntexist'] = 'There is no public badge with this identifier';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "322: $string['externalbadges_help'] = 'This area displays badges from your external backpack.';",
          "323: $string['fixed'] = 'Fixed date';",
          "324: $string['hiddenbadge'] = 'Unfortunately, the badge owner has not made this information available.';",
          "325: $string['issuedbadge'] = 'Issued badge information';",
          "326: $string['issuancedetails'] = 'Badge expiry';",
          "327: $string['issuerdetails'] = 'Issuer details';",
          "328: $string['issuername'] = 'Issuer name';",
          "329: $string['issuername_help'] = 'Name of the issuing agent or authority.';",
          "330: $string['issuerurl'] = 'Issuer URL';",
          "331: $string['localconnectto'] = 'To share these badges outside this web site you need to <a href=\"{$a}\">connect to a backpack</a>.';",
          "332: $string['localbadges'] = 'My badges from {$a} web site';",
          "333: $string['localbadgesh'] = 'My badges from this web site';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: $string['imageauthoremail'] = 'Image author\\'s email';",
          "341: $string['imageauthoremail_help'] = 'An email address associated with author of the image.';",
          "342: $string['imageauthorname'] = 'Image author\\'s name';",
          "343: $string['imageauthorname_help'] = 'The name of the badge image\\'s author';",
          "344: $string['imageauthorurl'] = 'Image author\\'s URL';",
          "345: $string['imageauthorurl_help'] = 'The URL of the image\\'s author';",
          "346: $string['invalidurl'] = 'Invalid URL';",
          "350: $string['issueremail'] = 'Email';",
          "351: $string['issueremail_help'] = 'Endorser\\'s contact address';",
          "354: $string['issuername_endorsement'] = 'Name';",
          "355: $string['issuername_endorsement_help'] = 'The name of the endorser.';",
          "357: $string['issuerurl_help'] = 'The homepage or social media profile of the endorser. Should be a URL/URI Accessible via HTTP.';",
          "358: $string['language'] = 'Language';",
          "359: $string['language_help'] = 'Identify which language your badge expressed in.';",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "353: $string['never'] = 'Never';",
          "354: $string['newbadge'] = 'Add a new badge';",
          "355: $string['newimage'] = 'New image';",
          "356: $string['noawards'] = 'This badge has not been earned yet.';",
          "357: $string['nobackpack'] = 'There is no backpack service connected to this account.<br/>';",
          "358: $string['nobackpackbadges'] = 'There are no badges in the collections you have selected. <a href=\"mybackpack.php\">Add more collections</a>.';",
          "359: $string['nobackpackcollections'] = 'No badge collections have been selected. <a href=\"mybackpack.php\">Add collections</a>.';",
          "360: $string['nobadges'] = 'There are no badges available.';",
          "361: $string['nocriteria'] = 'Criteria for this badge have not been set up yet.';",
          "362: $string['noexpiry'] = 'This badge does not have an expiry date.';",
          "363: $string['noparamstoadd'] = 'There are no additional parameters available to add to this badge requirement.';",
          "364: $string['notacceptedrole'] = 'Your current role assignment is not among the roles that can manually issue this badge.<br/>",
          "365: If you would like to see users who have already earned this badge, you can visit {$a} page. ';",
          "366: $string['notconnected'] = 'Not connected';",
          "367: $string['nothingtoadd'] = 'There are no available criteria to add.';",
          "368: $string['notification'] = 'Notify badge creator';",
          "369: $string['notification_help'] = 'This setting manages notifications sent to a badge creator to let them know that the badge has been issued.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: $string['noalignment'] = 'This badge does not have a competencies alignment.';",
          "392: $string['noendorsement'] = 'This badge does not have an endorsement.';",
          "395: $string['norelated'] = 'This badge does not have related badges.';",
          "399: $string['notealignment'] = '<p>Identify Competencies, Skills or Standards that this badge aligns to so that earners and consumers can understand how the badge may stack and build upon one another.</p>",
          "400: <p>Example:</p>",
          "401: <ul>",
          "402:  <li>Name: CCSS.ELA-Literacy.RST.11-12.3</li>",
          "403:  <li>URL: http://www.corestandards.org/ELA-Literacy/RST/11-12/3</li>",
          "404:  <li>Description: Follow precisely a complex multistep procedure when carrying out experiments, taking measurements, or performing technical tasks; analyze the specific results based on explanations in the text.</li>",
          "405:  <li>Code: CCSS.ELA-Literacy.RST.11-12.3</li>",
          "406:  </ul>';",
          "407: $string['noteendorsement'] = 'Endorsement is used to provide a comment expressing approval of a Badge from a third party, that it is a good representation of the achievement it describes.';",
          "408: $string['noterelated'] = 'When you have multiple badges, you may want to keep track of the history behind their developements, choose \\'Add related badge\\' button then specify the badges relating to this one and their version.';",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "421: $string['recipientidentificationproblem'] = 'Cannot find a recipient of this badge among the existing users.';",
          "422: $string['recipientvalidationproblem'] = 'Current user cannot be verified as a recipient of this badge.';",
          "423: $string['relative'] = 'Relative date';",
          "424: $string['revoke'] = 'Revoke badge';",
          "425: $string['requiredcohort'] = 'At least one cohort should be added to the cohort criterion.';",
          "426: $string['requiredcourse'] = 'At least one course should be added to the courseset criterion.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: $string['relatedbages'] = 'Related badges';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "463: We want to make sure that all users complete the same requirements to earn a badge. Currently, it is not possible to revoke badges. If we allowed badges requirements to be modified all the time, we would most likely end up with users having the same badge for meeting completely different requirements.';",
          "464: $string['subject'] = 'Message subject';",
          "465: $string['variablesubstitution'] = 'Variable substitution in messages.';",
          "466: $string['variablesubstitution_help'] = 'In a badge message, certain variables can be inserted into the subject and/or body of a message so that they will be replaced with real values when the message is sent. The variables should be inserted into the text exactly as they are shown below. The following variables can be used:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: $string['targetname'] = 'Name';",
          "509: $string['targetname_help'] = 'Competency, Skill or Standard the badge aligns to';",
          "510: $string['targeturl'] = 'URL';",
          "511: $string['targeturl_help'] = 'URL linking to the official description of the alignment target, for example an individual standard within an educational framework.';",
          "512: $string['targetdescription'] = 'Description';",
          "513: $string['targetdescription_help'] = 'Short description of the alignment target.';",
          "514: $string['targetframework'] = 'Framework';",
          "515: $string['targetframework_help'] = 'Name of the framework the alignment target.';",
          "516: $string['targetcode'] = 'Code';",
          "517: $string['targetcode_help'] = 'A locally unique string identifier that identifies the alignment target within its framework.';",
          "518: $string['type'] = 'Type';",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "475: : This will be replaced by the public URL with information about the issued badge.';",
          "476: $string['viewbadge'] = 'View issued badge';",
          "477: $string['visible'] = 'Visible';",
          "478: $string['warnexpired'] = ' (This badge has expired!)';",
          "479: $string['year'] = 'Year(s)';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532: $string['version'] = 'Version';",
          "533: $string['version_help'] = 'When you have multiple related badges and want to keep track of the history behind the badge\\'s developements, use this field to version each badge. You can add all related badges on Related badge page.';",
          "",
          "---------------"
        ],
        "lib/badgeslib.php||lib/badgeslib.php": [
          "File: lib/badgeslib.php -> lib/badgeslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: define('BADGE_BACKPACKURL', 'https://backpack.openbadges.org');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: define('OPEN_BADGES_V1', 1);",
          "105: define('OPEN_BADGES_V2', 2);",
          "110: define('OPEN_BADGES_V2_CONTEXT', 'https://w3id.org/openbadges/v2');",
          "111: define('OPEN_BADGES_V2_TYPE_ASSERTION', 'Assertion');",
          "112: define('OPEN_BADGES_V2_TYPE_BADGE', 'BadgeClass');",
          "113: define('OPEN_BADGES_V2_TYPE_ISSUER', 'Issuer');",
          "114: define('OPEN_BADGES_V2_TYPE_ENDORSEMENT', 'Endorsement');",
          "115: define('OPEN_BADGES_V2_TYPE_AUTHOR', 'Author');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     public $status = 0;",
          "128:     public $nextcron;",
          "131:     public $criteria = array();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     public $version;",
          "150:     public $language;",
          "153:     public $imageauthorname;",
          "156:     public $imageauthoremail;",
          "159:     public $imageauthorurl;",
          "162:     public $imagecaption;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680:         $badgecontext = $this->get_context();",
          "681:         $fs->delete_area_files($badgecontext->id, 'badges', 'badgeimage', $this->id);",
          "684:         $DB->delete_records('badge', array('id' => $this->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:         $DB->delete_records('badge_endorsement', array('badgeid' => $this->id));",
          "719:         $relatedsql = 'badgeid = :badgeid OR relatedbadgeid = :relatedbadgeid';",
          "720:         $relatedparams = array(",
          "721:             'badgeid' => $this->id,",
          "722:             'relatedbadgeid' => $this->id",
          "723:         );",
          "724:         $DB->delete_records_select('badge_related', $relatedsql, $relatedparams);",
          "725:         $DB->delete_records('badge_competencies', array('badgeid' => $this->id));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "691:         $event = \\core\\event\\badge_deleted::create($eventparams);",
          "692:         $event->trigger();",
          "693:     }",
          "694: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     public function add_related_badges($relatedids) {",
          "745:         global $DB;",
          "746:         $relatedbadges = array();",
          "747:         foreach ($relatedids as $relatedid) {",
          "748:             $relatedbadge = new stdClass();",
          "749:             $relatedbadge->badgeid = $this->id;",
          "750:             $relatedbadge->relatedbadgeid = $relatedid;",
          "751:             $relatedbadges[] = $relatedbadge;",
          "752:         }",
          "753:         $DB->insert_records('badge_related', $relatedbadges);",
          "754:     }",
          "762:     public function delete_related_badge($relatedid) {",
          "763:         global $DB;",
          "764:         return $DB->delete_records('badge_related', array('badgeid' => $this->id, 'relatedbadgeid' => $relatedid));",
          "765:     }",
          "772:     public function has_related() {",
          "773:         global $DB;",
          "774:         return $DB->record_exists('badge_related', array('badgeid' => $this->id));",
          "775:     }",
          "783:     public function get_related_badges(bool $activeonly = false) {",
          "784:         global $DB;",
          "786:         $params = array('badgeid' => $this->id);",
          "787:         $query = \"SELECT b.id, b.name, b.version, b.language, b.type",
          "788:                     FROM {badge_related} br",
          "789:                     JOIN {badge} b ON b.id = br.relatedbadgeid",
          "790:                    WHERE br.badgeid = :badgeid\";",
          "791:         if ($activeonly) {",
          "792:             $query .= \" AND b.status <> :status\";",
          "793:             $params['status'] = BADGE_STATUS_INACTIVE;",
          "794:         }",
          "795:         $relatedbadges = $DB->get_records_sql($query, $params);",
          "796:         return $relatedbadges;",
          "797:     }",
          "806:     public function save_alignment($alignment, $alignmentid = 0) {",
          "807:         global $DB;",
          "809:         $record = $DB->record_exists('badge_competencies', array('id' => $alignmentid));",
          "810:         if ($record) {",
          "811:             $alignment->id = $alignmentid;",
          "812:             return $DB->update_record('badge_competencies', $alignment);",
          "813:         } else {",
          "814:             return $DB->insert_record('badge_competencies', $alignment, true);",
          "815:         }",
          "816:     }",
          "824:     public function delete_alignment($alignmentid) {",
          "825:         global $DB;",
          "826:         return $DB->delete_records('badge_competencies', array('badgeid' => $this->id, 'id' => $alignmentid));",
          "827:     }",
          "834:     public function get_alignment() {",
          "835:         global $DB;",
          "836:         return $DB->get_records('badge_competencies', array('badgeid' => $this->id));",
          "837:     }",
          "845:     public function save_endorsement($endorsement) {",
          "846:         global $DB;",
          "847:         $record = $DB->get_record('badge_endorsement', array('badgeid' => $this->id));",
          "848:         if ($record) {",
          "849:             $endorsement->id = $record->id;",
          "850:             return $DB->update_record('badge_endorsement', $endorsement);",
          "851:         } else {",
          "852:             return $DB->insert_record('badge_endorsement', $endorsement, true);",
          "853:         }",
          "854:     }",
          "861:     public function get_endorsement() {",
          "862:         global $DB;",
          "863:         return $DB->get_record('badge_endorsement', array('badgeid' => $this->id));",
          "864:     }",
          "871:     public function markdown_badge_criteria() {",
          "872:         $agg = $this->get_aggregation_methods();",
          "873:         if (empty($this->criteria)) {",
          "874:             return get_string('nocriteria', 'badges');",
          "875:         }",
          "876:         $overalldescr = '';",
          "877:         $overall = $this->criteria[BADGE_CRITERIA_TYPE_OVERALL];",
          "878:         if (!empty($overall->description)) {",
          "879:                 $overalldescr = format_text($overall->description, $overall->descriptionformat,",
          "880:                     array('context' => $this->get_context())) . '\\n';",
          "881:         }",
          "883:         if (count($this->criteria) == 2) {",
          "884:             $condition = get_string('criteria_descr', 'badges');",
          "885:         } else {",
          "886:             $condition = get_string('criteria_descr_' . BADGE_CRITERIA_TYPE_OVERALL, 'badges',",
          "887:                 core_text::strtoupper($agg[$this->get_aggregation_method()]));",
          "888:         }",
          "889:         unset($this->criteria[BADGE_CRITERIA_TYPE_OVERALL]);",
          "890:         $items = array();",
          "892:         if (count($this->criteria) == 1) {",
          "893:             $c = reset($this->criteria);",
          "894:             if (!empty($c->description)) {",
          "895:                 $overalldescr = $c->description . '\\n';",
          "896:             }",
          "897:             if (count($c->params) == 1) {",
          "898:                 $items[] = ' * ' . get_string('criteria_descr_single_' . $c->criteriatype, 'badges') .",
          "899:                     $c->get_details();",
          "900:             } else {",
          "901:                 $items[] = '* ' . get_string('criteria_descr_' . $c->criteriatype, 'badges',",
          "902:                         core_text::strtoupper($agg[$this->get_aggregation_method($c->criteriatype)])) .",
          "903:                     $c->get_details();",
          "904:             }",
          "905:         } else {",
          "906:             foreach ($this->criteria as $type => $c) {",
          "907:                 $criteriadescr = '';",
          "908:                 if (!empty($c->description)) {",
          "909:                     $criteriadescr = $c->description;",
          "910:                 }",
          "911:                 if (count($c->params) == 1) {",
          "912:                     $items[] = ' * ' . get_string('criteria_descr_single_' . $type, 'badges') .",
          "913:                         $c->get_details() . $criteriadescr;",
          "914:                 } else {",
          "915:                     $items[] = '* ' . get_string('criteria_descr_' . $type, 'badges',",
          "916:                             core_text::strtoupper($agg[$this->get_aggregation_method($type)])) .",
          "917:                         $c->get_details() . $criteriadescr;",
          "918:                 }",
          "919:             }",
          "920:         }",
          "921:         return strip_tags($overalldescr . $condition . html_writer::alist($items, array(), 'ul'));",
          "922:     }",
          "929:     public function get_badge_issuer() {",
          "930:         $issuer = array();",
          "931:         $issuerurl = new moodle_url('/badges/badge_json.php', array('id' => $this->id, 'action' => 0));",
          "932:         $issuer['name'] = $this->issuername;",
          "933:         $issuer['url'] = $this->issuerurl;",
          "934:         $issuer['email'] = $this->issuercontact;",
          "935:         $issuer['@context'] = OPEN_BADGES_V2_CONTEXT;",
          "936:         $issuer['id'] = $issuerurl->out(false);",
          "937:         $issuer['type'] = OPEN_BADGES_V2_TYPE_ISSUER;",
          "938:         return $issuer;",
          "939:     }",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2672:         upgrade_main_savepoint(true, 2018102900.01);",
          "2673:     }",
          "2675:     return true;",
          "2676: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2675:     if ($oldversion < 2018110300.01) {",
          "2677:         $tablebadge = new xmldb_table('badge');",
          "2678:         $fieldversion = new xmldb_field('version', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'nextcron');",
          "2679:         $fieldlanguage = new xmldb_field('language', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'version');",
          "2680:         $fieldimageauthorname = new xmldb_field('imageauthorname', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'language');",
          "2681:         $fieldimageauthoremail = new xmldb_field('imageauthoremail', XMLDB_TYPE_CHAR, '255', null, null,",
          "2682:             null, null, 'imageauthorname');",
          "2683:         $fieldimageauthorurl = new xmldb_field('imageauthorurl', XMLDB_TYPE_CHAR, '255', null, null,",
          "2684:             null, null, 'imageauthoremail');",
          "2685:         $fieldimagecaption = new xmldb_field('imagecaption', XMLDB_TYPE_TEXT, null, null, null, null, null, 'imageauthorurl');",
          "2687:         if (!$dbman->field_exists($tablebadge, $fieldversion)) {",
          "2688:             $dbman->add_field($tablebadge, $fieldversion);",
          "2689:         }",
          "2690:         if (!$dbman->field_exists($tablebadge, $fieldlanguage)) {",
          "2691:             $dbman->add_field($tablebadge, $fieldlanguage);",
          "2692:         }",
          "2693:         if (!$dbman->field_exists($tablebadge, $fieldimageauthorname)) {",
          "2694:             $dbman->add_field($tablebadge, $fieldimageauthorname);",
          "2695:         }",
          "2696:         if (!$dbman->field_exists($tablebadge, $fieldimageauthoremail)) {",
          "2697:             $dbman->add_field($tablebadge, $fieldimageauthoremail);",
          "2698:         }",
          "2699:         if (!$dbman->field_exists($tablebadge, $fieldimageauthorurl)) {",
          "2700:             $dbman->add_field($tablebadge, $fieldimageauthorurl);",
          "2701:         }",
          "2702:         if (!$dbman->field_exists($tablebadge, $fieldimagecaption)) {",
          "2703:             $dbman->add_field($tablebadge, $fieldimagecaption);",
          "2704:         }",
          "2707:         $table = new xmldb_table('badge_endorsement');",
          "2710:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2711:         $table->add_field('badgeid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "2712:         $table->add_field('issuername', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "2713:         $table->add_field('issuerurl', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "2714:         $table->add_field('issueremail', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "2715:         $table->add_field('claimid', XMLDB_TYPE_CHAR, '255', null, null, null, null);",
          "2716:         $table->add_field('claimcomment', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "2717:         $table->add_field('dateissued', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "2720:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "2721:         $table->add_key('endorsementbadge', XMLDB_KEY_FOREIGN, ['badgeid'], 'badge', ['id']);",
          "2724:         if (!$dbman->table_exists($table)) {",
          "2725:             $dbman->create_table($table);",
          "2726:         }",
          "2729:         $table = new xmldb_table('badge_related');",
          "2732:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2733:         $table->add_field('badgeid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "2734:         $table->add_field('relatedbadgeid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2737:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "2738:         $table->add_key('badgeid', XMLDB_KEY_FOREIGN, ['badgeid'], 'badge', ['id']);",
          "2739:         $table->add_key('relatedbadgeid', XMLDB_KEY_FOREIGN, ['relatedbadgeid'], 'badge', ['id']);",
          "2740:         $table->add_key('badgeid-relatedbadgeid', XMLDB_KEY_UNIQUE, ['badgeid', 'relatedbadgeid']);",
          "2743:         if (!$dbman->table_exists($table)) {",
          "2744:             $dbman->create_table($table);",
          "2745:         }",
          "2748:         $table = new xmldb_table('badge_competencies');",
          "2751:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2752:         $table->add_field('badgeid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "2753:         $table->add_field('targetname', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "2754:         $table->add_field('targeturl', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);",
          "2755:         $table->add_field('targetdescription', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "2756:         $table->add_field('targetframework', XMLDB_TYPE_CHAR, '255', null, null, null, null);",
          "2757:         $table->add_field('targetcode', XMLDB_TYPE_CHAR, '255', null, null, null, null);",
          "2760:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "2761:         $table->add_key('competenciesbadge', XMLDB_KEY_FOREIGN, ['badgeid'], 'badge', ['id']);",
          "2764:         if (!$dbman->table_exists($table)) {",
          "2765:             $dbman->create_table($table);",
          "2766:         }",
          "2769:         upgrade_main_savepoint(true, 2018110300.01);",
          "2770:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018110500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018110500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e97dfff78d551c7f3c29e370fb6c892412a79e80",
      "candidate_info": {
        "commit_hash": "e97dfff78d551c7f3c29e370fb6c892412a79e80",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e97dfff78d551c7f3c29e370fb6c892412a79e80",
        "files": [
          "admin/tool/analytics/classes/output/model_logs.php",
          "admin/tool/analytics/classes/output/models_list.php",
          "admin/tool/analytics/cli/evaluate_model.php",
          "admin/tool/analytics/lang/en/tool_analytics.php",
          "analytics/classes/model.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-64787 tool_analytics: Include training data source in the log table",
        "before_after_code_files": [
          "admin/tool/analytics/classes/output/model_logs.php||admin/tool/analytics/classes/output/model_logs.php",
          "admin/tool/analytics/classes/output/models_list.php||admin/tool/analytics/classes/output/models_list.php",
          "admin/tool/analytics/cli/evaluate_model.php||admin/tool/analytics/cli/evaluate_model.php",
          "admin/tool/analytics/lang/en/tool_analytics.php||admin/tool/analytics/lang/en/tool_analytics.php",
          "analytics/classes/model.php||analytics/classes/model.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/analytics/classes/output/model_logs.php||admin/tool/analytics/classes/output/model_logs.php": [
          "File: admin/tool/analytics/classes/output/model_logs.php -> admin/tool/analytics/classes/output/model_logs.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     protected $model = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     protected $evaluationmode = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         $this->set_attribute('class', 'modellog generaltable generalbox');",
          "58:         $this->set_attribute('aria-live', 'polite');",
          "61:         $this->define_headers(array(",
          "62:             get_string('time'),",
          "63:             get_string('version'),",
          "64:             get_string('indicators', 'tool_analytics'),",
          "65:             get_string('timesplittingmethod', 'analytics'),",
          "66:             get_string('accuracy', 'tool_analytics'),",
          "67:             get_string('info', 'tool_analytics'),",
          "68:             get_string('fullnameuser'),",
          "69:         ));",
          "70:         $this->pageable(true);",
          "71:         $this->collapsible(false);",
          "72:         $this->sortable(false);",
          "73:         $this->is_downloadable(false);",
          "75:         $this->define_baseurl($PAGE->url);",
          "76:     }",
          "",
          "[Removed Lines]",
          "60:         $this->define_columns(array('time', 'version', 'indicators', 'timesplitting', 'accuracy', 'info', 'usermodified'));",
          "",
          "[Added Lines]",
          "65:         $this->define_columns(array('time', 'version', 'evaluationmode', 'indicators', 'timesplitting',",
          "66:             'accuracy', 'info', 'usermodified'));",
          "70:             get_string('evaluationmode', 'tool_analytics'),",
          "78:         $evaluationmodehelp = new \\help_icon('evaluationmode', 'tool_analytics');",
          "79:         $this->define_help_for_headers([null, null, $evaluationmodehelp, null, null, null, null, null]);",
          "86:         $this->evaluationmode = optional_param('evaluationmode', false, PARAM_ALPHANUM);",
          "87:         if ($this->evaluationmode && $this->evaluationmode != 'configuration' && $this->evaluationmode != 'trainedmodel') {",
          "88:             $this->evaluationmode = '';",
          "89:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:         return userdate($log->version, $recenttimestr);",
          "87:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     public function col_evaluationmode($log) {",
          "112:         return get_string('evaluationmodecol' . $log->evaluationmode, 'tool_analytics');",
          "113:     }",
          "",
          "---------------"
        ],
        "admin/tool/analytics/classes/output/models_list.php||admin/tool/analytics/classes/output/models_list.php": [
          "File: admin/tool/analytics/classes/output/models_list.php -> admin/tool/analytics/classes/output/models_list.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:             }",
          "205:                 $urlparams['action'] = 'log';",
          "206:                 $url = new \\moodle_url('model.php', $urlparams);",
          "207:                 $icon = new \\action_menu_link_secondary($url, new \\pix_icon('i/report', get_string('viewlog', 'tool_analytics')),",
          "",
          "[Removed Lines]",
          "204:             if (!$model->is_static()) {",
          "",
          "[Added Lines]",
          "204:             if (!$model->is_static() && $model->get_logs()) {",
          "",
          "---------------"
        ],
        "admin/tool/analytics/cli/evaluate_model.php||admin/tool/analytics/cli/evaluate_model.php": [
          "File: admin/tool/analytics/cli/evaluate_model.php -> admin/tool/analytics/cli/evaluate_model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     exit(0);",
          "68: }",
          "71:     \\tool_analytics\\clihelper::list_models();",
          "72:     exit(0);",
          "73: }",
          "76: if ($options['filter'] !== false) {",
          "77:     $options['filter'] = explode(',', $options['filter']);",
          "",
          "[Removed Lines]",
          "70: if ($options['list'] || $options['modelid'] === false) {",
          "",
          "[Added Lines]",
          "70: if ($options['list']) {",
          "75: if ($options['modelid'] === false) {",
          "77:     echo $help;",
          "78:     exit(0);",
          "79: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     cli_error('Error: The provided mode is not supported');",
          "82: }",
          "85: \\core\\session\\manager::set_user(get_admin());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: if ($options['mode'] == 'trainedmodel' && $options['timesplitting']) {",
          "91:     cli_error('Sorry, no time splitting method can be specified when using \\'trainedmodel\\' mode.');",
          "92: }",
          "",
          "---------------"
        ],
        "admin/tool/analytics/lang/en/tool_analytics.php||admin/tool/analytics/lang/en/tool_analytics.php": [
          "File: admin/tool/analytics/lang/en/tool_analytics.php -> admin/tool/analytics/lang/en/tool_analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: $string['evaluate'] = 'Evaluate';",
          "55: $string['evaluatemodel'] = 'Evaluate model';",
          "56: $string['evaluationmode'] = 'Evaluation mode';",
          "58: $string['evaluationmodetrainedmodel'] = 'Evaluate the trained model';",
          "59: $string['evaluationmodeconfiguration'] = 'Evaluate the model configuration';",
          "60: $string['evaluationinbatches'] = 'The site contents are calculated and stored in batches. The evaluation process may be stopped at any time. The next time it is run, it will continue from the point when it was stopped.';",
          "61: $string['exportmodel'] = 'Export configuration';",
          "",
          "[Removed Lines]",
          "57: $string['evaluationmodeinfo'] = 'This model has been trained using data from another site. You can evaluate the performance of the trained model on your site, or you can evaluate the performance of this model configuration using the data available on this site.';",
          "",
          "[Added Lines]",
          "57: $string['evaluationmode_help'] = 'There are two evaluation modes:",
          "62: Trained model is only available if a trained model has been imported into the site, and has not yet been re-trained using site data.';",
          "63: $string['evaluationmodeinfo'] = 'This model has been imported into the site. You can either evaluate the performance of the model, or you can evaluate the performance of the model configuration using site data.';",
          "65: $string['evaluationmodecoltrainedmodel'] = 'Trained model';",
          "66: $string['evaluationmodecolconfiguration'] = 'Configuration';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: $string['trainingresults'] = 'Training results';",
          "109: $string['trainmodels'] = 'Train models';",
          "110: $string['versionnotsame'] = 'Imported file was from a different moodle version ({$a->importedversion}) than the current one ({$a->version})';",
          "112: $string['weeksenddateautomaticallyset'] = 'End date automatically set based on start date and the number of sections';",
          "113: $string['weeksenddatedefault'] = 'End date automatically calculated from the course start date.';",
          "114: $string['privacy:metadata'] = 'The Analytic models plugin does not store any personal data.';",
          "",
          "[Removed Lines]",
          "111: $string['viewlog'] = 'Log';",
          "",
          "[Added Lines]",
          "119: $string['viewlog'] = 'Evaluation log';",
          "",
          "---------------"
        ],
        "analytics/classes/model.php||analytics/classes/model.php": [
          "File: analytics/classes/model.php -> analytics/classes/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:             $options['mode'] = 'configuration';",
          "543:         }",
          "554:         }",
          "556:         $this->init_analyser($options);",
          "",
          "[Removed Lines]",
          "545:         if ($options['mode'] == 'trainedmodel') {",
          "548:             $options['timesplitting'] = $this->model->timesplitting;",
          "551:             $trainedmodeldir = $this->get_output_dir(['execution']);",
          "552:         } else {",
          "553:             $trainedmodeldir = false;",
          "",
          "[Added Lines]",
          "545:         switch ($options['mode']) {",
          "546:             case 'trainedmodel':",
          "549:                 $options['timesplitting'] = $this->model->timesplitting;",
          "552:                 $trainedmodeldir = $this->get_output_dir(['execution']);",
          "553:                 break;",
          "554:             case 'configuration':",
          "556:                 $trainedmodeldir = false;",
          "557:                 break;",
          "559:             default:",
          "560:                 throw new \\moodle_exception('errorunknownaction', 'analytics');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612:                 $dir = $predictorresult->dir;",
          "613:             }",
          "617:             $results[$timesplitting->get_id()] = $result;",
          "618:         }",
          "",
          "[Removed Lines]",
          "615:             $result->logid = $this->log_result($timesplitting->get_id(), $result->score, $dir, $result->info);",
          "",
          "[Added Lines]",
          "622:             $result->logid = $this->log_result($timesplitting->get_id(), $result->score, $dir, $result->info, $options['mode']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1532:         global $DB, $USER;",
          "1534:         $log = new \\stdClass();",
          "1535:         $log->modelid = $this->get_id();",
          "1536:         $log->version = $this->model->version;",
          "1537:         $log->target = $this->model->target;",
          "1538:         $log->indicators = $this->model->indicators;",
          "1539:         $log->timesplitting = $timesplittingid;",
          "",
          "[Removed Lines]",
          "1531:     protected function log_result($timesplittingid, $score, $dir = false, $info = false) {",
          "",
          "[Added Lines]",
          "1539:     protected function log_result($timesplittingid, $score, $dir = false, $info = false, $evaluationmode = 'configuration') {",
          "1545:         $log->evaluationmode = $evaluationmode;",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2753:         upgrade_main_savepoint(true, 2019030100.01);",
          "2754:     }",
          "2756:     return true;",
          "2757: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2756:     if ($oldversion < 2019030700.01) {",
          "2759:         $table = new xmldb_table('analytics_models_log');",
          "2760:         $field = new xmldb_field('evaluationmode', XMLDB_TYPE_CHAR, '50', null, null, null,",
          "2761:             null, 'version');",
          "2764:         if (!$dbman->field_exists($table, $field)) {",
          "2765:             $dbman->add_field($table, $field);",
          "2767:             $updatesql = \"UPDATE {analytics_models_log}",
          "2768:                              SET evaluationmode = 'configuration'\";",
          "2769:             $DB->execute($updatesql, []);",
          "2772:             $field = new xmldb_field('evaluationmode', XMLDB_TYPE_CHAR, '50', null, XMLDB_NOTNULL,",
          "2773:                 null, null, 'version');",
          "2776:             $dbman->change_field_notnull($table, $field);",
          "2777:         }",
          "2780:         upgrade_main_savepoint(true, 2019030700.01);",
          "2781:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019030700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019030700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0465a942c3c955a06e72e304985194880ffdab31",
      "candidate_info": {
        "commit_hash": "0465a942c3c955a06e72e304985194880ffdab31",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0465a942c3c955a06e72e304985194880ffdab31",
        "files": [
          "version.php"
        ],
        "message": "weekly on-sync release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018120300.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181203)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018120300.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20181204)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}