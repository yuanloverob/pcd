{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4abffd03f6f73d1c9b599281e3bd3c3de324b4ee",
      "candidate_info": {
        "commit_hash": "4abffd03f6f73d1c9b599281e3bd3c3de324b4ee",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4abffd03f6f73d1c9b599281e3bd3c3de324b4ee",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891917 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:         {",
          "51:             components = new float[array.size() - 1];",
          "53:             {",
          "54:                 components[i] = ((COSNumber)array.get(i)).floatValue();",
          "55:             }",
          "",
          "[Removed Lines]",
          "52:             for (int i = 0; i < array.size() - 1; i++)",
          "",
          "[Added Lines]",
          "52:             for (int i = 0; i < components.length; i++)",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:                 float[] initial = new float[getNumberOfComponents()];",
          "238:                 {",
          "239:                     initial[c] = Math.max(0, getRangeForComponent(c).getMin());",
          "240:                 }",
          "",
          "[Removed Lines]",
          "237:                 for (int c = 0; c < getNumberOfComponents(); c++)",
          "",
          "[Added Lines]",
          "237:                 for (int c = 0; c < initial.length; c++)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45baabd42386badeb50c25043c7b3a748102022c",
      "candidate_info": {
        "commit_hash": "45baabd42386badeb50c25043c7b3a748102022c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/45baabd42386badeb50c25043c7b3a748102022c",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java"
        ],
        "message": "PDFBOX-4892: set individual initial ArrayList size, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887590 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceNProcess.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     public List<String> getComponents()",
          "83:     {",
          "86:         if (cosComponents == null)",
          "87:         {",
          "89:         }",
          "90:         for (COSBase name : cosComponents)",
          "91:         {",
          "92:             components.add(((COSName)name).getName());",
          "",
          "[Removed Lines]",
          "84:         List<String> components = new ArrayList<String>();",
          "85:         COSArray cosComponents = (COSArray)dictionary.getDictionaryObject(COSName.COMPONENTS);",
          "88:             return components;",
          "",
          "[Added Lines]",
          "84:         COSArray cosComponents = dictionary.getCOSArray(COSName.COMPONENTS);",
          "87:             return new ArrayList<String>(0);",
          "89:         List<String> components = new ArrayList<String>(cosComponents.size());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76beac2fc316475468821087d9505fa2d09ed3d0",
      "candidate_info": {
        "commit_hash": "76beac2fc316475468821087d9505fa2d09ed3d0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/76beac2fc316475468821087d9505fa2d09ed3d0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java"
        ],
        "message": "PDFBOX-4892: avoid div by zero, as suggested by Potkis; closes #106\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887072 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:                     }",
          "339:                 }",
          "340:             }",
          "342:             if (averageWidth <= 0 || Float.isNaN(averageWidth))",
          "343:             {",
          "344:                 averageWidth = getDefaultWidth();",
          "",
          "[Removed Lines]",
          "341:             averageWidth = totalWidths / characterCount;",
          "",
          "[Added Lines]",
          "341:             if (characterCount != 0)",
          "342:             {",
          "343:                 averageWidth = totalWidths / characterCount;",
          "344:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7506ff8e4df5f6aaeb3ea1a7468deaf77afac1e7",
      "candidate_info": {
        "commit_hash": "7506ff8e4df5f6aaeb3ea1a7468deaf77afac1e7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7506ff8e4df5f6aaeb3ea1a7468deaf77afac1e7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java"
        ],
        "message": "PDFBOX-5106: detect negative values\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886813 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         {",
          "66:             throw new IOException(\"/N entry missing in object stream\");",
          "67:         }",
          "69:         firstObject = stream.getInt(COSName.FIRST);",
          "70:         if (firstObject == -1)",
          "71:         {",
          "72:             throw new IOException(\"/First entry missing in object stream\");",
          "73:         }",
          "74:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:         if (numberOfObjects < 0)",
          "69:         {",
          "70:             throw new IOException(\"Illegal /N entry in object stream: \" + numberOfObjects);",
          "71:         }",
          "78:         if (firstObject < 0)",
          "79:         {",
          "80:             throw new IOException(\"Illegal /First entry in object stream: \" + firstObject);",
          "81:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f515f8d9bd1dd86b0a7f404735b33d148df7a62",
      "candidate_info": {
        "commit_hash": "3f515f8d9bd1dd86b0a7f404735b33d148df7a62",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3f515f8d9bd1dd86b0a7f404735b33d148df7a62",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java"
        ],
        "message": "PDFBOX-4421: pull up AES stuff because it will be used by both security handlers, as suggested by Christian Appl\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881823 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/ProtectionPolicy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     private static final int DEFAULT_KEY_LENGTH = 40;",
          "35:     private int encryptionKeyLength = DEFAULT_KEY_LENGTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     private boolean preferAES = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     {",
          "62:         return encryptionKeyLength;",
          "63:     }",
          "64: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     public boolean isPreferAES()",
          "74:     {",
          "75:         return this.preferAES;",
          "76:     }",
          "85:     public void setPreferAES(boolean preferAES)",
          "86:     {",
          "87:         this.preferAES = preferAES;",
          "88:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     private String ownerPassword = \"\";",
          "41:     @SuppressWarnings({\"squid:S2068\"})",
          "42:     private String userPassword = \"\";",
          "",
          "[Removed Lines]",
          "43:     private boolean preferAES = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     {",
          "112:         this.userPassword = userPassword;",
          "113:     }",
          "138: }",
          "",
          "[Removed Lines]",
          "122:     public boolean isPreferAES()",
          "123:     {",
          "124:         return this.preferAES;",
          "125:     }",
          "134:     public void setPreferAES(boolean preferAES)",
          "135:     {",
          "136:         this.preferAES = preferAES;",
          "137:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}