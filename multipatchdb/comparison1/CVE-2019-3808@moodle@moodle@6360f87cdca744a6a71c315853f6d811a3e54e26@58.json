{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2d2ed90c297597e740e3764116ce2a8863e19e4",
      "candidate_info": {
        "commit_hash": "a2d2ed90c297597e740e3764116ce2a8863e19e4",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a2d2ed90c297597e740e3764116ce2a8863e19e4",
        "files": [
          "blocks/classes/external.php",
          "blocks/tests/externallib_test.php",
          "blocks/upgrade.txt",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63465-master' of git://github.com/jleyva/moodle",
        "before_after_code_files": [
          "blocks/classes/external.php||blocks/classes/external.php",
          "blocks/tests/externallib_test.php||blocks/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "blocks/classes/external.php||blocks/classes/external.php": [
          "File: blocks/classes/external.php -> blocks/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: class core_block_external extends external_api {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     private static function get_block_structure() {",
          "50:         return new external_single_structure(",
          "51:             array(",
          "52:                 'instanceid'    => new external_value(PARAM_INT, 'Block instance id.'),",
          "53:                 'name'          => new external_value(PARAM_PLUGIN, 'Block name.'),",
          "54:                 'region'        => new external_value(PARAM_ALPHANUMEXT, 'Block region.'),",
          "55:                 'positionid'    => new external_value(PARAM_INT, 'Position id.'),",
          "56:                 'collapsible'   => new external_value(PARAM_BOOL, 'Whether the block is collapsible.'),",
          "57:                 'dockable'      => new external_value(PARAM_BOOL, 'Whether the block is dockable.'),",
          "58:                 'weight'        => new external_value(PARAM_INT, 'Used to order blocks within a region.', VALUE_OPTIONAL),",
          "59:                 'visible'       => new external_value(PARAM_BOOL, 'Whether the block is visible.', VALUE_OPTIONAL),",
          "60:             ), 'Block information.'",
          "61:         );",
          "62:     }",
          "71:     private static function get_all_current_page_blocks($includeinvisible = false) {",
          "72:         global $PAGE, $OUTPUT;",
          "75:         $PAGE->blocks->load_blocks($includeinvisible);",
          "76:         $PAGE->blocks->create_all_block_instances();",
          "78:         $allblocks = array();",
          "79:         $blocks = $PAGE->blocks->get_content_for_all_regions($OUTPUT);",
          "80:         foreach ($blocks as $region => $regionblocks) {",
          "81:             $regioninstances = $PAGE->blocks->get_blocks_for_region($region);",
          "83:             $blockinstances = array();",
          "84:             foreach ($regioninstances as $ri) {",
          "85:                 $blockinstances[$ri->instance->id] = $ri->instance;",
          "86:             }",
          "88:             foreach ($regionblocks as $bc) {",
          "89:                 $allblocks[] = [",
          "90:                     'instanceid' => $bc->blockinstanceid,",
          "91:                     'name' => $blockinstances[$bc->blockinstanceid]->blockname,",
          "92:                     'region' => $region,",
          "93:                     'positionid' => $bc->blockpositionid,",
          "94:                     'collapsible' => (bool) $bc->collapsible,",
          "95:                     'dockable' => (bool) $bc->dockable,",
          "96:                     'weight' => $blockinstances[$bc->blockinstanceid]->weight,",
          "97:                     'visible' => $blockinstances[$bc->blockinstanceid]->visible,",
          "98:                 ];",
          "99:             }",
          "100:         }",
          "101:         return $allblocks;",
          "102:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     public static function get_course_blocks($courseid) {",
          "67:         $warnings = array();",
          "68:         $params = self::validate_parameters(self::get_course_blocks_parameters(), ['courseid' => $courseid]);",
          "",
          "[Removed Lines]",
          "65:         global $OUTPUT, $PAGE;",
          "",
          "[Added Lines]",
          "127:         global $PAGE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:             $PAGE->set_pagetype('course-view-' . $course->format);",
          "83:         }",
          "104:         return array(",
          "106:             'warnings' => $warnings",
          "107:         );",
          "108:     }",
          "",
          "[Removed Lines]",
          "86:         $PAGE->blocks->load_blocks();",
          "87:         $PAGE->blocks->create_all_block_instances();",
          "89:         $finalblocks = array();",
          "90:         $blocks = $PAGE->blocks->get_content_for_all_regions($OUTPUT);",
          "91:         foreach ($blocks as $region => $regionblocks) {",
          "92:             foreach ($regionblocks as $bc) {",
          "93:                 $finalblocks[] = [",
          "94:                     'instanceid' => $bc->blockinstanceid,",
          "95:                     'name' => $bc->attributes['data-block'],",
          "96:                     'region' => $region,",
          "97:                     'positionid' => $bc->blockpositionid,",
          "98:                     'collapsible' => (bool) $bc->collapsible,",
          "99:                     'dockable' => (bool) $bc->dockable,",
          "100:                 ];",
          "101:             }",
          "102:         }",
          "105:             'blocks' => $finalblocks,",
          "",
          "[Added Lines]",
          "147:         $allblocks = self::get_all_current_page_blocks();",
          "150:             'blocks' => $allblocks,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:         return new external_single_structure(",
          "119:             array(",
          "132:                 'warnings'  => new external_warnings(),",
          "133:             )",
          "134:         );",
          "135:     }",
          "137: }",
          "",
          "[Removed Lines]",
          "120:                 'blocks' => new external_multiple_structure(",
          "121:                     new external_single_structure(",
          "122:                         array(",
          "123:                             'instanceid'    => new external_value(PARAM_INT, 'Block instance id.'),",
          "124:                             'name'          => new external_value(PARAM_PLUGIN, 'Block name.'),",
          "125:                             'region'        => new external_value(PARAM_ALPHANUMEXT, 'Block region.'),",
          "126:                             'positionid'    => new external_value(PARAM_INT, 'Position id.'),",
          "127:                             'collapsible'   => new external_value(PARAM_BOOL, 'Whether the block is collapsible.'),",
          "128:                             'dockable'      => new external_value(PARAM_BOOL, 'hether the block is  dockable.'),",
          "129:                         ), 'Block information.'",
          "130:                     ), 'List of blocks in the course.'",
          "131:                 ),",
          "",
          "[Added Lines]",
          "165:                 'blocks' => new external_multiple_structure(self::get_block_structure(), 'List of blocks in the course.'),",
          "177:     public static function get_dashboard_blocks_parameters() {",
          "178:         return new external_function_parameters(",
          "179:             array(",
          "180:                 'userid'  => new external_value(PARAM_INT, 'User id (optional), default is current user.', VALUE_DEFAULT, 0)",
          "181:             )",
          "182:         );",
          "183:     }",
          "193:     public static function get_dashboard_blocks($userid = 0) {",
          "194:         global $CFG, $USER, $PAGE;",
          "196:         require_once($CFG->dirroot . '/my/lib.php');",
          "198:         $warnings = array();",
          "199:         $params = self::validate_parameters(self::get_dashboard_blocks_parameters(), ['userid' => $userid]);",
          "201:         $userid = $params['userid'];",
          "202:         if (empty($userid)) {",
          "203:             $userid = $USER->id;",
          "204:         }",
          "206:         if ($USER->id != $userid) {",
          "208:             require_capability('moodle/site:config', context_system::instance());",
          "209:             $user = core_user::get_user($userid, '*', MUST_EXIST);",
          "210:             core_user::require_active_user($user);",
          "211:         }",
          "213:         $context = context_user::instance($userid);;",
          "214:         self::validate_context($context);",
          "217:         if (!$currentpage = my_get_page($userid, MY_PAGE_PRIVATE)) {",
          "218:             throw new moodle_exception('mymoodlesetup');",
          "219:         }",
          "221:         $PAGE->set_context($context);",
          "222:         $PAGE->set_pagelayout('mydashboard');",
          "223:         $PAGE->set_pagetype('my-index');",
          "224:         $PAGE->blocks->add_region('content');   // Need to add this special regition to retrieve the central blocks.",
          "225:         $PAGE->set_subpage($currentpage->id);",
          "228:         $returninvisible = has_capability('moodle/my:manageblocks', $context) ? true : false;",
          "229:         $allblocks = self::get_all_current_page_blocks($returninvisible);",
          "231:         return array(",
          "232:             'blocks' => $allblocks,",
          "233:             'warnings' => $warnings",
          "234:         );",
          "235:     }",
          "243:     public static function get_dashboard_blocks_returns() {",
          "245:         return new external_single_structure(",
          "246:             array(",
          "247:                 'blocks' => new external_multiple_structure(self::get_block_structure(), 'List of blocks in the dashboard.'),",
          "248:                 'warnings'  => new external_warnings(),",
          "249:             )",
          "250:         );",
          "251:     }",
          "",
          "---------------"
        ],
        "blocks/tests/externallib_test.php||blocks/tests/externallib_test.php": [
          "File: blocks/tests/externallib_test.php -> blocks/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: global $CFG;",
          "31: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: require_once($CFG->dirroot . '/my/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     }",
          "141: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     public function test_get_dashboard_blocks_default_dashboard() {",
          "146:         global $PAGE, $DB;",
          "147:         $this->resetAfterTest(true);",
          "149:         $user = $this->getDataGenerator()->create_user();",
          "150:         $PAGE->set_url('/my/index.php');    // Need this because some internal API calls require the $PAGE url to be set.",
          "153:         $alldefaultblocksordered = $DB->get_records_menu('block_instances',",
          "154:             array('pagetypepattern' => 'my-index'), 'defaultregion, defaultweight ASC', 'id, blockname');",
          "156:         $this->setUser($user);",
          "159:         $result = core_block_external::get_dashboard_blocks($user->id);",
          "161:         $result = external_api::clean_returnvalue(core_block_external::get_dashboard_blocks_returns(), $result);",
          "163:         $this->assertCount(count($alldefaultblocksordered) - 1, $result['blocks']);",
          "164:         $returnedblocks = array();",
          "165:         foreach ($result['blocks'] as $block) {",
          "167:             $this->assertContains($block['name'], $alldefaultblocksordered);",
          "168:             $returnedblocks[] = $block['name'];",
          "169:         }",
          "171:         array_shift($alldefaultblocksordered);",
          "173:         $this->assertEquals(array_values($alldefaultblocksordered), $returnedblocks);",
          "174:     }",
          "179:     public function test_get_dashboard_blocks_default_dashboard_including_sticky_block() {",
          "180:         global $PAGE, $DB;",
          "181:         $this->resetAfterTest(true);",
          "183:         $user = $this->getDataGenerator()->create_user();",
          "184:         $PAGE->set_url('/my/index.php');    // Need this because some internal API calls require the $PAGE url to be set.",
          "187:         $alldefaultblocks = $DB->get_records_menu('block_instances', array('pagetypepattern' => 'my-index'), '', 'id, blockname');",
          "190:         $page = new moodle_page();",
          "191:         $page->set_context(context_system::instance());",
          "192:         $page->set_pagetype('my-index');",
          "193:         $page->set_url(new moodle_url('/'));",
          "194:         $page->blocks->add_region('side-pre');",
          "195:         $page->blocks->load_blocks();",
          "196:         $page->blocks->add_block('myprofile', 'side-pre', 0, true, '*');",
          "198:         $this->setUser($user);",
          "201:         $result = core_block_external::get_dashboard_blocks($user->id);",
          "203:         $result = external_api::clean_returnvalue(core_block_external::get_dashboard_blocks_returns(), $result);",
          "205:         $this->assertCount(count($alldefaultblocks), $result['blocks']);",
          "206:         $found = false;",
          "207:         foreach ($result['blocks'] as $block) {",
          "208:             if ($block['name'] == 'myprofile') {",
          "209:                 $this->assertEquals('side-pre', $block['region']);",
          "210:                 $found = true;",
          "211:                 continue;",
          "212:             }",
          "214:             $this->assertContains($block['name'], $alldefaultblocks);",
          "215:         }",
          "216:         $this->assertTrue($found);",
          "217:     }",
          "222:     public function test_get_dashboard_blocks_custom_user_dashboard() {",
          "223:         global $PAGE, $DB;",
          "224:         $this->resetAfterTest(true);",
          "226:         $user = $this->getDataGenerator()->create_user();",
          "227:         $PAGE->set_url('/my/index.php');    // Need this because some internal API calls require the $PAGE url to be set.",
          "230:         $alldefaultblocks = $DB->get_records_menu('block_instances', array('pagetypepattern' => 'my-index'), '', 'id, blockname');",
          "233:         $page = new moodle_page();",
          "234:         $page->set_context(context_user::instance($user->id));",
          "235:         $page->set_pagelayout('mydashboard');",
          "236:         $page->set_pagetype('my-index');",
          "237:         $page->blocks->add_region('content');",
          "238:         $currentpage = my_get_page($user->id, MY_PAGE_PRIVATE);",
          "239:         $page->set_subpage($currentpage->id);",
          "240:         $page->blocks->load_blocks();",
          "241:         $page->blocks->add_block('myprofile', 'content', 0, false);",
          "243:         $this->setAdminUser();",
          "246:         $result = core_block_external::get_dashboard_blocks($user->id);",
          "248:         $result = external_api::clean_returnvalue(core_block_external::get_dashboard_blocks_returns(), $result);",
          "250:         $this->assertCount(count($alldefaultblocks), $result['blocks']);",
          "251:         $found = false;",
          "252:         foreach ($result['blocks'] as $block) {",
          "253:             if ($block['name'] == 'myprofile') {",
          "254:                 $this->assertEquals('content', $block['region']);",
          "255:                 $found = true;",
          "256:                 continue;",
          "257:             }",
          "259:             $this->assertContains($block['name'], $alldefaultblocks);",
          "260:         }",
          "261:         $this->assertTrue($found);",
          "262:     }",
          "267:     public function test_get_dashboard_blocks_other_user_missing_permissions() {",
          "268:         $this->resetAfterTest(true);",
          "270:         $user1 = $this->getDataGenerator()->create_user();",
          "271:         $user2 = $this->getDataGenerator()->create_user();",
          "273:         $this->setUser($user1);",
          "275:         $this->expectException('moodle_exception');",
          "276:         core_block_external::get_dashboard_blocks($user2->id);",
          "277:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2225:         'services'      => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "2226:     ),",
          "2229:     'core_filters_get_available_in_context' => array(",
          "2230:         'classname'   => 'core_filters\\external',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2228:     'core_block_get_dashboard_blocks' => array(",
          "2229:         'classname'     => 'core_block_external',",
          "2230:         'methodname'    => 'get_dashboard_blocks',",
          "2231:         'description'   => 'Returns blocks information for the given user dashboard.',",
          "2232:         'type'          => 'read',",
          "2233:         'capabilities'  => '',",
          "2234:         'services'      => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "2235:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "684d142401f82761064367d027b11ff701be95cc",
      "candidate_info": {
        "commit_hash": "684d142401f82761064367d027b11ff701be95cc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/684d142401f82761064367d027b11ff701be95cc",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.1+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052001.08;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.1+ (Build: 20190823)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052001.09;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.1+ (Build: 20190824)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be016b0144ce41e37bf3ed146bcf02780d148030",
      "candidate_info": {
        "commit_hash": "be016b0144ce41e37bf3ed146bcf02780d148030",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/be016b0144ce41e37bf3ed146bcf02780d148030",
        "files": [
          "lang/en/message.php",
          "lang/en/moodle.php",
          "lib/db/messages.php",
          "message/classes/api.php",
          "message/tests/privacy_provider_test.php",
          "version.php"
        ],
        "message": "MDL-63211 core: added notification when contact request is made",
        "before_after_code_files": [
          "lang/en/message.php||lang/en/message.php",
          "lang/en/moodle.php||lang/en/moodle.php",
          "lib/db/messages.php||lib/db/messages.php",
          "message/classes/api.php||message/classes/api.php",
          "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: $string['messageoutputs'] = 'Message outputs';",
          "72: $string['messagepreferences'] = 'Message preferences';",
          "73: $string['message'] = 'Message';",
          "74: $string['messagepreferences'] = 'Message preferences';",
          "75: $string['messages'] = 'Messages';",
          "76: $string['messagingdatahasnotbeenmigrated'] = 'Your messages are temporarily unavailable due to upgrades in the messaging infrastructure. Please wait for them to be migrated.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: $string['messagecontactrequestsnotification'] = '{$a} wants to be added as a contact';",
          "75: $string['messagecontactrequestsnotificationsubject'] = '{$a} wants to be added as a contact';",
          "",
          "---------------"
        ],
        "lang/en/moodle.php||lang/en/moodle.php": [
          "File: lang/en/moodle.php -> lang/en/moodle.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1194: $string['messageprovider:courserequestrejected'] = 'Course creation request rejection notification';",
          "1195: $string['messageprovider:errors'] = 'Important errors with the site';",
          "1196: $string['messageprovider:errors_help'] = 'These are important errors that an administrator should know about.';",
          "1197: $string['messageprovider:notices'] = 'Notices about minor problems';",
          "1198: $string['messageprovider:notices_help'] = 'These are notices that an administrator might be interested in seeing.';",
          "1199: $string['messageprovider:insights'] = 'Insights generated by prediction models';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1197: $string['messageprovider:messagecontactrequests'] = 'Message contact requests notification';",
          "",
          "---------------"
        ],
        "lib/db/messages.php||lib/db/messages.php": [
          "File: lib/db/messages.php -> lib/db/messages.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     'insights' => array (",
          "107:          'capability'  => 'moodle/analytics:listinsights'",
          "109: );",
          "",
          "[Removed Lines]",
          "108:     )",
          "",
          "[Added Lines]",
          "108:     ),",
          "111:     'messagecontactrequests' => [",
          "112:         'defaults' => [",
          "113:             'popup' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN + MESSAGE_DEFAULT_LOGGEDOFF,",
          "114:             'email' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDOFF,",
          "115:         ]",
          "116:     ],",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1324:         $request->timecreated = time();",
          "1326:         $DB->insert_record('message_contact_requests', $request);",
          "1327:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1329:         $userfrom = \\core_user::get_user($userid);",
          "1330:         $userfromfullname = fullname($userfrom);",
          "1331:         $userto = \\core_user::get_user($requesteduserid);",
          "1332:         $url = new \\moodle_url('/message/pendingcontactrequests.php');",
          "1334:         $subject = get_string('messagecontactrequestsnotificationsubject', 'core_message', $userfromfullname);",
          "1335:         $fullmessage = get_string('messagecontactrequestsnotification', 'core_message', $userfromfullname);",
          "1337:         $message = new \\core\\message\\message();",
          "1338:         $message->courseid = SITEID;",
          "1339:         $message->component = 'moodle';",
          "1340:         $message->name = 'messagecontactrequests';",
          "1341:         $message->notification = 1;",
          "1342:         $message->userfrom = $userfrom;",
          "1343:         $message->userto = $userto;",
          "1344:         $message->subject = $subject;",
          "1345:         $message->fullmessage = text_to_html($fullmessage);",
          "1346:         $message->fullmessageformat = FORMAT_HTML;",
          "1347:         $message->fullmessagehtml = $fullmessage;",
          "1348:         $message->smallmessage = '';",
          "1349:         $message->contexturl = $url->out(false);",
          "1351:         message_send($message);",
          "",
          "---------------"
        ],
        "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php": [
          "File: message/tests/privacy_provider_test.php -> message/tests/privacy_provider_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:         $this->assertEquals(2, $DB->count_records('message_conversation_members'));",
          "515:         provider::delete_data_for_all_users_in_context($systemcontext);",
          "",
          "[Removed Lines]",
          "513:         $this->assertEquals(2, $DB->count_records('notifications'));",
          "",
          "[Added Lines]",
          "513:         $this->assertEquals(3, $DB->count_records('notifications'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "586:         $this->assertEquals(2, $DB->count_records('message_conversation_members'));",
          "591:         $systemcontext = \\context_system::instance();",
          "592:         $contextlist = new \\core_privacy\\local\\request\\approved_contextlist($user1, 'core_message',",
          "",
          "[Removed Lines]",
          "589:         $this->assertEquals(3, $DB->count_records('notifications'));",
          "",
          "[Added Lines]",
          "589:         $this->assertEquals(5, $DB->count_records('notifications'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "631:         $mcm = reset($mcms);",
          "632:         $this->assertEquals($user2->id, $mcm->userid);",
          "636:         $this->assertEquals($user2->id, $notification->useridfrom);",
          "637:         $this->assertEquals($user3->id, $notification->useridto);",
          "638:     }",
          "",
          "[Removed Lines]",
          "634:         $this->assertCount(1, $notifications);",
          "635:         $notification = reset($notifications);",
          "",
          "[Added Lines]",
          "634:         $this->assertCount(2, $notifications);",
          "635:         ksort($notifications);",
          "637:         $notification = array_shift($notifications);",
          "638:         $this->assertEquals($user2->id, $notification->useridfrom);",
          "639:         $this->assertEquals($user4->id, $notification->useridto);",
          "641:         $notification = array_shift($notifications);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018092800.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018092800.05;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ccbb8ed6256f2bdd58302451b995ae0e11bba6b",
      "candidate_info": {
        "commit_hash": "2ccbb8ed6256f2bdd58302451b995ae0e11bba6b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2ccbb8ed6256f2bdd58302451b995ae0e11bba6b",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-36941 core: added index to 'message_user_actions' table",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2162:         upgrade_main_savepoint(true, 2018032200.05);",
          "2163:     }",
          "2165:     return true;",
          "2166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2165:     if ($oldversion < 2018032200.06) {",
          "2167:         $table = new xmldb_table('message_user_actions');",
          "2170:         $index = new xmldb_index('userid_messageid_action', XMLDB_INDEX_UNIQUE, array('userid, messageid, action'));",
          "2171:         if (!$dbman->index_exists($table, $index)) {",
          "2172:             $dbman->add_index($table, $index);",
          "2173:         }",
          "2176:         upgrade_main_savepoint(true, 2018032200.06);",
          "2177:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018032200.05;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018032200.06;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fa694bef0b15234db844a86d51764812a582eef",
      "candidate_info": {
        "commit_hash": "6fa694bef0b15234db844a86d51764812a582eef",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6fa694bef0b15234db844a86d51764812a582eef",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.5dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018041800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180418)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018042100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev+ (Build: 20180421)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}