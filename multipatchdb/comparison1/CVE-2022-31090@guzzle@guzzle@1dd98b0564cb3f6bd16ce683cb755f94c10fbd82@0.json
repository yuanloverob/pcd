{
  "cve_id": "CVE-2022-31090",
  "cve_desc": "Guzzle, an extensible PHP HTTP client. `Authorization` headers on requests are sensitive information. In affected versions when using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin (change in host, scheme or port), if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` option before continuing, stopping curl from appending the `Authorization` header to the new request. Affected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port. If you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle steam handler backend, rather than curl.",
  "repo": "guzzle/guzzle",
  "patch_hash": "1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
  "patch_info": {
    "commit_hash": "1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
    "repo": "guzzle/guzzle",
    "commit_url": "https://github.com/guzzle/guzzle/commit/1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
    "files": [
      "CHANGELOG.md",
      "README.md",
      "composer.json",
      "src/RedirectMiddleware.php",
      "tests/RedirectMiddlewareTest.php"
    ],
    "message": "Release 7.4.5 (#3043)",
    "before_after_code_files": [
      "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
      "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
    ]
  },
  "patch_diff": {
    "src/RedirectMiddleware.php||src/RedirectMiddleware.php": [
      "File: src/RedirectMiddleware.php -> src/RedirectMiddleware.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:         $this->guardMax($request, $response, $options);",
      "89:         $nextRequest = $this->modifyRequest($request, $options, $response);",
      "95:             unset(",
      "96:                 $options['curl'][\\CURLOPT_HTTPAUTH],",
      "97:                 $options['curl'][\\CURLOPT_USERPWD]",
      "",
      "[Removed Lines]",
      "92:         if ($request->getUri()->getHost() !== $nextRequest->getUri()->getHost()",
      "93:             && defined('\\CURLOPT_HTTPAUTH')",
      "94:         ) {",
      "",
      "[Added Lines]",
      "92:         if (Psr7\\UriComparator::isCrossOrigin($request->getUri(), $nextRequest->getUri()) && defined('\\CURLOPT_HTTPAUTH')) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:             $modify['remove_headers'][] = 'Referer';",
      "199:         }",
      "203:             $modify['remove_headers'][] = 'Authorization';",
      "204:             $modify['remove_headers'][] = 'Cookie';",
      "205:         }",
      "",
      "[Removed Lines]",
      "202:         if (self::shouldStripSensitiveHeaders($request->getUri(), $modify['uri'])) {",
      "",
      "[Added Lines]",
      "200:         if (Psr7\\UriComparator::isCrossOrigin($request->getUri(), $modify['uri'])) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "207:         return Psr7\\Utils::modifyRequest($request, $modify);",
      "208:     }",
      "",
      "[Removed Lines]",
      "218:     private static function shouldStripSensitiveHeaders(",
      "219:         UriInterface $originalUri,",
      "220:         UriInterface $modifiedUri",
      "221:     ): bool {",
      "222:         if (\\strcasecmp($originalUri->getHost(), $modifiedUri->getHost()) !== 0) {",
      "223:             return true;",
      "224:         }",
      "226:         if ($originalUri->getScheme() !== $modifiedUri->getScheme() && 'https' !== $modifiedUri->getScheme()) {",
      "227:             return true;",
      "228:         }",
      "230:         return false;",
      "231:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php": [
      "File: tests/RedirectMiddlewareTest.php -> tests/RedirectMiddlewareTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "272:         self::assertTrue($call);",
      "273:     }",
      "276:     {",
      "287:     }",
      "293:     {",
      "300:                 return new Response(200);",
      "301:             }",
      "302:         ]);",
      "303:         $handler = HandlerStack::create($mock);",
      "304:         $client = new Client(['handler' => $handler]);",
      "306:     }",
      "309:     {",
      "310:         $mock = new MockHandler([",
      "314:                 return new Response(200);",
      "315:             }",
      "316:         ]);",
      "317:         $handler = HandlerStack::create($mock);",
      "318:         $client = new Client(['handler' => $handler]);",
      "320:     }",
      "327:     {",
      "328:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
      "329:             self::markTestSkipped('ext-curl is required for this test');",
      "330:         }",
      "332:         $mock = new MockHandler([",
      "334:             static function (RequestInterface $request, $options) {",
      "335:                 self::assertFalse(",
      "336:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
      "",
      "[Removed Lines]",
      "275:     public function crossOriginRedirectProvider()",
      "277:         return [",
      "278:             ['http://example.com?a=b', 'http://test.com/', false],",
      "279:             ['https://example.com?a=b', 'https://test.com/', false],",
      "280:             ['http://example.com?a=b', 'https://test.com/', false],",
      "281:             ['https://example.com?a=b', 'http://test.com/', false],",
      "282:             ['http://example.com?a=b', 'http://example.com/', true],",
      "283:             ['https://example.com?a=b', 'https://example.com/', true],",
      "284:             ['http://example.com?a=b', 'https://example.com/', true],",
      "285:             ['https://example.com?a=b', 'http://example.com/', false],",
      "286:         ];",
      "292:     public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)",
      "294:         $mock = new MockHandler([",
      "295:             new Response(302, ['Location' => $targetUri]),",
      "296:             static function (RequestInterface $request) use ($shouldBePresent) {",
      "297:                 self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));",
      "298:                 self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));",
      "305:         $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);",
      "308:     public function testNotRemoveAuthorizationHeaderOnRedirect()",
      "311:             new Response(302, ['Location' => 'http://example.com/2']),",
      "312:             static function (RequestInterface $request) {",
      "313:                 self::assertTrue($request->hasHeader('Authorization'));",
      "319:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);",
      "326:     public function testRemoveCurlAuthorizationOptionsOnRedirect($auth)",
      "333:             new Response(302, ['Location' => 'http://test.com']),",
      "",
      "[Added Lines]",
      "279:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossHost($auth)",
      "281:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
      "282:             self::markTestSkipped('ext-curl is required for this test');",
      "283:         }",
      "285:         $mock = new MockHandler([",
      "286:             new Response(302, ['Location' => 'http://test.com']),",
      "287:             static function (RequestInterface $request, $options) {",
      "288:                 self::assertFalse(",
      "289:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
      "290:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
      "291:                 );",
      "292:                 self::assertFalse(",
      "293:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
      "294:                     'curl options still contain CURLOPT_USERPWD entry'",
      "295:                 );",
      "296:                 return new Response(200);",
      "297:             }",
      "298:         ]);",
      "299:         $handler = HandlerStack::create($mock);",
      "300:         $client = new Client(['handler' => $handler]);",
      "301:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
      "308:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossPort($auth)",
      "310:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
      "311:             self::markTestSkipped('ext-curl is required for this test');",
      "312:         }",
      "314:         $mock = new MockHandler([",
      "315:             new Response(302, ['Location' => 'http://example.com:81/']),",
      "316:             static function (RequestInterface $request, $options) {",
      "317:                 self::assertFalse(",
      "318:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
      "319:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
      "320:                 );",
      "321:                 self::assertFalse(",
      "322:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
      "323:                     'curl options still contain CURLOPT_USERPWD entry'",
      "324:                 );",
      "330:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
      "337:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossScheme($auth)",
      "339:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
      "340:             self::markTestSkipped('ext-curl is required for this test');",
      "341:         }",
      "344:             new Response(302, ['Location' => 'http://example.com?a=b']),",
      "345:             static function (RequestInterface $request, $options) {",
      "346:                 self::assertFalse(",
      "347:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
      "348:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
      "349:                 );",
      "350:                 self::assertFalse(",
      "351:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
      "352:                     'curl options still contain CURLOPT_USERPWD entry'",
      "353:                 );",
      "359:         $client->get('https://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
      "366:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossSchemeSamePort($auth)",
      "373:             new Response(302, ['Location' => 'http://example.com:80?a=b']),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "345:         ]);",
      "346:         $handler = HandlerStack::create($mock);",
      "347:         $client = new Client(['handler' => $handler]);",
      "349:     }",
      "",
      "[Removed Lines]",
      "348:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
      "",
      "[Added Lines]",
      "388:         $client->get('https://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "377:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
      "378:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "420:     public function crossOriginRedirectProvider()",
      "421:     {",
      "422:         return [",
      "423:             ['http://example.com/123', 'http://example.com/', false],",
      "424:             ['http://example.com/123', 'http://example.com:80/', false],",
      "425:             ['http://example.com:80/123', 'http://example.com/', false],",
      "426:             ['http://example.com:80/123', 'http://example.com:80/', false],",
      "427:             ['http://example.com/123', 'https://example.com/', true],",
      "428:             ['http://example.com/123', 'http://www.example.com/', true],",
      "429:             ['http://example.com/123', 'http://example.com:81/', true],",
      "430:             ['http://example.com:80/123', 'http://example.com:81/', true],",
      "431:             ['https://example.com/123', 'https://example.com/', false],",
      "432:             ['https://example.com/123', 'https://example.com:443/', false],",
      "433:             ['https://example.com:443/123', 'https://example.com/', false],",
      "434:             ['https://example.com:443/123', 'https://example.com:443/', false],",
      "435:             ['https://example.com/123', 'http://example.com/', true],",
      "436:             ['https://example.com/123', 'https://www.example.com/', true],",
      "437:             ['https://example.com/123', 'https://example.com:444/', true],",
      "438:             ['https://example.com:443/123', 'https://example.com:444/', true],",
      "439:         ];",
      "440:     }",
      "445:     public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $isCrossOrigin)",
      "446:     {",
      "447:         $mock = new MockHandler([",
      "448:             new Response(302, ['Location' => $targetUri]),",
      "449:             static function (RequestInterface $request) use ($isCrossOrigin) {",
      "450:                 self::assertSame(!$isCrossOrigin, $request->hasHeader('Authorization'));",
      "451:                 self::assertSame(!$isCrossOrigin, $request->hasHeader('Cookie'));",
      "453:                 return new Response(200);",
      "454:             }",
      "455:         ]);",
      "456:         $handler = HandlerStack::create($mock);",
      "457:         $client = new Client(['handler' => $handler]);",
      "458:         $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);",
      "459:     }",
      "461:     public function testNotRemoveAuthorizationHeaderOnRedirect()",
      "462:     {",
      "463:         $mock = new MockHandler([",
      "464:             new Response(302, ['Location' => 'http://example.com/2']),",
      "465:             static function (RequestInterface $request) {",
      "466:                 self::assertTrue($request->hasHeader('Authorization'));",
      "467:                 return new Response(200);",
      "468:             }",
      "469:         ]);",
      "470:         $handler = HandlerStack::create($mock);",
      "471:         $client = new Client(['handler' => $handler]);",
      "472:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);",
      "473:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc80b002a0c550d242e20ed28ef52b35e237e0c9",
      "candidate_info": {
        "commit_hash": "cc80b002a0c550d242e20ed28ef52b35e237e0c9",
        "repo": "guzzle/guzzle",
        "commit_url": "https://github.com/guzzle/guzzle/commit/cc80b002a0c550d242e20ed28ef52b35e237e0c9",
        "files": [
          "src/RedirectMiddleware.php",
          "tests/RedirectMiddlewareTest.php"
        ],
        "message": "Remove curl auth on cross-domain redirects (#2845)",
        "before_after_code_files": [
          "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
          "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
            "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
          ],
          "candidate": [
            "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
            "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/RedirectMiddleware.php||src/RedirectMiddleware.php": [
          "File: src/RedirectMiddleware.php -> src/RedirectMiddleware.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         $this->guardMax($request, $response, $options);",
          "89:         $nextRequest = $this->modifyRequest($request, $options, $response);",
          "91:         if (isset($options['allow_redirects']['on_redirect'])) {",
          "92:             ($options['allow_redirects']['on_redirect'])(",
          "93:                 $request,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:         if ($request->getUri()->getHost() !== $nextRequest->getUri()->getHost()",
          "93:             && defined('\\CURLOPT_HTTPAUTH')",
          "94:         ) {",
          "95:             unset(",
          "96:                 $options['curl'][\\CURLOPT_HTTPAUTH],",
          "97:                 $options['curl'][\\CURLOPT_USERPWD]",
          "98:             );",
          "99:         }",
          "",
          "---------------"
        ],
        "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php": [
          "File: tests/RedirectMiddlewareTest.php -> tests/RedirectMiddlewareTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);",
          "301:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:     public function testRemoveCurlAuthorizationOptionsOnRedirect($auth)",
          "308:     {",
          "309:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
          "310:             self::markTestSkipped('ext-curl is required for this test');",
          "311:         }",
          "313:         $mock = new MockHandler([",
          "314:             new Response(302, ['Location' => 'http://test.com']),",
          "315:             static function (RequestInterface $request, $options) {",
          "316:                 self::assertFalse(",
          "317:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "318:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
          "319:                 );",
          "320:                 self::assertFalse(",
          "321:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "322:                     'curl options still contain CURLOPT_USERPWD entry'",
          "323:                 );",
          "324:                 return new Response(200);",
          "325:             }",
          "326:         ]);",
          "327:         $handler = HandlerStack::create($mock);",
          "328:         $client = new Client(['handler' => $handler]);",
          "329:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "330:     }",
          "336:     public function testNotRemoveCurlAuthorizationOptionsOnRedirect($auth)",
          "337:     {",
          "338:         if (!defined('\\CURLOPT_HTTPAUTH') || !defined('\\CURLOPT_USERPWD')) {",
          "339:             self::markTestSkipped('ext-curl is required for this test');",
          "340:         }",
          "342:         $mock = new MockHandler([",
          "343:             new Response(302, ['Location' => 'http://example.com/2']),",
          "344:             static function (RequestInterface $request, $options) {",
          "345:                 self::assertTrue(",
          "346:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "347:                     'curl options does not contain expected CURLOPT_HTTPAUTH entry'",
          "348:                 );",
          "349:                 self::assertTrue(",
          "350:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "351:                     'curl options does not contain expected CURLOPT_USERPWD entry'",
          "352:                 );",
          "353:                 return new Response(200);",
          "354:             }",
          "355:         ]);",
          "356:         $handler = HandlerStack::create($mock);",
          "357:         $client = new Client(['handler' => $handler]);",
          "358:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "359:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
      "candidate_info": {
        "commit_hash": "e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
        "repo": "guzzle/guzzle",
        "commit_url": "https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
        "files": [
          "CHANGELOG.md",
          "src/RedirectMiddleware.php",
          "tests/RedirectMiddlewareTest.php"
        ],
        "message": "Release 7.4.4 (#3023)",
        "before_after_code_files": [
          "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
          "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
            "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
          ],
          "candidate": [
            "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
            "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/RedirectMiddleware.php||src/RedirectMiddleware.php": [
          "File: src/RedirectMiddleware.php -> src/RedirectMiddleware.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:             $modify['body'] = '';",
          "179:         }",
          "182:         if (isset($options['idn_conversion']) && ($options['idn_conversion'] !== false)) {",
          "183:             $idnOptions = ($options['idn_conversion'] === true) ? \\IDNA_DEFAULT : $options['idn_conversion'];",
          "184:             $uri = Utils::idnUriConvert($uri, $idnOptions);",
          "",
          "[Removed Lines]",
          "181:         $uri = $this->redirectUri($request, $response, $protocols);",
          "",
          "[Added Lines]",
          "181:         $uri = self::redirectUri($request, $response, $protocols);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:             $modify['remove_headers'][] = 'Referer';",
          "199:         }",
          "203:             $modify['remove_headers'][] = 'Authorization';",
          "204:         }",
          "206:         return Psr7\\Utils::modifyRequest($request, $modify);",
          "207:     }",
          "214:         $location = Psr7\\UriResolver::resolve(",
          "215:             $request->getUri(),",
          "216:             new Psr7\\Uri($response->getHeaderLine('Location'))",
          "",
          "[Removed Lines]",
          "202:         if ($request->getUri()->getHost() !== $modify['uri']->getHost()) {",
          "212:     private function redirectUri(RequestInterface $request, ResponseInterface $response, array $protocols): UriInterface",
          "213:     {",
          "",
          "[Added Lines]",
          "202:         if (self::shouldStripSensitiveHeaders($request->getUri(), $modify['uri'])) {",
          "204:             $modify['remove_headers'][] = 'Cookie';",
          "218:     private static function shouldStripSensitiveHeaders(",
          "219:         UriInterface $originalUri,",
          "220:         UriInterface $modifiedUri",
          "221:     ): bool {",
          "222:         if (\\strcasecmp($originalUri->getHost(), $modifiedUri->getHost()) !== 0) {",
          "223:             return true;",
          "224:         }",
          "226:         if ($originalUri->getScheme() !== $modifiedUri->getScheme() && 'https' !== $modifiedUri->getScheme()) {",
          "227:             return true;",
          "228:         }",
          "230:         return false;",
          "231:     }",
          "236:     private static function redirectUri(",
          "237:         RequestInterface $request,",
          "238:         ResponseInterface $response,",
          "239:         array $protocols",
          "240:     ): UriInterface {",
          "",
          "---------------"
        ],
        "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php": [
          "File: tests/RedirectMiddlewareTest.php -> tests/RedirectMiddlewareTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         self::assertTrue($call);",
          "273:     }",
          "276:     {",
          "277:         $mock = new MockHandler([",
          "281:                 return new Response(200);",
          "282:             }",
          "283:         ]);",
          "284:         $handler = HandlerStack::create($mock);",
          "285:         $client = new Client(['handler' => $handler]);",
          "287:     }",
          "289:     public function testNotRemoveAuthorizationHeaderOnRedirect()",
          "",
          "[Removed Lines]",
          "275:     public function testRemoveAuthorizationHeaderOnRedirect()",
          "278:             new Response(302, ['Location' => 'http://test.com']),",
          "279:             static function (RequestInterface $request) {",
          "280:                 self::assertFalse($request->hasHeader('Authorization'));",
          "286:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);",
          "",
          "[Added Lines]",
          "275:     public function crossOriginRedirectProvider()",
          "276:     {",
          "277:         return [",
          "278:             ['http://example.com?a=b', 'http://test.com/', false],",
          "279:             ['https://example.com?a=b', 'https://test.com/', false],",
          "280:             ['http://example.com?a=b', 'https://test.com/', false],",
          "281:             ['https://example.com?a=b', 'http://test.com/', false],",
          "282:             ['http://example.com?a=b', 'http://example.com/', true],",
          "283:             ['https://example.com?a=b', 'https://example.com/', true],",
          "284:             ['http://example.com?a=b', 'https://example.com/', true],",
          "285:             ['https://example.com?a=b', 'http://example.com/', false],",
          "286:         ];",
          "287:     }",
          "292:     public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)",
          "295:             new Response(302, ['Location' => $targetUri]),",
          "296:             static function (RequestInterface $request) use ($shouldBePresent) {",
          "297:                 self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));",
          "298:                 self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));",
          "305:         $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a52f0440530b54fa079ce76e8c5d196a42cad981",
      "candidate_info": {
        "commit_hash": "a52f0440530b54fa079ce76e8c5d196a42cad981",
        "repo": "guzzle/guzzle",
        "commit_url": "https://github.com/guzzle/guzzle/commit/a52f0440530b54fa079ce76e8c5d196a42cad981",
        "files": [
          "CHANGELOG.md",
          "README.md",
          "composer.json",
          "src/RedirectMiddleware.php",
          "tests/RedirectMiddlewareTest.php"
        ],
        "message": "Release 6.5.8 (#3042)\n\n* Release 6.5.8\n\n* Update README.md\n\n* Update RedirectMiddleware.php",
        "before_after_code_files": [
          "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
          "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
            "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
          ],
          "candidate": [
            "src/RedirectMiddleware.php||src/RedirectMiddleware.php",
            "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/RedirectMiddleware.php||src/RedirectMiddleware.php": [
          "File: src/RedirectMiddleware.php -> src/RedirectMiddleware.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         $this->guardMax($request, $options);",
          "95:         $nextRequest = $this->modifyRequest($request, $options, $response);",
          "97:         if (isset($options['allow_redirects']['on_redirect'])) {",
          "98:             call_user_func(",
          "99:                 $options['allow_redirects']['on_redirect'],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:         if (Psr7\\UriComparator::isCrossOrigin($request->getUri(), $nextRequest->getUri()) && defined('\\CURLOPT_HTTPAUTH')) {",
          "99:             unset(",
          "100:                 $options['curl'][\\CURLOPT_HTTPAUTH],",
          "101:                 $options['curl'][\\CURLOPT_USERPWD]",
          "102:             );",
          "103:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:             $modify['remove_headers'][] = 'Referer';",
          "211:         }",
          "215:             $modify['remove_headers'][] = 'Authorization';",
          "216:             $modify['remove_headers'][] = 'Cookie';",
          "217:         }",
          "",
          "[Removed Lines]",
          "214:         if (self::shouldStripSensitiveHeaders($request->getUri(), $modify['uri'])) {",
          "",
          "[Added Lines]",
          "222:         if (Psr7\\UriComparator::isCrossOrigin($request->getUri(), $modify['uri'])) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:         return Psr7\\modify_request($request, $modify);",
          "220:     }",
          "",
          "[Removed Lines]",
          "232:     private static function shouldStripSensitiveHeaders(",
          "233:         UriInterface $originalUri,",
          "234:         UriInterface $modifiedUri",
          "235:     ) {",
          "236:         if (strcasecmp($originalUri->getHost(), $modifiedUri->getHost()) !== 0) {",
          "237:             return true;",
          "238:         }",
          "240:         if ($originalUri->getScheme() !== $modifiedUri->getScheme() && 'https' !== $modifiedUri->getScheme()) {",
          "241:             return true;",
          "242:         }",
          "244:         return false;",
          "245:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/RedirectMiddlewareTest.php||tests/RedirectMiddlewareTest.php": [
          "File: tests/RedirectMiddlewareTest.php -> tests/RedirectMiddlewareTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         self::assertTrue($call);",
          "252:     }",
          "254:     public function crossOriginRedirectProvider()",
          "255:     {",
          "256:         return [",
          "265:         ];",
          "266:     }",
          "272:     {",
          "273:         $mock = new MockHandler([",
          "274:             new Response(302, ['Location' => $targetUri]),",
          "279:                 return new Response(200);",
          "280:             }",
          "",
          "[Removed Lines]",
          "257:             ['http://example.com?a=b', 'http://test.com/', false],",
          "258:             ['https://example.com?a=b', 'https://test.com/', false],",
          "259:             ['http://example.com?a=b', 'https://test.com/', false],",
          "260:             ['https://example.com?a=b', 'http://test.com/', false],",
          "261:             ['http://example.com?a=b', 'http://example.com/', true],",
          "262:             ['https://example.com?a=b', 'https://example.com/', true],",
          "263:             ['http://example.com?a=b', 'https://example.com/', true],",
          "264:             ['https://example.com?a=b', 'http://example.com/', false],",
          "271:     public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)",
          "275:             function (RequestInterface $request) use ($shouldBePresent) {",
          "276:                 self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));",
          "277:                 self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));",
          "",
          "[Added Lines]",
          "258:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossHost($auth)",
          "259:     {",
          "260:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
          "261:             self::markTestSkipped('ext-curl is required for this test');",
          "262:         }",
          "264:         $mock = new MockHandler([",
          "265:             new Response(302, ['Location' => 'http://test.com']),",
          "266:             static function (RequestInterface $request, $options) {",
          "267:                 self::assertFalse(",
          "268:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "269:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
          "270:                 );",
          "271:                 self::assertFalse(",
          "272:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "273:                     'curl options still contain CURLOPT_USERPWD entry'",
          "274:                 );",
          "275:                 return new Response(200);",
          "276:             }",
          "277:         ]);",
          "278:         $handler = HandlerStack::create($mock);",
          "279:         $client = new Client(['handler' => $handler]);",
          "280:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "281:     }",
          "287:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossPort($auth)",
          "288:     {",
          "289:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
          "290:             self::markTestSkipped('ext-curl is required for this test');",
          "291:         }",
          "293:         $mock = new MockHandler([",
          "294:             new Response(302, ['Location' => 'http://example.com:81/']),",
          "295:             static function (RequestInterface $request, $options) {",
          "296:                 self::assertFalse(",
          "297:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "298:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
          "299:                 );",
          "300:                 self::assertFalse(",
          "301:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "302:                     'curl options still contain CURLOPT_USERPWD entry'",
          "303:                 );",
          "304:                 return new Response(200);",
          "305:             }",
          "306:         ]);",
          "307:         $handler = HandlerStack::create($mock);",
          "308:         $client = new Client(['handler' => $handler]);",
          "309:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "310:     }",
          "316:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossScheme($auth)",
          "317:     {",
          "318:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
          "319:             self::markTestSkipped('ext-curl is required for this test');",
          "320:         }",
          "322:         $mock = new MockHandler([",
          "323:             new Response(302, ['Location' => 'http://example.com?a=b']),",
          "324:             static function (RequestInterface $request, $options) {",
          "325:                 self::assertFalse(",
          "326:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "327:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
          "328:                 );",
          "329:                 self::assertFalse(",
          "330:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "331:                     'curl options still contain CURLOPT_USERPWD entry'",
          "332:                 );",
          "333:                 return new Response(200);",
          "334:             }",
          "335:         ]);",
          "336:         $handler = HandlerStack::create($mock);",
          "337:         $client = new Client(['handler' => $handler]);",
          "338:         $client->get('https://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "339:     }",
          "345:     public function testRemoveCurlAuthorizationOptionsOnRedirectCrossSchemeSamePort($auth)",
          "346:     {",
          "347:         if (!defined('\\CURLOPT_HTTPAUTH')) {",
          "348:             self::markTestSkipped('ext-curl is required for this test');",
          "349:         }",
          "351:         $mock = new MockHandler([",
          "352:             new Response(302, ['Location' => 'http://example.com:80?a=b']),",
          "353:             static function (RequestInterface $request, $options) {",
          "354:                 self::assertFalse(",
          "355:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "356:                     'curl options still contain CURLOPT_HTTPAUTH entry'",
          "357:                 );",
          "358:                 self::assertFalse(",
          "359:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "360:                     'curl options still contain CURLOPT_USERPWD entry'",
          "361:                 );",
          "362:                 return new Response(200);",
          "363:             }",
          "364:         ]);",
          "365:         $handler = HandlerStack::create($mock);",
          "366:         $client = new Client(['handler' => $handler]);",
          "367:         $client->get('https://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "368:     }",
          "374:     public function testNotRemoveCurlAuthorizationOptionsOnRedirect($auth)",
          "375:     {",
          "376:         if (!defined('\\CURLOPT_HTTPAUTH') || !defined('\\CURLOPT_USERPWD')) {",
          "377:             self::markTestSkipped('ext-curl is required for this test');",
          "378:         }",
          "380:         $mock = new MockHandler([",
          "381:             new Response(302, ['Location' => 'http://example.com/2']),",
          "382:             static function (RequestInterface $request, $options) {",
          "383:                 self::assertTrue(",
          "384:                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),",
          "385:                     'curl options does not contain expected CURLOPT_HTTPAUTH entry'",
          "386:                 );",
          "387:                 self::assertTrue(",
          "388:                     isset($options['curl'][\\CURLOPT_USERPWD]),",
          "389:                     'curl options does not contain expected CURLOPT_USERPWD entry'",
          "390:                 );",
          "391:                 return new Response(200);",
          "392:             }",
          "393:         ]);",
          "394:         $handler = HandlerStack::create($mock);",
          "395:         $client = new Client(['handler' => $handler]);",
          "396:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);",
          "397:     }",
          "402:             ['http://example.com/123', 'http://example.com/', false],",
          "403:             ['http://example.com/123', 'http://example.com:80/', false],",
          "404:             ['http://example.com:80/123', 'http://example.com/', false],",
          "405:             ['http://example.com:80/123', 'http://example.com:80/', false],",
          "406:             ['http://example.com/123', 'https://example.com/', true],",
          "407:             ['http://example.com/123', 'http://www.example.com/', true],",
          "408:             ['http://example.com/123', 'http://example.com:81/', true],",
          "409:             ['http://example.com:80/123', 'http://example.com:81/', true],",
          "410:             ['https://example.com/123', 'https://example.com/', false],",
          "411:             ['https://example.com/123', 'https://example.com:443/', false],",
          "412:             ['https://example.com:443/123', 'https://example.com/', false],",
          "413:             ['https://example.com:443/123', 'https://example.com:443/', false],",
          "414:             ['https://example.com/123', 'http://example.com/', true],",
          "415:             ['https://example.com/123', 'https://www.example.com/', true],",
          "416:             ['https://example.com/123', 'https://example.com:444/', true],",
          "417:             ['https://example.com:443/123', 'https://example.com:444/', true],",
          "424:     public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $isCrossOrigin)",
          "428:             function (RequestInterface $request) use ($isCrossOrigin) {",
          "429:                 self::assertSame(!$isCrossOrigin, $request->hasHeader('Authorization'));",
          "430:                 self::assertSame(!$isCrossOrigin, $request->hasHeader('Cookie'));",
          "",
          "---------------"
        ]
      }
    }
  ]
}