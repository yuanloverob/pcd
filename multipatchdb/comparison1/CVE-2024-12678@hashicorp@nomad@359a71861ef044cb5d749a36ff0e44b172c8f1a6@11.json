{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ddd83f107572c59d79a45e91e2931c1c09f1ad01",
      "candidate_info": {
        "commit_hash": "ddd83f107572c59d79a45e91e2931c1c09f1ad01",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/ddd83f107572c59d79a45e91e2931c1c09f1ad01",
        "files": [
          ".changelog/24942.txt",
          "client/allocrunner/networking_cni.go",
          "client/allocrunner/networking_cni_test.go",
          "client/fingerprint/consul.go",
          "client/fingerprint/consul_test.go",
          "client/fingerprint/nomad.go",
          "client/fingerprint/nomad_test.go",
          "nomad/structs/node_class.go",
          "nomad/structs/node_class_test.go",
          "scheduler/benchmarks/benchmarks_test.go",
          "scheduler/testing.go"
        ],
        "message": "Backport of remove addresses from node class hash into release/1.9.x (#25264)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "client/allocrunner/networking_cni.go||client/allocrunner/networking_cni.go",
          "client/allocrunner/networking_cni_test.go||client/allocrunner/networking_cni_test.go",
          "client/fingerprint/consul.go||client/fingerprint/consul.go",
          "client/fingerprint/consul_test.go||client/fingerprint/consul_test.go",
          "client/fingerprint/nomad.go||client/fingerprint/nomad.go",
          "client/fingerprint/nomad_test.go||client/fingerprint/nomad_test.go",
          "nomad/structs/node_class.go||nomad/structs/node_class.go",
          "nomad/structs/node_class_test.go||nomad/structs/node_class_test.go",
          "scheduler/benchmarks/benchmarks_test.go||scheduler/benchmarks/benchmarks_test.go",
          "scheduler/testing.go||scheduler/testing.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/allocrunner/networking_cni.go||client/allocrunner/networking_cni.go": [
          "File: client/allocrunner/networking_cni.go -> client/allocrunner/networking_cni.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "413: func (c *cniNetworkConfigurator) dnsFromAttrs(cluster string) (string, int) {",
          "414:  var dnsAddrAttr, dnsPortAttr string",
          "415:  if cluster == structs.ConsulDefaultCluster || cluster == \"\" {",
          "417:   dnsPortAttr = \"consul.dns.port\"",
          "418:  } else {",
          "420:   dnsPortAttr = \"consul.\" + cluster + \".dns.port\"",
          "421:  }",
          "",
          "[Removed Lines]",
          "416:   dnsAddrAttr = \"consul.dns.addr\"",
          "419:   dnsAddrAttr = \"consul.\" + cluster + \".dns.addr\"",
          "",
          "[Added Lines]",
          "416:   dnsAddrAttr = \"unique.consul.dns.addr\"",
          "419:   dnsAddrAttr = \"unique.consul.\" + cluster + \".dns.addr\"",
          "",
          "---------------"
        ],
        "client/allocrunner/networking_cni_test.go||client/allocrunner/networking_cni_test.go": [
          "File: client/allocrunner/networking_cni_test.go -> client/allocrunner/networking_cni_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:  }",
          "259:  nodeAddrs := map[string]string{",
          "262:  }",
          "263:  nodeMeta := map[string]string{",
          "264:   \"connect.transparent_proxy.default_outbound_port\": \"15001\",",
          "",
          "[Removed Lines]",
          "260:   \"consul.dns.addr\": \"192.168.1.117\",",
          "261:   \"consul.dns.port\": \"8600\",",
          "",
          "[Added Lines]",
          "260:   \"unique.consul.dns.addr\": \"192.168.1.117\",",
          "261:   \"consul.dns.port\":        \"8600\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554:  }",
          "556:  nodeAttrs := map[string]string{",
          "559:  }",
          "561:  alloc := mock.ConnectAlloc()",
          "",
          "[Removed Lines]",
          "557:   \"consul.dns.addr\": \"192.168.1.117\",",
          "558:   \"consul.dns.port\": \"8600\",",
          "",
          "[Added Lines]",
          "557:   \"unique.consul.dns.addr\": \"192.168.1.117\",",
          "558:   \"consul.dns.port\":        \"8600\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "716:   {",
          "717:    name: \"tproxy with consul dns disabled\",",
          "718:    nodeAttrs: map[string]string{",
          "721:    },",
          "722:    tproxySpec: &structs.ConsulTransparentProxy{},",
          "723:    expectIPConfig: &iptables.Config{",
          "",
          "[Removed Lines]",
          "719:     \"consul.dns.port\": \"-1\",",
          "720:     \"consul.dns.addr\": \"192.168.1.117\",",
          "",
          "[Added Lines]",
          "719:     \"consul.dns.port\":        \"-1\",",
          "720:     \"unique.consul.dns.addr\": \"192.168.1.117\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:    name:    \"tproxy for other cluster with default consul dns disabled\",",
          "733:    cluster: \"infra\",",
          "734:    nodeAttrs: map[string]string{",
          "739:    },",
          "740:    tproxySpec: &structs.ConsulTransparentProxy{},",
          "741:    expectIPConfig: &iptables.Config{",
          "",
          "[Removed Lines]",
          "735:     \"consul.dns.port\":       \"-1\",",
          "736:     \"consul.dns.addr\":       \"192.168.1.110\",",
          "737:     \"consul.infra.dns.port\": \"8600\",",
          "738:     \"consul.infra.dns.addr\": \"192.168.1.117\",",
          "",
          "[Added Lines]",
          "735:     \"consul.dns.port\":              \"-1\",",
          "736:     \"unique.consul.dns.addr\":       \"192.168.1.110\",",
          "737:     \"consul.infra.dns.port\":        \"8600\",",
          "738:     \"unique.consul.infra.dns.addr\": \"192.168.1.117\",",
          "",
          "---------------"
        ],
        "client/fingerprint/consul.go||client/fingerprint/consul.go": [
          "File: client/fingerprint/consul.go -> client/fingerprint/consul.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  if cfg.Name == structs.ConsulDefaultCluster {",
          "192:   cfs.readers = map[string]valueReader{",
          "206:   }",
          "207:  } else {",
          "208:   cfs.readers = map[string]valueReader{",
          "221:   }",
          "222:  }",
          "",
          "[Removed Lines]",
          "193:    \"consul.server\":        cfs.server,",
          "194:    \"consul.version\":       cfs.version,",
          "195:    \"consul.sku\":           cfs.sku,",
          "196:    \"consul.revision\":      cfs.revision,",
          "197:    \"unique.consul.name\":   cfs.name, // note: won't have this for non-default clusters",
          "198:    \"consul.datacenter\":    cfs.dc,",
          "199:    \"consul.segment\":       cfs.segment,",
          "200:    \"consul.connect\":       cfs.connect,",
          "201:    \"consul.grpc\":          cfs.grpc(consulConfig.Scheme, logger),",
          "202:    \"consul.ft.namespaces\": cfs.namespaces,",
          "203:    \"consul.partition\":     cfs.partition,",
          "204:    \"consul.dns.port\":      cfs.dnsPort,",
          "205:    \"consul.dns.addr\":      cfs.dnsAddr(logger),",
          "209:    fmt.Sprintf(\"consul.%s.server\", cfg.Name):        cfs.server,",
          "210:    fmt.Sprintf(\"consul.%s.version\", cfg.Name):       cfs.version,",
          "211:    fmt.Sprintf(\"consul.%s.sku\", cfg.Name):           cfs.sku,",
          "212:    fmt.Sprintf(\"consul.%s.revision\", cfg.Name):      cfs.revision,",
          "213:    fmt.Sprintf(\"consul.%s.datacenter\", cfg.Name):    cfs.dc,",
          "214:    fmt.Sprintf(\"consul.%s.segment\", cfg.Name):       cfs.segment,",
          "215:    fmt.Sprintf(\"consul.%s.connect\", cfg.Name):       cfs.connect,",
          "216:    fmt.Sprintf(\"consul.%s.grpc\", cfg.Name):          cfs.grpc(consulConfig.Scheme, logger),",
          "217:    fmt.Sprintf(\"consul.%s.ft.namespaces\", cfg.Name): cfs.namespaces,",
          "218:    fmt.Sprintf(\"consul.%s.partition\", cfg.Name):     cfs.partition,",
          "219:    fmt.Sprintf(\"consul.%s.dns.port\", cfg.Name):      cfs.dnsPort,",
          "220:    fmt.Sprintf(\"consul.%s.dns.addr\", cfg.Name):      cfs.dnsAddr(logger),",
          "",
          "[Added Lines]",
          "193:    \"consul.server\":          cfs.server,",
          "194:    \"consul.version\":         cfs.version,",
          "195:    \"consul.sku\":             cfs.sku,",
          "196:    \"consul.revision\":        cfs.revision,",
          "197:    \"unique.consul.name\":     cfs.name, // note: won't have this for non-default clusters",
          "198:    \"consul.datacenter\":      cfs.dc,",
          "199:    \"consul.segment\":         cfs.segment,",
          "200:    \"consul.connect\":         cfs.connect,",
          "201:    \"consul.grpc\":            cfs.grpc(consulConfig.Scheme, logger),",
          "202:    \"consul.ft.namespaces\":   cfs.namespaces,",
          "203:    \"consul.partition\":       cfs.partition,",
          "204:    \"consul.dns.port\":        cfs.dnsPort,",
          "205:    \"unique.consul.dns.addr\": cfs.dnsAddr(logger),",
          "209:    fmt.Sprintf(\"consul.%s.server\", cfg.Name):          cfs.server,",
          "210:    fmt.Sprintf(\"consul.%s.version\", cfg.Name):         cfs.version,",
          "211:    fmt.Sprintf(\"consul.%s.sku\", cfg.Name):             cfs.sku,",
          "212:    fmt.Sprintf(\"consul.%s.revision\", cfg.Name):        cfs.revision,",
          "213:    fmt.Sprintf(\"consul.%s.datacenter\", cfg.Name):      cfs.dc,",
          "214:    fmt.Sprintf(\"consul.%s.segment\", cfg.Name):         cfs.segment,",
          "215:    fmt.Sprintf(\"consul.%s.connect\", cfg.Name):         cfs.connect,",
          "216:    fmt.Sprintf(\"consul.%s.grpc\", cfg.Name):            cfs.grpc(consulConfig.Scheme, logger),",
          "217:    fmt.Sprintf(\"consul.%s.ft.namespaces\", cfg.Name):   cfs.namespaces,",
          "218:    fmt.Sprintf(\"consul.%s.partition\", cfg.Name):       cfs.partition,",
          "219:    fmt.Sprintf(\"consul.%s.dns.port\", cfg.Name):        cfs.dnsPort,",
          "220:    fmt.Sprintf(\"unique.consul.%s.dns.addr\", cfg.Name): cfs.dnsAddr(logger),",
          "",
          "---------------"
        ],
        "client/fingerprint/consul_test.go||client/fingerprint/consul_test.go": [
          "File: client/fingerprint/consul_test.go -> client/fingerprint/consul_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:  err := cf.Fingerprint(&FingerprintRequest{Config: cfg, Node: node}, &resp)",
          "697:  must.NoError(t, err)",
          "698:  must.Eq(t, map[string]string{",
          "712:  }, resp.Attributes)",
          "713:  must.True(t, resp.Detected)",
          "",
          "[Removed Lines]",
          "699:   \"consul.datacenter\":    \"dc1\",",
          "700:   \"consul.revision\":      \"22ce6c6ad\",",
          "701:   \"consul.segment\":       \"seg1\",",
          "702:   \"consul.server\":        \"true\",",
          "703:   \"consul.sku\":           \"ent\",",
          "704:   \"consul.version\":       \"1.9.5+ent\",",
          "705:   \"consul.ft.namespaces\": \"true\",",
          "706:   \"consul.connect\":       \"true\",",
          "707:   \"consul.grpc\":          \"8502\",",
          "708:   \"consul.dns.addr\":      \"192.168.1.117\",",
          "709:   \"consul.dns.port\":      \"8600\",",
          "710:   \"consul.partition\":     \"default\",",
          "711:   \"unique.consul.name\":   \"HAL9000\",",
          "",
          "[Added Lines]",
          "699:   \"consul.datacenter\":      \"dc1\",",
          "700:   \"consul.revision\":        \"22ce6c6ad\",",
          "701:   \"consul.segment\":         \"seg1\",",
          "702:   \"consul.server\":          \"true\",",
          "703:   \"consul.sku\":             \"ent\",",
          "704:   \"consul.version\":         \"1.9.5+ent\",",
          "705:   \"consul.ft.namespaces\":   \"true\",",
          "706:   \"consul.connect\":         \"true\",",
          "707:   \"consul.grpc\":            \"8502\",",
          "708:   \"unique.consul.dns.addr\": \"192.168.1.117\",",
          "709:   \"consul.dns.port\":        \"8600\",",
          "710:   \"consul.partition\":       \"default\",",
          "711:   \"unique.consul.name\":     \"HAL9000\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "752:  err4 := cf.Fingerprint(&FingerprintRequest{Config: cfg, Node: node}, &resp4)",
          "753:  must.NoError(t, err4)",
          "754:  must.Eq(t, map[string]string{",
          "768:  }, resp4.Attributes)",
          "",
          "[Removed Lines]",
          "755:   \"consul.datacenter\":    \"dc1\",",
          "756:   \"consul.revision\":      \"22ce6c6ad\",",
          "757:   \"consul.segment\":       \"seg1\",",
          "758:   \"consul.server\":        \"true\",",
          "759:   \"consul.sku\":           \"ent\",",
          "760:   \"consul.version\":       \"1.9.5+ent\",",
          "761:   \"consul.ft.namespaces\": \"true\",",
          "762:   \"consul.connect\":       \"true\",",
          "763:   \"consul.grpc\":          \"8502\",",
          "764:   \"consul.dns.addr\":      \"192.168.1.117\",",
          "765:   \"consul.dns.port\":      \"8600\",",
          "766:   \"consul.partition\":     \"default\",",
          "767:   \"unique.consul.name\":   \"HAL9000\",",
          "",
          "[Added Lines]",
          "755:   \"consul.datacenter\":      \"dc1\",",
          "756:   \"consul.revision\":        \"22ce6c6ad\",",
          "757:   \"consul.segment\":         \"seg1\",",
          "758:   \"consul.server\":          \"true\",",
          "759:   \"consul.sku\":             \"ent\",",
          "760:   \"consul.version\":         \"1.9.5+ent\",",
          "761:   \"consul.ft.namespaces\":   \"true\",",
          "762:   \"consul.connect\":         \"true\",",
          "763:   \"consul.grpc\":            \"8502\",",
          "764:   \"unique.consul.dns.addr\": \"192.168.1.117\",",
          "765:   \"consul.dns.port\":        \"8600\",",
          "766:   \"consul.partition\":       \"default\",",
          "767:   \"unique.consul.name\":     \"HAL9000\",",
          "",
          "---------------"
        ],
        "client/fingerprint/nomad.go||client/fingerprint/nomad.go": [
          "File: client/fingerprint/nomad.go -> client/fingerprint/nomad.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: }",
          "24: func (f *NomadFingerprint) Fingerprint(req *FingerprintRequest, resp *FingerprintResponse) error {",
          "26:  resp.AddAttribute(\"nomad.version\", req.Config.Version.VersionNumber())",
          "27:  resp.AddAttribute(\"nomad.revision\", req.Config.Version.Revision)",
          "28:  resp.AddAttribute(\"nomad.service_discovery\", strconv.FormatBool(req.Config.NomadServiceDiscovery))",
          "",
          "[Removed Lines]",
          "25:  resp.AddAttribute(\"nomad.advertise.address\", req.Node.HTTPAddr)",
          "",
          "[Added Lines]",
          "25:  resp.AddAttribute(\"unique.advertise.address\", req.Node.HTTPAddr)",
          "",
          "---------------"
        ],
        "client/fingerprint/nomad_test.go||client/fingerprint/nomad_test.go": [
          "File: client/fingerprint/nomad_test.go -> client/fingerprint/nomad_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   t.Fatalf(\"incorrect revision\")",
          "58:  }",
          "61:   t.Fatalf(\"incorrect advertise address\")",
          "62:  }",
          "",
          "[Removed Lines]",
          "60:  if response.Attributes[\"nomad.advertise.address\"] != h {",
          "",
          "[Added Lines]",
          "60:  if response.Attributes[\"unique.advertise.address\"] != h {",
          "",
          "---------------"
        ],
        "nomad/structs/node_class.go||nomad/structs/node_class.go": [
          "File: nomad/structs/node_class.go -> nomad/structs/node_class.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: func constraintTargetEscapes(target string) bool {",
          "125:  switch {",
          "126:  case strings.HasPrefix(target, \"${node.unique.\"):",
          "127:   return true",
          "128:  case strings.HasPrefix(target, \"${attr.unique.\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:  case strings.HasPrefix(target, \"${unique.\"):",
          "127:   return true",
          "",
          "---------------"
        ],
        "nomad/structs/node_class_test.go||nomad/structs/node_class_test.go": [
          "File: nomad/structs/node_class_test.go -> nomad/structs/node_class_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package structs",
          "6: import (",
          "8:  \"testing\"",
          "10:  \"github.com/hashicorp/nomad/ci\"",
          "",
          "[Removed Lines]",
          "7:  \"reflect\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:   Operand: \"!=\",",
          "277:  }",
          "278:  constraints := []*Constraint{ne1, ne2, ne3, e1, e2, e3}",
          "283: }",
          "",
          "[Removed Lines]",
          "279:  expected := []*Constraint{ne1, ne2, ne3}",
          "280:  if act := EscapedConstraints(constraints); reflect.DeepEqual(act, expected) {",
          "281:   t.Fatalf(\"EscapedConstraints(%v) returned %v; want %v\", constraints, act, expected)",
          "282:  }",
          "",
          "[Added Lines]",
          "278:  expected := []*Constraint{e1, e2, e3}",
          "279:  must.Eq(t, expected, EscapedConstraints(constraints),",
          "280:   must.Sprintf(\"expected unique fields to escape constraints\"))",
          "",
          "---------------"
        ],
        "scheduler/benchmarks/benchmarks_test.go||scheduler/benchmarks/benchmarks_test.go": [
          "File: scheduler/benchmarks/benchmarks_test.go -> scheduler/benchmarks/benchmarks_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"testing\"",
          "12:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "13:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "",
          "[Removed Lines]",
          "10:  \"github.com/stretchr/testify/require\"",
          "",
          "[Added Lines]",
          "8:  \"strings\"",
          "11:  \"github.com/shoenig/test/must\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   upsertNodes(h, 5000, 100)",
          "40:   iter, err := h.State.Nodes(nil)",
          "42:   nodes := 0",
          "43:   for {",
          "44:    raw := iter.Next()",
          "",
          "[Removed Lines]",
          "41:   require.NoError(b, err)",
          "",
          "[Added Lines]",
          "42:   must.NoError(b, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:    }",
          "48:    nodes++",
          "49:   }",
          "52:   eval = upsertJob(h, job)",
          "53:  }",
          "",
          "[Removed Lines]",
          "50:   require.Equal(b, 5000, nodes)",
          "51:   job := generateJob(true, 600)",
          "",
          "[Added Lines]",
          "51:   must.Eq(b, 5000, nodes)",
          "52:   job := generateJob(true, 600, 100)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:  {",
          "60:   err := h.Process(scheduler.NewServiceScheduler, eval)",
          "64:  }",
          "66:  for i := 0; i < b.N; i++ {",
          "67:   err := h.Process(scheduler.NewServiceScheduler, eval)",
          "69:  }",
          "70: }",
          "",
          "[Removed Lines]",
          "61:   require.NoError(b, err)",
          "62:   require.Len(b, h.Plans, 1)",
          "63:   require.False(b, h.Plans[0].IsNoOp())",
          "68:   require.NoError(b, err)",
          "",
          "[Added Lines]",
          "62:   must.NoError(b, err)",
          "63:   must.Len(b, 1, h.Plans)",
          "64:   must.False(b, h.Plans[0].IsNoOp())",
          "69:   must.NoError(b, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "74: func BenchmarkServiceScheduler(b *testing.B) {",
          "80:  type benchmark struct {",
          "81:   name        string",
          "",
          "[Removed Lines]",
          "76:  clusterSizes := []int{1000, 5000, 10000}",
          "77:  rackSets := []int{10, 25, 50, 75}",
          "78:  jobSizes := []int{300, 600, 900, 1200}",
          "",
          "[Added Lines]",
          "77:  clusterSizes := []int{500, 1000, 5000, 10000}",
          "78:  rackSets := []int{25, 50, 75}",
          "79:  jobSizes := []int{50, 300, 600, 900, 1200}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:  }",
          "114:  for _, bm := range benchmarks {",
          "115:   b.Run(bm.name, func(b *testing.B) {",
          "121:    for i := 0; i < b.N; i++ {",
          "122:     err := h.Process(scheduler.NewServiceScheduler, eval)",
          "124:    }",
          "125:   })",
          "126:  }",
          "127: }",
          "129: func upsertJob(h *scheduler.Harness, job *structs.Job) *structs.Evaluation {",
          "",
          "[Removed Lines]",
          "116:    h := scheduler.NewHarness(b)",
          "117:    upsertNodes(h, bm.clusterSize, bm.racks)",
          "118:    job := generateJob(bm.withSpread, bm.jobSize)",
          "119:    eval := upsertJob(h, job)",
          "120:    b.ResetTimer()",
          "123:     require.NoError(b, err)",
          "",
          "[Added Lines]",
          "116:   job := generateJob(bm.withSpread, bm.jobSize, bm.racks)",
          "117:   h := scheduler.NewHarness(b)",
          "118:   h.SetNoSubmit()",
          "119:   upsertNodes(h, bm.clusterSize, bm.racks)",
          "120:   eval := upsertJob(h, job)",
          "121:   b.ResetTimer()",
          "126:     must.NoError(b, err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "147:  return eval",
          "148: }",
          "151:  job := mock.Job()",
          "152:  job.Datacenters = []string{\"dc-1\", \"dc-2\"}",
          "153:  if withSpread {",
          "154:   job.Spreads = []*structs.Spread{{Attribute: \"${meta.rack}\"}}",
          "155:  }",
          "157:  job.TaskGroups[0].Count = jobSize",
          "158:  job.TaskGroups[0].Networks = nil",
          "159:  job.TaskGroups[0].Services = []*structs.Service{}",
          "",
          "[Removed Lines]",
          "150: func generateJob(withSpread bool, jobSize int) *structs.Job {",
          "156:  job.Constraints = []*structs.Constraint{}",
          "",
          "[Added Lines]",
          "154: func generateJob(withSpread bool, jobSize int, racks int) *structs.Job {",
          "162:  rackTargets := []string{}",
          "163:  for i := range racks / 2 {",
          "164:   rackTargets = append(rackTargets, fmt.Sprintf(\"r%d\", i))",
          "165:  }",
          "166:  rackTarget := strings.Join(rackTargets, \",\")",
          "167:  job.Constraints = []*structs.Constraint{",
          "168:   {",
          "169:    LTarget: \"${meta.rack}\",",
          "170:    RTarget: rackTarget,",
          "171:    Operand: \"set_contains_any\",",
          "172:   },",
          "173:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:   node.Datacenter = datacenters[i%2]",
          "174:   node.Meta = map[string]string{}",
          "175:   node.Meta[\"rack\"] = fmt.Sprintf(\"r%d\", i%racks)",
          "176:   memoryMB := 32000",
          "177:   diskMB := 100 * 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   node.Attributes[\"unique.advertise.address\"] = fmt.Sprintf(\"192.168.%d.%d\", i%10, i%120)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "196:    },",
          "197:   }",
          "198:   node.NodeResources.Compatibility()",
          "200:   err := h.State.UpsertNode(structs.MsgTypeTestSetup, h.NextIndex(), node)",
          "201:   if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   node.ComputeClass()",
          "",
          "---------------"
        ],
        "scheduler/testing.go||scheduler/testing.go": [
          "File: scheduler/testing.go -> scheduler/testing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  optimizePlan              bool",
          "67:  serversMeetMinimumVersion bool",
          "68: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:  noSubmit bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:   req.NodePreemptions = preemptedAllocs",
          "180:  }",
          "183:  err := h.State.UpsertPlanResults(structs.MsgTypeTestSetup, index, &req)",
          "184:  return result, nil, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:  if h.noSubmit {",
          "186:   return result, nil, nil",
          "187:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:  update := h.Evals[0]",
          "304:  require.Equal(t, state, update.Status)",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314: func (h *Harness) SetNoSubmit() {",
          "315:  h.noSubmit = true",
          "316: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "350a27ca474d179fdc94d76d5b7e3fe0ed9000f4",
      "candidate_info": {
        "commit_hash": "350a27ca474d179fdc94d76d5b7e3fe0ed9000f4",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/350a27ca474d179fdc94d76d5b7e3fe0ed9000f4",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/aws/smithy-go from 1.22.2 to 1.22.3 (#25197)\n\nBumps [github.com/aws/smithy-go](https://github.com/aws/smithy-go) from 1.22.2 to 1.22.3.\n- [Release notes](https://github.com/aws/smithy-go/releases)\n- [Changelog](https://github.com/aws/smithy-go/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/aws/smithy-go/compare/v1.22.2...v1.22.3)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/aws/smithy-go\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  github.com/aws/aws-sdk-go-v2/config v1.29.6",
          "23:  github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.28",
          "24:  github.com/aws/aws-sdk-go-v2/service/ecs v1.53.0",
          "26:  github.com/container-storage-interface/spec v1.10.0",
          "27:  github.com/containerd/go-cni v1.1.12",
          "28:  github.com/containernetworking/cni v1.2.3",
          "",
          "[Removed Lines]",
          "25:  github.com/aws/smithy-go v1.22.2",
          "",
          "[Added Lines]",
          "25:  github.com/aws/smithy-go v1.22.3",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "772: github.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.14/go.mod h1:RVwIw3y/IqxC2YEXSIkAzRDdEU1iRabDPaYjpGCbCGQ=",
          "773: github.com/aws/aws-sdk-go-v2/service/sts v1.33.14 h1:TzeR06UCMUq+KA3bDkujxK1GVGy+G8qQN/QVYzGLkQE=",
          "774: github.com/aws/aws-sdk-go-v2/service/sts v1.33.14/go.mod h1:dspXf/oYWGWo6DEvj98wpaTeqt5+DMidZD0A9BYTizc=",
          "777: github.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=",
          "778: github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=",
          "779: github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=",
          "",
          "[Removed Lines]",
          "775: github.com/aws/smithy-go v1.22.2 h1:6D9hW43xKFrRx/tXXfAlIZc4JI+yQe6snnWcQyxSyLQ=",
          "776: github.com/aws/smithy-go v1.22.2/go.mod h1:irrKGvNn1InZwb2d7fkIRNucdfwR8R+Ts3wxYa/cJHg=",
          "",
          "[Added Lines]",
          "775: github.com/aws/smithy-go v1.22.3 h1:Z//5NuZCSW6R4PhQ93hShNbyBbn8BWCmCVCt+Q8Io5k=",
          "776: github.com/aws/smithy-go v1.22.3/go.mod h1:t1ufH5HMublsJYulve2RKmHDC15xu1f26kHCp/HgceI=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "786691b89fffb8ef559a54f54cdc69db91c9e568",
      "candidate_info": {
        "commit_hash": "786691b89fffb8ef559a54f54cdc69db91c9e568",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/786691b89fffb8ef559a54f54cdc69db91c9e568",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/docker/cli from 27.3.1+incompatible to 27.5.1+incompatible (#25029)\n\nbackport of commit 9fef959daf790805ba7f1f1f89cb8deb3434d0d3 \n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  github.com/coreos/go-iptables v0.8.0",
          "31:  github.com/creack/pty v1.1.24",
          "32:  github.com/distribution/reference v0.6.0",
          "34:  github.com/docker/docker v27.4.1+incompatible",
          "35:  github.com/docker/go-connections v0.4.0",
          "36:  github.com/docker/go-units v0.5.0",
          "",
          "[Removed Lines]",
          "33:  github.com/docker/cli v27.3.1+incompatible",
          "",
          "[Added Lines]",
          "33:  github.com/docker/cli v27.5.1+incompatible",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "871: github.com/dnaeon/go-vcr v1.0.1/go.mod h1:aBB1+wY4s93YsC3HHjMBMrwTj2R9FHDzUr9KyGc8n1E=",
          "872: github.com/dnaeon/go-vcr v1.1.0 h1:ReYa/UBrRyQdant9B4fNHGoCNKw6qh6P0fsdGmZpR7c=",
          "873: github.com/dnaeon/go-vcr v1.1.0/go.mod h1:M7tiix8f0r6mKKJ3Yq/kqU1OYf3MnfmBWVbPx/yU9ko=",
          "876: github.com/docker/distribution v2.8.3+incompatible h1:AtKxIZ36LoNK51+Z6RpzLpddBirtxJnzDrHLEKxTAYk=",
          "877: github.com/docker/distribution v2.8.3+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=",
          "878: github.com/docker/docker v27.4.1+incompatible h1:ZJvcY7gfwHn1JF48PfbyXg7Jyt9ZCWDW+GGXOIxEwp4=",
          "",
          "[Removed Lines]",
          "874: github.com/docker/cli v27.3.1+incompatible h1:qEGdFBF3Xu6SCvCYhc7CzaQTlBmqDuzxPDpigSyeKQQ=",
          "875: github.com/docker/cli v27.3.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "",
          "[Added Lines]",
          "874: github.com/docker/cli v27.5.1+incompatible h1:JB9cieUT9YNiMITtIsguaN55PLOHhBSz3LKVc6cqWaY=",
          "875: github.com/docker/cli v27.5.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a35733dfb8168a78a410514ee976849feed4370",
      "candidate_info": {
        "commit_hash": "0a35733dfb8168a78a410514ee976849feed4370",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/0a35733dfb8168a78a410514ee976849feed4370",
        "files": [
          ".changelog/24423.txt",
          "api/jobs.go",
          "api/jobs_test.go",
          "command/agent/job_endpoint.go",
          "ui/app/utils/json-to-hcl.js"
        ],
        "message": "backport of commit c21dfdb17a041e5929dee0b7cd53aa851a37542c (#24537)\n\nCo-authored-by: Juana De La Cuesta <juanita.delacuestamorales@hashicorp.com>",
        "before_after_code_files": [
          "api/jobs.go||api/jobs.go",
          "api/jobs_test.go||api/jobs_test.go",
          "command/agent/job_endpoint.go||command/agent/job_endpoint.go",
          "ui/app/utils/json-to-hcl.js||ui/app/utils/json-to-hcl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/jobs.go||api/jobs.go": [
          "File: api/jobs.go -> api/jobs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"net/url\"",
          "13:  \"sort\"",
          "14:  \"strconv\"",
          "16:  \"time\"",
          "18:  \"github.com/hashicorp/cronexpr\"",
          "",
          "[Removed Lines]",
          "15:  \"strings\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1063:  for k, v := range js.VariableFlags {",
          "1067:  }",
          "1068: }",
          "",
          "[Removed Lines]",
          "1064:   if strings.Contains(v, \"\\n\") {",
          "1065:    js.VariableFlags[k] = strings.ReplaceAll(v, \"\\n\", \"\\\\n\")",
          "1066:   }",
          "",
          "[Added Lines]",
          "1064:   js.VariableFlags[k] = url.QueryEscape(v)",
          "",
          "---------------"
        ],
        "api/jobs_test.go||api/jobs_test.go": [
          "File: api/jobs_test.go -> api/jobs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1503:    VariableFlags: map[string]string{\"test\": \"foo\\nbar\"},",
          "1504:   }",
          "1505:   js.Canonicalize()",
          "1507:  })",
          "1508: }",
          "",
          "[Removed Lines]",
          "1506:   must.Eq(t, js.VariableFlags[\"test\"], \"foo\\\\nbar\")",
          "",
          "[Added Lines]",
          "1507:   must.Eq(t, js.VariableFlags[\"test\"], \"foo%0Abar\")",
          "1508:  })",
          "1510:  t.Run(\"non-alphabetic chars\", func(t *testing.T) {",
          "1511:   js := &JobSubmission{",
          "1512:    Source:        \"abc123\",",
          "1513:    VariableFlags: map[string]string{\"test\": `\"foo\": \"bar\"`},",
          "1514:   }",
          "1515:   js.Canonicalize()",
          "1516:   must.Eq(t, js.VariableFlags[\"test\"], \"%22foo%22%3A+%22bar%22\")",
          "",
          "---------------"
        ],
        "command/agent/job_endpoint.go||command/agent/job_endpoint.go": [
          "File: command/agent/job_endpoint.go -> command/agent/job_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"io\"",
          "9:  \"maps\"",
          "10:  \"net/http\"",
          "11:  \"slices\"",
          "12:  \"strconv\"",
          "13:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:  }",
          "495:  var out structs.JobSubmissionResponse",
          "497:   return nil, err",
          "498:  }",
          "",
          "[Removed Lines]",
          "496:  if err := s.agent.RPC(\"Job.GetJobSubmission\", &args, &out); err != nil {",
          "",
          "[Added Lines]",
          "497:  err := s.agent.RPC(\"Job.GetJobSubmission\", &args, &out)",
          "498:  if err != nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:   return nil, CodedError(404, \"job source not found\")",
          "503:  }",
          "505:  return out.Submission, nil",
          "506: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:  for k, v := range out.Submission.VariableFlags {",
          "508:   out.Submission.VariableFlags[k], err = url.QueryUnescape(v)",
          "509:   if err != nil {",
          "510:    return nil, err",
          "511:   }",
          "512:  }",
          "",
          "---------------"
        ],
        "ui/app/utils/json-to-hcl.js||ui/app/utils/json-to-hcl.js": [
          "File: ui/app/utils/json-to-hcl.js -> ui/app/utils/json-to-hcl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   for (const key in obj) {",
          "18:     const value = obj[key];",
          "20:     hclLines.push(`${key}=${hclValue}\\n`);",
          "21:   }",
          "",
          "[Removed Lines]",
          "19:     const hclValue = typeof value === 'string' ? `\"${value}\"` : value;",
          "",
          "[Added Lines]",
          "19:     const hclValue = typeof value === 'string' ? JSON.stringify(value) : value;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca19fa6147186b0364e9bbc2c593e68f2a9979e7",
      "candidate_info": {
        "commit_hash": "ca19fa6147186b0364e9bbc2c593e68f2a9979e7",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/ca19fa6147186b0364e9bbc2c593e68f2a9979e7",
        "files": [
          ".changelog/24974.txt",
          "nomad/core_sched_test.go",
          "nomad/job_endpoint.go",
          "nomad/state/state_store.go",
          "nomad/state/state_store_test.go",
          "nomad/system_endpoint_test.go"
        ],
        "message": "backport of commit a6523be478ec3fe1e18de1444b1b2fa41fb7e986 (#25062)\n\nCo-authored-by: Michael Smithhisler <michael.smithhisler@hashicorp.com>",
        "before_after_code_files": [
          "nomad/core_sched_test.go||nomad/core_sched_test.go",
          "nomad/job_endpoint.go||nomad/job_endpoint.go",
          "nomad/state/state_store.go||nomad/state/state_store.go",
          "nomad/state/state_store_test.go||nomad/state/state_store_test.go",
          "nomad/system_endpoint_test.go||nomad/system_endpoint_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/core_sched_test.go||nomad/core_sched_test.go": [
          "File: nomad/core_sched_test.go -> nomad/core_sched_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  defer cleanupS1()",
          "118:  testutil.WaitForLeader(t, s1.RPC)",
          "121:  store := s1.fsm.State()",
          "122:  eval := mock.Eval()",
          "123:  eval.CreateTime = time.Now().UTC().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "124:  eval.ModifyTime = time.Now().UTC().Add(-5 * time.Hour).UnixNano()",
          "125:  eval.Status = structs.EvalStatusFailed",
          "130:  eval2 := mock.Eval()",
          "131:  eval2.JobID = eval.JobID",
          "132:  eval2.CreateTime = time.Now().UTC().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "133:  eval2.ModifyTime = time.Now().UTC().Add(-5 * time.Hour).UnixNano()",
          "144:  alloc := mock.Alloc()",
          "",
          "[Removed Lines]",
          "126:  must.NoError(t, store.UpsertJobSummary(999, mock.JobSummary(eval.JobID)))",
          "127:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval}))",
          "134:  must.NoError(t, store.UpsertJobSummary(999, mock.JobSummary(eval2.JobID)))",
          "135:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1003, []*structs.Evaluation{eval2}))",
          "138:  job := mock.Job()",
          "139:  job.ID = eval.JobID",
          "141:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, 1001, nil, job))",
          "",
          "[Added Lines]",
          "120:  job := mock.Job()",
          "125:  eval.JobModifyIndex = job.ModifyIndex",
          "129:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval}))",
          "132:  job.ID = eval.JobID",
          "133:  must.NoError(t, store.UpsertJob(structs.MsgTypeTestSetup, 1002, nil, job))",
          "138:  eval2.JobModifyIndex = job.ModifyIndex                             // must have same modify index as job in order to set job status correctly",
          "141:  must.NoError(t, store.UpsertEvals(structs.MsgTypeTestSetup, 1002, []*structs.Evaluation{eval2}))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1050:  eval := mock.Eval()",
          "1051:  eval.JobID = job.ID",
          "1052:  eval.Status = structs.EvalStatusComplete",
          "1053:  eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1054:  eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "1056:  eval2 := mock.Eval()",
          "1057:  eval2.JobID = job.ID",
          "1058:  eval2.Status = structs.EvalStatusPending",
          "1059:  eval2.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1060:  eval2.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:  eval.JobModifyIndex = job.ModifyIndex",
          "1059:  eval2.JobModifyIndex = job.ModifyIndex",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1146:  alloc := mock.Alloc()",
          "1147:  alloc.JobID = job.ID",
          "1148:  alloc.EvalID = eval.ID",
          "1149:  alloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "1150:  alloc.ClientStatus = structs.AllocClientStatusComplete",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1150:  alloc.Job = job",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1153:  alloc2 := mock.Alloc()",
          "1154:  alloc2.JobID = job.ID",
          "1155:  alloc2.EvalID = eval.ID",
          "1156:  alloc2.DesiredStatus = structs.AllocDesiredStatusRun",
          "1157:  alloc2.ClientStatus = structs.AllocClientStatusRunning",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:  alloc.Job = job",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1485:    eval := mock.Eval()",
          "1486:    eval.JobID = job.ID",
          "1487:    eval.Status = structs.EvalStatusComplete",
          "1488:    eval.CreateTime = time.Now().Add(-6 * time.Hour).UnixNano() // make sure objects we insert are older than GC thresholds",
          "1489:    eval.ModifyTime = time.Now().Add(-5 * time.Hour).UnixNano()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1491:    eval.JobModifyIndex = job.ModifyIndex",
          "",
          "---------------"
        ],
        "nomad/job_endpoint.go||nomad/job_endpoint.go": [
          "File: nomad/job_endpoint.go -> nomad/job_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:   return nil",
          "423:  }",
          "426:   eval.JobModifyIndex = reply.JobModifyIndex",
          "427:   update := &structs.EvalUpdateRequest{",
          "428:    Evals:        []*structs.Evaluation{eval},",
          "",
          "[Removed Lines]",
          "425:  if eval != nil && !submittedEval {",
          "",
          "[Added Lines]",
          "425:  if !submittedEval {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:  revJob.VersionTag = nil",
          "662:  reg := &structs.JobRegisterRequest{",
          "663:   Job:          revJob,",
          "664:   WriteRequest: args.WriteRequest,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:  revJob.Stable = false",
          "",
          "---------------"
        ],
        "nomad/state/state_store.go||nomad/state/state_store.go": [
          "File: nomad/state/state_store.go -> nomad/state/state_store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3858:   e := raw.(*structs.Evaluation)",
          "3865:   out = append(out, e)",
          "3866:  }",
          "3867:  return out, nil",
          "",
          "[Removed Lines]",
          "3861:   if e.JobID != jobID {",
          "3862:    continue",
          "3863:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5538:  if err := s.setJobSummary(txn, updated, index, oldStatus, newStatus); err != nil {",
          "5539:   return fmt.Errorf(\"job summary update failed %w\", err)",
          "5540:  }",
          "5541:  return nil",
          "5542: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5542:  if err := s.upsertJobVersion(index, updated, txn); err != nil {",
          "5543:   return err",
          "5544:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5625:  hasAlloc := false",
          "5626:  for alloc := allocs.Next(); alloc != nil; alloc = allocs.Next() {",
          "5629:    return structs.JobStatusRunning, nil",
          "5630:   }",
          "5631:  }",
          "5633:  evals, err := txn.Get(\"evals\", \"job_prefix\", job.Namespace, job.ID)",
          "",
          "[Removed Lines]",
          "5627:   hasAlloc = true",
          "5628:   if !alloc.(*structs.Allocation).TerminalStatus() {",
          "",
          "[Added Lines]",
          "5632:   a := alloc.(*structs.Allocation)",
          "5633:   if !a.TerminalStatus() {",
          "5638:   if !isReschedulable(a) {",
          "5639:    hasAlloc = true",
          "5640:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5639:  for raw := evals.Next(); raw != nil; raw = evals.Next() {",
          "5640:   e := raw.(*structs.Evaluation)",
          "5644:    continue",
          "5645:   }",
          "",
          "[Removed Lines]",
          "5643:   if e.JobID != job.ID {",
          "",
          "[Added Lines]",
          "5656:   if e.JobModifyIndex < job.ModifyIndex {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5650:   }",
          "5651:  }",
          "5656:   return structs.JobStatusDead, nil",
          "5657:  }",
          "5659:  return structs.JobStatusPending, nil",
          "5660: }",
          "",
          "[Removed Lines]",
          "5655:  if evalDelete || hasEval || hasAlloc {",
          "",
          "[Added Lines]",
          "5669:  if evalDelete || hasEval || hasAlloc || job.Stop {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7354:  return iter, nil",
          "7355: }",
          "7359: func scalingPolicyNamespaceFilter(namespace string) func(interface{}) bool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7374: func isReschedulable(a *structs.Allocation) bool {",
          "7375:  if a.Job.Type != structs.JobTypeService {",
          "7376:   return false",
          "7377:  }",
          "7378:  return a.RescheduleTracker.RescheduleEligible(a.ReschedulePolicy(), time.Now())",
          "7379: }",
          "",
          "---------------"
        ],
        "nomad/state/state_store_test.go||nomad/state/state_store_test.go": [
          "File: nomad/state/state_store_test.go -> nomad/state/state_store_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3653:  }",
          "3655:  for i := 0; i < 20; i += 2 {",
          "3656:   job := mock.Job()",
          "3657:   job.Type = structs.JobTypeBatch",
          "3658:   gc[job.ID] = struct{}{}",
          "3661:    t.Fatalf(\"err: %v\", err)",
          "3662:   }",
          "3665:   eval := mock.Eval()",
          "3666:   eval.JobID = job.ID",
          "3667:   eval.Status = structs.EvalStatusComplete",
          "3669:    t.Fatalf(\"err: %v\", err)",
          "3670:   }",
          "",
          "[Removed Lines]",
          "3660:   if err := state.UpsertJob(structs.MsgTypeTestSetup, 2000+uint64(i), nil, job); err != nil {",
          "3668:   if err := state.UpsertEvals(structs.MsgTypeTestSetup, 2000+uint64(i+1), []*structs.Evaluation{eval}); err != nil {",
          "",
          "[Added Lines]",
          "3656:   idx := 2000 + uint64(i+1)",
          "3659:   job.ModifyIndex = idx",
          "3662:   if err := state.UpsertJob(structs.MsgTypeTestSetup, idx, nil, job); err != nil {",
          "3669:   eval.JobModifyIndex = job.ModifyIndex",
          "3671:   if err := state.UpsertEvals(structs.MsgTypeTestSetup, idx, []*structs.Evaluation{eval}); err != nil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4867:  eval := mock.Eval()",
          "4868:  eval.Status = structs.EvalStatusComplete",
          "4869:  eval.JobID = child.ID",
          "4872:  ws := memdb.NewWatchSet()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4873:  eval.JobModifyIndex = child.ModifyIndex",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5792:  must.NoError(t, state.UpsertJob(structs.MsgTypeTestSetup, 998, nil, parent))",
          "5794:  child := mock.Job()",
          "5795:  child.Status = \"\"",
          "5796:  child.ParentID = parent.ID",
          "5797:  must.NoError(t, state.UpsertJob(structs.MsgTypeTestSetup, 999, nil, child))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5800:  child.Type = structs.JobTypeBatch",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7678:  }",
          "7679: }",
          "7682:  ci.Parallel(t)",
          "7868:  }",
          "7907:  }",
          "7908: }",
          "",
          "[Removed Lines]",
          "7681: func TestStateStore_GetJobStatus_NoEvalsOrAllocs(t *testing.T) {",
          "7684:  job := mock.Job()",
          "7685:  state := testStateStore(t)",
          "7686:  txn := state.db.ReadTxn()",
          "7687:  status, err := state.getJobStatus(txn, job, false)",
          "7688:  if err != nil {",
          "7689:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7690:  }",
          "7692:  if status != structs.JobStatusPending {",
          "7693:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusPending)",
          "7694:  }",
          "7695: }",
          "7697: func TestStateStore_GetJobStatus_NoEvalsOrAllocs_Periodic(t *testing.T) {",
          "7698:  ci.Parallel(t)",
          "7700:  job := mock.PeriodicJob()",
          "7701:  state := testStateStore(t)",
          "7702:  txn := state.db.ReadTxn()",
          "7703:  status, err := state.getJobStatus(txn, job, false)",
          "7704:  if err != nil {",
          "7705:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7706:  }",
          "7708:  if status != structs.JobStatusRunning {",
          "7709:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusRunning)",
          "7710:  }",
          "7711: }",
          "7713: func TestStateStore_GetJobStatus_NoEvalsOrAllocs_EvalDelete(t *testing.T) {",
          "7714:  ci.Parallel(t)",
          "7716:  job := mock.Job()",
          "7717:  state := testStateStore(t)",
          "7718:  txn := state.db.ReadTxn()",
          "7719:  status, err := state.getJobStatus(txn, job, true)",
          "7720:  if err != nil {",
          "7721:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7722:  }",
          "7724:  if status != structs.JobStatusDead {",
          "7725:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusDead)",
          "7726:  }",
          "7727: }",
          "7729: func TestStateStore_GetJobStatus_DeadEvalsAndAllocs(t *testing.T) {",
          "7730:  ci.Parallel(t)",
          "7732:  state := testStateStore(t)",
          "7733:  job := mock.Job()",
          "7736:  alloc := mock.Alloc()",
          "7737:  alloc.JobID = job.ID",
          "7738:  alloc.DesiredStatus = structs.AllocDesiredStatusStop",
          "7739:  state.UpsertJobSummary(999, mock.JobSummary(alloc.JobID))",
          "7740:  if err := state.UpsertAllocs(structs.MsgTypeTestSetup, 1000, []*structs.Allocation{alloc}); err != nil {",
          "7741:   t.Fatalf(\"err: %v\", err)",
          "7742:  }",
          "7745:  eval := mock.Eval()",
          "7746:  eval.JobID = job.ID",
          "7747:  eval.Status = structs.EvalStatusComplete",
          "7748:  if err := state.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval}); err != nil {",
          "7749:   t.Fatalf(\"err: %v\", err)",
          "7750:  }",
          "7752:  txn := state.db.ReadTxn()",
          "7753:  status, err := state.getJobStatus(txn, job, false)",
          "7754:  if err != nil {",
          "7755:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7756:  }",
          "7758:  if status != structs.JobStatusDead {",
          "7759:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusDead)",
          "7760:  }",
          "7761: }",
          "7763: func TestStateStore_GetJobStatus_RunningAlloc(t *testing.T) {",
          "7764:  ci.Parallel(t)",
          "7766:  state := testStateStore(t)",
          "7767:  job := mock.Job()",
          "7770:  alloc := mock.Alloc()",
          "7771:  alloc.JobID = job.ID",
          "7772:  alloc.DesiredStatus = structs.AllocDesiredStatusRun",
          "7773:  state.UpsertJobSummary(999, mock.JobSummary(alloc.JobID))",
          "7774:  if err := state.UpsertAllocs(structs.MsgTypeTestSetup, 1000, []*structs.Allocation{alloc}); err != nil {",
          "7775:   t.Fatalf(\"err: %v\", err)",
          "7776:  }",
          "7778:  txn := state.db.ReadTxn()",
          "7779:  status, err := state.getJobStatus(txn, job, true)",
          "7780:  if err != nil {",
          "7781:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7782:  }",
          "7784:  if status != structs.JobStatusRunning {",
          "7785:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusRunning)",
          "7786:  }",
          "7787: }",
          "7789: func TestStateStore_GetJobStatus_PeriodicJob(t *testing.T) {",
          "7790:  ci.Parallel(t)",
          "7792:  state := testStateStore(t)",
          "7793:  job := mock.PeriodicJob()",
          "7795:  txn := state.db.ReadTxn()",
          "7796:  status, err := state.getJobStatus(txn, job, false)",
          "7797:  if err != nil {",
          "7798:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7799:  }",
          "7801:  if status != structs.JobStatusRunning {",
          "7802:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusRunning)",
          "7803:  }",
          "7806:  job.Stop = true",
          "7807:  status, err = state.getJobStatus(txn, job, false)",
          "7808:  if err != nil {",
          "7809:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7810:  }",
          "7812:  if status != structs.JobStatusDead {",
          "7813:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusDead)",
          "7814:  }",
          "7815: }",
          "7817: func TestStateStore_GetJobStatus_ParameterizedJob(t *testing.T) {",
          "7818:  ci.Parallel(t)",
          "7820:  state := testStateStore(t)",
          "7821:  job := mock.Job()",
          "7822:  job.ParameterizedJob = &structs.ParameterizedJobConfig{}",
          "7824:  txn := state.db.ReadTxn()",
          "7825:  status, err := state.getJobStatus(txn, job, false)",
          "7826:  if err != nil {",
          "7827:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7828:  }",
          "7830:  if status != structs.JobStatusRunning {",
          "7831:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusRunning)",
          "7832:  }",
          "7835:  job.Stop = true",
          "7836:  status, err = state.getJobStatus(txn, job, false)",
          "7837:  if err != nil {",
          "7838:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7839:  }",
          "7841:  if status != structs.JobStatusDead {",
          "7842:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusDead)",
          "7843:  }",
          "7844: }",
          "7846: func TestStateStore_SetJobStatus_PendingEval(t *testing.T) {",
          "7847:  ci.Parallel(t)",
          "7849:  state := testStateStore(t)",
          "7850:  job := mock.Job()",
          "7853:  eval := mock.Eval()",
          "7854:  eval.JobID = job.ID",
          "7855:  eval.Status = structs.EvalStatusPending",
          "7856:  if err := state.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval}); err != nil {",
          "7857:   t.Fatalf(\"err: %v\", err)",
          "7858:  }",
          "7860:  txn := state.db.ReadTxn()",
          "7861:  status, err := state.getJobStatus(txn, job, true)",
          "7862:  if err != nil {",
          "7863:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7864:  }",
          "7866:  if status != structs.JobStatusPending {",
          "7867:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, structs.JobStatusPending)",
          "7869: }",
          "7873: func TestStateStore_SetJobStatus_SystemJob(t *testing.T) {",
          "7874:  ci.Parallel(t)",
          "7876:  state := testStateStore(t)",
          "7877:  job := mock.SystemJob()",
          "7880:  eval := mock.Eval()",
          "7881:  eval.JobID = job.ID",
          "7882:  eval.Type = job.Type",
          "7883:  eval.Status = structs.EvalStatusComplete",
          "7884:  if err := state.UpsertEvals(structs.MsgTypeTestSetup, 1000, []*structs.Evaluation{eval}); err != nil {",
          "7885:   t.Fatalf(\"err: %v\", err)",
          "7886:  }",
          "7888:  txn := state.db.ReadTxn()",
          "7889:  status, err := state.getJobStatus(txn, job, true)",
          "7890:  if err != nil {",
          "7891:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7892:  }",
          "7894:  if expected := structs.JobStatusRunning; status != expected {",
          "7895:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, expected)",
          "7896:  }",
          "7899:  job.Stop = true",
          "7900:  status, err = state.getJobStatus(txn, job, true)",
          "7901:  if err != nil {",
          "7902:   t.Fatalf(\"getJobStatus() failed: %v\", err)",
          "7903:  }",
          "7905:  if expected := structs.JobStatusDead; status != expected {",
          "7906:   t.Fatalf(\"getJobStatus() returned %v; expected %v\", status, expected)",
          "",
          "[Added Lines]",
          "7687: func TestStateStore_GetJobStatus(t *testing.T) {",
          "7690:  testCases := []struct {",
          "7691:   name  string",
          "7692:   setup func(*testing.T, *txn) *structs.Job",
          "7693:   exp   string",
          "7694:  }{",
          "7695:   {",
          "7696:    name: \"stopped job with running allocations is still running\",",
          "7697:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7698:     j := mock.Job()",
          "7700:     a := mock.Alloc()",
          "7701:     a.JobID = j.ID",
          "7702:     a.Job = j",
          "7703:     a.ClientStatus = structs.AllocClientStatusRunning",
          "7705:     err := txn.Insert(\"allocs\", a)",
          "7706:     must.NoError(t, err)",
          "7708:     stoppedJob := j.Copy()",
          "7709:     stoppedJob.Stop = true",
          "7710:     stoppedJob.Version += 1",
          "7711:     return stoppedJob",
          "7712:    },",
          "7713:    exp: structs.JobStatusRunning,",
          "7714:   },",
          "7715:   {",
          "7716:    name: \"stopped job with terminal allocs is dead\",",
          "7717:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7718:     j := mock.Job()",
          "7719:     j.Stop = true",
          "7721:     a := mock.Alloc()",
          "7722:     a.JobID = j.ID",
          "7723:     a.Job = j",
          "7724:     a.ClientStatus = structs.AllocClientStatusComplete",
          "7725:     err := txn.Insert(\"allocs\", a)",
          "7726:     must.NoError(t, err)",
          "7727:     return j",
          "7728:    },",
          "7729:    exp: structs.JobStatusDead,",
          "7730:   },",
          "7731:   {",
          "7732:    name: \"parameterized job\",",
          "7733:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7734:     j := mock.Job()",
          "7735:     j.ParameterizedJob = &structs.ParameterizedJobConfig{}",
          "7736:     j.Dispatched = false",
          "7737:     return j",
          "7738:    },",
          "7739:    exp: structs.JobStatusRunning,",
          "7740:   },",
          "7741:   {",
          "7742:    name: \"periodic job\",",
          "7743:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7744:     j := mock.Job()",
          "7745:     j.Periodic = &structs.PeriodicConfig{}",
          "7746:     return j",
          "7747:    },",
          "7748:    exp: structs.JobStatusRunning,",
          "7749:   },",
          "7750:   {",
          "7751:    name: \"no allocs\",",
          "7752:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7753:     return mock.Job()",
          "7754:    },",
          "7755:    exp: structs.JobStatusPending,",
          "7756:   },",
          "7757:   {",
          "7758:    name: \"current job has pending alloc\",",
          "7759:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7760:     j := mock.Job()",
          "7761:     a := mock.Alloc()",
          "7763:     a.JobID = j.ID",
          "7765:     err := txn.Insert(\"allocs\", a)",
          "7766:     must.NoError(t, err)",
          "7767:     return j",
          "7768:    },",
          "7769:    exp: structs.JobStatusRunning,",
          "7770:   },",
          "7771:   {",
          "7772:    name: \"previous job version had allocs\",",
          "7773:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7774:     j := mock.Job()",
          "7775:     a := mock.Alloc()",
          "7776:     e := mock.Eval()",
          "7778:     e.JobID = j.ID",
          "7779:     e.JobModifyIndex = j.ModifyIndex",
          "7780:     e.Status = structs.EvalStatusPending",
          "7782:     a.JobID = j.ID",
          "7783:     a.Job = j",
          "7784:     a.ClientStatus = structs.AllocClientStatusFailed",
          "7786:     j.Version += 1",
          "7787:     err := txn.Insert(\"allocs\", a)",
          "7788:     must.NoError(t, err)",
          "7790:     err = txn.Insert(\"evals\", e)",
          "7791:     must.NoError(t, err)",
          "7792:     return j",
          "7793:    },",
          "7794:    exp: structs.JobStatusPending,",
          "7795:   },",
          "7796:   {",
          "7797:    name: \"batch job has all terminal allocs, with no evals\",",
          "7798:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7799:     j := mock.Job()",
          "7800:     j.Type = structs.JobTypeBatch",
          "7802:     a := mock.Alloc()",
          "7803:     a.ClientStatus = structs.AllocClientStatusFailed",
          "7804:     a.JobID = j.ID",
          "7805:     a.Job = j",
          "7807:     err := txn.Insert(\"allocs\", a)",
          "7808:     must.NoError(t, err)",
          "7809:     return j",
          "7810:    },",
          "7811:    exp: structs.JobStatusDead,",
          "7812:   },",
          "7813:   {",
          "7814:    name: \"job has all terminal allocs, but pending eval\",",
          "7815:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7816:     j := mock.Job()",
          "7817:     a := mock.Alloc()",
          "7819:     a.ClientStatus = structs.AllocClientStatusFailed",
          "7820:     a.JobID = j.ID",
          "7822:     e := mock.Eval()",
          "7823:     e.JobID = j.ID",
          "7824:     e.JobModifyIndex = j.ModifyIndex",
          "7825:     e.Status = structs.EvalStatusPending",
          "7827:     err := txn.Insert(\"allocs\", a)",
          "7828:     must.NoError(t, err)",
          "7830:     err = txn.Insert(\"evals\", e)",
          "7831:     must.NoError(t, err)",
          "7832:     return j",
          "7834:    },",
          "7835:    exp: structs.JobStatusPending,",
          "7836:   },",
          "7837:   {",
          "7838:    name: \"reschedulable alloc is pending waiting for replacement\",",
          "7839:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7840:     j := mock.Job()",
          "7841:     if j.TaskGroups[0].ReschedulePolicy == nil {",
          "7842:      t.Fatal(\"test job has no reschedule policy\")",
          "7843:     }",
          "7844:     a := mock.Alloc()",
          "7845:     a.Job = j",
          "7846:     a.JobID = j.ID",
          "7847:     a.ClientStatus = structs.AllocClientStatusFailed",
          "7848:     err := txn.Insert(\"allocs\", a)",
          "7849:     must.NoError(t, err)",
          "7850:     return j",
          "7851:    },",
          "7852:    exp: structs.JobStatusPending,",
          "7853:   },",
          "7854:   {",
          "7855:    name: \"reschedulable alloc is dead after replacement fails\",",
          "7856:    setup: func(t *testing.T, txn *txn) *structs.Job {",
          "7857:     j := mock.Job()",
          "7859:     j.TaskGroups[0].ReschedulePolicy.Attempts = 1",
          "7860:     j.TaskGroups[0].ReschedulePolicy.Interval = time.Hour",
          "7863:     a := mock.Alloc()",
          "7864:     a.Job = j",
          "7865:     a.JobID = j.ID",
          "7866:     a.ClientStatus = structs.AllocClientStatusFailed",
          "7867:     a.RescheduleTracker = &structs.RescheduleTracker{",
          "7868:      Events: []*structs.RescheduleEvent{",
          "7869:       structs.NewRescheduleEvent(time.Now().UTC().UnixNano(), \"\", \"\", time.Minute),",
          "7870:      },",
          "7871:     }",
          "7873:     err := txn.Insert(\"allocs\", a)",
          "7874:     must.NoError(t, err)",
          "7877:     a2 := mock.Alloc()",
          "7878:     a2.Job = j",
          "7879:     a2.JobID = j.ID",
          "7880:     a2.ClientStatus = structs.AllocClientStatusFailed",
          "7881:     a2.NextAllocation = a.ID",
          "7883:     err = txn.Insert(\"allocs\", a2)",
          "7884:     must.NoError(t, err)",
          "7885:     return j",
          "7886:    },",
          "7887:    exp: structs.JobStatusDead,",
          "7888:   },",
          "7891:  for _, tc := range testCases {",
          "7892:   t.Run(tc.name, func(t *testing.T) {",
          "7893:    ci.Parallel(t)",
          "7895:    state := testStateStore(t)",
          "7897:    txn := state.db.WriteTxn(0)",
          "7899:    job := tc.setup(t, txn)",
          "7901:    status, err := state.getJobStatus(txn, job, false)",
          "7902:    must.NoError(t, err)",
          "7903:    must.Eq(t, tc.exp, status)",
          "7904:   })",
          "",
          "---------------"
        ],
        "nomad/system_endpoint_test.go||nomad/system_endpoint_test.go": [
          "File: nomad/system_endpoint_test.go -> nomad/system_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  eval := mock.Eval()",
          "42:  eval.Status = structs.EvalStatusComplete",
          "43:  eval.JobID = job.ID",
          "45:  eval.ModifyTime = time.Now().Add(-10 * time.Millisecond).UnixNano()",
          "46:  must.NoError(t, state.UpsertEvals(structs.MsgTypeTestSetup, 1001, []*structs.Evaluation{eval}))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  eval.JobModifyIndex = job.ModifyIndex",
          "",
          "---------------"
        ]
      }
    }
  ]
}