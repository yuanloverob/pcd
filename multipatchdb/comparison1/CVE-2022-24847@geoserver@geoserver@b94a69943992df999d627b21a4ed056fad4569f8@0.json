{
  "cve_id": "CVE-2022-24847",
  "cve_desc": "GeoServer is an open source software server written in Java that allows users to share and edit geospatial data. The GeoServer security mechanism can perform an unchecked JNDI lookup, which in turn can be used to perform class deserialization and result in arbitrary code execution. The same can happen while configuring data stores with data sources located in JNDI, or while setting up the disk quota mechanism. In order to perform any of the above changes, the attack needs to have obtained admin rights and use either the GeoServer GUI, or its REST API. The lookups are going to be restricted in GeoServer 2.21.0, 2.20.4, 1.19.6. Users unable to upgrade should restrict access to the `geoserver/web` and `geoserver/rest` via a firewall and ensure that the GeoWebCache is not remotely accessible.",
  "repo": "geoserver/geoserver",
  "patch_hash": "b94a69943992df999d627b21a4ed056fad4569f8",
  "patch_info": {
    "commit_hash": "b94a69943992df999d627b21a4ed056fad4569f8",
    "repo": "geoserver/geoserver",
    "commit_url": "https://github.com/geoserver/geoserver/commit/b94a69943992df999d627b21a4ed056fad4569f8",
    "files": [
      "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
      "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
      "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
      "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
      "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
    ],
    "message": "[GEOS-10460] Centralize JNDI lookups",
    "before_after_code_files": [
      "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
      "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
      "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
      "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
      "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
    ]
  },
  "patch_diff": {
    "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java": [
      "File: src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java -> src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import java.util.Properties;",
      "12: import java.util.logging.Level;",
      "13: import java.util.logging.Logger;",
      "15: import javax.naming.NamingException;",
      "16: import javax.sql.DataSource;",
      "17: import org.apache.commons.dbcp.BasicDataSource;",
      "",
      "[Removed Lines]",
      "14: import javax.naming.Context;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:     private static final Logger LOGGER = Logging.getLogger(DataSourceFactoryBean.class);",
      "28:     JDBCLoaderProperties config;",
      "30:     DataSource dataSource;",
      "49:     public DataSourceFactoryBean(JDBCLoaderProperties config) {",
      "54:         this.config = config;",
      "56:     }",
      "58:     @Override",
      "",
      "[Removed Lines]",
      "29:     Context jndiCtx;",
      "32:     private static Context getJNDI(JDBCLoaderProperties config) {",
      "33:         if (config.isEnabled() && config.getJndiName().isPresent()) {",
      "34:             try {",
      "35:                 return GeoTools.getInitialContext(GeoTools.getDefaultHints());",
      "36:             } catch (NamingException ex) {",
      "37:                 LOGGER.log(",
      "38:                         Level.WARNING,",
      "39:                         \"Could not get JNDI Context, will not use JNDI to locate DataSource\",",
      "40:                         ex);",
      "41:                 return null;",
      "42:             }",
      "43:         } else {",
      "45:             return null;",
      "46:         }",
      "47:     }",
      "50:         this(config, getJNDI(config));",
      "51:     }",
      "53:     public DataSourceFactoryBean(JDBCLoaderProperties config, Context jndiCtx) {",
      "55:         this.jndiCtx = jndiCtx;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:     protected Optional<DataSource> getJNDIDataSource(Optional<String> name) {",
      "126:         if (name.isPresent()) {",
      "127:             try {",
      "129:                 if (LOGGER.isLoggable(Level.INFO)) {",
      "130:                     LOGGER.log(Level.INFO, \"JDBCLoader using JNDI DataSource {0}\", name.get());",
      "131:                 }",
      "",
      "[Removed Lines]",
      "124:         if (jndiCtx == null) return Optional.absent();",
      "128:                 Optional<DataSource> ds = Optional.of((DataSource) jndiCtx.lookup(name.get()));",
      "",
      "[Added Lines]",
      "103:                 Optional<DataSource> ds = Optional.of((DataSource) GeoTools.jndiLookup(name.get()));",
      "",
      "---------------"
    ],
    "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java": [
      "File: src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java -> src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import com.google.common.base.Optional;",
      "17: import java.sql.Connection;",
      "18: import java.sql.DatabaseMetaData;",
      "20: import javax.naming.NamingException;",
      "21: import javax.sql.DataSource;",
      "22: import org.apache.commons.dbcp.BasicDataSource;",
      "23: import org.easymock.EasyMock;",
      "24: import org.geoserver.jdbcloader.DataSourceFactoryBean;",
      "25: import org.junit.Test;",
      "",
      "[Removed Lines]",
      "19: import javax.naming.Context;",
      "",
      "[Added Lines]",
      "19: import javax.naming.InitialContext;",
      "25: import org.geotools.util.factory.GeoTools;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     public void testBasic() throws Exception {",
      "32:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
      "33:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
      "36:         expect(config.isEnabled()).andReturn(true);",
      "37:         expectJndi(config, null);",
      "",
      "[Removed Lines]",
      "34:         Context jndi = EasyMock.createMock(Context.class);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "73:         expectLastCall();",
      "75:         expectVerifyConnect(ds);",
      "78:         DataSourceFactoryBean fact =",
      "81:                     @Override",
      "82:                     protected BasicDataSource createBasicDataSource() {",
      "",
      "[Removed Lines]",
      "76:         replay(ds, config, jndi);",
      "79:                 new DataSourceFactoryBean(config, jndi) {",
      "",
      "[Added Lines]",
      "76:         replay(ds, config);",
      "79:                 new DataSourceFactoryBean(config) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "94:         assertThat(fact.getObject(), is((DataSource) ds));",
      "98:         reset(ds);",
      "",
      "[Removed Lines]",
      "95:         verify(ds, config, jndi);",
      "",
      "[Added Lines]",
      "95:         verify(ds, config);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "107:     public void testJNDI() throws Exception {",
      "108:         DataSource ds = EasyMock.createMock(DataSource.class);",
      "109:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
      "112:         expect(config.isEnabled()).andReturn(true);",
      "113:         expectJndi(config, \"java:comp/env/jdbc/test\");",
      "",
      "[Removed Lines]",
      "110:         Context jndi = EasyMock.createMock(Context.class);",
      "",
      "[Added Lines]",
      "110:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
      "111:         GeoTools.init(jndi);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "118:         expectVerifyConnect(ds);",
      "119:         replay(ds, config, jndi);",
      "124:         assertThat(fact.getObject(), is((DataSource) ds));",
      "",
      "[Removed Lines]",
      "121:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config, jndi);",
      "",
      "[Added Lines]",
      "122:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:     public void testJNDIFail() throws Exception {",
      "144:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
      "145:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
      "148:         expect(config.isEnabled()).andReturn(true);",
      "149:         expectJndi(config, \"java:comp/env/jdbc/test\");",
      "",
      "[Removed Lines]",
      "146:         Context jndi = EasyMock.createMock(Context.class);",
      "",
      "[Added Lines]",
      "147:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
      "148:         GeoTools.init(jndi);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "190:         replay(ds, config, jndi);",
      "192:         DataSourceFactoryBean fact =",
      "195:                     @Override",
      "196:                     protected BasicDataSource createBasicDataSource() {",
      "",
      "[Removed Lines]",
      "193:                 new DataSourceFactoryBean(config, jndi) {",
      "",
      "[Added Lines]",
      "195:                 new DataSourceFactoryBean(config) {",
      "",
      "---------------"
    ],
    "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java": [
      "File: src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java -> src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import java.sql.SQLException;",
      "12: import java.util.HashMap;",
      "13: import java.util.Map;",
      "15: import javax.naming.NamingException;",
      "16: import javax.sql.DataSource;",
      "17: import org.geoserver.taskmanager.external.DbSource;",
      "",
      "[Removed Lines]",
      "14: import javax.naming.Context;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:     @Override",
      "60:     public DataSource getDataSource() throws SQLException {",
      "62:         DataSource ds = null;",
      "70:         try {",
      "72:         } catch (NamingException e) {",
      "73:             throw new SQLException(e);",
      "74:         }",
      "",
      "[Removed Lines]",
      "61:         Context ctx = null;",
      "64:         try {",
      "65:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
      "66:         } catch (NamingException e) {",
      "67:             throw new IllegalStateException(e);",
      "68:         }",
      "71:             ds = (DataSource) ctx.lookup(jndiName);",
      "",
      "[Added Lines]",
      "62:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
      "",
      "---------------"
    ],
    "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java": [
      "File: src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java -> src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import java.util.Properties;",
      "19: import java.util.StringTokenizer;",
      "20: import java.util.logging.Logger;",
      "23: import javax.naming.NamingException;",
      "24: import javax.sql.DataSource;",
      "25: import org.apache.commons.dbcp.BasicDataSource;",
      "",
      "[Removed Lines]",
      "21: import javax.naming.Context;",
      "22: import javax.naming.InitialContext;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: import org.geoserver.security.impl.AbstractGeoServerSecurityService;",
      "32: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
      "33: import org.geoserver.util.IOUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import org.geotools.util.factory.GeoTools;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "56:         if (config.isJndi()) {",
      "57:             String jndiName = config.getJndiName();",
      "58:             try {",
      "61:             } catch (NamingException e) {",
      "62:                 throw new IOException(e);",
      "63:             }",
      "",
      "[Removed Lines]",
      "59:                 Context initialContext = new InitialContext();",
      "60:                 datasource = (DataSource) initialContext.lookup(jndiName);",
      "",
      "[Added Lines]",
      "58:                 datasource = (DataSource) GeoTools.jndiLookup(jndiName);",
      "",
      "---------------"
    ],
    "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java": [
      "File: src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java -> src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import java.sql.DriverManager;",
      "11: import java.util.logging.Level;",
      "12: import java.util.logging.Logger;",
      "15: import javax.sql.DataSource;",
      "16: import org.apache.wicket.ajax.AjaxRequestTarget;",
      "17: import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;",
      "",
      "[Removed Lines]",
      "13: import javax.naming.Context;",
      "14: import javax.naming.InitialContext;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: import org.apache.wicket.model.Model;",
      "28: import org.apache.wicket.model.StringResourceModel;",
      "29: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
      "30: import org.geotools.util.logging.Logging;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.geotools.util.factory.GeoTools;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "180:             ((FormComponent) get(\"jndiName\")).processInput();",
      "191:             }",
      "192:         }",
      "193:     }",
      "194: }",
      "",
      "[Removed Lines]",
      "182:             Context initialContext = new InitialContext();",
      "183:             try {",
      "184:                 DataSource datasource =",
      "185:                         (DataSource)",
      "186:                                 initialContext.lookup(",
      "187:                                         get(\"jndiName\").getDefaultModelObjectAsString());",
      "188:                 try (Connection con = datasource.getConnection()) {}",
      "189:             } finally {",
      "190:                 initialContext.close();",
      "",
      "[Added Lines]",
      "181:             Object lookedUp = GeoTools.jndiLookup(get(\"jndiName\").getDefaultModelObjectAsString());",
      "182:             if (lookedUp == null)",
      "183:                 throw new IllegalArgumentException(",
      "184:                         \"Failed to look up an object from JNDI at the given location\");",
      "185:             if (!(lookedUp instanceof DataSource)) {",
      "186:                 LOGGER.log(",
      "187:                         Level.WARNING,",
      "188:                         \"Was trying to look up a DataSource in JNDI, but got this instead: \"",
      "189:                                 + lookedUp);",
      "190:                 throw new IllegalArgumentException(\"JNDI lookup did not provide a DataSource\");",
      "192:             try (Connection con = ((DataSource) lookedUp).getConnection()) {}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3028095d6881d3b2f500a20901de4baf1085811",
      "candidate_info": {
        "commit_hash": "f3028095d6881d3b2f500a20901de4baf1085811",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/f3028095d6881d3b2f500a20901de4baf1085811",
        "files": [
          "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
        ],
        "message": "[GEOS-10460] Centralize JNDI lookups",
        "before_after_code_files": [
          "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
            "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
            "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
            "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
            "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
          ],
          "candidate": [
            "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
            "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
            "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
            "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
            "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
          ]
        }
      },
      "candidate_diff": {
        "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java": [
          "File: src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java -> src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.util.Properties;",
          "12: import java.util.logging.Level;",
          "13: import java.util.logging.Logger;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.apache.commons.dbcp.BasicDataSource;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     private static final Logger LOGGER = Logging.getLogger(DataSourceFactoryBean.class);",
          "28:     JDBCLoaderProperties config;",
          "30:     DataSource dataSource;",
          "49:     public DataSourceFactoryBean(JDBCLoaderProperties config) {",
          "54:         this.config = config;",
          "56:     }",
          "58:     @Override",
          "",
          "[Removed Lines]",
          "29:     Context jndiCtx;",
          "32:     private static Context getJNDI(JDBCLoaderProperties config) {",
          "33:         if (config.isEnabled() && config.getJndiName().isPresent()) {",
          "34:             try {",
          "35:                 return GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "36:             } catch (NamingException ex) {",
          "37:                 LOGGER.log(",
          "38:                         Level.WARNING,",
          "39:                         \"Could not get JNDI Context, will not use JNDI to locate DataSource\",",
          "40:                         ex);",
          "41:                 return null;",
          "42:             }",
          "43:         } else {",
          "45:             return null;",
          "46:         }",
          "47:     }",
          "50:         this(config, getJNDI(config));",
          "51:     }",
          "53:     public DataSourceFactoryBean(JDBCLoaderProperties config, Context jndiCtx) {",
          "55:         this.jndiCtx = jndiCtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     protected Optional<DataSource> getJNDIDataSource(Optional<String> name) {",
          "126:         if (name.isPresent()) {",
          "127:             try {",
          "129:                 if (LOGGER.isLoggable(Level.INFO)) {",
          "130:                     LOGGER.log(Level.INFO, \"JDBCLoader using JNDI DataSource {0}\", name.get());",
          "131:                 }",
          "",
          "[Removed Lines]",
          "124:         if (jndiCtx == null) return Optional.absent();",
          "128:                 Optional<DataSource> ds = Optional.of((DataSource) jndiCtx.lookup(name.get()));",
          "",
          "[Added Lines]",
          "103:                 Optional<DataSource> ds = Optional.of((DataSource) GeoTools.jndiLookup(name.get()));",
          "",
          "---------------"
        ],
        "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java": [
          "File: src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java -> src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import com.google.common.base.Optional;",
          "17: import java.sql.Connection;",
          "18: import java.sql.DatabaseMetaData;",
          "20: import javax.naming.NamingException;",
          "21: import javax.sql.DataSource;",
          "22: import org.apache.commons.dbcp.BasicDataSource;",
          "23: import org.easymock.EasyMock;",
          "24: import org.geoserver.jdbcloader.DataSourceFactoryBean;",
          "25: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "19: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "19: import javax.naming.InitialContext;",
          "25: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public void testBasic() throws Exception {",
          "32:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
          "33:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "36:         expect(config.isEnabled()).andReturn(true);",
          "37:         expectJndi(config, null);",
          "",
          "[Removed Lines]",
          "34:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         expectLastCall();",
          "75:         expectVerifyConnect(ds);",
          "78:         DataSourceFactoryBean fact =",
          "81:                     @Override",
          "82:                     protected BasicDataSource createBasicDataSource() {",
          "",
          "[Removed Lines]",
          "76:         replay(ds, config, jndi);",
          "79:                 new DataSourceFactoryBean(config, jndi) {",
          "",
          "[Added Lines]",
          "76:         replay(ds, config);",
          "79:                 new DataSourceFactoryBean(config) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         assertThat(fact.getObject(), is((DataSource) ds));",
          "98:         reset(ds);",
          "",
          "[Removed Lines]",
          "95:         verify(ds, config, jndi);",
          "",
          "[Added Lines]",
          "95:         verify(ds, config);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:     public void testJNDI() throws Exception {",
          "108:         DataSource ds = EasyMock.createMock(DataSource.class);",
          "109:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "112:         expect(config.isEnabled()).andReturn(true);",
          "113:         expectJndi(config, \"java:comp/env/jdbc/test\");",
          "",
          "[Removed Lines]",
          "110:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "110:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
          "111:         GeoTools.init(jndi);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "118:         expectVerifyConnect(ds);",
          "119:         replay(ds, config, jndi);",
          "124:         assertThat(fact.getObject(), is((DataSource) ds));",
          "",
          "[Removed Lines]",
          "121:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config, jndi);",
          "",
          "[Added Lines]",
          "122:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:     public void testJNDIFail() throws Exception {",
          "144:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
          "145:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "148:         expect(config.isEnabled()).andReturn(true);",
          "149:         expectJndi(config, \"java:comp/env/jdbc/test\");",
          "",
          "[Removed Lines]",
          "146:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "147:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
          "148:         GeoTools.init(jndi);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190:         replay(ds, config, jndi);",
          "192:         DataSourceFactoryBean fact =",
          "195:                     @Override",
          "196:                     protected BasicDataSource createBasicDataSource() {",
          "",
          "[Removed Lines]",
          "193:                 new DataSourceFactoryBean(config, jndi) {",
          "",
          "[Added Lines]",
          "195:                 new DataSourceFactoryBean(config) {",
          "",
          "---------------"
        ],
        "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java": [
          "File: src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java -> src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.sql.SQLException;",
          "12: import java.util.HashMap;",
          "13: import java.util.Map;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.geoserver.taskmanager.external.DbSource;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     @Override",
          "60:     public DataSource getDataSource() throws SQLException {",
          "62:         DataSource ds = null;",
          "70:         try {",
          "72:         } catch (NamingException e) {",
          "73:             throw new SQLException(e);",
          "74:         }",
          "",
          "[Removed Lines]",
          "61:         Context ctx = null;",
          "64:         try {",
          "65:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "66:         } catch (NamingException e) {",
          "67:             throw new IllegalStateException(e);",
          "68:         }",
          "71:             ds = (DataSource) ctx.lookup(jndiName);",
          "",
          "[Added Lines]",
          "62:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
          "",
          "---------------"
        ],
        "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java": [
          "File: src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java -> src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.util.Properties;",
          "19: import java.util.StringTokenizer;",
          "20: import java.util.logging.Logger;",
          "23: import javax.naming.NamingException;",
          "24: import javax.sql.DataSource;",
          "25: import org.apache.commons.dbcp.BasicDataSource;",
          "",
          "[Removed Lines]",
          "21: import javax.naming.Context;",
          "22: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.geoserver.security.impl.AbstractGeoServerSecurityService;",
          "32: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
          "33: import org.geoserver.util.IOUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         if (config.isJndi()) {",
          "57:             String jndiName = config.getJndiName();",
          "58:             try {",
          "61:             } catch (NamingException e) {",
          "62:                 throw new IOException(e);",
          "63:             }",
          "",
          "[Removed Lines]",
          "59:                 Context initialContext = new InitialContext();",
          "60:                 datasource = (DataSource) initialContext.lookup(jndiName);",
          "",
          "[Added Lines]",
          "58:                 datasource = (DataSource) GeoTools.jndiLookup(jndiName);",
          "",
          "---------------"
        ],
        "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java": [
          "File: src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java -> src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import java.sql.DriverManager;",
          "11: import java.util.logging.Level;",
          "12: import java.util.logging.Logger;",
          "15: import javax.sql.DataSource;",
          "16: import org.apache.wicket.ajax.AjaxRequestTarget;",
          "17: import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;",
          "",
          "[Removed Lines]",
          "13: import javax.naming.Context;",
          "14: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.apache.wicket.model.Model;",
          "28: import org.apache.wicket.model.StringResourceModel;",
          "29: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
          "30: import org.geotools.util.logging.Logging;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:             ((FormComponent) get(\"jndiName\")).processInput();",
          "191:             }",
          "192:         }",
          "193:     }",
          "194: }",
          "",
          "[Removed Lines]",
          "182:             Context initialContext = new InitialContext();",
          "183:             try {",
          "184:                 DataSource datasource =",
          "185:                         (DataSource)",
          "186:                                 initialContext.lookup(",
          "187:                                         get(\"jndiName\").getDefaultModelObjectAsString());",
          "188:                 try (Connection con = datasource.getConnection()) {}",
          "189:             } finally {",
          "190:                 initialContext.close();",
          "",
          "[Added Lines]",
          "181:             Object lookedUp = GeoTools.jndiLookup(get(\"jndiName\").getDefaultModelObjectAsString());",
          "182:             if (lookedUp == null)",
          "183:                 throw new IllegalArgumentException(",
          "184:                         \"Failed to look up an object from JNDI at the given location\");",
          "185:             if (!(lookedUp instanceof DataSource)) {",
          "186:                 LOGGER.log(",
          "187:                         Level.WARNING,",
          "188:                         \"Was trying to look up a DataSource in JNDI, but got this instead: \"",
          "189:                                 + lookedUp);",
          "190:                 throw new IllegalArgumentException(\"JNDI lookup did not provide a DataSource\");",
          "192:             try (Connection con = ((DataSource) lookedUp).getConnection()) {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "558e06a06ddc16b8c503a3e0413a23dc9350e940",
      "candidate_info": {
        "commit_hash": "558e06a06ddc16b8c503a3e0413a23dc9350e940",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/558e06a06ddc16b8c503a3e0413a23dc9350e940",
        "files": [
          "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
        ],
        "message": "Merge pull request from GHSA-4pm3-f52j-8ggh",
        "before_after_code_files": [
          "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
            "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
            "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
            "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
            "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
          ],
          "candidate": [
            "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
            "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
            "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
            "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
            "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
          ]
        }
      },
      "candidate_diff": {
        "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java": [
          "File: src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java -> src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.util.Properties;",
          "12: import java.util.logging.Level;",
          "13: import java.util.logging.Logger;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.apache.commons.dbcp.BasicDataSource;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     private static final Logger LOGGER = Logging.getLogger(DataSourceFactoryBean.class);",
          "28:     JDBCLoaderProperties config;",
          "30:     DataSource dataSource;",
          "49:     public DataSourceFactoryBean(JDBCLoaderProperties config) {",
          "54:         this.config = config;",
          "56:     }",
          "58:     @Override",
          "",
          "[Removed Lines]",
          "29:     Context jndiCtx;",
          "32:     private static Context getJNDI(JDBCLoaderProperties config) {",
          "33:         if (config.isEnabled() && config.getJndiName().isPresent()) {",
          "34:             try {",
          "35:                 return GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "36:             } catch (NamingException ex) {",
          "37:                 LOGGER.log(",
          "38:                         Level.WARNING,",
          "39:                         \"Could not get JNDI Context, will not use JNDI to locate DataSource\",",
          "40:                         ex);",
          "41:                 return null;",
          "42:             }",
          "43:         } else {",
          "45:             return null;",
          "46:         }",
          "47:     }",
          "50:         this(config, getJNDI(config));",
          "51:     }",
          "53:     public DataSourceFactoryBean(JDBCLoaderProperties config, Context jndiCtx) {",
          "55:         this.jndiCtx = jndiCtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     protected Optional<DataSource> getJNDIDataSource(Optional<String> name) {",
          "126:         if (name.isPresent()) {",
          "127:             try {",
          "129:                 if (LOGGER.isLoggable(Level.INFO)) {",
          "130:                     LOGGER.log(Level.INFO, \"JDBCLoader using JNDI DataSource {0}\", name.get());",
          "131:                 }",
          "",
          "[Removed Lines]",
          "124:         if (jndiCtx == null) return Optional.absent();",
          "128:                 Optional<DataSource> ds = Optional.of((DataSource) jndiCtx.lookup(name.get()));",
          "",
          "[Added Lines]",
          "103:                 Optional<DataSource> ds = Optional.of((DataSource) GeoTools.jndiLookup(name.get()));",
          "",
          "---------------"
        ],
        "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java": [
          "File: src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java -> src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import com.google.common.base.Optional;",
          "17: import java.sql.Connection;",
          "18: import java.sql.DatabaseMetaData;",
          "20: import javax.naming.NamingException;",
          "21: import javax.sql.DataSource;",
          "22: import org.apache.commons.dbcp.BasicDataSource;",
          "23: import org.easymock.EasyMock;",
          "24: import org.geoserver.jdbcloader.DataSourceFactoryBean;",
          "25: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "19: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "19: import javax.naming.InitialContext;",
          "25: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public void testBasic() throws Exception {",
          "32:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
          "33:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "36:         expect(config.isEnabled()).andReturn(true);",
          "37:         expectJndi(config, null);",
          "",
          "[Removed Lines]",
          "34:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         expectLastCall();",
          "75:         expectVerifyConnect(ds);",
          "78:         DataSourceFactoryBean fact =",
          "81:                     @Override",
          "82:                     protected BasicDataSource createBasicDataSource() {",
          "",
          "[Removed Lines]",
          "76:         replay(ds, config, jndi);",
          "79:                 new DataSourceFactoryBean(config, jndi) {",
          "",
          "[Added Lines]",
          "76:         replay(ds, config);",
          "79:                 new DataSourceFactoryBean(config) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         assertThat(fact.getObject(), is((DataSource) ds));",
          "98:         reset(ds);",
          "",
          "[Removed Lines]",
          "95:         verify(ds, config, jndi);",
          "",
          "[Added Lines]",
          "95:         verify(ds, config);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:     public void testJNDI() throws Exception {",
          "108:         DataSource ds = EasyMock.createMock(DataSource.class);",
          "109:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "112:         expect(config.isEnabled()).andReturn(true);",
          "113:         expectJndi(config, \"java:comp/env/jdbc/test\");",
          "",
          "[Removed Lines]",
          "110:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "110:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
          "111:         GeoTools.init(jndi);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "118:         expectVerifyConnect(ds);",
          "119:         replay(ds, config, jndi);",
          "124:         assertThat(fact.getObject(), is((DataSource) ds));",
          "",
          "[Removed Lines]",
          "121:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config, jndi);",
          "",
          "[Added Lines]",
          "122:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:     public void testJNDIFail() throws Exception {",
          "144:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
          "145:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "148:         expect(config.isEnabled()).andReturn(true);",
          "149:         expectJndi(config, \"java:comp/env/jdbc/test\");",
          "",
          "[Removed Lines]",
          "146:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "147:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
          "148:         GeoTools.init(jndi);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190:         replay(ds, config, jndi);",
          "192:         DataSourceFactoryBean fact =",
          "195:                     @Override",
          "196:                     protected BasicDataSource createBasicDataSource() {",
          "",
          "[Removed Lines]",
          "193:                 new DataSourceFactoryBean(config, jndi) {",
          "",
          "[Added Lines]",
          "195:                 new DataSourceFactoryBean(config) {",
          "",
          "---------------"
        ],
        "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java": [
          "File: src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java -> src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.sql.SQLException;",
          "12: import java.util.HashMap;",
          "13: import java.util.Map;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.geoserver.taskmanager.external.DbSource;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     @Override",
          "60:     public DataSource getDataSource() throws SQLException {",
          "62:         DataSource ds = null;",
          "70:         try {",
          "72:         } catch (NamingException e) {",
          "73:             throw new SQLException(e);",
          "74:         }",
          "",
          "[Removed Lines]",
          "61:         Context ctx = null;",
          "64:         try {",
          "65:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "66:         } catch (NamingException e) {",
          "67:             throw new IllegalStateException(e);",
          "68:         }",
          "71:             ds = (DataSource) ctx.lookup(jndiName);",
          "",
          "[Added Lines]",
          "62:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
          "",
          "---------------"
        ],
        "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java": [
          "File: src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java -> src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.util.Properties;",
          "19: import java.util.StringTokenizer;",
          "20: import java.util.logging.Logger;",
          "23: import javax.naming.NamingException;",
          "24: import javax.sql.DataSource;",
          "25: import org.apache.commons.dbcp.BasicDataSource;",
          "",
          "[Removed Lines]",
          "21: import javax.naming.Context;",
          "22: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.geoserver.security.impl.AbstractGeoServerSecurityService;",
          "32: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
          "33: import org.geoserver.util.IOUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         if (config.isJndi()) {",
          "57:             String jndiName = config.getJndiName();",
          "58:             try {",
          "61:             } catch (NamingException e) {",
          "62:                 throw new IOException(e);",
          "63:             }",
          "",
          "[Removed Lines]",
          "59:                 Context initialContext = new InitialContext();",
          "60:                 datasource = (DataSource) initialContext.lookup(jndiName);",
          "",
          "[Added Lines]",
          "58:                 datasource = (DataSource) GeoTools.jndiLookup(jndiName);",
          "",
          "---------------"
        ],
        "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java": [
          "File: src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java -> src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import java.sql.DriverManager;",
          "11: import java.util.logging.Level;",
          "12: import java.util.logging.Logger;",
          "15: import javax.sql.DataSource;",
          "16: import org.apache.wicket.ajax.AjaxRequestTarget;",
          "17: import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;",
          "",
          "[Removed Lines]",
          "13: import javax.naming.Context;",
          "14: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.apache.wicket.model.Model;",
          "28: import org.apache.wicket.model.StringResourceModel;",
          "29: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
          "30: import org.geotools.util.logging.Logging;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:             ((FormComponent) get(\"jndiName\")).processInput();",
          "191:             }",
          "192:         }",
          "193:     }",
          "194: }",
          "",
          "[Removed Lines]",
          "182:             Context initialContext = new InitialContext();",
          "183:             try {",
          "184:                 DataSource datasource =",
          "185:                         (DataSource)",
          "186:                                 initialContext.lookup(",
          "187:                                         get(\"jndiName\").getDefaultModelObjectAsString());",
          "188:                 try (Connection con = datasource.getConnection()) {}",
          "189:             } finally {",
          "190:                 initialContext.close();",
          "",
          "[Added Lines]",
          "181:             Object lookedUp = GeoTools.jndiLookup(get(\"jndiName\").getDefaultModelObjectAsString());",
          "182:             if (lookedUp == null)",
          "183:                 throw new IllegalArgumentException(",
          "184:                         \"Failed to look up an object from JNDI at the given location\");",
          "185:             if (!(lookedUp instanceof DataSource)) {",
          "186:                 LOGGER.log(",
          "187:                         Level.WARNING,",
          "188:                         \"Was trying to look up a DataSource in JNDI, but got this instead: \"",
          "189:                                 + lookedUp);",
          "190:                 throw new IllegalArgumentException(\"JNDI lookup did not provide a DataSource\");",
          "192:             try (Connection con = ((DataSource) lookedUp).getConnection()) {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "455009d6a2e0f19dba99ba644702abd343d09618",
      "candidate_info": {
        "commit_hash": "455009d6a2e0f19dba99ba644702abd343d09618",
        "repo": "geoserver/geoserver",
        "commit_url": "https://github.com/geoserver/geoserver/commit/455009d6a2e0f19dba99ba644702abd343d09618",
        "files": [
          "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
        ],
        "message": "[GEOS-10460] Centralize JNDI lookups",
        "before_after_code_files": [
          "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
            "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
            "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
            "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
            "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
          ],
          "candidate": [
            "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
            "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
            "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
            "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
            "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java"
          ]
        }
      },
      "candidate_diff": {
        "src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java||src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java": [
          "File: src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java -> src/community/jdbcconfig/src/main/java/org/geoserver/jdbcloader/DataSourceFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.util.Properties;",
          "12: import java.util.logging.Level;",
          "13: import java.util.logging.Logger;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.apache.commons.dbcp.BasicDataSource;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     private static final Logger LOGGER = Logging.getLogger(DataSourceFactoryBean.class);",
          "28:     JDBCLoaderProperties config;",
          "30:     DataSource dataSource;",
          "49:     public DataSourceFactoryBean(JDBCLoaderProperties config) {",
          "54:         this.config = config;",
          "56:     }",
          "58:     @Override",
          "",
          "[Removed Lines]",
          "29:     Context jndiCtx;",
          "32:     private static Context getJNDI(JDBCLoaderProperties config) {",
          "33:         if (config.isEnabled() && config.getJndiName().isPresent()) {",
          "34:             try {",
          "35:                 return GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "36:             } catch (NamingException ex) {",
          "37:                 LOGGER.log(",
          "38:                         Level.WARNING,",
          "39:                         \"Could not get JNDI Context, will not use JNDI to locate DataSource\",",
          "40:                         ex);",
          "41:                 return null;",
          "42:             }",
          "43:         } else {",
          "45:             return null;",
          "46:         }",
          "47:     }",
          "50:         this(config, getJNDI(config));",
          "51:     }",
          "53:     public DataSourceFactoryBean(JDBCLoaderProperties config, Context jndiCtx) {",
          "55:         this.jndiCtx = jndiCtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     protected Optional<DataSource> getJNDIDataSource(Optional<String> name) {",
          "126:         if (name.isPresent()) {",
          "127:             try {",
          "129:                 if (LOGGER.isLoggable(Level.INFO)) {",
          "130:                     LOGGER.log(Level.INFO, \"JDBCLoader using JNDI DataSource {0}\", name.get());",
          "131:                 }",
          "",
          "[Removed Lines]",
          "124:         if (jndiCtx == null) return Optional.absent();",
          "128:                 Optional<DataSource> ds = Optional.of((DataSource) jndiCtx.lookup(name.get()));",
          "",
          "[Added Lines]",
          "103:                 Optional<DataSource> ds = Optional.of((DataSource) GeoTools.jndiLookup(name.get()));",
          "",
          "---------------"
        ],
        "src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java||src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java": [
          "File: src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java -> src/community/jdbcconfig/src/test/java/org/geoserver/jdbcconfig/internal/DataSourceFactoryBeanTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import com.google.common.base.Optional;",
          "12: import java.sql.Connection;",
          "13: import java.sql.DatabaseMetaData;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.apache.commons.dbcp.BasicDataSource;",
          "18: import org.easymock.EasyMock;",
          "19: import org.geoserver.jdbcloader.DataSourceFactoryBean;",
          "20: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "14: import javax.naming.InitialContext;",
          "20: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     public void testBasic() throws Exception {",
          "27:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
          "28:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "31:         expect(config.isEnabled()).andReturn(true);",
          "32:         expectJndi(config, null);",
          "",
          "[Removed Lines]",
          "29:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         expectLastCall();",
          "64:         expectVerifyConnect(ds);",
          "67:         DataSourceFactoryBean fact =",
          "70:                     @Override",
          "71:                     protected BasicDataSource createBasicDataSource() {",
          "",
          "[Removed Lines]",
          "65:         replay(ds, config, jndi);",
          "68:                 new DataSourceFactoryBean(config, jndi) {",
          "",
          "[Added Lines]",
          "65:         replay(ds, config);",
          "68:                 new DataSourceFactoryBean(config) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:         assertThat(fact.getObject(), is((DataSource) ds));",
          "87:         reset(ds);",
          "",
          "[Removed Lines]",
          "84:         verify(ds, config, jndi);",
          "",
          "[Added Lines]",
          "84:         verify(ds, config);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:     public void testJNDI() throws Exception {",
          "97:         DataSource ds = EasyMock.createMock(DataSource.class);",
          "98:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "101:         expect(config.isEnabled()).andReturn(true);",
          "102:         expectJndi(config, \"java:comp/env/jdbc/test\");",
          "",
          "[Removed Lines]",
          "99:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "99:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
          "100:         GeoTools.init(jndi);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "107:         expectVerifyConnect(ds);",
          "108:         replay(ds, config, jndi);",
          "113:         assertThat(fact.getObject(), is((DataSource) ds));",
          "",
          "[Removed Lines]",
          "110:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config, jndi);",
          "",
          "[Added Lines]",
          "111:         DataSourceFactoryBean fact = new DataSourceFactoryBean(config);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "132:     public void testJNDIFail() throws Exception {",
          "133:         final BasicDataSource ds = EasyMock.createMock(BasicDataSource.class);",
          "134:         JDBCConfigProperties config = EasyMock.createMock(JDBCConfigProperties.class);",
          "137:         expect(config.isEnabled()).andReturn(true);",
          "138:         expectJndi(config, \"java:comp/env/jdbc/test\");",
          "",
          "[Removed Lines]",
          "135:         Context jndi = EasyMock.createMock(Context.class);",
          "",
          "[Added Lines]",
          "136:         InitialContext jndi = EasyMock.createMock(InitialContext.class);",
          "137:         GeoTools.init(jndi);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:         replay(ds, config, jndi);",
          "175:         DataSourceFactoryBean fact =",
          "178:                     @Override",
          "179:                     protected BasicDataSource createBasicDataSource() {",
          "",
          "[Removed Lines]",
          "176:                 new DataSourceFactoryBean(config, jndi) {",
          "",
          "[Added Lines]",
          "178:                 new DataSourceFactoryBean(config) {",
          "",
          "---------------"
        ],
        "src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java||src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java": [
          "File: src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java -> src/community/taskmanager/core/src/main/java/org/geoserver/taskmanager/external/impl/PostgisJndiDbSourceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.sql.SQLException;",
          "12: import java.util.HashMap;",
          "13: import java.util.Map;",
          "15: import javax.naming.NamingException;",
          "16: import javax.sql.DataSource;",
          "17: import org.geoserver.taskmanager.external.DbSource;",
          "",
          "[Removed Lines]",
          "14: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     @Override",
          "60:     public DataSource getDataSource() throws SQLException {",
          "62:         DataSource ds = null;",
          "70:         try {",
          "72:         } catch (NamingException e) {",
          "73:             throw new SQLException(e);",
          "74:         }",
          "",
          "[Removed Lines]",
          "61:         Context ctx = null;",
          "64:         try {",
          "65:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "66:         } catch (NamingException e) {",
          "67:             throw new IllegalStateException(e);",
          "68:         }",
          "71:             ds = (DataSource) ctx.lookup(jndiName);",
          "",
          "[Added Lines]",
          "62:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
          "",
          "---------------"
        ],
        "src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java||src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java": [
          "File: src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java -> src/security/jdbc/src/main/java/org/geoserver/security/jdbc/AbstractJDBCService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.util.Properties;",
          "19: import java.util.StringTokenizer;",
          "20: import java.util.logging.Logger;",
          "23: import javax.naming.NamingException;",
          "24: import javax.sql.DataSource;",
          "25: import org.apache.commons.dbcp.BasicDataSource;",
          "",
          "[Removed Lines]",
          "21: import javax.naming.Context;",
          "22: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.geoserver.security.impl.AbstractGeoServerSecurityService;",
          "32: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
          "33: import org.geoserver.util.IOUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:         if (config.isJndi()) {",
          "57:             String jndiName = config.getJndiName();",
          "58:             try {",
          "61:             } catch (NamingException e) {",
          "62:                 throw new IOException(e);",
          "63:             }",
          "",
          "[Removed Lines]",
          "59:                 Context initialContext = new InitialContext();",
          "60:                 datasource = (DataSource) initialContext.lookup(jndiName);",
          "",
          "[Added Lines]",
          "58:                 datasource = (DataSource) GeoTools.jndiLookup(jndiName);",
          "",
          "---------------"
        ],
        "src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java||src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java": [
          "File: src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java -> src/web/security/jdbc/src/main/java/org/geoserver/security/web/jdbc/JDBCConnectionPanel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import java.sql.DriverManager;",
          "10: import java.util.logging.Level;",
          "11: import java.util.logging.Logger;",
          "14: import javax.sql.DataSource;",
          "15: import org.apache.wicket.ajax.AjaxRequestTarget;",
          "16: import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;",
          "",
          "[Removed Lines]",
          "12: import javax.naming.Context;",
          "13: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.apache.wicket.model.Model;",
          "27: import org.apache.wicket.model.StringResourceModel;",
          "28: import org.geoserver.security.jdbc.config.JDBCSecurityServiceConfig;",
          "29: import org.geotools.util.logging.Logging;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.geotools.util.factory.GeoTools;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:             ((FormComponent) get(\"jndiName\")).processInput();",
          "188:             }",
          "189:         }",
          "190:     }",
          "191: }",
          "",
          "[Removed Lines]",
          "179:             Context initialContext = new InitialContext();",
          "180:             try {",
          "181:                 DataSource datasource =",
          "182:                         (DataSource)",
          "183:                                 initialContext.lookup(",
          "184:                                         get(\"jndiName\").getDefaultModelObjectAsString());",
          "185:                 try (Connection con = datasource.getConnection()) {}",
          "186:             } finally {",
          "187:                 initialContext.close();",
          "",
          "[Added Lines]",
          "178:             Object lookedUp = GeoTools.jndiLookup(get(\"jndiName\").getDefaultModelObjectAsString());",
          "179:             if (lookedUp == null)",
          "180:                 throw new IllegalArgumentException(",
          "181:                         \"Failed to look up an object from JNDI at the given location\");",
          "182:             if (!(lookedUp instanceof DataSource)) {",
          "183:                 LOGGER.log(",
          "184:                         Level.WARNING,",
          "185:                         \"Was trying to look up a DataSource in JNDI, but got this instead: \"",
          "186:                                 + lookedUp);",
          "187:                 throw new IllegalArgumentException(\"JNDI lookup did not provide a DataSource\");",
          "189:             try (Connection con = ((DataSource) lookedUp).getConnection()) {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}