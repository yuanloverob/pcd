{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ff64b95dabc2612c3a5c5e5a6d5c4bc80a88153",
      "candidate_info": {
        "commit_hash": "5ff64b95dabc2612c3a5c5e5a6d5c4bc80a88153",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5ff64b95dabc2612c3a5c5e5a6d5c4bc80a88153",
        "files": [
          "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java",
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ],
        "message": "PDFBOX-4847: extend the ExtractImages utility with a new \"-noColorConvert\" option, by Emmeran Seehuber\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881319 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java||tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java",
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java||tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java": [
          "File: tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java -> tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     private static final String PASSWORD = \"-password\";",
          "64:     private static final String PREFIX = \"-prefix\";",
          "65:     private static final String DIRECTJPEG = \"-directJPEG\";",
          "67:     private static final List<String> JPEG = Arrays.asList(",
          "68:             COSName.DCT_DECODE.getName(),",
          "69:             COSName.DCT_DECODE_ABBREVIATION.getName());",
          "71:     private boolean useDirectJPEG;",
          "72:     private String filePrefix;",
          "74:     private final Set<COSStream> seen = new HashSet<COSStream>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     private static final String NOCOLORCONVERT = \"-noColorConvert\";",
          "73:     private boolean noColorConvert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:                 {",
          "129:                     useDirectJPEG = true;",
          "130:                 }",
          "131:                 else",
          "132:                 {",
          "133:                     if (pdfFile == null)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:                 else if (args[i].equals(NOCOLORCONVERT))",
          "134:                 {",
          "135:                     noColorConvert = true;",
          "136:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:                 + \"\\nOptions:\\n\"",
          "162:                 + \"  -password <password>   : Password to decrypt document\\n\"",
          "163:                 + \"  -prefix <image-prefix> : Image prefix (default to pdf name)\\n\"",
          "165:                 + \"                           regardless of colorspace or masking\\n\"",
          "166:                 + \"  <inputfile>            : The PDF document to use\\n\";",
          "168:         System.err.println(message);",
          "",
          "[Removed Lines]",
          "164:                 + \"  -directJPEG            : Forces the direct extraction of JPEG/JPX images \"",
          "",
          "[Added Lines]",
          "170:                 + \"  -directJPEG            : Forces the direct extraction of JPEG/JPX images \\n\"",
          "172:                 + \"  -noColorConvert        : Images are extracted with their \\n\"",
          "173:                 + \"                           original colorspace if possible.\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:             imageCounter++;",
          "260:             System.out.println(\"Writing image: \" + name);",
          "262:         }",
          "264:         @Override",
          "",
          "[Removed Lines]",
          "261:             write2file(pdImage, name, useDirectJPEG);",
          "",
          "[Added Lines]",
          "269:             write2file(pdImage, name, useDirectJPEG, noColorConvert);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379:     {",
          "380:         String suffix = pdImage.getSuffix();",
          "381:         if (suffix == null || \"jb2\".equals(suffix))",
          "",
          "[Removed Lines]",
          "378:     private void write2file(PDImage pdImage, String prefix, boolean directJPEG) throws IOException",
          "",
          "[Added Lines]",
          "387:     private void write2file(PDImage pdImage, String prefix, boolean directJPEG,",
          "388:             boolean noColorConvert) throws IOException",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "397:         FileOutputStream out = null;",
          "398:         try",
          "399:         {",
          "400:             out = new FileOutputStream(prefix + \".\" + suffix);",
          "401:             if (\"jpg\".equals(suffix))",
          "402:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:             if (noColorConvert)",
          "411:             {",
          "414:                 BufferedImage image = pdImage.getRawImage();",
          "415:                 if (image != null)",
          "416:                 {",
          "417:                     int elements = image.getRaster().getNumDataElements();",
          "418:                     suffix = \"png\";",
          "419:                     if (elements > 3)",
          "420:                     {",
          "423:                         suffix = \"tiff\";",
          "424:                     }",
          "425:                     out = new FileOutputStream(prefix + \".\" + suffix);",
          "426:                     ImageIOUtil.writeImage(image, suffix, out);",
          "427:                     out.close();",
          "428:                     return;",
          "429:                 }",
          "430:             }",
          "",
          "---------------"
        ],
        "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java": [
          "File: tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java -> tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "17: package org.apache.pdfbox.tools.imageio;",
          "19: import java.awt.image.BufferedImage;",
          "20: import java.io.BufferedOutputStream;",
          "21: import java.io.FileOutputStream;",
          "22: import java.io.IOException;",
          "23: import java.io.OutputStream;",
          "24: import java.util.Arrays;",
          "25: import java.util.Iterator;",
          "27: import javax.imageio.IIOImage;",
          "28: import javax.imageio.ImageIO;",
          "29: import javax.imageio.ImageTypeSpecifier;",
          "30: import javax.imageio.ImageWriteParam;",
          "31: import javax.imageio.ImageWriter;",
          "32: import javax.imageio.metadata.IIOInvalidTreeException;",
          "33: import javax.imageio.metadata.IIOMetadata;",
          "34: import javax.imageio.metadata.IIOMetadataNode;",
          "35: import javax.imageio.stream.ImageOutputStream;",
          "36: import org.apache.commons.logging.Log;",
          "37: import org.apache.commons.logging.LogFactory;",
          "38: import org.w3c.dom.NodeList;",
          "43: public final class ImageIOUtil",
          "44: {",
          "48:     private static final Log LOG = LogFactory.getLog(ImageIOUtil.class);",
          "50:     private ImageIOUtil()",
          "51:     {",
          "52:     }",
          "67:     public static boolean writeImage(BufferedImage image, String filename,",
          "68:             int dpi) throws IOException",
          "69:     {",
          "70:         float compressionQuality = 1f;",
          "71:         String formatName = filename.substring(filename.lastIndexOf('.') + 1);",
          "72:         if (\"png\".equalsIgnoreCase(formatName))",
          "73:         {",
          "75:             compressionQuality = 0f;",
          "76:         }",
          "77:         return writeImage(image, filename, dpi, compressionQuality);",
          "78:     }",
          "95:     public static boolean writeImage(BufferedImage image, String filename,",
          "96:             int dpi, float compressionQuality) throws IOException",
          "97:     {",
          "98:         OutputStream output = new BufferedOutputStream(new FileOutputStream(filename));",
          "99:         try",
          "100:         {",
          "101:             String formatName = filename.substring(filename.lastIndexOf('.') + 1);",
          "102:             return writeImage(image, formatName, output, dpi, compressionQuality);",
          "103:         }",
          "104:         finally",
          "105:         {",
          "106:             output.close();",
          "107:         }",
          "108:     }",
          "127:     @Deprecated",
          "128:     public static boolean writeImage(BufferedImage image, String formatName, String filename,",
          "129:             int dpi) throws IOException",
          "130:     {",
          "131:         OutputStream output = new BufferedOutputStream(new FileOutputStream(filename + \".\" + formatName));",
          "132:         try",
          "133:         {",
          "134:             return writeImage(image, formatName, output, dpi);",
          "135:         }",
          "136:         finally",
          "137:         {",
          "138:             output.close();",
          "139:         }",
          "140:     }",
          "154:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output)",
          "155:             throws IOException",
          "156:     {",
          "157:         return writeImage(image, formatName, output, 72);",
          "158:     }",
          "173:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output,",
          "174:             int dpi) throws IOException",
          "175:     {",
          "176:         float compressionQuality = 1f;",
          "177:         if (\"png\".equalsIgnoreCase(formatName))",
          "178:         {",
          "180:             compressionQuality = 0f;",
          "181:         }",
          "182:         return writeImage(image, formatName, output, dpi, compressionQuality);",
          "183:     }",
          "203:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output,",
          "204:             int dpi, float compressionQuality) throws IOException",
          "205:     {",
          "206:         return writeImage(image, formatName, output, dpi, compressionQuality, \"\");",
          "207:     }",
          "231:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output,",
          "232:             int dpi, float compressionQuality, String compressionType) throws IOException",
          "233:     {",
          "234:         ImageOutputStream imageOutput = null;",
          "235:         ImageWriter writer = null;",
          "236:         try",
          "237:         {",
          "239:             Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(formatName);",
          "240:             ImageWriteParam param = null;",
          "241:             IIOMetadata metadata = null;",
          "245:             while (writers.hasNext())",
          "246:             {",
          "247:                 if (writer != null)",
          "248:                 {",
          "249:                     writer.dispose();",
          "250:                 }",
          "251:                 writer = writers.next();",
          "252:                 if (writer == null)",
          "253:                 {",
          "254:                     continue;",
          "255:                 }",
          "256:                 param = writer.getDefaultWriteParam();",
          "257:                 metadata = writer.getDefaultImageMetadata(new ImageTypeSpecifier(image), param);",
          "258:                 if (metadata != null",
          "259:                         && !metadata.isReadOnly()",
          "260:                         && metadata.isStandardMetadataFormatSupported())",
          "261:                 {",
          "262:                     break;",
          "263:                 }",
          "264:             }",
          "265:             if (writer == null)",
          "266:             {",
          "267:                 LOG.error(\"No ImageWriter found for '\" + formatName + \"' format\");",
          "268:                 LOG.error(\"Supported formats: \" + Arrays.toString(ImageIO.getWriterFormatNames()));",
          "269:                 return false;",
          "270:             }",
          "273:             if (param != null && param.canWriteCompressed())",
          "274:             {",
          "275:                 param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);",
          "276:                 if (formatName.toLowerCase().startsWith(\"tif\"))",
          "277:                 {",
          "278:                     if (\"\".equals(compressionType))",
          "279:                     {",
          "281:                         TIFFUtil.setCompressionType(param, image);",
          "282:                     }",
          "283:                     else",
          "284:                     {",
          "285:                         param.setCompressionType(compressionType);",
          "286:                         if (compressionType != null)",
          "287:                         {",
          "288:                             param.setCompressionQuality(compressionQuality);",
          "289:                         }",
          "290:                     }",
          "291:                 }",
          "292:                 else",
          "293:                 {",
          "294:                     param.setCompressionType(param.getCompressionTypes()[0]);",
          "295:                     param.setCompressionQuality(compressionQuality);",
          "296:                 }",
          "297:             }",
          "299:             if (formatName.toLowerCase().startsWith(\"tif\"))",
          "300:             {",
          "302:                 TIFFUtil.updateMetadata(metadata, image, dpi);",
          "303:             }",
          "304:             else if (\"jpeg\".equalsIgnoreCase(formatName)",
          "305:                     || \"jpg\".equalsIgnoreCase(formatName))",
          "306:             {",
          "311:                 JPEGUtil.updateMetadata(metadata, dpi);",
          "312:             }",
          "313:             else",
          "314:             {",
          "316:                 if (metadata != null",
          "317:                         && !metadata.isReadOnly()",
          "318:                         && metadata.isStandardMetadataFormatSupported())",
          "319:                 {",
          "320:                     setDPI(metadata, dpi, formatName);",
          "321:                 }",
          "322:             }",
          "325:             imageOutput = ImageIO.createImageOutputStream(output);",
          "326:             writer.setOutput(imageOutput);",
          "327:             writer.write(null, new IIOImage(image, null, metadata), param);",
          "328:         }",
          "329:         finally",
          "330:         {",
          "331:             if (writer != null)",
          "332:             {",
          "333:                 writer.dispose();",
          "334:             }",
          "335:             if (imageOutput != null)",
          "336:             {",
          "337:                 imageOutput.close();",
          "338:             }",
          "339:         }",
          "340:         return true;",
          "341:     }",
          "351:     private static IIOMetadataNode getOrCreateChildNode(IIOMetadataNode parentNode, String name)",
          "352:     {",
          "353:         NodeList nodeList = parentNode.getElementsByTagName(name);",
          "354:         if (nodeList.getLength() > 0)",
          "355:         {",
          "356:             return (IIOMetadataNode) nodeList.item(0);",
          "357:         }",
          "358:         IIOMetadataNode childNode = new IIOMetadataNode(name);",
          "359:         parentNode.appendChild(childNode);",
          "360:         return childNode;",
          "361:     }",
          "364:     private static void setDPI(IIOMetadata metadata, int dpi, String formatName)",
          "365:             throws IIOInvalidTreeException",
          "366:     {",
          "367:         IIOMetadataNode root = (IIOMetadataNode) metadata.getAsTree(MetaUtil.STANDARD_METADATA_FORMAT);",
          "369:         IIOMetadataNode dimension = getOrCreateChildNode(root, \"Dimension\");",
          "374:         float res = \"PNG\".equalsIgnoreCase(formatName)",
          "375:                     ? dpi / 25.4f",
          "376:                     : 25.4f / dpi;",
          "378:         IIOMetadataNode child;",
          "380:         child = getOrCreateChildNode(dimension, \"HorizontalPixelSize\");",
          "381:         child.setAttribute(\"value\", Double.toString(res));",
          "383:         child = getOrCreateChildNode(dimension, \"VerticalPixelSize\");",
          "384:         child.setAttribute(\"value\", Double.toString(res));",
          "386:         metadata.mergeTree(MetaUtil.STANDARD_METADATA_FORMAT, root);",
          "387:     }",
          "388: }",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.tools.imageio;",
          "19: import java.awt.color.ColorSpace;",
          "20: import java.awt.color.ICC_ColorSpace;",
          "21: import java.awt.color.ICC_Profile;",
          "22: import java.awt.image.BufferedImage;",
          "24: import java.io.BufferedOutputStream;",
          "25: import java.io.ByteArrayOutputStream;",
          "26: import java.io.FileOutputStream;",
          "27: import java.io.IOException;",
          "28: import java.io.OutputStream;",
          "30: import java.util.Arrays;",
          "31: import java.util.Iterator;",
          "32: import java.util.zip.DeflaterOutputStream;",
          "34: import javax.imageio.IIOImage;",
          "35: import javax.imageio.ImageIO;",
          "36: import javax.imageio.ImageTypeSpecifier;",
          "37: import javax.imageio.ImageWriteParam;",
          "38: import javax.imageio.ImageWriter;",
          "39: import javax.imageio.metadata.IIOInvalidTreeException;",
          "40: import javax.imageio.metadata.IIOMetadata;",
          "41: import javax.imageio.metadata.IIOMetadataNode;",
          "42: import javax.imageio.stream.ImageOutputStream;",
          "44: import org.apache.commons.logging.Log;",
          "45: import org.apache.commons.logging.LogFactory;",
          "47: import org.w3c.dom.Node;",
          "48: import org.w3c.dom.NodeList;",
          "53: public final class ImageIOUtil",
          "54: {",
          "58:     private static final Log LOG = LogFactory.getLog(ImageIOUtil.class);",
          "60:     private ImageIOUtil()",
          "61:     {",
          "62:     }",
          "77:     public static boolean writeImage(BufferedImage image, String filename,",
          "78:             int dpi) throws IOException",
          "79:     {",
          "80:         float compressionQuality = 1f;",
          "81:         String formatName = filename.substring(filename.lastIndexOf('.') + 1);",
          "82:         if (\"png\".equalsIgnoreCase(formatName))",
          "83:         {",
          "85:             compressionQuality = 0f;",
          "86:         }",
          "87:         return writeImage(image, filename, dpi, compressionQuality);",
          "88:     }",
          "105:     public static boolean writeImage(BufferedImage image, String filename,",
          "106:             int dpi, float compressionQuality) throws IOException",
          "107:     {",
          "108:         OutputStream output = new BufferedOutputStream(new FileOutputStream(filename));",
          "109:         try",
          "110:         {",
          "111:             String formatName = filename.substring(filename.lastIndexOf('.') + 1);",
          "112:             return writeImage(image, formatName, output, dpi, compressionQuality);",
          "113:         }",
          "114:         finally",
          "115:         {",
          "116:             output.close();",
          "117:         }",
          "118:     }",
          "137:     @Deprecated",
          "138:     public static boolean writeImage(BufferedImage image, String formatName, String filename,",
          "139:             int dpi) throws IOException",
          "140:     {",
          "141:         OutputStream output = new BufferedOutputStream(new FileOutputStream(filename + \".\" + formatName));",
          "142:         try",
          "143:         {",
          "144:             return writeImage(image, formatName, output, dpi);",
          "145:         }",
          "146:         finally",
          "147:         {",
          "148:             output.close();",
          "149:         }",
          "150:     }",
          "164:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output)",
          "165:             throws IOException",
          "166:     {",
          "167:         return writeImage(image, formatName, output, 72);",
          "168:     }",
          "183:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output,",
          "184:             int dpi) throws IOException",
          "185:     {",
          "186:         float compressionQuality = 1f;",
          "187:         if (\"png\".equalsIgnoreCase(formatName))",
          "188:         {",
          "190:             compressionQuality = 0f;",
          "191:         }",
          "192:         return writeImage(image, formatName, output, dpi, compressionQuality);",
          "193:     }",
          "213:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output,",
          "214:             int dpi, float compressionQuality) throws IOException",
          "215:     {",
          "216:         return writeImage(image, formatName, output, dpi, compressionQuality, \"\");",
          "217:     }",
          "241:     public static boolean writeImage(BufferedImage image, String formatName, OutputStream output,",
          "242:             int dpi, float compressionQuality, String compressionType) throws IOException",
          "243:     {",
          "244:         ImageOutputStream imageOutput = null;",
          "245:         ImageWriter writer = null;",
          "246:         try",
          "247:         {",
          "249:             Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(formatName);",
          "250:             ImageWriteParam param = null;",
          "251:             IIOMetadata metadata = null;",
          "255:             while (writers.hasNext())",
          "256:             {",
          "257:                 if (writer != null)",
          "258:                 {",
          "259:                     writer.dispose();",
          "260:                 }",
          "261:                 writer = writers.next();",
          "262:                 if (writer == null)",
          "263:                 {",
          "264:                     continue;",
          "265:                 }",
          "266:                 param = writer.getDefaultWriteParam();",
          "267:                 metadata = writer.getDefaultImageMetadata(new ImageTypeSpecifier(image), param);",
          "268:                 if (metadata != null",
          "269:                         && !metadata.isReadOnly()",
          "270:                         && metadata.isStandardMetadataFormatSupported())",
          "271:                 {",
          "272:                     break;",
          "273:                 }",
          "274:             }",
          "275:             if (writer == null)",
          "276:             {",
          "277:                 LOG.error(\"No ImageWriter found for '\" + formatName + \"' format\");",
          "278:                 LOG.error(\"Supported formats: \" + Arrays.toString(ImageIO.getWriterFormatNames()));",
          "279:                 return false;",
          "280:             }",
          "283:             if (param != null && param.canWriteCompressed())",
          "284:             {",
          "285:                 param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);",
          "286:                 if (formatName.toLowerCase().startsWith(\"tif\"))",
          "287:                 {",
          "288:                     if (\"\".equals(compressionType))",
          "289:                     {",
          "291:                         TIFFUtil.setCompressionType(param, image);",
          "292:                     }",
          "293:                     else",
          "294:                     {",
          "295:                         param.setCompressionType(compressionType);",
          "296:                         if (compressionType != null)",
          "297:                         {",
          "298:                             param.setCompressionQuality(compressionQuality);",
          "299:                         }",
          "300:                     }",
          "301:                 }",
          "302:                 else",
          "303:                 {",
          "304:                     param.setCompressionType(param.getCompressionTypes()[0]);",
          "305:                     param.setCompressionQuality(compressionQuality);",
          "306:                 }",
          "307:             }",
          "309:             if (formatName.toLowerCase().startsWith(\"tif\"))",
          "310:             {",
          "312:                 TIFFUtil.updateMetadata(metadata, image, dpi);",
          "313:             }",
          "314:             else if (\"jpeg\".equalsIgnoreCase(formatName)",
          "315:                     || \"jpg\".equalsIgnoreCase(formatName))",
          "316:             {",
          "321:                 JPEGUtil.updateMetadata(metadata, dpi);",
          "322:             }",
          "323:             else",
          "324:             {",
          "326:                 if (metadata != null",
          "327:                         && !metadata.isReadOnly()",
          "328:                         && metadata.isStandardMetadataFormatSupported())",
          "329:                 {",
          "330:                     setDPI(metadata, dpi, formatName);",
          "331:                 }",
          "332:             }",
          "334:             if (metadata != null && formatName.equalsIgnoreCase(\"png\") && hasICCProfile(image))",
          "335:             {",
          "337:                 IIOMetadataNode iccp = new IIOMetadataNode(\"iCCP\");",
          "338:                 ICC_Profile profile = ((ICC_ColorSpace) image.getColorModel().getColorSpace())",
          "339:                         .getProfile();",
          "340:                 iccp.setUserObject(getAsDeflatedBytes(profile));",
          "341:                 iccp.setAttribute(\"profileName\", \"unknown\");",
          "342:                 iccp.setAttribute(\"compressionMethod\", \"deflate\");",
          "343:                 Node nativeTree = metadata.getAsTree(metadata.getNativeMetadataFormatName());",
          "344:                 nativeTree.appendChild(iccp);",
          "345:                 metadata.mergeTree(metadata.getNativeMetadataFormatName(), nativeTree);",
          "346:             }",
          "349:             imageOutput = ImageIO.createImageOutputStream(output);",
          "350:             writer.setOutput(imageOutput);",
          "351:             writer.write(null, new IIOImage(image, null, metadata), param);",
          "352:         }",
          "353:         finally",
          "354:         {",
          "355:             if (writer != null)",
          "356:             {",
          "357:                 writer.dispose();",
          "358:             }",
          "359:             if (imageOutput != null)",
          "360:             {",
          "361:                 imageOutput.close();",
          "362:             }",
          "363:         }",
          "364:         return true;",
          "365:     }",
          "372:     private static boolean hasICCProfile(BufferedImage image)",
          "373:     {",
          "374:         ColorSpace colorSpace = image.getColorModel().getColorSpace();",
          "376:         if (!(colorSpace instanceof ICC_ColorSpace))",
          "377:         {",
          "378:             return false;",
          "379:         }",
          "382:         return !colorSpace.isCS_sRGB() && colorSpace != ColorSpace.getInstance(ColorSpace.CS_GRAY);",
          "383:     }",
          "385:     private static byte[] getAsDeflatedBytes(ICC_Profile profile) throws IOException",
          "386:     {",
          "387:         byte[] data = profile.getData();",
          "389:         ByteArrayOutputStream deflated = new ByteArrayOutputStream();",
          "390:         DeflaterOutputStream deflater = new DeflaterOutputStream(deflated);",
          "391:         deflater.write(data);",
          "392:         deflater.close();",
          "394:         return deflated.toByteArray();",
          "395:     }",
          "405:     private static IIOMetadataNode getOrCreateChildNode(IIOMetadataNode parentNode, String name)",
          "406:     {",
          "407:         NodeList nodeList = parentNode.getElementsByTagName(name);",
          "408:         if (nodeList.getLength() > 0)",
          "409:         {",
          "410:             return (IIOMetadataNode) nodeList.item(0);",
          "411:         }",
          "412:         IIOMetadataNode childNode = new IIOMetadataNode(name);",
          "413:         parentNode.appendChild(childNode);",
          "414:         return childNode;",
          "415:     }",
          "418:     private static void setDPI(IIOMetadata metadata, int dpi, String formatName)",
          "419:             throws IIOInvalidTreeException",
          "420:     {",
          "421:         IIOMetadataNode root = (IIOMetadataNode) metadata.getAsTree(MetaUtil.STANDARD_METADATA_FORMAT);",
          "423:         IIOMetadataNode dimension = getOrCreateChildNode(root, \"Dimension\");",
          "428:         float res = \"PNG\".equalsIgnoreCase(formatName)",
          "429:                     ? dpi / 25.4f",
          "430:                     : 25.4f / dpi;",
          "432:         IIOMetadataNode child;",
          "434:         child = getOrCreateChildNode(dimension, \"HorizontalPixelSize\");",
          "435:         child.setAttribute(\"value\", Double.toString(res));",
          "437:         child = getOrCreateChildNode(dimension, \"VerticalPixelSize\");",
          "438:         child.setAttribute(\"value\", Double.toString(res));",
          "440:         metadata.mergeTree(MetaUtil.STANDARD_METADATA_FORMAT, root);",
          "441:     }",
          "442: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fb54e8d7cddce993557083fe192922d8bde9fa7",
      "candidate_info": {
        "commit_hash": "3fb54e8d7cddce993557083fe192922d8bde9fa7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3fb54e8d7cddce993557083fe192922d8bde9fa7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ],
        "message": "PDFBOX-5091: also consider subsampling when getting actual image to know its size\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886173 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062:             if (isScaledUp)",
          "1063:             {",
          "",
          "[Removed Lines]",
          "1059:             boolean isScaledUp = pdImage.getImage().getWidth() < Math.round(at.getScaleX()) ||",
          "1060:                                  pdImage.getImage().getHeight() < Math.round(at.getScaleY());",
          "",
          "[Added Lines]",
          "1060:             BufferedImage bim;",
          "1061:             if (subsamplingAllowed)",
          "1062:             {",
          "1063:                 bim = pdImage.getImage(null, getSubsampling(pdImage, at));",
          "1064:             }",
          "1065:             else",
          "1066:             {",
          "1067:                 bim = pdImage.getImage();",
          "1068:             }",
          "1069:             boolean isScaledUp = bim.getWidth() < Math.round(at.getScaleX()) ||",
          "1070:                                  bim.getHeight() < Math.round(at.getScaleY());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05db77830f2f37dde6ea087a76643110708d6844",
      "candidate_info": {
        "commit_hash": "05db77830f2f37dde6ea087a76643110708d6844",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/05db77830f2f37dde6ea087a76643110708d6844",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java"
        ],
        "message": "PDFBOX-5196, PDFBOX-5137: add test\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890077 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.awt.Graphics;",
          "19: import java.awt.image.BufferedImage;",
          "20: import java.io.ByteArrayOutputStream;",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.io.InputStream;",
          "24: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.ByteArrayInputStream;",
          "23: import java.io.FileInputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:         doWritePDF(document, ximage, testResultsDir, \"jpeg-ushort555rgb.pdf\");",
          "259:     }",
          "263:     private void checkJpegStream(File testResultsDir, String filename, InputStream resourceStream)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     public void testPDFBox5137() throws IOException",
          "270:     {",
          "271:         InputStream is = new FileInputStream(\"target/imgs/PDFBOX-5196-lotus.jpg\");",
          "272:         byte[] ba = IOUtils.toByteArray(is);",
          "273:         is.close();",
          "275:         PDDocument document = new PDDocument();",
          "277:         PDImageXObject ximage = JPEGFactory.createFromByteArray(document, ba);",
          "279:         validate(ximage, 8, 500, 500, \"jpg\", PDDeviceRGB.INSTANCE.getName());",
          "281:         doWritePDF(document, ximage, testResultsDir, \"PDFBOX-5196-lotus.pdf\");",
          "282:         checkJpegStream(testResultsDir, \"PDFBOX-5196-lotus.pdf\", new ByteArrayInputStream(ba));",
          "283:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8da8959c7e6b33443b55d6138c0f5753c4e306f4",
      "candidate_info": {
        "commit_hash": "8da8959c7e6b33443b55d6138c0f5753c4e306f4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8da8959c7e6b33443b55d6138c0f5753c4e306f4",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ],
        "message": "PDFBOX-5090: fix issue with bfrange for identity encoding\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886079 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:                     {",
          "420:                         for (int i = 0; i < 256; i++)",
          "421:                         {",
          "426:                         }",
          "427:                     }",
          "428:                     else",
          "",
          "[Removed Lines]",
          "422:                             startCode[1] = (byte) i;",
          "423:                             tokenBytes[1] = (byte) i;",
          "424:                             addMappingFrombfrange(result, startCode, 0xff, tokenBytes);",
          "",
          "[Added Lines]",
          "422:                             startCode[0] = (byte) i;",
          "423:                             startCode[1] = 0;",
          "424:                             tokenBytes[0] = (byte) i;",
          "425:                             tokenBytes[1] = 0;",
          "426:                             addMappingFrombfrange(result, startCode, 256, tokenBytes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:         {",
          "452:             String value = createStringFromBytes(tokenBytes);",
          "453:             cmap.addCharMapping(startCode, value);",
          "455:             if (!increment(tokenBytes, tokenBytes.length - 1, strictMode))",
          "456:             {",
          "458:                 break;",
          "459:             }",
          "460:         }",
          "461:     }",
          "",
          "[Removed Lines]",
          "454:             increment(startCode, startCode.length - 1, false);",
          "",
          "[Added Lines]",
          "460:             increment(startCode, startCode.length - 1, false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b59ef2836920d8e73c87aa16a86eb1e8179d1a05",
      "candidate_info": {
        "commit_hash": "b59ef2836920d8e73c87aa16a86eb1e8179d1a05",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b59ef2836920d8e73c87aa16a86eb1e8179d1a05",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java"
        ],
        "message": "PDFBOX-4892: avoid NPE as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889657 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:                 Math.abs(patternMatrix.getScalingFactorY()));",
          "172:         newPatternMatrix.concatenate(",
          "177:         drawer.drawTilingPattern(graphics, pattern, colorSpace, color, newPatternMatrix);",
          "",
          "[Removed Lines]",
          "173:                 Matrix.getTranslateInstance(-pattern.getBBox().getLowerLeftX(),",
          "174:                         -pattern.getBBox().getLowerLeftY()));",
          "",
          "[Added Lines]",
          "172:         PDRectangle bbox = pattern.getBBox();",
          "174:                 Matrix.getTranslateInstance(-bbox.getLowerLeftX(), -bbox.getLowerLeftY()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:     {",
          "205:         float xStep = pattern.getXStep();",
          "206:         if (xStep == 0)",
          "207:         {",
          "208:             LOG.warn(\"/XStep is 0, using pattern /BBox width\");",
          "210:         }",
          "212:         float yStep = pattern.getYStep();",
          "213:         if (yStep == 0)",
          "214:         {",
          "215:             LOG.warn(\"/YStep is 0, using pattern /BBox height\");",
          "217:         }",
          "219:         float xScale = patternMatrix.getScalingFactorX();",
          "",
          "[Removed Lines]",
          "203:     private Rectangle2D getAnchorRect(PDTilingPattern pattern)",
          "209:             xStep = pattern.getBBox().getWidth();",
          "216:             yStep = pattern.getBBox().getHeight();",
          "",
          "[Added Lines]",
          "203:     private Rectangle2D getAnchorRect(PDTilingPattern pattern) throws IOException",
          "205:         PDRectangle bbox = pattern.getBBox();",
          "206:         if (bbox == null)",
          "207:         {",
          "208:             throw new IOException(\"Pattern /BBox is missing\");",
          "209:         }",
          "214:             xStep = bbox.getWidth();",
          "221:             yStep = bbox.getHeight();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:             LOG.info(\"Pattern surface is too large, will be clipped\");",
          "228:             LOG.info(\"width: \" + width + \", height: \" + height);",
          "229:             LOG.info(\"XStep: \" + xStep + \", YStep: \" + yStep);",
          "231:             LOG.info(\"pattern matrix: \" + pattern.getMatrix());",
          "232:             LOG.info(\"concatenated matrix: \" + patternMatrix);",
          "233:             width = Math.min(MAXEDGE, Math.abs(width)) * Math.signum(width);",
          "",
          "[Removed Lines]",
          "230:             LOG.info(\"bbox: \" + pattern.getBBox());",
          "",
          "[Added Lines]",
          "235:             LOG.info(\"bbox: \" + bbox);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:         }",
          "242:                                      width, height);",
          "243:     }",
          "244: }",
          "",
          "[Removed Lines]",
          "239:         PDRectangle anchor = pattern.getBBox();",
          "240:         return new Rectangle2D.Float(anchor.getLowerLeftX() * xScale,",
          "241:                                      anchor.getLowerLeftY() * yScale,",
          "",
          "[Added Lines]",
          "244:         return new Rectangle2D.Float(bbox.getLowerLeftX() * xScale,",
          "245:                                      bbox.getLowerLeftY() * yScale,",
          "",
          "---------------"
        ]
      }
    }
  ]
}