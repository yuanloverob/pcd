{
  "cve_id": "CVE-2023-45813",
  "cve_desc": "Torbot is an open source tor network intelligence tool. In affected versions the `torbot.modules.validators.validate_link function` uses the python-validators URL validation regex. This particular regular expression has an exponential complexity which allows an attacker to cause an application crash using a well-crafted argument. An attacker can use a well-crafted URL argument to exploit the vulnerability in the regular expression and cause a Denial of Service on the system. The validators file has been removed in version 4.0.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "DedSecInside/TorBot",
  "patch_hash": "ef6e06bc7785355b1701d5524eb4550441086ac4",
  "patch_info": {
    "commit_hash": "ef6e06bc7785355b1701d5524eb4550441086ac4",
    "repo": "DedSecInside/TorBot",
    "commit_url": "https://github.com/DedSecInside/TorBot/commit/ef6e06bc7785355b1701d5524eb4550441086ac4",
    "files": [
      "torbot/modules/validators.py"
    ],
    "message": "remove unused validators file",
    "before_after_code_files": [
      "torbot/modules/validators.py||torbot/modules/validators.py"
    ]
  },
  "patch_diff": {
    "torbot/modules/validators.py||torbot/modules/validators.py": [
      "File: torbot/modules/validators.py -> torbot/modules/validators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8dd2b81c1480140c7e6ade2ec157dc59a3316217",
      "candidate_info": {
        "commit_hash": "8dd2b81c1480140c7e6ade2ec157dc59a3316217",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/8dd2b81c1480140c7e6ade2ec157dc59a3316217",
        "files": [
          "README.md",
          "poetry.lock",
          "requirements.txt",
          "scripts/install.sh"
        ],
        "message": "Update README, scripts and dependency managers to reflect gotor changes",
        "before_after_code_files": [
          "poetry.lock||poetry.lock",
          "scripts/install.sh||scripts/install.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "505: [[package]]",
          "506: name = \"setuptools\"",
          "508: description = \"Easily download, build, install, upgrade, and uninstall Python packages\"",
          "509: optional = false",
          "510: python-versions = \">=3.8\"",
          "511: files = [",
          "514: ]",
          "516: [package.extras]",
          "518: testing = [\"build[virtualenv]\", \"filelock (>=3.4.0)\", \"flake8-2020\", \"ini2toml[lite] (>=0.9)\", \"jaraco.develop (>=7.21)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"pip (>=19.1)\", \"pytest (>=6)\", \"pytest-black (>=0.3.7)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy (>=0.9.1)\", \"pytest-perf\", \"pytest-ruff\", \"pytest-timeout\", \"pytest-xdist\", \"tomli-w (>=1.0.0)\", \"virtualenv (>=13.0.0)\", \"wheel\"]",
          "521: [[package]]",
          "522: name = \"six\"",
          "",
          "[Removed Lines]",
          "507: version = \"68.1.2\"",
          "512:     {file = \"setuptools-68.1.2-py3-none-any.whl\", hash = \"sha256:3d8083eed2d13afc9426f227b24fd1659489ec107c0e86cec2ffdde5c92e790b\"},",
          "513:     {file = \"setuptools-68.1.2.tar.gz\", hash = \"sha256:3d4dfa6d95f1b101d695a6160a7626e15583af71a5f52176efa5d39a054d475d\"},",
          "517: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"pygments-github-lexers (==0.0.5)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5,<=7.1.2)\", \"sphinx-favicon\", \"sphinx-hoverxref (<2)\", \"sphinx-inline-tabs\", \"sphinx-lint\", \"sphinx-notfound-page (==0.8.3)\", \"sphinx-reredirects\", \"sphinxcontrib-towncrier\"]",
          "519: testing-integration = [\"build[virtualenv]\", \"filelock (>=3.4.0)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"pytest\", \"pytest-enabler\", \"pytest-xdist\", \"tomli\", \"virtualenv (>=13.0.0)\", \"wheel\"]",
          "",
          "[Added Lines]",
          "507: version = \"68.2.2\"",
          "512:     {file = \"setuptools-68.2.2-py3-none-any.whl\", hash = \"sha256:b454a35605876da60632df1a60f736524eb73cc47bbc9f3f1ef1b644de74fd2a\"},",
          "513:     {file = \"setuptools-68.2.2.tar.gz\", hash = \"sha256:4ac1475276d2f1c48684874089fefcd83bd7162ddaafb81fac866ba0db282a87\"},",
          "517: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"pygments-github-lexers (==0.0.5)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-favicon\", \"sphinx-hoverxref (<2)\", \"sphinx-inline-tabs\", \"sphinx-lint\", \"sphinx-notfound-page (>=1,<2)\", \"sphinx-reredirects\", \"sphinxcontrib-towncrier\"]",
          "519: testing-integration = [\"build[virtualenv] (>=1.0.3)\", \"filelock (>=3.4.0)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"packaging (>=23.1)\", \"pytest\", \"pytest-enabler\", \"pytest-xdist\", \"tomli\", \"virtualenv (>=13.0.0)\", \"wheel\"]",
          "",
          "---------------"
        ],
        "scripts/install.sh||scripts/install.sh": [
          "File: scripts/install.sh -> scripts/install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: python -m pip install torbot",
          "6: echo",
          "7: echo \"TorBot installed. Run with 'python -m torbot'\"",
          "",
          "[Removed Lines]",
          "8: echo",
          "10: echo \"Setting GOPATH to access executable\"",
          "11: export PATH=${PATH}:`go env GOPATH`/bin",
          "12: echo \"New Path ${PATH}\"",
          "13: echo",
          "15: echo \"Installing gotor\"",
          "16: echo",
          "17: cd gotor/cmd/main",
          "18: go install gotor.go",
          "19: echo \"Gotor installed. Run with 'gotor'.\"",
          "21: cd ../../..",
          "",
          "[Added Lines]",
          "8: echo",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f2a293fb29bcc10b50d97ce4df5c918141ad8f5",
      "candidate_info": {
        "commit_hash": "1f2a293fb29bcc10b50d97ce4df5c918141ad8f5",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/1f2a293fb29bcc10b50d97ce4df5c918141ad8f5",
        "files": [
          "torbot/main.py"
        ],
        "message": "Update main.py to handle new changes",
        "before_after_code_files": [
          "torbot/main.py||torbot/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "torbot/main.py||torbot/main.py": [
          "File: torbot/main.py -> torbot/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import sys",
          "7: from .modules import link_io",
          "9: from .modules.color import color",
          "10: from .modules.updater import check_version",
          "11: from .modules.savefile import saveJson",
          "",
          "[Removed Lines]",
          "8: from .modules.linktree import LinkTree",
          "",
          "[Added Lines]",
          "9: from .modules.link_io import pprint_tree, print_tor_ip_address",
          "10: from .modules.api import get_node",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     def __init__(self, args):",
          "23:         self.args = args",
          "25:     def get_header(self):",
          "26:         license_msg = color(\"LICENSE: GNU Public License v3\", \"red\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         self.__version__ = version",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         \"\"\"",
          "71:         Outputs tree visual for data",
          "72:         \"\"\"",
          "74:         # -v/--visualize",
          "75:         if args.visualize:",
          "76:             tree.show()",
          "",
          "[Removed Lines]",
          "73:         tree = LinkTree(args.url, args.depth)",
          "",
          "[Added Lines]",
          "76:         '''",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:         if args.download:",
          "80:             file_name = str(input(\"File Name (.txt): \"))",
          "81:             tree.save(file_name)",
          "83:     def perform_action(self):",
          "84:         args = self.args",
          "85:         if args.gather:",
          "86:             collect_data(args.url)",
          "89:         # If flag is -v, --update, -q/--quiet then user only runs that operation",
          "90:         # because these are single flags only",
          "91:         if args.version:",
          "93:             sys.exit()",
          "94:         if args.update:",
          "95:             check_version()",
          "96:             sys.exit()",
          "97:         if not args.quiet:",
          "98:             self.get_header()",
          "104:         if args.classify:",
          "105:             result = main.classify(args.url)",
          "106:             print(\"Website Classification: \" + result[0], \"| Accuracy: \" + str(result[1]))",
          "",
          "[Removed Lines]",
          "87:             return",
          "92:             print(\"TorBot Version:\" + self.__version__)",
          "99:         # If url flag is set then check for accompanying flag set. Only one",
          "100:         # additional flag can be set with -u/--url flag",
          "101:         if not args.url:",
          "102:             print(\"usage: See run.py -h for possible arguments.\")",
          "103:         link_io.print_tor_ip_address()",
          "",
          "[Added Lines]",
          "85:             '''",
          "90:         # If url flag is set then check for accompanying flag set. Only one",
          "91:         # additional flag can be set with -u/--url flag",
          "92:         if not args.url:",
          "93:             print(\"usage: See run.py -h for possible arguments.\")",
          "94:             sys.exit()",
          "98:             sys.exit()",
          "103:             print(f\"TorBot Version: {self.__version__}\")",
          "111:         print_tor_ip_address()",
          "113:         tree = get_node(args.url, args.depth)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:             execute_all(args.url)",
          "115:         else:",
          "116:             if args.url:",
          "118:         print(\"\\n\\n\")",
          "",
          "[Removed Lines]",
          "117:                 link_io.print_tree(args.url, args.depth, args.classifyAll)",
          "",
          "[Added Lines]",
          "128:                 pprint_tree(tree)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:     parser.add_argument(\"-s\", \"--save\", action=\"store_true\", help=\"Save results in a file\")",
          "131:     parser.add_argument(\"-m\", \"--mail\", action=\"store_true\", help=\"Get e-mail addresses from the crawled sites\")",
          "132:     parser.add_argument(\"-p\", \"--phone\", action=\"store_true\", help=\"Get phone numbers from the crawled sites\")",
          "134:     parser.add_argument(\"--gather\", action=\"store_true\", help=\"Gather data for analysis\")",
          "135:     parser.add_argument(\"-v\", \"--visualize\", action=\"store_true\", help=\"Visualizes tree of data gathered.\")",
          "136:     parser.add_argument(\"-d\", \"--download\", action=\"store_true\", help=\"Downloads tree of data gathered.\")",
          "",
          "[Removed Lines]",
          "133:     parser.add_argument(\"--depth\", help=\"Specifiy max depth of crawler (default 1)\", default=1)",
          "",
          "[Added Lines]",
          "144:     parser.add_argument(\"--depth\", type=int, help=\"Specifiy max depth of crawler (default 1)\", default=1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36d3480c5afff06f6d58c5b42004a6a26a7c617e",
      "candidate_info": {
        "commit_hash": "36d3480c5afff06f6d58c5b42004a6a26a7c617e",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/36d3480c5afff06f6d58c5b42004a6a26a7c617e",
        "files": [
          "torbot/modules/linktree.py"
        ],
        "message": "better formatted JSON for tree",
        "before_after_code_files": [
          "torbot/modules/linktree.py||torbot/modules/linktree.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "torbot/modules/linktree.py||torbot/modules/linktree.py": [
          "File: torbot/modules/linktree.py -> torbot/modules/linktree.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: \"\"\"",
          "4: import http.client",
          "5: import os",
          "6: import httpx",
          "7: import validators",
          "8: import logging",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         \"\"\"",
          "91:         Saves the tree to the current working directory under the given file name in JSON.",
          "92:         \"\"\"",
          "94:         file_name = self._get_tree_file_name()",
          "95:         with open(f'{file_name}.json', 'w+') as f:",
          "96:             f.write(json_data)",
          "98:     def showJSON(self) -> None:",
          "99:         \"\"\"",
          "100:         Prints tree to console as JSON",
          "101:         \"\"\"",
          "105:     def showTable(self) -> None:",
          "106:         \"\"\"",
          "",
          "[Removed Lines]",
          "93:         json_data = self.to_json()",
          "102:         json_data = self.to_json()",
          "103:         print(json_data)",
          "",
          "[Added Lines]",
          "94:         json_data = self._to_json()",
          "99:     def _to_json(self) -> str:",
          "100:         json_data = self.to_json()",
          "101:         return json.dumps(json.loads(json_data), indent=2)",
          "107:         print(self._to_json())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e06fa5000775e3ece5883c5db4479ab2508835af",
      "candidate_info": {
        "commit_hash": "e06fa5000775e3ece5883c5db4479ab2508835af",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/e06fa5000775e3ece5883c5db4479ab2508835af",
        "files": [
          "torbot/modules/api.py"
        ],
        "message": "Remove the use of gotor for building trees and retrieving IP address",
        "before_after_code_files": [
          "torbot/modules/api.py||torbot/modules/api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "torbot/modules/api.py||torbot/modules/api.py": [
          "File: torbot/modules/api.py -> torbot/modules/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: Provides access to external services using API wrappers",
          "5: \"\"\"",
          "9: from .config import host, port",
          "11: base_url: str = f'http://{host}:{port}'",
          "15:     \"\"\"",
          "16:     Returns the LinkTree for the given link at the specified depth.",
          "17:     \"\"\"",
          "28:     \"\"\"",
          "29:     Returns the IP address of the current Tor client the service is using.",
          "30:     \"\"\"",
          "39: def get_emails(link: str):",
          "",
          "[Removed Lines]",
          "6: import requests",
          "8: from .log import debug",
          "14: def get_node(link: str, depth: int):",
          "18:     endpoint = f'/tree?link={link}&depth={depth}'",
          "19:     url = base_url + endpoint",
          "20:     debug(f'requesting {url}')",
          "21:     resp = requests.get(url)",
          "22:     data = resp.json()",
          "23:     debug(f'retrieved {data}')",
          "24:     return data",
          "27: def get_ip():",
          "31:     endpoint = '/ip'",
          "32:     url = base_url + endpoint",
          "33:     debug(f'requesting {url}')",
          "34:     resp = requests.get(url)",
          "35:     debug(f'retrieved {resp.text}')",
          "36:     return resp.text",
          "",
          "[Added Lines]",
          "6: import httpx",
          "7: import logging",
          "9: from treelib import Tree",
          "10: from bs4 import BeautifulSoup, Tag",
          "13: from .linktree import append_node, build_tree",
          "17: logging.getLogger(\"httpx\").setLevel(logging.WARNING)",
          "19: def get_node(url: str, depth: int):",
          "23:     tree = Tree()",
          "24:     append_node(tree, id=url, parent_id=None)",
          "25:     build_tree(tree, url, depth)",
          "26:     return tree",
          "29: def get_ip() -> dict:",
          "33:     resp = httpx.get(\"https://check.torproject.org/\")",
          "34:     soup = BeautifulSoup(resp.text, features='html.parser')",
          "36:     # Get the content of check tor project, this contains the header and body",
          "37:     content = soup.find(\"div\", {\"class\": \"content\"})",
          "38:     if not content:",
          "39:         raise Exception(\"unable to find content to parse IP.\")",
          "41:     # parse the header",
          "42:     header_tag = content.find(\"h1\")",
          "43:     if not header_tag:",
          "44:         raise Exception(\"unable to find header\")",
          "45:     if not isinstance(header_tag, Tag):",
          "46:         raise Exception(\"invalid header found\")",
          "47:     header = header_tag.get_text().strip()",
          "49:     # parse the main content containing the IP address",
          "50:     body_tag = content.find(\"p\")",
          "51:     if not body_tag:",
          "52:         raise Exception(\"unable to find body\")",
          "53:     if not isinstance(body_tag, Tag):",
          "54:         raise Exception(\"invalid body found\")",
          "55:     body = body_tag.get_text().strip()",
          "57:     return {\"header\": header, \"body\": body}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     \"\"\"",
          "43:     endpoint = f'/emails?link={link}'",
          "44:     url = base_url + endpoint",
          "47:     data = resp.json()",
          "49:     return data",
          "",
          "[Removed Lines]",
          "45:     debug(f'requesting {url}')",
          "46:     resp = requests.get(url)",
          "48:     debug(f'retrieved {data}')",
          "",
          "[Added Lines]",
          "66:     resp = httpx.get(url)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     \"\"\"",
          "56:     endpoint = f'/phone?link={link}'",
          "57:     url = base_url + endpoint",
          "60:     data = resp.json()",
          "62:     return data",
          "",
          "[Removed Lines]",
          "58:     debug(f'requesting {url}')",
          "59:     resp = requests.get(url)",
          "61:     debug(f'retrieved {data}')",
          "",
          "[Added Lines]",
          "77:     resp = httpx.get(url)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69:     endpoint = f'/content?link={link}'",
          "70:     url = base_url + endpoint",
          "71:     debug(f'requesting {url}')",
          "73:     debug(f'retrieved {resp.text}')",
          "74:     return resp.text",
          "",
          "[Removed Lines]",
          "72:     resp = requests.get(url)",
          "",
          "[Added Lines]",
          "89:     resp = httpx.get(url)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9de8d3dd8ad27a4da739725331f71537b0f2144",
      "candidate_info": {
        "commit_hash": "d9de8d3dd8ad27a4da739725331f71537b0f2144",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/d9de8d3dd8ad27a4da739725331f71537b0f2144",
        "files": [
          "torbot/main.py",
          "torbot/modules/config.py",
          "torbot/modules/info.py",
          "torbot/modules/linktree.py"
        ],
        "message": "flake8 fixes",
        "before_after_code_files": [
          "torbot/main.py||torbot/main.py",
          "torbot/modules/config.py||torbot/modules/config.py",
          "torbot/modules/info.py||torbot/modules/info.py",
          "torbot/modules/linktree.py||torbot/modules/linktree.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "torbot/main.py||torbot/main.py": [
          "File: torbot/main.py -> torbot/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     parser.add_argument(\"-q\", \"--quiet\", action=\"store_true\")",
          "122:     parser.add_argument(\"--version\", action=\"store_true\", help=\"Show current version of TorBot.\")",
          "123:     parser.add_argument(\"--update\", action=\"store_true\", help=\"Update TorBot to the latest stable version\")",
          "125:     parser.add_argument(\"-v\", action=\"store_true\", help=\"verbose logging\")",
          "127:     return parser",
          "",
          "[Removed Lines]",
          "124:     parser.add_argument(\"--info\", action=\"store_true\", help=\"Info displays basic info of the scanned site. Only supports a single URL at a time.\")",
          "",
          "[Added Lines]",
          "123:     parser.add_argument(\"--info\", action=\"store_true\",",
          "124:                         help=\"Info displays basic info of the scanned site. Only supports a single URL at a time.\")",
          "",
          "---------------"
        ],
        "torbot/modules/config.py||torbot/modules/config.py": [
          "File: torbot/modules/config.py -> torbot/modules/config.py"
        ],
        "torbot/modules/info.py||torbot/modules/info.py": [
          "File: torbot/modules/info.py -> torbot/modules/info.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: \"\"\"",
          "5: import re",
          "6: import httpx",
          "8: from urllib.parse import urlsplit",
          "9: from bs4 import BeautifulSoup",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import logging",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:             attempts to terminal.",
          "42:     \"\"\"",
          "45:     soup = BeautifulSoup(resp.text, 'html.parser')",
          "46:     validation_functions = [",
          "47:         get_robots_txt, get_dot_git, get_dot_svn, get_dot_git, get_intel, get_dot_htaccess, get_bitcoin_address",
          "",
          "[Removed Lines]",
          "44:     resp = client.get(link)",
          "",
          "[Added Lines]",
          "45:     resp = client.get(url=link)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     for validate_func in validation_functions:",
          "50:         try:",
          "51:             validate_func(client, link, resp)",
          "53:             cprint('Error', 'red')",
          "55:     display_webpage_description(soup)",
          "",
          "[Removed Lines]",
          "52:         except:",
          "",
          "[Added Lines]",
          "53:         except Exception as e:",
          "54:             logging.debug(e)",
          "",
          "---------------"
        ],
        "torbot/modules/linktree.py||torbot/modules/linktree.py": [
          "File: torbot/modules/linktree.py -> torbot/modules/linktree.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:             try:",
          "184:                 if phonenumbers.is_valid_number(number):",
          "185:                     numbers.add(number)",
          "187:                 pass",
          "189:             try:",
          "190:                 if phonenumbers.is_valid_number(tag['href']):",
          "191:                     numbers.add(tag['href'])",
          "193:                 pass",
          "195:     return list(numbers)",
          "",
          "[Removed Lines]",
          "186:             except:",
          "192:             except:",
          "",
          "[Added Lines]",
          "186:             except Exception as e:",
          "187:                 logging.debug(e)",
          "193:             except Exception as e:",
          "194:                 logging.debug(e)",
          "",
          "---------------"
        ]
      }
    }
  ]
}