{
  "cve_id": "CVE-2018-14731",
  "cve_desc": "An issue was discovered in HMRServer.js in Parcel parcel-bundler. Attackers are able to steal developer's code because the origin of requests is not checked by the WebSocket server, which is used for HMR (Hot Module Replacement). Anyone can receive the HMR message sent by the WebSocket server via a ws://127.0.0.1 connection (with a random TCP port number) from any origin. The random port number can be found by connecting to http://127.0.0.1 and reading the \"new WebSocket\" line in the source code.",
  "repo": "parcel-bundler/parcel",
  "patch_hash": "066e0bf6bd26b15c78bd47df023452e4b20073e4",
  "patch_info": {
    "commit_hash": "066e0bf6bd26b15c78bd47df023452e4b20073e4",
    "repo": "parcel-bundler/parcel",
    "commit_url": "https://github.com/parcel-bundler/parcel/commit/066e0bf6bd26b15c78bd47df023452e4b20073e4",
    "files": [
      "packages/core/parcel-bundler/src/HMRServer.js"
    ],
    "message": "fix security vuln (#1794)",
    "before_after_code_files": [
      "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
    ]
  },
  "patch_diff": {
    "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js": [
      "File: packages/core/parcel-bundler/src/HMRServer.js -> packages/core/parcel-bundler/src/HMRServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:         this.server = https.createServer(await getCertificate(options.https));",
      "18:       }",
      "21:       this.server.listen(options.hmrPort, resolve);",
      "22:     });",
      "",
      "[Removed Lines]",
      "20:       this.wss = new WebSocket.Server({server: this.server});",
      "",
      "[Added Lines]",
      "20:       let websocketOptions = {",
      "21:         server: this.server",
      "22:       };",
      "24:       if (options.hmrHostname) {",
      "25:         websocketOptions.origin = `${options.https ? 'https' : 'http'}://${",
      "26:           options.hmrHostname",
      "27:         }`;",
      "28:       }",
      "30:       this.wss = new WebSocket.Server(websocketOptions);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "896952dae2d9a1d5f8a34918bb172618ba991fed",
      "candidate_info": {
        "commit_hash": "896952dae2d9a1d5f8a34918bb172618ba991fed",
        "repo": "parcel-bundler/parcel",
        "commit_url": "https://github.com/parcel-bundler/parcel/commit/896952dae2d9a1d5f8a34918bb172618ba991fed",
        "files": [
          "packages/core/parcel-bundler/src/Bundler.js",
          "packages/core/parcel-bundler/src/HMRServer.js",
          "packages/core/parcel-bundler/src/builtins/hmr-runtime.js"
        ],
        "message": "launch https websocket server is --https (#708)",
        "before_after_code_files": [
          "packages/core/parcel-bundler/src/Bundler.js||packages/core/parcel-bundler/src/Bundler.js",
          "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js",
          "packages/core/parcel-bundler/src/builtins/hmr-runtime.js||packages/core/parcel-bundler/src/builtins/hmr-runtime.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ],
          "candidate": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/parcel-bundler/src/Bundler.js||packages/core/parcel-bundler/src/Bundler.js": [
          "File: packages/core/parcel-bundler/src/Bundler.js -> packages/core/parcel-bundler/src/Bundler.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:       minify:",
          "79:         typeof options.minify === 'boolean' ? options.minify : isProduction,",
          "80:       hmr: typeof options.hmr === 'boolean' ? options.hmr : watch,",
          "81:       logLevel: typeof options.logLevel === 'number' ? options.logLevel : 3,",
          "82:       mainFile: this.mainFile,",
          "83:       hmrPort: options.hmrPort || 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:       https: options.https || false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:     if (this.options.hmr) {",
          "250:       this.hmr = new HMRServer();",
          "252:     }",
          "254:     this.farm = WorkerFarm.getShared(this.options);",
          "",
          "[Removed Lines]",
          "251:       this.options.hmrPort = await this.hmr.start(this.options.hmrPort);",
          "",
          "[Added Lines]",
          "252:       this.options.hmrPort = await this.hmr.start(this.options);",
          "",
          "---------------"
        ],
        "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js": [
          "File: packages/core/parcel-bundler/src/HMRServer.js -> packages/core/parcel-bundler/src/HMRServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const WebSocket = require('ws');",
          "2: const prettyError = require('./utils/prettyError');",
          "3: const logger = require('./Logger');",
          "5: class HMRServer {",
          "7:     await new Promise(resolve => {",
          "9:     });",
          "11:     this.wss.on('connection', ws => {",
          "",
          "[Removed Lines]",
          "6:   async start(port) {",
          "8:       this.wss = new WebSocket.Server({port}, resolve);",
          "",
          "[Added Lines]",
          "1: const http = require('http');",
          "2: const https = require('https');",
          "5: const generateCertificate = require('./utils/generateCertificate');",
          "9:   async start(options = {}) {",
          "11:       let server = options.https",
          "12:         ? https.createServer(generateCertificate(options))",
          "13:         : http.createServer();",
          "15:       this.wss = new WebSocket.Server({server});",
          "16:       server.listen(options.hmrPort, resolve);",
          "",
          "---------------"
        ],
        "packages/core/parcel-bundler/src/builtins/hmr-runtime.js||packages/core/parcel-bundler/src/builtins/hmr-runtime.js": [
          "File: packages/core/parcel-bundler/src/builtins/hmr-runtime.js -> packages/core/parcel-bundler/src/builtins/hmr-runtime.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: if (!module.bundle.parent && typeof WebSocket !== 'undefined') {",
          "18:   var hostname = process.env.HMR_HOSTNAME || location.hostname;",
          "20:   ws.onmessage = function(event) {",
          "21:     var data = JSON.parse(event.data);",
          "",
          "[Removed Lines]",
          "19:   var ws = new WebSocket('ws://' + hostname + ':' + process.env.HMR_PORT + '/');",
          "",
          "[Added Lines]",
          "19:   var protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';",
          "20:   var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17cf3be219178c5334522957d2191116bd2d3617",
      "candidate_info": {
        "commit_hash": "17cf3be219178c5334522957d2191116bd2d3617",
        "repo": "parcel-bundler/parcel",
        "commit_url": "https://github.com/parcel-bundler/parcel/commit/17cf3be219178c5334522957d2191116bd2d3617",
        "files": [
          "packages/core/parcel-bundler/src/HMRServer.js"
        ],
        "message": "close hmr server when HMRServer.stop() is called (#1079)",
        "before_after_code_files": [
          "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ],
          "candidate": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js": [
          "File: packages/core/parcel-bundler/src/HMRServer.js -> packages/core/parcel-bundler/src/HMRServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class HMRServer {",
          "10:   async start(options = {}) {",
          "11:     await new Promise(async resolve => {",
          "13:       if (!options.https) {",
          "15:       } else if (typeof options.https === 'boolean') {",
          "17:       } else {",
          "19:       }",
          "23:     });",
          "25:     this.wss.on('connection', ws => {",
          "",
          "[Removed Lines]",
          "12:       let server;",
          "14:         server = http.createServer();",
          "16:         server = https.createServer(generateCertificate(options));",
          "18:         server = https.createServer(await getCertificate(options.https));",
          "21:       this.wss = new WebSocket.Server({server});",
          "22:       server.listen(options.hmrPort, resolve);",
          "",
          "[Added Lines]",
          "13:         this.server = http.createServer();",
          "15:         this.server = https.createServer(generateCertificate(options));",
          "17:         this.server = https.createServer(await getCertificate(options.https));",
          "20:       this.wss = new WebSocket.Server({server: this.server});",
          "21:       this.server.listen(options.hmrPort, resolve);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   stop() {",
          "38:     this.wss.close();",
          "39:   }",
          "41:   emitError(err) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     this.server.close();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3dab8dc4fc9bfca97a8cb3341cbaa14d3a489e2e",
      "candidate_info": {
        "commit_hash": "3dab8dc4fc9bfca97a8cb3341cbaa14d3a489e2e",
        "repo": "parcel-bundler/parcel",
        "commit_url": "https://github.com/parcel-bundler/parcel/commit/3dab8dc4fc9bfca97a8cb3341cbaa14d3a489e2e",
        "files": [
          "packages/core/parcel-bundler/src/Bundler.js",
          "packages/core/parcel-bundler/src/HMRServer.js",
          "packages/core/parcel-bundler/src/cli.js"
        ],
        "message": "feat(hmr-ws-port): adds ability to explicitly set hmr ws port (#450)\n\n* feat(hmr-ws-port): adds ability to explicitly set hmr ws port\n\n* fix(conflict): fix merge conflict\n\n* fix(hmr-ws-port): change args, misc cleanup\n\n* fix(hmr-ws-port): add args to cli",
        "before_after_code_files": [
          "packages/core/parcel-bundler/src/Bundler.js||packages/core/parcel-bundler/src/Bundler.js",
          "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js",
          "packages/core/parcel-bundler/src/cli.js||packages/core/parcel-bundler/src/cli.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ],
          "candidate": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/parcel-bundler/src/Bundler.js||packages/core/parcel-bundler/src/Bundler.js": [
          "File: packages/core/parcel-bundler/src/Bundler.js -> packages/core/parcel-bundler/src/Bundler.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         typeof options.minify === 'boolean' ? options.minify : isProduction,",
          "65:       hmr: typeof options.hmr === 'boolean' ? options.hmr : watch,",
          "66:       logLevel: typeof options.logLevel === 'number' ? options.logLevel : 3,",
          "68:     };",
          "69:   }",
          "",
          "[Removed Lines]",
          "67:       mainFile: this.mainFile",
          "",
          "[Added Lines]",
          "67:       mainFile: this.mainFile,",
          "68:       hmrPort: options.hmrPort || 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:     if (this.options.hmr) {",
          "193:       this.hmr = new HMRServer();",
          "195:     }",
          "196:   }",
          "",
          "[Removed Lines]",
          "194:       this.options.hmrPort = await this.hmr.start();",
          "",
          "[Added Lines]",
          "195:       this.options.hmrPort = await this.hmr.start(this.options.hmrPort);",
          "",
          "---------------"
        ],
        "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js": [
          "File: packages/core/parcel-bundler/src/HMRServer.js -> packages/core/parcel-bundler/src/HMRServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const prettyError = require('./utils/prettyError');",
          "4: class HMRServer {",
          "6:     await new Promise(resolve => {",
          "8:     });",
          "10:     this.wss.on('connection', ws => {",
          "",
          "[Removed Lines]",
          "5:   async start() {",
          "7:       this.wss = new WebSocket.Server({port: 0}, resolve);",
          "",
          "[Added Lines]",
          "5:   async start(port) {",
          "7:       this.wss = new WebSocket.Server({port}, resolve);",
          "",
          "---------------"
        ],
        "packages/core/parcel-bundler/src/cli.js||packages/core/parcel-bundler/src/cli.js": [
          "File: packages/core/parcel-bundler/src/cli.js -> packages/core/parcel-bundler/src/cli.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     'set the port to serve on. defaults to 1234',",
          "14:     parseInt",
          "15:   )",
          "16:   .option('--https', 'serves files over HTTPS')",
          "17:   .option('-o, --open', 'automatically open in default browser')",
          "18:   .option(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:   .option(",
          "17:     '-h, --hmr-port <port>',",
          "18:     'set the port to serve HMR websockets, defaults to random',",
          "19:     parseInt",
          "20:   )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86e40df386215c5f7928344f23adda9769f7c0c0",
      "candidate_info": {
        "commit_hash": "86e40df386215c5f7928344f23adda9769f7c0c0",
        "repo": "parcel-bundler/parcel",
        "commit_url": "https://github.com/parcel-bundler/parcel/commit/86e40df386215c5f7928344f23adda9769f7c0c0",
        "files": [
          "packages/core/parcel-bundler/src/Bundler.js",
          "packages/core/parcel-bundler/src/HMRServer.js"
        ],
        "message": "Fix port issue with HMR server on Node v6\n\nPort wasn\u2019t available until after server started.",
        "before_after_code_files": [
          "packages/core/parcel-bundler/src/Bundler.js||packages/core/parcel-bundler/src/Bundler.js",
          "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ],
          "candidate": [
            "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/parcel-bundler/src/Bundler.js||packages/core/parcel-bundler/src/Bundler.js": [
          "File: packages/core/parcel-bundler/src/Bundler.js -> packages/core/parcel-bundler/src/Bundler.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     try {",
          "118:       if (isInitialBundle) {",
          "",
          "[Removed Lines]",
          "115:       this.start();",
          "",
          "[Added Lines]",
          "115:       await this.start();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     }",
          "145:   }",
          "148:     if (this.farm) {",
          "149:       return;",
          "150:     }",
          "",
          "[Removed Lines]",
          "147:   start() {",
          "",
          "[Added Lines]",
          "147:   async start() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:     if (this.options.hmr) {",
          "161:       this.hmr = new HMRServer;",
          "163:     }",
          "164:   }",
          "",
          "[Removed Lines]",
          "162:       this.options.hmrPort = this.hmr.port;",
          "",
          "[Added Lines]",
          "162:       this.options.hmrPort = await this.hmr.start();",
          "",
          "---------------"
        ],
        "packages/core/parcel-bundler/src/HMRServer.js||packages/core/parcel-bundler/src/HMRServer.js": [
          "File: packages/core/parcel-bundler/src/HMRServer.js -> packages/core/parcel-bundler/src/HMRServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const WebSocket = require('ws');",
          "3: class HMRServer {",
          "7:   }",
          "9:   stop() {",
          "",
          "[Removed Lines]",
          "4:   constructor() {",
          "5:     this.wss = new WebSocket.Server({port: 0});",
          "6:     this.port = this.wss._server.address().port;",
          "",
          "[Added Lines]",
          "4:   async start() {",
          "5:     await new Promise((resolve) => {",
          "6:       this.wss = new WebSocket.Server({port: 0}, resolve);",
          "7:     });",
          "9:     return this.wss._server.address().port;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92b5c0830662f8baebc6fd4eadfd5ddd3de963a3",
      "candidate_info": {
        "commit_hash": "92b5c0830662f8baebc6fd4eadfd5ddd3de963a3",
        "repo": "parcel-bundler/parcel",
        "commit_url": "https://github.com/parcel-bundler/parcel/commit/92b5c0830662f8baebc6fd4eadfd5ddd3de963a3",
        "files": [
          "src/HMRServer.js"
        ],
        "message": "fix security vuln (#1794)",
        "before_after_code_files": [
          "src/HMRServer.js||src/HMRServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/HMRServer.js||src/HMRServer.js": [
          "File: src/HMRServer.js -> src/HMRServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         this.server = https.createServer(await getCertificate(options.https));",
          "18:       }",
          "21:       this.server.listen(options.hmrPort, resolve);",
          "22:     });",
          "",
          "[Removed Lines]",
          "20:       this.wss = new WebSocket.Server({server: this.server});",
          "",
          "[Added Lines]",
          "20:       let websocketOptions = {",
          "21:         server: this.server",
          "22:       };",
          "24:       if (options.hmrHostname) {",
          "25:         websocketOptions.origin = `${options.https ? 'https' : 'http'}://${",
          "26:           options.hmrHostname",
          "27:         }`;",
          "28:       }",
          "30:       this.wss = new WebSocket.Server(websocketOptions);",
          "",
          "---------------"
        ]
      }
    }
  ]
}