{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49ca7b05d4a3d7fce6554b59fba32d50546dc297",
      "candidate_info": {
        "commit_hash": "49ca7b05d4a3d7fce6554b59fba32d50546dc297",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/49ca7b05d4a3d7fce6554b59fba32d50546dc297",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ],
        "message": "PDFBOX-4421: pull up protection policy and computing version number, because it will be used by both security handlers, as suggested by Christian Appl\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881827 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     private static final String SUBFILTER4 = \"adbe.pkcs7.s4\";",
          "84:     private static final String SUBFILTER5 = \"adbe.pkcs7.s5\";",
          "",
          "[Removed Lines]",
          "86:     private PublicKeyProtectionPolicy policy = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     {",
          "104:     }",
          "",
          "[Removed Lines]",
          "100:     public PublicKeySecurityHandler(PublicKeyProtectionPolicy p)",
          "102:         policy = p;",
          "103:         this.keyLength = policy.getEncryptionKeyLength();",
          "",
          "[Added Lines]",
          "98:     public PublicKeySecurityHandler(PublicKeyProtectionPolicy publicKeyProtectionPolicy)",
          "100:         setProtectionPolicy(publicKeyProtectionPolicy);",
          "101:         this.keyLength = publicKeyProtectionPolicy.getEncryptionKeyLength();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:         }",
          "412:     }",
          "437:     private void prepareEncryptionDictAES(PDEncryption encryptionDictionary, COSName aesVName, byte[][] recipients)",
          "438:     {",
          "439:         PDCryptFilterDictionary cryptFilterDictionary = new PDCryptFilterDictionary();",
          "",
          "[Removed Lines]",
          "422:     private int computeVersionNumber()",
          "423:     {",
          "424:         switch (keyLength)",
          "425:         {",
          "426:             case 40:",
          "427:                 return 1;",
          "428:             case 128:",
          "429:                 return 4; // prefer AES",
          "430:             case 256:",
          "431:                 return 5;",
          "432:             default:",
          "433:                 throw new IllegalArgumentException(\"key length must be 40, 128 or 256\");",
          "434:         }",
          "435:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "456:     private byte[][] computeRecipientsField(byte[] seed) throws GeneralSecurityException, IOException",
          "457:     {",
          "460:         int i = 0;",
          "462:         while(it.hasNext())",
          "",
          "[Removed Lines]",
          "458:         byte[][] recipientsField = new byte[policy.getNumberOfRecipients()][];",
          "459:         Iterator<PublicKeyRecipient> it = policy.getRecipientsIterator();",
          "",
          "[Added Lines]",
          "433:         PublicKeyProtectionPolicy protectionPolicy = (PublicKeyProtectionPolicy) getProtectionPolicy();",
          "434:         byte[][] recipientsField = new byte[protectionPolicy.getNumberOfRecipients()][];",
          "435:         Iterator<PublicKeyRecipient> it = protectionPolicy.getRecipientsIterator();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:         RecipientIdentifier recipientId = new RecipientIdentifier(serial);",
          "576:         return new KeyTransRecipientInfo(recipientId, algorithmId, octets);",
          "577:     }",
          "587: }",
          "",
          "[Removed Lines]",
          "582:     @Override",
          "583:     public boolean hasProtectionPolicy()",
          "584:     {",
          "585:         return policy != null;",
          "586:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     private boolean useAES;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     private ProtectionPolicy protectionPolicy = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710: }",
          "",
          "[Removed Lines]",
          "709:     public abstract boolean hasProtectionPolicy();",
          "",
          "[Added Lines]",
          "711:     public boolean hasProtectionPolicy()",
          "712:     {",
          "713:         return protectionPolicy != null;",
          "714:     }",
          "721:     protected ProtectionPolicy getProtectionPolicy()",
          "722:     {",
          "723:         return protectionPolicy;",
          "724:     }",
          "730:     protected void setProtectionPolicy(ProtectionPolicy protectionPolicy)",
          "731:     {",
          "732:         this.protectionPolicy = protectionPolicy;",
          "733:     }",
          "745:     protected int computeVersionNumber()",
          "746:     {",
          "747:         if (keyLength == 40)",
          "748:         {",
          "749:             return 1;",
          "750:         }",
          "751:         else if (keyLength == 128 && protectionPolicy.isPreferAES())",
          "752:         {",
          "753:             return 4;",
          "754:         }",
          "755:         else if (keyLength == 256)",
          "756:         {",
          "757:             return 5;",
          "758:         }",
          "759:         return 2;",
          "760:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     private static final String[] HASHES_2B = new String[] {\"SHA-256\", \"SHA-384\", \"SHA-512\"};",
          "",
          "[Removed Lines]",
          "77:     private static final int DEFAULT_VERSION = 1;",
          "79:     private StandardProtectionPolicy policy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     {",
          "122:     }",
          "",
          "[Removed Lines]",
          "93:     public StandardSecurityHandler(StandardProtectionPolicy p)",
          "95:         policy = p;",
          "96:         keyLength = policy.getEncryptionKeyLength();",
          "97:     }",
          "106:     private int computeVersionNumber()",
          "107:     {",
          "108:         if(keyLength == 40)",
          "109:         {",
          "110:             return DEFAULT_VERSION;",
          "111:         }",
          "112:         else if (keyLength == 128 && policy.isPreferAES())",
          "113:         {",
          "114:             return 4;",
          "115:         }",
          "116:         else if (keyLength == 256)",
          "117:         {",
          "118:             return 5;",
          "119:         }",
          "121:         return 2;",
          "",
          "[Added Lines]",
          "89:     public StandardSecurityHandler(StandardProtectionPolicy standardProtectionPolicy)",
          "91:         setProtectionPolicy(standardProtectionPolicy);",
          "92:         keyLength = standardProtectionPolicy.getEncryptionKeyLength();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     private int computeRevisionNumber(int version)",
          "134:     {",
          "136:         {",
          "137:             return 2;",
          "138:         }",
          "",
          "[Removed Lines]",
          "135:         if(version < 2 && !policy.getPermissions().hasAnyRevision3PermissionSet())",
          "",
          "[Added Lines]",
          "106:         StandardProtectionPolicy protectionPolicy = (StandardProtectionPolicy) getProtectionPolicy();",
          "107:         AccessPermission permissions = protectionPolicy.getPermissions();",
          "108:         if (version < 2 && !permissions.hasAnyRevision3PermissionSet())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:         {",
          "146:             return 4;",
          "147:         }",
          "149:         {",
          "150:             return 3;",
          "151:         }",
          "",
          "[Removed Lines]",
          "148:         if ( version == 2 || version == 3 || policy.getPermissions().hasAnyRevision3PermissionSet())",
          "",
          "[Added Lines]",
          "121:         if (version == 2 || version == 3 || permissions.hasAnyRevision3PermissionSet())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "373:         encryptionDictionary.setRevision(revision);",
          "374:         encryptionDictionary.setLength(keyLength);",
          "378:         if( ownerPassword == null )",
          "379:         {",
          "380:             ownerPassword = \"\";",
          "",
          "[Removed Lines]",
          "376:         String ownerPassword = policy.getOwnerPassword();",
          "377:         String userPassword = policy.getUserPassword();",
          "",
          "[Added Lines]",
          "349:         StandardProtectionPolicy protectionPolicy = (StandardProtectionPolicy) getProtectionPolicy();",
          "350:         String ownerPassword = protectionPolicy.getOwnerPassword();",
          "351:         String userPassword = protectionPolicy.getUserPassword();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "390:             ownerPassword = userPassword;",
          "391:         }",
          "395:         encryptionDictionary.setPermissions(permissionInt);",
          "",
          "[Removed Lines]",
          "393:         int permissionInt = policy.getPermissions().getPermissionBytes();",
          "",
          "[Added Lines]",
          "367:         int permissionInt = protectionPolicy.getPermissions().getPermissionBytes();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1202:         {",
          "1203:         }",
          "1204:     }",
          "1214: }",
          "",
          "[Removed Lines]",
          "1209:     @Override",
          "1210:     public boolean hasProtectionPolicy()",
          "1211:     {",
          "1212:         return policy != null;",
          "1213:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24077d27983a58d2921c931800c53c9e16737fab",
      "candidate_info": {
        "commit_hash": "24077d27983a58d2921c931800c53c9e16737fab",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/24077d27983a58d2921c931800c53c9e16737fab",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"
        ],
        "message": "PDFBOX-3017: warn about DSS changes, don't stop\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882863 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java||examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java||examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         int accessPermissions = SigUtils.getMDPPermission(doc);",
          "117:         if (accessPermissions == 1)",
          "118:         {",
          "121:         }",
          "122:         document = doc;",
          "123:         doValidation(inFile.getAbsolutePath(), fos);",
          "",
          "[Removed Lines]",
          "119:             throw new IllegalStateException(",
          "120:                     \"No changes to the document are permitted due to DocMDP transform parameters dictionary\");",
          "",
          "[Added Lines]",
          "119:             System.out.println(\"PDF is certified to forbid changes, \"",
          "120:                         + \"some readers may report the document as invalid despite that \"",
          "121:                         + \"the PDF specification allows DSS additions\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32f5cbb7a93fc384395934c07f80c9bedac7a1cf",
      "candidate_info": {
        "commit_hash": "32f5cbb7a93fc384395934c07f80c9bedac7a1cf",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/32f5cbb7a93fc384395934c07f80c9bedac7a1cf",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java"
        ],
        "message": "PDFBOX-5200: cache pageTree, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890163 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java||pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java||pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java -> pdfbox/src/main/java/org/apache/pdfbox/printing/PDFPrintable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import java.io.IOException;",
          "32: import org.apache.pdfbox.pdmodel.PDDocument;",
          "33: import org.apache.pdfbox.pdmodel.PDPage;",
          "34: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "35: import org.apache.pdfbox.rendering.PDFRenderer;",
          "36: import org.apache.pdfbox.rendering.RenderDestination;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.pdfbox.pdmodel.PDPageTree;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: public final class PDFPrintable implements Printable",
          "44: {",
          "46:     private final PDFRenderer renderer;",
          "48:     private final boolean showPageBorder;",
          "",
          "[Removed Lines]",
          "45:     private final PDDocument document;",
          "",
          "[Added Lines]",
          "46:     private final PDPageTree pageTree;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     public PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi,",
          "130:                         boolean center, PDFRenderer renderer)",
          "131:     {",
          "133:         this.renderer = renderer;",
          "134:         this.scaling = scaling;",
          "135:         this.showPageBorder = showPageBorder;",
          "",
          "[Removed Lines]",
          "132:         this.document = document;",
          "",
          "[Added Lines]",
          "133:         this.pageTree = document.getPages();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:     public int print(Graphics graphics, PageFormat pageFormat, int pageIndex)",
          "192:             throws PrinterException",
          "193:     {",
          "195:         {",
          "196:             return NO_SUCH_PAGE;",
          "197:         }",
          "",
          "[Removed Lines]",
          "194:         if (pageIndex < 0 || pageIndex >= document.getNumberOfPages())",
          "",
          "[Added Lines]",
          "195:         if (pageIndex < 0 || pageIndex >= pageTree.getCount())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:         {",
          "200:             Graphics2D graphics2D = (Graphics2D)graphics;",
          "203:             PDRectangle cropBox = getRotatedCropBox(page);",
          "",
          "[Removed Lines]",
          "202:             PDPage page = document.getPage(pageIndex);",
          "",
          "[Added Lines]",
          "203:             PDPage page = pageTree.get(pageIndex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7405e9d0df07828df030675de0cd195a7b63f90c",
      "candidate_info": {
        "commit_hash": "7405e9d0df07828df030675de0cd195a7b63f90c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7405e9d0df07828df030675de0cd195a7b63f90c",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java"
        ],
        "message": "PDFBOX-5138: rename method\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887969 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestEmbeddedFiles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     @Test",
          "43:     {",
          "44:         String outputFile = \"target/test-output/EmbeddedFile.pdf\";",
          "45:         String embeddedFile = \"target/test-output/test.txt\";",
          "",
          "[Removed Lines]",
          "42:     public void TestEmbeddedFiles() throws IOException",
          "",
          "[Added Lines]",
          "42:     public void testEmbeddedFiles() throws IOException",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eef31a9d0de2db32305894d2cd86701710918064",
      "candidate_info": {
        "commit_hash": "eef31a9d0de2db32305894d2cd86701710918064",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/eef31a9d0de2db32305894d2cd86701710918064",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java"
        ],
        "message": "PDFBOX-4892: fix comment, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889927 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/measurement/PDNumberFormatDictionary.java"
        ]
      }
    }
  ]
}