{
  "cve_id": "CVE-2022-0333",
  "cve_desc": "A flaw was found in Moodle in versions 3.11 to 3.11.4, 3.10 to 3.10.8, 3.9 to 3.9.11 and earlier unsupported versions. The calendar:manageentries capability allowed managers to access or modify any calendar event, but should have been restricted from accessing user level events.",
  "repo": "moodle/moodle",
  "patch_hash": "2ee27313cea0d7073f5a6a35eccdfddcb3a9adad",
  "patch_info": {
    "commit_hash": "2ee27313cea0d7073f5a6a35eccdfddcb3a9adad",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/2ee27313cea0d7073f5a6a35eccdfddcb3a9adad",
    "files": [
      "calendar/externallib.php",
      "calendar/lib.php",
      "calendar/tests/events_test.php",
      "calendar/tests/externallib_test.php",
      "calendar/tests/lib_test.php",
      "calendar/upgrade.txt",
      "lang/en/error.php"
    ],
    "message": "MDL-71239 calendar: disallow manager role users edit user events",
    "before_after_code_files": [
      "calendar/externallib.php||calendar/externallib.php",
      "calendar/lib.php||calendar/lib.php",
      "calendar/tests/events_test.php||calendar/tests/events_test.php",
      "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
      "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
      "lang/en/error.php||lang/en/error.php"
    ]
  },
  "patch_diff": {
    "calendar/externallib.php||calendar/externallib.php": [
      "File: calendar/externallib.php -> calendar/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "815:         $warnings = array();",
      "817:         $eventvault = event_container::get_event_vault();",
      "819:             $mapper = event_container::get_event_mapper();",
      "820:             if (!calendar_view_event_allowed($mapper->from_event_to_legacy_event($event))) {",
      "822:             }",
      "823:         }",
      "",
      "[Removed Lines]",
      "818:         if ($event = $eventvault->get_event_by_id($eventid)) {",
      "821:                 $event = null;",
      "",
      "[Added Lines]",
      "818:         if ($event = $eventvault->get_event_by_id($params['eventid'])) {",
      "821:                 throw new moodle_exception('nopermissiontoviewcalendar', 'error');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "828:             $syscontext = context_system::instance();",
      "830:         }",
      "832:         $cache = new events_related_objects_cache([$event]);",
      "",
      "[Removed Lines]",
      "829:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermission', '');",
      "",
      "[Added Lines]",
      "829:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermissions', 'error');",
      "",
      "---------------"
    ],
    "calendar/lib.php||calendar/lib.php": [
      "File: calendar/lib.php -> calendar/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "2181:     return array($courses, $group, $userid);",
      "2182: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2190: function calendar_can_manage_non_user_event_in_system($event) {",
      "2191:     $sitecontext = \\context_system::instance();",
      "2192:     $isuserevent = $event->eventtype == 'user';",
      "2193:     $canmanageentries = has_capability('moodle/calendar:manageentries', $sitecontext);",
      "2195:     if ($canmanageentries && !$isuserevent) {",
      "2196:         return true;",
      "2197:     }",
      "2199:     return false;",
      "2200: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2195:         return true;",
      "2196:     }",
      "2202:         return true;",
      "2203:     }",
      "",
      "[Removed Lines]",
      "2199:     $sitecontext = \\context_system::instance();",
      "2201:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
      "",
      "[Added Lines]",
      "2216:     if (calendar_can_manage_non_user_event_in_system($event)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2255:         return can_access_course(get_course($event->courseid));",
      "2256:     } else if ($event->userid) {",
      "2262:     } else {",
      "2263:         throw new moodle_exception('unknown event type');",
      "2264:     }",
      "",
      "[Removed Lines]",
      "2257:         if ($event->userid != $USER->id) {",
      "2259:             return false;",
      "2260:         }",
      "2261:         return true;",
      "",
      "[Added Lines]",
      "2272:         return calendar_can_manage_user_event($event);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2331:         }",
      "2332:     }",
      "2338:         return true;",
      "2339:     }",
      "",
      "[Removed Lines]",
      "2334:     $sitecontext = \\context_system::instance();",
      "2337:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
      "",
      "[Added Lines]",
      "2345:     if (calendar_can_manage_non_user_event_in_system($event)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2359:         return (has_capability('moodle/calendar:manageownentries', $event->context));",
      "2360:     } else if (!empty($event->userid)) {",
      "2362:     }",
      "2364:     return false;",
      "",
      "[Removed Lines]",
      "2361:         return (has_capability('moodle/calendar:manageentries', $event->context));",
      "",
      "[Added Lines]",
      "2369:         return calendar_can_manage_user_event($event);",
      "2370:     }",
      "2372:     return false;",
      "2373: }",
      "2381: function calendar_can_manage_user_event($event): bool {",
      "2382:     global $USER;",
      "2384:     if (!($event instanceof \\calendar_event)) {",
      "2385:         $event = new \\calendar_event(clone($event));",
      "2386:     }",
      "2388:     $canmanage = has_capability('moodle/calendar:manageentries', $event->context);",
      "2389:     $canmanageown = has_capability('moodle/calendar:manageownentries', $event->context);",
      "2390:     $ismyevent = $event->userid == $USER->id;",
      "2391:     $isadminevent = is_siteadmin($event->userid);",
      "2393:     if ($canmanageown && $ismyevent) {",
      "2394:         return true;",
      "2395:     }",
      "2399:     if ($canmanage && !$isadminevent) {",
      "2400:         return true;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2670:         return false;",
      "2671:     }",
      "2677:         return true;",
      "2678:     }",
      "",
      "[Removed Lines]",
      "2673:     $sitecontext = \\context_system::instance();",
      "2676:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
      "",
      "[Added Lines]",
      "2712:     if (calendar_can_manage_non_user_event_in_system($event)) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2692:                     (has_capability('moodle/calendar:managegroupentries', $event->context)",
      "2693:                         && groups_is_member($event->groupid)));",
      "2694:         case 'user':",
      "2699:         case 'site':",
      "2700:             return has_capability('moodle/calendar:manageentries', $event->context);",
      "2701:         default:",
      "",
      "[Removed Lines]",
      "2695:             if ($event->userid == $USER->id) {",
      "2696:                 return (has_capability('moodle/calendar:manageownentries', $event->context));",
      "2697:             }",
      "",
      "[Added Lines]",
      "2731:             return calendar_can_manage_user_event($event);",
      "",
      "---------------"
    ],
    "calendar/tests/events_test.php||calendar/tests/events_test.php": [
      "File: calendar/tests/events_test.php -> calendar/tests/events_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:     public function test_calendar_event_updated_toggle_visibility() {",
      "228:         $this->resetAfterTest();",
      "",
      "[Removed Lines]",
      "226:         global $DB, $SITE;",
      "",
      "[Added Lines]",
      "226:         global $DB;",
      "227:         $siteid = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:         $event = $events[0];",
      "243:         $this->assertInstanceOf('\\core\\event\\calendar_event_updated', $event);",
      "244:         $this->assertEquals('event', $event->objecttable);",
      "246:         $this->assertEquals($calevent->context, $event->get_context());",
      "249:         $this->assertEventLegacyLogData($expectedlog, $event);",
      "250:         $other = array('repeatid' => 0, 'timestart' => $time, 'name' => 'Some wickedly awesome event yo!');",
      "251:         $this->assertEquals($other, $event->other);",
      "",
      "[Removed Lines]",
      "245:         $this->assertEquals($SITE->id, $event->courseid);",
      "247:         $expectedlog = array($SITE->id, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id ,",
      "248:             $calevent->name);",
      "",
      "[Added Lines]",
      "246:         $this->assertEquals($siteid, $event->courseid);",
      "248:         $expectedlog = [$siteid, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id , $calevent->name];",
      "",
      "---------------"
    ],
    "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
      "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:             }",
      "105:         }",
      "106:         if (!isset($prop->courseid)) {",
      "108:         }",
      "",
      "[Removed Lines]",
      "107:             $prop->courseid = $SITE->id;",
      "",
      "[Added Lines]",
      "108:             if ($type === 'user') {",
      "110:                 $prop->courseid = 0;",
      "111:             } else {",
      "113:                 $prop->courseid = $SITE->id;",
      "114:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202:         $record = new stdClass();",
      "203:         $record->courseid = $course->id;",
      "204:         $courseevent = $this->create_calendar_event('course', $USER->id, 'course', 3, time(), $record);",
      "206:         $record = new stdClass();",
      "207:         $record->courseid = $course->id;",
      "208:         $record->groupid = $group->id;",
      "",
      "[Removed Lines]",
      "205:         $userevent = $this->create_calendar_event('user', $USER->id);",
      "",
      "[Added Lines]",
      "212:         $userevent = $this->create_calendar_event('user', $user->id);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1977:         $this->resetAfterTest(true);",
      "1978:         $this->setUser($user);",
      "1982:         external_api::clean_returnvalue(",
      "1983:             core_calendar_external::submit_create_update_form_returns(),",
      "1984:             core_calendar_external::submit_create_update_form($querystring)",
      "",
      "[Removed Lines]",
      "1980:         $this->expectException('moodle_exception');",
      "",
      "[Added Lines]",
      "1987:         $this->expectException(moodle_exception::class);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2780:         $this->assertEquals($data['event']['id'], $courseevent->id);",
      "2782:         $this->setUser($user2);",
      "2784:         $data = external_api::clean_returnvalue(",
      "2785:             core_calendar_external::get_calendar_event_by_id_returns(),",
      "2786:             core_calendar_external::get_calendar_event_by_id($courseevent->id)",
      "2787:         );",
      "2788:     }",
      "",
      "[Removed Lines]",
      "2783:         $this->expectException('required_capability_exception');",
      "",
      "[Added Lines]",
      "2789:         $this->expectException(moodle_exception::class);",
      "2801:     public function test_get_calendar_event_by_id_prevent_read_other_users_events_data_provider(): array {",
      "2802:         $syscontext = context_system::instance();",
      "2803:         $managerrole = 'manager';",
      "2804:         return [",
      "2805:             [true, false, $syscontext, $managerrole, true],",
      "2806:             [false, false, $syscontext, $managerrole, false],",
      "2807:             [false, false, null, null, true],",
      "2808:             [false, true, null, null, false],",
      "2809:         ];",
      "2810:     }",
      "2824:     public function test_get_calendar_event_by_id_prevent_read_other_users_events(",
      "2825:             bool $isadminevent, bool $isadmin, ?stdClass $readerrolecontext,",
      "2826:             ?string $readerrolename, bool $expectexception) {",
      "2827:         global $USER, $DB;",
      "2829:         $this->resetAfterTest();",
      "2830:         $generator = $this->getDataGenerator();",
      "2832:         if ($isadminevent) {",
      "2833:             $this->setAdminUser();",
      "2834:         } else {",
      "2835:             $user = $generator->create_user();",
      "2836:             $this->setUser($user);",
      "2837:         }",
      "2838:         $userevent = $this->create_calendar_event('user event', $USER->id, 'user', 0, time());",
      "2839:         $results = external_api::clean_returnvalue(",
      "2840:             core_calendar_external::get_calendar_event_by_id_returns(),",
      "2841:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
      "2842:         );",
      "2843:         $event = reset($results);",
      "2844:         $this->assertEquals($userevent->id, $event['id']);",
      "2846:         if ($isadmin) {",
      "2847:             $this->setAdminUser();",
      "2848:         } else {",
      "2849:             $reader = $generator->create_user();",
      "2850:             if ($readerrolename && $readerrolecontext) {",
      "2851:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $readerrolename]);",
      "2852:                 role_assign($managerroleid, $reader->id, $readerrolecontext->id);",
      "2853:             }",
      "2854:             $this->setUser($reader);",
      "2855:         }",
      "2857:         if ($expectexception) {",
      "2859:             $this->expectException(moodle_exception::class);",
      "2860:         }",
      "2861:         external_api::clean_returnvalue(",
      "2862:             core_calendar_external::get_calendar_event_by_id_returns(),",
      "2863:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
      "2864:         );",
      "2865:     }",
      "2872:     public function test_edit_or_delete_other_users_events_data_provider(): array {",
      "2873:         $syscontext = context_system::instance();",
      "2874:         $managerrole = 'manager';",
      "2875:         return [",
      "2876:             [false, false, $syscontext, $managerrole, false],",
      "2877:             [false, true, $syscontext, $managerrole, true],",
      "2878:             [false, false, null, null, true],",
      "2879:             [true, false, null, null, false],",
      "2880:         ];",
      "2881:     }",
      "2894:     public function test_delete_other_users_events(bool $isadmin, bool $isadminevent,",
      "2895:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
      "2896:         global $DB, $USER;",
      "2898:         $this->resetAfterTest();",
      "2899:         $generator = $this->getDataGenerator();",
      "2901:         if ($isadminevent) {",
      "2902:             $this->setAdminUser();",
      "2903:             $user = $USER;",
      "2904:         } else {",
      "2905:             $user = $generator->create_user();",
      "2906:             $this->setUser($user);",
      "2907:         }",
      "2908:         $userevent = $this->create_calendar_event('user event', $user->id, 'user', 0, time());",
      "2910:         if ($isadmin) {",
      "2911:             $this->setAdminUser();",
      "2912:         } else {",
      "2913:             $writer = $generator->create_user();",
      "2914:             if ($writerrolename && $writerrolecontext) {",
      "2915:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
      "2916:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
      "2917:             }",
      "2918:             $this->setUser($writer);",
      "2919:         }",
      "2921:         if ($expectexception) {",
      "2922:             $this->expectException(moodle_exception::class);",
      "2923:         }",
      "2924:         $events = [",
      "2925:             ['eventid' => $userevent->id, 'repeat' => 0]",
      "2926:         ];",
      "2927:         core_calendar_external::delete_calendar_events($events);",
      "2928:     }",
      "2941:     public function test_edit_other_users_events(bool $isadmin, bool $isadminevent,",
      "2942:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
      "2943:         global $DB, $USER;",
      "2945:         $this->resetAfterTest();",
      "2947:         $generator = $this->getDataGenerator();",
      "2948:         if ($isadminevent) {",
      "2949:             $this->setAdminUser();",
      "2950:             $user = $USER;",
      "2951:         } else {",
      "2952:             $user = $generator->create_user();",
      "2953:         }",
      "2955:         $formdata = [",
      "2956:             'id' => 0,",
      "2957:             'userid' => $user->id,",
      "2958:             'modulename' => '',",
      "2959:             'instance' => 0,",
      "2960:             'visible' => 1,",
      "2961:             'eventtype' => 'user',",
      "2962:             'name' => 'Test',",
      "2963:             'timestart' => [",
      "2964:                 'day' => 1,",
      "2965:                 'month' => 1,",
      "2966:                 'year' => 2021,",
      "2967:                 'hour' => 1,",
      "2968:                 'minute' => 0,",
      "2969:             ],",
      "2970:             'description' => [",
      "2971:                 'text' => 'xxxxx',",
      "2972:                 'format' => 1,",
      "2973:                 'itemid' => 0",
      "2974:             ],",
      "2975:             'location' => 'Test',",
      "2976:             'duration' => 0,",
      "2977:         ];",
      "2978:         $formdata = \\core_calendar\\local\\event\\forms\\create::mock_generate_submit_keys($formdata);",
      "2980:         $querystring = http_build_query($formdata, '', '&');",
      "2982:         if ($isadmin) {",
      "2983:             $this->setAdminUser();",
      "2984:         } else {",
      "2985:             $writer = $generator->create_user();",
      "2986:             if ($writerrolename && $writerrolecontext) {",
      "2987:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
      "2988:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
      "2989:             }",
      "2990:             $this->setUser($writer);",
      "2991:         }",
      "2992:         $USER->ignoresesskey = true;",
      "2994:         if ($expectexception) {",
      "2995:             $this->expectException(moodle_exception::class);",
      "2996:         }",
      "2997:         core_calendar_external::submit_create_update_form($querystring);",
      "2998:     }",
      "",
      "---------------"
    ],
    "calendar/tests/lib_test.php||calendar/tests/lib_test.php": [
      "File: calendar/tests/lib_test.php -> calendar/tests/lib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "998:         $this->assertEquals($expected, $authtoken);",
      "999:     }",
      "1000: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1006:     public function test_calendar_can_manage_user_event() {",
      "1007:         global $DB, $USER;",
      "1008:         $generator = $this->getDataGenerator();",
      "1009:         $sitecontext = \\context_system::instance();",
      "1010:         $this->resetAfterTest();",
      "1011:         $this->setAdminUser();",
      "1012:         $user1 = $generator->create_user();",
      "1013:         $user2 = $generator->create_user();",
      "1014:         $adminevent = create_event([",
      "1015:             'eventtype' => 'user',",
      "1016:             'userid' => $USER->id,",
      "1017:         ]);",
      "1019:         $this->setUser($user1);",
      "1020:         $user1event = create_event([",
      "1021:             'name' => 'user1 event',",
      "1022:             'eventtype' => 'user',",
      "1023:             'userid' => $user1->id,",
      "1024:         ]);",
      "1025:         $this->setUser($user2);",
      "1026:         $user2event = create_event([",
      "1027:             'name' => 'user2 event',",
      "1028:             'eventtype' => 'user',",
      "1029:             'userid' => $user2->id,",
      "1030:         ]);",
      "1031:         $this->setUser($user1);",
      "1032:         $result = calendar_can_manage_user_event($user1event);",
      "1033:         $this->assertEquals(true, $result);",
      "1034:         $result = calendar_can_manage_user_event($user2event);",
      "1035:         $this->assertEquals(false, $result);",
      "1037:         $sitemanager = $generator->create_user();",
      "1039:         $managerroleid = $DB->get_field('role', 'id', ['shortname' => 'manager']);",
      "1040:         role_assign($managerroleid, $sitemanager->id, $sitecontext->id);",
      "1042:         $this->setUser($sitemanager);",
      "1044:         $result = calendar_can_manage_user_event($user1event);",
      "1045:         $this->assertEquals(true, $result);",
      "1046:         $result = calendar_can_manage_user_event($adminevent);",
      "1047:         $this->assertEquals(false, $result);",
      "1048:     }",
      "",
      "---------------"
    ],
    "lang/en/error.php||lang/en/error.php": [
      "File: lang/en/error.php -> lang/en/error.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "464: $string['nopermissiontoshow'] = 'No permission to see this!';",
      "465: $string['nopermissiontounlock'] = 'No permission to unlock!';",
      "466: $string['nopermissiontoupdatecalendar'] = 'Sorry, but you do not have permission to update the calendar event.';",
      "467: $string['nopermissiontoviewgrades'] = 'Cannot view grades.';",
      "468: $string['nopermissiontoviewletergrade'] = 'Missing permission to view letter grades';",
      "469: $string['nopermissiontoviewpage'] = 'You are not allowed to look at this page';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "467: $string['nopermissiontoviewcalendar'] = 'Sorry, but you do not have permission to view the calendar event.';",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0b04d09a767e6b88ef46579df397d643a1991dd",
      "candidate_info": {
        "commit_hash": "a0b04d09a767e6b88ef46579df397d643a1991dd",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a0b04d09a767e6b88ef46579df397d643a1991dd",
        "files": [
          "calendar/externallib.php",
          "calendar/lib.php",
          "calendar/tests/events_test.php",
          "calendar/tests/externallib_test.php",
          "calendar/tests/lib_test.php",
          "calendar/upgrade.txt",
          "lang/en/error.php"
        ],
        "message": "MDL-71239 calendar: disallow manager role users edit user events",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/lib.php||calendar/lib.php",
          "calendar/tests/events_test.php||calendar/tests/events_test.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
          "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
          "lang/en/error.php||lang/en/error.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/lib.php||calendar/lib.php",
            "calendar/tests/events_test.php||calendar/tests/events_test.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
            "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
            "lang/en/error.php||lang/en/error.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/lib.php||calendar/lib.php",
            "calendar/tests/events_test.php||calendar/tests/events_test.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
            "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
            "lang/en/error.php||lang/en/error.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:         $warnings = array();",
          "805:         $eventvault = event_container::get_event_vault();",
          "807:             $mapper = event_container::get_event_mapper();",
          "808:             if (!calendar_view_event_allowed($mapper->from_event_to_legacy_event($event))) {",
          "810:             }",
          "811:         }",
          "",
          "[Removed Lines]",
          "806:         if ($event = $eventvault->get_event_by_id($eventid)) {",
          "809:                 $event = null;",
          "",
          "[Added Lines]",
          "806:         if ($event = $eventvault->get_event_by_id($params['eventid'])) {",
          "809:                 throw new moodle_exception('nopermissiontoviewcalendar', 'error');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "816:             $syscontext = context_system::instance();",
          "818:         }",
          "820:         $cache = new events_related_objects_cache([$event]);",
          "",
          "[Removed Lines]",
          "817:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermission', '');",
          "",
          "[Added Lines]",
          "817:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermissions', 'error');",
          "",
          "---------------"
        ],
        "calendar/lib.php||calendar/lib.php": [
          "File: calendar/lib.php -> calendar/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2171:     return array($courses, $group, $userid);",
          "2172: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2180: function calendar_can_manage_non_user_event_in_system($event) {",
          "2181:     $sitecontext = \\context_system::instance();",
          "2182:     $isuserevent = $event->eventtype == 'user';",
          "2183:     $canmanageentries = has_capability('moodle/calendar:manageentries', $sitecontext);",
          "2185:     if ($canmanageentries && !$isuserevent) {",
          "2186:         return true;",
          "2187:     }",
          "2189:     return false;",
          "2190: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2185:         return true;",
          "2186:     }",
          "2192:         return true;",
          "2193:     }",
          "",
          "[Removed Lines]",
          "2189:     $sitecontext = \\context_system::instance();",
          "2191:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2206:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2245:         return can_access_course(get_course($event->courseid));",
          "2246:     } else if ($event->userid) {",
          "2252:     } else {",
          "2253:         throw new moodle_exception('unknown event type');",
          "2254:     }",
          "",
          "[Removed Lines]",
          "2247:         if ($event->userid != $USER->id) {",
          "2249:             return false;",
          "2250:         }",
          "2251:         return true;",
          "",
          "[Added Lines]",
          "2262:         return calendar_can_manage_user_event($event);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2321:         }",
          "2322:     }",
          "2328:         return true;",
          "2329:     }",
          "",
          "[Removed Lines]",
          "2324:     $sitecontext = \\context_system::instance();",
          "2327:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2335:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2349:         return (has_capability('moodle/calendar:manageownentries', $event->context));",
          "2350:     } else if (!empty($event->userid)) {",
          "2352:     }",
          "2354:     return false;",
          "",
          "[Removed Lines]",
          "2351:         return (has_capability('moodle/calendar:manageentries', $event->context));",
          "",
          "[Added Lines]",
          "2359:         return calendar_can_manage_user_event($event);",
          "2360:     }",
          "2362:     return false;",
          "2363: }",
          "2371: function calendar_can_manage_user_event($event): bool {",
          "2372:     global $USER;",
          "2374:     if (!($event instanceof \\calendar_event)) {",
          "2375:         $event = new \\calendar_event(clone($event));",
          "2376:     }",
          "2378:     $canmanage = has_capability('moodle/calendar:manageentries', $event->context);",
          "2379:     $canmanageown = has_capability('moodle/calendar:manageownentries', $event->context);",
          "2380:     $ismyevent = $event->userid == $USER->id;",
          "2381:     $isadminevent = is_siteadmin($event->userid);",
          "2383:     if ($canmanageown && $ismyevent) {",
          "2384:         return true;",
          "2385:     }",
          "2389:     if ($canmanage && !$isadminevent) {",
          "2390:         return true;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2660:         return false;",
          "2661:     }",
          "2667:         return true;",
          "2668:     }",
          "",
          "[Removed Lines]",
          "2663:     $sitecontext = \\context_system::instance();",
          "2666:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2702:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2682:                     (has_capability('moodle/calendar:managegroupentries', $event->context)",
          "2683:                         && groups_is_member($event->groupid)));",
          "2684:         case 'user':",
          "2689:         case 'site':",
          "2690:             return has_capability('moodle/calendar:manageentries', $event->context);",
          "2691:         default:",
          "",
          "[Removed Lines]",
          "2685:             if ($event->userid == $USER->id) {",
          "2686:                 return (has_capability('moodle/calendar:manageownentries', $event->context));",
          "2687:             }",
          "",
          "[Added Lines]",
          "2721:             return calendar_can_manage_user_event($event);",
          "",
          "---------------"
        ],
        "calendar/tests/events_test.php||calendar/tests/events_test.php": [
          "File: calendar/tests/events_test.php -> calendar/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:     public function test_calendar_event_updated_toggle_visibility() {",
          "228:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "226:         global $DB, $SITE;",
          "",
          "[Added Lines]",
          "226:         global $DB;",
          "227:         $siteid = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:         $event = $events[0];",
          "243:         $this->assertInstanceOf('\\core\\event\\calendar_event_updated', $event);",
          "244:         $this->assertEquals('event', $event->objecttable);",
          "246:         $this->assertEquals($calevent->context, $event->get_context());",
          "249:         $this->assertEventLegacyLogData($expectedlog, $event);",
          "250:         $other = array('repeatid' => 0, 'timestart' => $time, 'name' => 'Some wickedly awesome event yo!');",
          "251:         $this->assertEquals($other, $event->other);",
          "",
          "[Removed Lines]",
          "245:         $this->assertEquals($SITE->id, $event->courseid);",
          "247:         $expectedlog = array($SITE->id, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id ,",
          "248:             $calevent->name);",
          "",
          "[Added Lines]",
          "246:         $this->assertEquals($siteid, $event->courseid);",
          "248:         $expectedlog = [$siteid, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id , $calevent->name];",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:             }",
          "105:         }",
          "106:         if (!isset($prop->courseid)) {",
          "108:         }",
          "",
          "[Removed Lines]",
          "107:             $prop->courseid = $SITE->id;",
          "",
          "[Added Lines]",
          "108:             if ($type === 'user') {",
          "110:                 $prop->courseid = 0;",
          "111:             } else {",
          "113:                 $prop->courseid = $SITE->id;",
          "114:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:         $record = new stdClass();",
          "203:         $record->courseid = $course->id;",
          "204:         $courseevent = $this->create_calendar_event('course', $USER->id, 'course', 3, time(), $record);",
          "206:         $record = new stdClass();",
          "207:         $record->courseid = $course->id;",
          "208:         $record->groupid = $group->id;",
          "",
          "[Removed Lines]",
          "205:         $userevent = $this->create_calendar_event('user', $USER->id);",
          "",
          "[Added Lines]",
          "212:         $userevent = $this->create_calendar_event('user', $user->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1806:         $this->resetAfterTest(true);",
          "1807:         $this->setUser($user);",
          "1811:         external_api::clean_returnvalue(",
          "1812:             core_calendar_external::submit_create_update_form_returns(),",
          "1813:             core_calendar_external::submit_create_update_form($querystring)",
          "",
          "[Removed Lines]",
          "1809:         $this->expectException('moodle_exception');",
          "",
          "[Added Lines]",
          "1816:         $this->expectException(moodle_exception::class);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2609:         $this->assertEquals($data['event']['id'], $courseevent->id);",
          "2611:         $this->setUser($user2);",
          "2613:         $data = external_api::clean_returnvalue(",
          "2614:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2615:             core_calendar_external::get_calendar_event_by_id($courseevent->id)",
          "2616:         );",
          "2617:     }",
          "",
          "[Removed Lines]",
          "2612:         $this->expectException('required_capability_exception');",
          "",
          "[Added Lines]",
          "2618:         $this->expectException(moodle_exception::class);",
          "2630:     public function test_get_calendar_event_by_id_prevent_read_other_users_events_data_provider(): array {",
          "2631:         $syscontext = context_system::instance();",
          "2632:         $managerrole = 'manager';",
          "2633:         return [",
          "2634:             [true, false, $syscontext, $managerrole, true],",
          "2635:             [false, false, $syscontext, $managerrole, false],",
          "2636:             [false, false, null, null, true],",
          "2637:             [false, true, null, null, false],",
          "2638:         ];",
          "2639:     }",
          "2653:     public function test_get_calendar_event_by_id_prevent_read_other_users_events(",
          "2654:             bool $isadminevent, bool $isadmin, ?stdClass $readerrolecontext,",
          "2655:             ?string $readerrolename, bool $expectexception) {",
          "2656:         global $USER, $DB;",
          "2658:         $this->resetAfterTest();",
          "2659:         $generator = $this->getDataGenerator();",
          "2661:         if ($isadminevent) {",
          "2662:             $this->setAdminUser();",
          "2663:         } else {",
          "2664:             $user = $generator->create_user();",
          "2665:             $this->setUser($user);",
          "2666:         }",
          "2667:         $userevent = $this->create_calendar_event('user event', $USER->id, 'user', 0, time());",
          "2668:         $results = external_api::clean_returnvalue(",
          "2669:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2670:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
          "2671:         );",
          "2672:         $event = reset($results);",
          "2673:         $this->assertEquals($userevent->id, $event['id']);",
          "2675:         if ($isadmin) {",
          "2676:             $this->setAdminUser();",
          "2677:         } else {",
          "2678:             $reader = $generator->create_user();",
          "2679:             if ($readerrolename && $readerrolecontext) {",
          "2680:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $readerrolename]);",
          "2681:                 role_assign($managerroleid, $reader->id, $readerrolecontext->id);",
          "2682:             }",
          "2683:             $this->setUser($reader);",
          "2684:         }",
          "2686:         if ($expectexception) {",
          "2688:             $this->expectException(moodle_exception::class);",
          "2689:         }",
          "2690:         external_api::clean_returnvalue(",
          "2691:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2692:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
          "2693:         );",
          "2694:     }",
          "2701:     public function test_edit_or_delete_other_users_events_data_provider(): array {",
          "2702:         $syscontext = context_system::instance();",
          "2703:         $managerrole = 'manager';",
          "2704:         return [",
          "2705:             [false, false, $syscontext, $managerrole, false],",
          "2706:             [false, true, $syscontext, $managerrole, true],",
          "2707:             [false, false, null, null, true],",
          "2708:             [true, false, null, null, false],",
          "2709:         ];",
          "2710:     }",
          "2723:     public function test_delete_other_users_events(bool $isadmin, bool $isadminevent,",
          "2724:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
          "2725:         global $DB, $USER;",
          "2727:         $this->resetAfterTest();",
          "2728:         $generator = $this->getDataGenerator();",
          "2730:         if ($isadminevent) {",
          "2731:             $this->setAdminUser();",
          "2732:             $user = $USER;",
          "2733:         } else {",
          "2734:             $user = $generator->create_user();",
          "2735:             $this->setUser($user);",
          "2736:         }",
          "2737:         $userevent = $this->create_calendar_event('user event', $user->id, 'user', 0, time());",
          "2739:         if ($isadmin) {",
          "2740:             $this->setAdminUser();",
          "2741:         } else {",
          "2742:             $writer = $generator->create_user();",
          "2743:             if ($writerrolename && $writerrolecontext) {",
          "2744:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
          "2745:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
          "2746:             }",
          "2747:             $this->setUser($writer);",
          "2748:         }",
          "2750:         if ($expectexception) {",
          "2751:             $this->expectException(moodle_exception::class);",
          "2752:         }",
          "2753:         $events = [",
          "2754:             ['eventid' => $userevent->id, 'repeat' => 0]",
          "2755:         ];",
          "2756:         core_calendar_external::delete_calendar_events($events);",
          "2757:     }",
          "2770:     public function test_edit_other_users_events(bool $isadmin, bool $isadminevent,",
          "2771:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
          "2772:         global $DB, $USER;",
          "2774:         $this->resetAfterTest();",
          "2776:         $generator = $this->getDataGenerator();",
          "2777:         if ($isadminevent) {",
          "2778:             $this->setAdminUser();",
          "2779:             $user = $USER;",
          "2780:         } else {",
          "2781:             $user = $generator->create_user();",
          "2782:         }",
          "2784:         $formdata = [",
          "2785:             'id' => 0,",
          "2786:             'userid' => $user->id,",
          "2787:             'modulename' => '',",
          "2788:             'instance' => 0,",
          "2789:             'visible' => 1,",
          "2790:             'eventtype' => 'user',",
          "2791:             'name' => 'Test',",
          "2792:             'timestart' => [",
          "2793:                 'day' => 1,",
          "2794:                 'month' => 1,",
          "2795:                 'year' => 2021,",
          "2796:                 'hour' => 1,",
          "2797:                 'minute' => 0,",
          "2798:             ],",
          "2799:             'description' => [",
          "2800:                 'text' => 'xxxxx',",
          "2801:                 'format' => 1,",
          "2802:                 'itemid' => 0",
          "2803:             ],",
          "2804:             'location' => 'Test',",
          "2805:             'duration' => 0,",
          "2806:         ];",
          "2807:         $formdata = \\core_calendar\\local\\event\\forms\\create::mock_generate_submit_keys($formdata);",
          "2809:         $querystring = http_build_query($formdata, '', '&');",
          "2811:         if ($isadmin) {",
          "2812:             $this->setAdminUser();",
          "2813:         } else {",
          "2814:             $writer = $generator->create_user();",
          "2815:             if ($writerrolename && $writerrolecontext) {",
          "2816:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
          "2817:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
          "2818:             }",
          "2819:             $this->setUser($writer);",
          "2820:         }",
          "2821:         $USER->ignoresesskey = true;",
          "2823:         if ($expectexception) {",
          "2824:             $this->expectException(moodle_exception::class);",
          "2825:         }",
          "2826:         core_calendar_external::submit_create_update_form($querystring);",
          "2827:     }",
          "",
          "---------------"
        ],
        "calendar/tests/lib_test.php||calendar/tests/lib_test.php": [
          "File: calendar/tests/lib_test.php -> calendar/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:         $this->assertEquals($expected, $authtoken);",
          "995:     }",
          "996: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:     public function test_calendar_can_manage_user_event() {",
          "1003:         global $DB, $USER;",
          "1004:         $generator = $this->getDataGenerator();",
          "1005:         $sitecontext = \\context_system::instance();",
          "1006:         $this->resetAfterTest();",
          "1007:         $this->setAdminUser();",
          "1008:         $user1 = $generator->create_user();",
          "1009:         $user2 = $generator->create_user();",
          "1010:         $adminevent = create_event([",
          "1011:             'eventtype' => 'user',",
          "1012:             'userid' => $USER->id,",
          "1013:         ]);",
          "1015:         $this->setUser($user1);",
          "1016:         $user1event = create_event([",
          "1017:             'name' => 'user1 event',",
          "1018:             'eventtype' => 'user',",
          "1019:             'userid' => $user1->id,",
          "1020:         ]);",
          "1021:         $this->setUser($user2);",
          "1022:         $user2event = create_event([",
          "1023:             'name' => 'user2 event',",
          "1024:             'eventtype' => 'user',",
          "1025:             'userid' => $user2->id,",
          "1026:         ]);",
          "1027:         $this->setUser($user1);",
          "1028:         $result = calendar_can_manage_user_event($user1event);",
          "1029:         $this->assertEquals(true, $result);",
          "1030:         $result = calendar_can_manage_user_event($user2event);",
          "1031:         $this->assertEquals(false, $result);",
          "1033:         $sitemanager = $generator->create_user();",
          "1035:         $managerroleid = $DB->get_field('role', 'id', ['shortname' => 'manager']);",
          "1036:         role_assign($managerroleid, $sitemanager->id, $sitecontext->id);",
          "1038:         $this->setUser($sitemanager);",
          "1040:         $result = calendar_can_manage_user_event($user1event);",
          "1041:         $this->assertEquals(true, $result);",
          "1042:         $result = calendar_can_manage_user_event($adminevent);",
          "1043:         $this->assertEquals(false, $result);",
          "1044:     }",
          "",
          "---------------"
        ],
        "lang/en/error.php||lang/en/error.php": [
          "File: lang/en/error.php -> lang/en/error.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "462: $string['nopermissiontoshow'] = 'No permission to see this!';",
          "463: $string['nopermissiontounlock'] = 'No permission to unlock!';",
          "464: $string['nopermissiontoupdatecalendar'] = 'Sorry, but you do not have permission to update the calendar event.';",
          "465: $string['nopermissiontoviewgrades'] = 'Cannot view grades.';",
          "466: $string['nopermissiontoviewletergrade'] = 'Missing permission to view letter grades';",
          "467: $string['nopermissiontoviewpage'] = 'You are not allowed to look at this page';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: $string['nopermissiontoviewcalendar'] = 'Sorry, but you do not have permission to view the calendar event.';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b2ec27efc8dabc5709fde493042a8784b48673d",
      "candidate_info": {
        "commit_hash": "1b2ec27efc8dabc5709fde493042a8784b48673d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1b2ec27efc8dabc5709fde493042a8784b48673d",
        "files": [
          "calendar/externallib.php",
          "calendar/lib.php",
          "calendar/tests/events_test.php",
          "calendar/tests/externallib_test.php",
          "calendar/tests/lib_test.php",
          "calendar/upgrade.txt",
          "lang/en/error.php"
        ],
        "message": "MDL-71239 calendar: disallow manager role users edit user events",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/lib.php||calendar/lib.php",
          "calendar/tests/events_test.php||calendar/tests/events_test.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
          "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
          "lang/en/error.php||lang/en/error.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/lib.php||calendar/lib.php",
            "calendar/tests/events_test.php||calendar/tests/events_test.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
            "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
            "lang/en/error.php||lang/en/error.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/lib.php||calendar/lib.php",
            "calendar/tests/events_test.php||calendar/tests/events_test.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
            "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
            "lang/en/error.php||lang/en/error.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:         $warnings = array();",
          "805:         $eventvault = event_container::get_event_vault();",
          "807:             $mapper = event_container::get_event_mapper();",
          "808:             if (!calendar_view_event_allowed($mapper->from_event_to_legacy_event($event))) {",
          "810:             }",
          "811:         }",
          "",
          "[Removed Lines]",
          "806:         if ($event = $eventvault->get_event_by_id($eventid)) {",
          "809:                 $event = null;",
          "",
          "[Added Lines]",
          "806:         if ($event = $eventvault->get_event_by_id($params['eventid'])) {",
          "809:                 throw new moodle_exception('nopermissiontoviewcalendar', 'error');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "816:             $syscontext = context_system::instance();",
          "818:         }",
          "820:         $cache = new events_related_objects_cache([$event]);",
          "",
          "[Removed Lines]",
          "817:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermission', '');",
          "",
          "[Added Lines]",
          "817:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermissions', 'error');",
          "",
          "---------------"
        ],
        "calendar/lib.php||calendar/lib.php": [
          "File: calendar/lib.php -> calendar/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2171:     return array($courses, $group, $userid);",
          "2172: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2180: function calendar_can_manage_non_user_event_in_system($event) {",
          "2181:     $sitecontext = \\context_system::instance();",
          "2182:     $isuserevent = $event->eventtype == 'user';",
          "2183:     $canmanageentries = has_capability('moodle/calendar:manageentries', $sitecontext);",
          "2185:     if ($canmanageentries && !$isuserevent) {",
          "2186:         return true;",
          "2187:     }",
          "2189:     return false;",
          "2190: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2185:         return true;",
          "2186:     }",
          "2192:         return true;",
          "2193:     }",
          "",
          "[Removed Lines]",
          "2189:     $sitecontext = \\context_system::instance();",
          "2191:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2206:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2245:         return can_access_course(get_course($event->courseid));",
          "2246:     } else if ($event->userid) {",
          "2252:     } else {",
          "2253:         throw new moodle_exception('unknown event type');",
          "2254:     }",
          "",
          "[Removed Lines]",
          "2247:         if ($event->userid != $USER->id) {",
          "2249:             return false;",
          "2250:         }",
          "2251:         return true;",
          "",
          "[Added Lines]",
          "2262:         return calendar_can_manage_user_event($event);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2321:         }",
          "2322:     }",
          "2328:         return true;",
          "2329:     }",
          "",
          "[Removed Lines]",
          "2324:     $sitecontext = \\context_system::instance();",
          "2327:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2335:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2349:         return (has_capability('moodle/calendar:manageownentries', $event->context));",
          "2350:     } else if (!empty($event->userid)) {",
          "2352:     }",
          "2354:     return false;",
          "",
          "[Removed Lines]",
          "2351:         return (has_capability('moodle/calendar:manageentries', $event->context));",
          "",
          "[Added Lines]",
          "2359:         return calendar_can_manage_user_event($event);",
          "2360:     }",
          "2362:     return false;",
          "2363: }",
          "2371: function calendar_can_manage_user_event($event): bool {",
          "2372:     global $USER;",
          "2374:     if (!($event instanceof \\calendar_event)) {",
          "2375:         $event = new \\calendar_event(clone($event));",
          "2376:     }",
          "2378:     $canmanage = has_capability('moodle/calendar:manageentries', $event->context);",
          "2379:     $canmanageown = has_capability('moodle/calendar:manageownentries', $event->context);",
          "2380:     $ismyevent = $event->userid == $USER->id;",
          "2381:     $isadminevent = is_siteadmin($event->userid);",
          "2383:     if ($canmanageown && $ismyevent) {",
          "2384:         return true;",
          "2385:     }",
          "2389:     if ($canmanage && !$isadminevent) {",
          "2390:         return true;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2660:         return false;",
          "2661:     }",
          "2667:         return true;",
          "2668:     }",
          "",
          "[Removed Lines]",
          "2663:     $sitecontext = \\context_system::instance();",
          "2666:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2702:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2682:                     (has_capability('moodle/calendar:managegroupentries', $event->context)",
          "2683:                         && groups_is_member($event->groupid)));",
          "2684:         case 'user':",
          "2689:         case 'site':",
          "2690:             return has_capability('moodle/calendar:manageentries', $event->context);",
          "2691:         default:",
          "",
          "[Removed Lines]",
          "2685:             if ($event->userid == $USER->id) {",
          "2686:                 return (has_capability('moodle/calendar:manageownentries', $event->context));",
          "2687:             }",
          "",
          "[Added Lines]",
          "2721:             return calendar_can_manage_user_event($event);",
          "",
          "---------------"
        ],
        "calendar/tests/events_test.php||calendar/tests/events_test.php": [
          "File: calendar/tests/events_test.php -> calendar/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:     public function test_calendar_event_updated_toggle_visibility() {",
          "228:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "226:         global $DB, $SITE;",
          "",
          "[Added Lines]",
          "226:         global $DB;",
          "227:         $siteid = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:         $event = $events[0];",
          "243:         $this->assertInstanceOf('\\core\\event\\calendar_event_updated', $event);",
          "244:         $this->assertEquals('event', $event->objecttable);",
          "246:         $this->assertEquals($calevent->context, $event->get_context());",
          "249:         $this->assertEventLegacyLogData($expectedlog, $event);",
          "250:         $other = array('repeatid' => 0, 'timestart' => $time, 'name' => 'Some wickedly awesome event yo!');",
          "251:         $this->assertEquals($other, $event->other);",
          "",
          "[Removed Lines]",
          "245:         $this->assertEquals($SITE->id, $event->courseid);",
          "247:         $expectedlog = array($SITE->id, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id ,",
          "248:             $calevent->name);",
          "",
          "[Added Lines]",
          "246:         $this->assertEquals($siteid, $event->courseid);",
          "248:         $expectedlog = [$siteid, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id , $calevent->name];",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:             }",
          "105:         }",
          "106:         if (!isset($prop->courseid)) {",
          "108:         }",
          "",
          "[Removed Lines]",
          "107:             $prop->courseid = $SITE->id;",
          "",
          "[Added Lines]",
          "108:             if ($type === 'user') {",
          "110:                 $prop->courseid = 0;",
          "111:             } else {",
          "113:                 $prop->courseid = $SITE->id;",
          "114:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:         $record = new stdClass();",
          "203:         $record->courseid = $course->id;",
          "204:         $courseevent = $this->create_calendar_event('course', $USER->id, 'course', 3, time(), $record);",
          "206:         $record = new stdClass();",
          "207:         $record->courseid = $course->id;",
          "208:         $record->groupid = $group->id;",
          "",
          "[Removed Lines]",
          "205:         $userevent = $this->create_calendar_event('user', $USER->id);",
          "",
          "[Added Lines]",
          "212:         $userevent = $this->create_calendar_event('user', $user->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1806:         $this->resetAfterTest(true);",
          "1807:         $this->setUser($user);",
          "1811:         external_api::clean_returnvalue(",
          "1812:             core_calendar_external::submit_create_update_form_returns(),",
          "1813:             core_calendar_external::submit_create_update_form($querystring)",
          "",
          "[Removed Lines]",
          "1809:         $this->expectException('moodle_exception');",
          "",
          "[Added Lines]",
          "1816:         $this->expectException(moodle_exception::class);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2609:         $this->assertEquals($data['event']['id'], $courseevent->id);",
          "2611:         $this->setUser($user2);",
          "2613:         $data = external_api::clean_returnvalue(",
          "2614:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2615:             core_calendar_external::get_calendar_event_by_id($courseevent->id)",
          "2616:         );",
          "2617:     }",
          "",
          "[Removed Lines]",
          "2612:         $this->expectException('required_capability_exception');",
          "",
          "[Added Lines]",
          "2618:         $this->expectException(moodle_exception::class);",
          "2630:     public function test_get_calendar_event_by_id_prevent_read_other_users_events_data_provider(): array {",
          "2631:         $syscontext = context_system::instance();",
          "2632:         $managerrole = 'manager';",
          "2633:         return [",
          "2634:             [true, false, $syscontext, $managerrole, true],",
          "2635:             [false, false, $syscontext, $managerrole, false],",
          "2636:             [false, false, null, null, true],",
          "2637:             [false, true, null, null, false],",
          "2638:         ];",
          "2639:     }",
          "2653:     public function test_get_calendar_event_by_id_prevent_read_other_users_events(",
          "2654:             bool $isadminevent, bool $isadmin, ?stdClass $readerrolecontext,",
          "2655:             ?string $readerrolename, bool $expectexception) {",
          "2656:         global $USER, $DB;",
          "2658:         $this->resetAfterTest();",
          "2659:         $generator = $this->getDataGenerator();",
          "2661:         if ($isadminevent) {",
          "2662:             $this->setAdminUser();",
          "2663:         } else {",
          "2664:             $user = $generator->create_user();",
          "2665:             $this->setUser($user);",
          "2666:         }",
          "2667:         $userevent = $this->create_calendar_event('user event', $USER->id, 'user', 0, time());",
          "2668:         $results = external_api::clean_returnvalue(",
          "2669:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2670:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
          "2671:         );",
          "2672:         $event = reset($results);",
          "2673:         $this->assertEquals($userevent->id, $event['id']);",
          "2675:         if ($isadmin) {",
          "2676:             $this->setAdminUser();",
          "2677:         } else {",
          "2678:             $reader = $generator->create_user();",
          "2679:             if ($readerrolename && $readerrolecontext) {",
          "2680:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $readerrolename]);",
          "2681:                 role_assign($managerroleid, $reader->id, $readerrolecontext->id);",
          "2682:             }",
          "2683:             $this->setUser($reader);",
          "2684:         }",
          "2686:         if ($expectexception) {",
          "2688:             $this->expectException(moodle_exception::class);",
          "2689:         }",
          "2690:         external_api::clean_returnvalue(",
          "2691:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2692:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
          "2693:         );",
          "2694:     }",
          "2701:     public function test_edit_or_delete_other_users_events_data_provider(): array {",
          "2702:         $syscontext = context_system::instance();",
          "2703:         $managerrole = 'manager';",
          "2704:         return [",
          "2705:             [false, false, $syscontext, $managerrole, false],",
          "2706:             [false, true, $syscontext, $managerrole, true],",
          "2707:             [false, false, null, null, true],",
          "2708:             [true, false, null, null, false],",
          "2709:         ];",
          "2710:     }",
          "2723:     public function test_delete_other_users_events(bool $isadmin, bool $isadminevent,",
          "2724:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
          "2725:         global $DB, $USER;",
          "2727:         $this->resetAfterTest();",
          "2728:         $generator = $this->getDataGenerator();",
          "2730:         if ($isadminevent) {",
          "2731:             $this->setAdminUser();",
          "2732:             $user = $USER;",
          "2733:         } else {",
          "2734:             $user = $generator->create_user();",
          "2735:             $this->setUser($user);",
          "2736:         }",
          "2737:         $userevent = $this->create_calendar_event('user event', $user->id, 'user', 0, time());",
          "2739:         if ($isadmin) {",
          "2740:             $this->setAdminUser();",
          "2741:         } else {",
          "2742:             $writer = $generator->create_user();",
          "2743:             if ($writerrolename && $writerrolecontext) {",
          "2744:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
          "2745:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
          "2746:             }",
          "2747:             $this->setUser($writer);",
          "2748:         }",
          "2750:         if ($expectexception) {",
          "2751:             $this->expectException(moodle_exception::class);",
          "2752:         }",
          "2753:         $events = [",
          "2754:             ['eventid' => $userevent->id, 'repeat' => 0]",
          "2755:         ];",
          "2756:         core_calendar_external::delete_calendar_events($events);",
          "2757:     }",
          "2770:     public function test_edit_other_users_events(bool $isadmin, bool $isadminevent,",
          "2771:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
          "2772:         global $DB, $USER;",
          "2774:         $this->resetAfterTest();",
          "2776:         $generator = $this->getDataGenerator();",
          "2777:         if ($isadminevent) {",
          "2778:             $this->setAdminUser();",
          "2779:             $user = $USER;",
          "2780:         } else {",
          "2781:             $user = $generator->create_user();",
          "2782:         }",
          "2784:         $formdata = [",
          "2785:             'id' => 0,",
          "2786:             'userid' => $user->id,",
          "2787:             'modulename' => '',",
          "2788:             'instance' => 0,",
          "2789:             'visible' => 1,",
          "2790:             'eventtype' => 'user',",
          "2791:             'name' => 'Test',",
          "2792:             'timestart' => [",
          "2793:                 'day' => 1,",
          "2794:                 'month' => 1,",
          "2795:                 'year' => 2021,",
          "2796:                 'hour' => 1,",
          "2797:                 'minute' => 0,",
          "2798:             ],",
          "2799:             'description' => [",
          "2800:                 'text' => 'xxxxx',",
          "2801:                 'format' => 1,",
          "2802:                 'itemid' => 0",
          "2803:             ],",
          "2804:             'location' => 'Test',",
          "2805:             'duration' => 0,",
          "2806:         ];",
          "2807:         $formdata = \\core_calendar\\local\\event\\forms\\create::mock_generate_submit_keys($formdata);",
          "2809:         $querystring = http_build_query($formdata, '', '&');",
          "2811:         if ($isadmin) {",
          "2812:             $this->setAdminUser();",
          "2813:         } else {",
          "2814:             $writer = $generator->create_user();",
          "2815:             if ($writerrolename && $writerrolecontext) {",
          "2816:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
          "2817:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
          "2818:             }",
          "2819:             $this->setUser($writer);",
          "2820:         }",
          "2821:         $USER->ignoresesskey = true;",
          "2823:         if ($expectexception) {",
          "2824:             $this->expectException(moodle_exception::class);",
          "2825:         }",
          "2826:         core_calendar_external::submit_create_update_form($querystring);",
          "2827:     }",
          "",
          "---------------"
        ],
        "calendar/tests/lib_test.php||calendar/tests/lib_test.php": [
          "File: calendar/tests/lib_test.php -> calendar/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:         $this->assertEquals($expected, $authtoken);",
          "994:     }",
          "995: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1001:     public function test_calendar_can_manage_user_event() {",
          "1002:         global $DB, $USER;",
          "1003:         $generator = $this->getDataGenerator();",
          "1004:         $sitecontext = context_system::instance();",
          "1005:         $this->resetAfterTest();",
          "1006:         $this->setAdminUser();",
          "1007:         $user1 = $generator->create_user();",
          "1008:         $user2 = $generator->create_user();",
          "1009:         $adminevent = create_event([",
          "1010:             'eventtype' => 'user',",
          "1011:             'userid' => $USER->id,",
          "1012:         ]);",
          "1014:         $this->setUser($user1);",
          "1015:         $user1event = create_event([",
          "1016:             'name' => 'user1 event',",
          "1017:             'eventtype' => 'user',",
          "1018:             'userid' => $user1->id,",
          "1019:         ]);",
          "1020:         $this->setUser($user2);",
          "1021:         $user2event = create_event([",
          "1022:             'name' => 'user2 event',",
          "1023:             'eventtype' => 'user',",
          "1024:             'userid' => $user2->id,",
          "1025:         ]);",
          "1026:         $this->setUser($user1);",
          "1027:         $result = calendar_can_manage_user_event($user1event);",
          "1028:         $this->assertEquals(true, $result);",
          "1029:         $result = calendar_can_manage_user_event($user2event);",
          "1030:         $this->assertEquals(false, $result);",
          "1032:         $sitemanager = $generator->create_user();",
          "1034:         $managerroleid = $DB->get_field('role', 'id', ['shortname' => 'manager']);",
          "1035:         role_assign($managerroleid, $sitemanager->id, $sitecontext->id);",
          "1037:         $this->setUser($sitemanager);",
          "1039:         $result = calendar_can_manage_user_event($user1event);",
          "1040:         $this->assertEquals(true, $result);",
          "1041:         $result = calendar_can_manage_user_event($adminevent);",
          "1042:         $this->assertEquals(false, $result);",
          "1043:     }",
          "",
          "---------------"
        ],
        "lang/en/error.php||lang/en/error.php": [
          "File: lang/en/error.php -> lang/en/error.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "455: $string['nopermissiontoshow'] = 'No permission to see this!';",
          "456: $string['nopermissiontounlock'] = 'No permission to unlock!';",
          "457: $string['nopermissiontoupdatecalendar'] = 'Sorry, but you do not have permission to update the calendar event.';",
          "458: $string['nopermissiontoviewgrades'] = 'Cannot view grades.';",
          "459: $string['nopermissiontoviewletergrade'] = 'Missing permission to view letter grades';",
          "460: $string['nopermissiontoviewpage'] = 'You are not allowed to look at this page';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458: $string['nopermissiontoviewcalendar'] = 'Sorry, but you do not have permission to view the calendar event.';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f64e54a2f3e33a59d668e032aa8406f6200ba85d",
      "candidate_info": {
        "commit_hash": "f64e54a2f3e33a59d668e032aa8406f6200ba85d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f64e54a2f3e33a59d668e032aa8406f6200ba85d",
        "files": [
          "calendar/externallib.php",
          "calendar/lib.php",
          "calendar/tests/events_test.php",
          "calendar/tests/externallib_test.php",
          "calendar/tests/lib_test.php",
          "calendar/upgrade.txt",
          "lang/en/error.php"
        ],
        "message": "MDL-71239 calendar: disallow manager role users edit user events",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/lib.php||calendar/lib.php",
          "calendar/tests/events_test.php||calendar/tests/events_test.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
          "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
          "lang/en/error.php||lang/en/error.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/lib.php||calendar/lib.php",
            "calendar/tests/events_test.php||calendar/tests/events_test.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
            "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
            "lang/en/error.php||lang/en/error.php"
          ],
          "candidate": [
            "calendar/externallib.php||calendar/externallib.php",
            "calendar/lib.php||calendar/lib.php",
            "calendar/tests/events_test.php||calendar/tests/events_test.php",
            "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
            "calendar/tests/lib_test.php||calendar/tests/lib_test.php",
            "lang/en/error.php||lang/en/error.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:         $warnings = array();",
          "805:         $eventvault = event_container::get_event_vault();",
          "807:             $mapper = event_container::get_event_mapper();",
          "808:             if (!calendar_view_event_allowed($mapper->from_event_to_legacy_event($event))) {",
          "810:             }",
          "811:         }",
          "",
          "[Removed Lines]",
          "806:         if ($event = $eventvault->get_event_by_id($eventid)) {",
          "809:                 $event = null;",
          "",
          "[Added Lines]",
          "806:         if ($event = $eventvault->get_event_by_id($params['eventid'])) {",
          "809:                 throw new moodle_exception('nopermissiontoviewcalendar', 'error');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "816:             $syscontext = context_system::instance();",
          "818:         }",
          "820:         $cache = new events_related_objects_cache([$event]);",
          "",
          "[Removed Lines]",
          "817:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermission', '');",
          "",
          "[Added Lines]",
          "817:             throw new \\required_capability_exception($syscontext, 'moodle/course:view', 'nopermissions', 'error');",
          "",
          "---------------"
        ],
        "calendar/lib.php||calendar/lib.php": [
          "File: calendar/lib.php -> calendar/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2170:     return array($courses, $group, $userid);",
          "2171: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179: function calendar_can_manage_non_user_event_in_system($event) {",
          "2180:     $sitecontext = \\context_system::instance();",
          "2181:     $isuserevent = $event->eventtype == 'user';",
          "2182:     $canmanageentries = has_capability('moodle/calendar:manageentries', $sitecontext);",
          "2184:     if ($canmanageentries && !$isuserevent) {",
          "2185:         return true;",
          "2186:     }",
          "2188:     return false;",
          "2189: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2184:         return true;",
          "2185:     }",
          "2191:         return true;",
          "2192:     }",
          "",
          "[Removed Lines]",
          "2188:     $sitecontext = \\context_system::instance();",
          "2190:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2205:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2244:         return can_access_course(get_course($event->courseid));",
          "2245:     } else if ($event->userid) {",
          "2251:     } else {",
          "2252:         throw new moodle_exception('unknown event type');",
          "2253:     }",
          "",
          "[Removed Lines]",
          "2246:         if ($event->userid != $USER->id) {",
          "2248:             return false;",
          "2249:         }",
          "2250:         return true;",
          "",
          "[Added Lines]",
          "2261:         return calendar_can_manage_user_event($event);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2320:         }",
          "2321:     }",
          "2327:         return true;",
          "2328:     }",
          "",
          "[Removed Lines]",
          "2323:     $sitecontext = \\context_system::instance();",
          "2326:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2334:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2348:         return (has_capability('moodle/calendar:manageownentries', $event->context));",
          "2349:     } else if (!empty($event->userid)) {",
          "2351:     }",
          "2353:     return false;",
          "",
          "[Removed Lines]",
          "2350:         return (has_capability('moodle/calendar:manageentries', $event->context));",
          "",
          "[Added Lines]",
          "2358:         return calendar_can_manage_user_event($event);",
          "2359:     }",
          "2361:     return false;",
          "2362: }",
          "2370: function calendar_can_manage_user_event($event): bool {",
          "2371:     global $USER;",
          "2373:     if (!($event instanceof \\calendar_event)) {",
          "2374:         $event = new \\calendar_event(clone($event));",
          "2375:     }",
          "2377:     $canmanage = has_capability('moodle/calendar:manageentries', $event->context);",
          "2378:     $canmanageown = has_capability('moodle/calendar:manageownentries', $event->context);",
          "2379:     $ismyevent = $event->userid == $USER->id;",
          "2380:     $isadminevent = is_siteadmin($event->userid);",
          "2382:     if ($canmanageown && $ismyevent) {",
          "2383:         return true;",
          "2384:     }",
          "2388:     if ($canmanage && !$isadminevent) {",
          "2389:         return true;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2659:         return false;",
          "2660:     }",
          "2666:         return true;",
          "2667:     }",
          "",
          "[Removed Lines]",
          "2662:     $sitecontext = \\context_system::instance();",
          "2665:     if (has_capability('moodle/calendar:manageentries', $sitecontext)) {",
          "",
          "[Added Lines]",
          "2701:     if (calendar_can_manage_non_user_event_in_system($event)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2681:                     (has_capability('moodle/calendar:managegroupentries', $event->context)",
          "2682:                         && groups_is_member($event->groupid)));",
          "2683:         case 'user':",
          "2688:         case 'site':",
          "2689:             return has_capability('moodle/calendar:manageentries', $event->context);",
          "2690:         default:",
          "",
          "[Removed Lines]",
          "2684:             if ($event->userid == $USER->id) {",
          "2685:                 return (has_capability('moodle/calendar:manageownentries', $event->context));",
          "2686:             }",
          "",
          "[Added Lines]",
          "2720:             return calendar_can_manage_user_event($event);",
          "",
          "---------------"
        ],
        "calendar/tests/events_test.php||calendar/tests/events_test.php": [
          "File: calendar/tests/events_test.php -> calendar/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:     public function test_calendar_event_updated_toggle_visibility() {",
          "228:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "226:         global $DB, $SITE;",
          "",
          "[Added Lines]",
          "226:         global $DB;",
          "227:         $siteid = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:         $event = $events[0];",
          "243:         $this->assertInstanceOf('\\core\\event\\calendar_event_updated', $event);",
          "244:         $this->assertEquals('event', $event->objecttable);",
          "246:         $this->assertEquals($calevent->context, $event->get_context());",
          "249:         $this->assertEventLegacyLogData($expectedlog, $event);",
          "250:         $other = array('repeatid' => 0, 'timestart' => $time, 'name' => 'Some wickedly awesome event yo!');",
          "251:         $this->assertEquals($other, $event->other);",
          "",
          "[Removed Lines]",
          "245:         $this->assertEquals($SITE->id, $event->courseid);",
          "247:         $expectedlog = array($SITE->id, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id ,",
          "248:             $calevent->name);",
          "",
          "[Added Lines]",
          "246:         $this->assertEquals($siteid, $event->courseid);",
          "248:         $expectedlog = [$siteid, 'calendar', 'edit', 'event.php?action=edit&amp;id=' . $calevent->id , $calevent->name];",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:             }",
          "105:         }",
          "106:         if (!isset($prop->courseid)) {",
          "108:         }",
          "",
          "[Removed Lines]",
          "107:             $prop->courseid = $SITE->id;",
          "",
          "[Added Lines]",
          "108:             if ($type === 'user') {",
          "110:                 $prop->courseid = 0;",
          "111:             } else {",
          "113:                 $prop->courseid = $SITE->id;",
          "114:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:         $record = new stdClass();",
          "205:         $record->courseid = $course->id;",
          "206:         $courseevent = $this->create_calendar_event('course', $USER->id, 'course', 3, time(), $record);",
          "208:         $record = new stdClass();",
          "209:         $record->courseid = $course->id;",
          "210:         $record->groupid = $group->id;",
          "",
          "[Removed Lines]",
          "207:         $userevent = $this->create_calendar_event('user', $USER->id);",
          "",
          "[Added Lines]",
          "214:         $userevent = $this->create_calendar_event('user', $user->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1807:         $this->resetAfterTest(true);",
          "1808:         $this->setUser($user);",
          "1812:         external_api::clean_returnvalue(",
          "1813:             core_calendar_external::submit_create_update_form_returns(),",
          "1814:             core_calendar_external::submit_create_update_form($querystring)",
          "",
          "[Removed Lines]",
          "1810:         $this->expectException('moodle_exception');",
          "",
          "[Added Lines]",
          "1817:         $this->expectException(moodle_exception::class);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2610:         $this->assertEquals($data['event']['id'], $courseevent->id);",
          "2612:         $this->setUser($user2);",
          "2614:         $data = external_api::clean_returnvalue(",
          "2615:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2616:             core_calendar_external::get_calendar_event_by_id($courseevent->id)",
          "2617:         );",
          "2618:     }",
          "",
          "[Removed Lines]",
          "2613:         $this->expectException('required_capability_exception');",
          "",
          "[Added Lines]",
          "2619:         $this->expectException(moodle_exception::class);",
          "2631:     public function test_get_calendar_event_by_id_prevent_read_other_users_events_data_provider(): array {",
          "2632:         $syscontext = context_system::instance();",
          "2633:         $managerrole = 'manager';",
          "2634:         return [",
          "2635:             [true, false, $syscontext, $managerrole, true],",
          "2636:             [false, false, $syscontext, $managerrole, false],",
          "2637:             [false, false, null, null, true],",
          "2638:             [false, true, null, null, false],",
          "2639:         ];",
          "2640:     }",
          "2654:     public function test_get_calendar_event_by_id_prevent_read_other_users_events(",
          "2655:             bool $isadminevent, bool $isadmin, ?stdClass $readerrolecontext,",
          "2656:             ?string $readerrolename, bool $expectexception) {",
          "2657:         global $USER, $DB;",
          "2659:         $this->resetAfterTest();",
          "2660:         $generator = $this->getDataGenerator();",
          "2662:         if ($isadminevent) {",
          "2663:             $this->setAdminUser();",
          "2664:         } else {",
          "2665:             $user = $generator->create_user();",
          "2666:             $this->setUser($user);",
          "2667:         }",
          "2668:         $userevent = $this->create_calendar_event('user event', $USER->id, 'user', 0, time());",
          "2669:         $results = external_api::clean_returnvalue(",
          "2670:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2671:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
          "2672:         );",
          "2673:         $event = reset($results);",
          "2674:         $this->assertEquals($userevent->id, $event['id']);",
          "2676:         if ($isadmin) {",
          "2677:             $this->setAdminUser();",
          "2678:         } else {",
          "2679:             $reader = $generator->create_user();",
          "2680:             if ($readerrolename && $readerrolecontext) {",
          "2681:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $readerrolename]);",
          "2682:                 role_assign($managerroleid, $reader->id, $readerrolecontext->id);",
          "2683:             }",
          "2684:             $this->setUser($reader);",
          "2685:         }",
          "2687:         if ($expectexception) {",
          "2689:             $this->expectException(moodle_exception::class);",
          "2690:         }",
          "2691:         external_api::clean_returnvalue(",
          "2692:             core_calendar_external::get_calendar_event_by_id_returns(),",
          "2693:             core_calendar_external::get_calendar_event_by_id($userevent->id)",
          "2694:         );",
          "2695:     }",
          "2702:     public function test_edit_or_delete_other_users_events_data_provider(): array {",
          "2703:         $syscontext = context_system::instance();",
          "2704:         $managerrole = 'manager';",
          "2705:         return [",
          "2706:             [false, false, $syscontext, $managerrole, false],",
          "2707:             [false, true, $syscontext, $managerrole, true],",
          "2708:             [false, false, null, null, true],",
          "2709:             [true, false, null, null, false],",
          "2710:         ];",
          "2711:     }",
          "2724:     public function test_delete_other_users_events(bool $isadmin, bool $isadminevent,",
          "2725:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
          "2726:         global $DB, $USER;",
          "2728:         $this->resetAfterTest();",
          "2729:         $generator = $this->getDataGenerator();",
          "2731:         if ($isadminevent) {",
          "2732:             $this->setAdminUser();",
          "2733:             $user = $USER;",
          "2734:         } else {",
          "2735:             $user = $generator->create_user();",
          "2736:             $this->setUser($user);",
          "2737:         }",
          "2738:         $userevent = $this->create_calendar_event('user event', $user->id, 'user', 0, time());",
          "2740:         if ($isadmin) {",
          "2741:             $this->setAdminUser();",
          "2742:         } else {",
          "2743:             $writer = $generator->create_user();",
          "2744:             if ($writerrolename && $writerrolecontext) {",
          "2745:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
          "2746:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
          "2747:             }",
          "2748:             $this->setUser($writer);",
          "2749:         }",
          "2751:         if ($expectexception) {",
          "2752:             $this->expectException(moodle_exception::class);",
          "2753:         }",
          "2754:         $events = [",
          "2755:             ['eventid' => $userevent->id, 'repeat' => 0]",
          "2756:         ];",
          "2757:         core_calendar_external::delete_calendar_events($events);",
          "2758:     }",
          "2771:     public function test_edit_other_users_events(bool $isadmin, bool $isadminevent,",
          "2772:             ?stdClass $writerrolecontext, ?string $writerrolename, bool $expectexception) {",
          "2773:         global $DB, $USER;",
          "2775:         $this->resetAfterTest();",
          "2777:         $generator = $this->getDataGenerator();",
          "2778:         if ($isadminevent) {",
          "2779:             $this->setAdminUser();",
          "2780:             $user = $USER;",
          "2781:         } else {",
          "2782:             $user = $generator->create_user();",
          "2783:         }",
          "2785:         $formdata = [",
          "2786:             'id' => 0,",
          "2787:             'userid' => $user->id,",
          "2788:             'modulename' => '',",
          "2789:             'instance' => 0,",
          "2790:             'visible' => 1,",
          "2791:             'eventtype' => 'user',",
          "2792:             'name' => 'Test',",
          "2793:             'timestart' => [",
          "2794:                 'day' => 1,",
          "2795:                 'month' => 1,",
          "2796:                 'year' => 2021,",
          "2797:                 'hour' => 1,",
          "2798:                 'minute' => 0,",
          "2799:             ],",
          "2800:             'description' => [",
          "2801:                 'text' => 'xxxxx',",
          "2802:                 'format' => 1,",
          "2803:                 'itemid' => 0",
          "2804:             ],",
          "2805:             'location' => 'Test',",
          "2806:             'duration' => 0,",
          "2807:         ];",
          "2808:         $formdata = \\core_calendar\\local\\event\\forms\\create::mock_generate_submit_keys($formdata);",
          "2810:         $querystring = http_build_query($formdata, '', '&');",
          "2812:         if ($isadmin) {",
          "2813:             $this->setAdminUser();",
          "2814:         } else {",
          "2815:             $writer = $generator->create_user();",
          "2816:             if ($writerrolename && $writerrolecontext) {",
          "2817:                 $managerroleid = $DB->get_field('role', 'id', ['shortname' => $writerrolename]);",
          "2818:                 role_assign($managerroleid, $writer->id, $writerrolecontext->id);",
          "2819:             }",
          "2820:             $this->setUser($writer);",
          "2821:         }",
          "2822:         $USER->ignoresesskey = true;",
          "2824:         if ($expectexception) {",
          "2825:             $this->expectException(moodle_exception::class);",
          "2826:         }",
          "2827:         core_calendar_external::submit_create_update_form($querystring);",
          "2828:     }",
          "",
          "---------------"
        ],
        "calendar/tests/lib_test.php||calendar/tests/lib_test.php": [
          "File: calendar/tests/lib_test.php -> calendar/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:         $this->assertTrue(calendar_view_event_allowed($caleventguest));",
          "965:     }",
          "966: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972:     public function test_calendar_can_manage_user_event() {",
          "973:         global $DB, $USER;",
          "974:         $generator = $this->getDataGenerator();",
          "975:         $sitecontext = context_system::instance();",
          "976:         $this->resetAfterTest();",
          "977:         $this->setAdminUser();",
          "978:         $user1 = $generator->create_user();",
          "979:         $user2 = $generator->create_user();",
          "980:         $adminevent = create_event([",
          "981:             'eventtype' => 'user',",
          "982:             'userid' => $USER->id,",
          "983:         ]);",
          "985:         $this->setUser($user1);",
          "986:         $user1event = create_event([",
          "987:             'name' => 'user1 event',",
          "988:             'eventtype' => 'user',",
          "989:             'userid' => $user1->id,",
          "990:         ]);",
          "991:         $this->setUser($user2);",
          "992:         $user2event = create_event([",
          "993:             'name' => 'user2 event',",
          "994:             'eventtype' => 'user',",
          "995:             'userid' => $user2->id,",
          "996:         ]);",
          "997:         $this->setUser($user1);",
          "998:         $result = calendar_can_manage_user_event($user1event);",
          "999:         $this->assertEquals(true, $result);",
          "1000:         $result = calendar_can_manage_user_event($user2event);",
          "1001:         $this->assertEquals(false, $result);",
          "1003:         $sitemanager = $generator->create_user();",
          "1005:         $managerroleid = $DB->get_field('role', 'id', ['shortname' => 'manager']);",
          "1006:         role_assign($managerroleid, $sitemanager->id, $sitecontext->id);",
          "1008:         $this->setUser($sitemanager);",
          "1010:         $result = calendar_can_manage_user_event($user1event);",
          "1011:         $this->assertEquals(true, $result);",
          "1012:         $result = calendar_can_manage_user_event($adminevent);",
          "1013:         $this->assertEquals(false, $result);",
          "1014:     }",
          "",
          "---------------"
        ],
        "lang/en/error.php||lang/en/error.php": [
          "File: lang/en/error.php -> lang/en/error.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: $string['nopermissiontoshow'] = 'No permission to see this!';",
          "455: $string['nopermissiontounlock'] = 'No permission to unlock!';",
          "456: $string['nopermissiontoupdatecalendar'] = 'Sorry, but you do not have permission to update the calendar event.';",
          "457: $string['nopermissiontoviewgrades'] = 'Cannot view grades.';",
          "458: $string['nopermissiontoviewletergrade'] = 'Missing permission to view letter grades';",
          "459: $string['nopermissiontoviewpage'] = 'You are not allowed to look at this page';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: $string['nopermissiontoviewcalendar'] = 'Sorry, but you do not have permission to view the calendar event.';",
          "",
          "---------------"
        ]
      }
    }
  ]
}