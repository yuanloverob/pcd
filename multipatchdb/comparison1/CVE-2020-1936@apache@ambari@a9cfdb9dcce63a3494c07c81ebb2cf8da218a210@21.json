{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41ff1575c56e0b1f3a0f45e16ae6eb1b8e39764b",
      "candidate_info": {
        "commit_hash": "41ff1575c56e0b1f3a0f45e16ae6eb1b8e39764b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/41ff1575c56e0b1f3a0f45e16ae6eb1b8e39764b",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/FileCache.py"
        ],
        "message": "AMBARI-24257. Tasks fail from time to time due error in file download (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/FileCache.py||ambari-agent/src/main/python/ambari_agent/FileCache.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/FileCache.py||ambari-agent/src/main/python/ambari_agent/FileCache.py": [
          "File: ambari-agent/src/main/python/ambari_agent/FileCache.py -> ambari-agent/src/main/python/ambari_agent/FileCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:       else:",
          "204:         raise # we are not tolerant to exceptions, command execution will fail",
          "205:     finally:",
          "209:     return full_path",
          "",
          "[Removed Lines]",
          "206:       self.currently_providing[full_path].set()",
          "207:       del self.currently_providing[full_path]",
          "",
          "[Added Lines]",
          "206:       with self.currently_providing_dict_lock:",
          "207:         self.currently_providing[full_path].set()",
          "208:         del self.currently_providing[full_path]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7405c68f5daca31353455722cf78724fca584fd8",
      "candidate_info": {
        "commit_hash": "7405c68f5daca31353455722cf78724fca584fd8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7405c68f5daca31353455722cf78724fca584fd8",
        "files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "ambari-metrics/ambari-metrics-timelineservice/conf/unix/metrics_whitelist",
          "ambari-metrics/ambari-metrics-timelineservice/conf/windows/metrics_whitelist",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/files/grafana-dashboards/HDP/grafana-kafka-home.json",
          "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/package/files/grafana-dashboards/HDP/grafana-kafka-hosts.json"
        ],
        "message": "AMBARI-25370 Producer and Customer Request /s graphs are failing on Kafa Grafana dashboards (#3080)\n\nFrom kafka 2.0.0 there has been addition of version tag in kafka.network.RequestMetrics.RequestsPerSec.request.* metrics.\nThis is breaking the the default Grafana dashboard provided by Ambari. On the Kafka - Home and Kafka - Hosts dashboards\nthe Producer requests /s and Consumer requests /s graphs are failing to show any data.\n\nChange-Id: I08656a6f43923b08b3bbc1f1e0346bd93211bbe8",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js": [
          "File: ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js -> ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:             if(!_.isEmpty(templateSrv.variables) && templateSrv.variables[0].query === \"yarnqueues\") {",
          "100:               alias = alias + ' on ' + target.qmetric; }",
          "101:             if(!_.isEmpty(templateSrv.variables) && templateSrv.variables[0].query === \"kafka-topics\") {",
          "103:             return function (res) {",
          "104:               res = res.data;",
          "105:               console.log('processing metric ' + target.metric);",
          "",
          "[Removed Lines]",
          "102:             alias = alias + ' on ' + target.kbTopic; }",
          "",
          "[Added Lines]",
          "102:               alias = alias + ' on ' + target.kbTopic; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:               if (indexOfHosts >= 0) {",
          "596:               var allHosts = templateSrv._values.hosts.lastIndexOf('}') > 0 ? templateSrv._values.hosts.slice(1,-1) :",
          "597:               templateSrv._values.hosts;",
          "604:             }",
          "605:             metricsPromises = _.flatten(metricsPromises);",
          "606:           } else {",
          "",
          "[Removed Lines]",
          "598:               allHosts = templateSrv._texts.hosts === \"All\" ? '%' : allHosts;",
          "599:               metricsPromises.push(_.map(options.targets, function(target) {",
          "600:                   target.templatedHost = allHosts? allHosts : '';",
          "601:                   target.templatedCluster = templatedCluster;",
          "602:                   return getAllHostData(target);",
          "603:               }));",
          "",
          "[Added Lines]",
          "603:               if (!_.isEmpty(options.targets.filter(function(target) {",
          "604:                     return target.metric.endsWith(\".%.count\"); }))) {",
          "605:                 allHosts = allHosts.split(',');",
          "606:                 _.forEach(allHosts, function(host) {",
          "607:                     metricsPromises.push(_.map(options.targets, function(target) {",
          "608:                         target.templatedHost = host;",
          "609:                         target.templatedCluster = templatedCluster;",
          "610:                         return getAllHostData(target);",
          "611:                     }));",
          "612:                 });",
          "613:               } else {",
          "614:                   allHosts = templateSrv._texts.hosts === \"All\" ? '%' : allHosts;",
          "615:                   metricsPromises.push(_.map(options.targets, function(target) {",
          "616:                       target.templatedHost = allHosts? allHosts : '';",
          "617:                       target.templatedCluster = templatedCluster;",
          "618:                       return getAllHostData(target);",
          "619:                 }));",
          "620:               }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a61abbe29c77ca3f101e7aea3767e11313eaf9b",
      "candidate_info": {
        "commit_hash": "4a61abbe29c77ca3f101e7aea3767e11313eaf9b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4a61abbe29c77ca3f101e7aea3767e11313eaf9b",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java"
        ],
        "message": "AMBARI-25440. Server sets blueprint_provisioning_state for component to finished before start command execution. (mpapirkovskyy) (#3148)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1020:           STOMPUpdatePublisher.publish(new HostComponentsUpdateEvent(Collections.singletonList(",
          "1021:               HostComponentUpdate.createHostComponentStatusUpdate(stateEntity, oldState))));",
          "1022:         }",
          "1024:           HostComponentDesiredStateEntity desiredStateEntity = getDesiredStateEntity();",
          "1025:           if (desiredStateEntity.getBlueprintProvisioningState() == BlueprintProvisioningState.IN_PROGRESS) {",
          "1026:             desiredStateEntity.setBlueprintProvisioningState(BlueprintProvisioningState.FINISHED);",
          "",
          "[Removed Lines]",
          "1023:         if (event.getType().equals(ServiceComponentHostEventType.HOST_SVCCOMP_START)) {",
          "",
          "[Added Lines]",
          "1023:         if (event.getType().equals(ServiceComponentHostEventType.HOST_SVCCOMP_STARTED)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e28cc22720cde5ca77e1f825a3fa2e2b99a67f3",
      "candidate_info": {
        "commit_hash": "6e28cc22720cde5ca77e1f825a3fa2e2b99a67f3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6e28cc22720cde5ca77e1f825a3fa2e2b99a67f3",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java"
        ],
        "message": "AMBARI-25446. Credentials should not be shown on cleartext on Ambari UI (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.ambari.server.controller.spi.SystemException;",
          "45: import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;",
          "46: import org.apache.ambari.server.controller.utilities.PropertyHelper;",
          "47: import org.apache.commons.lang.BooleanUtils;",
          "49: public class RepositoryResourceProvider extends AbstractControllerResourceProvider {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:         setResourceProperty(resource, REPOSITORY_REPO_NAME_PROPERTY_ID, response.getRepoName(), requestedIds);",
          "179:         setResourceProperty(resource, REPOSITORY_DISTRIBUTION_PROPERTY_ID, response.getDistribution(), requestedIds);",
          "180:         setResourceProperty(resource, REPOSITORY_COMPONENTS_PROPERTY_ID, response.getComponents(), requestedIds);",
          "182:         setResourceProperty(resource, REPOSITORY_OS_TYPE_PROPERTY_ID, response.getOsType(), requestedIds);",
          "183:         setResourceProperty(resource, REPOSITORY_REPO_ID_PROPERTY_ID, response.getRepoId(), requestedIds);",
          "184:         setResourceProperty(resource, REPOSITORY_MIRRORS_LIST_PROPERTY_ID, response.getMirrorsList(), requestedIds);",
          "186:         setResourceProperty(resource, REPOSITORY_UNIQUE_PROPERTY_ID, response.isUnique(), requestedIds);",
          "187:         setResourceProperty(resource, REPOSITORY_TAGS_PROPERTY_ID, response.getTags(), requestedIds);",
          "188:         setResourceProperty(resource, REPOSITORY_APPLICABLE_SERVICES_PROPERTY_ID, response.getApplicableServices(), requestedIds);",
          "",
          "[Removed Lines]",
          "181:         setResourceProperty(resource, REPOSITORY_BASE_URL_PROPERTY_ID, response.getBaseUrl(), requestedIds);",
          "185:         setResourceProperty(resource, REPOSITORY_DEFAULT_BASE_URL_PROPERTY_ID, response.getDefaultBaseUrl(), requestedIds);",
          "",
          "[Added Lines]",
          "182:         setResourceProperty(resource, REPOSITORY_BASE_URL_PROPERTY_ID, URLCredentialsHider.hideCredentials(response.getBaseUrl()), requestedIds);",
          "186:         setResourceProperty(resource, REPOSITORY_DEFAULT_BASE_URL_PROPERTY_ID, URLCredentialsHider.hideCredentials(response.getDefaultBaseUrl()), requestedIds);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1376c77800da34c5750c9f5337c6e0e49381b1d0",
      "candidate_info": {
        "commit_hash": "1376c77800da34c5750c9f5337c6e0e49381b1d0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1376c77800da34c5750c9f5337c6e0e49381b1d0",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java"
        ],
        "message": "AMBARI-25411. Cannot use HTTPS repourl and VDF url. (mpapirkovskyy) (#3122)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     URL url = new URL(spec);",
          "186:     HttpURLConnection connection = (spec.startsWith(\"https\") && this.setupTruststoreForHttps) ?",
          "189:     AppCookieManager appCookieManager = getAppCookieManager();",
          "",
          "[Removed Lines]",
          "187:             getSSLConnection(spec) : getConnection(url);",
          "",
          "[Added Lines]",
          "187:             getSSLConnection(url) : getConnection(url);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:       if (wwwAuthHeader != null &&",
          "236:         wwwAuthHeader.trim().startsWith(NEGOTIATE)) {",
          "237:         connection = spec.startsWith(\"https\") ?",
          "239:         appCookie = appCookieManager.getAppCookie(spec, true);",
          "240:         connection.setRequestProperty(COOKIE, appCookie);",
          "241:         connection.setConnectTimeout(connTimeout);",
          "",
          "[Removed Lines]",
          "238:            getSSLConnection(spec) : getConnection(url);",
          "",
          "[Added Lines]",
          "238:            getSSLConnection(url) : getConnection(url);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:   }",
          "302:     if (sslSocketFactory == null) {",
          "303:       synchronized (this) {",
          "",
          "[Removed Lines]",
          "300:   protected HttpsURLConnection getSSLConnection(String spec) throws IOException, IllegalStateException {",
          "",
          "[Added Lines]",
          "300:   protected HttpsURLConnection getSSLConnection(URL url) throws IOException, IllegalStateException {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306:           if (trustStorePath == null || trustStorePassword == null) {",
          "307:             String msg =",
          "308:                 String.format(\"Can't get secure connection to %s.  Truststore path or password is not set.\",",
          "311:             LOG.error(msg);",
          "312:             throw new IllegalStateException(msg);",
          "",
          "[Removed Lines]",
          "309:                               URLCredentialsHider.hideCredentials(spec));",
          "",
          "[Added Lines]",
          "309:                               URLCredentialsHider.hideCredentials(url.toString()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:         }",
          "334:       }",
          "335:     }",
          "337:         .openConnection());",
          "339:     connection.setSSLSocketFactory(sslSocketFactory);",
          "",
          "[Removed Lines]",
          "336:     HttpsURLConnection connection = (HttpsURLConnection) (new URL(spec)",
          "",
          "[Added Lines]",
          "336:     HttpsURLConnection connection = (HttpsURLConnection) (url",
          "",
          "---------------"
        ]
      }
    }
  ]
}