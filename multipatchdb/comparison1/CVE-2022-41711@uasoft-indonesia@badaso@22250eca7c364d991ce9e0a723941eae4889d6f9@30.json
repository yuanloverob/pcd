{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5fe3d54537903f6e774944dc515833cee9a3ce7e",
      "candidate_info": {
        "commit_hash": "5fe3d54537903f6e774944dc515833cee9a3ce7e",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/5fe3d54537903f6e774944dc515833cee9a3ce7e",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "update integration testing datatype",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: class BadasoApiCrudManagementTest extends TestCase",
          "16: {",
          "17:     private $KEY_LIST_CREATE_TABLES = 'LIST_CREATE_TABLES';",
          "18:     private $KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG = 'DATA_TABLE_CRUD_MANAGEMENT_LOG';",
          "19:     private $KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT = 'DATA_RESPONSE_ADD_CRUD_MANAGEMENT';",
          "20:     private $KEY_DATA_RESPONSE_READ_TABLE_ENTITY = 'KEY_DATA_RESPONSE_READ_TABLE_ENTITY';",
          "21:     private $KEY_DATA_ADD_ENTITY = 'KEY_DATA_ADD_ENTITY';",
          "22:     private $TABLE_TEST_PREFIX = 'test_table_';",
          "23:     private $MAXIMAL_CREATE_ENTITY = 3;",
          "25:     private function getFields(): array",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:     private $KEY_LIST_CREATE_EMPTY_TABLES = 'LIST_CREATE_EMPTY_TABLES';",
          "20:     private $KEY_DATA_EMPTY_TABLE_CRUD_MANAGEMENT_LOG = 'DATA_EMPTY_TABLE_CRUD_MANAGEMENT_LOG';",
          "23:     private $KEY_DATA_RESPONSE_READ_EMPTY_TABLE_ENTITY = 'KEY_DATA_RESPONSE_READ_EMPTY_TABLE_ENTITY';",
          "25:     private $KEY_EMPTY_DATA_ADD_ENTITY = 'KEY_EMPTY_DATA_ADD_ENTITY';",
          "27:     private $TABLE_TEST_EMPTY_VALUE_PREFIX = 'test_empty_table_';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:             ];",
          "241:     }",
          "243:     private function createTestTables(int $max_count_table_generate)",
          "244:     {",
          "245:         $table_names = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     private function getEmptyValueFields(): array",
          "249:     {",
          "250:         return",
          "251:             $field_name = [",
          "252:                 [",
          "253:                     'badaso_type' => 'text',",
          "254:                     'schema_type' => 'text',",
          "255:                     'details' => json_encode((object) []),",
          "256:                     'example' => 'text',",
          "257:                     'example_update' => '',",
          "258:                 ],",
          "259:                 [",
          "260:                     'badaso_type' => 'email',",
          "261:                     'schema_type' => 'string',",
          "262:                     'details' => json_encode((object) []),",
          "263:                     'example' => 'email@example.com',",
          "264:                     'example_update' => '',",
          "265:                 ],",
          "266:                 [",
          "267:                     'badaso_type' => 'password',",
          "268:                     'schema_type' => 'string',",
          "269:                     'details' => json_encode((object) []),",
          "270:                     'example' => 'password',",
          "271:                     'example_update' => '',",
          "272:                 ],",
          "273:                 [",
          "274:                     'badaso_type' => 'textarea',",
          "275:                     'schema_type' => 'text',",
          "276:                     'details' => json_encode((object) []),",
          "277:                     'example' => 'textarea',",
          "278:                     'example_update' => '',",
          "279:                 ],",
          "280:                 [",
          "281:                     'badaso_type' => 'checkbox',",
          "282:                     'schema_type' => 'string',",
          "283:                     'details' => json_encode([",
          "284:                         'items' => [",
          "285:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "286:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "287:                         ],",
          "288:                     ]),",
          "289:                     'example' => ['example_1'],",
          "290:                     'example_update' => [],",
          "291:                 ],",
          "292:                 [",
          "293:                     'badaso_type' => 'search',",
          "294:                     'schema_type' => 'string',",
          "295:                     'details' => json_encode((object) []),",
          "296:                     'example' => 'search',",
          "297:                     'example_update' => '',",
          "298:                 ],",
          "299:                 [",
          "300:                     'badaso_type' => 'number',",
          "301:                     'schema_type' => 'integer',",
          "302:                     'details' => json_encode((object) []),",
          "303:                     'example' => 1,",
          "304:                     'example_update' => NULL,",
          "305:                 ],",
          "306:                 [",
          "307:                     'badaso_type' => 'url',",
          "308:                     'schema_type' => 'string',",
          "309:                     'details' => json_encode((object) []),",
          "310:                     'example' => 'https://badaso-docs.uatech.co.id',",
          "311:                     'example_update' => '',",
          "312:                 ],",
          "313:                 [",
          "314:                     'badaso_type' => 'select',",
          "315:                     'schema_type' => 'string',",
          "316:                     'details' => json_encode([",
          "317:                         'items' => [",
          "318:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "319:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "320:                         ],",
          "321:                     ]),",
          "322:                     'example' => '',",
          "323:                     'example_update' => 'example_2',",
          "324:                 ],",
          "325:                 [",
          "326:                     'badaso_type' => 'editor',",
          "327:                     'schema_type' => 'text',",
          "328:                     'details' => json_encode((object) []),",
          "329:                     'example' => 'editor',",
          "330:                     'example_update' => '',",
          "331:                 ],",
          "332:                 [",
          "333:                     'badaso_type' => 'code',",
          "334:                     'schema_type' => 'string',",
          "335:                     'details' => json_encode((object) []),",
          "336:                     'example' => 'code',",
          "337:                     'example_update' => '',",
          "338:                 ],",
          "339:                 [",
          "340:                     'badaso_type' => 'hidden',",
          "341:                     'schema_type' => 'string',",
          "342:                     'details' => json_encode((object) []),",
          "343:                     'example' => 'hidden',",
          "344:                     'example_update' => '',",
          "345:                 ],",
          "346:                 [",
          "347:                     'badaso_type' => 'relation',",
          "348:                     'schema_type' => 'bigInteger',",
          "349:                     'details' => json_encode((object) []),",
          "350:                     'example' => null,",
          "351:                 ],",
          "352:                 [",
          "353:                     'badaso_type' => 'color_picker',",
          "354:                     'schema_type' => 'string',",
          "355:                     'details' => json_encode((object) []),",
          "356:                     'example' => '#000000',",
          "357:                     'example_update' => '',",
          "358:                 ],",
          "359:                 [",
          "360:                     'badaso_type' => 'upload_image',",
          "361:                     'schema_type' => 'string',",
          "362:                     'details' => json_encode((object) []),",
          "363:                     'example' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "364:                     'example_update' => '',",
          "365:                 ],",
          "366:                 [",
          "367:                     'badaso_type' => 'select_multiple',",
          "368:                     'schema_type' => 'string',",
          "369:                     'details' => json_encode([",
          "370:                         'items' => [",
          "371:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "372:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "373:                             ['label' => 'example_3', 'value' => 'example_3'],",
          "374:                         ],",
          "375:                     ]),",
          "376:                     'example' => [],",
          "377:                     'example_update' => [",
          "378:                         'example_2',",
          "379:                         'example_3',",
          "380:                     ],",
          "381:                 ],",
          "382:                 [",
          "383:                     'badaso_type' => 'upload_file',",
          "384:                     'schema_type' => 'string',",
          "385:                     'details' => json_encode((object) []),",
          "386:                     'example' => '',",
          "387:                     'example_update' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "388:                 ],",
          "389:                 [",
          "390:                     'badaso_type' => 'upload_image_multiple',",
          "391:                     'schema_type' => 'string',",
          "392:                     'details' => json_encode((object) []),",
          "393:                     'example' => \"['https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png','https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png']\",",
          "394:                     'example_update' => [],",
          "395:                 ],",
          "396:             [",
          "397:                 'badaso_type' => 'upload_file_multiple',",
          "398:                 'schema_type' => 'string',",
          "399:                 'details' => json_encode((object) []),",
          "400:                 'example' => \"[\\'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png\\',\\'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png\\']\",",
          "401:                 'example_update' => \"[]\",",
          "402:             ],",
          "403:             ];",
          "404:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:             }",
          "268:             $table_names[] = $table_name;",
          "269:         }",
          "272:         CallHelperTest::setCache($this->KEY_LIST_CREATE_TABLES, $table_names);",
          "273:     }",
          "275:     private function deleteAllTestTables()",
          "276:     {",
          "277:         $table_names = collect(CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES))->reverse();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:     private function createTestEmptyValueTables(int $max_count_table_generate)",
          "438:     {",
          "439:         $table_names = [];",
          "440:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "441:             $table_name = \"{$this->TABLE_TEST_EMPTY_VALUE_PREFIX}{$index}\";",
          "442:             if (!Schema::hasTable($table_name)) {",
          "443:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "444:                     $table->id();",
          "446:                     foreach ($this->getEmptyValueFields() as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type]) {",
          "447:                         if ($badaso_type == 'relation') {",
          "448:                             if ($index >= 2) {",
          "449:                                 $table_name_relation = $table_names[0];",
          "450:                                 $table->{$schema_type}($badaso_type)->nullable()->unsigned();",
          "452:                                 $table->foreign($badaso_type)->references('id')->on($table_name_relation)->onDelete('cascade');",
          "453:                             }",
          "454:                         } else {",
          "455:                             $table->{$schema_type}($badaso_type)->nullable();",
          "456:                         }",
          "457:                     }",
          "458:                     $table->softDeletes();",
          "459:                     $table->timestamps();",
          "460:                 });",
          "461:             }",
          "462:             $table_names[] = $table_name;",
          "463:         }",
          "465:         CallHelperTest::setCache($this->KEY_LIST_CREATE_EMPTY_TABLES, $table_names);",
          "466:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:             Schema::dropIfExists($table_names);",
          "280:         }",
          "283:         CallHelperTest::clearCache();",
          "284:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:         $table_empty_names = collect(CallHelperTest::getCache($this->KEY_LIST_CREATE_EMPTY_TABLES))->reverse();",
          "476:         foreach ($table_empty_names as $key => $table_empty_names) {",
          "477:             Schema::dropIfExists($table_empty_names);",
          "478:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:         $this->createTestTables(10);",
          "293:     }",
          "295:     public function testBrowseCrudManagement()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:         $this->createTestEmptyValueTables(10);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:                     'field' => 'deleted_at',",
          "375:                     'type' => 'datetime',",
          "376:                     'displayName' => 'Deleted At',",
          "378:                     'browse' => rand(0, 1),",
          "379:                     'read' => rand(0, 1),",
          "380:                     'edit' => 0,",
          "",
          "[Removed Lines]",
          "377:                     'required' => rand(0, 1),",
          "",
          "[Added Lines]",
          "578:                     'required' => 1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "395:                     'field' => $badaso_type,",
          "396:                     'type' => $badaso_type,",
          "397:                     'displayName' => $field_name,",
          "399:                     'browse' => rand(0, 1),",
          "400:                     'read' => rand(0, 1),",
          "401:                     'edit' => rand(0, 1),",
          "",
          "[Removed Lines]",
          "398:                     'required' => rand(0, 1),",
          "",
          "[Added Lines]",
          "599:                     'required' => 1,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1320:         CallHelperTest::setCache($this->KEY_DATA_ADD_ENTITY, $data_add_entities);",
          "1321:     }",
          "1323:     public function testReadDataEntityCrudManagement()",
          "1324:     {",
          "1325:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1524:     public function testAddEditEmptyValueEntityCrudManagement()",
          "1525:     {",
          "1527:         $table_names = CallHelperTest::getCache($this->KEY_LIST_CREATE_EMPTY_TABLES);",
          "1528:         $const_fields = $this->getEmptyValueFields();",
          "1529:         $const_fillable = collect($const_fields)->map(function ($fillable) {",
          "1530:             $field = $fillable['badaso_type'];",
          "1532:             return \"\\\"$field\\\"\";",
          "1533:         })->toArray();",
          "1534:         $const_fillable[] = '\"deleted_at\"';",
          "1537:         $data_types = DataType::whereIn('slug', $table_names)->get();",
          "1538:         foreach ($data_types as $key => $data_type) {",
          "1539:             $data_type->delete();",
          "1540:         }",
          "1542:         $data_table_crud_management_log = [];",
          "1543:         $data_response_add_crud_management = [];",
          "1544:         foreach ($table_names as $index_table_name => $table_name) {",
          "1545:             $rows = [",
          "1546:                 [",
          "1547:                     'field' => 'id',",
          "1548:                     'type' => 'integer',",
          "1549:                     'displayName' => 'Id',",
          "1550:                     'required' => rand(0, 1),",
          "1551:                     'browse' => rand(0, 1),",
          "1552:                     'read' => rand(0, 1),",
          "1553:                     'edit' => 0,",
          "1554:                     'add' => 0,",
          "1555:                     'delete' => rand(0, 1),",
          "1556:                     'details' => json_encode((object) []),",
          "1557:                     'order' => 1,",
          "1558:                     'setRelation' => false,",
          "1559:                 ],",
          "1560:                 [",
          "1561:                     'field' => 'created_at',",
          "1562:                     'type' => 'datetime',",
          "1563:                     'displayName' => 'Created At',",
          "1564:                     'required' => rand(0, 1),",
          "1565:                     'browse' => rand(0, 1),",
          "1566:                     'read' => rand(0, 1),",
          "1567:                     'edit' => 0,",
          "1568:                     'add' => 0,",
          "1569:                     'delete' => rand(0, 1),",
          "1570:                     'details' => json_encode((object) []),",
          "1571:                     'order' => 1,",
          "1572:                     'setRelation' => false,",
          "1573:                 ],",
          "1574:                 [",
          "1575:                     'field' => 'updated_at',",
          "1576:                     'type' => 'datetime',",
          "1577:                     'displayName' => 'Update At',",
          "1578:                     'required' => rand(0, 1),",
          "1579:                     'browse' => rand(0, 1),",
          "1580:                     'read' => rand(0, 1),",
          "1581:                     'edit' => 0,",
          "1582:                     'add' => 0,",
          "1583:                     'delete' => rand(0, 1),",
          "1584:                     'details' => json_encode((object) []),",
          "1585:                     'order' => 1,",
          "1586:                     'setRelation' => false,",
          "1587:                 ],",
          "1588:                 [",
          "1589:                     'field' => 'deleted_at',",
          "1590:                     'type' => 'datetime',",
          "1591:                     'displayName' => 'Deleted At',",
          "1592:                     'required' => 1,",
          "1593:                     'browse' => rand(0, 1),",
          "1594:                     'read' => rand(0, 1),",
          "1595:                     'edit' => 0,",
          "1596:                     'add' => 0,",
          "1597:                     'delete' => rand(0, 1),",
          "1598:                     'details' => json_encode((object) []),",
          "1599:                     'order' => 1,",
          "1600:                     'setRelation' => false,",
          "1601:                 ],",
          "1602:             ];",
          "1603:             foreach ($const_fields as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type, 'details' => $details]) {",
          "1604:                 if ($index_table_name == 0 && $badaso_type == 'relation') {",
          "1605:                     continue;",
          "1606:                 }",
          "1608:                 $field_name = ucwords(str_replace(['_'], ' ', $badaso_type));",
          "1609:                 $row = [",
          "1610:                     'field' => $badaso_type,",
          "1611:                     'type' => $badaso_type,",
          "1612:                     'displayName' => $field_name,",
          "1613:                     'required' => 0,",
          "1614:                     'browse' => rand(0, 1),",
          "1615:                     'read' => rand(0, 1),",
          "1616:                     'edit' => rand(0, 1),",
          "1617:                     'add' => rand(0, 1),",
          "1618:                     'delete' => rand(0, 1),",
          "1619:                     'details' => $details,",
          "1620:                     'order' => 1,",
          "1621:                     'setRelation' => false,",
          "1622:                 ];",
          "1624:                 if ($badaso_type == 'relation') {",
          "1625:                     $destination_field['badaso_type'] = 'id';",
          "1626:                     $destination_more_field['badaso_type'] = ['select_multiple'];",
          "1627:                     $row['relationType'] = ['has_one', 'has_many'][rand(0, 1)];",
          "1628:                     $row['destinationTable'] = $table_names[0];",
          "1629:                     $row['destinationTableColumn'] = $destination_field['badaso_type'];",
          "1630:                     $row['destinationTableDisplayColumn'] = $destination_field['badaso_type'];",
          "1631:                     $row['destinationTableDisplayMoreColumn'] = $destination_more_field['badaso_type'];",
          "1632:                     $row['required'] = false;",
          "1633:                 }",
          "1635:                 $rows[] = $row;",
          "1636:             }",
          "1637:             $data_table_crud_management_log[$index_table_name]['rows'] = $rows;",
          "1639:             $model = '';",
          "1640:             $model_data = [];",
          "1641:             if (rand(0, 1) || $table_names[0]) {",
          "1643:                 $fillable = join(',', $const_fillable);",
          "1644:                 $model_name = str_replace([' ', '_'], '', ucwords($table_name));",
          "1645:                 $model_file_name = \"{$model_name}.php\";",
          "1646:                 $model_body = <<<PHP",
          "1647:                 <?php",
          "1648:                 namespace App\\Models;",
          "1649:                 use Illuminate\\Database\\Eloquent\\Model;",
          "1650:                 class {$model_name} extends Model {",
          "1651:                     protected \\$table = \"{$table_name}\" ;",
          "1652:                     protected \\$fillable = [$fillable] ;",
          "1653:                 }",
          "1654:                 PHP;",
          "1655:                 $model_path = app_path(\"Models/$model_file_name\");",
          "1656:                 if (!file_exists($model_path)) {",
          "1657:                     file_put_contents($model_path, $model_body);",
          "1658:                 }",
          "1661:                 $model = \"App\\Models\\\\$model_name\";",
          "1663:                 $model_data = [",
          "1664:                     'model_name' => $model_name,",
          "1665:                     'model_file_name' => $model_file_name,",
          "1666:                     'model_body' => $model_body,",
          "1667:                     'model_path' => $model_path,",
          "1668:                     'model' => $model,",
          "1669:                 ];",
          "1670:             }",
          "1671:             $data_table_crud_management_log[$index_table_name]['model'] = $model_data;",
          "1673:             $controller = '';",
          "1674:             $controller_data = [];",
          "1675:             if (rand(0, 1)) {",
          "1677:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "1678:                 $controller_file_name = \"{$controller_name}.php\";",
          "1679:                 $controller_body = <<<PHP",
          "1680:                 <?php",
          "1681:                 namespace App\\Http\\Controllers;",
          "1682:                 use Illuminate\\Http\\Request;",
          "1683:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "1684:                 PHP;",
          "1685:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "1686:                 if (!file_exists($controller_path)) {",
          "1687:                     file_put_contents($controller_path, $controller_body);",
          "1688:                 }",
          "1691:                 $controller = \"App\\Http\\Controllers\\\\$controller_name\";",
          "1693:                 $controller_data = [",
          "1694:                     'controller_name' => $controller_file_name,",
          "1695:                     'controller_file_name' => $controller_file_name,",
          "1696:                     'controller_body' => $controller_body,",
          "1697:                     'controller_path' => $controller_path,",
          "1698:                     'controller' => $controller,",
          "1699:                 ];",
          "1700:             }",
          "1701:             $data_table_crud_management_log[$index_table_name]['controller'] = $controller_data;",
          "1703:             $table_label = ucwords(str_replace(['_'], ' ', $table_name));",
          "1704:             $request_body = [",
          "1705:                 'name' =>  $table_name,",
          "1706:                 'slug' =>  $table_name,",
          "1707:                 'displayNameSingular' =>  $table_label,",
          "1708:                 'displayNamePlural' =>  $table_label,",
          "1709:                 'icon' =>  'add',",
          "1710:                 'modelName' =>  $model,",
          "1711:                 'policyName' =>  '',",
          "1712:                 'description' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',",
          "1713:                 'generatePermissions' =>  rand(0, 1),",
          "1714:                 'createSoftDelete' =>  rand(0, 1),",
          "1715:                 'serverSide' =>  rand(0, 1),",
          "1716:                 'details' =>  json_encode((object) []),",
          "1717:                 'controller' =>  $controller,",
          "1718:                 'orderColumn' =>  '',",
          "1719:                 'orderDisplayColumn' =>  '',",
          "1720:                 'orderDirection' =>  '',",
          "1721:                 'notification' =>   array_slice(['onCreate', 'onDelete', 'onUpdate', 'onRead'], 0, rand(0, 3)),",
          "1722:                 'isMaintenance' => rand(0, 1),",
          "1723:                 'rows' => $rows,",
          "1724:             ];",
          "1725:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "1726:             $response->assertSuccessful();",
          "1729:             $data_table_crud_management_log[$index_table_name]['request_body'] = $request_body;",
          "1730:             $data_response_add_crud_management[] = $response->json('data');",
          "1731:         }",
          "1733:         CallHelperTest::setCache($this->KEY_DATA_EMPTY_TABLE_CRUD_MANAGEMENT_LOG, $data_table_crud_management_log);",
          "1736:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_EMPTY_TABLE_CRUD_MANAGEMENT_LOG);",
          "1737:         $response_read_table_entities = [];",
          "1738:         foreach ($data_table_crud_management_logs as $key => $data_table_crud_management_log) {",
          "1739:             $request_body = $data_table_crud_management_log['request_body'];",
          "1740:             $table = $request_body['name'];",
          "1742:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "1743:                 'table' => $table,",
          "1744:             ]);",
          "1745:             $response->assertSuccessful();",
          "1747:             $response_read_table_entities[$table] = $response->json('data.crud.dataRows');",
          "1748:         }",
          "1750:         CallHelperTest::setCache($this->KEY_DATA_RESPONSE_READ_EMPTY_TABLE_ENTITY, $response_read_table_entities);",
          "1753:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_EMPTY_TABLES);",
          "1754:         $first_table = $tables[0];",
          "1756:         $response_read_table_entities = CallHelperTest::getCache($this->KEY_DATA_RESPONSE_READ_EMPTY_TABLE_ENTITY);",
          "1757:         $fields = [];",
          "1758:         foreach ($this->getEmptyValueFields() as $key => $value) {",
          "1759:             $fields[$value['badaso_type']] = $value;",
          "1760:         }",
          "1762:         $data_add_entities = [];",
          "1763:         foreach ($response_read_table_entities as $table => $entities) {",
          "1764:             $entities = collect($entities)->filter(function ($entity) {",
          "1765:                 return $entity['add'];",
          "1766:             })->values();",
          "1768:             $data_add_entities[$table] = [];",
          "1769:             for ($index = 1; $index <= $this->MAXIMAL_CREATE_ENTITY; $index++) {",
          "1771:                 $data = [];",
          "1772:                 foreach ($entities as $key => $entity) {",
          "1773:                     $field = $entity['field'];",
          "1774:                     if (array_key_exists($field, $fields)) {",
          "1775:                         if ($field == 'relation') {",
          "1776:                             $relation_value = DB::table($first_table)->insertGetId([]);",
          "1777:                             $data[$field] = $relation_value;",
          "1778:                         } else {",
          "1779:                             $data[$field] = $fields[$field]['example'];",
          "1780:                         }",
          "1781:                     }",
          "1782:                 }",
          "1783:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/add\"), [",
          "1784:                     'data' => $data,",
          "1785:                 ]);",
          "1787:                 $response->assertSuccessful();",
          "1790:                 $id = $response->json('data.id');",
          "1791:                 $data = ['id' => $id];",
          "1792:                 foreach ($entities as $key => $entity) {",
          "1793:                     $field = $entity['field'];",
          "1794:                     if (array_key_exists($field, $fields)) {",
          "1795:                         if ($field == 'relation') {",
          "1796:                             $relation_value = DB::table($first_table)->insertGetId([]);",
          "1797:                             $data[$field] = $relation_value;",
          "1798:                         } else {",
          "1799:                             $data[$field] = $fields[$field]['example_update'];",
          "1800:                         }",
          "1801:                     }",
          "1802:                 }",
          "1803:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/edit\"), [",
          "1804:                     'data' => $data,",
          "1805:                 ]);",
          "1806:                 $response->assertSuccessful();",
          "1808:                 $data_add_entities[$table][] = $response->json('data');",
          "1809:             }",
          "1810:         }",
          "1812:         CallHelperTest::setCache($this->KEY_EMPTY_DATA_ADD_ENTITY,",
          "1813:             $data_add_entities",
          "1814:         );",
          "1815:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0e1ac3fda2ef5582b9aab8c41aab96ad0b0970e",
      "candidate_info": {
        "commit_hash": "d0e1ac3fda2ef5582b9aab8c41aab96ad0b0970e",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/d0e1ac3fda2ef5582b9aab8c41aab96ad0b0970e",
        "files": [
          "src/Widgets/CommissionWidget.php",
          "src/Widgets/OrderWidget.php",
          "src/resources/js/components/BadasoWidget.vue",
          "src/resources/js/pages/crud-generated/edit.vue",
          "src/resources/js/pages/home.vue"
        ],
        "message": "update component widget, crud generate",
        "before_after_code_files": [
          "src/Widgets/CommissionWidget.php||src/Widgets/CommissionWidget.php",
          "src/Widgets/OrderWidget.php||src/Widgets/OrderWidget.php",
          "src/resources/js/components/BadasoWidget.vue||src/resources/js/components/BadasoWidget.vue",
          "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue",
          "src/resources/js/pages/home.vue||src/resources/js/pages/home.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Widgets/CommissionWidget.php||src/Widgets/CommissionWidget.php": [
          "File: src/Widgets/CommissionWidget.php -> src/Widgets/CommissionWidget.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Widgets;",
          "5: use Uasoft\\Badaso\\Interfaces\\WidgetInterface;",
          "6: use Uasoft\\Badaso\\Module\\MLM\\Models\\Commission;",
          "8: class CommissionWidget implements WidgetInterface",
          "9: {",
          "15:     public function getPermissions()",
          "16:     {",
          "17:         return 'browse_commissions';",
          "18:     }",
          "20:     public function run($params = null)",
          "21:     {",
          "22:         $commission = Commission::get();",
          "23:         $data= $commission->sum('commission');",
          "24:         return [",
          "25:             'label' => 'Commission',",
          "26:             'icon' => 'account_balance_wallet',",
          "27:             'value' => $data,",
          "28:             'prefix_value' =>'Rp',",
          "29:             'delimiter' =>'.',",
          "30:         ];",
          "32:     }",
          "33: }",
          "",
          "---------------"
        ],
        "src/Widgets/OrderWidget.php||src/Widgets/OrderWidget.php": [
          "File: src/Widgets/OrderWidget.php -> src/Widgets/OrderWidget.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Widgets;",
          "5: use Uasoft\\Badaso\\Interfaces\\WidgetInterface;",
          "6: use Uasoft\\Badaso\\Module\\MLM\\Models\\Wallet;",
          "8: class OrderWidget implements WidgetInterface",
          "9: {",
          "15:     public function getPermissions()",
          "16:     {",
          "17:         return 'browse_orders';",
          "18:     }",
          "20:     public function run($params = null)",
          "21:     {",
          "22:         $wallet = Wallet::get();",
          "23:         $data = $wallet->sum('balance');",
          "24:         return [",
          "25:             'label' => 'Wallet',",
          "26:             'icon' => 'shopping_basket',",
          "27:             'value' => $data,",
          "28:             'prefix_value' => '',",
          "29:             'delimiter' => ',',",
          "30:         ];",
          "31:     }",
          "32: }",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoWidget.vue||src/resources/js/components/BadasoWidget.vue": [
          "File: src/resources/js/components/BadasoWidget.vue -> src/resources/js/components/BadasoWidget.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   <vs-col class=\"badaso-widget__container\">",
          "3:     <vs-row>",
          "4:       <vs-col",
          "6:         :key=\"index\"",
          "7:         :vs-lg=\"col\"",
          "8:         vs-xs=\"12\"",
          "",
          "[Removed Lines]",
          "5:         v-for=\"(data, index) in dashboardData\"",
          "",
          "[Added Lines]",
          "5:         v-for=\"(data, index) in widgets\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:               class=\"widget__icon\"",
          "15:               :icon=\"data.icon\"",
          "16:             ></vs-icon>",
          "52:             <span>{{ data.label }}</span>",
          "53:           </div>",
          "54:           <vs-progress",
          "",
          "[Removed Lines]",
          "17:             <template v-if=\"data.delimiter == ','\">",
          "18:               <vs-row v-if=\"!data.prefixValue\">",
          "19:                 <h4 class=\"mb-1\">{{ setDelimiterComa(data.value) }}</h4>",
          "20:               </vs-row>",
          "21:               <vs-row v-else>",
          "22:                 <h4>{{ data.prefixValue }}</h4>",
          "23:                 <h4 class=\"mb-1\">",
          "24:                   {{ setDelimiterComa(data.value) }}",
          "25:                 </h4>",
          "26:               </vs-row>",
          "27:             </template>",
          "29:             <template v-else-if=\"data.delimiter == '.'\">",
          "30:               <vs-row v-if=\"!data.prefixValue\">",
          "31:                 <h4 class=\"mb-1\">{{ setDelimiterPoint(data.value) }}</h4>",
          "32:               </vs-row>",
          "33:               <vs-row v-else>",
          "34:                 <h4>{{ data.prefixValue }}</h4>",
          "35:                 <h4 class=\"mb-1\">",
          "36:                   {{ setDelimiterPoint(data.value) }}",
          "37:                 </h4>",
          "38:               </vs-row>",
          "39:             </template>",
          "41:             <template v-else>",
          "42:               <vs-row v-if=\"!data.prefixValue\">",
          "43:                 <h4 class=\"mb-1\">{{ data.value }}</h4>",
          "44:               </vs-row>",
          "45:               <vs-row v-else>",
          "46:                 <h4>{{ data.prefixValue }}</h4>",
          "47:                 <h4 class=\"mb-1\">",
          "48:                   {{ data.value }}",
          "49:                 </h4>",
          "50:               </vs-row>",
          "51:             </template>",
          "",
          "[Added Lines]",
          "17:             <h4>{{ data.value }}</h4>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: export default {",
          "68:   name: \"BadasoWidget\",",
          "69:   components: {},",
          "71:   props: {",
          "75:     },",
          "79:     },",
          "87:     },",
          "91:     },",
          "92:   },",
          "93: };",
          "",
          "[Removed Lines]",
          "70:   data: () => ({}),",
          "72:     icon: {",
          "73:       type: String,",
          "74:       default: \"\",",
          "76:     value: {",
          "77:       type: String,",
          "78:       default: \"\",",
          "80:     label: {",
          "81:       type: String,",
          "82:       default: \"\",",
          "83:     },",
          "84:     delimiter: {",
          "85:       type: String,",
          "86:       default: \"\",",
          "88:     prefixValue: {",
          "89:       type: String,",
          "90:       default: \"\",",
          "",
          "[Added Lines]",
          "36:   data() {",
          "37:     return {};",
          "38:   },",
          "52:     widgets: {",
          "53:       type: Array,",
          "54:       default: [],",
          "56:     col: {",
          "57:       type: Number,",
          "58:       default: 12,",
          "60:   },",
          "61:   methods: {",
          "62:     getPercent(value, max = 100) {",
          "63:       const percentage = 100 / max;",
          "64:       return value * percentage;",
          "66:     getProgressBarColor(value, max = 100) {",
          "67:       return value > max ? \"danger\" : \"primary\";",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue": [
          "File: src/resources/js/pages/crud-generated/edit.vue -> src/resources/js/pages/crud-generated/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:                     \"",
          "307:                   ></badaso-select>",
          "308:                   <badaso-select-multiple",
          "311:                     :label=\"dataRow.displayName\"",
          "312:                     :placeholder=\"dataRow.displayName\"",
          "313:                     v-model=\"dataRow.value\"",
          "314:                     size=\"12\"",
          "315:                     :alert=\"",
          "318:                     :items=\"",
          "319:                       relationData[",
          "320:                         $caseConvert.stringSnakeToCamel(",
          "321:                           dataRow.relation.destinationTable",
          "322:                         )",
          "323:                       ]",
          "325:                   </badaso-select-multiple>",
          "326:                   <badaso-text",
          "327:                     v-if=\"",
          "",
          "[Removed Lines]",
          "309:                     v-if=\"dataRow.type == 'relation' &&",
          "310:                     dataRow.relation.relationType == 'belongs_to_many'\"",
          "316:                         errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "317:                       \"",
          "324:                     \">",
          "",
          "[Added Lines]",
          "309:                     v-if=\"",
          "310:                       dataRow.type == 'relation' &&",
          "311:                       dataRow.relation.relationType == 'belongs_to_many'",
          "312:                     \"",
          "318:                       errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "319:                     \"",
          "326:                     \"",
          "327:                   >",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:       const dataRows = {};",
          "429:       for (const row of this.dataType.dataRows) {",
          "431:           dataRows[row.field] = row.value;",
          "432:         }",
          "433:       }",
          "",
          "[Removed Lines]",
          "430:         if (row && row.value || row && row.type == 'textarea') {",
          "",
          "[Added Lines]",
          "433:         if ((row && row.value) || (row && row.type == \"textarea\")) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:             ) {",
          "499:               const val =",
          "500:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "507:               ]",
          "508:                 ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "509:                 : false;",
          "510:             } else if (data.type == \"slider\") {",
          "511:               data.value = parseInt(",
          "512:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "518:                 ? this.record[",
          "532:                     this.$caseConvert.stringSnakeToCamel(data.field)",
          "542:               });",
          "543:             } else {",
          "544:               data.value =",
          "545:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "547:             }",
          "548:           } catch (error) {}",
          "549:           return data;",
          "550:         });",
          "553:         this.dataType.dataRows = JSON.parse(JSON.stringify(dataRows));",
          "557:       } catch (error) {",
          "558:         if (error.status == 503) {",
          "559:           this.isMaintenance = true;",
          "",
          "[Removed Lines]",
          "501:                 if (val) {",
          "502:                   data.value = val.split(\",\");",
          "503:                 }",
          "504:               } else if (data.type == \"switch\") {",
          "505:                 data.value = this.record[",
          "506:                   this.$caseConvert.stringSnakeToCamel(data.field)",
          "513:                 );",
          "514:               } else if (data.type == \"datetime\") {",
          "515:                 data.value = this.record[",
          "516:                   this.$caseConvert.stringSnakeToCamel(data.field)",
          "517:                 ]",
          "519:                   this.$caseConvert.stringSnakeToCamel(data.field)",
          "520:                 ].replace(\" \", \"T\")",
          "521:                 : null;",
          "522:               } else if (data.value == undefined && data.type == \"hidden\") {",
          "523:                 data.value = data.details.value ? data.details.value : \"\";",
          "524:               } else if (",
          "525:                 data.type == \"text\" ||",
          "526:                 data.type == \"hidden\" ||",
          "527:                 data.type == \"url\" ||",
          "528:                 data.type == \"search\" ||",
          "529:                 data.type == \"password\"",
          "530:                 ) {",
          "531:                   data.value = this.record[",
          "533:                   ]",
          "534:                   ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "535:                   : \"\";",
          "536:               } else if (data.type == \"relation\" && data.relation.relationType == 'belongs_to_many'){",
          "537:                   let record = this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "538:                   let destinationTableId = data.relation.destinationTable + 'Id'",
          "539:                   data.value = []",
          "540:                   Object.entries(record).filter(function (item,key) {",
          "541:                     return data.value[key] = item[1][destinationTableId];",
          "551:         console.log(dataRows,'data');",
          "555:         console.log(this.dataType.dataRows,'result');",
          "",
          "[Added Lines]",
          "504:               if (val) {",
          "505:                 data.value = val.split(\",\");",
          "506:               }",
          "507:             } else if (data.type == \"switch\") {",
          "508:               data.value = this.record[",
          "509:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "516:               );",
          "517:             } else if (data.type == \"datetime\") {",
          "518:               data.value = this.record[",
          "519:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "520:               ]",
          "523:                   ].replace(\" \", \"T\")",
          "524:                 : null;",
          "525:             } else if (data.type == \"date\") {",
          "526:               var date = new Date(data.value); // M-D-YYYY",
          "527:               data.value = date.getTime();",
          "528:             } else if (data.value == undefined && data.type == \"hidden\") {",
          "529:               data.value = data.details.value ? data.details.value : \"\";",
          "530:             } else if (",
          "531:               data.type == \"text\" ||",
          "532:               data.type == \"hidden\" ||",
          "533:               data.type == \"url\" ||",
          "534:               data.type == \"search\" ||",
          "535:               data.type == \"password\"",
          "536:             ) {",
          "537:               data.value = this.record[",
          "538:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "539:               ]",
          "540:                 ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "541:                 : \"\";",
          "542:             } else if (",
          "543:               data.type == \"relation\" &&",
          "544:               data.relation.relationType == \"belongs_to_many\"",
          "545:             ) {",
          "546:               let record =",
          "547:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "548:               let destinationTableId = data.relation.destinationTable + \"Id\";",
          "549:               data.value = [];",
          "550:               Object.entries(record).filter(function (item, key) {",
          "551:                 return (data.value[key] = item[1][destinationTableId]);",
          "560:         console.log(dataRows, \"data\");",
          "564:         console.log(this.dataType.dataRows, \"result\");",
          "566:         const millis = new Date();",
          "568:         console.log(millis, \"tes\");",
          "571:         console.log(JSON.parse(JSON.stringify(millis)), \"hasil tes\");",
          "",
          "---------------"
        ],
        "src/resources/js/pages/home.vue||src/resources/js/pages/home.vue": [
          "File: src/resources/js/pages/home.vue -> src/resources/js/pages/home.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <vs-row>",
          "61:   </vs-row>",
          "62: </template>",
          "",
          "[Removed Lines]",
          "3:     <vs-col",
          "4:       v-for=\"(data, index) in dashboardData\"",
          "5:       :key=\"index\"",
          "6:       :vs-lg=\"col\"",
          "7:       vs-xs=\"12\"",
          "8:     >",
          "9:       <vs-card class=\"widget__content\">",
          "10:         <div class=\"widget__icon-container\">",
          "11:           <vs-icon",
          "12:             v-if=\"data.icon\"",
          "13:             class=\"widget__icon\"",
          "14:             :icon=\"data.icon\"",
          "15:           ></vs-icon>",
          "16:           <template v-if=\"data.delimiter == ','\">",
          "17:             <vs-row v-if=\"!data.prefixValue\">",
          "18:               <h4 class=\"mb-1\">{{ setDelimiterComa(data.value) }}</h4>",
          "19:             </vs-row>",
          "20:             <vs-row v-else>",
          "21:               <h4>{{ data.prefixValue }}</h4>",
          "22:               <h4 class=\"mb-1\">",
          "23:                 {{ setDelimiterComa(data.value) }}",
          "24:               </h4>",
          "25:             </vs-row>",
          "26:           </template>",
          "28:           <template v-else-if=\"data.delimiter == '.'\">",
          "29:             <vs-row v-if=\"!data.prefixValue\">",
          "30:               <h4 class=\"mb-1\">{{ setDelimiterPoint(data.value) }}</h4>",
          "31:             </vs-row>",
          "32:             <vs-row v-else>",
          "33:               <h4>{{ data.prefixValue }}</h4>",
          "34:               <h4 class=\"mb-1\">",
          "35:                 {{ setDelimiterPoint(data.value) }}",
          "36:               </h4>",
          "37:             </vs-row>",
          "38:           </template>",
          "40:           <template v-else>",
          "41:             <vs-row v-if=\"!data.prefixValue\">",
          "42:               <h4 class=\"mb-1\">{{ data.value }}</h4>",
          "43:             </vs-row>",
          "44:             <vs-row v-else>",
          "45:               <h4>{{ data.prefixValue }}</h4>",
          "46:               <h4 class=\"mb-1\">",
          "47:                 {{ data.value }}",
          "48:               </h4>",
          "49:             </vs-row>",
          "50:           </template>",
          "51:           <span>{{ data.label }}</span>",
          "52:         </div>",
          "53:         <vs-progress",
          "54:           class=\"widget__progress-bar\"",
          "55:           :percent=\"getPercent(data.value, data.max)\"",
          "56:           :color=\"getProgressBarColor(data.value, data.max)\"",
          "57:           >primary</vs-progress",
          "58:         >",
          "59:       </vs-card>",
          "60:     </vs-col>",
          "",
          "[Added Lines]",
          "3:     <badaso-widget :col=\"col\" :widgets=\"dashboardData\"> </badaso-widget>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     this.saveTokenFcmMessage();",
          "76:   },",
          "77:   methods: {",
          "85:     getDashboardData() {",
          "86:       this.$openLoader();",
          "87:       this.$api.badasoDashboard",
          "",
          "[Removed Lines]",
          "78:     getPercent(value, max = 100) {",
          "79:       const percentage = 100 / max;",
          "80:       return value * percentage;",
          "81:     },",
          "82:     getProgressBarColor(value, max = 100) {",
          "83:       return value > max ? \"danger\" : \"primary\";",
          "84:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         .then((response) => {",
          "90:           this.$closeLoader();",
          "91:           this.dashboardData = response.data;",
          "92:           if (this.dashboardData.length >= 4) {",
          "93:             this.col = 3;",
          "94:           } else if (this.dashboardData.length == 3) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:           this.dashboardData.map((data) => {",
          "29:             data.value =",
          "30:               data.prefixValue +",
          "31:               data.value",
          "32:                 .toString()",
          "33:                 .replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, data.delimiter);",
          "34:             return data;",
          "35:           });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce489e8af4a4741b833790fd4e799a6a7d7d33e6",
      "candidate_info": {
        "commit_hash": "ce489e8af4a4741b833790fd4e799a6a7d7d33e6",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/ce489e8af4a4741b833790fd4e799a6a7d7d33e6",
        "files": [
          "src/ContentManager/FileGenerator.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/ContentManager/FileGenerator.php||src/ContentManager/FileGenerator.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/ContentManager/FileGenerator.php||src/ContentManager/FileGenerator.php": [
          "File: src/ContentManager/FileGenerator.php -> src/ContentManager/FileGenerator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:             $schema_down .= $this->migration_parser->getAlterMigrationRelationshipSchemaDown($table, $relations).PHP_EOL;",
          "356:         }",
          "357:         if (array_key_exists('modified_relations', $relations) && count($relations['modified_relations']) > 0) {",
          "359:                 $schema_up .= $this->migration_parser->getAlterMigrationRelationshipSchemaUp($table, $relations);",
          "360:                 $schema_down .= $this->migration_parser->getAlterMigrationRelationshipSchemaDown($table, $relations).PHP_EOL;",
          "362:         }",
          "364:         $schema_down .= $this->migration_parser->getAlterMigrationSchemaDown($table, $rows, $prefix, $relations);",
          "",
          "[Removed Lines]",
          "358:             if($schema_up != $this->migration_parser->getAlterMigrationRelationshipSchemaUp($table, $relations) && $schema_down != $this->migration_parser->getAlterMigrationRelationshipSchemaDown($table, $relations).PHP_EOL){",
          "361:             };",
          "",
          "[Added Lines]",
          "358:             if ($schema_up != $this->migration_parser->getAlterMigrationRelationshipSchemaUp($table, $relations) && $schema_down != $this->migration_parser->getAlterMigrationRelationshipSchemaDown($table, $relations).PHP_EOL) {",
          "361:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0601c89c5c0aecde75d88834ea1899661e62521f",
      "candidate_info": {
        "commit_hash": "0601c89c5c0aecde75d88834ea1899661e62521f",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/0601c89c5c0aecde75d88834ea1899661e62521f",
        "files": [
          "src/Helpers/CallHelperTest.php"
        ],
        "message": "Update CallHelperTest.php",
        "before_after_code_files": [
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         return 'badaso-api/v1/auth/'.$path;",
          "146:     }",
          "149:     public static function getContentApiV1($path)",
          "150:     {",
          "151:         return 'badaso-api/module/content/v1'.$path;",
          "153:     public static function getApiV1($path)",
          "154:     {",
          "155:         return 'badaso-api/module/post/v1'.$path;",
          "157:     }",
          "158: }",
          "",
          "[Removed Lines]",
          "148: <<<<<<< bugfix/v2/validation-and-pop-up",
          "152: =======",
          "156: >>>>>>> 2.x",
          "",
          "[Added Lines]",
          "152:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab483688001876bf876f6440a88dda10839b7e6f",
      "candidate_info": {
        "commit_hash": "ab483688001876bf876f6440a88dda10839b7e6f",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/ab483688001876bf876f6440a88dda10839b7e6f",
        "files": [
          "src/Controllers/BadasoMaintenanceController.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/BadasoMaintenanceController.php||src/Controllers/BadasoMaintenanceController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoMaintenanceController.php||src/Controllers/BadasoMaintenanceController.php": [
          "File: src/Controllers/BadasoMaintenanceController.php -> src/Controllers/BadasoMaintenanceController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     private function isUnderMaintenance()",
          "84:     {",
          "86:             return true;",
          "88:             try {",
          "89:                 $configuration_model = ConfigurationRedis::get();",
          "90:                 $maintenance = $configuration_model->where('key', 'maintenance')->firstOrFail();",
          "92:                 return $maintenance->value == '1' ? true : false;",
          "93:             } catch (\\Exception $e) {",
          "94:                 $maintenance = Configuration::where('key', 'maintenance')->firstOrFail();",
          "96:                 return $maintenance->value == '1' ? true : false;",
          "97:             }",
          "98:         }",
          "",
          "[Removed Lines]",
          "85:         if(env('MIX_BADASO_MAINTENANCE')){",
          "87:         }else{",
          "",
          "[Added Lines]",
          "85:         if (env('MIX_BADASO_MAINTENANCE')) {",
          "87:         } else {",
          "",
          "---------------"
        ]
      }
    }
  ]
}