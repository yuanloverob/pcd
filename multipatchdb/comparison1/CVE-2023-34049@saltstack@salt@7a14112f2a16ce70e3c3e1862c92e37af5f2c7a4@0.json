{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
  "patch_info": {
    "commit_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "files": [
      "changelog/cve-2023-34049.security.md",
      "salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py"
    ],
    "message": "Fix CVE-2023-34049",
    "before_after_code_files": [
      "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
    ]
  },
  "patch_diff": {
    "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
      "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import logging",
      "12: import multiprocessing",
      "13: import os",
      "14: import queue",
      "15: import re",
      "16: import shlex",
      "17: import subprocess",
      "18: import sys",
      "19: import tarfile",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import pathlib",
      "18: import shutil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
      "468:                 self._key_deploy_run(host, target, False)",
      "469:             return ret",
      "471:             target = self.targets[host]",
      "472:             # permission denied, attempt to auto deploy ssh key",
      "473:             print(",
      "",
      "[Removed Lines]",
      "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
      "",
      "[Added Lines]",
      "472:         stderr = ret[host].get(\"stderr\", \"\")",
      "473:         # -failed to upload file- is detecting scp errors",
      "474:         # Errors to ignore when Permission denied is in the stderr. For example",
      "475:         # scp can get a permission denied on the target host, but they where",
      "476:         # able to accurate authenticate against the box",
      "477:         ignore_err = [\"failed to upload file\"]",
      "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
      "479:         if \"Permission denied\" in stderr and not check_err:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1007:         \"\"\"",
      "1008:         Run our pre_flight script before running any ssh commands",
      "1009:         \"\"\"",
      "1016:     def check_thin_dir(self):",
      "1017:         \"\"\"",
      "",
      "[Removed Lines]",
      "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
      "1012:         self.shell.send(self.ssh_pre_flight, script)",
      "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
      "",
      "[Added Lines]",
      "1019:         with tempfile.NamedTemporaryFile() as temp:",
      "1020:             # ensure we use copyfile to not copy the file attributes",
      "1021:             # we want to ensure we use the perms set by the secure",
      "1022:             # NamedTemporaryFile",
      "1023:             try:",
      "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
      "1025:             except OSError as err:",
      "1026:                 return (",
      "1027:                     \"\",",
      "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
      "1029:                     1,",
      "1030:                 )",
      "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
      "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
      "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
      "1034:             if retcode != 0:",
      "1035:                 # We could not copy the script to the target",
      "1036:                 log.error(",
      "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
      "1038:                 )",
      "1039:                 return stdout, stderr, retcode",
      "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
      "1042:             return self.execute_script(",
      "1043:                 target_script, script_args=self.ssh_pre_flight_args",
      "1044:             )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1388:             return self.shell.exec_cmd(cmd_str)",
      "1390:         # Write the shim to a temporary file in the default temp directory",
      "1394:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
      "1396:         # Copy shim to target system, under $HOME/.<randomized name>",
      "1400:         if self.winrm:",
      "1401:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
      "1404:         # Remove our shim file",
      "1405:         try:",
      "",
      "[Removed Lines]",
      "1391:         with tempfile.NamedTemporaryFile(",
      "1392:             mode=\"w+b\", prefix=\"shim_\", delete=False",
      "1393:         ) as shim_tmp_file:",
      "1397:         target_shim_file = \".{}.{}\".format(",
      "1398:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
      "1399:         )",
      "1402:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
      "",
      "[Added Lines]",
      "1421:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
      "1425:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
      "1429:         stdout, stderr, retcode = self.shell.send(",
      "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
      "1431:         )",
      "1432:         if retcode != 0:",
      "1433:             log.error(f\"Could not copy the shim script to target\")",
      "1434:             return stdout, stderr, retcode",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
      "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import re",
      "4: from textwrap import dedent",
      "6: import pytest",
      "",
      "[Removed Lines]",
      "1: import os",
      "3: import tempfile",
      "",
      "[Added Lines]",
      "1: import logging",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from salt.client import ssh",
      "17: from tests.support.mock import MagicMock, call, patch",
      "20: @pytest.fixture",
      "21: def opts(tmp_path):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: log = logging.getLogger(__name__)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:         assert ret == cmd_ret",
      "245: def test_execute_script(opts, target, tmp_path):",
      "246:     \"\"\"",
      "247:     test Single.execute_script()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "247:     \"\"\"",
      "248:     test Single.run_ssh_pre_flight function",
      "249:     \"\"\"",
      "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "251:     single = ssh.Single(",
      "252:         opts,",
      "253:         opts[\"argv\"],",
      "254:         \"localhost\",",
      "255:         mods={},",
      "256:         fsclient=None,",
      "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "258:         mine=False,",
      "260:     )",
      "262:     cmd_ret = (\"Success\", \"\", 0)",
      "263:     mock_flight = MagicMock(return_value=cmd_ret)",
      "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
      "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
      "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "267:     patch_exec_cmd = patch(",
      "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
      "269:     )",
      "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
      "273:         ret = single.run()",
      "274:         mock_cmd.assert_called()",
      "275:         mock_flight.assert_called()",
      "276:         assert ret == cmd_ret",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "273:         ] == mock_cmd.call_args_list",
      "277:     \"\"\"",
      "278:     test Single.shim_cmd()",
      "279:     \"\"\"",
      "",
      "[Removed Lines]",
      "276: def test_shim_cmd(opts, target):",
      "",
      "[Added Lines]",
      "310: def test_shim_cmd(opts, target, tmp_path):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
      "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "301:         assert ret == exp_ret",
      "302:         assert [",
      "305:         ] == mock_cmd.call_args_list",
      "309:     \"\"\"",
      "311:     \"\"\"",
      "313:     single = ssh.Single(",
      "314:         opts,",
      "315:         opts[\"argv\"],",
      "",
      "[Removed Lines]",
      "299:     with patch_cmd, patch_rand, patch_send:",
      "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
      "304:             call(\"rm '.35d96ccac2ff.py'\"),",
      "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "310:     test Single.run_ssh_pre_flight",
      "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "332:     tmp_file = tmp_path / \"tmp_file\"",
      "333:     mock_tmp = MagicMock()",
      "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "337:     with patch_cmd, patch_tmp, patch_send:",
      "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
      "342:             call(f\"rm '.{tmp_file.name}'\"),",
      "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
      "348:     test Single.shim_cmd() when copying the file fails",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:         mine=False,",
      "321:         winrm=False,",
      "322:         tty=True,",
      "324:     )",
      "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "332:     )",
      "335:         ret = single.run_ssh_pre_flight()",
      "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
      "",
      "[Removed Lines]",
      "326:     exp_ret = (\"Success\", \"\", 0)",
      "327:     mock_cmd = MagicMock(return_value=exp_ret)",
      "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
      "330:     exp_tmp = os.path.join(",
      "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
      "334:     with patch_cmd, patch_send:",
      "336:         assert ret == exp_ret",
      "337:         assert [",
      "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
      "339:             call(\"rm '{}'\".format(exp_tmp)),",
      "340:         ] == mock_cmd.call_args_list",
      "",
      "[Added Lines]",
      "363:     ret_cmd = (\"Success\", \"\", 0)",
      "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
      "366:     ret_send = (\"\", \"General error in file copy\", 1)",
      "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
      "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "370:     with patch_cmd, patch_rand, patch_send:",
      "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "372:         assert ret == ret_send",
      "373:         assert \"Could not copy the shim script to target\" in caplog.text",
      "374:         mock_cmd.assert_not_called()",
      "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
      "378:     \"\"\"",
      "379:     test Single.run_ssh_pre_flight when you",
      "380:     cannot connect to the target",
      "381:     \"\"\"",
      "382:     pre_flight = tmp_path / \"script.sh\"",
      "383:     pre_flight.write_text(\"\")",
      "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "385:     single = ssh.Single(",
      "386:         opts,",
      "387:         opts[\"argv\"],",
      "388:         \"localhost\",",
      "389:         mods={},",
      "390:         fsclient=None,",
      "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "392:         mine=False,",
      "393:         winrm=False,",
      "394:         tty=True,",
      "396:     )",
      "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "399:     tmp_file = tmp_path / \"tmp_file\"",
      "400:     mock_tmp = MagicMock()",
      "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "403:     ret_send = (",
      "404:         \"\",",
      "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
      "406:         255,",
      "407:     )",
      "408:     send_mock = MagicMock(return_value=ret_send)",
      "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "411:     with caplog.at_level(logging.TRACE):",
      "412:         with patch_send, patch_exec_cmd, patch_tmp:",
      "413:             ret = single.run_ssh_pre_flight()",
      "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
      "415:     assert (",
      "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
      "417:         in caplog.text",
      "418:     )",
      "419:     assert ret == ret_send",
      "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "421:     target_script = send_mock.call_args_list[0][0][1]",
      "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "423:     mock_exec_cmd.assert_not_called()",
      "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
      "427:     \"\"\"",
      "428:     test Single.run_ssh_pre_flight when you",
      "429:     cannot copy script to the target due to",
      "430:     a permission denied error",
      "431:     \"\"\"",
      "432:     pre_flight = tmp_path / \"script.sh\"",
      "433:     pre_flight.write_text(\"\")",
      "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "435:     single = ssh.Single(",
      "436:         opts,",
      "437:         opts[\"argv\"],",
      "438:         \"localhost\",",
      "439:         mods={},",
      "440:         fsclient=None,",
      "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "442:         mine=False,",
      "443:         winrm=False,",
      "444:         tty=True,",
      "446:     )",
      "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "449:     tmp_file = tmp_path / \"tmp_file\"",
      "450:     mock_tmp = MagicMock()",
      "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "453:     ret_send = (",
      "454:         \"\",",
      "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "456:         255,",
      "458:     send_mock = MagicMock(return_value=ret_send)",
      "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "461:     with patch_send, patch_exec_cmd, patch_tmp:",
      "463:     assert ret == ret_send",
      "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "465:     target_script = send_mock.call_args_list[0][0][1]",
      "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "467:     mock_exec_cmd.assert_not_called()",
      "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
      "471:     \"\"\"",
      "472:     test Single.run_ssh_pre_flight when you",
      "473:     can connect to the target",
      "474:     \"\"\"",
      "475:     pre_flight = tmp_path / \"script.sh\"",
      "476:     pre_flight.write_text(\"\")",
      "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "478:     single = ssh.Single(",
      "479:         opts,",
      "480:         opts[\"argv\"],",
      "481:         \"localhost\",",
      "482:         mods={},",
      "483:         fsclient=None,",
      "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "485:         mine=False,",
      "486:         winrm=False,",
      "487:         tty=True,",
      "489:     )",
      "490:     ret_exec_cmd = (\"\", \"\", 1)",
      "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "493:     tmp_file = tmp_path / \"tmp_file\"",
      "494:     mock_tmp = MagicMock()",
      "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "497:     ret_send = (",
      "498:         \"\",",
      "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
      "500:         0,",
      "501:     )",
      "502:     send_mock = MagicMock(return_value=ret_send)",
      "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "505:     with caplog.at_level(logging.TRACE):",
      "506:         with patch_send, patch_exec_cmd, patch_tmp:",
      "507:             ret = single.run_ssh_pre_flight()",
      "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
      "510:     assert ret == ret_exec_cmd",
      "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "512:     target_script = send_mock.call_args_list[0][0][1]",
      "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "514:     mock_exec_cmd.assert_called()",
      "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
      "518:     \"\"\"",
      "519:     test Single.run_ssh_pre_flight when cannot",
      "520:     copyfile with shutil",
      "521:     \"\"\"",
      "522:     pre_flight = tmp_path / \"script.sh\"",
      "523:     pre_flight.write_text(\"\")",
      "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "525:     single = ssh.Single(",
      "526:         opts,",
      "527:         opts[\"argv\"],",
      "528:         \"localhost\",",
      "529:         mods={},",
      "530:         fsclient=None,",
      "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "532:         mine=False,",
      "533:         winrm=False,",
      "534:         tty=True,",
      "536:     )",
      "537:     ret_exec_cmd = (\"\", \"\", 1)",
      "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "540:     tmp_file = tmp_path / \"tmp_file\"",
      "541:     mock_tmp = MagicMock()",
      "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "544:     send_mock = MagicMock()",
      "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
      "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
      "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
      "550:         ret = single.run_ssh_pre_flight()",
      "552:     assert ret == (",
      "553:         \"\",",
      "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
      "555:         1,",
      "556:     )",
      "557:     mock_exec_cmd.assert_not_called()",
      "558:     send_mock.assert_not_called()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "434:     and script successfully runs",
      "435:     \"\"\"",
      "436:     opts[\"ssh_run_pre_flight\"] = True",
      "439:     if test_opts[0] is not None:",
      "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
      "",
      "[Removed Lines]",
      "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "655:     pre_flight_script = tmp_path / \"script.sh\"",
      "656:     pre_flight_script.write_text(\"\")",
      "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
      "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
      "469: @pytest.mark.slow_test",
      "",
      "[Removed Lines]",
      "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
      "463:         ret = single.run()",
      "464:         assert mock_exec_cmd.mock_calls[0].args[",
      "465:             0",
      "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
      "",
      "[Added Lines]",
      "679:     patch_shell_send = patch(",
      "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
      "681:     )",
      "685:         single.run()",
      "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
      "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
      "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
      "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
      "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
      "345:     \"\"\"",
      "346:     test \"key_deploy\" function when",
      "347:     permission denied authentication error",
      "348:     when attempting to use scp to copy file",
      "349:     to target",
      "350:     \"\"\"",
      "351:     host = \"localhost\"",
      "352:     passwd = \"password\"",
      "353:     usr = \"ssh-usr\"",
      "354:     opts[\"ssh_user\"] = usr",
      "355:     opts[\"tgt\"] = host",
      "357:     ssh_ret = {",
      "358:         host: {",
      "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
      "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
      "361:             \"retcode\": 255,",
      "362:         }",
      "363:     }",
      "364:     key_run_ret = {",
      "365:         \"localhost\": {",
      "366:             \"jid\": \"20230922155652279959\",",
      "367:             \"return\": \"test\",",
      "368:             \"retcode\": 0,",
      "369:             \"id\": \"test\",",
      "370:             \"fun\": \"cmd.run\",",
      "371:             \"fun_args\": [\"echo test\"],",
      "372:         }",
      "373:     }",
      "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "375:     with patch_roster_file:",
      "376:         client = ssh.SSH(opts)",
      "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
      "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
      "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
      "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "381:     with patch_input, patch_getpass, patch_key_run:",
      "382:         ret = client.key_deploy(host, ssh_ret)",
      "383:     assert mock_key_run.call_args_list[0][0] == (",
      "384:         host,",
      "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
      "386:         True,",
      "387:     )",
      "388:     assert ret == key_run_ret",
      "389:     assert mock_key_run.call_count == 1",
      "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
      "393:     \"\"\"",
      "394:     test \"key_deploy\" function when permission denied",
      "395:     due to not having access to copy the file to the target",
      "396:     We do not want to deploy the key, because this is not",
      "397:     an authentication to the target error.",
      "398:     \"\"\"",
      "399:     host = \"localhost\"",
      "400:     passwd = \"password\"",
      "401:     usr = \"ssh-usr\"",
      "402:     opts[\"ssh_user\"] = usr",
      "403:     opts[\"tgt\"] = host",
      "405:     mock_key_run = MagicMock(return_value=False)",
      "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "408:     ssh_ret = {",
      "409:         \"localhost\": {",
      "410:             \"stdout\": \"\",",
      "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "412:             \"retcode\": 1,",
      "413:         }",
      "414:     }",
      "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "416:     with patch_roster_file:",
      "417:         client = ssh.SSH(opts)",
      "418:     ret = client.key_deploy(host, ssh_ret)",
      "419:     assert ret == ssh_ret",
      "420:     assert mock_key_run.call_count == 0",
      "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
      "424:     \"\"\"",
      "425:     test \"key_deploy\" function when no permission denied",
      "426:     is returned",
      "427:     \"\"\"",
      "428:     host = \"localhost\"",
      "429:     passwd = \"password\"",
      "430:     usr = \"ssh-usr\"",
      "431:     opts[\"ssh_user\"] = usr",
      "432:     opts[\"tgt\"] = host",
      "434:     mock_key_run = MagicMock(return_value=False)",
      "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "436:     ssh_ret = {",
      "437:         \"localhost\": {",
      "438:             \"jid\": \"20230922161937998385\",",
      "439:             \"return\": \"test\",",
      "440:             \"retcode\": 0,",
      "441:             \"id\": \"test\",",
      "442:             \"fun\": \"cmd.run\",",
      "443:             \"fun_args\": [\"echo test\"],",
      "444:         }",
      "445:     }",
      "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "447:     with patch_roster_file:",
      "448:         client = ssh.SSH(opts)",
      "449:     ret = client.key_deploy(host, ssh_ret)",
      "450:     assert ret == ssh_ret",
      "451:     assert mock_key_run.call_count == 0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a05bd144db17bf50bb4e9ac1e97bb10733aae235",
      "candidate_info": {
        "commit_hash": "a05bd144db17bf50bb4e9ac1e97bb10733aae235",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a05bd144db17bf50bb4e9ac1e97bb10733aae235",
        "files": [
          "tests/pytests/integration/ssh/test_pre_flight.py"
        ],
        "message": "Do not run ssh integration tests on windows",
        "before_after_code_files": [
          "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
          "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: Test for ssh_pre_flight roster option",
          "3: \"\"\"",
          "6: import os",
          "7: import pathlib",
          "9: import shutil",
          "10: import subprocess",
          "",
          "[Removed Lines]",
          "5: import grp",
          "8: import pwd",
          "",
          "[Added Lines]",
          "5: try:",
          "6:     import grp",
          "7:     import pwd",
          "8: except ImportError:",
          "9:     # windows stacktraces on import of these modules",
          "10:     pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: import yaml",
          "15: from saltfactories.utils import random_string",
          "18: def _custom_roster(roster_file, roster_data):",
          "19:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: pytestmark = pytest.mark.skip_on_windows(reason=\"Salt-ssh not available on Windows\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0558d6967d6e28bd366dbb47b299e82e18334b4",
      "candidate_info": {
        "commit_hash": "a0558d6967d6e28bd366dbb47b299e82e18334b4",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a0558d6967d6e28bd366dbb47b299e82e18334b4",
        "files": [
          "tools/vm.py"
        ],
        "message": "Fix the security groups selection for developer created VMs\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/vm.py||tools/vm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/vm.py||tools/vm.py": [
          "File: tools/vm.py -> tools/vm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "950:         else:",
          "951:             # This is a developer running",
          "952:             log.info(\"Starting Developer configured VM\")",
          "954:             security_group_filters = [",
          "955:                 {",
          "956:                     \"Name\": \"vpc-id\",",
          "",
          "[Removed Lines]",
          "953:             # Get the develpers security group",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960:                     \"Name\": \"tag:spb:project\",",
          "961:                     \"Values\": [\"salt-project\"],",
          "962:                 },",
          "967:             ]",
          "968:             response = client.describe_security_groups(Filters=security_group_filters)",
          "969:             if not response.get(\"SecurityGroups\"):",
          "",
          "[Removed Lines]",
          "963:                 {",
          "964:                     \"Name\": \"tag:spb:developer\",",
          "965:                     \"Values\": [\"true\"],",
          "966:                 },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "974:                 self.ctx.exit(1)",
          "975:             # Override the launch template network interfaces config",
          "976:             security_group_ids = [sg[\"GroupId\"] for sg in response[\"SecurityGroups\"]]",
          "978:         progress = create_progress_bar()",
          "979:         create_task = progress.add_task(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972:             security_group_filters = [",
          "973:                 {",
          "974:                     \"Name\": \"vpc-id\",",
          "975:                     \"Values\": [vpc.id],",
          "976:                 },",
          "977:                 {",
          "978:                     \"Name\": \"tag:Name\",",
          "979:                     \"Values\": [f\"saltproject-{environment}-client-vpn-remote-access\"],",
          "980:                 },",
          "981:             ]",
          "982:             response = client.describe_security_groups(Filters=security_group_filters)",
          "983:             if not response.get(\"SecurityGroups\"):",
          "984:                 self.ctx.error(",
          "985:                     \"Could not find the right VPN access security group. \"",
          "986:                     f\"Filters:\\n{pprint.pformat(security_group_filters)}\"",
          "987:                 )",
          "988:                 self.ctx.exit(1)",
          "989:             security_group_ids.extend(",
          "990:                 [sg[\"GroupId\"] for sg in response[\"SecurityGroups\"]]",
          "991:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71589535e87e3e326577560fdcb7bd878c47442c",
      "candidate_info": {
        "commit_hash": "71589535e87e3e326577560fdcb7bd878c47442c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/71589535e87e3e326577560fdcb7bd878c47442c",
        "files": [
          "salt/client/ssh/__init__.py"
        ],
        "message": "Remove filename from logs",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025:             except OSError as err:",
          "1026:                 return (",
          "1027:                     \"\",",
          "1029:                     1,",
          "1030:                 )",
          "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
          "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
          "1034:             if retcode != 0:",
          "1035:                 # We could not copy the script to the target",
          "1039:                 return stdout, stderr, retcode",
          "1042:             return self.execute_script(",
          "1043:                 target_script, script_args=self.ssh_pre_flight_args",
          "1044:             )",
          "",
          "[Removed Lines]",
          "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
          "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
          "1036:                 log.error(",
          "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
          "1038:                 )",
          "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
          "",
          "[Added Lines]",
          "1028:                     \"Could not copy pre flight script to temporary path\",",
          "1032:             log.trace(\"Copying the pre flight script to target\")",
          "1036:                 log.error(\"Could not copy the pre flight script to target\")",
          "1039:             log.trace(\"Executing the pre flight script on target\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1423:             shim_tmp_file.name, target_shim_file, makedirs=True",
          "1424:         )",
          "1425:         if retcode != 0:",
          "1427:             return stdout, stderr, retcode",
          "1429:         # Remove our shim file",
          "",
          "[Removed Lines]",
          "1426:             log.error(f\"Could not copy the shim script to target\")",
          "",
          "[Added Lines]",
          "1424:             log.error(\"Could not copy the shim script to target\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1175529e25e3369ab177c82cc25feb83dd59d428",
      "candidate_info": {
        "commit_hash": "1175529e25e3369ab177c82cc25feb83dd59d428",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/1175529e25e3369ab177c82cc25feb83dd59d428",
        "files": [
          ".github/workflows/test-action-macos.yml",
          ".github/workflows/test-action.yml",
          "tools/ci.py"
        ],
        "message": "Write directly to `$GITHUB_OUTPUT`\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/ci.py||tools/ci.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/ci.py||tools/ci.py": [
          "File: tools/ci.py -> tools/ci.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:             if \"macos\" in distro_slug and chunk == \"scenarios\":",
          "634:                 continue",
          "635:             _matrix.append({\"transport\": transport, \"tests-chunk\": chunk})",
          "637:     ctx.exit(0)",
          "",
          "[Removed Lines]",
          "636:     print(json.dumps(_matrix))",
          "",
          "[Added Lines]",
          "637:     ctx.info(\"Generated matrix:\")",
          "638:     ctx.print(_matrix, soft_wrap=True)",
          "640:     github_output = os.environ.get(\"GITHUB_OUTPUT\")",
          "641:     if github_output is not None:",
          "642:         with open(github_output, \"a\", encoding=\"utf-8\") as wfh:",
          "643:             wfh.write(f\"matrix={json.dumps(_matrix)}\\n\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:         ctx.warn(\"The 'GITHUB_OUTPUT' variable is not set.\")",
          "695:     if TYPE_CHECKING:",
          "696:         assert testing_releases",
          "698:     sessions = [",
          "699:         \"install\",",
          "700:     ]",
          "",
          "[Removed Lines]",
          "697:     matrix = []",
          "",
          "[Added Lines]",
          "704:     _matrix = []",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:                 if version < tools.utils.Version(\"3006.0\")",
          "742:             ]",
          "743:         for version in versions:",
          "745:                 {",
          "746:                     \"test-chunk\": session,",
          "747:                     \"version\": version,",
          "748:                 }",
          "749:             )",
          "750:     ctx.info(\"Generated matrix:\")",
          "753:     if github_output is not None:",
          "754:         with open(github_output, \"a\", encoding=\"utf-8\") as wfh:",
          "756:     ctx.exit(0)",
          "",
          "[Removed Lines]",
          "744:             matrix.append(",
          "751:     ctx.print(matrix, soft_wrap=True)",
          "755:             wfh.write(f\"matrix={json.dumps(matrix)}\\n\")",
          "",
          "[Added Lines]",
          "751:             _matrix.append(",
          "757:             if distro_slug.startswith(\"windows\"):",
          "758:                 _matrix[-1][\"pkg-type\"] = pkg_type.upper()",
          "760:     ctx.print(_matrix, soft_wrap=True)",
          "764:             wfh.write(f\"matrix={json.dumps(_matrix)}\\n\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0823ea818ea7b7fbec0f8fdd322ef2ea0706c4b3",
      "candidate_info": {
        "commit_hash": "0823ea818ea7b7fbec0f8fdd322ef2ea0706c4b3",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/0823ea818ea7b7fbec0f8fdd322ef2ea0706c4b3",
        "files": [
          "tests/pytests/unit/fileclient/test_fileclient.py"
        ],
        "message": "Properly mock async method\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py": [
          "File: tests/pytests/unit/fileclient/test_fileclient.py -> tests/pytests/unit/fileclient/test_fileclient.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import salt.utils.files",
          "13: from salt import fileclient",
          "16: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "14: from tests.support.mock import MagicMock, Mock, patch",
          "",
          "[Added Lines]",
          "12: from tests.support.mock import AsyncMock, MagicMock, Mock, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         master_ip=\"localhost\", master_port=minion_opts[\"master_port\"]",
          "126:     )",
          "131:     def mock_dumps(*args):",
          "132:         return b\"meh\"",
          "134:     with fileclient.get_file_client(minion_opts) as client:",
          "135:         # Authenticate must return true",
          "144: def test_cache_skips_makedirs_on_race_condition(client_opts):",
          "",
          "[Removed Lines]",
          "128:     async def mock_auth():",
          "129:         return True",
          "136:         client.auth.authenticate = mock_auth",
          "137:         # Crypticle must return bytes to pass to transport.RequestClient.send",
          "138:         client.auth._crypticle = Mock()",
          "139:         client.auth._crypticle.dumps = mock_dumps",
          "140:         with pytest.raises(salt.exceptions.SaltClientError):",
          "141:             client.file_list()",
          "",
          "[Added Lines]",
          "131:         with patch.object(client.auth, \"authenticate\", AsyncMock(return_value=True)):",
          "132:             # Crypticle must return bytes to pass to transport.RequestClient.send",
          "133:             client.auth._crypticle = Mock()",
          "134:             client.auth._crypticle.dumps = mock_dumps",
          "135:             with pytest.raises(salt.exceptions.SaltClientError):",
          "136:                 client.file_list()",
          "",
          "---------------"
        ]
      }
    }
  ]
}