{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c36bf5ef78a162cefea47ccdaf0d28e01c1426c",
      "candidate_info": {
        "commit_hash": "5c36bf5ef78a162cefea47ccdaf0d28e01c1426c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/5c36bf5ef78a162cefea47ccdaf0d28e01c1426c",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ],
        "message": "[MNG-7312] Revert ThreadLocal approach from MNG-6843 and MNG-7251\n\nRevert \"[MNG-7251] Fix threadLocalArtifactsHolder leaking into cloned project\"\n\nThis reverts commit 4e5b3d55545e5f03f05ac7b0cd1b56689df36201.\n\nRevert \"[MNG-6843] Parallel build fails due to missing JAR artifacts in compilePath\"\n\nThis reverts commit 76d5f0d942f52650d3bdf775b6af42d23d69066b.\n\n===\n\nThis closes #595",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/MavenProject.java||maven-core/src/main/java/org/apache/maven/project/MavenProject.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/MavenProject.java -> maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     private Set<Artifact> resolvedArtifacts;",
          "110:     private Artifact parentArtifact;",
          "112:     private Set<Artifact> pluginArtifacts;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     private ArtifactFilter artifactFilter;",
          "116:     private Set<Artifact> artifacts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     private Artifact artifact;",
          "148:     private Model originalModel;",
          "",
          "[Removed Lines]",
          "146:     private ThreadLocal<ArtifactsHolder> threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "[Added Lines]",
          "155:     private Map<String, Artifact> artifactMap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     public MavenProject()",
          "177:     {",
          "178:         Model model = new Model();",
          "179:         model.setGroupId( EMPTY_PROJECT_GROUP_ID );",
          "180:         model.setArtifactId( EMPTY_PROJECT_ARTIFACT_ID );",
          "181:         model.setVersion( EMPTY_PROJECT_VERSION );",
          "194:     }",
          "196:     public MavenProject( Model model )",
          "",
          "[Removed Lines]",
          "182:         setModel( model );",
          "183:     }",
          "185:     private static ThreadLocal<ArtifactsHolder> newThreadLocalArtifactsHolder()",
          "186:     {",
          "187:         return new ThreadLocal<ArtifactsHolder>()",
          "188:         {",
          "189:             protected ArtifactsHolder initialValue()",
          "190:             {",
          "191:                 return new ArtifactsHolder();",
          "192:             }",
          "193:         };",
          "",
          "[Added Lines]",
          "193:         setModel( model );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696:     public void setArtifacts( Set<Artifact> artifacts )",
          "697:     {",
          "703:     }",
          "",
          "[Removed Lines]",
          "698:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "699:         artifactsHolder.artifacts = artifacts;",
          "702:         artifactsHolder.artifactMap = null;",
          "",
          "[Added Lines]",
          "698:         this.artifacts = artifacts;",
          "701:         artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "713:     public Set<Artifact> getArtifacts()",
          "714:     {",
          "717:         {",
          "719:             {",
          "721:             }",
          "722:             else",
          "723:             {",
          "725:                 for ( Artifact artifact : resolvedArtifacts )",
          "726:                 {",
          "728:                     {",
          "730:                     }",
          "731:                 }",
          "732:             }",
          "733:         }",
          "735:     }",
          "737:     public Map<String, Artifact> getArtifactMap()",
          "738:     {",
          "741:         {",
          "743:         }",
          "745:     }",
          "747:     public void setPluginArtifacts( Set<Artifact> pluginArtifacts )",
          "",
          "[Removed Lines]",
          "715:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "716:         if ( artifactsHolder.artifacts == null )",
          "718:             if ( artifactsHolder.artifactFilter == null || resolvedArtifacts == null )",
          "720:                 artifactsHolder.artifacts = new LinkedHashSet<>();",
          "724:                 artifactsHolder.artifacts = new LinkedHashSet<>( resolvedArtifacts.size() * 2 );",
          "727:                     if ( artifactsHolder.artifactFilter.include( artifact ) )",
          "729:                         artifactsHolder.artifacts.add( artifact );",
          "734:         return artifactsHolder.artifacts;",
          "739:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "740:         if ( artifactsHolder.artifactMap == null )",
          "742:             artifactsHolder.artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );",
          "744:         return artifactsHolder.artifactMap;",
          "",
          "[Added Lines]",
          "714:         if ( artifacts == null )",
          "716:             if ( artifactFilter == null || resolvedArtifacts == null )",
          "718:                 artifacts = new LinkedHashSet<>();",
          "722:                 artifacts = new LinkedHashSet<>( resolvedArtifacts.size() * 2 );",
          "725:                     if ( artifactFilter.include( artifact ) )",
          "727:                         artifacts.add( artifact );",
          "732:         return artifacts;",
          "737:         if ( artifactMap == null )",
          "739:             artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );",
          "741:         return artifactMap;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1186:         {",
          "1187:             throw new UnsupportedOperationException( e );",
          "1188:         }",
          "1191:         clone.deepCopy( this );",
          "1193:         return clone;",
          "",
          "[Removed Lines]",
          "1190:         clone.threadLocalArtifactsHolder = newThreadLocalArtifactsHolder();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1231:         file = project.file;",
          "1232:         basedir = project.basedir;",
          "",
          "[Removed Lines]",
          "1233:         threadLocalArtifactsHolder.set( project.threadLocalArtifactsHolder.get().copy() );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1239:             setDependencyArtifacts( Collections.unmodifiableSet( project.getDependencyArtifacts() ) );",
          "1240:         }",
          "1242:         if ( project.getParentFile() != null )",
          "1243:         {",
          "1244:             parentFile = new File( project.getParentFile().getAbsolutePath() );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237:         if ( project.getArtifacts() != null )",
          "1238:         {",
          "1239:             setArtifacts( Collections.unmodifiableSet( project.getArtifacts() ) );",
          "1240:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1433:     public void setResolvedArtifacts( Set<Artifact> artifacts )",
          "1434:     {",
          "1435:         this.resolvedArtifacts = ( artifacts != null ) ? artifacts : Collections.<Artifact>emptySet();",
          "1439:     }",
          "",
          "[Removed Lines]",
          "1436:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "1437:         artifactsHolder.artifacts = null;",
          "1438:         artifactsHolder.artifactMap = null;",
          "",
          "[Added Lines]",
          "1436:         this.artifacts = null;",
          "1437:         this.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1449:     public void setArtifactFilter( ArtifactFilter artifactFilter )",
          "1450:     {",
          "1455:     }",
          "",
          "[Removed Lines]",
          "1451:         ArtifactsHolder artifactsHolder = threadLocalArtifactsHolder.get();",
          "1452:         artifactsHolder.artifactFilter = artifactFilter;",
          "1453:         artifactsHolder.artifacts = null;",
          "1454:         artifactsHolder.artifactMap = null;",
          "",
          "[Added Lines]",
          "1450:         this.artifactFilter = artifactFilter;",
          "1451:         this.artifacts = null;",
          "1452:         this.artifactMap = null;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1981:     {",
          "1982:         this.projectBuilderConfiguration = projectBuildingRequest;",
          "1983:     }",
          "2000: }",
          "",
          "[Removed Lines]",
          "1985:     private static class ArtifactsHolder",
          "1986:     {",
          "1987:         private ArtifactFilter artifactFilter;",
          "1988:         private Set<Artifact> artifacts;",
          "1989:         private Map<String, Artifact> artifactMap;",
          "1991:         ArtifactsHolder copy()",
          "1992:         {",
          "1993:            ArtifactsHolder copy = new ArtifactsHolder();",
          "1994:            copy.artifactFilter = artifactFilter;",
          "1995:            copy.artifacts = artifacts != null ? new LinkedHashSet<>( artifacts ) : null;",
          "1996:            copy.artifactMap = artifactMap != null ? new LinkedHashMap<>( artifactMap ) : null;",
          "1997:            return copy;",
          "1998:         }",
          "1999:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java||maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java -> maven-core/src/test/java/org/apache/maven/project/MavenProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.io.IOException;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31: import org.apache.maven.model.DependencyManagement;",
          "32: import org.apache.maven.model.Model;",
          "33: import org.apache.maven.model.Parent;",
          "34: import org.apache.maven.model.Profile;",
          "37: public class MavenProjectTest",
          "38:     extends AbstractMavenProjectTestCase",
          "",
          "[Removed Lines]",
          "24: import java.util.Collections;",
          "27: import java.util.Set;",
          "28: import java.util.concurrent.atomic.AtomicReference;",
          "30: import org.apache.maven.artifact.Artifact;",
          "35: import org.mockito.Mockito;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:         assertEquals( \"Base directory is preserved across clone\", projectToClone.getBasedir(), clonedProject.getBasedir() );",
          "194:     }",
          "234:     public void testUndefinedOutputDirectory()",
          "235:         throws Exception",
          "236:     {",
          "",
          "[Removed Lines]",
          "196:     public void testCloneWithArtifacts()",
          "197:         throws InterruptedException",
          "198:     {",
          "199:         Artifact initialArtifact = Mockito.mock( Artifact.class, \"initialArtifact\" );",
          "200:         MavenProject originalProject = new MavenProject();",
          "201:         originalProject.setArtifacts( Collections.singleton( initialArtifact ) );",
          "202:         assertEquals( \"Sanity check: originalProject returns artifact that has just been set\",",
          "203:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "205:         final MavenProject clonedProject = originalProject.clone();",
          "207:         assertEquals( \"Cloned project returns the artifact that was set for the original project\",",
          "208:                       Collections.singleton( initialArtifact ), clonedProject.getArtifacts() );",
          "210:         Artifact anotherArtifact = Mockito.mock( Artifact.class, \"anotherArtifact\" );",
          "211:         clonedProject.setArtifacts( Collections.singleton( anotherArtifact ) );",
          "212:         assertEquals( \"Sanity check: clonedProject returns artifact that has just been set\",",
          "213:                       Collections.singleton( anotherArtifact ), clonedProject.getArtifacts() );",
          "215:         assertEquals( \"Original project returns the artifact that was set initially (not the one for clonedProject)\",",
          "216:                       Collections.singleton( initialArtifact ), originalProject.getArtifacts() );",
          "218:         final AtomicReference<Set<Artifact>> artifactsFromThread = new AtomicReference<>();",
          "219:         Thread thread = new Thread( new Runnable()",
          "220:         {",
          "221:             @Override",
          "222:             public void run()",
          "223:             {",
          "224:                 artifactsFromThread.set( clonedProject.getArtifacts() );",
          "225:             }",
          "226:         } );",
          "227:         thread.start();",
          "228:         thread.join();",
          "230:         assertEquals( \"Another thread does not see the same artifacts\",",
          "231:                       Collections.emptySet(), artifactsFromThread.get() );",
          "232:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8882a9c599013182e42f0c7c321396c23b84dbe0",
      "candidate_info": {
        "commit_hash": "8882a9c599013182e42f0c7c321396c23b84dbe0",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8882a9c599013182e42f0c7c321396c23b84dbe0",
        "files": [
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java"
        ],
        "message": "[MNG-7164] Add constructor MojoExecutionException(Throwable)\n\nThis closes #474",
        "before_after_code_files": [
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java",
          "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java": [
          "File: maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java -> maven-plugin-api/src/main/java/org/apache/maven/plugin/AbstractMojoExecutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         super( message, cause );",
          "42:     }",
          "44:     public String getLongMessage()",
          "45:     {",
          "46:         return longMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     public AbstractMojoExecutionException( Throwable cause )",
          "52:     {",
          "53:         super( cause );",
          "54:     }",
          "",
          "---------------"
        ],
        "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java": [
          "File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java -> maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoExecutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     {",
          "77:         super( message );",
          "78:     }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     public MojoExecutionException( Throwable cause )",
          "88:     {",
          "89:         super( cause );",
          "90:     }",
          "",
          "---------------"
        ],
        "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java||maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java": [
          "File: maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java -> maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoFailureException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     {",
          "66:         super( message, cause );",
          "67:     }",
          "68: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     public MojoFailureException( Throwable cause )",
          "77:     {",
          "78:         super( cause );",
          "79:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b74199ed446c83282ad806afaf962a7f74eac0ea",
      "candidate_info": {
        "commit_hash": "b74199ed446c83282ad806afaf962a7f74eac0ea",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b74199ed446c83282ad806afaf962a7f74eac0ea",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java"
        ],
        "message": "[MNG-7034] StackOverflowError thrown if a cycle exists in BOM imports\n\nThis closes #484",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java||maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java -> maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     @Override",
          "249:     public ModelBuildingResult build( ModelBuildingRequest request )",
          "250:         throws ModelBuildingException",
          "251:     {",
          "253:         DefaultModelBuildingResult result = new DefaultModelBuildingResult();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     {",
          "252:         return build( request, new LinkedHashSet<String>() );",
          "253:     }",
          "255:     @SuppressWarnings( \"checkstyle:methodlength\" )",
          "256:     protected ModelBuildingResult build( ModelBuildingRequest request, Collection<String> importIds )",
          "257:         throws ModelBuildingException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:         if ( !request.isTwoPhaseBuilding() )",
          "429:         {",
          "431:         }",
          "433:         return result;",
          "",
          "[Removed Lines]",
          "430:             build( request, result );",
          "",
          "[Added Lines]",
          "437:             build( request, result, importIds );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1303:                     final ModelBuildingResult importResult;",
          "1304:                     try",
          "1305:                     {",
          "1307:                     }",
          "1308:                     catch ( ModelBuildingException e )",
          "1309:                     {",
          "",
          "[Removed Lines]",
          "1306:                         importResult = build( importRequest );",
          "",
          "[Added Lines]",
          "1313:                         importResult = build( importRequest, importIds );",
          "",
          "---------------"
        ],
        "maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/building/DefaultModelBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.building;",
          "22: import org.apache.maven.model.Dependency;",
          "23: import org.apache.maven.model.Parent;",
          "24: import org.apache.maven.model.Repository;",
          "25: import org.apache.maven.model.resolution.InvalidRepositoryException;",
          "26: import org.apache.maven.model.resolution.ModelResolver;",
          "27: import org.apache.maven.model.resolution.UnresolvableModelException;",
          "28: import org.junit.Test;",
          "30: import static org.junit.Assert.assertNotNull;",
          "35: public class DefaultModelBuilderTest",
          "36: {",
          "38:     private static final String BASE1_ID = \"thegroup:base1:pom\";",
          "39:     private static final String BASE1_ID2 = \"thegroup:base1:1\";",
          "41:     private static final String BASE1 = \"<project>\\n\" +",
          "42:             \"  <modelVersion>4.0.0</modelVersion>\\n\" +",
          "43:             \"  <groupId>thegroup</groupId>\\n\" +",
          "44:             \"  <artifactId>base1</artifactId>\\n\" +",
          "45:             \"  <version>1</version>\\n\" +",
          "46:             \"  <packaging>pom</packaging>\\n\" +",
          "47:             \"  <dependencyManagement>\\n\" +",
          "48:             \"    <dependencies>\\n\" +",
          "49:             \"      <dependency>\\n\" +",
          "50:             \"        <groupId>thegroup</groupId>\\n\" +",
          "51:             \"        <artifactId>base2</artifactId>\\n\" +",
          "52:             \"        <version>1</version>\\n\" +",
          "53:             \"        <type>pom</type>\\n\" +",
          "54:             \"        <scope>import</scope>\\n\" +",
          "55:             \"      </dependency>\\n\" +",
          "56:             \"    </dependencies>\\n\" +",
          "57:             \"  </dependencyManagement>\\n\" +",
          "58:             \"</project>\\n\";",
          "60:     private static final String BASE2_ID = \"thegroup:base2:pom\";",
          "61:     private static final String BASE2_ID2 = \"thegroup:base2:1\";",
          "63:     private static final String BASE2 = \"<project>\\n\" +",
          "64:             \"  <modelVersion>4.0.0</modelVersion>\\n\" +",
          "65:             \"  <groupId>thegroup</groupId>\\n\" +",
          "66:             \"  <artifactId>base2</artifactId>\\n\" +",
          "67:             \"  <version>1</version>\\n\" +",
          "68:             \"  <packaging>pom</packaging>\\n\" +",
          "69:             \"  <dependencyManagement>\\n\" +",
          "70:             \"    <dependencies>\\n\" +",
          "71:             \"      <dependency>\\n\" +",
          "72:             \"        <groupId>thegroup</groupId>\\n\" +",
          "73:             \"        <artifactId>base1</artifactId>\\n\" +",
          "74:             \"        <version>1</version>\\n\" +",
          "75:             \"        <type>pom</type>\\n\" +",
          "76:             \"        <scope>import</scope>\\n\" +",
          "77:             \"      </dependency>\\n\" +",
          "78:             \"    </dependencies>\\n\" +",
          "79:             \"  </dependencyManagement>\\n\" +",
          "80:             \"</project>\\n\";",
          "82:     @Test( expected = ModelBuildingException.class )",
          "83:     public void testCycleInImports()",
          "84:             throws Exception",
          "85:     {",
          "86:         ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();",
          "87:         assertNotNull( builder );",
          "89:         DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();",
          "90:         request.setModelSource( new StringModelSource( BASE1 ) );",
          "91:         request.setModelResolver( new CycleInImportsResolver() );",
          "93:         builder.build( request );",
          "94:     }",
          "96:     static class CycleInImportsResolver extends BaseModelResolver",
          "97:     {",
          "98:         @Override",
          "99:         public ModelSource resolveModel(Dependency dependency) throws UnresolvableModelException",
          "100:         {",
          "101:             switch ( dependency.getManagementKey() )",
          "102:             {",
          "103:                 case BASE1_ID: return new StringModelSource( BASE1 );",
          "104:                 case BASE2_ID: return new StringModelSource( BASE2 );",
          "105:             }",
          "106:             return null;",
          "107:         }",
          "108:     }",
          "110:     static class BaseModelResolver implements ModelResolver",
          "111:     {",
          "112:         @Override",
          "113:         public ModelSource resolveModel( String groupId, String artifactId, String version )",
          "114:                 throws UnresolvableModelException",
          "115:         {",
          "116:             switch ( groupId + \":\" + artifactId + \":\" + version )",
          "117:             {",
          "118:                 case BASE1_ID2: return new StringModelSource( BASE1 );",
          "119:                 case BASE2_ID2: return new StringModelSource( BASE2 );",
          "120:             }",
          "121:             return null;",
          "122:         }",
          "124:         @Override",
          "125:         public ModelSource resolveModel( Parent parent ) throws UnresolvableModelException",
          "126:         {",
          "127:             return null;",
          "128:         }",
          "130:         @Override",
          "131:         public ModelSource resolveModel( Dependency dependency ) throws UnresolvableModelException",
          "132:         {",
          "133:             return null;",
          "134:         }",
          "136:         @Override",
          "137:         public void addRepository( Repository repository ) throws InvalidRepositoryException",
          "138:         {",
          "139:         }",
          "141:         @Override",
          "142:         public void addRepository(Repository repository, boolean replace) throws InvalidRepositoryException",
          "143:         {",
          "144:         }",
          "146:         @Override",
          "147:         public ModelResolver newCopy()",
          "148:         {",
          "149:             return this;",
          "150:         }",
          "151:     }",
          "153: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73f34c00d16c24edb0e5f9d7eb63bc0c730a72d1",
      "candidate_info": {
        "commit_hash": "73f34c00d16c24edb0e5f9d7eb63bc0c730a72d1",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/73f34c00d16c24edb0e5f9d7eb63bc0c730a72d1",
        "files": [
          "apache-maven/pom.xml",
          "apache-maven/src/bin/mvn",
          "apache-maven/src/bin/mvn.cmd",
          "apache-maven/src/lib/jansi-native/README.txt",
          "apache-maven/src/main/assembly/component.xml"
        ],
        "message": "[MNG-7172] Remove expansion of Jansi native libraries",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   -classpath %CLASSWORLDS_JAR% ^",
          "176:   \"-Dclassworlds.conf=%MAVEN_HOME%\\bin\\m2.conf\" ^",
          "177:   \"-Dmaven.home=%MAVEN_HOME%\" ^",
          "179:   \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^",
          "180:   %CLASSWORLDS_LAUNCHER% %MAVEN_CMD_LINE_ARGS%",
          "181: if ERRORLEVEL 1 goto error",
          "",
          "[Removed Lines]",
          "178:   \"-Dlibrary.jansi.path=%MAVEN_HOME%\\lib\\jansi-native\" ^",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f32eb09892686cba083f9f175b3c8eac0ac42ae7",
      "candidate_info": {
        "commit_hash": "f32eb09892686cba083f9f175b3c8eac0ac42ae7",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/f32eb09892686cba083f9f175b3c8eac0ac42ae7",
        "files": [
          "apache-maven/src/bin/mvn",
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-7010] Omit \"NB: JAVA_HOME should point to a JDK not a JRE\"\n\nThis closes #512",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: :checkJCmd",
          "55: if exist \"%JAVACMD%\" goto chkMHome",
          "60: goto error",
          "62: :chkMHome",
          "",
          "[Removed Lines]",
          "57: echo The JAVA_HOME environment variable is not defined correctly >&2",
          "58: echo This environment variable is needed to run this program >&2",
          "59: echo NB: JAVA_HOME should point to a JDK not a JRE >&2",
          "",
          "[Added Lines]",
          "57: echo The JAVA_HOME environment variable is not defined correctly, >&2",
          "58: echo this environment variable is needed to run this program. >&2",
          "",
          "---------------"
        ]
      }
    }
  ]
}