{
  "cve_id": "CVE-2022-23531",
  "cve_desc": "GuardDog is a CLI tool to identify malicious PyPI packages. Versions prior to 0.1.5 are vulnerable to Relative Path Traversal when scanning a specially-crafted local PyPI package. Running GuardDog against a specially-crafted package can allow an attacker to write an arbitrary file on the machine where GuardDog is executed due to a path traversal vulnerability when extracting the .tar.gz file of the package being scanned, which exists by design in the tarfile.TarFile.extractall function. This issue is patched in version 0.1.5.",
  "repo": "DataDog/guarddog",
  "patch_hash": "98af5c8c1e9c15fa888c900252e76116b0ec25d1",
  "patch_info": {
    "commit_hash": "98af5c8c1e9c15fa888c900252e76116b0ec25d1",
    "repo": "DataDog/guarddog",
    "commit_url": "https://github.com/DataDog/guarddog/commit/98af5c8c1e9c15fa888c900252e76116b0ec25d1",
    "files": [
      "guarddog/scanners/package_scanner.py",
      "poetry.lock",
      "pyproject.toml",
      "requirements.txt"
    ],
    "message": "Use tarsafe instead of built-in tarfile to extract archives (#89)\n\n* Use tarsafe instead of built-in tarfile to extract archives\n\n* Bump down Semgrep version to 0.112.1\n\nSee also https://github.com/returntocorp/semgrep/issues/6631",
    "before_after_code_files": [
      "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
      "poetry.lock||poetry.lock"
    ]
  },
  "patch_diff": {
    "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py": [
      "File: guarddog/scanners/package_scanner.py -> guarddog/scanners/package_scanner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import os",
      "3: import shutil",
      "4: import sys",
      "6: import tempfile",
      "7: import requests",
      "",
      "[Removed Lines]",
      "5: import tarfile",
      "",
      "[Added Lines]",
      "5: import tarsafe",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:         if os.path.exists(path):",
      "45:             if path.endswith('.tar.gz'):",
      "46:                 with tempfile.TemporaryDirectory() as tmpdirname:",
      "48:                     return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)",
      "49:             elif os.path.isdir(path):",
      "50:                 return self.analyzer.analyze_sourcecode(path, rules=rules)",
      "",
      "[Removed Lines]",
      "47:                     tarfile.open(path).extractall(tmpdirname)",
      "",
      "[Added Lines]",
      "47:                     tarsafe.open(path).extractall(tmpdirname)",
      "",
      "---------------"
    ],
    "poetry.lock||poetry.lock": [
      "File: poetry.lock -> poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "477: [[package]]",
      "478: name = \"semgrep\"",
      "480: description = \"Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.\"",
      "481: category = \"main\"",
      "482: optional = false",
      "",
      "[Removed Lines]",
      "479: version = \"0.122.0\"",
      "",
      "[Added Lines]",
      "479: version = \"0.112.1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "496: python-lsp-jsonrpc = \">=1.0.0,<1.1.0\"",
      "497: requests = \">=2.22,<3.0\"",
      "498: \"ruamel.yaml\" = \">=0.16.0,<0.18\"",
      "500: tqdm = \">=4.46,<5.0\"",
      "501: typing-extensions = \">=4.2,<5.0\"",
      "502: urllib3 = \">=1.26,<2.0\"",
      "",
      "[Removed Lines]",
      "499: tomli = \">=2.0.1,<2.1.0\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "526: optional = false",
      "527: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"",
      "529: [[package]]",
      "530: name = \"termcolor\"",
      "531: version = \"2.1.1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "528: [[package]]",
      "529: name = \"tarsafe\"",
      "530: version = \"0.0.4\"",
      "531: description = \"A safe subclass of the TarFile class for interacting with tar files. Can be used as a direct drop-in replacement for safe usage of extractall()\"",
      "532: category = \"main\"",
      "533: optional = false",
      "534: python-versions = \">=3.6\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "618: [metadata]",
      "619: lock-version = \"1.1\"",
      "620: python-versions = \">=3.9, <4\"",
      "623: [metadata.files]",
      "624: attrs = [",
      "",
      "[Removed Lines]",
      "621: content-hash = \"a2ee2a3bf8cdebfd91939977044d2a626e5b54500965da9d66a70c3c9b71ca2c\"",
      "",
      "[Added Lines]",
      "628: content-hash = \"0faf892801caefce1e994f6fdee7254ac4e2e95ad947d7459b75113af80eed74\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "867:     {file = \"ruamel.yaml.clib-0.2.7.tar.gz\", hash = \"sha256:1f08fd5a2bea9c4180db71678e850b995d2a5f4537be0e94557668cf0f5f9497\"},",
      "868: ]",
      "869: semgrep = [",
      "874: ]",
      "875: setuptools = [",
      "876:     {file = \"setuptools-65.6.3-py3-none-any.whl\", hash = \"sha256:57f6f22bde4e042978bcd50176fdb381d7c21a9efa4041202288d3737a0c6a54\"},",
      "",
      "[Removed Lines]",
      "870:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:c7002b9aba97deb6677f4cabfa5dcc8faef2808ce6a6f28ecdd70cd8e90b01b5\"},",
      "871:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:e3fb9956e2bb926cfeff52deafe4cec24d5f1e91fe6d3fc4f81e86ec452b2ad5\"},",
      "872:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:6116391b0c8c87581d9d72113702b6f8c2938d799cdae7d71a845ec89249566c\"},",
      "873:     {file = \"semgrep-0.122.0.tar.gz\", hash = \"sha256:a4c7400eb8bec9fe8df25520d1ffcb5d78b87c73dc654f1c2aec1195789bc611\"},",
      "",
      "[Added Lines]",
      "877:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:2a62bc6321d371dadc41df2c68678e87df807ddfa3d1faafb40bd0998abfe503\"},",
      "878:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:b690a84cbaa6a4670ff6c11a674818b8ad99736e89520a3c47d1542cc45e6d05\"},",
      "879:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:bc2437f12e41ac5e28a303e463098565a3d948c7744f6745bdb0fea341ccdae1\"},",
      "880:     {file = \"semgrep-0.112.1.tar.gz\", hash = \"sha256:2140a0fd16f3ac0a0e330980613ba65fe58faea7808a965e219c4199bab96102\"},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "880:     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},",
      "881:     {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},",
      "882: ]",
      "883: termcolor = [",
      "884:     {file = \"termcolor-2.1.1-py3-none-any.whl\", hash = \"sha256:fa852e957f97252205e105dd55bbc23b419a70fec0085708fc0515e399f304fd\"},",
      "885:     {file = \"termcolor-2.1.1.tar.gz\", hash = \"sha256:67cee2009adc6449c650f6bcf3bdeed00c8ba53a8cda5362733c53e0a39fb70b\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "890: tarsafe = [",
      "891:     {file = \"tarsafe-0.0.4-py3-none-any.whl\", hash = \"sha256:12903a81f2612c09d22117115301ea510944af5caa1e358636e0fc1d0e6134df\"},",
      "892:     {file = \"tarsafe-0.0.4.tar.gz\", hash = \"sha256:a376f4138005298c11c30cb60a5081fa2c09f44384c966106fbaeee3059e9ec5\"},",
      "893: ]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fab6f964209154c40ad031d1e944ada34419b5e4",
      "candidate_info": {
        "commit_hash": "fab6f964209154c40ad031d1e944ada34419b5e4",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/fab6f964209154c40ad031d1e944ada34419b5e4",
        "files": [
          "guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/analyzer/sourcecode/cmd-overwrite.yml",
          "guarddog/analyzer/sourcecode/code-execution.yml",
          "guarddog/analyzer/sourcecode/download-executable.yml",
          "guarddog/analyzer/sourcecode/exfiltrate-sensitive-data.yml",
          "guarddog/analyzer/sourcecode/shady-links.yml",
          "guarddog/cli.py",
          "guarddog/scanners/project_scanner.py",
          "poetry.lock",
          "pyproject.toml",
          "tests/analyzer/metadata/test_empty_information.py",
          "tests/analyzer/metadata/test_potentially_compromised_email_domain.py",
          "tests/analyzer/metadata/test_typosquatting.py"
        ],
        "message": "Reformat code to allow for a nice output",
        "before_after_code_files": [
          "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/cli.py||guarddog/cli.py",
          "guarddog/scanners/project_scanner.py||guarddog/scanners/project_scanner.py",
          "poetry.lock||poetry.lock",
          "tests/analyzer/metadata/test_empty_information.py||tests/analyzer/metadata/test_empty_information.py",
          "tests/analyzer/metadata/test_potentially_compromised_email_domain.py||tests/analyzer/metadata/test_potentially_compromised_email_domain.py",
          "tests/analyzer/metadata/test_typosquatting.py||tests/analyzer/metadata/test_typosquatting.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py": [
          "File: guarddog/analyzer/analyzer.py -> guarddog/analyzer/analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         sourcecode_results = None",
          "83:         # populate results, errors, and number of issues",
          "88:             sourcecode_rules = set()",
          "89:             metadata_rules = set()",
          "",
          "[Removed Lines]",
          "84:         if rules is None:",
          "85:             metadata_results = self.analyze_metadata(info)",
          "86:             sourcecode_results = self.analyze_sourcecode(path)",
          "87:         else:",
          "",
          "[Added Lines]",
          "83:         metadata_rules = None",
          "84:         sourcecode_rules = None",
          "85:         if rules is not None:",
          "86:             # Only run specific rules",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:                 else:",
          "97:                     raise Exception(f\"{rule} is not a valid rule.\")",
          "102:         # Concatenate dictionaries together",
          "103:         issues = metadata_results[\"issues\"] + sourcecode_results[\"issues\"]",
          "",
          "[Removed Lines]",
          "99:             metadata_results = self.analyze_metadata(info, metadata_rules)",
          "100:             sourcecode_results = self.analyze_sourcecode(path, sourcecode_rules)",
          "",
          "[Added Lines]",
          "98:         metadata_results = self.analyze_metadata(info, metadata_rules)",
          "99:         sourcecode_results = self.analyze_sourcecode(path, sourcecode_rules)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:         for rule in all_rules:",
          "127:             try:",
          "131:             except Exception as e:",
          "132:                 errors[rule] = str(e)",
          "",
          "[Removed Lines]",
          "128:                 rule_results = self.metadata_detectors[rule].detect(info)",
          "129:                 issues += bool(rule_results)  # only True if results nonempty",
          "130:                 results[rule] = rule_results",
          "",
          "[Added Lines]",
          "128:                 rule_matches, message = self.metadata_detectors[rule].detect(info)",
          "129:                 if rule_matches:",
          "130:                     issues += 1",
          "131:                     results[rule] = message",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:         issues = 0",
          "154:         if rules is None:",
          "155:             response = invoke_semgrep(Path(self.sourcecode_path), [targetpath], exclude=self.exclude, no_git_ignore=True)",
          "156:             rule_results = self._format_semgrep_response(response, targetpath=targetpath)",
          "157:             issues += len(rule_results)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:             # No rule specified, run all rules",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:                 file_path = os.path.relpath(file_path, targetpath)",
          "212:             location = file_path + \":\" + str(line)",
          "219:         return results",
          "",
          "[Removed Lines]",
          "214:             if rule_name not in results:",
          "215:                 results[rule_name] = {location: self.trim_code_snippet(code_snippet)}",
          "216:             else:",
          "217:                 results[rule_name][location] = self.trim_code_snippet(code_snippet)",
          "",
          "[Added Lines]",
          "215:             code = self.trim_code_snippet(code_snippet)",
          "217:             if rule_name not in result:",
          "218:                 results[rule_name] = []",
          "219:                 results[rule_name].append({",
          "220:                     'location': location,",
          "221:                     'code': code,",
          "222:                     'message': result[\"extra\"][\"message\"]",
          "223:                 })",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py": [
          "File: guarddog/analyzer/metadata/detector.py -> guarddog/analyzer/metadata/detector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:     def __init__(self) -> None:",
          "3:         pass",
          "",
          "[Removed Lines]",
          "5:     def detect(self, package_info) -> list | bool:",
          "6:         pass",
          "",
          "[Added Lines]",
          "5:     # returns (ruleMatches, message)",
          "6:     def detect(self, package_info) -> tuple[bool, str]:",
          "7:         pass",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py": [
          "File: guarddog/analyzer/metadata/empty_information.py -> guarddog/analyzer/metadata/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     \"\"\"",
          "15:     def __init__(self) -> None:",
          "19:         \"\"\"",
          "20:         Uses a package's information from PyPI's JSON API to determine",
          "21:         if the package has an empty description",
          "",
          "[Removed Lines]",
          "16:         super(Detector)",
          "18:     def detect(self, package_info) -> bool:",
          "",
          "[Added Lines]",
          "16:         super()",
          "18:     def detect(self, package_info) -> tuple[bool, str]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         \"\"\"",
          "31:         sanitized_description = package_info[\"info\"][\"description\"].strip()",
          "",
          "[Removed Lines]",
          "32:         return len(sanitized_description) == 0",
          "",
          "[Added Lines]",
          "32:         return len(sanitized_description) == 0, 'This package has an empty description on PyPi'",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py": [
          "File: guarddog/analyzer/metadata/potentially_compromised_email_domain.py -> guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: class PotentiallyCompromisedEmailDomainDetector(Detector):",
          "16:     \"\"\"",
          "18:     reregistered before the most recent package released",
          "20:     Args:",
          "",
          "[Removed Lines]",
          "17:     Detector for compromised email dommain attacks. Checks if the author's email domain was",
          "",
          "[Added Lines]",
          "17:     Detector for compromised email domain attacks. Checks if the author's email domain was",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     \"\"\"",
          "24:     def __init__(self) -> None:",
          "27:     def _get_domain_creation_date(self, email_domain) -> tuple[datetime, bool]:",
          "28:         \"\"\"",
          "",
          "[Removed Lines]",
          "25:         super(Detector)",
          "",
          "[Added Lines]",
          "25:         super()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:                 release_date = parser.isoparse(upload_time_text).replace(tzinfo=None)",
          "82:                 return release_date",
          "85:         \"\"\"",
          "86:         Uses a package's information from PyPI's JSON API to determine",
          "87:         if the package's email domain might have been compromised",
          "",
          "[Removed Lines]",
          "84:     def detect(self, package_info) -> bool:",
          "",
          "[Added Lines]",
          "84:     def detect(self, package_info) -> tuple[bool, str]:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         if email is None or len(email) == 0:",
          "107:             # No e-mail is set for this package, hence no risk",
          "110:         sanitized_email = email.strip().replace(\">\", \"\").replace(\"<\", \"\")",
          "111:         email_domain = sanitized_email.split(\"@\")[-1]",
          "",
          "[Removed Lines]",
          "108:             return False",
          "",
          "[Added Lines]",
          "108:             return False, \"No e-mail found for this package\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:         latest_project_release = self._get_project_latest_release_date(releases)",
          "114:         domain_creation_date, domain_exists = self._get_domain_creation_date(email_domain)",
          "115:         if not domain_exists:",
          "117:         if domain_creation_date is None:",
          "",
          "[Removed Lines]",
          "116:             return True",
          "118:             return False",
          "119:         return latest_project_release < domain_creation_date",
          "",
          "[Added Lines]",
          "116:             return True, \"The maintainer's email domain does not exist and can likely be registered by an attacker to compromise the maintainer's PyPi account\"",
          "118:             return False, \"No e-mail domain creation date found\"",
          "119:         return latest_project_release < domain_creation_date, \"The domain name of the maintainer's email address was re-registered after the latest release of this package. This can be an indicator that this is a custom domain that expired, and was leveraged by an attacker to compromise the package owner's PyPi account.\"",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py": [
          "File: guarddog/analyzer/metadata/typosquatting.py -> guarddog/analyzer/metadata/typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:             normalized_name = name.lower().replace(\"_\", \"-\")",
          "31:             self.popular_packages.append(normalized_name)",
          "35:     def _get_top_packages(self) -> list:",
          "36:         \"\"\"",
          "",
          "[Removed Lines]",
          "33:         super(Detector)",
          "",
          "[Added Lines]",
          "33:         super()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:         return typosquatted",
          "243:         \"\"\"",
          "244:         Uses a package's information from PyPI's JSON API to determine the",
          "245:         package is attempting a typosquatting attack",
          "",
          "[Removed Lines]",
          "242:     def detect(self, package_info) -> list[str]:",
          "",
          "[Added Lines]",
          "242:     def detect(self, package_info) -> tuple[bool, str]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:             list[str]: names of packages that <package_name> could be",
          "253:             typosquatting from",
          "254:         \"\"\"",
          "",
          "[Removed Lines]",
          "256:         return self.get_typosquatted_package(package_info[\"info\"][\"name\"])",
          "",
          "[Added Lines]",
          "255:         similar_package_names = self.get_typosquatted_package(package_info[\"info\"][\"name\"])",
          "256:         if len(similar_package_names) > 0:",
          "257:             return True, \"This package closely ressembles the following package names, and might be a typosquatting attempt: \" + \", \".join(similar_package_names)",
          "259:         return False,  None",
          "",
          "---------------"
        ],
        "guarddog/cli.py||guarddog/cli.py": [
          "File: guarddog/cli.py -> guarddog/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import os",
          "9: import re",
          "10: from pprint import pprint",
          "12: import click",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from termcolor import colored",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: @cli.command(\"verify\")",
          "29: @click.argument(\"path\")",
          "33:     \"\"\"Verify a requirements.txt file",
          "35:     Args:",
          "36:         path (str): path to requirements.txt file",
          "38:     \"\"\"",
          "39:     scanner = RequirementsScanner()",
          "53: @cli.command(\"scan\")",
          "",
          "[Removed Lines]",
          "30: @click.option(\"-o\", \"--output-file\", default=None, type=click.Path(exists=False))",
          "31: @click.option(\"-q\", \"--quiet\", default=False)",
          "32: def verify(path, output_file, quiet):",
          "37:         output_file (str): path to output file",
          "40:     results = scanner.scan_local(path, quiet)",
          "42:     if output_file:",
          "43:         basedir = os.path.dirname(output_file)",
          "44:         is_basedir_exist = os.path.exists(basedir)",
          "46:         if not is_basedir_exist:",
          "47:             os.makedirs(basedir)",
          "49:         with open(output_file, \"w+\") as f:",
          "50:             json.dump(results, f, ensure_ascii=False, indent=4)",
          "",
          "[Added Lines]",
          "31: def verify(path):",
          "38:     results = scanner.scan_local(path)",
          "39:     for result in results:",
          "40:         identifier = result['dependency'] if result['version'] is None else f\"{result['dependency']} version {result['version']}\"",
          "41:         print_scan_results(result.get('result'), identifier)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     else:",
          "75:         results = scanner.scan_remote(identifier, version, rule_param)",
          "79: # Determines if the input passed to the 'scan' command is a local package name",
          "80: def is_local_package(input):",
          "81:     identifier_is_path = re.search(r\"(.{0,2}\\/)+.+\", input)",
          "",
          "[Removed Lines]",
          "77:     pprint(results)",
          "82:     return identifier_is_path or input.endswith('.tar.gz')",
          "",
          "[Added Lines]",
          "68:     print_scan_results(results, identifier)",
          "76: # Pretty prints scan results for the console",
          "77: def print_scan_results(results, identifier):",
          "78:     num_issues = results.get('issues')",
          "79:     if num_issues == 0:",
          "80:         print(\"Found \" + colored('0 potentially malicious indicators', 'green', attrs=['bold']) + \" scanning \" + colored(identifier, None, attrs=['bold']))",
          "81:         return",
          "83:     print(\"Found \" + colored(str(num_issues) + ' potentially malicious indicators', 'red', attrs=['bold']) + \" in \" + colored(identifier, None, attrs=['bold']))",
          "84:     print()",
          "86:     results = results.get('results', [])",
          "87:     for finding in results:",
          "88:         description = results[finding]",
          "89:         if type(description) == str: # package metadata",
          "90:             print(colored(finding, None, attrs=['bold']) + ': ' + description)",
          "91:             print()",
          "92:         elif type(description) == list: # semgrep rule result:",
          "93:             source_code_findings = description",
          "94:             print(colored(finding, None, attrs=['bold']) + ': found ' + str(len(source_code_findings)) + ' source code matches')",
          "95:             for finding in source_code_findings:",
          "96:                 print('  * ' + finding['message'] + ' at ' + finding['location'] + '\\n    ' + format_code_line_for_output(finding['code']))",
          "97:             print()",
          "98: def format_code_line_for_output(code):",
          "99:     return '    ' + colored(code.strip().replace('\\n', '\\n    ').replace('\\t', '  '), None, 'on_red', attrs=['bold'])",
          "",
          "---------------"
        ],
        "guarddog/scanners/project_scanner.py||guarddog/scanners/project_scanner.py": [
          "File: guarddog/scanners/project_scanner.py -> guarddog/scanners/project_scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         return dependencies",
          "152:         \"\"\"",
          "153:         Reads the requirements.txt file and scans each possible",
          "154:         dependency and version",
          "156:         Args:",
          "157:             requirements (str): contents of requirements.txt file",
          "160:         Returns:",
          "161:             dict: mapping of dependencies to scan results",
          "",
          "[Removed Lines]",
          "151:     def scan_requirements(self, requirements, quiet=False):",
          "158:             quiet (bool, optional): flag to print results. Defaults to False",
          "",
          "[Added Lines]",
          "151:     def scan_requirements(self, requirements):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:                 ...",
          "173:             }",
          "174:         \"\"\"",
          "177:             result = self.package_scanner.scan_remote(dependency, version)",
          "184:         dependencies = self.parse_requirements(requirements)",
          "186:         params = []",
          "187:         for dependency, versions in dependencies.items():",
          "191:         pool = pathos.helpers.mp.Pool()",
          "192:         project_results = pool.starmap(get_package_results, params)",
          "194:         return project_results",
          "197:         \"\"\"",
          "198:         Scans a local requirements.txt file",
          "200:         Args:",
          "201:             path (str): path to requirements.txt file",
          "204:         Returns:",
          "205:             dict: mapping of dependencies to scan results",
          "",
          "[Removed Lines]",
          "176:         def get_package_results_helper(dependency, version, quiet):",
          "179:             if not quiet:",
          "180:                 sys.stdout.write(f\"\\n {dependency}/{version} \\n\")",
          "181:                 pprint(result)",
          "183:         get_package_results = functools.partial(get_package_results_helper, quiet=quiet)",
          "188:             for version in versions:",
          "189:                 params.append((dependency, version))",
          "196:     def scan_local(self, path, quiet=False):",
          "202:             quiet (bool, optional): flag to print results. Defaults to False.",
          "",
          "[Added Lines]",
          "174:         def get_package_results_helper(dependency, version):",
          "176:             return {'dependency': dependency, 'version': version, 'result': result}",
          "178:         get_package_results = functools.partial(get_package_results_helper)",
          "182:             if versions is None:",
          "183:                 params.append((dependency, None)) # this will cause scan_remote to use the latest version",
          "184:             else:",
          "185:                 for version in versions:",
          "186:                     params.append((dependency, version))",
          "192:     def scan_local(self, path):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:         try:",
          "221:             with open(path, \"r\") as f:",
          "223:         except Exception as e:",
          "224:             sys.stdout.write(f\"Received {e}\")",
          "225:             sys.exit(255)",
          "228:         \"\"\"",
          "229:         Scans remote requirements.txt file",
          "231:         Args:",
          "232:             url (str): url of the Github repo",
          "233:             branch (str): branch containing requirements.txt",
          "235:             requirements_name (str, optional): name of requirements file.",
          "236:                 Defaults to \"requirements.txt\".",
          "",
          "[Removed Lines]",
          "222:                 return self.scan_requirements(f.readlines(), quiet)",
          "227:     def scan_remote(self, url, branch, quiet=False, requirements_name=\"requirements.txt\"):",
          "234:             quiet (bool, optional): flag to print results. Defaults to False.",
          "",
          "[Added Lines]",
          "217:                 return self.scan_requirements(f.readlines())",
          "222:     def scan_remote(self, url, branch, requirements_name=\"requirements.txt\"):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:         resp = requests.get(url=req_url, auth=token)",
          "260:         if resp.status_code == 200:",
          "262:         else:",
          "263:             sys.stdout.write(f\"{req_url} does not exist. Check your link or branch name.\")",
          "264:             sys.exit(255)",
          "",
          "[Removed Lines]",
          "261:             return self.scan_requirements(resp.content.decode().splitlines(), quiet)",
          "",
          "[Added Lines]",
          "255:             return self.scan_requirements(resp.content.decode().splitlines())",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"",
          "17: [package.extras]",
          "23: [[package]]",
          "24: name = \"boltons\"",
          "",
          "[Removed Lines]",
          "18: dev = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"six\", \"mypy\", \"pytest-mypy-plugins\", \"zope.interface\", \"furo\", \"sphinx\", \"sphinx-notfound-page\", \"pre-commit\", \"cloudpickle\"]",
          "19: docs = [\"furo\", \"sphinx\", \"zope.interface\", \"sphinx-notfound-page\"]",
          "20: tests = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"six\", \"mypy\", \"pytest-mypy-plugins\", \"zope.interface\", \"cloudpickle\"]",
          "21: tests_no_zope = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"six\", \"mypy\", \"pytest-mypy-plugins\", \"cloudpickle\"]",
          "",
          "[Added Lines]",
          "18: dev = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"furo\", \"hypothesis\", \"mypy\", \"pre-commit\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"sphinx\", \"sphinx-notfound-page\", \"zope.interface\"]",
          "19: docs = [\"furo\", \"sphinx\", \"sphinx-notfound-page\", \"zope.interface\"]",
          "20: tests = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"zope.interface\"]",
          "21: tests-no-zope = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\"]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: python-versions = \">=3.6.0\"",
          "55: [package.extras]",
          "58: [[package]]",
          "59: name = \"click\"",
          "",
          "[Removed Lines]",
          "56: unicode_backport = [\"unicodedata2\"]",
          "",
          "[Added Lines]",
          "56: unicode-backport = [\"unicodedata2\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: Click = \">=7.0,<9\"",
          "80: [package.extras]",
          "84: [[package]]",
          "85: name = \"colorama\"",
          "",
          "[Removed Lines]",
          "81: tests = [\"coveralls\", \"pytest-cov\", \"pytest\", \"coverage (<6)\"]",
          "82: docs = [\"m2r\", \"pallets-sphinx-themes\", \"sphinx (>=2.3,<3)\"]",
          "",
          "[Added Lines]",
          "81: docs = [\"Pallets-Sphinx-Themes\", \"m2r\", \"sphinx (>=2.3,<3)\"]",
          "82: tests = [\"coverage (<6)\", \"coveralls\", \"pytest\", \"pytest-cov\"]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172: face = \">=20.1.0\"",
          "174: [package.extras]",
          "177: [[package]]",
          "178: name = \"idna\"",
          "",
          "[Removed Lines]",
          "175: yaml = [\"pyyaml\"]",
          "",
          "[Added Lines]",
          "175: yaml = [\"PyYAML\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "283: python-versions = \">=3.7\"",
          "285: [package.extras]",
          "289: [[package]]",
          "290: name = \"pluggy\"",
          "",
          "[Removed Lines]",
          "286: docs = [\"furo (>=2021.7.5b38)\", \"proselint (>=0.10.2)\", \"sphinx-autodoc-typehints (>=1.12)\", \"sphinx (>=4)\"]",
          "287: test = [\"appdirs (==1.4.4)\", \"pytest-cov (>=2.7)\", \"pytest-mock (>=3.6)\", \"pytest (>=6)\"]",
          "",
          "[Added Lines]",
          "286: docs = [\"furo (>=2021.7.5b38)\", \"proselint (>=0.10.2)\", \"sphinx (>=4)\", \"sphinx-autodoc-typehints (>=1.12)\"]",
          "287: test = [\"appdirs (==1.4.4)\", \"pytest (>=6)\", \"pytest-cov (>=2.7)\", \"pytest-mock (>=3.6)\"]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295: python-versions = \">=3.6\"",
          "297: [package.extras]",
          "301: [[package]]",
          "302: name = \"pox\"",
          "",
          "[Removed Lines]",
          "298: testing = [\"pytest-benchmark\", \"pytest\"]",
          "299: dev = [\"tox\", \"pre-commit\"]",
          "",
          "[Added Lines]",
          "298: dev = [\"pre-commit\", \"tox\"]",
          "299: testing = [\"pytest\", \"pytest-benchmark\"]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "353: python-versions = \">=3.6.8\"",
          "355: [package.extras]",
          "358: [[package]]",
          "359: name = \"pyrsistent\"",
          "",
          "[Removed Lines]",
          "356: diagrams = [\"railroad-diagrams\", \"jinja2\"]",
          "",
          "[Added Lines]",
          "356: diagrams = [\"jinja2\", \"railroad-diagrams\"]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "418: ujson = \">=3.0.0\"",
          "420: [package.extras]",
          "423: [[package]]",
          "424: name = \"python-whois\"",
          "",
          "[Removed Lines]",
          "421: test = [\"coverage\", \"pytest-cov\", \"pytest\", \"pyflakes\", \"pycodestyle\", \"pylint\"]",
          "",
          "[Added Lines]",
          "421: test = [\"coverage\", \"pycodestyle\", \"pyflakes\", \"pylint\", \"pytest\", \"pytest-cov\"]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "459: [package.extras]",
          "460: socks = [\"PySocks (>=1.5.6,!=1.5.7)\"]",
          "463: [[package]]",
          "464: name = \"ruamel.yaml\"",
          "",
          "[Removed Lines]",
          "461: use_chardet_on_py3 = [\"chardet (>=3.0.2,<6)\"]",
          "",
          "[Added Lines]",
          "461: use-chardet-on-py3 = [\"chardet (>=3.0.2,<6)\"]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "518: optional = false",
          "519: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"",
          "521: [[package]]",
          "522: name = \"tomli\"",
          "523: version = \"2.0.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521: [[package]]",
          "522: name = \"termcolor\"",
          "523: version = \"2.1.0\"",
          "524: description = \"ANSI color formatting for output in terminal\"",
          "525: category = \"main\"",
          "526: optional = false",
          "527: python-versions = \">=3.7\"",
          "529: [package.extras]",
          "530: tests = [\"pytest\", \"pytest-cov\"]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "568: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4\"",
          "570: [package.extras]",
          "573: socks = [\"PySocks (>=1.5.6,!=1.5.7,<2.0)\"]",
          "575: [[package]]",
          "",
          "[Removed Lines]",
          "571: brotli = [\"brotlicffi (>=0.8.0)\", \"brotli (>=1.0.9)\", \"brotlipy (>=0.6.0)\"]",
          "572: secure = [\"pyOpenSSL (>=0.14)\", \"cryptography (>=1.3.4)\", \"idna (>=2.0.0)\", \"certifi\", \"ipaddress\"]",
          "",
          "[Added Lines]",
          "582: brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\", \"brotlipy (>=0.6.0)\"]",
          "583: secure = [\"certifi\", \"cryptography (>=1.3.4)\", \"idna (>=2.0.0)\", \"ipaddress\", \"pyOpenSSL (>=0.14)\"]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "599: [metadata]",
          "600: lock-version = \"1.1\"",
          "601: python-versions = \">=3.10, <4\"",
          "604: [metadata.files]",
          "605: atomicwrites = [",
          "",
          "[Removed Lines]",
          "602: content-hash = \"b4693ea81ef66e5400757282f204ff7a12cd21b7d742ca0f0579f27a1f5a330f\"",
          "",
          "[Added Lines]",
          "613: content-hash = \"e873e8f4a01c7694c53abc7954920de1e33e54072478a105e52954ef44b81d54\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "823: ]",
          "824: \"ruamel.yaml.clib\" = [",
          "825:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:6e7be2c5bcb297f5b82fee9c665eb2eb7001d1050deaba8471842979293a80b0\"},",
          "826:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:221eca6f35076c6ae472a531afa1c223b9c29377e62936f61bc8e6e8bdc5f9e7\"},",
          "827:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-win32.whl\", hash = \"sha256:1070ba9dd7f9370d0513d649420c3b362ac2d687fe78c6e888f5b12bf8bc7bee\"},",
          "828:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-win_amd64.whl\", hash = \"sha256:77df077d32921ad46f34816a9a16e6356d8100374579bc35e15bab5d4e9377de\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "837:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-manylinux2014_aarch64.whl\", hash = \"sha256:066f886bc90cc2ce44df8b5f7acfc6a7e2b2e672713f027136464492b0c34d7c\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "832:     {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-win_amd64.whl\", hash = \"sha256:de9c6b8a1ba52919ae919f3ae96abb72b994dd0350226e28f3686cb4f142165c\"},",
          "833:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:d67f273097c368265a7b81e152e07fb90ed395df6e552b9fa858c6d2c9f42502\"},",
          "834:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:72a2b8b2ff0a627496aad76f37a652bcef400fd861721744201ef1b45199ab78\"},",
          "835:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-win32.whl\", hash = \"sha256:9efef4aab5353387b07f6b22ace0867032b900d8e91674b5d8ea9150db5cae94\"},",
          "836:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-win_amd64.whl\", hash = \"sha256:846fc8336443106fe23f9b6d6b8c14a53d38cef9a375149d61f99d78782ea468\"},",
          "837:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:0847201b767447fc33b9c235780d3aa90357d20dd6108b92be544427bea197dd\"},",
          "838:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:78988ed190206672da0f5d50c61afef8f67daa718d614377dcd5e3ed85ab4a99\"},",
          "839:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-win32.whl\", hash = \"sha256:a49e0161897901d1ac9c4a79984b8410f450565bbad64dbfcbf76152743a0cdb\"},",
          "840:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-win_amd64.whl\", hash = \"sha256:bf75d28fa071645c529b5474a550a44686821decebdd00e21127ef1fd566eabe\"},",
          "841:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a32f8d81ea0c6173ab1b3da956869114cae53ba1e9f72374032e33ba3118c233\"},",
          "842:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:7f7ecb53ae6848f959db6ae93bdff1740e651809780822270eab111500842a84\"},",
          "843:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-win32.whl\", hash = \"sha256:89221ec6d6026f8ae859c09b9718799fea22c0e8da8b766b0b2c9a9ba2db326b\"},",
          "844:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-win_amd64.whl\", hash = \"sha256:31ea73e564a7b5fbbe8188ab8b334393e06d997914a4e184975348f204790277\"},",
          "845:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:dc6a613d6c74eef5a14a214d433d06291526145431c3b964f5e16529b1842bed\"},",
          "846:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:1866cf2c284a03b9524a5cc00daca56d80057c5ce3cdc86a52020f4c720856f0\"},",
          "847:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-win32.whl\", hash = \"sha256:3fb9575a5acd13031c57a62cc7823e5d2ff8bc3835ba4d94b921b4e6ee664104\"},",
          "848:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-win_amd64.whl\", hash = \"sha256:825d5fccef6da42f3c8eccd4281af399f21c02b32d98e113dbc631ea6a6ecbc7\"},",
          "849:     {file = \"ruamel.yaml.clib-0.2.6.tar.gz\", hash = \"sha256:4ff604ce439abb20794f05613c374759ce10e3595d1867764dd1ae675b85acbd\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-manylinux2014_aarch64.whl\", hash = \"sha256:d3c620a54748a3d4cf0bcfe623e388407c8e85a4b06b8188e126302bcab93ea8\"},",
          "852:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-manylinux2014_aarch64.whl\", hash = \"sha256:210c8fcfeff90514b7133010bf14e3bad652c8efde6b20e00c43854bf94fa5a6\"},",
          "857:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:61bc5e5ca632d95925907c569daa559ea194a4d16084ba86084be98ab1cec1c6\"},",
          "862:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:1b4139a6ffbca8ef60fdaf9b33dec05143ba746a6f0ae0f9d11d38239211d335\"},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "858:     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},",
          "859:     {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},",
          "860: ]",
          "861: tomli = [",
          "862:     {file = \"tomli-2.0.1-py3-none-any.whl\", hash = \"sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc\"},",
          "863:     {file = \"tomli-2.0.1.tar.gz\", hash = \"sha256:de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877: termcolor = [",
          "878:     {file = \"termcolor-2.1.0-py3-none-any.whl\", hash = \"sha256:91dd04fdf661b89d7169cefd35f609b19ca931eb033687eaa647cef1ff177c49\"},",
          "879:     {file = \"termcolor-2.1.0.tar.gz\", hash = \"sha256:b80df54667ce4f48c03fe35df194f052dc27a541ebbf2544e4d6b47b5d6949c4\"},",
          "880: ]",
          "",
          "---------------"
        ],
        "tests/analyzer/metadata/test_empty_information.py||tests/analyzer/metadata/test_empty_information.py": [
          "File: tests/analyzer/metadata/test_empty_information.py -> tests/analyzer/metadata/test_empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     @pytest.mark.parametrize(\"package_info\", [empty_information])",
          "16:     def test_empty(self, package_info):",
          "19:     @pytest.mark.parametrize(\"package_info\", [nonempty_information])",
          "20:     def test_nonempty(self, package_info):",
          "",
          "[Removed Lines]",
          "17:         assert self.detector.detect(package_info)",
          "21:         assert not self.detector.detect(package_info)",
          "",
          "[Added Lines]",
          "17:         matches, _ = self.detector.detect(package_info)",
          "18:         assert matches",
          "22:         matches, _ = self.detector.detect(package_info)",
          "23:         assert not matches",
          "",
          "---------------"
        ],
        "tests/analyzer/metadata/test_potentially_compromised_email_domain.py||tests/analyzer/metadata/test_potentially_compromised_email_domain.py": [
          "File: tests/analyzer/metadata/test_potentially_compromised_email_domain.py -> tests/analyzer/metadata/test_potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:             return MockWhoIs(datetime.today())",
          "21:         MonkeyPatch().setattr(\"whois.whois\", mock_whois)",
          "23:         assert compromised",
          "25:     def test_safe(self):",
          "",
          "[Removed Lines]",
          "22:         compromised = self.detector.detect(PACKAGE_INFO)",
          "",
          "[Added Lines]",
          "22:         compromised, _ = self.detector.detect(PACKAGE_INFO)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:             return MockWhoIs(datetime(1990, 1, 31))",
          "29:         MonkeyPatch().setattr(\"whois.whois\", mock_whois)",
          "31:         assert not compromised",
          "33:     def test_email_domain_doesnt_exist(self):",
          "",
          "[Removed Lines]",
          "30:         compromised = self.detector.detect(PACKAGE_INFO)",
          "",
          "[Added Lines]",
          "30:         compromised, _ = self.detector.detect(PACKAGE_INFO)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:             raise whois.parser.PywhoisError('No match for \"nope.com\".')",
          "38:         MonkeyPatch().setattr(\"whois.whois\", mock_whois)",
          "40:         assert compromised",
          "",
          "[Removed Lines]",
          "39:         compromised = self.detector.detect(PACKAGE_INFO)",
          "",
          "[Added Lines]",
          "39:         compromised, _ = self.detector.detect(PACKAGE_INFO)",
          "",
          "---------------"
        ],
        "tests/analyzer/metadata/test_typosquatting.py||tests/analyzer/metadata/test_typosquatting.py": [
          "File: tests/analyzer/metadata/test_typosquatting.py -> tests/analyzer/metadata/test_typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     @pytest.mark.parametrize(\"typo_name, real_name\", typosquats)",
          "35:     def test_typosquats(self, typo_name, real_name):",
          "36:         project_info = generate_project_info(\"name\", typo_name)",
          "39:     @pytest.mark.parametrize(\"name\", negative_cases + same_names)",
          "40:     def test_nontyposquats(self, name):",
          "41:         project_info = generate_project_info(\"name\", name)",
          "",
          "[Removed Lines]",
          "37:         assert real_name in self.detector.detect(project_info)",
          "42:         assert self.detector.detect(project_info) == []",
          "",
          "[Added Lines]",
          "37:         matches, message = self.detector.detect(project_info)",
          "38:         assert matches and real_name in message",
          "43:         matches, _ = self.detector.detect(project_info)",
          "44:         assert not matches",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d66b04b3c1e545067f15fce52600e45bd4caf27",
      "candidate_info": {
        "commit_hash": "6d66b04b3c1e545067f15fce52600e45bd4caf27",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/6d66b04b3c1e545067f15fce52600e45bd4caf27",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump platformdirs from 3.0.0 to 3.1.1\n\nBumps [platformdirs](https://github.com/platformdirs/platformdirs) from 3.0.0 to 3.1.1.\n- [Release notes](https://github.com/platformdirs/platformdirs/releases)\n- [Changelog](https://github.com/platformdirs/platformdirs/blob/main/CHANGES.rst)\n- [Commits](https://github.com/platformdirs/platformdirs/compare/3.0.0...3.1.1)\n\n---\nupdated-dependencies:\n- dependency-name: platformdirs\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "491: [[package]]",
          "492: name = \"platformdirs\"",
          "494: description = \"A small Python package for determining appropriate platform-specific dirs, e.g. a \\\"user data dir\\\".\"",
          "495: category = \"main\"",
          "496: optional = false",
          "497: python-versions = \">=3.7\"",
          "498: files = [",
          "501: ]",
          "503: [package.extras]",
          "",
          "[Removed Lines]",
          "493: version = \"3.0.0\"",
          "499:     {file = \"platformdirs-3.0.0-py3-none-any.whl\", hash = \"sha256:b1d5eb14f221506f50d6604a561f4c5786d9e80355219694a1b244bcd96f4567\"},",
          "500:     {file = \"platformdirs-3.0.0.tar.gz\", hash = \"sha256:8a1228abb1ef82d788f74139988b137e78692984ec7b08eaa6c65f1723af28f9\"},",
          "",
          "[Added Lines]",
          "493: version = \"3.1.1\"",
          "499:     {file = \"platformdirs-3.1.1-py3-none-any.whl\", hash = \"sha256:e5986afb596e4bb5bde29a79ac9061aa955b94fca2399b7aaac4090860920dd8\"},",
          "500:     {file = \"platformdirs-3.1.1.tar.gz\", hash = \"sha256:024996549ee88ec1a9aa99ff7f8fc819bb59e2c3477b410d90a16d32d6e707aa\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1239: [metadata]",
          "1240: lock-version = \"2.0\"",
          "1241: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1242: content-hash = \"415a8036c048ec47b5914cb3817ffa36400600b6747fdb12a634701c11e2a051\"",
          "",
          "[Added Lines]",
          "1242: content-hash = \"842db6bdb9f55265ee857625c44617defcb122cd54e701f0fa3a611752d98583\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0f3a8a5e617c6630cf861599a512447c94dd088",
      "candidate_info": {
        "commit_hash": "a0f3a8a5e617c6630cf861599a512447c94dd088",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/a0f3a8a5e617c6630cf861599a512447c94dd088",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump docker from 6.0.1 to 6.1.1\n\nBumps [docker](https://github.com/docker/docker-py) from 6.0.1 to 6.1.1.\n- [Release notes](https://github.com/docker/docker-py/releases)\n- [Commits](https://github.com/docker/docker-py/compare/6.0.1...6.1.1)\n\n---\nupdated-dependencies:\n- dependency-name: docker\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: [[package]]",
          "240: name = \"docker\"",
          "242: description = \"A Python library for the Docker Engine API.\"",
          "243: category = \"main\"",
          "244: optional = false",
          "245: python-versions = \">=3.7\"",
          "246: files = [",
          "249: ]",
          "251: [package.dependencies]",
          "",
          "[Removed Lines]",
          "241: version = \"6.0.1\"",
          "247:     {file = \"docker-6.0.1-py3-none-any.whl\", hash = \"sha256:dbcb3bd2fa80dca0788ed908218bf43972772009b881ed1e20dfc29a65e49782\"},",
          "248:     {file = \"docker-6.0.1.tar.gz\", hash = \"sha256:896c4282e5c7af5c45e8b683b0b0c33932974fe6e50fc6906a0a83616ab3da97\"},",
          "",
          "[Added Lines]",
          "241: version = \"6.1.1\"",
          "247:     {file = \"docker-6.1.1-py3-none-any.whl\", hash = \"sha256:8308b23d3d0982c74f7aa0a3abd774898c0c4fba006e9c3bde4f68354e470fe2\"},",
          "248:     {file = \"docker-6.1.1.tar.gz\", hash = \"sha256:5ec18b9c49d48ee145a5b5824bb126dc32fc77931e18444783fc07a7724badc0\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1238: [metadata]",
          "1239: lock-version = \"2.0\"",
          "1240: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1241: content-hash = \"700ef42411b1f2fad81236a918465c64af3c2a2d267a02567410797b0abd44af\"",
          "",
          "[Added Lines]",
          "1241: content-hash = \"6bc7f08d6f69de563066201f3a3050365a20838003c1f218900a4609227cf400\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e814deb3ae6457ea1a4f7b0d3a0e64db0734f13",
      "candidate_info": {
        "commit_hash": "8e814deb3ae6457ea1a4f7b0d3a0e64db0734f13",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/8e814deb3ae6457ea1a4f7b0d3a0e64db0734f13",
        "files": [
          ".github/workflows/test.yml",
          "Makefile",
          "README.md",
          "guarddog/__init__.py",
          "guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/release_zero.py",
          "guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/cli.py",
          "guarddog/scanners/package_scanner.py",
          "guarddog/scanners/project_scanner.py",
          "guarddog/utils/package_info.py",
          "poetry.lock",
          "requirements.txt"
        ],
        "message": "Add Type checking and enforce lint (#98)\n\n* start integrating type testing\n\n* start integrating type testing\n\n* type fixing\n\n* type fixing\n\n* revert previous change\n\n* revert previous change\n\n* revert previous change\n\n* revert previous change\n\n* revert previous change\n\n* type codebase\n\n* type codebase\n\n* type codebase\n\n* fight mypy\n\n* fix lint and enforce it in CI\n\n* CI concurency\n\n* add code quality instructions in README\n\n* use makefile",
        "before_after_code_files": [
          "guarddog/__init__.py||guarddog/__init__.py",
          "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/release_zero.py||guarddog/analyzer/metadata/release_zero.py",
          "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/cli.py||guarddog/cli.py",
          "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
          "guarddog/scanners/project_scanner.py||guarddog/scanners/project_scanner.py",
          "guarddog/utils/package_info.py||guarddog/utils/package_info.py",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "guarddog/__init__.py||guarddog/__init__.py": [
          "File: guarddog/__init__.py -> guarddog/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: from guarddog.scanners.package_scanner import PackageScanner",
          "",
          "[Added Lines]",
          "1: from guarddog.scanners.package_scanner import PackageScanner  # NOQA",
          "",
          "---------------"
        ],
        "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py": [
          "File: guarddog/analyzer/analyzer.py -> guarddog/analyzer/analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from pathlib import Path",
          "6: from guarddog.analyzer.metadata.potentially_compromised_email_domain import PotentiallyCompromisedEmailDomainDetector",
          "7: from guarddog.analyzer.metadata.empty_information import EmptyInfoDetector",
          "",
          "[Removed Lines]",
          "4: from semgrep.semgrep_main import invoke_semgrep",
          "",
          "[Added Lines]",
          "4: from semgrep.semgrep_main import invoke_semgrep  # type: ignore",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:             \"release_zero\": ReleaseZeroDetector()",
          "63:         }",
          "66:         \"\"\"",
          "67:         Analyzes a package in the given path",
          "",
          "[Removed Lines]",
          "65:     def analyze(self, path, info=None, rules=None) -> dict[str]:",
          "",
          "[Added Lines]",
          "65:     def analyze(self, path, info=None, rules=None) -> dict:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         return {\"issues\": issues, \"errors\": errors, \"results\": results, \"path\": path}",
          "112:         \"\"\"",
          "113:         Analyzes the metadata of a given package",
          "",
          "[Removed Lines]",
          "111:     def analyze_metadata(self, info, rules=None) -> dict[str]:",
          "",
          "[Added Lines]",
          "110:     def analyze_metadata(self, info, rules=None) -> dict:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:         return {\"results\": results, \"errors\": errors, \"issues\": issues}",
          "140:         \"\"\"",
          "141:         Analyzes the source code of a given package",
          "",
          "[Removed Lines]",
          "139:     def analyze_sourcecode(self, path, rules=None) -> tuple[dict, int]:",
          "",
          "[Added Lines]",
          "138:     def analyze_sourcecode(self, path, rules=None) -> dict:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:         targetpath = Path(path)",
          "151:         all_rules = rules if rules is not None else self.sourcecode_ruleset",
          "154:         errors = {}",
          "155:         issues = 0",
          "157:         if rules is None:",
          "158:             # No rule specified, run all rules",
          "159:             try:",
          "161:                 rule_results = self._format_semgrep_response(response, targetpath=targetpath)",
          "162:                 issues += len(rule_results)",
          "164:                 results = results | rule_results",
          "165:             except Exception as e:",
          "166:                 errors[\"rules-all\"] = f\"failed to run rule: {str(e)}\"",
          "",
          "[Removed Lines]",
          "153:         results = {rule: {} for rule in all_rules}",
          "160:                 response = invoke_semgrep(Path(self.sourcecode_path), [targetpath], exclude=self.exclude, no_git_ignore=True)",
          "",
          "[Added Lines]",
          "152:         results = {rule: {} for rule in all_rules}  # type: dict",
          "159:                 response = invoke_semgrep(Path(self.sourcecode_path), [targetpath], exclude=self.exclude,",
          "160:                                           no_git_ignore=True)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:             if rule_name not in result:",
          "223:                 results[rule_name] = []",
          "224:                 results[rule_name].append({",
          "227:                     'message': result[\"extra\"][\"message\"]",
          "228:                 })",
          "",
          "[Removed Lines]",
          "225:                     'location': location,",
          "226:                     'code': code,",
          "",
          "[Added Lines]",
          "225:                     'location': location,",
          "226:                     'code': code,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "233:     def trim_code_snippet(self, code):",
          "234:         THRESHOLD = 250",
          "235:         if len(code) > THRESHOLD:",
          "237:         else:",
          "",
          "[Removed Lines]",
          "236:             return code[:THRESHOLD-10] + '...' + code[len(code)-10:]",
          "238:             return code",
          "",
          "[Added Lines]",
          "236:             return code[: THRESHOLD - 10] + '...' + code[len(code) - 10:]",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py": [
          "File: guarddog/analyzer/metadata/detector.py -> guarddog/analyzer/metadata/detector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: class Detector:",
          "2:     def __init__(self) -> None:",
          "3:         pass",
          "5:     # returns (ruleMatches, message)",
          "",
          "[Removed Lines]",
          "6:     def detect(self, package_info) -> tuple[bool, str]:",
          "7:         pass",
          "",
          "[Added Lines]",
          "1: from abc import abstractmethod",
          "2: from typing import Optional",
          "11:     def detect(self, package_info) -> tuple[bool, Optional[str]]:",
          "12:         pass",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py": [
          "File: guarddog/analyzer/metadata/empty_information.py -> guarddog/analyzer/metadata/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         \"\"\"",
          "31:         sanitized_description = package_info[\"info\"][\"description\"].strip()",
          "",
          "[Removed Lines]",
          "32:         return len(sanitized_description) == 0, 'This package has an empty description on PyPi'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py": [
          "File: guarddog/analyzer/metadata/potentially_compromised_email_domain.py -> guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: \"\"\"",
          "6: from datetime import datetime",
          "9: from dateutil import parser",
          "10: from packaging import version",
          "",
          "[Removed Lines]",
          "8: import whois",
          "",
          "[Added Lines]",
          "7: from typing import Optional",
          "9: import whois  # type: ignore",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     def __init__(self) -> None:",
          "25:         super()",
          "28:         \"\"\"",
          "29:         Gets the creation date of an email address domain",
          "",
          "[Removed Lines]",
          "27:     def _get_domain_creation_date(self, email_domain) -> tuple[datetime, bool]:",
          "",
          "[Added Lines]",
          "28:     def _get_domain_creation_date(self, email_domain) -> tuple[Optional[datetime], bool]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         return creation_dates, True",
          "61:         \"\"\"",
          "62:         Gets the most recent release date of a Python project",
          "",
          "[Removed Lines]",
          "60:     def _get_project_latest_release_date(self, releases) -> datetime:",
          "",
          "[Added Lines]",
          "61:     def _get_project_latest_release_date(self, releases) -> Optional[datetime]:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:                 upload_time_text = version_release[0][\"upload_time_iso_8601\"]",
          "81:                 release_date = parser.isoparse(upload_time_text).replace(tzinfo=None)",
          "82:                 return release_date",
          "84:     def detect(self, package_info) -> tuple[bool, str]:",
          "85:         \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         return None",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:         latest_project_release = self._get_project_latest_release_date(releases)",
          "114:         domain_creation_date, domain_exists = self._get_domain_creation_date(email_domain)",
          "115:         if not domain_exists:",
          "117:         if domain_creation_date is None:",
          "118:             return False, \"No e-mail domain creation date found\"",
          "",
          "[Removed Lines]",
          "116:             return True, \"The maintainer's email domain does not exist and can likely be registered by an attacker to compromise the maintainer's PyPi account\"",
          "119:         return latest_project_release < domain_creation_date, \"The domain name of the maintainer's email address was re-registered after the latest release of this package. This can be an indicator that this is a custom domain that expired, and was leveraged by an attacker to compromise the package owner's PyPi account.\"",
          "",
          "[Added Lines]",
          "118:             return True, \"The maintainer's email domain does not exist and can likely be registered by an attacker to\" \\",
          "119:                          \" compromise the maintainer's PyPi account\"",
          "123:             return False, \"Could not find latest release date\"",
          "124:         return latest_project_release < domain_creation_date, \"The domain name of the maintainer's email address was\" \\",
          "125:                                                               \" re-registered after the latest release of this \" \\",
          "126:                                                               \"package. This can be an indicator that this is a\" \\",
          "127:                                                               \" custom domain that expired, and was leveraged by\" \\",
          "128:                                                               \" an attacker to compromise the package owner's PyPi\" \\",
          "129:                                                               \" account.\"",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/release_zero.py||guarddog/analyzer/metadata/release_zero.py": [
          "File: guarddog/analyzer/metadata/release_zero.py -> guarddog/analyzer/metadata/release_zero.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:         super()",
          "14:     def detect(self, package_info) -> tuple[bool, str]:",
          "",
          "[Removed Lines]",
          "15:         return package_info[\"info\"]['version'] in ['0.0.0', '0.0'], \"The package has its latest release version to 0.0.0\"",
          "",
          "[Added Lines]",
          "16:                 \"The package has its latest release version to 0.0.0\")",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py": [
          "File: guarddog/analyzer/metadata/typosquatting.py -> guarddog/analyzer/metadata/typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import os",
          "3: from datetime import datetime, timedelta",
          "4: from itertools import permutations",
          "6: import requests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from typing import Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:         return typosquatted",
          "243:         \"\"\"",
          "244:         Uses a package's information from PyPI's JSON API to determine the",
          "245:         package is attempting a typosquatting attack",
          "",
          "[Removed Lines]",
          "242:     def detect(self, package_info) -> tuple[bool, str]:",
          "",
          "[Added Lines]",
          "243:     def detect(self, package_info) -> tuple[bool, Optional[str]]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:         \"\"\"",
          "255:         similar_package_names = self.get_typosquatted_package(package_info[\"info\"][\"name\"])",
          "256:         if len(similar_package_names) > 0:",
          "",
          "[Removed Lines]",
          "257:             return True, \"This package closely ressembles the following package names, and might be a typosquatting attempt: \" + \", \".join(similar_package_names)",
          "259:         return False,  None",
          "",
          "[Added Lines]",
          "259:                          \"attempt: \" + \", \".join(similar_package_names)",
          "261:         return False, None",
          "",
          "---------------"
        ],
        "guarddog/cli.py||guarddog/cli.py": [
          "File: guarddog/cli.py -> guarddog/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: @cli.command(\"verify\")",
          "28: @click.argument(\"path\")",
          "29: @click.option(\"--json\", default=False, is_flag=True, help=\"Dump the output as JSON to standard out\")",
          "31: def verify(path, json, exit_non_zero_on_finding):",
          "32:     \"\"\"Verify a requirements.txt file",
          "",
          "[Removed Lines]",
          "30: @click.option(\"--exit-non-zero-on-finding\", default=False, is_flag=True, help=\"Exit with a non-zero status code if at least one issue is identified\")",
          "",
          "[Added Lines]",
          "31: @click.option(\"--exit-non-zero-on-finding\", default=False, is_flag=True, help=\"Exit with a non-zero status code if at \"",
          "32:                                                                               \"least one issue is identified\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     scanner = RequirementsScanner()",
          "38:     results = scanner.scan_local(path)",
          "39:     for result in results:",
          "41:         if not json:",
          "42:             print_scan_results(result.get('result'), identifier)",
          "44:     if json:",
          "45:         import json as js",
          "46:         print(js.dumps(results))",
          "",
          "[Removed Lines]",
          "40:         identifier = result['dependency'] if result['version'] is None else f\"{result['dependency']} version {result['version']}\"",
          "",
          "[Added Lines]",
          "42:         identifier = result['dependency'] if result['version'] is None \\",
          "43:             else f\"{result['dependency']} version {result['version']}\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     if exit_non_zero_on_finding:",
          "49:         exit_with_status_code(results)",
          "51: @cli.command(\"scan\")",
          "52: @click.argument(\"identifier\")",
          "53: @click.option(\"-v\", \"--version\", default=None, help=\"Specify a version to scan\")",
          "54: @click.option(\"-r\", \"--rules\", multiple=True, type=click.Choice(ALL_RULES, case_sensitive=False))",
          "55: @click.option(\"-x\", \"--exclude-rules\", multiple=True, type=click.Choice(ALL_RULES, case_sensitive=False))",
          "56: @click.option(\"--json\", default=False, is_flag=True, help=\"Dump the output as JSON to standard out\")",
          "58: def scan(identifier, version, rules, exclude_rules, json, exit_non_zero_on_finding):",
          "59:     \"\"\"Scan a package",
          "",
          "[Removed Lines]",
          "57: @click.option(\"--exit-non-zero-on-finding\", default=False, is_flag=True, help=\"Exit with a non-zero status code if at least one issue is identified\")",
          "",
          "[Added Lines]",
          "61: @click.option(\"--exit-non-zero-on-finding\", default=False, is_flag=True, help=\"Exit with a non-zero status code if at \"",
          "62:                                                                               \"least one issue is identified\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:     num_issues = results.get('issues')",
          "104:     if num_issues == 0:",
          "106:         print()",
          "107:         return",
          "110:     print()",
          "112:     results = results.get('results', [])",
          "113:     for finding in results:",
          "114:         description = results[finding]",
          "116:             print(colored(finding, None, attrs=['bold']) + ': ' + description)",
          "117:             print()",
          "119:             source_code_findings = description",
          "121:             for finding in source_code_findings:",
          "123:             print()",
          "",
          "[Removed Lines]",
          "105:         print(\"Found \" + colored('0 potentially malicious indicators', 'green', attrs=['bold']) + \" scanning \" + colored(identifier, None, attrs=['bold']))",
          "109:     print(\"Found \" + colored(str(num_issues) + ' potentially malicious indicators', 'red', attrs=['bold']) + \" in \" + colored(identifier, None, attrs=['bold']))",
          "115:         if type(description) == str: # package metadata",
          "118:         elif type(description) == list: # semgrep rule result:",
          "120:             print(colored(finding, None, attrs=['bold']) + ': found ' + str(len(source_code_findings)) + ' source code matches')",
          "122:                 print('  * ' + finding['message'] + ' at ' + finding['location'] + '\\n    ' + format_code_line_for_output(finding['code']))",
          "",
          "[Added Lines]",
          "111:         print(\"Found \" + colored('0 potentially malicious indicators', 'green',",
          "112:                                  attrs=['bold']) + \" scanning \" + colored(identifier, None, attrs=['bold']))",
          "116:     print(\"Found \" + colored(str(num_issues) + ' potentially malicious indicators', 'red',",
          "117:                              attrs=['bold']) + \" in \" + colored(identifier, None, attrs=['bold']))",
          "123:         if type(description) == str:  # package metadata",
          "126:         elif type(description) == list:  # semgrep rule result:",
          "128:             print(colored(finding, None,",
          "129:                           attrs=['bold']) + ': found ' + str(len(source_code_findings)) + ' source code matches')",
          "131:                 print('  * ' + finding['message']",
          "132:                       + ' at ' + finding['location'] + '\\n    ' + format_code_line_for_output(finding['code']))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131: def exit_with_status_code(results):",
          "132:     num_issues = results.get('issues', 0)",
          "133:     if num_issues > 0:",
          "",
          "[Removed Lines]",
          "134:         exit(EXIT_CODE_ISSUES_FOUND)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py": [
          "File: guarddog/scanners/package_scanner.py -> guarddog/scanners/package_scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: import os",
          "3: import shutil",
          "6: import tempfile",
          "7: import requests",
          "",
          "[Removed Lines]",
          "4: import sys",
          "5: import tarsafe",
          "",
          "[Added Lines]",
          "4: import tarsafe  # type: ignore",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:                     return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)",
          "49:             elif os.path.isdir(path):",
          "50:                 return self.analyzer.analyze_sourcecode(path, rules=rules)",
          "54:     def _scan_remote(self, name, base_dir, version=None, rules=None, write_package_info=False):",
          "55:         directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), base_dir)",
          "",
          "[Removed Lines]",
          "51:         else:",
          "52:             raise Exception(f\"Path {path} does not exist.\")",
          "",
          "[Added Lines]",
          "50:             else:",
          "51:                 raise Exception(f\"Path {path} is not a directory nor a tar.gz archive.\")",
          "52:         raise Exception(f\"Path {path} does not exist.\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:         Args:",
          "81:         Raises:",
          "82:             Exception: Analyzer exception",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:             assumed.",
          "80:             is created and cleaned up automatically. If not specified, the provided directory is not removed after the",
          "81:             scan.",
          "83:              to a json file",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:                     url = file[\"url\"]",
          "127:                     file_extension = \".tar.gz\"",
          "130:                     url = file[\"url\"]",
          "131:                     file_extension = \".zip\"",
          "",
          "[Removed Lines]",
          "129:                 if file[\"filename\"].endswith(\".egg\") or file[\"filename\"].endswith(\".whl\") or file[\"filename\"].endswith(\".zip\"):",
          "",
          "[Added Lines]",
          "133:                 if file[\"filename\"].endswith(\".egg\") or file[\"filename\"].endswith(\".whl\") \\",
          "134:                         or file[\"filename\"].endswith(\".zip\"):",
          "",
          "---------------"
        ],
        "guarddog/scanners/project_scanner.py||guarddog/scanners/project_scanner.py": [
          "File: guarddog/scanners/project_scanner.py -> guarddog/scanners/project_scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import sys",
          "5: from typing import List",
          "8: import pkg_resources",
          "9: import requests",
          "",
          "[Removed Lines]",
          "7: import pathos",
          "",
          "[Added Lines]",
          "7: import pathos  # type: ignore",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:                     qualifier, version = spec",
          "121:                     try:",
          "123:                     except Exception:",
          "124:                         sys.stderr.write(f\"Package {requirement.project_name} not on PyPI\\n\")",
          "125:                         project_exists_on_pypi = False",
          "",
          "[Removed Lines]",
          "122:                         available_versions = versions(requirement.project_name)",
          "",
          "[Added Lines]",
          "122:                         available_versions = versions(requirement.project_name)  # type: list[str]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:                         case \"<=\":",
          "138:                             used_versions = {v for v in available_versions if v <= version}",
          "139:                         case \"==\":",
          "146:                         case \"~=\":",
          "147:                             prefix = \"\".join(version.split(\".\")[:-1])",
          "148:                             for available_version in available_versions:  # sorted decreasing",
          "",
          "[Removed Lines]",
          "140:                             matching_versions = filter(",
          "141:                                 lambda v: v is not None,",
          "142:                                 (re.search(version, candidate) for candidate in available_versions),",
          "143:                             )",
          "144:                             matching_versions = set(match.string for match in matching_versions)",
          "145:                             used_versions = matching_versions",
          "",
          "[Added Lines]",
          "140:                             matches = [re.search(version, candidate) for candidate in available_versions]",
          "141:                             filtered_matches = list(filter(None, matches))",
          "142:                             str_matches = [v.string for v in filtered_matches]",
          "143:                             used_versions = set(str_matches)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:         params = []",
          "198:         for dependency, versions in dependencies.items():",
          "199:             if versions is None:",
          "201:             else:",
          "202:                 for version in versions:",
          "203:                     params.append((dependency, version))",
          "",
          "[Removed Lines]",
          "200:                 params.append((dependency, None)) # this will cause scan_remote to use the latest version",
          "",
          "[Added Lines]",
          "198:                 params.append((dependency, None))  # this will cause scan_remote to use the latest version",
          "",
          "---------------"
        ],
        "guarddog/utils/package_info.py||guarddog/utils/package_info.py": [
          "File: guarddog/utils/package_info.py -> guarddog/utils/package_info.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import requests",
          "7:     \"\"\"Gets metadata and other information about package",
          "9:     Args:",
          "",
          "[Removed Lines]",
          "1: import json",
          "6: def get_package_info(name) -> json:",
          "",
          "[Added Lines]",
          "4: def get_package_info(name) -> dict:",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "569: slack = [\"slack-sdk\"]",
          "570: telegram = [\"requests\"]",
          "572: [[package]]",
          "573: name = \"typing-extensions\"",
          "574: version = \"4.3.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: [[package]]",
          "573: name = \"types-python-dateutil\"",
          "574: version = \"2.8.19.4\"",
          "575: description = \"Typing stubs for python-dateutil\"",
          "576: category = \"dev\"",
          "577: optional = false",
          "578: python-versions = \"*\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625: [metadata]",
          "626: lock-version = \"1.1\"",
          "627: python-versions = \">=3.9, <4\"",
          "630: [metadata.files]",
          "631: attrs = [",
          "",
          "[Removed Lines]",
          "628: content-hash = \"0faf892801caefce1e994f6fdee7254ac4e2e95ad947d7459b75113af80eed74\"",
          "",
          "[Added Lines]",
          "636: content-hash = \"31d220f94c38906af610a441245fc28a3e44587911f1380bdf93fe891d63606a\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "903:     {file = \"tqdm-4.64.0-py2.py3-none-any.whl\", hash = \"sha256:74a2cdefe14d11442cedf3ba4e21a3b84ff9a2dbdc6cfae2c34addb2a14a5ea6\"},",
          "904:     {file = \"tqdm-4.64.0.tar.gz\", hash = \"sha256:40be55d30e200777a307a7585aee69e4eabb46b4ec6a4b4a5f2d9f11e7d5408d\"},",
          "905: ]",
          "906: typing-extensions = [",
          "907:     {file = \"typing_extensions-4.3.0-py3-none-any.whl\", hash = \"sha256:25642c956049920a5aa49edcdd6ab1e06d7e5d467fc00e0506c44ac86fbfca02\"},",
          "908:     {file = \"typing_extensions-4.3.0.tar.gz\", hash = \"sha256:e6d2677a32f47fc7eb2795db1dd15c1f34eff616bcaf2cfb5e997f854fa1c4a6\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914: types-python-dateutil = [",
          "915:     {file = \"types-python-dateutil-2.8.19.4.tar.gz\", hash = \"sha256:351a8ca9afd4aea662f87c1724d2e1ae59f9f5f99691be3b3b11d2393cd3aaa1\"},",
          "916:     {file = \"types_python_dateutil-2.8.19.4-py3-none-any.whl\", hash = \"sha256:722a55be8e2eeff749c3e166e7895b0e2f4d29ab4921c0cff27aa6b997d7ee2e\"},",
          "917: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61614d83e632a90c58df338d433f7c6856139dee",
      "candidate_info": {
        "commit_hash": "61614d83e632a90c58df338d433f7c6856139dee",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/61614d83e632a90c58df338d433f7c6856139dee",
        "files": [
          "CONTRIBUTING.md",
          "NOTICE",
          "Pipfile.lock",
          "README.md",
          "dist/guarddog-0.1.0-py3-none-any.whl",
          "dist/guarddog-0.1.0.tar.gz",
          "evaluator/evaluator.py",
          "guarddog/__main__.py",
          "guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/compromised_email.py",
          "guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/cli.py",
          "guarddog/scanners/package_scanner.py",
          "guarddog/scanners/project_scanner.py",
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "feat: packaged application",
        "before_after_code_files": [
          "Pipfile.lock||Pipfile.lock",
          "evaluator/evaluator.py||evaluator/evaluator.py",
          "guarddog/__main__.py||guarddog/__main__.py",
          "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py",
          "guarddog/analyzer/metadata/compromised_email.py||guarddog/analyzer/metadata/compromised_email.py",
          "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/cli.py||guarddog/cli.py",
          "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
          "guarddog/scanners/project_scanner.py||guarddog/scanners/project_scanner.py",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "Pipfile.lock||Pipfile.lock": [
          "File: Pipfile.lock -> Pipfile.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "evaluator/evaluator.py||evaluator/evaluator.py": [
          "File: evaluator/evaluator.py -> evaluator/evaluator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import requests",
          "13: from tqdm.auto import tqdm",
          "19: class Evaluator:",
          "22:         Evaluates the CLI tool by:",
          "23:         1. Scanning benign packages (top 1000 downloaded packages on PyPI) and malicious packages.",
          "",
          "[Removed Lines]",
          "15: from pysecurity.analyzer.analyzer import Analyzer",
          "16: from pysecurity.scanners.package_scanner import PackageScanner",
          "20:     \"\"\" Generates accuracy metrics of pysecurity tool by running against real malware.",
          "",
          "[Added Lines]",
          "15: from guarddog.analyzer.analyzer import Analyzer",
          "16: from guarddog.scanners.package_scanner import PackageScanner",
          "20:     \"\"\" Generates accuracy metrics of guarddog tool by running against real malware.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:     def scan(self, rules=None) -> None:",
          "159:         Args:",
          "160:             rules (set[str], optional): Rules used when scanning. Defaults to None.",
          "",
          "[Removed Lines]",
          "157:         \"\"\" Scans the malicious and benign data using pysecurity",
          "",
          "[Added Lines]",
          "157:         \"\"\" Scans the malicious and benign data using guarddog",
          "",
          "---------------"
        ],
        "guarddog/__main__.py||guarddog/__main__.py": [
          "File: guarddog/__main__.py -> guarddog/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import sys",
          "8: def cli():",
          "12: if __name__ == '__main__':",
          "13:     sys.exit(cli())",
          "",
          "[Removed Lines]",
          "5: import pysecurity.cli",
          "9:     \"\"\"Run pysecurity from script entry point\"\"\"",
          "10:     return pysecurity.cli.cli()",
          "",
          "[Added Lines]",
          "5: import guarddog.cli",
          "9:     \"\"\"Run guarddog from script entry point\"\"\"",
          "10:     return guarddog.cli.cli()",
          "",
          "---------------"
        ],
        "guarddog/analyzer/analyzer.py||guarddog/analyzer/analyzer.py": [
          "File: guarddog/analyzer/analyzer.py -> guarddog/analyzer/analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from semgrep.semgrep_main import invoke_semgrep",
          "8:     CompromisedEmailDetector",
          "13: class Analyzer:",
          "",
          "[Removed Lines]",
          "7: from pysecurity.analyzer.metadata.compromised_email import \\",
          "9: from pysecurity.analyzer.metadata.empty_information import EmptyInfoDetector",
          "10: from pysecurity.analyzer.metadata.typosquatting import TyposquatDetector",
          "",
          "[Added Lines]",
          "7: from guarddog.analyzer.metadata.compromised_email import \\",
          "9: from guarddog.analyzer.metadata.empty_information import EmptyInfoDetector",
          "10: from guarddog.analyzer.metadata.typosquatting import TyposquatDetector",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/compromised_email.py||guarddog/analyzer/metadata/compromised_email.py": [
          "File: guarddog/analyzer/metadata/compromised_email.py -> guarddog/analyzer/metadata/compromised_email.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from dotenv import load_dotenv",
          "11: from packaging import version",
          "16: class CompromisedEmailDetector(Detector):",
          "",
          "[Removed Lines]",
          "13: from pysecurity.analyzer.metadata.detector import Detector",
          "",
          "[Added Lines]",
          "13: from guarddog.analyzer.metadata.detector import Detector",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py": [
          "File: guarddog/analyzer/metadata/empty_information.py -> guarddog/analyzer/metadata/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: \"\"\"",
          "10: class EmptyInfoDetector(Detector):",
          "",
          "[Removed Lines]",
          "7: from pysecurity.analyzer.metadata.detector import Detector",
          "",
          "[Added Lines]",
          "7: from guarddog.analyzer.metadata.detector import Detector",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py": [
          "File: guarddog/analyzer/metadata/typosquatting.py -> guarddog/analyzer/metadata/typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import requests",
          "18: class TyposquatDetector(Detector):",
          "",
          "[Removed Lines]",
          "15: from pysecurity.analyzer.metadata.detector import Detector",
          "",
          "[Added Lines]",
          "15: from guarddog.analyzer.metadata.detector import Detector",
          "",
          "---------------"
        ],
        "guarddog/cli.py||guarddog/cli.py": [
          "File: guarddog/cli.py -> guarddog/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import click",
          "18: analyzer = Analyzer()",
          "19: ALL_RULES = analyzer.sourcecode_ruleset | analyzer.metadata_ruleset",
          "",
          "[Removed Lines]",
          "14: from pysecurity.analyzer.analyzer import Analyzer",
          "15: from pysecurity.scanners.package_scanner import PackageScanner",
          "16: from pysecurity.scanners.project_scanner import RequirementsScanner",
          "",
          "[Added Lines]",
          "14: from guarddog.analyzer.analyzer import Analyzer",
          "15: from guarddog.scanners.package_scanner import PackageScanner",
          "16: from guarddog.scanners.project_scanner import RequirementsScanner",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: @click.group",
          "23: def cli():",
          "25:     pass",
          "",
          "[Removed Lines]",
          "24:     \"\"\" Pysecurity cli tool to detect PyPI malware \"\"\"",
          "",
          "[Added Lines]",
          "24:     \"\"\" Guard Dog cli tool to detect PyPI malware \"\"\"",
          "",
          "---------------"
        ],
        "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py": [
          "File: guarddog/scanners/package_scanner.py -> guarddog/scanners/package_scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import requests",
          "14: class PackageScanner(Scanner):",
          "",
          "[Removed Lines]",
          "9: from pysecurity.analyzer.analyzer import Analyzer",
          "10: from pysecurity.scanners.scanner import Scanner",
          "11: from pysecurity.utils import get_package_info",
          "",
          "[Added Lines]",
          "9: from guarddog.analyzer.analyzer import Analyzer",
          "10: from guarddog.scanners.scanner import Scanner",
          "11: from guarddog.utils import get_package_info",
          "",
          "---------------"
        ],
        "guarddog/scanners/project_scanner.py||guarddog/scanners/project_scanner.py": [
          "File: guarddog/scanners/project_scanner.py -> guarddog/scanners/project_scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import pkg_resources",
          "7: import requests",
          "13: class RequirementsScanner(Scanner):",
          "",
          "[Removed Lines]",
          "9: from pysecurity.scanners.package_scanner import PackageScanner",
          "10: from pysecurity.scanners.scanner import Scanner",
          "",
          "[Added Lines]",
          "9: from guarddog.scanners.package_scanner import PackageScanner",
          "10: from guarddog.scanners.scanner import Scanner",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [[package]]",
          "2: name = \"attrs\"",
          "3: version = \"21.4.0\"",
          "4: description = \"Classes Without Boilerplate\"",
          "5: category = \"main\"",
          "6: optional = false",
          "7: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"",
          "9: [package.extras]",
          "10: dev = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"six\", \"mypy\", \"pytest-mypy-plugins\", \"zope.interface\", \"furo\", \"sphinx\", \"sphinx-notfound-page\", \"pre-commit\", \"cloudpickle\"]",
          "11: docs = [\"furo\", \"sphinx\", \"zope.interface\", \"sphinx-notfound-page\"]",
          "12: tests = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"six\", \"mypy\", \"pytest-mypy-plugins\", \"zope.interface\", \"cloudpickle\"]",
          "13: tests_no_zope = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"six\", \"mypy\", \"pytest-mypy-plugins\", \"cloudpickle\"]",
          "15: [[package]]",
          "16: name = \"boltons\"",
          "17: version = \"21.0.0\"",
          "18: description = \"When they're not builtins, they're boltons.\"",
          "19: category = \"main\"",
          "20: optional = false",
          "21: python-versions = \"*\"",
          "23: [[package]]",
          "24: name = \"bracex\"",
          "25: version = \"2.3.post1\"",
          "26: description = \"Bash style brace expander.\"",
          "27: category = \"main\"",
          "28: optional = false",
          "29: python-versions = \">=3.7\"",
          "31: [[package]]",
          "32: name = \"certifi\"",
          "33: version = \"2022.6.15\"",
          "34: description = \"Python package for providing Mozilla's CA Bundle.\"",
          "35: category = \"main\"",
          "36: optional = false",
          "37: python-versions = \">=3.6\"",
          "39: [[package]]",
          "40: name = \"charset-normalizer\"",
          "41: version = \"2.1.0\"",
          "42: description = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"",
          "43: category = \"main\"",
          "44: optional = false",
          "45: python-versions = \">=3.6.0\"",
          "47: [package.extras]",
          "48: unicode_backport = [\"unicodedata2\"]",
          "50: [[package]]",
          "51: name = \"click\"",
          "52: version = \"8.1.3\"",
          "53: description = \"Composable command line interface toolkit\"",
          "54: category = \"main\"",
          "55: optional = false",
          "56: python-versions = \">=3.7\"",
          "58: [package.dependencies]",
          "59: colorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}",
          "61: [[package]]",
          "62: name = \"click-option-group\"",
          "63: version = \"0.5.3\"",
          "64: description = \"Option groups missing in Click\"",
          "65: category = \"main\"",
          "66: optional = false",
          "67: python-versions = \">=3.6,<4\"",
          "69: [package.dependencies]",
          "70: Click = \">=7.0,<9\"",
          "72: [package.extras]",
          "73: tests = [\"coveralls\", \"pytest-cov\", \"pytest\", \"coverage (<6)\"]",
          "74: docs = [\"m2r\", \"pallets-sphinx-themes\", \"sphinx (>=2.3,<3)\"]",
          "76: [[package]]",
          "77: name = \"colorama\"",
          "78: version = \"0.4.5\"",
          "79: description = \"Cross-platform colored terminal text.\"",
          "80: category = \"main\"",
          "81: optional = false",
          "82: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"",
          "84: [[package]]",
          "85: name = \"defusedxml\"",
          "86: version = \"0.7.1\"",
          "87: description = \"XML bomb protection for Python stdlib modules\"",
          "88: category = \"main\"",
          "89: optional = false",
          "90: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"",
          "92: [[package]]",
          "93: name = \"docker\"",
          "94: version = \"6.0.0b1\"",
          "95: description = \"A Python library for the Docker Engine API.\"",
          "96: category = \"main\"",
          "97: optional = false",
          "98: python-versions = \">=3.7\"",
          "100: [package.dependencies]",
          "101: packaging = \">=14.0\"",
          "102: pywin32 = {version = \">=304\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "103: requests = \">=2.26.0\"",
          "104: urllib3 = \">=1.26.0\"",
          "105: websocket-client = \">=0.32.0\"",
          "107: [package.extras]",
          "108: ssh = [\"paramiko (>=2.4.3)\"]",
          "110: [[package]]",
          "111: name = \"face\"",
          "112: version = \"20.1.1\"",
          "113: description = \"A command-line application framework (and CLI parser). Friendly for users, full-featured for developers.\"",
          "114: category = \"main\"",
          "115: optional = false",
          "116: python-versions = \"*\"",
          "118: [package.dependencies]",
          "119: boltons = \">=20.0.0\"",
          "121: [[package]]",
          "122: name = \"future\"",
          "123: version = \"0.18.2\"",
          "124: description = \"Clean single-source support for Python 3 and 2\"",
          "125: category = \"main\"",
          "126: optional = false",
          "127: python-versions = \">=2.6, !=3.0.*, !=3.1.*, !=3.2.*\"",
          "129: [[package]]",
          "130: name = \"glom\"",
          "131: version = \"22.1.0\"",
          "132: description = \"A declarative object transformer and formatter, for conglomerating nested data.\"",
          "133: category = \"main\"",
          "134: optional = false",
          "135: python-versions = \"*\"",
          "137: [package.dependencies]",
          "138: attrs = \"*\"",
          "139: boltons = \">=19.3.0\"",
          "140: face = \">=20.1.0\"",
          "142: [package.extras]",
          "143: yaml = [\"pyyaml\"]",
          "145: [[package]]",
          "146: name = \"idna\"",
          "147: version = \"3.3\"",
          "148: description = \"Internationalized Domain Names in Applications (IDNA)\"",
          "149: category = \"main\"",
          "150: optional = false",
          "151: python-versions = \">=3.5\"",
          "153: [[package]]",
          "154: name = \"jsonschema\"",
          "155: version = \"4.9.1\"",
          "156: description = \"An implementation of JSON Schema validation for Python\"",
          "157: category = \"main\"",
          "158: optional = false",
          "159: python-versions = \">=3.7\"",
          "161: [package.dependencies]",
          "162: attrs = \">=17.4.0\"",
          "163: pyrsistent = \">=0.14.0,<0.17.0 || >0.17.0,<0.17.1 || >0.17.1,<0.17.2 || >0.17.2\"",
          "165: [package.extras]",
          "166: format = [\"fqdn\", \"idna\", \"isoduration\", \"jsonpointer (>1.13)\", \"rfc3339-validator\", \"rfc3987\", \"uri-template\", \"webcolors (>=1.11)\"]",
          "167: format-nongpl = [\"fqdn\", \"idna\", \"isoduration\", \"jsonpointer (>1.13)\", \"rfc3339-validator\", \"rfc3986-validator (>0.1.0)\", \"uri-template\", \"webcolors (>=1.11)\"]",
          "169: [[package]]",
          "170: name = \"mypy-extensions\"",
          "171: version = \"0.4.3\"",
          "172: description = \"Experimental type system extensions for programs checked with the mypy typechecker.\"",
          "173: category = \"main\"",
          "174: optional = false",
          "175: python-versions = \"*\"",
          "177: [[package]]",
          "178: name = \"packaging\"",
          "179: version = \"21.3\"",
          "180: description = \"Core utilities for Python packages\"",
          "181: category = \"main\"",
          "182: optional = false",
          "183: python-versions = \">=3.6\"",
          "185: [package.dependencies]",
          "186: pyparsing = \">=2.0.2,<3.0.5 || >3.0.5\"",
          "188: [[package]]",
          "189: name = \"pathspec\"",
          "190: version = \"0.9.0\"",
          "191: description = \"Utility library for gitignore style pattern matching of file paths.\"",
          "192: category = \"main\"",
          "193: optional = false",
          "194: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7\"",
          "196: [[package]]",
          "197: name = \"peewee\"",
          "198: version = \"3.15.1\"",
          "199: description = \"a little orm\"",
          "200: category = \"main\"",
          "201: optional = false",
          "202: python-versions = \"*\"",
          "204: [[package]]",
          "205: name = \"platformdirs\"",
          "206: version = \"2.5.2\"",
          "207: description = \"A small Python module for determining appropriate platform-specific dirs, e.g. a \\\"user data dir\\\".\"",
          "208: category = \"main\"",
          "209: optional = false",
          "210: python-versions = \">=3.7\"",
          "212: [package.extras]",
          "213: docs = [\"furo (>=2021.7.5b38)\", \"proselint (>=0.10.2)\", \"sphinx-autodoc-typehints (>=1.12)\", \"sphinx (>=4)\"]",
          "214: test = [\"appdirs (==1.4.4)\", \"pytest-cov (>=2.7)\", \"pytest-mock (>=3.6)\", \"pytest (>=6)\"]",
          "216: [[package]]",
          "217: name = \"pyparsing\"",
          "218: version = \"3.0.9\"",
          "219: description = \"pyparsing module - Classes and methods to define and execute parsing grammars\"",
          "220: category = \"main\"",
          "221: optional = false",
          "222: python-versions = \">=3.6.8\"",
          "224: [package.extras]",
          "225: diagrams = [\"railroad-diagrams\", \"jinja2\"]",
          "227: [[package]]",
          "228: name = \"pyrsistent\"",
          "229: version = \"0.18.1\"",
          "230: description = \"Persistent/Functional/Immutable data structures\"",
          "231: category = \"main\"",
          "232: optional = false",
          "233: python-versions = \">=3.7\"",
          "235: [[package]]",
          "236: name = \"python-dateutil\"",
          "237: version = \"2.8.2\"",
          "238: description = \"Extensions to the standard Python datetime module\"",
          "239: category = \"main\"",
          "240: optional = false",
          "241: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"",
          "243: [package.dependencies]",
          "244: six = \">=1.5\"",
          "246: [[package]]",
          "247: name = \"python-dotenv\"",
          "248: version = \"0.20.0\"",
          "249: description = \"Read key-value pairs from a .env file and set them as environment variables\"",
          "250: category = \"main\"",
          "251: optional = false",
          "252: python-versions = \">=3.5\"",
          "254: [package.extras]",
          "255: cli = [\"click (>=5.0)\"]",
          "257: [[package]]",
          "258: name = \"python-lsp-jsonrpc\"",
          "259: version = \"1.0.0\"",
          "260: description = \"JSON RPC 2.0 server library\"",
          "261: category = \"main\"",
          "262: optional = false",
          "263: python-versions = \"*\"",
          "265: [package.dependencies]",
          "266: ujson = \">=3.0.0\"",
          "268: [package.extras]",
          "269: test = [\"coverage\", \"pytest-cov\", \"pytest\", \"pyflakes\", \"pycodestyle\", \"pylint\"]",
          "271: [[package]]",
          "272: name = \"python-whois\"",
          "273: version = \"0.8.0\"",
          "274: description = \"Whois querying and parsing of domain registration information.\"",
          "275: category = \"main\"",
          "276: optional = false",
          "277: python-versions = \"*\"",
          "279: [package.dependencies]",
          "280: future = \"*\"",
          "282: [package.extras]",
          "283: \"better date conversion\" = [\"python-dateutil\"]",
          "285: [[package]]",
          "286: name = \"pywin32\"",
          "287: version = \"304\"",
          "288: description = \"Python for Window Extensions\"",
          "289: category = \"main\"",
          "290: optional = false",
          "291: python-versions = \"*\"",
          "293: [[package]]",
          "294: name = \"requests\"",
          "295: version = \"2.28.1\"",
          "296: description = \"Python HTTP for Humans.\"",
          "297: category = \"main\"",
          "298: optional = false",
          "299: python-versions = \">=3.7, <4\"",
          "301: [package.dependencies]",
          "302: certifi = \">=2017.4.17\"",
          "303: charset-normalizer = \">=2,<3\"",
          "304: idna = \">=2.5,<4\"",
          "305: urllib3 = \">=1.21.1,<1.27\"",
          "307: [package.extras]",
          "308: socks = [\"PySocks (>=1.5.6,!=1.5.7)\"]",
          "309: use_chardet_on_py3 = [\"chardet (>=3.0.2,<6)\"]",
          "311: [[package]]",
          "312: name = \"ruamel.yaml\"",
          "313: version = \"0.17.21\"",
          "314: description = \"ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order\"",
          "315: category = \"main\"",
          "316: optional = false",
          "317: python-versions = \">=3\"",
          "319: [package.dependencies]",
          "320: \"ruamel.yaml.clib\" = {version = \">=0.2.6\", markers = \"platform_python_implementation == \\\"CPython\\\" and python_version < \\\"3.11\\\"\"}",
          "322: [package.extras]",
          "323: docs = [\"ryd\"]",
          "324: jinja2 = [\"ruamel.yaml.jinja2 (>=0.2)\"]",
          "326: [[package]]",
          "327: name = \"ruamel.yaml.clib\"",
          "328: version = \"0.2.6\"",
          "329: description = \"C version of reader, parser and emitter for ruamel.yaml derived from libyaml\"",
          "330: category = \"main\"",
          "331: optional = false",
          "332: python-versions = \">=3.5\"",
          "334: [[package]]",
          "335: name = \"semgrep\"",
          "336: version = \"0.107.0\"",
          "337: description = \"Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.\"",
          "338: category = \"main\"",
          "339: optional = false",
          "340: python-versions = \">=3.7\"",
          "342: [package.dependencies]",
          "343: attrs = \">=21.3,<22.0\"",
          "344: boltons = \">=21.0,<22.0\"",
          "345: click = \">=8.1,<9.0\"",
          "346: click-option-group = \">=0.5,<1.0\"",
          "347: colorama = \">=0.4.0,<0.5.0\"",
          "348: defusedxml = \">=0.7.1,<0.8.0\"",
          "349: glom = \">=22.1,<23.0\"",
          "350: jsonschema = \">=4.6,<5.0\"",
          "351: packaging = \">=21.0,<22.0\"",
          "352: peewee = \">=3.14,<4.0\"",
          "353: python-lsp-jsonrpc = \">=1.0.0,<1.1.0\"",
          "354: requests = \">=2.22,<3.0\"",
          "355: \"ruamel.yaml\" = \">=0.16.0,<0.18\"",
          "356: tqdm = \">=4.46,<5.0\"",
          "357: typing-extensions = \">=4.2,<5.0\"",
          "358: urllib3 = \">=1.26,<2.0\"",
          "359: wcmatch = \">=8.3,<9.0\"",
          "361: [[package]]",
          "362: name = \"six\"",
          "363: version = \"1.16.0\"",
          "364: description = \"Python 2 and 3 compatibility utilities\"",
          "365: category = \"main\"",
          "366: optional = false",
          "367: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"",
          "369: [[package]]",
          "370: name = \"tomli\"",
          "371: version = \"2.0.1\"",
          "372: description = \"A lil' TOML parser\"",
          "373: category = \"main\"",
          "374: optional = false",
          "375: python-versions = \">=3.7\"",
          "377: [[package]]",
          "378: name = \"tqdm\"",
          "379: version = \"4.64.0\"",
          "380: description = \"Fast, Extensible Progress Meter\"",
          "381: category = \"main\"",
          "382: optional = false",
          "383: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,>=2.7\"",
          "385: [package.dependencies]",
          "386: colorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}",
          "388: [package.extras]",
          "389: dev = [\"py-make (>=0.1.0)\", \"twine\", \"wheel\"]",
          "390: notebook = [\"ipywidgets (>=6)\"]",
          "391: slack = [\"slack-sdk\"]",
          "392: telegram = [\"requests\"]",
          "394: [[package]]",
          "395: name = \"typing-extensions\"",
          "396: version = \"4.3.0\"",
          "397: description = \"Backported and Experimental Type Hints for Python 3.7+\"",
          "398: category = \"main\"",
          "399: optional = false",
          "400: python-versions = \">=3.7\"",
          "402: [[package]]",
          "403: name = \"ujson\"",
          "404: version = \"5.4.0\"",
          "405: description = \"Ultra fast JSON encoder and decoder for Python\"",
          "406: category = \"main\"",
          "407: optional = false",
          "408: python-versions = \">=3.7\"",
          "410: [[package]]",
          "411: name = \"urllib3\"",
          "412: version = \"1.26.11\"",
          "413: description = \"HTTP library with thread-safe connection pooling, file post, and more.\"",
          "414: category = \"main\"",
          "415: optional = false",
          "416: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4\"",
          "418: [package.extras]",
          "419: brotli = [\"brotlicffi (>=0.8.0)\", \"brotli (>=1.0.9)\", \"brotlipy (>=0.6.0)\"]",
          "420: secure = [\"pyOpenSSL (>=0.14)\", \"cryptography (>=1.3.4)\", \"idna (>=2.0.0)\", \"certifi\", \"ipaddress\"]",
          "421: socks = [\"PySocks (>=1.5.6,!=1.5.7,<2.0)\"]",
          "423: [[package]]",
          "424: name = \"wcmatch\"",
          "425: version = \"8.4\"",
          "426: description = \"Wildcard/glob file name matcher.\"",
          "427: category = \"main\"",
          "428: optional = false",
          "429: python-versions = \">=3.7\"",
          "431: [package.dependencies]",
          "432: bracex = \">=2.1.1\"",
          "434: [[package]]",
          "435: name = \"websocket-client\"",
          "436: version = \"1.3.3\"",
          "437: description = \"WebSocket client for Python with low level API options\"",
          "438: category = \"main\"",
          "439: optional = false",
          "440: python-versions = \">=3.7\"",
          "442: [package.extras]",
          "443: docs = [\"Sphinx (>=3.4)\", \"sphinx-rtd-theme (>=0.5)\"]",
          "444: optional = [\"python-socks\", \"wsaccel\"]",
          "445: test = [\"websockets\"]",
          "447: [metadata]",
          "448: lock-version = \"1.1\"",
          "449: python-versions = \"^3.10\"",
          "450: content-hash = \"3a5c266d8d2ba4803004d255a658669982fe201c0b81a6364d5161364639e91f\"",
          "452: [metadata.files]",
          "453: attrs = [",
          "454:     {file = \"attrs-21.4.0-py2.py3-none-any.whl\", hash = \"sha256:2d27e3784d7a565d36ab851fe94887c5eccd6a463168875832a1be79c82828b4\"},",
          "455:     {file = \"attrs-21.4.0.tar.gz\", hash = \"sha256:626ba8234211db98e869df76230a137c4c40a12d72445c45d5f5b716f076e2fd\"},",
          "456: ]",
          "457: boltons = [",
          "458:     {file = \"boltons-21.0.0-py2.py3-none-any.whl\", hash = \"sha256:b9bb7b58b2b420bbe11a6025fdef6d3e5edc9f76a42fb467afe7ca212ef9948b\"},",
          "459:     {file = \"boltons-21.0.0.tar.gz\", hash = \"sha256:65e70a79a731a7fe6e98592ecfb5ccf2115873d01dbc576079874629e5c90f13\"},",
          "460: ]",
          "461: bracex = [",
          "462:     {file = \"bracex-2.3.post1-py3-none-any.whl\", hash = \"sha256:351b7f20d56fb9ea91f9b9e9e7664db466eb234188c175fd943f8f755c807e73\"},",
          "463:     {file = \"bracex-2.3.post1.tar.gz\", hash = \"sha256:e7b23fc8b2cd06d3dec0692baabecb249dda94e06a617901ff03a6c56fd71693\"},",
          "464: ]",
          "465: certifi = [",
          "466:     {file = \"certifi-2022.6.15-py3-none-any.whl\", hash = \"sha256:fe86415d55e84719d75f8b69414f6438ac3547d2078ab91b67e779ef69378412\"},",
          "467:     {file = \"certifi-2022.6.15.tar.gz\", hash = \"sha256:84c85a9078b11105f04f3036a9482ae10e4621616db313fe045dd24743a0820d\"},",
          "468: ]",
          "469: charset-normalizer = [",
          "470:     {file = \"charset-normalizer-2.1.0.tar.gz\", hash = \"sha256:575e708016ff3a5e3681541cb9d79312c416835686d054a23accb873b254f413\"},",
          "471:     {file = \"charset_normalizer-2.1.0-py3-none-any.whl\", hash = \"sha256:5189b6f22b01957427f35b6a08d9a0bc45b46d3788ef5a92e978433c7a35f8a5\"},",
          "472: ]",
          "473: click = [",
          "474:     {file = \"click-8.1.3-py3-none-any.whl\", hash = \"sha256:bb4d8133cb15a609f44e8213d9b391b0809795062913b383c62be0ee95b1db48\"},",
          "475:     {file = \"click-8.1.3.tar.gz\", hash = \"sha256:7682dc8afb30297001674575ea00d1814d808d6a36af415a82bd481d37ba7b8e\"},",
          "476: ]",
          "477: click-option-group = [",
          "478:     {file = \"click-option-group-0.5.3.tar.gz\", hash = \"sha256:a6e924f3c46b657feb5b72679f7e930f8e5b224b766ab35c91ae4019b4e0615e\"},",
          "479:     {file = \"click_option_group-0.5.3-py3-none-any.whl\", hash = \"sha256:9653a2297357335d7325a1827e71ac1245d91c97d959346a7decabd4a52d5354\"},",
          "480: ]",
          "481: colorama = [",
          "482:     {file = \"colorama-0.4.5-py2.py3-none-any.whl\", hash = \"sha256:854bf444933e37f5824ae7bfc1e98d5bce2ebe4160d46b5edf346a89358e99da\"},",
          "483:     {file = \"colorama-0.4.5.tar.gz\", hash = \"sha256:e6c6b4334fc50988a639d9b98aa429a0b57da6e17b9a44f0451f930b6967b7a4\"},",
          "484: ]",
          "485: defusedxml = [",
          "486:     {file = \"defusedxml-0.7.1-py2.py3-none-any.whl\", hash = \"sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61\"},",
          "487:     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},",
          "488: ]",
          "489: docker = [",
          "490:     {file = \"docker-6.0.0b1-py3-none-any.whl\", hash = \"sha256:61e4a5c726d76ee1e4632e9626b6e3b99dadff3ffd6b24b246b68c05d854bd11\"},",
          "491:     {file = \"docker-6.0.0b1.tar.gz\", hash = \"sha256:a38b57fd6ad112dade98b795dc94a790b347134b140a5d43d7634aa6ad928859\"},",
          "492: ]",
          "493: face = [",
          "494:     {file = \"face-20.1.1-py2-none-any.whl\", hash = \"sha256:3790311a7329e4b0d90baee346eecad54b337629576edf3a246683a5f0d24446\"},",
          "495:     {file = \"face-20.1.1.tar.gz\", hash = \"sha256:7d59ca5ba341316e58cf72c6aff85cca2541cf5056c4af45cb63af9a814bed3e\"},",
          "496: ]",
          "497: future = [",
          "498:     {file = \"future-0.18.2.tar.gz\", hash = \"sha256:b1bead90b70cf6ec3f0710ae53a525360fa360d306a86583adc6bf83a4db537d\"},",
          "499: ]",
          "500: glom = [",
          "501:     {file = \"glom-22.1.0-py2.py3-none-any.whl\", hash = \"sha256:5339da206bf3532e01a83a35aca202960ea885156986d190574b779598e9e772\"},",
          "502:     {file = \"glom-22.1.0.tar.gz\", hash = \"sha256:1510c6587a8f9c64a246641b70033cbc5ebde99f02ad245693678038e821aeb5\"},",
          "503: ]",
          "504: idna = [",
          "505:     {file = \"idna-3.3-py3-none-any.whl\", hash = \"sha256:84d9dd047ffa80596e0f246e2eab0b391788b0503584e8945f2368256d2735ff\"},",
          "506:     {file = \"idna-3.3.tar.gz\", hash = \"sha256:9d643ff0a55b762d5cdb124b8eaa99c66322e2157b69160bc32796e824360e6d\"},",
          "507: ]",
          "508: jsonschema = [",
          "509:     {file = \"jsonschema-4.9.1-py3-none-any.whl\", hash = \"sha256:8ebad55894c002585271af2d327d99339ef566fb085d9129b69e2623867c4106\"},",
          "510:     {file = \"jsonschema-4.9.1.tar.gz\", hash = \"sha256:408c4c8ed0dede3b268f7a441784f74206380b04f93eb2d537c7befb3df3099f\"},",
          "511: ]",
          "512: mypy-extensions = [",
          "513:     {file = \"mypy_extensions-0.4.3-py2.py3-none-any.whl\", hash = \"sha256:090fedd75945a69ae91ce1303b5824f428daf5a028d2f6ab8a299250a846f15d\"},",
          "514:     {file = \"mypy_extensions-0.4.3.tar.gz\", hash = \"sha256:2d82818f5bb3e369420cb3c4060a7970edba416647068eb4c5343488a6c604a8\"},",
          "515: ]",
          "516: packaging = [",
          "517:     {file = \"packaging-21.3-py3-none-any.whl\", hash = \"sha256:ef103e05f519cdc783ae24ea4e2e0f508a9c99b2d4969652eed6a2e1ea5bd522\"},",
          "518:     {file = \"packaging-21.3.tar.gz\", hash = \"sha256:dd47c42927d89ab911e606518907cc2d3a1f38bbd026385970643f9c5b8ecfeb\"},",
          "519: ]",
          "520: pathspec = [",
          "521:     {file = \"pathspec-0.9.0-py2.py3-none-any.whl\", hash = \"sha256:7d15c4ddb0b5c802d161efc417ec1a2558ea2653c2e8ad9c19098201dc1c993a\"},",
          "522:     {file = \"pathspec-0.9.0.tar.gz\", hash = \"sha256:e564499435a2673d586f6b2130bb5b95f04a3ba06f81b8f895b651a3c76aabb1\"},",
          "523: ]",
          "524: peewee = [",
          "525:     {file = \"peewee-3.15.1.tar.gz\", hash = \"sha256:6d5db3babc33819ac326f1550e5a39677f4584094c567a7b88cc6bf7bcdcb687\"},",
          "526: ]",
          "527: platformdirs = [",
          "528:     {file = \"platformdirs-2.5.2-py3-none-any.whl\", hash = \"sha256:027d8e83a2d7de06bbac4e5ef7e023c02b863d7ea5d079477e722bb41ab25788\"},",
          "529:     {file = \"platformdirs-2.5.2.tar.gz\", hash = \"sha256:58c8abb07dcb441e6ee4b11d8df0ac856038f944ab98b7be6b27b2a3c7feef19\"},",
          "530: ]",
          "531: pyparsing = [",
          "532:     {file = \"pyparsing-3.0.9-py3-none-any.whl\", hash = \"sha256:5026bae9a10eeaefb61dab2f09052b9f4307d44aee4eda64b309723d8d206bbc\"},",
          "533:     {file = \"pyparsing-3.0.9.tar.gz\", hash = \"sha256:2b020ecf7d21b687f219b71ecad3631f644a47f01403fa1d1036b0c6416d70fb\"},",
          "534: ]",
          "535: pyrsistent = [",
          "536:     {file = \"pyrsistent-0.18.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:df46c854f490f81210870e509818b729db4488e1f30f2a1ce1698b2295a878d1\"},",
          "537:     {file = \"pyrsistent-0.18.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5d45866ececf4a5fff8742c25722da6d4c9e180daa7b405dc0a2a2790d668c26\"},",
          "538:     {file = \"pyrsistent-0.18.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4ed6784ceac462a7d6fcb7e9b663e93b9a6fb373b7f43594f9ff68875788e01e\"},",
          "539:     {file = \"pyrsistent-0.18.1-cp310-cp310-win32.whl\", hash = \"sha256:e4f3149fd5eb9b285d6bfb54d2e5173f6a116fe19172686797c056672689daf6\"},",
          "540:     {file = \"pyrsistent-0.18.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:636ce2dc235046ccd3d8c56a7ad54e99d5c1cd0ef07d9ae847306c91d11b5fec\"},",
          "541:     {file = \"pyrsistent-0.18.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:e92a52c166426efbe0d1ec1332ee9119b6d32fc1f0bbfd55d5c1088070e7fc1b\"},",
          "542:     {file = \"pyrsistent-0.18.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d7a096646eab884bf8bed965bad63ea327e0d0c38989fc83c5ea7b8a87037bfc\"},",
          "543:     {file = \"pyrsistent-0.18.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cdfd2c361b8a8e5d9499b9082b501c452ade8bbf42aef97ea04854f4a3f43b22\"},",
          "544:     {file = \"pyrsistent-0.18.1-cp37-cp37m-win32.whl\", hash = \"sha256:7ec335fc998faa4febe75cc5268a9eac0478b3f681602c1f27befaf2a1abe1d8\"},",
          "545:     {file = \"pyrsistent-0.18.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:6455fc599df93d1f60e1c5c4fe471499f08d190d57eca040c0ea182301321286\"},",
          "546:     {file = \"pyrsistent-0.18.1-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:fd8da6d0124efa2f67d86fa70c851022f87c98e205f0594e1fae044e7119a5a6\"},",
          "547:     {file = \"pyrsistent-0.18.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7bfe2388663fd18bd8ce7db2c91c7400bf3e1a9e8bd7d63bf7e77d39051b85ec\"},",
          "548:     {file = \"pyrsistent-0.18.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0e3e1fcc45199df76053026a51cc59ab2ea3fc7c094c6627e93b7b44cdae2c8c\"},",
          "549:     {file = \"pyrsistent-0.18.1-cp38-cp38-win32.whl\", hash = \"sha256:b568f35ad53a7b07ed9b1b2bae09eb15cdd671a5ba5d2c66caee40dbf91c68ca\"},",
          "550:     {file = \"pyrsistent-0.18.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:d1b96547410f76078eaf66d282ddca2e4baae8964364abb4f4dcdde855cd123a\"},",
          "551:     {file = \"pyrsistent-0.18.1-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:f87cc2863ef33c709e237d4b5f4502a62a00fab450c9e020892e8e2ede5847f5\"},",
          "552:     {file = \"pyrsistent-0.18.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6bc66318fb7ee012071b2792024564973ecc80e9522842eb4e17743604b5e045\"},",
          "553:     {file = \"pyrsistent-0.18.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:914474c9f1d93080338ace89cb2acee74f4f666fb0424896fcfb8d86058bf17c\"},",
          "554:     {file = \"pyrsistent-0.18.1-cp39-cp39-win32.whl\", hash = \"sha256:1b34eedd6812bf4d33814fca1b66005805d3640ce53140ab8bbb1e2651b0d9bc\"},",
          "555:     {file = \"pyrsistent-0.18.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:e24a828f57e0c337c8d8bb9f6b12f09dfdf0273da25fda9e314f0b684b415a07\"},",
          "556:     {file = \"pyrsistent-0.18.1.tar.gz\", hash = \"sha256:d4d61f8b993a7255ba714df3aca52700f8125289f84f704cf80916517c46eb96\"},",
          "557: ]",
          "558: python-dateutil = [",
          "559:     {file = \"python-dateutil-2.8.2.tar.gz\", hash = \"sha256:0123cacc1627ae19ddf3c27a5de5bd67ee4586fbdd6440d9748f8abb483d3e86\"},",
          "560:     {file = \"python_dateutil-2.8.2-py2.py3-none-any.whl\", hash = \"sha256:961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9\"},",
          "561: ]",
          "562: python-dotenv = [",
          "563:     {file = \"python-dotenv-0.20.0.tar.gz\", hash = \"sha256:b7e3b04a59693c42c36f9ab1cc2acc46fa5df8c78e178fc33a8d4cd05c8d498f\"},",
          "564:     {file = \"python_dotenv-0.20.0-py3-none-any.whl\", hash = \"sha256:d92a187be61fe482e4fd675b6d52200e7be63a12b724abbf931a40ce4fa92938\"},",
          "565: ]",
          "566: python-lsp-jsonrpc = [",
          "567:     {file = \"python-lsp-jsonrpc-1.0.0.tar.gz\", hash = \"sha256:7bec170733db628d3506ea3a5288ff76aa33c70215ed223abdb0d95e957660bd\"},",
          "568:     {file = \"python_lsp_jsonrpc-1.0.0-py3-none-any.whl\", hash = \"sha256:079b143be64b0a378bdb21dff5e28a8c1393fe7e8a654ef068322d754e545fc7\"},",
          "569: ]",
          "570: python-whois = [",
          "571:     {file = \"python-whois-0.8.0.tar.gz\", hash = \"sha256:dd336d3517eace2a7689406db7bb96ada3c5e74327423151aeee3e64225f6220\"},",
          "572: ]",
          "573: pywin32 = [",
          "574:     {file = \"pywin32-304-cp310-cp310-win32.whl\", hash = \"sha256:3c7bacf5e24298c86314f03fa20e16558a4e4138fc34615d7de4070c23e65af3\"},",
          "575:     {file = \"pywin32-304-cp310-cp310-win_amd64.whl\", hash = \"sha256:4f32145913a2447736dad62495199a8e280a77a0ca662daa2332acf849f0be48\"},",
          "576:     {file = \"pywin32-304-cp310-cp310-win_arm64.whl\", hash = \"sha256:d3ee45adff48e0551d1aa60d2ec066fec006083b791f5c3527c40cd8aefac71f\"},",
          "577:     {file = \"pywin32-304-cp311-cp311-win32.whl\", hash = \"sha256:30c53d6ce44c12a316a06c153ea74152d3b1342610f1b99d40ba2795e5af0269\"},",
          "578:     {file = \"pywin32-304-cp311-cp311-win_amd64.whl\", hash = \"sha256:7ffa0c0fa4ae4077e8b8aa73800540ef8c24530057768c3ac57c609f99a14fd4\"},",
          "579:     {file = \"pywin32-304-cp311-cp311-win_arm64.whl\", hash = \"sha256:cbbe34dad39bdbaa2889a424d28752f1b4971939b14b1bb48cbf0182a3bcfc43\"},",
          "580:     {file = \"pywin32-304-cp36-cp36m-win32.whl\", hash = \"sha256:be253e7b14bc601718f014d2832e4c18a5b023cbe72db826da63df76b77507a1\"},",
          "581:     {file = \"pywin32-304-cp36-cp36m-win_amd64.whl\", hash = \"sha256:de9827c23321dcf43d2f288f09f3b6d772fee11e809015bdae9e69fe13213988\"},",
          "582:     {file = \"pywin32-304-cp37-cp37m-win32.whl\", hash = \"sha256:f64c0377cf01b61bd5e76c25e1480ca8ab3b73f0c4add50538d332afdf8f69c5\"},",
          "583:     {file = \"pywin32-304-cp37-cp37m-win_amd64.whl\", hash = \"sha256:bb2ea2aa81e96eee6a6b79d87e1d1648d3f8b87f9a64499e0b92b30d141e76df\"},",
          "584:     {file = \"pywin32-304-cp38-cp38-win32.whl\", hash = \"sha256:94037b5259701988954931333aafd39cf897e990852115656b014ce72e052e96\"},",
          "585:     {file = \"pywin32-304-cp38-cp38-win_amd64.whl\", hash = \"sha256:ead865a2e179b30fb717831f73cf4373401fc62fbc3455a0889a7ddac848f83e\"},",
          "586:     {file = \"pywin32-304-cp39-cp39-win32.whl\", hash = \"sha256:25746d841201fd9f96b648a248f731c1dec851c9a08b8e33da8b56148e4c65cc\"},",
          "587:     {file = \"pywin32-304-cp39-cp39-win_amd64.whl\", hash = \"sha256:d24a3382f013b21aa24a5cfbfad5a2cd9926610c0affde3e8ab5b3d7dbcf4ac9\"},",
          "588: ]",
          "589: requests = [",
          "590:     {file = \"requests-2.28.1-py3-none-any.whl\", hash = \"sha256:8fefa2a1a1365bf5520aac41836fbee479da67864514bdb821f31ce07ce65349\"},",
          "591:     {file = \"requests-2.28.1.tar.gz\", hash = \"sha256:7c5599b102feddaa661c826c56ab4fee28bfd17f5abca1ebbe3e7f19d7c97983\"},",
          "592: ]",
          "593: \"ruamel.yaml\" = [",
          "594:     {file = \"ruamel.yaml-0.17.21-py3-none-any.whl\", hash = \"sha256:742b35d3d665023981bd6d16b3d24248ce5df75fdb4e2924e93a05c1f8b61ca7\"},",
          "595:     {file = \"ruamel.yaml-0.17.21.tar.gz\", hash = \"sha256:8b7ce697a2f212752a35c1ac414471dc16c424c9573be4926b56ff3f5d23b7af\"},",
          "596: ]",
          "597: \"ruamel.yaml.clib\" = [",
          "598:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:6e7be2c5bcb297f5b82fee9c665eb2eb7001d1050deaba8471842979293a80b0\"},",
          "599:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:221eca6f35076c6ae472a531afa1c223b9c29377e62936f61bc8e6e8bdc5f9e7\"},",
          "600:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-win32.whl\", hash = \"sha256:1070ba9dd7f9370d0513d649420c3b362ac2d687fe78c6e888f5b12bf8bc7bee\"},",
          "601:     {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-win_amd64.whl\", hash = \"sha256:77df077d32921ad46f34816a9a16e6356d8100374579bc35e15bab5d4e9377de\"},",
          "602:     {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-macosx_10_6_intel.whl\", hash = \"sha256:cfdb9389d888c5b74af297e51ce357b800dd844898af9d4a547ffc143fa56751\"},",
          "603:     {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-manylinux1_x86_64.whl\", hash = \"sha256:7b2927e92feb51d830f531de4ccb11b320255ee95e791022555971c466af4527\"},",
          "604:     {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-win32.whl\", hash = \"sha256:ada3f400d9923a190ea8b59c8f60680c4ef8a4b0dfae134d2f2ff68429adfab5\"},",
          "605:     {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-win_amd64.whl\", hash = \"sha256:de9c6b8a1ba52919ae919f3ae96abb72b994dd0350226e28f3686cb4f142165c\"},",
          "606:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:d67f273097c368265a7b81e152e07fb90ed395df6e552b9fa858c6d2c9f42502\"},",
          "607:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:72a2b8b2ff0a627496aad76f37a652bcef400fd861721744201ef1b45199ab78\"},",
          "608:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-win32.whl\", hash = \"sha256:9efef4aab5353387b07f6b22ace0867032b900d8e91674b5d8ea9150db5cae94\"},",
          "609:     {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-win_amd64.whl\", hash = \"sha256:846fc8336443106fe23f9b6d6b8c14a53d38cef9a375149d61f99d78782ea468\"},",
          "610:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:0847201b767447fc33b9c235780d3aa90357d20dd6108b92be544427bea197dd\"},",
          "611:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:78988ed190206672da0f5d50c61afef8f67daa718d614377dcd5e3ed85ab4a99\"},",
          "612:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-win32.whl\", hash = \"sha256:a49e0161897901d1ac9c4a79984b8410f450565bbad64dbfcbf76152743a0cdb\"},",
          "613:     {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-win_amd64.whl\", hash = \"sha256:bf75d28fa071645c529b5474a550a44686821decebdd00e21127ef1fd566eabe\"},",
          "614:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a32f8d81ea0c6173ab1b3da956869114cae53ba1e9f72374032e33ba3118c233\"},",
          "615:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:7f7ecb53ae6848f959db6ae93bdff1740e651809780822270eab111500842a84\"},",
          "616:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-win32.whl\", hash = \"sha256:89221ec6d6026f8ae859c09b9718799fea22c0e8da8b766b0b2c9a9ba2db326b\"},",
          "617:     {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-win_amd64.whl\", hash = \"sha256:31ea73e564a7b5fbbe8188ab8b334393e06d997914a4e184975348f204790277\"},",
          "618:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:dc6a613d6c74eef5a14a214d433d06291526145431c3b964f5e16529b1842bed\"},",
          "619:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:1866cf2c284a03b9524a5cc00daca56d80057c5ce3cdc86a52020f4c720856f0\"},",
          "620:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-win32.whl\", hash = \"sha256:3fb9575a5acd13031c57a62cc7823e5d2ff8bc3835ba4d94b921b4e6ee664104\"},",
          "621:     {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-win_amd64.whl\", hash = \"sha256:825d5fccef6da42f3c8eccd4281af399f21c02b32d98e113dbc631ea6a6ecbc7\"},",
          "622:     {file = \"ruamel.yaml.clib-0.2.6.tar.gz\", hash = \"sha256:4ff604ce439abb20794f05613c374759ce10e3595d1867764dd1ae675b85acbd\"},",
          "623: ]",
          "624: semgrep = [",
          "625:     {file = \"semgrep-0.107.0-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:51dc4813e2304efa9811d89c81614b6076a6d16f6ca56f19f672898d451946b5\"},",
          "626:     {file = \"semgrep-0.107.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:2902ca1825fa2a17a57b5b8fbe0828c4c714bbe82dff7bc5f415cd876f58d715\"},",
          "627:     {file = \"semgrep-0.107.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:202a3cc52e96b6603d22f3d5629e6f654008d53ab32613dbc9a8521be6cc42b9\"},",
          "628:     {file = \"semgrep-0.107.0.tar.gz\", hash = \"sha256:f357b650dcc517671286aa6df4b3e7a2eb1f12ca178edd6c18b9c8eeea3ca135\"},",
          "629: ]",
          "630: six = [",
          "631:     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},",
          "632:     {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},",
          "633: ]",
          "634: tomli = [",
          "635:     {file = \"tomli-2.0.1-py3-none-any.whl\", hash = \"sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc\"},",
          "636:     {file = \"tomli-2.0.1.tar.gz\", hash = \"sha256:de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f\"},",
          "637: ]",
          "638: tqdm = [",
          "639:     {file = \"tqdm-4.64.0-py2.py3-none-any.whl\", hash = \"sha256:74a2cdefe14d11442cedf3ba4e21a3b84ff9a2dbdc6cfae2c34addb2a14a5ea6\"},",
          "640:     {file = \"tqdm-4.64.0.tar.gz\", hash = \"sha256:40be55d30e200777a307a7585aee69e4eabb46b4ec6a4b4a5f2d9f11e7d5408d\"},",
          "641: ]",
          "642: typing-extensions = [",
          "643:     {file = \"typing_extensions-4.3.0-py3-none-any.whl\", hash = \"sha256:25642c956049920a5aa49edcdd6ab1e06d7e5d467fc00e0506c44ac86fbfca02\"},",
          "644:     {file = \"typing_extensions-4.3.0.tar.gz\", hash = \"sha256:e6d2677a32f47fc7eb2795db1dd15c1f34eff616bcaf2cfb5e997f854fa1c4a6\"},",
          "645: ]",
          "646: ujson = [",
          "647:     {file = \"ujson-5.4.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:511aa641a5b91d19280183b134fb6c473039d4dd82e987ac810cffba783521ac\"},",
          "648:     {file = \"ujson-5.4.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:b045ca5497a950cc3492840adb3bcb3b9e305ed6599ed14c6aeaa08011aa463f\"},",
          "649:     {file = \"ujson-5.4.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:aa00b746138835271653b0c3da171d2a8b510c579381f71e8b8e03484d50d825\"},",
          "650:     {file = \"ujson-5.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:91edcf9978ee401119e9c8589376ae37fd3e6e75ee365c49385cb005eaff1535\"},",
          "651:     {file = \"ujson-5.4.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:05e411627e5d6ee773232960ca7307e66017f78e3fa74f7e95c3a8cc5cb05415\"},",
          "652:     {file = \"ujson-5.4.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:7d4c9ccd30e621e714ec24ca911ad8873567dc1ac1e5e914405ea9dd16b9d40c\"},",
          "653:     {file = \"ujson-5.4.0-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:dd0d4ec694cab8a0a4d85f45f81ae0065465c4670f0db72ba48d6c4e7ae42834\"},",
          "654:     {file = \"ujson-5.4.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:aaa77af91df3f71858a1f792c74d3f2d3abf3875f93ab1a2b9a24b3797743b02\"},",
          "655:     {file = \"ujson-5.4.0-cp310-cp310-win32.whl\", hash = \"sha256:fbea46c0fbc1c3bc8f957afd8dbb25b4ea3a356e18ee6dd79ace6cf32bd4cff7\"},",
          "656:     {file = \"ujson-5.4.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:2d98248f1df1e1aab67e0374ab98945dd36bc1764753d71fd8aea5f296360b76\"},",
          "657:     {file = \"ujson-5.4.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:f5c547d49a7e9d3f231e9323171bbbbcef63173fb007a2787cd4f05ac6269315\"},",
          "658:     {file = \"ujson-5.4.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:39bb702ca1612253b5e4b6004e0f20208c98a446606aa351f9a7ba5ceaff0eb8\"},",
          "659:     {file = \"ujson-5.4.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:381c97d326d1ec569d318cc0ae83940ea2df125ede1000871680fefd5b7fdea9\"},",
          "660:     {file = \"ujson-5.4.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3a0707f381f97e1287c0dbf94d95bd6c0bbf6e4eeeaa656f0076b7883010c818\"},",
          "661:     {file = \"ujson-5.4.0-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:6a20f2f6e8818c1ab89dd4be6bbad3fc2ddb15287f89e7ea35f3eb849afebbd9\"},",
          "662:     {file = \"ujson-5.4.0-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:8cd6117e33233f2de6bc896eea6a5a59b58a37db08f371157264e0ec5e51c76a\"},",
          "663:     {file = \"ujson-5.4.0-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:31bdb6d771d5ef6d37134b42211500bfe176c55d399f3317e569783dc42ed38e\"},",
          "664:     {file = \"ujson-5.4.0-cp37-cp37m-win32.whl\", hash = \"sha256:baa76a6f707a6d22437fe9c7ec9719672fb04d4d9435a3e80ee9b1aaeb2089d9\"},",
          "665:     {file = \"ujson-5.4.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:ee29cf5cfc1e841708297633e1ce749aa851fb96830bbe51f2e5940741ff2441\"},",
          "666:     {file = \"ujson-5.4.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:7e12272361e9722777c83b3f5b0bb91d402531f36e80c6e5fafb6acb89e897e3\"},",
          "667:     {file = \"ujson-5.4.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:3212847d3885bfd4f5fd56cdc37645a8f8e8a80d6cb569505da22fd9eb0e1a02\"},",
          "668:     {file = \"ujson-5.4.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0bcde3135265ecdd5714a7de4fdc167925390d7b17ca325e59980f4114c962b8\"},",
          "669:     {file = \"ujson-5.4.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0551c1ba0bc9e05b69d9c18266dbc93252b5fa3cd9940051bc88a0dd33607b19\"},",
          "670:     {file = \"ujson-5.4.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:13297a7d501f9c8c53e409d4fa57cc574e4fbfbe8807ef2c4c7ce2e3ec933a85\"},",
          "671:     {file = \"ujson-5.4.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:2974b17bc522ef86d98b498959d82f03c02e07d9eb08746026415298f4a4bca3\"},",
          "672:     {file = \"ujson-5.4.0-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:5df8b6369ee5ee2685fcc917f6c46b34e599c6e9a512fada6dfd752b909fa06a\"},",
          "673:     {file = \"ujson-5.4.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:754f422aba8db8201a1073f25e2f732effc6471f8755708b16e6ebf19dd23634\"},",
          "674:     {file = \"ujson-5.4.0-cp38-cp38-win32.whl\", hash = \"sha256:ea7fbc540bc04d5b05e5cd54e60ee8745ac665eedf2bad2ba9d12d5c7a7b7d2e\"},",
          "675:     {file = \"ujson-5.4.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:8d472efa9c92e1b2933a22d2f1dbd5237087997136b24ac2b913bf4e8be03135\"},",
          "676:     {file = \"ujson-5.4.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:e2a9ddb5c6d1427056b8d62a1a172a18ae522b14d9ba5996b8281b09cba87edd\"},",
          "677:     {file = \"ujson-5.4.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:1120c8263f7d85e89533a2b46d80cc6def15114772010ede4d197739e111dba6\"},",
          "678:     {file = \"ujson-5.4.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:400e4ca8a59f71398e8fa56c4d2d6f535e2a121ddb57284ec15752ffce2dd63a\"},",
          "679:     {file = \"ujson-5.4.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e844be0831042aa91e847e5ab03bddd1089ab1a8dd0a1bf90411abf864f058b2\"},",
          "680:     {file = \"ujson-5.4.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0b46aee21e5d75426c4058dfdb42f7e7b1d130c664ee5027a8dbbc50872dc32b\"},",
          "681:     {file = \"ujson-5.4.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:326a96324ed9215b0bc9f1a5af324fb33900b6b0901516bcc421475d6596de0d\"},",
          "682:     {file = \"ujson-5.4.0-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:fd82932aaa224abd7d01e823b77aef9970f5ac1695027331d99e7f5fda9d37f5\"},",
          "683:     {file = \"ujson-5.4.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:8cce79ce47c37132373fbdf55b683883c262a3a60763130e080b8394c1201d32\"},",
          "684:     {file = \"ujson-5.4.0-cp39-cp39-win32.whl\", hash = \"sha256:191f88d5865740497b9827ef9b7c12f37a79872ac984e09f0901a10024019380\"},",
          "685:     {file = \"ujson-5.4.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:68c7f753aec490c6566fd3cd301887c413ac3a588316e446f30a4134ac665668\"},",
          "686:     {file = \"ujson-5.4.0-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:1a2e645325f844f9c890c9d956fc2d35ca91f38c857278238ef6516c2f99cf7c\"},",
          "687:     {file = \"ujson-5.4.0-pp37-pypy37_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cec010d318a0238b1333ea9f40d5603d374cc026c29c4471e2661712c6682da1\"},",
          "688:     {file = \"ujson-5.4.0-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b40a3757a563ef77c3f2f9ea1732c2924e8b3b2bda3fa89513f949472ad40b6e\"},",
          "689:     {file = \"ujson-5.4.0-pp37-pypy37_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:67f4e2fa81e1d99c01e7b1978ab0cbf3c9a8b663f683a709f87baad110d5b940\"},",
          "690:     {file = \"ujson-5.4.0-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:9ae1d0094ce730e39e09656bc14074d9573cdd80adec1a55b06d8bf1f9613a01\"},",
          "691:     {file = \"ujson-5.4.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:784dbd12925845a3f0757a956447e2fd31418abb5aeaebf3aca1203195f16fd1\"},",
          "692:     {file = \"ujson-5.4.0-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:422653083c6df6cec17fdb5d6106c209aad9b0c94131c53b073980403db22167\"},",
          "693:     {file = \"ujson-5.4.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e91947fda8354ea7faf698b084ebcdbabd239e7b15d8436fb74394f59a207ac9\"},",
          "694:     {file = \"ujson-5.4.0-pp38-pypy38_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ef985eb2770900a485431910bd3f333b56d1a34b65f8c26a6ed8e8adf55f98d9\"},",
          "695:     {file = \"ujson-5.4.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:025758cf6561af6986d77cd4af9367ab56dde5c7c50f13f59e6964b4b25df73e\"},",
          "696:     {file = \"ujson-5.4.0.tar.gz\", hash = \"sha256:6b953e09441e307504130755e5bd6b15850178d591f66292bba4608c4f7f9b00\"},",
          "697: ]",
          "698: urllib3 = [",
          "699:     {file = \"urllib3-1.26.11-py2.py3-none-any.whl\", hash = \"sha256:c33ccba33c819596124764c23a97d25f32b28433ba0dedeb77d873a38722c9bc\"},",
          "700:     {file = \"urllib3-1.26.11.tar.gz\", hash = \"sha256:ea6e8fb210b19d950fab93b60c9009226c63a28808bc8386e05301e25883ac0a\"},",
          "701: ]",
          "702: wcmatch = [",
          "703:     {file = \"wcmatch-8.4-py3-none-any.whl\", hash = \"sha256:dc7351e5a7f8bbf4c6828d51ad20c1770113f5f3fd3dfe2a03cfde2a63f03f98\"},",
          "704:     {file = \"wcmatch-8.4.tar.gz\", hash = \"sha256:ba4fc5558f8946bf1ffc7034b05b814d825d694112499c86035e0e4d398b6a67\"},",
          "705: ]",
          "706: websocket-client = [",
          "707:     {file = \"websocket-client-1.3.3.tar.gz\", hash = \"sha256:d58c5f284d6a9bf8379dab423259fe8f85b70d5fa5d2916d5791a84594b122b1\"},",
          "708:     {file = \"websocket_client-1.3.3-py3-none-any.whl\", hash = \"sha256:5d55652dc1d0b3c734f044337d929aaf83f4f9138816ec680c1aefefb4dc4877\"},",
          "709: ]",
          "",
          "---------------"
        ]
      }
    }
  ]
}