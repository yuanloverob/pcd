{
  "cve_id": "CVE-2024-22232",
  "cve_desc": "A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master\u2019s filesystem.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd6e4c59e8870ba462660e87bf59fac03a03bf76",
      "candidate_info": {
        "commit_hash": "bd6e4c59e8870ba462660e87bf59fac03a03bf76",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/bd6e4c59e8870ba462660e87bf59fac03a03bf76",
        "files": [
          "tests/pytests/pkg/download/test_pkg_download.py",
          "tools/pkg/repo/create.py"
        ],
        "message": "Revert \"update photon paths to use their $releasever string string which includes .0\"\n\nThis reverts commit fd4e3a225a444be5e063f3037f15872918140e90.",
        "before_after_code_files": [
          "tests/pytests/pkg/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py",
          "tools/pkg/repo/create.py||tools/pkg/repo/create.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py": [
          "File: tests/pytests/pkg/download/test_pkg_download.py -> tests/pytests/pkg/download/test_pkg_download.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: ):",
          "257:     arch = os.environ.get(\"SALT_REPO_ARCH\") or \"x86_64\"",
          "262:     if repo_subpath == \"minor\":",
          "263:         repo_url_base = (",
          "264:             f\"{root_url}/{os_name}/{os_version}/{arch}/{repo_subpath}/{salt_release}\"",
          "",
          "[Removed Lines]",
          "259:     if os_name == \"photon\":",
          "260:         os_version = f\"{os_version}.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/pkg/repo/create.py||tools/pkg/repo/create.py": [
          "File: tools/pkg/repo/create.py -> tools/pkg/repo/create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:         assert incoming is not None",
          "381:         assert repo_path is not None",
          "382:         assert key_id is not None",
          "386:     display_name = f\"{distro.capitalize()} {distro_version}\"",
          "387:     if distro_version not in _rpm_distro_info[distro]:",
          "388:         ctx.error(f\"Support for {display_name} is missing.\")",
          "",
          "[Removed Lines]",
          "384:     if distro == \"photon\":",
          "385:         distro_version = f\"{distro_version}.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b139b41ab2e137b10fd8d8c907a538b5119153e",
      "candidate_info": {
        "commit_hash": "3b139b41ab2e137b10fd8d8c907a538b5119153e",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/3b139b41ab2e137b10fd8d8c907a538b5119153e",
        "files": [
          "noxfile.py"
        ],
        "message": "If the user passes a path to the package tests, don't auto add them\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "noxfile.py||noxfile.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "noxfile.py||noxfile.py": [
          "File: noxfile.py -> noxfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1886:         chunk = session.posargs.pop(0)",
          "1888:     cmd_args = chunks[chunk]",
          "1890:     if IS_LINUX:",
          "1891:         # Fetch the toolchain",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1889:     for arg in session.posargs:",
          "1890:         if arg.startswith(\"tests/pytests/pkg/\"):",
          "1891:             # The user is passing test paths",
          "1892:             cmd_args.pop()",
          "1893:             break",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1fa82b9a8375aea5744e202c18cb0a36a1093b8",
      "candidate_info": {
        "commit_hash": "b1fa82b9a8375aea5744e202c18cb0a36a1093b8",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/b1fa82b9a8375aea5744e202c18cb0a36a1093b8",
        "files": [
          "CHANGELOG.md",
          "changelog/565.security.md",
          "changelog/65759.fixed.md",
          "changelog/65830.security.md",
          "changelog/665924.changed.md",
          "doc/man/salt-api.1",
          "doc/man/salt-call.1",
          "doc/man/salt-cloud.1",
          "doc/man/salt-cp.1",
          "doc/man/salt-key.1",
          "doc/man/salt-master.1",
          "doc/man/salt-minion.1",
          "doc/man/salt-proxy.1",
          "doc/man/salt-run.1",
          "doc/man/salt-ssh.1",
          "doc/man/salt-syndic.1",
          "doc/man/salt.1",
          "doc/man/salt.7",
          "doc/man/spm.1",
          "doc/topics/releases/3006.6.md",
          "doc/topics/releases/templates/3006.6.md.template",
          "pkg/debian/changelog",
          "pkg/rpm/salt.spec"
        ],
        "message": "Release v3006.6",
        "before_after_code_files": [
          "pkg/rpm/salt.spec||pkg/rpm/salt.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/rpm/salt.spec||pkg/rpm/salt.spec": [
          "File: pkg/rpm/salt.spec -> pkg/rpm/salt.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: %define fish_dir %{_datadir}/fish/vendor_functions.d",
          "33: Name:    salt",
          "35: Release: 0",
          "36: Summary: A parallel remote execution system",
          "37: Group:   System Environment/Daemons",
          "",
          "[Removed Lines]",
          "34: Version: 3006.5",
          "",
          "[Added Lines]",
          "34: Version: 3006.6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585: %changelog",
          "588: # Removed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588: # Changed",
          "590: - Salt no longer time bombs user installations on code using `salt.utils.versions.warn_until_date` [#665924](https://github.com/saltstack/salt/issues/665924)",
          "592: # Fixed",
          "594: - Fix un-closed transport in tornado netapi [#65759](https://github.com/saltstack/salt/issues/65759)",
          "596: # Security",
          "598: - CVE-2024-22231 Prevent directory traversal when creating syndic cache directory on the master",
          "599:   CVE-2024-22232 Prevent directory traversal attacks in the master's serve_file method.",
          "600:   These vulerablities were discovered and reported by:",
          "601:   Yudi Zhao(Huawei Nebula Security Lab),Chenwei Jiang(Huawei Nebula Security Lab) [#565](https://github.com/saltstack/salt/issues/565)",
          "602: - Update some requirements which had some security issues:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4289b0f1b437714870930ef3f6fe11f1e3f561f",
      "candidate_info": {
        "commit_hash": "a4289b0f1b437714870930ef3f6fe11f1e3f561f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a4289b0f1b437714870930ef3f6fe11f1e3f561f",
        "files": [
          "tools/vm.py"
        ],
        "message": "Make sure that the package artifacts are uploaded to VMs\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/vm.py||tools/vm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/vm.py||tools/vm.py": [
          "File: tools/vm.py -> tools/vm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1315:             \"--include\",",
          "1316:             \"artifacts/salt\",",
          "1317:             \"--include\",",
          "1319:             # But we also want to exclude all other entries under artifacts/",
          "1320:             \"--exclude\",",
          "1321:             \"artifacts/*\",",
          "",
          "[Removed Lines]",
          "1318:             \"artifacts/pkg/*\",",
          "",
          "[Added Lines]",
          "1318:             \"artifacts/pkg\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "062be920287240fd3fbc5855669d8adbb17d3e08",
      "candidate_info": {
        "commit_hash": "062be920287240fd3fbc5855669d8adbb17d3e08",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/062be920287240fd3fbc5855669d8adbb17d3e08",
        "files": [
          ".github/workflows/test-package-downloads-action.yml",
          "tools/precommit/workflows.py"
        ],
        "message": "Re-add the removed Linux OS'es for the package download tests\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tools/precommit/workflows.py||tools/precommit/workflows.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/precommit/workflows.py||tools/precommit/workflows.py": [
          "File: tools/precommit/workflows.py -> tools/precommit/workflows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: # pylint: disable=resource-leakage,broad-except,3rd-party-module-not-gated",
          "5: from __future__ import annotations",
          "7: import logging",
          "8: import shutil",
          "9: from typing import TYPE_CHECKING, cast",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: WORKFLOWS = tools.utils.REPO_ROOT / \".github\" / \"workflows\"",
          "20: TEMPLATES = WORKFLOWS / \"templates\"",
          "23: # Define the command group",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: with tools.utils.REPO_ROOT.joinpath(\"cicd\", \"golden-images.json\").open() as rfh:",
          "23:     AMIS = json.load(rfh)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:         \"macos\": [],",
          "209:         \"windows\": [],",
          "210:     }",
          "212:         \"almalinux\",",
          "213:         \"amazonlinux\",",
          "214:         \"centos\",",
          "215:         \"centosstream\",",
          "216:         \"fedora\",",
          "217:         \"photon\",",
          "221:             continue",
          "222:         test_salt_pkg_downloads_listing[\"linux\"].append((slug, arch, \"package\"))",
          "227:     for slug, display_name, arch in test_salt_listing[\"macos\"]:",
          "228:         test_salt_pkg_downloads_listing[\"macos\"].append((slug, arch, \"package\"))",
          "229:     for slug, display_name, arch in test_salt_listing[\"macos\"][-1:]:",
          "",
          "[Removed Lines]",
          "211:     rpm_slugs = [",
          "218:     ]",
          "219:     for slug, display_name, arch, fips in test_salt_listing[\"linux\"]:",
          "220:         if slug in (\"archlinux-lts\", \"opensuse-15\"):",
          "223:     for slug, display_name, arch, fips in test_salt_listing[\"linux\"][-2:]:",
          "224:         if slug in (\"archlinux-lts\", \"opensuse-15\"):",
          "225:             continue",
          "226:         test_salt_pkg_downloads_listing[\"linux\"].append((slug, arch, \"onedir\"))",
          "",
          "[Added Lines]",
          "214:     rpm_slugs = (",
          "221:     )",
          "222:     linux_skip_pkg_download_tests = (",
          "223:         \"archlinux-lts\",",
          "224:         \"opensuse-15\",",
          "225:         \"windows\",",
          "226:     )",
          "227:     for slug in sorted(AMIS):",
          "228:         if slug.startswith(linux_skip_pkg_download_tests):",
          "230:         if \"arm64\" in slug:",
          "231:             arch = \"arm64\"",
          "232:         else:",
          "233:             arch = \"x86_64\"",
          "234:         if slug.startswith(rpm_slugs) and arch == \"arm64\":",
          "235:             # While we maintain backwards compatible urls",
          "236:             test_salt_pkg_downloads_listing[\"linux\"].append(",
          "237:                 (slug, \"aarch64\", \"package\")",
          "238:             )",
          "240:         if slug.startswith(\"ubuntu-22\"):",
          "241:             test_salt_pkg_downloads_listing[\"linux\"].append((slug, arch, \"onedir\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}