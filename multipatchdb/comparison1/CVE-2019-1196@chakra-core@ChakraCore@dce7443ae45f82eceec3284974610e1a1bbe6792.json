{
  "cve_id": "CVE-2019-1196",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "dce7443ae45f82eceec3284974610e1a1bbe6792",
  "patch_info": {
    "commit_hash": "dce7443ae45f82eceec3284974610e1a1bbe6792",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/dce7443ae45f82eceec3284974610e1a1bbe6792",
    "files": [
      "lib/Backend/BackwardPass.cpp",
      "lib/Backend/JnHelperMethodList.h",
      "lib/Backend/Lower.cpp",
      "lib/Backend/Lower.h",
      "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "lib/Runtime/ByteCode/OpCodes.h",
      "lib/Runtime/Language/InterpreterHandler.inl",
      "lib/Runtime/Language/JavascriptConversion.cpp",
      "lib/Runtime/Language/JavascriptConversion.h",
      "lib/Runtime/Language/JavascriptOperators.cpp",
      "lib/Runtime/Language/JavascriptOperators.h",
      "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
      "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
      "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
      "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
    ],
    "message": "[CVE-2019-1196] Chakra Builtins Function Type Confusion",
    "before_after_code_files": [
      "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
      "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
      "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
      "lib/Backend/Lower.h||lib/Backend/Lower.h",
      "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
      "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
      "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp",
      "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h",
      "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
      "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
      "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
      "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
      "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
      "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
      "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
    ]
  },
  "patch_diff": {
    "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
      "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "6555:             case Js::OpCode::Coerce_Regex:",
      "6556:             case Js::OpCode::Coerce_StrOrRegex:",
      "6557:             case Js::OpCode::Conv_PrimStr:",
      "6559:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc1());",
      "6560:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc2());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6558:             case Js::OpCode::Conv_Prop:",
      "",
      "---------------"
    ],
    "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
      "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "134: HELPERCALL_MATH(Op_MinInAnArray, Js::JavascriptMath::MinInAnArray, AttrCanThrow)",
      "136: HELPERCALLCHK(Op_ConvString, Js::JavascriptConversion::ToString, AttrCanThrow)",
      "137: HELPERCALLCHK(Op_CoerseString, Js::JavascriptConversion::CoerseString, AttrCanThrow)",
      "138: HELPERCALLCHK(Op_CoerseRegex, (Js::JavascriptRegExp* (*) (Js::Var aValue, Js::Var options, Js::ScriptContext *scriptContext))Js::JavascriptRegExp::CreateRegEx, AttrCanThrow)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "137: HELPERCALLCHK(Op_ConvPropertyKey, Js::JavascriptOperators::OP_ToPropertyKey, AttrCanThrow)",
      "",
      "---------------"
    ],
    "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
      "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2826:             this->LowerConvPrimStr(instr);",
      "2827:             break;",
      "2829:         case Js::OpCode::ClearAttributes:",
      "2830:             this->LowerBinaryHelper(instr, IR::HelperOP_ClearAttributes);",
      "2831:             break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2829:         case Js::OpCode::Conv_Prop:",
      "2830:             this->LowerConvPropertyKey(instr);",
      "2831:             break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25474:     return dstOpnd;",
      "25475: }",
      "25477: void",
      "25478: Lowerer::LowerConvStrCommon(IR::JnHelperMethod helper,  IR::Instr * instr)",
      "25479: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25481: void",
      "25482: Lowerer::LowerConvPropertyKey(IR::Instr* instr)",
      "25483: {",
      "25484:     LowerConvStrCommon(IR::HelperOp_ConvPropertyKey, instr);",
      "25485: }",
      "",
      "---------------"
    ],
    "lib/Backend/Lower.h||lib/Backend/Lower.h": [
      "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "670:     void            LowerConvPrimStr(IR::Instr * instr);",
      "671:     void            LowerConvStrCommon(IR::JnHelperMethod helper, IR::Instr * instr);",
      "673:     void            GenerateRecyclerAlloc(IR::JnHelperMethod allocHelper, size_t allocSize, IR::RegOpnd* newObjDst, IR::Instr* insertionPointInstr, bool inOpHelper = false);",
      "675:     template <typename ArrayType>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "673:     void            LowerConvPropertyKey(IR::Instr* instr);",
      "",
      "---------------"
    ],
    "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
      "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const GUID byteCodeCacheReleaseFileVersion =",
      "",
      "[Removed Lines]",
      "10: { 0x26894CEE, 0xB780, 0x4CD4, { 0xB7, 0x93, 0x7B, 0x09, 0x72, 0xAE, 0xED, 0xD9 } };",
      "",
      "[Added Lines]",
      "10: { 0x3096a219, 0x129d, 0x4a4a, { 0xa6, 0x1c, 0x18, 0x6d, 0x3, 0xbb, 0x25, 0xb7 } };",
      "",
      "---------------"
    ],
    "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
      "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "223: }",
      "225: bool ApplyEnclosesArgs(ParseNode* fncDecl, ByteCodeGenerator* byteCodeGenerator);",
      "228: bool IsExpressionStatement(ParseNode* stmt, const Js::ScriptContext *const scriptContext);",
      "229: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
      "230: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot arg1Location);",
      "",
      "[Removed Lines]",
      "226: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall = false, ParseNode *bindPnode = nullptr, bool isTopLevel = false);",
      "227: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
      "",
      "[Added Lines]",
      "226: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall = false, Js::RegSlot bindingNameLocation = Js::Constants::NoRegister, bool isTopLevel = false);",
      "227: void EmitBinaryOpnds(ParseNode* pnode1, ParseNode* pnode2, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot computedPropertyLocation = Js::Constants::NoRegister);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "953:         EndStatement(stmt);",
      "954:     }",
      "957:     if (funcInfo->IsTmpReg(stmt->location))",
      "958:     {",
      "959:         if (!stmt->isUsed && !fReturnValue)",
      "",
      "[Removed Lines]",
      "956:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, nullptr/*bindPnode*/, true/*isTopLevel*/);",
      "",
      "[Added Lines]",
      "956:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, Js::Constants::NoRegister/*computedPropertyLocation*/, true/*isTopLevel*/);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8224:     byteCodeGenerator->Writer()->CallI(Js::OpCode::CallI, location, location, 2, callSiteId);",
      "8225: }",
      "8243: void EmitMemberNode(ParseNode *memberNode, Js::RegSlot objectLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, ParseNode* parentNode, bool useStore, bool* isObjectEmpty = nullptr)",
      "8244: {",
      "8245:     ParseNode *nameNode = memberNode->AsParseNodeBin()->pnode1;",
      "",
      "[Removed Lines]",
      "8227: void EmitComputedFunctionNameVar(ParseNode *nameNode, ParseNodeFnc *exprNode, ByteCodeGenerator *byteCodeGenerator)",
      "8228: {",
      "8229:     AssertMsg(exprNode != nullptr, \"callers of this function should pass in a valid expression Node\");",
      "8230:     Assert(exprNode->HasComputedName());",
      "8232:     if (nameNode == nullptr)",
      "8233:     {",
      "8234:         return;",
      "8235:     }",
      "8237:     if (exprNode->pnodeName == nullptr)",
      "8238:     {",
      "8239:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, nameNode->location);",
      "8240:     }",
      "8241: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "8254:         exprNode->AsParseNodeFnc()->SetHomeObjLocation(objectLocation);",
      "8255:     }",
      "8259:     if (nameNode->nop == knopComputedName)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8241:     Js::RegSlot computedNamePropertyKey = Js::Constants::NoRegister;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "8264:         nameNode->location = nameNode->AsParseNodeUni()->pnode1->location;",
      "8267:         {",
      "8269:         }",
      "8270:     }",
      "",
      "[Removed Lines]",
      "8265:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo);",
      "8266:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor())",
      "8268:             EmitComputedFunctionNameVar(nameNode, exprNode->AsParseNodeFnc(), byteCodeGenerator);",
      "",
      "[Added Lines]",
      "8251:         computedNamePropertyKey = funcInfo->AcquireTmpRegister();",
      "8253:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo, computedNamePropertyKey);",
      "8255:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor() && exprNode->AsParseNodeFnc()->pnodeName == nullptr)",
      "8257:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "8289:             (isClassMember ? Js::OpCode::InitClassMemberSetComputedName : Js::OpCode::InitSetElemI) :",
      "8290:             (isClassMember ? Js::OpCode::InitClassMemberComputedName : Js::OpCode::InitComputedProperty);",
      "8294:         funcInfo->ReleaseLoc(exprNode);",
      "8295:         funcInfo->ReleaseLoc(nameNode);",
      "8297:         return;",
      "8298:     }",
      "",
      "[Removed Lines]",
      "8292:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, nameNode->location, true);",
      "",
      "[Added Lines]",
      "8281:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, computedNamePropertyKey, true);",
      "8285:         funcInfo->ReleaseTmpRegister(computedNamePropertyKey);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "9578:     }",
      "9579: }",
      "9582: {",
      "9584:     if (MayHaveSideEffectOnNode(pnode1, pnode2))",
      "",
      "[Removed Lines]",
      "9581: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
      "",
      "[Added Lines]",
      "9571: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, Js::RegSlot computedPropertyLocation)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "9589:     Emit(pnode1, byteCodeGenerator, funcInfo, false);",
      "9597:     {",
      "9599:     }",
      "9600: }",
      "9602: void EmitBinaryReference(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fLoadLhs)",
      "",
      "[Removed Lines]",
      "9591:     if (pnode1->nop == knopComputedName && pnode2->nop == knopClassDecl &&",
      "9592:         (pnode2->AsParseNodeClass()->pnodeConstructor == nullptr || pnode2->AsParseNodeClass()->pnodeConstructor->nop != knopVarDecl))",
      "9593:     {",
      "9594:         Emit(pnode2, byteCodeGenerator, funcInfo, false, false, pnode1);",
      "9595:     }",
      "9596:     else",
      "9598:         Emit(pnode2, byteCodeGenerator, funcInfo, false);",
      "",
      "[Added Lines]",
      "9581:     if (pnode1->nop == knopComputedName && computedPropertyLocation != Js::Constants::NoRegister)",
      "9583:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Prop, computedPropertyLocation, pnode1->location);",
      "9586:     Emit(pnode2, byteCodeGenerator, funcInfo, false, false, computedPropertyLocation);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "10142:     }",
      "10143: }",
      "10146: {",
      "10147:     if (pnode == nullptr)",
      "10148:     {",
      "",
      "[Removed Lines]",
      "10145: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, ParseNode * bindPnode, bool isTopLevel)",
      "",
      "[Added Lines]",
      "10132: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, Js::RegSlot bindingNameLocation, bool isTopLevel)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "10968:         Emit(pnodeClass->pnodeConstructor, byteCodeGenerator, funcInfo, false);",
      "10970:         if (pnodeClass->pnodeExtends)",
      "10971:         {",
      "10972:             byteCodeGenerator->StartStatement(pnodeClass->pnodeExtends);",
      "",
      "[Removed Lines]",
      "10969:         EmitComputedFunctionNameVar(bindPnode, pnodeClass->pnodeConstructor, byteCodeGenerator);",
      "",
      "[Added Lines]",
      "10957:         if (bindingNameLocation != Js::Constants::NoRegister && !pnodeClass->pnodeConstructor->pnodeName)",
      "10958:         {",
      "10959:             Assert(pnodeClass->pnodeConstructor->HasComputedName());",
      "10960:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, pnodeClass->pnodeConstructor->location, bindingNameLocation);",
      "10961:         }",
      "",
      "---------------"
    ],
    "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
      "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "320: MACRO_WMS(              Conv_Num,           Reg2,           OpSideEffect|OpTempNumberProducing|OpTempNumberTransfer|OpTempObjectSources|OpOpndHasImplicitCall|OpProducesNumber) // Convert to Number. [[ToNumber()]]",
      "322: MACRO_EXTEND_WMS(       Conv_Str,           Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "324: MACRO_EXTEND_WMS(       Conv_Prop,          Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
      "",
      "---------------"
    ],
    "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
      "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:   DEF3_WMS(CALL,                    ProfiledReturnTypeCallIExtendedFlags,    PROFILEDOP(OP_ProfiledReturnTypeCallIExtendedFlags, OP_CallIExtendedFlags), ProfiledCallIExtendedFlags)",
      "96: EXDEF2_WMS(A1toA1Mem,               Conv_Str,                   JavascriptConversion::ToString)",
      "97:   DEF2_WMS(A1toA1Mem,               Conv_Obj,                   JavascriptOperators::ToObject)",
      "98: EXDEF2_WMS(A1toA1Mem,               NewUnscopablesWrapperObject,JavascriptOperators::ToUnscopablesWrapperObject)",
      "99:   DEF2_WMS(A1toA1Mem,               Conv_Num,                   JavascriptOperators::ToNumber)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: EXDEF2_WMS(A1toA1Mem,               Conv_Prop,                  JavascriptOperators::OP_ToPropertyKey)",
      "",
      "---------------"
    ],
    "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp": [
      "File: lib/Runtime/Language/JavascriptConversion.cpp -> lib/Runtime/Language/JavascriptConversion.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "271:         Var argument,",
      "272:         _In_ ScriptContext* scriptContext,",
      "273:         _Out_ const PropertyRecord** propertyRecord,",
      "",
      "[Removed Lines]",
      "270:     void JavascriptConversion::ToPropertyKey(",
      "",
      "[Added Lines]",
      "270:     Var JavascriptConversion::ToPropertyKey(",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "289:             {",
      "290:                 propertyString = PropertyString::UnsafeFromVar(propName);",
      "291:             }",
      "292:         }",
      "294:         if (propString)",
      "295:         {",
      "297:         }",
      "298:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "292:             key = propName;",
      "300:         return key;",
      "",
      "---------------"
    ],
    "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h": [
      "File: lib/Runtime/Language/JavascriptConversion.h -> lib/Runtime/Language/JavascriptConversion.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:         static Var ToPrimitive(_In_ Var aValue, _In_ ScriptContext * scriptContext);",
      "18:         static BOOL CanonicalNumericIndexString(JavascriptString *aValue, double *indexValue, ScriptContext * scriptContext);",
      "21:             Var argument,",
      "22:             _In_ ScriptContext* scriptContext,",
      "23:             _Out_ const PropertyRecord** propertyRecord,",
      "",
      "[Removed Lines]",
      "20:         static void ToPropertyKey(",
      "",
      "[Added Lines]",
      "20:         static Var ToPropertyKey(",
      "",
      "---------------"
    ],
    "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
      "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5208:         JIT_HELPER_END(Op_DeleteElementI);",
      "5209:     }",
      "5211:     Var JavascriptOperators::OP_GetLength(Var instance, ScriptContext* scriptContext)",
      "5212:     {",
      "5213:         return JavascriptOperators::OP_GetProperty(instance, PropertyIds::length, scriptContext);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5211:     Var JavascriptOperators::OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext)",
      "5212:     {",
      "5213:         JIT_HELPER_REENTRANT_HEADER(Op_ConvPropertyKey);",
      "5214:         PropertyRecord const* unused = nullptr;",
      "5215:         return JavascriptConversion::ToPropertyKey(argument, scriptContext, &unused, nullptr);",
      "5216:         JIT_HELPER_END(Op_ConvPropertyKey);",
      "5217:     }",
      "",
      "---------------"
    ],
    "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
      "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "453:         static Var OP_CmGt_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
      "454:         static Var OP_CmGe_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
      "456:         static FunctionInfo * GetConstructorFunctionInfo(Var instance, ScriptContext * scriptContext);",
      "458:         static DetachedStateBase* DetachVarAndGetState(Var var, bool queueForDelayFree = true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "456:         static Var OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext);",
      "",
      "---------------"
    ],
    "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
      "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
    ],
    "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
      "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
    ],
    "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
      "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
    ],
    "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
      "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
    ],
    "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
      "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
    ],
    "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
      "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
    ],
    "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
      "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
    ],
    "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
      "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
      "candidate_info": {
        "commit_hash": "242c59ea40c0428e1ced7366bf2c28bfbdda1999",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/242c59ea40c0428e1ced7366bf2c28bfbdda1999",
        "files": [
          "lib/Parser/Parse.cpp"
        ],
        "message": "[CVE-2019-1131] Chakra Type confusion",
        "before_after_code_files": [
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4664:                     }",
          "4665:                 }",
          "4672:                 bool couldBeObjectPattern = !isObjectPattern && m_token.tk == tkAsg;",
          "",
          "[Removed Lines]",
          "4667:                 if (buildAST)",
          "4668:                 {",
          "4669:                     CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "4670:                 }",
          "",
          "[Added Lines]",
          "4667:                 CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
      "candidate_info": {
        "commit_hash": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
        "files": [
          "lib/Backend/GlobOptIntBounds.cpp"
        ],
        "message": "[CVE-2019-1197] Chakra JIT Type Confusion",
        "before_after_code_files": [
          "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp": [
          "File: lib/Backend/GlobOptIntBounds.cpp -> lib/Backend/GlobOptIntBounds.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:     }",
          "1282:     for (Loop * loop = this->currentBlock->loop; loop; loop = loop->parent)",
          "1283:     {",
          "1286:         {",
          "1288:         }",
          "1289:     }",
          "1290: }",
          "",
          "[Removed Lines]",
          "1284:         InductionVariable *iv = nullptr;",
          "1285:         if (loop->inductionVariables && loop->inductionVariables->TryGetReference(dstSym->m_id, &iv))",
          "1287:             iv->SetChangeIsIndeterminate();",
          "",
          "[Added Lines]",
          "1288:         if (loop->inductionVariables && loop->inductionVariables->ContainsKey(dstSym->m_id))",
          "1290:             for (auto it = loop->inductionVariables->GetIterator(); it.IsValid(); it.MoveNext())",
          "1291:             {",
          "1292:                 InductionVariable& inductionVariable = it.CurrentValueReference();",
          "1293:                 inductionVariable.SetChangeIsIndeterminate();",
          "1294:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
      "candidate_info": {
        "commit_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/c70af488e435ebd552f3da0547dee39dc8437a64",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp"
        ],
        "message": "[CVE-2019-1195] Chakra Type Confusion RCE",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp"
          ],
          "candidate": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: BackwardPass::BackwardPass(Func * func, GlobOpt * globOpt, Js::Phase tag)",
          "11:     : func(func), globOpt(globOpt), tag(tag), currentPrePassLoop(nullptr), tempAlloc(nullptr),",
          "12:     preOpBailOutInstrToProcess(nullptr),",
          "14:     isCollectionPass(false), currentRegion(nullptr),",
          "15:     collectionPassSubPhase(CollectionPassSubPhase::None),",
          "16:     isLoopPrepass(false)",
          "",
          "[Removed Lines]",
          "13:     considerSymAsRealUseInNoImplicitCallUses(nullptr),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:     candidateSymsRequiredToBeInt = &localCandidateSymsRequiredToBeInt;",
          "413:     BVSparse<JitArenaAllocator> localCandidateSymsRequiredToBeLossyInt(tempAlloc);",
          "414:     candidateSymsRequiredToBeLossyInt = &localCandidateSymsRequiredToBeLossyInt;",
          "415:     intOverflowCurrentlyMattersInRange = true;",
          "417:     FloatSymEquivalenceMap localFloatSymEquivalenceMap(tempAlloc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     BVSparse<JitArenaAllocator> localConsiderSymsAsRealUsesInNoImplicitCallUses(tempAlloc);",
          "415:     considerSymsAsRealUsesInNoImplicitCallUses = &localConsiderSymsAsRealUsesInNoImplicitCallUses;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3755:         block->loop->regAlloc.liveOnBackEdgeSyms = block->upwardExposedUses->CopyNew(this->func->m_alloc);",
          "3756:     }",
          "3760: #if DBG_DUMP",
          "3761:     TraceBlockUses(block, false);",
          "",
          "[Removed Lines]",
          "3758:     Assert(!considerSymAsRealUseInNoImplicitCallUses);",
          "",
          "[Added Lines]",
          "3759:     Assert(considerSymsAsRealUsesInNoImplicitCallUses->IsEmpty());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4228:             {",
          "4229:                 IR::RegOpnd *const regSrc = src->AsRegOpnd();",
          "4230:                 sym = regSrc->m_sym;",
          "4232:                 {",
          "4234:                     ProcessStackSymUse(sym->AsStackSym(), true);",
          "4235:                 }",
          "4236:                 if(regSrc->IsArrayRegOpnd())",
          "",
          "[Removed Lines]",
          "4231:                 if(considerSymAsRealUseInNoImplicitCallUses && considerSymAsRealUseInNoImplicitCallUses == sym)",
          "4233:                     considerSymAsRealUseInNoImplicitCallUses = nullptr;",
          "",
          "[Added Lines]",
          "4232:                 if(considerSymsAsRealUsesInNoImplicitCallUses->TestAndClear(sym->m_id))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4652:             IR::Opnd *const use =",
          "4653:                 FindNoImplicitCallUse(",
          "4654:                     instr,",
          "",
          "[Removed Lines]",
          "4651:             Assert(!considerSymAsRealUseInNoImplicitCallUses);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4659:                     });",
          "4660:             if(use)",
          "4661:             {",
          "4663:             }",
          "4664:         }",
          "4665:     }",
          "",
          "[Removed Lines]",
          "4662:                 considerSymAsRealUseInNoImplicitCallUses = arrayRegOpnd->HeadSegmentLengthSym();",
          "",
          "[Added Lines]",
          "4661:                 considerSymsAsRealUsesInNoImplicitCallUses->Set(arrayRegOpnd->HeadSegmentLengthSym()->m_id);",
          "",
          "---------------"
        ],
        "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h": [
          "File: lib/Backend/BackwardPass.h -> lib/Backend/BackwardPass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     BVSparse<JitArenaAllocator> * intOverflowDoesNotMatterInRangeBySymId;",
          "192:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeInt;",
          "193:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeLossyInt;",
          "195:     bool intOverflowCurrentlyMattersInRange;",
          "196:     bool isCollectionPass;",
          "197:     enum class CollectionPassSubPhase",
          "",
          "[Removed Lines]",
          "194:     StackSym * considerSymAsRealUseInNoImplicitCallUses;",
          "",
          "[Added Lines]",
          "194:     BVSparse<JitArenaAllocator> * considerSymsAsRealUsesInNoImplicitCallUses;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13149:     arraySrcOpt.Optimize();",
          "13150: }",
          "13152: void",
          "13153: GlobOpt::CaptureNoImplicitCallUses(",
          "13154:     IR::Opnd *opnd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13152: void",
          "13153: GlobOpt::ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues)",
          "13154: {",
          "13155:     if (isLikelyJsArray)",
          "13156:     {",
          "13165:         this->CaptureNoImplicitCallUses(baseOpnd, isLikelyJsArray);",
          "13166:     }",
          "13167:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
          "13168:     {",
          "13172:         IR::RegOpnd *const headSegmentLengthOpnd =",
          "13173:             IR::RegOpnd::New(",
          "13174:                 baseArrayOpnd->HeadSegmentLengthSym(),",
          "13175:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
          "13176:                 instr->m_func);",
          "13178:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
          "13179:         this->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
          "13180:     }",
          "13181: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17038:     }",
          "17039: #endif",
          "17041:     RemoveMemOpSrcInstr(memopInstr, emitData->stElemInstr, emitData->block);",
          "17042:     if (!isMemset)",
          "17043:     {",
          "17044:         RemoveMemOpSrcInstr(memopInstr, ((MemCopyEmitData*)emitData)->ldElemInstr, emitData->block);",
          "17045:     }",
          "17046: }",
          "17048: bool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17072:     Assert(noImplicitCallUsesToInsert->Count() == 0);",
          "17073:     bool isLikelyJsArray;",
          "17074:     if (emitData->stElemInstr->GetDst()->IsIndirOpnd())",
          "17075:     {",
          "17076:         baseOpnd = emitData->stElemInstr->GetDst()->AsIndirOpnd()->GetBaseOpnd();",
          "17077:         isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
          "17078:         ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
          "17079:     }",
          "17083:         if (((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->IsIndirOpnd())",
          "17084:         {",
          "17085:             baseOpnd = ((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->AsIndirOpnd()->GetBaseOpnd();",
          "17086:             isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
          "17087:             ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
          "17088:         }",
          "17091:     InsertNoImplicitCallUses(memopInstr);",
          "17092:     noImplicitCallUsesToInsert->Clear();",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: private:",
          "722:     void                    CaptureNoImplicitCallUses(IR::Opnd *opnd, const bool usesNoMissingValuesInfo, IR::Instr *const includeCurrentInstr = nullptr);",
          "723:     void                    InsertNoImplicitCallUses(IR::Instr *const instr);",
          "724:     void                    PrepareLoopArrayCheckHoist();",
          "726: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:     void                    ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues);",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp": [
          "File: lib/Backend/GlobOptArrays.cpp -> lib/Backend/GlobOptArrays.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:         baseArrayOpnd = nullptr;",
          "1930:     }",
          "1959:     const auto OnEliminated = [&](const Js::Phase phase, const char *const eliminatedLoad)",
          "1960:     {",
          "",
          "[Removed Lines]",
          "1932:     if (isLikelyJsArray)",
          "1933:     {",
          "1942:         globOpt->CaptureNoImplicitCallUses(baseOpnd, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
          "1943:     }",
          "1944:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
          "1945:     {",
          "1949:         IR::RegOpnd *const headSegmentLengthOpnd =",
          "1950:             IR::RegOpnd::New(",
          "1951:                 baseArrayOpnd->HeadSegmentLengthSym(),",
          "1952:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
          "1953:                 instr->m_func);",
          "1955:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
          "1956:         globOpt->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
          "1957:     }",
          "",
          "[Added Lines]",
          "1932:     globOpt->ProcessNoImplicitCallArrayUses(baseOpnd, baseArrayOpnd, instr, isLikelyJsArray, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
      "candidate_info": {
        "commit_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/ae8a8d9644e677a9878e5dd7824d4b876454e799",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-1139] Chakra JIT Type Confusion\n\narray.slice converts the native array to var array which was not captured during the optimization.\nDue to that the native array type is forced to var array which leads to the type confusion.\nFixed this by killing the object type for the slice (as well as concat)",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13470:                     case IR::HelperArray_Splice:",
          "13471:                     case IR::HelperArray_Unshift:",
          "13472:                     case IR::HelperArray_Concat:",
          "13473:                         kills.SetKillsArrayHeadSegments();",
          "13474:                         kills.SetKillsArrayHeadSegmentLengths();",
          "13475:                         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13473:                     case IR::HelperArray_Slice:",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:                 }",
          "519:                 break;",
          "521:             case IR::JnHelperMethod::HelperRegExp_Exec:",
          "522:             case IR::JnHelperMethod::HelperRegExp_ExecResultNotUsed:",
          "523:             case IR::JnHelperMethod::HelperRegExp_ExecResultUsed:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:             case IR::JnHelperMethod::HelperArray_Slice:",
          "522:             case IR::JnHelperMethod::HelperArray_Concat:",
          "523:                 if (inGlobOpt && this->objectTypeSyms)",
          "524:                 {",
          "525:                     if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)",
          "526:                     {",
          "527:                         this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);",
          "528:                     }",
          "529:                     this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);",
          "530:                 }",
          "531:                 break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
      "candidate_info": {
        "commit_hash": "329d9d213e7b286349c0b156be4b5a088555de90",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/329d9d213e7b286349c0b156be4b5a088555de90",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2019-1141] Chakra JIT Type Confusion\n\nDuring the loop prepass the index variable is not fully constructed, so we can't rely it being negative\nSo we need to kiil the object type.",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2695: }",
          "2697: bool",
          "2699: {",
          "2700:     if (opnd == nullptr)",
          "2701:     {",
          "",
          "[Removed Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const",
          "",
          "[Added Lines]",
          "2698: GlobOpt::IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass /*=nullptr*/) const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2725:         {",
          "2726:             return true;",
          "2727:         }",
          "2728:         if (this->prePassLoop->preservesNumberValue->Test(opnd->m_sym->m_id))",
          "2729:         {",
          "2730:             return false;",
          "2731:         }",
          "2734:     }",
          "2736:     return true;",
          "",
          "[Removed Lines]",
          "2733:         return !this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "",
          "[Added Lines]",
          "2729:         bool isSafeToTransfer = this->IsSafeToTransferInPrepass(opnd->m_sym, opndValueInfo);",
          "2730:         if (isSafeToTransferInPrepass != nullptr)",
          "2731:         {",
          "2733:         }",
          "2739:         return !isSafeToTransfer;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
          "774:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
          "775:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
          "778: public:",
          "779:     static bool             IsTypeSpecPhaseOff(Func const * func);",
          "",
          "[Removed Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
          "",
          "[Added Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass = nullptr) const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     {",
          "230:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "231:         SetAnyPropertyMayBeWrittenTo();",
          "",
          "[Removed Lines]",
          "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
          "",
          "[Added Lines]",
          "228:     bool isSafeToTransfer = true;",
          "229:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt, &isSafeToTransfer))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
          "237:         int indexLowerBound = 0;",
          "240:         {",
          "242:             this->KillAllObjectTypes(bv);",
          "",
          "[Removed Lines]",
          "239:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "[Added Lines]",
          "240:         if (!isSafeToTransfer || indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
      "candidate_info": {
        "commit_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "test/Debugger/rlexe.xml"
        ],
        "message": "Handling exception while GetJSONObject in script debugger.\n\nDuring GetChildren phase when we try to build JSON object we might throw exception. That skipped calling .Detach on the AutoPtr - which leads to release\nthe debugger property again.\nFixed that by catching and discarding the exception.",
        "before_after_code_files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp": [
          "File: lib/Jsrt/JsrtDebuggerObject.cpp -> lib/Jsrt/JsrtDebuggerObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                 if (resolvedObjectDisplay != nullptr)",
          "86:                 {",
          "87:                     JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectProperty::Make(this->GetDebuggerObjectsManager(), objectDisplayWeakRef);",
          "91:                     {",
          "93:                     }",
          "95:                     {",
          "97:                     }",
          "98:                     objectDisplayWeakRef->ReleaseStrongReference();",
          "99:                     objectDisplayWeakRef.Detach();",
          "",
          "[Removed Lines]",
          "88:                     Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "89:                     Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "90:                     if (resolvedObjectDisplay->IsFake())",
          "92:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "94:                     else",
          "96:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "",
          "[Added Lines]",
          "88:                     try",
          "90:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "91:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "92:                         if (resolvedObjectDisplay->IsFake())",
          "93:                         {",
          "94:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "95:                         }",
          "96:                         else",
          "97:                         {",
          "98:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "99:                         }",
          "101:                     catch (const Js::JavascriptException& err)",
          "103:                         err.GetAndClear();   // discard exception object",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                     {",
          "416:                         AutoPtr<WeakArenaReference<Js::IDiagObjectModelDisplay>> objectDisplayWeakRef(resolvedObject.GetObjectDisplay());",
          "417:                         JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectScope::Make(debuggerObjectsManager, objectDisplayWeakRef, scopesCount);",
          "423:                         objectDisplayWeakRef.Detach();",
          "424:                     }",
          "425:                 }",
          "",
          "[Removed Lines]",
          "418:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "419:                         Assert(object != nullptr);",
          "420:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "421:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "422:                         scopesCount++;",
          "",
          "[Added Lines]",
          "425:                         try",
          "426:                         {",
          "427:                             Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "428:                             Assert(object != nullptr);",
          "429:                             Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "430:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "431:                             scopesCount++;",
          "432:                         }",
          "433:                         catch (const Js::JavascriptException& err)",
          "434:                         {",
          "435:                             err.GetAndClear();   // discard exception object",
          "436:                         }",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js": [
          "File: test/Debugger/exceptionWhileFetchingProp.js -> test/Debugger/exceptionWhileFetchingProp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var p = new Proxy({x:10}, {",
          "7:     getOwnPropertyDescriptor: function (oTarget, sKey) {",
          "8:         throw new Error('');",
          "9:         return { configurable: true, enumerable: true, value: 5 };",
          "10:     }",
          "11:   });",
          "13:   function f() {",
          "15:   }",
          "16:   f();",
          "17:   print('Pass');",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline": [
          "File: test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline -> test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [",
          "2:   {",
          "3:     \"evaluate\": {",
          "4:       \"p\": {",
          "5:         \"#__proto__\": \"Object {...}\",",
          "6:         \"[Proxy]\": \"Proxy {...}\"",
          "7:       }",
          "8:     }",
          "9:   }",
          "10: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
      "candidate_info": {
        "commit_hash": "450a349fda1b153d758a9e01698b977e60870e4c",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/450a349fda1b153d758a9e01698b977e60870e4c",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h"
        ],
        "message": "Update version to 1.11.12",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 11",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 12",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e280a9bec700d1f76ce17807304e635610241c3",
      "candidate_info": {
        "commit_hash": "4e280a9bec700d1f76ce17807304e635610241c3",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/4e280a9bec700d1f76ce17807304e635610241c3",
        "files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ],
        "message": "Update byte code version for class definition change",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x8DD0E3D3, 0x6A6D, 0x4D1F, { 0x8E, 0xED, 0xD8, 0x7D, 0x62, 0x17, 0xAB, 0x24 } };",
          "",
          "[Added Lines]",
          "10: { 0x5C20FA9E, 0xA347, 0x4731, { 0xA0, 0xDE, 0x14, 0x8B, 0x4F, 0xA1, 0x2B, 0x04 } };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fd1128682967486f3fa5ba0a7b19abd2fc62fc2",
      "candidate_info": {
        "commit_hash": "7fd1128682967486f3fa5ba0a7b19abd2fc62fc2",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/7fd1128682967486f3fa5ba0a7b19abd2fc62fc2",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/Lower.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "message": "Remove unneeded InitConst op from byte code",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4731:     case Js::OpCode::BytecodeArgOutCapture:",
          "4733:     case Js::OpCode::LdAsmJsFunc:",
          "4734:     case Js::OpCode::Ld_A:",
          "4735:     case Js::OpCode::Ld_I4:",
          "",
          "[Removed Lines]",
          "4732:     case Js::OpCode::InitConst:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1906:         this->AddInstr(instr, offset);",
          "1907:         return;",
          "1908:     }",
          "1913:     }",
          "1915:     IR::RegOpnd *   dstOpnd = this->BuildDstOpnd(R0);",
          "",
          "[Removed Lines]",
          "1909:     case Js::OpCode::InitConst:",
          "1911:         newOpcode = Js::OpCode::Ld_A;",
          "1912:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1802:             }",
          "1804:         case Js::OpCode::Ld_A:",
          "1806:             if (instr->IsJitProfilingInstr() && instr->AsJitProfilingInstr()->isBeginSwitch) {",
          "1807:                 LowerProfiledBeginSwitch(instr->AsJitProfilingInstr());",
          "1808:                 break;",
          "",
          "[Removed Lines]",
          "1805:         case Js::OpCode::InitConst:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x81AEEA4B, 0xAE4E, 0x40C0, { 0x84, 0x8F, 0x6D, 0xB7, 0xC5, 0xF4, 0x9F, 0x55 } };",
          "",
          "[Added Lines]",
          "10: { 0xD4C23742, 0x01B6, 0x409A, { 0x9C, 0x31, 0x15, 0x90, 0xC2, 0x2D, 0xE5, 0xA4 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4805:             this->UpdateDebuggerPropertyInitializationOffset(location, sym->GetPosition(), false);",
          "4806:         }",
          "4807:     }",
          "4817:     else",
          "4818:     {",
          "4819:         if (!isConstDecl && sym->GetDecl() && sym->GetDecl()->nop == knopConstDecl)",
          "",
          "[Removed Lines]",
          "4808:     else if (isConstDecl)",
          "4809:     {",
          "4810:         this->m_writer.Reg2(Js::OpCode::InitConst, sym->GetLocation(), rhsLocation);",
          "4812:         if (this->ShouldTrackDebuggerMetadata())",
          "4813:         {",
          "4814:             this->UpdateDebuggerPropertyInitializationOffset(sym->GetLocation(), sym->GetPosition());",
          "4815:         }",
          "4816:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4826:         {",
          "4827:             this->m_writer.Reg2(Js::OpCode::Ld_A, sym->GetLocation(), rhsLocation);",
          "4830:             {",
          "4831:                 this->UpdateDebuggerPropertyInitializationOffset(sym->GetLocation(), sym->GetPosition());",
          "4832:             }",
          "",
          "[Removed Lines]",
          "4829:             if (this->ShouldTrackDebuggerMetadata() && isLetDecl)",
          "",
          "[Added Lines]",
          "4820:             if (this->ShouldTrackDebuggerMetadata() && (isLetDecl || isConstDecl))",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "368: MACRO_WMS_ROOT(         InitUndeclRootConstFld,     ElementRootU,   OpSideEffect)",
          "369: MACRO_EXTEND_WMS(       InitUndeclConsoleLetFld,    ElementScopedU, OpSideEffect)",
          "370: MACRO_EXTEND_WMS(       InitUndeclConsoleConstFld,  ElementScopedU, OpSideEffect)",
          "372: MACRO_WMS(              InitConstSlot,              ElementSlot,    None)",
          "",
          "[Removed Lines]",
          "371: MACRO_WMS(              InitConst,                  Reg2,           OpTempNumberTransfer|OpTempObjectTransfer|OpNonIntTransfer|OpCanCSE)    // Create and initialize 'const' as property of global object",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598: MACRO_EXTEND_WMS(       NewInnerScFunc,     ElementSlot,    OpSideEffect)   // Create new ScriptFunction instance",
          "599: MACRO_EXTEND_WMS(       NewInnerScGenFunc,  ElementSlot,    OpSideEffect)   // Create new JavascriptGeneratorFunction instance",
          "600: MACRO_EXTEND_WMS(       NewInnerStackScFunc,ElementSlot,    OpSideEffect|OpByteCodeOnly)  // Create new ScriptFunction instance",
          "602: MACRO_EXTEND_WMS(       NewScGenFuncHomeObj,       ElementSlot,      OpSideEffect)   // Create new JavascriptGeneratorFunction instance that has home object",
          "603: MACRO_EXTEND_WMS(       NewInnerScFuncHomeObj,     ElementSlotI3,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "604: MACRO_EXTEND_WMS(       NewInnerScGenFuncHomeObj,  ElementSlotI3,    OpSideEffect)   // Create new JavascriptGeneratorFunction instance that has home object",
          "",
          "[Removed Lines]",
          "601: MACRO_EXTEND_WMS(       NewScFuncHomeObj,   ElementSlot,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "",
          "[Added Lines]",
          "600: MACRO_WMS(              NewScFuncHomeObj,   ElementSlot,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   DEF2_WMS(CMMem,                   CmSrEq_A,                   JavascriptOperators::StrictEqual)",
          "133:   DEF2_WMS(CMMem,                   CmSrNeq_A,                  JavascriptOperators::NotStrictEqual)",
          "134:   DEF2_WMS(FALLTHROUGH,             BeginSwitch,                /* Common case with Ld_A */)",
          "136:   DEF2_WMS(A1toA1_ALLOW_STACK,      Ld_A,                       OP_Ld_A)",
          "137:   DEF2_WMS(INNERtoA1,               LdInnerScope,               OP_Ld_A)",
          "138:   DEF2_WMS(XXtoA1,                  LdLocalObj,                 OP_LdLocalObj)",
          "",
          "[Removed Lines]",
          "135:   DEF2_WMS(FALLTHROUGH,             InitConst,                  /* Common case with Ld_A */)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328: EXDEF3_WMS(CUSTOM_L_Value,          NewInnerStackScFunc,        OP_NewInnerStackScFunc, ElementSlot)",
          "329: EXDEF2_WMS(GET_ELEM_SLOT_FB,        NewInnerScFunc,             ScriptFunction::OP_NewScFunc)",
          "330: EXDEF2_WMS(GET_ELEM_SLOT_FB,        NewInnerScGenFunc,          JavascriptGeneratorFunction::OP_NewScGenFunc)",
          "332: EXDEF2_WMS(GET_SLOT_FB_HMO,         NewScGenFuncHomeObj,        JavascriptGeneratorFunction::OP_NewScGenFuncHomeObj)",
          "333: EXDEF2_WMS(GET_ELEM_SLOT_FB_HMO,    NewInnerScFuncHomeObj,      ScriptFunction::OP_NewScFuncHomeObj)",
          "334: EXDEF2_WMS(GET_ELEM_SLOT_FB_HMO,    NewInnerScGenFuncHomeObj,   JavascriptGeneratorFunction::OP_NewScGenFuncHomeObj)",
          "",
          "[Removed Lines]",
          "331: EXDEF2_WMS(GET_SLOT_FB_HMO,         NewScFuncHomeObj,           ScriptFunction::OP_NewScFuncHomeObj)",
          "",
          "[Added Lines]",
          "330:   DEF2_WMS(GET_SLOT_FB_HMO,         NewScFuncHomeObj,           ScriptFunction::OP_NewScFuncHomeObj)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      }
    },
    {
      "candidate_hash": "c848d4d8d50c0dfb4a23540a9ee6cd023fa029c1",
      "candidate_info": {
        "commit_hash": "c848d4d8d50c0dfb4a23540a9ee6cd023fa029c1",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/c848d4d8d50c0dfb4a23540a9ee6cd023fa029c1",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BailOut.cpp",
          "lib/Backend/IR.cpp",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Common/BackendApi.h",
          "lib/Common/ConfigFlagsList.h",
          "lib/Common/DataStructures/DList.h",
          "lib/JITIDL/JITTypes.h",
          "lib/Jsrt/JsrtDebugUtils.cpp",
          "lib/Parser/Parse.cpp",
          "lib/Parser/Parse.h",
          "lib/Parser/ptree.cpp",
          "lib/Parser/ptree.h",
          "lib/Parser/rterrors.h",
          "lib/Runtime/Base/Constants.h",
          "lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Debug/DiagHelperMethodWrapper.cpp",
          "lib/Runtime/Debug/TTSnapObjects.cpp",
          "lib/Runtime/Debug/TTSnapObjects.h",
          "lib/Runtime/Debug/TTSnapshot.cpp",
          "lib/Runtime/Debug/TTSupport.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Language/JavascriptExceptionObject.h",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Library/CMakeLists.txt",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters",
          "lib/Runtime/Library/CustomExternalIterator.cpp",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JavascriptArrayIterator.cpp",
          "lib/Runtime/Library/JavascriptAsyncFunction.cpp",
          "lib/Runtime/Library/JavascriptAsyncFunction.h",
          "lib/Runtime/Library/JavascriptAsyncGenerator.cpp",
          "lib/Runtime/Library/JavascriptAsyncGenerator.h",
          "lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h",
          "lib/Runtime/Library/JavascriptBuiltInFunctionList.h",
          "lib/Runtime/Library/JavascriptGenerator.cpp",
          "lib/Runtime/Library/JavascriptGenerator.h",
          "lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptGeneratorFunction.h",
          "lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptLibrary.h",
          "lib/Runtime/Library/JavascriptListIterator.cpp",
          "lib/Runtime/Library/JavascriptMapIterator.cpp",
          "lib/Runtime/Library/JavascriptPromise.cpp",
          "lib/Runtime/Library/JavascriptPromise.h",
          "lib/Runtime/Library/JavascriptSetIterator.cpp",
          "lib/Runtime/Library/JavascriptStringIterator.cpp",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "lib/Runtime/Library/RuntimeLibraryPch.h",
          "lib/Runtime/Runtime.h",
          "lib/Runtime/Types/EdgeJavascriptTypeId.h",
          "test/DebuggerCommon/generators.js",
          "test/DebuggerCommon/generators.js.dbg.baseline",
          "test/DebuggerCommon/symbols.js.dbg.baseline",
          "test/es6/generators-functionality.js",
          "test/es7/asyncawait-functionality.baseline",
          "test/es7/asyncawait-syntax.js"
        ],
        "message": "Refactor await & yield & enable async iteration (#6456)\n\nRefactor await and yield implementation and enable async iteration\n\nSee https://github.com/microsoft/ChakraCore/pull/6312\n\nCo-authored-by: Kevin Smith <Kevin.Smith@microsoft.com>",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/BailOut.cpp||lib/Backend/BailOut.cpp",
          "lib/Backend/IR.cpp||lib/Backend/IR.cpp",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h||lib/Backend/Lower.h",
          "lib/Common/BackendApi.h||lib/Common/BackendApi.h",
          "lib/Common/ConfigFlagsList.h||lib/Common/ConfigFlagsList.h",
          "lib/Common/DataStructures/DList.h||lib/Common/DataStructures/DList.h",
          "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h",
          "lib/Jsrt/JsrtDebugUtils.cpp||lib/Jsrt/JsrtDebugUtils.cpp",
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
          "lib/Parser/Parse.h||lib/Parser/Parse.h",
          "lib/Parser/ptree.cpp||lib/Parser/ptree.cpp",
          "lib/Parser/ptree.h||lib/Parser/ptree.h",
          "lib/Parser/rterrors.h||lib/Parser/rterrors.h",
          "lib/Runtime/Base/Constants.h||lib/Runtime/Base/Constants.h",
          "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp||lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h||lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp||lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Debug/DiagHelperMethodWrapper.cpp||lib/Runtime/Debug/DiagHelperMethodWrapper.cpp",
          "lib/Runtime/Debug/TTSnapObjects.cpp||lib/Runtime/Debug/TTSnapObjects.cpp",
          "lib/Runtime/Debug/TTSnapObjects.h||lib/Runtime/Debug/TTSnapObjects.h",
          "lib/Runtime/Debug/TTSnapshot.cpp||lib/Runtime/Debug/TTSnapshot.cpp",
          "lib/Runtime/Debug/TTSupport.h||lib/Runtime/Debug/TTSupport.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.h||lib/Runtime/Language/AsmJsByteCodeGenerator.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h||lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Language/JavascriptExceptionObject.h||lib/Runtime/Language/JavascriptExceptionObject.h",
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp||lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj||lib/Runtime/Library/Chakra.Runtime.Library.vcxproj",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters||lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters",
          "lib/Runtime/Library/CustomExternalIterator.cpp||lib/Runtime/Library/CustomExternalIterator.cpp",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JavascriptArrayIterator.cpp||lib/Runtime/Library/JavascriptArrayIterator.cpp",
          "lib/Runtime/Library/JavascriptAsyncFunction.cpp||lib/Runtime/Library/JavascriptAsyncFunction.cpp",
          "lib/Runtime/Library/JavascriptAsyncFunction.h||lib/Runtime/Library/JavascriptAsyncFunction.h",
          "lib/Runtime/Library/JavascriptAsyncGenerator.cpp||lib/Runtime/Library/JavascriptAsyncGenerator.cpp",
          "lib/Runtime/Library/JavascriptAsyncGenerator.h||lib/Runtime/Library/JavascriptAsyncGenerator.h",
          "lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp||lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h||lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h",
          "lib/Runtime/Library/JavascriptBuiltInFunctionList.h||lib/Runtime/Library/JavascriptBuiltInFunctionList.h",
          "lib/Runtime/Library/JavascriptGenerator.cpp||lib/Runtime/Library/JavascriptGenerator.cpp",
          "lib/Runtime/Library/JavascriptGenerator.h||lib/Runtime/Library/JavascriptGenerator.h",
          "lib/Runtime/Library/JavascriptGeneratorFunction.cpp||lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptGeneratorFunction.h||lib/Runtime/Library/JavascriptGeneratorFunction.h",
          "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptLibrary.h||lib/Runtime/Library/JavascriptLibrary.h",
          "lib/Runtime/Library/JavascriptListIterator.cpp||lib/Runtime/Library/JavascriptListIterator.cpp",
          "lib/Runtime/Library/JavascriptMapIterator.cpp||lib/Runtime/Library/JavascriptMapIterator.cpp",
          "lib/Runtime/Library/JavascriptPromise.cpp||lib/Runtime/Library/JavascriptPromise.cpp",
          "lib/Runtime/Library/JavascriptPromise.h||lib/Runtime/Library/JavascriptPromise.h",
          "lib/Runtime/Library/JavascriptSetIterator.cpp||lib/Runtime/Library/JavascriptSetIterator.cpp",
          "lib/Runtime/Library/JavascriptStringIterator.cpp||lib/Runtime/Library/JavascriptStringIterator.cpp",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "lib/Runtime/Library/RuntimeLibraryPch.h||lib/Runtime/Library/RuntimeLibraryPch.h",
          "lib/Runtime/Runtime.h||lib/Runtime/Runtime.h",
          "lib/Runtime/Types/EdgeJavascriptTypeId.h||lib/Runtime/Types/EdgeJavascriptTypeId.h",
          "test/DebuggerCommon/generators.js||test/DebuggerCommon/generators.js",
          "test/DebuggerCommon/generators.js.dbg.baseline||test/DebuggerCommon/generators.js.dbg.baseline",
          "test/DebuggerCommon/symbols.js.dbg.baseline||test/DebuggerCommon/symbols.js.dbg.baseline",
          "test/es6/generators-functionality.js||test/es6/generators-functionality.js",
          "test/es7/asyncawait-functionality.baseline||test/es7/asyncawait-functionality.baseline",
          "test/es7/asyncawait-syntax.js||test/es7/asyncawait-syntax.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
            "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Backend/Lower.h||lib/Backend/Lower.h",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
            "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
            "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Backend/Lower.h||lib/Backend/Lower.h",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
            "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp"
        ],
        "lib/Backend/BailOut.cpp||lib/Backend/BailOut.cpp": [
          "File: lib/Backend/BailOut.cpp -> lib/Backend/BailOut.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     }",
          "994:     else if (regSlot == newInstance->function->GetFunctionBody()->GetYieldRegister() && newInstance->function->GetFunctionBody()->IsCoroutine())",
          "995:     {",
          "1000:         Assert(value);",
          "1002: #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "1003:         if (ThreadContext::IsOnStack(value))",
          "1004:         {",
          "1006:         }",
          "1007:         else",
          "1008:         {",
          "",
          "[Removed Lines]",
          "1005:             BAILOUT_VERBOSE_TRACE(newInstance->function->GetFunctionBody(), bailOutKind, _u(\", value: 0x%p (ResumeYieldData)\"), value);",
          "",
          "[Added Lines]",
          "1003:             BAILOUT_VERBOSE_TRACE(newInstance->function->GetFunctionBody(), bailOutKind, _u(\", value: 0x%p (Resume Yield Object)\"), value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1541:         Js::JavascriptGenerator* generator = Js::VarTo<Js::JavascriptGenerator>(args[0]);",
          "1542:         newInstance = generator->GetFrame();",
          "",
          "[Removed Lines]",
          "1540:         AssertMsg(args.Info.Count == 2, \"Generator ScriptFunctions should only be invoked by generator APIs with the pair of arguments they pass in -- the generator object and a ResumeYieldData pointer\");",
          "",
          "[Added Lines]",
          "1538:         AssertMsg(args.Info.Count == 2, \"Generator ScriptFunctions should only be invoked by generator APIs with the pair of arguments they pass in -- the generator object and a resume yield object\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2834:     Js::InterpreterStackFrame* frame = generator->GetFrame();",
          "2835:     ThreadContext *threadContext = frame->GetScriptContext()->GetThreadContext();",
          "",
          "[Removed Lines]",
          "2837:     Js::ResumeYieldData* resumeYieldData = static_cast<Js::ResumeYieldData*>(layout->args[1]);",
          "2838:     frame->SetNonVarReg(executeFunction->GetYieldRegister(), resumeYieldData);",
          "",
          "[Added Lines]",
          "2835:     frame->SetNonVarReg(executeFunction->GetYieldRegister(), layout->args[1]);",
          "",
          "---------------"
        ],
        "lib/Backend/IR.cpp||lib/Backend/IR.cpp": [
          "File: lib/Backend/IR.cpp -> lib/Backend/IR.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1050: bool IR::Instr::DontHoistBailOnNoProfileAboveInGeneratorFunction() const",
          "1051: {",
          "1054:         this->m_opcode == Js::OpCode::GeneratorCreateInterpreterStackFrame;",
          "1055: }",
          "",
          "[Removed Lines]",
          "1052:     return this->m_opcode == Js::OpCode::ResumeYield ||",
          "1053:         this->m_opcode == Js::OpCode::ResumeYieldStar ||",
          "",
          "[Added Lines]",
          "1052:     return this->m_opcode == Js::OpCode::GeneratorResumeYield ||",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1864:         dstOpnd->SetValueType(ValueType::String);",
          "1865:         break;",
          "1900:     case Js::OpCode::Yield:",
          "1901:         instr = IR::Instr::New(newOpcode, dstOpnd, src1Opnd, m_func);",
          "1902:         this->AddInstr(instr, offset);",
          "",
          "[Removed Lines]",
          "1867:     case Js::OpCode::ResumeYield:",
          "1868:     {",
          "1869:         IR::Instr* loadResumeYieldData = IR::Instr::New(Js::OpCode::GeneratorLoadResumeYieldData, src1Opnd /* dst */, m_func);",
          "1870:         this->AddInstr(loadResumeYieldData, offset);",
          "1874:         if (this->m_func->IsJitInDebugMode())",
          "1875:         {",
          "1876:             this->InsertBailOutForDebugger(offset, IR::BailOutForceByFlag | IR::BailOutBreakPointInFunction | IR::BailOutStep);",
          "1877:         }",
          "1879:         break;",
          "1880:     }",
          "1882:     case Js::OpCode::Await:",
          "1883:     case Js::OpCode::AsyncYield:",
          "1884:     case Js::OpCode::AsyncYieldStar:",
          "1885:     {",
          "1891:         IR::Instr* loadResumeYieldData = IR::Instr::New(Js::OpCode::GeneratorLoadResumeYieldData, dstOpnd /* dst */, m_func);",
          "1892:         this->AddInstr(loadResumeYieldData, offset);",
          "1894:         instr = IR::Instr::New(newOpcode, nullptr /* dst */, dstOpnd /* src1 */, src1Opnd /* src2 */, m_func);",
          "1895:         this->AddInstr(instr, offset);",
          "1897:         return;",
          "1898:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1925:         }",
          "1926: #endif",
          "1936:         return;",
          "1937:     }",
          "",
          "[Removed Lines]",
          "1931:         IR::LabelInstr* resumptionLabel = IR::LabelInstr::New(Js::OpCode::GeneratorResumeYieldLabel, m_func);",
          "1932:         resumptionLabel->m_hasNonBranchRef = true;          // set to true so that we don't move this label around",
          "1933:         LABELNAMESET(resumptionLabel, \"ResumeYieldHelperLabel\");",
          "1934:         this->AddInstr(resumptionLabel, offset);",
          "",
          "[Added Lines]",
          "1895:         IR::Instr* resumeYield = IR::Instr::New(Js::OpCode::GeneratorResumeYield, dstOpnd, m_func);",
          "1896:         this->AddInstr(resumeYield, offset);",
          "1898:         if (this->m_func->IsJitInDebugMode())",
          "1899:         {",
          "1900:             this->InsertBailOutForDebugger(offset, IR::BailOutForceByFlag | IR::BailOutBreakPointInFunction | IR::BailOutStep);",
          "1901:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2155:         instr = IR::Instr::New(newOpcode, dstOpnd, src1Opnd, src2Opnd, m_func);",
          "2156:     }",
          "2171:     this->AddInstr(instr, offset);",
          "2173:     if (wasNotProfiled && DoBailOnNoProfile())",
          "",
          "[Removed Lines]",
          "2158:     if (newOpcode == Js::OpCode::ResumeYieldStar)",
          "2159:     {",
          "2160:         IR::Instr* loadResumeYieldData = IR::Instr::New(Js::OpCode::GeneratorLoadResumeYieldData, src1Opnd /* dst */, m_func);",
          "2161:         this->AddInstr(loadResumeYieldData, offset);",
          "2165:         if (this->m_func->IsJitInDebugMode())",
          "2166:         {",
          "2167:             this->InsertBailOutForDebugger(offset, IR::BailOutForceByFlag | IR::BailOutBreakPointInFunction | IR::BailOutStep);",
          "2168:         }",
          "2169:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
          "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "547: HELPERCALLCHK(ImportCall,               Js::JavascriptOperators::OP_ImportCall, 0)",
          "548: HELPERCALLCHK(LdImportMeta,             Js::JavascriptOperators::OP_LdImportMeta, 0)",
          "549: HELPERCALLCHK(NewAsyncFromSyncIterator, Js::JavascriptOperators::OP_NewAsyncFromSyncIterator, AttrCanNotBeReentrant)",
          "557: HELPERCALL(CreateInterpreterStackFrameForGenerator, Js::InterpreterStackFrame::CreateInterpreterStackFrameForGenerator, AttrCanNotBeReentrant)",
          "",
          "[Removed Lines]",
          "551: HELPERCALLCHK(AsyncYieldIsReturn,       Js::JavascriptOperators::OP_AsyncYieldIsReturn, AttrCanNotBeReentrant)",
          "552: HELPERCALLCHK(ResumeYield,              Js::JavascriptOperators::OP_ResumeYield, AttrCanThrow)",
          "553: HELPERCALL(AsyncYieldStar,              Js::InterpreterStackFrame::OP_AsyncYieldStar, AttrCanNotBeReentrant)",
          "554: HELPERCALL(AsyncYield,                  Js::InterpreterStackFrame::OP_AsyncYield, AttrCanNotBeReentrant)",
          "555: HELPERCALL(Await,                       Js::InterpreterStackFrame::OP_Await, AttrCanNotBeReentrant)",
          "",
          "[Added Lines]",
          "550: HELPERCALLCHK(NewAwaitObject,           Js::JavascriptOperators::OP_NewAwaitObject, AttrCanNotBeReentrant)",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2961:             break;",
          "2962:         }",
          "2965:         {",
          "2998:             LoadScriptContext(instr);",
          "3002:             break;",
          "3003:         }",
          "",
          "[Removed Lines]",
          "2964:         case Js::OpCode::Await:",
          "2966:             IR::Opnd *srcOpnd1 = instr->UnlinkSrc1();",
          "2967:             IR::Opnd *srcOpnd2 = instr->UnlinkSrc2();",
          "2968:             LoadScriptContext(instr);",
          "2969:             m_lowererMD.LoadHelperArgument(instr, srcOpnd2);",
          "2970:             m_lowererMD.LoadHelperArgument(instr, srcOpnd1);",
          "2971:             m_lowererMD.ChangeToHelperCall(instr, IR::HelperAwait);",
          "2972:             break;",
          "2973:         }",
          "2975:         case Js::OpCode::AsyncYield:",
          "2976:         {",
          "2977:             IR::Opnd *srcOpnd1 = instr->UnlinkSrc1();",
          "2978:             IR::Opnd *srcOpnd2 = instr->UnlinkSrc2();",
          "2979:             LoadScriptContext(instr);",
          "2980:             m_lowererMD.LoadHelperArgument(instr, srcOpnd2);",
          "2981:             m_lowererMD.LoadHelperArgument(instr, srcOpnd1);",
          "2982:             m_lowererMD.ChangeToHelperCall(instr, IR::HelperAsyncYield);",
          "2983:             break;",
          "2984:         }",
          "2986:         case Js::OpCode::AsyncYieldIsReturn:",
          "2987:         {",
          "2988:             IR::Opnd *srcOpnd1 = instr->UnlinkSrc1();",
          "2989:             m_lowererMD.LoadHelperArgument(instr, srcOpnd1);",
          "2990:             m_lowererMD.ChangeToHelperCall(instr, IR::HelperAsyncYieldIsReturn);",
          "2991:             break;",
          "2992:         }",
          "2994:         case Js::OpCode::AsyncYieldStar:",
          "2995:         {",
          "2996:             IR::Opnd *srcOpnd1 = instr->UnlinkSrc1();",
          "2997:             IR::Opnd *srcOpnd2 = instr->UnlinkSrc2();",
          "2999:             m_lowererMD.LoadHelperArgument(instr, srcOpnd2);",
          "3000:             m_lowererMD.LoadHelperArgument(instr, srcOpnd1);",
          "3001:             m_lowererMD.ChangeToHelperCall(instr, IR::HelperAsyncYieldStar);",
          "",
          "[Added Lines]",
          "2964:         case Js::OpCode::NewAwaitObject:",
          "2966:             IR::Opnd *src1Opnd = instr->UnlinkSrc1();",
          "2968:             m_lowererMD.LoadHelperArgument(instr, src1Opnd);",
          "2969:             m_lowererMD.ChangeToHelperCall(instr, IR::HelperNewAwaitObject);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3008:             break;",
          "3009:         }",
          "3019:         {",
          "3021:             break;",
          "3022:         }",
          "",
          "[Removed Lines]",
          "3011:         case Js::OpCode::GeneratorLoadResumeYieldData:",
          "3012:         {",
          "3013:             this->m_lowerGeneratorHelper.LowerGeneratorLoadResumeYieldData(instr);",
          "3014:             break;",
          "3015:         }",
          "3017:         case Js::OpCode::ResumeYield:",
          "3018:         case Js::OpCode::ResumeYieldStar:",
          "3020:             this->m_lowerGeneratorHelper.LowerResumeGenerator(instr);",
          "",
          "[Added Lines]",
          "2979:         case Js::OpCode::GeneratorResumeYield:",
          "2981:             this->m_lowerGeneratorHelper.LowerGeneratorResumeYield(instr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3147:         case Js::OpCode::GeneratorOutputBailInTraceLabel:",
          "3148: #endif",
          "3149:         case Js::OpCode::GeneratorBailInLabel:",
          "3151:         case Js::OpCode::GeneratorEpilogueFrameNullOutLabel:",
          "3152:         case Js::OpCode::GeneratorEpilogueNoFrameNullOutLabel:",
          "3153:             Assert(this->m_func->GetJITFunctionBody()->IsCoroutine());",
          "",
          "[Removed Lines]",
          "3150:         case Js::OpCode::GeneratorResumeYieldLabel:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "26618:     case Js::OpCode::GeneratorOutputBailInTraceLabel:",
          "26619: #endif",
          "26620:     case Js::OpCode::GeneratorBailInLabel:",
          "26622:     case Js::OpCode::GeneratorEpilogueFrameNullOutLabel:",
          "26623:     case Js::OpCode::GeneratorEpilogueNoFrameNullOutLabel:",
          "26624:         return func->GetJITFunctionBody()->IsCoroutine();",
          "",
          "[Removed Lines]",
          "26621:     case Js::OpCode::GeneratorResumeYieldLabel:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "29369: #endif",
          "29371: IR::SymOpnd*",
          "29373: {",
          "29374:     StackSym* resumeYieldDataSym = StackSym::NewImplicitParamSym(4, this->func);",
          "29375:     this->func->SetArgOffset(resumeYieldDataSym, (LowererMD::GetFormalParamOffset() + 1) * MachPtr);",
          "",
          "[Removed Lines]",
          "29372: Lowerer::LowerGeneratorHelper::CreateResumeYieldDataOpnd() const",
          "",
          "[Added Lines]",
          "29331: Lowerer::LowerGeneratorHelper::CreateResumeYieldOpnd() const",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "29377: }",
          "29379: void",
          "29381: {",
          "29386:     instr->Unlink();",
          "29387: }",
          "29399: void",
          "29400: Lowerer::LowerGeneratorHelper::LowerYield(IR::Instr* instr)",
          "29401: {",
          "",
          "[Removed Lines]",
          "29380: Lowerer::LowerGeneratorHelper::LowerGeneratorLoadResumeYieldData(IR::Instr* instr)",
          "29385:     this->lowerer->InsertMove(instr->UnlinkDst(), this->CreateResumeYieldDataOpnd(), instr);",
          "29389: void",
          "29390: Lowerer::LowerGeneratorHelper::LowerResumeGenerator(IR::Instr* instr)",
          "29391: {",
          "29392:     IR::Opnd* srcOpnd1 = instr->UnlinkSrc1();",
          "29393:     IR::Opnd* srcOpnd2 = instr->m_opcode == Js::OpCode::ResumeYieldStar ? instr->UnlinkSrc2() : IR::AddrOpnd::NewNull(this->func);",
          "29394:     this->lowererMD.LoadHelperArgument(instr, srcOpnd2);",
          "29395:     this->lowererMD.LoadHelperArgument(instr, srcOpnd1);",
          "29396:     this->lowererMD.ChangeToHelperCall(instr, IR::HelperResumeYield);",
          "29397: }",
          "",
          "[Added Lines]",
          "29339: Lowerer::LowerGeneratorHelper::LowerGeneratorResumeYield(IR::Instr* instr)",
          "29344:     this->lowerer->InsertMove(instr->UnlinkDst(), this->CreateResumeYieldOpnd(), instr);",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.h||lib/Backend/Lower.h": [
          "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:         Func* const func;",
          "848:         LowererMD &lowererMD;",
          "849:         Lowerer* const lowerer;",
          "",
          "[Removed Lines]",
          "846:     class LowerGeneratorHelper {",
          "",
          "[Added Lines]",
          "846:     class LowerGeneratorHelper",
          "847:     {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "852:         IR::LabelInstr* epilogueForBailOut = nullptr;",
          "854:         void EnsureEpilogueLabels();",
          "857:     public:",
          "858:         LowerGeneratorHelper(Func* func, Lowerer* lowerer, LowererMD &lowererMD);",
          "",
          "[Removed Lines]",
          "855:         IR::SymOpnd* CreateResumeYieldDataOpnd() const;",
          "",
          "[Added Lines]",
          "856:         IR::SymOpnd* CreateResumeYieldOpnd() const;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "893:         void LowerGeneratorResumeJumpTable(IR::Instr* jumpTableInstr);",
          "894:         void LowerCreateInterpreterStackFrameForGenerator(IR::Instr* instr);",
          "896:         void LowerYield(IR::Instr* instr);",
          "899: #ifdef ENABLE_DEBUG_CONFIG_OPTIONS",
          "900:         void LowerGeneratorTraceBailIn(IR::Instr* instr);",
          "",
          "[Removed Lines]",
          "895:         void LowerResumeGenerator(IR::Instr* instr);",
          "897:         void LowerGeneratorLoadResumeYieldData(IR::Instr* instr);",
          "",
          "[Added Lines]",
          "897:         void LowerGeneratorResumeYield(IR::Instr* instr);",
          "",
          "---------------"
        ],
        "lib/Common/BackendApi.h||lib/Common/BackendApi.h": [
          "File: lib/Common/BackendApi.h -> lib/Common/BackendApi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     VtableVirtualJavascriptGeneratorFunctionWithComputedName,",
          "277:     VtableVirtualJavascriptGeneratorFunctionWithHomeObjAndComputedName,",
          "278:     VtableJavascriptAsyncFunction,",
          "280:     VtableStackScriptFunction,",
          "281:     VtableAsmJsScriptFunctionWithComputedName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     VtableJavascriptAsyncGeneratorFunction,",
          "",
          "---------------"
        ],
        "lib/Common/ConfigFlagsList.h||lib/Common/ConfigFlagsList.h": [
          "File: lib/Common/ConfigFlagsList.h -> lib/Common/ConfigFlagsList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "699: #define DEFAULT_CONFIG_ESDynamicImport         (true)",
          "700: #define DEFAULT_CONFIG_ESImportMeta            (true)",
          "701: #define DEFAULT_CONFIG_ESExportNsAs            (true)",
          "704: #define DEFAULT_CONFIG_ESSharedArrayBuffer     (false)",
          "",
          "[Removed Lines]",
          "702: #define DEFAULT_CONFIG_ES2018AsyncIteration    (false)",
          "",
          "[Added Lines]",
          "702: #define DEFAULT_CONFIG_ES2018AsyncIteration    (true)",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/DList.h||lib/Common/DataStructures/DList.h": [
          "File: lib/Common/DataStructures/DList.h -> lib/Common/DataStructures/DList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:             current = current->Next();",
          "109:             return true;",
          "110:         }",
          "111:         TData const& Data() const",
          "112:         {",
          "113:             Assert(this->IsValid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         bool Prev()",
          "113:         {",
          "114:             Assert(current != nullptr);",
          "115:             if (list->IsHead(current->Prev()))",
          "116:             {",
          "117:                 current = nullptr;",
          "118:                 return false;",
          "119:             }",
          "120:             current = current->Prev();",
          "121:             return true;",
          "122:         }",
          "",
          "---------------"
        ],
        "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h": [
          "File: lib/JITIDL/JITTypes.h -> lib/JITIDL/JITTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #define __JITTypes_h__",
          "74: const int EQUIVALENT_TYPE_CACHE_SIZE = 8;",
          "76: typedef IDL_DEF([context_handle]) void * PTHREADCONTEXT_HANDLE;",
          "",
          "[Removed Lines]",
          "73: const int VTABLE_COUNT = 59;",
          "",
          "[Added Lines]",
          "73: const int VTABLE_COUNT = 60;",
          "",
          "---------------"
        ],
        "lib/Jsrt/JsrtDebugUtils.cpp||lib/Jsrt/JsrtDebugUtils.cpp": [
          "File: lib/Jsrt/JsrtDebugUtils.cpp -> lib/Jsrt/JsrtDebugUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:         case Js::TypeIds_WeakSet:",
          "272:         case Js::TypeIds_SymbolObject:",
          "273:         case Js::TypeIds_Generator:",
          "274:         case Js::TypeIds_AsyncFromSyncIterator:",
          "275:         case Js::TypeIds_Promise:",
          "276:         case Js::TypeIds_GlobalObject:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:         case Js::TypeIds_AsyncGenerator:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:     case Js::TypeIds_WeakSet:               return _u(\"WeakSet\");",
          "473:     case Js::TypeIds_SymbolObject:          return _u(\"Symbol\");",
          "474:     case Js::TypeIds_Generator:             return _u(\"Generator\");",
          "475:     case Js::TypeIds_AsyncFromSyncIterator: return _u(\"AsyncFromSyncIterator\");",
          "476:     case Js::TypeIds_Promise:               return _u(\"Promise\");",
          "477:     case Js::TypeIds_GlobalObject:          return _u(\"Object\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:     case Js::TypeIds_AsyncGenerator:        return _u(\"AsyncGenerator\");",
          "",
          "---------------"
        ],
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7335:         pnodeRet->grfnop = 0;",
          "7338:         pnodeLambda->ichLim = max(pnodeRet->ichLim, lastRParen);",
          "7339:         pnodeLambda->cbLim = this->GetScanner()->IecpLimTokPrevious();",
          "",
          "[Removed Lines]",
          "7336:         pnodeRet->pnodeOuter = nullptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9751:         if (buildAST)",
          "9752:         {",
          "9753:             pnodeTC = CreateNodeForOpT<knopTryCatch>();",
          "9755:             pnodeTC->pnodeTry = pnodeT;",
          "9756:         }",
          "9757:         PushStmt<buildAST>(&stmt, pnodeTC, knopTryCatch, nullptr);",
          "",
          "[Removed Lines]",
          "9754:             pnodeT->pnodeOuter = pnodeTC;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9786:         if (!hasCatch)",
          "9787:         {",
          "9788:             pnodeTF->pnodeTry = pnodeT;",
          "9790:         }",
          "9791:         else",
          "9792:         {",
          "9793:             pnodeTF->pnodeTry = CreateNodeForOpT<knopTry>();",
          "9795:             pnodeTF->pnodeTry->pnodeBody = pnodeTC;",
          "9797:         }",
          "9798:         pnodeTF->pnodeFinally = pnodeFinally;",
          "9799:     }",
          "",
          "[Removed Lines]",
          "9789:             pnodeT->pnodeOuter = pnodeTF;",
          "9794:             pnodeTF->pnodeTry->pnodeOuter = pnodeTF;",
          "9796:             pnodeTC->pnodeOuter = pnodeTF->pnodeTry;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Parser/Parse.h||lib/Parser/Parse.h": [
          "File: lib/Parser/Parse.h -> lib/Parser/Parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:         if (buildAST)",
          "554:         {",
          "555:             pnode->grfnop = 0;",
          "558:             pStmt->pnodeStmt = pnode;",
          "559:         }",
          "560:         else",
          "",
          "[Removed Lines]",
          "556:             pnode->pnodeOuter = (NULL == m_pstmtCur) ? NULL : m_pstmtCur->pnodeStmt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Parser/ptree.cpp||lib/Parser/ptree.cpp": [
          "File: lib/Parser/ptree.cpp -> lib/Parser/ptree.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     return reinterpret_cast<ParseNodeFinally*>(this);",
          "221: }",
          "229: ParseNodeWhile * ParseNode::AsParseNodeWhile()",
          "230: {",
          "231:     Assert(this->nop == knopWhile || this->nop == knopDoWhile);",
          "",
          "[Removed Lines]",
          "223: ParseNodeLoop * ParseNode::AsParseNodeLoop()",
          "224: {",
          "225:     Assert(this->nop == knopWhile || this->nop == knopDoWhile || this->nop == knopFor || this->nop == knopForIn || this->nop == knopForOf || this->nop == knopForAwaitOf);",
          "226:     return reinterpret_cast<ParseNodeLoop*>(this);",
          "227: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536: {",
          "537: }",
          "544: ParseNodeWhile::ParseNodeWhile(OpCode nop, charcount_t ichMin, charcount_t ichLim)",
          "546: {",
          "547: }",
          "",
          "[Removed Lines]",
          "539: ParseNodeLoop::ParseNodeLoop(OpCode nop, charcount_t ichMin, charcount_t ichLim)",
          "540:     : ParseNodeStmt(nop, ichMin, ichLim)",
          "541: {",
          "542: }",
          "545:     : ParseNodeLoop(nop, ichMin, ichLim)",
          "",
          "[Added Lines]",
          "534:     : ParseNodeStmt(nop, ichMin, ichLim)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562: }",
          "564: ParseNodeForInOrForOf::ParseNodeForInOrForOf(OpCode nop, charcount_t ichMin, charcount_t ichLim)",
          "566: {",
          "567: }",
          "569: ParseNodeFor::ParseNodeFor(OpCode nop, charcount_t ichMin, charcount_t ichLim)",
          "571: {",
          "572: }",
          "",
          "[Removed Lines]",
          "565:     : ParseNodeLoop(nop, ichMin, ichLim)",
          "570:     : ParseNodeLoop(nop, ichMin, ichLim)",
          "",
          "[Added Lines]",
          "554:     : ParseNodeStmt(nop, ichMin, ichLim)",
          "559:     : ParseNodeStmt(nop, ichMin, ichLim)",
          "",
          "---------------"
        ],
        "lib/Parser/ptree.h||lib/Parser/ptree.h": [
          "File: lib/Parser/ptree.h -> lib/Parser/ptree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: class ParseNodeTry;",
          "103: class ParseNodeCatch;",
          "104: class ParseNodeFinally;",
          "106: class ParseNodeWhile;",
          "107: class ParseNodeFor;",
          "108: class ParseNodeForInOrForOf;",
          "",
          "[Removed Lines]",
          "105: class ParseNodeLoop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     ParseNodeCatch * AsParseNodeCatch();",
          "155:     ParseNodeFinally * AsParseNodeFinally();",
          "158:     ParseNodeWhile * AsParseNodeWhile();",
          "159:     ParseNodeFor * AsParseNodeFor();",
          "160:     ParseNodeForInOrForOf * AsParseNodeForInOrForOf();",
          "",
          "[Removed Lines]",
          "157:     ParseNodeLoop * AsParseNodeLoop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "803: public:",
          "804:     ParseNodeStmt(OpCode nop, charcount_t ichMin, charcount_t ichLim);",
          "809:     uint grfnop;",
          "",
          "[Removed Lines]",
          "806:     ParseNodeStmt * pnodeOuter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "862:     DISABLE_SELF_CAST(ParseNodeJump);",
          "863: };",
          "880: {",
          "881: public:",
          "882:     ParseNodeWhile(OpCode nop, charcount_t ichMin, charcount_t ichLim);",
          "",
          "[Removed Lines]",
          "866: class ParseNodeLoop : public ParseNodeStmt",
          "867: {",
          "868: public:",
          "869:     ParseNodeLoop(OpCode nop, charcount_t ichMin, charcount_t ichLim);",
          "872:     uint loopId;",
          "875:     DISABLE_SELF_CAST(ParseNodeLoop);",
          "876: };",
          "879: class ParseNodeWhile : public ParseNodeLoop",
          "",
          "[Added Lines]",
          "862: class ParseNodeWhile : public ParseNodeStmt",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927: };",
          "931: {",
          "932: public:",
          "933:     ParseNodeForInOrForOf(OpCode nop, charcount_t ichMin, charcount_t ichLim);",
          "",
          "[Removed Lines]",
          "930: class ParseNodeForInOrForOf : public ParseNodeLoop",
          "",
          "[Added Lines]",
          "913: class ParseNodeForInOrForOf : public ParseNodeStmt",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "944: };",
          "948: {",
          "949: public:",
          "950:     ParseNodeFor(OpCode nop, charcount_t ichMin, charcount_t ichLim);",
          "",
          "[Removed Lines]",
          "947: class ParseNodeFor : public ParseNodeLoop",
          "",
          "[Added Lines]",
          "930: class ParseNodeFor : public ParseNodeStmt",
          "",
          "---------------"
        ],
        "lib/Parser/rterrors.h||lib/Parser/rterrors.h": [
          "File: lib/Parser/rterrors.h -> lib/Parser/rterrors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: RT_ERROR_MSG(JSERR_UnicodeRegExpRangeContainsCharClass, 5677, \"%s\", \"Character classes not allowed in a RegExp class range.\", kjstSyntaxError, 0)",
          "373: RT_ERROR_MSG(JSERR_DuplicateKeysFromOwnPropertyKeys, 5678, \"%s\", \"Proxy's ownKeys trap returned duplicate keys\", kjstTypeError, 0)",
          "374: RT_ERROR_MSG(JSERR_InvalidGloFuncDecl, 5679, \"The global property %s is not configurable, writable, nor enumerable, therefore cannot be declared as a function\", \"\", kjstTypeError, 0)",
          "377: RT_ERROR_MSG(JSERR_HostMaybeMissingPromiseContinuationCallback, 5700, \"\", \"Host may not have set any promise continuation callback. Promises may not be executed.\", kjstTypeError, 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: RT_ERROR_MSG(JSERR_YieldStarThrowMissing, 5680, \"\", \"Yielded iterator does not have a 'throw' method\", kjstTypeError, 0)",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/Constants.h||lib/Runtime/Base/Constants.h": [
          "File: lib/Runtime/Base/Constants.h -> lib/Runtime/Base/Constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         static const uint               NoByteCodeOffset            = (uint)-1;",
          "28:         static const PropertyId         NoProperty                  = -1;",
          "29:         static const RegSlot            NoRegister                  = (RegSlot)-1;",
          "30:         static const RegSlot            OneByteRegister             = (RegSlot_OneByte)-1;",
          "31:         static const int32              InvalidOffset               = -1;",
          "32:         static const unsigned int       PropertyGroupSize           = 512;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         static const ByteCodeLabel      NoByteCodeLabel             = (ByteCodeLabel)-1;",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp": [
          "File: lib/Runtime/Base/ScriptContext.cpp -> lib/Runtime/Base/ScriptContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1066:         Output::Print(_u(\"    SetIterator                    %8d   %8d\\n\"), typeCount[TypeIds_SetIterator], instanceCount[TypeIds_SetIterator]);",
          "1067:         Output::Print(_u(\"    StringIterator                 %8d   %8d\\n\"), typeCount[TypeIds_StringIterator], instanceCount[TypeIds_StringIterator]);",
          "1068:         Output::Print(_u(\"    Generator                      %8d   %8d\\n\"), typeCount[TypeIds_Generator], instanceCount[TypeIds_Generator]);",
          "1069: #if !DBG",
          "1070:         Output::Print(_u(\"    ** Instance statistics only available on debug builds...\\n\"));",
          "1071: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1069:         Output::Print(_u(\"    AsyncGenerator                 %8d   %8d\\n\"), typeCount[TypeIds_AsyncGenerator], instanceCount[TypeIds_AsyncGenerator]);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x51f0edaa, 0x63a2, 0x4d76, {0xbc, 0xac, 0x16, 0x0b, 0x8d, 0xd6, 0xc2, 0xad } };",
          "",
          "[Added Lines]",
          "10: { 0x0dd2f753, 0x99b8, 0x4259, {0xb5, 0x51, 0x10, 0xf2, 0xb9, 0xbf, 0x23, 0xd1 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: void EmitAssignment(ParseNode *asgnNode, ParseNode *lhs, Js::RegSlot rhsLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
          "12: void EmitLoad(ParseNode *rhs, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
          "13: void EmitCall(ParseNodeCall* pnodeCall, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, BOOL fEvaluateComponents, Js::RegSlot overrideThisLocation = Js::Constants::NoRegister, Js::RegSlot newTargetLocation = Js::Constants::NoRegister);",
          "17: void EmitUseBeforeDeclaration(Symbol *sym, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
          "18: void EmitUseBeforeDeclarationRuntimeError(ByteCodeGenerator *byteCodeGenerator, Js::RegSlot location);",
          "",
          "[Removed Lines]",
          "14: void EmitYield(Js::RegSlot inputLocation, Js::RegSlot resultLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, bool isAsync = false, bool isAwait = false, Js::RegSlot yieldStarIterator = Js::Constants::NoRegister);",
          "15: void EmitDummyYield(ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "",
          "[Added Lines]",
          "14: void EmitStartupYield(ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "15: void EmitYield(Js::RegSlot resultReg, Js::RegSlot inputReg, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "16: void EmitAwait(Js::RegSlot resultReg, Js::RegSlot inputReg, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1757:     }",
          "1758: }",
          "1761: {",
          "1768:     if (funcInfo->NeedEnvRegister())",
          "1769:     {",
          "1770:         bool constReg = !funcInfo->GetIsTopLevelEventHandler() && funcInfo->IsGlobalFunction() && !(this->flags & fscrEval);",
          "",
          "[Removed Lines]",
          "1760: void ByteCodeGenerator::FinalizeRegisters(FuncInfo * funcInfo, Js::FunctionBody * byteCodeFunction)",
          "1762:     if (byteCodeFunction->IsCoroutine())",
          "1763:     {",
          "1765:         funcInfo->AssignFalseConstRegister();",
          "1766:     }",
          "",
          "[Added Lines]",
          "1761: void ByteCodeGenerator::FinalizeRegisters(FuncInfo* funcInfo, Js::FunctionBody* byteCodeFunction)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2646: {",
          "2647:     uint beginOffset = m_writer.GetCurrentOffset();",
          "2650:     {",
          "2651:         if (pnodeArg->nop == knopParamPattern)",
          "2652:         {",
          "",
          "[Removed Lines]",
          "2649:     auto emitDefaultArg = [&](ParseNode *pnodeArg)",
          "",
          "[Added Lines]",
          "2644:     MapFormals(pnodeFnc, [&](ParseNode *pnodeArg)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2721:             this->EndStatement(pnodeArg);",
          "2722:         }",
          "2778:     if (m_writer.GetCurrentOffset() > beginOffset)",
          "2779:     {",
          "",
          "[Removed Lines]",
          "2723:     };",
          "2726:     if (pnodeFnc->IsAsync() && !pnodeFnc->IsGenerator())",
          "2727:     {",
          "2728:         uint cacheId;",
          "2729:         Js::ByteCodeLabel catchLabel = m_writer.DefineLabel();",
          "2730:         Js::ByteCodeLabel doneLabel = m_writer.DefineLabel();",
          "2731:         Js::RegSlot catchArgLocation = funcInfo->AcquireTmpRegister();",
          "2732:         Js::RegSlot promiseLocation = funcInfo->AcquireTmpRegister();",
          "2733:         Js::RegSlot rejectLocation = funcInfo->AcquireTmpRegister();",
          "2736:         m_writer.RecordCrossFrameEntryExitRecord(/* isEnterBlock = */ true);",
          "2737:         m_writer.Br(Js::OpCode::TryCatch, catchLabel);",
          "2739:         MapFormals(pnodeFnc, emitDefaultArg);",
          "2741:         m_writer.RecordCrossFrameEntryExitRecord(/* isEnterBlock = */ false);",
          "2742:         m_writer.Empty(Js::OpCode::Leave);",
          "2743:         m_writer.Br(doneLabel);",
          "2746:         m_writer.MarkLabel(catchLabel);",
          "2747:         m_writer.Reg1(Js::OpCode::Catch, catchArgLocation);",
          "2749:         m_writer.RecordCrossFrameEntryExitRecord(/* isEnterBlock = */ true);",
          "2750:         m_writer.Empty(Js::OpCode::Nop);",
          "2753:         cacheId = funcInfo->FindOrAddRootObjectInlineCacheId(Js::PropertyIds::Promise, false, false);",
          "2754:         m_writer.PatchableRootProperty(Js::OpCode::LdRootFld, promiseLocation, cacheId, false, false);",
          "2756:         EmitInvoke(rejectLocation, promiseLocation, Js::PropertyIds::reject, this, funcInfo, catchArgLocation);",
          "2758:         m_writer.Reg2(Js::OpCode::Ld_A, ByteCodeGenerator::ReturnRegister, rejectLocation);",
          "2760:         m_writer.RecordCrossFrameEntryExitRecord(/* isEnterBlock = */ false);",
          "2761:         m_writer.Empty(Js::OpCode::Leave);",
          "2762:         m_writer.Br(funcInfo->singleExit);",
          "2763:         m_writer.Empty(Js::OpCode::Leave);",
          "2765:         m_writer.MarkLabel(doneLabel);",
          "2767:         this->SetHasTry(true);",
          "2769:         funcInfo->ReleaseTmpRegister(rejectLocation);",
          "2770:         funcInfo->ReleaseTmpRegister(promiseLocation);",
          "2771:         funcInfo->ReleaseTmpRegister(catchArgLocation);",
          "2772:     }",
          "2773:     else",
          "2774:     {",
          "2775:         MapFormals(pnodeFnc, emitDefaultArg);",
          "2776:     }",
          "",
          "[Added Lines]",
          "2718:     });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3058:             }",
          "3059:         }",
          "3070:         DefineUserVars(funcInfo);",
          "",
          "[Removed Lines]",
          "3065:         if (pnodeFnc->IsGenerator() && !pnodeFnc->IsModule())",
          "3066:         {",
          "3067:             EmitDummyYield(this, funcInfo);",
          "3068:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3080:             DefineFunctions(funcInfo);",
          "3081:         }",
          "3085:         {",
          "3087:         }",
          "3089:         if (pnodeFnc->HasNonSimpleParameterList() || !funcInfo->IsBodyAndParamScopeMerged())",
          "",
          "[Removed Lines]",
          "3084:         if (pnodeFnc->IsModule())",
          "3086:             EmitDummyYield(this, funcInfo);",
          "",
          "[Added Lines]",
          "3020:         if (pnodeFnc->IsGenerator())",
          "3022:             EmitStartupYield(this, funcInfo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6200:     }",
          "6201: }",
          "6205: void EmitIteratorClose(Js::RegSlot iteratorLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, bool isAsync = false);",
          "6209: void EmitDestructuredElement(ParseNode *elem, Js::RegSlot sourceLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo *funcInfo)",
          "6210: {",
          "",
          "[Removed Lines]",
          "6203: void EmitGetIterator(Js::RegSlot iteratorLocation, Js::RegSlot iterableLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, bool isAsync = false);",
          "6204: void EmitIteratorNext(Js::RegSlot itemLocation, Js::RegSlot iteratorLocation, Js::RegSlot nextInputLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "6206: void EmitIteratorComplete(Js::RegSlot doneLocation, Js::RegSlot iteratorResultLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "6207: void EmitIteratorValue(Js::RegSlot valueLocation, Js::RegSlot iteratorResultLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "",
          "[Added Lines]",
          "6139: void EmitGetIterator(Js::RegSlot iteratorReg, Js::RegSlot iterableReg, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "6142: void EmitFunctionCall(",
          "6143:     Js::RegSlot resultReg,",
          "6144:     Js::RegSlot funcReg,",
          "6145:     Js::RegSlot thisReg,",
          "6146:     Js::RegSlot argReg,",
          "6147:     ByteCodeGenerator* byteCodeGenerator,",
          "6148:     FuncInfo* funcInfo)",
          "6149: {",
          "6150:     Js::ArgSlot argCount = argReg == Js::Constants::NoRegister ? 1 : 2;",
          "6151:     funcInfo->StartRecordingOutArgs(argCount);",
          "6152:     Js::ProfileId callSite = byteCodeGenerator->GetNextCallSiteId(Js::OpCode::CallI);",
          "6153:     byteCodeGenerator->Writer()->StartCall(Js::OpCode::StartCall, argCount);",
          "6155:     byteCodeGenerator->Writer()->ArgOut<true>(0, thisReg, callSite, false);",
          "6157:     if (argReg != Js::Constants::NoRegister)",
          "6158:         byteCodeGenerator->Writer()->ArgOut<true>(1, argReg, callSite, false);",
          "6160:     byteCodeGenerator->Writer()->CallI(Js::OpCode::CallI, resultReg, funcReg, argCount, callSite);",
          "6161: }",
          "6163: void EmitFunctionCall(",
          "6164:     Js::RegSlot resultReg,",
          "6165:     Js::RegSlot funcReg,",
          "6166:     Js::RegSlot thisReg,",
          "6167:     ByteCodeGenerator* byteCodeGenerator,",
          "6168:     FuncInfo* funcInfo)",
          "6169: {",
          "6170:     Js::RegSlot argReg = Js::Constants::NoRegister;",
          "6171:     EmitFunctionCall(resultReg, funcReg, thisReg, argReg, byteCodeGenerator, funcInfo);",
          "6172: }",
          "6174: void EmitThrowOnNotObject(Js::RegSlot varReg, ByteCodeGenerator* byteCodeGenerator)",
          "6175: {",
          "6176:     Js::ByteCodeLabel skipThrow = byteCodeGenerator->Writer()->DefineLabel();",
          "6177:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrOnObject_A, skipThrow, varReg);",
          "6178:     byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_NeedObject));",
          "6179:     byteCodeGenerator->Writer()->MarkLabel(skipThrow);",
          "6180: }",
          "6182: void EmitGetOptionalObjectMethod(",
          "6183:     Js::RegSlot methodReg,",
          "6184:     Js::RegSlot objectReg,",
          "6185:     Js::PropertyId propertyId,",
          "6186:     Js::ByteCodeLabel noMethodLabel,",
          "6187:     ByteCodeGenerator* byteCodeGenerator,",
          "6188:     FuncInfo* funcInfo)",
          "6189: {",
          "6190:     uint cacheId = funcInfo->FindOrAddInlineCacheId(",
          "6191:         objectReg,",
          "6192:         propertyId,",
          "6196:     byteCodeGenerator->Writer()->PatchableProperty(",
          "6197:         Js::OpCode::LdFld,",
          "6198:         methodReg,",
          "6199:         objectReg,",
          "6200:         cacheId,",
          "6204:     byteCodeGenerator->Writer()->BrReg2(",
          "6205:         Js::OpCode::BrEq_A,",
          "6206:         noMethodLabel,",
          "6207:         methodReg,",
          "6208:         funcInfo->undefinedConstantRegister);",
          "6209: }",
          "6211: void EmitGetObjectMethod(",
          "6212:     Js::RegSlot methodReg,",
          "6213:     Js::RegSlot objectReg,",
          "6214:     Js::PropertyId propertyId,",
          "6215:     ByteCodeGenerator* byteCodeGenerator,",
          "6216:     FuncInfo* funcInfo)",
          "6217: {",
          "6218:     uint cacheId = funcInfo->FindOrAddInlineCacheId(",
          "6219:         objectReg,",
          "6220:         propertyId,",
          "6224:     byteCodeGenerator->Writer()->PatchableProperty(",
          "6225:         Js::OpCode::LdMethodFld,",
          "6226:         methodReg,",
          "6227:         objectReg,",
          "6228:         cacheId,",
          "6231: }",
          "6233: void EmitGetObjectProperty(",
          "6234:     Js::RegSlot resultReg,",
          "6235:     Js::RegSlot objectReg,",
          "6236:     Js::PropertyId propertyId,",
          "6237:     ByteCodeGenerator* byteCodeGenerator,",
          "6238:     FuncInfo* funcInfo)",
          "6239: {",
          "6240:     uint cacheId = funcInfo->FindOrAddInlineCacheId(",
          "6241:         objectReg,",
          "6242:         propertyId,",
          "6246:     byteCodeGenerator->Writer()->PatchableProperty(",
          "6247:         Js::OpCode::LdFld,",
          "6248:         resultReg,",
          "6249:         objectReg,",
          "6250:         cacheId,",
          "6253: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6225:     funcInfo->ReleaseReference(elem);",
          "6226: }",
          "6229:     Js::RegSlot iteratorLocation,",
          "6230:     Js::RegSlot shouldCallReturnFunctionLocation,",
          "6231:     Js::RegSlot shouldCallReturnFunctionLocationFinally,",
          "6234: {",
          "6235:     Js::RegSlot restArrayLocation = funcInfo->AcquireTmpRegister();",
          "6236:     bool isAssignmentTarget = !(elem->AsParseNodeUni()->pnode1->IsPattern() || elem->AsParseNodeUni()->pnode1->IsVarLetOrConst());",
          "",
          "[Removed Lines]",
          "6228: void EmitDestructuredRestArray(ParseNode *elem,",
          "6232:     ByteCodeGenerator *byteCodeGenerator,",
          "6233:     FuncInfo *funcInfo)",
          "",
          "[Added Lines]",
          "6274: void EmitDestructuredRestArray(",
          "6275:     ParseNode* elem,",
          "6277:     Js::RegSlot nextMethodReg,",
          "6280:     ByteCodeGenerator* byteCodeGenerator,",
          "6281:     FuncInfo* funcInfo)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6265:     Js::RegSlot itemLocation = funcInfo->AcquireTmpRegister();",
          "6269:     Js::RegSlot doneLocation = funcInfo->AcquireTmpRegister();",
          "6272:     Js::ByteCodeLabel iteratorDone = byteCodeGenerator->Writer()->DefineLabel();",
          "6273:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, iteratorDone, doneLocation);",
          "6275:     Js::RegSlot valueLocation = funcInfo->AcquireTmpRegister();",
          "6278:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6279:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Removed Lines]",
          "6267:     EmitIteratorNext(itemLocation, iteratorLocation, Js::Constants::NoRegister, byteCodeGenerator, funcInfo);",
          "6270:     EmitIteratorComplete(doneLocation, itemLocation, byteCodeGenerator, funcInfo);",
          "6276:     EmitIteratorValue(valueLocation, itemLocation, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "6315:     EmitFunctionCall(",
          "6316:         itemLocation,",
          "6317:         nextMethodReg,",
          "6318:         iteratorLocation,",
          "6319:         byteCodeGenerator,",
          "6320:         funcInfo);",
          "6322:     EmitThrowOnNotObject(itemLocation, byteCodeGenerator);",
          "6325:     EmitGetObjectProperty(",
          "6326:         doneLocation,",
          "6327:         itemLocation,",
          "6328:         Js::PropertyIds::done,",
          "6329:         byteCodeGenerator,",
          "6330:         funcInfo);",
          "6336:     EmitGetObjectProperty(",
          "6337:         valueLocation,",
          "6338:         itemLocation,",
          "6339:         Js::PropertyIds::value,",
          "6340:         byteCodeGenerator,",
          "6341:         funcInfo);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6351:         rest.append(value)",
          "6353: void EmitDestructuredArrayCore(",
          "6355:     Js::RegSlot iteratorLocation,",
          "6356:     Js::RegSlot shouldCallReturnFunctionLocation,",
          "6357:     Js::RegSlot shouldCallReturnFunctionLocationFinally,",
          "6361: {",
          "6362:     Assert(list != nullptr);",
          "",
          "[Removed Lines]",
          "6354:     ParseNode *list,",
          "6358:     ByteCodeGenerator *byteCodeGenerator,",
          "6359:     FuncInfo *funcInfo",
          "6360:     )",
          "",
          "[Added Lines]",
          "6419:     ParseNode* list,",
          "6421:     Js::RegSlot nextMethodReg,",
          "6424:     ByteCodeGenerator* byteCodeGenerator,",
          "6425:     FuncInfo* funcInfo)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6413:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "6415:         Js::RegSlot itemLocation = funcInfo->AcquireTmpRegister();",
          "6418:         Js::RegSlot doneLocation = funcInfo->AcquireTmpRegister();",
          "6421:         if (elem->nop == knopEmpty)",
          "6422:         {",
          "",
          "[Removed Lines]",
          "6416:         EmitIteratorNext(itemLocation, iteratorLocation, Js::Constants::NoRegister, byteCodeGenerator, funcInfo);",
          "6419:         EmitIteratorComplete(doneLocation, itemLocation, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "6481:         EmitFunctionCall(",
          "6482:             itemLocation,",
          "6483:             nextMethodReg,",
          "6484:             iteratorLocation,",
          "6485:             byteCodeGenerator,",
          "6486:             funcInfo);",
          "6488:         EmitThrowOnNotObject(itemLocation, byteCodeGenerator);",
          "6491:         EmitGetObjectProperty(",
          "6492:             doneLocation,",
          "6493:             itemLocation,",
          "6494:             Js::PropertyIds::done,",
          "6495:             byteCodeGenerator,",
          "6496:             funcInfo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6445:         Js::RegSlot valueLocation = funcInfo->AcquireTmpRegister();",
          "6447:         Js::ByteCodeLabel beforeDefaultAssign = byteCodeGenerator->Writer()->DefineLabel();",
          "6449:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocation);",
          "",
          "[Removed Lines]",
          "6446:         EmitIteratorValue(valueLocation, itemLocation, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "6523:         EmitGetObjectProperty(",
          "6524:             valueLocation,",
          "6525:             itemLocation,",
          "6526:             Js::PropertyIds::value,",
          "6527:             byteCodeGenerator,",
          "6528:             funcInfo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6569:     if (elem != nullptr && elem->nop == knopEllipsis)",
          "6570:     {",
          "6572:             iteratorLocation,",
          "6573:             shouldCallReturnFunctionLocation,",
          "6574:             shouldCallReturnFunctionLocationFinally,",
          "6575:             byteCodeGenerator,",
          "",
          "[Removed Lines]",
          "6571:         EmitDestructuredRestArray(elem,",
          "",
          "[Added Lines]",
          "6654:         EmitDestructuredRestArray(",
          "6655:             elem,",
          "6657:             nextMethodReg,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6599:     Js::RegSlot iteratorLocation,",
          "6600:     Js::ByteCodeLabel endLabel,",
          "6601:     ByteCodeGenerator *byteCodeGenerator,",
          "",
          "[Removed Lines]",
          "6598: void EmitTryCatchAroundClose(",
          "",
          "[Added Lines]",
          "6683: void EmitTryCatchAroundIteratorClose(",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6605:     Js::ByteCodeLabel catchLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "6606:     byteCodeGenerator->Writer()->Br(Js::OpCode::TryCatch, catchLabel);",
          "6612:     if (isAsync)",
          "6617:     EmitIteratorClose(iteratorLocation, byteCodeGenerator, funcInfo, isAsync);",
          "6619:     if (isAsync)",
          "6624:     byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "6625:     byteCodeGenerator->Writer()->Br(endLabel);",
          "",
          "[Removed Lines]",
          "6611:     ByteCodeGenerator::TryScopeRecord tryRecForCatch(Js::OpCode::ResumeCatch, catchLabel);",
          "6613:     {",
          "6614:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForCatch);",
          "6615:     }",
          "6620:     {",
          "6621:         byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "6622:     }",
          "",
          "[Added Lines]",
          "6696:         byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryCatch, catchLabel);",
          "6701:         byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6642:     Js::RegSlot iteratorLocation,",
          "6643:     Js::RegSlot shouldCallReturnLocation,",
          "6644:     Js::RegSlot shouldCallReturnLocationFinally,",
          "6647:     bool isAsync)",
          "6648: {",
          "6649:     Js::ByteCodeLabel afterCatchBlockLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "",
          "[Removed Lines]",
          "6641: void EmitTopLevelCatch(Js::ByteCodeLabel catchLabel,",
          "6645:     ByteCodeGenerator *byteCodeGenerator,",
          "6646:     FuncInfo *funcInfo,",
          "",
          "[Added Lines]",
          "6720: void EmitIteratorTopLevelCatch(",
          "6721:     Js::ByteCodeLabel catchLabel,",
          "6725:     ByteCodeGenerator* byteCodeGenerator,",
          "6726:     FuncInfo* funcInfo,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6654:     Js::RegSlot catchParamLocation = funcInfo->AcquireTmpRegister();",
          "6655:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::Catch, catchParamLocation);",
          "6663:     Js::ByteCodeLabel skipCallCloseLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "6665:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrFalse_A, skipCallCloseLabel, shouldCallReturnLocation);",
          "6666:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnLocationFinally);",
          "6669:     byteCodeGenerator->Writer()->MarkLabel(skipCallCloseLabel);",
          "6672:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::Throw, catchParamLocation);",
          "6674:     funcInfo->ReleaseTmpRegister(catchParamLocation);",
          "6681:     byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "6682:     byteCodeGenerator->Writer()->MarkLabel(afterCatchBlockLabel);",
          "6683: }",
          "",
          "[Removed Lines]",
          "6657:     ByteCodeGenerator::TryScopeRecord tryRecForCatch(Js::OpCode::ResumeCatch, catchLabel);",
          "6658:     if (funcInfo->byteCodeFunction->IsCoroutine())",
          "6659:     {",
          "6660:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForCatch);",
          "6661:     }",
          "6667:     EmitTryCatchAroundClose(iteratorLocation, skipCallCloseLabel, byteCodeGenerator, funcInfo, isAsync);",
          "6676:     if (funcInfo->byteCodeFunction->IsCoroutine())",
          "6677:     {",
          "6678:         byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "6679:     }",
          "",
          "[Added Lines]",
          "6737:     byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::ResumeCatch);",
          "6744:     EmitTryCatchAroundIteratorClose(iteratorLocation, skipCallCloseLabel, byteCodeGenerator, funcInfo, isAsync);",
          "6752:     byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6692:     Js::RegSlot iteratorLocation,",
          "6693:     Js::RegSlot shouldCallReturnLocation,",
          "6694:     Js::RegSlot yieldExceptionLocation,",
          "6695:     Js::RegSlot yieldOffsetLocation,",
          "6698:     bool isAsync)",
          "6699: {",
          "6700:     bool isCoroutine = funcInfo->byteCodeFunction->IsCoroutine();",
          "",
          "[Removed Lines]",
          "6691: void EmitTopLevelFinally(Js::ByteCodeLabel finallyLabel,",
          "6696:     ByteCodeGenerator *byteCodeGenerator,",
          "6697:     FuncInfo *funcInfo,",
          "",
          "[Added Lines]",
          "6763: void EmitIteratorTopLevelFinally(",
          "6764:     Js::ByteCodeLabel finallyLabel,",
          "6769:     ByteCodeGenerator* byteCodeGenerator,",
          "6770:     FuncInfo* funcInfo,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6709:     byteCodeGenerator->Writer()->MarkLabel(finallyLabel);",
          "6710:     byteCodeGenerator->Writer()->Empty(Js::OpCode::Finally);",
          "6718:     Js::ByteCodeLabel skipCallCloseLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "",
          "[Removed Lines]",
          "6712:     ByteCodeGenerator::TryScopeRecord tryRecForFinally(Js::OpCode::ResumeFinally, finallyLabel, yieldExceptionLocation, yieldOffsetLocation);",
          "6713:     if (isCoroutine)",
          "6714:     {",
          "6715:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForFinally);",
          "6716:     }",
          "",
          "[Added Lines]",
          "6785:     byteCodeGenerator->PushJumpCleanupForTry(",
          "6786:         Js::OpCode::ResumeFinally,",
          "6787:         finallyLabel,",
          "6788:         yieldExceptionLocation,",
          "6789:         yieldOffsetLocation);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6723:     byteCodeGenerator->Writer()->MarkLabel(skipCallCloseLabel);",
          "6725:     if (isCoroutine)",
          "6726:     {",
          "6728:         funcInfo->ReleaseTmpRegister(yieldOffsetLocation);",
          "6729:         funcInfo->ReleaseTmpRegister(yieldExceptionLocation);",
          "6730:     }",
          "",
          "[Removed Lines]",
          "6727:         byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "",
          "[Added Lines]",
          "6798:     byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6734:     byteCodeGenerator->Writer()->MarkLabel(afterFinallyBlockLabel);",
          "6735: }",
          "6738:     Js::ByteCodeLabel finallyLabel,",
          "6739:     Js::RegSlot iteratorLocation,",
          "6740:     Js::RegSlot shouldCallReturnFunctionLocation,",
          "6741:     Js::RegSlot shouldCallReturnFunctionLocationFinally,",
          "6742:     Js::RegSlot yieldExceptionLocation,",
          "6743:     Js::RegSlot yieldOffsetLocation,",
          "6748: {",
          "6756:         iteratorLocation,",
          "6757:         shouldCallReturnFunctionLocation,",
          "6758:         shouldCallReturnFunctionLocationFinally,",
          "",
          "[Removed Lines]",
          "6737: void EmitCatchAndFinallyBlocks(Js::ByteCodeLabel catchLabel,",
          "6744:     ByteCodeGenerator *byteCodeGenerator,",
          "6745:     FuncInfo *funcInfo,",
          "6746:     bool isAsync = false",
          "6747:     )",
          "6749:     bool isCoroutine = funcInfo->byteCodeFunction->IsCoroutine();",
          "6750:     if (isCoroutine)",
          "6751:     {",
          "6752:         byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "6753:     }",
          "6755:     EmitTopLevelCatch(catchLabel,",
          "",
          "[Added Lines]",
          "6810: void EmitIteratorCatchAndFinally(",
          "6811:     Js::ByteCodeLabel catchLabel,",
          "6818:     ByteCodeGenerator* byteCodeGenerator,",
          "6819:     FuncInfo* funcInfo,",
          "6820:     bool isAsync = false)",
          "6822:     byteCodeGenerator->PopJumpCleanup();",
          "6824:     EmitIteratorTopLevelCatch(",
          "6825:         catchLabel,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6760:         funcInfo,",
          "6761:         isAsync);",
          "6769:         iteratorLocation,",
          "6770:         shouldCallReturnFunctionLocationFinally,",
          "6771:         yieldExceptionLocation,",
          "",
          "[Removed Lines]",
          "6763:     if (isCoroutine)",
          "6764:     {",
          "6765:         byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "6766:     }",
          "6768:     EmitTopLevelFinally(finallyLabel,",
          "",
          "[Added Lines]",
          "6833:     byteCodeGenerator->PopJumpCleanup();",
          "6835:     EmitIteratorTopLevelFinally(",
          "6836:         finallyLabel,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6803:         return;",
          "6804:     }",
          "6808:     Js::RegSlot shouldCallReturnFunctionLocation = funcInfo->AcquireTmpRegister();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6874:     Js::RegSlot nextMethodReg = funcInfo->AcquireTmpRegister();",
          "6875:     EmitGetObjectMethod(",
          "6876:         nextMethodReg,",
          "6877:         iteratorLocation,",
          "6878:         Js::PropertyIds::next,",
          "6879:         byteCodeGenerator,",
          "6880:         funcInfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6829:     Js::ByteCodeLabel catchLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "6830:     byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(true);",
          "6834:     if (isCoroutine)",
          "6835:     {",
          "6836:         byteCodeGenerator->Writer()->BrReg2(Js::OpCode::TryFinallyWithYield, finallyLabel, regException, regOffset);",
          "6840:     }",
          "6841:     else",
          "6842:     {",
          "6843:         byteCodeGenerator->Writer()->Br(Js::OpCode::TryFinally, finallyLabel);",
          "6844:     }",
          "6846:     byteCodeGenerator->Writer()->Br(Js::OpCode::TryCatch, catchLabel);",
          "6855:         iteratorLocation,",
          "6856:         shouldCallReturnFunctionLocation,",
          "6857:         shouldCallReturnFunctionLocationFinally,",
          "6858:         byteCodeGenerator,",
          "6859:         funcInfo);",
          "6862:         finallyLabel,",
          "6863:         iteratorLocation,",
          "6864:         shouldCallReturnFunctionLocation,",
          "",
          "[Removed Lines]",
          "6832:     ByteCodeGenerator::TryScopeRecord tryRecForTryFinally(Js::OpCode::TryFinallyWithYield, finallyLabel);",
          "6837:         tryRecForTryFinally.reg1 = regException;",
          "6838:         tryRecForTryFinally.reg2 = regOffset;",
          "6839:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTryFinally);",
          "6848:     ByteCodeGenerator::TryScopeRecord tryRecForTry(Js::OpCode::TryCatch, catchLabel);",
          "6849:     if (isCoroutine)",
          "6850:     {",
          "6851:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTry);",
          "6852:     }",
          "6854:     EmitDestructuredArrayCore(list,",
          "6861:     EmitCatchAndFinallyBlocks(catchLabel,",
          "",
          "[Added Lines]",
          "6911:         byteCodeGenerator->PushJumpCleanupForTry(",
          "6912:             Js::OpCode::TryFinallyWithYield,",
          "6913:             finallyLabel,",
          "6914:             regException,",
          "6915:             regOffset);",
          "6920:         byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryFinally, finallyLabel);",
          "6924:     byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryCatch, catchLabel);",
          "6926:     EmitDestructuredArrayCore(",
          "6927:         list,",
          "6929:         nextMethodReg,",
          "6935:     EmitIteratorCatchAndFinally(",
          "6936:         catchLabel,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6868:         byteCodeGenerator,",
          "6869:         funcInfo);",
          "6871:     funcInfo->ReleaseTmpRegister(iteratorLocation);",
          "6873:     byteCodeGenerator->EndStatement(lhs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6946:     funcInfo->ReleaseTmpRegister(nextMethodReg);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "9460: void EmitLoop(",
          "9462:     ParseNode *cond,",
          "9463:     ParseNode *body,",
          "9464:     ParseNode *incr,",
          "",
          "[Removed Lines]",
          "9461:     ParseNodeLoop *loopNode,",
          "",
          "[Added Lines]",
          "9537:     ParseNodeStmt *loopNode,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "9474:     Js::ByteCodeLabel continuePastLoop = byteCodeGenerator->Writer()->DefineLabel();",
          "9476:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "9479:     if (doWhile)",
          "9480:     {",
          "",
          "[Removed Lines]",
          "9477:     loopNode->loopId = loopId;",
          "",
          "[Added Lines]",
          "9553:     byteCodeGenerator->PushJumpCleanupForLoop(loopNode, loopId);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "9533:         byteCodeGenerator->Writer()->MarkLabel(loopNode->breakLabel);",
          "9534:     }",
          "9536:     byteCodeGenerator->Writer()->ExitLoop(loopId);",
          "9537: }",
          "9540: {",
          "9541:     Js::ByteCodeLabel invertedLoopLabel = this->m_writer.DefineLabel();",
          "9542:     Js::ByteCodeLabel afterInvertedLoop = this->m_writer.DefineLabel();",
          "",
          "[Removed Lines]",
          "9539: void ByteCodeGenerator::EmitInvertedLoop(ParseNodeLoop* outerLoop, ParseNodeFor* invertedLoop, FuncInfo* funcInfo)",
          "",
          "[Added Lines]",
          "9612:     byteCodeGenerator->PopJumpCleanup();",
          "9616: void ByteCodeGenerator::EmitInvertedLoop(ParseNodeStmt* outerLoop, ParseNodeFor* invertedLoop, FuncInfo* funcInfo)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "9577:     this->m_writer.MarkLabel(afterInvertedLoop);",
          "9578: }",
          "9581: {",
          "9643: }",
          "",
          "[Removed Lines]",
          "9580: void EmitGetIterator(Js::RegSlot iteratorLocation, Js::RegSlot iterableLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, bool isAsync)",
          "9583:     if (!isAsync)",
          "9584:     {",
          "9585:         EmitInvoke(iteratorLocation, iterableLocation, Js::PropertyIds::_symbolIterator, byteCodeGenerator, funcInfo);",
          "9586:     }",
          "9587:     else",
          "9588:     {",
          "9589:         Js::ByteCodeLabel hasAsyncIterator = byteCodeGenerator->Writer()->DefineLabel();",
          "9590:         Js::ByteCodeLabel skipLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "9592:         byteCodeGenerator->Writer()->BrProperty(Js::OpCode::BrOnNoProperty, hasAsyncIterator, iterableLocation, Js::PropertyIds::_symbolAsyncIterator);",
          "9594:         EmitMethodFld(false, false, iteratorLocation, iterableLocation, Js::PropertyIds::_symbolAsyncIterator, byteCodeGenerator, funcInfo);",
          "9596:         byteCodeGenerator->Writer()->BrReg2(Js::OpCode::BrEq_A, hasAsyncIterator, iteratorLocation, funcInfo->undefinedConstantRegister);",
          "9597:         funcInfo->StartRecordingOutArgs(1);",
          "9599:         Js::ProfileId callSiteId = byteCodeGenerator->GetNextCallSiteId(Js::OpCode::CallI);",
          "9601:         byteCodeGenerator->Writer()->StartCall(Js::OpCode::StartCall, 1);",
          "9602:         EmitArgListStart(iterableLocation, byteCodeGenerator, funcInfo, callSiteId);",
          "9604:         byteCodeGenerator->Writer()->CallI(Js::OpCode::CallI, iteratorLocation, iteratorLocation, 1, callSiteId);",
          "9606:         byteCodeGenerator->Writer()->Br(skipLabel);",
          "9608:         byteCodeGenerator->Writer()->MarkLabel(hasAsyncIterator);",
          "9611:         Js::RegSlot syncIterator = funcInfo->AcquireTmpRegister();",
          "9612:         EmitGetIterator(syncIterator, iterableLocation, byteCodeGenerator, funcInfo, false);",
          "9613:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::NewAsyncFromSyncIterator, iteratorLocation, syncIterator);",
          "9614:         funcInfo->ReleaseTmpRegister(syncIterator);",
          "9616:         byteCodeGenerator->Writer()->MarkLabel(skipLabel);",
          "9617:     }",
          "9620:     Js::ByteCodeLabel skipThrow = byteCodeGenerator->Writer()->DefineLabel();",
          "9621:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrOnObject_A, skipThrow, iteratorLocation);",
          "9622:     byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_NeedObject));",
          "9623:     byteCodeGenerator->Writer()->MarkLabel(skipThrow);",
          "9624: }",
          "9626: void EmitIteratorNext(Js::RegSlot itemLocation, Js::RegSlot iteratorLocation, Js::RegSlot nextInputLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "9627: {",
          "9629:     if (nextInputLocation == Js::Constants::NoRegister)",
          "9630:     {",
          "9631:         EmitInvoke(itemLocation, iteratorLocation, Js::PropertyIds::next, byteCodeGenerator, funcInfo);",
          "9632:     }",
          "9633:     else",
          "9634:     {",
          "9635:         EmitInvoke(itemLocation, iteratorLocation, Js::PropertyIds::next, byteCodeGenerator, funcInfo, nextInputLocation);",
          "9636:     }",
          "9639:     Js::ByteCodeLabel skipThrow = byteCodeGenerator->Writer()->DefineLabel();",
          "9640:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrOnObject_A, skipThrow, itemLocation);",
          "9641:     byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_NeedObject));",
          "9642:     byteCodeGenerator->Writer()->MarkLabel(skipThrow);",
          "",
          "[Added Lines]",
          "9657: void EmitGetIterator(",
          "9658:     Js::RegSlot iteratorReg,",
          "9659:     Js::RegSlot iterableReg,",
          "9660:     ByteCodeGenerator* byteCodeGenerator,",
          "9661:     FuncInfo* funcInfo)",
          "9663:     EmitGetObjectMethod(",
          "9664:         iteratorReg,",
          "9665:         iterableReg,",
          "9666:         Js::PropertyIds::_symbolIterator,",
          "9667:         byteCodeGenerator,",
          "9668:         funcInfo);",
          "9670:     EmitFunctionCall(iteratorReg, iteratorReg, iterableReg, byteCodeGenerator, funcInfo);",
          "9671:     EmitThrowOnNotObject(iteratorReg, byteCodeGenerator);",
          "9672: }",
          "9674: void EmitGetAsyncIterator(",
          "9675:     Js::RegSlot resultReg,",
          "9676:     Js::RegSlot iterableReg,",
          "9677:     ByteCodeGenerator* byteCodeGenerator,",
          "9678:     FuncInfo* funcInfo)",
          "9679: {",
          "9680:     auto* writer = byteCodeGenerator->Writer();",
          "9682:     Js::ByteCodeLabel noAsyncIterator = writer->DefineLabel();",
          "9683:     EmitGetOptionalObjectMethod(",
          "9684:         resultReg,",
          "9685:         iterableReg,",
          "9686:         Js::PropertyIds::_symbolAsyncIterator,",
          "9687:         noAsyncIterator,",
          "9688:         byteCodeGenerator,",
          "9689:         funcInfo);",
          "9691:     EmitFunctionCall(resultReg, resultReg, iterableReg, byteCodeGenerator, funcInfo);",
          "9692:     EmitThrowOnNotObject(resultReg, byteCodeGenerator);",
          "9694:     Js::ByteCodeLabel finished = writer->DefineLabel();",
          "9695:     writer->Br(finished);",
          "9699:     writer->MarkLabel(noAsyncIterator);",
          "9700:     EmitGetIterator(resultReg, iterableReg, byteCodeGenerator, funcInfo);",
          "9701:     writer->Reg2(Js::OpCode::NewAsyncFromSyncIterator, resultReg, resultReg);",
          "9703:     byteCodeGenerator->Writer()->MarkLabel(finished);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "9653: {",
          "9657:     Js::ByteCodeLabel noReturn = byteCodeGenerator->Writer()->DefineLabel();",
          "9667:     if (isAsync)",
          "9676:     byteCodeGenerator->Writer()->MarkLabel(noReturn);",
          "9696: }",
          "9698: void EmitForInOfLoopBody(ParseNodeForInOrForOf *loopNode,",
          "",
          "[Removed Lines]",
          "9652: void EmitIteratorClose(Js::RegSlot iteratorLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, bool isAsync)",
          "9654:     Js::RegSlot returnLocation = funcInfo->AcquireTmpRegister();",
          "9656:     Js::ByteCodeLabel skipThrow = byteCodeGenerator->Writer()->DefineLabel();",
          "9659:     uint cacheId = funcInfo->FindOrAddInlineCacheId(iteratorLocation, Js::PropertyIds::return_, false, false);",
          "9660:     byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, returnLocation, iteratorLocation, cacheId);",
          "9662:     byteCodeGenerator->Writer()->BrReg2(Js::OpCode::BrEq_A, noReturn, returnLocation, funcInfo->undefinedConstantRegister);",
          "9664:     EmitInvoke(returnLocation, iteratorLocation, Js::PropertyIds::return_, byteCodeGenerator, funcInfo);",
          "9668:     {",
          "9669:         EmitYield(returnLocation, returnLocation, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator(), true);",
          "9670:     }",
          "9673:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrOnObject_A, skipThrow, returnLocation);",
          "9674:     byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_NeedObject));",
          "9675:     byteCodeGenerator->Writer()->MarkLabel(skipThrow);",
          "9678:     funcInfo->ReleaseTmpRegister(returnLocation);",
          "9679: }",
          "9681: void EmitIteratorComplete(Js::RegSlot doneLocation, Js::RegSlot iteratorResultLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "9682: {",
          "9684:     uint cacheId = funcInfo->FindOrAddInlineCacheId(iteratorResultLocation, Js::PropertyIds::done, false, false);",
          "9685:     byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, doneLocation, iteratorResultLocation, cacheId);",
          "9689: }",
          "9691: void EmitIteratorValue(Js::RegSlot valueLocation, Js::RegSlot iteratorResultLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "9692: {",
          "9694:     uint cacheId = funcInfo->FindOrAddInlineCacheId(iteratorResultLocation, Js::PropertyIds::value, false, false);",
          "9695:     byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, valueLocation, iteratorResultLocation, cacheId);",
          "",
          "[Added Lines]",
          "9713: void EmitIteratorClose(",
          "9714:     Js::RegSlot iteratorLocation,",
          "9715:     ByteCodeGenerator* byteCodeGenerator,",
          "9716:     FuncInfo* funcInfo,",
          "9717:     bool isAsync)",
          "9719:     Js::RegSlot returnReg = funcInfo->AcquireTmpRegister();",
          "9722:     EmitGetOptionalObjectMethod(",
          "9723:         returnReg,",
          "9724:         iteratorLocation,",
          "9725:         Js::PropertyIds::return_,",
          "9726:         noReturn,",
          "9727:         byteCodeGenerator,",
          "9728:         funcInfo);",
          "9730:     EmitFunctionCall(returnReg, returnReg, iteratorLocation, byteCodeGenerator, funcInfo);",
          "9734:         EmitAwait(returnReg, returnReg, byteCodeGenerator, funcInfo);",
          "9736:     EmitThrowOnNotObject(returnReg, byteCodeGenerator);",
          "9737:     funcInfo->ReleaseTmpRegister(returnReg);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "9773:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "9777:     byteCodeGenerator->StartStatement(loopNode->pnodeLval);",
          "",
          "[Removed Lines]",
          "9774:     loopNode->loopId = loopId;",
          "",
          "[Added Lines]",
          "9817:     byteCodeGenerator->PushJumpCleanupForLoop(loopNode, loopId);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "9782:     EmitForInOfLoopBody(loopNode, loopEntrance, continuePastLoop, byteCodeGenerator, funcInfo, fReturnValue);",
          "9784:     byteCodeGenerator->Writer()->ExitLoop(loopId);",
          "9786:     funcInfo->ReleaseForInLoopLevel(forInLoopLevel);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9827:     byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "9881:     loopNode->itemLocation = funcInfo->AcquireTmpRegister();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9925:     Js::RegSlot nextMethodReg = funcInfo->AcquireTmpRegister();",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "9892:     Js::RegSlot tmpObj = funcInfo->AcquireTmpRegister();",
          "9893:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Obj, tmpObj, loopNode->pnodeObj->location);",
          "9896:     funcInfo->ReleaseTmpRegister(tmpObj);",
          "9899:     Js::ByteCodeLabel finallyLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "9900:     Js::ByteCodeLabel catchLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "",
          "[Removed Lines]",
          "9895:     EmitGetIterator(loopNode->location, tmpObj, byteCodeGenerator, funcInfo, isForAwaitOf);",
          "",
          "[Added Lines]",
          "9940:     if (isForAwaitOf)",
          "9941:         EmitGetAsyncIterator(loopNode->location, tmpObj, byteCodeGenerator, funcInfo);",
          "9942:     else",
          "9943:         EmitGetIterator(loopNode->location, tmpObj, byteCodeGenerator, funcInfo);",
          "9947:     EmitGetObjectMethod(",
          "9948:         nextMethodReg,",
          "9949:         loopNode->location,",
          "9950:         Js::PropertyIds::next,",
          "9951:         byteCodeGenerator,",
          "9952:         funcInfo);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "9903:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "9904:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "9908:     if (isCoroutine)",
          "9909:     {",
          "9910:         byteCodeGenerator->Writer()->BrReg2(Js::OpCode::TryFinallyWithYield, finallyLabel, regException, regOffset);",
          "9914:     }",
          "9915:     else",
          "9916:     {",
          "9917:         byteCodeGenerator->Writer()->Br(Js::OpCode::TryFinally, finallyLabel);",
          "9918:     }",
          "9920:     byteCodeGenerator->Writer()->Br(Js::OpCode::TryCatch, catchLabel);",
          "9928:     byteCodeGenerator->EndStatement(loopNode);",
          "9931:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "9934:     byteCodeGenerator->StartStatement(loopNode->pnodeLval);",
          "9936:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "9937:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "9942:     if (isForAwaitOf)",
          "9947:     Js::RegSlot doneLocation = funcInfo->AcquireTmpRegister();",
          "9951:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, continuePastLoop, doneLocation);",
          "9952:     funcInfo->ReleaseTmpRegister(doneLocation);",
          "9963:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "9964:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "9966:     EmitForInOfLoopBody(loopNode, loopEntrance, continuePastLoop, byteCodeGenerator, funcInfo, fReturnValue);",
          "9968:     byteCodeGenerator->Writer()->ExitLoop(loopId);",
          "9971:         finallyLabel,",
          "9972:         loopNode->location,",
          "9973:         shouldCallReturnFunctionLocation,",
          "",
          "[Removed Lines]",
          "9906:     ByteCodeGenerator::TryScopeRecord tryRecForTryFinally(Js::OpCode::TryFinallyWithYield, finallyLabel);",
          "9911:         tryRecForTryFinally.reg1 = regException;",
          "9912:         tryRecForTryFinally.reg2 = regOffset;",
          "9913:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTryFinally);",
          "9922:     ByteCodeGenerator::TryScopeRecord tryRecForTry(Js::OpCode::TryCatch, catchLabel);",
          "9923:     if (isCoroutine)",
          "9924:     {",
          "9925:         byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTry);",
          "9926:     }",
          "9932:     loopNode->loopId = loopId;",
          "9939:     EmitIteratorNext(loopNode->itemLocation, loopNode->location, Js::Constants::NoRegister, byteCodeGenerator, funcInfo);",
          "9943:     {",
          "9944:         EmitYield(loopNode->itemLocation, loopNode->itemLocation, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator(), true);",
          "9945:     }",
          "9948:     EmitIteratorComplete(doneLocation, loopNode->itemLocation, byteCodeGenerator, funcInfo);",
          "9955:     EmitIteratorValue(loopNode->itemLocation, loopNode->itemLocation, byteCodeGenerator, funcInfo);",
          "9958:     if (isForAwaitOf)",
          "9959:     {",
          "9960:         EmitYield(loopNode->itemLocation, loopNode->itemLocation, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator(), true);",
          "9961:     }",
          "9970:     EmitCatchAndFinallyBlocks(catchLabel,",
          "",
          "[Added Lines]",
          "9965:         byteCodeGenerator->PushJumpCleanupForTry(",
          "9966:             Js::OpCode::TryFinallyWithYield,",
          "9967:             finallyLabel,",
          "9968:             regException,",
          "9969:             regOffset);",
          "9974:         byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryFinally, finallyLabel);",
          "9978:     byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryCatch, catchLabel);",
          "9984:     byteCodeGenerator->PushJumpCleanupForLoop(loopNode, loopId);",
          "9992:     EmitFunctionCall(",
          "9993:         loopNode->itemLocation,",
          "9994:         nextMethodReg,",
          "9995:         loopNode->location,",
          "9996:         byteCodeGenerator,",
          "9997:         funcInfo);",
          "10001:         EmitAwait(loopNode->itemLocation, loopNode->itemLocation, byteCodeGenerator, funcInfo);",
          "10003:     EmitThrowOnNotObject(loopNode->itemLocation, byteCodeGenerator);",
          "10006:     EmitGetObjectProperty(",
          "10007:         doneLocation,",
          "10008:         loopNode->itemLocation,",
          "10009:         Js::PropertyIds::done,",
          "10010:         byteCodeGenerator,",
          "10011:         funcInfo);",
          "10018:     EmitGetObjectProperty(",
          "10019:         loopNode->itemLocation,",
          "10020:         loopNode->itemLocation,",
          "10021:         Js::PropertyIds::value,",
          "10022:         byteCodeGenerator,",
          "10023:         funcInfo);",
          "10030:     byteCodeGenerator->PopJumpCleanup();",
          "10032:     funcInfo->ReleaseTmpRegister(nextMethodReg);",
          "10034:     EmitIteratorCatchAndFinally(catchLabel,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "10001:     }",
          "10002: }",
          "10005: {",
          "10007:     {",
          "10032: #if ENABLE_PROFILE_INFO",
          "10037:             if (Js::DynamicProfileInfo::EnableImplicitCallFlags(funcInfo->GetParsedFunctionBody()))",
          "10042: #endif",
          "10044:         }",
          "10045:     }",
          "10046: }",
          "",
          "[Removed Lines]",
          "10004: void EmitJumpCleanup(ParseNodeStmt *pnode, ParseNode *pnodeTarget, ByteCodeGenerator *byteCodeGenerator, FuncInfo * funcInfo)",
          "10006:     for (; pnode != pnodeTarget; pnode = pnode->pnodeOuter)",
          "10008:         switch (pnode->nop)",
          "10009:         {",
          "10010:         case knopTry:",
          "10011:         case knopCatch:",
          "10012:         case knopFinally:",
          "10016:             byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "10017:             break;",
          "10019:         case knopForAwaitOf:",
          "10020:         case knopForOf:",
          "10021: #if ENABLE_PROFILE_INFO",
          "10022:             if (Js::DynamicProfileInfo::EnableImplicitCallFlags(funcInfo->GetParsedFunctionBody()))",
          "10023:             {",
          "10024:                 byteCodeGenerator->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, pnode->AsParseNodeLoop()->loopId);",
          "10025:             }",
          "10026: #endif",
          "10028:             byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "10029:             byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "10030:             break;",
          "10033:         case knopWhile:",
          "10034:         case knopDoWhile:",
          "10035:         case knopFor:",
          "10036:         case knopForIn:",
          "10038:             {",
          "10039:                 byteCodeGenerator->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, pnode->AsParseNodeLoop()->loopId);",
          "10040:             }",
          "10041:             break;",
          "",
          "[Added Lines]",
          "10068: void ByteCodeGenerator::EmitJumpCleanup(ParseNode* target, FuncInfo* funcInfo)",
          "10070:     for (JumpCleanupList::Iterator iter(this->jumpCleanupList); iter.Next();)",
          "10072:         const JumpCleanupInfo& info = iter.Data();",
          "10074:         if (info.loopNode)",
          "10075:         {",
          "10076:             if (info.loopNode == target)",
          "10077:                 break;",
          "10081:                 this->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, info.loopId);",
          "10083:         }",
          "10084:         else",
          "10085:         {",
          "10086:             Assert(",
          "10087:                 info.tryOp == Js::OpCode::TryCatch ||",
          "10088:                 info.tryOp == Js::OpCode::TryFinally ||",
          "10089:                 info.tryOp == Js::OpCode::TryFinallyWithYield ||",
          "10090:                 info.tryOp == Js::OpCode::ResumeCatch ||",
          "10091:                 info.tryOp == Js::OpCode::ResumeFinally);",
          "10097:             this->Writer()->Empty(Js::OpCode::Leave);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "10379: void ByteCodeGenerator::EmitLeaveOpCodesBeforeYield()",
          "10380: {",
          "10382:     {",
          "10384:         {",
          "10396:         }",
          "10397:     }",
          "10398: }",
          "10400: void ByteCodeGenerator::EmitTryBlockHeadersAfterYield()",
          "10401: {",
          "10403:     {",
          "10405:         {",
          "10419:         }",
          "10420:     }",
          "10421: }",
          "10424: {",
          "10425:     byteCodeGenerator->EmitLeaveOpCodesBeforeYield();",
          "10428:     byteCodeGenerator->EmitTryBlockHeadersAfterYield();",
          "10475:     {",
          "10477:     }",
          "10478: }",
          "10481: {",
          "10529:     {",
          "10538:     }",
          "10543: }",
          "10545: void EmitClass(ParseNodeClass * pnodeClass, ByteCodeGenerator * byteCodeGenerator, FuncInfo * funcInfo)",
          "",
          "[Removed Lines]",
          "10381:     for (TryScopeRecord* node = this->tryScopeRecordsList.Tail(); node != nullptr; node = node->Previous())",
          "10383:         switch (node->op)",
          "10385:         case Js::OpCode::TryFinallyWithYield:",
          "10386:             this->Writer()->Empty(Js::OpCode::LeaveNull);",
          "10387:             break;",
          "10388:         case Js::OpCode::TryCatch:",
          "10389:         case Js::OpCode::ResumeFinally:",
          "10390:         case Js::OpCode::ResumeCatch:",
          "10391:             this->Writer()->Empty(Js::OpCode::Leave);",
          "10392:             break;",
          "10393:         default:",
          "10394:             AssertMsg(false, \"Unexpected OpCode before Yield in the Try-Catch-Finally cache for generator!\");",
          "10395:             break;",
          "10402:     for (TryScopeRecord* node = this->tryScopeRecordsList.Head(); node != nullptr; node = node->Next())",
          "10404:         switch (node->op)",
          "10406:         case Js::OpCode::TryCatch:",
          "10407:             this->Writer()->Br(node->op, node->label);",
          "10408:             break;",
          "10409:         case Js::OpCode::TryFinallyWithYield:",
          "10410:         case Js::OpCode::ResumeFinally:",
          "10411:             this->Writer()->BrReg2(node->op, node->label, node->reg1, node->reg2);",
          "10412:             break;",
          "10413:         case Js::OpCode::ResumeCatch:",
          "10414:             this->Writer()->Empty(node->op);",
          "10415:             break;",
          "10416:         default:",
          "10417:             AssertMsg(false, \"Unexpected OpCode after yield in the Try-Catch-Finally cache for generator!\");",
          "10418:             break;",
          "10423: void EmitDummyYield(ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "10426:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdUndef, funcInfo->yieldRegister);",
          "10427:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Yield, funcInfo->yieldRegister, funcInfo->yieldRegister);",
          "10429:     Js::RegSlot unusedResult = funcInfo->AcquireTmpRegister();",
          "10430:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::ResumeYield, unusedResult, funcInfo->yieldRegister);",
          "10431:     funcInfo->ReleaseTmpRegister(unusedResult);",
          "10432: }",
          "10434: void EmitYield(Js::RegSlot inputLocation, Js::RegSlot resultLocation, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, bool isAsync, bool isAwait, Js::RegSlot yieldStarIterator)",
          "10435: {",
          "10438:     if (yieldStarIterator == Js::Constants::NoRegister && !isAsync)",
          "10439:     {",
          "10440:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::NewScObjectSimple, funcInfo->yieldRegister);",
          "10442:         uint cacheId = funcInfo->FindOrAddInlineCacheId(funcInfo->yieldRegister, Js::PropertyIds::value, false, true);",
          "10443:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::StFld, inputLocation, funcInfo->yieldRegister, cacheId);",
          "10445:         cacheId = funcInfo->FindOrAddInlineCacheId(funcInfo->yieldRegister, Js::PropertyIds::done, false, true);",
          "10446:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::StFld, funcInfo->falseConstantRegister, funcInfo->yieldRegister, cacheId);",
          "10447:     }",
          "10448:     else",
          "10449:     {",
          "10450:         if (yieldStarIterator != Js::Constants::NoRegister)",
          "10451:         {",
          "10452:             if (isAsync)",
          "10453:             {",
          "10454:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::AsyncYieldStar, funcInfo->yieldRegister, inputLocation);",
          "10455:             }",
          "10456:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, funcInfo->yieldRegister, inputLocation );",
          "10457:         }",
          "10458:         else",
          "10459:         {",
          "10460:             byteCodeGenerator->Writer()->Reg2(isAwait ? Js::OpCode::Await : Js::OpCode::AsyncYield, funcInfo->yieldRegister, inputLocation);",
          "10461:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, funcInfo->yieldRegister, funcInfo->undefinedConstantRegister );",
          "10462:         }",
          "10463:     }",
          "10465:     byteCodeGenerator->EmitLeaveOpCodesBeforeYield();",
          "10467:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Yield, funcInfo->yieldRegister, funcInfo->yieldRegister);",
          "10468:     byteCodeGenerator->EmitTryBlockHeadersAfterYield();",
          "10470:     if (yieldStarIterator == Js::Constants::NoRegister)",
          "10471:     {",
          "10472:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::ResumeYield, resultLocation, funcInfo->yieldRegister);",
          "10473:     }",
          "10474:     else",
          "10476:         byteCodeGenerator->Writer()->Reg3(Js::OpCode::ResumeYieldStar, resultLocation, funcInfo->yieldRegister, yieldStarIterator);",
          "10480: void EmitYieldStar(ParseNodeUni* yieldStarNode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "10482:     Js::ByteCodeLabel loopEntrance = byteCodeGenerator->Writer()->DefineLabel();",
          "10483:     Js::ByteCodeLabel continuePastLoop = byteCodeGenerator->Writer()->DefineLabel();",
          "10485:     Js::RegSlot isReturn = funcInfo->AcquireTmpRegister();",
          "10486:     Js::RegSlot iteratorLocation = funcInfo->AcquireTmpRegister();",
          "10489:     Emit(yieldStarNode->pnode1, byteCodeGenerator, funcInfo, false);",
          "10491:     EmitGetIterator(iteratorLocation, yieldStarNode->pnode1->location, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator());",
          "10492:     funcInfo->ReleaseLoc(yieldStarNode->pnode1);",
          "10495:     EmitIteratorNext(yieldStarNode->location, iteratorLocation, funcInfo->undefinedConstantRegister, byteCodeGenerator, funcInfo);",
          "10497:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "10503:     if (funcInfo->IsAsyncGenerator())",
          "10504:     {",
          "10505:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::AsyncYieldIsReturn, isReturn, funcInfo->yieldRegister);",
          "10506:         EmitYield(yieldStarNode->location, yieldStarNode->location, byteCodeGenerator, funcInfo, true, true);",
          "10507:         Js::ByteCodeLabel skipThrow = byteCodeGenerator->Writer()->DefineLabel();",
          "10508:         byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrOnObject_A, skipThrow, iteratorLocation);",
          "10509:         byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_NeedObject));",
          "10510:         byteCodeGenerator->Writer()->MarkLabel(skipThrow);",
          "10511:     }",
          "10513:     Js::RegSlot doneLocation = funcInfo->AcquireTmpRegister();",
          "10514:     EmitIteratorComplete(doneLocation, yieldStarNode->location, byteCodeGenerator, funcInfo);",
          "10517:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, continuePastLoop, doneLocation);",
          "10518:     funcInfo->ReleaseTmpRegister(doneLocation);",
          "10520:     EmitYield(yieldStarNode->location, yieldStarNode->location, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator(), false, iteratorLocation);",
          "10522:     funcInfo->ReleaseTmpRegister(iteratorLocation);",
          "10524:     byteCodeGenerator->Writer()->Br(loopEntrance);",
          "10525:     byteCodeGenerator->Writer()->MarkLabel(continuePastLoop);",
          "10526:     byteCodeGenerator->Writer()->ExitLoop(loopId);",
          "10528:     if (funcInfo->IsAsyncGenerator())",
          "10530:         Js::ByteCodeLabel notReturn = byteCodeGenerator->Writer()->DefineLabel();",
          "10531:         byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrFalse_A, notReturn, isReturn);",
          "10532:         EmitIteratorValue(yieldStarNode->location, yieldStarNode->location, byteCodeGenerator, funcInfo);",
          "10533:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, ByteCodeGenerator::ReturnRegister, yieldStarNode->location);",
          "10534:         byteCodeGenerator->EmitLeaveOpCodesBeforeYield();",
          "10535:         byteCodeGenerator->Writer()->Br(funcInfo->singleExit);",
          "10537:         byteCodeGenerator->Writer()->MarkLabel(notReturn);",
          "10539:     funcInfo->ReleaseTmpRegister(isReturn);",
          "10542:     EmitIteratorValue(yieldStarNode->location, yieldStarNode->location, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "10435:     for (JumpCleanupList::Iterator iter(this->jumpCleanupList); iter.Next();)",
          "10437:         const JumpCleanupInfo& info = iter.Data();",
          "10438:         switch (info.tryOp)",
          "10440:             case Js::OpCode::TryFinallyWithYield:",
          "10441:                 this->Writer()->Empty(Js::OpCode::LeaveNull);",
          "10442:                 break;",
          "10443:             case Js::OpCode::TryCatch:",
          "10444:             case Js::OpCode::ResumeFinally:",
          "10445:             case Js::OpCode::ResumeCatch:",
          "10446:                 this->Writer()->Empty(Js::OpCode::Leave);",
          "10447:                 break;",
          "10448:             case Js::OpCode::Nop:",
          "10449:                 break;",
          "10450:             default:",
          "10451:                 AssertMsg(false, \"Unexpected OpCode in jumpCleanupList\");",
          "10452:                 break;",
          "10459:     for (JumpCleanupList::Iterator iter(this->jumpCleanupList); iter.Prev();)",
          "10461:         const JumpCleanupInfo& info = iter.Data();",
          "10462:         switch (info.tryOp)",
          "10464:             case Js::OpCode::TryCatch:",
          "10465:                 this->Writer()->Br(info.tryOp, info.label);",
          "10466:                 break;",
          "10467:             case Js::OpCode::TryFinallyWithYield:",
          "10468:             case Js::OpCode::ResumeFinally:",
          "10469:                 this->Writer()->BrReg2(info.tryOp, info.label, info.regSlot1, info.regSlot2);",
          "10470:                 break;",
          "10471:             case Js::OpCode::ResumeCatch:",
          "10472:                 this->Writer()->Empty(info.tryOp);",
          "10473:                 break;",
          "10474:             case Js::OpCode::Nop:",
          "10475:                 break;",
          "10476:             default:",
          "10477:                 AssertMsg(false, \"Unexpected OpCode in jumpCleanupList\");",
          "10478:                 break;",
          "10483: void EmitYieldAndResume(",
          "10484:     Js::RegSlot resumeValueReg,",
          "10485:     Js::RegSlot inputReg,",
          "10486:     Js::ByteCodeLabel resumeNormalLabel,",
          "10487:     Js::ByteCodeLabel resumeThrowLabel,",
          "10488:     ByteCodeGenerator* byteCodeGenerator,",
          "10489:     FuncInfo* funcInfo)",
          "10496:     auto* writer = byteCodeGenerator->Writer();",
          "10498:     if (inputReg != funcInfo->yieldRegister)",
          "10499:         writer->Reg2(Js::OpCode::Ld_A, funcInfo->yieldRegister, inputReg);",
          "10503:     writer->Reg2(Js::OpCode::Yield, funcInfo->yieldRegister, funcInfo->yieldRegister);",
          "10506:     Js::RegSlot resumeKindReg = funcInfo->AcquireTmpRegister();",
          "10509:     EmitGetObjectProperty(",
          "10510:         resumeKindReg,",
          "10511:         funcInfo->yieldRegister,",
          "10512:         Js::PropertyIds::kind,",
          "10513:         byteCodeGenerator,",
          "10514:         funcInfo);",
          "10517:     EmitGetObjectProperty(",
          "10518:         resumeValueReg,",
          "10519:         funcInfo->yieldRegister,",
          "10520:         Js::PropertyIds::value,",
          "10521:         byteCodeGenerator,",
          "10522:         funcInfo);",
          "10524:     Js::RegSlot normalConst = funcInfo->constantToRegister.Lookup(",
          "10525:         (uint)Js::ResumeYieldKind::Normal,",
          "10526:         Js::Constants::NoRegister);",
          "10528:     Assert(normalConst != Js::Constants::NoRegister);",
          "10531:     writer->BrReg2(Js::OpCode::BrSrEq_A, resumeNormalLabel, resumeKindReg, normalConst);",
          "10533:     if (resumeThrowLabel != Js::Constants::NoByteCodeLabel)",
          "10535:         Js::RegSlot throwConst = funcInfo->constantToRegister.Lookup(",
          "10536:             (uint)Js::ResumeYieldKind::Throw,",
          "10537:             Js::Constants::NoRegister);",
          "10539:         Assert(throwConst != Js::Constants::NoRegister);",
          "10542:         writer->BrReg2(Js::OpCode::BrSrEq_A, resumeThrowLabel, resumeKindReg, throwConst);",
          "10545:     funcInfo->ReleaseTmpRegister(resumeKindReg);",
          "10548: void EmitReturnFromYield(",
          "10549:     Js::RegSlot resultReg,",
          "10550:     ByteCodeGenerator* byteCodeGenerator,",
          "10551:     FuncInfo* funcInfo)",
          "10553:     auto* writer = byteCodeGenerator->Writer();",
          "10554:     writer->Reg2(Js::OpCode::Ld_A, ByteCodeGenerator::ReturnRegister, resultReg);",
          "10555:     byteCodeGenerator->EmitJumpCleanup(nullptr, funcInfo);",
          "10556:     writer->Br(funcInfo->singleExit);",
          "10557: }",
          "10559: void EmitStartupYield(ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "10560: {",
          "10567:     Assert(!byteCodeGenerator->HasJumpCleanup());",
          "10568:     auto* writer = byteCodeGenerator->Writer();",
          "10569:     writer->Reg1(Js::OpCode::LdUndef, funcInfo->yieldRegister);",
          "10570:     writer->Reg2(Js::OpCode::Yield, funcInfo->yieldRegister, funcInfo->yieldRegister);",
          "10571: }",
          "10573: void EmitAwait(",
          "10574:     Js::RegSlot resultReg,",
          "10575:     Js::RegSlot inputReg,",
          "10576:     ByteCodeGenerator* byteCodeGenerator,",
          "10577:     FuncInfo* funcInfo)",
          "10578: {",
          "10582:     auto* writer = byteCodeGenerator->Writer();",
          "10583:     writer->Reg2(Js::OpCode::NewAwaitObject, funcInfo->yieldRegister, inputReg);",
          "10585:     Js::ByteCodeLabel resumeNormal = writer->DefineLabel();",
          "10587:     EmitYieldAndResume(",
          "10588:         resultReg,",
          "10589:         funcInfo->yieldRegister,",
          "10590:         resumeNormal,",
          "10591:         Js::Constants::NoByteCodeLabel,",
          "10592:         byteCodeGenerator,",
          "10593:         funcInfo);",
          "10596:     writer->Reg1(Js::OpCode::Throw, resultReg);",
          "10599:     writer->MarkLabel(resumeNormal);",
          "10600: }",
          "10602: void EmitCreateYieldResult(",
          "10603:     Js::RegSlot resultReg,",
          "10604:     Js::RegSlot inputReg,",
          "10605:     ByteCodeGenerator* byteCodeGenerator,",
          "10606:     FuncInfo* funcInfo)",
          "10607: {",
          "10608:     Assert(resultReg != inputReg);",
          "10610:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::NewScObjectSimple, resultReg);",
          "10612:     byteCodeGenerator->Writer()->PatchableProperty(",
          "10613:         Js::OpCode::StFld,",
          "10614:         inputReg,",
          "10615:         resultReg,",
          "10616:         funcInfo->FindOrAddInlineCacheId(resultReg, Js::PropertyIds::value, false, true));",
          "10618:     byteCodeGenerator->Writer()->PatchableProperty(",
          "10619:         Js::OpCode::StFld,",
          "10620:         funcInfo->falseConstantRegister,",
          "10621:         resultReg,",
          "10622:         funcInfo->FindOrAddInlineCacheId(resultReg, Js::PropertyIds::done, false, true));",
          "10623: }",
          "10625: void EmitYield(",
          "10626:     Js::RegSlot resultReg,",
          "10627:     Js::RegSlot inputReg,",
          "10628:     ByteCodeGenerator* byteCodeGenerator,",
          "10629:     FuncInfo* funcInfo)",
          "10630: {",
          "10631:     auto* writer = byteCodeGenerator->Writer();",
          "10632:     Js::RegSlot yieldReg = funcInfo->yieldRegister;",
          "10634:     EmitCreateYieldResult(yieldReg, inputReg, byteCodeGenerator, funcInfo);",
          "10636:     Js::ByteCodeLabel resumeNormal = writer->DefineLabel();",
          "10637:     Js::ByteCodeLabel resumeThrow = writer->DefineLabel();",
          "10639:     EmitYieldAndResume(",
          "10640:         resultReg,",
          "10641:         yieldReg,",
          "10642:         resumeNormal,",
          "10643:         resumeThrow,",
          "10644:         byteCodeGenerator,",
          "10645:         funcInfo);",
          "10648:     EmitReturnFromYield(resultReg, byteCodeGenerator, funcInfo);",
          "10651:     writer->MarkLabel(resumeThrow);",
          "10652:     writer->Reg1(Js::OpCode::Throw, resultReg);",
          "10655:     writer->MarkLabel(resumeNormal);",
          "10656: }",
          "10658: void EmitYieldStar(",
          "10659:     ParseNodeUni* yieldStarNode,",
          "10660:     ByteCodeGenerator* byteCodeGenerator,",
          "10661:     FuncInfo* funcInfo)",
          "10662: {",
          "10663:     bool isAsync = funcInfo->IsAsyncGenerator();",
          "10664:     auto* writer = byteCodeGenerator->Writer();",
          "10666:     Js::ByteCodeLabel loopEntrance = writer->DefineLabel();",
          "10667:     Js::ByteCodeLabel continueLoop = writer->DefineLabel();",
          "10668:     Js::ByteCodeLabel continuePastLoop = writer->DefineLabel();",
          "10669:     Js::ByteCodeLabel finishReturn = writer->DefineLabel();",
          "10670:     Js::ByteCodeLabel finishNormal = writer->DefineLabel();",
          "10672:     Js::RegSlot yieldStarReg = yieldStarNode->location;",
          "10676:     Js::RegSlot shouldReturnReg = funcInfo->AcquireTmpRegister();",
          "10677:     writer->Reg1(Js::OpCode::LdFalse, shouldReturnReg);",
          "10680:     Js::RegSlot iteratorReg = funcInfo->AcquireTmpRegister();",
          "10681:     ParseNode* operand = yieldStarNode->pnode1;",
          "10682:     Emit(operand, byteCodeGenerator, funcInfo, false);",
          "10684:     if (isAsync)",
          "10685:         EmitGetAsyncIterator(iteratorReg, operand->location, byteCodeGenerator, funcInfo);",
          "10686:     else",
          "10687:         EmitGetIterator(iteratorReg, operand->location, byteCodeGenerator, funcInfo);",
          "10689:     funcInfo->ReleaseLoc(operand);",
          "10692:     Js::RegSlot nextMethodReg = funcInfo->AcquireTmpRegister();",
          "10693:     EmitGetObjectMethod(",
          "10694:         nextMethodReg,",
          "10695:         iteratorReg,",
          "10696:         Js::PropertyIds::next,",
          "10697:         byteCodeGenerator,",
          "10698:         funcInfo);",
          "10701:     EmitFunctionCall(",
          "10702:         yieldStarReg,",
          "10703:         nextMethodReg,",
          "10704:         iteratorReg,",
          "10705:         funcInfo->undefinedConstantRegister,",
          "10706:         byteCodeGenerator,",
          "10707:         funcInfo);",
          "10710:     uint loopId = writer->EnterLoop(loopEntrance);",
          "10713:     if (isAsync)",
          "10714:         EmitAwait(yieldStarReg, yieldStarReg, byteCodeGenerator, funcInfo);",
          "10716:     EmitThrowOnNotObject(yieldStarReg, byteCodeGenerator);",
          "10719:     Js::RegSlot doneReg = funcInfo->AcquireTmpRegister();",
          "10720:     EmitGetObjectProperty(",
          "10721:         doneReg,",
          "10722:         yieldStarReg,",
          "10723:         Js::PropertyIds::done,",
          "10724:         byteCodeGenerator,",
          "10725:         funcInfo);",
          "10728:     writer->BrReg1(Js::OpCode::BrTrue_A, continuePastLoop, doneReg);",
          "10729:     funcInfo->ReleaseTmpRegister(doneReg);",
          "10732:     writer->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldReturnReg);",
          "10734:     Js::ByteCodeLabel resumeNormal = writer->DefineLabel();",
          "10735:     Js::ByteCodeLabel resumeThrow = writer->DefineLabel();",
          "10736:     Js::RegSlot resumeValueReg = funcInfo->AcquireTmpRegister();",
          "10738:     if (isAsync)",
          "10743:         Js::RegSlot valueReg = funcInfo->AcquireTmpRegister();",
          "10745:         EmitGetObjectProperty(",
          "10746:             valueReg,",
          "10747:             yieldStarReg,",
          "10748:             Js::PropertyIds::value,",
          "10749:             byteCodeGenerator,",
          "10750:             funcInfo);",
          "10752:         EmitCreateYieldResult(yieldStarReg, valueReg, byteCodeGenerator, funcInfo);",
          "10754:         funcInfo->ReleaseTmpRegister(valueReg);",
          "10758:     EmitYieldAndResume(",
          "10759:         resumeValueReg,",
          "10760:         yieldStarReg,",
          "10761:         resumeNormal,",
          "10762:         resumeThrow,",
          "10763:         byteCodeGenerator,",
          "10764:         funcInfo);",
          "10767:     writer->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldReturnReg);",
          "10769:     Js::RegSlot returnMethodReg = funcInfo->AcquireTmpRegister();",
          "10772:     Js::ByteCodeLabel noReturnMethod = writer->DefineLabel();",
          "10773:     EmitGetOptionalObjectMethod(",
          "10774:         returnMethodReg,",
          "10775:         iteratorReg,",
          "10776:         Js::PropertyIds::return_,",
          "10777:         noReturnMethod,",
          "10778:         byteCodeGenerator,",
          "10779:         funcInfo);",
          "10782:     EmitFunctionCall(",
          "10783:         yieldStarReg,",
          "10784:         returnMethodReg,",
          "10785:         iteratorReg,",
          "10786:         resumeValueReg,",
          "10787:         byteCodeGenerator,",
          "10788:         funcInfo);",
          "10790:     funcInfo->ReleaseTmpRegister(returnMethodReg);",
          "10791:     writer->Br(continueLoop);",
          "10794:     writer->MarkLabel(noReturnMethod);",
          "10796:     if (isAsync)",
          "10797:         EmitAwait(resumeValueReg, resumeValueReg, byteCodeGenerator, funcInfo);",
          "10799:     writer->Reg2(Js::OpCode::Ld_A, yieldStarReg, resumeValueReg);",
          "10800:     writer->Br(finishReturn);",
          "10803:     writer->MarkLabel(resumeThrow);",
          "10805:     Js::RegSlot throwMethodReg = funcInfo->AcquireTmpRegister();",
          "10806:     Js::ByteCodeLabel noThrowMethod = writer->DefineLabel();",
          "10809:     EmitGetOptionalObjectMethod(",
          "10810:         throwMethodReg,",
          "10811:         iteratorReg,",
          "10812:         Js::PropertyIds::throw_,",
          "10813:         noThrowMethod,",
          "10814:         byteCodeGenerator,",
          "10815:         funcInfo);",
          "10818:     EmitFunctionCall(",
          "10819:         yieldStarReg,",
          "10820:         throwMethodReg,",
          "10821:         iteratorReg,",
          "10822:         resumeValueReg,",
          "10823:         byteCodeGenerator,",
          "10824:         funcInfo);",
          "10826:     funcInfo->ReleaseTmpRegister(throwMethodReg);",
          "10827:     writer->Br(continueLoop);",
          "10830:     writer->MarkLabel(noThrowMethod);",
          "10831:     EmitIteratorClose(iteratorReg, byteCodeGenerator, funcInfo, isAsync);",
          "10832:     byteCodeGenerator->Writer()->W1(",
          "10833:         Js::OpCode::RuntimeTypeError,",
          "10834:         SCODE_CODE(JSERR_YieldStarThrowMissing));",
          "10837:     writer->MarkLabel(resumeNormal);",
          "10838:     EmitFunctionCall(",
          "10839:         yieldStarReg,",
          "10840:         nextMethodReg,",
          "10841:         iteratorReg,",
          "10842:         resumeValueReg,",
          "10843:         byteCodeGenerator,",
          "10844:         funcInfo);",
          "10846:     funcInfo->ReleaseTmpRegister(resumeValueReg);",
          "10847:     funcInfo->ReleaseTmpRegister(nextMethodReg);",
          "10848:     funcInfo->ReleaseTmpRegister(iteratorReg);",
          "10851:     writer->MarkLabel(continueLoop);",
          "10852:     writer->Br(loopEntrance);",
          "10853:     writer->MarkLabel(continuePastLoop);",
          "10854:     writer->ExitLoop(loopId);",
          "10857:     EmitGetObjectProperty(",
          "10858:         yieldStarReg,",
          "10859:         yieldStarReg,",
          "10860:         Js::PropertyIds::value,",
          "10861:         byteCodeGenerator,",
          "10862:         funcInfo);",
          "10864:     writer->BrReg1(Js::OpCode::BrFalse_A, finishNormal, shouldReturnReg);",
          "10865:     funcInfo->ReleaseTmpRegister(shouldReturnReg);",
          "10868:     writer->MarkLabel(finishReturn);",
          "10869:     EmitReturnFromYield(yieldStarReg, byteCodeGenerator, funcInfo);",
          "10872:     writer->MarkLabel(finishNormal);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "11747:         ParseNodeReturn * pnodeReturn = pnode->AsParseNodeReturn();",
          "11748:         byteCodeGenerator->StartStatement(pnodeReturn);",
          "11749:         if (pnodeReturn->pnodeExpr != nullptr)",
          "11751:             if (pnodeReturn->pnodeExpr->location == Js::Constants::NoRegister)",
          "11752:             {",
          "11754:                 pnodeReturn->pnodeExpr->location = ByteCodeGenerator::ReturnRegister;",
          "11755:             }",
          "11756:             Emit(pnodeReturn->pnodeExpr, byteCodeGenerator, funcInfo, fReturnValue);",
          "11758:             {",
          "11759:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, ByteCodeGenerator::ReturnRegister, pnodeReturn->pnodeExpr->location);",
          "11760:             }",
          "",
          "[Removed Lines]",
          "11750:             {",
          "11757:             if (pnodeReturn->pnodeExpr->location != ByteCodeGenerator::ReturnRegister)",
          "",
          "[Added Lines]",
          "12080:         {",
          "12087:             if (funcInfo->IsAsyncGenerator())",
          "12088:             {",
          "12089:                 EmitAwait(",
          "12090:                     ByteCodeGenerator::ReturnRegister,",
          "12091:                     pnodeReturn->pnodeExpr->location,",
          "12092:                     byteCodeGenerator,",
          "12093:                     funcInfo);",
          "12094:             }",
          "12095:             else if (pnodeReturn->pnodeExpr->location != ByteCodeGenerator::ReturnRegister)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "11796:         }",
          "11797:         if (pnodeReturn->grfnop & fnopCleanup)",
          "11798:         {",
          "11800:         }",
          "11802:         byteCodeGenerator->Writer()->Br(funcInfo->singleExit);",
          "",
          "[Removed Lines]",
          "11799:             EmitJumpCleanup(pnodeReturn, nullptr, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "12137:             byteCodeGenerator->EmitJumpCleanup(nullptr, funcInfo);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "11875:         byteCodeGenerator->StartStatement(pnodeJump);",
          "11876:         if (pnodeJump->grfnop & fnopCleanup)",
          "11877:         {",
          "11879:         }",
          "11880:         byteCodeGenerator->Writer()->Br(pnodeJump->pnodeTarget->breakLabel);",
          "11881:         if (pnodeJump->emitLabels)",
          "",
          "[Removed Lines]",
          "11878:             EmitJumpCleanup(pnodeJump, pnodeJump->pnodeTarget, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "12216:             byteCodeGenerator->EmitJumpCleanup(pnodeJump->pnodeTarget, funcInfo);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "11892:         byteCodeGenerator->StartStatement(pnodeJump);",
          "11893:         if (pnodeJump->grfnop & fnopCleanup)",
          "11894:         {",
          "11896:         }",
          "11897:         byteCodeGenerator->Writer()->Br(pnodeJump->pnodeTarget->continueLabel);",
          "11898:         byteCodeGenerator->EndStatement(pnodeJump);",
          "",
          "[Removed Lines]",
          "11895:             EmitJumpCleanup(pnodeJump, pnodeJump->pnodeTarget, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "12233:             byteCodeGenerator->EmitJumpCleanup(pnodeJump->pnodeTarget, funcInfo);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "11986:         byteCodeGenerator->Writer()->Br(Js::OpCode::TryCatch, catchLabel);",
          "11994:         Emit(pnodeTry->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "12002:         byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(/* isEnterBlock = */ false);",
          "",
          "[Removed Lines]",
          "11988:         ByteCodeGenerator::TryScopeRecord tryRecForTry(Js::OpCode::TryCatch, catchLabel);",
          "11989:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "11990:         {",
          "11991:             byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTry);",
          "11992:         }",
          "11995:         funcInfo->ReleaseLoc(pnodeTry->pnodeBody);",
          "11997:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "11998:         {",
          "11999:             byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "12000:         }",
          "",
          "[Added Lines]",
          "12326:         byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryCatch, catchLabel);",
          "12328:         byteCodeGenerator->PopJumpCleanup();",
          "12330:         funcInfo->ReleaseLoc(pnodeTry->pnodeBody);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "12117:             byteCodeGenerator->StartStatement(pnodeCatch);",
          "12118:             Assert(pnode1->IsPattern());",
          "12125:             EmitAssignment(nullptr, pnode1, location, byteCodeGenerator, funcInfo);",
          "12126:             byteCodeGenerator->EndStatement(pnodeCatch);",
          "",
          "[Removed Lines]",
          "12120:             if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12121:             {",
          "12122:                 byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForCatch);",
          "12123:             }",
          "",
          "[Added Lines]",
          "12450:             byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::ResumeCatch);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "12142:             byteCodeGenerator->StartStatement(pnodeCatch);",
          "12143:             byteCodeGenerator->Writer()->Empty(Js::OpCode::Nop);",
          "12144:             byteCodeGenerator->EndStatement(pnodeCatch);",
          "12149:         }",
          "12151:         Emit(pnodeCatch->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "12158:         byteCodeGenerator->PopScope();",
          "12159:         byteCodeGenerator->RecordEndScopeObject(pnodeTryCatch);",
          "",
          "[Removed Lines]",
          "12145:             if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12146:             {",
          "12147:                 byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForCatch);",
          "12148:             }",
          "12153:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12154:         {",
          "12155:             byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "12156:         }",
          "",
          "[Added Lines]",
          "12473:             byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::ResumeCatch);",
          "12478:         byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "12196:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12197:         {",
          "12198:             regException = funcInfo->AcquireTmpRegister();",
          "12199:             regOffset = funcInfo->AcquireTmpRegister();",
          "12200:             byteCodeGenerator->Writer()->BrReg2(Js::OpCode::TryFinallyWithYield, finallyLabel, regException, regOffset);",
          "12204:         }",
          "12205:         else",
          "12206:         {",
          "12207:             byteCodeGenerator->Writer()->Br(Js::OpCode::TryFinally, finallyLabel);",
          "12208:         }",
          "",
          "[Removed Lines]",
          "12195:         ByteCodeGenerator::TryScopeRecord tryRecForTry(Js::OpCode::TryFinallyWithYield, finallyLabel);",
          "12201:             tryRecForTry.reg1 = regException;",
          "12202:             tryRecForTry.reg2 = regOffset;",
          "12203:             byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTry);",
          "",
          "[Added Lines]",
          "12521:             byteCodeGenerator->PushJumpCleanupForTry(",
          "12522:                 Js::OpCode::TryFinallyWithYield,",
          "12523:                 finallyLabel,",
          "12524:                 regException,",
          "12525:                 regOffset);",
          "12530:             byteCodeGenerator->PushJumpCleanupForTry(Js::OpCode::TryFinally, finallyLabel);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "12213:         Emit(pnodeTry->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "12214:         funcInfo->ReleaseLoc(pnodeTry->pnodeBody);",
          "12221:         byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "12222:         byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(false);",
          "",
          "[Removed Lines]",
          "12216:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12217:         {",
          "12218:             byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "12219:         }",
          "",
          "[Added Lines]",
          "12539:         byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "12230:         byteCodeGenerator->Writer()->MarkLabel(finallyLabel);",
          "12231:         byteCodeGenerator->Writer()->Empty(Js::OpCode::Finally);",
          "12239:         Emit(pnodeFinally->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "12240:         funcInfo->ReleaseLoc(pnodeFinally->pnodeBody);",
          "12242:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12243:         {",
          "12245:             funcInfo->ReleaseTmpRegister(regOffset);",
          "12246:             funcInfo->ReleaseTmpRegister(regException);",
          "12247:         }",
          "12249:         funcInfo->EndRecordingOutArgs(1);",
          "12251:         byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(false);",
          "",
          "[Removed Lines]",
          "12233:         ByteCodeGenerator::TryScopeRecord tryRecForFinally(Js::OpCode::ResumeFinally, finallyLabel, regException, regOffset);",
          "12234:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "12235:         {",
          "12236:             byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForFinally);",
          "12237:         }",
          "12244:             byteCodeGenerator->tryScopeRecordsList.UnlinkFromEnd();",
          "",
          "[Added Lines]",
          "12552:         byteCodeGenerator->PushJumpCleanupForTry(",
          "12553:             Js::OpCode::ResumeFinally,",
          "12554:             finallyLabel,",
          "12555:             regException,",
          "12556:             regOffset);",
          "12567:         byteCodeGenerator->PopJumpCleanup();",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "12265:     case knopYieldLeaf:",
          "12266:         byteCodeGenerator->StartStatement(pnode);",
          "12267:         funcInfo->AcquireLoc(pnode);",
          "12269:         byteCodeGenerator->EndStatement(pnode);",
          "12270:         break;",
          "12271:     case knopAwait:",
          "12272:         byteCodeGenerator->StartStatement(pnode);",
          "12273:         funcInfo->AcquireLoc(pnode);",
          "12274:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "12276:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "12277:         byteCodeGenerator->EndStatement(pnode);",
          "12278:         break;",
          "",
          "[Removed Lines]",
          "12268:         EmitYield(funcInfo->undefinedConstantRegister, pnode->location, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator());",
          "12275:         EmitYield(pnode->AsParseNodeUni()->pnode1->location, pnode->location, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator(), true);",
          "",
          "[Added Lines]",
          "12588:         EmitYield(pnode->location, funcInfo->undefinedConstantRegister, byteCodeGenerator, funcInfo);",
          "12595:         EmitAwait(pnode->location, pnode->AsParseNodeUni()->pnode1->location, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "12280:         byteCodeGenerator->StartStatement(pnode);",
          "12281:         funcInfo->AcquireLoc(pnode);",
          "12282:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "12284:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "12285:         byteCodeGenerator->EndStatement(pnode);",
          "12286:         break;",
          "",
          "[Removed Lines]",
          "12283:         EmitYield(pnode->AsParseNodeUni()->pnode1->location, pnode->location, byteCodeGenerator, funcInfo, funcInfo->IsAsyncGenerator());",
          "",
          "[Added Lines]",
          "12603:         EmitYield(pnode->location, pnode->AsParseNodeUni()->pnode1->location, byteCodeGenerator, funcInfo);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeGenerator.cpp||lib/Runtime/ByteCode/ByteCodeGenerator.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeGenerator.cpp -> lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:     scriptContext(scriptContext),",
          "727:     flags(0),",
          "728:     funcInfoStack(nullptr),",
          "729:     pRootFunc(nullptr),",
          "730:     pCurrentFunction(nullptr),",
          "731:     globalScope(nullptr),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:     jumpCleanupList(nullptr),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2208:     this->funcInfosToFinalize = nullptr;",
          "2210:     this->funcInfoStack = Anew(alloc, SList<FuncInfo*>, alloc);",
          "2211: }",
          "2213: HRESULT GenerateByteCode(__in ParseNodeProg *pnode, __in uint32 grfscr, __in Js::ScriptContext* scriptContext, __inout Js::ParseableFunctionInfo ** ppRootFunc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2212:     this->jumpCleanupList = Anew(alloc, JumpCleanupList, alloc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4735:     };",
          "4736: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4740: void AssignYieldResumeRegisters(ByteCodeGenerator* byteCodeGenerator)",
          "4741: {",
          "4744:     byteCodeGenerator->EnregisterConstant((uint)Js::ResumeYieldKind::Normal);",
          "4745:     byteCodeGenerator->EnregisterConstant((uint)Js::ResumeYieldKind::Throw);",
          "4746: }",
          "4748: void AssignAwaitRegisters(ByteCodeGenerator* byteCodeGenerator)",
          "4749: {",
          "4752:     byteCodeGenerator->EnregisterConstant((uint)Js::ResumeYieldKind::Normal);",
          "4753: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4919:         CheckMaybeEscapedUse(pnode->AsParseNodeForInOrForOf()->pnodeObj, byteCodeGenerator);",
          "4920:         break;",
          "4923:     case knopForAwaitOf:",
          "4924:         {",
          "4925:             ParseNodeForInOrForOf* pnodeForOf = pnode->AsParseNodeForInOrForOf();",
          "4926:             byteCodeGenerator->AssignNullConstRegister();",
          "",
          "[Removed Lines]",
          "4922:     case knopForOf:",
          "",
          "[Added Lines]",
          "4940:         AssignAwaitRegisters(byteCodeGenerator);",
          "4942:     case knopForOf:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5160:         break;",
          "5161:     case knopReturn:",
          "5162:         {",
          "5163:             ParseNode *pnodeExpr = pnode->AsParseNodeReturn()->pnodeExpr;",
          "5164:             CheckMaybeEscapedUse(pnodeExpr, byteCodeGenerator);",
          "5165:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5182:             if (byteCodeGenerator->TopFuncInfo()->IsAsyncGenerator())",
          "5183:             {",
          "5184:                 AssignAwaitRegisters(byteCodeGenerator);",
          "5185:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5201:             break;",
          "5202:         }",
          "5203:     case knopYieldLeaf:",
          "5204:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "5205:         break;",
          "5206:     case knopYield:",
          "5207:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "5208:         break;",
          "5209:     case knopYieldStar:",
          "5211:         pnode->location = byteCodeGenerator->NextVarRegister();",
          "5213:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "5214:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "5215:         break;",
          "5216:     }",
          "",
          "[Removed Lines]",
          "5212:         byteCodeGenerator->AssignNullConstRegister();",
          "",
          "[Added Lines]",
          "5229:         byteCodeGenerator->AssignFalseConstRegister();",
          "5231:         AssignYieldResumeRegisters(byteCodeGenerator);",
          "5232:         break;",
          "5233:     case knopAwait:",
          "5234:         AssignAwaitRegisters(byteCodeGenerator);",
          "5235:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "5239:         byteCodeGenerator->AssignFalseConstRegister();",
          "5240:         AssignYieldResumeRegisters(byteCodeGenerator);",
          "5247:         byteCodeGenerator->AssignTrueConstRegister();",
          "5248:         byteCodeGenerator->AssignFalseConstRegister();",
          "5249:         AssignYieldResumeRegisters(byteCodeGenerator);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeGenerator.h||lib/Runtime/ByteCode/ByteCodeGenerator.h": [
          "File: lib/Runtime/ByteCode/ByteCodeGenerator.h -> lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #endif",
          "13:     Invalid,",
          "14:     Local,",
          "15:     Env,",
          "16:     LocalWith,",
          "17:     EnvWith",
          "18: };",
          "20:     DynamicLoadRecord();",
          "21:     DynamicLoadKind kind;",
          "22:     Js::ByteCodeLabel label;",
          "24:         uint32 index;",
          "25:         Js::RegSlot instance;",
          "26:     };",
          "27: };",
          "29: class ByteCodeGenerator",
          "30: {",
          "31: private:",
          "",
          "[Removed Lines]",
          "12: enum DynamicLoadKind {",
          "19: struct DynamicLoadRecord {",
          "23:     union {",
          "",
          "[Added Lines]",
          "12: enum DynamicLoadKind",
          "13: {",
          "21: struct DynamicLoadRecord",
          "22: {",
          "26:     union",
          "27:     {",
          "33: struct JumpCleanupInfo",
          "34: {",
          "36:     ParseNode* loopNode;",
          "37:     uint loopId;",
          "40:     Js::OpCode tryOp;",
          "41:     Js::ByteCodeLabel label;",
          "42:     Js::RegSlot regSlot1;",
          "43:     Js::RegSlot regSlot2;",
          "44: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     SList<FuncInfo*> * funcInfosToFinalize;",
          "48:     int32 maxAstSize;",
          "49:     uint16 envDepth;",
          "50:     uint sourceIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     using JumpCleanupList = DList<JumpCleanupInfo, ArenaAllocator>;",
          "66:     JumpCleanupList* jumpCleanupList;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     Symbol *AddSymbolToFunctionScope(const char16 *key, int keyLength, ParseNode *varDecl, SymbolType symbolType);",
          "298:     void FuncEscapes(Scope *scope);",
          "299:     void EmitTopLevelStatement(ParseNode *stmt, FuncInfo *funcInfo, BOOL fReturnValue);",
          "301:     void DefineFunctions(FuncInfo *funcInfoParent);",
          "302:     Js::RegSlot DefineOneFunction(ParseNodeFnc *pnodeFnc, FuncInfo *funcInfoParent, bool generateAssignment=true, Js::RegSlot regEnv = Js::Constants::NoRegister, Js::RegSlot frameDisplayTemp = Js::Constants::NoRegister);",
          "303:     void DefineCachedFunctions(FuncInfo *funcInfoParent);",
          "",
          "[Removed Lines]",
          "300:     void EmitInvertedLoop(ParseNodeLoop* outerLoop,ParseNodeFor* invertedLoop,FuncInfo* funcInfo);",
          "",
          "[Added Lines]",
          "320:     void EmitInvertedLoop(ParseNodeStmt* outerLoop,ParseNodeFor* invertedLoop,FuncInfo* funcInfo);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "441:     Js::OpCode GetStSlotOp(Scope *scope, int envIndex, Js::RegSlot scopeLocation, bool chkBlockVar, FuncInfo *funcInfo);",
          "442:     Js::OpCode GetLdSlotOp(Scope *scope, int envIndex, Js::RegSlot scopeLocation, FuncInfo *funcInfo);",
          "443:     Js::OpCode GetInitFldOp(Scope *scope, Js::RegSlot scopeLocation, FuncInfo *funcInfo, bool letDecl = false);",
          "445: private:",
          "446:     bool NeedCheckBlockVar(Symbol* sym, Scope* scope, FuncInfo* funcInfo) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:     void PushJumpCleanupForLoop(ParseNode* loopNode, uint loopId)",
          "466:     {",
          "467:         this->jumpCleanupList->Prepend({",
          "468:             loopNode,",
          "469:             loopId,",
          "470:             Js::OpCode::Nop,",
          "471:             0,",
          "472:             Js::Constants::NoRegister,",
          "473:             Js::Constants::NoRegister",
          "474:         });",
          "475:     }",
          "477:     void PushJumpCleanupForTry(",
          "478:         Js::OpCode tryOp,",
          "479:         Js::ByteCodeLabel label = 0,",
          "480:         Js::RegSlot regSlot1 = Js::Constants::NoRegister,",
          "481:         Js::RegSlot regSlot2 = Js::Constants::NoRegister)",
          "482:     {",
          "483:         this->jumpCleanupList->Prepend({nullptr, 0, tryOp, label, regSlot1, regSlot2});",
          "484:     }",
          "486:     void PopJumpCleanup() { this->jumpCleanupList->RemoveHead(); }",
          "487:     bool HasJumpCleanup() { return !this->jumpCleanupList->Empty(); }",
          "488:     void EmitJumpCleanup(ParseNode* target, FuncInfo* funcInfo);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "457:     }",
          "458: }",
          "461:     bool matches;",
          "462:     bool insideApplyCall;",
          "463:     bool sawApply;",
          "",
          "[Removed Lines]",
          "460: struct ApplyCheck {",
          "",
          "[Added Lines]",
          "505: struct ApplyCheck",
          "506: {",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeWriter.cpp||lib/Runtime/ByteCode/ByteCodeWriter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeWriter.cpp -> lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     void ByteCodeWriter::CheckLabel(ByteCodeLabel labelID)",
          "317:     {",
          "319:             \"Label must be previously defined before being marked in the byte-code\");",
          "320:     }",
          "",
          "[Removed Lines]",
          "318:         AssertMsg(labelID < m_labelOffsets->Count(),",
          "",
          "[Added Lines]",
          "318:         AssertMsg(labelID >= 0 && labelID < m_labelOffsets->Count(),",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: MACRO_BACKEND_ONLY(     EHThrow,            Reg1,           OpSideEffect|OpPostOpDbgBailOut|OpDeadFallThrough)  // Throw exception",
          "236: MACRO_WMS(              Throw,              Reg1,           OpSideEffect|OpNoFallThrough|OpPostOpDbgBailOut)    // Throw exception",
          "237: MACRO(                  Ret,                Empty,          OpSideEffect|OpUseAllFields|OpNoFallThrough)        // Return from function",
          "241: MACRO_WMS(              Yield,              Reg2,           OpSideEffect|OpUseAllFields)                        // Yield from generator function",
          "247: MACRO_WMS(              Incr_A,             Reg2,           OpTempNumberProducing|OpOpndHasImplicitCall|OpDoNotTransfer|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut|OpProducesNumber)     // Increment",
          "",
          "[Removed Lines]",
          "238: MACRO_EXTEND_WMS(       Await,              Reg2,           OpSideEffect)                                       // Await from async function",
          "239: MACRO_EXTEND_WMS(       AsyncYield,         Reg2,           OpSideEffect)                                       // Yield from async generator function",
          "240: MACRO_EXTEND_WMS(       AsyncYieldStar,     Reg2,           OpSideEffect)                                       // Yield* from async generator function",
          "242: MACRO_EXTEND_WMS(       AsyncYieldIsReturn, Reg2,           OpSideEffect)                                       // Check for .return() during async yield*",
          "243: MACRO_WMS(              ResumeYield,        Reg2,           OpSideEffect|OpHasImplicitCall)",
          "244: MACRO_WMS(              ResumeYieldStar,    Reg3,           OpSideEffect|OpHasImplicitCall)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "631: MACRO_EXTEND_WMS(       NewInnerScFuncHomeObj,     ElementSlotI3,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "632: MACRO_EXTEND_WMS(       NewInnerScGenFuncHomeObj,  ElementSlotI3,    OpSideEffect)   // Create new JavascriptGeneratorFunction instance that has home object",
          "633: MACRO_EXTEND_WMS(       NewAsyncFromSyncIterator,  Reg2,    OpSideEffect)   // Create new JavascriptAsyncFromSyncOperator instance",
          "634: MACRO_BACKEND_ONLY(     NewScopeObject,     Reg1,           None)                       // Create new NewScopeObject",
          "635: MACRO_BACKEND_ONLY(     InitCachedScope,    Reg2Aux,        None)                   // Retrieve cached scope; create if not cached",
          "636: MACRO_BACKEND_ONLY(     InitLetCachedScope, Reg2Aux,        OpSideEffect)                   // Retrieve cached scope; create if not cached (formals are let-like instead of var-like)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628: MACRO_EXTEND_WMS(       NewAwaitObject,     Reg2,           OpSideEffect)   // Create new internal await object instance",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "876: MACRO_BACKEND_ONLY(GeneratorResumeJumpTable,                Reg1,   OpSideEffect) // OpSideEffect because we don't want this to be deadstored",
          "877: MACRO_BACKEND_ONLY(GeneratorCreateInterpreterStackFrame,    Reg1,   OpSideEffect) // OpSideEffect because we don't want this to be deadstored",
          "879: MACRO_BACKEND_ONLY(GeneratorOutputBailInTrace,              Empty,  OpSideEffect) // OpSideEffect because we don't want this to be deadstored",
          "880: MACRO_BACKEND_ONLY(GeneratorOutputBailInTraceLabel,         Empty,  None)",
          "881: MACRO_BACKEND_ONLY(GeneratorBailInLabel,                    Empty,  None)",
          "883: MACRO_BACKEND_ONLY(GeneratorEpilogueFrameNullOutLabel,      Empty,  None)",
          "884: MACRO_BACKEND_ONLY(GeneratorEpilogueNoFrameNullOutLabel,    Empty,  None)",
          "",
          "[Removed Lines]",
          "878: MACRO_BACKEND_ONLY(GeneratorLoadResumeYieldData,            Reg1,   OpSideEffect) // OpSideEffect because we don't want this to be deadstored",
          "882: MACRO_BACKEND_ONLY(GeneratorResumeYieldLabel,               Empty,  None)",
          "",
          "[Added Lines]",
          "873: MACRO_BACKEND_ONLY(GeneratorResumeYield,                    Reg1,   OpSideEffect) // OpSideEffect because we don't want this to be deadstored",
          "",
          "---------------"
        ],
        "lib/Runtime/Debug/DiagHelperMethodWrapper.cpp||lib/Runtime/Debug/DiagHelperMethodWrapper.cpp": [
          "File: lib/Runtime/Debug/DiagHelperMethodWrapper.cpp -> lib/Runtime/Debug/DiagHelperMethodWrapper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         Assert(exceptionObject);",
          "217:             exceptionObject == scriptContext->GetThreadContext()->GetPendingOOMErrorObject() ||",
          "218:             exceptionObject == scriptContext->GetThreadContext()->GetPendingSOErrorObject())",
          "219:         {",
          "",
          "[Removed Lines]",
          "215:         if (exceptionObject->IsGeneratorReturnException() ||",
          "216:             !exceptionObject->IsDebuggerSkip() ||",
          "",
          "[Added Lines]",
          "215:         if (!exceptionObject->IsDebuggerSkip() ||",
          "",
          "---------------"
        ],
        "lib/Runtime/Debug/TTSnapObjects.cpp||lib/Runtime/Debug/TTSnapObjects.cpp": [
          "File: lib/Runtime/Debug/TTSnapObjects.cpp -> lib/Runtime/Debug/TTSnapObjects.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2549:         {",
          "2550:             Js::ScriptContext *ctx = inflator->LookupScriptContext(snpObject->SnapType->ScriptContextLogId);",
          "2597:             Js::Var reject = (info->reject != nullptr) ? inflator->InflateTTDVar(info->reject) : nullptr;",
          "2598:             Js::Var resolve = (info->resolve != nullptr) ? inflator->InflateTTDVar(info->resolve) : nullptr;",
          "2599:             Js::Var argument = (info->argument != nullptr) ? inflator->InflateTTDVar(info->argument) : nullptr;",
          "",
          "[Removed Lines]",
          "2548:         Js::RecyclableObject* DoObjectInflation_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject *snpObject, InflateMap *inflator)",
          "2551:             SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo* info = SnapObjectGetAddtlInfoAs<SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo *, SnapObjectType::JavascriptPromiseAsyncSpawnExecutorFunction>(snpObject);",
          "2552:             Js::Var target = (info->target!= nullptr) ? inflator->InflateTTDVar(info->target) : nullptr;",
          "2554:             Js::JavascriptGenerator* generator = nullptr;",
          "2555:             if (info->generator != TTD_INVALID_PTR_ID)",
          "2556:             {",
          "2557:                 generator = reinterpret_cast<Js::JavascriptGenerator*>(inflator->LookupObject(info->generator));",
          "2558:             }",
          "2561:             Js::RecyclableObject* res = reinterpret_cast<Js::RecyclableObject*>(ctx->GetLibrary()->CreatePromiseAsyncSpawnExecutorFunction(generator, target));",
          "2562:             return res;",
          "2563:         }",
          "2565:         void DoAddtlValueInstantiation_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject* snpObject, Js::RecyclableObject* obj, InflateMap* inflator)",
          "2566:         {",
          "2567:         }",
          "2569:         void EmitAddtlInfo_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject* snpObject, FileWriter* writer)",
          "2570:         {",
          "2571:             SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo* info = SnapObjectGetAddtlInfoAs<SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo*, SnapObjectType::JavascriptPromiseAsyncSpawnExecutorFunction>(snpObject);",
          "2572:             writer->WriteAddr(NSTokens::Key::objectId, info->generator, NSTokens::Separator::CommaSeparator);",
          "2573:             writer->WriteKey(NSTokens::Key::target, NSTokens::Separator::CommaSeparator);",
          "2574:             NSSnapValues::EmitTTDVar(info->target, writer, NSTokens::Separator::NoSeparator);",
          "2575:         }",
          "2577:         void ParseAddtlInfo_SnapJavascriptPromiseAsyncSpawnExecutorFunction(SnapObject* snpObject, FileReader* reader, SlabAllocator& alloc)",
          "2578:         {",
          "2579:             SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo* info = alloc.SlabAllocateStruct<SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo>();",
          "2580:             info->generator = reader->ReadAddr(NSTokens::Key::objectId, true);",
          "2581:             reader->ReadKey(NSTokens::Key::target, true);",
          "2582:             info->target= NSSnapValues::ParseTTDVar(false, reader);",
          "2583:             SnapObjectSetAddtlInfoAs<SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo*, SnapObjectType::JavascriptPromiseAsyncSpawnExecutorFunction>(snpObject, info);",
          "2584:         }",
          "2585: #if ENABLE_SNAPSHOT_COMPARE",
          "2586:         void AssertSnapEquiv_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap)",
          "2587:         {",
          "2588:         }",
          "2589: #endif",
          "2593:         Js::RecyclableObject *DoObjectInflation_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject *snpObject, InflateMap *inflator)",
          "2594:         {",
          "2595:             Js::ScriptContext *ctx = inflator->LookupScriptContext(snpObject->SnapType->ScriptContextLogId);",
          "2596:             SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo* info = SnapObjectGetAddtlInfoAs<SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo *, SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(snpObject);",
          "",
          "[Added Lines]",
          "2548:         Js::RecyclableObject *DoObjectInflation_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject *snpObject, InflateMap *inflator)",
          "2551:             SnapJavascriptAsyncSpawnStepFunctionInfo* info = SnapObjectGetAddtlInfoAs<SnapJavascriptAsyncSpawnStepFunctionInfo *, SnapObjectType::JavascriptAsyncSpawnStepFunction>(snpObject);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2609:             switch (info->entryPoint)",
          "2610:             {",
          "2611:             case 1:",
          "2613:                 break;",
          "2614:             case 2:",
          "2616:                 break;",
          "2617:             case 3:",
          "2619:                 break;",
          "2620:             default:",
          "2622:                 break;",
          "2623:             }",
          "2626:         }",
          "2629:         { }",
          "2632:         {",
          "2634:             writer->WriteAddr(NSTokens::Key::objectId, info->generator, NSTokens::Separator::CommaSeparator);",
          "2635:             writer->WriteKey(NSTokens::Key::reject, NSTokens::Separator::CommaSeparator);",
          "2636:             NSSnapValues::EmitTTDVar(info->reject, writer, NSTokens::Separator::NoSeparator);",
          "",
          "[Removed Lines]",
          "2612:                 entryPoint = Js::JavascriptPromise::EntryJavascriptPromiseAsyncSpawnStepNextExecutorFunction;",
          "2615:                 entryPoint = Js::JavascriptPromise::EntryJavascriptPromiseAsyncSpawnStepThrowExecutorFunction;",
          "2618:                 entryPoint = Js::JavascriptPromise::EntryJavascriptPromiseAsyncSpawnCallStepExecutorFunction;",
          "2621:                 TTDAssert(false, \"Unexpected value for entryPoint when inflating JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction\");",
          "2625:             return ctx->GetLibrary()->CreatePromiseAsyncSpawnStepArgumentExecutorFunction(entryPoint, generator, argument, resolve, reject, isReject);",
          "2628:         void DoAddtlValueInstantiation_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject* snpObject, Js::RecyclableObject* obj, InflateMap* inflator)",
          "2631:         void EmitAddtlInfo_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject* snpObject, FileWriter* writer)",
          "2633:             SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo* info = SnapObjectGetAddtlInfoAs<SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo*, SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(snpObject);",
          "",
          "[Added Lines]",
          "2567:                 entryPoint = Js::JavascriptAsyncFunction::EntryAsyncSpawnStepNextFunction;",
          "2570:                 entryPoint = Js::JavascriptAsyncFunction::EntryAsyncSpawnStepThrowFunction;",
          "2573:                 entryPoint = Js::JavascriptAsyncFunction::EntryAsyncSpawnCallStepFunction;",
          "2576:                 TTDAssert(false, \"Unexpected value for entryPoint when inflating JavascriptAsyncSpawnStepFunction\");",
          "2580:             return ctx->GetLibrary()->CreateAsyncSpawnStepFunction(entryPoint, generator, argument, resolve, reject, isReject);",
          "2583:         void DoAddtlValueInstantiation_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject* snpObject, Js::RecyclableObject* obj, InflateMap* inflator)",
          "2586:         void EmitAddtlInfo_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject* snpObject, FileWriter* writer)",
          "2588:             SnapJavascriptAsyncSpawnStepFunctionInfo* info = SnapObjectGetAddtlInfoAs<SnapJavascriptAsyncSpawnStepFunctionInfo*, SnapObjectType::JavascriptAsyncSpawnStepFunction>(snpObject);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2642:             writer->WriteBool(NSTokens::Key::boolVal, info->isReject, NSTokens::Separator::CommaSeparator);",
          "2643:         }",
          "2646:         {",
          "2648:             info->generator = reader->ReadAddr(NSTokens::Key::objectId, true);",
          "2649:             reader->ReadKey(NSTokens::Key::reject, true);",
          "2650:             info->reject = NSSnapValues::ParseTTDVar(false, reader);",
          "",
          "[Removed Lines]",
          "2645:         void ParseAddtlInfo_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(SnapObject* snpObject, FileReader* reader, SlabAllocator& alloc)",
          "2647:             SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo* info = alloc.SlabAllocateStruct<SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo>();",
          "",
          "[Added Lines]",
          "2600:         void ParseAddtlInfo_SnapJavascriptAsyncSpawnStepFunctionInfo(SnapObject* snpObject, FileReader* reader, SlabAllocator& alloc)",
          "2602:             SnapJavascriptAsyncSpawnStepFunctionInfo* info = alloc.SlabAllocateStruct<SnapJavascriptAsyncSpawnStepFunctionInfo>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2654:             info->argument = NSSnapValues::ParseTTDVar(false, reader);",
          "2655:             info->entryPoint = reader->ReadUInt32(NSTokens::Key::u32Val, true);",
          "2656:             info->isReject = reader->ReadBool(NSTokens::Key::boolVal, true);",
          "2658:         }",
          "2660: #if ENABLE_SNAPSHOT_COMPARE",
          "2662:         { }",
          "2663: #endif",
          "",
          "[Removed Lines]",
          "2657:             SnapObjectSetAddtlInfoAs<SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo*, SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(snpObject, info);",
          "2661:         void AssertSnapEquiv_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap)",
          "",
          "[Added Lines]",
          "2612:             SnapObjectSetAddtlInfoAs<SnapJavascriptAsyncSpawnStepFunctionInfo*, SnapObjectType::JavascriptAsyncSpawnStepFunction>(snpObject, info);",
          "2616:         void AssertSnapEquiv_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap)",
          "",
          "---------------"
        ],
        "lib/Runtime/Debug/TTSnapObjects.h||lib/Runtime/Debug/TTSnapObjects.h": [
          "File: lib/Runtime/Debug/TTSnapObjects.h -> lib/Runtime/Debug/TTSnapObjects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174:         void AssertSnapEquiv_SnapAsyncFunction(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap);",
          "1175: #endif",
          "1194:         {",
          "1195:             TTD_PTR_ID generator;",
          "1196:             TTDVar reject;",
          "",
          "[Removed Lines]",
          "1178:         struct SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo",
          "1179:         {",
          "1180:             TTD_PTR_ID generator;",
          "1181:             TTDVar target;",
          "1182:         };",
          "1184:         Js::RecyclableObject *DoObjectInflation_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject *snpObject, InflateMap *inflator);",
          "1185:         void DoAddtlValueInstantiation_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject* snpObject, Js::RecyclableObject* obj, InflateMap* inflator);",
          "1186:         void EmitAddtlInfo_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject* snpObject, FileWriter* writer);",
          "1187:         void ParseAddtlInfo_SnapJavascriptPromiseAsyncSpawnExecutorFunction(SnapObject* snpObject, FileReader* reader, SlabAllocator& alloc);",
          "1188: #if ENABLE_SNAPSHOT_COMPARE",
          "1189:         void AssertSnapEquiv_SnapJavascriptPromiseAsyncSpawnExecutorFunction(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap);",
          "1190: #endif",
          "1193:         struct SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo",
          "",
          "[Added Lines]",
          "1177:         struct SnapJavascriptAsyncSpawnStepFunctionInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1200:             uint32 entryPoint;",
          "1201:         };",
          "1207: #if ENABLE_SNAPSHOT_COMPARE",
          "1209: #endif",
          "1211:     }",
          "1212: }",
          "1214: #endif",
          "",
          "[Removed Lines]",
          "1203:         Js::RecyclableObject *DoObjectInflation_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject *snpObject, InflateMap *inflator);",
          "1204:         void DoAddtlValueInstantiation_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject* snpObject, Js::RecyclableObject* obj, InflateMap* inflator);",
          "1205:         void EmitAddtlInfo_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject* snpObject, FileWriter* writer);",
          "1206:         void ParseAddtlInfo_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(SnapObject* snpObject, FileReader* reader, SlabAllocator& alloc);",
          "1208:         void AssertSnapEquiv_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap);",
          "",
          "[Added Lines]",
          "1187:         Js::RecyclableObject *DoObjectInflation_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject *snpObject, InflateMap *inflator);",
          "1188:         void DoAddtlValueInstantiation_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject* snpObject, Js::RecyclableObject* obj, InflateMap* inflator);",
          "1189:         void EmitAddtlInfo_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject* snpObject, FileWriter* writer);",
          "1190:         void ParseAddtlInfo_SnapJavascriptAsyncSpawnStepFunctionInfo(SnapObject* snpObject, FileReader* reader, SlabAllocator& alloc);",
          "1192:         void AssertSnapEquiv_SnapJavascriptAsyncSpawnStepFunctionInfo(const SnapObject* sobj1, const SnapObject* sobj2, TTDCompareMap& compareMap);",
          "",
          "---------------"
        ],
        "lib/Runtime/Debug/TTSnapshot.cpp||lib/Runtime/Debug/TTSnapshot.cpp": [
          "File: lib/Runtime/Debug/TTSnapshot.cpp -> lib/Runtime/Debug/TTSnapshot.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:             &NSSnapObjects::DoAddtlValueInstantiation_SnapGeneratorInfo,",
          "364:             &NSSnapObjects::EmitAddtlInfo_SnapGeneratorInfo,",
          "365:             &NSSnapObjects::ParseAddtlInfo_SnapGeneratorInfo };",
          "377:         };",
          "",
          "[Removed Lines]",
          "366:         this->m_snapObjectVTableArray[(uint32)NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnExecutorFunction] = {",
          "367:             &NSSnapObjects::DoObjectInflation_SnapJavascriptPromiseAsyncSpawnExecutorFunction,",
          "368:             &NSSnapObjects::DoAddtlValueInstantiation_SnapJavascriptPromiseAsyncSpawnExecutorFunction,",
          "369:             &NSSnapObjects::EmitAddtlInfo_SnapJavascriptPromiseAsyncSpawnExecutorFunction,",
          "370:             &NSSnapObjects::ParseAddtlInfo_SnapJavascriptPromiseAsyncSpawnExecutorFunction",
          "371:         };",
          "372:         this->m_snapObjectVTableArray[(uint32)NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction] = {",
          "373:             &NSSnapObjects::DoObjectInflation_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo,",
          "374:             &NSSnapObjects::DoAddtlValueInstantiation_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo,",
          "375:             &NSSnapObjects::EmitAddtlInfo_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo,",
          "376:             &NSSnapObjects::ParseAddtlInfo_SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo",
          "",
          "[Added Lines]",
          "366:         this->m_snapObjectVTableArray[(uint32)NSSnapObjects::SnapObjectType::JavascriptAsyncSpawnStepFunction] = {",
          "367:             &NSSnapObjects::DoObjectInflation_SnapJavascriptAsyncSpawnStepFunctionInfo,",
          "368:             &NSSnapObjects::DoAddtlValueInstantiation_SnapJavascriptAsyncSpawnStepFunctionInfo,",
          "369:             &NSSnapObjects::EmitAddtlInfo_SnapJavascriptAsyncSpawnStepFunctionInfo,",
          "370:             &NSSnapObjects::ParseAddtlInfo_SnapJavascriptAsyncSpawnStepFunctionInfo",
          "",
          "---------------"
        ],
        "lib/Runtime/Debug/TTSupport.h||lib/Runtime/Debug/TTSupport.h": [
          "File: lib/Runtime/Debug/TTSupport.h -> lib/Runtime/Debug/TTSupport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:             SnapGeneratorVirtualScriptFunction,",
          "256:             SnapAsyncFunction,",
          "257:             SnapGenerator,",
          "262:             SnapWellKnownObject,",
          "",
          "[Removed Lines]",
          "258:             JavascriptPromiseAsyncSpawnExecutorFunction,",
          "259:             JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction,",
          "",
          "[Added Lines]",
          "258:             JavascriptAsyncSpawnExecutorFunction,",
          "259:             JavascriptAsyncSpawnStepFunction,",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp": [
          "File: lib/Runtime/Language/AsmJsByteCodeGenerator.cpp -> lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2192:         return EmitExpressionInfo( AsmJsType::Void );",
          "2193:     }",
          "2196:     {",
          "2198:         StartStatement(loopNode);",
          "",
          "[Removed Lines]",
          "2195:     Js::EmitExpressionInfo AsmJSByteCodeGenerator::EmitLoop( ParseNodeLoop *loopNode, ParseNode *cond, ParseNode *body, ParseNode *incr, BOOL doWhile /*= false */ )",
          "",
          "[Added Lines]",
          "2195:     Js::EmitExpressionInfo AsmJSByteCodeGenerator::EmitLoop( ParseNodeStmt *loopNode, ParseNode *cond, ParseNode *body, ParseNode *incr, BOOL doWhile /*= false */ )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2200:         Js::ByteCodeLabel continuePastLoop = mWriter.DefineLabel();",
          "2202:         uint loopId = mWriter.EnterLoop( loopEntrance );",
          "2204:         EndStatement(loopNode);",
          "2205:         if( doWhile )",
          "2206:         {",
          "",
          "[Removed Lines]",
          "2203:         loopNode->loopId = loopId;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsByteCodeGenerator.h||lib/Runtime/Language/AsmJsByteCodeGenerator.h": [
          "File: lib/Runtime/Language/AsmJsByteCodeGenerator.h -> lib/Runtime/Language/AsmJsByteCodeGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:         EmitExpressionInfo EmitQMark( ParseNode * pnode );",
          "97:         EmitExpressionInfo EmitSwitch( ParseNodeSwitch * pnode );",
          "98:         EmitExpressionInfo EmitBinaryComparator( ParseNode * pnode, EBinaryComparatorOpCodes op);",
          "100:         EmitExpressionInfo EmitIf( ParseNodeIf * pnode );",
          "101:         EmitExpressionInfo EmitBooleanExpression( ParseNode* pnodeCond, Js::ByteCodeLabel trueLabel, Js::ByteCodeLabel falseLabel );",
          "",
          "[Removed Lines]",
          "99:         EmitExpressionInfo EmitLoop( ParseNodeLoop *loopNode, ParseNode *cond, ParseNode *body, ParseNode *incr, BOOL doWhile = false );",
          "",
          "[Added Lines]",
          "99:         EmitExpressionInfo EmitLoop( ParseNodeStmt *loopNode, ParseNode *cond, ParseNode *body, ParseNode *incr, BOOL doWhile = false );",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: EXDEF2_WMS(GET_ELEM_SLOT_FB_HMO,    NewInnerScFuncHomeObj,      ScriptFunction::OP_NewScFuncHomeObj)",
          "350: EXDEF2_WMS(GET_ELEM_SLOT_FB_HMO,    NewInnerScGenFuncHomeObj,   JavascriptGeneratorFunction::OP_NewScGenFuncHomeObj)",
          "351: EXDEF2_WMS(A1toA1Mem,               NewAsyncFromSyncIterator,   JavascriptOperators::OP_NewAsyncFromSyncIterator)",
          "352:   DEF2_WMS(A1U1toXX,                InitForInEnumerator,        OP_InitForInEnumerator)",
          "353:   DEF2_WMS(A1U1toXXWithCache,       ProfiledInitForInEnumerator,OP_InitForInEnumeratorWithCache)",
          "354:   DEF2_WMS(A1toXXMem,               Throw,                      JavascriptExceptionOperators::OP_Throw)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352: EXDEF2_WMS(A1toA1Mem,               NewAwaitObject,             JavascriptOperators::OP_NewAwaitObject)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407: EXDEF2_WMS(TRYBR2,                  TryFinallyWithYield,        OP_TryFinallyWithYield)",
          "408: EXDEF2    (EMPTY,                   ResumeCatch,                OP_ResumeCatch)",
          "409: EXDEF2_WMS(TRYBR2,                  ResumeFinally,              OP_ResumeFinally)",
          "416: EXDEF2    (W1,                      RuntimeTypeError,           JavascriptExceptionOperators::OP_RuntimeTypeError)",
          "417: EXDEF2    (W1,                      RuntimeReferenceError,      JavascriptExceptionOperators::OP_RuntimeReferenceError)",
          "418: EXDEF3    (CUSTOM_L_R0,             SpreadArrayLiteral,         OP_SpreadArrayLiteral, Reg2Aux)",
          "",
          "[Removed Lines]",
          "410: EXDEF2_WMS(A2toXXMemNonVar,         AsyncYieldStar,             OP_AsyncYieldStar)",
          "411: EXDEF2_WMS(A2toXXMemNonVar,         AsyncYield,                 OP_AsyncYield)",
          "412: EXDEF2_WMS(A2toXXMemNonVar,         Await,                      OP_Await)",
          "413: EXDEF2_WMS(A1NonVarToA1,            AsyncYieldIsReturn,         OP_AsyncYieldIsReturn)",
          "414:   DEF2_WMS(A1NonVarToA1,            ResumeYield,                OP_ResumeYield)",
          "415:   DEF2_WMS(A2NonVarToA1Reg,         ResumeYieldStar,            OP_ResumeYield)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2037:             JavascriptGenerator* generator = VarTo<JavascriptGenerator>(args[0]);",
          "2038:             newInstance = generator->GetFrame();",
          "2040:             if (newInstance != nullptr)",
          "2041:             {",
          "",
          "[Removed Lines]",
          "2035:             AssertOrFailFastMsg(args.Info.Count == 2 && ((args.Info.Flags & CallFlags_ExtraArg) == CallFlags_None), \"Generator ScriptFunctions should only be invoked by generator APIs with the pair of arguments they pass in -- the generator object and a ResumeYieldData pointer\");",
          "2042:                 ResumeYieldData* resumeYieldData = static_cast<ResumeYieldData*>(args[1]);",
          "2043:                 newInstance->SetNonVarReg(executeFunction->GetYieldRegister(), resumeYieldData);",
          "",
          "[Added Lines]",
          "2035:             AssertOrFailFastMsg(args.Info.Count == 2 && ((args.Info.Flags & CallFlags_ExtraArg) == CallFlags_None), \"Generator ScriptFunctions should only be invoked by generator APIs with the pair of arguments they pass in -- the generator object and a resume yield object\");",
          "2042:                 newInstance->SetNonVarReg(executeFunction->GetYieldRegister(), args[1]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2543:             if (exception)",
          "2544:             {",
          "2545:                 bool skipException = false;",
          "2548:                     exception != scriptContext->GetThreadContext()->GetPendingOOMErrorObject())",
          "2549:                 {",
          "2550:                     skipException = exception->IsDebuggerSkip();",
          "",
          "[Removed Lines]",
          "2546:                 if (!exception->IsGeneratorReturnException() &&",
          "2547:                     exception != scriptContext->GetThreadContext()->GetPendingSOErrorObject() &&",
          "",
          "[Added Lines]",
          "2545:                 if (exception != scriptContext->GetThreadContext()->GetPendingSOErrorObject() &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6771:         if (exception)",
          "6772:         {",
          "6779:             exception = exception->CloneIfStaticExceptionObject(scriptContext);",
          "",
          "[Removed Lines]",
          "6773:             if (exception->IsGeneratorReturnException())",
          "6774:             {",
          "6776:                 JavascriptExceptionOperators::DoThrow(exception, scriptContext);",
          "6777:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6987:         if (exception)",
          "6988:         {",
          "6994:             if (catchOffset != 0)",
          "6995:             {",
          "6996:                 exception = exception->CloneIfStaticExceptionObject(scriptContext);",
          "",
          "[Removed Lines]",
          "6989:             if (exception->IsGeneratorReturnException())",
          "6990:             {",
          "6992:                 JavascriptExceptionOperators::DoThrow(exception, scriptContext);",
          "6993:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7252:             SetNonVarReg(regOffset, reinterpret_cast<Js::Var>(currOffset));",
          "7253:         }",
          "7256:         {",
          "7258:             pExceptionObject = pExceptionObject->CloneIfStaticExceptionObject(scriptContext);",
          "",
          "[Removed Lines]",
          "7255:         if (pExceptionObject && !pExceptionObject->IsGeneratorReturnException())",
          "",
          "[Added Lines]",
          "7242:         if (pExceptionObject)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7310:             return;",
          "7311:         }",
          "7314:         {",
          "7315:             JavascriptExceptionOperators::DoThrow(pExceptionObject, scriptContext);",
          "7316:         }",
          "",
          "[Removed Lines]",
          "7313:         if (pExceptionObject && (endOfFinallyBlock || !pExceptionObject->IsGeneratorReturnException()))",
          "",
          "[Added Lines]",
          "7300:         if (pExceptionObject)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7360:         }",
          "7362:         Js::JavascriptExceptionObject* exceptionObj = (Js::JavascriptExceptionObject*)GetNonVarReg(exceptionRegSlot);",
          "7364:         {",
          "7365:             JavascriptExceptionOperators::DoThrow(exceptionObj, scriptContext);",
          "7366:         }",
          "",
          "[Removed Lines]",
          "7363:         if (exceptionObj && (endOfFinallyBlock || !exceptionObj->IsGeneratorReturnException()))",
          "",
          "[Added Lines]",
          "7350:         if (exceptionObj)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9582:         return (void*)m_inSlotsCount;",
          "9583:     }",
          "9621:     void* InterpreterStackFrame::operator new(size_t byteSize, void* previousAllocation) throw()",
          "9622:     {",
          "",
          "[Removed Lines]",
          "9585:     void InterpreterStackFrame::OP_AsyncYieldStar(Var yieldDataVar, Var value, ScriptContext* scriptContext)",
          "9586:     {",
          "9587:         ResumeYieldData* yieldData = static_cast<ResumeYieldData*>(yieldDataVar);",
          "9589:         JavascriptOperators::OP_AsyncYieldStar(yieldData->generator, value, scriptContext);",
          "9590:     }",
          "9592:     void InterpreterStackFrame::OP_AsyncYield(Var yieldDataVar, Var value, ScriptContext* scriptContext)",
          "9593:     {",
          "9594:         ResumeYieldData* yieldData = static_cast<ResumeYieldData*>(yieldDataVar);",
          "9596:         JavascriptOperators::OP_AsyncYield(yieldData->generator, value, scriptContext);",
          "9597:     }",
          "9599:     void InterpreterStackFrame::OP_Await(Var yieldDataVar, Var value, ScriptContext* scriptContext)",
          "9600:     {",
          "9601:         ResumeYieldData* yieldData = static_cast<ResumeYieldData*>(yieldDataVar);",
          "9603:         JavascriptOperators::OP_Await(yieldData->generator, value, scriptContext);",
          "9604:     }",
          "9606:     Var InterpreterStackFrame::OP_AsyncYieldIsReturn(Var yieldDataVar)",
          "9607:     {",
          "9608:         ResumeYieldData* yieldData = static_cast<ResumeYieldData*>(yieldDataVar);",
          "9610:         return JavascriptOperators::OP_AsyncYieldIsReturn(yieldData);",
          "9611:     }",
          "9613:     Var InterpreterStackFrame::OP_ResumeYield(Var yieldDataVar, RegSlot yieldStarIterator)",
          "9614:     {",
          "9615:         ResumeYieldData* yieldData = static_cast<ResumeYieldData*>(yieldDataVar);",
          "9616:         RecyclableObject* iterator = yieldStarIterator != Constants::NoRegister ? VarTo<RecyclableObject>(GetNonVarReg(yieldStarIterator)) : nullptr;",
          "9618:         return JavascriptOperators::OP_ResumeYield(yieldData, iterator);",
          "9619:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.h||lib/Runtime/Language/InterpreterStackFrame.h": [
          "File: lib/Runtime/Language/InterpreterStackFrame.h -> lib/Runtime/Language/InterpreterStackFrame.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         template <class T> void OP_SimdBool16x8(const unaligned T* playout);",
          "279:         template <class T> void OP_SimdBool8x16(const unaligned T* playout);",
          "286:         template <typename RegSlotType>",
          "287:         Var GetRegAllowStackVarEnableOnly(RegSlotType localRegisterID) const;",
          "288:         template <typename RegSlotType>",
          "",
          "[Removed Lines]",
          "281:         static void OP_AsyncYield(Var yieldDataVar, Var value, ScriptContext* scriptContext);",
          "282:         static void OP_AsyncYieldStar(Var yieldDataVar, Var value, ScriptContext* scriptContext);",
          "283:         static void OP_Await(Var yieldDataVar, Var value, ScriptContext* scriptContext);",
          "284:         static Var OP_AsyncYieldIsReturn(Var yieldDataVar);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "790:         void OP_TryFinallyWithYield(const byte* ip, Js::JumpOffset jumpOffset, Js::RegSlot regException, Js::RegSlot regOffset);",
          "791:         void OP_ResumeCatch();",
          "792:         void OP_ResumeFinally(const byte* ip, Js::JumpOffset jumpOffset, RegSlot exceptionRegSlot, RegSlot offsetRegSlot);",
          "794:         template <typename T> void OP_IsInst(const unaligned T * playout);",
          "795:         Var OP_InitBaseClass(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, RegSlot protoReg);",
          "796:         Var OP_InitClass(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, Var ctorParent, Var protoParent, RegSlot protoReg);",
          "",
          "[Removed Lines]",
          "793:         inline Var OP_ResumeYield(Var yieldDataVar, RegSlot yieldStarIterator = Js::Constants::NoRegister);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptExceptionObject.h||lib/Runtime/Language/JavascriptExceptionObject.h": [
          "File: lib/Runtime/Language/JavascriptExceptionObject.h -> lib/Runtime/Language/JavascriptExceptionObject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:             isDebuggerSkip(false), byteCodeOffsetAfterDebuggerSkip(Constants::InvalidByteCodeOffset), hasDebuggerLogged(false),",
          "25:             isFirstChance(false), isExceptionCaughtInNonUserCode(false), ignoreAdvanceToNextStatement(false),",
          "26: #endif",
          "28:             next(nullptr)",
          "29:         {",
          "30:             if (exceptionContextIn)",
          "",
          "[Removed Lines]",
          "27:             hostWrapperCreateFunc(nullptr), isGeneratorReturnException(false),",
          "",
          "[Added Lines]",
          "27:             hostWrapperCreateFunc(nullptr),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         void SetThrownObject(Var object)",
          "148:         {",
          "151:             this->thrownObject = object;",
          "152:         }",
          "153:         JavascriptExceptionObject* CloneIfStaticExceptionObject(ScriptContext* scriptContext);",
          "",
          "[Removed Lines]",
          "150:             Assert(this->isPendingExceptionObject || this->isGeneratorReturnException);",
          "",
          "[Added Lines]",
          "150:             Assert(this->isPendingExceptionObject);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:         bool IsPendingExceptionObject() const { return isPendingExceptionObject; }",
          "174:     private:",
          "175:         friend class ::ThreadContext;",
          "176:         static void Insert(Field(JavascriptExceptionObject*)* head, JavascriptExceptionObject* item);",
          "",
          "[Removed Lines]",
          "163:         void SetGeneratorReturnException(bool is)",
          "164:         {",
          "165:             isGeneratorReturnException = is;",
          "166:         }",
          "168:         bool IsGeneratorReturnException()",
          "169:         {",
          "171:             return isGeneratorReturnException;",
          "172:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:         Field(const bool) tag : 1;               // Tag the low bit to prevent possible GC false references",
          "188:         Field(bool)       isPendingExceptionObject : 1;",
          "191: #ifdef ENABLE_SCRIPT_DEBUGGING",
          "192:         Field(bool)       isDebuggerSkip : 1;",
          "",
          "[Removed Lines]",
          "189:         Field(bool)       isGeneratorReturnException : 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:         PREVENT_COPY(JavascriptExceptionObject)",
          "212:     };",
          "227: }",
          "",
          "[Removed Lines]",
          "214:     class GeneratorReturnExceptionObject : public JavascriptExceptionObject",
          "215:     {",
          "216:     public:",
          "217:         GeneratorReturnExceptionObject(Var object, ScriptContext * scriptContext)",
          "218:             : JavascriptExceptionObject(object, scriptContext, nullptr)",
          "219:         {",
          "220: #ifdef ENABLE_SCRIPT_DEBUGGING",
          "221:             this->SetDebuggerSkip(true);",
          "222:             this->SetIgnoreAdvanceToNextStatement(true);",
          "223: #endif",
          "224:             this->SetGeneratorReturnException(true);",
          "225:         }",
          "226:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"Library/JavascriptRegularExpression.h\"",
          "13: #include \"Library/ThrowErrorObject.h\"",
          "14: #include \"Library/JavascriptGeneratorFunction.h\"",
          "16: #include \"Library/ForInObjectEnumerator.h\"",
          "17: #include \"Library/ES5Array.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"Library/JavascriptAsyncFunction.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5578:             case TypeIds_SetIterator:",
          "5579:             case TypeIds_StringIterator:",
          "5580:             case TypeIds_Generator:",
          "5581:             case TypeIds_AsyncFromSyncIterator:",
          "5582:             case TypeIds_Promise:",
          "5583:             case TypeIds_Proxy:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5582:             case TypeIds_AsyncGenerator:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10291:         JIT_HELPER_END(ImportCall);",
          "10292:     }",
          "10295:     {",
          "10465:     }",
          "10467:     Var JavascriptOperators::OP_NewAsyncFromSyncIterator(Var syncIterator, ScriptContext* scriptContext)",
          "",
          "[Removed Lines]",
          "10294:     void JavascriptOperators::OP_Await(JavascriptGenerator* generator, Var value, ScriptContext* scriptContext)",
          "10299:         JavascriptPromise* promise = JavascriptPromise::InternalPromiseResolve(value, scriptContext);",
          "10307:         JavascriptPromiseCapability* unused = JavascriptPromise::UnusedPromiseCapability(scriptContext);",
          "10308:         JavascriptPromise::PerformPromiseThen(promise, unused, generator->GetAwaitNextFunction(), generator->GetAwaitThrowFunction(), scriptContext);",
          "10311:     }",
          "10314:     void JavascriptOperators::OP_AsyncYieldStar(JavascriptGenerator* generator, Var value, ScriptContext* scriptContext)",
          "10315:     {",
          "10316:         JavascriptPromise* promise = JavascriptPromise::InternalPromiseResolve(value, scriptContext);",
          "10318:         JavascriptPromiseCapability* unused = JavascriptPromise::UnusedPromiseCapability(scriptContext);",
          "10319:         JavascriptPromise::PerformPromiseThen(promise, unused, generator->EnsureAwaitYieldStarFunction(), generator->GetAwaitThrowFunction(), scriptContext);",
          "10320:     }",
          "10322:     void JavascriptOperators::OP_AsyncYield(JavascriptGenerator* generator, Var value, ScriptContext* scriptContext)",
          "10323:     {",
          "10324:         JavascriptPromise* promise = JavascriptPromise::InternalPromiseResolve(value, scriptContext);",
          "10326:         JavascriptPromiseCapability* unused = JavascriptPromise::UnusedPromiseCapability(scriptContext);",
          "10327:         JavascriptPromise::PerformPromiseThen(promise, unused, generator->GetAwaitYieldFunction(), generator->GetAwaitThrowFunction(), scriptContext);",
          "10328:     }",
          "10330:     Var JavascriptOperators::OP_AsyncYieldIsReturn(ResumeYieldData* yieldData)",
          "10331:     {",
          "10332:         JIT_HELPER_NOT_REENTRANT_NOLOCK_HEADER(AsyncYieldIsReturn);",
          "10333:         JavascriptLibrary* library = yieldData->generator->GetScriptContext()->GetLibrary();",
          "10335:         return (yieldData->exceptionObj != nullptr && yieldData->exceptionObj->IsGeneratorReturnException()) ?",
          "10336:             library->GetTrue() : library->GetFalse();",
          "10337:         JIT_HELPER_END(AsyncYieldIsReturn);",
          "10338:     }",
          "10340:     Var JavascriptOperators::OP_ResumeYield(ResumeYieldData* yieldData, RecyclableObject* iterator)",
          "10341:     {",
          "10342:         JIT_HELPER_REENTRANT_HEADER(ResumeYield);",
          "10343:         bool isNext = yieldData->exceptionObj == nullptr;",
          "10344:         bool isThrow = !isNext && !yieldData->exceptionObj->IsGeneratorReturnException();",
          "10346:         if (iterator != nullptr) // yield*",
          "10347:         {",
          "10348:             ScriptContext* scriptContext = iterator->GetScriptContext();",
          "10349:             PropertyId propertyId = isNext ? PropertyIds::next : isThrow ? PropertyIds::throw_ : PropertyIds::return_;",
          "10350:             Var prop = JavascriptOperators::GetProperty(iterator, propertyId, scriptContext);",
          "10352:             if (!isNext && JavascriptOperators::IsUndefinedOrNull(prop))",
          "10353:             {",
          "10354:                 if (isThrow)",
          "10355:                 {",
          "10360:                     prop = JavascriptOperators::GetProperty(iterator, PropertyIds::return_, scriptContext);",
          "10361:                     if (!JavascriptOperators::IsUndefinedOrNull(prop))",
          "10362:                     {",
          "10363:                         if (!JavascriptConversion::IsCallable(prop))",
          "10364:                         {",
          "10365:                             JavascriptError::ThrowTypeError(scriptContext, JSERR_Property_NeedFunction, _u(\"return\"));",
          "10366:                         }",
          "10368:                         Var result = nullptr;",
          "10369:                         RecyclableObject* method = VarTo<RecyclableObject>(prop);",
          "10370:                         BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "10371:                         {",
          "10372:                             Var args[] = { iterator, yieldData->data };",
          "10373:                             CallInfo callInfo(CallFlags_Value, _countof(args));",
          "10374:                             result = JavascriptFunction::CallFunction<true>(method, method->GetEntryPoint(), Arguments(callInfo, args));",
          "10375:                         }",
          "10376:                         END_SAFE_REENTRANT_CALL",
          "10378:                         if (!JavascriptOperators::IsObject(result))",
          "10379:                         {",
          "10380:                             JavascriptError::ThrowTypeError(scriptContext, JSERR_NeedObject);",
          "10381:                         }",
          "10382:                     }",
          "10387:                     JavascriptError::ThrowTypeError(scriptContext, JSERR_Property_NeedFunction, _u(\"throw\"));",
          "10388:                 }",
          "10391:                 JavascriptExceptionOperators::DoThrow(yieldData->exceptionObj, scriptContext);",
          "10392:             }",
          "10394:             if (!JavascriptConversion::IsCallable(prop))",
          "10395:             {",
          "10396:                 JavascriptError::ThrowTypeError(scriptContext, JSERR_Property_NeedFunction, isNext ? _u(\"next\") : isThrow ? _u(\"throw\") : _u(\"return\"));",
          "10397:             }",
          "10399:             RecyclableObject* method = VarTo<RecyclableObject>(prop);",
          "10400:             Var result = scriptContext->GetThreadContext()->ExecuteImplicitCall(method, Js::ImplicitCall_Accessor, [=]()->Js::Var",
          "10401:             {",
          "10402:                 Var args[] = { iterator, yieldData->data };",
          "10403:                 CallInfo callInfo(CallFlags_Value, _countof(args));",
          "10404:                 return JavascriptFunction::CallFunction<true>(method, method->GetEntryPoint(), Arguments(callInfo, args));",
          "10405:             });",
          "10407:             if (yieldData->generator == nullptr && !JavascriptOperators::IsObject(result))",
          "10408:             {",
          "10409:                 JavascriptError::ThrowTypeError(scriptContext, JSERR_NeedObject);",
          "10410:             }",
          "10412:             if (isThrow || isNext || yieldData->generator != nullptr)",
          "10413:             {",
          "10417:                 return result;",
          "10418:             }",
          "10420:             RecyclableObject* obj = VarTo<RecyclableObject>(result);",
          "10421:             Var done = JavascriptOperators::GetProperty(obj, PropertyIds::done, scriptContext);",
          "10422:             if (done == iterator->GetLibrary()->GetTrue())",
          "10423:             {",
          "10424:                 Var value = JavascriptOperators::GetProperty(obj, PropertyIds::value, scriptContext);",
          "10425:                 yieldData->exceptionObj->SetThrownObject(value);",
          "10427:                 JavascriptExceptionOperators::DoThrow(yieldData->exceptionObj, scriptContext);",
          "10428:             }",
          "10429:             return result;",
          "10430:         }",
          "10433:         if (isNext)",
          "10434:         {",
          "10435:             return yieldData->data;",
          "10436:         }",
          "10438:         if (isThrow)",
          "10439:         {",
          "10441:             JavascriptExceptionOperators::ThrowExceptionObject(yieldData->exceptionObj, yieldData->exceptionObj->GetScriptContext(), true);",
          "10442:         }",
          "10463:         JavascriptExceptionOperators::DoThrow(yieldData->exceptionObj, yieldData->exceptionObj->GetScriptContext());",
          "10464:         JIT_HELPER_END(ResumeYield);",
          "",
          "[Added Lines]",
          "10296:     Var JavascriptOperators::OP_NewAwaitObject(Var value, ScriptContext* scriptContext)",
          "10298:         JIT_HELPER_NOT_REENTRANT_NOLOCK_HEADER(NewAwaitObject);",
          "10299:         auto* awaitObject = DynamicObject::New(",
          "10300:             scriptContext->GetRecycler(),",
          "10301:             scriptContext->GetLibrary()->GetAwaitObjectType());",
          "10302:         awaitObject->SetSlot(SetSlotArguments(Js::PropertyIds::value, 0, value));",
          "10303:         return awaitObject;",
          "10304:         JIT_HELPER_END(NewAwaitObject);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: namespace Js",
          "17: {",
          "20: #define DeclareExceptionPointer(ep)                  \\",
          "21:     EXCEPTION_RECORD        ep##er;                 \\",
          "22:     CONTEXT                 ep##c;                  \\",
          "",
          "[Removed Lines]",
          "18:     struct ResumeYieldData;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:         static Var OP_LdFuncObjProto(Var aRight, ScriptContext* scriptContext);",
          "647:         static Var OP_ImportCall(__in JavascriptFunction *function, __in Var specifier, __in ScriptContext* scriptContext);",
          "654:         static Var OP_NewAsyncFromSyncIterator(Var syncIterator, ScriptContext* scriptContext);",
          "656:         template <typename T>",
          "",
          "[Removed Lines]",
          "649:         static void OP_Await(JavascriptGenerator* generator, Var value, ScriptContext* scriptContext);",
          "650:         static void OP_AsyncYieldStar(JavascriptGenerator* generator, Var value, ScriptContext* scriptContext);",
          "651:         static void OP_AsyncYield(JavascriptGenerator* generator, Var value, ScriptContext* scriptContext);",
          "652:         static Var OP_AsyncYieldIsReturn(ResumeYieldData* yieldData);",
          "653:         static Var OP_ResumeYield(ResumeYieldData* yieldData, RecyclableObject* iterator);",
          "",
          "[Added Lines]",
          "647:         static Var OP_NewAwaitObject(Var value, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/SourceTextModuleRecord.cpp||lib/Runtime/Language/SourceTextModuleRecord.cpp": [
          "File: lib/Runtime/Language/SourceTextModuleRecord.cpp -> lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1104:             AUTO_NESTED_HANDLED_EXCEPTION_TYPE((ExceptionType)(ExceptionType_OutOfMemory | ExceptionType_JavascriptException));",
          "1105:             BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "1106:             {",
          "1109:                 ret = JavascriptOperators::GetProperty(VarTo<RecyclableObject>(ret), PropertyIds::value, scriptContext);",
          "1110:             }",
          "1111:             END_SAFE_REENTRANT_CALL",
          "",
          "[Removed Lines]",
          "1107:                 ResumeYieldData yieldData(scriptContext->GetLibrary()->GetUndefined(), nullptr);",
          "1108:                 ret = gen->CallGenerator(&yieldData, Constants::ModuleCode);",
          "",
          "[Added Lines]",
          "1107:                 ret = gen->CallGenerator(scriptContext->GetLibrary()->GetUndefined(), ResumeYieldKind::Normal);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj||lib/Runtime/Library/Chakra.Runtime.Library.vcxproj": [
          "File: lib/Runtime/Library/Chakra.Runtime.Library.vcxproj -> lib/Runtime/Library/Chakra.Runtime.Library.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     <ClCompile Include=\"$(MSBuildThisFileDirectory)EngineInterfaceObject.cpp\" />",
          "56:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptArrayIterator.cpp\" />",
          "57:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncFromSyncIterator.cpp\" />",
          "58:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptBuiltInFunctions.cpp\" />",
          "59:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptExternalFunction.cpp\" />",
          "60:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptGenerator.cpp\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncFunction.cpp\" />",
          "59:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncGenerator.cpp\" />",
          "60:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncGeneratorFunction.cpp\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:     <ClInclude Include=\"JavascriptArrayIterator.h\" />",
          "200:     <ClInclude Include=\"JavascriptArrayIndexSnapshotEnumerator.h\" />",
          "201:     <ClInclude Include=\"JavascriptAsyncFromSyncIterator.h\" />",
          "202:     <ClInclude Include=\"JavascriptBuiltInFunctionList.h\" />",
          "203:     <ClInclude Include=\"JavascriptBuiltInFunctions.h\" />",
          "204:     <ClInclude Include=\"JavascriptExternalFunction.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     <ClInclude Include=\"JavascriptAsyncFunction.h\" />",
          "206:     <ClInclude Include=\"JavascriptAsyncGenerator.h\" />",
          "207:     <ClInclude Include=\"JavascriptAsyncGeneratorFunction.h\" />",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335:     <Import Project=\"$(VCTargetsPath)\\BuildCustomizations\\masm.targets\" />",
          "336:     <Import Project=\"$(BuildConfig_ARMASM_Path)armasm.targets\" />",
          "337:   </ImportGroup>",
          "",
          "[Removed Lines]",
          "338: </Project>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters||lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters": [
          "File: lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters -> lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     <ClCompile Include=\"$(MsBuildThisFileDirectory)EngineInterfaceObject.cpp\" />",
          "12:     <ClCompile Include=\"$(MsBuildThisFileDirectory)JavascriptArrayIterator.cpp\" />",
          "13:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncFromSyncIterator.cpp\" />",
          "14:     <ClCompile Include=\"$(MsBuildThisFileDirectory)JavascriptBuiltInFunctions.cpp\" />",
          "15:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptExceptionMetadata.cpp\" />",
          "16:     <ClCompile Include=\"$(MsBuildThisFileDirectory)JavascriptExternalFunction.cpp\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncFunction.cpp\" />",
          "15:     <ClCompile Include=\"$(MsBuildThisFileDirectory)JavascriptAsyncGenerator.cpp\" />",
          "16:     <ClCompile Include=\"$(MSBuildThisFileDirectory)JavascriptAsyncGeneratorFunction.cpp\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     <ClInclude Include=\"JavascriptArrayIndexEnumerator.h\" />",
          "129:     <ClInclude Include=\"JavascriptArrayIterator.h\" />",
          "130:     <ClInclude Include=\"JavascriptAsyncFromSyncIterator.h\" />",
          "131:     <ClInclude Include=\"JavascriptBuiltInFunctionList.h\" />",
          "132:     <ClInclude Include=\"JavascriptBuiltInFunctions.h\" />",
          "133:     <ClInclude Include=\"JavascriptExternalFunction.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     <ClInclude Include=\"JavascriptAsyncFuction.h\" />",
          "135:     <ClInclude Include=\"JavascriptAsyncGenerator.h\" />",
          "136:     <ClInclude Include=\"JavascriptAsyncGeneratorFuction.h\" />",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/CustomExternalIterator.cpp||lib/Runtime/Library/CustomExternalIterator.cpp": [
          "File: lib/Runtime/Library/CustomExternalIterator.cpp -> lib/Runtime/Library/CustomExternalIterator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         if (currentIterator->m_nextFunction == nullptr)",
          "183:         {",
          "185:         }",
          "187:         bool ret = false;",
          "",
          "[Removed Lines]",
          "184:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "184:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:         if (!ret)",
          "195:         {",
          "197:         }",
          "199:         Var result;",
          "",
          "[Removed Lines]",
          "196:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "196:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:             result = value;",
          "215:         }",
          "218:     }",
          "219: }",
          "",
          "[Removed Lines]",
          "217:         return library->CreateIteratorResultObjectValueFalse(result);",
          "",
          "[Added Lines]",
          "217:         return library->CreateIteratorResultObject(result);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JavascriptArrayIterator.cpp||lib/Runtime/Library/JavascriptArrayIterator.cpp": [
          "File: lib/Runtime/Library/JavascriptArrayIterator.cpp -> lib/Runtime/Library/JavascriptArrayIterator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         if (iterable == nullptr)",
          "48:         {",
          "50:         }",
          "52:         int64 length;",
          "",
          "[Removed Lines]",
          "49:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "49:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:             iterator->m_iterableObject = nullptr;",
          "86:         }",
          "88:         iterator->m_nextIndex += 1;",
          "90:         if (iterator->m_kind == JavascriptArrayIteratorKind::Key)",
          "91:         {",
          "93:         }",
          "95:         Var value;",
          "",
          "[Removed Lines]",
          "85:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "92:             return library->CreateIteratorResultObjectValueFalse(JavascriptNumber::ToVar(index, scriptContext));",
          "",
          "[Added Lines]",
          "85:             return library->CreateIteratorResultObjectDone();",
          "92:             return library->CreateIteratorResultObject(JavascriptNumber::ToVar(index, scriptContext));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:         if (iterator->m_kind == JavascriptArrayIteratorKind::Value)",
          "112:         {",
          "114:         }",
          "116:         Assert(iterator->m_kind == JavascriptArrayIteratorKind::KeyAndValue);",
          "",
          "[Removed Lines]",
          "113:             return library->CreateIteratorResultObjectValueFalse(value);",
          "",
          "[Added Lines]",
          "113:             return library->CreateIteratorResultObject(value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:         keyValueTuple->SetItem(0, JavascriptNumber::ToVar(index, scriptContext), PropertyOperation_None);",
          "121:         keyValueTuple->SetItem(1, value, PropertyOperation_None);",
          "124:     }",
          "125: } //namespace Js",
          "",
          "[Removed Lines]",
          "123:         return library->CreateIteratorResultObjectValueFalse(keyValueTuple);",
          "",
          "[Added Lines]",
          "123:         return library->CreateIteratorResultObject(keyValueTuple);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptAsyncFunction.cpp||lib/Runtime/Library/JavascriptAsyncFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptAsyncFunction.cpp -> lib/Runtime/Library/JavascriptAsyncFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"RuntimeLibraryPch.h\"",
          "7: using namespace Js;",
          "9: FunctionInfo JavascriptAsyncFunction::functionInfo(",
          "10:     FORCE_NO_WRITE_BARRIER_TAG(JavascriptAsyncFunction::EntryAsyncFunctionImplementation),",
          "11:     (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "13: JavascriptAsyncFunction::JavascriptAsyncFunction(",
          "14:     DynamicType* type,",
          "15:     GeneratorVirtualScriptFunction* scriptFunction) :",
          "16:         JavascriptGeneratorFunction(type, &functionInfo, scriptFunction)",
          "17: {",
          "18:     DebugOnly(VerifyEntryPoint());",
          "19: }",
          "21: JavascriptAsyncFunction* JavascriptAsyncFunction::New(",
          "22:     ScriptContext* scriptContext,",
          "23:     GeneratorVirtualScriptFunction* scriptFunction)",
          "24: {",
          "25:     return scriptContext->GetLibrary()->CreateAsyncFunction(",
          "26:         functionInfo.GetOriginalEntryPoint(),",
          "27:         scriptFunction);",
          "28: }",
          "30: template<>",
          "31: bool Js::VarIsImpl<JavascriptAsyncFunction>(RecyclableObject* obj)",
          "32: {",
          "33:     return VarIs<JavascriptFunction>(obj) && (",
          "34:         VirtualTableInfo<JavascriptAsyncFunction>::HasVirtualTable(obj) ||",
          "35:         VirtualTableInfo<CrossSiteObject<JavascriptAsyncFunction>>::HasVirtualTable(obj)",
          "36:     );",
          "37: }",
          "39: Var JavascriptAsyncFunction::EntryAsyncFunctionImplementation(",
          "40:     RecyclableObject* function,",
          "41:     CallInfo callInfo, ...)",
          "42: {",
          "43:     auto* scriptContext = function->GetScriptContext();",
          "44:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "45:     ARGUMENTS(args, callInfo);",
          "47:     auto* library = scriptContext->GetLibrary();",
          "48:     auto* asyncFn = VarTo<JavascriptAsyncFunction>(function);",
          "49:     auto* scriptFn = asyncFn->GetGeneratorVirtualScriptFunction();",
          "50:     auto* generator = library->CreateGenerator(args, scriptFn, library->GetNull());",
          "51:     auto* promise = library->CreatePromise();",
          "53:     auto* stepFn = library->CreateAsyncSpawnStepFunction(",
          "54:         EntryAsyncSpawnStepNextFunction,",
          "55:         generator,",
          "56:         library->GetUndefined());",
          "58:     JavascriptExceptionObject* exception = nullptr;",
          "59:     JavascriptPromiseResolveOrRejectFunction* resolve;",
          "60:     JavascriptPromiseResolveOrRejectFunction* reject;",
          "61:     JavascriptPromise::InitializePromise(promise, &resolve, &reject, scriptContext);",
          "63:     try",
          "64:     {",
          "65:         AsyncSpawnStep(stepFn, generator, resolve, reject);",
          "66:     }",
          "67:     catch (const JavascriptException& err)",
          "68:     {",
          "69:         exception = err.GetAndClear();",
          "70:     }",
          "72:     if (exception != nullptr)",
          "73:         JavascriptPromise::TryRejectWithExceptionObject(exception, reject, scriptContext);",
          "75:     return promise;",
          "76: }",
          "78: Var JavascriptAsyncFunction::EntryAsyncSpawnStepNextFunction(",
          "79:     RecyclableObject* function,",
          "80:     CallInfo callInfo, ...)",
          "81: {",
          "82:     auto* scriptContext = function->GetScriptContext();",
          "83:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "84:     auto* stepFn = VarTo<JavascriptAsyncSpawnStepFunction>(function);",
          "85:     return stepFn->generator->CallGenerator(stepFn->argument, ResumeYieldKind::Normal);",
          "86: }",
          "88: Var JavascriptAsyncFunction::EntryAsyncSpawnStepThrowFunction(",
          "89:     RecyclableObject* function,",
          "90:     CallInfo callInfo, ...)",
          "91: {",
          "92:     auto* scriptContext = function->GetScriptContext();",
          "93:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "95:     auto* stepFn = VarTo<JavascriptAsyncSpawnStepFunction>(function);",
          "96:     return stepFn->generator->CallGenerator(stepFn->argument, ResumeYieldKind::Throw);",
          "97: }",
          "99: Var JavascriptAsyncFunction::EntryAsyncSpawnCallStepFunction(",
          "100:     RecyclableObject* function,",
          "101:     CallInfo callInfo, ...)",
          "102: {",
          "103:     auto* scriptContext = function->GetScriptContext();",
          "104:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "105:     ARGUMENTS(args, callInfo);",
          "107:     auto* library = scriptContext->GetLibrary();",
          "108:     Var undefinedVar = library->GetUndefined();",
          "109:     Var resolvedValue = args.Info.Count > 1 ? args[1] : undefinedVar;",
          "111:     auto* stepFn = VarTo<JavascriptAsyncSpawnStepFunction>(function);",
          "113:     JavascriptMethod method = stepFn->isReject",
          "114:         ? EntryAsyncSpawnStepThrowFunction",
          "115:         : EntryAsyncSpawnStepNextFunction;",
          "117:     auto* nextStepFn = library->CreateAsyncSpawnStepFunction(",
          "118:         method,",
          "119:         stepFn->generator,",
          "120:         resolvedValue);",
          "122:     AsyncSpawnStep(nextStepFn, stepFn->generator, stepFn->resolve, stepFn->reject);",
          "123:     return undefinedVar;",
          "124: }",
          "126: void JavascriptAsyncFunction::AsyncSpawnStep(",
          "127:     JavascriptAsyncSpawnStepFunction* stepFunction,",
          "128:     JavascriptGenerator* generator,",
          "129:     Var resolve,",
          "130:     Var reject)",
          "131: {",
          "132:     ScriptContext* scriptContext = generator->GetScriptContext();",
          "133:     BEGIN_SAFE_REENTRANT_REGION(scriptContext->GetThreadContext())",
          "135:     JavascriptLibrary* library = scriptContext->GetLibrary();",
          "136:     Var undefinedVar = library->GetUndefined();",
          "138:     JavascriptExceptionObject* exception = nullptr;",
          "139:     RecyclableObject* result = nullptr;",
          "141:     try",
          "142:     {",
          "143:         Var resultVar = CALL_FUNCTION(",
          "144:             scriptContext->GetThreadContext(),",
          "145:             stepFunction,",
          "146:             CallInfo(CallFlags_Value, 1),",
          "147:             undefinedVar);",
          "149:         result = VarTo<RecyclableObject>(resultVar);",
          "150:     }",
          "151:     catch (const JavascriptException& err)",
          "152:     {",
          "153:         exception = err.GetAndClear();",
          "154:     }",
          "156:     if (exception != nullptr)",
          "157:     {",
          "159:         JavascriptPromise::TryRejectWithExceptionObject(exception, reject, scriptContext);",
          "160:         return;",
          "161:     }",
          "163:     Assert(result != nullptr);",
          "165:     Var value = JavascriptOperators::GetProperty(result, PropertyIds::value, scriptContext);",
          "168:     if (generator->IsCompleted())",
          "169:     {",
          "170:         if (!JavascriptConversion::IsCallable(resolve))",
          "171:             JavascriptError::ThrowTypeError(scriptContext, JSERR_NeedFunction);",
          "173:         CALL_FUNCTION(",
          "174:             scriptContext->GetThreadContext(),",
          "175:             VarTo<RecyclableObject>(resolve),",
          "176:             CallInfo(CallFlags_Value, 2),",
          "177:             undefinedVar,",
          "178:             value);",
          "180:         return;",
          "181:     }",
          "182:     else",
          "183:     {",
          "184:         Assert(JavascriptOperators::GetTypeId(result) == TypeIds_AwaitObject);",
          "185:     }",
          "189:     auto* successFunction = library->CreateAsyncSpawnStepFunction(",
          "190:         EntryAsyncSpawnCallStepFunction,",
          "191:         generator,",
          "192:         undefinedVar,",
          "193:         resolve,",
          "194:         reject);",
          "196:     auto* failFunction = library->CreateAsyncSpawnStepFunction(",
          "197:         EntryAsyncSpawnCallStepFunction,",
          "198:         generator,",
          "199:         undefinedVar,",
          "200:         resolve,",
          "201:         reject,",
          "202:         true);",
          "204:     auto* promise = JavascriptPromise::InternalPromiseResolve(value, scriptContext);",
          "205:     auto* unused = JavascriptPromise::UnusedPromiseCapability(scriptContext);",
          "207:     JavascriptPromise::PerformPromiseThen(",
          "208:         promise,",
          "209:         unused,",
          "210:         successFunction,",
          "211:         failFunction,",
          "212:         scriptContext);",
          "214:     END_SAFE_REENTRANT_REGION",
          "215: }",
          "217: template<>",
          "218: bool Js::VarIsImpl<JavascriptAsyncSpawnStepFunction>(RecyclableObject* obj)",
          "219: {",
          "220:     return VarIs<JavascriptFunction>(obj) && (",
          "221:         VirtualTableInfo<JavascriptAsyncSpawnStepFunction>::HasVirtualTable(obj) ||",
          "222:         VirtualTableInfo<CrossSiteObject<JavascriptAsyncSpawnStepFunction>>::HasVirtualTable(obj)",
          "223:     );",
          "224: }",
          "226: #if ENABLE_TTD",
          "228: TTD::NSSnapObjects::SnapObjectType JavascriptAsyncFunction::GetSnapTag_TTD() const",
          "229: {",
          "230:     return TTD::NSSnapObjects::SnapObjectType::SnapAsyncFunction;",
          "231: }",
          "233: void JavascriptAsyncFunction::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "234: {",
          "235:     TTD::NSSnapObjects::SnapGeneratorFunctionInfo* fi = nullptr;",
          "236:     uint32 depCount = 0;",
          "237:     TTD_PTR_ID* depArray = nullptr;",
          "239:     this->CreateSnapObjectInfo(alloc, &fi, &depArray, &depCount);",
          "241:     if (depCount == 0)",
          "242:     {",
          "243:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::SnapAsyncFunction>(objData, fi);",
          "244:     }",
          "245:     else",
          "246:     {",
          "247:         TTDAssert(depArray != nullptr, \"depArray should be non-null if depCount is > 0\");",
          "248:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::SnapAsyncFunction>(objData, fi, alloc, depCount, depArray);",
          "249:     }",
          "250: }",
          "252: void JavascriptAsyncSpawnStepFunction::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "253: {",
          "254:     if (this->generator != nullptr)",
          "255:     {",
          "256:         extractor->MarkVisitVar(this->generator);",
          "257:     }",
          "259:     if (this->reject != nullptr)",
          "260:     {",
          "261:         extractor->MarkVisitVar(this->reject);",
          "262:     }",
          "264:     if (this->resolve != nullptr)",
          "265:     {",
          "266:         extractor->MarkVisitVar(this->resolve);",
          "267:     }",
          "269:     if (this->argument != nullptr)",
          "270:     {",
          "271:         extractor->MarkVisitVar(this->argument);",
          "272:     }",
          "273: }",
          "275: TTD::NSSnapObjects::SnapObjectType JavascriptAsyncSpawnStepFunction::GetSnapTag_TTD() const",
          "276: {",
          "277:     return TTD::NSSnapObjects::SnapObjectType::JavascriptAsyncSpawnStepFunction;",
          "278: }",
          "280: void JavascriptAsyncSpawnStepFunction::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "281: {",
          "282:     TTD::NSSnapObjects::SnapJavascriptAsyncSpawnStepFunctionInfo* info = alloc.SlabAllocateStruct<TTD::NSSnapObjects::SnapJavascriptAsyncSpawnStepFunctionInfo>();",
          "283:     info->generator = TTD_CONVERT_VAR_TO_PTR_ID(this->generator);",
          "284:     info->reject = this->reject;",
          "285:     info->resolve = this->resolve;",
          "286:     info->argument = this->argument;",
          "287:     info->isReject = this->isReject;",
          "289:     info->entryPoint = 0;",
          "290:     JavascriptMethod entryPoint = this->GetFunctionInfo()->GetOriginalEntryPoint();",
          "291:     if (entryPoint == JavascriptAsyncFunction::EntryAsyncSpawnStepNextFunction)",
          "292:     {",
          "293:         info->entryPoint = 1;",
          "294:     }",
          "295:     else if (entryPoint == JavascriptAsyncFunction::EntryAsyncSpawnStepThrowFunction)",
          "296:     {",
          "297:         info->entryPoint = 2;",
          "298:     }",
          "299:     else if (entryPoint == JavascriptAsyncFunction::EntryAsyncSpawnCallStepFunction)",
          "300:     {",
          "301:         info->entryPoint = 3;",
          "302:     }",
          "303:     else",
          "304:     {",
          "305:         TTDAssert(false, \"Unexpected entrypoint found JavascriptAsyncSpawnStepArgumentExecutorFunction\");",
          "306:     }",
          "308:     const uint32 maxDeps = 4;",
          "309:     uint32 depCount = 0;",
          "310:     TTD_PTR_ID* depArray = alloc.SlabReserveArraySpace<TTD_PTR_ID>(maxDeps);",
          "311:     if (this->reject != nullptr &&  TTD::JsSupport::IsVarComplexKind(this->reject))",
          "312:     {",
          "313:         depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->reject);",
          "314:         depCount++;",
          "315:     }",
          "317:     if (this->resolve != nullptr &&  TTD::JsSupport::IsVarComplexKind(this->resolve))",
          "318:     {",
          "319:         depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->resolve);",
          "320:         depCount++;",
          "321:     }",
          "323:     if (this->argument != nullptr &&  TTD::JsSupport::IsVarComplexKind(this->argument))",
          "324:     {",
          "325:         depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->argument);",
          "326:         depCount++;",
          "327:     }",
          "329:     if (this->generator != nullptr)",
          "330:     {",
          "331:         depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->generator);",
          "332:         depCount++;",
          "333:     }",
          "335:     if (depCount > 0)",
          "336:     {",
          "337:         alloc.SlabCommitArraySpace<TTD_PTR_ID>(depCount, maxDeps);",
          "338:     }",
          "339:     else",
          "340:     {",
          "341:         alloc.SlabAbortArraySpace<TTD_PTR_ID>(maxDeps);",
          "342:     }",
          "344:     if (depCount == 0)",
          "345:     {",
          "346:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapJavascriptAsyncSpawnStepFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::JavascriptAsyncSpawnStepFunction>(objData, info);",
          "347:     }",
          "348:     else",
          "349:     {",
          "350:         TTDAssert(depArray != nullptr, \"depArray should be non-null if depCount is > 0\");",
          "351:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapJavascriptAsyncSpawnStepFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::JavascriptAsyncSpawnStepFunction>(objData, info, alloc, depCount, depArray);",
          "352:     }",
          "353: }",
          "355: #endif",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptAsyncFunction.h||lib/Runtime/Library/JavascriptAsyncFunction.h": [
          "File: lib/Runtime/Library/JavascriptAsyncFunction.h -> lib/Runtime/Library/JavascriptAsyncFunction.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #pragma once",
          "7: namespace Js",
          "8: {",
          "10: class JavascriptAsyncFunction : public JavascriptGeneratorFunction",
          "11: {",
          "12: private:",
          "13:     static FunctionInfo functionInfo;",
          "15:     DEFINE_VTABLE_CTOR(JavascriptAsyncFunction, JavascriptGeneratorFunction);",
          "16:     DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptAsyncFunction);",
          "18: protected:",
          "19:     JavascriptAsyncFunction(DynamicType* type);",
          "21: public:",
          "22:     JavascriptAsyncFunction(DynamicType* type, GeneratorVirtualScriptFunction* scriptFunction);",
          "24:     static JavascriptAsyncFunction* New(",
          "25:         ScriptContext* scriptContext,",
          "26:         GeneratorVirtualScriptFunction* scriptFunction);",
          "28:     static Var EntryAsyncFunctionImplementation(",
          "29:         RecyclableObject* function,",
          "30:         CallInfo callInfo, ...);",
          "32:     static Var EntryAsyncSpawnExecutorFunction(",
          "33:         RecyclableObject* function,",
          "34:         CallInfo callInfo, ...);",
          "36:     static Var EntryAsyncSpawnStepNextFunction(",
          "37:         RecyclableObject* function,",
          "38:         CallInfo callInfo, ...);",
          "40:     static Var EntryAsyncSpawnStepThrowFunction(",
          "41:         RecyclableObject* function,",
          "42:         CallInfo callInfo, ...);",
          "44:     static Var EntryAsyncSpawnCallStepFunction(",
          "45:         RecyclableObject* function,",
          "46:         CallInfo callInfo, ...);",
          "48:     static bool Test(JavascriptFunction *obj)",
          "49:     {",
          "50:         return",
          "51:             VirtualTableInfo<JavascriptAsyncFunction>::HasVirtualTable(obj) ||",
          "52:             VirtualTableInfo<CrossSiteObject<JavascriptAsyncFunction>>::HasVirtualTable(obj);",
          "53:     }",
          "55: #if ENABLE_TTD",
          "56:     virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "57:     virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "58: #endif",
          "60:     virtual VTableValue DummyVirtualFunctionToHinderLinkerICF()",
          "61:     {",
          "62:         return VTableValue::VtableJavascriptAsyncFunction;",
          "63:     }",
          "65: private:",
          "66:     static void AsyncSpawnStep(",
          "67:         JavascriptAsyncSpawnStepFunction* nextFunction,",
          "68:         JavascriptGenerator* generator,",
          "69:         Var resolve,",
          "70:         Var reject);",
          "71: };",
          "73: template<>",
          "74: bool VarIsImpl<JavascriptAsyncFunction>(RecyclableObject* obj);",
          "76: class JavascriptAsyncSpawnStepFunction : public RuntimeFunction",
          "77: {",
          "78: protected:",
          "79:     DEFINE_VTABLE_CTOR(JavascriptAsyncSpawnStepFunction, RuntimeFunction);",
          "80:     DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptAsyncSpawnStepFunction);",
          "82: public:",
          "83:     JavascriptAsyncSpawnStepFunction(",
          "84:         DynamicType* type,",
          "85:         FunctionInfo* functionInfo,",
          "86:         JavascriptGenerator* generator,",
          "87:         Var argument,",
          "88:         Var resolve = nullptr,",
          "89:         Var reject = nullptr,",
          "90:         bool isReject = false) :",
          "91:             RuntimeFunction(type, functionInfo),",
          "92:             generator(generator),",
          "93:             argument(argument),",
          "94:             resolve(resolve),",
          "95:             reject(reject),",
          "96:             isReject(isReject) {}",
          "98:     Field(JavascriptGenerator*) generator;",
          "99:     Field(Var) reject;",
          "100:     Field(Var) resolve;",
          "101:     Field(bool) isReject;",
          "102:     Field(Var) argument;",
          "104: #if ENABLE_TTD",
          "105:     virtual void MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor) override;",
          "106:     virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "107:     virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "108: #endif",
          "109: };",
          "111: template<>",
          "112: bool VarIsImpl<JavascriptAsyncSpawnStepFunction>(RecyclableObject* obj);",
          "114: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptAsyncGenerator.cpp||lib/Runtime/Library/JavascriptAsyncGenerator.cpp": [
          "File: lib/Runtime/Library/JavascriptAsyncGenerator.cpp -> lib/Runtime/Library/JavascriptAsyncGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"RuntimeLibraryPch.h\"",
          "6: #include \"Language/InterpreterStackFrame.h\"",
          "8: using namespace Js;",
          "10: JavascriptAsyncGenerator* JavascriptAsyncGenerator::New(",
          "11:     Recycler* recycler,",
          "12:     DynamicType* generatorType,",
          "13:     Arguments& args,",
          "14:     ScriptFunction* scriptFunction)",
          "15: {",
          "16:     auto* requestQueue = RecyclerNew(recycler, JavascriptAsyncGenerator::RequestQueue, recycler);",
          "18:     return RecyclerNew(",
          "19:         recycler,",
          "20:         JavascriptAsyncGenerator,",
          "21:         generatorType,",
          "22:         args,",
          "23:         scriptFunction,",
          "24:         requestQueue);",
          "25: }",
          "27: Var JavascriptAsyncGenerator::EntryNext(RecyclableObject* function, CallInfo callInfo, ...)",
          "28: {",
          "29:     PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "31:     ARGUMENTS(args, callInfo);",
          "32:     auto* scriptContext = function->GetScriptContext();",
          "33:     auto* library = scriptContext->GetLibrary();",
          "35:     AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"AsyncGenerator.prototype.next\"));",
          "37:     Var thisValue = args[0];",
          "38:     Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "40:     return EnqueueRequest(",
          "41:         thisValue,",
          "42:         scriptContext,",
          "43:         input,",
          "44:         ResumeYieldKind::Normal,",
          "45:         _u(\"AsyncGenerator.prototype.next\"));",
          "46: }",
          "48: Var JavascriptAsyncGenerator::EntryReturn(RecyclableObject* function, CallInfo callInfo, ...)",
          "49: {",
          "50:     PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "52:     ARGUMENTS(args, callInfo);",
          "53:     auto* scriptContext = function->GetScriptContext();",
          "54:     auto* library = scriptContext->GetLibrary();",
          "56:     AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"AsyncGenerator.prototype.return\"));",
          "58:     Var thisValue = args[0];",
          "59:     Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "61:     return EnqueueRequest(",
          "62:         thisValue,",
          "63:         scriptContext,",
          "64:         input,",
          "65:         ResumeYieldKind::Return,",
          "66:         _u(\"AsyncGenerator.prototype.return\"));",
          "67: }",
          "69: Var JavascriptAsyncGenerator::EntryThrow(RecyclableObject* function, CallInfo callInfo, ...)",
          "70: {",
          "71:     PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "73:     ARGUMENTS(args, callInfo);",
          "74:     auto* scriptContext = function->GetScriptContext();",
          "75:     auto* library = scriptContext->GetLibrary();",
          "77:     AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"AsyncGenerator.prototype.throw\"));",
          "79:     Var thisValue = args[0];",
          "80:     Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "82:     return EnqueueRequest(",
          "83:         thisValue,",
          "84:         scriptContext,",
          "85:         input,",
          "86:         ResumeYieldKind::Throw,",
          "87:         _u(\"AsyncGenerator.prototype.throw\"));",
          "88: }",
          "90: Var JavascriptAsyncGenerator::EntryAwaitFulfilledCallback(",
          "91:     RecyclableObject* function,",
          "92:     CallInfo callInfo, ...)",
          "93: {",
          "94:     auto* scriptContext = function->GetScriptContext();",
          "96:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "97:     ARGUMENTS(args, callInfo);",
          "99:     AssertOrFailFast(args.Info.Count > 1);",
          "101:     Var value = args[1];",
          "102:     auto* callbackFn = VarTo<AsyncGeneratorCallbackFunction>(function);",
          "103:     JavascriptAsyncGenerator* generator = callbackFn->generator;",
          "105:     PendingState state = generator->pendingState;",
          "106:     generator->pendingState = PendingState::None;",
          "108:     switch (state)",
          "109:     {",
          "110:         case PendingState::Await:",
          "111:             generator->ResumeCoroutine(value, ResumeYieldKind::Normal);",
          "112:             break;",
          "113:         case PendingState::AwaitReturn:",
          "114:             generator->ResumeCoroutine(value, ResumeYieldKind::Return);",
          "115:             break;",
          "116:         case PendingState::Yield:",
          "117:             generator->ResolveNext(value);",
          "118:             break;",
          "119:         default:",
          "120:             AssertMsg(false, \"Expected an async generator pending state\");",
          "121:             break;",
          "122:     }",
          "124:     return scriptContext->GetLibrary()->GetUndefined();",
          "125: }",
          "127: Var JavascriptAsyncGenerator::EntryAwaitRejectedCallback(",
          "128:     RecyclableObject* function,",
          "129:     CallInfo callInfo, ...)",
          "130: {",
          "131:     auto* scriptContext = function->GetScriptContext();",
          "133:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "134:     ARGUMENTS(args, callInfo);",
          "136:     AssertOrFailFast(args.Info.Count > 1);",
          "138:     Var value = args[1];",
          "139:     auto* callbackFn = VarTo<AsyncGeneratorCallbackFunction>(function);",
          "140:     JavascriptAsyncGenerator* generator = callbackFn->generator;",
          "142:     PendingState state = generator->pendingState;",
          "143:     generator->pendingState = PendingState::None;",
          "145:     switch (state)",
          "146:     {",
          "147:         case PendingState::Await:",
          "148:         case PendingState::AwaitReturn:",
          "149:             generator->ResumeCoroutine(value, ResumeYieldKind::Throw);",
          "150:             break;",
          "151:         case PendingState::Yield:",
          "152:             generator->RejectNext(value);",
          "153:             break;",
          "154:         default:",
          "155:             AssertMsg(false, \"Expected an async generator pending state\");",
          "156:             break;",
          "157:     }",
          "159:     return scriptContext->GetLibrary()->GetUndefined();",
          "160: }",
          "162: Var JavascriptAsyncGenerator::EnqueueRequest(",
          "163:     Var thisValue,",
          "164:     ScriptContext* scriptContext,",
          "165:     Var input,",
          "166:     ResumeYieldKind resumeKind,",
          "167:     const char16* apiNameForErrorMessage)",
          "168: {",
          "169:     auto* promise = JavascriptPromise::CreateEnginePromise(scriptContext);",
          "171:     if (!VarIs<JavascriptAsyncGenerator>(thisValue))",
          "172:     {",
          "173:         auto* library = scriptContext->GetLibrary();",
          "174:         auto* error = library->CreateTypeError();",
          "176:         JavascriptError::SetErrorMessage(",
          "177:             error,",
          "178:             JSERR_NeedObjectOfType,",
          "179:             apiNameForErrorMessage,",
          "180:             scriptContext);",
          "182:         promise->Reject(error, scriptContext);",
          "183:     }",
          "184:     else",
          "185:     {",
          "186:         auto* request = RecyclerNew(",
          "187:             scriptContext->GetRecycler(),",
          "188:             AsyncGeneratorRequest,",
          "189:             input,",
          "190:             resumeKind,",
          "191:             promise);",
          "193:         auto* generator = UnsafeVarTo<JavascriptAsyncGenerator>(thisValue);",
          "194:         generator->PushRequest(request);",
          "195:         generator->ResumeNext();",
          "196:     }",
          "198:     return promise;",
          "199: }",
          "201: void JavascriptAsyncGenerator::ResumeNext()",
          "202: {",
          "203:     if (IsExecuting() || this->pendingState != PendingState::None || !HasRequest())",
          "204:         return;",
          "206:     auto* scriptContext = GetScriptContext();",
          "207:     auto* library = scriptContext->GetLibrary();",
          "209:     AsyncGeneratorRequest* next = PeekRequest();",
          "211:     if (next->kind != ResumeYieldKind::Normal)",
          "212:     {",
          "213:         if (IsSuspendedStart())",
          "214:             SetCompleted();",
          "216:         if (next->kind == ResumeYieldKind::Return)",
          "217:         {",
          "218:             if (IsCompleted()) UnwrapValue(next->data, PendingState::Yield);",
          "219:             else UnwrapValue(next->data, PendingState::AwaitReturn);",
          "220:         }",
          "221:         else",
          "222:         {",
          "223:             if (IsCompleted()) RejectNext(next->data);",
          "224:             else ResumeCoroutine(next->data, next->kind);",
          "225:         }",
          "226:     }",
          "227:     else",
          "228:     {",
          "229:         if (IsCompleted()) ResolveNext(library->GetUndefined());",
          "230:         else ResumeCoroutine(next->data, next->kind);",
          "231:     }",
          "232: }",
          "234: void JavascriptAsyncGenerator::ResumeCoroutine(Var value, ResumeYieldKind resumeKind)",
          "235: {",
          "236:     Assert(this->pendingState == PendingState::None);",
          "238:     RecyclableObject* result = nullptr;",
          "240:     try",
          "241:     {",
          "243:         result = VarTo<RecyclableObject>(this->CallGenerator(value, resumeKind));",
          "244:     }",
          "245:     catch (const JavascriptException& err)",
          "246:     {",
          "247:         RejectNext(err.GetAndClear()->GetThrownObject(nullptr));",
          "248:         return;",
          "249:     }",
          "251:     Var resultValue = JavascriptOperators::GetProperty(",
          "252:         result,",
          "253:         PropertyIds::value,",
          "254:         GetScriptContext());",
          "256:     if (JavascriptOperators::GetTypeId(result) == TypeIds_AwaitObject)",
          "257:     {",
          "258:         UnwrapValue(resultValue, PendingState::Await);",
          "259:         return;",
          "260:     }",
          "262:     if (IsCompleted())",
          "263:     {",
          "267:         ResolveNext(resultValue);",
          "268:     }",
          "269:     else",
          "270:     {",
          "272:         UnwrapValue(resultValue, PendingState::Yield);",
          "273:     }",
          "274: }",
          "276: void JavascriptAsyncGenerator::ResolveNext(Var value)",
          "277: {",
          "278:     auto* scriptContext = GetScriptContext();",
          "279:     auto* library = scriptContext->GetLibrary();",
          "280:     Var result = library->CreateIteratorResultObject(value, IsCompleted());",
          "281:     ShiftRequest()->promise->Resolve(result, scriptContext);",
          "282:     ResumeNext();",
          "283: }",
          "285: void JavascriptAsyncGenerator::RejectNext(Var reason)",
          "286: {",
          "287:     SetCompleted();",
          "288:     ShiftRequest()->promise->Reject(reason, GetScriptContext());",
          "289:     ResumeNext();",
          "290: }",
          "292: void JavascriptAsyncGenerator::UnwrapValue(Var value, PendingState pendingState)",
          "293: {",
          "294:     this->pendingState = pendingState;",
          "296:     auto* scriptContext = GetScriptContext();",
          "297:     auto* library = scriptContext->GetLibrary();",
          "298:     auto* promise = JavascriptPromise::InternalPromiseResolve(value, scriptContext);",
          "299:     auto* unused = JavascriptPromise::UnusedPromiseCapability(scriptContext);",
          "301:     auto* onFulfilled = library->CreateAsyncGeneratorCallbackFunction(",
          "302:         EntryAwaitFulfilledCallback,",
          "303:         this);",
          "305:     auto* onRejected = library->CreateAsyncGeneratorCallbackFunction(",
          "306:         EntryAwaitRejectedCallback,",
          "307:         this);",
          "309:     JavascriptPromise::PerformPromiseThen(promise, unused, onFulfilled, onRejected, scriptContext);",
          "310: }",
          "312: template<>",
          "313: bool Js::VarIsImpl<JavascriptAsyncGenerator>(RecyclableObject* obj)",
          "314: {",
          "315:     return JavascriptOperators::GetTypeId(obj) == TypeIds_AsyncGenerator;",
          "316: }",
          "318: template<>",
          "319: bool Js::VarIsImpl<AsyncGeneratorCallbackFunction>(RecyclableObject* obj)",
          "320: {",
          "321:     return VarIs<JavascriptFunction>(obj) && (",
          "322:         VirtualTableInfo<AsyncGeneratorCallbackFunction>::HasVirtualTable(obj) ||",
          "323:         VirtualTableInfo<CrossSiteObject<AsyncGeneratorCallbackFunction>>::HasVirtualTable(obj)",
          "324:     );",
          "325: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptAsyncGenerator.h||lib/Runtime/Library/JavascriptAsyncGenerator.h": [
          "File: lib/Runtime/Library/JavascriptAsyncGenerator.h -> lib/Runtime/Library/JavascriptAsyncGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #pragma once",
          "7: namespace Js",
          "8: {",
          "10: class JavascriptAsyncGenerator : public JavascriptGenerator",
          "11: {",
          "12:     struct AsyncGeneratorRequest",
          "13:     {",
          "14:         Field(Var) data;",
          "15:         Field(ResumeYieldKind) kind;",
          "16:         Field(JavascriptPromise*) promise;",
          "18:         AsyncGeneratorRequest(Var data, ResumeYieldKind kind, JavascriptPromise* promise) :",
          "19:             data(data),",
          "20:             kind(kind),",
          "21:             promise(promise) {}",
          "22:     };",
          "24:     using RequestQueue = DList<AsyncGeneratorRequest*, Recycler>;",
          "26:     enum class PendingState",
          "27:     {",
          "28:         None,",
          "29:         Await,",
          "30:         AwaitReturn,",
          "31:         Yield",
          "32:     };",
          "34: private:",
          "35:     DEFINE_VTABLE_CTOR(JavascriptAsyncGenerator, JavascriptGenerator);",
          "36:     DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptAsyncGenerator);",
          "38:     Field(RequestQueue*) requestQueue;",
          "39:     Field(PendingState) pendingState = PendingState::None;",
          "41:     JavascriptAsyncGenerator(",
          "42:         DynamicType* type,",
          "43:         Arguments& args,",
          "44:         ScriptFunction* scriptFunction,",
          "45:         RequestQueue* requestQueue) :",
          "46:             JavascriptGenerator(type, args, scriptFunction),",
          "47:             requestQueue(requestQueue) {}",
          "49: public:",
          "50:     static JavascriptAsyncGenerator* New(",
          "51:         Recycler* recycler,",
          "52:         DynamicType* generatorType,",
          "53:         Arguments& args,",
          "54:         ScriptFunction* scriptFunction);",
          "56:     void PushRequest(AsyncGeneratorRequest* request)",
          "57:     {",
          "58:         requestQueue->Append(request);",
          "59:     }",
          "61:     AsyncGeneratorRequest* ShiftRequest()",
          "62:     {",
          "63:         Assert(!requestQueue->Empty());",
          "64:         AsyncGeneratorRequest* request = requestQueue->Head();",
          "65:         requestQueue->RemoveHead();",
          "66:         return request;",
          "67:     }",
          "69:     AsyncGeneratorRequest* PeekRequest()",
          "70:     {",
          "71:         Assert(!requestQueue->Empty());",
          "72:         return requestQueue->Head();",
          "73:     }",
          "75:     bool HasRequest()",
          "76:     {",
          "77:         return !requestQueue->Empty();",
          "78:     }",
          "80:     void ResumeNext();",
          "81:     void ResumeCoroutine(Var value, ResumeYieldKind resumeKind);",
          "82:     void ResolveNext(Var value);",
          "83:     void RejectNext(Var reason);",
          "84:     void UnwrapValue(Var value, PendingState pendingState);",
          "86:     class EntryInfo",
          "87:     {",
          "88:     public:",
          "89:         static FunctionInfo Next;",
          "90:         static FunctionInfo Return;",
          "91:         static FunctionInfo Throw;",
          "92:     };",
          "94:     static Var EntryNext(RecyclableObject* function, CallInfo callInfo, ...);",
          "95:     static Var EntryReturn(RecyclableObject* function, CallInfo callInfo, ...);",
          "96:     static Var EntryThrow(RecyclableObject* function, CallInfo callInfo, ...);",
          "98:     static Var EntryAwaitFulfilledCallback(RecyclableObject* function, CallInfo callInfo, ...);",
          "99:     static Var EntryAwaitRejectedCallback(RecyclableObject* function, CallInfo callInfo, ...);",
          "101:     static Var EnqueueRequest(",
          "102:         Var thisValue,",
          "103:         ScriptContext* scriptContext,",
          "104:         Var input,",
          "105:         ResumeYieldKind resumeKind,",
          "106:         const char16* apiNameForErrorMessage);",
          "107: };",
          "109: template<>",
          "110: bool VarIsImpl<JavascriptAsyncGenerator>(RecyclableObject* obj);",
          "112: class AsyncGeneratorCallbackFunction : public RuntimeFunction",
          "113: {",
          "114: protected:",
          "115:     DEFINE_VTABLE_CTOR(AsyncGeneratorCallbackFunction, RuntimeFunction);",
          "116:     DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(AsyncGeneratorCallbackFunction);",
          "118: public:",
          "119:     AsyncGeneratorCallbackFunction(",
          "120:         DynamicType* type,",
          "121:         FunctionInfo* functionInfo,",
          "122:         JavascriptAsyncGenerator* generator) :",
          "123:             RuntimeFunction(type, functionInfo),",
          "124:             generator(generator) {}",
          "126:     Field(JavascriptAsyncGenerator*) generator;",
          "127: };",
          "129: template<>",
          "130: bool VarIsImpl<AsyncGeneratorCallbackFunction>(RecyclableObject* obj);",
          "132: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp||lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp -> lib/Runtime/Library/JavascriptAsyncGeneratorFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"RuntimeLibraryPch.h\"",
          "7: using namespace Js;",
          "9: FunctionInfo JavascriptAsyncGeneratorFunction::functionInfo(",
          "10:     FORCE_NO_WRITE_BARRIER_TAG(",
          "11:         JavascriptAsyncGeneratorFunction::EntryAsyncGeneratorFunctionImplementation),",
          "12:     (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "14: JavascriptAsyncGeneratorFunction::JavascriptAsyncGeneratorFunction(",
          "15:     DynamicType* type,",
          "16:     GeneratorVirtualScriptFunction* scriptFunction) :",
          "17:         JavascriptGeneratorFunction(type, &functionInfo, scriptFunction)",
          "18: {",
          "19:     DebugOnly(VerifyEntryPoint());",
          "20: }",
          "22: JavascriptAsyncGeneratorFunction* JavascriptAsyncGeneratorFunction::New(",
          "23:     ScriptContext* scriptContext,",
          "24:     GeneratorVirtualScriptFunction* scriptFunction)",
          "25: {",
          "26:     return scriptContext->GetLibrary()->CreateAsyncGeneratorFunction(",
          "27:         functionInfo.GetOriginalEntryPoint(),",
          "28:         scriptFunction);",
          "29: }",
          "31: template<>",
          "32: bool Js::VarIsImpl<JavascriptAsyncGeneratorFunction>(RecyclableObject* obj)",
          "33: {",
          "34:     return VarIs<JavascriptFunction>(obj) && (",
          "35:         VirtualTableInfo<JavascriptAsyncGeneratorFunction>::HasVirtualTable(obj) ||",
          "36:         VirtualTableInfo<CrossSiteObject<JavascriptAsyncGeneratorFunction>>::HasVirtualTable(obj)",
          "37:     );",
          "38: }",
          "40: Var JavascriptAsyncGeneratorFunction::EntryAsyncGeneratorFunctionImplementation(",
          "41:     RecyclableObject* function,",
          "42:     CallInfo callInfo, ...)",
          "43: {",
          "44:     auto* scriptContext = function->GetScriptContext();",
          "45:     PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "46:     ARGUMENTS(args, callInfo);",
          "48:     Assert(!(callInfo.Flags & CallFlags_New));",
          "50:     auto* asyncGeneratorFn = VarTo<JavascriptAsyncGeneratorFunction>(function);",
          "51:     auto* library = scriptContext->GetLibrary();",
          "52:     auto* prototype = library->CreateAsyncGeneratorConstructorPrototypeObject();",
          "53:     auto* scriptFn = asyncGeneratorFn->GetGeneratorVirtualScriptFunction();",
          "54:     auto* generator = library->CreateAsyncGenerator(args, scriptFn, prototype);",
          "57:     BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "58:     {",
          "59:         generator->CallGenerator(library->GetUndefined(), ResumeYieldKind::Normal);",
          "60:     }",
          "61:     END_SAFE_REENTRANT_CALL",
          "63:     generator->SetSuspendedStart();",
          "66:     JavascriptOperators::OrdinaryCreateFromConstructor(",
          "67:         function,",
          "68:         generator,",
          "69:         prototype,",
          "70:         scriptContext);",
          "72:     return generator;",
          "73: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h||lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h": [
          "File: lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h -> lib/Runtime/Library/JavascriptAsyncGeneratorFunction.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #pragma once",
          "7: namespace Js",
          "8: {",
          "10: class JavascriptAsyncGeneratorFunction : public JavascriptGeneratorFunction",
          "11: {",
          "12:   private:",
          "13:       static FunctionInfo functionInfo;",
          "15:       DEFINE_VTABLE_CTOR(JavascriptAsyncGeneratorFunction, JavascriptGeneratorFunction);",
          "16:       DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptAsyncGeneratorFunction);",
          "18:   protected:",
          "19:       JavascriptAsyncGeneratorFunction(DynamicType* type);",
          "21:   public:",
          "22:       JavascriptAsyncGeneratorFunction(",
          "23:           DynamicType* type,",
          "24:           GeneratorVirtualScriptFunction* scriptFunction);",
          "26:       static JavascriptAsyncGeneratorFunction* New(",
          "27:           ScriptContext* scriptContext,",
          "28:           GeneratorVirtualScriptFunction* scriptFunction);",
          "30:       static Var EntryAsyncGeneratorFunctionImplementation(",
          "31:           RecyclableObject* function,",
          "32:           CallInfo callInfo, ...);",
          "34:       inline static bool Test(JavascriptFunction *obj)",
          "35:       {",
          "36:           return",
          "37:               VirtualTableInfo<JavascriptAsyncGeneratorFunction>::HasVirtualTable(obj) ||",
          "38:               VirtualTableInfo<CrossSiteObject<JavascriptAsyncGeneratorFunction>>::HasVirtualTable(obj);",
          "39:       }",
          "41: #if ENABLE_TTD",
          "43:       virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "44:       virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "46: #endif",
          "48:   public:",
          "49:       virtual VTableValue DummyVirtualFunctionToHinderLinkerICF()",
          "50:       {",
          "51:           return VTableValue::VtableJavascriptAsyncGeneratorFunction;",
          "52:       }",
          "53: };",
          "55: template<>",
          "56: bool VarIsImpl<JavascriptAsyncGeneratorFunction>(RecyclableObject* obj);",
          "58: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptBuiltInFunctionList.h||lib/Runtime/Library/JavascriptBuiltInFunctionList.h": [
          "File: lib/Runtime/Library/JavascriptBuiltInFunctionList.h -> lib/Runtime/Library/JavascriptBuiltInFunctionList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "494: BUILTIN(JavascriptGenerator, Next, EntryNext, FunctionInfo::ErrorOnNew)",
          "495: BUILTIN(JavascriptGenerator, Return, EntryReturn, FunctionInfo::ErrorOnNew)",
          "496: BUILTIN(JavascriptGenerator, Throw, EntryThrow, FunctionInfo::ErrorOnNew)",
          "500: BUILTIN(JavascriptAsyncFromSyncIterator, Throw, EntryAsyncFromSyncIteratorThrow, FunctionInfo::ErrorOnNew)",
          "501: BUILTIN(JavascriptAsyncFromSyncIterator, Next, EntryAsyncFromSyncIteratorNext, FunctionInfo::ErrorOnNew)",
          "502: BUILTIN(JavascriptAsyncFromSyncIterator, Return, EntryAsyncFromSyncIteratorReturn, FunctionInfo::ErrorOnNew)",
          "",
          "[Removed Lines]",
          "497: BUILTIN(JavascriptGenerator, AsyncNext, EntryAsyncNext, FunctionInfo::ErrorOnNew)",
          "498: BUILTIN(JavascriptGenerator, AsyncReturn, EntryAsyncReturn, FunctionInfo::ErrorOnNew)",
          "499: BUILTIN(JavascriptGenerator, AsyncThrow, EntryAsyncThrow, FunctionInfo::ErrorOnNew)",
          "",
          "[Added Lines]",
          "497: BUILTIN(JavascriptAsyncGenerator, Next, EntryNext, FunctionInfo::ErrorOnNew)",
          "498: BUILTIN(JavascriptAsyncGenerator, Return, EntryReturn, FunctionInfo::ErrorOnNew)",
          "499: BUILTIN(JavascriptAsyncGenerator, Throw, EntryThrow, FunctionInfo::ErrorOnNew)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptGenerator.cpp||lib/Runtime/Library/JavascriptGenerator.cpp": [
          "File: lib/Runtime/Library/JavascriptGenerator.cpp -> lib/Runtime/Library/JavascriptGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"RuntimeLibraryPch.h\"",
          "6: #include \"Language/InterpreterStackFrame.h\"",
          "9: {",
          "12:     {",
          "19:         {",
          "28:         }",
          "31:         {",
          "33:         }",
          "57:         }",
          "62:     {",
          "68:     }",
          "70: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "72:     {",
          "74:         {",
          "83:         }",
          "84:     }",
          "85: #endif",
          "162:     }",
          "165:     {",
          "181:         {",
          "183:         }",
          "188:         {",
          "190:         }",
          "194:     }",
          "234:     {",
          "271:     {",
          "299:     }",
          "335:     {",
          "348:     }",
          "351:     {",
          "371:         {",
          "384:         }",
          "401:     {",
          "413:     }",
          "416:     {",
          "427:         {",
          "433:         }",
          "437:     }",
          "440:     {",
          "450:         {",
          "454:         }",
          "486:     {",
          "495:         {",
          "497:         }",
          "508:         {",
          "552:         }",
          "566:     }",
          "583:     {",
          "590:     }",
          "593:     {",
          "611:     }",
          "614:     {",
          "625:     }",
          "628:     {",
          "637:     }",
          "640:     {",
          "648:     }",
          "651:     {",
          "661:     }",
          "664:     {",
          "674:     }",
          "678:     {",
          "695:     }",
          "712:     {",
          "747:     }",
          "750:     {",
          "752:     }",
          "861: }",
          "",
          "[Removed Lines]",
          "8: namespace Js",
          "10:     JavascriptGenerator::JavascriptGenerator(DynamicType* type, Arguments &args, ScriptFunction* scriptFunction)",
          "11:         : DynamicObject(type), frame(nullptr), state(GeneratorState::Suspended), args(args), scriptFunction(scriptFunction)",
          "13:     }",
          "15:     JavascriptGenerator* JavascriptGenerator::New(Recycler* recycler, DynamicType* generatorType, Arguments& args, ScriptFunction* scriptFunction)",
          "16:     {",
          "17: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "18:         if (CONFIG_FLAG(ForceSoftwareWriteBarrier))",
          "20:             JavascriptGenerator* obj = RecyclerNewFinalized(",
          "21:                 recycler, JavascriptGenerator, generatorType, args, scriptFunction);",
          "22:             if (obj->args.Values != nullptr)",
          "23:             {",
          "24:                 recycler->RegisterPendingWriteBarrierBlock(obj->args.Values, obj->args.Info.Count * sizeof(Var));",
          "25:                 recycler->RegisterPendingWriteBarrierBlock(&obj->args.Values, sizeof(Var*));",
          "26:             }",
          "27:             return obj;",
          "29:         else",
          "30: #endif",
          "32:             return RecyclerNew(recycler, JavascriptGenerator, generatorType, args, scriptFunction);",
          "34:     }",
          "36:     JavascriptGenerator *JavascriptGenerator::New(Recycler *recycler, DynamicType *generatorType, Arguments &args,",
          "37:         Js::JavascriptGenerator::GeneratorState generatorState)",
          "38:     {",
          "39:         JavascriptGenerator *obj = JavascriptGenerator::New(recycler, generatorType, args, nullptr);",
          "40:         obj->SetState(generatorState);",
          "41:         return obj;",
          "42:     }",
          "44:     template <> bool VarIsImpl<JavascriptGenerator>(RecyclableObject* obj)",
          "45:     {",
          "46:         return JavascriptOperators::GetTypeId(obj) == TypeIds_Generator;",
          "47:     }",
          "49:     void JavascriptGenerator::SetFrame(InterpreterStackFrame* frame, size_t bytes)",
          "50:     {",
          "51:         Assert(this->frame == nullptr);",
          "52:         this->frame = frame;",
          "53: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "54:         if (CONFIG_FLAG(ForceSoftwareWriteBarrier))",
          "55:         {",
          "56:             this->GetScriptContext()->GetRecycler()->RegisterPendingWriteBarrierBlock(frame, bytes);",
          "58: #endif",
          "59:     }",
          "61:     void JavascriptGenerator::SetFrameSlots(Js::RegSlot slotCount, Field(Var)* frameSlotArray)",
          "63:         AssertMsg(this->frame->GetFunctionBody()->GetLocalsCount() == slotCount, \"Unexpected mismatch in frame slot count for generated.\");",
          "64:         for (Js::RegSlot i = 0; i < slotCount; i++)",
          "65:         {",
          "66:             this->GetFrame()->m_localSlots[i] = frameSlotArray[i];",
          "67:         }",
          "71:     void JavascriptGenerator::Finalize(bool isShutdown)",
          "73:         if (CONFIG_FLAG(ForceSoftwareWriteBarrier) && !isShutdown)",
          "75:             if (this->frame)",
          "76:             {",
          "77:                 this->GetScriptContext()->GetRecycler()->UnRegisterPendingWriteBarrierBlock(this->frame);",
          "78:             }",
          "79:             if (this->args.Values)",
          "80:             {",
          "81:                 this->GetScriptContext()->GetRecycler()->UnRegisterPendingWriteBarrierBlock(this->args.Values);",
          "82:             }",
          "87:     Var JavascriptGenerator::CallGenerator(ResumeYieldData* yieldData, const char16* apiNameForErrorMessage)",
          "88:     {",
          "89:         ScriptContext* scriptContext = this->GetScriptContext();",
          "90:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "91:         Var result = nullptr;",
          "93:         if (this->IsExecuting())",
          "94:         {",
          "95:             JavascriptError::ThrowTypeError(scriptContext, JSERR_GeneratorAlreadyExecuting, apiNameForErrorMessage);",
          "96:         }",
          "98:         {",
          "102:             class GeneratorStateHelper",
          "103:             {",
          "104:                 JavascriptGenerator* g;",
          "105:                 bool didThrow;",
          "106:             public:",
          "107:                 GeneratorStateHelper(JavascriptGenerator* g) : g(g), didThrow(true) { g->SetState(GeneratorState::Executing); }",
          "108:                 ~GeneratorStateHelper()",
          "109:                 {",
          "112:                     g->SetState(didThrow || g->frame == nullptr ? GeneratorState::Completed : GeneratorState::Suspended);",
          "113:                 }",
          "114:                 void DidNotThrow() { didThrow = false; }",
          "115:             } helper(this);",
          "117:             Var thunkArgs[] = { this, yieldData };",
          "118:             Arguments arguments(_countof(thunkArgs), thunkArgs);",
          "120:             JavascriptExceptionObject *exception = nullptr;",
          "122:             try",
          "123:             {",
          "124:                 BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "125:                 {",
          "126:                     result = JavascriptFunction::CallFunction<1>(this->scriptFunction, this->scriptFunction->GetEntryPoint(), arguments);",
          "127:                 }",
          "128:                 END_SAFE_REENTRANT_CALL",
          "129:                 helper.DidNotThrow();",
          "130:             }",
          "131:             catch (const JavascriptException& err)",
          "132:             {",
          "133:                 exception = err.GetAndClear();",
          "134:             }",
          "136:             if (exception != nullptr)",
          "137:             {",
          "138:                 if (!exception->IsGeneratorReturnException())",
          "139:                 {",
          "140:                     JavascriptExceptionOperators::DoThrowCheckClone(exception, scriptContext);",
          "141:                 }",
          "142:                 result = exception->GetThrownObject(nullptr);",
          "143:             }",
          "144:         }",
          "146:         if (!this->IsCompleted())",
          "147:         {",
          "148:             int nextOffset = this->frame->GetReader()->GetCurrentOffset();",
          "149:             int endOffset = this->frame->GetFunctionBody()->GetByteCode()->GetLength();",
          "151:             if (nextOffset != endOffset - 1)",
          "152:             {",
          "154:                 return result;",
          "155:             }",
          "156:         }",
          "158:         result = library->CreateIteratorResultObject(result, library->GetTrue());",
          "159:         this->SetState(GeneratorState::Completed);",
          "161:         return result;",
          "164:     Var JavascriptGenerator::EntryNext(RecyclableObject* function, CallInfo callInfo, ...)",
          "166:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "168:         ARGUMENTS(args, callInfo);",
          "169:         ScriptContext* scriptContext = function->GetScriptContext();",
          "170:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "172:         AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"Generator.prototype.next\"));",
          "174:         if (!VarIs<JavascriptGenerator>(args[0]))",
          "175:         {",
          "176:             JavascriptError::ThrowTypeErrorVar(scriptContext, JSERR_NeedObjectOfType, _u(\"Generator.prototype.next\"), _u(\"Generator\"));",
          "177:         }",
          "179:         JavascriptGenerator* generator = UnsafeVarTo<JavascriptGenerator>(args[0]);",
          "180:         if (generator->GetIsAsync())",
          "182:             JavascriptError::ThrowTypeErrorVar(scriptContext, JSERR_NeedObjectOfType, _u(\"Generator.prototype.next\"), _u(\"Generator\"));",
          "185:         Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "187:         if (generator->IsCompleted())",
          "189:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "192:         ResumeYieldData yieldData(input, nullptr);",
          "193:         return generator->CallGenerator(&yieldData, _u(\"Generator.prototype.next\"));",
          "196:     Var JavascriptGenerator::EntryReturn(RecyclableObject* function, CallInfo callInfo, ...)",
          "197:     {",
          "198:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "200:         ARGUMENTS(args, callInfo);",
          "201:         ScriptContext* scriptContext = function->GetScriptContext();",
          "202:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "204:         AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"Generator.prototype.return\"));",
          "206:         if (!VarIs<JavascriptGenerator>(args[0]))",
          "207:         {",
          "208:             JavascriptError::ThrowTypeErrorVar(scriptContext, JSERR_NeedObjectOfType, _u(\"Generator.prototype.return\"), _u(\"Generator\"));",
          "209:         }",
          "211:         JavascriptGenerator* generator = UnsafeVarTo<JavascriptGenerator>(args[0]);",
          "212:         if (generator->GetIsAsync())",
          "213:         {",
          "214:             JavascriptError::ThrowTypeErrorVar(scriptContext, JSERR_NeedObjectOfType, _u(\"Generator.prototype.return\"), _u(\"Generator\"));",
          "215:         }",
          "217:         Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "219:         if (generator->IsSuspendedStart())",
          "220:         {",
          "221:             generator->SetState(GeneratorState::Completed);",
          "222:         }",
          "224:         if (generator->IsCompleted())",
          "225:         {",
          "226:             return library->CreateIteratorResultObject(input, library->GetTrue());",
          "227:         }",
          "229:         ResumeYieldData yieldData(input, RecyclerNew(scriptContext->GetRecycler(), GeneratorReturnExceptionObject, input, scriptContext));",
          "230:         return generator->CallGenerator(&yieldData, _u(\"Generator.prototype.return\"));",
          "231:     }",
          "233:     Var JavascriptGenerator::EntryThrow(RecyclableObject* function, CallInfo callInfo, ...)",
          "235:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "237:         ARGUMENTS(args, callInfo);",
          "238:         ScriptContext* scriptContext = function->GetScriptContext();",
          "239:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "241:         AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"Generator.prototype.throw\"));",
          "243:         if (!VarIs<JavascriptGenerator>(args[0]))",
          "244:         {",
          "245:             JavascriptError::ThrowTypeErrorVar(scriptContext, JSERR_NeedObjectOfType, _u(\"Generator.prototype.throw\"), _u(\"Generator\"));",
          "246:         }",
          "248:         JavascriptGenerator* generator = UnsafeVarTo<JavascriptGenerator>(args[0]);",
          "249:         if (generator->GetIsAsync())",
          "250:         {",
          "251:             JavascriptError::ThrowTypeErrorVar(scriptContext, JSERR_NeedObjectOfType, _u(\"Generator.prototype.throw\"), _u(\"Generator\"));",
          "252:         }",
          "254:         Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "256:         if (generator->IsSuspendedStart())",
          "257:         {",
          "258:             generator->SetState(GeneratorState::Completed);",
          "259:         }",
          "261:         if (generator->IsCompleted())",
          "262:         {",
          "263:             JavascriptExceptionOperators::OP_Throw(input, scriptContext);",
          "264:         }",
          "266:         ResumeYieldData yieldData(input, RecyclerNew(scriptContext->GetRecycler(), JavascriptExceptionObject, input, scriptContext, nullptr));",
          "267:         return generator->CallGenerator(&yieldData, _u(\"Generator.prototype.throw\"));",
          "268:     }",
          "270:     Var JavascriptGenerator::EntryAsyncNext(RecyclableObject* function, CallInfo callInfo, ...)",
          "272:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "274:         ARGUMENTS(args, callInfo);",
          "275:         ScriptContext* scriptContext = function->GetScriptContext();",
          "276:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "278:         AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"AsyncGenerator.prototype.next\"));",
          "280:         Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "282:         return JavascriptGenerator::AsyncGeneratorEnqueue(args[0], scriptContext, input, nullptr, _u(\"AsyncGenerator.prototype.next\"));",
          "283:     }",
          "285:     Var JavascriptGenerator::EntryAsyncReturn(RecyclableObject* function, CallInfo callInfo, ...)",
          "286:     {",
          "287:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "289:         ARGUMENTS(args, callInfo);",
          "290:         ScriptContext* scriptContext = function->GetScriptContext();",
          "291:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "293:         AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"AsyncGenerator.prototype.return\"));",
          "295:         Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "297:         return JavascriptGenerator::AsyncGeneratorEnqueue(args[0], scriptContext, input,",
          "298:             RecyclerNew(scriptContext->GetRecycler(), GeneratorReturnExceptionObject, input, scriptContext), _u(\"AsyncGenerator.prototype.return\"));",
          "301:     Var JavascriptGenerator::EntryAsyncThrow(RecyclableObject* function, CallInfo callInfo, ...)",
          "302:     {",
          "303:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "305:         ARGUMENTS(args, callInfo);",
          "306:         ScriptContext* scriptContext = function->GetScriptContext();",
          "307:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "309:         AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"AsyncGenerator.prototype.throw\"));",
          "311:         Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "313:         return JavascriptGenerator::AsyncGeneratorEnqueue(args[0], scriptContext, input,",
          "314:             RecyclerNew(scriptContext->GetRecycler(), JavascriptExceptionObject, input, scriptContext, nullptr), _u(\"AsyncGenerator.prototype.throw\"));",
          "315:     }",
          "318:     Var JavascriptGenerator::EntryAsyncGeneratorAwaitReject(RecyclableObject* function, CallInfo callInfo, ...)",
          "319:     {",
          "320:         ScriptContext* scriptContext = function->GetScriptContext();",
          "321:         PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "322:         ARGUMENTS(args, callInfo);",
          "323:         Assert(!(callInfo.Flags & CallFlags_New));",
          "324:         AssertOrFailFastMsg(args.Info.Count > 1, \"Should never call EntryAsyncGeneratorAwait without a parameter\");",
          "326:         AsyncGeneratorNextProcessor* resumeNextReturnProcessor = VarTo<AsyncGeneratorNextProcessor>(function);",
          "328:         Var data = args[1];",
          "329:         JavascriptExceptionObject* exceptionObj = RecyclerNew(scriptContext->GetRecycler(), JavascriptExceptionObject, args[1], scriptContext, nullptr);",
          "330:         resumeNextReturnProcessor->GetGenerator()->CallAsyncGenerator(data, exceptionObj);",
          "331:         return scriptContext->GetLibrary()->GetUndefined();",
          "332:     }",
          "334:     Var JavascriptGenerator::EntryAsyncGeneratorAwaitRevolve(RecyclableObject* function, CallInfo callInfo, ...)",
          "336:         ScriptContext* scriptContext = function->GetScriptContext();",
          "337:         PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "338:         ARGUMENTS(args, callInfo);",
          "339:         Assert(!(callInfo.Flags & CallFlags_New));",
          "340:         AssertOrFailFastMsg(args.Info.Count > 1, \"Should never call EntryAsyncGeneratorAwait without a parameter\");",
          "342:         AsyncGeneratorNextProcessor* resumeNextReturnProcessor = VarTo<AsyncGeneratorNextProcessor>(function);",
          "344:         Var data = args.Values[1];",
          "345:         JavascriptExceptionObject* exceptionObj = nullptr;",
          "346:         resumeNextReturnProcessor->GetGenerator()->CallAsyncGenerator(data, exceptionObj);",
          "347:         return scriptContext->GetLibrary()->GetUndefined();",
          "350:     void JavascriptGenerator::CallAsyncGenerator(Var data, JavascriptExceptionObject* exceptionObj)",
          "352:         AssertOrFailFastMsg(isAsync, \"Should not call CallAsyncGenerator on a non-async generator\");",
          "353:         ScriptContext* scriptContext = this->GetScriptContext();",
          "354:         Var result = nullptr;",
          "355:         JavascriptExceptionObject *exception = nullptr;",
          "357:         SetState(GeneratorState::Executing);",
          "359:         ResumeYieldData yieldData(data, exceptionObj, this);",
          "360:         Var thunkArgs[] = { this, &yieldData };",
          "361:         Arguments arguments(_countof(thunkArgs), thunkArgs);",
          "362:         try",
          "363:         {",
          "364:             BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "365:             {",
          "366:                 result = JavascriptFunction::CallFunction<1>(this->scriptFunction, this->scriptFunction->GetEntryPoint(), arguments);",
          "367:             }",
          "368:             END_SAFE_REENTRANT_CALL",
          "369:         }",
          "370:         catch (const JavascriptException& err)",
          "372:             SetState(GeneratorState::Completed);",
          "373:             exception = err.GetAndClear();",
          "374:         }",
          "376:         if (exception != nullptr)",
          "377:         {",
          "378:             result = exception->GetThrownObject(nullptr);",
          "379:             if (!exception->IsGeneratorReturnException())",
          "380:             {",
          "381:                 AsyncGeneratorReject(result);",
          "382:                 return;",
          "383:             }",
          "385:         else if (frame != nullptr)",
          "386:         {",
          "387:             int nextOffset = this->frame->GetReader()->GetCurrentOffset();",
          "388:             int endOffset = this->frame->GetFunctionBody()->GetByteCode()->GetLength();",
          "390:             if (nextOffset != endOffset - 1)",
          "391:             {",
          "392:                 return;",
          "393:             }",
          "394:         }",
          "396:         SetState(GeneratorState::Completed);",
          "397:         ProcessAsyncGeneratorReturn(result, scriptContext);",
          "398:     }",
          "400:     Var JavascriptGenerator::EntryAsyncGeneratorAwaitYield(RecyclableObject* function, CallInfo callInfo, ...)",
          "402:         ScriptContext* scriptContext = function->GetScriptContext();",
          "403:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "404:         ARGUMENTS(args, callInfo);",
          "405:         Assert(!(callInfo.Flags & CallFlags_New));",
          "406:         AssertOrFailFastMsg(args.Info.Count > 1, \"Should never call EntryAsyncGeneratorAwaitYield without a parameter\");",
          "407:         AsyncGeneratorNextProcessor* resumeNextReturnProcessor = VarTo<AsyncGeneratorNextProcessor>(function);",
          "408:         JavascriptGenerator* generator = resumeNextReturnProcessor->GetGenerator();",
          "409:         generator->SetState(GeneratorState::Suspended);",
          "411:         generator->AsyncGeneratorResolve(args[1], false);",
          "412:         return scriptContext->GetLibrary()->GetUndefined();",
          "415:     Var JavascriptGenerator::EntryAsyncGeneratorAwaitYieldStar(RecyclableObject* function, CallInfo callInfo, ...)",
          "417:         ScriptContext* scriptContext = function->GetScriptContext();",
          "418:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "419:         ARGUMENTS(args, callInfo);",
          "420:         Assert(!(callInfo.Flags & CallFlags_New));",
          "421:         AssertOrFailFastMsg(args.Info.Count > 1, \"Should never call EntryAsyncGeneratorAwaitYield without a parameter\");",
          "422:         AsyncGeneratorNextProcessor* resumeNextReturnProcessor = VarTo<AsyncGeneratorNextProcessor>(function);",
          "423:         JavascriptGenerator* generator = resumeNextReturnProcessor->GetGenerator();",
          "424:         generator->SetState(GeneratorState::Suspended);",
          "426:         if (VarIs<RecyclableObject>(args[1]))",
          "428:             RecyclableObject* yieldData = UnsafeVarTo<RecyclableObject>(args[1]);",
          "429:             Var value = JavascriptOperators::GetProperty(yieldData, PropertyIds::value, scriptContext);",
          "431:             JavascriptOperators::OP_AsyncYield(generator, value, scriptContext);",
          "432:             return scriptContext->GetLibrary()->GetUndefined();",
          "434:         Var error = generator->CreateTypeError(JSERR_NonObjectFromIterable, scriptContext, _u(\"yield*\"));",
          "435:         JavascriptOperators::OP_AsyncYield(generator, error, scriptContext);",
          "436:         return scriptContext->GetLibrary()->GetUndefined();",
          "439:     Var JavascriptGenerator::AsyncGeneratorEnqueue(Var thisValue, ScriptContext* scriptContext, Var input, JavascriptExceptionObject* exceptionObj, const char16* apiNameForErrorMessage)",
          "443:         JavascriptPromise* promise = JavascriptPromise::CreateEnginePromise(scriptContext);",
          "449:         if (!VarIs<JavascriptGenerator>(thisValue))",
          "451:             Var error = CreateTypeError(JSERR_NeedObjectOfType, scriptContext, apiNameForErrorMessage, _u(\"AsyncGenerator\"));",
          "452:             promise->Reject(error, scriptContext);",
          "453:             return promise;",
          "456:         JavascriptGenerator* generator = UnsafeVarTo<JavascriptGenerator>(thisValue);",
          "458:         if (!generator->GetIsAsync())",
          "459:         {",
          "460:             Var error = CreateTypeError(JSERR_NeedObjectOfType, scriptContext, apiNameForErrorMessage, _u(\"AsyncGenerator\"));",
          "461:             promise->Reject(error, scriptContext);",
          "462:             return promise;",
          "463:         }",
          "467:         AsyncGeneratorRequest* request = RecyclerNew(scriptContext->GetRecycler(), AsyncGeneratorRequest, input, exceptionObj, promise);",
          "470:         generator->EnqueueRequest(request);",
          "475:         if (!generator->IsExecuting())",
          "476:         {",
          "477:             generator->AsyncGeneratorResumeNext();",
          "478:         }",
          "481:         return request->promise;",
          "482:     }",
          "485:     void JavascriptGenerator::AsyncGeneratorResumeNext()",
          "493:         AssertMsg(isAsync, \"Should not call AsyncGeneratorResumeNext on non-async generator\");",
          "494:         if (IsAwaitingReturn() || !HasRequests())",
          "496:             return;",
          "499:         ScriptContext* scriptContext = this->GetScriptContext();",
          "500:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "503:         AsyncGeneratorRequest* next = GetRequest(false);",
          "507:         if (next->exceptionObj != nullptr)",
          "512:             if (IsSuspendedStart())",
          "513:             {",
          "514:                 SetState(GeneratorState::Completed);",
          "515:             }",
          "517:             if (IsCompleted())",
          "518:             {",
          "520:                 if (next->exceptionObj->IsGeneratorReturnException())",
          "521:                 {",
          "532:                     ProcessAsyncGeneratorReturn(next->data, scriptContext);",
          "533:                     return;",
          "534:                 }",
          "536:                 else",
          "537:                 {",
          "540:                     AsyncGeneratorReject(next->data);",
          "542:                     return;",
          "543:                 }",
          "544:             }",
          "546:         }",
          "548:         else if (IsCompleted())",
          "549:         {",
          "550:             AsyncGeneratorResolve(library->GetUndefined(), true);",
          "551:             return;",
          "559:         SetState(GeneratorState::Executing);",
          "562:         CallAsyncGenerator(next->data, next->exceptionObj);",
          "568:     void JavascriptGenerator::ProcessAsyncGeneratorReturn(Var value, ScriptContext* scriptContext)",
          "569:     {",
          "570:         SetState(GeneratorState::AwaitingReturn);",
          "572:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "573:         JavascriptPromise* promise = JavascriptPromise::InternalPromiseResolve(value, scriptContext);",
          "575:         RecyclableObject* onFulfilled = library->CreateAsyncGeneratorResumeNextReturnProcessorFunction(this, false);",
          "576:         RecyclableObject* onRejected = library->CreateAsyncGeneratorResumeNextReturnProcessorFunction(this, true);",
          "578:         JavascriptPromiseCapability* unused = JavascriptPromise::UnusedPromiseCapability(scriptContext);",
          "579:         JavascriptPromise::PerformPromiseThen(promise, unused, onFulfilled, onRejected, scriptContext);",
          "580:     }",
          "582:     RuntimeFunction* JavascriptGenerator::EnsureAwaitYieldStarFunction()",
          "584:         if (awaitYieldStarFunction == nullptr)",
          "585:         {",
          "586:             JavascriptLibrary* library = GetScriptContext()->GetLibrary();",
          "587:             awaitYieldStarFunction = library->CreateAsyncGeneratorAwaitYieldFunction(this, true);",
          "588:         }",
          "589:         return awaitYieldStarFunction;",
          "592:     void JavascriptGenerator::InitialiseAsyncGenerator(ScriptContext* scriptContext)",
          "594:         AssertMsg(isAsync, \"Should not call InitialiseAsyncGenerator on a non-async generator\");",
          "595:         Recycler* recycler = scriptContext->GetRecycler();",
          "596:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "597:         asyncGeneratorQueue = RecyclerNew(recycler, AsyncGeneratorQueue, recycler);",
          "598:         awaitThrowFunction = library->CreateAsyncGeneratorAwaitFunction(this, true);",
          "599:         awaitNextFunction = library->CreateAsyncGeneratorAwaitFunction(this, false);",
          "600:         awaitYieldFunction = library->CreateAsyncGeneratorAwaitYieldFunction(this, false);",
          "602:         ResumeYieldData data(scriptContext->GetLibrary()->GetUndefined(), nullptr);",
          "603:         Var thunkArgs[] = { this, &data };",
          "604:         Arguments arguments(_countof(thunkArgs), thunkArgs);",
          "605:         BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "606:         {",
          "607:             JavascriptFunction::CallFunction<1>(this->scriptFunction, this->scriptFunction->GetEntryPoint(), arguments);",
          "608:         }",
          "609:         END_SAFE_REENTRANT_CALL",
          "610:         SetState(JavascriptGenerator::GeneratorState::SuspendedStart);",
          "613:     void JavascriptGenerator::AsyncGeneratorResolve(Var value, bool done)",
          "615:         AssertMsg(isAsync, \"Should not call AsyncGeneratorResolve on a non-async generator\");",
          "616:         AsyncGeneratorRequest* next = GetRequest(true);",
          "617:         AssertMsg(next != nullptr, \"Should never call AsyncGeneratorResolve with an empty queue\");",
          "619:         ScriptContext* scriptContext = this->GetScriptContext();",
          "620:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "621:         Var result = library->CreateIteratorResultObject(value, done ? library->GetTrue() : library->GetFalse());",
          "623:         next->promise->Resolve(result, scriptContext);",
          "624:         AsyncGeneratorResumeNext();",
          "627:     void JavascriptGenerator::AsyncGeneratorReject(Var reason)",
          "629:         AssertMsg(isAsync, \"Should not call AsyncGeneratorReject on a non-async generator\");",
          "630:         AsyncGeneratorRequest* next = GetRequest(true);",
          "631:         AssertMsg(next != nullptr, \"Should never call AsyncGeneratorReject with an empty queue\");",
          "633:         ScriptContext* scriptContext = this->GetScriptContext();",
          "635:         next->promise->Reject(reason, scriptContext);",
          "636:         AsyncGeneratorResumeNext();",
          "639:     Var JavascriptGenerator::CreateTypeError(HRESULT hr, ScriptContext* scriptContext, ...)",
          "641:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "642:         JavascriptError* typeError = library->CreateTypeError();",
          "643:         va_list params;",
          "644:         va_start(params, scriptContext);",
          "645:         JavascriptError::SetErrorMessage(typeError, hr, scriptContext, params);",
          "646:         va_end(params);",
          "647:         return typeError;",
          "650:     Var JavascriptGenerator::EntryAsyncGeneratorResumeNextReturnProcessorResolve(RecyclableObject* function, CallInfo callInfo, ...)",
          "652:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "653:         ARGUMENTS(args, callInfo);",
          "654:         Assert(!(callInfo.Flags & CallFlags_New));",
          "655:         AssertOrFailFastMsg(args.Info.Count > 1, \"Should never call EntryAsyncGeneratorResumeNextReturnProcessor without a parameter\");",
          "656:         AsyncGeneratorNextProcessor* resumeNextReturnProcessor = VarTo<AsyncGeneratorNextProcessor>(function);",
          "658:         resumeNextReturnProcessor->GetGenerator()->SetState(GeneratorState::Completed);",
          "659:         resumeNextReturnProcessor->GetGenerator()->AsyncGeneratorResolve(args[1], true);",
          "660:         return  function->GetScriptContext()->GetLibrary()->GetUndefined();",
          "663:     Var JavascriptGenerator::EntryAsyncGeneratorResumeNextReturnProcessorReject(RecyclableObject* function, CallInfo callInfo, ...)",
          "665:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "666:         ARGUMENTS(args, callInfo);",
          "667:         Assert(!(callInfo.Flags & CallFlags_New));",
          "668:         AssertOrFailFastMsg(args.Info.Count > 1, \"Should never call EntryAsyncGeneratorResumeNextReturnProcessor without a parameter\");",
          "669:         AsyncGeneratorNextProcessor* resumeNextReturnProcessor = VarTo<AsyncGeneratorNextProcessor>(function);",
          "671:         resumeNextReturnProcessor->GetGenerator()->SetState(GeneratorState::Completed);",
          "672:         resumeNextReturnProcessor->GetGenerator()->AsyncGeneratorReject(args[1]);",
          "673:         return  function->GetScriptContext()->GetLibrary()->GetUndefined();",
          "676: #ifdef ENABLE_DEBUG_CONFIG_OPTIONS",
          "677:     void JavascriptGenerator::OutputBailInTrace(JavascriptGenerator* generator)",
          "679:         char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "680:         FunctionBody *fnBody = generator->scriptFunction->GetFunctionBody();",
          "681:         Output::Print(_u(\"BailIn: function: %s (%s) offset: #%04x\\n\"), fnBody->GetDisplayName(), fnBody->GetDebugNumberSet(debugStringBuffer), generator->frame->m_reader.GetCurrentOffset());",
          "683:         if (generator->bailInSymbolsTraceArrayCount == 0)",
          "684:         {",
          "685:             Output::Print(_u(\"BailIn: No symbols reloaded\\n\"), fnBody->GetDisplayName(), fnBody->GetDebugNumberSet(debugStringBuffer));",
          "686:         }",
          "687:         else",
          "688:         {",
          "689:             for (int i = 0; i < generator->bailInSymbolsTraceArrayCount; i++)",
          "690:             {",
          "691:                 const JavascriptGenerator::BailInSymbol& symbol = generator->bailInSymbolsTraceArray[i];",
          "692:                 Output::Print(_u(\"BailIn: Register #%4d, value: 0x%p\\n\"), symbol.id, symbol.value);",
          "693:             }",
          "694:         }",
          "696: #endif",
          "698:     template <> bool VarIsImpl<AsyncGeneratorNextProcessor>(RecyclableObject* obj)",
          "699:     {",
          "700:         if (VarIs<JavascriptFunction>(obj))",
          "701:         {",
          "702:             return VirtualTableInfo<AsyncGeneratorNextProcessor>::HasVirtualTable(obj)",
          "703:                 || VirtualTableInfo<CrossSiteObject<AsyncGeneratorNextProcessor>>::HasVirtualTable(obj);",
          "704:         }",
          "706:         return false;",
          "707:     }",
          "709: #if ENABLE_TTD",
          "711:     void JavascriptGenerator::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "713:         if (this->scriptFunction != nullptr)",
          "714:         {",
          "715:             extractor->MarkVisitVar(this->scriptFunction);",
          "716:         }",
          "719:         if (this->frame != nullptr)",
          "720:         {",
          "722:             Js::RegSlot slotCount = this->frame->GetFunctionBody()->GetLocalsCount();",
          "723:             for (Js::RegSlot i = 0; i < slotCount; i++)",
          "724:             {",
          "725:                 Js::Var curr = this->frame->m_localSlots[i];",
          "726:                 if (curr != nullptr)",
          "727:                 {",
          "728:                     extractor->MarkVisitVar(curr);",
          "729:                 }",
          "730:             }",
          "731:         }",
          "734:         if (this->args.Values != nullptr)",
          "735:         {",
          "737:             uint32 argCount = this->args.GetArgCountWithExtraArgs();",
          "738:             for (uint32 i = 0; i < argCount; i++)",
          "739:             {",
          "740:                 Js::Var curr = this->args[i];",
          "741:                 if (curr != nullptr)",
          "742:                 {",
          "743:                     extractor->MarkVisitVar(curr);",
          "744:                 }",
          "745:             }",
          "746:         }",
          "749:     TTD::NSSnapObjects::SnapObjectType JavascriptGenerator::GetSnapTag_TTD() const",
          "751:         return TTD::NSSnapObjects::SnapObjectType::SnapGenerator;",
          "754:     void JavascriptGenerator::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "755:     {",
          "756:         TTD::NSSnapObjects::SnapGeneratorInfo* gi = alloc.SlabAllocateStruct<TTD::NSSnapObjects::SnapGeneratorInfo>();",
          "759:         gi->generatorPrototype = 0;",
          "774:         gi->scriptFunction = TTD_CONVERT_VAR_TO_PTR_ID(this->scriptFunction);",
          "775:         gi->state = static_cast<uint32>(this->state);",
          "779:         gi->frame_slotCount = 0;",
          "780:         gi->frame_slotArray = nullptr;",
          "781:         if (this->frame != nullptr)",
          "782:         {",
          "783:             gi->frame_slotCount = this->frame->GetFunctionBody()->GetLocalsCount();",
          "784:             if (gi->frame_slotCount > 0)",
          "785:             {",
          "786:                 gi->frame_slotArray = alloc.SlabAllocateArray<TTD::TTDVar>(gi->frame_slotCount);",
          "787:             }",
          "788:             for (Js::RegSlot i = 0; i < gi->frame_slotCount; i++)",
          "789:             {",
          "790:                 gi->frame_slotArray[i] = this->frame->m_localSlots[i];",
          "791:             }",
          "792:         }",
          "795:         TTD_PTR_ID* depArray = nullptr;",
          "796:         uint32 depCount = 0;",
          "798:         if (this->args.Values == nullptr)",
          "799:         {",
          "800:             gi->arguments_count = 0;",
          "801:         }",
          "802:         else",
          "803:         {",
          "804:             gi->arguments_count = this->args.GetArgCountWithExtraArgs();",
          "805:         }",
          "807:         gi->arguments_values = nullptr;",
          "808:         if (gi->arguments_count > 0)",
          "809:         {",
          "810:             gi->arguments_values = alloc.SlabAllocateArray<TTD::TTDVar>(gi->arguments_count);",
          "811:             depArray = alloc.SlabReserveArraySpace<TTD_PTR_ID>(gi->arguments_count);",
          "812:         }",
          "814:         for (uint32 i = 0; i < gi->arguments_count; i++)",
          "815:         {",
          "816:             gi->arguments_values[i] = this->args[i];",
          "817:             if (gi->arguments_values[i] != nullptr && TTD::JsSupport::IsVarComplexKind(gi->arguments_values[i]))",
          "818:             {",
          "819:                 depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(gi->arguments_values[i]);",
          "820:                 depCount++;",
          "821:             }",
          "822:         }",
          "824:         if (depCount > 0)",
          "825:         {",
          "826:             alloc.SlabCommitArraySpace<TTD_PTR_ID>(depCount, gi->arguments_count);",
          "827:         }",
          "828:         else if (gi->arguments_count > 0)",
          "829:         {",
          "830:             alloc.SlabAbortArraySpace<TTD_PTR_ID>(gi->arguments_count);",
          "831:         }",
          "833:         if (this->frame != nullptr)",
          "834:         {",
          "835:             gi->byteCodeReader_offset = this->frame->GetReader()->GetCurrentOffset();",
          "836:         }",
          "837:         else",
          "838:         {",
          "839:             gi->byteCodeReader_offset = 0;",
          "840:         }",
          "843:         gi->arguments_callInfo_count = this->args.Info.Count;",
          "844:         gi->arguments_callInfo_flags = this->args.Info.Flags;",
          "849:         if (depCount == 0)",
          "850:         {",
          "851:             TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorInfo*, TTD::NSSnapObjects::SnapObjectType::SnapGenerator>(objData, gi);",
          "852:         }",
          "853:         else",
          "854:         {",
          "855:             TTDAssert(depArray != nullptr, \"depArray should be non-null if depCount is > 0\");",
          "856:             TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorInfo*, TTD::NSSnapObjects::SnapObjectType::SnapGenerator>(objData, gi, alloc, depCount, depArray);",
          "857:         }",
          "859:     }",
          "860: #endif",
          "",
          "[Added Lines]",
          "8: using namespace Js;",
          "10: namespace",
          "15:     struct GeneratorStateHelper",
          "17:         using GeneratorState = JavascriptGenerator::GeneratorState;",
          "19:         JavascriptGenerator* generator;",
          "20:         bool didThrow;",
          "22:         GeneratorStateHelper(JavascriptGenerator* generator) :",
          "23:             generator(generator),",
          "24:             didThrow(true)",
          "26:             generator->SetState(GeneratorState::Executing);",
          "29:         ~GeneratorStateHelper()",
          "31:             generator->SetState(IsDone() ? GeneratorState::Completed : GeneratorState::Suspended);",
          "34:         bool IsDone()",
          "35:         {",
          "38:             auto* frame = generator->GetFrame();",
          "40:             if (didThrow || frame == nullptr)",
          "41:                 return true;",
          "43:             int nextOffset = frame->GetReader()->GetCurrentOffset();",
          "44:             int endOffset = frame->GetFunctionBody()->GetByteCode()->GetLength();",
          "46:             if (nextOffset == endOffset - 1)",
          "47:                 return true;",
          "49:             return false;",
          "51:     };",
          "52: }",
          "54: JavascriptGenerator::JavascriptGenerator(",
          "55:     DynamicType* type,",
          "56:     Arguments& args,",
          "57:     ScriptFunction* scriptFunction) :",
          "58:         DynamicObject(type),",
          "59:         args(args),",
          "60:         frame(nullptr),",
          "61:         state(GeneratorState::SuspendedStart),",
          "62:         scriptFunction(scriptFunction),",
          "63:         resumeYieldObject(nullptr) {}",
          "65: JavascriptGenerator* JavascriptGenerator::New(",
          "66:     Recycler* recycler,",
          "67:     DynamicType* generatorType,",
          "68:     Arguments& args,",
          "69:     ScriptFunction* scriptFunction)",
          "70: {",
          "73:     Field(Var)* argValuesCopy = nullptr;",
          "75:     if (args.Info.Count > 0)",
          "77:         argValuesCopy = RecyclerNewArray(recycler, Field(Var), args.Info.Count);",
          "78:         CopyArray(argValuesCopy, args.Info.Count, args.Values, args.Info.Count);",
          "81:     Arguments heapArgs(args.Info, unsafe_write_barrier_cast<Var*>(argValuesCopy));",
          "84:     if (CONFIG_FLAG(ForceSoftwareWriteBarrier))",
          "86:         JavascriptGenerator* obj = RecyclerNewFinalized(",
          "87:             recycler,",
          "88:             JavascriptGenerator,",
          "89:             generatorType,",
          "90:             heapArgs,",
          "91:             scriptFunction);",
          "93:         if (obj->args.Values != nullptr)",
          "95:             recycler->RegisterPendingWriteBarrierBlock(",
          "96:                 obj->args.Values,",
          "97:                 obj->args.Info.Count * sizeof(Var));",
          "99:             recycler->RegisterPendingWriteBarrierBlock(",
          "100:                 &obj->args.Values,",
          "101:                 sizeof(Var*));",
          "104:         return obj;",
          "108:     return RecyclerNew(recycler, JavascriptGenerator, generatorType, heapArgs, scriptFunction);",
          "109: }",
          "111: template<>",
          "112: bool Js::VarIsImpl<JavascriptGenerator>(RecyclableObject* obj)",
          "113: {",
          "114:     auto typeId = JavascriptOperators::GetTypeId(obj);",
          "115:     return typeId == TypeIds_Generator || typeId == TypeIds_AsyncGenerator;",
          "116: }",
          "118: void JavascriptGenerator::SetFrame(InterpreterStackFrame* frame, size_t bytes)",
          "119: {",
          "120:     Assert(this->frame == nullptr);",
          "121:     this->frame = frame;",
          "122: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "123:     if (CONFIG_FLAG(ForceSoftwareWriteBarrier))",
          "124:     {",
          "125:         GetScriptContext()->GetRecycler()->RegisterPendingWriteBarrierBlock(frame, bytes);",
          "126:     }",
          "127: #endif",
          "128: }",
          "130: void JavascriptGenerator::SetFrameSlots(Js::RegSlot slotCount, Field(Var)* frameSlotArray)",
          "131: {",
          "132:     AssertMsg(this->frame->GetFunctionBody()->GetLocalsCount() == slotCount,",
          "133:         \"Unexpected mismatch in frame slot count for generated.\");",
          "135:     for (Js::RegSlot i = 0; i < slotCount; i++)",
          "136:         GetFrame()->m_localSlots[i] = frameSlotArray[i];",
          "137: }",
          "139: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "140: void JavascriptGenerator::Finalize(bool isShutdown)",
          "141: {",
          "142:     if (CONFIG_FLAG(ForceSoftwareWriteBarrier) && !isShutdown)",
          "143:     {",
          "144:         auto* recycler = GetScriptContext()->GetRecycler();",
          "146:         if (this->frame)",
          "147:             recycler->UnRegisterPendingWriteBarrierBlock(this->frame);",
          "149:         if (this->args.Values)",
          "150:             recycler->UnRegisterPendingWriteBarrierBlock(this->args.Values);",
          "152: }",
          "153: #endif",
          "155: void JavascriptGenerator::ThrowIfExecuting(const char16* apiName)",
          "156: {",
          "157:     if (this->IsExecuting())",
          "159:         JavascriptError::ThrowTypeError(",
          "160:             GetScriptContext(),",
          "161:             JSERR_GeneratorAlreadyExecuting,",
          "162:             apiName);",
          "163:     }",
          "164: }",
          "166: Var JavascriptGenerator::CallGenerator(Var data, ResumeYieldKind resumeKind)",
          "167: {",
          "168:     Assert(!IsExecuting() && !IsCompleted());",
          "170:     ScriptContext* scriptContext = this->GetScriptContext();",
          "171:     JavascriptLibrary* library = scriptContext->GetLibrary();",
          "172:     Var result = nullptr;",
          "174:     SetResumeYieldProperties(data, resumeKind);",
          "176:     {",
          "177:         Var thunkArgs[] = {this, this->resumeYieldObject};",
          "178:         Arguments arguments(_countof(thunkArgs), thunkArgs);",
          "179:         GeneratorStateHelper helper(this);",
          "181:         try",
          "183:             BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "184:             {",
          "185:                 result = JavascriptFunction::CallFunction<1>(",
          "186:                     this->scriptFunction,",
          "187:                     this->scriptFunction->GetEntryPoint(),",
          "188:                     arguments);",
          "189:             }",
          "190:             END_SAFE_REENTRANT_CALL",
          "191:             helper.didThrow = false;",
          "193:         catch (const JavascriptException& err)",
          "195:             JavascriptExceptionOperators::DoThrowCheckClone(err.GetAndClear(), scriptContext);",
          "201:     SetResumeYieldProperties(library->GetUndefined(), ResumeYieldKind::Normal);",
          "203:     if (IsCompleted())",
          "204:         return library->CreateIteratorResultObject(result, library->GetTrue());",
          "206:     return result;",
          "207: }",
          "209: void JavascriptGenerator::SetResumeYieldProperties(Var value, ResumeYieldKind kind)",
          "210: {",
          "211:     auto* library = GetScriptContext()->GetLibrary();",
          "212:     DynamicType* type = library->GetResumeYieldObjectType();",
          "214:     if (!this->resumeYieldObject)",
          "215:         this->resumeYieldObject = DynamicObject::New(GetScriptContext()->GetRecycler(), type);",
          "216:     else",
          "217:         AssertOrFailFast(this->resumeYieldObject->GetDynamicType() == type);",
          "219:     Var kindVar = TaggedInt::ToVarUnchecked((int)kind);",
          "220:     this->resumeYieldObject->SetSlot(SetSlotArguments(Js::PropertyIds::value, 0, value));",
          "221:     this->resumeYieldObject->SetSlot(SetSlotArguments(Js::PropertyIds::kind, 1, kindVar));",
          "222: }",
          "224: Var JavascriptGenerator::EntryNext(RecyclableObject* function, CallInfo callInfo, ...)",
          "225: {",
          "226:     PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "227:     ARGUMENTS(args, callInfo);",
          "229:     auto* scriptContext = function->GetScriptContext();",
          "230:     auto* library = scriptContext->GetLibrary();",
          "232:     AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"Generator.prototype.next\"));",
          "234:     if (!VarIs<JavascriptGenerator>(args[0]))",
          "236:         JavascriptError::ThrowTypeErrorVar(",
          "237:             scriptContext,",
          "238:             JSERR_NeedObjectOfType,",
          "239:             _u(\"Generator.prototype.next\"),",
          "240:             _u(\"Generator\"));",
          "241:     }",
          "243:     Var undefinedVar = library->GetUndefined();",
          "244:     Var input = args.Info.Count > 1 ? args[1] : undefinedVar;",
          "246:     auto* generator = UnsafeVarTo<JavascriptGenerator>(args[0]);",
          "248:     if (generator->IsCompleted())",
          "249:         return library->CreateIteratorResultObject(undefinedVar, library->GetTrue());",
          "251:     generator->ThrowIfExecuting(_u(\"Generator.prototype.next\"));",
          "252:     return generator->CallGenerator(input, ResumeYieldKind::Normal);",
          "253: }",
          "255: Var JavascriptGenerator::EntryReturn(RecyclableObject* function, CallInfo callInfo, ...)",
          "256: {",
          "257:     PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "258:     ARGUMENTS(args, callInfo);",
          "260:     auto* scriptContext = function->GetScriptContext();",
          "261:     auto* library = scriptContext->GetLibrary();",
          "263:     AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"Generator.prototype.return\"));",
          "265:     if (!VarIs<JavascriptGenerator>(args[0]))",
          "267:         JavascriptError::ThrowTypeErrorVar(",
          "268:             scriptContext,",
          "269:             JSERR_NeedObjectOfType,",
          "270:             _u(\"Generator.prototype.return\"),",
          "271:             _u(\"Generator\"));",
          "272:     }",
          "274:     Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "276:     auto* generator = UnsafeVarTo<JavascriptGenerator>(args[0]);",
          "278:     if (generator->IsSuspendedStart())",
          "279:         generator->SetCompleted();",
          "281:     if (generator->IsCompleted())",
          "282:         return library->CreateIteratorResultObject(input, library->GetTrue());",
          "284:     generator->ThrowIfExecuting(_u(\"Generator.prototype.return\"));",
          "285:     return generator->CallGenerator(input, ResumeYieldKind::Return);",
          "286: }",
          "288: Var JavascriptGenerator::EntryThrow(RecyclableObject* function, CallInfo callInfo, ...)",
          "289: {",
          "290:     PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "291:     ARGUMENTS(args, callInfo);",
          "293:     auto* scriptContext = function->GetScriptContext();",
          "294:     auto* library = scriptContext->GetLibrary();",
          "296:     AUTO_TAG_NATIVE_LIBRARY_ENTRY(function, callInfo, _u(\"Generator.prototype.throw\"));",
          "298:     if (!VarIs<JavascriptGenerator>(args[0]))",
          "299:     {",
          "300:         JavascriptError::ThrowTypeErrorVar(",
          "301:             scriptContext,",
          "302:             JSERR_NeedObjectOfType,",
          "303:             _u(\"Generator.prototype.throw\"),",
          "304:             _u(\"Generator\"));",
          "307:     Var input = args.Info.Count > 1 ? args[1] : library->GetUndefined();",
          "309:     auto* generator = UnsafeVarTo<JavascriptGenerator>(args[0]);",
          "311:     if (generator->IsSuspendedStart())",
          "312:         generator->SetCompleted();",
          "314:     if (generator->IsCompleted())",
          "315:         JavascriptExceptionOperators::OP_Throw(input, scriptContext);",
          "317:     generator->ThrowIfExecuting(_u(\"Generator.prototype.throw\"));",
          "318:     return generator->CallGenerator(input, ResumeYieldKind::Throw);",
          "319: }",
          "321: #ifdef ENABLE_DEBUG_CONFIG_OPTIONS",
          "322: void JavascriptGenerator::OutputBailInTrace(JavascriptGenerator* generator)",
          "323: {",
          "324:     char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "325:     FunctionBody* fnBody = generator->scriptFunction->GetFunctionBody();",
          "327:     Output::Print(",
          "328:         _u(\"BailIn: function: %s (%s) offset: #%04x\\n\"),",
          "329:         fnBody->GetDisplayName(),",
          "330:         fnBody->GetDebugNumberSet(debugStringBuffer),",
          "331:         generator->frame->m_reader.GetCurrentOffset());",
          "333:     if (generator->bailInSymbolsTraceArrayCount == 0)",
          "335:         Output::Print(",
          "336:             _u(\"BailIn: No symbols reloaded\\n\"),",
          "337:             fnBody->GetDisplayName(),",
          "338:             fnBody->GetDebugNumberSet(debugStringBuffer));",
          "340:     else",
          "342:         for (int i = 0; i < generator->bailInSymbolsTraceArrayCount; i++)",
          "344:             const BailInSymbol& symbol = generator->bailInSymbolsTraceArray[i];",
          "345:             Output::Print(_u(\"BailIn: Register #%4d, value: 0x%p\\n\"), symbol.id, symbol.value);",
          "347:     }",
          "348: }",
          "349: #endif",
          "351: #if ENABLE_TTD",
          "353: JavascriptGenerator *JavascriptGenerator::New(",
          "354:     Recycler* recycler,",
          "355:     DynamicType* generatorType,",
          "356:     Arguments& args,",
          "357:     JavascriptGenerator::GeneratorState state)",
          "358: {",
          "359:     auto* obj = JavascriptGenerator::New(recycler, generatorType, args, nullptr);",
          "360:     obj->SetState(state);",
          "361:     return obj;",
          "362: }",
          "364: void JavascriptGenerator::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "365: {",
          "366:     if (this->scriptFunction != nullptr)",
          "368:         extractor->MarkVisitVar(this->scriptFunction);",
          "372:     if (this->frame != nullptr)",
          "375:         Js::RegSlot slotCount = this->frame->GetFunctionBody()->GetLocalsCount();",
          "376:         for (Js::RegSlot i = 0; i < slotCount; i++)",
          "378:             Js::Var curr = this->frame->m_localSlots[i];",
          "379:             if (curr != nullptr)",
          "380:             {",
          "381:                 extractor->MarkVisitVar(curr);",
          "382:             }",
          "387:     if (this->args.Values != nullptr)",
          "390:         uint32 argCount = this->args.GetArgCountWithExtraArgs();",
          "391:         for (uint32 i = 0; i < argCount; i++)",
          "393:             Js::Var curr = this->args[i];",
          "394:             if (curr != nullptr)",
          "395:             {",
          "396:                 extractor->MarkVisitVar(curr);",
          "397:             }",
          "399:     }",
          "400: }",
          "402: TTD::NSSnapObjects::SnapObjectType JavascriptGenerator::GetSnapTag_TTD() const",
          "403: {",
          "404:     return TTD::NSSnapObjects::SnapObjectType::SnapGenerator;",
          "405: }",
          "407: void JavascriptGenerator::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "408: {",
          "409:     TTD::NSSnapObjects::SnapGeneratorInfo* gi = alloc.SlabAllocateStruct<TTD::NSSnapObjects::SnapGeneratorInfo>();",
          "412:     gi->generatorPrototype = 0;",
          "427:     gi->scriptFunction = TTD_CONVERT_VAR_TO_PTR_ID(this->scriptFunction);",
          "428:     gi->state = static_cast<uint32>(this->state);",
          "432:     gi->frame_slotCount = 0;",
          "433:     gi->frame_slotArray = nullptr;",
          "434:     if (this->frame != nullptr)",
          "436:         gi->frame_slotCount = this->frame->GetFunctionBody()->GetLocalsCount();",
          "437:         if (gi->frame_slotCount > 0)",
          "439:             gi->frame_slotArray = alloc.SlabAllocateArray<TTD::TTDVar>(gi->frame_slotCount);",
          "441:         for (Js::RegSlot i = 0; i < gi->frame_slotCount; i++)",
          "443:             gi->frame_slotArray[i] = this->frame->m_localSlots[i];",
          "448:     TTD_PTR_ID* depArray = nullptr;",
          "449:     uint32 depCount = 0;",
          "451:     if (this->args.Values == nullptr)",
          "453:         gi->arguments_count = 0;",
          "455:     else",
          "457:         gi->arguments_count = this->args.GetArgCountWithExtraArgs();",
          "460:     gi->arguments_values = nullptr;",
          "461:     if (gi->arguments_count > 0)",
          "463:         gi->arguments_values = alloc.SlabAllocateArray<TTD::TTDVar>(gi->arguments_count);",
          "464:         depArray = alloc.SlabReserveArraySpace<TTD_PTR_ID>(gi->arguments_count);",
          "467:     for (uint32 i = 0; i < gi->arguments_count; i++)",
          "469:         gi->arguments_values[i] = this->args[i];",
          "470:         if (gi->arguments_values[i] != nullptr && TTD::JsSupport::IsVarComplexKind(gi->arguments_values[i]))",
          "471:         {",
          "472:             depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(gi->arguments_values[i]);",
          "473:             depCount++;",
          "474:         }",
          "477:     if (depCount > 0)",
          "479:         alloc.SlabCommitArraySpace<TTD_PTR_ID>(depCount, gi->arguments_count);",
          "481:     else if (gi->arguments_count > 0)",
          "483:         alloc.SlabAbortArraySpace<TTD_PTR_ID>(gi->arguments_count);",
          "486:     if (this->frame != nullptr)",
          "488:         gi->byteCodeReader_offset = this->frame->GetReader()->GetCurrentOffset();",
          "490:     else",
          "492:         gi->byteCodeReader_offset = 0;",
          "496:     gi->arguments_callInfo_count = gi->arguments_count > 0 ? this->args.Info.Count : 0;",
          "497:     gi->arguments_callInfo_flags = this->args.Info.Flags;",
          "502:     if (depCount == 0)",
          "504:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorInfo*, TTD::NSSnapObjects::SnapObjectType::SnapGenerator>(objData, gi);",
          "506:     else",
          "508:         TTDAssert(depArray != nullptr, \"depArray should be non-null if depCount is > 0\");",
          "509:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorInfo*, TTD::NSSnapObjects::SnapObjectType::SnapGenerator>(objData, gi, alloc, depCount, depArray);",
          "513: #endif",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptGenerator.h||lib/Runtime/Library/JavascriptGenerator.h": [
          "File: lib/Runtime/Library/JavascriptGenerator.h -> lib/Runtime/Library/JavascriptGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace Js",
          "8: {",
          "20:     };",
          "23:     {",
          "35:     {",
          "38:         {",
          "58:         }",
          "130: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "132: #endif",
          "161: #if ENABLE_TTD",
          "166: #endif",
          "168: #ifdef ENABLE_DEBUG_CONFIG_OPTIONS",
          "184:     };",
          "189:     {",
          "205: }",
          "",
          "[Removed Lines]",
          "12:     struct ResumeYieldData",
          "13:     {",
          "14:         Var const data;",
          "15:         JavascriptExceptionObject* const exceptionObj;",
          "16:         JavascriptGenerator* const generator;",
          "18:         ResumeYieldData(Var data, JavascriptExceptionObject* exceptionObj, JavascriptGenerator* generator = nullptr) :",
          "19:             data(data), exceptionObj(exceptionObj), generator(generator) {}",
          "22:     struct AsyncGeneratorRequest",
          "24:         Field(Var) const data;",
          "25:         Field(JavascriptExceptionObject*) const exceptionObj;",
          "26:         Field(JavascriptPromise*) const promise;",
          "28:         AsyncGeneratorRequest(Var data, JavascriptExceptionObject* exceptionObj, JavascriptPromise* promise)",
          "29:              : data(data), exceptionObj(exceptionObj), promise(promise) {}",
          "30:     };",
          "32:     typedef JsUtil::List<AsyncGeneratorRequest*, Recycler> AsyncGeneratorQueue;",
          "34:     class JavascriptGenerator : public DynamicObject",
          "36:     public:",
          "37:         enum class GeneratorState",
          "39:             SuspendedStart,",
          "40:             Suspended,",
          "41:             Executing,",
          "42:             Completed,",
          "43:             AwaitingReturn",
          "44:         };",
          "46:         static uint32 GetFrameOffset() { return offsetof(JavascriptGenerator, frame); }",
          "47:         static uint32 GetCallInfoOffset() { return offsetof(JavascriptGenerator, args) + Arguments::GetCallInfoOffset(); }",
          "48:         static uint32 GetArgsPtrOffset() { return offsetof(JavascriptGenerator, args) + Arguments::GetValuesOffset(); }",
          "50:         void SetState(GeneratorState state) {",
          "51:             this->state = state;",
          "52:             if (state == GeneratorState::Completed)",
          "53:             {",
          "54:                 frame = nullptr;",
          "55:                 args.Values = nullptr;",
          "56:                 scriptFunction = nullptr;",
          "57:             }",
          "60:         Var CallGenerator(ResumeYieldData* yieldData, const char16* apiNameForErrorMessage);",
          "62:     private:",
          "63:         Field(InterpreterStackFrame*) frame;",
          "64:         Field(GeneratorState) state;",
          "65:         Field(Arguments) args;",
          "66:         Field(ScriptFunction*) scriptFunction;",
          "67:         Field(AsyncGeneratorQueue*) asyncGeneratorQueue;",
          "68:         Field(RuntimeFunction*) awaitNextFunction;",
          "69:         Field(RuntimeFunction*) awaitThrowFunction;",
          "70:         Field(RuntimeFunction*) awaitYieldFunction;",
          "71:         Field(RuntimeFunction*) awaitYieldStarFunction;",
          "72:         Field(bool) isAsync = false;",
          "73:         Field(int) queuePosition = 0;",
          "74:         Field(int) queueLength = 0;",
          "76:         DEFINE_VTABLE_CTOR_MEMBER_INIT(JavascriptGenerator, DynamicObject, args);",
          "77:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptGenerator);",
          "79:         JavascriptGenerator(DynamicType* type, Arguments& args, ScriptFunction* scriptFunction);",
          "81:     public:",
          "82:         static JavascriptGenerator* New(Recycler* recycler, DynamicType* generatorType, Arguments& args, ScriptFunction* scriptFunction);",
          "84:         static JavascriptGenerator *New(Recycler *recycler, DynamicType *generatorType, Arguments &args, Js::JavascriptGenerator::GeneratorState generatorState);",
          "86:         bool IsExecuting() const { return state == GeneratorState::Executing; }",
          "87:         bool IsSuspended() const { return state == GeneratorState::Suspended; }",
          "88:         bool IsCompleted() const { return state == GeneratorState::Completed; }",
          "89:         bool IsAwaitingReturn() const { return state == GeneratorState::AwaitingReturn; }",
          "90:         bool IsSuspendedStart() const { return state == GeneratorState::SuspendedStart || (state == GeneratorState::Suspended && this->frame == nullptr); }",
          "91:         void EnqueueRequest(AsyncGeneratorRequest* request)",
          "92:         {",
          "93:             asyncGeneratorQueue->Add(request);",
          "94:             ++queueLength;",
          "95:         }",
          "96:         AsyncGeneratorRequest* GetRequest (bool pop)",
          "97:         {",
          "98:             Assert(HasRequests());",
          "99:             AsyncGeneratorRequest* request = asyncGeneratorQueue->Item(queuePosition);",
          "100:             if (pop)",
          "101:             {",
          "102:                 ++queuePosition;",
          "103:             }",
          "104:             return request;",
          "105:         }",
          "106:         bool HasRequests() { return queuePosition < queueLength; }",
          "108:         void SetIsAsync() { isAsync = true; }",
          "109:         bool GetIsAsync() const { return isAsync; }",
          "110:         RuntimeFunction* GetAwaitNextFunction() { return awaitNextFunction; }",
          "111:         RuntimeFunction* GetAwaitThrowFunction() { return awaitThrowFunction; }",
          "112:         RuntimeFunction* GetAwaitYieldFunction() { return awaitYieldFunction; }",
          "113:         RuntimeFunction* EnsureAwaitYieldStarFunction();",
          "114:         void ProcessAsyncGeneratorReturn(Var value, ScriptContext* scriptContext);",
          "115:         void AsyncGeneratorResumeNext();",
          "116:         void AsyncGeneratorReject(Var reason);",
          "117:         void AsyncGeneratorResolve(Var value, bool done);",
          "118:         void CallAsyncGenerator(Var data, JavascriptExceptionObject* exceptionObj);",
          "119:         void InitialiseAsyncGenerator(ScriptContext* scriptContext);",
          "121:         void SetScriptFunction(ScriptFunction* sf)",
          "122:         {",
          "123:             this->scriptFunction = sf;",
          "124:         }",
          "126:         void SetFrame(InterpreterStackFrame* frame, size_t bytes);",
          "127:         InterpreterStackFrame* GetFrame() const { return frame; }",
          "128:         void SetFrameSlots(uint slotCount, Field(Var)* frameSlotArray);",
          "131:         virtual void Finalize(bool isShutdown) override;",
          "134:         const Arguments& GetArguments() const { return args; }",
          "136:         class EntryInfo",
          "137:         {",
          "138:         public:",
          "139:             static FunctionInfo Next;",
          "140:             static FunctionInfo Return;",
          "141:             static FunctionInfo Throw;",
          "142:             static FunctionInfo AsyncNext;",
          "143:             static FunctionInfo AsyncReturn;",
          "144:             static FunctionInfo AsyncThrow;",
          "145:         };",
          "146:         static Var EntryNext(RecyclableObject* function, CallInfo callInfo, ...);",
          "147:         static Var EntryReturn(RecyclableObject* function, CallInfo callInfo, ...);",
          "148:         static Var EntryThrow(RecyclableObject* function, CallInfo callInfo, ...);",
          "150:         static Var EntryAsyncNext(RecyclableObject* function, CallInfo callInfo, ...);",
          "151:         static Var EntryAsyncReturn(RecyclableObject* function, CallInfo callInfo, ...);",
          "152:         static Var EntryAsyncThrow(RecyclableObject* function, CallInfo callInfo, ...);",
          "153:         static Var AsyncGeneratorEnqueue(Var thisValue, ScriptContext* scriptContext, Var input, JavascriptExceptionObject* exceptionObj, const char16* apiNameForErrorMessage);",
          "154:         static Var CreateTypeError(HRESULT hr, ScriptContext* scriptContext, ...);",
          "155:         static Var EntryAsyncGeneratorResumeNextReturnProcessorReject(RecyclableObject* function, CallInfo callInfo, ...);",
          "156:         static Var EntryAsyncGeneratorResumeNextReturnProcessorResolve(RecyclableObject* function, CallInfo callInfo, ...);",
          "157:         static Var EntryAsyncGeneratorAwaitReject(RecyclableObject* function, CallInfo callInfo, ...);",
          "158:         static Var EntryAsyncGeneratorAwaitRevolve(RecyclableObject* function, CallInfo callInfo, ...);",
          "159:         static Var EntryAsyncGeneratorAwaitYield(RecyclableObject* function, CallInfo callInfo, ...);",
          "160:         static Var EntryAsyncGeneratorAwaitYieldStar(RecyclableObject* function, CallInfo callInfo, ...);",
          "162:         virtual void MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor) override;",
          "163:         virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "164:         virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "169:     public:",
          "170:         struct BailInSymbol {",
          "171:             uint32 id;",
          "172:             Var value;",
          "173:             static uint32 GetBailInSymbolIdOffset() { return offsetof(BailInSymbol, id); }",
          "174:             static uint32 GetBailInSymbolValueOffset() { return offsetof(BailInSymbol, value); }",
          "175:         };",
          "177:         Field(BailInSymbol*) bailInSymbolsTraceArray = nullptr;",
          "178:         Field(int) bailInSymbolsTraceArrayCount = 0;",
          "180:         static uint32 GetBailInSymbolsTraceArrayOffset() { return offsetof(JavascriptGenerator, bailInSymbolsTraceArray); }",
          "181:         static uint32 GetBailInSymbolsTraceArrayCountOffset() { return offsetof(JavascriptGenerator, bailInSymbolsTraceArrayCount); }",
          "182:         static void OutputBailInTrace(JavascriptGenerator* generator);",
          "183: #endif",
          "186:     template <> bool VarIsImpl<JavascriptGenerator>(RecyclableObject* obj);",
          "188:     class AsyncGeneratorNextProcessor : public RuntimeFunction",
          "190:     protected:",
          "191:         DEFINE_VTABLE_CTOR(AsyncGeneratorNextProcessor, RuntimeFunction);",
          "192:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(AsyncGeneratorNextProcessor);",
          "194:     public:",
          "195:         AsyncGeneratorNextProcessor(DynamicType* type, FunctionInfo* functionInfo, JavascriptGenerator* generator)",
          "196:             : RuntimeFunction(type, functionInfo), generator(generator) { }",
          "198:         inline JavascriptGenerator* GetGenerator() { return this->generator; }",
          "200:     private:",
          "201:         Field(JavascriptGenerator*) generator;",
          "202:     };",
          "204:     template <> bool VarIsImpl<AsyncGeneratorNextProcessor>(RecyclableObject* obj);",
          "",
          "[Added Lines]",
          "10: enum class ResumeYieldKind",
          "11: {",
          "12:     Normal = 0,",
          "13:     Throw = 1,",
          "14:     Return = 2",
          "15: };",
          "17: class JavascriptGenerator : public DynamicObject",
          "18: {",
          "19: public:",
          "20:     enum class GeneratorState",
          "21:     {",
          "22:         SuspendedStart,",
          "23:         Suspended,",
          "24:         Executing,",
          "25:         Completed",
          "28:     static uint32 GetFrameOffset()",
          "30:         return offsetof(JavascriptGenerator, frame);",
          "31:     }",
          "33:     static uint32 GetCallInfoOffset()",
          "34:     {",
          "35:         return offsetof(JavascriptGenerator, args) + Arguments::GetCallInfoOffset();",
          "36:     }",
          "38:     static uint32 GetArgsPtrOffset()",
          "39:     {",
          "40:         return offsetof(JavascriptGenerator, args) + Arguments::GetValuesOffset();",
          "41:     }",
          "43:     void SetState(GeneratorState state)",
          "45:         this->state = state;",
          "46:         if (state == GeneratorState::Completed)",
          "48:             frame = nullptr;",
          "49:             args.Values = nullptr;",
          "50:             scriptFunction = nullptr;",
          "52:     }",
          "54:     void ThrowIfExecuting(const char16* apiName);",
          "55:     Var CallGenerator(Var data, ResumeYieldKind resumeKind);",
          "57: private:",
          "58:     Field(InterpreterStackFrame*) frame;",
          "59:     Field(GeneratorState) state;",
          "60:     Field(Arguments) args;",
          "61:     Field(ScriptFunction*) scriptFunction;",
          "62:     Field(DynamicObject*) resumeYieldObject;",
          "64:     void SetResumeYieldProperties(Var value, ResumeYieldKind kind);",
          "66: protected:",
          "67:     DEFINE_VTABLE_CTOR_MEMBER_INIT(JavascriptGenerator, DynamicObject, args);",
          "68:     DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptGenerator);",
          "70:     JavascriptGenerator(DynamicType* type, Arguments& args, ScriptFunction* scriptFunction);",
          "72: public:",
          "74:     static JavascriptGenerator* New(",
          "75:         Recycler* recycler,",
          "76:         DynamicType* generatorType,",
          "77:         Arguments& args,",
          "78:         ScriptFunction* scriptFunction);",
          "80:     bool IsSuspendedStart() const { return this->state == GeneratorState::SuspendedStart; }",
          "81:     bool IsExecuting() const { return this->state == GeneratorState::Executing; }",
          "82:     bool IsSuspended() const { return this->state == GeneratorState::Suspended; }",
          "83:     bool IsCompleted() const { return this->state == GeneratorState::Completed; }",
          "85:     void SetSuspendedStart()",
          "86:     {",
          "87:         Assert(",
          "88:             this->state == GeneratorState::SuspendedStart ||",
          "89:             this->state == GeneratorState::Suspended);",
          "90:         this->state = GeneratorState::SuspendedStart;",
          "91:     }",
          "93:     void SetCompleted()",
          "94:     {",
          "95:         Assert(this->state != GeneratorState::Executing);",
          "96:         this->SetState(GeneratorState::Completed);",
          "97:     }",
          "99:     InterpreterStackFrame* GetFrame() const { return frame; }",
          "100:     const Arguments& GetArguments() const { return args; }",
          "102:     void SetScriptFunction(ScriptFunction* sf) { this->scriptFunction = sf; }",
          "103:     void SetFrame(InterpreterStackFrame* frame, size_t bytes);",
          "104:     void SetFrameSlots(uint slotCount, Field(Var)* frameSlotArray);",
          "107:     virtual void Finalize(bool isShutdown) override;",
          "110:     class EntryInfo",
          "111:     {",
          "112:     public:",
          "113:         static FunctionInfo Next;",
          "114:         static FunctionInfo Return;",
          "115:         static FunctionInfo Throw;",
          "116:     };",
          "118:     static Var EntryNext(RecyclableObject* function, CallInfo callInfo, ...);",
          "119:     static Var EntryReturn(RecyclableObject* function, CallInfo callInfo, ...);",
          "120:     static Var EntryThrow(RecyclableObject* function, CallInfo callInfo, ...);",
          "123:     static JavascriptGenerator* New(",
          "124:         Recycler* recycler,",
          "125:         DynamicType* generatorType,",
          "126:         Arguments &args,",
          "127:         Js::JavascriptGenerator::GeneratorState generatorState);",
          "129:     virtual void MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor) override;",
          "130:     virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "131:     virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "136: public:",
          "137:     struct BailInSymbol {",
          "138:         uint32 id;",
          "139:         Var value;",
          "140:         static uint32 GetBailInSymbolIdOffset() { return offsetof(BailInSymbol, id); }",
          "141:         static uint32 GetBailInSymbolValueOffset() { return offsetof(BailInSymbol, value); }",
          "144:     Field(BailInSymbol*) bailInSymbolsTraceArray = nullptr;",
          "145:     Field(int) bailInSymbolsTraceArrayCount = 0;",
          "147:     static uint32 GetBailInSymbolsTraceArrayOffset()",
          "149:         return offsetof(JavascriptGenerator, bailInSymbolsTraceArray);",
          "150:     }",
          "152:     static uint32 GetBailInSymbolsTraceArrayCountOffset()",
          "153:     {",
          "154:         return offsetof(JavascriptGenerator, bailInSymbolsTraceArrayCount);",
          "155:     }",
          "157:     static void OutputBailInTrace(JavascriptGenerator* generator);",
          "158: #endif",
          "160: };",
          "162: template<>",
          "163: bool VarIsImpl<JavascriptGenerator>(RecyclableObject* obj);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptGeneratorFunction.cpp||lib/Runtime/Library/JavascriptGeneratorFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptGeneratorFunction.cpp -> lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     FunctionInfo JavascriptGeneratorFunction::functionInfo(",
          "10:         FORCE_NO_WRITE_BARRIER_TAG(JavascriptGeneratorFunction::EntryGeneratorFunctionImplementation),",
          "11:         (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "19:     JavascriptGeneratorFunction::JavascriptGeneratorFunction(DynamicType* type)",
          "20:         : ScriptFunctionBase(type, &functionInfo),",
          "",
          "[Removed Lines]",
          "12:     FunctionInfo JavascriptAsyncFunction::functionInfo(",
          "13:         FORCE_NO_WRITE_BARRIER_TAG(JavascriptGeneratorFunction::EntryAsyncFunctionImplementation),",
          "14:         (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "15:     FunctionInfo JavascriptAsyncGeneratorFunction::functionInfo(",
          "16:         FORCE_NO_WRITE_BARRIER_TAG(JavascriptGeneratorFunction::EntryAsyncGeneratorFunctionImplementation),",
          "17:         (FunctionInfo::Attributes)(FunctionInfo::DoNotProfile | FunctionInfo::ErrorOnNew));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         DebugOnly(VerifyEntryPoint());",
          "39:     }",
          "58:     JavascriptGeneratorFunction* JavascriptGeneratorFunction::New(ScriptContext* scriptContext, GeneratorVirtualScriptFunction* scriptFunction)",
          "59:     {",
          "60:         return scriptContext->GetLibrary()->CreateGeneratorFunction(functionInfo.GetOriginalEntryPoint(), scriptFunction);",
          "61:     }",
          "68:     bool JavascriptGeneratorFunction::IsBaseGeneratorFunction(RecyclableObject* obj)",
          "69:     {",
          "70:         if (VarIs<JavascriptFunction>(obj))",
          "",
          "[Removed Lines]",
          "41:     JavascriptAsyncGeneratorFunction::JavascriptAsyncGeneratorFunction(DynamicType* type, GeneratorVirtualScriptFunction* scriptFunction)",
          "42:         : JavascriptGeneratorFunction(type, &functionInfo, scriptFunction)",
          "43:     {",
          "44:         DebugOnly(VerifyEntryPoint());",
          "45:     }",
          "47:     JavascriptAsyncFunction::JavascriptAsyncFunction(DynamicType* type, GeneratorVirtualScriptFunction* scriptFunction)",
          "48:         : JavascriptGeneratorFunction(type, &functionInfo, scriptFunction)",
          "49:     {",
          "50:         DebugOnly(VerifyEntryPoint());",
          "51:     }",
          "53:     JavascriptAsyncFunction* JavascriptAsyncFunction::New(ScriptContext* scriptContext, GeneratorVirtualScriptFunction* scriptFunction)",
          "54:     {",
          "55:         return scriptContext->GetLibrary()->CreateAsyncFunction(functionInfo.GetOriginalEntryPoint(), scriptFunction);",
          "56:     }",
          "63:     JavascriptAsyncGeneratorFunction* JavascriptAsyncGeneratorFunction::New(ScriptContext* scriptContext, GeneratorVirtualScriptFunction* scriptFunction)",
          "64:     {",
          "65:         return scriptContext->GetLibrary()->CreateAsyncGeneratorFunction(functionInfo.GetOriginalEntryPoint(), scriptFunction);",
          "66:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         return JavascriptGeneratorFunction::IsBaseGeneratorFunction(obj) || VarIs<JavascriptAsyncFunction>(obj) || VarIs<JavascriptAsyncGeneratorFunction>(obj);",
          "82:     }",
          "106:     JavascriptGeneratorFunction* JavascriptGeneratorFunction::OP_NewScGenFunc(FrameDisplay *environment, FunctionInfoPtrPtr infoRef)",
          "107:     {",
          "108:         FunctionProxy* functionProxy = (*infoRef)->GetFunctionProxy();",
          "",
          "[Removed Lines]",
          "84:     template <> bool Js::VarIsImpl<JavascriptAsyncFunction>(RecyclableObject* obj)",
          "85:     {",
          "86:         if (VarIs<JavascriptFunction>(obj))",
          "87:         {",
          "88:             return VirtualTableInfo<JavascriptAsyncFunction>::HasVirtualTable(obj)",
          "89:                 || VirtualTableInfo<CrossSiteObject<JavascriptAsyncFunction>>::HasVirtualTable(obj);",
          "90:         }",
          "92:         return false;",
          "93:     }",
          "95:     template <> bool Js::VarIsImpl<JavascriptAsyncGeneratorFunction>(RecyclableObject* obj)",
          "96:     {",
          "97:         if (VarIs<JavascriptFunction>(obj))",
          "98:         {",
          "99:             return VirtualTableInfo<JavascriptAsyncGeneratorFunction>::HasVirtualTable(obj)",
          "100:                 || VirtualTableInfo<CrossSiteObject<JavascriptAsyncGeneratorFunction>>::HasVirtualTable(obj);",
          "101:         }",
          "103:         return false;",
          "104:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:     Var JavascriptGeneratorFunction::EntryGeneratorFunctionImplementation(RecyclableObject* function, CallInfo callInfo, ...)",
          "154:     {",
          "155:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "158:         Assert(!(callInfo.Flags & CallFlags_New));",
          "175:         BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "176:         {",
          "178:         }",
          "179:         END_SAFE_REENTRANT_CALL",
          "254:     }",
          "256:     Var JavascriptGeneratorFunction::NewInstance(RecyclableObject* function, CallInfo callInfo, ...)",
          "",
          "[Removed Lines]",
          "156:         ARGUMENTS(stackArgs, callInfo);",
          "160:         ScriptContext* scriptContext = function->GetScriptContext();",
          "161:         JavascriptGeneratorFunction* generatorFunction = VarTo<JavascriptGeneratorFunction>(function);",
          "165:         Field(Var)* argsHeapCopy = RecyclerNewArray(scriptContext->GetRecycler(), Field(Var), stackArgs.Info.Count);",
          "166:         CopyArray(argsHeapCopy, stackArgs.Info.Count, stackArgs.Values, stackArgs.Info.Count);",
          "167:         Arguments heapArgs(callInfo, unsafe_write_barrier_cast<Var*>(argsHeapCopy));",
          "169:         DynamicObject* prototype = scriptContext->GetLibrary()->CreateGeneratorConstructorPrototypeObject();",
          "170:         JavascriptGenerator* generator = scriptContext->GetLibrary()->CreateGenerator(heapArgs, generatorFunction->scriptFunction, prototype);",
          "172:         JavascriptOperators::OrdinaryCreateFromConstructor(function, generator, prototype, scriptContext);",
          "177:             CALL_ENTRYPOINT(scriptContext->GetThreadContext(), generator->EntryNext, function, CallInfo(CallFlags_Value, 1), generator);",
          "181:         return generator;",
          "182:     }",
          "184:     Var JavascriptGeneratorFunction::EntryAsyncGeneratorFunctionImplementation(RecyclableObject* function, CallInfo callInfo, ...)",
          "185:     {",
          "186:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "187:         ARGUMENTS(stackArgs, callInfo);",
          "189:         Assert(!(callInfo.Flags & CallFlags_New));",
          "191:         ScriptContext* scriptContext = function->GetScriptContext();",
          "192:         JavascriptAsyncGeneratorFunction* asyncGeneratorFunction = VarTo<JavascriptAsyncGeneratorFunction>(function);",
          "196:         Field(Var)* argsHeapCopy = RecyclerNewArray(scriptContext->GetRecycler(), Field(Var), stackArgs.Info.Count);",
          "197:         CopyArray(argsHeapCopy, stackArgs.Info.Count, stackArgs.Values, stackArgs.Info.Count);",
          "198:         Arguments heapArgs(callInfo, unsafe_write_barrier_cast<Var*>(argsHeapCopy));",
          "200:         DynamicObject* prototype = scriptContext->GetLibrary()->CreateAsyncGeneratorConstructorPrototypeObject();",
          "201:         JavascriptGenerator* generator = scriptContext->GetLibrary()->CreateGenerator(heapArgs, asyncGeneratorFunction->scriptFunction, prototype);",
          "202:         generator->SetIsAsync();",
          "203:         generator->InitialiseAsyncGenerator(scriptContext);",
          "205:         JavascriptOperators::OrdinaryCreateFromConstructor(function, generator, prototype, scriptContext);",
          "206:         return generator;",
          "207:     }",
          "209:     Var JavascriptGeneratorFunction::EntryAsyncFunctionImplementation(RecyclableObject* function, CallInfo callInfo, ...)",
          "210:     {",
          "211:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "212:         ARGUMENTS(stackArgs, callInfo);",
          "214:         ScriptContext* scriptContext = function->GetScriptContext();",
          "215:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "216:         RecyclableObject* prototype = scriptContext->GetLibrary()->GetNull();",
          "220:         Field(Var)* argsHeapCopy = RecyclerNewArray(scriptContext->GetRecycler(), Field(Var), stackArgs.Info.Count);",
          "221:         CopyArray(argsHeapCopy, stackArgs.Info.Count, stackArgs.Values, stackArgs.Info.Count);",
          "222:         Arguments heapArgs(callInfo, unsafe_write_barrier_cast<Var*>(argsHeapCopy));",
          "224:         JavascriptExceptionObject* e = nullptr;",
          "225:         JavascriptPromiseResolveOrRejectFunction* resolve;",
          "226:         JavascriptPromiseResolveOrRejectFunction* reject;",
          "227:         JavascriptPromiseAsyncSpawnExecutorFunction* executor =",
          "228:             library->CreatePromiseAsyncSpawnExecutorFunction(",
          "229:                 scriptContext->GetLibrary()->CreateGenerator(heapArgs, VarTo<JavascriptAsyncFunction>(function)->GetGeneratorVirtualScriptFunction(), prototype),",
          "230:                 stackArgs[0]);",
          "232:         JavascriptPromise* promise = library->CreatePromise();",
          "233:         JavascriptPromise::InitializePromise(promise, &resolve, &reject, scriptContext);",
          "235:         try",
          "236:         {",
          "237:             BEGIN_SAFE_REENTRANT_CALL(scriptContext->GetThreadContext())",
          "238:             {",
          "239:                 CALL_FUNCTION(scriptContext->GetThreadContext(), executor, CallInfo(CallFlags_Value, 3), library->GetUndefined(), resolve, reject);",
          "240:             }",
          "241:             END_SAFE_REENTRANT_CALL",
          "242:         }",
          "243:         catch (const JavascriptException& err)",
          "244:         {",
          "245:             e = err.GetAndClear();",
          "246:         }",
          "248:         if (e != nullptr)",
          "249:         {",
          "250:             JavascriptPromise::TryRejectWithExceptionObject(e, reject, scriptContext);",
          "251:         }",
          "253:         return promise;",
          "",
          "[Added Lines]",
          "106:         ARGUMENTS(args, callInfo);",
          "110:         auto* scriptContext = function->GetScriptContext();",
          "111:         auto* library = scriptContext->GetLibrary();",
          "112:         auto* generatorFunction = VarTo<JavascriptGeneratorFunction>(function);",
          "114:         DynamicObject* prototype = library->CreateGeneratorConstructorPrototypeObject();",
          "116:         JavascriptGenerator* generator = library->CreateGenerator(",
          "117:             args,",
          "118:             generatorFunction->scriptFunction,",
          "119:             prototype);",
          "124:             generator->CallGenerator(library->GetUndefined(), ResumeYieldKind::Normal);",
          "128:         generator->SetSuspendedStart();",
          "131:         JavascriptOperators::OrdinaryCreateFromConstructor(",
          "132:             function,",
          "133:             generator,",
          "134:             prototype,",
          "135:             scriptContext);",
          "137:         return generator;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "527:         }",
          "528:     }",
          "554:     void GeneratorVirtualScriptFunction::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "555:     {",
          "556:         this->ScriptFunction::MarkVisitKindSpecificPtrs(extractor);",
          "",
          "[Removed Lines]",
          "530:     TTD::NSSnapObjects::SnapObjectType JavascriptAsyncFunction::GetSnapTag_TTD() const",
          "531:     {",
          "532:         return TTD::NSSnapObjects::SnapObjectType::SnapAsyncFunction;",
          "533:     }",
          "535:     void JavascriptAsyncFunction::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "536:     {",
          "537:         TTD::NSSnapObjects::SnapGeneratorFunctionInfo* fi = nullptr;",
          "538:         uint32 depCount = 0;",
          "539:         TTD_PTR_ID* depArray = nullptr;",
          "541:         this->CreateSnapObjectInfo(alloc, &fi, &depArray, &depCount);",
          "543:         if (depCount == 0)",
          "544:         {",
          "545:             TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::SnapAsyncFunction>(objData, fi);",
          "546:         }",
          "547:         else",
          "548:         {",
          "549:             TTDAssert(depArray != nullptr, \"depArray should be non-null if depCount is > 0\");",
          "550:             TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapGeneratorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::SnapAsyncFunction>(objData, fi, alloc, depCount, depArray);",
          "551:         }",
          "552:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptGeneratorFunction.h||lib/Runtime/Library/JavascriptGeneratorFunction.h": [
          "File: lib/Runtime/Library/JavascriptGeneratorFunction.h -> lib/Runtime/Library/JavascriptGeneratorFunction.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         static JavascriptGeneratorFunction* OP_NewScGenFunc(FrameDisplay* environment, FunctionInfoPtrPtr infoRef);",
          "40:         static JavascriptGeneratorFunction* OP_NewScGenFuncHomeObj(FrameDisplay* environment, FunctionInfoPtrPtr infoRef, Var homeObj);",
          "41:         static Var EntryGeneratorFunctionImplementation(RecyclableObject* function, CallInfo callInfo, ...);",
          "44:         static DWORD GetOffsetOfScriptFunction() { return offsetof(JavascriptGeneratorFunction, scriptFunction); }",
          "46:         void SetScriptFunction(GeneratorVirtualScriptFunction* scriptFunction) {",
          "",
          "[Removed Lines]",
          "42:         static Var EntryAsyncFunctionImplementation(RecyclableObject* function, CallInfo callInfo, ...);",
          "43:         static Var EntryAsyncGeneratorFunctionImplementation(RecyclableObject* function, CallInfo callInfo, ...);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     template <> bool VarIsImpl<JavascriptGeneratorFunction>(RecyclableObject* obj);",
          "179:     class GeneratorVirtualScriptFunction : public ScriptFunction",
          "180:     {",
          "181:     private:",
          "",
          "[Removed Lines]",
          "103:     class JavascriptAsyncFunction : public JavascriptGeneratorFunction",
          "104:     {",
          "105:     private:",
          "106:         static FunctionInfo functionInfo;",
          "108:         DEFINE_VTABLE_CTOR(JavascriptAsyncFunction, JavascriptGeneratorFunction);",
          "109:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptAsyncFunction);",
          "111:     protected:",
          "112:         JavascriptAsyncFunction(DynamicType* type);",
          "114:     public:",
          "115:         JavascriptAsyncFunction(DynamicType* type, GeneratorVirtualScriptFunction* scriptFunction);",
          "117:         static JavascriptAsyncFunction* New(ScriptContext* scriptContext, GeneratorVirtualScriptFunction* scriptFunction);",
          "118:         static DWORD GetOffsetOfScriptFunction() { return JavascriptGeneratorFunction::GetOffsetOfScriptFunction(); }",
          "120:         inline static bool Test(JavascriptFunction *obj)",
          "121:         {",
          "122:             return VirtualTableInfo<JavascriptAsyncFunction>::HasVirtualTable(obj)",
          "123:                 || VirtualTableInfo<CrossSiteObject<JavascriptAsyncFunction>>::HasVirtualTable(obj);",
          "124:         }",
          "126: #if ENABLE_TTD",
          "127:         virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "128:         virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "129: #endif",
          "131:     public:",
          "132:         virtual VTableValue DummyVirtualFunctionToHinderLinkerICF()",
          "133:         {",
          "134:             return VTableValue::VtableJavascriptAsyncFunction;",
          "135:         }",
          "136:     };",
          "138:     template <> bool VarIsImpl<JavascriptAsyncFunction>(RecyclableObject* obj);",
          "140:     class JavascriptAsyncGeneratorFunction : public JavascriptGeneratorFunction",
          "141:     {",
          "142:     private:",
          "143:         static FunctionInfo functionInfo;",
          "145:         DEFINE_VTABLE_CTOR(JavascriptAsyncGeneratorFunction, JavascriptGeneratorFunction);",
          "146:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptAsyncGeneratorFunction);",
          "148:     protected:",
          "149:         JavascriptAsyncGeneratorFunction(DynamicType* type);",
          "151:     public:",
          "152:         JavascriptAsyncGeneratorFunction(DynamicType* type, GeneratorVirtualScriptFunction* scriptFunction);",
          "154:         static JavascriptAsyncGeneratorFunction* New(ScriptContext* scriptContext, GeneratorVirtualScriptFunction* scriptFunction);",
          "155:         static DWORD GetOffsetOfScriptFunction() { return JavascriptGeneratorFunction::GetOffsetOfScriptFunction(); }",
          "157:         inline static bool Test(JavascriptFunction *obj)",
          "158:         {",
          "159:             return VirtualTableInfo<JavascriptAsyncGeneratorFunction>::HasVirtualTable(obj)",
          "160:                 || VirtualTableInfo<CrossSiteObject<JavascriptAsyncGeneratorFunction>>::HasVirtualTable(obj);",
          "161:         }",
          "164: #if ENABLE_TTD",
          "165:         virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "166:         virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "167: #endif",
          "170:     public:",
          "171:         virtual VTableValue DummyVirtualFunctionToHinderLinkerICF()",
          "172:         {",
          "173:             return VTableValue::VtableJavascriptAsyncFunction;",
          "174:         }",
          "175:     };",
          "177:     template <> bool VarIsImpl<JavascriptAsyncGeneratorFunction>(RecyclableObject* obj);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp": [
          "File: lib/Runtime/Library/JavascriptLibrary.cpp -> lib/Runtime/Library/JavascriptLibrary.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:         iteratorResultType = DynamicType::New(scriptContext, TypeIds_Object, objectPrototype, nullptr,",
          "745:             PathTypeHandlerNoAttr::New(scriptContext, iteratorResultPath, iteratorResultPath->GetPathLength(), 2, sizeof(DynamicObject), true, true), true, true);",
          "747:         arrayIteratorType = DynamicType::New(scriptContext, TypeIds_ArrayIterator, arrayIteratorPrototype, nullptr,",
          "748:             PathTypeHandlerNoAttr::New(scriptContext, this->GetRootPath(), 0, 0, 0, true, true), true, true);",
          "749:         mapIteratorType = DynamicType::New(scriptContext, TypeIds_MapIterator, mapIteratorPrototype, nullptr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:         auto* awaitObjectPath = TypePath::New(recycler);",
          "749:         awaitObjectPath->Add(BuiltInPropertyRecords::value);",
          "751:         auto* awaitObjectHandler = PathTypeHandlerNoAttr::New(",
          "752:             scriptContext,",
          "753:             awaitObjectPath,",
          "754:             awaitObjectPath->GetPathLength(),",
          "755:             1,",
          "756:             sizeof(DynamicObject),",
          "757:             true,",
          "758:             true);",
          "760:         awaitObjectType = DynamicType::New(",
          "761:             scriptContext,",
          "762:             TypeIds_AwaitObject,",
          "763:             objectPrototype,",
          "764:             nullptr,",
          "765:             awaitObjectHandler,",
          "766:             true,",
          "767:             true);",
          "770:         auto* resumeObjectPath = TypePath::New(recycler);",
          "771:         resumeObjectPath->Add(BuiltInPropertyRecords::value);",
          "772:         resumeObjectPath->Add(BuiltInPropertyRecords::kind);",
          "774:         auto* resumeObjectHandler = PathTypeHandlerNoAttr::New(",
          "775:             scriptContext,",
          "776:             resumeObjectPath,",
          "777:             resumeObjectPath->GetPathLength(),",
          "778:             2,",
          "779:             sizeof(DynamicObject),",
          "780:             true,",
          "781:             true);",
          "783:         resumeYieldObjectType = DynamicType::New(",
          "784:             scriptContext,",
          "785:             TypeIds_Object,",
          "786:             objectPrototype,",
          "787:             nullptr,",
          "788:             resumeObjectHandler,",
          "789:             true,",
          "790:             true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2721:         return generatorReturnFunction;",
          "2722:     }",
          "2724:     JavascriptFunction* JavascriptLibrary::EnsureAsyncGeneratorNextFunction()",
          "2725:     {",
          "2726:         if (asyncGeneratorNextFunction == nullptr)",
          "2727:         {",
          "2729:         }",
          "2730:         return asyncGeneratorNextFunction;",
          "2731:     }",
          "",
          "[Removed Lines]",
          "2728:             asyncGeneratorNextFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::AsyncNext, 1, nullptr, nullptr, PropertyIds::next);",
          "",
          "[Added Lines]",
          "2770:     JavascriptFunction* JavascriptLibrary::EnsureGeneratorNextFunction()",
          "2771:     {",
          "2772:         if (generatorNextFunction == nullptr)",
          "2773:         {",
          "2774:             generatorNextFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::Next, 1, nullptr, nullptr, PropertyIds::next);",
          "2775:         }",
          "2776:         return generatorNextFunction;",
          "2777:     }",
          "2779:     JavascriptFunction* JavascriptLibrary::EnsureGeneratorThrowFunction()",
          "2780:     {",
          "2781:         if (generatorThrowFunction == nullptr)",
          "2782:         {",
          "2783:             generatorThrowFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::Throw, 1, nullptr, nullptr, PropertyIds::throw_);",
          "2784:         }",
          "2785:         return generatorThrowFunction;",
          "2786:     }",
          "2792:             asyncGeneratorNextFunction = DefaultCreateFunction(&JavascriptAsyncGenerator::EntryInfo::Next, 1, nullptr, nullptr, PropertyIds::next);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2734:     {",
          "2735:         if (asyncGeneratorReturnFunction == nullptr)",
          "2736:         {",
          "2738:         }",
          "2739:         return asyncGeneratorReturnFunction;",
          "2740:     }",
          "",
          "[Removed Lines]",
          "2737:             asyncGeneratorReturnFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::AsyncReturn, 1, nullptr, nullptr, PropertyIds::return_);",
          "",
          "[Added Lines]",
          "2801:             asyncGeneratorReturnFunction = DefaultCreateFunction(&JavascriptAsyncGenerator::EntryInfo::Return, 1, nullptr, nullptr, PropertyIds::return_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2743:     {",
          "2744:         if (asyncGeneratorThrowFunction == nullptr)",
          "2745:         {",
          "2747:         }",
          "2748:         return asyncGeneratorThrowFunction;",
          "2749:     }",
          "",
          "[Removed Lines]",
          "2746:             asyncGeneratorThrowFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::AsyncThrow, 1, nullptr, nullptr, PropertyIds::throw_);",
          "",
          "[Added Lines]",
          "2810:             asyncGeneratorThrowFunction = DefaultCreateFunction(&JavascriptAsyncGenerator::EntryInfo::Throw, 1, nullptr, nullptr, PropertyIds::throw_);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2775:         return asyncFromSyncIteratorThrowFunction;",
          "2776:     }",
          "2797:     bool JavascriptLibrary::InitializeAsyncFunctionConstructor(DynamicObject* asyncFunctionConstructor, DeferredTypeHandlerBase * typeHandler, DeferredInitializeMode mode)",
          "2798:     {",
          "2799:         typeHandler->Convert(asyncFunctionConstructor, mode, 3);",
          "",
          "[Removed Lines]",
          "2779:     JavascriptFunction* JavascriptLibrary::EnsureGeneratorNextFunction()",
          "2780:     {",
          "2781:         if (generatorNextFunction == nullptr)",
          "2782:         {",
          "2783:             generatorNextFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::Next, 1, nullptr, nullptr, PropertyIds::next);",
          "2784:         }",
          "2785:         return generatorNextFunction;",
          "2786:     }",
          "2788:     JavascriptFunction* JavascriptLibrary::EnsureGeneratorThrowFunction()",
          "2789:     {",
          "2790:         if (generatorThrowFunction == nullptr)",
          "2791:         {",
          "2792:             generatorThrowFunction = DefaultCreateFunction(&JavascriptGenerator::EntryInfo::Throw, 1, nullptr, nullptr, PropertyIds::throw_);",
          "2793:         }",
          "2794:         return generatorThrowFunction;",
          "2795:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2865:         typeHandler->Convert(asyncGeneratorPrototype, mode, 5);",
          "2867:         library->AddMember(asyncGeneratorPrototype, PropertyIds::constructor, library->asyncGeneratorFunctionPrototype, PropertyConfigurable);",
          "2869:             library->AddMember(asyncGeneratorPrototype, PropertyIds::_symbolToStringTag, library->CreateStringFromCppLiteral(_u(\"AsyncGenerator\")), PropertyConfigurable);",
          "2870:         }",
          "",
          "[Removed Lines]",
          "2868:         if (scriptContext->GetConfig()->IsES6ToStringTagEnabled()) {",
          "",
          "[Added Lines]",
          "2913:         if (scriptContext->GetConfig()->IsES6ToStringTagEnabled())",
          "2914:         {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3530:         VirtualTableRecorder<Js::ScriptFunction>::RecordVirtualTableAddress(vtableAddresses, VTableValue::VtableScriptFunction);",
          "3531:         VirtualTableRecorder<Js::JavascriptGeneratorFunction>::RecordVirtualTableAddress(vtableAddresses, VTableValue::VtableJavascriptGeneratorFunction);",
          "3532:         VirtualTableRecorder<Js::JavascriptAsyncFunction>::RecordVirtualTableAddress(vtableAddresses, VTableValue::VtableJavascriptAsyncFunction);",
          "3535:         VirtualTableRecorder<Js::FunctionWithComputedName<Js::AsmJsScriptFunction>>::RecordVirtualTableAddress(vtableAddresses, VTableValue::VtableAsmJsScriptFunctionWithComputedName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3579:         VirtualTableRecorder<Js::JavascriptAsyncGeneratorFunction>::RecordVirtualTableAddress(vtableAddresses, VTableValue::VtableJavascriptAsyncGeneratorFunction);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6134:         return RecyclerNew(this->GetRecycler(), JavascriptPromise, promiseType);",
          "6135:     }",
          "6138:     {",
          "6154:     }",
          "6157:     {",
          "6161:     }",
          "6163:     JavascriptError* JavascriptLibrary::CreateError()",
          "",
          "[Removed Lines]",
          "6137:     JavascriptPromiseAsyncSpawnExecutorFunction* JavascriptLibrary::CreatePromiseAsyncSpawnExecutorFunction(JavascriptGenerator* generator, Var target)",
          "6139:         JavascriptMethod entryPoint = JavascriptPromise::EntryJavascriptPromiseAsyncSpawnExecutorFunction;",
          "6140:         FunctionInfo* functionInfo = RecyclerNew(this->GetRecycler(), FunctionInfo, entryPoint);",
          "6141:         DynamicType* type = CreateDeferredPrototypeFunctionType(this->inDispatchProfileMode ? ProfileEntryThunk : entryPoint);",
          "6142:         JavascriptPromiseAsyncSpawnExecutorFunction* function = RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, JavascriptPromiseAsyncSpawnExecutorFunction, type, functionInfo, generator, target);",
          "6144:         return function;",
          "6145:     }",
          "6147:     JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* JavascriptLibrary::CreatePromiseAsyncSpawnStepArgumentExecutorFunction(JavascriptMethod entryPoint, JavascriptGenerator* generator, Var argument, Var resolve, Var reject, bool isReject)",
          "6148:     {",
          "6149:         FunctionInfo* functionInfo = RecyclerNew(this->GetRecycler(), FunctionInfo, entryPoint);",
          "6150:         DynamicType* type = CreateDeferredPrototypeFunctionType(this->inDispatchProfileMode ? ProfileEntryThunk : entryPoint);",
          "6151:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* function = RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction, type, functionInfo, generator, argument, resolve, reject, isReject);",
          "6153:         return function;",
          "6156:     JavascriptGenerator* JavascriptLibrary::CreateGenerator(Arguments& args, ScriptFunction* scriptFunction, RecyclableObject* prototype)",
          "6158:         Assert(scriptContext->GetConfig()->IsES6GeneratorsEnabled());",
          "6159:         DynamicType* generatorType = CreateGeneratorType(prototype);",
          "6160:         return JavascriptGenerator::New(this->GetRecycler(), generatorType, args, scriptFunction);",
          "",
          "[Added Lines]",
          "6184:     JavascriptAsyncSpawnStepFunction* JavascriptLibrary::CreateAsyncSpawnStepFunction(",
          "6185:         JavascriptMethod entryPoint,",
          "6186:         JavascriptGenerator* generator,",
          "6187:         Var argument,",
          "6188:         Var resolve,",
          "6189:         Var reject,",
          "6190:         bool isReject)",
          "6191:     {",
          "6192:         FunctionInfo* functionInfo = RecyclerNew(GetRecycler(), FunctionInfo, entryPoint);",
          "6193:         DynamicType* type = CreateDeferredPrototypeFunctionType(",
          "6194:             this->inDispatchProfileMode ? ProfileEntryThunk : entryPoint);",
          "6196:         return RecyclerNewEnumClass(",
          "6197:             GetRecycler(),",
          "6198:             EnumFunctionClass,",
          "6199:             JavascriptAsyncSpawnStepFunction,",
          "6200:             type,",
          "6201:             functionInfo,",
          "6202:             generator,",
          "6203:             argument,",
          "6204:             resolve,",
          "6205:             reject,",
          "6206:             isReject);",
          "6207:     }",
          "6209:     JavascriptGenerator* JavascriptLibrary::CreateGenerator(",
          "6210:         Arguments& args,",
          "6211:         ScriptFunction* scriptFunction,",
          "6212:         RecyclableObject* prototype)",
          "6214:         Assert(scriptContext->GetConfig()->IsES6GeneratorsEnabled());",
          "6215:         return JavascriptGenerator::New(",
          "6216:             GetRecycler(),",
          "6217:             CreateGeneratorType(prototype),",
          "6218:             args,",
          "6219:             scriptFunction);",
          "6222:     JavascriptAsyncGenerator* JavascriptLibrary::CreateAsyncGenerator(",
          "6223:         Arguments& args,",
          "6224:         ScriptFunction* scriptFunction,",
          "6225:         RecyclableObject* prototype)",
          "6227:         Assert(scriptContext->GetConfig()->IsES2018AsyncIterationEnabled());",
          "6228:         return JavascriptAsyncGenerator::New(",
          "6229:             GetRecycler(),",
          "6230:             CreateAsyncGeneratorType(prototype),",
          "6231:             args,",
          "6232:             scriptFunction);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6373:         return DynamicType::New(scriptContext, TypeIds_Generator, prototype, nullptr, NullTypeHandler<false>::GetDefaultInstance());",
          "6374:     }",
          "6376:     DynamicType * JavascriptLibrary::CreateAsyncFromSyncIteratorType()",
          "6377:     {",
          "6378:         return DynamicType::New(scriptContext, TypeIds_AsyncFromSyncIterator, asyncFromSyncIteratorProtototype, nullptr, NullTypeHandler<false>::GetDefaultInstance());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6448:     DynamicType* JavascriptLibrary::CreateAsyncGeneratorType(RecyclableObject* prototype)",
          "6449:     {",
          "6450:         return DynamicType::New(",
          "6451:             scriptContext,",
          "6452:             TypeIds_AsyncGenerator,",
          "6453:             prototype,",
          "6454:             nullptr,",
          "6455:             NullTypeHandler<false>::GetDefaultInstance());",
          "6456:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6415:         return asyncFromSyncIteratorValueUnwrapTrueFunction;",
          "6416:     }",
          "6419:     {",
          "6420:         Assert(scriptContext->GetConfig()->IsES2018AsyncIterationEnabled());",
          "6455:     }",
          "6457:     JavascriptAsyncGeneratorFunction* JavascriptLibrary::CreateAsyncGeneratorFunction(JavascriptMethod entryPoint, GeneratorVirtualScriptFunction* scriptFunction)",
          "",
          "[Removed Lines]",
          "6418:     AsyncGeneratorNextProcessor* JavascriptLibrary::CreateAsyncGeneratorResumeNextReturnProcessorFunction(JavascriptGenerator* generator, bool isReject)",
          "6422:         JavascriptMethod entryPoint = isReject? JavascriptGenerator::EntryAsyncGeneratorResumeNextReturnProcessorReject : JavascriptGenerator::EntryAsyncGeneratorResumeNextReturnProcessorResolve;",
          "6423:         FunctionInfo* functionInfo = RecyclerNew(this->GetRecycler(), FunctionInfo, entryPoint);",
          "6424:         DynamicType* type = DynamicType::New(scriptContext, TypeIds_Function, functionPrototype, entryPoint, GetDeferredAnonymousFunctionTypeHandler());",
          "6426:         AsyncGeneratorNextProcessor* function = RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, AsyncGeneratorNextProcessor, type, functionInfo, generator);",
          "6428:         return function;",
          "6429:     }",
          "6431:     AsyncGeneratorNextProcessor* JavascriptLibrary::CreateAsyncGeneratorAwaitFunction(JavascriptGenerator* generator, bool isReject)",
          "6432:     {",
          "6433:         Assert(scriptContext->GetConfig()->IsES2018AsyncIterationEnabled());",
          "6435:         JavascriptMethod entryPoint = isReject ? JavascriptGenerator::EntryAsyncGeneratorAwaitReject : JavascriptGenerator::EntryAsyncGeneratorAwaitRevolve;",
          "6436:         FunctionInfo* functionInfo = RecyclerNew(this->GetRecycler(), FunctionInfo, entryPoint);",
          "6437:         DynamicType* type = DynamicType::New(scriptContext, TypeIds_Function, functionPrototype, entryPoint, GetDeferredAnonymousFunctionTypeHandler());",
          "6439:         AsyncGeneratorNextProcessor* function = RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, AsyncGeneratorNextProcessor, type, functionInfo, generator);",
          "6441:         return function;",
          "6442:     }",
          "6444:     AsyncGeneratorNextProcessor* JavascriptLibrary::CreateAsyncGeneratorAwaitYieldFunction(JavascriptGenerator* generator, bool isYieldStar)",
          "6445:     {",
          "6446:         Assert(scriptContext->GetConfig()->IsES2018AsyncIterationEnabled());",
          "6448:         JavascriptMethod entryPoint = isYieldStar ? JavascriptGenerator::EntryAsyncGeneratorAwaitYieldStar : JavascriptGenerator::EntryAsyncGeneratorAwaitYield;",
          "6449:         FunctionInfo* functionInfo = RecyclerNew(this->GetRecycler(), FunctionInfo, entryPoint);",
          "6450:         DynamicType* type = DynamicType::New(scriptContext, TypeIds_Function, functionPrototype, entryPoint, GetDeferredAnonymousFunctionTypeHandler());",
          "6452:         AsyncGeneratorNextProcessor* function = RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, AsyncGeneratorNextProcessor, type, functionInfo, generator);",
          "6454:         return function;",
          "",
          "[Added Lines]",
          "6500:     AsyncGeneratorCallbackFunction* JavascriptLibrary::CreateAsyncGeneratorCallbackFunction(",
          "6501:         JavascriptMethod entryPoint,",
          "6502:         JavascriptAsyncGenerator* generator)",
          "6506:         auto* functionInfo = RecyclerNew(GetRecycler(), FunctionInfo, entryPoint);",
          "6508:         auto* type = DynamicType::New(",
          "6509:             scriptContext,",
          "6510:             TypeIds_Function,",
          "6511:             functionPrototype,",
          "6512:             entryPoint,",
          "6513:             GetDeferredAnonymousFunctionTypeHandler());",
          "6515:         return RecyclerNewEnumClass(",
          "6516:             GetRecycler(),",
          "6517:             EnumFunctionClass,",
          "6518:             AsyncGeneratorCallbackFunction,",
          "6519:             type,",
          "6520:             functionInfo,",
          "6521:             generator);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7014:     DynamicObject* JavascriptLibrary::CreateIteratorResultObject(Var value, Var done)",
          "7015:     {",
          "7018:         iteratorResult->SetSlot(SetSlotArguments(Js::PropertyIds::value, 0, value));",
          "7019:         iteratorResult->SetSlot(SetSlotArguments(Js::PropertyIds::done, 1, done));",
          "",
          "[Removed Lines]",
          "7016:         DynamicObject* iteratorResult = DynamicObject::New(this->GetRecycler(), iteratorResultType);",
          "",
          "[Added Lines]",
          "7083:         auto* iteratorResult = DynamicObject::New(GetRecycler(), iteratorResultType);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7021:         return iteratorResult;",
          "7022:     }",
          "7025:     {",
          "7031:     }",
          "7034:     {",
          "7036:     }",
          "7039:     {",
          "7041:     }",
          "7043:     RecyclableObject* JavascriptLibrary::CreateThrowErrorObject(JavascriptError* error)",
          "",
          "[Removed Lines]",
          "7024:     JavascriptListIterator* JavascriptLibrary::CreateListIterator(ListForListIterator* list)",
          "7026:         JavascriptListIterator* iterator = RecyclerNew(this->GetRecycler(), JavascriptListIterator, listIteratorType, list);",
          "7027:         JavascriptFunction* nextFunction = DefaultCreateFunction(&JavascriptListIterator::EntryInfo::Next, 0, nullptr, nullptr, PropertyIds::next);",
          "7028:         AssertOrFailFast(VarIsCorrectType(nextFunction));",
          "7029:         JavascriptOperators::SetProperty(iterator, iterator, PropertyIds::next, nextFunction, GetScriptContext(), PropertyOperation_None);",
          "7030:         return iterator;",
          "7033:     DynamicObject* JavascriptLibrary::CreateIteratorResultObjectValueFalse(Var value)",
          "7035:         return CreateIteratorResultObject(value, GetFalse());",
          "7038:     DynamicObject* JavascriptLibrary::CreateIteratorResultObjectUndefinedTrue()",
          "7040:         return CreateIteratorResultObject(GetUndefined(), GetTrue());",
          "",
          "[Added Lines]",
          "7091:     DynamicObject* JavascriptLibrary::CreateIteratorResultObject(Var value, bool done)",
          "7093:         return CreateIteratorResultObject(value, done ? GetTrue() : GetFalse());",
          "7096:     DynamicObject* JavascriptLibrary::CreateIteratorResultObjectDone()",
          "7098:         return CreateIteratorResultObject(GetUndefined(), GetTrue());",
          "7101:     JavascriptListIterator* JavascriptLibrary::CreateListIterator(ListForListIterator* list)",
          "7103:         JavascriptListIterator* iterator = RecyclerNew(this->GetRecycler(), JavascriptListIterator, listIteratorType, list);",
          "7104:         JavascriptFunction* nextFunction = DefaultCreateFunction(&JavascriptListIterator::EntryInfo::Next, 0, nullptr, nullptr, PropertyIds::next);",
          "7105:         AssertOrFailFast(VarIsCorrectType(nextFunction));",
          "7106:         JavascriptOperators::SetProperty(iterator, iterator, PropertyIds::next, nextFunction, GetScriptContext(), PropertyOperation_None);",
          "7107:         return iterator;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptLibrary.h||lib/Runtime/Library/JavascriptLibrary.h": [
          "File: lib/Runtime/Library/JavascriptLibrary.h -> lib/Runtime/Library/JavascriptLibrary.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"StringCache.h\"",
          "16: #include \"Library/JavascriptGenerator.h\"",
          "18: class ScriptSite;",
          "19: class ActiveScriptExternalLibrary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"Library/JavascriptAsyncGenerator.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         Field(DynamicType *) symbolTypeDynamic;",
          "274:         Field(StaticType *) symbolTypeStatic;",
          "275:         Field(DynamicType *) iteratorResultType;",
          "276:         Field(DynamicType *) arrayIteratorType;",
          "277:         Field(DynamicType *) mapIteratorType;",
          "278:         Field(DynamicType *) setIteratorType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:         Field(DynamicType *) awaitObjectType;",
          "278:         Field(DynamicType *) resumeYieldObjectType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:         DynamicType * GetWebAssemblyTableType() const { return webAssemblyTableType; }",
          "754:         DynamicType * GetGeneratorConstructorPrototypeObjectType() const { return generatorConstructorPrototypeObjectType; }",
          "755:         DynamicType * GetAsyncGeneratorConstructorPrototypeObjectType() const { return asyncGeneratorConstructorPrototypeObjectType; }",
          "757: #ifdef ENABLE_WASM",
          "758:         JavascriptFunction* GetWebAssemblyQueryResponseFunction() const { return webAssemblyQueryResponseFunction; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:         DynamicType * GetResumeYieldObjectType() const { return resumeYieldObjectType; }",
          "760:         DynamicType * GetAwaitObjectType() const { return awaitObjectType; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "944:         JavascriptSymbol* CreateSymbol(const PropertyRecord* propertyRecord);",
          "945:         JavascriptPromise* CreatePromise();",
          "946:         JavascriptGenerator* CreateGenerator(Arguments& args, ScriptFunction* scriptFunction, RecyclableObject* prototype);",
          "947:         JavascriptAsyncFromSyncIterator* CreateAsyncFromSyncIterator(RecyclableObject* syncIterator);",
          "948:         JavascriptFunction* CreateNonProfiledFunction(FunctionInfo * functionInfo);",
          "949:         template <class MethodType>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:         JavascriptAsyncGenerator* CreateAsyncGenerator(Arguments& args, ScriptFunction* scriptFunction, RecyclableObject* prototype);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1016:         ScriptFunctionWithInlineCache * CreateScriptFunctionWithInlineCache(FunctionProxy* proxy);",
          "1017:         GeneratorVirtualScriptFunction * CreateGeneratorVirtualScriptFunction(FunctionProxy* proxy);",
          "1022: #if 0",
          "1023:         JavascriptNumber* CreateNumber(double value);",
          "",
          "[Removed Lines]",
          "1019:         DynamicType * CreateGeneratorType(RecyclableObject* prototype);",
          "1020:         DynamicType * CreateAsyncFromSyncIteratorType();",
          "",
          "[Added Lines]",
          "1025:         DynamicType* CreateGeneratorType(RecyclableObject* prototype);",
          "1026:         DynamicType* CreateAsyncGeneratorType(RecyclableObject* prototype);",
          "1027:         DynamicType* CreateAsyncFromSyncIteratorType();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1026:         JavascriptGeneratorFunction* CreateGeneratorFunction(JavascriptMethod entryPoint, GeneratorVirtualScriptFunction* scriptFunction);",
          "1027:         JavascriptGeneratorFunction* CreateGeneratorFunction(JavascriptMethod entryPoint, bool isAnonymousFunction);",
          "1028:         JavascriptAsyncGeneratorFunction* CreateAsyncGeneratorFunction(JavascriptMethod entryPoint, GeneratorVirtualScriptFunction* scriptFunction);",
          "1032:         JavascriptAsyncFunction* CreateAsyncFunction(JavascriptMethod entryPoint, GeneratorVirtualScriptFunction* scriptFunction);",
          "1033:         JavascriptAsyncFunction* CreateAsyncFunction(JavascriptMethod entryPoint, bool isAnonymousFunction);",
          "1034:         JavascriptExternalFunction* CreateExternalFunction(ExternalMethod entryPointer, PropertyId nameId, Var signature, UINT64 flags, bool isLengthAvailable = false);",
          "1035:         JavascriptExternalFunction* CreateExternalFunction(ExternalMethod entryPointer, Var nameId, Var signature, UINT64 flags, bool isLengthAvailable = false);",
          "1036:         JavascriptExternalFunction* CreateStdCallExternalFunction(StdCallJavascriptMethod entryPointer, Var name, void *callbackState);",
          "1039:         JavascriptPromiseCapabilitiesExecutorFunction* CreatePromiseCapabilitiesExecutorFunction(JavascriptMethod entryPoint, JavascriptPromiseCapability* capability);",
          "1040:         JavascriptPromiseResolveOrRejectFunction* CreatePromiseResolveOrRejectFunction(JavascriptMethod entryPoint, JavascriptPromise* promise, bool isReject, JavascriptPromiseResolveOrRejectFunctionAlreadyResolvedWrapper* alreadyResolvedRecord);",
          "1041:         JavascriptPromiseReactionTaskFunction* CreatePromiseReactionTaskFunction(JavascriptMethod entryPoint, JavascriptPromiseReaction* reaction, Var argument);",
          "",
          "[Removed Lines]",
          "1029:         AsyncGeneratorNextProcessor* CreateAsyncGeneratorResumeNextReturnProcessorFunction(JavascriptGenerator* generator, bool isReject);",
          "1030:         AsyncGeneratorNextProcessor* CreateAsyncGeneratorAwaitFunction(JavascriptGenerator* generator, bool isReject);",
          "1031:         AsyncGeneratorNextProcessor* CreateAsyncGeneratorAwaitYieldFunction(JavascriptGenerator* generator, bool isYieldStar);",
          "1037:         JavascriptPromiseAsyncSpawnExecutorFunction* CreatePromiseAsyncSpawnExecutorFunction(JavascriptGenerator* generator, Var target);",
          "1038:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* CreatePromiseAsyncSpawnStepArgumentExecutorFunction(JavascriptMethod entryPoint, JavascriptGenerator* generator, Var argument, Var resolve = nullptr, Var reject = nullptr, bool isReject = false);",
          "",
          "[Added Lines]",
          "1036:         AsyncGeneratorCallbackFunction* CreateAsyncGeneratorCallbackFunction(JavascriptMethod entryPoint, JavascriptAsyncGenerator* generator);",
          "1039:         JavascriptAsyncSpawnStepFunction* CreateAsyncSpawnStepFunction(JavascriptMethod entryPoint, JavascriptGenerator* generator, Var argument, Var resolve = nullptr, Var reject = nullptr, bool isReject = false);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1091:         JavascriptRegExp* CreateRegExp(UnifiedRegex::RegexPattern* pattern);",
          "1093:         DynamicObject* CreateIteratorResultObject(Var value, Var done);",
          "1097:         RecyclableObject* CreateThrowErrorObject(JavascriptError* error);",
          "",
          "[Removed Lines]",
          "1094:         DynamicObject* CreateIteratorResultObjectValueFalse(Var value);",
          "1095:         DynamicObject* CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "1098:         DynamicObject* CreateIteratorResultObject(Var value, bool done = false);",
          "1099:         DynamicObject* CreateIteratorResultObjectDone();",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptListIterator.cpp||lib/Runtime/Library/JavascriptListIterator.cpp": [
          "File: lib/Runtime/Library/JavascriptListIterator.cpp -> lib/Runtime/Library/JavascriptListIterator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         if (list == nullptr)",
          "39:         {",
          "41:         }",
          "43:         if (iterator->index >= iterator->count)",
          "",
          "[Removed Lines]",
          "40:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "40:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:             iterator->listForIterator = nullptr;",
          "49:         }",
          "51:         Var current = list->Item(iterator->index);",
          "53:         iterator->index++;",
          "56:     }",
          "57: } // namespace Js",
          "",
          "[Removed Lines]",
          "48:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "55:         return library->CreateIteratorResultObjectValueFalse(current);",
          "",
          "[Added Lines]",
          "48:             return library->CreateIteratorResultObjectDone();",
          "55:         return library->CreateIteratorResultObject(current);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptMapIterator.cpp||lib/Runtime/Library/JavascriptMapIterator.cpp": [
          "File: lib/Runtime/Library/JavascriptMapIterator.cpp -> lib/Runtime/Library/JavascriptMapIterator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         if (map == nullptr || !mapIterator.Next())",
          "40:         {",
          "41:             iterator->m_map = nullptr;",
          "43:         }",
          "45:         auto entry = mapIterator.Current();",
          "",
          "[Removed Lines]",
          "42:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "42:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:             result = entry.Value();",
          "63:         }",
          "66:     }",
          "67: } //namespace Js",
          "",
          "[Removed Lines]",
          "65:         return library->CreateIteratorResultObjectValueFalse(result);",
          "",
          "[Added Lines]",
          "65:         return library->CreateIteratorResultObject(result);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptPromise.cpp||lib/Runtime/Library/JavascriptPromise.cpp": [
          "File: lib/Runtime/Library/JavascriptPromise.cpp -> lib/Runtime/Library/JavascriptPromise.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1523:         return undefinedVar;",
          "1524:     }",
          "1704: #if ENABLE_TTD",
          "1705:     void JavascriptPromise::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "1706:     {",
          "",
          "[Removed Lines]",
          "1526:     Var JavascriptPromise::EntryJavascriptPromiseAsyncSpawnExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...)",
          "1527:     {",
          "1528:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "1529:         ARGUMENTS(args, callInfo);",
          "1531:         ScriptContext* scriptContext = function->GetScriptContext();",
          "1532:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "1533:         Var undefinedVar = library->GetUndefined();",
          "1534:         Var resolve = undefinedVar;",
          "1535:         Var reject = undefinedVar;",
          "1537:         Assert(args.Info.Count == 3);",
          "1539:         resolve = args[1];",
          "1540:         reject = args[2];",
          "1542:         Assert(VarIs<JavascriptPromiseAsyncSpawnExecutorFunction>(function));",
          "1543:         JavascriptPromiseAsyncSpawnExecutorFunction* asyncSpawnExecutorFunction = VarTo<JavascriptPromiseAsyncSpawnExecutorFunction>(function);",
          "1544:         Var self = asyncSpawnExecutorFunction->GetTarget();",
          "1546:         Var varCallArgs[] = { undefinedVar, self };",
          "1547:         JavascriptGenerator* gen = asyncSpawnExecutorFunction->GetGenerator();",
          "1548:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* nextFunction = library->CreatePromiseAsyncSpawnStepArgumentExecutorFunction(EntryJavascriptPromiseAsyncSpawnStepNextExecutorFunction, gen, varCallArgs);",
          "1550:         Assert(JavascriptConversion::IsCallable(resolve) && JavascriptConversion::IsCallable(reject));",
          "1551:         AsyncSpawnStep(nextFunction, gen, resolve, reject);",
          "1553:         return undefinedVar;",
          "1554:     }",
          "1556:     Var JavascriptPromise::EntryJavascriptPromiseAsyncSpawnStepNextExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...)",
          "1557:     {",
          "1558:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "1560:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* asyncSpawnStepArgumentExecutorFunction = VarTo<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(function);",
          "1561:         Var argument = asyncSpawnStepArgumentExecutorFunction->GetArgument();",
          "1563:         JavascriptFunction* next = function->GetScriptContext()->GetLibrary()->EnsureGeneratorNextFunction();",
          "1564:         BEGIN_SAFE_REENTRANT_CALL(function->GetScriptContext()->GetThreadContext())",
          "1565:         {",
          "1566:             return CALL_FUNCTION(function->GetScriptContext()->GetThreadContext(), next, CallInfo(CallFlags_Value, 2), asyncSpawnStepArgumentExecutorFunction->GetGenerator(), argument);",
          "1567:         }",
          "1568:         END_SAFE_REENTRANT_CALL",
          "1569:     }",
          "1571:     Var JavascriptPromise::EntryJavascriptPromiseAsyncSpawnStepThrowExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...)",
          "1572:     {",
          "1573:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "1575:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* asyncSpawnStepArgumentExecutorFunction = VarTo<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(function);",
          "1576:         JavascriptFunction* throw_ = function->GetScriptContext()->GetLibrary()->EnsureGeneratorThrowFunction();",
          "1577:         BEGIN_SAFE_REENTRANT_CALL(function->GetScriptContext()->GetThreadContext())",
          "1578:         {",
          "1579:             return CALL_FUNCTION(function->GetScriptContext()->GetThreadContext(), throw_, CallInfo(CallFlags_Value, 2), asyncSpawnStepArgumentExecutorFunction->GetGenerator(), asyncSpawnStepArgumentExecutorFunction->GetArgument());",
          "1580:         }",
          "1581:         END_SAFE_REENTRANT_CALL",
          "1582:     }",
          "1584:     Var JavascriptPromise::EntryJavascriptPromiseAsyncSpawnCallStepExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...)",
          "1585:     {",
          "1586:         PROBE_STACK(function->GetScriptContext(), Js::Constants::MinStackDefault);",
          "1587:         ARGUMENTS(args, callInfo);",
          "1589:         ScriptContext* scriptContext = function->GetScriptContext();",
          "1590:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "1591:         Var undefinedVar = library->GetUndefined();",
          "1593:         Var argument = undefinedVar;",
          "1595:         if (args.Info.Count > 1)",
          "1596:         {",
          "1597:             argument = args[1];",
          "1598:         }",
          "1600:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* asyncSpawnStepExecutorFunction = VarTo<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(function);",
          "1601:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* functionArg;",
          "1602:         JavascriptGenerator* gen = asyncSpawnStepExecutorFunction->GetGenerator();",
          "1603:         Var reject = asyncSpawnStepExecutorFunction->GetReject();",
          "1604:         Var resolve = asyncSpawnStepExecutorFunction->GetResolve();",
          "1606:         if (asyncSpawnStepExecutorFunction->GetIsReject())",
          "1607:         {",
          "1608:             functionArg = library->CreatePromiseAsyncSpawnStepArgumentExecutorFunction(EntryJavascriptPromiseAsyncSpawnStepThrowExecutorFunction, gen, argument, NULL, NULL, false);",
          "1609:         }",
          "1610:         else",
          "1611:         {",
          "1612:             functionArg = library->CreatePromiseAsyncSpawnStepArgumentExecutorFunction(EntryJavascriptPromiseAsyncSpawnStepNextExecutorFunction, gen, argument, NULL, NULL, false);",
          "1613:         }",
          "1615:         AsyncSpawnStep(functionArg, gen, resolve, reject);",
          "1617:         return undefinedVar;",
          "1618:     }",
          "1620:     void JavascriptPromise::AsyncSpawnStep(",
          "1621:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* nextFunction,",
          "1622:         JavascriptGenerator* gen,",
          "1623:         Var resolve,",
          "1624:         Var reject)",
          "1625:     {",
          "1626:         ScriptContext* scriptContext = gen->GetScriptContext();",
          "1627:         BEGIN_SAFE_REENTRANT_REGION(scriptContext->GetThreadContext())",
          "1629:         JavascriptLibrary* library = scriptContext->GetLibrary();",
          "1630:         Var undefinedVar = library->GetUndefined();",
          "1632:         JavascriptExceptionObject* exception = nullptr;",
          "1633:         RecyclableObject* next = nullptr;",
          "1635:         try",
          "1636:         {",
          "1637:             Var nextVar = CALL_FUNCTION(",
          "1638:                 scriptContext->GetThreadContext(),",
          "1639:                 nextFunction,",
          "1640:                 CallInfo(CallFlags_Value, 1),",
          "1641:                 undefinedVar);",
          "1643:             next = VarTo<RecyclableObject>(nextVar);",
          "1644:         }",
          "1645:         catch (const JavascriptException& err)",
          "1646:         {",
          "1647:             exception = err.GetAndClear();",
          "1648:         }",
          "1650:         if (exception != nullptr)",
          "1651:         {",
          "1653:             TryRejectWithExceptionObject(exception, reject, scriptContext);",
          "1654:             return;",
          "1655:         }",
          "1657:         Assert(next != nullptr);",
          "1659:         Var done = JavascriptOperators::GetProperty(next, PropertyIds::done, scriptContext);",
          "1661:         if (JavascriptConversion::ToBool(done, scriptContext))",
          "1662:         {",
          "1664:             Var value = JavascriptOperators::GetProperty(next, PropertyIds::value, scriptContext);",
          "1665:             if (!JavascriptConversion::IsCallable(resolve))",
          "1666:             {",
          "1667:                 JavascriptError::ThrowTypeError(scriptContext, JSERR_NeedFunction);",
          "1668:             }",
          "1670:             CALL_FUNCTION(",
          "1671:                 scriptContext->GetThreadContext(),",
          "1672:                 VarTo<RecyclableObject>(resolve),",
          "1673:                 CallInfo(CallFlags_Value, 2),",
          "1674:                 undefinedVar,",
          "1675:                 value);",
          "1677:             return;",
          "1678:         }",
          "1681:         auto* successFunction = library->CreatePromiseAsyncSpawnStepArgumentExecutorFunction(",
          "1682:             EntryJavascriptPromiseAsyncSpawnCallStepExecutorFunction,",
          "1683:             gen,",
          "1684:             undefinedVar,",
          "1685:             resolve,",
          "1686:             reject);",
          "1688:         auto* failFunction = library->CreatePromiseAsyncSpawnStepArgumentExecutorFunction(",
          "1689:             EntryJavascriptPromiseAsyncSpawnCallStepExecutorFunction,",
          "1690:             gen,",
          "1691:             undefinedVar,",
          "1692:             resolve,",
          "1693:             reject,",
          "1694:             true);",
          "1696:         Var value = JavascriptOperators::GetProperty(next, PropertyIds::value, scriptContext);",
          "1697:         JavascriptPromise* promise = InternalPromiseResolve(value, scriptContext);",
          "1698:         JavascriptPromiseCapability* unused = UnusedPromiseCapability(scriptContext);",
          "1699:         PerformPromiseThen(promise, unused, successFunction, failFunction, scriptContext);",
          "1701:         END_SAFE_REENTRANT_REGION",
          "1702:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1982:     }",
          "1983: #endif",
          "2183:     JavascriptPromiseCapabilitiesExecutorFunction::JavascriptPromiseCapabilitiesExecutorFunction(DynamicType* type, FunctionInfo* functionInfo, JavascriptPromiseCapability* capability)",
          "2184:         : RuntimeFunction(type, functionInfo), capability(capability)",
          "2185:     { }",
          "",
          "[Removed Lines]",
          "1985:     JavascriptPromiseAsyncSpawnExecutorFunction::JavascriptPromiseAsyncSpawnExecutorFunction(DynamicType* type, FunctionInfo* functionInfo, JavascriptGenerator* generator, Var target)",
          "1986:         : RuntimeFunction(type, functionInfo), generator(generator), target(target)",
          "1987:     { }",
          "1989:     template <> bool VarIsImpl<JavascriptPromiseAsyncSpawnExecutorFunction>(RecyclableObject* obj)",
          "1990:     {",
          "1991:         if (VarIs<JavascriptFunction>(obj))",
          "1992:         {",
          "1993:             return VirtualTableInfo<JavascriptPromiseAsyncSpawnExecutorFunction>::HasVirtualTable(obj)",
          "1994:                 || VirtualTableInfo<CrossSiteObject<JavascriptPromiseAsyncSpawnExecutorFunction>>::HasVirtualTable(obj);",
          "1995:         }",
          "1997:         return false;",
          "1998:     }",
          "2000:     JavascriptGenerator* JavascriptPromiseAsyncSpawnExecutorFunction::GetGenerator()",
          "2001:     {",
          "2002:         return this->generator;",
          "2003:     }",
          "2005:     Var JavascriptPromiseAsyncSpawnExecutorFunction::GetTarget()",
          "2006:     {",
          "2007:         return this->target;",
          "2008:     }",
          "2010: #if ENABLE_TTD",
          "2011:     void JavascriptPromiseAsyncSpawnExecutorFunction::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "2012:     {",
          "2013:         if (this->generator != nullptr)",
          "2014:         {",
          "2015:             extractor->MarkVisitVar(this->generator);",
          "2016:         }",
          "2018:         if (this->target != nullptr)",
          "2019:         {",
          "2020:             extractor->MarkVisitVar(this->target);",
          "2021:         }",
          "2022:     }",
          "2024:     TTD::NSSnapObjects::SnapObjectType JavascriptPromiseAsyncSpawnExecutorFunction::GetSnapTag_TTD() const",
          "2025:     {",
          "2026:         return TTD::NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnExecutorFunction;",
          "2027:     }",
          "2029:     void JavascriptPromiseAsyncSpawnExecutorFunction::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "2030:     {",
          "2031:         TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo* info = alloc.SlabAllocateStruct<TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo>();",
          "2032:         info->generator= TTD_CONVERT_VAR_TO_PTR_ID(this->generator);",
          "2033:         info->target = TTD_CONVERT_JSVAR_TO_TTDVAR(this->target);",
          "2034:         TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnExecutorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnExecutorFunction>(objData, info);",
          "2035:     }",
          "2036: #endif",
          "2038:     JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction(DynamicType* type, FunctionInfo* functionInfo, JavascriptGenerator* generator, Var argument, Var resolve, Var reject, bool isReject)",
          "2039:         : RuntimeFunction(type, functionInfo), generator(generator), argument(argument), resolve(resolve), reject(reject), isReject(isReject)",
          "2040:     { }",
          "2042:     template <> bool VarIsImpl<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(RecyclableObject* obj)",
          "2043:     {",
          "2044:         if (VarIs<JavascriptFunction>(obj))",
          "2045:         {",
          "2046:             return VirtualTableInfo<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>::HasVirtualTable(obj)",
          "2047:                 || VirtualTableInfo<CrossSiteObject<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>>::HasVirtualTable(obj);",
          "2048:         }",
          "2050:         return false;",
          "2051:     }",
          "2053:     JavascriptGenerator* JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::GetGenerator()",
          "2054:     {",
          "2055:         return this->generator;",
          "2056:     }",
          "2058:     Var JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::GetResolve()",
          "2059:     {",
          "2060:         return this->resolve;",
          "2061:     }",
          "2063:     Var JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::GetReject()",
          "2064:     {",
          "2065:         return this->reject;",
          "2066:     }",
          "2068:     bool JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::GetIsReject()",
          "2069:     {",
          "2070:         return this->isReject;",
          "2071:     }",
          "2073:     Var JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::GetArgument()",
          "2074:     {",
          "2075:         return this->argument;",
          "2076:     }",
          "2078: #if ENABLE_TTD",
          "2079:     void JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor)",
          "2080:     {",
          "2081:         if (this->generator != nullptr)",
          "2082:         {",
          "2083:             extractor->MarkVisitVar(this->generator);",
          "2084:         }",
          "2086:         if (this->reject != nullptr)",
          "2087:         {",
          "2088:             extractor->MarkVisitVar(this->reject);",
          "2089:         }",
          "2091:         if (this->resolve != nullptr)",
          "2092:         {",
          "2093:             extractor->MarkVisitVar(this->resolve);",
          "2094:         }",
          "2096:         if (this->argument != nullptr)",
          "2097:         {",
          "2098:             extractor->MarkVisitVar(this->argument);",
          "2099:         }",
          "2100:     }",
          "2102:     TTD::NSSnapObjects::SnapObjectType JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::GetSnapTag_TTD() const",
          "2103:     {",
          "2104:         return TTD::NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction;",
          "2105:     }",
          "2107:     void JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction::ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc)",
          "2108:     {",
          "2109:         TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo* info = alloc.SlabAllocateStruct<TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo>();",
          "2110:         info->generator = TTD_CONVERT_VAR_TO_PTR_ID(this->generator);",
          "2111:         info->reject = this->reject;",
          "2112:         info->resolve = this->resolve;",
          "2113:         info->argument = this->argument;",
          "2114:         info->isReject = this->isReject;",
          "2116:         info->entryPoint = 0;",
          "2117:         JavascriptMethod entryPoint = this->GetFunctionInfo()->GetOriginalEntryPoint();",
          "2118:         if (entryPoint == JavascriptPromise::EntryJavascriptPromiseAsyncSpawnStepNextExecutorFunction)",
          "2119:         {",
          "2120:             info->entryPoint = 1;",
          "2121:         }",
          "2122:         else if (entryPoint == JavascriptPromise::EntryJavascriptPromiseAsyncSpawnStepThrowExecutorFunction)",
          "2123:         {",
          "2124:             info->entryPoint = 2;",
          "2125:         }",
          "2126:         else if (entryPoint == JavascriptPromise::EntryJavascriptPromiseAsyncSpawnCallStepExecutorFunction)",
          "2127:         {",
          "2128:             info->entryPoint = 3;",
          "2129:         }",
          "2130:         else",
          "2131:         {",
          "2132:             TTDAssert(false, \"Unexpected entrypoint found JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction\");",
          "2133:         }",
          "2135:         const uint32 maxDeps = 4;",
          "2136:         uint32 depCount = 0;",
          "2137:         TTD_PTR_ID* depArray = alloc.SlabReserveArraySpace<TTD_PTR_ID>(maxDeps);",
          "2138:         if (this->reject != nullptr &&  TTD::JsSupport::IsVarComplexKind(this->reject))",
          "2139:         {",
          "2140:             depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->reject);",
          "2141:             depCount++;",
          "2142:         }",
          "2144:         if (this->resolve != nullptr &&  TTD::JsSupport::IsVarComplexKind(this->resolve))",
          "2145:         {",
          "2146:             depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->resolve);",
          "2147:             depCount++;",
          "2148:         }",
          "2150:         if (this->argument != nullptr &&  TTD::JsSupport::IsVarComplexKind(this->argument))",
          "2151:         {",
          "2152:             depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->argument);",
          "2153:             depCount++;",
          "2154:         }",
          "2156:         if (this->generator != nullptr)",
          "2157:         {",
          "2158:             depArray[depCount] = TTD_CONVERT_VAR_TO_PTR_ID(this->generator);",
          "2159:             depCount++;",
          "2160:         }",
          "2162:         if (depCount > 0)",
          "2163:         {",
          "2164:             alloc.SlabCommitArraySpace<TTD_PTR_ID>(depCount, maxDeps);",
          "2165:         }",
          "2166:         else",
          "2167:         {",
          "2168:             alloc.SlabAbortArraySpace<TTD_PTR_ID>(maxDeps);",
          "2169:         }",
          "2171:         if (depCount == 0)",
          "2172:         {",
          "2173:             TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(objData, info);",
          "2174:         }",
          "2175:         else",
          "2176:         {",
          "2177:             TTDAssert(depArray != nullptr, \"depArray should be non-null if depCount is > 0\");",
          "2178:             TTD::NSSnapObjects::StdExtractSetKindSpecificInfo<TTD::NSSnapObjects::SnapJavascriptPromiseAsyncSpawnStepArgumentExecutorFunctionInfo*, TTD::NSSnapObjects::SnapObjectType::JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(objData, info, alloc, depCount, depArray);",
          "2179:         }",
          "2180:     }",
          "2181: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptPromise.h||lib/Runtime/Library/JavascriptPromise.h": [
          "File: lib/Runtime/Library/JavascriptPromise.h -> lib/Runtime/Library/JavascriptPromise.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     template <> bool VarIsImpl<JavascriptPromiseResolveOrRejectFunction>(RecyclableObject* obj);",
          "105:     class JavascriptPromiseCapabilitiesExecutorFunction : public RuntimeFunction",
          "106:     {",
          "107:     protected:",
          "",
          "[Removed Lines]",
          "45:     class JavascriptPromiseAsyncSpawnExecutorFunction : public RuntimeFunction",
          "46:     {",
          "47:     protected:",
          "48:         DEFINE_VTABLE_CTOR(JavascriptPromiseAsyncSpawnExecutorFunction, RuntimeFunction);",
          "49:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptPromiseAsyncSpawnExecutorFunction);",
          "51:     public:",
          "52:         JavascriptPromiseAsyncSpawnExecutorFunction(DynamicType* type, FunctionInfo* functionInfo, JavascriptGenerator* generator, Var target);",
          "54:         JavascriptGenerator* GetGenerator();",
          "55:         Var GetTarget();",
          "57:     private:",
          "58:         Field(JavascriptGenerator*) generator;",
          "59:         Field(Var) target; // this",
          "61: #if ENABLE_TTD",
          "62:     public:",
          "63:         virtual void MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor) override;",
          "65:         virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "66:         virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "67: #endif",
          "68:     };",
          "70:     template <> bool VarIsImpl<JavascriptPromiseAsyncSpawnExecutorFunction>(RecyclableObject* obj);",
          "72:     class JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction : public RuntimeFunction",
          "73:     {",
          "74:     protected:",
          "75:         DEFINE_VTABLE_CTOR(JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction, RuntimeFunction);",
          "76:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction);",
          "78:     public:",
          "79:         JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction(DynamicType* type, FunctionInfo* functionInfo, JavascriptGenerator* generator, Var argument, Var resolve = nullptr, Var reject = nullptr, bool isReject = false);",
          "81:         JavascriptGenerator* GetGenerator();",
          "82:         Var GetReject();",
          "83:         Var GetResolve();",
          "84:         bool GetIsReject();",
          "85:         Var GetArgument();",
          "87:     private:",
          "88:         Field(JavascriptGenerator*) generator;",
          "89:         Field(Var) reject;",
          "90:         Field(Var) resolve;",
          "91:         Field(bool) isReject;",
          "92:         Field(Var) argument;",
          "94: #if ENABLE_TTD",
          "95:     public:",
          "96:         virtual void MarkVisitKindSpecificPtrs(TTD::SnapshotExtractor* extractor) override;",
          "98:         virtual TTD::NSSnapObjects::SnapObjectType GetSnapTag_TTD() const override;",
          "99:         virtual void ExtractSnapObjectDataInto(TTD::NSSnapObjects::SnapObject* objData, TTD::SlabAllocator& alloc) override;",
          "100: #endif",
          "101:     };",
          "103:     template <> bool VarIsImpl<JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction>(RecyclableObject* obj);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:         static Var EntryGetterSymbolSpecies(RecyclableObject* function, CallInfo callInfo, ...);",
          "470:         static Var CreateRejectedPromise(Var resolution, ScriptContext* scriptContext, Var promiseConstructor = nullptr);",
          "471:         static Var CreateResolvedPromise(Var resolution, ScriptContext* scriptContext, Var promiseConstructor = nullptr);",
          "472:         static Var CreatePassThroughPromise(JavascriptPromise* sourcePromise, ScriptContext* scriptContext);",
          "",
          "[Removed Lines]",
          "465:         static Var EntryJavascriptPromiseAsyncSpawnExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...);",
          "466:         static Var EntryJavascriptPromiseAsyncSpawnStepNextExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...);",
          "467:         static Var EntryJavascriptPromiseAsyncSpawnStepThrowExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...);",
          "468:         static Var EntryJavascriptPromiseAsyncSpawnCallStepExecutorFunction(RecyclableObject* function, CallInfo callInfo, ...);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:         Field(bool) isHandled;",
          "535:     private :",
          "537:         bool WillRejectionBeUnhandled();",
          "539: #if ENABLE_TTD",
          "",
          "[Removed Lines]",
          "536:         static void AsyncSpawnStep(JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction* nextFunction, JavascriptGenerator* gen, Var resolve, Var reject);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptSetIterator.cpp||lib/Runtime/Library/JavascriptSetIterator.cpp": [
          "File: lib/Runtime/Library/JavascriptSetIterator.cpp -> lib/Runtime/Library/JavascriptSetIterator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         if (set == nullptr || !setIterator.Next())",
          "40:         {",
          "41:             iterator->m_set = nullptr;",
          "43:         }",
          "45:         auto value = setIterator.Current();",
          "",
          "[Removed Lines]",
          "42:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "42:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             result = value;",
          "59:         }",
          "62:     }",
          "63: } //namespace Js",
          "",
          "[Removed Lines]",
          "61:         return library->CreateIteratorResultObjectValueFalse(result);",
          "",
          "[Added Lines]",
          "61:         return library->CreateIteratorResultObject(result);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptStringIterator.cpp||lib/Runtime/Library/JavascriptStringIterator.cpp": [
          "File: lib/Runtime/Library/JavascriptStringIterator.cpp -> lib/Runtime/Library/JavascriptStringIterator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         if (string == nullptr)",
          "38:         {",
          "40:         }",
          "42:         charcount_t length = string->GetLength();",
          "",
          "[Removed Lines]",
          "39:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "39:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:             iterator->m_string = nullptr;",
          "51:         }",
          "53:         char16 chFirst = string->GetItem(index);",
          "",
          "[Removed Lines]",
          "50:             return library->CreateIteratorResultObjectUndefinedTrue();",
          "",
          "[Added Lines]",
          "50:             return library->CreateIteratorResultObjectDone();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:             iterator->m_nextIndex += 2;",
          "67:         }",
          "70:     }",
          "71: } // namespace Js",
          "",
          "[Removed Lines]",
          "69:         return library->CreateIteratorResultObjectValueFalse(result);",
          "",
          "[Added Lines]",
          "69:         return library->CreateIteratorResultObject(result);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/RuntimeLibraryPch.h||lib/Runtime/Library/RuntimeLibraryPch.h": [
          "File: lib/Runtime/Library/RuntimeLibraryPch.h -> lib/Runtime/Library/RuntimeLibraryPch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"Library/BoundFunction.h\"",
          "33: #include \"Library/JavascriptGeneratorFunction.h\"",
          "35: #include \"Library/RegexHelper.h\"",
          "36: #include \"Library/JavascriptRegularExpression.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"Library/JavascriptAsyncFunction.h\"",
          "35: #include \"Library/JavascriptAsyncGeneratorFunction.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: #include \"Library/JavascriptProxy.h\"",
          "48: #include \"Library/JavascriptReflect.h\"",
          "49: #include \"Library/JavascriptGenerator.h\"",
          "51: #include \"Library/SameValueComparer.h\"",
          "52: #include \"Library/MapOrSetDataList.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #include \"Library/JavascriptAsyncGenerator.h\"",
          "",
          "---------------"
        ],
        "lib/Runtime/Runtime.h||lib/Runtime/Runtime.h": [
          "File: lib/Runtime/Runtime.h -> lib/Runtime/Runtime.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     class JavascriptPromise;",
          "117:     class JavascriptPromiseCapability;",
          "118:     class JavascriptPromiseReaction;",
          "121:     class JavascriptPromiseCapabilitiesExecutorFunction;",
          "122:     class JavascriptPromiseResolveOrRejectFunction;",
          "123:     class JavascriptPromiseReactionTaskFunction;",
          "",
          "[Removed Lines]",
          "119:     class JavascriptPromiseAsyncSpawnExecutorFunction;",
          "120:     class JavascriptPromiseAsyncSpawnStepArgumentExecutorFunction;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     class JavascriptPromiseAllSettledResolveOrRejectElementFunction;",
          "129:     struct JavascriptPromiseAllResolveElementFunctionRemainingElementsWrapper;",
          "130:     struct JavascriptPromiseResolveOrRejectFunctionAlreadyResolvedWrapper;",
          "131:     class JavascriptGenerator;",
          "132:     class LiteralString;",
          "133:     class JavascriptStringObject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     class JavascriptAsyncSpawnExecutorFunction;",
          "130:     class JavascriptAsyncSpawnStepFunction;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "556: #include \"Debug/TTEventLog.h\"",
          "557: #endif",
          "559: #include \"../WasmReader/WasmReader.h\"",
          "561: #include \"Language/AsmJsTypes.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: #include \"Library/JavascriptGeneratorFunction.h\"",
          "561: #include \"Library/JavascriptAsyncFunction.h\"",
          "562: #include \"Library/JavascriptAsyncGeneratorFunction.h\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581: #include \"Language/InlineCachePointerArray.inl\"",
          "582: #include \"Language/JavascriptOperators.inl\"",
          "583: #include \"Language/TaggedInt.inl\"",
          "586: #ifndef USED_IN_STATIC_LIB",
          "587: #ifdef ENABLE_INTL_OBJECT",
          "",
          "[Removed Lines]",
          "584: #include \"Library/JavascriptGeneratorFunction.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/EdgeJavascriptTypeId.h||lib/Runtime/Types/EdgeJavascriptTypeId.h": [
          "File: lib/Runtime/Types/EdgeJavascriptTypeId.h -> lib/Runtime/Types/EdgeJavascriptTypeId.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     TypeIds_StringIterator = 68,",
          "113:     TypeIds_Generator = 70,",
          "123:     TypeIds_LastBuiltinDynamicObject = TypeIds_WebAssemblyTable,",
          "126:     TypeIds_LastTrueJavascriptObjectType = TypeIds_ModuleRoot,",
          "134:     TypeIds_Limit //add a new TypeId before TypeIds_Limit or before TypeIds_LastTrueJavascriptObjectType",
          "135: };",
          "",
          "[Removed Lines]",
          "114:     TypeIds_AsyncFromSyncIterator = 71,",
          "115:     TypeIds_Promise = 72,",
          "116:     TypeIds_SharedArrayBuffer = 73,",
          "118:     TypeIds_WebAssemblyModule = 74,",
          "119:     TypeIds_WebAssemblyInstance = 75,",
          "120:     TypeIds_WebAssemblyMemory = 76,",
          "121:     TypeIds_WebAssemblyTable = 77,",
          "124:     TypeIds_GlobalObject = 78,",
          "125:     TypeIds_ModuleRoot = 79,",
          "128:     TypeIds_HostObject = 80,",
          "129:     TypeIds_ActivationObject = 81,",
          "130:     TypeIds_SpreadArgument = 82,",
          "131:     TypeIds_ModuleNamespace = 83,",
          "132:     TypeIds_ListIterator = 84,",
          "133:     TypeIds_ExternalIterator = 85,",
          "",
          "[Added Lines]",
          "114:     TypeIds_AsyncGenerator = 71,",
          "115:     TypeIds_AsyncFromSyncIterator = 72,",
          "116:     TypeIds_AwaitObject = 73,",
          "117:     TypeIds_Promise = 74,",
          "118:     TypeIds_SharedArrayBuffer = 75,",
          "120:     TypeIds_WebAssemblyModule = 76,",
          "121:     TypeIds_WebAssemblyInstance = 77,",
          "122:     TypeIds_WebAssemblyMemory = 78,",
          "123:     TypeIds_WebAssemblyTable = 79,",
          "126:     TypeIds_GlobalObject = 80,",
          "127:     TypeIds_ModuleRoot = 81,",
          "130:     TypeIds_HostObject = 82,",
          "131:     TypeIds_ActivationObject = 83,",
          "132:     TypeIds_SpreadArgument = 84,",
          "133:     TypeIds_ModuleNamespace = 85,",
          "134:     TypeIds_ListIterator = 86,",
          "135:     TypeIds_ExternalIterator = 87,",
          "",
          "---------------"
        ],
        "test/DebuggerCommon/generators.js||test/DebuggerCommon/generators.js": [
          "File: test/DebuggerCommon/generators.js -> test/DebuggerCommon/generators.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:                 resume('step_over');",
          "112:                 stack();resume('step_into');",
          "113:                 stack();resume('step_into');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:                 stack();resume('step_into');",
          "",
          "---------------"
        ],
        "test/DebuggerCommon/generators.js.dbg.baseline||test/DebuggerCommon/generators.js.dbg.baseline": [
          "File: test/DebuggerCommon/generators.js.dbg.baseline -> test/DebuggerCommon/generators.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:   {",
          "525:     \"callStack\": [",
          "526:       {",
          "528:         \"column\": 0,",
          "529:         \"sourceText\": \"g.return(2)\",",
          "530:         \"function\": \"Global code\"",
          "",
          "[Removed Lines]",
          "527:         \"line\": 129,",
          "",
          "[Added Lines]",
          "527:         \"line\": 130,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "540:         \"function\": \"gf4\"",
          "541:       },",
          "542:       {",
          "544:         \"column\": 0,",
          "545:         \"sourceText\": \"g.return(2)\",",
          "546:         \"function\": \"Global code\"",
          "",
          "[Removed Lines]",
          "543:         \"line\": 129,",
          "",
          "[Added Lines]",
          "543:         \"line\": 130,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550:   {",
          "551:     \"callStack\": [",
          "552:       {",
          "554:         \"column\": 0,",
          "555:         \"sourceText\": \"g = gf5()\",",
          "556:         \"function\": \"Global code\"",
          "",
          "[Removed Lines]",
          "553:         \"line\": 138,",
          "",
          "[Added Lines]",
          "553:         \"line\": 139,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "560:   {",
          "561:     \"callStack\": [",
          "562:       {",
          "564:         \"column\": 0,",
          "565:         \"sourceText\": \"g.return(1)\",",
          "566:         \"function\": \"Global code\"",
          "",
          "[Removed Lines]",
          "563:         \"line\": 148,",
          "",
          "[Added Lines]",
          "563:         \"line\": 149,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "570:   {",
          "571:     \"callStack\": [",
          "572:       {",
          "574:         \"column\": 8,",
          "575:         \"sourceText\": \"yield 32\",",
          "576:         \"function\": \"gf5\"",
          "577:       },",
          "578:       {",
          "580:         \"column\": 0,",
          "581:         \"sourceText\": \"g.return(1)\",",
          "582:         \"function\": \"Global code\"",
          "",
          "[Removed Lines]",
          "573:         \"line\": 133,",
          "579:         \"line\": 148,",
          "",
          "[Added Lines]",
          "573:         \"line\": 134,",
          "579:         \"line\": 149,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "586:   {",
          "587:     \"callStack\": [",
          "588:       {",
          "590:         \"column\": 0,",
          "591:         \"sourceText\": \"WScript.Echo(\\\"PASS\\\")\",",
          "592:         \"function\": \"Global code\"",
          "",
          "[Removed Lines]",
          "589:         \"line\": 150,",
          "",
          "[Added Lines]",
          "589:         \"line\": 151,",
          "",
          "---------------"
        ],
        "test/DebuggerCommon/symbols.js.dbg.baseline||test/DebuggerCommon/symbols.js.dbg.baseline": [
          "File: test/DebuggerCommon/symbols.js.dbg.baseline -> test/DebuggerCommon/symbols.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:               \"hasInstance\": \"symbol <large string>\",",
          "116:               \"isConcatSpreadable\": \"symbol <large string>\",",
          "117:               \"iterator\": \"symbol <large string>\",",
          "118:               \"species\": \"symbol <large string>\",",
          "119:               \"toPrimitive\": \"symbol <large string>\",",
          "120:               \"toStringTag\": \"symbol <large string>\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:               \"asyncIterator\": \"symbol <large string>\",",
          "",
          "---------------"
        ],
        "test/es6/generators-functionality.js||test/es6/generators-functionality.js": [
          "File: test/es6/generators-functionality.js -> test/es6/generators-functionality.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:             assert.areEqual({value: 2, done: true}, g.return(2), \"As the return property is missing the yield* just returns as is\");",
          "1377:             g = gf();",
          "1378:             assert.areEqual({value: 1, done: false}, g.next(), \"Get the first yield value from the inner iterator\");",
          "1381:             var iteratorWithNullAsReturn = CreateIterable(simpleNextFunc, null);",
          "1382:             gf = function* () { yield* iteratorWithNullAsReturn; };",
          "",
          "[Removed Lines]",
          "1379:             assert.throws(function () { g.throw(new ExpectedException()); }, TypeError, \"As the throw property is missing a TypeError is thrown\", \"The value of the property 'throw' is not a Function object\");",
          "",
          "[Added Lines]",
          "1379:             assert.throws(function () { g.throw(new ExpectedException()); }, TypeError, \"As the throw property is missing a TypeError is thrown\", \"Yielded iterator does not have a 'throw' method\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1389:             gf = function* () { yield* iteratorWithNullAsThrow; };",
          "1390:             g = gf();",
          "1391:             assert.areEqual({value: 1, done: false}, g.next(), \"Get the first yield value from the inner iterator\");",
          "1393:             assert.isTrue(returnCalled, \"As the throw property is null, .return() is called\");",
          "1395:             var iteratorWithBadReturnAndThrow = CreateIterable(simpleNextFunc, {}, {});",
          "1396:             gf = function* () { yield* iteratorWithBadReturnAndThrow; }",
          "1397:             g = gf();",
          "1398:             assert.areEqual({value: 1, done: false}, g.next(), \"Get the first yield value from the inner iterator\");",
          "1400:             g = gf();",
          "1401:             assert.areEqual({value: 1, done: false}, g.next(), \"Get the first yield value from the inner iterator\");",
          "1404:             var iteratorReturningNonObj = CreateIterable(simpleNextFunc, () => { return this.i; }, () => { return this.i; });",
          "1405:             gf = function* () { yield* iteratorReturningNonObj; }",
          "",
          "[Removed Lines]",
          "1392:             assert.throws(() => g.throw(), TypeError, \"As the throw property is null a TypeError is thrown\", \"The value of the property 'throw' is not a Function object\");",
          "1399:             assert.throws(function () { g.return(100); }, TypeError, \"Trying to invoke the return method which is an object not method causes a TypeError\", \"The value of the property 'return' is not a Function object\");",
          "1402:             assert.throws(function () { g.throw(100); }, TypeError, \"Trying to invoke the throw method which is an object not method causes a TypeError\", \"The value of the property 'throw' is not a Function object\");",
          "",
          "[Added Lines]",
          "1392:             assert.throws(() => g.throw(), TypeError, \"As the throw property is null a TypeError is thrown\", \"Yielded iterator does not have a 'throw' method\");",
          "1399:             assert.throws(function () { g.return(100); }, TypeError, \"Trying to invoke the return method which is an object not method causes a TypeError\", \"Function expected\");",
          "1402:             assert.throws(function () { g.throw(100); }, TypeError, \"Trying to invoke the throw method which is an object not method causes a TypeError\", \"Function expected\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1711:             g1.return = function() { closed = true; return {done: true}; }",
          "1712:             g2 = gf2();",
          "1713:             g2.next();",
          "1715:             assert.isTrue(closed, \"When throw method is not defined on the iterator IteratorClose is called\");",
          "1717:             g1 = gf1();",
          "",
          "[Removed Lines]",
          "1714:             assert.throws(function() { g2['throw'](new ExpectedException()) }, TypeError, \"As the throw property is missing a TypeError is thrown\", \"The value of the property 'throw' is not a Function object\");",
          "",
          "[Added Lines]",
          "1714:             assert.throws(function() { g2['throw'](new ExpectedException()) }, TypeError, \"As the throw property is missing a TypeError is thrown\", \"Yielded iterator does not have a 'throw' method\");",
          "",
          "---------------"
        ],
        "test/es7/asyncawait-functionality.baseline||test/es7/asyncawait-functionality.baseline": [
          "File: test/es7/asyncawait-functionality.baseline -> test/es7/asyncawait-functionality.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: Test #5 - Success async in a class #7 called with result = '10'",
          "66: Test #5 - Success async in a class #10 called with result = '10'",
          "67: Test #8 - Success async function with default arguments's value overwritten #1 called with result = 'true'",
          "68: Test #8 - Success async function with default arguments's value #3 called with result = 'true'",
          "69: Test #11 - Success inner var x overwrote formal parameter x only after the declaration statement",
          "70: Test #11 - Success inner function x() overwrote formal parameter x",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: Test #8 - Success async function with default arguments's value has been rejected as expected by 'err' #2 called with err = 'expected error'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: Test #31 - Success async function returned through caller property is the same as the original async function",
          "106: Test #32 - Success value returned through await is assigned to the formal",
          "107: Test #32 - Success value returned through await is not assigned to the formal",
          "109: Test #9 - Success resolved promise in an async function #1 called with result = 'resolved'",
          "110: Test #9 - Success promise in an async function has been rejected as expected by 'err' #3 called with err = 'rejected'",
          "111: Test #22 - Success functions completes both await calls",
          "",
          "[Removed Lines]",
          "108: Test #8 - Success async function with default arguments's value has been rejected as expected by 'err' #2 called with err = 'expected error'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/es7/asyncawait-syntax.js||test/es7/asyncawait-syntax.js": [
          "File: test/es7/asyncawait-syntax.js -> test/es7/asyncawait-syntax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             assert.throws(function () { eval(\"async function method() { var x = await; }\"); }, SyntaxError, \"'await' cannot be used as an identifier in an async function.\", \"Unexpected token ';' after 'await'\");",
          "46:         }",
          "47:     },",
          "57:     {",
          "58:         name: \"Async classes\",",
          "59:         body: function () {",
          "",
          "[Removed Lines]",
          "48:     {",
          "49:         name: \"Async keyword as generator\",",
          "50:         body: function () {",
          "51:             assert.throws(function () { eval(\"async function* badFunction() { }\"); }, SyntaxError, \"'async' keyword is not allowed with a generator in a statement\", \"Use of disabled experimental feature\");",
          "52:             assert.throws(function () { eval(\"var badVariable = async function*() { }\"); }, SyntaxError, \"'async' keyword is not allowed with a generator in an expression\", \"Use of disabled experimental feature\");",
          "53:             assert.throws(function () { eval(\"var o { async *badFunction() { } };\"); }, SyntaxError, \"'async' keyword is not allowed with a generator in a object literal member\", \"Expected ';'\");",
          "54:             assert.throws(function () { eval(\"class C { async *badFunction() { } };\"); }, SyntaxError, \"'async' keyword is not allowed with a generator in a class member\", \"Use of disabled experimental feature\");",
          "55:         }",
          "56:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63a27a940603879495fb6bb69835791b4d868caa",
      "candidate_info": {
        "commit_hash": "63a27a940603879495fb6bb69835791b4d868caa",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/63a27a940603879495fb6bb69835791b4d868caa",
        "files": [
          "lib/Backend/FlowGraph.cpp",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilder.h",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Backend/LowerMDShared.cpp",
          "lib/Backend/ServerScriptContext.cpp",
          "lib/Backend/ServerScriptContext.h",
          "lib/Backend/arm/LowerMD.cpp",
          "lib/Backend/arm64/LowerMD.cpp",
          "lib/JITIDL/JITTypes.h",
          "lib/Parser/Parse.cpp",
          "lib/Parser/pnodewalk.h",
          "lib/Parser/ptree.h",
          "lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Base/ScriptContext.h",
          "lib/Runtime/Base/ScriptContextInfo.h",
          "lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeSerializer.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.h",
          "lib/Runtime/ByteCode/LayoutTypes.h",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/ByteCode/OpLayouts.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptLibrary.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "lib/Runtime/Library/ScriptFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.h",
          "lib/Runtime/Types/ScriptFunctionType.cpp",
          "lib/Runtime/Types/ScriptFunctionType.h",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.h",
          "lib/Runtime/Types/SimpleTypeHandler.cpp"
        ],
        "message": "Reimplement class definitions to limit type creation",
        "before_after_code_files": [
          "lib/Backend/FlowGraph.cpp||lib/Backend/FlowGraph.cpp",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilder.h||lib/Backend/IRBuilder.h",
          "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h||lib/Backend/Lower.h",
          "lib/Backend/LowerMDShared.cpp||lib/Backend/LowerMDShared.cpp",
          "lib/Backend/ServerScriptContext.cpp||lib/Backend/ServerScriptContext.cpp",
          "lib/Backend/ServerScriptContext.h||lib/Backend/ServerScriptContext.h",
          "lib/Backend/arm/LowerMD.cpp||lib/Backend/arm/LowerMD.cpp",
          "lib/Backend/arm64/LowerMD.cpp||lib/Backend/arm64/LowerMD.cpp",
          "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h",
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
          "lib/Parser/pnodewalk.h||lib/Parser/pnodewalk.h",
          "lib/Parser/ptree.h||lib/Parser/ptree.h",
          "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Base/ScriptContext.h||lib/Runtime/Base/ScriptContext.h",
          "lib/Runtime/Base/ScriptContextInfo.h||lib/Runtime/Base/ScriptContextInfo.h",
          "lib/Runtime/ByteCode/ByteCodeDumper.cpp||lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp||lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeSerializer.cpp||lib/Runtime/ByteCode/ByteCodeSerializer.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp||lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.h||lib/Runtime/ByteCode/ByteCodeWriter.h",
          "lib/Runtime/ByteCode/LayoutTypes.h||lib/Runtime/ByteCode/LayoutTypes.h",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/ByteCode/OpLayouts.h||lib/Runtime/ByteCode/OpLayouts.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h||lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptLibrary.h||lib/Runtime/Library/JavascriptLibrary.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "lib/Runtime/Library/ScriptFunction.cpp||lib/Runtime/Library/ScriptFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.h||lib/Runtime/Library/ScriptFunction.h",
          "lib/Runtime/Types/ScriptFunctionType.cpp||lib/Runtime/Types/ScriptFunctionType.cpp",
          "lib/Runtime/Types/ScriptFunctionType.h||lib/Runtime/Types/ScriptFunctionType.h",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp||lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.h||lib/Runtime/Types/SimpleDictionaryTypeHandler.h",
          "lib/Runtime/Types/SimpleTypeHandler.cpp||lib/Runtime/Types/SimpleTypeHandler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Backend/Lower.h||lib/Backend/Lower.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
            "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Backend/Lower.h||lib/Backend/Lower.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
            "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/FlowGraph.cpp||lib/Backend/FlowGraph.cpp": [
          "File: lib/Backend/FlowGraph.cpp -> lib/Backend/FlowGraph.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:         case Js::OpCode::BrOnObject_A:",
          "849:         case Js::OpCode::BrOnClassConstructor:",
          "850:         case Js::OpCode::BrOnBaseConstructorKind:",
          "851:             if (tryUnsignedCmpPeep)",
          "852:             {",
          "853:                 this->UnsignedCmpPeep(instr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851:         case Js::OpCode::BrOnObjectOrNull_A:",
          "852:         case Js::OpCode::BrOnNotNullObj_A:",
          "853:         case Js::OpCode::BrOnConstructor_A:",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2242:     this->AddInstr(instr, Js::Constants::NoByteCodeOffset);",
          "2243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2245: void",
          "2246: IRBuilder::BuildReg2U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, uint index)",
          "2247: {",
          "2248:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2250:     switch (newOpcode)",
          "2251:     {",
          "2252:         case Js::OpCode::InitBaseClass:",
          "2253:         {",
          "2254:             IR::Opnd * opndProtoParent = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetObjectPrototypeAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "2255:             IR::Opnd * opndCtorParent = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetFunctionPrototypeAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "2256:             BuildInitClass(offset, R0, R1, opndProtoParent, opndCtorParent, GetEnvironmentOperand(offset), index);",
          "2257:             break;",
          "2258:         }",
          "2260:         default:",
          "2261:             AssertMsg(false, \"Unknown Reg2U op\");",
          "2262:             break;",
          "2263:     }",
          "2264: }",
          "2266: template <typename SizePolicy>",
          "2267: void",
          "2268: IRBuilder::BuildReg2U(Js::OpCode newOpcode, uint32 offset)",
          "2269: {",
          "2270:     Assert(!OpCodeAttr::IsProfiledOp(newOpcode));",
          "2271:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2272:     auto layout = m_jnReader.GetLayout<Js::OpLayoutT_Reg2U<SizePolicy>>();",
          "2274:     if (!PHASE_OFF(Js::ClosureRegCheckPhase, m_func))",
          "2275:     {",
          "2276:         this->DoClosureRegCheck(layout->R0);",
          "2277:         this->DoClosureRegCheck(layout->R1);",
          "2278:     }",
          "2280:     BuildReg2U(newOpcode, offset, layout->R0, layout->R1, layout->SlotIndex);",
          "2281: }",
          "2283: void",
          "2284: IRBuilder::BuildReg3U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2, uint index)",
          "2285: {",
          "2286:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2288:     switch (newOpcode)",
          "2289:     {",
          "2290:         case Js::OpCode::InitInnerBaseClass:",
          "2291:         {",
          "2292:             IR::Opnd * opndProtoParent = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetObjectPrototypeAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "2293:             IR::Opnd * opndCtorParent = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetFunctionPrototypeAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "2294:             BuildInitClass(offset, R0, R1, opndProtoParent, opndCtorParent, BuildSrcOpnd(R2), index);",
          "2295:             break;",
          "2296:         }",
          "2298:         default:",
          "2299:             AssertMsg(false, \"Unknown Reg3U op\");",
          "2300:             break;",
          "2301:     }",
          "2302: }",
          "2304: template <typename SizePolicy>",
          "2305: void",
          "2306: IRBuilder::BuildReg3U(Js::OpCode newOpcode, uint32 offset)",
          "2307: {",
          "2308:     Assert(!OpCodeAttr::IsProfiledOp(newOpcode));",
          "2309:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2310:     auto layout = m_jnReader.GetLayout<Js::OpLayoutT_Reg3U<SizePolicy>>();",
          "2312:     if (!PHASE_OFF(Js::ClosureRegCheckPhase, m_func))",
          "2313:     {",
          "2314:         this->DoClosureRegCheck(layout->R0);",
          "2315:         this->DoClosureRegCheck(layout->R1);",
          "2316:         this->DoClosureRegCheck(layout->R2);",
          "2317:     }",
          "2319:     BuildReg3U(newOpcode, offset, layout->R0, layout->R1, layout->R2, layout->SlotIndex);",
          "2320: }",
          "2322: template <typename SizePolicy>",
          "2323: void",
          "2324: IRBuilder::BuildReg4U(Js::OpCode newOpcode, uint32 offset)",
          "2325: {",
          "2326:     Assert(!OpCodeAttr::IsProfiledOp(newOpcode));",
          "2327:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2328:     auto layout = m_jnReader.GetLayout<Js::OpLayoutT_Reg4U<SizePolicy>>();",
          "2330:     if (!PHASE_OFF(Js::ClosureRegCheckPhase, m_func))",
          "2331:     {",
          "2332:         this->DoClosureRegCheck(layout->R0);",
          "2333:         this->DoClosureRegCheck(layout->R1);",
          "2334:         this->DoClosureRegCheck(layout->R2);",
          "2335:         this->DoClosureRegCheck(layout->R3);",
          "2336:     }",
          "2338:     BuildReg4U(newOpcode, offset, layout->R0, layout->R1, layout->R2, layout->R3, layout->SlotIndex);",
          "2339: }",
          "2341: void",
          "2342: IRBuilder::BuildReg4U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2, Js::RegSlot R3, uint slotIndex)",
          "2343: {",
          "2344:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2346:     switch (newOpcode)",
          "2347:     {",
          "2348:         case Js::OpCode::InitClass:",
          "2349:         {",
          "2350:             BuildInitClass(offset, R0, R1, BuildSrcOpnd(R3), BuildSrcOpnd(R2), GetEnvironmentOperand(offset), slotIndex);",
          "2351:             break;",
          "2352:         }",
          "2354:         default:",
          "2355:             AssertMsg(false, \"Unknown Reg4U opcode\");",
          "2356:             break;",
          "2357:     }",
          "2358: }",
          "2360: template <typename SizePolicy>",
          "2361: void",
          "2362: IRBuilder::BuildReg5U(Js::OpCode newOpcode, uint32 offset)",
          "2363: {",
          "2364:     Assert(!OpCodeAttr::IsProfiledOp(newOpcode));",
          "2365:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2366:     auto layout = m_jnReader.GetLayout<Js::OpLayoutT_Reg5U<SizePolicy>>();",
          "2368:     if (!PHASE_OFF(Js::ClosureRegCheckPhase, m_func))",
          "2369:     {",
          "2370:         this->DoClosureRegCheck(layout->R0);",
          "2371:         this->DoClosureRegCheck(layout->R1);",
          "2372:         this->DoClosureRegCheck(layout->R2);",
          "2373:         this->DoClosureRegCheck(layout->R3);",
          "2374:         this->DoClosureRegCheck(layout->R4);",
          "2375:     }",
          "2377:     BuildReg5U(newOpcode, offset, layout->R0, layout->R1, layout->R2, layout->R3, layout->R4, layout->SlotIndex);",
          "2378: }",
          "2380: void",
          "2381: IRBuilder::BuildReg5U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2, Js::RegSlot R3, Js::RegSlot R4, uint slotIndex)",
          "2382: {",
          "2383:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "2385:     switch (newOpcode)",
          "2386:     {",
          "2387:         case Js::OpCode::InitInnerClass:",
          "2388:         {",
          "2389:             BuildInitClass(offset, R0, R1, BuildSrcOpnd(R3), BuildSrcOpnd(R2), BuildSrcOpnd(R4), slotIndex);",
          "2390:             break;",
          "2391:         }",
          "2393:         default:",
          "2394:             AssertMsg(false, \"Unknown Reg5U opcode\");",
          "2395:             break;",
          "2396:     }",
          "2397: }",
          "2399: void",
          "2400: IRBuilder::BuildInitClass(uint32 offset, Js::RegSlot regConstructor, Js::RegSlot regProto, IR::Opnd * opndProtoParent, IR::Opnd * opndConstructorParent, IR::Opnd * opndEnvironment, uint index)",
          "2401: {",
          "2402:     IR::RegOpnd * opndProto = BuildDstOpnd(regProto);",
          "2403:     opndProto->SetValueType(ValueType::GetObject(ObjectType::Object));",
          "2404:     IR::Instr * instr = IR::Instr::New(Js::OpCode::NewClassCtorProto, opndProto, opndProtoParent, m_func);",
          "2405:     this->AddInstr(instr, offset);",
          "2407:     instr = IR::Instr::New(Js::OpCode::ExtendArg_A, IR::RegOpnd::New(TyVar, m_func), opndConstructorParent, m_func);",
          "2408:     this->AddInstr(instr, offset);",
          "2410:     instr = IR::Instr::New(Js::OpCode::ExtendArg_A, IR::RegOpnd::New(TyVar, m_func), opndProto, instr->GetDst(), m_func);",
          "2411:     this->AddInstr(instr, offset);",
          "2413:     Js::FunctionInfoPtrPtr infoRef = m_func->GetJITFunctionBody()->GetNestedFuncRef(index);",
          "2414:     IR::AddrOpnd * functionBodySlotOpnd = IR::AddrOpnd::New((Js::Var)infoRef, IR::AddrOpndKindDynamicMisc, m_func);",
          "2415:     instr = IR::Instr::New(Js::OpCode::ExtendArg_A, IR::RegOpnd::New(TyVar, m_func), functionBodySlotOpnd, instr->GetDst(), m_func);",
          "2416:     this->AddInstr(instr, offset);",
          "2418:     instr = IR::Instr::New(Js::OpCode::ExtendArg_A, IR::RegOpnd::New(TyVar, m_func), opndEnvironment, instr->GetDst(), m_func);",
          "2419:     this->AddInstr(instr, offset);",
          "2421:     IR::RegOpnd * opndConstructor = BuildDstOpnd(regConstructor);",
          "2422:     instr = IR::Instr::New(Js::OpCode::NewClassConstructor, opndConstructor, instr->GetDst(), m_func);",
          "2423:     this->AddInstr(instr, offset);",
          "2425:     Assert(opndConstructor->m_sym->m_isSingleDef);",
          "2426:     opndConstructor->m_sym->m_isSafeThis = true;",
          "2427:     opndConstructor->m_sym->m_isNotNumber = true;",
          "2428: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6684:     }",
          "6685: }",
          "",
          "[Removed Lines]",
          "6696: template <typename SizePolicy>",
          "6697: void",
          "6698: IRBuilder::BuildClass(Js::OpCode newOpcode, uint32 offset)",
          "6699: {",
          "6700:     Assert(!OpCodeAttr::IsProfiledOp(newOpcode));",
          "6701:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "6702:     auto layout = m_jnReader.GetLayout<Js::OpLayoutT_Class<SizePolicy>>();",
          "6704:     if (!PHASE_OFF(Js::ClosureRegCheckPhase, m_func))",
          "6705:     {",
          "6706:         this->DoClosureRegCheck(layout->Constructor);",
          "6707:         this->DoClosureRegCheck(layout->Extends);",
          "6708:     }",
          "6710:     BuildClass(newOpcode, offset, layout->Constructor, layout->Extends);",
          "6711: }",
          "6713: void",
          "6714: IRBuilder::BuildClass(Js::OpCode newOpcode, uint32 offset, Js::RegSlot constructor, Js::RegSlot extends)",
          "6715: {",
          "6716:     Assert(newOpcode == Js::OpCode::InitClass);",
          "6718:     IR::Instr * insn = IR::Instr::New(newOpcode, m_func);",
          "6719:     insn->SetSrc1(this->BuildSrcOpnd(constructor));",
          "6721:     if (extends != Js::Constants::NoRegister)",
          "6722:     {",
          "6723:         insn->SetSrc2(this->BuildSrcOpnd(extends));",
          "6724:     }",
          "6726:     this->AddInstr(insn, offset);",
          "6727: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6797:     BuildBrReg2(newOpcode, offset, m_jnReader.GetCurrentOffset() + layout->RelativeJumpOffset, layout->R1, layout->R2);",
          "6798: }",
          "6800: template <typename SizePolicy>",
          "6801: void",
          "6802: IRBuilder::BuildBrReg1Unsigned1(Js::OpCode newOpcode, uint32 offset)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6943: template <typename SizePolicy>",
          "6944: void",
          "6945: IRBuilder::BuildBrReg3(Js::OpCode newOpcode, uint32 offset)",
          "6946: {",
          "6947:     Assert(!OpCodeAttr::IsProfiledOp(newOpcode));",
          "6948:     Assert(OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "6949:     auto layout = m_jnReader.GetLayout<Js::OpLayoutT_BrReg3<SizePolicy>>();",
          "6951:     if (!PHASE_OFF(Js::ClosureRegCheckPhase, m_func))",
          "6952:     {",
          "6953:         this->DoClosureRegCheck(layout->R0);",
          "6954:         this->DoClosureRegCheck(layout->R1);",
          "6955:         this->DoClosureRegCheck(layout->R2);",
          "6956:     }",
          "6958:     BuildBrReg3(newOpcode, offset, m_jnReader.GetCurrentOffset() + layout->RelativeJumpOffset, layout->R0, layout->R1, layout->R2);",
          "6959: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6883:     }",
          "6884: }",
          "6886: void",
          "6887: IRBuilder::BuildEmpty(Js::OpCode newOpcode, uint32 offset)",
          "6888: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7048: void",
          "7049: IRBuilder::BuildBrReg3(Js::OpCode newOpcode, uint32 offset, uint targetOffset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2)",
          "7050: {",
          "7051:     switch (newOpcode)",
          "7052:     {",
          "7053:         case Js::OpCode::CheckExtends:",
          "7054:         {",
          "7055:             IR::RegOpnd * opndExtends = BuildSrcOpnd(R2);",
          "7057:             IR::LabelInstr * labelNotNull = IR::LabelInstr::New(Js::OpCode::Label, m_func);",
          "7058:             IR::BranchInstr * branchInstr = IR::BranchInstr::New(Js::OpCode::BrOnNotNullObj_A, labelNotNull, opndExtends, m_func);",
          "7059:             this->AddInstr(branchInstr, offset);",
          "7061:             IR::AddrOpnd * opndNullAddr = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetNullAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "7062:             IR::RegOpnd * opndProtoParent = BuildDstOpnd(R1);",
          "7063:             IR::Instr * instr = IR::Instr::New(Js::OpCode::Ld_A, opndProtoParent, opndNullAddr, m_func);",
          "7064:             opndNullAddr->SetValueType(ValueType::Null);",
          "7065:             this->AddInstr(instr, offset);",
          "7067:             IR::AddrOpnd * opndFuncProto = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetFunctionPrototypeAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "7068:             IR::RegOpnd * opndCtorParent = BuildDstOpnd(R0);",
          "7069:             instr = IR::Instr::New(Js::OpCode::Ld_A, opndCtorParent, opndFuncProto, m_func);",
          "7070:             this->AddInstr(instr, offset);",
          "7072:             branchInstr = IR::BranchInstr::New(Js::OpCode::Br, nullptr, m_func);",
          "7073:             this->AddBranchInstr(branchInstr, offset, targetOffset);",
          "7075:             this->AddInstr(labelNotNull, offset);",
          "7077:             IR::LabelInstr * labelIsCtor = IR::LabelInstr::New(Js::OpCode::Label, m_func);",
          "7078:             IR::BranchInstr * brIsCtor = IR::BranchInstr::New(Js::OpCode::BrOnConstructor_A, labelIsCtor, opndExtends, m_func);",
          "7079:             this->AddInstr(brIsCtor, offset);",
          "7081:             instr = IR::Instr::New(Js::OpCode::RuntimeTypeError, m_func);",
          "7082:             instr->SetSrc1(IR::IntConstOpnd::New(SCODE_CODE(JSERR_ErrorOnNew), TyInt32, m_func, true));",
          "7083:             this->AddInstr(instr, offset);",
          "7085:             this->AddInstr(labelIsCtor, offset);",
          "7087:             if (R0 == R2 && opndCtorParent->m_sym != opndExtends->m_sym)",
          "7088:             {",
          "7091:                 instr = IR::Instr::New(Js::OpCode::Ld_A, opndCtorParent, opndExtends, m_func);",
          "7092:                 this->AddInstr(instr, offset);",
          "7093:             }",
          "7095:             break;",
          "7096:         }",
          "7098:         default:",
          "7099:             AssertMsg(false, \"Unknown BrReg3 opcode\");",
          "7100:             break;",
          "7102:     }",
          "7103: }",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.h||lib/Backend/IRBuilder.h": [
          "File: lib/Backend/IRBuilder.h -> lib/Backend/IRBuilder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     void                BuildProfiledReg2(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot srcRegSlot, Js::ProfileId profileId);",
          "138:     void                BuildReg3(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot,",
          "139:                             Js::RegSlot src2RegSlot, Js::ProfileId profileId);",
          "140:     void                BuildIsIn(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot, Js::RegSlot src2RegSlot, Js::ProfileId profileId);",
          "141:     void                BuildReg3C(Js::OpCode newOpCode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot,",
          "142:                             Js::RegSlot src2RegSlot, Js::CacheId inlineCacheIndex);",
          "143:     void                BuildReg4(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot,",
          "144:                             Js::RegSlot src2RegSlot, Js::RegSlot src3RegSlot);",
          "145:     void                BuildReg2B1(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot srcRegSlot, byte index);",
          "146:     void                BuildReg3B1(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot,",
          "147:                             Js::RegSlot src2RegSlot, uint8 index);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     void                BuildReg3U(Js::OpCode newOpCode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot,",
          "141:                             Js::RegSlot src2RegSlot, uint slotIndex);",
          "145:     void                BuildReg3UC(Js::OpCode newOpCode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot src1RegSlot,",
          "146:                             Js::RegSlot src2RegSlot, uint slotIndex, Js::CacheId inlineCacheIndex);",
          "149:     void                BuildReg4U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2, Js::RegSlot R3, uint slotIndex);",
          "150:     void                BuildReg5U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2, Js::RegSlot R3, Js::RegSlot R4,",
          "151:                             uint slotIndex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     void                BuildReg1Unsigned1(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, int32 C1);",
          "152:     void                BuildProfiledReg1Unsigned1(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, int32 C1, Js::ProfileId profileId);",
          "153:     void                BuildReg2Int1(Js::OpCode newOpcode, uint32 offset, Js::RegSlot dstRegSlot, Js::RegSlot srcRegSlot, int32 value);",
          "154:     void                BuildElementC(Js::OpCode newOpcode, uint32 offset, Js::RegSlot fieldRegSlot, Js::RegSlot regSlot,",
          "155:                             Js::PropertyIdIndexType propertyIdIndex);",
          "156:     void                BuildElementScopedC(Js::OpCode newOpcode, uint32 offset, Js::RegSlot regSlot,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     void                BuildReg2U(Js::OpCode newOpcode, uint32 offset, Js::RegSlot R0, Js::RegSlot R1, uint index);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:                             Js::ArgSlot argCount, Js::CallIExtendedOptions options, uint32 spreadAuxOffset, Js::CallFlags flags = Js::CallFlags_None);",
          "202:     void                BuildCallCommon(IR::Instr *instr, StackSym *symDst, Js::ArgSlot argCount, Js::CallFlags flags = Js::CallFlags_None);",
          "203:     void                BuildRegexFromPattern(Js::RegSlot dstRegSlot, uint32 patternIndex, uint32 offset);",
          "205:     void                BuildBrReg1(Js::OpCode newOpcode, uint32 offset, uint targetOffset, Js::RegSlot srcRegSlot);",
          "206:     void                BuildBrReg2(Js::OpCode newOpcode, uint32 offset, uint targetOffset, Js::RegSlot src1RegSlot, Js::RegSlot src2RegSlot);",
          "207:     void                BuildBrBReturn(Js::OpCode newOpcode, uint32 offset, Js::RegSlot DestRegSlot, uint32 forInLoopLevel, uint32 targetOffset);",
          "209:     IR::IndirOpnd *     BuildIndirOpnd(IR::RegOpnd *baseReg, IR::RegOpnd *indexReg);",
          "",
          "[Removed Lines]",
          "204:     void                BuildClass(Js::OpCode newOpcode, uint32 offset, Js::RegSlot constructor, Js::RegSlot extends);",
          "",
          "[Added Lines]",
          "212:     void                BuildInitClass(uint32 offset, Js::RegSlot constructor, Js::RegSlot proto, IR::Opnd * opndProtoParent, IR::Opnd * opndCtorParent, IR::Opnd * opndEnvironment, uint index);",
          "215:     void                BuildBrReg3(Js::OpCode newOpcode, uint32 offset, uint targetOffset, Js::RegSlot R0, Js::RegSlot R1, Js::RegSlot R2);",
          "",
          "---------------"
        ],
        "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
          "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: HELPERCALLCHK(ScrFunc_OP_NewScFuncHomeObj, Js::ScriptFunction::OP_NewScFuncHomeObj, AttrCanNotBeReentrant)",
          "30: HELPERCALLCHK(ScrFunc_OP_NewScGenFunc, Js::JavascriptGeneratorFunction::OP_NewScGenFunc, AttrCanNotBeReentrant)",
          "31: HELPERCALLCHK(ScrFunc_OP_NewScGenFuncHomeObj, Js::JavascriptGeneratorFunction::OP_NewScGenFuncHomeObj, AttrCanNotBeReentrant)",
          "32: HELPERCALLCHK(ScrFunc_CheckAlignment, Js::JavascriptFunction::CheckAlignment, AttrCanNotBeReentrant)",
          "33: HELPERCALLCHK(ScrObj_LdHandlerScope, Js::JavascriptOperators::OP_LdHandlerScope, 0)",
          "34: HELPERCALLCHK(ScrObj_LdFrameDisplay, Js::JavascriptOperators::OP_LdFrameDisplay, AttrCanNotBeReentrant)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: HELPERCALLCHK(ScrFunc_OP_NewClassConstructor, Js::ScriptFunction::OP_NewClassConstructor, AttrCanNotBeReentrant)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: HELPERCALLCHK(Op_IsIn, Js::JavascriptOperators::IsIn, AttrCanThrow)",
          "45: HELPERCALLCHK(Op_IsObject, (BOOL (*) (Js::Var))Js::JavascriptOperators::IsObject, AttrCanNotBeReentrant)",
          "46: HELPERCALLCHK(Op_IsClassConstructor, Js::JavascriptOperators::IsClassConstructor, AttrCanNotBeReentrant)",
          "47: HELPERCALLCHK(Op_IsBaseConstructorKind, Js::JavascriptOperators::IsBaseConstructorKind, AttrCanNotBeReentrant)",
          "48: HELPERCALLCHK(Op_LoadHeapArguments, Js::JavascriptOperators::LoadHeapArguments, AttrCanNotBeReentrant)",
          "49: HELPERCALLCHK(Op_LoadHeapArgsCached, Js::JavascriptOperators::LoadHeapArgsCached, AttrCanNotBeReentrant)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: HELPERCALLCHK(Op_IsObjectOrNull, (BOOL (*) (Js::Var))Js::JavascriptOperators::IsObjectOrNull, AttrCanNotBeReentrant)",
          "49: HELPERCALLCHK(Op_IsConstructor, (bool (*)(Js::Var))Js::JavascriptOperators::IsConstructor, AttrCanNotBeReentrant)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327: HELPERCALLCHK(UpdateNewScObjectCache, Js::JavascriptOperators::UpdateNewScObjectCache, AttrCanNotBeReentrant)",
          "328: HELPERCALLCHK(EnsureObjectLiteralType, Js::JavascriptOperators::EnsureObjectLiteralType, AttrCanNotBeReentrant)",
          "332: HELPERCALLCHK(OP_ClearAttributes, Js::JavascriptOperators::OP_ClearAttributes, AttrCanThrow | AttrCanNotBeReentrant)",
          "",
          "[Removed Lines]",
          "330: HELPERCALLCHK(OP_InitClass, Js::JavascriptOperators::OP_InitClass, AttrCanThrow)",
          "",
          "[Added Lines]",
          "333: HELPERCALLCHK(Op_NewClassCtorProto, Js::JavascriptOperators::OP_NewClassCtorProto, AttrCanNotBeReentrant)",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2076:             }",
          "2077:             break;",
          "2079:         case Js::OpCode::BrOnBaseConstructorKind:",
          "2080:             this->LowerBrOnClassConstructor(instr, IR::HelperOp_IsBaseConstructorKind);",
          "2081:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2079:         case Js::OpCode::BrOnObjectOrNull_A:",
          "2080:             if (PHASE_OFF(Js::BranchFastPathPhase, this->m_func) || noMathFastPath)",
          "2081:             {",
          "2082:                 this->LowerBrOnObject(instr, IR::HelperOp_IsObjectOrNull);",
          "2083:             }",
          "2084:             else",
          "2085:             {",
          "2086:                 GenerateFastBrOnObject(instr);",
          "2087:             }",
          "2088:             break;",
          "2090:         case Js::OpCode::BrOnNotNullObj_A:",
          "2091:             GenerateFastBrOnObject(instr);",
          "2092:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2084:             this->LowerBrOnClassConstructor(instr, IR::HelperOp_IsClassConstructor);",
          "2085:             break;",
          "2087:         case Js::OpCode::BrAddr_A:",
          "2088:         case Js::OpCode::BrNotAddr_A:",
          "2089:         case Js::OpCode::BrNotNull_A:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2102:         case Js::OpCode::BrOnConstructor_A:",
          "2103:             this->LowerBrOnClassConstructor(instr, IR::HelperOp_IsConstructor);",
          "2104:             break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2798:         case Js::OpCode::DeletedNonHelperBranch:",
          "2799:             break;",
          "2803:             break;",
          "2805:         case Js::OpCode::NewConcatStrMulti:",
          "",
          "[Removed Lines]",
          "2801:         case Js::OpCode::InitClass:",
          "2802:             instrPrev = this->LowerInitClass(instr);",
          "",
          "[Added Lines]",
          "2820:         case Js::OpCode::NewClassCtorProto:",
          "2821:             this->LowerUnaryHelperMem(instr, IR::HelperOp_NewClassCtorProto);",
          "2822:             break;",
          "2824:         case Js::OpCode::NewClassConstructor:",
          "2825:             instrPrev = this->LowerNewClassConstructor(instr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10223:     opndHelper = IR::HelperCallOpnd::New(helperMethod, this->m_func);",
          "10224:     symDst = StackSym::New(TyVar, this->m_func);",
          "10226:     instrCall = IR::Instr::New(Js::OpCode::Call, opndDst, opndHelper, this->m_func);",
          "10228:     instr->InsertBefore(instrCall);",
          "",
          "[Removed Lines]",
          "10225:     opndDst = IR::RegOpnd::New(symDst, TyVar, this->m_func);",
          "",
          "[Added Lines]",
          "10248:     opndDst = IR::RegOpnd::New(symDst, TyUint8, this->m_func);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14693: void",
          "14694: Lowerer::GenerateFastBrOnObject(IR::Instr *instr)",
          "14695: {",
          "14698:     IR::RegOpnd      *object        = instr->GetSrc1()->IsRegOpnd() ? instr->GetSrc1()->AsRegOpnd() : nullptr;",
          "14699:     IR::LabelInstr   *done          = instr->GetOrCreateContinueLabel();",
          "14700:     IR::LabelInstr   *target        = instr->AsBranchInstr()->GetTarget();",
          "14704:     if (!object)",
          "14705:     {",
          "",
          "[Removed Lines]",
          "14696:     Assert(instr->m_opcode == Js::OpCode::BrOnObject_A);",
          "14701:     IR::RegOpnd      *typeRegOpnd   = IR::RegOpnd::New(TyMachReg, m_func);",
          "14702:     IR::IntConstOpnd *typeIdOpnd    = IR::IntConstOpnd::New(Js::TypeIds_LastJavascriptPrimitiveType, TyInt32, instr->m_func);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "14719:     InsertMove(typeRegOpnd,",
          "14720:                IR::IndirOpnd::New(object, Js::RecyclableObject::GetOffsetOfType(), TyMachReg, m_func),",
          "14721:                instr);",
          "14727:     instr->Remove();",
          "14728: }",
          "",
          "[Removed Lines]",
          "14717:     m_lowererMD.GenerateObjectTest(object, instr, done);",
          "14723:     InsertCompareBranch(",
          "14724:         IR::IndirOpnd::New(typeRegOpnd, Js::Type::GetOffsetOfTypeId(), TyInt32, m_func),",
          "14725:         typeIdOpnd, Js::OpCode::BrGt_A, target, instr);",
          "",
          "[Added Lines]",
          "14736:     m_lowererMD.GenerateObjectTest(object, instr, instr->m_opcode == Js::OpCode::BrOnNotNullObj_A ? target : done);",
          "14738:     IR::RegOpnd      *typeRegOpnd   = IR::RegOpnd::New(TyMachReg, m_func);",
          "14743:     switch (instr->m_opcode)",
          "14744:     {",
          "14745:         case Js::OpCode::BrOnObjectOrNull_A:",
          "14746:         {",
          "14747:             IR::RegOpnd * opndTypeId = IR::RegOpnd::New(TyInt32, m_func);",
          "14748:             InsertMove(opndTypeId, IR::IndirOpnd::New(typeRegOpnd, Js::Type::GetOffsetOfTypeId(), TyInt32, m_func), instr);",
          "14749:             InsertCompareBranch(opndTypeId,",
          "14750:                                 IR::IntConstOpnd::New(Js::TypeIds_LastJavascriptPrimitiveType, TyInt32, instr->m_func),",
          "14751:                                 Js::OpCode::BrGt_A, target, instr);",
          "14752:             InsertCompareBranch(opndTypeId, IR::IntConstOpnd::New(Js::TypeIds_Null, TyInt32, m_func), Js::OpCode::BrEq_A, target, instr);",
          "14753:             break;",
          "14754:         }",
          "14756:         case Js::OpCode::BrOnObject_A:",
          "14757:             InsertCompareBranch(",
          "14758:                 IR::IndirOpnd::New(typeRegOpnd, Js::Type::GetOffsetOfTypeId(), TyInt32, m_func),",
          "14759:                 IR::IntConstOpnd::New(Js::TypeIds_LastJavascriptPrimitiveType, TyInt32, instr->m_func),",
          "14760:                 Js::OpCode::BrGt_A, target, instr);",
          "14761:             break;",
          "14763:         case Js::OpCode::BrOnNotNullObj_A:",
          "14764:             InsertCompareBranch(",
          "14765:                 IR::IndirOpnd::New(typeRegOpnd, Js::Type::GetOffsetOfTypeId(), TyInt32, m_func),",
          "14766:                 IR::IntConstOpnd::New(Js::TypeIds_Null, TyInt32, instr->m_func),",
          "14767:                 Js::OpCode::BrNeq_A, target, instr);",
          "14768:             break;",
          "14770:         default:",
          "14771:             AssertMsg(false, \"Unknown BrOnObject opcode\");",
          "14772:             break;",
          "14773:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "25883: }",
          "25885: IR::Instr *",
          "25887: {",
          "25911: }",
          "25913: void",
          "",
          "[Removed Lines]",
          "25886: Lowerer::LowerInitClass(IR::Instr * instr)",
          "25889:     IR::Instr   * prevInstr = LoadScriptContext(instr);",
          "25892:     if (instr->GetSrc2() != nullptr)",
          "25893:     {",
          "25894:         IR::Opnd * extendsOpnd = instr->UnlinkSrc2();",
          "25895:         m_lowererMD.LoadHelperArgument(instr, extendsOpnd);",
          "25896:     }",
          "25897:     else",
          "25898:     {",
          "25899:         IR::AddrOpnd* extendsOpnd = IR::AddrOpnd::NewNull(this->m_func);",
          "25900:         m_lowererMD.LoadHelperArgument(instr, extendsOpnd);",
          "25901:     }",
          "25904:     IR::Opnd * ctorOpnd = instr->UnlinkSrc1();",
          "25905:     m_lowererMD.LoadHelperArgument(instr, ctorOpnd);",
          "25908:     m_lowererMD.ChangeToHelperCall(instr, IR::HelperOP_InitClass);",
          "25910:     return prevInstr;",
          "",
          "[Added Lines]",
          "25934: Lowerer::LowerNewClassConstructor(IR::Instr * instr)",
          "25936:     IR::Instr * instrPrev = instr->m_prev;",
          "25938:     IR::RegOpnd * opndLink = instr->UnlinkSrc1()->AsRegOpnd();",
          "25939:     IR::Instr * instrDef = opndLink->m_sym->m_instrDef;",
          "25940:     Assert(instrDef && instrDef->m_opcode == Js::OpCode::ExtendArg_A);",
          "25942:     IR::RegOpnd * opndEnvironment = instrDef->GetSrc1()->AsRegOpnd();",
          "25943:     opndLink = instrDef->GetSrc2()->AsRegOpnd();",
          "25944:     instrDef = opndLink->m_sym->m_instrDef;",
          "25945:     Assert(instrDef && instrDef->m_opcode == Js::OpCode::ExtendArg_A);",
          "25947:     IR::AddrOpnd * opndFunctionBodySlot = instrDef->GetSrc1()->AsAddrOpnd();",
          "25948:     opndLink = instrDef->GetSrc2()->AsRegOpnd();",
          "25949:     instrDef = opndLink->m_sym->m_instrDef;",
          "25950:     Assert(instrDef && instrDef->m_opcode == Js::OpCode::ExtendArg_A);",
          "25952:     IR::RegOpnd * opndProto = instrDef->GetSrc1()->AsRegOpnd();",
          "25953:     opndLink = instrDef->GetSrc2()->AsRegOpnd();",
          "25954:     instrDef = opndLink->m_sym->m_instrDef;",
          "25955:     Assert(instrDef && instrDef->m_opcode == Js::OpCode::ExtendArg_A);",
          "25957:     IR::Opnd * opndCtorParent = instrDef->GetSrc1();",
          "25959:     m_lowererMD.LoadHelperArgument(instr, opndCtorParent);",
          "25960:     m_lowererMD.LoadHelperArgument(instr, opndProto);",
          "25961:     m_lowererMD.LoadHelperArgument(instr, opndFunctionBodySlot);",
          "25962:     m_lowererMD.LoadHelperArgument(instr, opndEnvironment);",
          "25964:     IR::RegOpnd * opndConstructor = instr->GetDst()->AsRegOpnd();",
          "25965:     IR::Instr * instrNext = instr->m_next;",
          "25967:     m_lowererMD.ChangeToHelperCall(instr, IR::HelperScrFunc_OP_NewClassConstructor);",
          "25971:     IR::RegOpnd * opndAuxSlots = IR::RegOpnd::New(TyMachPtr, m_func);",
          "25972:     InsertMove(opndAuxSlots, IR::IndirOpnd::New(opndProto, Js::DynamicObject::GetOffsetOfAuxSlots(), TyMachPtr, m_func, true), instrNext, false);",
          "25973:     InsertMove(IR::IndirOpnd::New(opndAuxSlots, 0, TyMachPtr, m_func, true), opndConstructor, instrNext, false);",
          "25977:     opndAuxSlots = IR::RegOpnd::New(TyMachPtr, m_func);",
          "25978:     InsertMove(opndAuxSlots, IR::IndirOpnd::New(opndConstructor, Js::DynamicObject::GetOffsetOfAuxSlots(), TyMachPtr, m_func, true), instrNext, false);",
          "25979:     InsertMove(IR::IndirOpnd::New(opndAuxSlots, 0, TyMachPtr, m_func, true), opndProto, instrNext, false);",
          "25981:     return instrPrev;",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.h||lib/Backend/Lower.h": [
          "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "665:     void            GenerateGetCurrentFunctionObject(IR::Instr * instr);",
          "666:     IR::Opnd *      GetInlineCacheFromFuncObjectForRuntimeUse(IR::Instr * instr, IR::PropertySymOpnd * propSymOpnd, bool isHelper);",
          "670:     IR::RegOpnd *   GenerateGetImmutableOrScriptUnreferencedString(IR::RegOpnd * strOpnd, IR::Instr * insertBeforeInstr, IR::JnHelperMethod helperMethod, bool loweringCloneStr = false, bool reloadDst = true);",
          "671:     void            LowerNewConcatStrMulti(IR::Instr * instr);",
          "",
          "[Removed Lines]",
          "668:     IR::Instr *     LowerInitClass(IR::Instr * instr);",
          "",
          "[Added Lines]",
          "668:     IR::Instr *     LowerNewClassConstructor(IR::Instr * instr);",
          "",
          "---------------"
        ],
        "lib/Backend/LowerMDShared.cpp||lib/Backend/LowerMDShared.cpp": [
          "File: lib/Backend/LowerMDShared.cpp -> lib/Backend/LowerMDShared.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:     case Js::OpCode::BrFalse_A:",
          "1029:     case Js::OpCode::BrNotNull_A:",
          "1030:     case Js::OpCode::BrOnObject_A:",
          "1031:     case Js::OpCode::BrOnClassConstructor:",
          "1032:     case Js::OpCode::BrOnBaseConstructorKind:",
          "1033:         Assert(!opndSrc1->IsFloat64());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1031:     case Js::OpCode::BrOnObjectOrNull_A:",
          "1032:     case Js::OpCode::BrOnConstructor_A:",
          "",
          "---------------"
        ],
        "lib/Backend/ServerScriptContext.cpp||lib/Backend/ServerScriptContext.cpp": [
          "File: lib/Backend/ServerScriptContext.cpp -> lib/Backend/ServerScriptContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     m_globalThisAddr = globalThis;",
          "217: }",
          "219: intptr_t",
          "220: ServerScriptContext::GetNumberAllocatorAddr() const",
          "221: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: intptr_t",
          "220: ServerScriptContext::GetObjectPrototypeAddr() const",
          "221: {",
          "222:     return m_contextData.objectPrototypeAddr;",
          "223: }",
          "225: intptr_t",
          "226: ServerScriptContext::GetFunctionPrototypeAddr() const",
          "227: {",
          "228:     return m_contextData.functionPrototypeAddr;",
          "229: }",
          "",
          "---------------"
        ],
        "lib/Backend/ServerScriptContext.h||lib/Backend/ServerScriptContext.h": [
          "File: lib/Backend/ServerScriptContext.h -> lib/Backend/ServerScriptContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     virtual intptr_t GetLibraryAddr() const override;",
          "46:     virtual intptr_t GetGlobalObjectAddr() const override;",
          "47:     virtual intptr_t GetGlobalObjectThisAddr() const override;",
          "48:     virtual intptr_t GetNumberAllocatorAddr() const override;",
          "49:     virtual intptr_t GetRecyclerAddr() const override;",
          "50:     virtual bool GetRecyclerAllowNativeCodeBumpAllocation() const override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     virtual intptr_t GetObjectPrototypeAddr() const override;",
          "49:     virtual intptr_t GetFunctionPrototypeAddr() const override;",
          "",
          "---------------"
        ],
        "lib/Backend/arm/LowerMD.cpp||lib/Backend/arm/LowerMD.cpp": [
          "File: lib/Backend/arm/LowerMD.cpp -> lib/Backend/arm/LowerMD.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2597:         case Js::OpCode::BrOnNotEmpty:",
          "2598:         case Js::OpCode::BrNotNull_A:",
          "2599:         case Js::OpCode::BrOnObject_A:",
          "2600:         case Js::OpCode::BrOnClassConstructor:",
          "2601:         case Js::OpCode::BrOnBaseConstructorKind:",
          "2602:             Assert(!opndSrc1->IsFloat64());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2600:         case Js::OpCode::BrOnObjectOrNull_A:",
          "2601:         case Js::OpCode::BrOnConstructor_A:",
          "",
          "---------------"
        ],
        "lib/Backend/arm64/LowerMD.cpp||lib/Backend/arm64/LowerMD.cpp": [
          "File: lib/Backend/arm64/LowerMD.cpp -> lib/Backend/arm64/LowerMD.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2398:         case Js::OpCode::BrOnNotEmpty:",
          "2399:         case Js::OpCode::BrNotNull_A:",
          "2400:         case Js::OpCode::BrOnObject_A:",
          "2401:         case Js::OpCode::BrOnClassConstructor:",
          "2402:         case Js::OpCode::BrOnBaseConstructorKind:",
          "2403:             Assert(!opndSrc1->IsFloat64());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2401:         case Js::OpCode::BrOnObjectOrNull_A:",
          "2402:         case Js::OpCode::BrOnConstructor_A:",
          "",
          "---------------"
        ],
        "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h": [
          "File: lib/JITIDL/JITTypes.h -> lib/JITIDL/JITTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:     CHAKRA_PTR charStringCacheAddr;",
          "388:     CHAKRA_PTR libraryAddr;",
          "389:     CHAKRA_PTR globalObjectAddr;",
          "390:     CHAKRA_PTR sideEffectsAddr;",
          "391:     CHAKRA_PTR arraySetElementFastPathVtableAddr;",
          "392:     CHAKRA_PTR intArraySetElementFastPathVtableAddr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     CHAKRA_PTR objectPrototypeAddr;",
          "391:     CHAKRA_PTR functionPrototypeAddr;",
          "",
          "---------------"
        ],
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4992:             {",
          "4993:                 pnodeExpr = ParseExpr<buildAST>(koplCma, nullptr/*pfCantAssign*/, TRUE/*fAllowIn*/, FALSE/*fAllowEllipsis*/, pFullNameHint, &fullNameHintLength, &shortNameOffset);",
          "4996:                 {",
          "4999:                     {",
          "5000:                         funcNode->SetHasComputedName();",
          "5001:                     }",
          "5003:                 }",
          "5004:             }",
          "5005: #if DEBUG",
          "",
          "[Removed Lines]",
          "4995:                 if (pnodeExpr && pnodeExpr->nop == knopFncDecl)",
          "4997:                     ParseNodeFnc* funcNode = pnodeExpr->AsParseNodeFnc();",
          "4998:                     if (isComputedName)",
          "5002:                     funcNode->SetHasHomeObj();",
          "",
          "[Added Lines]",
          "4995:                 ParseNodeFnc* funcNode = nullptr;",
          "4996:                 if (pnodeExpr)",
          "4998:                     if (pnodeExpr->nop == knopFncDecl)",
          "4999:                     {",
          "5000:                         funcNode = pnodeExpr->AsParseNodeFnc();",
          "5001:                         funcNode->SetHasHomeObj();",
          "5002:                     }",
          "5003:                     else if (pnodeExpr->nop == knopClassDecl)",
          "5004:                     {",
          "5005:                         funcNode = pnodeExpr->AsParseNodeClass()->pnodeConstructor;",
          "5006:                     }",
          "5007:                     if (funcNode && funcNode->pnodeName == nullptr && isComputedName)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7158:     pnodeFnc = CreateAllowDeferNodeForOpT<knopFncDecl>();",
          "7159:     pnodeFnc->SetNested(NULL != m_currentNodeFunc);",
          "7160:     pnodeFnc->SetStrictMode();",
          "7162:     pnodeFnc->SetIsMethod(TRUE);",
          "7163:     pnodeFnc->SetIsClassMember(TRUE);",
          "7164:     pnodeFnc->SetIsClassConstructor(TRUE);",
          "7165:     pnodeFnc->SetIsBaseClassConstructor(!extends);",
          "7166:     pnodeFnc->SetHasNonThisStmt();",
          "7167:     pnodeFnc->SetIsGeneratedDefault(TRUE);",
          "7169:     pnodeFnc->SetHasHomeObj();",
          "7170:     pnodeFnc->SetHomeObjLocation(Js::Constants::NoRegister);",
          "",
          "[Removed Lines]",
          "7161:     pnodeFnc->SetDeclaration(TRUE);",
          "7168:     pnodeFnc->SetHasComputedName();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7845:     ParseNodePtr pnodeExtends = nullptr;",
          "7846:     ParseNodePtr pnodeMembers = nullptr;",
          "7847:     ParseNodePtr *lastMemberNodeRef = nullptr;",
          "7850:     uint32 nameHintLength = pHintLength ? *pHintLength : 0;",
          "7851:     uint32 nameHintOffset = pShortNameOffset ? *pShortNameOffset : 0;",
          "",
          "[Removed Lines]",
          "7848:     ParseNodePtr pnodeStaticMembers = nullptr;",
          "7849:     ParseNodePtr *lastStaticMemberNodeRef = nullptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8063:             pnodeConstructor->hintOffset = constructorShortNameHintOffset;",
          "8064:             pnodeConstructor->pid = pnodeName && pnodeName->pid ? pnodeName->pid : wellKnownPropertyPids.constructor;",
          "8065:             pnodeConstructor->SetHasNonThisStmt();",
          "8067:             pnodeConstructor->SetHasHomeObj();",
          "8068:         }",
          "8069:         else",
          "",
          "[Removed Lines]",
          "8066:             pnodeConstructor->SetHasComputedName();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8173:                 pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintOffset = memberNameOffset;",
          "8174:                 pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc()->pid = memberPid; // Short name",
          "8177:             }",
          "8178:         }",
          "8179:     }",
          "",
          "[Removed Lines]",
          "8176:                 AddToNodeList(isStatic ? &pnodeStaticMembers : &pnodeMembers, isStatic ? &lastStaticMemberNodeRef : &lastMemberNodeRef, pnodeMember);",
          "",
          "[Added Lines]",
          "8179:                 AddToNodeList(&pnodeMembers, &lastMemberNodeRef, pnodeMember);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8228:         pnodeClass->pnodeConstructor = pnodeConstructor;",
          "8229:         pnodeClass->pnodeExtends = pnodeExtends;",
          "8230:         pnodeClass->pnodeMembers = pnodeMembers;",
          "8232:         pnodeClass->isDefaultModuleExport = false;",
          "8233:     }",
          "8234:     FinishParseBlock(pnodeBlock);",
          "",
          "[Removed Lines]",
          "8231:         pnodeClass->pnodeStaticMembers = pnodeStaticMembers;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "14371:         PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeConstructor, indentAmt + INDENT_SIZE);",
          "14372:         PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeMembers, indentAmt + INDENT_SIZE);",
          "14374:         break;",
          "14375:     case knopStrTemplate:",
          "14376:         Indent(indentAmt);",
          "",
          "[Removed Lines]",
          "14373:         PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeStaticMembers, indentAmt + INDENT_SIZE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Parser/pnodewalk.h||lib/Parser/pnodewalk.h": [
          "File: lib/Parser/pnodewalk.h -> lib/Parser/pnodewalk.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:         if (!ContinueWalk(result)) return result;",
          "409:         result = WalkList(pnode, pnode->pnodeMembers, context);",
          "413:         return result;",
          "414:     }",
          "",
          "[Removed Lines]",
          "410:         if (!ContinueWalk(result)) return result;",
          "412:         result = WalkList(pnode, pnode->pnodeStaticMembers, context);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Parser/ptree.h||lib/Parser/ptree.h": [
          "File: lib/Parser/ptree.h -> lib/Parser/ptree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     ParseNodeBlock * pnodeBlock;",
          "716:     ParseNodeFnc * pnodeConstructor;",
          "717:     ParseNodePtr pnodeMembers;",
          "719:     ParseNodePtr pnodeExtends;",
          "721:     bool isDefaultModuleExport;",
          "",
          "[Removed Lines]",
          "718:     ParseNodePtr pnodeStaticMembers;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp": [
          "File: lib/Runtime/Base/ScriptContext.cpp -> lib/Runtime/Base/ScriptContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5366:         contextData.charStringCacheAddr = (intptr_t)&GetLibrary()->GetCharStringCache();",
          "5367:         contextData.libraryAddr = (intptr_t)GetLibrary();",
          "5368:         contextData.globalObjectAddr = (intptr_t)GetLibrary()->GetGlobalObject();",
          "5369:         contextData.builtinFunctionsBaseAddr = (intptr_t)GetLibrary()->GetBuiltinFunctions();",
          "5370:         contextData.sideEffectsAddr = optimizationOverrides.GetAddressOfSideEffects();",
          "5371:         contextData.arraySetElementFastPathVtableAddr = (intptr_t)optimizationOverrides.GetAddressOfArraySetElementFastPathVtable();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5369:         contextData.objectPrototypeAddr = (intptr_t)GetLibrary()->GetObjectPrototype();",
          "5370:         contextData.functionPrototypeAddr = (intptr_t)GetLibrary()->GetFunctionPrototype();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5578:         return (intptr_t)GetLibrary()->GetGlobalObject()->ToThis();",
          "5579:     }",
          "5581:     intptr_t ScriptContext::GetNumberAllocatorAddr() const",
          "5582:     {",
          "5583:         return (intptr_t)&numberAllocator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5583:     intptr_t ScriptContext::GetObjectPrototypeAddr() const",
          "5584:     {",
          "5585:         return (intptr_t)GetLibrary()->GetObjectPrototype();",
          "5586:     }",
          "5588:     intptr_t ScriptContext::GetFunctionPrototypeAddr() const",
          "5589:     {",
          "5590:         return (intptr_t)GetLibrary()->GetFunctionPrototype();",
          "5591:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ScriptContext.h||lib/Runtime/Base/ScriptContext.h": [
          "File: lib/Runtime/Base/ScriptContext.h -> lib/Runtime/Base/ScriptContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1848:         virtual intptr_t GetLibraryAddr() const override;",
          "1849:         virtual intptr_t GetGlobalObjectAddr() const override;",
          "1850:         virtual intptr_t GetGlobalObjectThisAddr() const override;",
          "1851:         virtual intptr_t GetNumberAllocatorAddr() const override;",
          "1852:         virtual intptr_t GetRecyclerAddr() const override;",
          "1853:         virtual bool GetRecyclerAllowNativeCodeBumpAllocation() const override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1851:         virtual intptr_t GetObjectPrototypeAddr() const;",
          "1852:         virtual intptr_t GetFunctionPrototypeAddr() const;",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ScriptContextInfo.h||lib/Runtime/Base/ScriptContextInfo.h": [
          "File: lib/Runtime/Base/ScriptContextInfo.h -> lib/Runtime/Base/ScriptContextInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     virtual intptr_t GetLibraryAddr() const = 0;",
          "34:     virtual intptr_t GetGlobalObjectAddr() const = 0;",
          "35:     virtual intptr_t GetGlobalObjectThisAddr() const = 0;",
          "36:     virtual intptr_t GetNumberAllocatorAddr() const = 0;",
          "37:     virtual intptr_t GetRecyclerAddr() const = 0;",
          "38:     virtual bool GetRecyclerAllowNativeCodeBumpAllocation() const = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     virtual intptr_t GetObjectPrototypeAddr() const = 0;",
          "37:     virtual intptr_t GetFunctionPrototypeAddr() const = 0;",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeDumper.cpp||lib/Runtime/ByteCode/ByteCodeDumper.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeDumper.cpp -> lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1285:         DumpReg(data->R3);",
          "1286:     }",
          "1288:     template <class T> void",
          "1289:     ByteCodeDumper::DumpReg2B1(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1290:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1288:     template <class T> void",
          "1289:     ByteCodeDumper::DumpReg2U(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1290:     {",
          "1291:         switch (op)",
          "1292:         {",
          "1293:             case Js::OpCode::InitBaseClass:",
          "1294:             {",
          "1295:                 FunctionProxy* pfuncActual = dumpFunction->GetNestedFunctionProxy((uint)data->SlotIndex);",
          "1296:                 Output::Print(_u(\" R%d, R%d = %s()\"), data->R0, data->R1, pfuncActual->EnsureDeserialized()->GetDisplayName());",
          "1297:                 break;",
          "1298:             }",
          "1300:             default:",
          "1301:                 DumpReg(data->R0);",
          "1302:                 DumpReg(data->R1);",
          "1303:                 break;",
          "1304:         }",
          "1305:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:         DumpI4(data->B3);",
          "1303:     }",
          "1305:     template <class T> void",
          "1306:     ByteCodeDumper::DumpReg5(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1307:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1324:     template <class T> void",
          "1325:     ByteCodeDumper::DumpReg3U(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1326:     {",
          "1327:         switch (op)",
          "1328:         {",
          "1329:             case Js::OpCode::InitInnerBaseClass:",
          "1330:             {",
          "1331:                 FunctionProxy* pfuncActual = dumpFunction->GetNestedFunctionProxy((uint)data->SlotIndex);",
          "1332:                 Output::Print(_u(\" R%d, R%d = %s(), env:R%d\"), data->R0, data->R1, pfuncActual->EnsureDeserialized()->GetDisplayName(), data->R2);",
          "1333:                 break;",
          "1334:             }",
          "1336:             default:",
          "1337:                 AssertMsg(false, \"Unknown Reg3U opcode\");",
          "1338:                 break;",
          "1339:         }",
          "1340:     }",
          "1342:     template <class T> void",
          "1343:     ByteCodeDumper::DumpReg4U(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1344:     {",
          "1345:         switch (op)",
          "1346:         {",
          "1347:             case Js::OpCode::InitClass:",
          "1348:             {",
          "1349:                 FunctionProxy* pfuncActual = dumpFunction->GetNestedFunctionProxy((uint)data->SlotIndex);",
          "1350:                 Output::Print(_u(\" R%d, R%d = R%d, R%d, %s()\"), data->R0, data->R1, data->R2, data->R3,",
          "1351:                     pfuncActual->EnsureDeserialized()->GetDisplayName());",
          "1352:                 break;",
          "1353:             }",
          "1355:             default:",
          "1356:                 AssertMsg(false, \"Unknown Reg4U opcode\");",
          "1357:                 break;",
          "1358:         }",
          "1359:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1312:         DumpReg(data->R4);",
          "1313:     }",
          "1315:     void",
          "1316:     ByteCodeDumper::DumpW1(OpCode op, const unaligned OpLayoutW1 * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1317:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1371:     template <class T> void",
          "1372:     ByteCodeDumper::DumpReg5U(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1373:     {",
          "1374:         switch (op)",
          "1375:         {",
          "1376:             case Js::OpCode::InitInnerClass:",
          "1377:             {",
          "1378:                 FunctionProxy* pfuncActual = dumpFunction->GetNestedFunctionProxy((uint)data->SlotIndex);",
          "1379:                 Output::Print(_u(\" R%d, R%d = R%d, R%d, %s(), env:R%d\"), data->R0, data->R1, data->R2, data->R3,",
          "1380:                     pfuncActual->EnsureDeserialized()->GetDisplayName(), data->R4);",
          "1381:                 break;",
          "1382:             }",
          "1384:             default:",
          "1385:                 AssertMsg(false, \"Unknown Reg5U opcode\");",
          "1386:                 break;",
          "1387:         }",
          "1388:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504:         }",
          "1505:     }",
          "1518: #ifdef BYTECODE_BRANCH_ISLAND",
          "1519:     void ByteCodeDumper::DumpBrLong(OpCode op, const unaligned OpLayoutBrLong* data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1520:     {",
          "",
          "[Removed Lines]",
          "1507:     template <class T>",
          "1508:     void ByteCodeDumper::DumpClass(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1509:     {",
          "1510:         DumpReg(data->Constructor);",
          "1511:         if (data->Extends != Js::Constants::NoRegister)",
          "1512:         {",
          "1513:             Output::Print(_u(\"extends\"));",
          "1514:             DumpReg((RegSlot)data->Extends);",
          "1515:         }",
          "1516:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1556:         DumpReg(data->R2);",
          "1557:     }",
          "1559:     void ByteCodeDumper::DumpBrProperty(OpCode op, const unaligned OpLayoutBrProperty * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1560:     {",
          "1561:         DumpOffset(data->RelativeJumpOffset, reader);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1623:     template <class T>",
          "1624:     void ByteCodeDumper::DumpBrReg3(OpCode op, const unaligned T * data, FunctionBody * dumpFunction, ByteCodeReader& reader)",
          "1625:     {",
          "1626:         switch (op)",
          "1627:         {",
          "1628:             case Js::OpCode::CheckExtends:",
          "1629:                 DumpOffset(data->RelativeJumpOffset, reader);",
          "1630:                 DumpReg(data->R0);",
          "1631:                 DumpReg(data->R1);",
          "1632:                 DumpReg(data->R2);",
          "1633:                 break;",
          "1635:             default:",
          "1636:                 AssertMsg(false, \"Unknown BrReg3 opcode\");",
          "1637:                 break;",
          "1638:         }",
          "1639:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "249: }",
          "251: bool ApplyEnclosesArgs(ParseNode* fncDecl, ByteCodeGenerator* byteCodeGenerator);",
          "253: void EmitBinaryOpnds(ParseNode* pnode1, ParseNode* pnode2, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot computedPropertyLocation = Js::Constants::NoRegister);",
          "254: bool IsExpressionStatement(ParseNode* stmt, const Js::ScriptContext *const scriptContext);",
          "255: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "",
          "[Removed Lines]",
          "252: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall = false, Js::RegSlot bindingNameLocation = Js::Constants::NoRegister, bool isTopLevel = false);",
          "",
          "[Added Lines]",
          "252: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall = false, bool isTopLevel = false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:         EndStatement(stmt);",
          "980:     }",
          "983:     if (funcInfo->IsTmpReg(stmt->location))",
          "984:     {",
          "985:         funcInfo->ReleaseLoc(stmt);",
          "",
          "[Removed Lines]",
          "982:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, Js::Constants::NoRegister/*computedPropertyLocation*/, true/*isTopLevel*/);",
          "",
          "[Added Lines]",
          "982:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, true/*isTopLevel*/);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8613:         byteCodeGenerator->forceStrictModeForClassComputedPropertyName = prevFlag;",
          "8616:         {",
          "8618:         }",
          "8630:     }",
          "8632:     if (nameNode->nop == knopComputedName)",
          "",
          "[Removed Lines]",
          "8615:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor() && exprNode->AsParseNodeFnc()->pnodeName == nullptr)",
          "8617:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
          "8620:     }",
          "8624:     Assert(isClassMember == (isObjectEmpty != nullptr));",
          "8625:     if (isClassMember && *isObjectEmpty)",
          "8626:     {",
          "8628:         int cacheId = funcInfo->FindOrAddInlineCacheId(parentNode->location, Js::PropertyIds::prototype, false, false);",
          "8629:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, objectLocation, parentNode->location, cacheId);",
          "",
          "[Added Lines]",
          "8615:         if (isFncDecl)",
          "8617:             if (exprNode->AsParseNodeFnc()->pnodeName == nullptr)",
          "8618:             {",
          "8619:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
          "8620:                 exprNode->AsParseNodeFnc()->SetHasComputedName();",
          "8621:             }",
          "8623:         else if (exprNode->nop == knopClassDecl)",
          "8624:         {",
          "8625:             if (exprNode->AsParseNodeClass()->pnodeName == nullptr)",
          "8626:             {",
          "8627:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
          "8628:                 exprNode->AsParseNodeClass()->pnodeConstructor->SetHasComputedName();",
          "8629:             }",
          "8630:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10500:     EmitIteratorValue(yieldStarNode->location, yieldStarNode->location, byteCodeGenerator, funcInfo);",
          "10501: }",
          "10503: void TrackIntConstantsOnGlobalUserObject(ByteCodeGenerator *byteCodeGenerator, bool isSymGlobalAndSingleAssignment, Js::PropertyId propertyId)",
          "10504: {",
          "10505:     if (isSymGlobalAndSingleAssignment)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10504: void EmitClass(ParseNodeClass * pnodeClass, ByteCodeGenerator * byteCodeGenerator, FuncInfo * funcInfo)",
          "10505: {",
          "10506:     funcInfo->AcquireLoc(pnodeClass);",
          "10508:     Assert(pnodeClass->pnodeConstructor);",
          "10509:     pnodeClass->pnodeConstructor->location = pnodeClass->location;",
          "10510:     Js::RegSlot protoLoc = funcInfo->AcquireTmpRegister();",
          "10511:     BeginEmitBlock(pnodeClass->pnodeBlock, byteCodeGenerator, funcInfo);",
          "10513:     Js::RegSlot frameDisplayLoc = funcInfo->frameDisplayRegister != Js::Constants::NoRegister ? funcInfo->frameDisplayRegister : funcInfo->GetEnvRegister();",
          "10514:     Js::RegSlot tmpFrameDisplayLoc = funcInfo->AcquireTmpRegister();",
          "10515:     frameDisplayLoc = byteCodeGenerator->PrependLocalScopes(frameDisplayLoc, tmpFrameDisplayLoc, funcInfo);",
          "10516:     if (frameDisplayLoc != tmpFrameDisplayLoc)",
          "10517:     {",
          "10518:         funcInfo->ReleaseTmpRegister(tmpFrameDisplayLoc);",
          "10519:     }",
          "10522:     if (pnodeClass->pnodeExtends)",
          "10523:     {",
          "10524:         Emit(pnodeClass->pnodeExtends, byteCodeGenerator, funcInfo, false);",
          "10526:         byteCodeGenerator->StartStatement(pnodeClass->pnodeExtends);",
          "10528:         Js::RegSlot ctorParentLoc = funcInfo->IsTmpReg(pnodeClass->pnodeExtends->location) ? pnodeClass->pnodeExtends->location : funcInfo->AcquireTmpRegister();",
          "10529:         Js::RegSlot protoParentLoc = funcInfo->AcquireTmpRegister();",
          "10531:         Js::ByteCodeLabel labelParentsFound = byteCodeGenerator->Writer()->DefineLabel();",
          "10532:         byteCodeGenerator->Writer()->BrReg3(Js::OpCode::CheckExtends, labelParentsFound, ctorParentLoc, protoParentLoc, pnodeClass->pnodeExtends->location);",
          "10533:         if (pnodeClass->pnodeExtends->location != ctorParentLoc)",
          "10534:         {",
          "10535:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, ctorParentLoc, pnodeClass->pnodeExtends->location);",
          "10536:         }",
          "10537:         uint cacheId = funcInfo->FindOrAddInlineCacheId(ctorParentLoc, Js::PropertyIds::prototype, false, false);",
          "10538:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld_ReuseLoc, protoParentLoc, ctorParentLoc, cacheId);",
          "10539:         byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrOnObjectOrNull_A, labelParentsFound, protoParentLoc);",
          "10540:         byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_InvalidPrototype));",
          "10541:         byteCodeGenerator->Writer()->MarkLabel(labelParentsFound);",
          "10542:         if (frameDisplayLoc == funcInfo->frameDisplayRegister || frameDisplayLoc  == funcInfo->GetEnvRegister())",
          "10543:         {",
          "10544:             byteCodeGenerator->Writer()->Reg4U(Js::OpCode::InitClass, pnodeClass->location, protoLoc, ctorParentLoc, protoParentLoc, pnodeClass->pnodeConstructor->nestedIndex);",
          "10545:         }",
          "10546:         else",
          "10547:         {",
          "10548:             byteCodeGenerator->Writer()->Reg5U(Js::OpCode::InitInnerClass, pnodeClass->location, protoLoc, ctorParentLoc, protoParentLoc, frameDisplayLoc, pnodeClass->pnodeConstructor->nestedIndex);",
          "10549:         }",
          "10551:         funcInfo->ReleaseTmpRegister(protoParentLoc);",
          "10552:         funcInfo->ReleaseTmpRegister(ctorParentLoc);",
          "10554:         byteCodeGenerator->EndStatement(pnodeClass->pnodeExtends);",
          "10555:     }",
          "10556:     else",
          "10557:     {",
          "10558:         if (frameDisplayLoc == funcInfo->frameDisplayRegister || frameDisplayLoc  == funcInfo->GetEnvRegister())",
          "10559:         {",
          "10560:             byteCodeGenerator->Writer()->Reg2U(Js::OpCode::InitBaseClass, pnodeClass->location, protoLoc, pnodeClass->pnodeConstructor->nestedIndex);",
          "10561:         }",
          "10562:         else",
          "10563:         {",
          "10564:             byteCodeGenerator->Writer()->Reg3U(Js::OpCode::InitInnerBaseClass, pnodeClass->location, protoLoc, frameDisplayLoc, pnodeClass->pnodeConstructor->nestedIndex);",
          "10565:         }",
          "10566:     }",
          "10568:     funcInfo->ReleaseTmpRegister(frameDisplayLoc);",
          "10571:     bool isObjectEmpty = true;",
          "10572:     ParseNode * pnodeMembers = pnodeClass->pnodeMembers;",
          "10573:     ParseNode * pnodeMember;",
          "10574:     ParseNodeFnc * pnodeMemberFnc;",
          "10575:     if (pnodeMembers != nullptr)",
          "10576:     {",
          "10577:         while (pnodeMembers->nop == knopList)",
          "10578:         {",
          "10579:             pnodeMember = pnodeMembers->AsParseNodeBin()->pnode1;",
          "10580:             pnodeMemberFnc = pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc();",
          "10581:             EmitMemberNode(pnodeMember, pnodeMemberFnc->IsStaticMember() ? pnodeClass->location : protoLoc, byteCodeGenerator, funcInfo, pnodeClass, /*useStore*/ false, &isObjectEmpty);",
          "10582:             pnodeMembers = pnodeMembers->AsParseNodeBin()->pnode2;",
          "10583:         }",
          "10584:         pnodeMemberFnc = pnodeMembers->AsParseNodeBin()->pnode2->AsParseNodeFnc();",
          "10585:         EmitMemberNode(pnodeMembers, pnodeMemberFnc->IsStaticMember() ? pnodeClass->location : protoLoc, byteCodeGenerator, funcInfo, pnodeClass, /*useStore*/ false, &isObjectEmpty);",
          "10586:     }",
          "10588:     funcInfo->ReleaseTmpRegister(protoLoc);",
          "10591:     if (pnodeClass->pnodeName)",
          "10592:     {",
          "10593:         Symbol * sym = pnodeClass->pnodeName->sym;",
          "10594:         sym->SetNeedDeclaration(false);",
          "10595:         byteCodeGenerator->EmitPropStore(pnodeClass->location, sym, nullptr, funcInfo, false, true);",
          "10596:     }",
          "10598:     EndEmitBlock(pnodeClass->pnodeBlock, byteCodeGenerator, funcInfo);",
          "10600:     if (pnodeClass->pnodeDeclName)",
          "10601:     {",
          "10602:         Symbol * sym = pnodeClass->pnodeDeclName->sym;",
          "10603:         sym->SetNeedDeclaration(false);",
          "10604:         byteCodeGenerator->EmitPropStore(pnodeClass->location, sym, nullptr, funcInfo, true, false);",
          "10605:     }",
          "10607:     if (pnodeClass->IsDefaultModuleExport())",
          "10608:     {",
          "10609:         byteCodeGenerator->EmitAssignmentToDefaultModuleExport(pnodeClass, funcInfo);",
          "10610:     }",
          "10611: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10633:     }",
          "10634: }",
          "10637: {",
          "10638:     if (pnode == nullptr)",
          "10639:     {",
          "",
          "[Removed Lines]",
          "10636: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall, Js::RegSlot bindingNameLocation, bool isTopLevel)",
          "",
          "[Added Lines]",
          "10746: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall, bool isTopLevel)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "11436:             byteCodeGenerator->DefineOneFunction(pnode->AsParseNodeFnc(), funcInfo, false);",
          "11437:         }",
          "11438:         break;",
          "11440:     case knopClassDecl:",
          "11516:         break;",
          "11518:     case knopStrTemplate:",
          "11519:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "11520:         EmitStringTemplate(pnode->AsParseNodeStrTemplate(), byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "11441:     {",
          "11442:         ParseNodeClass * pnodeClass = pnode->AsParseNodeClass();",
          "11443:         funcInfo->AcquireLoc(pnodeClass);",
          "11445:         Assert(pnodeClass->pnodeConstructor);",
          "11446:         pnodeClass->pnodeConstructor->location = pnodeClass->location;",
          "11448:         BeginEmitBlock(pnodeClass->pnodeBlock, byteCodeGenerator, funcInfo);",
          "11451:         if (pnodeClass->pnodeExtends)",
          "11452:         {",
          "11455:             Emit(pnodeClass->pnodeExtends, byteCodeGenerator, funcInfo, false);",
          "11456:         }",
          "11459:         Emit(pnodeClass->pnodeConstructor, byteCodeGenerator, funcInfo, false);",
          "11461:         if (bindingNameLocation != Js::Constants::NoRegister && !pnodeClass->pnodeConstructor->pnodeName)",
          "11462:         {",
          "11463:             Assert(pnodeClass->pnodeConstructor->HasComputedName());",
          "11464:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, pnodeClass->pnodeConstructor->location, bindingNameLocation);",
          "11465:         }",
          "11467:         if (pnodeClass->pnodeExtends)",
          "11468:         {",
          "11469:             byteCodeGenerator->StartStatement(pnodeClass->pnodeExtends);",
          "11470:             byteCodeGenerator->Writer()->InitClass(pnodeClass->location, pnodeClass->pnodeExtends->location);",
          "11471:             byteCodeGenerator->EndStatement(pnodeClass->pnodeExtends);",
          "11472:         }",
          "11473:         else",
          "11474:         {",
          "11475:             byteCodeGenerator->Writer()->InitClass(pnodeClass->location);",
          "11476:         }",
          "11478:         Js::RegSlot protoLoc = funcInfo->AcquireTmpRegister(); //register set if we have Instance Methods",
          "11479:         int cacheId = funcInfo->FindOrAddInlineCacheId(pnodeClass->location, Js::PropertyIds::prototype, false, false);",
          "11480:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, protoLoc, pnodeClass->location, cacheId);",
          "11483:         EmitClassInitializers(pnodeClass->pnodeStaticMembers, pnodeClass->location, byteCodeGenerator, funcInfo, pnode, /*isObjectEmpty*/ false);",
          "11486:         EmitClassInitializers(pnodeClass->pnodeMembers, protoLoc, byteCodeGenerator, funcInfo, pnode, /*isObjectEmpty*/ true);",
          "11487:         funcInfo->ReleaseTmpRegister(protoLoc);",
          "11490:         if (pnodeClass->pnodeName)",
          "11491:         {",
          "11492:             Symbol * sym = pnodeClass->pnodeName->sym;",
          "11493:             sym->SetNeedDeclaration(false);",
          "11494:             byteCodeGenerator->EmitPropStore(pnodeClass->location, sym, nullptr, funcInfo, false, true);",
          "11495:         }",
          "11497:         EndEmitBlock(pnodeClass->pnodeBlock, byteCodeGenerator, funcInfo);",
          "11499:         if (pnodeClass->pnodeExtends)",
          "11500:         {",
          "11501:             funcInfo->ReleaseLoc(pnodeClass->pnodeExtends);",
          "11502:         }",
          "11504:         if (pnodeClass->pnodeDeclName)",
          "11505:         {",
          "11506:             Symbol * sym = pnodeClass->pnodeDeclName->sym;",
          "11507:             sym->SetNeedDeclaration(false);",
          "11508:             byteCodeGenerator->EmitPropStore(pnodeClass->location, sym, nullptr, funcInfo, true, false);",
          "11509:         }",
          "11511:         if (pnodeClass->IsDefaultModuleExport())",
          "11512:         {",
          "11513:             byteCodeGenerator->EmitAssignmentToDefaultModuleExport(pnodeClass, funcInfo);",
          "11514:         }",
          "11517:     }",
          "",
          "[Added Lines]",
          "11552:         EmitClass(pnode->AsParseNodeClass(), byteCodeGenerator, funcInfo);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeGenerator.cpp||lib/Runtime/ByteCode/ByteCodeGenerator.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeGenerator.cpp -> lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:         Visit(pnode->AsParseNodeClass()->pnodeExtends, byteCodeGenerator, prefix, postfix);",
          "311:         Visit(pnode->AsParseNodeClass()->pnodeName, byteCodeGenerator, prefix, postfix);",
          "313:         Visit(pnode->AsParseNodeClass()->pnodeConstructor, byteCodeGenerator, prefix, postfix);",
          "314:         Visit(pnode->AsParseNodeClass()->pnodeMembers, byteCodeGenerator, prefix, postfix);",
          "315:         EndVisitBlock(pnode->AsParseNodeClass()->pnodeBlock, byteCodeGenerator);",
          "",
          "[Removed Lines]",
          "312:         Visit(pnode->AsParseNodeClass()->pnodeStaticMembers, byteCodeGenerator, prefix, postfix);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeSerializer.cpp||lib/Runtime/ByteCode/ByteCodeSerializer.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeSerializer.cpp -> lib/Runtime/ByteCode/ByteCodeSerializer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1053:                 DEFAULT_LAYOUT(Empty);",
          "1054:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg1);",
          "1055:                 DEFAULT_LAYOUT_WITH_ONEBYTE_AND_PROFILED(Reg2);",
          "1056:                 DEFAULT_LAYOUT_WITH_ONEBYTE_AND_PROFILED(Reg3);",
          "1057:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg4);",
          "1058:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg5);",
          "1059:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg3C);",
          "1060:                 DEFAULT_LAYOUT_WITH_ONEBYTE_AND_PROFILED(Arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1056:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg2U);",
          "1058:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg3U);",
          "1060:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg4U);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1067:                 DEFAULT_LAYOUT_WITH_ONEBYTE(BrReg1);",
          "1068:                 DEFAULT_LAYOUT_WITH_ONEBYTE(BrReg1Unsigned1);",
          "1069:                 DEFAULT_LAYOUT_WITH_ONEBYTE(BrReg2);",
          "1070:                 DEFAULT_LAYOUT(StartCall);",
          "1071:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Profiled2CallI);",
          "1072:                 DEFAULT_LAYOUT_WITH_ONEBYTE_AND_PROFILED(CallI);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1073:                 DEFAULT_LAYOUT_WITH_ONEBYTE(BrReg3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1089:                 DEFAULT_LAYOUT_WITH_ONEBYTE(ElementPIndexed);",
          "1090:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg2B1);",
          "1091:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Reg3B1);",
          "1093:                 DEFAULT_LAYOUT_WITH_ONEBYTE(ElementU);",
          "1094:                 DEFAULT_LAYOUT_WITH_ONEBYTE(ElementRootU);",
          "1095:                 DEFAULT_LAYOUT_WITH_ONEBYTE(ElementScopedC);",
          "",
          "[Removed Lines]",
          "1092:                 DEFAULT_LAYOUT_WITH_ONEBYTE(Class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeWriter.cpp||lib/Runtime/ByteCode/ByteCodeWriter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeWriter.cpp -> lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:         MULTISIZE_LAYOUT_WRITE(Reg3C, op, R0, R1, R2, cacheId);",
          "483:     }",
          "485:     template <typename SizePolicy>",
          "486:     bool ByteCodeWriter::TryWriteReg4(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3)",
          "487:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485:     template <typename SizePolicy>",
          "486:     bool ByteCodeWriter::TryWriteReg2U(OpCode op, RegSlot R0, RegSlot R1, uint index)",
          "487:     {",
          "488:         OpLayoutT_Reg2U<SizePolicy> layout;",
          "489:         if (SizePolicy::Assign(layout.R0, R0) && SizePolicy::Assign(layout.R1, R1) && SizePolicy::Assign(layout.SlotIndex, index))",
          "490:         {",
          "491:             m_byteCodeData.EncodeT<SizePolicy::LayoutEnum>(op, &layout, sizeof(layout), this);",
          "492:             return true;",
          "493:         }",
          "494:         return false;",
          "495:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:         MULTISIZE_LAYOUT_WRITE(Reg4, op, R0, R1, R2, R3);",
          "510:     }",
          "512:     template <typename SizePolicy>",
          "513:     bool ByteCodeWriter::TryWriteReg2B1(OpCode op, RegSlot R0, RegSlot R1, uint8 B2)",
          "514:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:     template <typename SizePolicy>",
          "525:     bool ByteCodeWriter::TryWriteReg4U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, uint index)",
          "526:     {",
          "527:         OpLayoutT_Reg4U<SizePolicy> layout;",
          "528:         if (SizePolicy::Assign(layout.R0, R0) && SizePolicy::Assign(layout.R1, R1) && SizePolicy::Assign(layout.R2, R2)",
          "529:             && SizePolicy::Assign(layout.R3, R3) && SizePolicy::Assign(layout.SlotIndex, index))",
          "530:         {",
          "531:             m_byteCodeData.EncodeT<SizePolicy::LayoutEnum>(op, &layout, sizeof(layout), this);",
          "532:             return true;",
          "533:         }",
          "534:         return false;",
          "535:     }",
          "537:     void ByteCodeWriter::Reg4U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, uint slotIndex)",
          "538:     {",
          "539:         CheckOpen();",
          "540:         CheckOp(op, OpLayoutType::Reg4U);",
          "541:         Assert(OpCodeAttr::HasMultiSizeLayout(op));",
          "543:         R0 = ConsumeReg(R0);",
          "544:         R1 = ConsumeReg(R1);",
          "545:         R2 = ConsumeReg(R2);",
          "546:         R3 = ConsumeReg(R3);",
          "548:         MULTISIZE_LAYOUT_WRITE(Reg4U, op, R0, R1, R2, R3, slotIndex);",
          "549:     }",
          "551:     template <typename SizePolicy>",
          "552:     bool ByteCodeWriter::TryWriteReg5U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, RegSlot R4, uint index)",
          "553:     {",
          "554:         OpLayoutT_Reg5U<SizePolicy> layout;",
          "555:         if (SizePolicy::Assign(layout.R0, R0) && SizePolicy::Assign(layout.R1, R1) && SizePolicy::Assign(layout.R2, R2)",
          "556:             && SizePolicy::Assign(layout.R3, R3) && SizePolicy::Assign(layout.R4, R4) && SizePolicy::Assign(layout.SlotIndex, index))",
          "557:         {",
          "558:             m_byteCodeData.EncodeT<SizePolicy::LayoutEnum>(op, &layout, sizeof(layout), this);",
          "559:             return true;",
          "560:         }",
          "561:         return false;",
          "562:     }",
          "564:     void ByteCodeWriter::Reg5U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, RegSlot R4, uint slotIndex)",
          "565:     {",
          "566:         CheckOpen();",
          "567:         CheckOp(op, OpLayoutType::Reg5U);",
          "568:         Assert(OpCodeAttr::HasMultiSizeLayout(op));",
          "570:         R0 = ConsumeReg(R0);",
          "571:         R1 = ConsumeReg(R1);",
          "572:         R2 = ConsumeReg(R2);",
          "573:         R3 = ConsumeReg(R3);",
          "574:         R4 = ConsumeReg(R4);",
          "576:         MULTISIZE_LAYOUT_WRITE(Reg5U, op, R0, R1, R2, R3, R4, slotIndex);",
          "577:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "807:         MULTISIZE_LAYOUT_WRITE(BrReg2, op, labelID, R1, R2);",
          "808:     }",
          "810:     void ByteCodeWriter::BrProperty(OpCode op, ByteCodeLabel labelID, RegSlot instance, PropertyIdIndexType index)",
          "811:     {",
          "812:         CheckOpen();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     template <typename SizePolicy>",
          "878:     bool ByteCodeWriter::TryWriteBrReg3(OpCode op, ByteCodeLabel labelID, RegSlot R0, RegSlot R1, RegSlot R2)",
          "879:     {",
          "880:         OpLayoutT_BrReg3<SizePolicy> layout;",
          "881:         if (SizePolicy::Assign(layout.R0, R0) && SizePolicy::Assign(layout.R1, R1) && SizePolicy::Assign(layout.R2, R2))",
          "882:         {",
          "883:             size_t const offsetOfRelativeJumpOffsetFromEnd = sizeof(OpLayoutT_BrReg3<SizePolicy>) - offsetof(OpLayoutT_BrReg3<SizePolicy>, RelativeJumpOffset);",
          "884:             layout.RelativeJumpOffset = offsetOfRelativeJumpOffsetFromEnd;",
          "885:             m_byteCodeData.EncodeT<SizePolicy::LayoutEnum>(op, &layout, sizeof(layout), this);",
          "886:             AddJumpOffset(op, labelID, offsetOfRelativeJumpOffsetFromEnd);",
          "887:             return true;",
          "888:         }",
          "889:         return false;",
          "890:     }",
          "892:     void ByteCodeWriter::BrReg3(OpCode op, ByteCodeLabel labelID, RegSlot R0, RegSlot R1, RegSlot R2)",
          "893:     {",
          "894:         CheckOpen();",
          "895:         CheckOp(op, OpLayoutType::BrReg3);",
          "896:         Assert(OpCodeAttr::HasMultiSizeLayout(op));",
          "897:         CheckLabel(labelID);",
          "899:         R0 = ConsumeReg(R0);",
          "900:         R1 = ConsumeReg(R1);",
          "901:         R2 = ConsumeReg(R2);",
          "903:         MULTISIZE_LAYOUT_WRITE(BrReg3, op, labelID, R0, R1, R2);",
          "904:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2199:         MULTISIZE_LAYOUT_WRITE(ElementScopedC2, op, value, propertyIdIndex, value2);",
          "2200:     }",
          "2202:     template <typename SizePolicy>",
          "2204:     {",
          "2207:         {",
          "2208:             m_byteCodeData.EncodeT<SizePolicy::LayoutEnum>(op, &layout, sizeof(layout), this);",
          "2209:             return true;",
          "",
          "[Removed Lines]",
          "2203:     bool ByteCodeWriter::TryWriteClass(OpCode op, RegSlot constructor, RegSlot extends)",
          "2205:         OpLayoutT_Class<SizePolicy> layout;",
          "2206:         if (SizePolicy::Assign(layout.Constructor, constructor) && SizePolicy::Assign(layout.Extends, extends))",
          "",
          "[Added Lines]",
          "2298:     void ByteCodeWriter::Reg2U(OpCode op, RegSlot R0, RegSlot R1, uint index)",
          "2299:     {",
          "2300:         Assert(OpCodeAttr::HasMultiSizeLayout(op));",
          "2301:         CheckOp(op, OpLayoutType::Reg2U);",
          "2302:         CheckOpen();",
          "2304:         R0 = ConsumeReg(R0);",
          "2305:         R1 = ConsumeReg(R1);",
          "2307:         MULTISIZE_LAYOUT_WRITE(Reg2U, op, R0, R1, index);",
          "2308:     }",
          "2311:     bool ByteCodeWriter::TryWriteReg3U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint index)",
          "2313:         OpLayoutT_Reg3U<SizePolicy> layout;",
          "2314:         if (SizePolicy::Assign(layout.R0, R0) && SizePolicy::Assign(layout.R1, R1) && SizePolicy::Assign(layout.R2, R2) && SizePolicy::Assign(layout.SlotIndex, index))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2211:         return false;",
          "2212:     }",
          "2215:     {",
          "2218:         CheckOpen();",
          "2228:     }",
          "2230:     void ByteCodeWriter::NewFunction(RegSlot destinationRegister, uint index, bool isGenerator, RegSlot homeObjLocation)",
          "",
          "[Removed Lines]",
          "2214:     void ByteCodeWriter::InitClass(RegSlot constructor, RegSlot extends)",
          "2216:         Assert(OpCodeAttr::HasMultiSizeLayout(Js::OpCode::InitClass));",
          "2220:         constructor = ConsumeReg(constructor);",
          "2222:         if (extends != Js::Constants::NoRegister)",
          "2223:         {",
          "2224:             extends = ConsumeReg(extends);",
          "2225:         }",
          "2227:         MULTISIZE_LAYOUT_WRITE(Class, Js::OpCode::InitClass, constructor, extends);",
          "",
          "[Added Lines]",
          "2322:     void ByteCodeWriter::Reg3U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint index)",
          "2324:         Assert(OpCodeAttr::HasMultiSizeLayout(op));",
          "2325:         CheckOp(op, OpLayoutType::Reg3U);",
          "2328:         R0 = ConsumeReg(R0);",
          "2329:         R1 = ConsumeReg(R1);",
          "2330:         R2 = ConsumeReg(R2);",
          "2332:         MULTISIZE_LAYOUT_WRITE(Reg3U, op, R0, R1, R2, index);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeWriter.h||lib/Runtime/ByteCode/ByteCodeWriter.h": [
          "File: lib/Runtime/ByteCode/ByteCodeWriter.h -> lib/Runtime/ByteCode/ByteCodeWriter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         void Empty(OpCode op);",
          "243:         void Reg1(OpCode op, RegSlot R0);",
          "244:         void Reg2(OpCode op, RegSlot R0, RegSlot R1);",
          "245:         void Reg3(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2);",
          "246:         void Reg3C(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint cacheId);",
          "247:         void Reg4(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3);",
          "248:         void Reg1Unsigned1(OpCode op, RegSlot R0, uint C1);",
          "249:         void Reg2B1(OpCode op, RegSlot R0, RegSlot R1, uint8 B3);",
          "250:         void Reg3B1(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint8 B3);",
          "251:         void Reg5(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, RegSlot R4);",
          "252:         void ArgIn0(RegSlot arg);",
          "253:         template <bool isVar>",
          "254:         void ArgOut(ArgSlot arg, RegSlot reg, ProfileId callSiteId, bool emitProfiledArgout);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:         void Reg2U(OpCode op, RegSlot R0, RegSlot R1, uint slotIndex);",
          "247:         void Reg3U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint slotIndex);",
          "250:         void Reg4U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, uint slotIndex);",
          "255:         void Reg5U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, RegSlot R4, uint slotIndex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:         void BrReg1Unsigned1(OpCode op, ByteCodeLabel labelID, RegSlot R1, uint C1);",
          "263:         void BrS(OpCode op, ByteCodeLabel labelID, byte val);",
          "264:         void BrReg2(OpCode op, ByteCodeLabel labelID, RegSlot R1, RegSlot R2);",
          "265:         void BrProperty(OpCode op, ByteCodeLabel labelID, RegSlot R1, PropertyIdIndexType propertyIdIndex);",
          "266:         void BrLocalProperty(OpCode op, ByteCodeLabel labelID, PropertyIdIndexType propertyIdIndex);",
          "267:         void BrEnvProperty(OpCode op, ByteCodeLabel labelID, PropertyIdIndexType propertyIdIndex, int32 slotIndex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:         void BrReg3(OpCode op, ByteCodeLabel labelID, RegSlot R0, RegSlot R1, RegSlot R2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "296:         template <typename SizePolicy> bool TryWriteReg1(OpCode op, RegSlot R0);",
          "297:         template <typename SizePolicy> bool TryWriteReg2(OpCode op, RegSlot R0, RegSlot R1);",
          "298:         template <typename SizePolicy> bool TryWriteReg3(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2);",
          "299:         template <typename SizePolicy> bool TryWriteReg3C(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, CacheId cacheId);",
          "300:         template <typename SizePolicy> bool TryWriteReg4(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3);",
          "301:         template <typename SizePolicy> bool TryWriteReg2B1(OpCode op, RegSlot R0, RegSlot R1, uint8 B2);",
          "302:         template <typename SizePolicy> bool TryWriteReg3B1(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint8 B3);",
          "303:         template <typename SizePolicy> bool TryWriteReg5(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, RegSlot R4);",
          "304:         template <typename SizePolicy> bool TryWriteUnsigned1(OpCode op, uint C1);",
          "305:         template <typename SizePolicy> bool TryWriteArg(OpCode op, ArgSlot arg, RegSlot reg);",
          "306:         template <typename SizePolicy> bool TryWriteArgNoSrc(OpCode op, ArgSlot arg);",
          "307:         template <typename SizePolicy> bool TryWriteBrReg1(OpCode op, ByteCodeLabel labelID, RegSlot R1);",
          "308:         template <typename SizePolicy> bool TryWriteBrReg1Unsigned1(OpCode op, ByteCodeLabel labelID, RegSlot R1, uint C2);",
          "309:         template <typename SizePolicy> bool TryWriteBrReg2(OpCode op, ByteCodeLabel labelID, RegSlot R1, RegSlot R2);",
          "310:         template <typename SizePolicy> bool TryWriteCallI(OpCode op, RegSlot returnValueRegister, RegSlot functionRegister, ArgSlot givenArgCount);",
          "311:         template <typename SizePolicy> bool TryWriteCallIFlags(OpCode op, RegSlot returnValueRegister, RegSlot functionRegister, ArgSlot givenArgCount, CallFlags callFlags);",
          "312:         template <typename SizePolicy> bool TryWriteCallIWithICIndex(OpCode op, RegSlot returnValueRegister, RegSlot functionRegister, ArgSlot givenArgCount, uint32 inlineCacheIndex, bool isRootLoad);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:         template <typename SizePolicy> bool TryWriteReg2U(OpCode op, RegSlot R0, RegSlot R1, uint index);",
          "305:         template <typename SizePolicy> bool TryWriteReg3U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, uint index);",
          "308:         template <typename SizePolicy> bool TryWriteReg4U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, uint slotIndex);",
          "312:         template <typename SizePolicy> bool TryWriteReg5U(OpCode op, RegSlot R0, RegSlot R1, RegSlot R2, RegSlot R3, RegSlot R4, uint slotIndex);",
          "319:         template <typename SizePolicy> bool TryWriteBrReg3(OpCode op, ByteCodeLabel labelID, RegSlot R0, RegSlot R1, RegSlot R2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332:         template <typename SizePolicy> bool TryWriteElementCP(OpCode op, RegSlot value, RegSlot instance, CacheId cacheId);",
          "333:         template <typename SizePolicy> bool TryWriteElementScopedC2(OpCode op, RegSlot value, PropertyIdIndexType propertyIdIndex, RegSlot instance2);",
          "334:         template <typename SizePolicy> bool TryWriteElementC2(OpCode op, RegSlot value, RegSlot instance, PropertyIdIndexType propertyIdIndex, RegSlot instance2);",
          "336:         template <typename SizePolicy> bool TryWriteReg1Unsigned1(OpCode op, RegSlot R0, uint C1);",
          "337:         template <typename SizePolicy> bool TryWriteReg2Int1(OpCode op, RegSlot R0, RegSlot R1, int C1);",
          "",
          "[Removed Lines]",
          "335:         template <typename SizePolicy> bool TryWriteClass(OpCode op, RegSlot constructor, RegSlot extends);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:         void Reg2Aux(OpCode op, RegSlot R0, RegSlot R1, uint byteOffset, int size);",
          "346:         uint InsertAuxiliaryData(const void* buffer, uint byteCount);",
          "349:         void NewFunction(RegSlot destinationRegister, uint index, bool isGenerator, RegSlot homeObjLocation);",
          "350:         void NewInnerFunction(RegSlot destinationRegister, uint index, RegSlot environmentRegister, bool isGenerator, RegSlot homeObjLocation);",
          "351:         ByteCodeLabel DefineLabel();",
          "",
          "[Removed Lines]",
          "348:         void InitClass(RegSlot constructor, RegSlot extends = Js::Constants::NoRegister);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/LayoutTypes.h||lib/Runtime/ByteCode/LayoutTypes.h": [
          "File: lib/Runtime/ByteCode/LayoutTypes.h -> lib/Runtime/ByteCode/LayoutTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: LAYOUT_TYPE_WMS             (Reg1)",
          "47: LAYOUT_TYPE_PROFILED_WMS    (Reg2)",
          "48: LAYOUT_TYPE_PROFILED_WMS    (Reg3)",
          "49: LAYOUT_TYPE_WMS             (Reg4)",
          "50: LAYOUT_TYPE_PROFILED_WMS    (Reg1Unsigned1)",
          "51: LAYOUT_TYPE_WMS             (Reg2B1)",
          "52: LAYOUT_TYPE_WMS             (Reg3B1)",
          "53: LAYOUT_TYPE_WMS             (Reg3C)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: LAYOUT_TYPE_WMS             (Reg3U)",
          "51: LAYOUT_TYPE_WMS             (Reg4U)",
          "52: LAYOUT_TYPE_WMS             (Reg5U)",
          "54: LAYOUT_TYPE_WMS             (Reg2U)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: LAYOUT_TYPE_WMS             (BrReg1)",
          "61: LAYOUT_TYPE_WMS             (BrReg2)",
          "62: LAYOUT_TYPE_WMS             (BrReg1Unsigned1)",
          "63: LAYOUT_TYPE                 (BrS)",
          "64: LAYOUT_TYPE                 (BrProperty)",
          "65: LAYOUT_TYPE                 (BrLocalProperty)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: LAYOUT_TYPE_WMS             (BrReg3)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: LAYOUT_TYPE_PROFILED_WMS    (CallIExtendedFlags)",
          "74: LAYOUT_TYPE_PROFILED_WMS    (CallIExtendedWithICIndex)",
          "75: LAYOUT_TYPE_PROFILED_WMS    (CallIExtendedFlagsWithICIndex)",
          "77: LAYOUT_TYPE_PROFILED_WMS    (ElementI)",
          "78: LAYOUT_TYPE_WMS             (ElementUnsigned1)",
          "79: LAYOUT_TYPE_WMS             (ElementC)",
          "",
          "[Removed Lines]",
          "76: LAYOUT_TYPE_WMS             (Class)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: MACRO_EXTEND(           BrOnNoLocalEnvProperty,  BrEnvProperty,  OpSideEffect|OpTempNumberSources|OpTempObjectSources)                     // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "170: MACRO_WMS(              BrOnObject_A,       BrReg1,         OpSideEffect|OpTempNumberSources|OpTempObjectSources)                          // Branch if typeId is not primitive type (i.e. > TypeIds_LastJavascriptPrimitiveType)",
          "171: MACRO_WMS(              BrNotNull_A,        BrReg1,         OpSideEffect|OpTempNumberSources|OpTempObjectSources)                          // Branch if not NULL",
          "172: MACRO_EXTEND_WMS(       BrNotUndecl_A,      BrReg1,         OpSideEffect|OpTempNumberSources|OpTempObjectSources)                          // Branch if source reg is NEQ to Undecl",
          "173: MACRO_BACKEND_ONLY(     BrNotEq_A,          Empty,          OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources) // Branch if !'>='",
          "174: MACRO_BACKEND_ONLY(     BrNotNeq_A,         Empty,          OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources) // Branch if !'>='",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172: MACRO_BACKEND_ONLY(     BrOnNotNullObj_A,   BrReg1,         OpTempNumberSources|OpTempObjectSources)",
          "173: MACRO_EXTEND_WMS(       BrOnObjectOrNull_A, BrReg1,         OpTempNumberSources|OpTempObjectSources)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399: MACRO_EXTEND_WMS(       InitClassMemberGetComputedName,ElementI,    OpSideEffect|OpOpndHasImplicitCall|OpPostOpDbgBailOut)                  // Class member in get syntax with computed property name",
          "400: MACRO_EXTEND_WMS(       BrOnClassConstructor,       BrReg1,         None)               // Branch if argument is a class constructor",
          "401: MACRO_EXTEND_WMS(       BrOnBaseConstructorKind,    BrReg1,         None)               // Branch if argument's [[ConstructorKind]] is 'base'",
          "403: MACRO_BACKEND_ONLY(     ArgIn_A,                    Empty,          None)       // Copy from \"in slot\" to \"local slot\", unchecked",
          "404: MACRO_WMS(              ArgIn0,                     Reg1,           OpByteCodeOnly)     // Copy from \"in slot\" to \"local slot\", unchecked",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404: MACRO_BACKEND_ONLY(     NewClassCtorProto,          Empty,          OpSideEffect)",
          "405: MACRO_BACKEND_ONLY(     NewClassConstructor,        Empty,          OpSideEffect)",
          "406: MACRO_BACKEND_ONLY(     BrOnConstructor_A,          BrReg1,         None)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609: MACRO_WMS(              NewScArrayWithMissingValues, Reg1Unsigned1,    OpSideEffect|OpTempObjectProducing)  // Create new ScriptArray instance",
          "610: MACRO_PROFILED(         NewScIntArray,      Auxiliary,      OpSideEffect|OpTempObjectProducing)             // Create new ScriptArray instance",
          "611: MACRO_PROFILED(         NewScFltArray,      Auxiliary,      OpSideEffect|OpTempObjectProducing)             // Create new ScriptArray instance",
          "614: MACRO_WMS(              NewScFunc,          ElementSlotI1,  OpSideEffect)   // Create new ScriptFunction instance",
          "615: MACRO_BACKEND_ONLY(     NewScFuncData,      Reg2,           None)",
          "",
          "[Removed Lines]",
          "612: MACRO_EXTEND_WMS(       InitClass,          Class,          OpSideEffect|OpHasImplicitCall|OpPostOpDbgBailOut)",
          "",
          "[Added Lines]",
          "617: MACRO_EXTEND_WMS(       InitBaseClass,      Reg2U,          OpSideEffect|OpPostOpDbgBailOut)",
          "618: MACRO_EXTEND_WMS(       InitInnerBaseClass, Reg3U,          OpSideEffect|OpPostOpDbgBailOut)",
          "619: MACRO_EXTEND_WMS(       InitClass,          Reg4U,          OpSideEffect|OpPostOpDbgBailOut)",
          "620: MACRO_EXTEND_WMS(       InitInnerClass,     Reg5U,          OpSideEffect|OpPostOpDbgBailOut)",
          "621: MACRO_EXTEND_WMS(       CheckExtends,       BrReg3,         OpSideEffect)",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpLayouts.h||lib/Runtime/ByteCode/OpLayouts.h": [
          "File: lib/Runtime/ByteCode/OpLayouts.h -> lib/Runtime/ByteCode/OpLayouts.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         typename SizePolicy::CacheIdType     inlineCacheIndex;",
          "150:     };",
          "152:     template <typename SizePolicy>",
          "153:     struct OpLayoutT_Reg2B1",
          "154:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     template <typename SizePolicy>",
          "153:     struct OpLayoutT_Reg2U",
          "154:     {",
          "155:         typename SizePolicy::RegSlotType     R0;",
          "156:         typename SizePolicy::RegSlotType     R1;",
          "157:         typename SizePolicy::UnsignedType    SlotIndex;",
          "158:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:         byte                                 B3;",
          "167:     };",
          "169:     template <typename SizePolicy>",
          "170:     struct OpLayoutT_Reg4         // R0 <- R1 op R2 op R3",
          "171:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     template <typename SizePolicy>",
          "178:     struct OpLayoutT_Reg3U",
          "179:     {",
          "180:         typename SizePolicy::RegSlotType     R0;",
          "181:         typename SizePolicy::RegSlotType     R1;",
          "182:         typename SizePolicy::RegSlotType     R2;",
          "183:         typename SizePolicy::UnsignedType    SlotIndex;",
          "184:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:         typename SizePolicy::RegSlotType     R3;",
          "176:     };",
          "178:     template <typename SizePolicy>",
          "179:     struct OpLayoutT_Reg5         // R0 <- R1 op R2 op R3 op R4",
          "180:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     template <typename SizePolicy>",
          "196:     struct OpLayoutT_Reg4U",
          "197:     {",
          "198:         typename SizePolicy::RegSlotType     R0;",
          "199:         typename SizePolicy::RegSlotType     R1;",
          "200:         typename SizePolicy::RegSlotType     R2;",
          "201:         typename SizePolicy::RegSlotType     R3;",
          "202:         typename SizePolicy::UnsignedType    SlotIndex;",
          "203:     };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:         typename SizePolicy::RegSlotType     R4;",
          "186:     };",
          "188:     template <typename SizePolicy>",
          "189:     struct OpLayoutT_ArgNoSrc     // OutArg",
          "190:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:     template <typename SizePolicy>",
          "216:     struct OpLayoutT_Reg5U",
          "217:     {",
          "218:         typename SizePolicy::RegSlotType     R0;",
          "219:         typename SizePolicy::RegSlotType     R1;",
          "220:         typename SizePolicy::RegSlotType     R2;",
          "221:         typename SizePolicy::RegSlotType     R3;",
          "222:         typename SizePolicy::RegSlotType     R4;",
          "223:         typename SizePolicy::UnsignedType    SlotIndex;",
          "224:     };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:         typename SizePolicy::RegSlotType     R2;",
          "233:     };",
          "235:     struct OpLayoutBrProperty     // if (R1.id) goto Offset",
          "236:     {",
          "237:         JumpOffset  RelativeJumpOffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:     template <typename SizePolicy>",
          "274:     struct OpLayoutT_BrReg3",
          "275:     {",
          "276:         JumpOffset  RelativeJumpOffset;",
          "277:         typename SizePolicy::RegSlotType     R0;",
          "278:         typename SizePolicy::RegSlotType     R1;",
          "279:         typename SizePolicy::RegSlotType     R2;",
          "280:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:         CallFlags callFlags;",
          "322:     };",
          "331:     template <typename SizePolicy>",
          "332:     struct OpLayoutT_ElementU     // Instance.PropertyIndex = <some constant value>. e.g. undefined",
          "333:     {",
          "",
          "[Removed Lines]",
          "324:     template <typename SizePolicy>",
          "325:     struct OpLayoutT_Class        // class _ extends Extends { Constructor(...) { ... } }",
          "326:     {",
          "327:         typename SizePolicy::RegSlotType     Constructor;",
          "328:         typename SizePolicy::RegSlotSType    Extends;",
          "329:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   DEF2_WMS(BRBMem_ALLOW_STACK,      BrFalse_A,                  OP_BrFalse_A)",
          "60:   DEF2_WMS(BRBMem_ALLOW_STACK,      BrTrue_A,                   OP_BrTrue_A)",
          "61:   DEF2_WMS(BRB_ALLOW_STACK,         BrOnObject_A,               JavascriptOperators::IsObject)",
          "62:   DEF2_WMS(BRB,                     BrNotNull_A,                OP_BrNotNull_A)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: EXDEF2_WMS(BRB_ALLOW_STACK,         BrOnObjectOrNull_A,         JavascriptOperators::IsObjectOrNull)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:   DEF3    (CUSTOM_L_R0,             ProfiledNewScIntArray,      PROFILEDOP(ProfiledNewScIntArray<true>, ProfiledNewScIntArray<false>), ProfiledAuxiliary)",
          "397:   DEF3    (CUSTOM_L_R0,             ProfiledNewScFltArray,      PROFILEDOP(ProfiledNewScFltArray<true>, ProfiledNewScFltArray<false>), ProfiledAuxiliary)",
          "398:   DEF2_WMS(RegextoA1,               NewRegEx,                   JavascriptRegExp::OP_NewRegEx)",
          "400:   DEF2_WMS(BRBReturnP1toA1,         BrOnEmpty,                  JavascriptOperators::OP_BrOnEmpty)",
          "401:   DEF2    (TRY,                     TryCatch,                   OP_TryCatch)",
          "402:   DEF2    (TRY,                     TryFinally,                 OP_TryFinally)",
          "",
          "[Removed Lines]",
          "399: EXDEF3_WMS(CUSTOM,                  InitClass,                  OP_InitClass, Class)",
          "",
          "[Added Lines]",
          "400: EXDEF2_WMS(XXtoA2_FB,               InitBaseClass,              OP_InitBaseClass)",
          "401: EXDEF2_WMS(A1toA2_FB,               InitInnerBaseClass,         OP_InitBaseClass)",
          "402: EXDEF2_WMS(A2toA2_FB,               InitClass,                  OP_InitClass)",
          "403: EXDEF2_WMS(A3toA2_FB,               InitInnerClass,             OP_InitClass)",
          "404: EXDEF2_WMS(BR_AtoA2,                CheckExtends,               OP_CheckExtends)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "315: #define PROCESS_U1toINNERMemNonVar(name, func) PROCESS_U1toINNERMemNonVar_COMMON(name, func,)",
          "317: #define PROCESS_XXINNERtoA1MemNonVar_COMMON(name, func, suffix) \\",
          "318:     case OpCode::name: \\",
          "319:     { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: #define PROCESS_XXtoA2_FB_COMMON(name, func, suffix) \\",
          "318:     case OpCode::name: \\",
          "319:     { \\",
          "320:         PROCESS_READ_LAYOUT(name, Reg2U, suffix); \\",
          "321:         SetReg(playout->R0, \\",
          "322:                func(this->GetFrameDisplayForNestedFunc(), this->m_functionBody->GetNestedFuncReference(playout->SlotIndex), playout->R1)); \\",
          "323:         break; \\",
          "324:     }",
          "326: #define PROCESS_XXtoA2_FB(name, func) PROCESS_XXtoA2_FB_COMMON(name, func,)",
          "328: #define PROCESS_A1toA2_FB_COMMON(name, func, suffix) \\",
          "329:     case OpCode::name: \\",
          "330:     { \\",
          "331:         PROCESS_READ_LAYOUT(name, Reg3U, suffix); \\",
          "332:         SetReg(playout->R0, \\",
          "333:                func((FrameDisplay*)GetNonVarReg(playout->R2), this->m_functionBody->GetNestedFuncReference(playout->SlotIndex), playout->R1)); \\",
          "334:         break; \\",
          "335:     }",
          "337: #define PROCESS_A1toA2_FB(name, func) PROCESS_A1toA2_FB_COMMON(name, func,)",
          "339: #define PROCESS_A2toA2_FB_COMMON(name, func, suffix) \\",
          "340:     case OpCode::name: \\",
          "341:     { \\",
          "342:         PROCESS_READ_LAYOUT(name, Reg4U, suffix); \\",
          "343:         SetReg(playout->R0, \\",
          "344:                func(this->GetFrameDisplayForNestedFunc(), this->m_functionBody->GetNestedFuncReference(playout->SlotIndex), \\",
          "345:                GetReg(playout->R2), GetReg(playout->R3), playout->R1)); \\",
          "346:         break; \\",
          "347:     }",
          "349: #define PROCESS_A2toA2_FB(name, func) PROCESS_A2toA2_FB_COMMON(name, func,)",
          "351: #define PROCESS_A3toA2_FB_COMMON(name, func, suffix) \\",
          "352:     case OpCode::name: \\",
          "353:     { \\",
          "354:         PROCESS_READ_LAYOUT(name, Reg5U, suffix); \\",
          "355:         SetReg(playout->R0, \\",
          "356:                func((FrameDisplay*)GetNonVarReg(playout->R4), this->m_functionBody->GetNestedFuncReference(playout->SlotIndex), \\",
          "357:                GetReg(playout->R2), GetReg(playout->R3), playout->R1)); \\",
          "358:         break; \\",
          "359:     }",
          "361: #define PROCESS_A3toA2_FB(name, func) PROCESS_A3toA2_FB_COMMON(name, func,)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "689: #define PROCESS_BRCMem(name, func) PROCESS_BRCMem_COMMON(name, func,)",
          "691: #define PROCESS_BRPROP(name, func) \\",
          "692:     case OpCode::name: \\",
          "693:     { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737: #define PROCESS_BR_AtoA2_COMMON(name, func, suffix) \\",
          "738:     case OpCode::name: \\",
          "739:     { \\",
          "740:         PROCESS_READ_LAYOUT(name, BrReg3, suffix); \\",
          "741:         if (func(playout->R0, playout->R1, playout->R2)) \\",
          "742:         { \\",
          "743:             ip = m_reader.SetCurrentRelativeOffset(ip, playout->RelativeJumpOffset); \\",
          "744:         } \\",
          "745:         break; \\",
          "746:     }",
          "748: #define PROCESS_BR_AtoA2(name, func) PROCESS_BR_AtoA2_COMMON(name, func,)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7818:         return m_reader.SetCurrentRelativeOffset((const byte *)(playout + 1), playout->RelativeJumpOffset);",
          "7819:     }",
          "7823:     {",
          "7825:     }",
          "7827: #ifdef ENABLE_SCRIPT_DEBUGGING",
          "",
          "[Removed Lines]",
          "7821:     template <class T>",
          "7822:     void InterpreterStackFrame::OP_InitClass(const unaligned OpLayoutT_Class<T> * playout)",
          "7824:         JavascriptOperators::OP_InitClass(GetReg(playout->Constructor), playout->Extends != Js::Constants::NoRegister ? GetReg(playout->Extends) : NULL, GetScriptContext());",
          "",
          "[Added Lines]",
          "7880:     Var InterpreterStackFrame::OP_InitBaseClass(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, RegSlot protoReg)",
          "7881:     {",
          "7882:         RecyclableObject * protoParent = scriptContext->GetLibrary()->GetObjectPrototype();",
          "7883:         RecyclableObject * constructorParent = scriptContext->GetLibrary()->GetFunctionPrototype();",
          "7885:         return InitClassHelper(environment, infoRef, protoParent, constructorParent, protoReg);",
          "7886:     }",
          "7888:     bool InterpreterStackFrame::OP_CheckExtends(RegSlot regCtorParent, RegSlot regProtoParent, RegSlot regExtends)",
          "7889:     {",
          "7890:         Var extends = GetReg(regExtends);",
          "7891:         if (JavascriptOperators::IsNull(extends))",
          "7892:         {",
          "7893:             SetReg(regProtoParent, scriptContext->GetLibrary()->GetNull());",
          "7894:             SetReg(regCtorParent, scriptContext->GetLibrary()->GetFunctionPrototype());",
          "7895:             return true;",
          "7896:         }",
          "7897:         if (!JavascriptOperators::IsConstructor(extends))",
          "7898:         {",
          "7899:             JavascriptError::ThrowTypeError(scriptContext, JSERR_ErrorOnNew);",
          "7900:         }",
          "7901:         return false;",
          "7902:     }",
          "7904:     Var InterpreterStackFrame::OP_InitClass(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, Var constructorParent, Var protoParent, RegSlot protoReg)",
          "7906:         return InitClassHelper(environment, infoRef, VarTo<RecyclableObject>(protoParent), VarTo<RecyclableObject>(constructorParent), protoReg);",
          "7907:     }",
          "7909:     Var InterpreterStackFrame::InitClassHelper(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, RecyclableObject *protoParent, RecyclableObject *constructorParent, RegSlot protoReg)",
          "7910:     {",
          "7911:         Assert(protoParent && JavascriptOperators::IsObjectOrNull(protoParent));",
          "7912:         Assert(constructorParent && (JavascriptOperators::IsConstructor(constructorParent) || constructorParent == scriptContext->GetLibrary()->GetFunctionPrototype()));",
          "7915:         DynamicObject * proto = scriptContext->GetLibrary()->CreateClassConstructorPrototypeObject(protoParent);",
          "7921:         ScriptFunction * constructor = ScriptFunction::OP_NewClassConstructor(environment, infoRef, proto, constructorParent);",
          "7923:         proto->SetSlot(SetSlotArguments(Constants::NoProperty, 0, constructor));",
          "7924:         constructor->SetSlot(SetSlotArguments(Constants::NoProperty, 0, proto));",
          "7926:         SetReg(protoReg, proto);",
          "7927:         return constructor;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.h||lib/Runtime/Language/InterpreterStackFrame.h": [
          "File: lib/Runtime/Language/InterpreterStackFrame.h -> lib/Runtime/Language/InterpreterStackFrame.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "792:         void OP_ResumeFinally(const byte* ip, Js::JumpOffset jumpOffset, RegSlot exceptionRegSlot, RegSlot offsetRegSlot);",
          "793:         inline Var OP_ResumeYield(Var yieldDataVar, RegSlot yieldStarIterator = Js::Constants::NoRegister);",
          "794:         template <typename T> void OP_IsInst(const unaligned T * playout);",
          "796:         inline Var OP_LdHomeObj(ScriptContext * scriptContext);",
          "797:         inline Var OP_LdFuncObj(ScriptContext * scriptContext);",
          "798:         template <typename T> void OP_LdElementUndefined(const unaligned OpLayoutT_ElementU<T>* playout);",
          "",
          "[Removed Lines]",
          "795:         template <class T> void OP_InitClass(const unaligned OpLayoutT_Class<T> * playout);",
          "",
          "[Added Lines]",
          "795:         Var OP_InitBaseClass(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, RegSlot protoReg);",
          "796:         Var OP_InitClass(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, Var ctorParent, Var protoParent, RegSlot protoReg);",
          "797:         Var InitClassHelper(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, RecyclableObject *protoParent, RecyclableObject *constructorParent, RegSlot protoReg);",
          "798:         bool OP_CheckExtends(RegSlot ctorParent, RegSlot protoParent, RegSlot extends);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1489:     bool JavascriptOperators::IsConstructor(_In_ Var instanceVar)",
          "1490:     {",
          "1491:         RecyclableObject* instanceObj = TryFromVar<RecyclableObject>(instanceVar);",
          "1492:         return instanceObj && IsConstructor(instanceObj);",
          "1493:     }",
          "1495:     BOOL JavascriptOperators::IsConcatSpreadable(Var instanceVar)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1491:         JIT_HELPER_NOT_REENTRANT_NOLOCK_HEADER(Op_IsConstructor);",
          "1494:         JIT_HELPER_END(Op_IsConstructor);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7770:         JIT_HELPER_END(ScrObj_OP_IsInst);",
          "7771:     }",
          "7774:     {",
          "7844:     }",
          "7846:     void JavascriptOperators::OP_LoadUndefinedToElement(Var instance, PropertyId propertyId)",
          "",
          "[Removed Lines]",
          "7773:     void JavascriptOperators::OP_InitClass(Var constructor, Var extends, ScriptContext * scriptContext)",
          "7775:         JIT_HELPER_REENTRANT_HEADER(OP_InitClass);",
          "7776:         if (JavascriptOperators::GetTypeId(constructor) != Js::TypeId::TypeIds_Function)",
          "7777:         {",
          "7778:              JavascriptError::ThrowTypeError(scriptContext, JSERR_Operand_Invalid_NeedFunction, _u(\"class\"));",
          "7779:         }",
          "7781:         RecyclableObject * ctor = VarTo<RecyclableObject>(constructor);",
          "7783:         if (extends)",
          "7784:         {",
          "7785:             switch (JavascriptOperators::GetTypeId(extends))",
          "7786:             {",
          "7787:                 case Js::TypeId::TypeIds_Null:",
          "7788:                 {",
          "7789:                     Var ctorProto = JavascriptOperators::GetProperty(constructor, ctor, Js::PropertyIds::prototype, scriptContext);",
          "7790:                     RecyclableObject * ctorProtoObj = VarTo<RecyclableObject>(ctorProto);",
          "7792:                     ctorProtoObj->SetPrototype(VarTo<RecyclableObject>(extends));",
          "7794:                     ctorProtoObj->EnsureProperty(Js::PropertyIds::constructor);",
          "7795:                     ctorProtoObj->SetEnumerable(Js::PropertyIds::constructor, FALSE);",
          "7797:                     break;",
          "7798:                 }",
          "7800:                 default:",
          "7801:                 {",
          "7802:                     if (!VarIs<RecyclableObject>(extends))",
          "7803:                     {",
          "7804:                         JavascriptError::ThrowTypeError(scriptContext, JSERR_ErrorOnNew);",
          "7805:                     }",
          "7806:                     RecyclableObject * extendsObj = VarTo<RecyclableObject>(extends);",
          "7807:                     if (!JavascriptOperators::IsConstructor(extendsObj))",
          "7808:                     {",
          "7809:                         JavascriptError::ThrowTypeError(scriptContext, JSERR_ErrorOnNew);",
          "7810:                     }",
          "7811:                     if (!extendsObj->HasProperty(Js::PropertyIds::prototype))",
          "7812:                     {",
          "7813:                         JavascriptError::ThrowTypeError(scriptContext, JSERR_InvalidPrototype);",
          "7814:                     }",
          "7816:                     Var extendsProto = JavascriptOperators::GetPropertyNoCache(extends, extendsObj, Js::PropertyIds::prototype, scriptContext);",
          "7817:                     uint extendsProtoTypeId = JavascriptOperators::GetTypeId(extendsProto);",
          "7818:                     if (extendsProtoTypeId <= Js::TypeId::TypeIds_LastJavascriptPrimitiveType && extendsProtoTypeId != Js::TypeId::TypeIds_Null)",
          "7819:                     {",
          "7820:                         JavascriptError::ThrowTypeError(scriptContext, JSERR_InvalidPrototype);",
          "7821:                     }",
          "7823:                     Var ctorProto = JavascriptOperators::GetPropertyNoCache(constructor, ctor, Js::PropertyIds::prototype, scriptContext);",
          "7824:                     RecyclableObject * ctorProtoObj = VarTo<RecyclableObject>(ctorProto);",
          "7826:                     ctorProtoObj->SetPrototype(VarTo<RecyclableObject>(extendsProto));",
          "7828:                     ctorProtoObj->EnsureProperty(Js::PropertyIds::constructor);",
          "7829:                     ctorProtoObj->SetEnumerable(Js::PropertyIds::constructor, FALSE);",
          "7831:                     Var protoCtor = JavascriptOperators::GetPropertyNoCache(ctorProto, ctorProtoObj, Js::PropertyIds::constructor, scriptContext);",
          "7832:                     RecyclableObject * protoCtorObj = VarTo<RecyclableObject>(protoCtor);",
          "7833:                     protoCtorObj->SetPrototype(extendsObj);",
          "7835:                     break;",
          "7836:                 }",
          "7837:             }",
          "7838:         }",
          "7840:         Var proto = JavascriptOperators::GetProperty(constructor, ctor, Js::PropertyIds::prototype, scriptContext);",
          "7841:         JavascriptOperators::OP_SetHomeObj(constructor, proto);",
          "7843:         JIT_HELPER_END(OP_InitClass);",
          "",
          "[Added Lines]",
          "7775:     Var JavascriptOperators::OP_NewClassCtorProto(Var protoParent, ScriptContext * scriptContext)",
          "7777:         JIT_HELPER_NOT_REENTRANT_HEADER(Op_NewClassCtorProto, reentrancylock, scriptContext->GetThreadContext());",
          "7778:         return scriptContext->GetLibrary()->CreateClassConstructorPrototypeObject(VarTo<RecyclableObject>(protoParent));",
          "7779:         JIT_HELPER_END(Op_NewClassCtorProto);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11074:     BOOL JavascriptOperators::IsObjectOrNull(Var instance)",
          "11075:     {",
          "11076:         TypeId typeId = GetTypeId(instance);",
          "11077:         return IsObjectType(typeId) || typeId == TypeIds_Null;",
          "11078:     }",
          "11080:     BOOL JavascriptOperators::IsUndefined(_In_ RecyclableObject* instance)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11012:         JIT_HELPER_NOT_REENTRANT_NOLOCK_HEADER(Op_IsObjectOrNull);",
          "11015:         JIT_HELPER_END(Op_IsObjectOrNull);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "540:         static Var OP_NewPseudoScope(ScriptContext *scriptContext);",
          "541:         static Var OP_NewBlockScope(ScriptContext *scriptContext);",
          "542:         static Var OP_CloneBlockScope(BlockActivationObject *blockScope, ScriptContext *scriptContext);",
          "544:         static void OP_LoadUndefinedToElement(Var instance, PropertyId propertyId);",
          "545:         static void OP_LoadUndefinedToElementDynamic(Var instance, PropertyId propertyId, ScriptContext* scriptContext);",
          "546:         static void OP_LoadUndefinedToElementScoped(FrameDisplay *pScope, PropertyId propertyId, Var defaultInstance, ScriptContext* scriptContext);",
          "",
          "[Removed Lines]",
          "543:         static void OP_InitClass(Var constructor, Var extends, ScriptContext * scriptContext);",
          "",
          "[Added Lines]",
          "543:         static Var OP_NewClassCtorProto(Var protoParent, ScriptContext * scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp": [
          "File: lib/Runtime/Library/JavascriptLibrary.cpp -> lib/Runtime/Library/JavascriptLibrary.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable)",
          "58:     };",
          "60:     SimplePropertyDescriptor const JavascriptLibrary::ModuleNamespaceTypeDescriptors[1] =",
          "61:     {",
          "62:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::_symbolToStringTag), PropertyNone)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     SimplePropertyDescriptor const JavascriptLibrary::FunctionWithNonWritablePrototypeAndLengthTypeDescriptors[2] =",
          "61:     {",
          "62:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::prototype), PropertyNone),",
          "63:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable),",
          "64:     };",
          "66:     SimplePropertyDescriptor const JavascriptLibrary::FunctionWithNonWritablePrototypeLengthAndNameTypeDescriptors[3] =",
          "67:     {",
          "68:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::prototype), PropertyNone),",
          "69:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable),",
          "70:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::name), PropertyConfigurable)",
          "71:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     SimpleTypeHandler<3> JavascriptLibrary::SharedFunctionWithPrototypeLengthAndNameTypeHandler(NO_WRITE_BARRIER_TAG(FunctionWithPrototypeLengthAndNameTypeDescriptors));",
          "74:     SimpleTypeHandler<2> JavascriptLibrary::SharedFunctionWithPrototypeAndLengthTypeHandler(NO_WRITE_BARRIER_TAG(FunctionWithPrototypeAndLengthTypeDescriptors));",
          "75:     SimpleTypeHandler<1> JavascriptLibrary::SharedNamespaceSymbolTypeHandler(NO_WRITE_BARRIER_TAG(ModuleNamespaceTypeDescriptors), PropertyTypesHasSpecialProperties);",
          "76:     MissingPropertyTypeHandler JavascriptLibrary::MissingPropertyHolderTypeHandler;",
          "79:     SimplePropertyDescriptor const JavascriptLibrary::HeapArgumentsPropertyDescriptors[3] =",
          "80:     {",
          "81:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable | PropertyWritable),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     SimpleTypeHandler<2> JavascriptLibrary::SharedFunctionWithNonWritablePrototypeAndLengthTypeHandler(NO_WRITE_BARRIER_TAG(FunctionWithNonWritablePrototypeAndLengthTypeDescriptors));",
          "90:     SimpleTypeHandler<3> JavascriptLibrary::SharedFunctionWithNonWritablePrototypeLengthAndNameTypeHandler(NO_WRITE_BARRIER_TAG(FunctionWithNonWritablePrototypeLengthAndNameTypeDescriptors));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::length), PropertyConfigurable)",
          "90:     };",
          "92:     void JavascriptLibrary::Initialize(ScriptContext* scriptContext, GlobalObject * globalObject)",
          "93:     {",
          "94:         PROBE_STACK(scriptContext, Js::Constants::MinStackDefault);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     SimplePropertyDescriptor const JavascriptLibrary::ClassConstructorPrototypePropertyDescriptors[1] =",
          "107:     {",
          "108:         SimplePropertyDescriptor(NO_WRITE_BARRIER_TAG(BuiltInPropertyRecords::constructor), PropertyConfigurable | PropertyWritable)",
          "109:     };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "456:         heapArgumentsType = DynamicType::New(scriptContext, TypeIds_Arguments, objectPrototype, nullptr,",
          "457:             SimpleDictionaryTypeHandler::New(scriptContext, HeapArgumentsPropertyDescriptors, _countof(HeapArgumentsPropertyDescriptors), 0, 0, true, true), true, true);",
          "459:         TypePath *const strictHeapArgumentsTypePath = TypePath::New(recycler);",
          "460:         strictHeapArgumentsTypePath->Add(BuiltInPropertyRecords::callee);",
          "461:         strictHeapArgumentsTypePath->Add<true /*isSetter*/>(BuiltInPropertyRecords::callee);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:         classConstructorPrototypeTypeHandler =",
          "479: #if ENABLE_FIXED_FIELDS",
          "480:             SimpleDictionaryTypeHandler::NewInitialized",
          "481: #else",
          "482:             SimpleDictionaryTypeHandler::New",
          "483: #endif",
          "484:                 (scriptContext, ClassConstructorPrototypePropertyDescriptors, _countof(ClassConstructorPrototypePropertyDescriptors), 0, 0, true, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1056:         return JavascriptLibrary::GetDeferredFunctionTypeHandlerBase</* isNameAvailable */ true, /* isPrototypeAvailable */ true, /* isLengthAvailable */ true>();",
          "1057:     }",
          "1059:     DynamicTypeHandler * JavascriptLibrary::GetDeferredPrototypeFunctionWithLengthTypeHandler(ScriptContext* scriptContext)",
          "1060:     {",
          "1061:         return DeferredTypeHandler<Js::JavascriptExternalFunction::DeferredLengthInitializer, InitializeFunctionDeferredTypeHandlerFilter</* isNameAvailable */ true, /* isPrototypeAvailable */ true, /* isLengthAvailable */ true>>::GetDefaultInstance();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:     DynamicTypeHandler * JavascriptLibrary::ClassConstructorTypeHandler()",
          "1087:     {",
          "1088:         return &SharedFunctionWithNonWritablePrototypeLengthAndNameTypeHandler;",
          "1089:     }",
          "1091:     DynamicTypeHandler * JavascriptLibrary::AnonymousClassConstructorTypeHandler()",
          "1092:     {",
          "1093:         return &SharedFunctionWithNonWritablePrototypeAndLengthTypeHandler;",
          "1094:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6255:     ScriptFunction* JavascriptLibrary::CreateScriptFunction(FunctionProxy * proxy)",
          "6256:     {",
          "6258:         FunctionInfo* functionInfo = proxy->GetFunctionInfo();",
          "6259:         if (functionInfo->HasComputedName() || functionInfo->HasHomeObj())",
          "6260:         {",
          "6261:             if (functionInfo->HasComputedName() && functionInfo->HasHomeObj())",
          "6262:             {",
          "6264:             }",
          "6265:             else if (functionInfo->HasHomeObj())",
          "6266:             {",
          "6268:             }",
          "6272:         }",
          "6274:     }",
          "6276:     AsmJsScriptFunction* JavascriptLibrary::CreateAsmJsScriptFunction(FunctionProxy * proxy)",
          "",
          "[Removed Lines]",
          "6257:         ScriptFunctionType* deferredPrototypeType = proxy->EnsureDeferredPrototypeType();",
          "6263:                 return RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, FunctionWithComputedName<FunctionWithHomeObj<ScriptFunction>>, proxy, deferredPrototypeType);",
          "6267:                 return RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, FunctionWithHomeObj<ScriptFunction>, proxy, deferredPrototypeType);",
          "6271:             return RecyclerNewWithInfoBits(this->GetRecycler(), EnumFunctionClass, ScriptFunctionWithComputedName, proxy, deferredPrototypeType);",
          "6273:         return RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, ScriptFunction, proxy, deferredPrototypeType);",
          "",
          "[Added Lines]",
          "6294:         ScriptFunctionType * type = proxy->IsClassConstructor() && proxy->GetUndeferredFunctionType() ? proxy->GetUndeferredFunctionType() : proxy->EnsureDeferredPrototypeType();",
          "6300:                 return RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, FunctionWithComputedName<FunctionWithHomeObj<ScriptFunction>>, proxy, type);",
          "6304:                 return RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, FunctionWithHomeObj<ScriptFunction>, proxy, type);",
          "6308:             return RecyclerNewWithInfoBits(this->GetRecycler(), EnumFunctionClass, ScriptFunctionWithComputedName, proxy, type);",
          "6310:         return RecyclerNewEnumClass(this->GetRecycler(), EnumFunctionClass, ScriptFunction, proxy, type);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6621:         return prototype;",
          "6622:     }",
          "6624:     DynamicObject* JavascriptLibrary::CreateObject(",
          "6625:         const bool allowObjectHeaderInlining,",
          "6626:         const PropertyIndex requestedInlineSlotCapacity)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6661:     DynamicObject* JavascriptLibrary::CreateClassConstructorPrototypeObject(RecyclableObject * protoParent)",
          "6662:     {",
          "6666:         DynamicType * dynamicType =",
          "6667:             DynamicType::New(scriptContext, TypeIds_Object, protoParent, nullptr, classConstructorPrototypeTypeHandler);",
          "6668:         dynamicType->SetHasNoEnumerableProperties(true);",
          "6669:         DynamicObject * proto = DynamicObject::New(this->GetRecycler(), dynamicType);",
          "6670:         return proto;",
          "6671:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptLibrary.h||lib/Runtime/Library/JavascriptLibrary.h": [
          "File: lib/Runtime/Library/JavascriptLibrary.h -> lib/Runtime/Library/JavascriptLibrary.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:         Field(DynamicTypeHandler *) functionTypeHandlerWithLength;",
          "296:         Field(DynamicTypeHandler *) functionWithPrototypeAndLengthTypeHandler;",
          "297:         Field(DynamicTypeHandler *) functionWithPrototypeTypeHandler;",
          "298:         Field(DynamicType *) externalFunctionWithDeferredPrototypeType;",
          "299:         Field(DynamicType *) externalFunctionWithLengthAndDeferredPrototypeType;",
          "300:         Field(DynamicType *) wrappedFunctionWithDeferredPrototypeType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:         Field(DynamicTypeHandler *) classConstructorPrototypeTypeHandler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "540:         static SimpleTypeHandler<1> SharedNamespaceSymbolTypeHandler;",
          "541:         static SimpleTypeHandler<3> SharedFunctionWithPrototypeLengthAndNameTypeHandler;",
          "542:         static SimpleTypeHandler<2> SharedFunctionWithPrototypeAndLengthTypeHandler;",
          "543:         static MissingPropertyTypeHandler MissingPropertyHolderTypeHandler;",
          "545:         static SimplePropertyDescriptor const SharedFunctionPropertyDescriptors[2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:         static SimpleTypeHandler<2> SharedFunctionWithNonWritablePrototypeAndLengthTypeHandler;",
          "546:         static SimpleTypeHandler<3> SharedFunctionWithNonWritablePrototypeLengthAndNameTypeHandler;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "549:         static SimplePropertyDescriptor const FunctionWithLengthAndNameTypeDescriptors[2];",
          "550:         static SimplePropertyDescriptor const FunctionWithPrototypeLengthAndNameTypeDescriptors[3];",
          "551:         static SimplePropertyDescriptor const FunctionWithPrototypeAndLengthTypeDescriptors[2];",
          "552:         static SimplePropertyDescriptor const ModuleNamespaceTypeDescriptors[1];",
          "554:     public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:         static SimplePropertyDescriptor const FunctionWithNonWritablePrototypeAndLengthTypeDescriptors[2];",
          "557:         static SimplePropertyDescriptor const FunctionWithNonWritablePrototypeLengthAndNameTypeDescriptors[3];",
          "559:         static SimplePropertyDescriptor const ClassConstructorPrototypePropertyDescriptors[1];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "972:         DynamicTypeHandler* GetDeferredFunctionWithLengthUnsetTypeHandler();",
          "973:         DynamicTypeHandler * GetDeferredPrototypeFunctionWithNameAndLengthTypeHandler();",
          "974:         DynamicTypeHandler * ScriptFunctionTypeHandler(bool noPrototypeProperty, bool isAnonymousFunction);",
          "975:         DynamicTypeHandler * GetDeferredAnonymousFunctionWithLengthTypeHandler();",
          "976:         DynamicTypeHandler * GetDeferredAnonymousFunctionTypeHandler();",
          "977:         template<bool isNameAvailable, bool isPrototypeAvailable = true, bool isLengthAvailable = false, bool addLength = isLengthAvailable>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:         DynamicTypeHandler * ClassConstructorTypeHandler();",
          "983:         DynamicTypeHandler * AnonymousClassConstructorTypeHandler();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1046:         DynamicObject* CreateGeneratorConstructorPrototypeObject();",
          "1047:         DynamicObject* CreateAsyncGeneratorConstructorPrototypeObject();",
          "1048:         DynamicObject* CreateConstructorPrototypeObject(JavascriptFunction * constructor);",
          "1049:         DynamicObject* CreateObject(const bool allowObjectHeaderInlining = false, const PropertyIndex requestedInlineSlotCapacity = 0);",
          "1050:         DynamicObject* CreateObject(DynamicTypeHandler * typeHandler);",
          "1051:         DynamicObject* CreateActivationObject();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:         DynamicObject* CreateClassConstructorPrototypeObject(RecyclableObject * protoParent);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/ScriptFunction.cpp||lib/Runtime/Library/ScriptFunction.cpp": [
          "File: lib/Runtime/Library/ScriptFunction.cpp -> lib/Runtime/Library/ScriptFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:         return false;",
          "27:     }",
          "31:         environment((FrameDisplay*)&NullFrameDisplay), cachedScopeObj(nullptr),",
          "32:         hasInlineCaches(false)",
          "33:     {",
          "34:         Assert(proxy->GetFunctionInfo()->GetFunctionProxy() == proxy);",
          "36:         DebugOnly(VerifyEntryPoint());",
          "38: #if ENABLE_NATIVE_CODEGEN",
          "",
          "[Removed Lines]",
          "29:     ScriptFunction::ScriptFunction(FunctionProxy * proxy, ScriptFunctionType* deferredPrototypeType)",
          "30:         : ScriptFunctionBase(deferredPrototypeType, proxy->GetFunctionInfo()),",
          "35:         Assert(proxy->EnsureDeferredPrototypeType() == deferredPrototypeType);",
          "",
          "[Added Lines]",
          "29:     ScriptFunction::ScriptFunction(FunctionProxy * proxy, ScriptFunctionType* type)",
          "30:         : ScriptFunctionBase(type, proxy->GetFunctionInfo()),",
          "35:         Assert(proxy->GetDeferredPrototypeType() == type || proxy->GetUndeferredFunctionType() == type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         pfuncScript->SetEnvironment(environment);",
          "99:         ScriptFunctionType *scFuncType = functionProxy->GetUndeferredFunctionType();",
          "101:         {",
          "103:             pfuncScript->GetTypeHandler()->EnsureObjectReady(pfuncScript);",
          "104:         }",
          "",
          "[Removed Lines]",
          "100:         if (scFuncType)",
          "102:             Assert(pfuncScript->GetType() == functionProxy->GetDeferredPrototypeType());",
          "",
          "[Added Lines]",
          "100:         if (scFuncType && pfuncScript->GetType() == functionProxy->GetDeferredPrototypeType())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         if ((*infoRef)->GetFunctionProxy()->GetUndeferredFunctionType())",
          "123:         {",
          "125:             {",
          "126:                 JavascriptString * functionName = scriptFunc->GetDisplayNameImpl();",
          "127:                 scriptFunc->SetPropertyWithAttributes(PropertyIds::name, functionName, PropertyConfigurable, nullptr);",
          "",
          "[Removed Lines]",
          "124:             if (!scriptFunc->IsAnonymousFunction() && !scriptFunc->GetFunctionProxy()->EnsureDeserialized()->GetIsStaticNameFunction())",
          "",
          "[Added Lines]",
          "123:             if (!scriptFunc->IsAnonymousFunction() &&",
          "124:                 !scriptFunc->GetFunctionInfo()->IsClassConstructor() &&",
          "125:                 !scriptFunc->GetFunctionProxy()->EnsureDeserialized()->GetIsStaticNameFunction())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:         JIT_HELPER_END(ScrFunc_OP_NewScFuncHomeObj);",
          "133:     }",
          "135:     void ScriptFunction::SetEnvironment(FrameDisplay * environment)",
          "136:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     ScriptFunction * ScriptFunction::OP_NewClassConstructor(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, Var homeObj, RecyclableObject *constructorParent)",
          "137:     {",
          "138:         JIT_HELPER_NOT_REENTRANT_HEADER(ScrFunc_OP_NewClassConstructor, reentrancylock, (*infoRef)->GetFunctionProxy()->GetScriptContext()->GetThreadContext());",
          "139:         FunctionProxy * proxy = (*infoRef)->GetFunctionProxy();",
          "140:         if (proxy->GetUndeferredFunctionType() == nullptr)",
          "141:         {",
          "142:             DynamicTypeHandler * typeHandler = proxy->GetIsAnonymousFunction()",
          "143:                 ? proxy->GetScriptContext()->GetLibrary()->AnonymousClassConstructorTypeHandler()",
          "144:                 : proxy->GetScriptContext()->GetLibrary()->ClassConstructorTypeHandler();",
          "145:             ScriptFunctionType * newType = ScriptFunctionType::New(proxy, typeHandler, constructorParent, true);",
          "146:             proxy->SetUndeferredFunctionType(newType);",
          "147:         }",
          "148:         ScriptFunction * scriptFunction = OP_NewScFuncHomeObj(environment, infoRef, homeObj);",
          "149:         if (scriptFunction->GetPrototype() != constructorParent)",
          "150:         {",
          "151:             scriptFunction->SetPrototype(constructorParent);",
          "152:         }",
          "154:         Var length = TaggedInt::ToVarUnchecked((*infoRef)->GetFunctionProxy()->EnsureDeserialized()->GetReportedInParamsCount() - 1);",
          "155:         scriptFunction->SetSlot(SetSlotArguments(Constants::NoProperty, 1, length));",
          "157:         if (!scriptFunction->IsAnonymousFunction() && !scriptFunction->GetFunctionInfo()->HasComputedName())",
          "158:         {",
          "159:             JavascriptString * functionName = nullptr;",
          "160:             bool result = scriptFunction->GetFunctionName(&functionName);",
          "161:             Assert(result);",
          "162:             scriptFunction->SetSlot(SetSlotArguments(Constants::NoProperty, 2, functionName));",
          "163:         }",
          "165:         return scriptFunction;",
          "166:         JIT_HELPER_END(ScrFunc_OP_NewClassConstructor);",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "874:         SetHasInlineCaches(false);",
          "875:     }",
          "877:     template <> VTableValue Js::FunctionWithComputedName<Js::AsmJsScriptFunction>::DummyVirtualFunctionToHinderLinkerICF() const",
          "878:     {",
          "879:         return VTableValue::VtableAsmJsScriptFunctionWithComputedName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "911:     template <>",
          "912:     void FunctionWithComputedName<ScriptFunction>::SetComputedNameVar(Var computedNameVar)",
          "913:     {",
          "914:         this->computedNameVar = computedNameVar;",
          "915:     }",
          "917:     template <>",
          "918:     void FunctionWithComputedName<AsmJsScriptFunction>::SetComputedNameVar(Var computedNameVar)",
          "919:     {",
          "920:         this->computedNameVar = computedNameVar;",
          "921:     }",
          "923:     template <>",
          "924:     void FunctionWithComputedName<ScriptFunctionWithInlineCache>::SetComputedNameVar(Var computedNameVar)",
          "925:     {",
          "926:         this->computedNameVar = computedNameVar;",
          "927:     }",
          "929:     template <>",
          "930:     void FunctionWithComputedName<GeneratorVirtualScriptFunction>::SetComputedNameVar(Var computedNameVar)",
          "931:     {",
          "932:         this->computedNameVar = computedNameVar;",
          "933:     }",
          "935:     template <>",
          "936:     void FunctionWithComputedName<FunctionWithHomeObj<GeneratorVirtualScriptFunction>>::SetComputedNameVar(Var computedNameVar)",
          "937:     {",
          "938:         this->computedNameVar = computedNameVar;",
          "939:     }",
          "941:     template <>",
          "942:     void FunctionWithComputedName<FunctionWithHomeObj<ScriptFunction>>::SetComputedNameVar(Var computedNameVar)",
          "943:     {",
          "944:         this->computedNameVar = computedNameVar;",
          "945:         if (GetFunctionInfo()->IsClassConstructor())",
          "946:         {",
          "948:             JavascriptString * functionName = nullptr;",
          "949:             bool result = GetFunctionName(&functionName);",
          "950:             Assert(result);",
          "951:             SetSlot(SetSlotArguments(Constants::NoProperty, 2, functionName));",
          "952:         }",
          "953:     }",
          "955:     template <>",
          "956:     void FunctionWithComputedName<FunctionWithHomeObj<ScriptFunctionWithInlineCache>>::SetComputedNameVar(Var computedNameVar)",
          "957:     {",
          "958:         this->computedNameVar = computedNameVar;",
          "959:         if (GetFunctionInfo()->IsClassConstructor())",
          "960:         {",
          "962:             JavascriptString * functionName = nullptr;",
          "963:             bool result = GetFunctionName(&functionName);",
          "964:             Assert(result);",
          "965:             SetSlot(SetSlotArguments(Constants::NoProperty, 2, functionName));",
          "966:         }",
          "967:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ScriptFunction.h||lib/Runtime/Library/ScriptFunction.h": [
          "File: lib/Runtime/Library/ScriptFunction.h -> lib/Runtime/Library/ScriptFunction.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:             Assert(proxy->GetFunctionInfo()->HasComputedName());",
          "41:         }",
          "42:         virtual Var GetComputedNameVar() const override { return this->computedNameVar; }",
          "44:         virtual VTableValue DummyVirtualFunctionToHinderLinkerICF() const;",
          "45:     };",
          "",
          "[Removed Lines]",
          "43:         virtual void SetComputedNameVar(Var computedNameVar) override { this->computedNameVar = computedNameVar; }",
          "",
          "[Added Lines]",
          "43:         virtual void SetComputedNameVar(Var computedNameVar) override;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         inline static BOOL Test(JavascriptFunction *func) { return func->IsScriptFunction(); }",
          "82:         static ScriptFunction * OP_NewScFunc(FrameDisplay *environment, FunctionInfoPtrPtr infoRef);",
          "83:         static ScriptFunction * OP_NewScFuncHomeObj(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, Var homeObj);",
          "85:         static void CopyEntryPointInfoToThreadContextIfNecessary(ProxyEntryPointInfo* oldEntryPointInfo, ProxyEntryPointInfo* newEntryPointInfo);",
          "87:         ProxyEntryPointInfo* GetEntryPointInfo() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         static ScriptFunction * OP_NewClassConstructor(FrameDisplay *environment, FunctionInfoPtrPtr infoRef, Var homeObject, RecyclableObject * constructorParent);",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/ScriptFunctionType.cpp||lib/Runtime/Types/ScriptFunctionType.cpp": [
          "File: lib/Runtime/Types/ScriptFunctionType.cpp -> lib/Runtime/Types/ScriptFunctionType.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     ScriptFunctionType * ScriptFunctionType::New(FunctionProxy * proxy, bool isShared)",
          "23:     {",
          "25:         ScriptContext * scriptContext = proxy->GetScriptContext();",
          "26:         JavascriptLibrary * library = scriptContext->GetLibrary();",
          "27:         DynamicObject * functionPrototype = proxy->IsAsync() ? library->GetAsyncFunctionPrototype() : library->GetFunctionPrototype();",
          "30:         return RecyclerNew(scriptContext->GetRecycler(), ScriptFunctionType,",
          "33:             proxy->GetDefaultEntryPointInfo(),",
          "36:     }",
          "38:     void ScriptFunctionType::ChangeEntryPoint(ProxyEntryPointInfo * entryPointInfo, JavascriptMethod entryPoint, bool isAsmJS)",
          "",
          "[Removed Lines]",
          "24:         Assert(proxy->GetFunctionInfo()->GetFunctionProxy() == proxy);",
          "28:         JavascriptMethod address = proxy->GetDefaultEntryPointInfo()->jsMethod;",
          "31:             scriptContext, functionPrototype,",
          "32:             address,",
          "34:             library->ScriptFunctionTypeHandler(!proxy->IsConstructor(), proxy->GetIsAnonymousFunction()),",
          "35:             isShared, isShared);",
          "",
          "[Added Lines]",
          "27:         DynamicTypeHandler * typeHandler = library->ScriptFunctionTypeHandler(!proxy->IsConstructor(), proxy->GetIsAnonymousFunction());",
          "29:         return New(proxy, typeHandler, functionPrototype, isShared);",
          "30:     }",
          "32:     ScriptFunctionType * ScriptFunctionType::New(FunctionProxy * proxy, DynamicTypeHandler * typeHandler, RecyclableObject * prototype, bool isShared)",
          "33:     {",
          "34:         Assert(proxy->GetFunctionInfo()->GetFunctionProxy() == proxy);",
          "35:         ScriptContext * scriptContext = proxy->GetScriptContext();",
          "38:             scriptContext,",
          "39:             prototype,",
          "40:             proxy->GetDefaultEntryPointInfo()->jsMethod,",
          "42:             typeHandler,",
          "43:             isShared,",
          "44:             isShared);",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/ScriptFunctionType.h||lib/Runtime/Types/ScriptFunctionType.h": [
          "File: lib/Runtime/Types/ScriptFunctionType.h -> lib/Runtime/Types/ScriptFunctionType.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     {",
          "11:     public:",
          "12:         static ScriptFunctionType * New(FunctionProxy * proxy, bool isShared);",
          "13:         static DWORD GetEntryPointInfoOffset() { return offsetof(ScriptFunctionType, entryPointInfo); }",
          "14:         ProxyEntryPointInfo * GetEntryPointInfo() const { return entryPointInfo; }",
          "15:         void SetEntryPointInfo(ProxyEntryPointInfo * entryPointInfo) { this->entryPointInfo = entryPointInfo; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:         static ScriptFunctionType * New(FunctionProxy * proxy, DynamicTypeHandler * typeHandler, RecyclableObject * prototype, bool isShared);",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp||lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp": [
          "File: lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp -> lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:         return RecyclerNew(scriptContext->GetRecycler(), SimpleDictionaryTypeHandlerBase, scriptContext, propertyDescriptors, propertyCount, propertyCount, inlineSlotCapacity, offsetOfInlineSlots, isLocked, isShared);",
          "251:     }",
          "253:     template <typename TPropertyIndex, typename TMapKey, bool IsNotExtensibleSupported>",
          "254:     SimpleDictionaryTypeHandlerBase<TPropertyIndex, TMapKey, IsNotExtensibleSupported>::SimpleDictionaryTypeHandlerBase(Recycler* recycler) :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #if ENABLE_FIXED_FIELDS",
          "254:     template <typename TPropertyIndex, typename TMapKey, bool IsNotExtensibleSupported>",
          "255:     SimpleDictionaryTypeHandlerBase<TPropertyIndex, TMapKey, IsNotExtensibleSupported> * SimpleDictionaryTypeHandlerBase<TPropertyIndex, TMapKey, IsNotExtensibleSupported>::NewInitialized(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked, bool isShared)",
          "256:     {",
          "257:         PropertyIndexRangesType::VerifySlotCapacity(propertyCount);",
          "258:         return RecyclerNew(scriptContext->GetRecycler(), SimpleDictionaryTypeHandlerBase, scriptContext, propertyDescriptors, propertyCount, propertyCount, inlineSlotCapacity, offsetOfInlineSlots, isLocked, isShared, true);",
          "259:     }",
          "260: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:     }",
          "268:     template <typename TPropertyIndex, typename TMapKey, bool IsNotExtensibleSupported>",
          "271:         DynamicTypeHandler(slotCapacity, inlineSlotCapacity, offsetOfInlineSlots, DefaultFlags | (isLocked ? IsLockedFlag : 0) | (isShared ? (MayBecomeSharedFlag | IsSharedFlag) : 0)),",
          "272:         nextPropertyIndex(0),",
          "",
          "[Removed Lines]",
          "269:     SimpleDictionaryTypeHandlerBase<TPropertyIndex, TMapKey, IsNotExtensibleSupported>::SimpleDictionaryTypeHandlerBase(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, int slotCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked, bool isShared) :",
          "",
          "[Added Lines]",
          "278:     SimpleDictionaryTypeHandlerBase<TPropertyIndex, TMapKey, IsNotExtensibleSupported>::SimpleDictionaryTypeHandlerBase(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, int slotCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked, bool isShared, bool isInitialized) :",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:         for (int i=0; i < propertyCount; i++)",
          "284:         {",
          "286:         }",
          "287:     }",
          "",
          "[Removed Lines]",
          "285:             Add(propertyDescriptors[i].Id, propertyDescriptors[i].Attributes, false, false, false, scriptContext);",
          "",
          "[Added Lines]",
          "294:             Add(propertyDescriptors[i].Id, propertyDescriptors[i].Attributes, isInitialized, false, false, scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/SimpleDictionaryTypeHandler.h||lib/Runtime/Types/SimpleDictionaryTypeHandler.h": [
          "File: lib/Runtime/Types/SimpleDictionaryTypeHandler.h -> lib/Runtime/Types/SimpleDictionaryTypeHandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     protected:",
          "86:         SimpleDictionaryTypeHandlerBase(Recycler * recycler);",
          "87:         SimpleDictionaryTypeHandlerBase(Recycler * recycler, int slotCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false);",
          "89:         SimpleDictionaryTypeHandlerBase(Recycler* recycler, int slotCapacity, int propertyCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false);",
          "90:         SimpleDictionaryTypeHandlerBase(Recycler* recycler, SimpleDictionaryTypeHandlerBase * typeHandler);",
          "91:         DEFINE_VTABLE_CTOR_NO_REGISTER(SimpleDictionaryTypeHandlerBase, DynamicTypeHandler);",
          "",
          "[Removed Lines]",
          "88:         SimpleDictionaryTypeHandlerBase(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, int slotCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false);",
          "",
          "[Added Lines]",
          "88:         SimpleDictionaryTypeHandlerBase(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, int slotCapacity, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false, bool isInitialized = false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         static SimpleDictionaryTypeHandlerBase * New(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false);",
          "106:         static DynamicType* CreateTypeForNewScObject(ScriptContext* scriptContext, DynamicType* type, const Js::PropertyIdArray *propIds, bool shareType, bool check__proto__);",
          "108:         virtual DynamicTypeHandler * Clone(Recycler * recyler);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: #if ENABLE_FIXED_FIELDS",
          "107:         static SimpleDictionaryTypeHandlerBase * NewInitialized(ScriptContext * scriptContext, SimplePropertyDescriptor const* propertyDescriptors, int propertyCount, uint16 inlineSlotCapacity, uint16 offsetOfInlineSlots, bool isLocked = false, bool isShared = false);",
          "108: #endif",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/SimpleTypeHandler.cpp||lib/Runtime/Types/SimpleTypeHandler.cpp": [
          "File: lib/Runtime/Types/SimpleTypeHandler.cpp -> lib/Runtime/Types/SimpleTypeHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         ObjectSlotAttributes attr = ObjectSlotAttr_None;",
          "195:         for (PropertyIndex i = 0; i < propertyCount; i++)",
          "196:         {",
          "198:             propertyId = descriptors[i].Id->GetPropertyId();",
          "199:             attr = PathTypeHandlerBase::PropertyAttributesToObjectSlotAttributes(descriptors[i].Attributes);",
          "201:             PropertyIndex index;",
          "202:             currentType = newTypeHandler->PromoteType<false>(currentType, PathTypeSuccessorKey(propertyId, attr), false, scriptContext, instance, &index);",
          "203:             newTypeHandler = PathTypeHandlerBase::FromTypeHandler(currentType->GetTypeHandler());",
          "204: #if ENABLE_FIXED_FIELDS",
          "205: #ifdef SUPPORT_FIXED_FIELDS_ON_PATH_TYPES",
          "207:                 (VarIs<JavascriptFunction>(value) ? ShouldFixMethodProperties() : false);",
          "208:             newTypeHandler->InitializePath(instance, i, newTypeHandler->GetPathLength(), scriptContext, [=]() { return markAsFixed; });",
          "209: #endif",
          "",
          "[Removed Lines]",
          "197:             Var value = instance->GetSlot(i);",
          "200:             Assert(value != nullptr || IsInternalPropertyId(propertyId));",
          "206:             bool markAsFixed = !IsInternalPropertyId(propertyId) &&",
          "",
          "[Added Lines]",
          "204:             Var value = instance->GetSlot(i);",
          "205:             bool markAsFixed = !IsInternalPropertyId(propertyId) && value != nullptr &&",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f62a70bbf4f45f26c04145a5ad25e90b578db9b",
      "candidate_info": {
        "commit_hash": "1f62a70bbf4f45f26c04145a5ad25e90b578db9b",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/1f62a70bbf4f45f26c04145a5ad25e90b578db9b",
        "files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ],
        "message": "Update byte code ID for InitConst change",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x81AEEA4B, 0xAE4E, 0x40C0, { 0x84, 0x8F, 0x6D, 0xB7, 0xC5, 0xF4, 0x9F, 0x55 } };",
          "",
          "[Added Lines]",
          "10: { 0x2C341884, 0x72E5, 0x4799, { 0x92, 0x3C, 0xDB, 0x8E, 0xDA, 0xFE, 0xEA, 0x89 } };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a1584c918b757a1938a9f27b579e8aa77b6533c",
      "candidate_info": {
        "commit_hash": "8a1584c918b757a1938a9f27b579e8aa77b6533c",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/8a1584c918b757a1938a9f27b579e8aa77b6533c",
        "files": [
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/Lower.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "BUILD.gn",
          "Build/Chakra.Build.Clang.Default.props",
          "Build/Chakra.Build.Clang.props",
          "Build/Chakra.Build.Clang.targets",
          "Build/Chakra.Core.sln",
          "Build/NuGet/.pack-version",
          "Build/NuGet/Microsoft.ChakraCore.vc140.nuspec",
          "Build/NuGet/Microsoft.ChakraCore.vc140.targets",
          "Build/NuGet/package.ps1",
          "Build/scripts/add_msbuild_path.cmd",
          "CONTRIBUTING.md",
          "README.md",
          "RegenAllByteCodeNoBuild.cmd",
          "bin/ChakraCore/ChakraCore.def",
          "bin/ChakraCore/ChakraCore.vcxproj",
          "bin/ChakraCore/ChakraCoreDllFunc.cpp",
          "bin/ChakraCore/TestHooks.cpp",
          "bin/ChakraCore/TestHooks.h",
          "bin/GCStress/GCStress.vcxproj",
          "bin/NativeTests/BigUIntTest.cpp",
          "bin/NativeTests/BigUIntTest.h",
          "bin/NativeTests/ConfigFlagsList.h",
          "bin/NativeTests/FunctionExecutionTest.h",
          "bin/NativeTests/JavascriptBigIntTests.cpp",
          "bin/NativeTests/JsRTApiTest.cpp",
          "bin/NativeTests/NativeTests.vcxproj",
          "bin/NativeTests/stdafx.h",
          "bin/ch/262.js",
          "bin/ch/ChakraRtInterface.cpp",
          "bin/ch/ChakraRtInterface.h",
          "bin/ch/DbgController.js",
          "bin/ch/Debugger.cpp",
          "bin/ch/Helpers.cpp",
          "bin/ch/Helpers.h",
          "bin/ch/HostConfigFlagsList.h",
          "bin/ch/JITProcessManager.cpp",
          "bin/ch/WScriptJsrt.cpp",
          "bin/ch/WScriptJsrt.h",
          "bin/ch/ch.cpp",
          "bin/ch/stdafx.h",
          "bin/rl/rl.cpp",
          "build.sh",
          "deps/Chakra.ICU/Chakra.ICU.Build.props",
          "deps/Chakra.ICU/Chakra.ICU.i18n.vcxproj",
          "jenkins/check_ascii.sh",
          "jenkins/check_eol.sh",
          "jenkins/check_file_ascii.sh",
          "jenkins/check_file_eol.sh",
          "lib/Backend/AsmJsJITInfo.cpp",
          "lib/Backend/BackendApi.cpp",
          "lib/Backend/BackendOpCodeAttrAsmJs.cpp",
          "lib/Backend/BackendOpCodeAttrAsmJs.h",
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h",
          "lib/Backend/BailOut.cpp",
          "lib/Backend/BailOut.h",
          "lib/Backend/BailOutKind.h",
          "lib/Backend/CodeGenNumberAllocator.cpp",
          "lib/Backend/DbCheckPostLower.cpp",
          "lib/Backend/DbCheckPostLower.h",
          "lib/Backend/Encoder.cpp",
          "lib/Backend/Encoder.h",
          "lib/Backend/EquivalentTypeSet.cpp",
          "lib/Backend/FixedFieldInfo.cpp",
          "lib/Backend/FlowGraph.cpp",
          "lib/Backend/FlowGraph.h",
          "lib/Backend/Func.cpp",
          "lib/Backend/Func.h",
          "lib/Backend/FunctionCodeGenJitTimeData.cpp",
          "lib/Backend/FunctionCodeGenJitTimeData.h",
          "lib/Backend/FunctionJITTimeInfo.cpp",
          "lib/Backend/FunctionJITTimeInfo.h",
          "lib/Backend/GlobHashTable.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp",
          "lib/Backend/GlobOptArrays.h",
          "lib/Backend/GlobOptBailOut.cpp",
          "lib/Backend/GlobOptBlockData.cpp",
          "lib/Backend/GlobOptBlockData.h",
          "lib/Backend/GlobOptExpr.cpp",
          "lib/Backend/GlobOptFields.cpp",
          "lib/Backend/IR.cpp",
          "lib/Backend/IR.h",
          "lib/Backend/IR.inl",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilder.h",
          "lib/Backend/IRBuilderAsmJs.cpp",
          "lib/Backend/Inline.cpp",
          "lib/Backend/Inline.h",
          "lib/Backend/InlineeFrameInfo.cpp",
          "lib/Backend/InliningDecider.cpp",
          "lib/Backend/InliningDecider.h",
          "lib/Backend/JITTimeFunctionBody.cpp",
          "lib/Backend/JITTimeFunctionBody.h",
          "lib/Backend/JitTransferData.cpp",
          "lib/Backend/JitTransferData.h",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/LinearScan.cpp",
          "lib/Backend/LinearScan.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Backend/LowerMDShared.cpp",
          "lib/Backend/LowerMDShared.h",
          "lib/Backend/LowerMDSharedSimd128.cpp",
          "lib/Backend/NativeCodeGenerator.cpp",
          "lib/Backend/NativeEntryPointData.cpp",
          "lib/Backend/NativeEntryPointData.h",
          "lib/Backend/ObjTypeSpecFldInfo.cpp",
          "lib/Backend/ObjTypeSpecFldInfo.h",
          "lib/Backend/Opnd.cpp",
          "lib/Backend/Opnd.h",
          "lib/Backend/Peeps.cpp",
          "lib/Backend/SccLiveness.cpp",
          "lib/Backend/ServerScriptContext.cpp",
          "lib/Backend/ServerScriptContext.h",
          "lib/Backend/SimpleJitProfilingHelpers.cpp",
          "lib/Backend/SimpleJitProfilingHelpers.h",
          "lib/Backend/Sym.cpp",
          "lib/Backend/Sym.h",
          "lib/Backend/TempTracker.cpp",
          "lib/Backend/TempTracker.h",
          "lib/Backend/amd64/EncoderMD.cpp",
          "lib/Backend/amd64/EncoderMD.h",
          "lib/Backend/amd64/LinearScanMD.cpp",
          "lib/Backend/amd64/LinearScanMD.h",
          "lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/amd64/machvalues.h",
          "lib/Backend/arm/EncoderMD.cpp",
          "lib/Backend/arm/EncoderMD.h",
          "lib/Backend/arm/LowerMD.cpp",
          "lib/Backend/arm/LowerMD.h",
          "lib/Backend/arm/machvalues.h",
          "lib/Backend/arm64/ARM64NeonEncoder.h",
          "lib/Backend/arm64/EncoderMD.cpp",
          "lib/Backend/arm64/EncoderMD.h",
          "lib/Backend/arm64/LowerMD.cpp",
          "lib/Backend/arm64/LowerMD.h",
          "lib/Backend/arm64/machvalues.h",
          "lib/Backend/i386/EncoderMD.cpp",
          "lib/Backend/i386/EncoderMD.h",
          "lib/Backend/i386/LowererMDArch.cpp",
          "lib/Backend/i386/machvalues.h",
          "lib/CMakeLists.txt",
          "lib/Common/BackendApi.h",
          "lib/Common/ChakraCoreVersion.h",
          "lib/Common/Codex/Utf8Codex.cpp",
          "lib/Common/Codex/Utf8Codex.h",
          "lib/Common/Common/Chakra.Common.Common.vcxproj",
          "lib/Common/Common/CompressionUtilities.cpp",
          "lib/Common/Common/CompressionUtilities.h",
          "lib/Common/Common/Jobs.cpp",
          "lib/Common/Common/Jobs.h",
          "lib/Common/Common/NumberUtilities.cpp",
          "lib/Common/Common/NumberUtilities.h",
          "lib/Common/Common/NumberUtilities.inl",
          "lib/Common/Common/NumberUtilitiesBase.h",
          "lib/Common/Common/NumberUtilities_strtod.cpp",
          "lib/Common/Common/RejitReasons.h",
          "lib/Common/CommonDefines.h",
          "lib/Common/CommonPal.h",
          "lib/Common/ConfigFlagsList.h",
          "lib/Common/Core/Assertions.h",
          "lib/Common/Core/CommonTypedefs.h",
          "lib/Common/Core/ConfigParser.cpp",
          "lib/Common/Core/ConfigParser.h",
          "lib/Common/Core/DelayLoadLibrary.cpp",
          "lib/Common/Core/DelayLoadLibrary.h",
          "lib/Common/Core/EtwTraceCore.h",
          "lib/Common/Core/FaultInjection.cpp",
          "lib/Common/Core/Output.cpp",
          "lib/Common/Core/Output.h",
          "lib/Common/Core/SysInfo.cpp",
          "lib/Common/Core/SysInfo.h",
          "lib/Common/DataStructures/BaseDictionary.h",
          "lib/Common/DataStructures/BigInt.cpp",
          "lib/Common/DataStructures/BigInt.h",
          "lib/Common/DataStructures/BigUInt.cpp",
          "lib/Common/DataStructures/BigUInt.h",
          "lib/Common/DataStructures/CMakeLists.txt",
          "lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj",
          "lib/Common/DataStructures/ClusterList.h",
          "lib/Common/DataStructures/DictionaryEntry.h",
          "lib/Common/DataStructures/KeyValuePair.h",
          "lib/Common/DataStructures/SparseBitVector.h",
          "lib/Common/DataStructures/WeakReferenceDictionary.h",
          "lib/Common/Exceptions/ReportError.cpp",
          "lib/Common/Exceptions/Throw.h",
          "lib/Common/Memory/AllocatorTelemetryStats.h",
          "lib/Common/Memory/BucketStatsReporter.h",
          "lib/Common/Memory/CollectionState.h",
          "lib/Common/Memory/CustomHeap.cpp",
          "lib/Common/Memory/HeapBlock.cpp",
          "lib/Common/Memory/HeapBlock.h",
          "lib/Common/Memory/HeapBucket.cpp",
          "lib/Common/Memory/HeapBucketStats.cpp",
          "lib/Common/Memory/HeapInfo.h",
          "lib/Common/Memory/HeapInfoManager.h",
          "lib/Common/Memory/LargeHeapBlock.cpp",
          "lib/Common/Memory/Recycler.cpp",
          "lib/Common/Memory/Recycler.h",
          "lib/Common/Memory/RecyclerSweepManager.cpp",
          "lib/Common/Memory/RecyclerSweepManager.h",
          "lib/Common/Memory/SmallFinalizableHeapBlock.cpp",
          "lib/Common/Memory/SmallFinalizableHeapBlock.h",
          "lib/Common/Memory/SmallNormalHeapBucket.cpp",
          "lib/JITClient/JITClientStub.c",
          "lib/JITClient/JITManager.cpp",
          "lib/JITIDL/Chakra.JITIDL.vcxproj",
          "lib/JITIDL/ChakraJIT.idl",
          "lib/JITIDL/JITTypes.h",
          "lib/JITServer/JITServer.cpp",
          "lib/JITServer/JITServerStub.c",
          "lib/Jsrt/CMakeLists.txt",
          "lib/Jsrt/Chakra.Jsrt.vcxproj",
          "lib/Jsrt/ChakraCommon.h",
          "lib/Jsrt/ChakraCore.h",
          "lib/Jsrt/ChakraCoreWindows.h",
          "lib/Jsrt/Core/CMakeLists.txt",
          "lib/Jsrt/Core/Chakra.Jsrt.Core.vcxproj",
          "lib/Jsrt/Core/JsrtContextCore.cpp",
          "lib/Jsrt/Core/JsrtContextCore.h",
          "lib/Jsrt/Core/JsrtCore.cpp",
          "lib/Jsrt/Jsrt.cpp",
          "lib/Jsrt/JsrtCommonExports.inc",
          "lib/Jsrt/JsrtContext.h",
          "lib/Jsrt/JsrtDebugEventObject.cpp",
          "lib/Jsrt/JsrtDebugManager.cpp",
          "lib/Jsrt/JsrtDebugUtils.cpp",
          "lib/Jsrt/JsrtDiag.cpp",
          "lib/Jsrt/JsrtExternalObject.cpp",
          "lib/Jsrt/JsrtExternalObject.h",
          "lib/Jsrt/JsrtInternal.h",
          "lib/Jsrt/JsrtRuntime.cpp",
          "lib/Jsrt/JsrtRuntime.h",
          "lib/Jsrt/JsrtSourceHolder.cpp",
          "lib/Parser/BGParseManager.cpp",
          "lib/Parser/BGParseManager.h",
          "lib/Parser/CharClassifier.h",
          "lib/Parser/FormalsUtil.h",
          "lib/Parser/Parse.cpp",
          "lib/Parser/Parse.h",
          "lib/Parser/ParseFlags.h",
          "lib/Parser/ParserCommon.h",
          "lib/Parser/RegexCompileTime.cpp",
          "lib/Parser/RegexFlags.h",
          "lib/Parser/RegexParser.cpp",
          "lib/Parser/RegexParser.h",
          "lib/Parser/RegexPattern.cpp",
          "lib/Parser/RegexPattern.h",
          "lib/Parser/RegexRuntime.cpp",
          "lib/Parser/Scan.cpp",
          "lib/Parser/Scan.h",
          "lib/Parser/StandardChars.cpp",
          "lib/Parser/StandardChars.h",
          "lib/Parser/cmperr.cpp",
          "lib/Parser/cmperr.h",
          "lib/Parser/perrors.h",
          "lib/Parser/pnodewalk.h",
          "lib/Parser/ptlist.h",
          "lib/Parser/ptree.cpp",
          "lib/Parser/ptree.h",
          "lib/Parser/rterrors.h",
          "lib/Parser/screrror.cpp",
          "lib/Parser/screrror.h",
          "lib/Parser/tokens.h",
          "lib/Runtime/Base/CharStringCache.cpp",
          "lib/Runtime/Base/Constants.cpp",
          "lib/Runtime/Base/Constants.h",
          "lib/Runtime/Base/CrossSite.cpp",
          "lib/Runtime/Base/DelayLoadLibrary.cpp",
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/Base/FunctionBody.h",
          "lib/Runtime/Base/FunctionExecutionStateMachine.cpp",
          "lib/Runtime/Base/FunctionExecutionStateMachine.h",
          "lib/Runtime/Base/FunctionInfo.cpp",
          "lib/Runtime/Base/FunctionInfo.h",
          "lib/Runtime/Base/JnDirectFields.h",
          "lib/Runtime/Base/LineOffsetCache.cpp",
          "lib/Runtime/Base/PerfHintDescriptions.h",
          "lib/Runtime/Base/RegexPatternMruMap.h",
          "lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Base/ScriptContext.h",
          "lib/Runtime/Base/ScriptContextInfo.h",
          "lib/Runtime/Base/ThreadBoundThreadContextManager.cpp",
          "lib/Runtime/Base/ThreadConfigFlagsList.h",
          "lib/Runtime/Base/ThreadContext.cpp",
          "lib/Runtime/Base/ThreadContext.h",
          "lib/Runtime/Base/ThreadContextInfo.cpp",
          "lib/Runtime/Base/ThreadContextInfo.h",
          "lib/Runtime/Base/ThreadContextTlsEntry.cpp",
          "lib/Runtime/Base/Utf8SourceInfo.h",
          "lib/Runtime/ByteCode/AsmJsByteCodeWriter.h",
          "lib/Runtime/ByteCode/ByteBlock.cpp",
          "lib/Runtime/ByteCode/ByteBlock.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/ByteCodeSerializeFlags.h",
          "lib/Runtime/ByteCode/ByteCodeSerializer.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.h",
          "lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/ByteCode/LayoutTypes.h",
          "lib/Runtime/ByteCode/OpCodeUtil.h",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/ByteCode/OpLayouts.h",
          "lib/Runtime/ByteCode/ScopeInfo.cpp",
          "lib/Runtime/ByteCode/ScopeInfo.h",
          "lib/Runtime/ByteCode/Symbol.h",
          "lib/Runtime/Debug/BreakpointProbe.cpp",
          "lib/Runtime/Debug/DebugDocument.cpp",
          "lib/Runtime/Debug/DebugManager.cpp",
          "lib/Runtime/Debug/DebuggingFlags.cpp",
          "lib/Runtime/Debug/DiagHelperMethodWrapper.cpp",
          "lib/Runtime/Debug/DiagObjectModel.cpp",
          "lib/Runtime/Debug/DiagStackFrame.cpp",
          "lib/Runtime/Debug/MutationBreakpoint.cpp",
          "lib/Runtime/Debug/ProbeContainer.cpp",
          "lib/Runtime/Debug/TTActionEvents.cpp",
          "lib/Runtime/Debug/TTEventLog.cpp",
          "lib/Runtime/Debug/TTEvents.cpp",
          "lib/Runtime/Debug/TTEvents.h",
          "lib/Runtime/Debug/TTRuntimeInfoTracker.cpp",
          "lib/Runtime/Debug/TTSerialize.cpp",
          "lib/Runtime/Debug/TTSnapObjects.cpp",
          "lib/Runtime/Debug/TTSnapObjects.h",
          "lib/Runtime/Debug/TTSnapValues.cpp",
          "lib/Runtime/Debug/TTSnapshot.cpp",
          "lib/Runtime/Debug/TTSnapshotExtractor.cpp",
          "lib/Runtime/Debug/TTSupport.h",
          "lib/Runtime/InternalPropertyList.h",
          "lib/Runtime/Language/Arguments.h",
          "lib/Runtime/Language/AsmJs.cpp",
          "lib/Runtime/Language/AsmJs.h",
          "lib/Runtime/Language/AsmJsArrayBufferViews.h",
          "lib/Runtime/Language/AsmJsBuiltInNames.h",
          "lib/Runtime/Language/AsmJsLink.cpp",
          "lib/Runtime/Language/AsmJsModule.cpp",
          "lib/Runtime/Language/AsmJsModule.h",
          "lib/Runtime/Language/AsmJsTypes.h",
          "lib/Runtime/Language/AsmJsUtils.cpp",
          "lib/Runtime/Language/CacheOperators.cpp",
          "lib/Runtime/Language/CacheOperators.inl",
          "lib/Runtime/Language/ConstructorCache.cpp",
          "lib/Runtime/Language/ConstructorCache.h",
          "lib/Runtime/Language/DynamicProfileInfo.cpp",
          "lib/Runtime/Language/DynamicProfileInfo.h",
          "lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp",
          "lib/Runtime/Language/FunctionCodeGenRuntimeData.h",
          "lib/Runtime/Language/InlineCache.cpp",
          "lib/Runtime/Language/InlineCache.h",
          "lib/Runtime/Language/InlineCache.inl",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterHandlerAsmJs.inl",
          "lib/Runtime/Language/InterpreterLoop.inl",
          "lib/Runtime/Language/InterpreterProcessOpCodeAsmJs.h",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptConversion.inl",
          "lib/Runtime/Language/JavascriptExceptionObject.cpp",
          "lib/Runtime/Language/JavascriptExceptionObject.h",
          "lib/Runtime/Language/JavascriptExceptionOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Language/JavascriptOperators.inl",
          "lib/Runtime/Language/JavascriptStackWalker.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.h",
          "lib/Runtime/Language/ModuleNamespace.cpp",
          "lib/Runtime/Language/ModuleNamespace.h",
          "lib/Runtime/Language/ModuleNamespaceEnumerator.cpp",
          "lib/Runtime/Language/ModuleRecordBase.h",
          "lib/Runtime/Language/ProfilingHelpers.cpp",
          "lib/Runtime/Language/ProfilingHelpers.h",
          "lib/Runtime/Language/PropertyGuard.h",
          "lib/Runtime/Language/RuntimeLanguagePch.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Language/SourceTextModuleRecord.h",
          "lib/Runtime/Language/TaggedInt.h",
          "lib/Runtime/Language/TaggedInt.inl",
          "lib/Runtime/Language/ValueType.cpp",
          "lib/Runtime/Language/ValueType.h",
          "lib/Runtime/Language/WebAssemblySource.cpp",
          "lib/Runtime/Language/WebAssemblySource.h",
          "lib/Runtime/Language/amd64/JavascriptConversionA.asm",
          "lib/Runtime/Language/amd64/StackFrame.cpp",
          "lib/Runtime/Language/amd64/amd64_Thunks.S",
          "lib/Runtime/Language/i386/AsmJsJitTemplate.cpp",
          "lib/Runtime/Library/ArgumentsObject.cpp",
          "lib/Runtime/Library/ArgumentsObject.h",
          "lib/Runtime/Library/ArgumentsObjectEnumerator.h",
          "lib/Runtime/Library/ArrayBuffer.cpp",
          "lib/Runtime/Library/ArrayBuffer.h",
          "lib/Runtime/Library/AtomicsObject.cpp",
          "lib/Runtime/Library/BoundFunction.cpp",
          "lib/Runtime/Library/BoundFunction.h",
          "lib/Runtime/Library/CMakeLists.txt",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters",
          "lib/Runtime/Library/CompoundString.cpp",
          "lib/Runtime/Library/CompoundString.h",
          "lib/Runtime/Library/ConcatString.cpp",
          "lib/Runtime/Library/ConcatString.h",
          "lib/Runtime/Library/CustomExternalIterator.cpp",
          "lib/Runtime/Library/CustomExternalIterator.h",
          "lib/Runtime/Library/CustomExternalWrapperObject.cpp",
          "lib/Runtime/Library/CustomExternalWrapperObject.h",
          "lib/Runtime/Library/DataView.cpp",
          "lib/Runtime/Library/DataView.h",
          "lib/Runtime/Library/DateImplementation.cpp",
          "lib/Runtime/Library/DelayFreeArrayBufferHelper.h",
          "lib/Runtime/Library/ES5Array.cpp",
          "lib/Runtime/Library/ES5Array.h",
          "lib/Runtime/Library/ES5ArrayIndexEnumerator.h",
          "lib/Runtime/Library/EngineInterfaceObject.cpp",
          "lib/Runtime/Library/EngineInterfaceObject.h",
          "lib/Runtime/Library/EngineInterfaceObjectBuiltIns.h",
          "lib/Runtime/Library/ForInObjectEnumerator.cpp",
          "lib/Runtime/Library/GlobalObject.cpp",
          "lib/Runtime/Library/GlobalObject.h",
          "lib/Runtime/Library/InJavascript/Intl.js",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp",
          "lib/Runtime/Library/JSON.cpp",
          "lib/Runtime/Library/JSONParser.cpp",
          "lib/Runtime/Library/JSONScanner.h",
          "lib/Runtime/Library/JSONString.cpp",
          "lib/Runtime/Library/JSONString.h",
          "lib/Runtime/Library/JSONStringBuilder.cpp",
          "lib/Runtime/Library/JSONStringBuilder.h",
          "lib/Runtime/Library/JSONStringifier.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl",
          "lib/Runtime/Library/JavascriptArrayIterator.cpp",
          "lib/Runtime/Library/JavascriptArrayIterator.h",
          "lib/Runtime/Library/JavascriptAsyncFromSyncIterator.cpp",
          "lib/Runtime/Library/JavascriptAsyncFromSyncIterator.h",
          "lib/Runtime/Library/JavascriptBigInt.cpp",
          "lib/Runtime/Library/JavascriptBigInt.h",
          "lib/Runtime/Library/JavascriptBigIntObject.cpp",
          "lib/Runtime/Library/JavascriptBigIntObject.h",
          "lib/Runtime/Library/JavascriptBoolean.cpp",
          "lib/Runtime/Library/JavascriptBoolean.h",
          "lib/Runtime/Library/JavascriptBoolean.inl",
          "lib/Runtime/Library/JavascriptBooleanObject.cpp",
          "lib/Runtime/Library/JavascriptBooleanObject.h",
          "lib/Runtime/Library/JavascriptBuiltInFunctionList.h",
          "lib/Runtime/Library/JavascriptBuiltInFunctions.cpp",
          "lib/Runtime/Library/JavascriptDate.cpp",
          "lib/Runtime/Library/JavascriptDate.h",
          "lib/Runtime/Library/JavascriptError.cpp",
          "lib/Runtime/Library/JavascriptError.h",
          "lib/Runtime/Library/JavascriptExceptionMetadata.cpp",
          "lib/Runtime/Library/JavascriptExceptionMetadata.h",
          "lib/Runtime/Library/JavascriptExternalFunction.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp",
          "lib/Runtime/Library/JavascriptFunction.h",
          "lib/Runtime/Library/JavascriptGenerator.cpp",
          "lib/Runtime/Library/JavascriptGenerator.h",
          "lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptGeneratorFunction.h",
          "lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptLibrary.h",
          "lib/Runtime/Library/JavascriptLibraryBase.h",
          "lib/Runtime/Library/JavascriptListIterator.cpp",
          "lib/Runtime/Library/JavascriptListIterator.h",
          "lib/Runtime/Library/JavascriptMap.cpp",
          "lib/Runtime/Library/JavascriptMap.h",
          "lib/Runtime/Library/JavascriptMapIterator.cpp",
          "lib/Runtime/Library/JavascriptMapIterator.h",
          "lib/Runtime/Library/JavascriptNumber.cpp",
          "lib/Runtime/Library/JavascriptNumber.h",
          "lib/Runtime/Library/JavascriptNumber.inl",
          "lib/Runtime/Library/JavascriptNumberObject.cpp",
          "lib/Runtime/Library/JavascriptNumberObject.h",
          "lib/Runtime/Library/JavascriptObject.cpp",
          "lib/Runtime/Library/JavascriptObject.h",
          "lib/Runtime/Library/JavascriptPromise.cpp",
          "lib/Runtime/Library/JavascriptPromise.h",
          "lib/Runtime/Library/JavascriptProxy.cpp",
          "lib/Runtime/Library/JavascriptProxy.h",
          "lib/Runtime/Library/JavascriptReflect.cpp",
          "lib/Runtime/Library/JavascriptRegExpConstructor.cpp",
          "lib/Runtime/Library/JavascriptRegExpConstructor.h",
          "lib/Runtime/Library/JavascriptRegularExpression.cpp",
          "lib/Runtime/Library/JavascriptRegularExpression.h",
          "lib/Runtime/Library/JavascriptSet.cpp",
          "lib/Runtime/Library/JavascriptSet.h",
          "lib/Runtime/Library/JavascriptSetIterator.cpp",
          "lib/Runtime/Library/JavascriptSetIterator.h",
          "lib/Runtime/Library/JavascriptString.cpp",
          "lib/Runtime/Library/JavascriptString.h",
          "lib/Runtime/Library/JavascriptStringIterator.cpp",
          "lib/Runtime/Library/JavascriptStringIterator.h",
          "lib/Runtime/Library/JavascriptStringObject.cpp",
          "lib/Runtime/Library/JavascriptStringObject.h",
          "lib/Runtime/Library/JavascriptSymbol.cpp",
          "lib/Runtime/Library/JavascriptSymbol.h",
          "lib/Runtime/Library/JavascriptSymbolObject.cpp",
          "lib/Runtime/Library/JavascriptSymbolObject.h",
          "lib/Runtime/Library/JavascriptTypedNumber.cpp",
          "lib/Runtime/Library/JavascriptTypedNumber.h",
          "lib/Runtime/Library/JavascriptTypedObjectSlotAccessorFunction.cpp",
          "lib/Runtime/Library/JavascriptVariantDate.cpp",
          "lib/Runtime/Library/JavascriptVariantDate.h",
          "lib/Runtime/Library/JavascriptWeakMap.cpp",
          "lib/Runtime/Library/JavascriptWeakMap.h",
          "lib/Runtime/Library/JavascriptWeakSet.cpp",
          "lib/Runtime/Library/JavascriptWeakSet.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltInEngineInterfaceExtensionObject.cpp",
          "lib/Runtime/Library/JsBuiltInEngineInterfaceExtensionObject.h",
          "lib/Runtime/Library/LazyJSONString.cpp",
          "lib/Runtime/Library/LazyJSONString.h",
          "lib/Runtime/Library/MathLibrary.cpp",
          "lib/Runtime/Library/ModuleRoot.h",
          "lib/Runtime/Library/ObjectPrototypeObject.cpp",
          "lib/Runtime/Library/PropertyString.cpp",
          "lib/Runtime/Library/PropertyString.h",
          "lib/Runtime/Library/RegexHelper.cpp",
          "lib/Runtime/Library/RegexHelper.h",
          "lib/Runtime/Library/RootObjectBase.cpp",
          "lib/Runtime/Library/RootObjectBase.h",
          "lib/Runtime/Library/RuntimeFunction.cpp",
          "lib/Runtime/Library/RuntimeFunction.h",
          "lib/Runtime/Library/RuntimeLibraryPch.h",
          "lib/Runtime/Library/SameValueComparer.h",
          "lib/Runtime/Library/ScriptFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.h",
          "lib/Runtime/Library/SharedArrayBuffer.cpp",
          "lib/Runtime/Library/SharedArrayBuffer.h",
          "lib/Runtime/Library/StackScriptFunction.cpp",
          "lib/Runtime/Library/StackScriptFunction.h",
          "lib/Runtime/Library/StringCacheList.h",
          "lib/Runtime/Library/ThrowErrorObject.cpp",
          "lib/Runtime/Library/ThrowErrorObject.h",
          "lib/Runtime/Library/TypedArray.cpp",
          "lib/Runtime/Library/TypedArray.h",
          "lib/Runtime/Library/UriHelper.cpp",
          "lib/Runtime/Library/WabtInterface.cpp",
          "lib/Runtime/Library/WasmLibrary.h",
          "lib/Runtime/Library/WebAssembly.cpp",
          "lib/Runtime/Library/WebAssemblyEnvironment.cpp",
          "lib/Runtime/Library/WebAssemblyInstance.cpp",
          "lib/Runtime/Library/WebAssemblyInstance.h",
          "lib/Runtime/Library/WebAssemblyMemory.cpp",
          "lib/Runtime/Library/WebAssemblyMemory.h",
          "lib/Runtime/Library/WebAssemblyModule.cpp",
          "lib/Runtime/Library/WebAssemblyModule.h",
          "lib/Runtime/Library/WebAssemblyTable.cpp",
          "lib/Runtime/Library/WebAssemblyTable.h",
          "lib/Runtime/LibraryFunction.h",
          "lib/Runtime/Math/JavascriptMath.cpp",
          "lib/Runtime/Math/JavascriptMath.h",
          "lib/Runtime/Math/JavascriptMath.inl",
          "lib/Runtime/Math/WasmMath.inl",
          "lib/Runtime/PlatformAgnostic/Platform/Linux/PerfTrace.cpp",
          "lib/Runtime/PlatformAgnostic/Platform/Windows/HiResTimer.cpp",
          "lib/Runtime/PlatformAgnostic/Platform/Windows/PerfTrace.cpp",
          "lib/Runtime/Runtime.h",
          "lib/Runtime/SerializableFunctionFields.h",
          "lib/Runtime/Types/ActivationObject.cpp",
          "lib/Runtime/Types/ActivationObject.h",
          "lib/Runtime/Types/DeferredTypeHandler.cpp",
          "lib/Runtime/Types/DictionaryPropertyDescriptor.h",
          "lib/Runtime/Types/DictionaryTypeHandler.cpp",
          "lib/Runtime/Types/DynamicObject.cpp",
          "lib/Runtime/Types/DynamicObject.h",
          "lib/Runtime/Types/DynamicObjectPropertyEnumerator.cpp",
          "lib/Runtime/Types/DynamicObjectPropertyEnumerator.h",
          "lib/Runtime/Types/DynamicType.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "lib/Runtime/Types/EdgeJavascriptTypeId.h",
          "lib/Runtime/Types/JavascriptEnumerator.cpp",
          "lib/Runtime/Types/JavascriptEnumerator.h",
          "lib/Runtime/Types/NullTypeHandler.cpp",
          "lib/Runtime/Types/PathTypeHandler.cpp",
          "lib/Runtime/Types/PathTypeHandler.h",
          "lib/Runtime/Types/RecyclableObject.cpp",
          "lib/Runtime/Types/RecyclableObject.h",
          "lib/Runtime/Types/RecyclableObject.inl",
          "lib/Runtime/Types/ScriptFunctionType.cpp",
          "lib/Runtime/Types/ScriptFunctionType.h",
          "lib/Runtime/Types/SimpleDictionaryPropertyDescriptor.h",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.h",
          "lib/Runtime/Types/SimpleTypeHandler.cpp",
          "lib/Runtime/Types/SpreadArgument.cpp",
          "lib/Runtime/Types/SpreadArgument.h",
          "lib/Runtime/Types/StaticType.cpp",
          "lib/Runtime/Types/TypeHandler.cpp",
          "lib/Runtime/Types/TypeHandler.h",
          "lib/Runtime/Types/TypePath.h",
          "lib/Runtime/Types/TypePropertyCache.cpp",
          "lib/Runtime/Types/UnscopablesWrapperObject.cpp",
          "lib/Runtime/Types/UnscopablesWrapperObject.h",
          "lib/SCACore/CMakeLists.txt",
          "lib/SCACore/Chakra.SCACore.vcxproj",
          "lib/SCACore/SCACore.cpp",
          "lib/SCACore/SCACore.h",
          "lib/SCACore/SCACorePch.cpp",
          "lib/SCACore/SCACorePch.h",
          "lib/SCACore/SCADeserialization.cpp",
          "lib/SCACore/SCADeserialization.h",
          "lib/SCACore/SCAEngine.cpp",
          "lib/SCACore/SCAEngine.h",
          "lib/SCACore/SCAPropBag.cpp",
          "lib/SCACore/SCAPropBag.h",
          "lib/SCACore/SCASerialization.cpp",
          "lib/SCACore/SCASerialization.h",
          "lib/SCACore/SCATypes.h",
          "lib/SCACore/StreamHelper.cpp",
          "lib/SCACore/StreamHelper.h",
          "lib/SCACore/StreamReader.cpp",
          "lib/SCACore/StreamReader.h",
          "lib/SCACore/StreamWriter.cpp",
          "lib/SCACore/StreamWriter.h",
          "lib/WasmReader/EmptyWasmByteCodeWriter.h",
          "lib/WasmReader/WasmBinaryOpcodesSimd.h",
          "lib/WasmReader/WasmBinaryReader.cpp",
          "lib/WasmReader/WasmBinaryReader.h",
          "lib/WasmReader/WasmByteCodeGenerator.cpp",
          "lib/WasmReader/WasmByteCodeGenerator.h",
          "lib/WasmReader/WasmCustomReader.cpp",
          "lib/WasmReader/WasmCustomReader.h",
          "lib/WasmReader/WasmParseTree.cpp",
          "lib/WasmReader/WasmParseTree.h",
          "lib/WasmReader/WasmReaderBase.h",
          "lib/WasmReader/WasmSectionLimits.h",
          "lib/WasmReader/WasmSignature.cpp",
          "lib/wabt/.gitignore",
          "lib/wabt/CMakeLists.txt",
          "lib/wabt/README.md",
          "lib/wabt/chakra/wabtapi.cc",
          "lib/wabt/chakra/wabtapi.h",
          "lib/wabt/chakra/windows/config.h",
          "lib/wabt/src/apply-names.cc",
          "lib/wabt/src/binary-reader-interp.cc",
          "lib/wabt/src/binary-reader-interp.h",
          "lib/wabt/src/binary-reader-ir.cc",
          "lib/wabt/src/binary-reader-ir.h",
          "lib/wabt/src/binary-reader-logging.cc",
          "lib/wabt/src/binary-reader-logging.h",
          "lib/wabt/src/binary-reader-nop.h",
          "lib/wabt/src/binary-reader-objdump.cc",
          "lib/wabt/src/binary-reader-opcnt.cc",
          "lib/wabt/src/binary-reader-opcnt.h",
          "lib/wabt/src/binary-reader.cc",
          "lib/wabt/src/binary-reader.h",
          "lib/wabt/src/binary-writer-spec.cc",
          "lib/wabt/src/binary-writer-spec.h",
          "lib/wabt/src/binary-writer.cc",
          "lib/wabt/src/binary-writer.h",
          "lib/wabt/src/binary.h",
          "lib/wabt/src/c-writer.cc",
          "lib/wabt/src/c-writer.h",
          "lib/wabt/src/color.cc",
          "lib/wabt/src/color.h",
          "lib/wabt/src/common.h",
          "lib/wabt/src/config.h.in",
          "lib/wabt/src/emscripten-exported.json",
          "lib/wabt/src/emscripten-helpers.cc",
          "lib/wabt/src/error-formatter.cc",
          "lib/wabt/src/error-formatter.h",
          "lib/wabt/src/error-handler.cc",
          "lib/wabt/src/error-handler.h",
          "lib/wabt/src/error.h",
          "lib/wabt/src/expr-visitor.cc",
          "lib/wabt/src/expr-visitor.h",
          "lib/wabt/src/feature.cc",
          "lib/wabt/src/feature.def",
          "lib/wabt/src/feature.h",
          "lib/wabt/src/generate-names.cc",
          "lib/wabt/src/interp.cc",
          "lib/wabt/src/interp.h",
          "lib/wabt/src/interp/binary-reader-interp.cc",
          "lib/wabt/src/interp/binary-reader-interp.h",
          "lib/wabt/src/interp/interp-disassemble.cc",
          "lib/wabt/src/interp/interp-internal.h",
          "lib/wabt/src/interp/interp-trace.cc",
          "lib/wabt/src/interp/interp.cc",
          "lib/wabt/src/interp/interp.h",
          "lib/wabt/src/ir.cc",
          "lib/wabt/src/ir.h",
          "lib/wabt/src/leb128.cc",
          "lib/wabt/src/leb128.h",
          "lib/wabt/src/lexer-source-line-finder.cc",
          "lib/wabt/src/lexer-source-line-finder.h",
          "lib/wabt/src/lexer-source.cc",
          "lib/wabt/src/lexer-source.h",
          "lib/wabt/src/opcode-code-table.c",
          "lib/wabt/src/opcode-code-table.h",
          "lib/wabt/src/opcode.cc",
          "lib/wabt/src/opcode.def",
          "lib/wabt/src/opcode.h",
          "lib/wabt/src/option-parser.cc",
          "lib/wabt/src/prebuilt/wast-lexer-gen.cc",
          "lib/wabt/src/resolve-names.cc",
          "lib/wabt/src/resolve-names.h",
          "lib/wabt/src/test-binary-reader.cc",
          "lib/wabt/src/test-interp.cc",
          "lib/wabt/src/test-wast-parser.cc",
          "lib/wabt/src/token.def",
          "lib/wabt/src/tools/spectest-interp.cc",
          "lib/wabt/src/tools/wasm-interp.cc",
          "lib/wabt/src/tools/wasm-opcodecnt.cc",
          "lib/wabt/src/tools/wasm-strip.cc",
          "lib/wabt/src/tools/wasm-validate.cc",
          "lib/wabt/src/tools/wasm2c.cc",
          "lib/wabt/src/tools/wasm2wat.cc",
          "lib/wabt/src/tools/wast2json.cc",
          "lib/wabt/src/tools/wat-desugar.cc",
          "lib/wabt/src/tools/wat2wasm.cc",
          "lib/wabt/src/type-checker.cc",
          "lib/wabt/src/type-checker.h",
          "lib/wabt/src/validator.cc",
          "lib/wabt/src/validator.h",
          "lib/wabt/src/wabt.post.js",
          "lib/wabt/src/wast-lexer.cc",
          "lib/wabt/src/wast-lexer.h",
          "lib/wabt/src/wast-parser-lexer-shared.cc",
          "lib/wabt/src/wast-parser-lexer-shared.h",
          "lib/wabt/src/wast-parser.cc",
          "lib/wabt/src/wast-parser.h",
          "lib/wabt/src/wat-writer.cc",
          "lib/wabt/src/wat-writer.h",
          "lib/wabt/ubsan.blacklist",
          "lib/wabt/wabt.vcxproj",
          "manifests/Microsoft-Scripting-Chakra-Instrumentation.man",
          "netci.groovy",
          "pal/inc/rt/unknwn.h",
          "pal/pal.vcxproj",
          "pal/pal.vcxproj.filters",
          "pal/src/cruntime/filecrt.cpp",
          "pal/src/cruntime/misc.cpp",
          "pal/src/debug/debug.cpp",
          "pal/src/file/pal_file.cpp",
          "pal/src/include/pal/semaphore.hpp",
          "pal/src/map/map.cpp",
          "pal/src/misc/dbgmsg.cpp",
          "pal/src/objmgr/shmobject.cpp",
          "pal/src/objmgr/shmobjectmanager.cpp",
          "pal/src/sync/cs.cpp",
          "pal/src/synchmgr/synchmanager.cpp",
          "pal/src/synchobj/semaphore.cpp",
          "test/Array/CopyOnAccessArray_bugs.js",
          "test/Array/FilterWithTypedArray.js",
          "test/Array/array_flat.js",
          "test/Array/array_literal.baseline",
          "test/Array/array_qsortr_random.js",
          "test/Array/array_sort.baseline",
          "test/Array/array_sort.js",
          "test/Array/array_sort2.baseline",
          "test/Array/array_sort2.js",
          "test/Array/array_sort3.baseline",
          "test/Array/array_sort3.js",
          "test/Array/array_sort_random.js",
          "test/Array/bug_gh6320.js",
          "test/Array/rlexe.xml",
          "test/Array/toLocaleString.baseline",
          "test/Array/toLocaleString.js",
          "test/AsmJs/bug16252562.baseline",
          "test/AsmJs/bug16252562.js",
          "test/AsmJs/notBinaryPropertyDefinition.baseline",
          "test/AsmJs/notBinaryPropertyDefinition.js",
          "test/AsmJs/params.js",
          "test/AsmJs/relink.js",
          "test/AsmJs/rlexe.xml",
          "test/AsmJs/useasmbug.baseline",
          "test/AsmJs/useasmbug.js",
          "test/Basics/FloatComparison.js",
          "test/Basics/IdsWithEscapes.baseline",
          "test/Basics/Labels.js",
          "test/Basics/ScriptFunctionToStrings.js",
          "test/Basics/SpecialSymbolCapture.js",
          "test/Basics/TernaryOperator.js",
          "test/Basics/VerifySkipNestedDeferred.baseline",
          "test/Basics/rlexe.xml",
          "test/Basics/scopedaccessors.baseline",
          "test/BigInt/add.js",
          "test/BigInt/assign_by_value.js",
          "test/BigInt/bitwise_not.js",
          "test/BigInt/comparison.js",
          "test/BigInt/decrement.js",
          "test/BigInt/exception.js",
          "test/BigInt/global_object.js",
          "test/BigInt/increment.js",
          "test/BigInt/mixed.js",
          "test/BigInt/multiply.js",
          "test/BigInt/rlexe.xml",
          "test/BigInt/strictly_equal.js",
          "test/BigInt/subtract.js",
          "test/Bugs/Bug19767482.js",
          "test/Bugs/Bug19948792.js",
          "test/Bugs/bug_5572_wscript_loadscript_loadmodule.js",
          "test/Bugs/bug_5883.js",
          "test/Bugs/bug_6179.js",
          "test/Bugs/bug_6239.js",
          "test/Bugs/bug_6277.js",
          "test/Bugs/bug_OS18260560.js",
          "test/Bugs/bug_OS21193960.js",
          "test/Bugs/deferredStubBugs.js",
          "test/Bugs/function_id_destructured_reparse.js",
          "test/Bugs/loopcrash.js",
          "test/Bugs/misc_bugs.js",
          "test/Bugs/randombug.baseline",
          "test/Bugs/rlexe.xml",
          "test/Bugs/skipping_nested_deferred_incorrect_function_id.js",
          "test/ConfigParsing/interspersednewline.testconfig",
          "test/ConfigParsing/interspersednewline_leadingwhitespace.testconfig",
          "test/ConfigParsing/interspersednewline_whitespace.testconfig",
          "test/ConfigParsing/leadingwhitespace.testconfig",
          "test/ConfigParsing/standard.testconfig",
          "test/Date/DateGetSet.baseline",
          "test/Date/DateGetSet.js",
          "test/Date/DateParse3.js",
          "test/Date/parseInvalidISO.baseline",
          "test/Debugger/JsDebuggerAttachDetach.js",
          "test/Debugger/JsDebuggerAttachDetach.js.baseline",
          "test/Debugger/JsDebuggerAttachDetach.js.dbg.baseline",
          "test/Debugger/JsDiagGetStackProperties.js.dbg.baseline",
          "test/Debugger/JsrtDebugUtilsAddPropertyType.js.dbg.baseline",
          "test/Debugger/MultipleContextStack.js.dbg.baseline",
          "test/Debugger/dumpFunctionProperties.js.dbg.baseline",
          "test/Debugger/rlexe.xml",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_all.js.dbg.baseline",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_default.js.dbg.baseline",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_with_sticky.js.dbg.baseline",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_with_unicode.js.dbg.baseline",
          "test/DebuggerCommon/ES6_intl_simple_attach.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_const_reassignment_globalscope.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_eval_nonstrict.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_eval_strict_fn.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_for.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_forin.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_redcl.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_shadow_eval_with.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_trycatch_simple_fast.js.dbg.baseline",
          "test/DebuggerCommon/ES6_proto_invalidation.js.dbg.baseline",
          "test/DebuggerCommon/ES6_proto_simple.js.dbg.baseline",
          "test/DebuggerCommon/ES6_proto_userDefinedObject.js.dbg.baseline",
          "test/DebuggerCommon/ES6_spread.js.dbg.baseline",
          "test/DebuggerCommon/IntlInit.js.dbg.baseline",
          "test/DebuggerCommon/JIT_localsAtNativeFrame1.js.dbg.baseline",
          "test/DebuggerCommon/JIT_localsAtNativeFrame2.js.dbg.baseline",
          "test/DebuggerCommon/ObjLit_step_into_out.js.dbg.baseline",
          "test/DebuggerCommon/ObjLit_step_over.js.dbg.baseline",
          "test/DebuggerCommon/TempStrExpr.js.dbg.baseline",
          "test/DebuggerCommon/argument_disp.js.dbg.baseline",
          "test/DebuggerCommon/array_prototest.js.dbg.baseline",
          "test/DebuggerCommon/async.js.dbg.baseline",
          "test/DebuggerCommon/attachWithDeferParse.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeActivationObjectCapture.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeBasicLetConstTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeForTest.bug183991.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeFunctionDeclarationGlobalTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalBlockTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalDeadZoneTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalSlotArrayTest.bug222631.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeNestedFunctionTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeSlotArrayCapture.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeSlotArrayCaptureAttach.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeSlotArrayTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeTryCatchTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeWithTest.js.dbg.baseline",
          "test/DebuggerCommon/blockscope_func_declaration_ES6.js.dbg.baseline",
          "test/DebuggerCommon/blockscope_func_expression_ES6.js.dbg.baseline",
          "test/DebuggerCommon/blockscope_func_insidescopes.js.dbg.baseline",
          "test/DebuggerCommon/breakpoints.js.dbg.baseline",
          "test/DebuggerCommon/bug_177146.js.dbg.baseline",
          "test/DebuggerCommon/bug_291582.js.dbg.baseline",
          "test/DebuggerCommon/bug_543550.js.dbg.baseline",
          "test/DebuggerCommon/bug_592506.js.dbg.baseline",
          "test/DebuggerCommon/bug_622304.js.dbg.baseline",
          "test/DebuggerCommon/bug_os_2946365.js.dbg.baseline",
          "test/DebuggerCommon/catchInspection.js",
          "test/DebuggerCommon/catchInspection.js.dbg.baseline",
          "test/DebuggerCommon/default.js.dbg.baseline",
          "test/DebuggerCommon/detachBasicTest.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-2.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-3.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-4.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-5.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-6.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl.js.dbg.baseline",
          "test/DebuggerCommon/evaluate.js.dbg.baseline",
          "test/DebuggerCommon/failedasm.js",
          "test/DebuggerCommon/funcExprCrash_150491.js.dbg.baseline",
          "test/DebuggerCommon/funcExprName.js.dbg.baseline",
          "test/DebuggerCommon/funcSource.js.dbg.baseline",
          "test/DebuggerCommon/getterInspection.js.dbg.baseline",
          "test/DebuggerCommon/globalFuncVars.js.dbg.baseline",
          "test/DebuggerCommon/indexprop.js.dbg.baseline",
          "test/DebuggerCommon/jit_exprEval1.js.dbg.baseline",
          "test/DebuggerCommon/multiple_argumentsdisp_safeguard.js.dbg.baseline",
          "test/DebuggerCommon/negzerotest.js.dbg.baseline",
          "test/DebuggerCommon/protoTest2.js.dbg.baseline",
          "test/DebuggerCommon/returnedvaluetests1.js",
          "test/DebuggerCommon/returnedvaluetests1.js.dbg.baseline",
          "test/DebuggerCommon/returnedvaluetests2.js.dbg.baseline",
          "test/DebuggerCommon/rlexe.xml",
          "test/DebuggerCommon/setframe.js.dbg.baseline",
          "test/DebuggerCommon/shadow_with.js.dbg.baseline",
          "test/DebuggerCommon/step_in_ES6_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_in_from_interpreted_function_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_ES6.js.dbg.baseline",
          "test/DebuggerCommon/step_out_direct_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_from_JITted_function_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_from_catch_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_from_interpreted_function_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_over_ES6_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_over_JITd_fn_from_Intrprt_fn_attach.js.dbg.baseline",
          "test/DebuggerCommon/stringkeyedtypehandler.js.dbg.baseline",
          "test/DebuggerCommon/symbols.js.dbg.baseline",
          "test/DebuggerCommon/targeted.js.dbg.baseline",
          "test/DebuggerCommon/with_shadow.js.dbg.baseline",
          "test/EH/hasBailedOutBug3.js",
          "test/EH/hasBailedOutBug4.js",
          "test/EH/optional-catch-binding.js",
          "test/EH/regionBugSpecHoisting.js",
          "test/EH/rlexe.xml",
          "test/EH/try6.baseline",
          "test/Error/variousErrors3.baseline",
          "test/FixedFields/NonFixedFieldHoist.baseline",
          "test/FixedFields/NonFixedFieldHoist.js",
          "test/FixedFields/rlexe.xml",
          "test/FlowGraph/byteCodeUpwardExposedUsed.js",
          "test/FlowGraph/rlexe.xml",
          "test/Function/LabelFuncAsWithStmt.baseline",
          "test/Function/LabelFuncAsWithStmt.js",
          "test/Function/apply3.baseline",
          "test/Function/callsideeffects_3.baseline",
          "test/Function/deleteProperty.js",
          "test/Function/funcAndboundFuncLength.js",
          "test/Function/rlexe.xml",
          "test/Function/stackArgsLenConstOpt.baseline",
          "test/Function/stackArgsLenConstOpt.js",
          "test/Function/stackArgsWithInlineeBailOut.js",
          "test/Function/stackargs.baseline",
          "test/Function/toString.baseline",
          "test/Function/toStringAll.baseline",
          "test/Function/toStringAll.js",
          "test/GlobalFunctions/CanDeclareGlobalFunction.js",
          "test/GlobalFunctions/CanDeclareGlobalFunctionNonEval.baseline",
          "test/GlobalFunctions/CanDeclareGlobalFunctionNonEval.js",
          "test/GlobalFunctions/rlexe.xml",
          "test/InlineCaches/MissingProtoInval.js",
          "test/InlineCaches/rlexe.xml",
          "test/Intl/Collator.js",
          "test/Intl/GetCanonicalLocales.js",
          "test/Intl/IntlIdentities.js",
          "test/Intl/IntlReturnedValueTests.js.dbg.baseline",
          "test/Intl/NumberFormat.js",
          "test/Intl/SupportedLocalesOf.js",
          "test/Intl/common.js",
          "test/JSON/arguments.js",
          "test/JSON/cacheassert.js",
          "test/JSON/jsonerrorbuffer.js",
          "test/JSON/rlexe.xml",
          "test/JsBuiltIns/common-functionality.js",
          "test/JsBuiltIns/rlexe.xml",
          "test/LetConst/delete.js",
          "test/LetConst/seal.js",
          "test/LetConst/seal1.js",
          "test/LetConst/seal2.js",
          "test/Lib/error.baseline",
          "test/Lib/getclass1.baseline",
          "test/Lib/proxyenum.baseline",
          "test/Lib/proxyenum.js",
          "test/Lib/rlexe.xml",
          "test/Miscellaneous/KeepContextInSuper.js",
          "test/Miscellaneous/MayHaveSideEffectOnNodeSO.js",
          "test/Miscellaneous/rlexe.xml",
          "test/Number/NegativeNaN.baseline",
          "test/Number/NegativeNaN.js",
          "test/Number/NumericSeparator.js",
          "test/Number/rlexe.xml",
          "test/Object/ObjectRest_JIT.js",
          "test/Object/ObjectRest_Simple.js",
          "test/Object/ObjectSpread_JIT.js",
          "test/Object/ObjectSpread_Limits.js",
          "test/Object/ObjectSpread_Simple.js",
          "test/Object/assign.baseline",
          "test/Object/bigconstructorbug.js",
          "test/Object/fromEntries.js",
          "test/Object/propertyDescriptorNonObject.js",
          "test/Object/rlexe.xml",
          "test/Object/toStringWithGlobalObject.baseline",
          "test/Object/toStringWithGlobalObject.js",
          "test/Optimizer/PrePassEntanglement.js",
          "test/Optimizer/UnreachableCode.baseline",
          "test/Optimizer/argrestoreintry.js",
          "test/Optimizer/aux_slot_type_transition.js",
          "test/Optimizer/aux_slot_type_transition_2.js",
          "test/Optimizer/bugconstfoldobject.baseline",
          "test/Optimizer/bugconstfoldobject.js",
          "test/Optimizer/bugconstfoldundefined.baseline",
          "test/Optimizer/bugconstfoldundefined.js",
          "test/Optimizer/rlexe.xml",
          "test/Optimizer/test152.js",
          "test/Optimizer/testsimplepathbrfold.baseline",
          "test/PRE/pre1.baseline",
          "test/PRE/rlexe.xml",
          "test/Prototypes/NoPrototypeForMethod.js",
          "test/Prototypes/initProto.baseline",
          "test/Prototypes/initProto.js",
          "test/Prototypes/rlexe.xml",
          "test/RegAlloc/RegAllocBug_0.js",
          "test/RegAlloc/rlexe.xml",
          "test/Regex/BoiHardFail.baseline",
          "test/Regex/Bug1153694.baseline",
          "test/Regex/Bug1153694.js",
          "test/Regex/configurableTest.baseline",
          "test/Regex/configurableTest.js",
          "test/Regex/dotAll.js",
          "test/Regex/regex_replacefn.baseline",
          "test/Regex/regex_replacefn.js",
          "test/Regex/rlexe.xml",
          "test/Scanner/Hashbang.js",
          "test/Scanner/NumericLiteralSuffix.js",
          "test/Scanner/rlexe.xml",
          "test/StackTrace/ErrorPrototype.baseline",
          "test/Strings/constructorConcat.js",
          "test/Strings/fromCodePoint.js",
          "test/Strings/rlexe.xml",
          "test/Strings/trimStart_trimEnd.js",
          "test/TTBasic/evalRecord.baseline",
          "test/TTBasic/evalReplay.baseline",
          "test/TTBasic/scopedAccessorsRecord.baseline",
          "test/TTBasic/scopedAccessorsReplay.baseline",
          "test/WasmSpec.MultiValue/rlexe.xml",
          "test/WasmSpec/baselines/address.baseline",
          "test/WasmSpec/baselines/align.baseline",
          "test/WasmSpec/baselines/atomic_load.baseline",
          "test/WasmSpec/baselines/atomic_store.baseline",
          "test/WasmSpec/baselines/binary.baseline",
          "test/WasmSpec/baselines/block.baseline",
          "test/WasmSpec/baselines/br.baseline",
          "test/WasmSpec/baselines/br_if.baseline",
          "test/WasmSpec/baselines/br_table.baseline",
          "test/WasmSpec/baselines/break-drop.baseline",
          "test/WasmSpec/baselines/call.baseline",
          "test/WasmSpec/baselines/call_indirect.baseline",
          "test/WasmSpec/baselines/chakra/chakra_atomic_load.baseline",
          "test/WasmSpec/baselines/chakra/chakra_atomic_store.baseline",
          "test/WasmSpec/baselines/chakra_atomic_load.baseline",
          "test/WasmSpec/baselines/chakra_atomic_store.baseline",
          "test/WasmSpec/baselines/chakra_extends_i32.baseline",
          "test/WasmSpec/baselines/chakra_extends_i64.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_extends_i32.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_extends_i64.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_i32.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_i64.baseline",
          "test/WasmSpec/baselines/chakra_i32.baseline",
          "test/WasmSpec/baselines/chakra_i64.baseline",
          "test/WasmSpec/baselines/const.baseline",
          "test/WasmSpec/baselines/conversions.baseline",
          "test/WasmSpec/baselines/custom.baseline",
          "test/WasmSpec/baselines/data.baseline",
          "test/WasmSpec/baselines/elem.baseline",
          "test/WasmSpec/baselines/endianness.baseline",
          "test/WasmSpec/baselines/exports.baseline",
          "test/WasmSpec/baselines/extends_i32.baseline",
          "test/WasmSpec/baselines/extends_i64.baseline",
          "test/WasmSpec/baselines/f32.baseline",
          "test/WasmSpec/baselines/f32_bitwise.baseline",
          "test/WasmSpec/baselines/f32_cmp.baseline",
          "test/WasmSpec/baselines/f64.baseline",
          "test/WasmSpec/baselines/f64_bitwise.baseline",
          "test/WasmSpec/baselines/f64_cmp.baseline",
          "test/WasmSpec/baselines/fac.baseline",
          "test/WasmSpec/baselines/features/extends/extends_i32.baseline",
          "test/WasmSpec/baselines/features/extends/extends_i64.baseline",
          "test/WasmSpec/baselines/features/nontrapping/nontrapping_conversions.baseline",
          "test/WasmSpec/baselines/features/threads/atomic_load.baseline",
          "test/WasmSpec/baselines/features/threads/atomic_store.baseline",
          "test/WasmSpec/baselines/float_exprs.baseline",
          "test/WasmSpec/baselines/float_literals.baseline",
          "test/WasmSpec/baselines/float_memory.baseline",
          "test/WasmSpec/baselines/float_misc.baseline",
          "test/WasmSpec/baselines/forward.baseline",
          "test/WasmSpec/baselines/func.baseline",
          "test/WasmSpec/baselines/func_ptrs.baseline",
          "test/WasmSpec/baselines/get_local.baseline",
          "test/WasmSpec/baselines/globals.baseline",
          "test/WasmSpec/baselines/i32.baseline",
          "test/WasmSpec/baselines/i64.baseline",
          "test/WasmSpec/baselines/if.baseline",
          "test/WasmSpec/baselines/imports.baseline",
          "test/WasmSpec/baselines/inline-module.baseline",
          "test/WasmSpec/baselines/int_exprs.baseline",
          "test/WasmSpec/baselines/int_literals.baseline",
          "test/WasmSpec/baselines/jsapi.baseline",
          "test/WasmSpec/baselines/labels.baseline",
          "test/WasmSpec/baselines/left-to-right.baseline",
          "test/WasmSpec/baselines/linking.baseline",
          "test/WasmSpec/baselines/loop.baseline",
          "test/WasmSpec/baselines/memory.baseline",
          "test/WasmSpec/baselines/memory_redundancy.baseline",
          "test/WasmSpec/baselines/memory_trap.baseline",
          "test/WasmSpec/baselines/nontrapping_conversions.baseline",
          "test/WasmSpec/baselines/nop.baseline",
          "test/WasmSpec/baselines/resizing.baseline",
          "test/WasmSpec/baselines/return.baseline",
          "test/WasmSpec/baselines/select.baseline",
          "test/WasmSpec/baselines/set_local.baseline",
          "test/WasmSpec/baselines/skip-stack-guard-page.baseline",
          "test/WasmSpec/baselines/stack.baseline",
          "test/WasmSpec/baselines/start.baseline",
          "test/WasmSpec/baselines/store_retval.baseline",
          "test/WasmSpec/baselines/switch.baseline",
          "test/WasmSpec/baselines/tee_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/address.baseline",
          "test/WasmSpec/baselines/testsuite/core/align.baseline",
          "test/WasmSpec/baselines/testsuite/core/binary.baseline",
          "test/WasmSpec/baselines/testsuite/core/block.baseline",
          "test/WasmSpec/baselines/testsuite/core/br.baseline",
          "test/WasmSpec/baselines/testsuite/core/br_if.baseline",
          "test/WasmSpec/baselines/testsuite/core/br_table.baseline",
          "test/WasmSpec/baselines/testsuite/core/break-drop.baseline",
          "test/WasmSpec/baselines/testsuite/core/call.baseline",
          "test/WasmSpec/baselines/testsuite/core/call_indirect.baseline",
          "test/WasmSpec/baselines/testsuite/core/const.baseline",
          "test/WasmSpec/baselines/testsuite/core/conversions.baseline",
          "test/WasmSpec/baselines/testsuite/core/custom.baseline",
          "test/WasmSpec/baselines/testsuite/core/data.baseline",
          "test/WasmSpec/baselines/testsuite/core/elem.baseline",
          "test/WasmSpec/baselines/testsuite/core/endianness.baseline",
          "test/WasmSpec/baselines/testsuite/core/exports.baseline",
          "test/WasmSpec/baselines/testsuite/core/f32.baseline",
          "test/WasmSpec/baselines/testsuite/core/f32_bitwise.baseline",
          "test/WasmSpec/baselines/testsuite/core/f32_cmp.baseline",
          "test/WasmSpec/baselines/testsuite/core/f64.baseline",
          "test/WasmSpec/baselines/testsuite/core/f64_bitwise.baseline",
          "test/WasmSpec/baselines/testsuite/core/f64_cmp.baseline",
          "test/WasmSpec/baselines/testsuite/core/fac.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_exprs.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_literals.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_memory.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_misc.baseline",
          "test/WasmSpec/baselines/testsuite/core/forward.baseline",
          "test/WasmSpec/baselines/testsuite/core/func.baseline",
          "test/WasmSpec/baselines/testsuite/core/func_ptrs.baseline",
          "test/WasmSpec/baselines/testsuite/core/get_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/globals.baseline",
          "test/WasmSpec/baselines/testsuite/core/i32.baseline",
          "test/WasmSpec/baselines/testsuite/core/i64.baseline",
          "test/WasmSpec/baselines/testsuite/core/if.baseline",
          "test/WasmSpec/baselines/testsuite/core/imports.baseline",
          "test/WasmSpec/baselines/testsuite/core/inline-module.baseline",
          "test/WasmSpec/baselines/testsuite/core/int_exprs.baseline",
          "test/WasmSpec/baselines/testsuite/core/int_literals.baseline",
          "test/WasmSpec/baselines/testsuite/core/labels.baseline",
          "test/WasmSpec/baselines/testsuite/core/left-to-right.baseline",
          "test/WasmSpec/baselines/testsuite/core/linking.baseline",
          "test/WasmSpec/baselines/testsuite/core/load.baseline",
          "test/WasmSpec/baselines/testsuite/core/loop.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory_grow.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory_redundancy.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory_trap.baseline",
          "test/WasmSpec/baselines/testsuite/core/nop.baseline",
          "test/WasmSpec/baselines/testsuite/core/return.baseline",
          "test/WasmSpec/baselines/testsuite/core/select.baseline",
          "test/WasmSpec/baselines/testsuite/core/set_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/skip-stack-guard-page.baseline",
          "test/WasmSpec/baselines/testsuite/core/stack.baseline",
          "test/WasmSpec/baselines/testsuite/core/start.baseline",
          "test/WasmSpec/baselines/testsuite/core/store.baseline",
          "test/WasmSpec/baselines/testsuite/core/switch.baseline",
          "test/WasmSpec/baselines/testsuite/core/tee_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/token.baseline",
          "test/WasmSpec/baselines/testsuite/core/traps.baseline",
          "test/WasmSpec/baselines/testsuite/core/type.baseline",
          "test/WasmSpec/baselines/testsuite/core/typecheck.baseline",
          "test/WasmSpec/baselines/testsuite/core/unreachable.baseline",
          "test/WasmSpec/baselines/testsuite/core/unreached-invalid.baseline",
          "test/WasmSpec/baselines/testsuite/core/unwind.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-custom-section-id.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-import-field.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-import-module.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-invalid-encoding.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/compile.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/instantiate-bad-imports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/instantiate.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/validate.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/value-get-set.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/valueOf.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/constructor-bad-imports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/exports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/interface.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/buffer.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/grow.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/customSections.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/exports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/imports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/get-set.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/grow.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/length.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/toString.any.baseline",
          "test/WasmSpec/baselines/token.baseline",
          "test/WasmSpec/baselines/traps.baseline",
          "test/WasmSpec/baselines/type.baseline",
          "test/WasmSpec/baselines/typecheck.baseline",
          "test/WasmSpec/baselines/unreachable.baseline",
          "test/WasmSpec/baselines/unreached-invalid.baseline",
          "test/WasmSpec/baselines/unwind.baseline",
          "test/WasmSpec/baselines/utf8-custom-section-id.baseline",
          "test/WasmSpec/baselines/utf8-import-field.baseline",
          "test/WasmSpec/baselines/utf8-import-module.baseline",
          "test/WasmSpec/baselines/utf8-invalid-encoding.baseline",
          "test/WasmSpec/convert-test-suite/config.json",
          "test/WasmSpec/convert-test-suite/config.json5",
          "test/WasmSpec/convert-test-suite/index.js",
          "test/WasmSpec/convert-test-suite/package-lock.json",
          "test/WasmSpec/convert-test-suite/package.json",
          "test/WasmSpec/jsapi.js",
          "test/WasmSpec/rlexe.xml",
          "test/WasmSpec/testsuite.rev",
          "test/WasmSpec/testsuite/README.md",
          "test/WasmSpec/testsuite/Todo.md",
          "test/WasmSpec/testsuite/build.py",
          "test/WasmSpec/testsuite/core/.gitignore",
          "test/WasmSpec/testsuite/core/address.wast",
          "test/WasmSpec/testsuite/core/align.wast",
          "test/WasmSpec/testsuite/core/binary.wast",
          "test/WasmSpec/testsuite/core/block.wast",
          "test/WasmSpec/testsuite/core/br.wast",
          "test/WasmSpec/testsuite/core/br_if.wast",
          "test/WasmSpec/testsuite/core/br_table.wast",
          "test/WasmSpec/testsuite/core/call.wast",
          "test/WasmSpec/testsuite/core/call_indirect.wast",
          "test/WasmSpec/testsuite/core/float_exprs.wast",
          "test/WasmSpec/testsuite/core/float_literals.wast",
          "test/WasmSpec/testsuite/core/float_misc.wast",
          "test/WasmSpec/testsuite/core/get_local.wast",
          "test/WasmSpec/testsuite/core/globals.wast",
          "test/WasmSpec/testsuite/core/if.wast",
          "test/WasmSpec/testsuite/core/labels.wast",
          "test/WasmSpec/testsuite/core/load.wast",
          "test/WasmSpec/testsuite/core/loop.wast",
          "test/WasmSpec/testsuite/core/memory.wast",
          "test/WasmSpec/testsuite/core/memory_grow.wast",
          "test/WasmSpec/testsuite/core/names.wast",
          "test/WasmSpec/testsuite/core/nop.wast",
          "test/WasmSpec/testsuite/core/resizing.wast",
          "test/WasmSpec/testsuite/core/return.wast",
          "test/WasmSpec/testsuite/core/select.wast",
          "test/WasmSpec/testsuite/core/set_local.wast",
          "test/WasmSpec/testsuite/core/store.wast",
          "test/WasmSpec/testsuite/core/store_retval.wast",
          "test/WasmSpec/testsuite/core/tee_local.wast",
          "test/WasmSpec/testsuite/core/unreachable.wast",
          "test/WasmSpec/testsuite/core/unwind.wast",
          "test/WasmSpec/testsuite/harness/async_index.js",
          "test/WasmSpec/testsuite/harness/sync_index.js",
          "test/WasmSpec/testsuite/harness/testharness.css",
          "test/WasmSpec/testsuite/harness/testharness.js",
          "test/WasmSpec/testsuite/harness/testharnessreport.js",
          "test/WasmSpec/testsuite/harness/wasm-constants.js",
          "test/WasmSpec/testsuite/harness/wasm-module-builder.js",
          "test/WasmSpec/testsuite/harness/wast.js",
          "test/WasmSpec/testsuite/html/indexeddb.js",
          "test/WasmSpec/testsuite/js-api/LICENSE.md",
          "test/WasmSpec/testsuite/js-api/README.md",
          "test/WasmSpec/testsuite/js-api/assertions.js",
          "test/WasmSpec/testsuite/js-api/bad-imports.js",
          "test/WasmSpec/testsuite/js-api/constructor/compile.any.js",
          "test/WasmSpec/testsuite/js-api/constructor/instantiate-bad-imports.any.js",
          "test/WasmSpec/testsuite/js-api/constructor/instantiate.any.js",
          "test/WasmSpec/testsuite/js-api/constructor/validate.any.js",
          "test/WasmSpec/testsuite/js-api/global/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/global/toString.any.js",
          "test/WasmSpec/testsuite/js-api/global/value-get-set.any.js",
          "test/WasmSpec/testsuite/js-api/global/valueOf.any.js",
          "test/WasmSpec/testsuite/js-api/instance/constructor-bad-imports.any.js",
          "test/WasmSpec/testsuite/js-api/instance/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/instance/exports.any.js",
          "test/WasmSpec/testsuite/js-api/instance/toString.any.js",
          "test/WasmSpec/testsuite/js-api/instanceTestFactory.js",
          "test/WasmSpec/testsuite/js-api/interface.any.js",
          "test/WasmSpec/testsuite/js-api/jsapi.js",
          "test/WasmSpec/testsuite/js-api/limits.js",
          "test/WasmSpec/testsuite/js-api/memory/buffer.any.js",
          "test/WasmSpec/testsuite/js-api/memory/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/memory/grow.any.js",
          "test/WasmSpec/testsuite/js-api/memory/toString.any.js",
          "test/WasmSpec/testsuite/js-api/module/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/module/customSections.any.js",
          "test/WasmSpec/testsuite/js-api/module/exports.any.js",
          "test/WasmSpec/testsuite/js-api/module/imports.any.js",
          "test/WasmSpec/testsuite/js-api/module/toString.any.js",
          "test/WasmSpec/testsuite/js-api/table/assertions.js",
          "test/WasmSpec/testsuite/js-api/table/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/table/get-set.any.js",
          "test/WasmSpec/testsuite/js-api/table/grow.any.js",
          "test/WasmSpec/testsuite/js-api/table/length.any.js",
          "test/WasmSpec/testsuite/js-api/table/toString.any.js",
          "test/WasmSpec/testsuite/js-api/wasm-constants.js",
          "test/WasmSpec/testsuite/js-api/wasm-module-builder.js",
          "test/WasmSpec/updateTests.cmd",
          "test/es5/Lex_u3.baseline",
          "test/es5/Lex_u3.js",
          "test/es5/ObjLitGetSet.baseline",
          "test/es5/SemicolonAfterBlockEs5.baseline",
          "test/es5/defineIndexProperty.js",
          "test/es5/freeze.baseline",
          "test/es5/freeze.js",
          "test/es5/hasItem.jshost.baseline",
          "test/es5/objlitgetset3.js",
          "test/es5/rlexe.xml",
          "test/es5/seal.baseline",
          "test/es5/seal.js",
          "test/es5/setget.js",
          "test/es6/ES6ArrayAPI.js",
          "test/es6/ES6Function_bugs.js",
          "test/es6/ES6NewTarget.js",
          "test/es6/ES6Promise.js",
          "test/es6/ES6PromiseAsync.baseline",
          "test/es6/ES6PromiseAsync.js",
          "test/es6/ES6StringTemplate.js",
          "test/es6/ES6Super.js",
          "test/es6/ES6TypedArrayExtensions.js",
          "test/es6/HTMLComments.js",
          "test/es6/OS_917200.js",
          "test/es6/ProxyInProxy.baseline",
          "test/es6/ProxyInProxy.js",
          "test/es6/bug_19225364.baseline",
          "test/es6/bug_19225364.js",
          "test/es6/bug_issue_5994.baseline",
          "test/es6/bug_issue_5994.js",
          "test/es6/classes.js",
          "test/es6/classes_bugfixes.js",
          "test/es6/computedPropertyToString.js",
          "test/es6/default.js",
          "test/es6/destructuring_bugs.js",
          "test/es6/destructuring_obj.js",
          "test/es6/es6toLength.js",
          "test/es6/generator-jit-bugs.js",
          "test/es6/generators-syntax.js",
          "test/es6/lambda1.js",
          "test/es6/letconst_global.baseline",
          "test/es6/proxybugs.js",
          "test/es6/proxyconstruction.js",
          "test/es6/proxyenumremoval.js",
          "test/es6/regex-symbols.js",
          "test/es6/regexflags-disabled-features.js",
          "test/es6/regexflags.js",
          "test/es6/rest.js",
          "test/es6/rlexe.xml",
          "test/es6/set_functionality.js",
          "test/es6/super_bugs.js",
          "test/es6/toPrimitive.js",
          "test/es6/toStringTag.js",
          "test/es6/trailingcomma.js",
          "test/es6/weakmap_functionality.js",
          "test/es6module/ImportMeta.js",
          "test/es6module/bug_issue_3257.js",
          "test/es6module/bug_issue_3257/mod/mod0.js",
          "test/es6module/bug_issue_3257/mod1.js",
          "test/es6module/bug_issue_3257/mod2/mod2.js",
          "test/es6module/bug_issue_3257/script/script0.js",
          "test/es6module/bug_issue_5777.js",
          "test/es6module/dynamic-module-functionality.js",
          "test/es6module/dynamic_import_promises_5796.js",
          "test/es6module/export_namespace_as.js",
          "test/es6module/module-bugfixes.js",
          "test/es6module/module-namespace.js",
          "test/es6module/module-syntax.js",
          "test/es6module/multiple-roots-circular.js",
          "test/es6module/otherModule.js",
          "test/es6module/rlexe.xml",
          "test/es7/async-generator-apis.js",
          "test/es7/async-generator-functionality.js",
          "test/es7/asyncawait-functionality.baseline",
          "test/es7/asyncawait-functionality.js",
          "test/es7/asyncawait-syntax.js",
          "test/es7/deferparseclass.js",
          "test/es7/for-await-of.js",
          "test/es7/globalThis.js",
          "test/es7/json_superset.js",
          "test/es7/rlexe.xml",
          "test/es7/stringpad.js",
          "test/es7/symboldescription.js",
          "test/es7/wellformedJSON.js",
          "test/fieldopts/depolymorph01.js",
          "test/fieldopts/rlexe.xml",
          "test/inlining/InlineCallInstanceFunction.baseline",
          "test/inlining/InlineCallInstanceFunction.js",
          "test/inlining/InlineCallbackCallBailout.baseline",
          "test/inlining/InlineCallbackCallBailout.js",
          "test/inlining/InlineCallbacks.baseline",
          "test/inlining/InlineCallbacks.js",
          "test/inlining/applyBailoutArgs.js",
          "test/inlining/argoptbugs.js",
          "test/inlining/bug_gh6303.js",
          "test/inlining/callTarget.js",
          "test/inlining/profilingbug.js",
          "test/inlining/rlexe.xml",
          "test/loop/MemOp.baseline",
          "test/loop/MemOp.js",
          "test/loop/bailOutOfMemOp.baseline",
          "test/loop/bailOutOfMemOp.js",
          "test/loop/loopinversion.js",
          "test/loop/rlexe.xml",
          "test/native-tests/test_native.sh",
          "test/rlexedirs.xml",
          "test/runtests.py",
          "test/strict/11.this.baseline",
          "test/strict/11.this_sm.baseline",
          "test/strict/classComputedPropertyName.js",
          "test/strict/evalThis.baseline",
          "test/strict/evalThisNested.baseline",
          "test/strict/nonSimpleParameterList.baseline",
          "test/strict/rlexe.xml",
          "test/typedarray/definitetypedarray.js",
          "test/typedarray/nan.baseline",
          "test/typedarray/nan.x64.baseline",
          "test/typedarray/reflect_defineProperty.js",
          "test/typedarray/rlexe.xml",
          "test/typedarray/samethread.baseline",
          "test/utf8/rlexe.xml",
          "test/wasm.simd/b16x8.wasm",
          "test/wasm.simd/b16x8.wast",
          "test/wasm.simd/b32x4.wasm",
          "test/wasm.simd/b32x4.wast",
          "test/wasm.simd/b8x16.wasm",
          "test/wasm.simd/b8x16.wast",
          "test/wasm.simd/binaryArithmeticTests.wasm",
          "test/wasm.simd/binaryArithmeticTests.wast",
          "test/wasm.simd/buildExtractTests.js",
          "test/wasm.simd/comp.wasm",
          "test/wasm.simd/comp.wast",
          "test/wasm.simd/const.wasm",
          "test/wasm.simd/const.wast",
          "test/wasm.simd/f32x4.wasm",
          "test/wasm.simd/f32x4.wast",
          "test/wasm.simd/i16x8_s.wasm",
          "test/wasm.simd/i16x8_s.wast",
          "test/wasm.simd/i16x8_u.wasm",
          "test/wasm.simd/i16x8_u.wast",
          "test/wasm.simd/i32x4.wasm",
          "test/wasm.simd/i32x4.wast",
          "test/wasm.simd/i8x16_s.wasm",
          "test/wasm.simd/i8x16_s.wast",
          "test/wasm.simd/i8x16_u.wasm",
          "test/wasm.simd/i8x16_u.wast",
          "test/wasm.simd/int64x2.wasm",
          "test/wasm.simd/int64x2.wast",
          "test/wasm.simd/loadTests.js",
          "test/wasm.simd/loads.wasm",
          "test/wasm.simd/loads.wast",
          "test/wasm.simd/logical.wasm",
          "test/wasm.simd/logical.wast",
          "test/wasm.simd/math.wasm",
          "test/wasm.simd/math.wast",
          "test/wasm.simd/neg.wasm",
          "test/wasm.simd/neg.wast",
          "test/wasm.simd/replace.wasm",
          "test/wasm.simd/replace.wast",
          "test/wasm.simd/rlexe.xml",
          "test/wasm.simd/splat.wasm",
          "test/wasm.simd/splat.wast",
          "test/wasm.simd/storeTests.js",
          "test/wasm.simd/stores.wasm",
          "test/wasm.simd/stores.wast",
          "test/wasm.simd/truncconv.wasm",
          "test/wasm.simd/truncconv.wast",
          "test/wasm/api.js",
          "test/wasm/badfuncformat.js",
          "test/wasm/baselines/api.baseline",
          "test/wasm/limits.js",
          "test/wasm/params.js",
          "test/wasm/rlexe.xml",
          "tools/RecyclerChecker/.gitignore",
          "tools/RecyclerChecker/RecyclerChecker.cpp",
          "tools/compile_clang.sh",
          "tools/icu/configure.py",
          "tools/run_msbuild.py",
          "tools/update_bytecode_version.ps1"
        ],
        "message": "[1.11>master] [MERGE #6387 @pleath] Remove unneeded InitConst op from byte code\n\nMerge pull request #6387 from pleath:noinitconst",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4785:     case Js::OpCode::BytecodeArgOutCapture:",
          "4787:     case Js::OpCode::LdAsmJsFunc:",
          "4788:     case Js::OpCode::Ld_A:",
          "4789:     case Js::OpCode::Ld_I4:",
          "",
          "[Removed Lines]",
          "4786:     case Js::OpCode::InitConst:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1818:         this->AddInstr(instr, offset);",
          "1819:         return;",
          "1820:     }",
          "1825:     }",
          "1827:     IR::RegOpnd *   dstOpnd = this->BuildDstOpnd(R0, TyVar, false, reuseLoc);",
          "",
          "[Removed Lines]",
          "1821:     case Js::OpCode::InitConst:",
          "1823:         newOpcode = Js::OpCode::Ld_A;",
          "1824:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1782:             }",
          "1784:         case Js::OpCode::Ld_A:",
          "1786:             if (instr->IsJitProfilingInstr() && instr->AsJitProfilingInstr()->isBeginSwitch) {",
          "1787:                 LowerProfiledBeginSwitch(instr->AsJitProfilingInstr());",
          "1788:                 break;",
          "",
          "[Removed Lines]",
          "1785:         case Js::OpCode::InitConst:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x5C20FA9E, 0xA347, 0x4731, { 0xA0, 0xDE, 0x14, 0x8B, 0x4F, 0xA1, 0x2B, 0x04 } };",
          "",
          "[Added Lines]",
          "10: { 0x81AEEA4B, 0xAE4E, 0x40C0, { 0x84, 0x8F, 0x6D, 0xB7, 0xC5, 0xF4, 0x9F, 0x55 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4889:             this->UpdateDebuggerPropertyInitializationOffset(location, sym->GetPosition(), false);",
          "4890:         }",
          "4891:     }",
          "4901:     else",
          "4902:     {",
          "4903:         if (!isConstDecl && sym->GetDecl() && sym->GetDecl()->nop == knopConstDecl)",
          "",
          "[Removed Lines]",
          "4892:     else if (isConstDecl)",
          "4893:     {",
          "4894:         this->m_writer.Reg2(Js::OpCode::InitConst, sym->GetLocation(), rhsLocation);",
          "4896:         if (this->ShouldTrackDebuggerMetadata())",
          "4897:         {",
          "4898:             this->UpdateDebuggerPropertyInitializationOffset(sym->GetLocation(), sym->GetPosition());",
          "4899:         }",
          "4900:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4910:         {",
          "4911:             this->m_writer.Reg2(Js::OpCode::Ld_A, sym->GetLocation(), rhsLocation);",
          "4914:             {",
          "4915:                 this->UpdateDebuggerPropertyInitializationOffset(sym->GetLocation(), sym->GetPosition());",
          "4916:             }",
          "",
          "[Removed Lines]",
          "4913:             if (this->ShouldTrackDebuggerMetadata() && isLetDecl)",
          "",
          "[Added Lines]",
          "4904:             if (this->ShouldTrackDebuggerMetadata() && (isLetDecl || isConstDecl))",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "383: MACRO_WMS_ROOT(         InitUndeclRootConstFld,     ElementRootU,   OpSideEffect)",
          "384: MACRO_EXTEND_WMS(       InitUndeclConsoleLetFld,    ElementScopedU, OpSideEffect)",
          "385: MACRO_EXTEND_WMS(       InitUndeclConsoleConstFld,  ElementScopedU, OpSideEffect)",
          "387: MACRO_WMS(              InitConstSlot,              ElementSlot,    None)",
          "",
          "[Removed Lines]",
          "386: MACRO_WMS(              InitConst,                  Reg2,           OpTempNumberTransfer|OpTempObjectTransfer|OpNonIntTransfer|OpCanCSE)    // Create and initialize 'const' as property of global object",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: MACRO_EXTEND_WMS(       NewInnerScFunc,     ElementSlot,    OpSideEffect)   // Create new ScriptFunction instance",
          "628: MACRO_EXTEND_WMS(       NewInnerScGenFunc,  ElementSlot,    OpSideEffect)   // Create new JavascriptGeneratorFunction instance",
          "629: MACRO_EXTEND_WMS(       NewInnerStackScFunc,ElementSlot,    OpSideEffect|OpByteCodeOnly)  // Create new ScriptFunction instance",
          "631: MACRO_EXTEND_WMS(       NewScGenFuncHomeObj,       ElementSlot,      OpSideEffect)   // Create new JavascriptGeneratorFunction instance that has home object",
          "632: MACRO_EXTEND_WMS(       NewInnerScFuncHomeObj,     ElementSlotI3,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "633: MACRO_EXTEND_WMS(       NewInnerScGenFuncHomeObj,  ElementSlotI3,    OpSideEffect)   // Create new JavascriptGeneratorFunction instance that has home object",
          "",
          "[Removed Lines]",
          "630: MACRO_EXTEND_WMS(       NewScFuncHomeObj,   ElementSlot,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "",
          "[Added Lines]",
          "629: MACRO_WMS(              NewScFuncHomeObj,   ElementSlot,    OpSideEffect)   // Create new ScriptFunction instance that has home object",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   DEF2_WMS(CMMem,                   CmSrEq_A,                   JavascriptOperators::StrictEqual)",
          "136:   DEF2_WMS(CMMem,                   CmSrNeq_A,                  JavascriptOperators::NotStrictEqual)",
          "137:   DEF2_WMS(FALLTHROUGH,             BeginSwitch,                /* Common case with Ld_A */)",
          "139:   DEF2_WMS(FALLTHROUGH,             Ld_A_ReuseLoc,              /* Common case with Ld_A */)",
          "140:   DEF2_WMS(A1toA1_ALLOW_STACK,      Ld_A,                       OP_Ld_A)",
          "141:   DEF2_WMS(INNERtoA1,               LdInnerScope,               OP_Ld_A)",
          "",
          "[Removed Lines]",
          "138:   DEF2_WMS(FALLTHROUGH,             InitConst,                  /* Common case with Ld_A */)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345: EXDEF3_WMS(CUSTOM_L_Value,          NewInnerStackScFunc,        OP_NewInnerStackScFunc, ElementSlot)",
          "346: EXDEF2_WMS(GET_ELEM_SLOT_FB,        NewInnerScFunc,             ScriptFunction::OP_NewScFunc)",
          "347: EXDEF2_WMS(GET_ELEM_SLOT_FB,        NewInnerScGenFunc,          JavascriptGeneratorFunction::OP_NewScGenFunc)",
          "349: EXDEF2_WMS(GET_SLOT_FB_HMO,         NewScGenFuncHomeObj,        JavascriptGeneratorFunction::OP_NewScGenFuncHomeObj)",
          "350: EXDEF2_WMS(GET_ELEM_SLOT_FB_HMO,    NewInnerScFuncHomeObj,      ScriptFunction::OP_NewScFuncHomeObj)",
          "351: EXDEF2_WMS(GET_ELEM_SLOT_FB_HMO,    NewInnerScGenFuncHomeObj,   JavascriptGeneratorFunction::OP_NewScGenFuncHomeObj)",
          "",
          "[Removed Lines]",
          "348: EXDEF2_WMS(GET_SLOT_FB_HMO,         NewScFuncHomeObj,           ScriptFunction::OP_NewScFuncHomeObj)",
          "",
          "[Added Lines]",
          "347:   DEF2_WMS(GET_SLOT_FB_HMO,         NewScFuncHomeObj,           ScriptFunction::OP_NewScFuncHomeObj)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      }
    },
    {
      "candidate_hash": "b5e4874c6bc5ffe79956f0ebcf838b45f51cdfb2",
      "candidate_info": {
        "commit_hash": "b5e4874c6bc5ffe79956f0ebcf838b45f51cdfb2",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/b5e4874c6bc5ffe79956f0ebcf838b45f51cdfb2",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp",
          "lib/Backend/GlobOptFields.cpp",
          "lib/Backend/GlobOptIntBounds.cpp",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Jsrt/JsrtDebuggerObject.cpp",
          "lib/Parser/Parse.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "test/Debugger/rlexe.xml",
          ".gitignore",
          "BUILD.gn",
          "Build/Chakra.Build.Clang.Default.props",
          "Build/Chakra.Build.Clang.props",
          "Build/Chakra.Build.Clang.targets",
          "Build/Chakra.Core.sln",
          "Build/Common.Build.props",
          "Build/NuGet/.pack-version",
          "Build/NuGet/Microsoft.ChakraCore.vc140.nuspec",
          "Build/NuGet/Microsoft.ChakraCore.vc140.targets",
          "Build/NuGet/package.ps1",
          "Build/scripts/add_msbuild_path.cmd",
          "CONTRIBUTING.md",
          "README.md",
          "RegenAllByteCodeNoBuild.cmd",
          "bin/ChakraCore/ChakraCore.def",
          "bin/ChakraCore/ChakraCore.vcxproj",
          "bin/ChakraCore/ChakraCoreDllFunc.cpp",
          "bin/ChakraCore/TestHooks.cpp",
          "bin/ChakraCore/TestHooks.h",
          "bin/GCStress/GCStress.vcxproj",
          "bin/NativeTests/BigUIntTest.cpp",
          "bin/NativeTests/BigUIntTest.h",
          "bin/NativeTests/ConfigFlagsList.h",
          "bin/NativeTests/FunctionExecutionTest.h",
          "bin/NativeTests/JavascriptBigIntTests.cpp",
          "bin/NativeTests/JsRTApiTest.cpp",
          "bin/NativeTests/NativeTests.vcxproj",
          "bin/NativeTests/stdafx.h",
          "bin/ch/262.js",
          "bin/ch/ChakraRtInterface.cpp",
          "bin/ch/ChakraRtInterface.h",
          "bin/ch/DbgController.js",
          "bin/ch/Debugger.cpp",
          "bin/ch/Helpers.cpp",
          "bin/ch/Helpers.h",
          "bin/ch/HostConfigFlagsList.h",
          "bin/ch/JITProcessManager.cpp",
          "bin/ch/WScriptJsrt.cpp",
          "bin/ch/WScriptJsrt.h",
          "bin/ch/ch.cpp",
          "bin/ch/ch.manifest",
          "bin/ch/ch.vcxproj",
          "bin/ch/stdafx.h",
          "bin/rl/rl.cpp",
          "build.sh",
          "deps/Chakra.ICU/Chakra.ICU.Build.props",
          "deps/Chakra.ICU/Chakra.ICU.i18n.vcxproj",
          "jenkins/check_ascii.sh",
          "jenkins/check_eol.sh",
          "jenkins/check_file_ascii.sh",
          "jenkins/check_file_eol.sh",
          "lib/Backend/AsmJsJITInfo.cpp",
          "lib/Backend/BackendApi.cpp",
          "lib/Backend/BackendOpCodeAttrAsmJs.cpp",
          "lib/Backend/BackendOpCodeAttrAsmJs.h",
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h",
          "lib/Backend/BailOut.cpp",
          "lib/Backend/BailOut.h",
          "lib/Backend/BailOutKind.h",
          "lib/Backend/CodeGenNumberAllocator.cpp",
          "lib/Backend/DbCheckPostLower.cpp",
          "lib/Backend/DbCheckPostLower.h",
          "lib/Backend/Encoder.cpp",
          "lib/Backend/Encoder.h",
          "lib/Backend/EquivalentTypeSet.cpp",
          "lib/Backend/FixedFieldInfo.cpp",
          "lib/Backend/FlowGraph.cpp",
          "lib/Backend/FlowGraph.h",
          "lib/Backend/Func.cpp",
          "lib/Backend/Func.h",
          "lib/Backend/FunctionCodeGenJitTimeData.cpp",
          "lib/Backend/FunctionCodeGenJitTimeData.h",
          "lib/Backend/FunctionJITTimeInfo.cpp",
          "lib/Backend/FunctionJITTimeInfo.h",
          "lib/Backend/GlobHashTable.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp",
          "lib/Backend/GlobOptArrays.h",
          "lib/Backend/GlobOptBailOut.cpp",
          "lib/Backend/GlobOptBlockData.cpp",
          "lib/Backend/GlobOptBlockData.h",
          "lib/Backend/GlobOptExpr.cpp",
          "lib/Backend/GlobOptFields.cpp",
          "lib/Backend/IR.cpp",
          "lib/Backend/IR.h",
          "lib/Backend/IR.inl",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilder.h",
          "lib/Backend/IRBuilderAsmJs.cpp",
          "lib/Backend/Inline.cpp",
          "lib/Backend/Inline.h",
          "lib/Backend/InlineeFrameInfo.cpp",
          "lib/Backend/InliningDecider.cpp",
          "lib/Backend/InliningDecider.h",
          "lib/Backend/JITTimeFunctionBody.cpp",
          "lib/Backend/JITTimeFunctionBody.h",
          "lib/Backend/JitTransferData.cpp",
          "lib/Backend/JitTransferData.h",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/LinearScan.cpp",
          "lib/Backend/LinearScan.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Backend/LowerMDShared.cpp",
          "lib/Backend/LowerMDShared.h",
          "lib/Backend/LowerMDSharedSimd128.cpp",
          "lib/Backend/NativeCodeGenerator.cpp",
          "lib/Backend/NativeEntryPointData.cpp",
          "lib/Backend/NativeEntryPointData.h",
          "lib/Backend/ObjTypeSpecFldInfo.cpp",
          "lib/Backend/ObjTypeSpecFldInfo.h",
          "lib/Backend/Opnd.cpp",
          "lib/Backend/Opnd.h",
          "lib/Backend/Peeps.cpp",
          "lib/Backend/SccLiveness.cpp",
          "lib/Backend/SimpleJitProfilingHelpers.cpp",
          "lib/Backend/SimpleJitProfilingHelpers.h",
          "lib/Backend/Sym.cpp",
          "lib/Backend/Sym.h",
          "lib/Backend/TempTracker.cpp",
          "lib/Backend/TempTracker.h",
          "lib/Backend/amd64/EncoderMD.cpp",
          "lib/Backend/amd64/EncoderMD.h",
          "lib/Backend/amd64/LinearScanMD.cpp",
          "lib/Backend/amd64/LinearScanMD.h",
          "lib/Backend/amd64/LinearScanMdA.S",
          "lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/amd64/Thunks.S",
          "lib/Backend/amd64/machvalues.h",
          "lib/Backend/arm/EncoderMD.cpp",
          "lib/Backend/arm/EncoderMD.h",
          "lib/Backend/arm/LowerMD.cpp",
          "lib/Backend/arm/LowerMD.h",
          "lib/Backend/arm/machvalues.h",
          "lib/Backend/arm64/ARM64NeonEncoder.h",
          "lib/Backend/arm64/EncoderMD.cpp",
          "lib/Backend/arm64/EncoderMD.h",
          "lib/Backend/arm64/LowerMD.cpp",
          "lib/Backend/arm64/LowerMD.h",
          "lib/Backend/arm64/machvalues.h",
          "lib/Backend/i386/EncoderMD.cpp",
          "lib/Backend/i386/EncoderMD.h",
          "lib/Backend/i386/LowererMDArch.cpp",
          "lib/Backend/i386/machvalues.h",
          "lib/CMakeLists.txt",
          "lib/Common/BackendApi.h",
          "lib/Common/ChakraCoreVersion.h",
          "lib/Common/Codex/Utf8Codex.cpp",
          "lib/Common/Codex/Utf8Codex.h",
          "lib/Common/Common/Chakra.Common.Common.vcxproj",
          "lib/Common/Common/CompressionUtilities.cpp",
          "lib/Common/Common/CompressionUtilities.h",
          "lib/Common/Common/Jobs.cpp",
          "lib/Common/Common/Jobs.h",
          "lib/Common/Common/NumberUtilities.cpp",
          "lib/Common/Common/NumberUtilities.h",
          "lib/Common/Common/NumberUtilities.inl",
          "lib/Common/Common/NumberUtilitiesBase.h",
          "lib/Common/Common/NumberUtilities_strtod.cpp",
          "lib/Common/Common/RejitReasons.h",
          "lib/Common/CommonDefines.h",
          "lib/Common/CommonPal.h",
          "lib/Common/ConfigFlagsList.h",
          "lib/Common/Core/Assertions.h",
          "lib/Common/Core/CMakeLists.txt",
          "lib/Common/Core/CommonTypedefs.h",
          "lib/Common/Core/ConfigParser.cpp",
          "lib/Common/Core/ConfigParser.h",
          "lib/Common/Core/DelayLoadLibrary.cpp",
          "lib/Common/Core/DelayLoadLibrary.h",
          "lib/Common/Core/EtwTraceCore.h",
          "lib/Common/Core/FaultInjection.cpp",
          "lib/Common/Core/GlobalSecurityPolicy.cpp",
          "lib/Common/Core/GlobalSecurityPolicy.h",
          "lib/Common/Core/Output.cpp",
          "lib/Common/Core/Output.h",
          "lib/Common/Core/SysInfo.cpp",
          "lib/Common/Core/SysInfo.h",
          "lib/Common/DataStructures/BaseDictionary.h",
          "lib/Common/DataStructures/BigInt.cpp",
          "lib/Common/DataStructures/BigInt.h",
          "lib/Common/DataStructures/BigUInt.cpp",
          "lib/Common/DataStructures/BigUInt.h",
          "lib/Common/DataStructures/CMakeLists.txt",
          "lib/Common/DataStructures/Chakra.Common.DataStructures.vcxproj",
          "lib/Common/DataStructures/ClusterList.h",
          "lib/Common/DataStructures/DictionaryEntry.h",
          "lib/Common/DataStructures/KeyValuePair.h",
          "lib/Common/DataStructures/SparseBitVector.h",
          "lib/Common/DataStructures/WeakReferenceDictionary.h",
          "lib/Common/Exceptions/ReportError.cpp",
          "lib/Common/Exceptions/Throw.h",
          "lib/Common/Memory/AllocatorTelemetryStats.h",
          "lib/Common/Memory/BucketStatsReporter.h",
          "lib/Common/Memory/CollectionState.h",
          "lib/Common/Memory/CustomHeap.cpp",
          "lib/Common/Memory/HeapBlock.cpp",
          "lib/Common/Memory/HeapBlock.h",
          "lib/Common/Memory/HeapBucket.cpp",
          "lib/Common/Memory/HeapBucketStats.cpp",
          "lib/Common/Memory/HeapInfo.h",
          "lib/Common/Memory/HeapInfoManager.h",
          "lib/Common/Memory/LargeHeapBlock.cpp",
          "lib/Common/Memory/PageAllocator.cpp",
          "lib/Common/Memory/Recycler.cpp",
          "lib/Common/Memory/Recycler.h",
          "lib/Common/Memory/RecyclerSweepManager.cpp",
          "lib/Common/Memory/RecyclerSweepManager.h",
          "lib/Common/Memory/SectionAllocWrapper.cpp",
          "lib/Common/Memory/SmallFinalizableHeapBlock.cpp",
          "lib/Common/Memory/SmallFinalizableHeapBlock.h",
          "lib/Common/Memory/SmallNormalHeapBucket.cpp",
          "lib/Common/Memory/VirtualAllocWrapper.cpp",
          "lib/Common/Memory/amd64/amd64_SAVE_REGISTERS.S",
          "lib/JITClient/JITClientStub.c",
          "lib/JITClient/JITManager.cpp",
          "lib/JITIDL/Chakra.JITIDL.vcxproj",
          "lib/JITIDL/ChakraJIT.idl",
          "lib/JITIDL/JITTypes.h",
          "lib/JITServer/JITServer.cpp",
          "lib/JITServer/JITServerStub.c",
          "lib/Jsrt/CMakeLists.txt",
          "lib/Jsrt/Chakra.Jsrt.vcxproj",
          "lib/Jsrt/ChakraCommon.h",
          "lib/Jsrt/ChakraCore.h",
          "lib/Jsrt/ChakraCoreWindows.h",
          "lib/Jsrt/Core/CMakeLists.txt",
          "lib/Jsrt/Core/Chakra.Jsrt.Core.vcxproj",
          "lib/Jsrt/Core/JsrtContextCore.cpp",
          "lib/Jsrt/Core/JsrtContextCore.h",
          "lib/Jsrt/Core/JsrtCore.cpp",
          "lib/Jsrt/Jsrt.cpp",
          "lib/Jsrt/JsrtCommonExports.inc",
          "lib/Jsrt/JsrtContext.h",
          "lib/Jsrt/JsrtDebugEventObject.cpp",
          "lib/Jsrt/JsrtDebugManager.cpp",
          "lib/Jsrt/JsrtDebugUtils.cpp",
          "lib/Jsrt/JsrtDiag.cpp",
          "lib/Jsrt/JsrtExternalObject.cpp",
          "lib/Jsrt/JsrtExternalObject.h",
          "lib/Jsrt/JsrtInternal.h",
          "lib/Jsrt/JsrtRuntime.cpp",
          "lib/Jsrt/JsrtRuntime.h",
          "lib/Jsrt/JsrtSourceHolder.cpp",
          "lib/Parser/BGParseManager.cpp",
          "lib/Parser/BGParseManager.h",
          "lib/Parser/CharClassifier.h",
          "lib/Parser/FormalsUtil.h",
          "lib/Parser/Parse.cpp",
          "lib/Parser/Parse.h",
          "lib/Parser/ParseFlags.h",
          "lib/Parser/ParserCommon.h",
          "lib/Parser/RegexCompileTime.cpp",
          "lib/Parser/RegexFlags.h",
          "lib/Parser/RegexParser.cpp",
          "lib/Parser/RegexParser.h",
          "lib/Parser/RegexPattern.cpp",
          "lib/Parser/RegexPattern.h",
          "lib/Parser/RegexRuntime.cpp",
          "lib/Parser/Scan.cpp",
          "lib/Parser/Scan.h",
          "lib/Parser/StandardChars.cpp",
          "lib/Parser/StandardChars.h",
          "lib/Parser/cmperr.cpp",
          "lib/Parser/cmperr.h",
          "lib/Parser/perrors.h",
          "lib/Parser/pnodewalk.h",
          "lib/Parser/ptlist.h",
          "lib/Parser/ptree.cpp",
          "lib/Parser/ptree.h",
          "lib/Parser/rterrors.h",
          "lib/Parser/screrror.cpp",
          "lib/Parser/screrror.h",
          "lib/Parser/tokens.h",
          "lib/Runtime/Base/CharStringCache.cpp",
          "lib/Runtime/Base/CrossSite.cpp",
          "lib/Runtime/Base/DelayLoadLibrary.cpp",
          "lib/Runtime/Base/DelayLoadLibrary.h",
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/Base/FunctionBody.h",
          "lib/Runtime/Base/FunctionExecutionStateMachine.cpp",
          "lib/Runtime/Base/FunctionExecutionStateMachine.h",
          "lib/Runtime/Base/FunctionInfo.cpp",
          "lib/Runtime/Base/FunctionInfo.h",
          "lib/Runtime/Base/JnDirectFields.h",
          "lib/Runtime/Base/LineOffsetCache.cpp",
          "lib/Runtime/Base/PerfHintDescriptions.h",
          "lib/Runtime/Base/RegexPatternMruMap.h",
          "lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Base/ScriptContext.h",
          "lib/Runtime/Base/ThreadBoundThreadContextManager.cpp",
          "lib/Runtime/Base/ThreadConfigFlagsList.h",
          "lib/Runtime/Base/ThreadContext.cpp",
          "lib/Runtime/Base/ThreadContext.h",
          "lib/Runtime/Base/ThreadContextInfo.cpp",
          "lib/Runtime/Base/ThreadContextInfo.h",
          "lib/Runtime/Base/ThreadContextTlsEntry.cpp",
          "lib/Runtime/ByteCode/AsmJsByteCodeWriter.h",
          "lib/Runtime/ByteCode/ByteBlock.cpp",
          "lib/Runtime/ByteCode/ByteBlock.h",
          "lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/ByteCodeSerializeFlags.h",
          "lib/Runtime/ByteCode/ByteCodeSerializer.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/ByteCodeWriter.h",
          "lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/ByteCode/OpCodeUtil.h",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/ByteCode/Scope.h",
          "lib/Runtime/ByteCode/ScopeInfo.cpp",
          "lib/Runtime/ByteCode/Symbol.h",
          "lib/Runtime/Debug/BreakpointProbe.cpp",
          "lib/Runtime/Debug/DebugDocument.cpp",
          "lib/Runtime/Debug/DebugManager.cpp",
          "lib/Runtime/Debug/DebuggingFlags.cpp",
          "lib/Runtime/Debug/DiagHelperMethodWrapper.cpp",
          "lib/Runtime/Debug/DiagObjectModel.cpp",
          "lib/Runtime/Debug/DiagStackFrame.cpp",
          "lib/Runtime/Debug/MutationBreakpoint.cpp",
          "lib/Runtime/Debug/ProbeContainer.cpp",
          "lib/Runtime/Debug/TTActionEvents.cpp",
          "lib/Runtime/Debug/TTEventLog.cpp",
          "lib/Runtime/Debug/TTEvents.cpp",
          "lib/Runtime/Debug/TTEvents.h",
          "lib/Runtime/Debug/TTRuntimeInfoTracker.cpp",
          "lib/Runtime/Debug/TTSerialize.cpp",
          "lib/Runtime/Debug/TTSnapObjects.cpp",
          "lib/Runtime/Debug/TTSnapObjects.h",
          "lib/Runtime/Debug/TTSnapValues.cpp",
          "lib/Runtime/Debug/TTSnapshot.cpp",
          "lib/Runtime/Debug/TTSnapshotExtractor.cpp",
          "lib/Runtime/Debug/TTSupport.h",
          "lib/Runtime/InternalPropertyList.h",
          "lib/Runtime/Language/Arguments.h",
          "lib/Runtime/Language/AsmJs.cpp",
          "lib/Runtime/Language/AsmJs.h",
          "lib/Runtime/Language/AsmJsBuiltInNames.h",
          "lib/Runtime/Language/AsmJsLink.cpp",
          "lib/Runtime/Language/AsmJsModule.cpp",
          "lib/Runtime/Language/AsmJsModule.h",
          "lib/Runtime/Language/AsmJsTypes.h",
          "lib/Runtime/Language/AsmJsUtils.cpp",
          "lib/Runtime/Language/CacheOperators.cpp",
          "lib/Runtime/Language/CacheOperators.inl",
          "lib/Runtime/Language/ConstructorCache.cpp",
          "lib/Runtime/Language/ConstructorCache.h",
          "lib/Runtime/Language/DynamicProfileInfo.cpp",
          "lib/Runtime/Language/DynamicProfileInfo.h",
          "lib/Runtime/Language/FunctionCodeGenRuntimeData.cpp",
          "lib/Runtime/Language/FunctionCodeGenRuntimeData.h",
          "lib/Runtime/Language/InlineCache.cpp",
          "lib/Runtime/Language/InlineCache.h",
          "lib/Runtime/Language/InlineCache.inl",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterHandlerAsmJs.inl",
          "lib/Runtime/Language/InterpreterLoop.inl",
          "lib/Runtime/Language/InterpreterProcessOpCodeAsmJs.h",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptConversion.inl",
          "lib/Runtime/Language/JavascriptExceptionObject.cpp",
          "lib/Runtime/Language/JavascriptExceptionObject.h",
          "lib/Runtime/Language/JavascriptExceptionOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Language/JavascriptOperators.inl",
          "lib/Runtime/Language/JavascriptStackWalker.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.h",
          "lib/Runtime/Language/ModuleNamespace.cpp",
          "lib/Runtime/Language/ModuleNamespace.h",
          "lib/Runtime/Language/ModuleNamespaceEnumerator.cpp",
          "lib/Runtime/Language/ModuleRecordBase.h",
          "lib/Runtime/Language/ProfilingHelpers.cpp",
          "lib/Runtime/Language/ProfilingHelpers.h",
          "lib/Runtime/Language/PropertyGuard.h",
          "lib/Runtime/Language/RuntimeLanguagePch.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Language/SourceTextModuleRecord.h",
          "lib/Runtime/Language/TaggedInt.h",
          "lib/Runtime/Language/TaggedInt.inl",
          "lib/Runtime/Language/ValueType.cpp",
          "lib/Runtime/Language/ValueType.h",
          "lib/Runtime/Language/WebAssemblySource.cpp",
          "lib/Runtime/Language/WebAssemblySource.h",
          "lib/Runtime/Language/amd64/JavascriptConversionA.asm",
          "lib/Runtime/Language/amd64/JavascriptOperatorsA.S",
          "lib/Runtime/Language/amd64/StackFrame.cpp",
          "lib/Runtime/Language/amd64/amd64_Thunks.S",
          "lib/Runtime/Language/i386/AsmJsJitTemplate.cpp",
          "lib/Runtime/Library/ArgumentsObject.cpp",
          "lib/Runtime/Library/ArgumentsObject.h",
          "lib/Runtime/Library/ArgumentsObjectEnumerator.h",
          "lib/Runtime/Library/ArrayBuffer.cpp",
          "lib/Runtime/Library/ArrayBuffer.h",
          "lib/Runtime/Library/AtomicsObject.cpp",
          "lib/Runtime/Library/BoundFunction.cpp",
          "lib/Runtime/Library/BoundFunction.h",
          "lib/Runtime/Library/CMakeLists.txt",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj",
          "lib/Runtime/Library/Chakra.Runtime.Library.vcxproj.filters",
          "lib/Runtime/Library/CompoundString.cpp",
          "lib/Runtime/Library/CompoundString.h",
          "lib/Runtime/Library/ConcatString.cpp",
          "lib/Runtime/Library/ConcatString.h",
          "lib/Runtime/Library/CustomExternalIterator.cpp",
          "lib/Runtime/Library/CustomExternalIterator.h",
          "lib/Runtime/Library/CustomExternalWrapperObject.cpp",
          "lib/Runtime/Library/CustomExternalWrapperObject.h",
          "lib/Runtime/Library/DataView.cpp",
          "lib/Runtime/Library/DataView.h",
          "lib/Runtime/Library/DateImplementation.cpp",
          "lib/Runtime/Library/DelayFreeArrayBufferHelper.h",
          "lib/Runtime/Library/ES5Array.cpp",
          "lib/Runtime/Library/ES5Array.h",
          "lib/Runtime/Library/ES5ArrayIndexEnumerator.h",
          "lib/Runtime/Library/EngineInterfaceObject.cpp",
          "lib/Runtime/Library/EngineInterfaceObject.h",
          "lib/Runtime/Library/EngineInterfaceObjectBuiltIns.h",
          "lib/Runtime/Library/ForInObjectEnumerator.cpp",
          "lib/Runtime/Library/GlobalObject.cpp",
          "lib/Runtime/Library/GlobalObject.h",
          "lib/Runtime/Library/InJavascript/Intl.js",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/IntlEngineInterfaceExtensionObject.cpp",
          "lib/Runtime/Library/JSON.cpp",
          "lib/Runtime/Library/JSONParser.cpp",
          "lib/Runtime/Library/JSONScanner.h",
          "lib/Runtime/Library/JSONString.cpp",
          "lib/Runtime/Library/JSONString.h",
          "lib/Runtime/Library/JSONStringBuilder.cpp",
          "lib/Runtime/Library/JSONStringBuilder.h",
          "lib/Runtime/Library/JSONStringifier.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl",
          "lib/Runtime/Library/JavascriptArrayIterator.cpp",
          "lib/Runtime/Library/JavascriptArrayIterator.h",
          "lib/Runtime/Library/JavascriptAsyncFromSyncIterator.cpp",
          "lib/Runtime/Library/JavascriptAsyncFromSyncIterator.h",
          "lib/Runtime/Library/JavascriptBigInt.cpp",
          "lib/Runtime/Library/JavascriptBigInt.h",
          "lib/Runtime/Library/JavascriptBigIntObject.cpp",
          "lib/Runtime/Library/JavascriptBigIntObject.h",
          "lib/Runtime/Library/JavascriptBoolean.cpp",
          "lib/Runtime/Library/JavascriptBoolean.h",
          "lib/Runtime/Library/JavascriptBoolean.inl",
          "lib/Runtime/Library/JavascriptBooleanObject.cpp",
          "lib/Runtime/Library/JavascriptBooleanObject.h",
          "lib/Runtime/Library/JavascriptBuiltInFunctionList.h",
          "lib/Runtime/Library/JavascriptBuiltInFunctions.cpp",
          "lib/Runtime/Library/JavascriptDate.cpp",
          "lib/Runtime/Library/JavascriptDate.h",
          "lib/Runtime/Library/JavascriptError.cpp",
          "lib/Runtime/Library/JavascriptError.h",
          "lib/Runtime/Library/JavascriptExceptionMetadata.cpp",
          "lib/Runtime/Library/JavascriptExceptionMetadata.h",
          "lib/Runtime/Library/JavascriptExternalFunction.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp",
          "lib/Runtime/Library/JavascriptFunction.h",
          "lib/Runtime/Library/JavascriptGenerator.cpp",
          "lib/Runtime/Library/JavascriptGenerator.h",
          "lib/Runtime/Library/JavascriptGeneratorFunction.cpp",
          "lib/Runtime/Library/JavascriptGeneratorFunction.h",
          "lib/Runtime/Library/JavascriptLibrary.cpp",
          "lib/Runtime/Library/JavascriptLibrary.h",
          "lib/Runtime/Library/JavascriptLibraryBase.h",
          "lib/Runtime/Library/JavascriptListIterator.cpp",
          "lib/Runtime/Library/JavascriptListIterator.h",
          "lib/Runtime/Library/JavascriptMap.cpp",
          "lib/Runtime/Library/JavascriptMap.h",
          "lib/Runtime/Library/JavascriptMapIterator.cpp",
          "lib/Runtime/Library/JavascriptMapIterator.h",
          "lib/Runtime/Library/JavascriptNumber.cpp",
          "lib/Runtime/Library/JavascriptNumber.h",
          "lib/Runtime/Library/JavascriptNumber.inl",
          "lib/Runtime/Library/JavascriptNumberObject.cpp",
          "lib/Runtime/Library/JavascriptNumberObject.h",
          "lib/Runtime/Library/JavascriptObject.cpp",
          "lib/Runtime/Library/JavascriptObject.h",
          "lib/Runtime/Library/JavascriptPromise.cpp",
          "lib/Runtime/Library/JavascriptPromise.h",
          "lib/Runtime/Library/JavascriptProxy.cpp",
          "lib/Runtime/Library/JavascriptProxy.h",
          "lib/Runtime/Library/JavascriptReflect.cpp",
          "lib/Runtime/Library/JavascriptRegExpConstructor.cpp",
          "lib/Runtime/Library/JavascriptRegExpConstructor.h",
          "lib/Runtime/Library/JavascriptRegularExpression.cpp",
          "lib/Runtime/Library/JavascriptRegularExpression.h",
          "lib/Runtime/Library/JavascriptSet.cpp",
          "lib/Runtime/Library/JavascriptSet.h",
          "lib/Runtime/Library/JavascriptSetIterator.cpp",
          "lib/Runtime/Library/JavascriptSetIterator.h",
          "lib/Runtime/Library/JavascriptString.cpp",
          "lib/Runtime/Library/JavascriptString.h",
          "lib/Runtime/Library/JavascriptStringIterator.cpp",
          "lib/Runtime/Library/JavascriptStringIterator.h",
          "lib/Runtime/Library/JavascriptStringObject.cpp",
          "lib/Runtime/Library/JavascriptStringObject.h",
          "lib/Runtime/Library/JavascriptSymbol.cpp",
          "lib/Runtime/Library/JavascriptSymbol.h",
          "lib/Runtime/Library/JavascriptSymbolObject.cpp",
          "lib/Runtime/Library/JavascriptSymbolObject.h",
          "lib/Runtime/Library/JavascriptTypedNumber.cpp",
          "lib/Runtime/Library/JavascriptTypedNumber.h",
          "lib/Runtime/Library/JavascriptTypedObjectSlotAccessorFunction.cpp",
          "lib/Runtime/Library/JavascriptVariantDate.cpp",
          "lib/Runtime/Library/JavascriptVariantDate.h",
          "lib/Runtime/Library/JavascriptWeakMap.cpp",
          "lib/Runtime/Library/JavascriptWeakMap.h",
          "lib/Runtime/Library/JavascriptWeakSet.cpp",
          "lib/Runtime/Library/JavascriptWeakSet.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltInEngineInterfaceExtensionObject.cpp",
          "lib/Runtime/Library/JsBuiltInEngineInterfaceExtensionObject.h",
          "lib/Runtime/Library/LazyJSONString.cpp",
          "lib/Runtime/Library/LazyJSONString.h",
          "lib/Runtime/Library/MathLibrary.cpp",
          "lib/Runtime/Library/ModuleRoot.h",
          "lib/Runtime/Library/ObjectPrototypeObject.cpp",
          "lib/Runtime/Library/PropertyString.cpp",
          "lib/Runtime/Library/PropertyString.h",
          "lib/Runtime/Library/RegexHelper.cpp",
          "lib/Runtime/Library/RegexHelper.h",
          "lib/Runtime/Library/RootObjectBase.cpp",
          "lib/Runtime/Library/RootObjectBase.h",
          "lib/Runtime/Library/RuntimeFunction.cpp",
          "lib/Runtime/Library/RuntimeFunction.h",
          "lib/Runtime/Library/RuntimeLibraryPch.h",
          "lib/Runtime/Library/SameValueComparer.h",
          "lib/Runtime/Library/ScriptFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.h",
          "lib/Runtime/Library/SharedArrayBuffer.cpp",
          "lib/Runtime/Library/SharedArrayBuffer.h",
          "lib/Runtime/Library/StackScriptFunction.cpp",
          "lib/Runtime/Library/StackScriptFunction.h",
          "lib/Runtime/Library/StringCacheList.h",
          "lib/Runtime/Library/ThrowErrorObject.cpp",
          "lib/Runtime/Library/ThrowErrorObject.h",
          "lib/Runtime/Library/TypedArray.cpp",
          "lib/Runtime/Library/TypedArray.h",
          "lib/Runtime/Library/UriHelper.cpp",
          "lib/Runtime/Library/WabtInterface.cpp",
          "lib/Runtime/Library/WasmLibrary.h",
          "lib/Runtime/Library/WebAssembly.cpp",
          "lib/Runtime/Library/WebAssemblyEnvironment.cpp",
          "lib/Runtime/Library/WebAssemblyInstance.cpp",
          "lib/Runtime/Library/WebAssemblyInstance.h",
          "lib/Runtime/Library/WebAssemblyMemory.cpp",
          "lib/Runtime/Library/WebAssemblyMemory.h",
          "lib/Runtime/Library/WebAssemblyModule.cpp",
          "lib/Runtime/Library/WebAssemblyModule.h",
          "lib/Runtime/Library/WebAssemblyTable.cpp",
          "lib/Runtime/Library/WebAssemblyTable.h",
          "lib/Runtime/Library/amd64/JavascriptFunctionA.S",
          "lib/Runtime/LibraryFunction.h",
          "lib/Runtime/Math/JavascriptMath.cpp",
          "lib/Runtime/Math/JavascriptMath.h",
          "lib/Runtime/Math/JavascriptMath.inl",
          "lib/Runtime/Math/WasmMath.inl",
          "lib/Runtime/PlatformAgnostic/Platform/Linux/PerfTrace.cpp",
          "lib/Runtime/PlatformAgnostic/Platform/Windows/HiResTimer.cpp",
          "lib/Runtime/PlatformAgnostic/Platform/Windows/PerfTrace.cpp",
          "lib/Runtime/Runtime.h",
          "lib/Runtime/SerializableFunctionFields.h",
          "lib/Runtime/Types/ActivationObject.cpp",
          "lib/Runtime/Types/ActivationObject.h",
          "lib/Runtime/Types/DeferredTypeHandler.cpp",
          "lib/Runtime/Types/DictionaryPropertyDescriptor.h",
          "lib/Runtime/Types/DictionaryTypeHandler.cpp",
          "lib/Runtime/Types/DynamicObject.cpp",
          "lib/Runtime/Types/DynamicObject.h",
          "lib/Runtime/Types/DynamicObjectPropertyEnumerator.cpp",
          "lib/Runtime/Types/DynamicObjectPropertyEnumerator.h",
          "lib/Runtime/Types/DynamicType.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "lib/Runtime/Types/EdgeJavascriptTypeId.h",
          "lib/Runtime/Types/JavascriptEnumerator.cpp",
          "lib/Runtime/Types/JavascriptEnumerator.h",
          "lib/Runtime/Types/NullTypeHandler.cpp",
          "lib/Runtime/Types/PathTypeHandler.cpp",
          "lib/Runtime/Types/PathTypeHandler.h",
          "lib/Runtime/Types/RecyclableObject.cpp",
          "lib/Runtime/Types/RecyclableObject.h",
          "lib/Runtime/Types/RecyclableObject.inl",
          "lib/Runtime/Types/SimpleDictionaryPropertyDescriptor.h",
          "lib/Runtime/Types/SimpleDictionaryTypeHandler.cpp",
          "lib/Runtime/Types/SimpleTypeHandler.cpp",
          "lib/Runtime/Types/SpreadArgument.cpp",
          "lib/Runtime/Types/SpreadArgument.h",
          "lib/Runtime/Types/StaticType.cpp",
          "lib/Runtime/Types/TypeHandler.cpp",
          "lib/Runtime/Types/TypeHandler.h",
          "lib/Runtime/Types/TypePath.h",
          "lib/Runtime/Types/TypePropertyCache.cpp",
          "lib/Runtime/Types/UnscopablesWrapperObject.cpp",
          "lib/Runtime/Types/UnscopablesWrapperObject.h",
          "lib/SCACore/CMakeLists.txt",
          "lib/SCACore/Chakra.SCACore.vcxproj",
          "lib/SCACore/SCACore.cpp",
          "lib/SCACore/SCACore.h",
          "lib/SCACore/SCACorePch.cpp",
          "lib/SCACore/SCACorePch.h",
          "lib/SCACore/SCADeserialization.cpp",
          "lib/SCACore/SCADeserialization.h",
          "lib/SCACore/SCAEngine.cpp",
          "lib/SCACore/SCAEngine.h",
          "lib/SCACore/SCAPropBag.cpp",
          "lib/SCACore/SCAPropBag.h",
          "lib/SCACore/SCASerialization.cpp",
          "lib/SCACore/SCASerialization.h",
          "lib/SCACore/SCATypes.h",
          "lib/SCACore/StreamHelper.cpp",
          "lib/SCACore/StreamHelper.h",
          "lib/SCACore/StreamReader.cpp",
          "lib/SCACore/StreamReader.h",
          "lib/SCACore/StreamWriter.cpp",
          "lib/SCACore/StreamWriter.h",
          "lib/WasmReader/EmptyWasmByteCodeWriter.h",
          "lib/WasmReader/WasmBinaryOpcodesSimd.h",
          "lib/WasmReader/WasmBinaryReader.cpp",
          "lib/WasmReader/WasmBinaryReader.h",
          "lib/WasmReader/WasmByteCodeGenerator.cpp",
          "lib/WasmReader/WasmByteCodeGenerator.h",
          "lib/WasmReader/WasmCustomReader.cpp",
          "lib/WasmReader/WasmCustomReader.h",
          "lib/WasmReader/WasmParseTree.cpp",
          "lib/WasmReader/WasmParseTree.h",
          "lib/WasmReader/WasmReaderBase.h",
          "lib/WasmReader/WasmSectionLimits.h",
          "lib/WasmReader/WasmSignature.cpp",
          "lib/wabt/.gitignore",
          "lib/wabt/CMakeLists.txt",
          "lib/wabt/README.md",
          "lib/wabt/chakra/wabtapi.cc",
          "lib/wabt/chakra/wabtapi.h",
          "lib/wabt/chakra/windows/config.h",
          "lib/wabt/src/apply-names.cc",
          "lib/wabt/src/binary-reader-interp.cc",
          "lib/wabt/src/binary-reader-interp.h",
          "lib/wabt/src/binary-reader-ir.cc",
          "lib/wabt/src/binary-reader-ir.h",
          "lib/wabt/src/binary-reader-logging.cc",
          "lib/wabt/src/binary-reader-logging.h",
          "lib/wabt/src/binary-reader-nop.h",
          "lib/wabt/src/binary-reader-objdump.cc",
          "lib/wabt/src/binary-reader-opcnt.cc",
          "lib/wabt/src/binary-reader-opcnt.h",
          "lib/wabt/src/binary-reader.cc",
          "lib/wabt/src/binary-reader.h",
          "lib/wabt/src/binary-writer-spec.cc",
          "lib/wabt/src/binary-writer-spec.h",
          "lib/wabt/src/binary-writer.cc",
          "lib/wabt/src/binary-writer.h",
          "lib/wabt/src/binary.h",
          "lib/wabt/src/c-writer.cc",
          "lib/wabt/src/c-writer.h",
          "lib/wabt/src/color.cc",
          "lib/wabt/src/color.h",
          "lib/wabt/src/common.h",
          "lib/wabt/src/config.h.in",
          "lib/wabt/src/emscripten-exported.json",
          "lib/wabt/src/emscripten-helpers.cc",
          "lib/wabt/src/error-formatter.cc",
          "lib/wabt/src/error-formatter.h",
          "lib/wabt/src/error-handler.cc",
          "lib/wabt/src/error-handler.h",
          "lib/wabt/src/error.h",
          "lib/wabt/src/expr-visitor.cc",
          "lib/wabt/src/expr-visitor.h",
          "lib/wabt/src/feature.cc",
          "lib/wabt/src/feature.def",
          "lib/wabt/src/feature.h",
          "lib/wabt/src/generate-names.cc",
          "lib/wabt/src/interp.cc",
          "lib/wabt/src/interp.h",
          "lib/wabt/src/interp/binary-reader-interp.cc",
          "lib/wabt/src/interp/binary-reader-interp.h",
          "lib/wabt/src/interp/interp-disassemble.cc",
          "lib/wabt/src/interp/interp-internal.h",
          "lib/wabt/src/interp/interp-trace.cc",
          "lib/wabt/src/interp/interp.cc",
          "lib/wabt/src/interp/interp.h",
          "lib/wabt/src/ir.cc",
          "lib/wabt/src/ir.h",
          "lib/wabt/src/leb128.cc",
          "lib/wabt/src/leb128.h",
          "lib/wabt/src/lexer-source-line-finder.cc",
          "lib/wabt/src/lexer-source-line-finder.h",
          "lib/wabt/src/lexer-source.cc",
          "lib/wabt/src/lexer-source.h",
          "lib/wabt/src/opcode-code-table.c",
          "lib/wabt/src/opcode-code-table.h",
          "lib/wabt/src/opcode.cc",
          "lib/wabt/src/opcode.def",
          "lib/wabt/src/opcode.h",
          "lib/wabt/src/option-parser.cc",
          "lib/wabt/src/prebuilt/wast-lexer-gen.cc",
          "lib/wabt/src/resolve-names.cc",
          "lib/wabt/src/resolve-names.h",
          "lib/wabt/src/test-binary-reader.cc",
          "lib/wabt/src/test-interp.cc",
          "lib/wabt/src/test-wast-parser.cc",
          "lib/wabt/src/token.def",
          "lib/wabt/src/tools/spectest-interp.cc",
          "lib/wabt/src/tools/wasm-interp.cc",
          "lib/wabt/src/tools/wasm-opcodecnt.cc",
          "lib/wabt/src/tools/wasm-strip.cc",
          "lib/wabt/src/tools/wasm-validate.cc",
          "lib/wabt/src/tools/wasm2c.cc",
          "lib/wabt/src/tools/wasm2wat.cc",
          "lib/wabt/src/tools/wast2json.cc",
          "lib/wabt/src/tools/wat-desugar.cc",
          "lib/wabt/src/tools/wat2wasm.cc",
          "lib/wabt/src/type-checker.cc",
          "lib/wabt/src/type-checker.h",
          "lib/wabt/src/validator.cc",
          "lib/wabt/src/validator.h",
          "lib/wabt/src/wabt.post.js",
          "lib/wabt/src/wast-lexer.cc",
          "lib/wabt/src/wast-lexer.h",
          "lib/wabt/src/wast-parser-lexer-shared.cc",
          "lib/wabt/src/wast-parser-lexer-shared.h",
          "lib/wabt/src/wast-parser.cc",
          "lib/wabt/src/wast-parser.h",
          "lib/wabt/src/wat-writer.cc",
          "lib/wabt/src/wat-writer.h",
          "lib/wabt/ubsan.blacklist",
          "lib/wabt/wabt.vcxproj",
          "manifests/Microsoft-Scripting-Chakra-Instrumentation.man",
          "netci.groovy",
          "pal/inc/rt/unknwn.h",
          "pal/pal.vcxproj",
          "pal/pal.vcxproj.filters",
          "pal/src/cruntime/filecrt.cpp",
          "pal/src/cruntime/misc.cpp",
          "pal/src/debug/debug.cpp",
          "pal/src/file/pal_file.cpp",
          "pal/src/include/pal/semaphore.hpp",
          "pal/src/map/map.cpp",
          "pal/src/misc/dbgmsg.cpp",
          "pal/src/objmgr/shmobject.cpp",
          "pal/src/objmgr/shmobjectmanager.cpp",
          "pal/src/sync/cs.cpp",
          "pal/src/synchmgr/synchmanager.cpp",
          "pal/src/synchobj/semaphore.cpp",
          "test/Array/CopyOnAccessArray_bugs.js",
          "test/Array/FilterWithTypedArray.js",
          "test/Array/array_flat.js",
          "test/Array/array_literal.baseline",
          "test/Array/array_qsortr_random.js",
          "test/Array/array_sort.baseline",
          "test/Array/array_sort.js",
          "test/Array/array_sort2.baseline",
          "test/Array/array_sort2.js",
          "test/Array/array_sort3.baseline",
          "test/Array/array_sort3.js",
          "test/Array/array_sort_random.js",
          "test/Array/rlexe.xml",
          "test/Array/toLocaleString.baseline",
          "test/Array/toLocaleString.js",
          "test/AsmJs/bug16252562.baseline",
          "test/AsmJs/bug16252562.js",
          "test/AsmJs/notBinaryPropertyDefinition.baseline",
          "test/AsmJs/notBinaryPropertyDefinition.js",
          "test/AsmJs/params.js",
          "test/AsmJs/relink.js",
          "test/AsmJs/rlexe.xml",
          "test/AsmJs/useasmbug.baseline",
          "test/AsmJs/useasmbug.js",
          "test/Basics/FloatComparison.js",
          "test/Basics/IdsWithEscapes.baseline",
          "test/Basics/Labels.js",
          "test/Basics/ScriptFunctionToStrings.js",
          "test/Basics/VerifySkipNestedDeferred.baseline",
          "test/Basics/rlexe.xml",
          "test/Basics/scopedaccessors.baseline",
          "test/BigInt/add.js",
          "test/BigInt/assign_by_value.js",
          "test/BigInt/bitwise_not.js",
          "test/BigInt/comparison.js",
          "test/BigInt/decrement.js",
          "test/BigInt/exception.js",
          "test/BigInt/global_object.js",
          "test/BigInt/increment.js",
          "test/BigInt/mixed.js",
          "test/BigInt/multiply.js",
          "test/BigInt/rlexe.xml",
          "test/BigInt/strictly_equal.js",
          "test/BigInt/subtract.js",
          "test/Bugs/Bug19767482.js",
          "test/Bugs/Bug19948792.js",
          "test/Bugs/bug_5572_wscript_loadscript_loadmodule.js",
          "test/Bugs/bug_5883.js",
          "test/Bugs/bug_6179.js",
          "test/Bugs/bug_6239.js",
          "test/Bugs/bug_OS18260560.js",
          "test/Bugs/bug_OS18926499.js",
          "test/Bugs/bug_OS21193960.js",
          "test/Bugs/deferredStubBugs.js",
          "test/Bugs/function_id_destructured_reparse.js",
          "test/Bugs/loopcrash.js",
          "test/Bugs/misc_bugs.js",
          "test/Bugs/randombug.baseline",
          "test/Bugs/rlexe.xml",
          "test/Bugs/skipping_nested_deferred_incorrect_function_id.js",
          "test/ConfigParsing/interspersednewline.testconfig",
          "test/ConfigParsing/interspersednewline_leadingwhitespace.testconfig",
          "test/ConfigParsing/interspersednewline_whitespace.testconfig",
          "test/ConfigParsing/leadingwhitespace.testconfig",
          "test/ConfigParsing/standard.testconfig",
          "test/Date/DateGetSet.baseline",
          "test/Date/DateGetSet.js",
          "test/Date/DateParse3.js",
          "test/Date/parseInvalidISO.baseline",
          "test/Debugger/JsDebuggerAttachDetach.js",
          "test/Debugger/JsDebuggerAttachDetach.js.baseline",
          "test/Debugger/JsDebuggerAttachDetach.js.dbg.baseline",
          "test/Debugger/JsDiagGetStackProperties.js.dbg.baseline",
          "test/Debugger/JsrtDebugUtilsAddPropertyType.js.dbg.baseline",
          "test/Debugger/MultipleContextStack.js.dbg.baseline",
          "test/Debugger/rlexe.xml",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_all.js.dbg.baseline",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_default.js.dbg.baseline",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_with_sticky.js.dbg.baseline",
          "test/DebuggerCommon/ES6_RegExp_specialproperties_with_unicode.js.dbg.baseline",
          "test/DebuggerCommon/ES6_intl_simple_attach.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_const_reassignment_globalscope.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_eval_nonstrict.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_eval_strict_fn.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_for.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_forin.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_redcl.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_shadow_eval_with.js.dbg.baseline",
          "test/DebuggerCommon/ES6_letconst_trycatch_simple_fast.js.dbg.baseline",
          "test/DebuggerCommon/ES6_proto_invalidation.js.dbg.baseline",
          "test/DebuggerCommon/ES6_proto_simple.js.dbg.baseline",
          "test/DebuggerCommon/ES6_proto_userDefinedObject.js.dbg.baseline",
          "test/DebuggerCommon/ES6_spread.js.dbg.baseline",
          "test/DebuggerCommon/IntlInit.js.dbg.baseline",
          "test/DebuggerCommon/JIT_localsAtNativeFrame1.js.dbg.baseline",
          "test/DebuggerCommon/JIT_localsAtNativeFrame2.js.dbg.baseline",
          "test/DebuggerCommon/ObjLit_step_into_out.js.dbg.baseline",
          "test/DebuggerCommon/ObjLit_step_over.js.dbg.baseline",
          "test/DebuggerCommon/TempStrExpr.js.dbg.baseline",
          "test/DebuggerCommon/argument_disp.js.dbg.baseline",
          "test/DebuggerCommon/array_prototest.js.dbg.baseline",
          "test/DebuggerCommon/async.js.dbg.baseline",
          "test/DebuggerCommon/attachWithDeferParse.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeActivationObjectCapture.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeBasicLetConstTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeForTest.bug183991.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeFunctionDeclarationGlobalTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalBlockTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalDeadZoneTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalSlotArrayTest.bug222631.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeGlobalTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeNestedFunctionTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeSlotArrayCapture.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeSlotArrayCaptureAttach.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeSlotArrayTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeTryCatchTest.js.dbg.baseline",
          "test/DebuggerCommon/blockScopeWithTest.js.dbg.baseline",
          "test/DebuggerCommon/blockscope_func_declaration_ES6.js.dbg.baseline",
          "test/DebuggerCommon/blockscope_func_expression_ES6.js.dbg.baseline",
          "test/DebuggerCommon/blockscope_func_insidescopes.js.dbg.baseline",
          "test/DebuggerCommon/breakpoints.js.dbg.baseline",
          "test/DebuggerCommon/bug_177146.js.dbg.baseline",
          "test/DebuggerCommon/bug_291582.js.dbg.baseline",
          "test/DebuggerCommon/bug_543550.js.dbg.baseline",
          "test/DebuggerCommon/bug_592506.js.dbg.baseline",
          "test/DebuggerCommon/bug_622304.js.dbg.baseline",
          "test/DebuggerCommon/bug_os_2946365.js.dbg.baseline",
          "test/DebuggerCommon/catchInspection.js",
          "test/DebuggerCommon/catchInspection.js.dbg.baseline",
          "test/DebuggerCommon/default.js.dbg.baseline",
          "test/DebuggerCommon/detachBasicTest.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-2.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-3.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-4.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-5.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl-6.js.dbg.baseline",
          "test/DebuggerCommon/es6_forof_decl.js.dbg.baseline",
          "test/DebuggerCommon/evaluate.js.dbg.baseline",
          "test/DebuggerCommon/failedasm.js",
          "test/DebuggerCommon/funcExprCrash_150491.js.dbg.baseline",
          "test/DebuggerCommon/funcExprName.js.dbg.baseline",
          "test/DebuggerCommon/funcSource.js.dbg.baseline",
          "test/DebuggerCommon/getterInspection.js.dbg.baseline",
          "test/DebuggerCommon/globalFuncVars.js.dbg.baseline",
          "test/DebuggerCommon/indexprop.js.dbg.baseline",
          "test/DebuggerCommon/jit_exprEval1.js.dbg.baseline",
          "test/DebuggerCommon/multiple_argumentsdisp_safeguard.js.dbg.baseline",
          "test/DebuggerCommon/negzerotest.js.dbg.baseline",
          "test/DebuggerCommon/protoTest2.js.dbg.baseline",
          "test/DebuggerCommon/returnedvaluetests1.js",
          "test/DebuggerCommon/returnedvaluetests1.js.dbg.baseline",
          "test/DebuggerCommon/returnedvaluetests2.js.dbg.baseline",
          "test/DebuggerCommon/rlexe.xml",
          "test/DebuggerCommon/setframe.js.dbg.baseline",
          "test/DebuggerCommon/shadow_with.js.dbg.baseline",
          "test/DebuggerCommon/step_in_ES6_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_in_from_interpreted_function_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_ES6.js.dbg.baseline",
          "test/DebuggerCommon/step_out_direct_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_from_JITted_function_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_from_catch_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_out_from_interpreted_function_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_over_ES6_attach.js.dbg.baseline",
          "test/DebuggerCommon/step_over_JITd_fn_from_Intrprt_fn_attach.js.dbg.baseline",
          "test/DebuggerCommon/stringkeyedtypehandler.js.dbg.baseline",
          "test/DebuggerCommon/symbols.js.dbg.baseline",
          "test/DebuggerCommon/targeted.js.dbg.baseline",
          "test/DebuggerCommon/with_shadow.js.dbg.baseline",
          "test/EH/hasBailedOutBug3.js",
          "test/EH/hasBailedOutBug4.js",
          "test/EH/optional-catch-binding.js",
          "test/EH/regionBugSpecHoisting.js",
          "test/EH/rlexe.xml",
          "test/FixedFields/NonFixedFieldHoist.baseline",
          "test/FixedFields/NonFixedFieldHoist.js",
          "test/FixedFields/rlexe.xml",
          "test/FlowGraph/byteCodeUpwardExposedUsed.js",
          "test/FlowGraph/rlexe.xml",
          "test/Function/LabelFuncAsWithStmt.baseline",
          "test/Function/LabelFuncAsWithStmt.js",
          "test/Function/apply3.baseline",
          "test/Function/callsideeffects_3.baseline",
          "test/Function/deleteProperty.js",
          "test/Function/funcAndboundFuncLength.js",
          "test/Function/rlexe.xml",
          "test/Function/stackArgsLenConstOpt.baseline",
          "test/Function/stackArgsLenConstOpt.js",
          "test/Function/stackArgsWithInlineeBailOut.js",
          "test/Function/stackargs.baseline",
          "test/Function/toString.baseline",
          "test/Function/toStringAll.baseline",
          "test/Function/toStringAll.js",
          "test/GlobalFunctions/CanDeclareGlobalFunction.js",
          "test/GlobalFunctions/CanDeclareGlobalFunctionNonEval.baseline",
          "test/GlobalFunctions/CanDeclareGlobalFunctionNonEval.js",
          "test/GlobalFunctions/rlexe.xml",
          "test/InlineCaches/MissingProtoInval.js",
          "test/InlineCaches/rlexe.xml",
          "test/Intl/Collator.js",
          "test/Intl/GetCanonicalLocales.js",
          "test/Intl/IntlIdentities.js",
          "test/Intl/IntlReturnedValueTests.js.dbg.baseline",
          "test/Intl/NumberFormat.js",
          "test/Intl/SupportedLocalesOf.js",
          "test/Intl/common.js",
          "test/JSON/arguments.js",
          "test/JSON/cacheassert.js",
          "test/JSON/jsonerrorbuffer.js",
          "test/JSON/rlexe.xml",
          "test/JsBuiltIns/common-functionality.js",
          "test/JsBuiltIns/rlexe.xml",
          "test/LetConst/delete.js",
          "test/LetConst/seal.js",
          "test/LetConst/seal1.js",
          "test/LetConst/seal2.js",
          "test/Lib/error.baseline",
          "test/Lib/getclass1.baseline",
          "test/Lib/proxyenum.baseline",
          "test/Lib/proxyenum.js",
          "test/Lib/rlexe.xml",
          "test/Miscellaneous/KeepContextInSuper.js",
          "test/Miscellaneous/MayHaveSideEffectOnNodeSO.js",
          "test/Miscellaneous/rlexe.xml",
          "test/Number/NegativeNaN.baseline",
          "test/Number/NegativeNaN.js",
          "test/Number/NumericSeparator.js",
          "test/Number/rlexe.xml",
          "test/Object/ObjectRest_JIT.js",
          "test/Object/ObjectRest_Simple.js",
          "test/Object/ObjectSpread_JIT.js",
          "test/Object/ObjectSpread_Limits.js",
          "test/Object/ObjectSpread_Simple.js",
          "test/Object/assign.baseline",
          "test/Object/bigconstructorbug.js",
          "test/Object/fromEntries.js",
          "test/Object/propertyDescriptorNonObject.js",
          "test/Object/rlexe.xml",
          "test/Object/toStringWithGlobalObject.baseline",
          "test/Object/toStringWithGlobalObject.js",
          "test/Optimizer/argrestoreintry.js",
          "test/Optimizer/aux_slot_type_transition.js",
          "test/Optimizer/aux_slot_type_transition_2.js",
          "test/Optimizer/bugconstfoldobject.baseline",
          "test/Optimizer/bugconstfoldobject.js",
          "test/Optimizer/bugconstfoldundefined.baseline",
          "test/Optimizer/bugconstfoldundefined.js",
          "test/Optimizer/rlexe.xml",
          "test/Optimizer/test152.js",
          "test/Optimizer/testsimplepathbrfold.baseline",
          "test/PRE/pre1.baseline",
          "test/PRE/rlexe.xml",
          "test/Prototypes/NoPrototypeForMethod.js",
          "test/Prototypes/initProto.baseline",
          "test/Prototypes/initProto.js",
          "test/Prototypes/rlexe.xml",
          "test/RegAlloc/RegAllocBug_0.js",
          "test/RegAlloc/rlexe.xml",
          "test/Regex/BoiHardFail.baseline",
          "test/Regex/configurableTest.baseline",
          "test/Regex/configurableTest.js",
          "test/Regex/dotAll.js",
          "test/Regex/regex_replacefn.baseline",
          "test/Regex/regex_replacefn.js",
          "test/Regex/rlexe.xml",
          "test/Scanner/Hashbang.js",
          "test/Scanner/NumericLiteralSuffix.js",
          "test/Scanner/rlexe.xml",
          "test/StackTrace/ErrorPrototype.baseline",
          "test/Strings/constructorConcat.js",
          "test/Strings/fromCodePoint.js",
          "test/Strings/rlexe.xml",
          "test/Strings/trimStart_trimEnd.js",
          "test/TTBasic/evalRecord.baseline",
          "test/TTBasic/evalReplay.baseline",
          "test/TTBasic/scopedAccessorsRecord.baseline",
          "test/TTBasic/scopedAccessorsReplay.baseline",
          "test/TryCatch/TryCatchStackOverflow.js",
          "test/TryCatch/rlexe.xml",
          "test/WasmSpec.MultiValue/rlexe.xml",
          "test/WasmSpec/baselines/address.baseline",
          "test/WasmSpec/baselines/align.baseline",
          "test/WasmSpec/baselines/atomic_load.baseline",
          "test/WasmSpec/baselines/atomic_store.baseline",
          "test/WasmSpec/baselines/binary.baseline",
          "test/WasmSpec/baselines/block.baseline",
          "test/WasmSpec/baselines/br.baseline",
          "test/WasmSpec/baselines/br_if.baseline",
          "test/WasmSpec/baselines/br_table.baseline",
          "test/WasmSpec/baselines/break-drop.baseline",
          "test/WasmSpec/baselines/call.baseline",
          "test/WasmSpec/baselines/call_indirect.baseline",
          "test/WasmSpec/baselines/chakra/chakra_atomic_load.baseline",
          "test/WasmSpec/baselines/chakra/chakra_atomic_store.baseline",
          "test/WasmSpec/baselines/chakra_atomic_load.baseline",
          "test/WasmSpec/baselines/chakra_atomic_store.baseline",
          "test/WasmSpec/baselines/chakra_extends_i32.baseline",
          "test/WasmSpec/baselines/chakra_extends_i64.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_extends_i32.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_extends_i64.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_i32.baseline",
          "test/WasmSpec/baselines/chakra_generated/chakra_i64.baseline",
          "test/WasmSpec/baselines/chakra_i32.baseline",
          "test/WasmSpec/baselines/chakra_i64.baseline",
          "test/WasmSpec/baselines/const.baseline",
          "test/WasmSpec/baselines/conversions.baseline",
          "test/WasmSpec/baselines/custom.baseline",
          "test/WasmSpec/baselines/data.baseline",
          "test/WasmSpec/baselines/elem.baseline",
          "test/WasmSpec/baselines/endianness.baseline",
          "test/WasmSpec/baselines/exports.baseline",
          "test/WasmSpec/baselines/extends_i32.baseline",
          "test/WasmSpec/baselines/extends_i64.baseline",
          "test/WasmSpec/baselines/f32.baseline",
          "test/WasmSpec/baselines/f32_bitwise.baseline",
          "test/WasmSpec/baselines/f32_cmp.baseline",
          "test/WasmSpec/baselines/f64.baseline",
          "test/WasmSpec/baselines/f64_bitwise.baseline",
          "test/WasmSpec/baselines/f64_cmp.baseline",
          "test/WasmSpec/baselines/fac.baseline",
          "test/WasmSpec/baselines/features/extends/extends_i32.baseline",
          "test/WasmSpec/baselines/features/extends/extends_i64.baseline",
          "test/WasmSpec/baselines/features/nontrapping/nontrapping_conversions.baseline",
          "test/WasmSpec/baselines/features/threads/atomic_load.baseline",
          "test/WasmSpec/baselines/features/threads/atomic_store.baseline",
          "test/WasmSpec/baselines/float_exprs.baseline",
          "test/WasmSpec/baselines/float_literals.baseline",
          "test/WasmSpec/baselines/float_memory.baseline",
          "test/WasmSpec/baselines/float_misc.baseline",
          "test/WasmSpec/baselines/forward.baseline",
          "test/WasmSpec/baselines/func.baseline",
          "test/WasmSpec/baselines/func_ptrs.baseline",
          "test/WasmSpec/baselines/get_local.baseline",
          "test/WasmSpec/baselines/globals.baseline",
          "test/WasmSpec/baselines/i32.baseline",
          "test/WasmSpec/baselines/i64.baseline",
          "test/WasmSpec/baselines/if.baseline",
          "test/WasmSpec/baselines/imports.baseline",
          "test/WasmSpec/baselines/inline-module.baseline",
          "test/WasmSpec/baselines/int_exprs.baseline",
          "test/WasmSpec/baselines/int_literals.baseline",
          "test/WasmSpec/baselines/jsapi.baseline",
          "test/WasmSpec/baselines/labels.baseline",
          "test/WasmSpec/baselines/left-to-right.baseline",
          "test/WasmSpec/baselines/linking.baseline",
          "test/WasmSpec/baselines/loop.baseline",
          "test/WasmSpec/baselines/memory.baseline",
          "test/WasmSpec/baselines/memory_redundancy.baseline",
          "test/WasmSpec/baselines/memory_trap.baseline",
          "test/WasmSpec/baselines/nontrapping_conversions.baseline",
          "test/WasmSpec/baselines/nop.baseline",
          "test/WasmSpec/baselines/resizing.baseline",
          "test/WasmSpec/baselines/return.baseline",
          "test/WasmSpec/baselines/select.baseline",
          "test/WasmSpec/baselines/set_local.baseline",
          "test/WasmSpec/baselines/skip-stack-guard-page.baseline",
          "test/WasmSpec/baselines/stack.baseline",
          "test/WasmSpec/baselines/start.baseline",
          "test/WasmSpec/baselines/store_retval.baseline",
          "test/WasmSpec/baselines/switch.baseline",
          "test/WasmSpec/baselines/tee_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/address.baseline",
          "test/WasmSpec/baselines/testsuite/core/align.baseline",
          "test/WasmSpec/baselines/testsuite/core/binary.baseline",
          "test/WasmSpec/baselines/testsuite/core/block.baseline",
          "test/WasmSpec/baselines/testsuite/core/br.baseline",
          "test/WasmSpec/baselines/testsuite/core/br_if.baseline",
          "test/WasmSpec/baselines/testsuite/core/br_table.baseline",
          "test/WasmSpec/baselines/testsuite/core/break-drop.baseline",
          "test/WasmSpec/baselines/testsuite/core/call.baseline",
          "test/WasmSpec/baselines/testsuite/core/call_indirect.baseline",
          "test/WasmSpec/baselines/testsuite/core/const.baseline",
          "test/WasmSpec/baselines/testsuite/core/conversions.baseline",
          "test/WasmSpec/baselines/testsuite/core/custom.baseline",
          "test/WasmSpec/baselines/testsuite/core/data.baseline",
          "test/WasmSpec/baselines/testsuite/core/elem.baseline",
          "test/WasmSpec/baselines/testsuite/core/endianness.baseline",
          "test/WasmSpec/baselines/testsuite/core/exports.baseline",
          "test/WasmSpec/baselines/testsuite/core/f32.baseline",
          "test/WasmSpec/baselines/testsuite/core/f32_bitwise.baseline",
          "test/WasmSpec/baselines/testsuite/core/f32_cmp.baseline",
          "test/WasmSpec/baselines/testsuite/core/f64.baseline",
          "test/WasmSpec/baselines/testsuite/core/f64_bitwise.baseline",
          "test/WasmSpec/baselines/testsuite/core/f64_cmp.baseline",
          "test/WasmSpec/baselines/testsuite/core/fac.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_exprs.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_literals.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_memory.baseline",
          "test/WasmSpec/baselines/testsuite/core/float_misc.baseline",
          "test/WasmSpec/baselines/testsuite/core/forward.baseline",
          "test/WasmSpec/baselines/testsuite/core/func.baseline",
          "test/WasmSpec/baselines/testsuite/core/func_ptrs.baseline",
          "test/WasmSpec/baselines/testsuite/core/get_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/globals.baseline",
          "test/WasmSpec/baselines/testsuite/core/i32.baseline",
          "test/WasmSpec/baselines/testsuite/core/i64.baseline",
          "test/WasmSpec/baselines/testsuite/core/if.baseline",
          "test/WasmSpec/baselines/testsuite/core/imports.baseline",
          "test/WasmSpec/baselines/testsuite/core/inline-module.baseline",
          "test/WasmSpec/baselines/testsuite/core/int_exprs.baseline",
          "test/WasmSpec/baselines/testsuite/core/int_literals.baseline",
          "test/WasmSpec/baselines/testsuite/core/labels.baseline",
          "test/WasmSpec/baselines/testsuite/core/left-to-right.baseline",
          "test/WasmSpec/baselines/testsuite/core/linking.baseline",
          "test/WasmSpec/baselines/testsuite/core/load.baseline",
          "test/WasmSpec/baselines/testsuite/core/loop.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory_grow.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory_redundancy.baseline",
          "test/WasmSpec/baselines/testsuite/core/memory_trap.baseline",
          "test/WasmSpec/baselines/testsuite/core/nop.baseline",
          "test/WasmSpec/baselines/testsuite/core/return.baseline",
          "test/WasmSpec/baselines/testsuite/core/select.baseline",
          "test/WasmSpec/baselines/testsuite/core/set_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/skip-stack-guard-page.baseline",
          "test/WasmSpec/baselines/testsuite/core/stack.baseline",
          "test/WasmSpec/baselines/testsuite/core/start.baseline",
          "test/WasmSpec/baselines/testsuite/core/store.baseline",
          "test/WasmSpec/baselines/testsuite/core/switch.baseline",
          "test/WasmSpec/baselines/testsuite/core/tee_local.baseline",
          "test/WasmSpec/baselines/testsuite/core/token.baseline",
          "test/WasmSpec/baselines/testsuite/core/traps.baseline",
          "test/WasmSpec/baselines/testsuite/core/type.baseline",
          "test/WasmSpec/baselines/testsuite/core/typecheck.baseline",
          "test/WasmSpec/baselines/testsuite/core/unreachable.baseline",
          "test/WasmSpec/baselines/testsuite/core/unreached-invalid.baseline",
          "test/WasmSpec/baselines/testsuite/core/unwind.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-custom-section-id.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-import-field.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-import-module.baseline",
          "test/WasmSpec/baselines/testsuite/core/utf8-invalid-encoding.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/compile.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/instantiate-bad-imports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/instantiate.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/constructor/validate.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/value-get-set.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/global/valueOf.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/constructor-bad-imports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/exports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/instance/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/interface.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/buffer.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/grow.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/memory/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/customSections.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/exports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/imports.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/module/toString.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/constructor.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/get-set.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/grow.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/length.any.baseline",
          "test/WasmSpec/baselines/testsuite/js-api/table/toString.any.baseline",
          "test/WasmSpec/baselines/token.baseline",
          "test/WasmSpec/baselines/traps.baseline",
          "test/WasmSpec/baselines/type.baseline",
          "test/WasmSpec/baselines/typecheck.baseline",
          "test/WasmSpec/baselines/unreachable.baseline",
          "test/WasmSpec/baselines/unreached-invalid.baseline",
          "test/WasmSpec/baselines/unwind.baseline",
          "test/WasmSpec/baselines/utf8-custom-section-id.baseline",
          "test/WasmSpec/baselines/utf8-import-field.baseline",
          "test/WasmSpec/baselines/utf8-import-module.baseline",
          "test/WasmSpec/baselines/utf8-invalid-encoding.baseline",
          "test/WasmSpec/convert-test-suite/config.json",
          "test/WasmSpec/convert-test-suite/config.json5",
          "test/WasmSpec/convert-test-suite/index.js",
          "test/WasmSpec/convert-test-suite/package-lock.json",
          "test/WasmSpec/convert-test-suite/package.json",
          "test/WasmSpec/jsapi.js",
          "test/WasmSpec/rlexe.xml",
          "test/WasmSpec/testsuite.rev",
          "test/WasmSpec/testsuite/README.md",
          "test/WasmSpec/testsuite/Todo.md",
          "test/WasmSpec/testsuite/build.py",
          "test/WasmSpec/testsuite/core/.gitignore",
          "test/WasmSpec/testsuite/core/address.wast",
          "test/WasmSpec/testsuite/core/align.wast",
          "test/WasmSpec/testsuite/core/binary.wast",
          "test/WasmSpec/testsuite/core/block.wast",
          "test/WasmSpec/testsuite/core/br.wast",
          "test/WasmSpec/testsuite/core/br_if.wast",
          "test/WasmSpec/testsuite/core/br_table.wast",
          "test/WasmSpec/testsuite/core/call.wast",
          "test/WasmSpec/testsuite/core/call_indirect.wast",
          "test/WasmSpec/testsuite/core/float_exprs.wast",
          "test/WasmSpec/testsuite/core/float_literals.wast",
          "test/WasmSpec/testsuite/core/float_misc.wast",
          "test/WasmSpec/testsuite/core/get_local.wast",
          "test/WasmSpec/testsuite/core/globals.wast",
          "test/WasmSpec/testsuite/core/if.wast",
          "test/WasmSpec/testsuite/core/labels.wast",
          "test/WasmSpec/testsuite/core/load.wast",
          "test/WasmSpec/testsuite/core/loop.wast",
          "test/WasmSpec/testsuite/core/memory.wast",
          "test/WasmSpec/testsuite/core/memory_grow.wast",
          "test/WasmSpec/testsuite/core/names.wast",
          "test/WasmSpec/testsuite/core/nop.wast",
          "test/WasmSpec/testsuite/core/resizing.wast",
          "test/WasmSpec/testsuite/core/return.wast",
          "test/WasmSpec/testsuite/core/select.wast",
          "test/WasmSpec/testsuite/core/set_local.wast",
          "test/WasmSpec/testsuite/core/store.wast",
          "test/WasmSpec/testsuite/core/store_retval.wast",
          "test/WasmSpec/testsuite/core/tee_local.wast",
          "test/WasmSpec/testsuite/core/unreachable.wast",
          "test/WasmSpec/testsuite/core/unwind.wast",
          "test/WasmSpec/testsuite/harness/async_index.js",
          "test/WasmSpec/testsuite/harness/sync_index.js",
          "test/WasmSpec/testsuite/harness/testharness.css",
          "test/WasmSpec/testsuite/harness/testharness.js",
          "test/WasmSpec/testsuite/harness/testharnessreport.js",
          "test/WasmSpec/testsuite/harness/wasm-constants.js",
          "test/WasmSpec/testsuite/harness/wasm-module-builder.js",
          "test/WasmSpec/testsuite/harness/wast.js",
          "test/WasmSpec/testsuite/html/indexeddb.js",
          "test/WasmSpec/testsuite/js-api/LICENSE.md",
          "test/WasmSpec/testsuite/js-api/README.md",
          "test/WasmSpec/testsuite/js-api/assertions.js",
          "test/WasmSpec/testsuite/js-api/bad-imports.js",
          "test/WasmSpec/testsuite/js-api/constructor/compile.any.js",
          "test/WasmSpec/testsuite/js-api/constructor/instantiate-bad-imports.any.js",
          "test/WasmSpec/testsuite/js-api/constructor/instantiate.any.js",
          "test/WasmSpec/testsuite/js-api/constructor/validate.any.js",
          "test/WasmSpec/testsuite/js-api/global/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/global/toString.any.js",
          "test/WasmSpec/testsuite/js-api/global/value-get-set.any.js",
          "test/WasmSpec/testsuite/js-api/global/valueOf.any.js",
          "test/WasmSpec/testsuite/js-api/instance/constructor-bad-imports.any.js",
          "test/WasmSpec/testsuite/js-api/instance/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/instance/exports.any.js",
          "test/WasmSpec/testsuite/js-api/instance/toString.any.js",
          "test/WasmSpec/testsuite/js-api/instanceTestFactory.js",
          "test/WasmSpec/testsuite/js-api/interface.any.js",
          "test/WasmSpec/testsuite/js-api/jsapi.js",
          "test/WasmSpec/testsuite/js-api/limits.js",
          "test/WasmSpec/testsuite/js-api/memory/buffer.any.js",
          "test/WasmSpec/testsuite/js-api/memory/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/memory/grow.any.js",
          "test/WasmSpec/testsuite/js-api/memory/toString.any.js",
          "test/WasmSpec/testsuite/js-api/module/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/module/customSections.any.js",
          "test/WasmSpec/testsuite/js-api/module/exports.any.js",
          "test/WasmSpec/testsuite/js-api/module/imports.any.js",
          "test/WasmSpec/testsuite/js-api/module/toString.any.js",
          "test/WasmSpec/testsuite/js-api/table/assertions.js",
          "test/WasmSpec/testsuite/js-api/table/constructor.any.js",
          "test/WasmSpec/testsuite/js-api/table/get-set.any.js",
          "test/WasmSpec/testsuite/js-api/table/grow.any.js",
          "test/WasmSpec/testsuite/js-api/table/length.any.js",
          "test/WasmSpec/testsuite/js-api/table/toString.any.js",
          "test/WasmSpec/testsuite/js-api/wasm-constants.js",
          "test/WasmSpec/testsuite/js-api/wasm-module-builder.js",
          "test/WasmSpec/updateTests.cmd",
          "test/es5/Lex_u3.baseline",
          "test/es5/Lex_u3.js",
          "test/es5/ObjLitGetSet.baseline",
          "test/es5/SemicolonAfterBlockEs5.baseline",
          "test/es5/defineIndexProperty.js",
          "test/es5/freeze.baseline",
          "test/es5/freeze.js",
          "test/es5/hasItem.jshost.baseline",
          "test/es5/objlitgetset3.js",
          "test/es5/rlexe.xml",
          "test/es5/seal.baseline",
          "test/es5/seal.js",
          "test/es6/ES6ArrayAPI.js",
          "test/es6/ES6Function_bugs.js",
          "test/es6/ES6NewTarget.js",
          "test/es6/ES6Promise.js",
          "test/es6/ES6PromiseAsync.baseline",
          "test/es6/ES6PromiseAsync.js",
          "test/es6/ES6StringTemplate.js",
          "test/es6/ES6Super.js",
          "test/es6/ES6TypedArrayExtensions.js",
          "test/es6/HTMLComments.js",
          "test/es6/ProxyInProxy.baseline",
          "test/es6/ProxyInProxy.js",
          "test/es6/bug_19225364.baseline",
          "test/es6/bug_19225364.js",
          "test/es6/bug_issue_5994.baseline",
          "test/es6/bug_issue_5994.js",
          "test/es6/classes_bugfixes.js",
          "test/es6/computedPropertyToString.js",
          "test/es6/default.js",
          "test/es6/destructuring_bugs.js",
          "test/es6/es6toLength.js",
          "test/es6/generators-syntax.js",
          "test/es6/lambda1.js",
          "test/es6/letconst_global.baseline",
          "test/es6/proxybugs.js",
          "test/es6/proxyconstruction.js",
          "test/es6/proxyenumremoval.js",
          "test/es6/regex-symbols.js",
          "test/es6/regexflags-disabled-features.js",
          "test/es6/regexflags.js",
          "test/es6/rest.js",
          "test/es6/rlexe.xml",
          "test/es6/set_functionality.js",
          "test/es6/super_bugs.js",
          "test/es6/toPrimitive.js",
          "test/es6/toStringTag.js",
          "test/es6/trailingcomma.js",
          "test/es6/weakmap_functionality.js",
          "test/es6module/ImportMeta.js",
          "test/es6module/bug_issue_3257.js",
          "test/es6module/bug_issue_3257/mod/mod0.js",
          "test/es6module/bug_issue_3257/mod1.js",
          "test/es6module/bug_issue_3257/mod2/mod2.js",
          "test/es6module/bug_issue_3257/script/script0.js",
          "test/es6module/bug_issue_5777.js",
          "test/es6module/dynamic-module-functionality.js",
          "test/es6module/dynamic_import_promises_5796.js",
          "test/es6module/export_namespace_as.js",
          "test/es6module/module-bugfixes.js",
          "test/es6module/module-namespace.js",
          "test/es6module/module-syntax.js",
          "test/es6module/multiple-roots-circular.js",
          "test/es6module/otherModule.js",
          "test/es6module/rlexe.xml",
          "test/es7/async-generator-apis.js",
          "test/es7/async-generator-functionality.js",
          "test/es7/asyncawait-functionality.baseline",
          "test/es7/asyncawait-functionality.js",
          "test/es7/asyncawait-syntax.js",
          "test/es7/for-await-of.js",
          "test/es7/globalThis.js",
          "test/es7/json_superset.js",
          "test/es7/misc_bugs.js",
          "test/es7/rlexe.xml",
          "test/es7/stringpad.js",
          "test/es7/symboldescription.js",
          "test/es7/wellformedJSON.js",
          "test/fieldopts/depolymorph01.js",
          "test/fieldopts/rlexe.xml",
          "test/inlining/InlineCallInstanceFunction.baseline",
          "test/inlining/InlineCallInstanceFunction.js",
          "test/inlining/InlineCallbackCallBailout.baseline",
          "test/inlining/InlineCallbackCallBailout.js",
          "test/inlining/InlineCallbacks.baseline",
          "test/inlining/InlineCallbacks.js",
          "test/inlining/argoptbugs.js",
          "test/inlining/callTarget.js",
          "test/inlining/profilingbug.js",
          "test/inlining/rlexe.xml",
          "test/loop/MemOp.baseline",
          "test/loop/MemOp.js",
          "test/loop/bailOutOfMemOp.baseline",
          "test/loop/bailOutOfMemOp.js",
          "test/loop/loopinversion.js",
          "test/loop/rlexe.xml",
          "test/native-tests/test_native.sh",
          "test/rlexedirs.xml",
          "test/runtests.py",
          "test/strict/11.this.baseline",
          "test/strict/11.this_sm.baseline",
          "test/strict/classComputedPropertyName.js",
          "test/strict/evalThis.baseline",
          "test/strict/evalThisNested.baseline",
          "test/strict/nonSimpleParameterList.baseline",
          "test/strict/rlexe.xml",
          "test/typedarray/definitetypedarray.js",
          "test/typedarray/nan.baseline",
          "test/typedarray/nan.x64.baseline",
          "test/typedarray/reflect_defineProperty.js",
          "test/typedarray/rlexe.xml",
          "test/typedarray/samethread.baseline",
          "test/utf8/rlexe.xml",
          "test/wasm.simd/b16x8.wasm",
          "test/wasm.simd/b16x8.wast",
          "test/wasm.simd/b32x4.wasm",
          "test/wasm.simd/b32x4.wast",
          "test/wasm.simd/b8x16.wasm",
          "test/wasm.simd/b8x16.wast",
          "test/wasm.simd/binaryArithmeticTests.wasm",
          "test/wasm.simd/binaryArithmeticTests.wast",
          "test/wasm.simd/buildExtractTests.js",
          "test/wasm.simd/comp.wasm",
          "test/wasm.simd/comp.wast",
          "test/wasm.simd/const.wasm",
          "test/wasm.simd/const.wast",
          "test/wasm.simd/f32x4.wasm",
          "test/wasm.simd/f32x4.wast",
          "test/wasm.simd/i16x8_s.wasm",
          "test/wasm.simd/i16x8_s.wast",
          "test/wasm.simd/i16x8_u.wasm",
          "test/wasm.simd/i16x8_u.wast",
          "test/wasm.simd/i32x4.wasm",
          "test/wasm.simd/i32x4.wast",
          "test/wasm.simd/i8x16_s.wasm",
          "test/wasm.simd/i8x16_s.wast",
          "test/wasm.simd/i8x16_u.wasm",
          "test/wasm.simd/i8x16_u.wast",
          "test/wasm.simd/int64x2.wasm",
          "test/wasm.simd/int64x2.wast",
          "test/wasm.simd/loads.wasm",
          "test/wasm.simd/loads.wast",
          "test/wasm.simd/logical.wasm",
          "test/wasm.simd/logical.wast",
          "test/wasm.simd/math.wasm",
          "test/wasm.simd/math.wast",
          "test/wasm.simd/neg.wasm",
          "test/wasm.simd/neg.wast",
          "test/wasm.simd/replace.wasm",
          "test/wasm.simd/replace.wast",
          "test/wasm.simd/rlexe.xml",
          "test/wasm.simd/splat.wasm",
          "test/wasm.simd/splat.wast",
          "test/wasm.simd/stores.wasm",
          "test/wasm.simd/stores.wast",
          "test/wasm.simd/truncconv.wasm",
          "test/wasm.simd/truncconv.wast",
          "test/wasm/api.js",
          "test/wasm/badfuncformat.js",
          "test/wasm/baselines/api.baseline",
          "test/wasm/limits.js",
          "test/wasm/params.js",
          "test/wasm/rlexe.xml",
          "tools/RecyclerChecker/.gitignore",
          "tools/RecyclerChecker/RecyclerChecker.cpp",
          "tools/compile_clang.sh",
          "tools/icu/configure.py",
          "tools/run_msbuild.py",
          "tools/update_bytecode_version.ps1"
        ],
        "message": "[1.11>master] [MERGE #6243 @wyrichte] ChakraCore servicing update for August, 2019\n\nMerge pull request #6243 from wyrichte:gh_servicing_1908\n\nThis release addresses the following issues:\nCVE-2019-1197\nCVE-2019-1141\nCVE-2019-1196\nCVE-2019-1139\nCVE-2019-1131\nCVE-2019-1195",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp",
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp",
          "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp",
          "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h||lib/Backend/Lower.h",
          "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp",
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
            "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Backend/Lower.h||lib/Backend/Lower.h",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp",
            "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h",
            "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
            "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
            "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Backend/Lower.h||lib/Backend/Lower.h",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp",
            "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h",
            "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
            "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: BackwardPass::BackwardPass(Func * func, GlobOpt * globOpt, Js::Phase tag)",
          "11:     : func(func), globOpt(globOpt), tag(tag), currentPrePassLoop(nullptr), tempAlloc(nullptr),",
          "12:     preOpBailOutInstrToProcess(nullptr),",
          "14:     isCollectionPass(false), currentRegion(nullptr),",
          "15:     collectionPassSubPhase(CollectionPassSubPhase::None),",
          "16:     isLoopPrepass(false)",
          "",
          "[Removed Lines]",
          "13:     considerSymAsRealUseInNoImplicitCallUses(nullptr),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416:     candidateSymsRequiredToBeInt = &localCandidateSymsRequiredToBeInt;",
          "417:     BVSparse<JitArenaAllocator> localCandidateSymsRequiredToBeLossyInt(tempAlloc);",
          "418:     candidateSymsRequiredToBeLossyInt = &localCandidateSymsRequiredToBeLossyInt;",
          "419:     intOverflowCurrentlyMattersInRange = true;",
          "421:     FloatSymEquivalenceMap localFloatSymEquivalenceMap(tempAlloc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:     BVSparse<JitArenaAllocator> localConsiderSymsAsRealUsesInNoImplicitCallUses(tempAlloc);",
          "419:     considerSymsAsRealUsesInNoImplicitCallUses = &localConsiderSymsAsRealUsesInNoImplicitCallUses;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4022:         block->loop->regAlloc.liveOnBackEdgeSyms = block->upwardExposedUses->CopyNew(this->func->m_alloc);",
          "4023:     }",
          "4027: #if DBG_DUMP",
          "4028:     TraceBlockUses(block, false);",
          "",
          "[Removed Lines]",
          "4025:     Assert(!considerSymAsRealUseInNoImplicitCallUses);",
          "",
          "[Added Lines]",
          "4026:     Assert(considerSymsAsRealUsesInNoImplicitCallUses->IsEmpty());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4443:             {",
          "4444:                 IR::RegOpnd *const regSrc = src->AsRegOpnd();",
          "4445:                 sym = regSrc->m_sym;",
          "4447:                 {",
          "4449:                     ProcessStackSymUse(sym->AsStackSym(), true);",
          "4450:                 }",
          "4451:                 if(regSrc->IsArrayRegOpnd())",
          "",
          "[Removed Lines]",
          "4446:                 if(considerSymAsRealUseInNoImplicitCallUses && considerSymAsRealUseInNoImplicitCallUses == sym)",
          "4448:                     considerSymAsRealUseInNoImplicitCallUses = nullptr;",
          "",
          "[Added Lines]",
          "4447:                 if(considerSymsAsRealUsesInNoImplicitCallUses->TestAndClear(sym->m_id))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4867:             IR::Opnd *const use =",
          "4868:                 FindNoImplicitCallUse(",
          "4869:                     instr,",
          "",
          "[Removed Lines]",
          "4866:             Assert(!considerSymAsRealUseInNoImplicitCallUses);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4874:                     });",
          "4875:             if(use)",
          "4876:             {",
          "4878:             }",
          "4879:         }",
          "4880:     }",
          "",
          "[Removed Lines]",
          "4877:                 considerSymAsRealUseInNoImplicitCallUses = arrayRegOpnd->HeadSegmentLengthSym();",
          "",
          "[Added Lines]",
          "4876:                 considerSymsAsRealUsesInNoImplicitCallUses->Set(arrayRegOpnd->HeadSegmentLengthSym()->m_id);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6804:             case Js::OpCode::Coerce_Regex:",
          "6805:             case Js::OpCode::Coerce_StrOrRegex:",
          "6806:             case Js::OpCode::Conv_PrimStr:",
          "6808:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc1());",
          "6809:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc2());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6806:             case Js::OpCode::Conv_Prop:",
          "",
          "---------------"
        ],
        "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h": [
          "File: lib/Backend/BackwardPass.h -> lib/Backend/BackwardPass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     BVSparse<JitArenaAllocator> * intOverflowDoesNotMatterInRangeBySymId;",
          "199:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeInt;",
          "200:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeLossyInt;",
          "202:     bool intOverflowCurrentlyMattersInRange;",
          "203:     bool isCollectionPass;",
          "204:     enum class CollectionPassSubPhase",
          "",
          "[Removed Lines]",
          "201:     StackSym * considerSymAsRealUseInNoImplicitCallUses;",
          "",
          "[Added Lines]",
          "201:     BVSparse<JitArenaAllocator> * considerSymsAsRealUsesInNoImplicitCallUses;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13374:     arraySrcOpt.Optimize();",
          "13375: }",
          "13377: void",
          "13378: GlobOpt::OptStackArgLenAndConst(IR::Instr* instr, Value** src1Val)",
          "13379: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13377: void",
          "13378: GlobOpt::ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues)",
          "13379: {",
          "13380:     if (isLikelyJsArray)",
          "13381:     {",
          "13390:         this->CaptureNoImplicitCallUses(baseOpnd, isLikelyJsArray);",
          "13391:     }",
          "13392:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
          "13393:     {",
          "13397:         IR::RegOpnd *const headSegmentLengthOpnd =",
          "13398:             IR::RegOpnd::New(",
          "13399:                 baseArrayOpnd->HeadSegmentLengthSym(),",
          "13400:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
          "13401:                 instr->m_func);",
          "13403:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
          "13404:         this->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
          "13405:     }",
          "13406: }",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "720: private:",
          "721:     void                    CaptureNoImplicitCallUses(IR::Opnd *opnd, const bool usesNoMissingValuesInfo, IR::Instr *const includeCurrentInstr = nullptr);",
          "722:     void                    InsertNoImplicitCallUses(IR::Instr *const instr);",
          "723:     void                    PrepareLoopArrayCheckHoist();",
          "725: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:     void                    ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772:                                                 const bool lossy = false, const bool forceInvariantHoisting = false, IR::BailOutKind bailoutKind = IR::BailOutInvalid);",
          "773:     void                    HoistInvariantValueInfo(ValueInfo *const invariantValueInfoToHoist, Value *const valueToUpdate, BasicBlock *const targetBlock);",
          "774:     void                    OptHoistUpdateValueType(Loop* loop, IR::Instr* instr, IR::Opnd** srcOpndPtr, Value *const srcVal);",
          "777: public:",
          "778:     static bool             IsTypeSpecPhaseOff(Func const * func);",
          "",
          "[Removed Lines]",
          "775:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt) const;",
          "",
          "[Added Lines]",
          "776:     bool                    IsNonNumericRegOpnd(IR::RegOpnd *opnd, bool inGlobOpt, bool *isSafeToTransferInPrepass = nullptr) const;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp": [
          "File: lib/Backend/GlobOptArrays.cpp -> lib/Backend/GlobOptArrays.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1939:         baseArrayOpnd = nullptr;",
          "1940:     }",
          "1969:     const auto OnEliminated = [&](const Js::Phase phase, const char *const eliminatedLoad)",
          "1970:     {",
          "",
          "[Removed Lines]",
          "1942:     if (isLikelyJsArray)",
          "1943:     {",
          "1952:         globOpt->CaptureNoImplicitCallUses(baseOpnd, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
          "1953:     }",
          "1954:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
          "1955:     {",
          "1959:         IR::RegOpnd *const headSegmentLengthOpnd =",
          "1960:             IR::RegOpnd::New(",
          "1961:                 baseArrayOpnd->HeadSegmentLengthSym(),",
          "1962:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
          "1963:                 instr->m_func);",
          "1965:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
          "1966:         globOpt->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
          "1967:     }",
          "",
          "[Added Lines]",
          "1942:     globOpt->ProcessNoImplicitCallArrayUses(baseOpnd, baseArrayOpnd, instr, isLikelyJsArray, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     {",
          "229:         this->KillAllFields(bv); // This also kills all property type values, as the same bit-vector tracks those stack syms",
          "230:         SetAnyPropertyMayBeWrittenTo();",
          "",
          "[Removed Lines]",
          "227:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt))",
          "",
          "[Added Lines]",
          "227:     bool isSafeToTransfer = true;",
          "228:     if (func->GetThisOrParentInlinerHasArguments() || this->IsNonNumericRegOpnd(indexOpnd, inGlobOpt, &isSafeToTransfer))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:         ValueInfo * indexValueInfo = indexValue ? indexValue->GetValueInfo() : nullptr;",
          "236:         int indexLowerBound = 0;",
          "239:         {",
          "241:             this->KillAllObjectTypes(bv);",
          "",
          "[Removed Lines]",
          "238:         if (indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "[Added Lines]",
          "239:         if (!isSafeToTransfer || indirOpnd->GetOffset() < 0 || (indexOpnd && (!indexValueInfo || !indexValueInfo->TryGetIntConstantLowerBound(&indexLowerBound, false) || indexLowerBound < 0)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:                 }",
          "518:                 break;",
          "520:             case IR::JnHelperMethod::HelperRegExp_Exec:",
          "521:             case IR::JnHelperMethod::HelperRegExp_ExecResultNotUsed:",
          "522:             case IR::JnHelperMethod::HelperRegExp_ExecResultUsed:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:             case IR::JnHelperMethod::HelperArray_Slice:",
          "522:             case IR::JnHelperMethod::HelperArray_Concat:",
          "523:                 if (inGlobOpt && this->objectTypeSyms)",
          "524:                 {",
          "525:                     if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)",
          "526:                     {",
          "527:                         this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);",
          "528:                     }",
          "529:                     this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);",
          "530:                 }",
          "531:                 break;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptIntBounds.cpp||lib/Backend/GlobOptIntBounds.cpp": [
          "File: lib/Backend/GlobOptIntBounds.cpp -> lib/Backend/GlobOptIntBounds.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:     }",
          "1282:     for (Loop * loop = this->currentBlock->loop; loop; loop = loop->parent)",
          "1283:     {",
          "1286:         {",
          "1288:         }",
          "1289:     }",
          "1290: }",
          "",
          "[Removed Lines]",
          "1284:         InductionVariable *iv = nullptr;",
          "1285:         if (loop->inductionVariables && loop->inductionVariables->TryGetReference(dstSym->m_id, &iv))",
          "1287:             iv->SetChangeIsIndeterminate();",
          "",
          "[Added Lines]",
          "1288:         if (loop->inductionVariables && loop->inductionVariables->ContainsKey(dstSym->m_id))",
          "1290:             for (auto it = loop->inductionVariables->GetIterator(); it.IsValid(); it.MoveNext())",
          "1291:             {",
          "1292:                 InductionVariable& inductionVariable = it.CurrentValueReference();",
          "1293:                 inductionVariable.SetChangeIsIndeterminate();",
          "1294:             }",
          "",
          "---------------"
        ],
        "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
          "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: HELPERCALL_MATH(Op_MinInAnArray, Js::JavascriptMath::MinInAnArray, AttrCanThrow)",
          "136: HELPERCALLCHK(Op_ConvString, Js::JavascriptConversion::ToString, AttrCanThrow)",
          "137: HELPERCALLCHK(Op_CoerseString, Js::JavascriptConversion::CoerseString, AttrCanThrow)",
          "138: HELPERCALLCHK(Op_CoerseRegex, (Js::JavascriptRegExp* (*) (Js::Var aValue, Js::Var options, Js::ScriptContext *scriptContext))Js::JavascriptRegExp::CreateRegEx, AttrCanThrow)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: HELPERCALLCHK(Op_ConvPropertyKey, Js::JavascriptOperators::OP_ToPropertyKey, AttrCanThrow)",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2840:             this->LowerConvPrimStr(instr);",
          "2841:             break;",
          "2843:         case Js::OpCode::ClearAttributes:",
          "2844:             this->LowerBinaryHelper(instr, IR::HelperOP_ClearAttributes);",
          "2845:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2843:         case Js::OpCode::Conv_Prop:",
          "2844:             this->LowerConvPropertyKey(instr);",
          "2845:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26090:     return dstOpnd;",
          "26091: }",
          "26093: void",
          "26094: Lowerer::LowerConvStrCommon(IR::JnHelperMethod helper,  IR::Instr * instr)",
          "26095: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26097: void",
          "26098: Lowerer::LowerConvPropertyKey(IR::Instr* instr)",
          "26099: {",
          "26100:     LowerConvStrCommon(IR::HelperOp_ConvPropertyKey, instr);",
          "26101: }",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.h||lib/Backend/Lower.h": [
          "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "678:     void            LowerConvPrimStr(IR::Instr * instr);",
          "679:     void            LowerConvStrCommon(IR::JnHelperMethod helper, IR::Instr * instr);",
          "681:     void            GenerateRecyclerAlloc(IR::JnHelperMethod allocHelper, size_t allocSize, IR::RegOpnd* newObjDst, IR::Instr* insertionPointInstr, bool inOpHelper = false);",
          "683:     template <typename ArrayType>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:     void            LowerConvPropertyKey(IR::Instr* instr);",
          "",
          "---------------"
        ],
        "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp": [
          "File: lib/Jsrt/JsrtDebuggerObject.cpp -> lib/Jsrt/JsrtDebuggerObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                 if (resolvedObjectDisplay != nullptr)",
          "86:                 {",
          "87:                     JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectProperty::Make(this->GetDebuggerObjectsManager(), objectDisplayWeakRef);",
          "91:                     {",
          "93:                     }",
          "95:                     {",
          "97:                     }",
          "98:                     objectDisplayWeakRef->ReleaseStrongReference();",
          "99:                     objectDisplayWeakRef.Detach();",
          "",
          "[Removed Lines]",
          "88:                     Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "89:                     Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "90:                     if (resolvedObjectDisplay->IsFake())",
          "92:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "94:                     else",
          "96:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "",
          "[Added Lines]",
          "88:                     try",
          "90:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "91:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "92:                         if (resolvedObjectDisplay->IsFake())",
          "93:                         {",
          "94:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "95:                         }",
          "96:                         else",
          "97:                         {",
          "98:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "99:                         }",
          "101:                     catch (const Js::JavascriptException& err)",
          "103:                         err.GetAndClear();   // discard exception object",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                     {",
          "416:                         AutoPtr<WeakArenaReference<Js::IDiagObjectModelDisplay>> objectDisplayWeakRef(resolvedObject.GetObjectDisplay());",
          "417:                         JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectScope::Make(debuggerObjectsManager, objectDisplayWeakRef, scopesCount);",
          "423:                         objectDisplayWeakRef.Detach();",
          "424:                     }",
          "425:                 }",
          "",
          "[Removed Lines]",
          "418:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "419:                         Assert(object != nullptr);",
          "420:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "421:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "422:                         scopesCount++;",
          "",
          "[Added Lines]",
          "425:                         try",
          "426:                         {",
          "427:                             Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "428:                             Assert(object != nullptr);",
          "429:                             Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "430:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "431:                             scopesCount++;",
          "432:                         }",
          "433:                         catch (const Js::JavascriptException& err)",
          "434:                         {",
          "435:                             err.GetAndClear();   // discard exception object",
          "436:                         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:         this->framesDictionary->Clear();",
          "953:     }",
          "954: }",
          "",
          "[Removed Lines]",
          "955: #endif",
          "",
          "[Added Lines]",
          "969: #endif",
          "",
          "---------------"
        ],
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5104:                     }",
          "5105:                 }",
          "5112:                 bool couldBeObjectPattern = !isObjectPattern && m_token.tk == tkAsg;",
          "",
          "[Removed Lines]",
          "5107:                 if (buildAST)",
          "5108:                 {",
          "5109:                     CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "5110:                 }",
          "",
          "[Added Lines]",
          "5107:                 CheckArgumentsUse(pidHint, GetCurrentFunctionNode());",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "9: { 0x1CD5808A, 0x718A, 0x4F04, { 0x9D, 0x00, 0x8E, 0x50, 0x97, 0x96, 0x9B, 0xD1 } };",
          "",
          "[Added Lines]",
          "10: { 0x3096a219, 0x129d, 0x4a4a, { 0xa6, 0x1c, 0x18, 0x6d, 0x3, 0xbb, 0x25, 0xb7 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "247: }",
          "249: bool ApplyEnclosesArgs(ParseNode* fncDecl, ByteCodeGenerator* byteCodeGenerator);",
          "252: bool IsExpressionStatement(ParseNode* stmt, const Js::ScriptContext *const scriptContext);",
          "253: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "254: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot arg1Location);",
          "",
          "[Removed Lines]",
          "250: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall = false, ParseNode *bindPnode = nullptr, bool isTopLevel = false);",
          "251: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
          "",
          "[Added Lines]",
          "250: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall = false, Js::RegSlot bindingNameLocation = Js::Constants::NoRegister, bool isTopLevel = false);",
          "251: void EmitBinaryOpnds(ParseNode* pnode1, ParseNode* pnode2, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot computedPropertyLocation = Js::Constants::NoRegister);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "977:         EndStatement(stmt);",
          "978:     }",
          "981:     if (funcInfo->IsTmpReg(stmt->location))",
          "982:     {",
          "983:         if (!stmt->isUsed && !fReturnValue)",
          "",
          "[Removed Lines]",
          "980:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, nullptr/*bindPnode*/, true/*isTopLevel*/);",
          "",
          "[Added Lines]",
          "980:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, Js::Constants::NoRegister/*computedPropertyLocation*/, true/*isTopLevel*/);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8404:     byteCodeGenerator->Writer()->CallI(Js::OpCode::CallI, location, location, 2, callSiteId);",
          "8405: }",
          "8423: void EmitMemberNode(ParseNode *memberNode, Js::RegSlot objectLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, ParseNode* parentNode, bool useStore, bool* isObjectEmpty = nullptr)",
          "8424: {",
          "8425:     ParseNode *nameNode = memberNode->AsParseNodeBin()->pnode1;",
          "",
          "[Removed Lines]",
          "8407: void EmitComputedFunctionNameVar(ParseNode *nameNode, ParseNodeFnc *exprNode, ByteCodeGenerator *byteCodeGenerator)",
          "8408: {",
          "8409:     AssertMsg(exprNode != nullptr, \"callers of this function should pass in a valid expression Node\");",
          "8410:     Assert(exprNode->HasComputedName());",
          "8412:     if (nameNode == nullptr)",
          "8413:     {",
          "8414:         return;",
          "8415:     }",
          "8417:     if (exprNode->pnodeName == nullptr)",
          "8418:     {",
          "8419:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, nameNode->location);",
          "8420:     }",
          "8421: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8434:         exprNode->AsParseNodeFnc()->SetHomeObjLocation(objectLocation);",
          "8435:     }",
          "8439:     if (nameNode->nop == knopComputedName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8421:     Js::RegSlot computedNamePropertyKey = Js::Constants::NoRegister;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8447:         bool prevFlag = byteCodeGenerator->forceStrictModeForClassComputedPropertyName;",
          "8451:         byteCodeGenerator->forceStrictModeForClassComputedPropertyName = isClassMember || prevFlag;",
          "8456:         byteCodeGenerator->forceStrictModeForClassComputedPropertyName = prevFlag;",
          "8459:         {",
          "8461:         }",
          "8462:     }",
          "",
          "[Removed Lines]",
          "8453:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo);",
          "8458:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor())",
          "8460:             EmitComputedFunctionNameVar(nameNode, exprNode->AsParseNodeFnc(), byteCodeGenerator);",
          "",
          "[Added Lines]",
          "8438:         computedNamePropertyKey = funcInfo->AcquireTmpRegister();",
          "8439:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo, computedNamePropertyKey);",
          "8444:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor() && exprNode->AsParseNodeFnc()->pnodeName == nullptr)",
          "8446:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8491:             byteCodeGenerator->forceStrictModeForClassComputedPropertyName);",
          "8494:         byteCodeGenerator->forceStrictModeForClassComputedPropertyName = prevFlag;",
          "8497:         funcInfo->ReleaseLoc(exprNode);",
          "8498:         funcInfo->ReleaseLoc(nameNode);",
          "8500:         return;",
          "8501:     }",
          "",
          "[Removed Lines]",
          "8490:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, nameNode->location, true,",
          "",
          "[Added Lines]",
          "8477:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, computedNamePropertyKey, true,",
          "8485:         funcInfo->ReleaseTmpRegister(computedNamePropertyKey);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9865:     }",
          "9866: }",
          "9869: {",
          "9871:     if (MayHaveSideEffectOnNode(pnode1, pnode2, byteCodeGenerator))",
          "",
          "[Removed Lines]",
          "9868: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "",
          "[Added Lines]",
          "9855: void EmitBinaryOpnds(ParseNode* pnode1, ParseNode* pnode2, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot computedPropertyLocation)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9876:     Emit(pnode1, byteCodeGenerator, funcInfo, false);",
          "9884:     {",
          "9886:     }",
          "9887: }",
          "9889: void EmitBinaryReference(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fLoadLhs)",
          "",
          "[Removed Lines]",
          "9878:     if (pnode1->nop == knopComputedName && pnode2->nop == knopClassDecl &&",
          "9879:         (pnode2->AsParseNodeClass()->pnodeConstructor == nullptr || pnode2->AsParseNodeClass()->pnodeConstructor->nop != knopVarDecl))",
          "9880:     {",
          "9881:         Emit(pnode2, byteCodeGenerator, funcInfo, false, false, pnode1);",
          "9882:     }",
          "9883:     else",
          "9885:         Emit(pnode2, byteCodeGenerator, funcInfo, false);",
          "",
          "[Added Lines]",
          "9865:     if (pnode1->nop == knopComputedName && computedPropertyLocation != Js::Constants::NoRegister)",
          "9867:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Prop, computedPropertyLocation, pnode1->location);",
          "9870:     Emit(pnode2, byteCodeGenerator, funcInfo, false, false, computedPropertyLocation);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10479:     }",
          "10480: }",
          "10483: {",
          "10484:     if (pnode == nullptr)",
          "10485:     {",
          "",
          "[Removed Lines]",
          "10482: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, ParseNode * bindPnode, bool isTopLevel)",
          "",
          "[Added Lines]",
          "10466: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall, Js::RegSlot bindingNameLocation, bool isTopLevel)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "11318:         Emit(pnodeClass->pnodeConstructor, byteCodeGenerator, funcInfo, false);",
          "11320:         if (pnodeClass->pnodeExtends)",
          "11321:         {",
          "11322:             byteCodeGenerator->StartStatement(pnodeClass->pnodeExtends);",
          "",
          "[Removed Lines]",
          "11319:         EmitComputedFunctionNameVar(bindPnode, pnodeClass->pnodeConstructor, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "11304:         if (bindingNameLocation != Js::Constants::NoRegister && !pnodeClass->pnodeConstructor->pnodeName)",
          "11305:         {",
          "11306:             Assert(pnodeClass->pnodeConstructor->HasComputedName());",
          "11307:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, pnodeClass->pnodeConstructor->location, bindingNameLocation);",
          "11308:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "325: MACRO_WMS(              Conv_Num,           Reg2,           OpSideEffect|OpTempNumberProducing|OpTempNumberTransfer|OpTempObjectSources|OpOpndHasImplicitCall|OpProducesNumber) // Convert to Number. [[ToNumber()]]",
          "327: MACRO_EXTEND_WMS(       Conv_Str,           Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: MACRO_EXTEND_WMS(       Conv_Prop,          Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   DEF3_WMS(CALL,                    ProfiledReturnTypeCallIExtendedFlags,    PROFILEDOP(OP_ProfiledReturnTypeCallIExtendedFlags, OP_CallIExtendedFlags), ProfiledCallIExtendedFlags)",
          "97: EXDEF2_WMS(A1toA1Mem,               Conv_Str,                   JavascriptConversion::ToString)",
          "98:   DEF2_WMS(A1toA1Mem,               Conv_Obj,                   JavascriptOperators::ToObject)",
          "99: EXDEF2_WMS(A1toA1Mem,               NewUnscopablesWrapperObject,JavascriptOperators::ToUnscopablesWrapperObject)",
          "100:   DEF2_WMS(A1toA1Mem,               Conv_Num,                   JavascriptOperators::ToNumber)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: EXDEF2_WMS(A1toA1Mem,               Conv_Prop,                  JavascriptOperators::OP_ToPropertyKey)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp": [
          "File: lib/Runtime/Language/JavascriptConversion.cpp -> lib/Runtime/Language/JavascriptConversion.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         Var argument,",
          "273:         _In_ ScriptContext* scriptContext,",
          "274:         _Out_ const PropertyRecord** propertyRecord,",
          "",
          "[Removed Lines]",
          "271:     void JavascriptConversion::ToPropertyKey(",
          "",
          "[Added Lines]",
          "271:     Var JavascriptConversion::ToPropertyKey(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:             {",
          "291:                 propertyString = UnsafeVarTo<PropertyString>(propName);",
          "292:             }",
          "293:         }",
          "295:         if (propString)",
          "296:         {",
          "298:         }",
          "299:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:             key = propName;",
          "301:         return key;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h": [
          "File: lib/Runtime/Language/JavascriptConversion.h -> lib/Runtime/Language/JavascriptConversion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         static Var ToPrimitive(_In_ Var aValue, _In_ ScriptContext * scriptContext);",
          "18:         static BOOL CanonicalNumericIndexString(JavascriptString *aValue, double *indexValue, ScriptContext * scriptContext);",
          "21:             Var argument,",
          "22:             _In_ ScriptContext* scriptContext,",
          "23:             _Out_ const PropertyRecord** propertyRecord,",
          "",
          "[Removed Lines]",
          "20:         static void ToPropertyKey(",
          "",
          "[Added Lines]",
          "20:         static Var ToPropertyKey(",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5397:         JIT_HELPER_END(Op_DeleteElementI);",
          "5398:     }",
          "5400:     Var JavascriptOperators::OP_GetLength(Var instance, ScriptContext* scriptContext)",
          "5401:     {",
          "5402:         return JavascriptOperators::OP_GetProperty(instance, PropertyIds::length, scriptContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5400:     Var JavascriptOperators::OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext)",
          "5401:     {",
          "5402:         JIT_HELPER_REENTRANT_HEADER(Op_ConvPropertyKey);",
          "5403:         PropertyRecord const* unused = nullptr;",
          "5404:         return JavascriptConversion::ToPropertyKey(argument, scriptContext, &unused, nullptr);",
          "5405:         JIT_HELPER_END(Op_ConvPropertyKey);",
          "5406:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:         static Var OP_CmGt_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
          "460:         static Var OP_CmGe_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
          "462:         static FunctionInfo * GetConstructorFunctionInfo(Var instance, ScriptContext * scriptContext);",
          "464:         static DetachedStateBase* DetachVarAndGetState(Var var, bool queueForDelayFree = true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462:         static Var OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js": [
          "File: test/Debugger/exceptionWhileFetchingProp.js -> test/Debugger/exceptionWhileFetchingProp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var p = new Proxy({x:10}, {",
          "7:     getOwnPropertyDescriptor: function (oTarget, sKey) {",
          "8:         throw new Error('');",
          "9:         return { configurable: true, enumerable: true, value: 5 };",
          "10:     }",
          "11:   });",
          "13:   function f() {",
          "15:   }",
          "16:   f();",
          "17:   print('Pass');",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline": [
          "File: test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline -> test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [",
          "2:   {",
          "3:     \"evaluate\": {",
          "4:       \"p\": {",
          "5:         \"#__proto__\": \"Object {...}\",",
          "6:         \"[Proxy]\": \"Proxy {...}\"",
          "7:       }",
          "8:     }",
          "9:   }",
          "10: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "528c4bc09422aa712c8969adc64db4ad5bb4dc1b",
      "candidate_info": {
        "commit_hash": "528c4bc09422aa712c8969adc64db4ad5bb4dc1b",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/528c4bc09422aa712c8969adc64db4ad5bb4dc1b",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ],
        "message": "Update release/1.11 to version 1.11.3",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 2",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 3",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x67AFB5DE, 0x5B86, 0x43E8, { 0xB3, 0xB5, 0xCF, 0xD2, 0x5F, 0xEA, 0x8F, 0xC3 } };",
          "",
          "[Added Lines]",
          "10: { 0x26894CEE, 0xB780, 0x4CD4, { 0xB7, 0x93, 0x7B, 0x09, 0x72, 0xAE, 0xED, 0xD9 } };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf4e24df02b2140ce87b1a827e1cfefb08a7e5c7",
      "candidate_info": {
        "commit_hash": "bf4e24df02b2140ce87b1a827e1cfefb08a7e5c7",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/bf4e24df02b2140ce87b1a827e1cfefb08a7e5c7",
        "files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "test/Array/array_sort.js",
          "test/Array/array_sort_random.js",
          "tools/xplatRegenByteCode.py"
        ],
        "message": "ArraySort cleanup (#6429)\n\n1. No longer create a separate comparison array when using the defaultCompare on a non-string array, this copy is slow and could use a lot of memory.\n\n2. Edit ByteCodeEmitter so that template literals don't emit unnecessary empty string concatenations.\n\n3. Use a template literal for string coercion in the default sort compare - does toString() instead of the incorrect toString(toPrimitive()) that was done before AND due to the change in (2) above is significantly more efficient.\n\n4. Some drive by cleanup.",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "test/Array/array_sort.js||test/Array/array_sort.js",
          "test/Array/array_sort_random.js||test/Array/array_sort_random.js",
          "tools/xplatRegenByteCode.py||tools/xplatRegenByteCode.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x2C341884, 0x72E5, 0x4799, { 0x92, 0x3C, 0xDB, 0x8E, 0xDA, 0xFE, 0xEA, 0x89 } };",
          "",
          "[Added Lines]",
          "10: { 0x51f0edaa, 0x63a2, 0x4d76, {0xbc, 0xac, 0x16, 0x0b, 0x8d, 0xd6, 0xc2, 0xad } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8931:             ParseNode* stringNodeList = pnodeStrTemplate->pnodeStringLiterals;",
          "8941:             ParseNode* expressionNodeList = pnodeStrTemplate->pnodeSubstitutionExpressions;",
          "8942:             ParseNode* stringNode;",
          "",
          "[Removed Lines]",
          "8934:             Emit(stringNodeList->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "8936:             Assert(pnodeStrTemplate->location != stringNodeList->AsParseNodeBin()->pnode1->location);",
          "8938:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnodeStrTemplate->location, stringNodeList->AsParseNodeBin()->pnode1->location);",
          "8939:             funcInfo->ReleaseLoc(stringNodeList->AsParseNodeBin()->pnode1);",
          "",
          "[Added Lines]",
          "8935:             ParseNode* firstString = stringNodeList->AsParseNodeBin()->pnode1;",
          "8936:             bool skippedFirst = false;",
          "8937:             if (firstString->AsParseNodeStr()->pid->Cch() == 0)",
          "8938:             {",
          "8939:                 skippedFirst = true;",
          "8940:             }",
          "8941:             else",
          "8942:             {",
          "8943:                 Emit(stringNodeList->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "8945:                 Assert(pnodeStrTemplate->location != stringNodeList->AsParseNodeBin()->pnode1->location);",
          "8947:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnodeStrTemplate->location, stringNodeList->AsParseNodeBin()->pnode1->location);",
          "8948:                 funcInfo->ReleaseLoc(stringNodeList->AsParseNodeBin()->pnode1);",
          "8949:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8969:                 Emit(expressionNode, byteCodeGenerator, funcInfo, false);",
          "8975:                 funcInfo->ReleaseLoc(expressionNode);",
          "",
          "[Removed Lines]",
          "8971:                 Js::RegSlot toStringLocation = funcInfo->AcquireTmpRegister();",
          "8972:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Str, toStringLocation, expressionNode->location);",
          "8973:                 byteCodeGenerator->Writer()->Reg3(Js::OpCode::Add_A, pnodeStrTemplate->location, pnodeStrTemplate->location, toStringLocation);",
          "8974:                 funcInfo->ReleaseTmpRegister(toStringLocation);",
          "",
          "[Added Lines]",
          "8983:                 if (skippedFirst == true)",
          "8984:                 {",
          "8985:                     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Str, pnodeStrTemplate->location, expressionNode->location);",
          "8986:                     skippedFirst = false;",
          "8987:                 }",
          "8988:                 else",
          "8989:                 {",
          "8990:                     Js::RegSlot toStringLocation = funcInfo->AcquireTmpRegister();",
          "8991:                     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Str, toStringLocation, expressionNode->location);",
          "8992:                     byteCodeGenerator->Writer()->Reg3(Js::OpCode::Add_A, pnodeStrTemplate->location, pnodeStrTemplate->location, toStringLocation);",
          "8993:                     funcInfo->ReleaseTmpRegister(toStringLocation);",
          "8994:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8996:             }",
          "8997:         }",
          "8998:     }",
          "",
          "[Removed Lines]",
          "8993:                 Emit(stringNode, byteCodeGenerator, funcInfo, false);",
          "8994:                 byteCodeGenerator->Writer()->Reg3(Js::OpCode::Add_A, pnodeStrTemplate->location, pnodeStrTemplate->location, stringNode->location);",
          "8995:                 funcInfo->ReleaseLoc(stringNode);",
          "",
          "[Added Lines]",
          "9014:                 if (stringNode->AsParseNodeStr()->pid->Cch() != 0)",
          "9015:                 {",
          "9016:                     Emit(stringNode, byteCodeGenerator, funcInfo, false);",
          "9017:                     byteCodeGenerator->Writer()->Reg3(Js::OpCode::Add_A, pnodeStrTemplate->location, pnodeStrTemplate->location, stringNode->location);",
          "9018:                     funcInfo->ReleaseLoc(stringNode);",
          "9019:                 }",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     var Symbol = platform.Symbol;",
          "14:     var CreateObject = platform.builtInJavascriptObjectEntryCreate;",
          "24:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "25:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "26:         this.__$arrayObj$__ = arrayObj;",
          "",
          "[Removed Lines]",
          "16:     let FunctionsEnum = {",
          "17:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "18:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "19:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "20:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "21:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "22:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:         }",
          "239:     });",
          "251:     platform.registerChakraLibraryFunction(\"DefaultSortCompare\", function(left, right) {",
          "285:     });",
          "287:     platform.registerChakraLibraryFunction(\"FillArrayHoles\", function(array, length, offset) {",
          "",
          "[Removed Lines]",
          "241:     platform.registerChakraLibraryFunction(\"DefaultStringSortCompare\", function(left, right) {",
          "245:         if (left < right) {",
          "246:             return -1;",
          "247:         }",
          "248:         return 0;",
          "249:     });",
          "254:         if (left.string < right.string) {",
          "255:             return -1;",
          "256:         }",
          "257:         return 0;",
          "258:     });",
          "260:     platform.registerChakraLibraryFunction(\"CreateCompareArray\", function(array, length) {",
          "261:         let useCompareArray = false;",
          "262:         let i = 0;",
          "263:         while (i < length) {",
          "264:             if (typeof array[i++] !== \"string\") {",
          "265:                 useCompareArray = true;",
          "266:                 break;",
          "267:             }",
          "268:         }",
          "270:         if (useCompareArray === true) {",
          "271:             const compArray = [];",
          "272:             compArray.__proto__ = null;",
          "273:             i = 0;",
          "274:             let value;",
          "275:             while (i < length) {",
          "276:                 value = array[i];",
          "277:                 compArray[i++] = {",
          "278:                     value : value,",
          "279:                     string : \"\" + value",
          "280:                 };",
          "281:             }",
          "282:             return compArray;",
          "283:         }",
          "284:         return array;",
          "",
          "[Added Lines]",
          "235:         return `${left}` < `${right}` ? -1 : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:     platform.registerFunction(platform.FunctionKind.Array_sort, function (compareFn) {",
          "315:         }",
          "317:         const {o, len} = __chakraLibrary.CheckArrayAndGetLen(this, \"Array.prototype.sort\");",
          "",
          "[Removed Lines]",
          "313:         if (compareFn !== undefined && typeof compareFn !== \"function\") {",
          "314:             __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "",
          "[Added Lines]",
          "264:         if (compareFn !== undefined) {",
          "265:             if (typeof compareFn !== \"function\") {",
          "266:                 __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "267:             }",
          "268:         } else {",
          "269:             compareFn = __chakraLibrary.DefaultSortCompare;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:             o[i] = o[i++];",
          "332:         }",
          "345:         if (length < 2048) {",
          "346:             let sortedCount = 1, lowerBound = 0, insertPoint = 0, upperBound = 0;",
          "347:             while (sortedCount < length) {",
          "349:                 upperBound = sortedCount;",
          "350:                 insertPoint = sortedCount - 1; // this lets us check for already ordered first",
          "351:                 lowerBound = 0;",
          "352:                 for (;;) {",
          "354:                         upperBound = insertPoint;",
          "355:                     } else {",
          "356:                         lowerBound = insertPoint + 1;",
          "",
          "[Removed Lines]",
          "334:         let compArray = o;",
          "335:         if (compareFn === undefined && length > 1) {",
          "336:             compArray = __chakraLibrary.CreateCompareArray(o, length);",
          "337:             if (compArray === o) {",
          "338:                 compareFn = __chakraLibrary.DefaultStringSortCompare;",
          "339:             } else {",
          "340:                 compareFn = __chakraLibrary.DefaultSortCompare;",
          "341:             }",
          "342:         }",
          "348:                 const item = compArray[sortedCount];",
          "353:                     if (compareFn (item, compArray[insertPoint]) < 0) {",
          "",
          "[Added Lines]",
          "293:                 const item = o[sortedCount];",
          "298:                     if (compareFn (item, o[insertPoint]) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:                 }",
          "363:                 insertPoint = sortedCount;",
          "364:                 while (insertPoint > lowerBound) {",
          "366:                 }",
          "368:                 ++sortedCount;",
          "369:             }",
          "370:         } else {",
          "379:         }",
          "381:         return o;",
          "",
          "[Removed Lines]",
          "365:                     compArray[insertPoint--] = compArray[insertPoint];",
          "367:                 compArray[lowerBound] = item;",
          "371:             __chakraLibrary.MergeSort(compArray, length, compareFn);",
          "372:         }",
          "374:         if (compArray !== o) {",
          "375:             i = 0;",
          "376:             while (i < length) {",
          "377:                 o[i] = compArray[i++].value;",
          "378:             }",
          "",
          "[Added Lines]",
          "310:                     o[insertPoint--] = o[insertPoint];",
          "312:                 o[lowerBound] = item;",
          "316:             __chakraLibrary.MergeSort(o, length, compareFn);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     var Symbol = platform.Symbol;",
          "19:     var CreateObject = platform.builtInJavascriptObjectEntryCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "31:         this.__$arrayObj$__ = arrayObj;",
          "",
          "[Removed Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         }",
          "244:     });",
          "256:     platform.registerChakraLibraryFunction(\"DefaultSortCompare\", function(left, right) {",
          "290:     });",
          "292:     platform.registerChakraLibraryFunction(\"FillArrayHoles\", function(array, length, offset) {",
          "",
          "[Removed Lines]",
          "246:     platform.registerChakraLibraryFunction(\"DefaultStringSortCompare\", function(left, right) {",
          "250:         if (left < right) {",
          "251:             return -1;",
          "252:         }",
          "253:         return 0;",
          "254:     });",
          "259:         if (left.string < right.string) {",
          "260:             return -1;",
          "261:         }",
          "262:         return 0;",
          "263:     });",
          "265:     platform.registerChakraLibraryFunction(\"CreateCompareArray\", function(array, length) {",
          "266:         let useCompareArray = false;",
          "267:         let i = 0;",
          "268:         while (i < length) {",
          "269:             if (typeof array[i++] !== \"string\") {",
          "270:                 useCompareArray = true;",
          "271:                 break;",
          "272:             }",
          "273:         }",
          "275:         if (useCompareArray === true) {",
          "276:             const compArray = [];",
          "277:             compArray.__proto__ = null;",
          "278:             i = 0;",
          "279:             let value;",
          "280:             while (i < length) {",
          "281:                 value = array[i];",
          "282:                 compArray[i++] = {",
          "283:                     value : value,",
          "284:                     string : \"\" + value",
          "285:                 };",
          "286:             }",
          "287:             return compArray;",
          "288:         }",
          "289:         return array;",
          "",
          "[Added Lines]",
          "240:         return `${left}` < `${right}` ? -1 : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     platform.registerFunction(platform.FunctionKind.Array_sort, function (compareFn) {",
          "320:         }",
          "322:         const {o, len} = __chakraLibrary.CheckArrayAndGetLen(this, \"Array.prototype.sort\");",
          "",
          "[Removed Lines]",
          "318:         if (compareFn !== undefined && typeof compareFn !== \"function\") {",
          "319:             __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "",
          "[Added Lines]",
          "269:         if (compareFn !== undefined) {",
          "270:             if (typeof compareFn !== \"function\") {",
          "271:                 __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "272:             }",
          "273:         } else {",
          "274:             compareFn = __chakraLibrary.DefaultSortCompare;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:             o[i] = o[i++];",
          "337:         }",
          "350:         if (length < 2048) {",
          "351:             let sortedCount = 1, lowerBound = 0, insertPoint = 0, upperBound = 0;",
          "352:             while (sortedCount < length) {",
          "354:                 upperBound = sortedCount;",
          "355:                 insertPoint = sortedCount - 1; // this lets us check for already ordered first",
          "356:                 lowerBound = 0;",
          "357:                 for (;;) {",
          "359:                         upperBound = insertPoint;",
          "360:                     } else {",
          "361:                         lowerBound = insertPoint + 1;",
          "",
          "[Removed Lines]",
          "339:         let compArray = o;",
          "340:         if (compareFn === undefined && length > 1) {",
          "341:             compArray = __chakraLibrary.CreateCompareArray(o, length);",
          "342:             if (compArray === o) {",
          "343:                 compareFn = __chakraLibrary.DefaultStringSortCompare;",
          "344:             } else {",
          "345:                 compareFn = __chakraLibrary.DefaultSortCompare;",
          "346:             }",
          "347:         }",
          "353:                 const item = compArray[sortedCount];",
          "358:                     if (compareFn (item, compArray[insertPoint]) < 0) {",
          "",
          "[Added Lines]",
          "298:                 const item = o[sortedCount];",
          "303:                     if (compareFn (item, o[insertPoint]) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:                 }",
          "368:                 insertPoint = sortedCount;",
          "369:                 while (insertPoint > lowerBound) {",
          "371:                 }",
          "373:                 ++sortedCount;",
          "374:             }",
          "375:         } else {",
          "384:         }",
          "386:         return o;",
          "",
          "[Removed Lines]",
          "370:                     compArray[insertPoint--] = compArray[insertPoint];",
          "372:                 compArray[lowerBound] = item;",
          "376:             __chakraLibrary.MergeSort(compArray, length, compareFn);",
          "377:         }",
          "379:         if (compArray !== o) {",
          "380:             i = 0;",
          "381:             while (i < length) {",
          "382:                 o[i] = compArray[i++].value;",
          "383:             }",
          "",
          "[Added Lines]",
          "315:                     o[insertPoint--] = o[insertPoint];",
          "317:                 o[lowerBound] = item;",
          "321:             __chakraLibrary.MergeSort(o, length, compareFn);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     var Symbol = platform.Symbol;",
          "19:     var CreateObject = platform.builtInJavascriptObjectEntryCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "31:         this.__$arrayObj$__ = arrayObj;",
          "",
          "[Removed Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         }",
          "244:     });",
          "256:     platform.registerChakraLibraryFunction(\"DefaultSortCompare\", function(left, right) {",
          "290:     });",
          "292:     platform.registerChakraLibraryFunction(\"FillArrayHoles\", function(array, length, offset) {",
          "",
          "[Removed Lines]",
          "246:     platform.registerChakraLibraryFunction(\"DefaultStringSortCompare\", function(left, right) {",
          "250:         if (left < right) {",
          "251:             return -1;",
          "252:         }",
          "253:         return 0;",
          "254:     });",
          "259:         if (left.string < right.string) {",
          "260:             return -1;",
          "261:         }",
          "262:         return 0;",
          "263:     });",
          "265:     platform.registerChakraLibraryFunction(\"CreateCompareArray\", function(array, length) {",
          "266:         let useCompareArray = false;",
          "267:         let i = 0;",
          "268:         while (i < length) {",
          "269:             if (typeof array[i++] !== \"string\") {",
          "270:                 useCompareArray = true;",
          "271:                 break;",
          "272:             }",
          "273:         }",
          "275:         if (useCompareArray === true) {",
          "276:             const compArray = [];",
          "277:             compArray.__proto__ = null;",
          "278:             i = 0;",
          "279:             let value;",
          "280:             while (i < length) {",
          "281:                 value = array[i];",
          "282:                 compArray[i++] = {",
          "283:                     value : value,",
          "284:                     string : \"\" + value",
          "285:                 };",
          "286:             }",
          "287:             return compArray;",
          "288:         }",
          "289:         return array;",
          "",
          "[Added Lines]",
          "240:         return `${left}` < `${right}` ? -1 : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     platform.registerFunction(platform.FunctionKind.Array_sort, function (compareFn) {",
          "320:         }",
          "322:         const {o, len} = __chakraLibrary.CheckArrayAndGetLen(this, \"Array.prototype.sort\");",
          "",
          "[Removed Lines]",
          "318:         if (compareFn !== undefined && typeof compareFn !== \"function\") {",
          "319:             __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "",
          "[Added Lines]",
          "269:         if (compareFn !== undefined) {",
          "270:             if (typeof compareFn !== \"function\") {",
          "271:                 __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "272:             }",
          "273:         } else {",
          "274:             compareFn = __chakraLibrary.DefaultSortCompare;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:             o[i] = o[i++];",
          "337:         }",
          "350:         if (length < 2048) {",
          "351:             let sortedCount = 1, lowerBound = 0, insertPoint = 0, upperBound = 0;",
          "352:             while (sortedCount < length) {",
          "354:                 upperBound = sortedCount;",
          "355:                 insertPoint = sortedCount - 1; // this lets us check for already ordered first",
          "356:                 lowerBound = 0;",
          "357:                 for (;;) {",
          "359:                         upperBound = insertPoint;",
          "360:                     } else {",
          "361:                         lowerBound = insertPoint + 1;",
          "",
          "[Removed Lines]",
          "339:         let compArray = o;",
          "340:         if (compareFn === undefined && length > 1) {",
          "341:             compArray = __chakraLibrary.CreateCompareArray(o, length);",
          "342:             if (compArray === o) {",
          "343:                 compareFn = __chakraLibrary.DefaultStringSortCompare;",
          "344:             } else {",
          "345:                 compareFn = __chakraLibrary.DefaultSortCompare;",
          "346:             }",
          "347:         }",
          "353:                 const item = compArray[sortedCount];",
          "358:                     if (compareFn (item, compArray[insertPoint]) < 0) {",
          "",
          "[Added Lines]",
          "298:                 const item = o[sortedCount];",
          "303:                     if (compareFn (item, o[insertPoint]) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:                 }",
          "368:                 insertPoint = sortedCount;",
          "369:                 while (insertPoint > lowerBound) {",
          "371:                 }",
          "373:                 ++sortedCount;",
          "374:             }",
          "375:         } else {",
          "384:         }",
          "386:         return o;",
          "",
          "[Removed Lines]",
          "370:                     compArray[insertPoint--] = compArray[insertPoint];",
          "372:                 compArray[lowerBound] = item;",
          "376:             __chakraLibrary.MergeSort(compArray, length, compareFn);",
          "377:         }",
          "379:         if (compArray !== o) {",
          "380:             i = 0;",
          "381:             while (i < length) {",
          "382:                 o[i] = compArray[i++].value;",
          "383:             }",
          "",
          "[Added Lines]",
          "315:                     o[insertPoint--] = o[insertPoint];",
          "317:                 o[lowerBound] = item;",
          "321:             __chakraLibrary.MergeSort(o, length, compareFn);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     var Symbol = platform.Symbol;",
          "19:     var CreateObject = platform.builtInJavascriptObjectEntryCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "31:         this.__$arrayObj$__ = arrayObj;",
          "",
          "[Removed Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         }",
          "244:     });",
          "256:     platform.registerChakraLibraryFunction(\"DefaultSortCompare\", function(left, right) {",
          "290:     });",
          "292:     platform.registerChakraLibraryFunction(\"FillArrayHoles\", function(array, length, offset) {",
          "",
          "[Removed Lines]",
          "246:     platform.registerChakraLibraryFunction(\"DefaultStringSortCompare\", function(left, right) {",
          "250:         if (left < right) {",
          "251:             return -1;",
          "252:         }",
          "253:         return 0;",
          "254:     });",
          "259:         if (left.string < right.string) {",
          "260:             return -1;",
          "261:         }",
          "262:         return 0;",
          "263:     });",
          "265:     platform.registerChakraLibraryFunction(\"CreateCompareArray\", function(array, length) {",
          "266:         let useCompareArray = false;",
          "267:         let i = 0;",
          "268:         while (i < length) {",
          "269:             if (typeof array[i++] !== \"string\") {",
          "270:                 useCompareArray = true;",
          "271:                 break;",
          "272:             }",
          "273:         }",
          "275:         if (useCompareArray === true) {",
          "276:             const compArray = [];",
          "277:             compArray.__proto__ = null;",
          "278:             i = 0;",
          "279:             let value;",
          "280:             while (i < length) {",
          "281:                 value = array[i];",
          "282:                 compArray[i++] = {",
          "283:                     value : value,",
          "284:                     string : \"\" + value",
          "285:                 };",
          "286:             }",
          "287:             return compArray;",
          "288:         }",
          "289:         return array;",
          "",
          "[Added Lines]",
          "240:         return `${left}` < `${right}` ? -1 : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     platform.registerFunction(platform.FunctionKind.Array_sort, function (compareFn) {",
          "320:         }",
          "322:         const {o, len} = __chakraLibrary.CheckArrayAndGetLen(this, \"Array.prototype.sort\");",
          "",
          "[Removed Lines]",
          "318:         if (compareFn !== undefined && typeof compareFn !== \"function\") {",
          "319:             __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "",
          "[Added Lines]",
          "269:         if (compareFn !== undefined) {",
          "270:             if (typeof compareFn !== \"function\") {",
          "271:                 __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "272:             }",
          "273:         } else {",
          "274:             compareFn = __chakraLibrary.DefaultSortCompare;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:             o[i] = o[i++];",
          "337:         }",
          "350:         if (length < 2048) {",
          "351:             let sortedCount = 1, lowerBound = 0, insertPoint = 0, upperBound = 0;",
          "352:             while (sortedCount < length) {",
          "354:                 upperBound = sortedCount;",
          "355:                 insertPoint = sortedCount - 1; // this lets us check for already ordered first",
          "356:                 lowerBound = 0;",
          "357:                 for (;;) {",
          "359:                         upperBound = insertPoint;",
          "360:                     } else {",
          "361:                         lowerBound = insertPoint + 1;",
          "",
          "[Removed Lines]",
          "339:         let compArray = o;",
          "340:         if (compareFn === undefined && length > 1) {",
          "341:             compArray = __chakraLibrary.CreateCompareArray(o, length);",
          "342:             if (compArray === o) {",
          "343:                 compareFn = __chakraLibrary.DefaultStringSortCompare;",
          "344:             } else {",
          "345:                 compareFn = __chakraLibrary.DefaultSortCompare;",
          "346:             }",
          "347:         }",
          "353:                 const item = compArray[sortedCount];",
          "358:                     if (compareFn (item, compArray[insertPoint]) < 0) {",
          "",
          "[Added Lines]",
          "298:                 const item = o[sortedCount];",
          "303:                     if (compareFn (item, o[insertPoint]) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:                 }",
          "368:                 insertPoint = sortedCount;",
          "369:                 while (insertPoint > lowerBound) {",
          "371:                 }",
          "373:                 ++sortedCount;",
          "374:             }",
          "375:         } else {",
          "384:         }",
          "386:         return o;",
          "",
          "[Removed Lines]",
          "370:                     compArray[insertPoint--] = compArray[insertPoint];",
          "372:                 compArray[lowerBound] = item;",
          "376:             __chakraLibrary.MergeSort(compArray, length, compareFn);",
          "377:         }",
          "379:         if (compArray !== o) {",
          "380:             i = 0;",
          "381:             while (i < length) {",
          "382:                 o[i] = compArray[i++].value;",
          "383:             }",
          "",
          "[Added Lines]",
          "315:                     o[insertPoint--] = o[insertPoint];",
          "317:                 o[lowerBound] = item;",
          "321:             __chakraLibrary.MergeSort(o, length, compareFn);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     var Symbol = platform.Symbol;",
          "19:     var CreateObject = platform.builtInJavascriptObjectEntryCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "31:         this.__$arrayObj$__ = arrayObj;",
          "",
          "[Removed Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         }",
          "244:     });",
          "256:     platform.registerChakraLibraryFunction(\"DefaultSortCompare\", function(left, right) {",
          "290:     });",
          "292:     platform.registerChakraLibraryFunction(\"FillArrayHoles\", function(array, length, offset) {",
          "",
          "[Removed Lines]",
          "246:     platform.registerChakraLibraryFunction(\"DefaultStringSortCompare\", function(left, right) {",
          "250:         if (left < right) {",
          "251:             return -1;",
          "252:         }",
          "253:         return 0;",
          "254:     });",
          "259:         if (left.string < right.string) {",
          "260:             return -1;",
          "261:         }",
          "262:         return 0;",
          "263:     });",
          "265:     platform.registerChakraLibraryFunction(\"CreateCompareArray\", function(array, length) {",
          "266:         let useCompareArray = false;",
          "267:         let i = 0;",
          "268:         while (i < length) {",
          "269:             if (typeof array[i++] !== \"string\") {",
          "270:                 useCompareArray = true;",
          "271:                 break;",
          "272:             }",
          "273:         }",
          "275:         if (useCompareArray === true) {",
          "276:             const compArray = [];",
          "277:             compArray.__proto__ = null;",
          "278:             i = 0;",
          "279:             let value;",
          "280:             while (i < length) {",
          "281:                 value = array[i];",
          "282:                 compArray[i++] = {",
          "283:                     value : value,",
          "284:                     string : \"\" + value",
          "285:                 };",
          "286:             }",
          "287:             return compArray;",
          "288:         }",
          "289:         return array;",
          "",
          "[Added Lines]",
          "240:         return `${left}` < `${right}` ? -1 : 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     platform.registerFunction(platform.FunctionKind.Array_sort, function (compareFn) {",
          "320:         }",
          "322:         const {o, len} = __chakraLibrary.CheckArrayAndGetLen(this, \"Array.prototype.sort\");",
          "",
          "[Removed Lines]",
          "318:         if (compareFn !== undefined && typeof compareFn !== \"function\") {",
          "319:             __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "",
          "[Added Lines]",
          "269:         if (compareFn !== undefined) {",
          "270:             if (typeof compareFn !== \"function\") {",
          "271:                 __chakraLibrary.raiseFunctionArgument_NeedFunction(\"Array.prototype.sort\");",
          "272:             }",
          "273:         } else {",
          "274:             compareFn = __chakraLibrary.DefaultSortCompare;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:             o[i] = o[i++];",
          "337:         }",
          "350:         if (length < 2048) {",
          "351:             let sortedCount = 1, lowerBound = 0, insertPoint = 0, upperBound = 0;",
          "352:             while (sortedCount < length) {",
          "354:                 upperBound = sortedCount;",
          "355:                 insertPoint = sortedCount - 1; // this lets us check for already ordered first",
          "356:                 lowerBound = 0;",
          "357:                 for (;;) {",
          "359:                         upperBound = insertPoint;",
          "360:                     } else {",
          "361:                         lowerBound = insertPoint + 1;",
          "",
          "[Removed Lines]",
          "339:         let compArray = o;",
          "340:         if (compareFn === undefined && length > 1) {",
          "341:             compArray = __chakraLibrary.CreateCompareArray(o, length);",
          "342:             if (compArray === o) {",
          "343:                 compareFn = __chakraLibrary.DefaultStringSortCompare;",
          "344:             } else {",
          "345:                 compareFn = __chakraLibrary.DefaultSortCompare;",
          "346:             }",
          "347:         }",
          "353:                 const item = compArray[sortedCount];",
          "358:                     if (compareFn (item, compArray[insertPoint]) < 0) {",
          "",
          "[Added Lines]",
          "298:                 const item = o[sortedCount];",
          "303:                     if (compareFn (item, o[insertPoint]) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:                 }",
          "368:                 insertPoint = sortedCount;",
          "369:                 while (insertPoint > lowerBound) {",
          "371:                 }",
          "373:                 ++sortedCount;",
          "374:             }",
          "375:         } else {",
          "384:         }",
          "386:         return o;",
          "",
          "[Removed Lines]",
          "370:                     compArray[insertPoint--] = compArray[insertPoint];",
          "372:                 compArray[lowerBound] = item;",
          "376:             __chakraLibrary.MergeSort(compArray, length, compareFn);",
          "377:         }",
          "379:         if (compArray !== o) {",
          "380:             i = 0;",
          "381:             while (i < length) {",
          "382:                 o[i] = compArray[i++].value;",
          "383:             }",
          "",
          "[Added Lines]",
          "315:                     o[insertPoint--] = o[insertPoint];",
          "317:                 o[lowerBound] = item;",
          "321:             __chakraLibrary.MergeSort(o, length, compareFn);",
          "",
          "---------------"
        ],
        "test/Array/array_sort.js||test/Array/array_sort.js": [
          "File: test/Array/array_sort.js -> test/Array/array_sort.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:             compareSparseArrays(resultTwo, arrayTwo.sort((x, y) => { delete arrayTwo[0]; return x - y; }), \"Compare function delete element effects array\");",
          "224:             compareSparseArrays(resultTwo, arrayTwo, \"Compare function delete element effects array\");",
          "225:         }",
          "226:     }",
          "227: ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     },",
          "227:     {",
          "228:         name : \"Array.prototype.sort default comparison should not call valueOf\",",
          "229:         body () {",
          "230:             valueOf = false;",
          "231:             const arr = [{",
          "232:                 valueOf() { valueOf = true; return 0; }",
          "233:             }, 1, 1, 1,];",
          "234:             arr.sort();",
          "235:             assert.isFalse(valueOf);",
          "236:         }",
          "",
          "---------------"
        ],
        "test/Array/array_sort_random.js||test/Array/array_sort_random.js": [
          "File: test/Array/array_sort_random.js -> test/Array/array_sort_random.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     for (let i = 1; i < size; ++i)",
          "70:     {",
          "72:         {",
          "73:             print (`Unsorted: ${unsorted}`);",
          "74:             print (`Sorted: ${sorted}`);",
          "",
          "[Removed Lines]",
          "71:         if (\"\" + sorted[i-1] > \"\" + sorted[i])",
          "",
          "[Added Lines]",
          "71:         if (`${sorted[i-1]}` > `${sorted[i]}`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169: stressTestSort(200, 2050);",
          "",
          "[Removed Lines]",
          "171: WScript.Echo(\"PASS\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/xplatRegenByteCode.py||tools/xplatRegenByteCode.py": [
          "File: tools/xplatRegenByteCode.py -> tools/xplatRegenByteCode.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:         ['../build.sh', '--no-jit', '--test-build', '--target-path=../out/noJit', '-j=2'],",
          "35:         'No Jit build failed - aborting bytecode generation')",
          "36:     run_sub('Compiling ChakraCore with Jit',",
          "38:         'Jit build failed - aborting bytecode generation')",
          "40: # Regenerate the bytecode",
          "",
          "[Removed Lines]",
          "37:         ['../build.sh', '--test-build', '--target-path=../out', '-j=2'],",
          "",
          "[Added Lines]",
          "37:         ['../build.sh', '--test-build', '--target-path=../out/Jit', '-j=2'],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     'Failed to generate INTL 32bit noJit bytecode')",
          "58: bytecode_job('../lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h',",
          "60:     'Failed to generate INTL 64bit bytecode')",
          "62: bytecode_job('../lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h',",
          "64:     'Failed to generate INTL 32bit bytecode')",
          "66: # JsBuiltin",
          "",
          "[Removed Lines]",
          "59:     ['../out/test/ch', '-GenerateLibraryByteCodeHeader', '-Intl', '../lib/Runtime/Library/InJavascript/Intl.js'],",
          "63:     ['../out/test/ch', '-GenerateLibraryByteCodeHeader', '-Intl', '-Force32BitByteCode','../lib/Runtime/Library/InJavascript/Intl.js'],",
          "",
          "[Added Lines]",
          "59:     ['../out/Jit/test/ch', '-GenerateLibraryByteCodeHeader', '-Intl', '../lib/Runtime/Library/InJavascript/Intl.js'],",
          "63:     ['../out/Jit/test/ch', '-GenerateLibraryByteCodeHeader', '-Intl', '-Force32BitByteCode','../lib/Runtime/Library/InJavascript/Intl.js'],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     'Failed to generate noJit 32bit JsBuiltin Bytecode')",
          "76: bytecode_job('../lib/Runtime/Library/JsBuiltin/JsBuiltin.js.bc.64b.h',",
          "78:     'Failed to generate 64bit JsBuiltin Bytecode')",
          "80: bytecode_job('../lib/Runtime/Library/JsBuiltin/JsBuiltin.js.bc.32b.h',",
          "82:     'Failed to generate 32bit JsBuiltin Bytecode')",
          "84: # Bytecode regeneration complete - create a new GUID for it",
          "",
          "[Removed Lines]",
          "77:     ['../out/test/ch', '-GenerateLibraryByteCodeHeader', '-JsBuiltIn', '-LdChakraLib', '../lib/Runtime/Library/JsBuiltin/JsBuiltin.js'],",
          "81:     ['../out/test/ch', '-GenerateLibraryByteCodeHeader', '-JsBuiltIn', '-LdChakraLib', '-Force32BitByteCode', '../lib/Runtime/Library/JsBuiltin/JsBuiltin.js'],",
          "",
          "[Added Lines]",
          "77:     ['../out/Jit/test/ch', '-GenerateLibraryByteCodeHeader', '-JsBuiltIn', '-LdChakraLib', '../lib/Runtime/Library/JsBuiltin/JsBuiltin.js'],",
          "81:     ['../out/Jit/test/ch', '-GenerateLibraryByteCodeHeader', '-JsBuiltIn', '-LdChakraLib', '-Force32BitByteCode', '../lib/Runtime/Library/JsBuiltin/JsBuiltin.js'],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec7a0672e215719f9617e61fa29d03110ca87889",
      "candidate_info": {
        "commit_hash": "ec7a0672e215719f9617e61fa29d03110ca87889",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/ec7a0672e215719f9617e61fa29d03110ca87889",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "tools/update_bytecode_version.ps1"
        ],
        "message": "Update release/1.11 to version 1.11.0, update GUID, and set PRERELEASE",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "tools/update_bytecode_version.ps1||tools/update_bytecode_version.ps1"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "19: #define CHAKRA_CORE_MINOR_VERSION 10",
          "20: #define CHAKRA_CORE_PATCH_VERSION 2",
          "",
          "[Added Lines]",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "20: #define CHAKRA_CORE_PATCH_VERSION 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: #define CHAKRA_CORE_VERSION_RELEASE 1",
          "",
          "[Removed Lines]",
          "58: #define CHAKRA_CORE_VERSION_PRERELEASE 0",
          "",
          "[Added Lines]",
          "58: #define CHAKRA_CORE_VERSION_PRERELEASE 1",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "9: { 0x18949169, 0x1B93, 0x4123, { 0xB3, 0x4A, 0xF4, 0x2F, 0x1C, 0x1E, 0xAF, 0x9A } };",
          "",
          "[Added Lines]",
          "10: { 0xBAE0C525, 0xF1E9, 0x4DCF, { 0xAF, 0x50, 0xC7, 0x0A, 0xCB, 0x3E, 0x4A, 0x7F } };",
          "",
          "---------------"
        ],
        "tools/update_bytecode_version.ps1||tools/update_bytecode_version.ps1": [
          "File: tools/update_bytecode_version.ps1 -> tools/update_bytecode_version.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: \"@",
          "29: Write-Header $copyright",
          "31: Write-Header \"const GUID byteCodeCacheReleaseFileVersion =\"",
          "33: $version -match \"^(\\w{8})-(\\w{4})-(\\w{4})-(\\w{4}-\\w{12})$\" | Out-Null",
          "",
          "[Removed Lines]",
          "27: $version=[Guid]::NewGuid().ToString()",
          "30: Write-Header \"// $version\"",
          "",
          "[Added Lines]",
          "27: $version=[Guid]::NewGuid().ToString().ToUpper()",
          "30: Write-Header \"// {$version}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70413a245c814bdb415e6c0718e59abe551b7ff3",
      "candidate_info": {
        "commit_hash": "70413a245c814bdb415e6c0718e59abe551b7ff3",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/70413a245c814bdb415e6c0718e59abe551b7ff3",
        "files": [
          "Build/NuGet/.pack-version",
          "lib/Common/ChakraCoreVersion.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ],
        "message": "Update release/1.11 to version 1.11.2",
        "before_after_code_files": [
          "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/ChakraCoreVersion.h||lib/Common/ChakraCoreVersion.h": [
          "File: lib/Common/ChakraCoreVersion.h -> lib/Common/ChakraCoreVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CHAKRA_CORE_MAJOR_VERSION 1",
          "19: #define CHAKRA_CORE_MINOR_VERSION 11",
          "21: #define CHAKRA_CORE_VERSION_RELEASE_QFE 0 // Redundant with PATCH_VERSION. Keep this value set to 0.",
          "",
          "[Removed Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 1",
          "",
          "[Added Lines]",
          "20: #define CHAKRA_CORE_PATCH_VERSION 2",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0xBAE0C525, 0xF1E9, 0x4DCF, { 0xAF, 0x50, 0xC7, 0x0A, 0xCB, 0x3E, 0x4A, 0x7F } };",
          "",
          "[Added Lines]",
          "10: { 0x67AFB5DE, 0x5B86, 0x43E8, { 0xB3, 0xB5, 0xCF, 0xD2, 0x5F, 0xEA, 0x8F, 0xC3 } };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b75847eb1ef4136d49e119c072266d8874a6e41e",
      "candidate_info": {
        "commit_hash": "b75847eb1ef4136d49e119c072266d8874a6e41e",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/b75847eb1ef4136d49e119c072266d8874a6e41e",
        "files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "message": "[CVE-2019-1217]",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x3096a219, 0x129d, 0x4a4a, { 0xa6, 0x1c, 0x18, 0x6d, 0x3, 0xbb, 0x25, 0xb7 } };",
          "",
          "[Added Lines]",
          "10: { 0x81AEEA4B, 0xAE4E, 0x40C0, { 0x84, 0x8F, 0x6D, 0xB7, 0xC5, 0xF4, 0x9F, 0x55 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: (function (intrinsic) {",
          "9:     var platform = intrinsic.JsBuiltIn;",
          "19:     var setPrototype = platform.builtInSetPrototype;",
          "20:     var _objectDefineProperty = platform.builtInJavascriptObjectEntryDefineProperty;",
          "21:     var Symbol = platform.Symbol;",
          "22:     var CreateObject = platform.builtInJavascriptObjectCreate;",
          "24:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "25:         \"use strict\";",
          "26:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "",
          "[Removed Lines]",
          "11:     let FunctionsEnum = {",
          "12:         ArrayValues: { className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" },",
          "13:         ArrayKeys: { className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "14:         ArrayEntries: { className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "15:         ArrayIndexOf: { className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "16:         ArrayFilter: { className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "17:     };",
          "",
          "[Added Lines]",
          "16:     let FunctionsEnum = {",
          "17:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "18:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "19:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "20:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "21:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "22:     };",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: (function (intrinsic) {",
          "14:     var platform = intrinsic.JsBuiltIn;",
          "24:     var setPrototype = platform.builtInSetPrototype;",
          "25:     var _objectDefineProperty = platform.builtInJavascriptObjectEntryDefineProperty;",
          "26:     var Symbol = platform.Symbol;",
          "27:     var CreateObject = platform.builtInJavascriptObjectCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         \"use strict\";",
          "31:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "",
          "[Removed Lines]",
          "16:     let FunctionsEnum = {",
          "17:         ArrayValues: { className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" },",
          "18:         ArrayKeys: { className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "19:         ArrayEntries: { className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "20:         ArrayIndexOf: { className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "21:         ArrayFilter: { className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "22:     };",
          "",
          "[Added Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: (function (intrinsic) {",
          "14:     var platform = intrinsic.JsBuiltIn;",
          "24:     var setPrototype = platform.builtInSetPrototype;",
          "25:     var _objectDefineProperty = platform.builtInJavascriptObjectEntryDefineProperty;",
          "26:     var Symbol = platform.Symbol;",
          "27:     var CreateObject = platform.builtInJavascriptObjectCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         \"use strict\";",
          "31:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "",
          "[Removed Lines]",
          "16:     let FunctionsEnum = {",
          "17:         ArrayValues: { className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" },",
          "18:         ArrayKeys: { className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "19:         ArrayEntries: { className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "20:         ArrayIndexOf: { className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "21:         ArrayFilter: { className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "22:     };",
          "",
          "[Added Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: (function (intrinsic) {",
          "14:     var platform = intrinsic.JsBuiltIn;",
          "24:     var setPrototype = platform.builtInSetPrototype;",
          "25:     var _objectDefineProperty = platform.builtInJavascriptObjectEntryDefineProperty;",
          "26:     var Symbol = platform.Symbol;",
          "27:     var CreateObject = platform.builtInJavascriptObjectCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         \"use strict\";",
          "31:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "",
          "[Removed Lines]",
          "16:     let FunctionsEnum = {",
          "17:         ArrayValues: { className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" },",
          "18:         ArrayKeys: { className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "19:         ArrayEntries: { className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "20:         ArrayIndexOf: { className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "21:         ArrayFilter: { className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "22:     };",
          "",
          "[Added Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: (function (intrinsic) {",
          "14:     var platform = intrinsic.JsBuiltIn;",
          "24:     var setPrototype = platform.builtInSetPrototype;",
          "25:     var _objectDefineProperty = platform.builtInJavascriptObjectEntryDefineProperty;",
          "26:     var Symbol = platform.Symbol;",
          "27:     var CreateObject = platform.builtInJavascriptObjectCreate;",
          "29:     platform.registerChakraLibraryFunction(\"ArrayIterator\", function (arrayObj, iterationKind) {",
          "30:         \"use strict\";",
          "31:         __chakraLibrary.InitInternalProperties(this, 4, \"__$arrayObj$__\", \"__$nextIndex$__\", \"__$kind$__\", \"__$internalDone$__\");",
          "",
          "[Removed Lines]",
          "16:     let FunctionsEnum = {",
          "17:         ArrayValues: { className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" },",
          "18:         ArrayKeys: { className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "19:         ArrayEntries: { className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ },",
          "20:         ArrayIndexOf: { className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "21:         ArrayFilter: { className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ },",
          "22:     };",
          "",
          "[Added Lines]",
          "21:     let FunctionsEnum = {",
          "22:         ArrayValues: setPrototype({ className: \"Array\", methodName: \"values\", argumentsCount: 0, forceInline: true /*optional*/, alias: \"Symbol.iterator\" }, null),",
          "23:         ArrayKeys: setPrototype({ className: \"Array\", methodName: \"keys\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "24:         ArrayEntries: setPrototype({ className: \"Array\", methodName: \"entries\", argumentsCount: 0, forceInline: true /*optional*/ }, null),",
          "25:         ArrayIndexOf: setPrototype({ className: \"Array\", methodName: \"indexOf\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "26:         ArrayFilter: setPrototype({ className: \"Array\", methodName: \"filter\", argumentsCount: 1, forceInline: true /*optional*/ }, null),",
          "27:     };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc907f2031c1cf93fce8cd490d7a46ae06343f02",
      "candidate_info": {
        "commit_hash": "fc907f2031c1cf93fce8cd490d7a46ae06343f02",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/fc907f2031c1cf93fce8cd490d7a46ae06343f02",
        "files": [
          "lib/Backend/FlowGraph.cpp",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/IR.cpp",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilder.h",
          "lib/Backend/Lower.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "message": "Change the way the JIT renumbers byte code temps",
        "before_after_code_files": [
          "lib/Backend/FlowGraph.cpp||lib/Backend/FlowGraph.cpp",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/IR.cpp||lib/Backend/IR.cpp",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilder.h||lib/Backend/IRBuilder.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeDumper.cpp||lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h||lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/ByteCodeWriter.cpp||lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.h||lib/Runtime/Language/InterpreterStackFrame.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ],
          "candidate": [
            "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
            "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
            "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
            "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
            "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
            "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/FlowGraph.cpp||lib/Backend/FlowGraph.cpp": [
          "File: lib/Backend/FlowGraph.cpp -> lib/Backend/FlowGraph.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:         case Js::OpCode::BrSrNeq_A:",
          "836:         case Js::OpCode::BrOnHasProperty:",
          "837:         case Js::OpCode::BrOnNoProperty:",
          "838:         case Js::OpCode::BrOnNoLocalProperty:",
          "839:         case Js::OpCode::BrHasSideEffects:",
          "840:         case Js::OpCode::BrNotHasSideEffects:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:         case Js::OpCode::BrOnHasLocalProperty:",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3418:         case Js::OpCode::BrOnNoProperty:",
          "3419:         case Js::OpCode::BrOnNoLocalProperty:",
          "3420:         case Js::OpCode::BrOnHasProperty:",
          "3421:         case Js::OpCode::LdMethodFldPolyInlineMiss:",
          "3422:         case Js::OpCode::StSlotChkUndecl:",
          "3423:         case Js::OpCode::ScopedLdInst:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3421:         case Js::OpCode::BrOnHasLocalProperty:",
          "",
          "---------------"
        ],
        "lib/Backend/IR.cpp||lib/Backend/IR.cpp": [
          "File: lib/Backend/IR.cpp -> lib/Backend/IR.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1906:         this->m_opcode = Js::OpCode::BrOnNoProperty;",
          "1907:         break;",
          "1909:     case Js::OpCode::BrOnNoProperty:",
          "1910:         this->m_opcode = Js::OpCode::BrOnHasProperty;",
          "1911:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1909:     case Js::OpCode::BrOnHasLocalProperty:",
          "1910:         this->m_opcode = Js::OpCode::BrOnNoLocalProperty;",
          "1911:         break;",
          "1913:     case Js::OpCode::BrOnNoLocalProperty:",
          "1914:         this->m_opcode = Js::OpCode::BrOnHasLocalProperty;",
          "1915:         break;",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "353:     if (tempCount > 0)",
          "354:     {",
          "355:         this->tempMap = AnewArrayZ(m_tempAlloc, SymID, tempCount);",
          "357:     }",
          "358:     else",
          "359:     {",
          "360:         this->tempMap = nullptr;",
          "362:     }",
          "364:     m_func->m_headInstr = IR::EntryInstr::New(Js::OpCode::FunctionEntry, m_func);",
          "",
          "[Removed Lines]",
          "356:         this->fbvTempUsed = BVFixed::New<JitArenaAllocator>(tempCount, m_tempAlloc);",
          "361:         this->fbvTempUsed = nullptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1224:             this->SetMappedTemp(regSlot, symID);",
          "1225:             this->EnsureLoopBodyLoadSlot(symID);",
          "1226:         }",
          "1228:     }",
          "1229:     else",
          "1230:     {",
          "",
          "[Removed Lines]",
          "1227:         this->SetTempUsed(regSlot, TRUE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1317: IR::RegOpnd *",
          "1319: {",
          "1320:     StackSym *   symDst;",
          "1321:     SymID        symID;",
          "",
          "[Removed Lines]",
          "1318: IRBuilder::BuildDstOpnd(Js::RegSlot dstRegSlot, IRType type, bool isCatchObjectSym)",
          "",
          "[Added Lines]",
          "1315: IRBuilder::BuildDstOpnd(Js::RegSlot dstRegSlot, IRType type, bool isCatchObjectSym, bool reuseTemp)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1340:         {",
          "1343:             this->SetMappedTemp(dstRegSlot, symID);",
          "1344:         }",
          "1346:         {",
          "1355:         }",
          "1357:     }",
          "1358:     else",
          "1359:     {",
          "",
          "[Removed Lines]",
          "1339:         if (this->GetTempUsed(dstRegSlot))",
          "1341:             symID = m_func->m_symTable->NewID();",
          "1342:             this->SetTempUsed(dstRegSlot, FALSE);",
          "1345:         else",
          "1347:             symID = this->GetMappedTemp(dstRegSlot);",
          "1349:             if (symID == 0)",
          "1350:             {",
          "1352:                 symID = static_cast<SymID>(dstRegSlot);",
          "1353:                 this->SetMappedTemp(dstRegSlot, symID);",
          "1354:             }",
          "",
          "[Added Lines]",
          "1337:         symID = this->GetMappedTemp(dstRegSlot);",
          "1338:         if (symID == 0)",
          "1341:             symID = static_cast<SymID>(dstRegSlot);",
          "1344:         else if (!reuseTemp)",
          "1347:             symID = m_func->m_symTable->NewID();",
          "1348:             this->SetMappedTemp(dstRegSlot, symID);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1506:     IR::Opnd * srcOpnd = nullptr;",
          "1507:     bool isNotInt = false;",
          "1508:     bool dstIsCatchObject = false;",
          "1509:     ValueType dstValueType;",
          "1510:     switch (newOpcode)",
          "1511:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1502:     bool reuseLoc = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1560:         isNotInt = true;",
          "1561:         break;",
          "1563:     case Js::OpCode::LdLocalObj:",
          "1564:         if (!m_func->GetJITFunctionBody()->HasScopeObject())",
          "1565:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1557:     case Js::OpCode::LdLocalObj_ReuseLoc:",
          "1558:         reuseLoc = true;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1636:             break;",
          "1637:         }",
          "1639:     case Js::OpCode::LdFalse:",
          "1640:         {",
          "1641:             const auto addrOpnd = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetFalseAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1636:     case Js::OpCode::LdFalse_ReuseLoc:",
          "1637:         reuseLoc = true;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1645:             break;",
          "1646:         }",
          "1648:     case Js::OpCode::LdTrue:",
          "1649:         {",
          "1650:             const auto addrOpnd = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetTrueAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1648:     case Js::OpCode::LdTrue_ReuseLoc:",
          "1649:         reuseLoc = true;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1666:         isNotInt = TRUE;",
          "1667:         break;",
          "1675:     case Js::OpCode::InitUndecl:",
          "1676:         srcOpnd = IR::AddrOpnd::New(m_func->GetScriptContextInfo()->GetUndeclBlockVarAddr(), IR::AddrOpndKindDynamicVar, m_func, true);",
          "1677:         srcOpnd->SetValueType(ValueType::PrimitiveOrObject);",
          "",
          "[Removed Lines]",
          "1669:     case Js::OpCode::Unused:",
          "1671:         Assert(this->RegIsTemp(dstRegSlot));",
          "1672:         this->SetTempUsed(dstRegSlot, TRUE);",
          "1673:         return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1705:         }",
          "1706:     }",
          "1709:     dstOpnd->SetValueType(dstValueType);",
          "1710:     StackSym *      dstSym = dstOpnd->m_sym;",
          "1711:     dstSym->m_isCatchObjectSym = dstIsCatchObject;",
          "",
          "[Removed Lines]",
          "1708:     IR::RegOpnd *   dstOpnd = this->BuildDstOpnd(dstRegSlot, TyVar, dstIsCatchObject);",
          "",
          "[Added Lines]",
          "1705:     IR::RegOpnd *   dstOpnd = this->BuildDstOpnd(dstRegSlot, TyVar, dstIsCatchObject, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1773: {",
          "1774:     IR::RegOpnd *   src1Opnd = this->BuildSrcOpnd(R1);",
          "1775:     StackSym *      symSrc1 = src1Opnd->m_sym;",
          "1777:     switch (newOpcode)",
          "1778:     {",
          "1779:     case Js::OpCode::SpreadObjectLiteral:",
          "1781:     case Js::OpCode::SetComputedNameVar:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1773:     bool            reuseLoc = false;",
          "1777:     case Js::OpCode::Ld_A_ReuseLoc:",
          "1778:         newOpcode = Js::OpCode::Ld_A;",
          "1779:         reuseLoc = true;",
          "1780:         break;",
          "1782:     case Js::OpCode::Typeof_ReuseLoc:",
          "1783:         newOpcode = Js::OpCode::Typeof;",
          "1784:         reuseLoc = true;",
          "1785:         break;",
          "1787:     case Js::OpCode::UnwrapWithObj_ReuseLoc:",
          "1788:         newOpcode = Js::OpCode::UnwrapWithObj;",
          "1789:         reuseLoc = true;",
          "1790:         break;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1807:     }",
          "1808:     }",
          "1811:     StackSym *      dstSym = dstOpnd->m_sym;",
          "1813:     IR::Instr * instr = nullptr;",
          "",
          "[Removed Lines]",
          "1810:     IR::RegOpnd *   dstOpnd = this->BuildDstOpnd(R0);",
          "",
          "[Added Lines]",
          "1823:     IR::RegOpnd *   dstOpnd = this->BuildDstOpnd(R0, TyVar, false, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2381:     IR::Instr *     instr;",
          "2382:     IR::RegOpnd * srcOpnd = this->BuildSrcOpnd(srcRegSlot);",
          "2385:     IR::IndirOpnd * indir1Opnd = IR::IndirOpnd::New(dstOpnd, index, TyVar, m_func);",
          "",
          "[Removed Lines]",
          "2383:     IR::RegOpnd * dstOpnd = this->BuildDstOpnd(dstRegSlot);",
          "",
          "[Added Lines]",
          "2396:     IR::RegOpnd * dstOpnd = this->BuildDstOpnd(dstRegSlot, TyVar, false, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2417:     IR::Instr *     instr;",
          "2418:     IR::RegOpnd * src1Opnd = this->BuildSrcOpnd(src1RegSlot);",
          "2419:     IR::RegOpnd * src2Opnd = this->BuildSrcOpnd(src2RegSlot);",
          "2423:     IR::Instr * newConcatStrMulti = nullptr;",
          "2424:     switch (newOpcode)",
          "2425:     {",
          "2426:     case Js::OpCode::NewConcatStrMulti:",
          "2428:         newConcatStrMulti = IR::Instr::New(Js::OpCode::NewConcatStrMulti, dstOpnd, IR::IntConstOpnd::New(index, TyUint32, m_func), m_func);",
          "2429:         index = 0;",
          "2430:         break;",
          "2431:     case Js::OpCode::SetConcatStrMultiItem2:",
          "2432:         break;",
          "2433:     default:",
          "2434:         Assert(false);",
          "2435:     };",
          "2436:     IR::IndirOpnd * indir1Opnd = IR::IndirOpnd::New(dstOpnd, index, TyVar, m_func);",
          "2437:     IR::IndirOpnd * indir2Opnd = IR::IndirOpnd::New(dstOpnd, index + 1, TyVar, m_func);",
          "",
          "[Removed Lines]",
          "2420:     IR::RegOpnd * dstOpnd = this->BuildDstOpnd(dstRegSlot);",
          "2421:     dstOpnd->SetValueType(ValueType::String);",
          "",
          "[Added Lines]",
          "2433:     IR::RegOpnd * dstOpnd = nullptr;",
          "2439:         dstOpnd = this->BuildDstOpnd(dstRegSlot);",
          "2444:         dstOpnd = this->BuildDstOpnd(dstRegSlot, TyVar, false, true);",
          "2449:     dstOpnd->SetValueType(ValueType::String);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3152:     PropertyKind    propertyKind = PropertyKindData;",
          "3153:     IR::SymOpnd *   fieldSymOpnd = this->BuildFieldOpnd(newOpcode, fieldRegSlot, propertyId, propertyIdIndex, propertyKind);",
          "3154:     IR::RegOpnd * regOpnd;",
          "3156:     switch (newOpcode)",
          "3157:     {",
          "3158:     case Js::OpCode::DeleteFld:",
          "3159:     case Js::OpCode::DeleteRootFld:",
          "3160:     case Js::OpCode::DeleteFldStrict:",
          "3161:     case Js::OpCode::DeleteRootFldStrict:",
          "3164:         instr = IR::Instr::New(newOpcode, regOpnd, fieldSymOpnd, m_func);",
          "3165:         break;",
          "",
          "[Removed Lines]",
          "3163:         regOpnd = this->BuildDstOpnd(regSlot);",
          "",
          "[Added Lines]",
          "3169:     bool            reuseLoc = false;",
          "3173:     case Js::OpCode::DeleteFld_ReuseLoc:",
          "3174:         newOpcode = Js::OpCode::DeleteFld;",
          "3175:         reuseLoc = true;",
          "3182:         regOpnd = this->BuildDstOpnd(regSlot, TyVar, false, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3482:     StackSym *   stackFuncPtrSym = nullptr;",
          "3483:     SymID        symID = m_func->GetJITFunctionBody()->GetLocalClosureReg();",
          "3484:     bool isLdSlotThatWasNotProfiled = false;",
          "3485:     StackSym* closureSym = m_func->GetLocalClosureSym();",
          "3487:     uint scopeSlotSize = this->IsParamScopeDone() ? m_func->GetJITFunctionBody()->GetScopeSlotArraySize() : m_func->GetJITFunctionBody()->GetParamScopeSlotArraySize();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3504:     bool reuseLoc = false;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3679:             this->AddInstr(instr, offset);",
          "3680:             break;",
          "3682:         case Js::OpCode::LdEnvObj:",
          "3683:             fieldOpnd = this->BuildFieldOpnd(Js::OpCode::LdSlotArr, this->GetEnvReg(), slotId, (Js::PropertyIdIndexType)-1, PropertyKindSlotArray);",
          "3685:             instr = IR::Instr::New(Js::OpCode::LdSlotArr, regOpnd, fieldOpnd, m_func);",
          "3686:             this->AddInstr(instr, offset);",
          "",
          "[Removed Lines]",
          "3684:             regOpnd = this->BuildDstOpnd(regSlot);",
          "",
          "[Added Lines]",
          "3702:         case Js::OpCode::LdEnvObj_ReuseLoc:",
          "3703:             reuseLoc = true;",
          "3707:             regOpnd = this->BuildDstOpnd(regSlot, TyVar, false, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4255:     propertyId = this->m_func->GetJITFunctionBody()->GetPropertyIdFromCacheId(inlineCacheIndex);",
          "4257:     Js::RegSlot instance = this->GetEnvRegForEvalCode();",
          "4259:     switch (newOpcode)",
          "4260:     {",
          "4261:     case Js::OpCode::LdLocalFld:",
          "4262:         if (m_func->GetLocalClosureSym()->HasByteCodeRegSlot())",
          "4263:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4281:     bool reuseLoc = false;",
          "4285:     case Js::OpCode::LdLocalFld_ReuseLoc:",
          "4286:         reuseLoc = true;",
          "4287:         newOpcode = Js::OpCode::LdLocalFld;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4272:         {",
          "4273:             fieldSymOpnd->AsPropertySymOpnd()->TryDisableRuntimePolymorphicCache();",
          "4274:         }",
          "4277:         instr = nullptr;",
          "4278:         if (isProfiled)",
          "",
          "[Removed Lines]",
          "4275:         regOpnd = this->BuildDstOpnd(regSlot);",
          "",
          "[Added Lines]",
          "4303:         regOpnd = this->BuildDstOpnd(regSlot, TyVar, false, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4486:     IR::Instr *     instr = nullptr;",
          "4487:     bool isLdFldThatWasNotProfiled = false;",
          "4488:     switch (newOpcode)",
          "4489:     {",
          "4490:     case Js::OpCode::LdFldForTypeOf:",
          "4491:     case Js::OpCode::LdFld:",
          "4492:     case Js::OpCode::LdLen_A:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4516:     bool reuseLoc = false;",
          "4519:     case Js::OpCode::LdFld_ReuseLoc:",
          "4520:         reuseLoc = true;",
          "4521:         newOpcode = Js::OpCode::LdFld;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4502:     case Js::OpCode::ScopedLdMethodFld:",
          "4507:         if (isProfiled)",
          "4508:         {",
          "",
          "[Removed Lines]",
          "4505:         regOpnd = this->BuildDstOpnd(regSlot);",
          "",
          "[Added Lines]",
          "4538:         regOpnd = this->BuildDstOpnd(regSlot, TyVar, false, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4879:     IR::RegOpnd *   regOpnd;",
          "4880:     IR::SymOpnd *   fieldSymOpnd;",
          "4881:     Js::PropertyId propertyId = m_func->GetJITFunctionBody()->GetReferencedPropertyId(propertyIdIndex);",
          "4883:     switch (newOpcode)",
          "4884:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4915:     bool            reuseLoc = false;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4926:             instr = IR::Instr::New(newOpcode, fieldSymOpnd, regOpnd, m_func);",
          "4927:             break;",
          "4929:         case Js::OpCode::DeleteLocalFld:",
          "4930:             newOpcode = Js::OpCode::DeleteFld;",
          "4931:             fieldSymOpnd = BuildFieldOpnd(newOpcode, m_func->GetJITFunctionBody()->GetLocalClosureReg(), propertyId, propertyIdIndex, PropertyKindData);",
          "4933:             instr = IR::Instr::New(newOpcode, regOpnd, fieldSymOpnd, m_func);",
          "4934:             break;",
          "",
          "[Removed Lines]",
          "4932:             regOpnd = BuildDstOpnd(instance);",
          "",
          "[Added Lines]",
          "4963:         case Js::OpCode::DeleteLocalFld_ReuseLoc:",
          "4964:             newOpcode = Js::OpCode::DeleteLocalFld;",
          "4965:             reuseLoc = true;",
          "4970:             regOpnd = BuildDstOpnd(instance, TyVar, false, reuseLoc);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7278: IRBuilder::BuildBrLocalProperty(Js::OpCode newOpcode, uint32 offset)",
          "7279: {",
          "7280:     Assert(!OpCodeAttr::HasMultiSizeLayout(newOpcode));",
          "7283:     const unaligned   Js::OpLayoutBrLocalProperty *branchInsn = m_jnReader.BrLocalProperty();",
          "",
          "[Removed Lines]",
          "7281:     Assert(newOpcode == Js::OpCode::BrOnNoLocalProperty);",
          "",
          "[Added Lines]",
          "7319:     Assert(newOpcode == Js::OpCode::BrOnHasLocalProperty);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7322:     fieldSym = PropertySym::New(regOpnd->m_sym, propertyId, branchInsn->PropertyIdIndex, (uint)-1, PropertyKindData, m_func);",
          "7323:     fieldOpnd = IR::SymOpnd::New(fieldSym, TyVar, m_func);",
          "7326:     this->AddBranchInstr(branchInstr, offset, targetOffset);",
          "7327: }",
          "",
          "[Removed Lines]",
          "7325:     branchInstr = IR::BranchInstr::New(newOpcode == Js::OpCode::BrOnNoEnvProperty ? Js::OpCode::BrOnNoProperty : Js::OpCode::BrOnNoLocalProperty, nullptr, fieldOpnd, m_func);",
          "",
          "[Added Lines]",
          "7363:     Assert(newOpcode == Js::OpCode::BrOnHasEnvProperty || newOpcode == Js::OpCode::BrOnHasLocalEnvProperty);",
          "7364:     branchInstr = IR::BranchInstr::New(newOpcode == Js::OpCode::BrOnHasEnvProperty ? Js::OpCode::BrOnHasProperty : Js::OpCode::BrOnHasLocalProperty, nullptr, fieldOpnd, m_func);",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.h||lib/Backend/IRBuilder.h": [
          "File: lib/Backend/IRBuilder.h -> lib/Backend/IRBuilder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:     IR::SymOpnd *       BuildFieldOpnd(Js::OpCode newOpCode, Js::RegSlot reg, Js::PropertyId propertyId, Js::PropertyIdIndexType propertyIdIndex, PropertyKind propertyKind, uint inlineCacheIndex = -1);",
          "215:     PropertySym *       BuildFieldSym(Js::RegSlot reg, Js::PropertyId propertyId, Js::PropertyIdIndexType propertyIdIndex, uint inlineCacheIndex, PropertyKind propertyKind);",
          "216:     SymID               BuildSrcStackSymID(Js::RegSlot regSlot);",
          "218:     IR::RegOpnd *       BuildSrcOpnd(Js::RegSlot srcRegSlot, IRType type = TyVar);",
          "219:     IR::AddrOpnd *      BuildAuxArrayOpnd(AuxArrayValue auxArrayType, uint32 auxArrayOffset);",
          "220:     IR::Opnd *          BuildAuxObjectLiteralTypeRefOpnd(int objectId);",
          "",
          "[Removed Lines]",
          "217:     IR::RegOpnd *       BuildDstOpnd(Js::RegSlot dstRegSlot, IRType type = TyVar, bool isCatchObjectSym = false);",
          "",
          "[Added Lines]",
          "217:     IR::RegOpnd *       BuildDstOpnd(Js::RegSlot dstRegSlot, IRType type = TyVar, bool isCatchObjectSym = false, bool reuseTemp = false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:         this->tempMap[tempIndex] = tempId;",
          "248:     }",
          "277:     BOOL                RegIsTemp(Js::RegSlot reg)",
          "278:     {",
          "279:         return reg >= this->firstTemp;",
          "",
          "[Removed Lines]",
          "250:     BOOL                GetTempUsed(Js::RegSlot reg)",
          "251:     {",
          "252:         AssertMsg(this->RegIsTemp(reg), \"Processing non-temp reg as a temp?\");",
          "253:         AssertMsg(this->fbvTempUsed, \"Processing non-temp reg without a used BV?\");",
          "255:         Js::RegSlot tempIndex = reg - this->firstTemp;",
          "256:         AssertOrFailFast(tempIndex < m_func->GetJITFunctionBody()->GetTempCount());",
          "257:         return this->fbvTempUsed->Test(tempIndex);",
          "258:     }",
          "260:     void                SetTempUsed(Js::RegSlot reg, BOOL used)",
          "261:     {",
          "262:         AssertMsg(this->RegIsTemp(reg), \"Processing non-temp reg as a temp?\");",
          "263:         AssertMsg(this->fbvTempUsed, \"Processing non-temp reg without a used BV?\");",
          "265:         Js::RegSlot tempIndex = reg - this->firstTemp;",
          "266:         AssertOrFailFast(tempIndex < m_func->GetJITFunctionBody()->GetTempCount());",
          "267:         if (used)",
          "268:         {",
          "269:             this->fbvTempUsed->Set(tempIndex);",
          "270:         }",
          "271:         else",
          "272:         {",
          "273:             this->fbvTempUsed->Clear(tempIndex);",
          "274:         }",
          "275:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:     typedef Pair<uint, bool> handlerStackElementType;",
          "348:     SList<handlerStackElementType>         *handlerOffsetStack;",
          "349:     SymID *             tempMap;",
          "351:     Js::RegSlot         firstTemp;",
          "352:     IRBuilderSwitchAdapter m_switchAdapter;",
          "353:     SwitchIRBuilder     m_switchBuilder;",
          "",
          "[Removed Lines]",
          "350:     BVFixed *           fbvTempUsed;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2213:             break;",
          "2215:         case Js::OpCode::BrOnHasProperty:",
          "2216:         case Js::OpCode::BrOnNoProperty:",
          "2217:         case Js::OpCode::BrOnNoLocalProperty:",
          "2218:             this->LowerBrProperty(instr, IR::HelperOp_HasProperty);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2216:         case Js::OpCode::BrOnHasLocalProperty:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10753:     switch (instr->m_opcode)",
          "10754:     {",
          "10755:     case Js::OpCode::BrOnHasProperty:",
          "10756:         instr->m_opcode = Js::OpCode::BrTrue_A;",
          "10757:         break;",
          "10758:     case Js::OpCode::BrOnNoProperty:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10757:     case Js::OpCode::BrOnHasLocalProperty:",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x81AEEA4B, 0xAE4E, 0x40C0, { 0x84, 0x8F, 0x6D, 0xB7, 0xC5, 0xF4, 0x9F, 0x55 } };",
          "",
          "[Added Lines]",
          "10: { 0x8DD0E3D3, 0x6A6D, 0x4D1F, { 0x8E, 0xED, 0xD8, 0x7D, 0x62, 0x17, 0xAB, 0x24 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeDumper.cpp||lib/Runtime/ByteCode/ByteCodeDumper.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeDumper.cpp -> lib/Runtime/ByteCode/ByteCodeDumper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:             }",
          "608:             case OpCode::DeleteLocalFld:",
          "609:                 Output::Print(_u(\" R%d = %s \"), data->Instance, pPropertyName->GetBuffer());",
          "610:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609:             case OpCode::DeleteLocalFld_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:         switch (op)",
          "694:         {",
          "695:             case OpCode::DeleteFld:",
          "696:             case OpCode::DeleteRootFld:",
          "697:             case OpCode::DeleteFldStrict:",
          "698:             case OpCode::DeleteRootFldStrict:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697:             case OpCode::DeleteFld_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "895:             case OpCode::LdLocalSlot:",
          "896:             case OpCode::LdParamSlot:",
          "897:             case OpCode::LdEnvObj:",
          "898:             case OpCode::LdLocalObjSlot:",
          "899:             case OpCode::LdParamObjSlot:",
          "900:                 Output::Print(_u(\" R%d = [%d] \"), data->Value, data->SlotIndex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900:             case OpCode::LdEnvObj_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "992:                 break;",
          "994:             case OpCode::LdLocalFld:",
          "995:                 Output::Print(_u(\" R%d = %s #%d\"), data->Value, pPropertyName->GetBuffer(), data->inlineCacheIndex);",
          "996:                 break;",
          "998:             case OpCode::ProfiledLdLocalFld:",
          "999:                 Output::Print(_u(\" R%d = %s #%d\"), data->Value, pPropertyName->GetBuffer(), data->inlineCacheIndex);",
          "1000:                 DumpProfileId(data->inlineCacheIndex);",
          "1001:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "998:             case OpCode::LdLocalFld_ReuseLoc:",
          "1003:             case OpCode::ProfiledLdLocalFld_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1056:             case OpCode::LdLen_A:",
          "1057:             case OpCode::LdFldForTypeOf:",
          "1058:             case OpCode::LdFld:",
          "1059:             case OpCode::LdFldForCallApplyTarget:",
          "1060:             case OpCode::LdMethodFld:",
          "1061:             case OpCode::ScopedLdMethodFld:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:             case OpCode::LdFld_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1077:             }",
          "1078:             case OpCode::ProfiledLdFldForTypeOf:",
          "1079:             case OpCode::ProfiledLdFld:",
          "1080:             case OpCode::ProfiledLdFldForCallApplyTarget:",
          "1081:             case OpCode::ProfiledLdMethodFld:",
          "1082:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:             case OpCode::ProfiledLdFld_ReuseLoc:",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     byteCodeGenerator->EndStatement(pnode); \\",
          "36: }",
          "38: BOOL MayHaveSideEffectOnNode(ParseNode *pnode, ParseNode *pnodeSE, ByteCodeGenerator *byteCodeGenerator)",
          "39: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: DynamicLoadRecord::DynamicLoadRecord() : kind(DynamicLoadKind::Invalid), label(Js::Constants::NoByteCodeOffset), instance(Js::Constants::NoSlot) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "980:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, Js::Constants::NoRegister/*computedPropertyLocation*/, true/*isTopLevel*/);",
          "981:     if (funcInfo->IsTmpReg(stmt->location))",
          "982:     {",
          "987:         funcInfo->ReleaseLoc(stmt);",
          "988:     }",
          "989: }",
          "",
          "[Removed Lines]",
          "983:         if (!stmt->isUsed && !fReturnValue)",
          "984:         {",
          "985:             m_writer.Reg1(Js::OpCode::Unused, stmt->location);",
          "986:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2337:     this->Writer()->Reg2(Js::OpCode::NewScObjectNoCtorFull, thisForSuperCall, pnodeSuperCall->pnodeNewTarget->location);",
          "2338:     this->Writer()->Br(Js::OpCode::Br, makeCallLabel);",
          "2339:     this->Writer()->MarkLabel(useNewTargetForThisLabel);",
          "2341:     this->Writer()->MarkLabel(makeCallLabel);",
          "2342:     EmitCall(pnodeSuperCall, this, funcInfo, fReturnValue, /*fEvaluateComponents*/ true, thisForSuperCall, pnodeSuperCall->pnodeNewTarget->location);",
          "",
          "[Removed Lines]",
          "2340:     this->Writer()->Reg2(Js::OpCode::Ld_A, thisForSuperCall, pnodeSuperCall->pnodeNewTarget->location);",
          "",
          "[Added Lines]",
          "2338:     this->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, thisForSuperCall, pnodeSuperCall->pnodeNewTarget->location);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2355:     this->Writer()->Reg2(Js::OpCode::Ld_A, valueForThis, thisForSuperCall);",
          "2356:     this->Writer()->Br(Js::OpCode::Br, doneLabel);",
          "2357:     this->Writer()->MarkLabel(useSuperCallResultLabel);",
          "2359:     this->Writer()->MarkLabel(doneLabel);",
          "",
          "[Removed Lines]",
          "2358:     this->Writer()->Reg2(Js::OpCode::Ld_A, valueForThis, pnodeSuperCall->location);",
          "",
          "[Added Lines]",
          "2356:     this->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, valueForThis, pnodeSuperCall->location);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4255: void ByteCodeGenerator::EmitLoadInstance(Symbol *sym, IdentPtr pid, Js::RegSlot *pThisLocation, Js::RegSlot *pInstLocation, FuncInfo *funcInfo)",
          "4256: {",
          "4259:     Js::RegSlot scopeLocation = Js::Constants::NoRegister;",
          "4260:     Js::RegSlot thisLocation = *pThisLocation;",
          "4261:     Js::RegSlot instLocation = *pInstLocation;",
          "",
          "[Removed Lines]",
          "4257:     Js::ByteCodeLabel doneLabel = 0;",
          "4258:     bool fLabelDefined = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4270:         return;",
          "4271:     }",
          "4273:     for (;;)",
          "4274:     {",
          "4275:         scope = this->FindScopeForSym(symScope, scope, &envIndex, funcInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4269:     JsUtil::List<DynamicLoadRecord, ArenaAllocator> recList(this->alloc);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4288:             if (instLocation == Js::Constants::NoRegister)",
          "4289:             {",
          "4290:                 instLocation = funcInfo->AcquireTmpRegister();",
          "4293:             }",
          "4294:         }",
          "",
          "[Removed Lines]",
          "4292:                 thisLocation = funcInfo->AcquireTmpRegister();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4308:         Assert(scope && scope->GetIsDynamic());",
          "4309:         AssertOrFailFast(scope->GetIsObject());",
          "4318:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "4319:         Js::PropertyIdIndexType propertyIndex = funcInfo->FindOrAddReferencedPropertyId(propertyId);",
          "",
          "[Removed Lines]",
          "4311:         if (!fLabelDefined)",
          "4312:         {",
          "4313:             fLabelDefined = true;",
          "4314:             doneLabel = this->m_writer.DefineLabel();",
          "4315:         }",
          "4317:         Js::ByteCodeLabel nextLabel = this->m_writer.DefineLabel();",
          "",
          "[Added Lines]",
          "4317:         DynamicLoadRecord rec;",
          "4319:         rec.label = this->m_writer.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4324:             {",
          "4333:             }",
          "4334:             else",
          "4335:             {",
          "",
          "[Removed Lines]",
          "4327:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnNoLocalProperty, nextLabel, propertyIndex);",
          "4328:                 this->m_writer.Reg1(Js::OpCode::LdLocalObj, instLocation);",
          "4329:                 if (thisLocation != Js::Constants::NoRegister && thisLocation != instLocation)",
          "4330:                 {",
          "4331:                     this->m_writer.Reg2(Js::OpCode::Ld_A, thisLocation, funcInfo->undefinedConstantRegister);",
          "4332:                 }",
          "",
          "[Added Lines]",
          "4329:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnHasLocalProperty, rec.label, propertyIndex);",
          "4330:                 rec.kind = DynamicLoadKind::Local;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4339:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "4346:             }",
          "4347:         }",
          "4348:         else",
          "4349:         {",
          "4350:             if (envIndex == -1)",
          "4351:             {",
          "4359:             }",
          "4360:             else",
          "4361:             {",
          "4363:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "4374:             }",
          "4375:         }",
          "4379:     }",
          "4381:     if (sym == nullptr || sym->GetIsGlobal())",
          "",
          "[Removed Lines]",
          "4340:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoLocalEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "4341:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, frameDisplayIndex);",
          "4342:                 if (thisLocation != Js::Constants::NoRegister && thisLocation != instLocation)",
          "4343:                 {",
          "4344:                     this->m_writer.Reg2(Js::OpCode::Ld_A, thisLocation, funcInfo->undefinedConstantRegister);",
          "4345:                 }",
          "4353:                 this->m_writer.BrProperty(Js::OpCode::BrOnNoProperty, nextLabel, scopeLocation, propertyIndex);",
          "4354:                 this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, scopeLocation);",
          "4355:                 if (thisLocation != Js::Constants::NoRegister)",
          "4356:                 {",
          "4357:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, thisLocation, scopeLocation);",
          "4358:                 }",
          "4364:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "4366:                 Js::RegSlot tmpReg = funcInfo->AcquireTmpRegister();",
          "4367:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, tmpReg, frameDisplayIndex);",
          "4368:                 this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, tmpReg);",
          "4369:                 if (thisLocation != Js::Constants::NoRegister)",
          "4370:                 {",
          "4371:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, thisLocation, tmpReg);",
          "4372:                 }",
          "4373:                 funcInfo->ReleaseTmpRegister(tmpReg);",
          "4377:         this->m_writer.Br(doneLabel);",
          "4378:         this->m_writer.MarkLabel(nextLabel);",
          "",
          "[Added Lines]",
          "4338:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasLocalEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "4339:                 rec.kind = DynamicLoadKind::Env;",
          "4340:                 rec.index = frameDisplayIndex;",
          "4345:             if (thisLocation == Js::Constants::NoRegister)",
          "4346:             {",
          "4347:                 thisLocation = funcInfo->AcquireTmpRegister();",
          "4348:             }",
          "4353:                 this->m_writer.BrProperty(Js::OpCode::BrOnHasProperty, rec.label, scopeLocation, propertyIndex);",
          "4354:                 rec.kind = DynamicLoadKind::LocalWith;",
          "4355:                 rec.instance = scopeLocation;",
          "4361:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "4362:                 rec.kind = DynamicLoadKind::EnvWith;",
          "4363:                 rec.index = frameDisplayIndex;",
          "4367:         recList.Add(rec);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4460:         }",
          "4461:     }",
          "4467:     {",
          "4468:         this->m_writer.MarkLabel(doneLabel);",
          "4469:     }",
          "4470: }",
          "4472: void ByteCodeGenerator::EmitGlobalFncDeclInit(Js::RegSlot rhsLocation, Js::PropertyId propertyId, FuncInfo * funcInfo)",
          "",
          "[Removed Lines]",
          "4466:     if (fLabelDefined)",
          "",
          "[Added Lines]",
          "4448:     if (!recList.Empty())",
          "4450:         Assert(instLocation != Js::Constants::NoRegister);",
          "4451:         Assert(thisLocation != Js::Constants::NoRegister);",
          "4453:         Js::ByteCodeLabel doneLabel = this->m_writer.DefineLabel();",
          "4454:         this->m_writer.Br(doneLabel);",
          "4456:         for (int i = 0;; i++)",
          "4457:         {",
          "4458:             this->m_writer.MarkLabel(recList.Item(i).label);",
          "4459:             switch(recList.Item(i).kind)",
          "4460:             {",
          "4461:                 case DynamicLoadKind::Local:",
          "4462:                     this->m_writer.Reg1(Js::OpCode::LdLocalObj_ReuseLoc, instLocation);",
          "4463:                     if (thisLocation != funcInfo->undefinedConstantRegister)",
          "4464:                     {",
          "4465:                         Assert(thisLocation != instLocation);",
          "4466:                         this->m_writer.Reg2(Js::OpCode::Ld_A_ReuseLoc, thisLocation, funcInfo->undefinedConstantRegister);",
          "4467:                     }",
          "4468:                     break;",
          "4470:                 case DynamicLoadKind::Env:",
          "4471:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj_ReuseLoc, instLocation, recList.Item(i).index);",
          "4472:                     if (thisLocation != funcInfo->undefinedConstantRegister)",
          "4473:                     {",
          "4474:                         Assert(thisLocation != instLocation);",
          "4475:                         this->m_writer.Reg2(Js::OpCode::Ld_A_ReuseLoc, thisLocation, funcInfo->undefinedConstantRegister);",
          "4476:                     }",
          "4477:                     break;",
          "4479:                 case DynamicLoadKind::LocalWith:",
          "4480:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj_ReuseLoc, instLocation, recList.Item(i).instance);",
          "4481:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj_ReuseLoc, thisLocation, recList.Item(i).instance);",
          "4482:                     break;",
          "4484:                 case DynamicLoadKind::EnvWith:",
          "4485:                 {",
          "4486:                     Js::RegSlot tmpReg = funcInfo->AcquireTmpRegister();",
          "4487:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, tmpReg, recList.Item(i).index);",
          "4488:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj_ReuseLoc, instLocation, tmpReg);",
          "4489:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj_ReuseLoc, thisLocation, tmpReg);",
          "4490:                     funcInfo->ReleaseTmpRegister(tmpReg);",
          "4491:                     break;",
          "4492:                 }",
          "4494:                 default:",
          "4495:                     AssertOrFailFast(UNREACHED);",
          "4496:             }",
          "4498:             if (i == recList.Count() - 1)",
          "4499:             {",
          "4500:                 break;",
          "4501:             }",
          "4502:             this->m_writer.Br(doneLabel);",
          "4503:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4650: void ByteCodeGenerator::EmitPropStore(Js::RegSlot rhsLocation, Symbol *sym, IdentPtr pid, FuncInfo *funcInfo, bool isLetDecl, bool isConstDecl, bool isFncDeclVar, bool skipUseBeforeDeclarationCheck)",
          "4651: {",
          "4654:     Js::PropertyId envIndex = -1;",
          "4655:     Scope *symScope = sym == nullptr || sym->GetIsGlobal() ? this->globalScope : sym->GetScope();",
          "4656:     Assert(symScope);",
          "",
          "[Removed Lines]",
          "4652:     Js::ByteCodeLabel doneLabel = 0;",
          "4653:     bool fLabelDefined = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4660:     Scope *scope = nullptr;",
          "4661:     Js::RegSlot scopeLocation = Js::Constants::NoRegister;",
          "4663:     Js::OpCode op;",
          "4665:     if (sym && sym->GetIsModuleExportStorage())",
          "",
          "[Removed Lines]",
          "4662:     bool scopeAcquired = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4686:         scopeLocation = scope->GetLocation();",
          "4687:     }",
          "4689:     while (!isFncDeclVar)",
          "4690:     {",
          "4691:         scope = this->FindScopeForSym(symScope, scope, &envIndex, funcInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4726:     JsUtil::List<DynamicLoadRecord, ArenaAllocator> recList(this->alloc);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4708:         Assert(scope && scope->GetIsDynamic());",
          "4709:         AssertOrFailFast(scope->GetIsObject());",
          "4717:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "4718:         Js::PropertyIdIndexType propertyIndex = funcInfo->FindOrAddReferencedPropertyId(propertyId);",
          "",
          "[Removed Lines]",
          "4711:         if (!fLabelDefined)",
          "4712:         {",
          "4713:             fLabelDefined = true;",
          "4714:             doneLabel = this->m_writer.DefineLabel();",
          "4715:         }",
          "4716:         Js::ByteCodeLabel nextLabel = this->m_writer.DefineLabel();",
          "",
          "[Added Lines]",
          "4750:         DynamicLoadRecord rec;",
          "4752:         rec.label = this->m_writer.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4721:         {",
          "4722:             if (envIndex == -1)",
          "4723:             {",
          "4727:             }",
          "4728:             else",
          "4729:             {",
          "4730:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "4741:             }",
          "4742:         }",
          "4743:         else",
          "4744:         {",
          "4747:             if (envIndex == -1)",
          "4748:             {",
          "4750:             }",
          "4751:             else",
          "4752:             {",
          "4753:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "4759:             }",
          "4766:         }",
          "4770:     }",
          "",
          "[Removed Lines]",
          "4724:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnNoLocalProperty, nextLabel, propertyIndex);",
          "4725:                 this->m_writer.ElementP(Js::OpCode::StLocalFld, rhsLocation,",
          "4726:                     funcInfo->FindOrAddInlineCacheId(scopeLocation, propertyId, false, true));",
          "4731:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoLocalEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "4733:                 Js::RegSlot instLocation = funcInfo->AcquireTmpRegister();",
          "4735:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, frameDisplayIndex);",
          "4737:                 this->m_writer.PatchableProperty(",
          "4738:                     Js::OpCode::StFld, rhsLocation, instLocation, funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, true));",
          "4740:                 funcInfo->ReleaseTmpRegister(instLocation);",
          "4745:             Js::RegSlot unwrappedScopeLocation = funcInfo->AcquireTmpRegister();",
          "4749:                 this->m_writer.BrProperty(Js::OpCode::BrOnNoProperty, nextLabel, scopeLocation, propertyIndex);",
          "4755:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "4757:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, unwrappedScopeLocation, frameDisplayIndex);",
          "4758:                 scopeLocation = unwrappedScopeLocation;",
          "4761:             this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, unwrappedScopeLocation, scopeLocation);",
          "4762:             uint cacheId = funcInfo->FindOrAddInlineCacheId(unwrappedScopeLocation, propertyId, false, true);",
          "4763:             this->m_writer.PatchableProperty(Js::OpCode::StFld, rhsLocation, unwrappedScopeLocation, cacheId);",
          "4765:             funcInfo->ReleaseTmpRegister(unwrappedScopeLocation);",
          "4768:         this->m_writer.Br(doneLabel);",
          "4769:         this->m_writer.MarkLabel(nextLabel);",
          "",
          "[Added Lines]",
          "4760:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnHasLocalProperty, rec.label, propertyIndex);",
          "4761:                 rec.kind = DynamicLoadKind::Local;",
          "4762:                 rec.instance = scopeLocation;",
          "4767:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasLocalEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "4768:                 rec.kind = DynamicLoadKind::Env;",
          "4769:                 rec.index = frameDisplayIndex;",
          "4776:                 this->m_writer.BrProperty(Js::OpCode::BrOnHasProperty, rec.label, scopeLocation, propertyIndex);",
          "4777:                 rec.kind = DynamicLoadKind::LocalWith;",
          "4778:                 rec.instance = scopeLocation;",
          "4783:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "4784:                 rec.kind = DynamicLoadKind::EnvWith;",
          "4785:                 rec.index = frameDisplayIndex;",
          "4789:         recList.Add(rec);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4891:             }",
          "4892:         }",
          "4893:     }",
          "4900:     {",
          "4902:     }",
          "4903: }",
          "",
          "[Removed Lines]",
          "4894:     if (fLabelDefined)",
          "4895:     {",
          "4896:         this->m_writer.MarkLabel(doneLabel);",
          "4897:     }",
          "4899:     if (scopeAcquired)",
          "4901:         funcInfo->ReleaseTmpRegister(scopeLocation);",
          "",
          "[Added Lines]",
          "4916:     if (!recList.Empty())",
          "4918:         Js::ByteCodeLabel doneLabel = this->m_writer.DefineLabel();",
          "4919:         this->m_writer.Br(doneLabel);",
          "4921:         for (int i = 0;; i++)",
          "4922:         {",
          "4923:             uint cacheId;",
          "4924:             Js::RegSlot instLocation;",
          "4925:             Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "4927:             this->m_writer.MarkLabel(recList.Item(i).label);",
          "4928:             switch(recList.Item(i).kind)",
          "4929:             {",
          "4930:                 case DynamicLoadKind::Local:",
          "4931:                     cacheId = funcInfo->FindOrAddInlineCacheId(recList.Item(i).instance, propertyId, false, true);",
          "4932:                     this->m_writer.ElementP(Js::OpCode::StLocalFld, rhsLocation, cacheId);",
          "4933:                     break;",
          "4935:                 case DynamicLoadKind::Env:",
          "4936:                     instLocation = funcInfo->AcquireTmpRegister();",
          "4937:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "4938:                     cacheId = funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, true);",
          "4939:                     this->m_writer.PatchableProperty(Js::OpCode::StFld, rhsLocation, instLocation, cacheId);",
          "4940:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "4941:                     break;",
          "4943:                 case DynamicLoadKind::LocalWith:",
          "4944:                     instLocation = funcInfo->AcquireTmpRegister();",
          "4945:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, recList.Item(i).instance);",
          "4946:                     cacheId = funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, true);",
          "4947:                     this->m_writer.PatchableProperty(Js::OpCode::StFld, rhsLocation, instLocation, cacheId);",
          "4948:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "4949:                     break;",
          "4951:                 case DynamicLoadKind::EnvWith:",
          "4952:                     instLocation = funcInfo->AcquireTmpRegister();",
          "4953:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "4954:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, instLocation);",
          "4955:                     cacheId = funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, true);",
          "4956:                     this->m_writer.PatchableProperty(Js::OpCode::StFld, rhsLocation, instLocation, cacheId);",
          "4957:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "4958:                     break;",
          "4960:                 default:",
          "4961:                     AssertOrFailFast(UNREACHED);",
          "4962:             }",
          "4964:             if (i == recList.Count() - 1)",
          "4965:             {",
          "4966:                 break;",
          "4967:             }",
          "4968:             this->m_writer.Br(doneLabel);",
          "4969:         }",
          "4970:         this->m_writer.MarkLabel(doneLabel);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5032:     Js::RegSlot scopeLocation = Js::Constants::NoRegister;",
          "5033:     Js::PropertyId envIndex = -1;",
          "5034:     Scope *scope = nullptr;",
          "",
          "[Removed Lines]",
          "5030:     Js::ByteCodeLabel doneLabel = 0;",
          "5031:     bool fLabelDefined = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5041:         return;",
          "5042:     }",
          "5044:     for (;;)",
          "5045:     {",
          "5046:         scope = this->FindScopeForSym(symScope, scope, &envIndex, funcInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5111:     JsUtil::List<DynamicLoadRecord, ArenaAllocator> recList(this->alloc);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5060:         Assert(scope && scope->GetIsDynamic());",
          "5061:         AssertOrFailFast(scope->GetIsObject());",
          "5070:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "5071:         Js::PropertyIdIndexType propertyIndex = funcInfo->FindOrAddReferencedPropertyId(propertyId);",
          "",
          "[Removed Lines]",
          "5063:         if (!fLabelDefined)",
          "5064:         {",
          "5065:             fLabelDefined = true;",
          "5066:             doneLabel = this->m_writer.DefineLabel();",
          "5067:         }",
          "5069:         Js::ByteCodeLabel nextLabel = this->m_writer.DefineLabel();",
          "",
          "[Added Lines]",
          "5132:         DynamicLoadRecord rec;",
          "5134:         rec.label = this->m_writer.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5074:         {",
          "5075:             if (envIndex == -1)",
          "5076:             {",
          "5080:             }",
          "5081:             else",
          "5082:             {",
          "5083:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "5097:             }",
          "5098:         }",
          "5099:         else",
          "5100:         {",
          "5103:             if (envIndex == -1)",
          "5104:             {",
          "5106:             }",
          "5107:             else",
          "5108:             {",
          "5109:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "5114:             }",
          "5122:         }",
          "5126:     }",
          "",
          "[Removed Lines]",
          "5077:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnNoLocalProperty, nextLabel, propertyIndex);",
          "5078:                 this->m_writer.ElementP(Js::OpCode::LdLocalFld, lhsLocation,",
          "5079:                     funcInfo->FindOrAddInlineCacheId(scopeLocation, propertyId, false, false));",
          "5084:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoLocalEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "5086:                 Js::RegSlot instLocation = funcInfo->AcquireTmpRegister();",
          "5088:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, frameDisplayIndex);",
          "5090:                 this->m_writer.PatchableProperty(",
          "5091:                     Js::OpCode::LdFld,",
          "5092:                     lhsLocation,",
          "5093:                     instLocation,",
          "5094:                     funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, false));",
          "5096:                 funcInfo->ReleaseTmpRegister(instLocation);",
          "5101:             Js::RegSlot unwrappedScopeLocation = funcInfo->AcquireTmpRegister();",
          "5105:                 this->m_writer.BrProperty(Js::OpCode::BrOnNoProperty, nextLabel, scopeLocation, propertyIndex);",
          "5110:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "5112:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, unwrappedScopeLocation, frameDisplayIndex);",
          "5113:                 scopeLocation = unwrappedScopeLocation;",
          "5116:             this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, unwrappedScopeLocation, scopeLocation);",
          "5118:             uint cacheId = funcInfo->FindOrAddInlineCacheId(unwrappedScopeLocation, propertyId, false, false);",
          "5119:             this->m_writer.PatchableProperty(Js::OpCode::LdFld, lhsLocation, unwrappedScopeLocation, cacheId);",
          "5121:             funcInfo->ReleaseTmpRegister(unwrappedScopeLocation);",
          "5124:         this->m_writer.Br(doneLabel);",
          "5125:         this->m_writer.MarkLabel(nextLabel);",
          "",
          "[Added Lines]",
          "5142:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnHasLocalProperty, rec.label, propertyIndex);",
          "5143:                 rec.kind = DynamicLoadKind::Local;",
          "5144:                 rec.instance = scopeLocation;",
          "5149:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasLocalEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "5150:                 rec.kind = DynamicLoadKind::Env;",
          "5151:                 rec.index = frameDisplayIndex;",
          "5158:                 this->m_writer.BrProperty(Js::OpCode::BrOnHasProperty, rec.label, scopeLocation, propertyIndex);",
          "5159:                 rec.kind = DynamicLoadKind::LocalWith;",
          "5160:                 rec.instance = scopeLocation;",
          "5165:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "5166:                 rec.kind = DynamicLoadKind::EnvWith;",
          "5167:                 rec.index = frameDisplayIndex;",
          "5171:         recList.Add(rec);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5260:         }",
          "5261:     }",
          "5264:     {",
          "5265:         this->m_writer.MarkLabel(doneLabel);",
          "5266:     }",
          "5267: }",
          "5269: bool ByteCodeGenerator::NeedCheckBlockVar(Symbol* sym, Scope* scope, FuncInfo* funcInfo) const",
          "",
          "[Removed Lines]",
          "5263:     if (fLabelDefined)",
          "",
          "[Added Lines]",
          "5309:     if (!recList.Empty())",
          "5311:         Js::ByteCodeLabel doneLabel = this->m_writer.DefineLabel();",
          "5312:         this->m_writer.Br(doneLabel);",
          "5314:         for (int i = 0;; i++)",
          "5315:         {",
          "5316:             uint cacheId;",
          "5317:             Js::RegSlot instLocation;",
          "5318:             Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "5320:             this->m_writer.MarkLabel(recList.Item(i).label);",
          "5321:             switch(recList.Item(i).kind)",
          "5322:             {",
          "5323:                 case DynamicLoadKind::Local:",
          "5324:                     cacheId = funcInfo->FindOrAddInlineCacheId(recList.Item(i).instance, propertyId, false, false);",
          "5325:                     this->m_writer.ElementP(Js::OpCode::LdLocalFld_ReuseLoc, lhsLocation, cacheId);",
          "5326:                     break;",
          "5328:                 case DynamicLoadKind::Env:",
          "5329:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5330:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "5331:                     cacheId = funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, false);",
          "5332:                     this->m_writer.PatchableProperty(Js::OpCode::LdFld_ReuseLoc, lhsLocation, instLocation, cacheId);",
          "5333:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5334:                     break;",
          "5336:                 case DynamicLoadKind::LocalWith:",
          "5337:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5338:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, recList.Item(i).instance);",
          "5339:                     cacheId = funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, false);",
          "5340:                     this->m_writer.PatchableProperty(Js::OpCode::LdFld_ReuseLoc, lhsLocation, instLocation, cacheId);",
          "5341:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5342:                     break;",
          "5344:                 case DynamicLoadKind::EnvWith:",
          "5345:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5346:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "5347:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, instLocation);",
          "5348:                     cacheId = funcInfo->FindOrAddInlineCacheId(instLocation, propertyId, false, false);",
          "5349:                     this->m_writer.PatchableProperty(Js::OpCode::LdFld_ReuseLoc, lhsLocation, instLocation, cacheId);",
          "5350:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5351:                     break;",
          "5353:                 default:",
          "5354:                     AssertOrFailFast(UNREACHED);",
          "5355:             }",
          "5357:             if (i == recList.Count() - 1)",
          "5358:             {",
          "5359:                 break;",
          "5360:             }",
          "5361:             this->m_writer.Br(doneLabel);",
          "5362:         }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5286:     Js::RegSlot scopeLocation = Js::Constants::NoRegister;",
          "5287:     Js::PropertyId envIndex = -1;",
          "5288:     Scope *scope = nullptr;",
          "5289:     Scope *symScope = sym ? sym->GetScope() : this->globalScope;",
          "5290:     Assert(symScope);",
          "5292:     for (;;)",
          "5293:     {",
          "5294:         scope = this->FindScopeForSym(symScope, scope, &envIndex, funcInfo);",
          "",
          "[Removed Lines]",
          "5284:     Js::ByteCodeLabel doneLabel = 0;",
          "5285:     bool fLabelDefined = false;",
          "",
          "[Added Lines]",
          "5390:     JsUtil::List<DynamicLoadRecord, ArenaAllocator> recList(this->alloc);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5311:         Assert(scope && scope->GetIsDynamic());",
          "5312:         AssertOrFailFast(scope->GetIsObject());",
          "5321:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "5322:         Js::PropertyIdIndexType propertyIndex = funcInfo->FindOrAddReferencedPropertyId(propertyId);",
          "",
          "[Removed Lines]",
          "5314:         if (!fLabelDefined)",
          "5315:         {",
          "5316:             fLabelDefined = true;",
          "5317:             doneLabel = this->m_writer.DefineLabel();",
          "5318:         }",
          "5320:         Js::ByteCodeLabel nextLabel = this->m_writer.DefineLabel();",
          "",
          "[Added Lines]",
          "5414:         DynamicLoadRecord rec;",
          "5416:         rec.label = this->m_writer.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5325:         {",
          "5326:             if (envIndex == -1)",
          "5327:             {",
          "5330:             }",
          "5331:             else",
          "5332:             {",
          "5333:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "5343:             }",
          "5344:         }",
          "5345:         else",
          "5346:         {",
          "5349:             if (envIndex == -1)",
          "5350:             {",
          "5352:             }",
          "5353:             else",
          "5354:             {",
          "5355:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "5360:             }",
          "5365:         }",
          "5369:     }",
          "",
          "[Removed Lines]",
          "5328:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnNoLocalProperty, nextLabel, propertyIndex);",
          "5329:                 this->m_writer.ElementU(Js::OpCode::DeleteLocalFld, lhsLocation, propertyIndex);",
          "5334:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoLocalEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "5336:                 Js::RegSlot instLocation = funcInfo->AcquireTmpRegister();",
          "5338:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, frameDisplayIndex);",
          "5340:                 this->m_writer.Property(Js::OpCode::DeleteFld, lhsLocation, instLocation, propertyIndex);",
          "5342:                 funcInfo->ReleaseTmpRegister(instLocation);",
          "5347:             Js::RegSlot unwrappedScopeLocation = funcInfo->AcquireTmpRegister();",
          "5351:                 this->m_writer.BrProperty(Js::OpCode::BrOnNoProperty, nextLabel, scopeLocation, propertyIndex);",
          "5356:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "5358:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, unwrappedScopeLocation, frameDisplayIndex);",
          "5359:                 scopeLocation = unwrappedScopeLocation;",
          "5362:             this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, unwrappedScopeLocation, scopeLocation);",
          "5363:             this->m_writer.Property(Js::OpCode::DeleteFld, lhsLocation, unwrappedScopeLocation, propertyIndex);",
          "5364:             funcInfo->ReleaseTmpRegister(unwrappedScopeLocation);",
          "5367:         this->m_writer.Br(doneLabel);",
          "5368:         this->m_writer.MarkLabel(nextLabel);",
          "",
          "[Added Lines]",
          "5424:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnHasLocalProperty, rec.label, propertyIndex);",
          "5425:                 rec.kind = DynamicLoadKind::Local;",
          "5426:                 rec.instance = scopeLocation;",
          "5431:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasLocalEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "5432:                 rec.kind = DynamicLoadKind::Env;",
          "5433:                 rec.index = frameDisplayIndex;",
          "5440:                 this->m_writer.BrProperty(Js::OpCode::BrOnHasProperty, rec.label, scopeLocation, propertyIndex);",
          "5441:                 rec.kind = DynamicLoadKind::LocalWith;",
          "5442:                 rec.instance = scopeLocation;",
          "5447:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "5448:                 rec.kind = DynamicLoadKind::EnvWith;",
          "5449:                 rec.index = frameDisplayIndex;",
          "5453:         recList.Add(rec);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5390:         this->m_writer.Reg1(Js::OpCode::LdFalse, lhsLocation);",
          "5391:     }",
          "5394:     {",
          "5395:         this->m_writer.MarkLabel(doneLabel);",
          "5396:     }",
          "5397: }",
          "5400: {",
          "5402:     uint cacheId;",
          "",
          "[Removed Lines]",
          "5393:     if (fLabelDefined)",
          "5399: void ByteCodeGenerator::EmitTypeOfFld(FuncInfo * funcInfo, Js::PropertyId propertyId, Js::RegSlot value, Js::RegSlot instance, Js::OpCode ldFldOp)",
          "",
          "[Added Lines]",
          "5478:     if (!recList.Empty())",
          "5480:         Js::ByteCodeLabel doneLabel = this->m_writer.DefineLabel();",
          "5481:         this->m_writer.Br(doneLabel);",
          "5483:         for (int i = 0;; i++)",
          "5484:         {",
          "5485:             Js::RegSlot instLocation;",
          "5486:             Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "5487:             Js::PropertyIdIndexType propertyIndex = funcInfo->FindOrAddReferencedPropertyId(propertyId);",
          "5489:             this->m_writer.MarkLabel(recList.Item(i).label);",
          "5490:             switch(recList.Item(i).kind)",
          "5491:             {",
          "5492:                 case DynamicLoadKind::Local:",
          "5493:                     this->m_writer.ElementU(Js::OpCode::DeleteLocalFld_ReuseLoc, lhsLocation, propertyIndex);",
          "5494:                     break;",
          "5496:                 case DynamicLoadKind::Env:",
          "5497:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5498:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "5499:                     this->m_writer.Property(Js::OpCode::DeleteFld_ReuseLoc, lhsLocation, instLocation, propertyIndex);",
          "5500:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5501:                     break;",
          "5503:                 case DynamicLoadKind::LocalWith:",
          "5504:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5505:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, recList.Item(i).instance);",
          "5506:                     this->m_writer.Property(Js::OpCode::DeleteFld_ReuseLoc, lhsLocation, instLocation, propertyIndex);",
          "5507:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5508:                     break;",
          "5510:                 case DynamicLoadKind::EnvWith:",
          "5511:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5512:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "5513:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, instLocation);",
          "5514:                     this->m_writer.Property(Js::OpCode::DeleteFld_ReuseLoc, lhsLocation, instLocation, propertyIndex);",
          "5515:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5516:                     break;",
          "5518:                 default:",
          "5519:                     AssertOrFailFast(UNREACHED);",
          "5520:             }",
          "5522:             if (i == recList.Count() - 1)",
          "5523:             {",
          "5524:                 break;",
          "5525:             }",
          "5526:             this->m_writer.Br(doneLabel);",
          "5527:         }",
          "5533: void ByteCodeGenerator::EmitTypeOfFld(FuncInfo * funcInfo, Js::PropertyId propertyId, Js::RegSlot value, Js::RegSlot instance, Js::OpCode ldFldOp, bool reuseLoc)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5420:         break;",
          "5421:     }",
          "5424:     funcInfo->ReleaseTmpRegister(tmpReg);",
          "5425: }",
          "",
          "[Removed Lines]",
          "5423:     this->Writer()->Reg2(Js::OpCode::Typeof, value, tmpReg);",
          "",
          "[Added Lines]",
          "5557:     this->Writer()->Reg2(reuseLoc ? Js::OpCode::Typeof_ReuseLoc : Js::OpCode::Typeof, value, tmpReg);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5436:     Js::RegSlot scopeLocation = Js::Constants::NoRegister;",
          "5437:     Js::PropertyId envIndex = -1;",
          "5438:     Scope *scope = nullptr;",
          "",
          "[Removed Lines]",
          "5434:     Js::ByteCodeLabel doneLabel = 0;",
          "5435:     bool fLabelDefined = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "5448:         return;",
          "5449:     }",
          "5451:     for (;;)",
          "5452:     {",
          "5453:         scope = this->FindScopeForSym(symScope, scope, &envIndex, funcInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5583:     JsUtil::List<DynamicLoadRecord, ArenaAllocator> recList(this->alloc);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "5470:         Assert(scope && scope->GetIsDynamic());",
          "5471:         AssertOrFailFast(scope->GetIsObject());",
          "5480:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "5481:         Js::PropertyIdIndexType propertyIndex = funcInfo->FindOrAddReferencedPropertyId(propertyId);",
          "",
          "[Removed Lines]",
          "5473:         if (!fLabelDefined)",
          "5474:         {",
          "5475:             fLabelDefined = true;",
          "5476:             doneLabel = this->m_writer.DefineLabel();",
          "5477:         }",
          "5479:         Js::ByteCodeLabel nextLabel = this->m_writer.DefineLabel();",
          "",
          "[Added Lines]",
          "5607:         DynamicLoadRecord rec;",
          "5609:         rec.label = this->m_writer.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5484:         {",
          "5485:             if (envIndex == -1)",
          "5486:             {",
          "5489:             }",
          "5490:             else",
          "5491:             {",
          "5492:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "5502:             }",
          "5503:         }",
          "5504:         else",
          "5505:         {",
          "5508:             if (envIndex == -1)",
          "5509:             {",
          "5511:             }",
          "5512:             else",
          "5513:             {",
          "5514:                 uint32 frameDisplayIndex = envIndex + Js::FrameDisplay::GetOffsetOfScopes() / sizeof(Js::Var);",
          "5519:             }",
          "5525:         }",
          "5529:     }",
          "",
          "[Removed Lines]",
          "5487:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnNoLocalProperty, nextLabel, propertyIndex);",
          "5488:                 this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, scopeLocation, Js::OpCode::LdLocalFld);",
          "5493:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoLocalEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "5495:                 Js::RegSlot instLocation = funcInfo->AcquireTmpRegister();",
          "5497:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, frameDisplayIndex);",
          "5499:                 this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, instLocation, Js::OpCode::LdFldForTypeOf);",
          "5501:                 funcInfo->ReleaseTmpRegister(instLocation);",
          "5506:             Js::RegSlot unwrappedScopeLocation = funcInfo->AcquireTmpRegister();",
          "5510:                 this->m_writer.BrProperty(Js::OpCode::BrOnNoProperty, nextLabel, scopeLocation, propertyIndex);",
          "5515:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnNoEnvProperty, nextLabel, propertyIndex, frameDisplayIndex);",
          "5517:                 this->m_writer.SlotI1(Js::OpCode::LdEnvObj, unwrappedScopeLocation, frameDisplayIndex);",
          "5518:                 scopeLocation = unwrappedScopeLocation;",
          "5521:             this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, unwrappedScopeLocation, scopeLocation);",
          "5522:             this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, unwrappedScopeLocation, Js::OpCode::LdFldForTypeOf);",
          "5524:             funcInfo->ReleaseTmpRegister(unwrappedScopeLocation);",
          "5527:         this->m_writer.Br(doneLabel);",
          "5528:         this->m_writer.MarkLabel(nextLabel);",
          "",
          "[Added Lines]",
          "5617:                 this->m_writer.BrLocalProperty(Js::OpCode::BrOnHasLocalProperty, rec.label, propertyIndex);",
          "5618:                 rec.kind = DynamicLoadKind::Local;",
          "5619:                 rec.instance = scopeLocation;",
          "5624:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasLocalEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "5625:                 rec.kind = DynamicLoadKind::Env;",
          "5626:                 rec.index = frameDisplayIndex;",
          "5633:                 this->m_writer.BrProperty(Js::OpCode::BrOnHasProperty, rec.label, scopeLocation, propertyIndex);",
          "5634:                 rec.kind = DynamicLoadKind::LocalWith;",
          "5635:                 rec.instance = scopeLocation;",
          "5640:                 this->m_writer.BrEnvProperty(Js::OpCode::BrOnHasEnvProperty, rec.label, propertyIndex, frameDisplayIndex);",
          "5641:                 rec.kind = DynamicLoadKind::EnvWith;",
          "5642:                 rec.index = frameDisplayIndex;",
          "5646:         recList.Add(rec);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5607:         this->m_writer.Reg2(Js::OpCode::Typeof, lhsLocation, sym->GetLocation());",
          "5608:     }",
          "5611:     {",
          "5612:         this->m_writer.MarkLabel(doneLabel);",
          "5613:     }",
          "5614: }",
          "",
          "[Removed Lines]",
          "5610:     if (fLabelDefined)",
          "",
          "[Added Lines]",
          "5728:     if (!recList.Empty())",
          "5730:         Js::ByteCodeLabel doneLabel = this->m_writer.DefineLabel();",
          "5731:         this->m_writer.Br(doneLabel);",
          "5733:         for (int i = 0;; i++)",
          "5734:         {",
          "5735:             Js::RegSlot instLocation;",
          "5736:             Js::PropertyId propertyId = sym ? sym->EnsurePosition(this) : pid->GetPropertyId();",
          "5738:             this->m_writer.MarkLabel(recList.Item(i).label);",
          "5739:             switch(recList.Item(i).kind)",
          "5740:             {",
          "5741:                 case DynamicLoadKind::Local:",
          "5742:                     this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, recList.Item(i).instance, Js::OpCode::LdLocalFld, true);",
          "5743:                     break;",
          "5745:                 case DynamicLoadKind::Env:",
          "5746:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5747:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "5748:                     this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, instLocation, Js::OpCode::LdFldForTypeOf, true);",
          "5749:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5750:                     break;",
          "5752:                 case DynamicLoadKind::LocalWith:",
          "5753:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5754:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, recList.Item(i).instance);",
          "5755:                     this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, instLocation, Js::OpCode::LdFldForTypeOf, true);",
          "5756:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5757:                     break;",
          "5759:                 case DynamicLoadKind::EnvWith:",
          "5760:                     instLocation = funcInfo->AcquireTmpRegister();",
          "5761:                     this->m_writer.SlotI1(Js::OpCode::LdEnvObj, instLocation, recList.Item(i).index);",
          "5762:                     this->m_writer.Reg2(Js::OpCode::UnwrapWithObj, instLocation, instLocation);",
          "5763:                     this->EmitTypeOfFld(funcInfo, propertyId, lhsLocation, instLocation, Js::OpCode::LdFldForTypeOf, true);",
          "5764:                     funcInfo->ReleaseTmpRegister(instLocation);",
          "5765:                     break;",
          "5767:                 default:",
          "5768:                     AssertOrFailFast(UNREACHED);",
          "5769:             }",
          "5771:             if (i == recList.Count() - 1)",
          "5772:             {",
          "5773:                 break;",
          "5774:             }",
          "5775:             this->m_writer.Br(doneLabel);",
          "5776:         }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6078:     if (isAssignmentTarget)",
          "6079:     {",
          "6082:         EmitReference(elem->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo);",
          "6085:     }",
          "6087:     byteCodeGenerator->Writer()->Reg1Unsigned1(",
          "",
          "[Removed Lines]",
          "6080:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "6081:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "6083:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "6084:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Added Lines]",
          "6246:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6247:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "6249:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6250:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6115:     Js::RegSlot valueLocation = funcInfo->AcquireTmpRegister();",
          "6116:     EmitIteratorValue(valueLocation, itemLocation, byteCodeGenerator, funcInfo);",
          "6121:     byteCodeGenerator->Writer()->Element(",
          "6122:         ByteCodeGenerator::GetStElemIOpCode(funcInfo),",
          "",
          "[Removed Lines]",
          "6118:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "6119:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Added Lines]",
          "6284:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6285:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6128:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Incr_A, counterLocation, counterLocation);",
          "6133:     byteCodeGenerator->Writer()->Br(loopTop);",
          "",
          "[Removed Lines]",
          "6130:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "6131:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Added Lines]",
          "6296:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6297:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6245:         if (isAssignmentTarget)",
          "6246:         {",
          "6249:             EmitReference(elem, byteCodeGenerator, funcInfo);",
          "6250:         }",
          "6255:         Js::RegSlot itemLocation = funcInfo->AcquireTmpRegister();",
          "6256:         EmitIteratorNext(itemLocation, iteratorLocation, Js::Constants::NoRegister, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "6247:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "6248:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "6252:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "6253:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Added Lines]",
          "6413:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6414:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "6418:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6419:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6286:         EmitIteratorValue(valueLocation, itemLocation, byteCodeGenerator, funcInfo);",
          "6287:         Js::ByteCodeLabel beforeDefaultAssign = byteCodeGenerator->Writer()->DefineLabel();",
          "6291:         byteCodeGenerator->Writer()->Br(beforeDefaultAssign);",
          "6294:         byteCodeGenerator->Writer()->MarkLabel(iteratorAlreadyDone);",
          "6298:         byteCodeGenerator->Writer()->MarkLabel(beforeDefaultAssign);",
          "",
          "[Removed Lines]",
          "6289:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "6290:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "6295:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, valueLocation, funcInfo->undefinedConstantRegister);",
          "",
          "[Added Lines]",
          "6455:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6456:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "6461:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, valueLocation, funcInfo->undefinedConstantRegister);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6341:                 byteCodeGenerator->Writer()->MarkLabel(skipDefault);",
          "",
          "[Removed Lines]",
          "6342:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, valueLocationTmp, valueLocation);",
          "",
          "[Added Lines]",
          "6508:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, valueLocationTmp, valueLocation);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6376:             EmitDestructuredValueOrInitializer(elem, valueLocation, init, isAssignmentTarget, byteCodeGenerator, funcInfo);",
          "6377:         }",
          "6382:         if (list->nop != knopList)",
          "6383:         {",
          "",
          "[Removed Lines]",
          "6379:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "6380:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Added Lines]",
          "6545:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocation);",
          "6546:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnFunctionLocationFinally);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6503:     Js::ByteCodeLabel skipCallCloseLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "6505:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrFalse_A, skipCallCloseLabel, shouldCallReturnLocation);",
          "6507:     EmitTryCatchAroundClose(iteratorLocation, skipCallCloseLabel, byteCodeGenerator, funcInfo, isAsync);",
          "6509:     byteCodeGenerator->Writer()->MarkLabel(skipCallCloseLabel);",
          "",
          "[Removed Lines]",
          "6506:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnLocationFinally);",
          "",
          "[Added Lines]",
          "6672:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, shouldCallReturnLocationFinally);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6773:         byteCodeGenerator->Writer()->MarkLabel(useDefault);",
          "6775:         Emit(initializer, byteCodeGenerator, funcInfo, false/*isConstructorCall*/);",
          "6777:         funcInfo->ReleaseLoc(initializer);",
          "6779:         byteCodeGenerator->Writer()->MarkLabel(end);",
          "",
          "[Removed Lines]",
          "6776:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, rhsLocationTmp, initializer->location);",
          "",
          "[Added Lines]",
          "6942:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, rhsLocationTmp, initializer->location);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "9118: }",
          "9120: void EmitGeneratingBooleanExpression(ParseNode *expr, Js::ByteCodeLabel trueLabel, bool truefallthrough, Js::ByteCodeLabel falseLabel, bool falsefallthrough, Js::RegSlot writeto,",
          "9122: {",
          "9123:     switch (expr->nop)",
          "9124:     {",
          "",
          "[Removed Lines]",
          "9121:     ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "",
          "[Added Lines]",
          "9287:     bool reuseLoc, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "9127:     {",
          "9128:         byteCodeGenerator->StartStatement(expr);",
          "9129:         Js::ByteCodeLabel leftFalse = byteCodeGenerator->Writer()->DefineLabel();",
          "9131:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "9132:         byteCodeGenerator->Writer()->MarkLabel(leftFalse);",
          "9134:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "9135:         byteCodeGenerator->EndStatement(expr);",
          "9136:         break;",
          "",
          "[Removed Lines]",
          "9130:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode1, trueLabel, false, leftFalse, true, writeto, byteCodeGenerator, funcInfo);",
          "9133:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "9296:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode1, trueLabel, false, leftFalse, true, writeto, reuseLoc, byteCodeGenerator, funcInfo);",
          "9299:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, true, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "9140:     {",
          "9141:         byteCodeGenerator->StartStatement(expr);",
          "9142:         Js::ByteCodeLabel leftTrue = byteCodeGenerator->Writer()->DefineLabel();",
          "9144:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "9145:         byteCodeGenerator->Writer()->MarkLabel(leftTrue);",
          "9147:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "9148:         byteCodeGenerator->EndStatement(expr);",
          "9149:         break;",
          "",
          "[Removed Lines]",
          "9143:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode1, leftTrue, true, falseLabel, false, writeto, byteCodeGenerator, funcInfo);",
          "9146:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "9309:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode1, leftTrue, true, falseLabel, false, writeto, reuseLoc, byteCodeGenerator, funcInfo);",
          "9312:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, true, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "9157:         Js::ByteCodeLabel emitFalse = byteCodeGenerator->Writer()->DefineLabel();",
          "9158:         EmitBooleanExpression(expr->AsParseNodeUni()->pnode1, emitFalse, emitTrue, byteCodeGenerator, funcInfo, false, true);",
          "9159:         byteCodeGenerator->Writer()->MarkLabel(emitTrue);",
          "9161:         byteCodeGenerator->Writer()->Br(trueLabel);",
          "9162:         byteCodeGenerator->Writer()->MarkLabel(emitFalse);",
          "9164:         if (!falsefallthrough)",
          "9165:         {",
          "9166:             byteCodeGenerator->Writer()->Br(falseLabel);",
          "",
          "[Removed Lines]",
          "9160:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, writeto);",
          "9163:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, writeto);",
          "",
          "[Added Lines]",
          "9326:         byteCodeGenerator->Writer()->Reg1(reuseLoc ? Js::OpCode::LdTrue_ReuseLoc : Js::OpCode::LdTrue, writeto);",
          "9329:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse_ReuseLoc, writeto);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "9184:         funcInfo->AcquireLoc(expr);",
          "9185:         byteCodeGenerator->Writer()->Reg3(nopToCMOp[expr->nop], expr->location, expr->AsParseNodeBin()->pnode1->location,",
          "9186:             expr->AsParseNodeBin()->pnode2->location);",
          "9189:         if (!(truefallthrough || falsefallthrough))",
          "9190:         {",
          "",
          "[Removed Lines]",
          "9187:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, writeto, expr->location);",
          "",
          "[Added Lines]",
          "9353:         byteCodeGenerator->Writer()->Reg2(reuseLoc ? Js::OpCode::Ld_A_ReuseLoc : Js::OpCode::Ld_A, writeto, expr->location);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "9201:         break;",
          "9202:     case knopTrue:",
          "9203:         byteCodeGenerator->StartStatement(expr);",
          "9205:         if (!truefallthrough)",
          "9206:         {",
          "9207:             byteCodeGenerator->Writer()->Br(trueLabel);",
          "",
          "[Removed Lines]",
          "9204:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, writeto);",
          "",
          "[Added Lines]",
          "9370:         byteCodeGenerator->Writer()->Reg1(reuseLoc ? Js::OpCode::LdTrue_ReuseLoc : Js::OpCode::LdTrue, writeto);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "9210:         break;",
          "9211:     case knopFalse:",
          "9212:         byteCodeGenerator->StartStatement(expr);",
          "9214:         if (!falsefallthrough)",
          "9215:         {",
          "9216:             byteCodeGenerator->Writer()->Br(falseLabel);",
          "",
          "[Removed Lines]",
          "9213:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, writeto);",
          "",
          "[Added Lines]",
          "9379:         byteCodeGenerator->Writer()->Reg1(reuseLoc ? Js::OpCode::LdFalse_ReuseLoc : Js::OpCode::LdFalse, writeto);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "9227:         {",
          "9228:             byteCodeGenerator->StartStatement(expr);",
          "9229:             Emit(expr, byteCodeGenerator, funcInfo, false);",
          "9232:             if (!(truefallthrough || falsefallthrough))",
          "9233:             {",
          "",
          "[Removed Lines]",
          "9230:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, writeto, expr->location);",
          "",
          "[Added Lines]",
          "9396:             byteCodeGenerator->Writer()->Reg2(reuseLoc ? Js::OpCode::Ld_A_ReuseLoc : Js::OpCode::Ld_A, writeto, expr->location);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "9245:         else",
          "9246:         {",
          "9247:             Emit(expr, byteCodeGenerator, funcInfo, false);",
          "9250:             if (!(truefallthrough || falsefallthrough))",
          "9251:             {",
          "",
          "[Removed Lines]",
          "9248:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, writeto, expr->location);",
          "",
          "[Added Lines]",
          "9414:             byteCodeGenerator->Writer()->Reg2(reuseLoc ? Js::OpCode::Ld_A_ReuseLoc : Js::OpCode::Ld_A, writeto, expr->location);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "10215:     byteCodeGenerator->EmitTryBlockHeadersAfterYield();",
          "10216:     Js::RegSlot unusedResult = funcInfo->AcquireTmpRegister();",
          "10217:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::ResumeYield, unusedResult, funcInfo->yieldRegister);",
          "10219:     funcInfo->ReleaseTmpRegister(unusedResult);",
          "10220: }",
          "",
          "[Removed Lines]",
          "10218:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::Unused, unusedResult);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "10563:             Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10564:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, pnode->location);",
          "10565:             byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, doneLabel, pnode->AsParseNodeUni()->pnode1->location);",
          "10567:             byteCodeGenerator->Writer()->MarkLabel(doneLabel);",
          "10568:         }",
          "10569:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "",
          "[Removed Lines]",
          "10566:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, pnode->location);",
          "",
          "[Added Lines]",
          "10731:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue_ReuseLoc, pnode->location);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "11047:             } while (pnode1->nop == knopComma);",
          "11049:             Emit(pnode1, byteCodeGenerator, funcInfo, false);",
          "11055:             while (!rhsStack.Empty())",
          "11056:             {",
          "11057:                 ParseNode *pnodeRhs = rhsStack.Pop();",
          "11058:                 pnodeRhs->isUsed = false;",
          "11059:                 Emit(pnodeRhs, byteCodeGenerator, funcInfo, false);",
          "11064:                 funcInfo->ReleaseLoc(pnodeRhs);",
          "11065:             }",
          "11066:         }",
          "11067:         else",
          "11068:         {",
          "11069:             Emit(pnode1, byteCodeGenerator, funcInfo, false);",
          "11074:         }",
          "11075:         funcInfo->ReleaseLoc(pnode1);",
          "",
          "[Removed Lines]",
          "11050:             if (funcInfo->IsTmpReg(pnode1->location))",
          "11051:             {",
          "11052:                 byteCodeGenerator->Writer()->Reg1(Js::OpCode::Unused, pnode1->location);",
          "11053:             }",
          "11060:                 if (funcInfo->IsTmpReg(pnodeRhs->location))",
          "11061:                 {",
          "11062:                     byteCodeGenerator->Writer()->Reg1(Js::OpCode::Unused, pnodeRhs->location);",
          "11063:                 }",
          "11070:             if (funcInfo->IsTmpReg(pnode1->location))",
          "11071:             {",
          "11072:                 byteCodeGenerator->Writer()->Reg1(Js::OpCode::Unused, pnode1->location);",
          "11073:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "11099:         funcInfo->AcquireLoc(pnode);",
          "11101:         byteCodeGenerator->Writer()->MarkLabel(doneLabel);",
          "11102:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "11103:         break;",
          "",
          "[Removed Lines]",
          "11100:         EmitGeneratingBooleanExpression(pnode, doneLabel, true, doneLabel, true, pnode->location, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "11252:         EmitGeneratingBooleanExpression(pnode, doneLabel, true, doneLabel, true, pnode->location, false, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "11112:         funcInfo->AcquireLoc(pnode);",
          "11114:         byteCodeGenerator->Writer()->MarkLabel(doneLabel);",
          "11115:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "11116:         break;",
          "",
          "[Removed Lines]",
          "11113:         EmitGeneratingBooleanExpression(pnode, doneLabel, true, doneLabel, true, pnode->location, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "11265:         EmitGeneratingBooleanExpression(pnode, doneLabel, true, doneLabel, true, pnode->location, false, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "11142:         byteCodeGenerator->Writer()->MarkLabel(falseLabel);",
          "11143:         Emit(pnode->AsParseNodeTri()->pnode3, byteCodeGenerator, funcInfo, false);",
          "11145:         funcInfo->ReleaseLoc(pnode->AsParseNodeTri()->pnode3);",
          "11147:         byteCodeGenerator->Writer()->MarkLabel(skipLabel);",
          "",
          "[Removed Lines]",
          "11144:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeTri()->pnode3->location);",
          "",
          "[Added Lines]",
          "11296:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A_ReuseLoc, pnode->location, pnode->AsParseNodeTri()->pnode3->location);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeGenerator.h||lib/Runtime/ByteCode/ByteCodeGenerator.h": [
          "File: lib/Runtime/ByteCode/ByteCodeGenerator.h -> lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: const int32 AstBytecodeRatioEstimate = 5;",
          "9: #endif",
          "11: class ByteCodeGenerator",
          "12: {",
          "13: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: enum DynamicLoadKind {",
          "13:     Invalid,",
          "14:     Local,",
          "15:     Env,",
          "16:     LocalWith,",
          "17:     EnvWith",
          "18: };",
          "19: struct DynamicLoadRecord {",
          "20:     DynamicLoadRecord();",
          "21:     DynamicLoadKind kind;",
          "22:     Js::ByteCodeLabel label;",
          "23:     union {",
          "24:         uint32 index;",
          "25:         Js::RegSlot instance;",
          "26:     };",
          "27: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:     void EmitPropLoad(Js::RegSlot lhsLocation, Symbol *sym, IdentPtr pid, FuncInfo *funcInfo, bool skipUseBeforeDeclarationCheck = false);",
          "318:     void EmitPropDelete(Js::RegSlot lhsLocation, Symbol *sym, IdentPtr pid, FuncInfo *funcInfo);",
          "319:     void EmitPropTypeof(Js::RegSlot lhsLocation, Symbol *sym, IdentPtr pid, FuncInfo *funcInfo);",
          "322:     bool ShouldLoadConstThis(FuncInfo* funcInfo);",
          "",
          "[Removed Lines]",
          "320:     void EmitTypeOfFld(FuncInfo * funcInfo, Js::PropertyId propertyId, Js::RegSlot value, Js::RegSlot instance, Js::OpCode op1);",
          "",
          "[Added Lines]",
          "338:     void EmitTypeOfFld(FuncInfo * funcInfo, Js::PropertyId propertyId, Js::RegSlot value, Js::RegSlot instance, Js::OpCode op1, bool reuseLoc = false);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeWriter.cpp||lib/Runtime/ByteCode/ByteCodeWriter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeWriter.cpp -> lib/Runtime/ByteCode/ByteCodeWriter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1455:         case OpCode::InitClassMemberSet:",
          "1456:         case OpCode::InitProto:",
          "1457:         case OpCode::DeleteFld:",
          "1458:         case OpCode::DeleteRootFld:",
          "1459:         case OpCode::LdElemUndefScoped:",
          "1460:         case OpCode::StFuncExpr:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458:         case OpCode::DeleteFld_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:         switch (op)",
          "1584:         {",
          "1585:             case OpCode::LdEnvObj:",
          "1586:             case OpCode::StLocalSlot:",
          "1587:             case OpCode::StParamSlot:",
          "1588:             case OpCode::StLocalObjSlot:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1587:             case OpCode::LdEnvObj_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1910:             break;",
          "1912:         case OpCode::LdLocalFld:",
          "1913:             if (isCtor) // The symbol loaded by this LdFld will be used as a constructor",
          "1914:             {",
          "1915:                 if (registerCacheIdForCall)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:         case OpCode::LdLocalFld_ReuseLoc:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2044:         }",
          "2045:         case OpCode::LdFldForTypeOf:",
          "2046:         case OpCode::LdFld:",
          "2047:             if (isCtor) // The symbol loaded by this LdFld will be used as a constructor",
          "2048:             {",
          "2049:                 if (registerCacheIdForCall)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2050:         case OpCode::LdFld_ReuseLoc:",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: MACRO_WMS(              BrSrEq_A,           BrReg2,         OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if '==='  (strict equals)       (NOTE: May have DOM implicit calls)",
          "161: MACRO_WMS(              BrSrNeq_A,          BrReg2,         OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if '!=='  (not strict equals)   (NOTE: May have DOM implicit calls)",
          "162: MACRO_EXTEND(           BrOnHasProperty,    BrProperty,     OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if object has the given property (NOTE: May have DOM implicit calls)",
          "167: MACRO_WMS(              BrOnObject_A,       BrReg1,         OpSideEffect|OpTempNumberSources|OpTempObjectSources)                          // Branch if typeId is not primitive type (i.e. > TypeIds_LastJavascriptPrimitiveType)",
          "168: MACRO_WMS(              BrNotNull_A,        BrReg1,         OpSideEffect|OpTempNumberSources|OpTempObjectSources)                          // Branch if not NULL",
          "169: MACRO_EXTEND_WMS(       BrNotUndecl_A,      BrReg1,         OpSideEffect|OpTempNumberSources|OpTempObjectSources)                          // Branch if source reg is NEQ to Undecl",
          "",
          "[Removed Lines]",
          "163: MACRO(                  BrOnNoProperty,     BrProperty,     OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "164: MACRO(                  BrOnNoLocalProperty,BrLocalProperty,OpSideEffect|OpTempNumberSources|OpTempObjectSources)                              // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "165: MACRO_EXTEND(           BrOnNoEnvProperty,  BrEnvProperty,  OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "166: MACRO(                  BrOnNoLocalEnvProperty,  BrEnvProperty,  OpSideEffect|OpTempNumberSources|OpTempObjectSources)                     // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "",
          "[Added Lines]",
          "163: MACRO_EXTEND(           BrOnNoProperty,     BrProperty,     OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "164: MACRO(                  BrOnHasLocalProperty,BrLocalProperty,OpSideEffect|OpTempNumberSources|OpTempObjectSources)                              // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "165: MACRO_BACKEND_ONLY(     BrOnNoLocalProperty,BrLocalProperty,OpSideEffect|OpTempNumberSources|OpTempObjectSources)                              // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "166: MACRO_EXTEND(           BrOnHasEnvProperty,  BrEnvProperty, OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "167: MACRO_BACKEND_ONLY(     BrOnNoEnvProperty,  BrEnvProperty,  OpSideEffect|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources)        // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "168: MACRO(                  BrOnHasLocalEnvProperty, BrEnvProperty,  OpSideEffect|OpTempNumberSources|OpTempObjectSources)                     // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "169: MACRO_EXTEND(           BrOnNoLocalEnvProperty,  BrEnvProperty,  OpSideEffect|OpTempNumberSources|OpTempObjectSources)                     // Branch if object does not have the given property (NOTE: May have DOM implicit calls)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262: MACRO_WMS(              Typeof,             Reg2,           OpTempNumberProducing|OpDoNotTransfer|OpOpndHasImplicitCall|OpCanCSE)                         // typeof x",
          "263: MACRO_WMS(              TypeofElem,         ElementI,       OpTempNumberProducing|OpSideEffect|OpDoNotTransfer|OpOpndHasImplicitCall|OpPostOpDbgBailOut)  // typeof x[y]",
          "265: MACRO_WMS(              ApplyArgs,          Reg5,           OpByteCodeOnly|OpSideEffect|OpUseAllFields)     // apply function to this function's arguments and this pointer",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: MACRO_EXTEND_WMS(       Typeof_ReuseLoc,    Reg2,           OpTempNumberProducing|OpDoNotTransfer|OpOpndHasImplicitCall|OpCanCSE)                         // typeof x",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347: MACRO_EXTEND_WMS(       UnwrapWithObj,      Reg2,           OpSideEffect) // Copy Var register with unwrapped object",
          "348: MACRO_EXTEND_WMS(       SetComputedNameVar, Reg2,           OpSideEffect)",
          "349: MACRO_WMS(              Ld_A,               Reg2,           OpTempNumberTransfer|OpTempObjectTransfer|OpNonIntTransfer|OpCanCSE) // Copy Var register",
          "350: MACRO_WMS(              LdLocalObj,         Reg1,           OpCanCSE) // Load non-stack frame object",
          "351: MACRO_EXTEND_WMS(       LdParamObj,         Reg1,           OpCanCSE) // Load non-stack param scope frame object",
          "352: MACRO_WMS(              LdInnerScope,       Reg1Unsigned1,  OpCanCSE) // Load non-stack inner scope",
          "353: MACRO_WMS(              LdC_A_Null,         Reg1,           OpByteCodeOnly|OpCanCSE)   // Load from 'null' as Var",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352: MACRO_EXTEND_WMS(       UnwrapWithObj_ReuseLoc,Reg2,           OpSideEffect) // Copy Var register with unwrapped object",
          "355: MACRO_WMS(              Ld_A_ReuseLoc,      Reg2,           OpTempNumberTransfer|OpTempObjectTransfer|OpNonIntTransfer|OpCanCSE) // Copy Var register",
          "357: MACRO_EXTEND_WMS(       LdLocalObj_ReuseLoc,Reg1,           OpCanCSE) // Load non-stack frame object",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "412: MACRO_WMS_PROFILED_OP(  LdFld,                ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject instance's direct field",
          "415: MACRO_EXTEND_WMS_AND_PROFILED_OP(LdSuperFld,  ElementC2,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject super instance's direct field",
          "416: MACRO_WMS_PROFILED_OP(  LdFldForTypeOf,       ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)",
          "417: MACRO_EXTEND_WMS_AND_PROFILED_OP_ROOT(LdRootFldForTypeOf, ElementRootCP, OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)",
          "",
          "[Removed Lines]",
          "413: MACRO_WMS_PROFILED_OP(  LdLocalFld,           ElementP,       OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject instance's direct field",
          "414: MACRO_WMS(              LdEnvObj,             ElementSlotI1,  OpTempNumberSources)",
          "",
          "[Added Lines]",
          "420: MACRO_WMS_PROFILED_OP(  LdFld_ReuseLoc,                ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject instance's direct field",
          "421: MACRO_WMS_PROFILED_OP(  LdLocalFld,           ElementP,       OpSideEffect|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject instance's direct field",
          "422: MACRO_WMS_PROFILED_OP(  LdLocalFld_ReuseLoc,           ElementP,       OpSideEffect|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject instance's direct field",
          "423: MACRO_EXTEND_WMS(       LdEnvObj,             ElementSlotI1,  OpTempNumberSources)",
          "424: MACRO_EXTEND_WMS(       LdEnvObj_ReuseLoc,    ElementSlotI1,  OpTempNumberSources)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "419: MACRO_WMS_PROFILED_OP(  LdFldForCallApplyTarget,  ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)",
          "420: MACRO_WMS_PROFILED_OP_ROOT(LdRootFld,         ElementRootCP,  OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load from ScriptObject instance's direct field (access to let/const on root object)",
          "421: MACRO_WMS_PROFILED_OP(LdMethodFld,            ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load call target from ScriptObject instance's direct field",
          "423: MACRO_BACKEND_ONLY(     LdMethodFldPolyInlineMiss, ElementCP, OpSideEffect|OpOpndHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)                        // Load call target from ScriptObject instance's direct field, when the call target is neither of",
          "",
          "[Removed Lines]",
          "422: MACRO_EXTEND_WMS_AND_PROFILED_OP(LdLocalMethodFld, ElementP,  OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load call target from ScriptObject instance's direct field",
          "",
          "[Added Lines]",
          "432: MACRO_EXTEND_WMS_AND_PROFILED_OP(LdLocalMethodFld, ElementP,  OpSideEffect|OpFastFldInstr|OpPostOpDbgBailOut|OpCanLoadFixedFields)    // Load call target from ScriptObject instance's direct field",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "429: MACRO_EXTEND_WMS_AND_PROFILED_OP(StSuperFld,  ElementC2,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into ScriptObject super instance's direct field",
          "430: MACRO_EXTEND_WMS_AND_PROFILED_OP(StSuperFldStrict, ElementC2, OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into ScriptObject super instance's direct field (strict mode, super.x = ...)",
          "431: MACRO_WMS_PROFILED_OP_ROOT(StRootFld,         ElementRootCP,  OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into ScriptObject instance's direct field (access to let/const on root object)",
          "433: MACRO_WMS_PROFILED_OP(  StFldStrict,          ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into ScriptObject instance's direct field (strict mode, a.x = ...)",
          "434: MACRO_WMS_PROFILED_OP_ROOT(StRootFldStrict,   ElementRootCP,  OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into ScriptObject instance's direct field (strict mode, x = ..., access to let/const on root object)",
          "435: MACRO_WMS_PROFILED_OP(  InitFld,              ElementCP,      OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "440: MACRO_WMS_PROFILED_OP_ROOT(InitRootFld,       ElementRootCP,  OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "441: MACRO_BACKEND_ONLY(     LdMethodFromFlags,    ElementCP,      OpFastFldInstr|OpCanCSE)",
          "443: MACRO_WMS(              DeleteFld,                  ElementC,       OpSideEffect|OpOpndHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property",
          "445: MACRO_WMS_ROOT(         DeleteRootFld,              ElementC,       OpSideEffect|OpOpndHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property (access to let/const on root object)",
          "446: MACRO_WMS(              DeleteFldStrict,            ElementC,       OpSideEffect|OpOpndHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property in strict mode",
          "447: MACRO_WMS_ROOT(         DeleteRootFldStrict,        ElementC,       OpSideEffect|OpHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property in strict mode (access to let/const on root object)",
          "",
          "[Removed Lines]",
          "432: MACRO_WMS_PROFILED_OP(  StLocalFld,           ElementP,       OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into local activation object",
          "436: MACRO_WMS_PROFILED_OP(  InitLocalFld,         ElementP,       OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "437: MACRO_EXTEND_WMS(       InitLocalLetFld,      ElementP,       OpSideEffect|OpOpndHasImplicitCall|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "438: MACRO_EXTEND_WMS(       InitInnerFld,         ElementPIndexed,OpSideEffect|OpOpndHasImplicitCall|OpFastFldInstr|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "439: MACRO_EXTEND_WMS(       InitInnerLetFld,      ElementPIndexed,OpSideEffect|OpOpndHasImplicitCall|OpPostOpDbgBailOut)                  // Declare a property with an initial value",
          "444: MACRO_EXTEND_WMS(       DeleteLocalFld,             ElementU,       OpSideEffect|OpOpndHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property",
          "",
          "[Added Lines]",
          "442: MACRO_WMS_PROFILED_OP(  StLocalFld,           ElementP,       OpSideEffect|OpFastFldInstr|OpPostOpDbgBailOut)   // Store into local activation object",
          "446: MACRO_WMS_PROFILED_OP(  InitLocalFld,         ElementP,       OpSideEffect|OpFastFldInstr|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "447: MACRO_EXTEND_WMS(       InitLocalLetFld,      ElementP,       OpSideEffect|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "448: MACRO_EXTEND_WMS(       InitInnerFld,         ElementPIndexed,OpSideEffect|OpFastFldInstr|OpPostOpDbgBailOut)   // Declare a property with an initial value",
          "449: MACRO_EXTEND_WMS(       InitInnerLetFld,      ElementPIndexed,OpSideEffect|OpPostOpDbgBailOut)                  // Declare a property with an initial value",
          "454: MACRO_EXTEND_WMS(       DeleteFld_ReuseLoc,         ElementC,       OpSideEffect|OpOpndHasImplicitCall|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property",
          "455: MACRO_EXTEND_WMS(       DeleteLocalFld,             ElementU,       OpSideEffect|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property",
          "456: MACRO_EXTEND_WMS(       DeleteLocalFld_ReuseLoc,    ElementU,       OpSideEffect|OpDoNotTransfer|OpPostOpDbgBailOut)  // Remove a property",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "534: MACRO_WMS(              LdNaN,              Reg1,           OpByteCodeOnly|OpCanCSE)       // Load 'NaN'",
          "535: MACRO_WMS(              LdInfinity,         Reg1,           OpByteCodeOnly|OpCanCSE)       // Load 'Infinity'",
          "536: MACRO_WMS(              LdTrue,             Reg1,           OpByteCodeOnly|OpCanCSE)       // Load 'true' boolean primitive",
          "537: MACRO_WMS(              LdFalse,            Reg1,           OpByteCodeOnly|OpCanCSE)       // Load 'false' boolean primitive",
          "538: MACRO_EXTEND_WMS(       LdChakraLib,        Reg1,           OpByteCodeOnly|OpCanCSE)       // Load '__chakraLibrary'",
          "539: MACRO_EXTEND_WMS(       LdImportMeta,       Reg1Unsigned1,  OpHasImplicitCall)             // Load 'import.meta' object",
          "540: MACRO_BACKEND_ONLY(     LdEnv,              Reg1,           None)           // Load the optional FixedSizeArray environment for closures",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549: MACRO_WMS(              LdTrue_ReuseLoc,    Reg1,           OpByteCodeOnly|OpCanCSE)       // Load 'true' boolean primitive",
          "551: MACRO_WMS(              LdFalse_ReuseLoc,   Reg1,           OpByteCodeOnly|OpCanCSE)       // Load 'false' boolean primitive",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "615: MACRO(                  InitCachedFuncs,    AuxNoReg,       OpSideEffect)",
          "616: MACRO_WMS(              GetCachedFunc,      Reg1Unsigned1,  None)",
          "617: MACRO(                  CommitScope,        Empty,       OpSideEffect)   // Mark the cached scope object as committed on exit from the function",
          "619: MACRO_WMS(              NewPseudoScope,     Unsigned1,      None)           // Create new scope that can't take normal var inits",
          "620: MACRO_WMS(              NewBlockScope,      Unsigned1,      None)           // Create new scope that takes only block-scoped inits",
          "621: MACRO_WMS(              CloneBlockScope,    Unsigned1,      OpSideEffect)   // Clone existing block scope in place for for-loop iterations",
          "",
          "[Removed Lines]",
          "618: MACRO_WMS(              InvalCachedScope,   Unsigned1,      OpSideEffect)",
          "",
          "[Added Lines]",
          "632: MACRO_EXTEND_WMS(       InvalCachedScope,   Unsigned1,      OpSideEffect)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "672: MACRO_WMS(              ProfiledReturnTypeCallIExtendedFlags, ProfiledCallIExtendedFlags, OpByteCodeOnly|OpSideEffect|OpUseAllFields|OpCallInstr)",
          "674: MACRO_EXTEND_WMS(       EmitTmpRegCount,    Unsigned1,      OpByteCodeOnly)",
          "678:     MACRO_WMS(              Concat3,            Reg4,           OpByteCodeOnly|OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "[Removed Lines]",
          "675: MACRO_WMS(              Unused,             Reg1,           None)",
          "",
          "[Added Lines]",
          "689: MACRO_BACKEND_ONLY(     Unused,             Reg1,           None)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "807: MACRO_BACKEND_ONLY(     LdStrictNullDisplay,Empty,          None)       // Load the strict null frame display",
          "808: #endif",
          "811: MACRO_BACKEND_ONLY(     LdSpreadIndices,    Empty,          None)",
          "813: MACRO_EXTEND_WMS(       ClearAttributes,    ElementU,       None)",
          "",
          "[Removed Lines]",
          "810: MACRO(                  SpreadArrayLiteral, Reg2Aux,        OpSideEffect|OpHasImplicitCall)",
          "",
          "[Added Lines]",
          "824: MACRO_EXTEND(           SpreadArrayLiteral, Reg2Aux,        OpSideEffect|OpHasImplicitCall)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #endif",
          "46:   DEF3    (CUSTOM,                  StartCall,                  OP_StartCall, StartCall)",
          "47:   DEF2    (NOP,                     Nop,                        Empty)",
          "49:   DEF2_WMS(IP_TARG,                 ProfiledLoopStart,          OP_ProfiledLoopStart)",
          "50:   DEF2_WMS(FALLTHROUGH,             LoopBodyStart,              /* Common case with ProfiledLoopBodyStart */)",
          "51:   DEF2_WMS(IP_TARG,                 ProfiledLoopBodyStart,      OP_ProfiledLoopBodyStart)",
          "",
          "[Removed Lines]",
          "48:   DEF2_WMS(NOP,                     Unused,                     Reg1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   DEF2    (BRS,                     BrNotHasSideEffects,        JavascriptOperators::OP_BrNotHasSideEffects)",
          "72: EXDEF2    (BRPROP,                  BrOnHasProperty,            OP_BrOnHasProperty)",
          "77:   DEF2_WMS(BRBS,                    BrFncNeqApply,              JavascriptOperators::OP_BrFncNeqApply)",
          "",
          "[Removed Lines]",
          "73:   DEF2    (BRPROP,                  BrOnNoProperty,             OP_BrOnNoProperty)",
          "74:   DEF2    (BRLOCALPROP,             BrOnNoLocalProperty,        OP_BrOnNoProperty)",
          "75: EXDEF2    (BRENVPROP,               BrOnNoEnvProperty,          OP_BrOnNoEnvProperty)",
          "76:   DEF2    (BRENVPROP,               BrOnNoLocalEnvProperty,     OP_BrOnNoEnvProperty)",
          "",
          "[Added Lines]",
          "73: EXDEF2    (BRPROP,                  BrOnNoProperty,             OP_BrOnNoProperty)",
          "74:   DEF2    (BRLOCALPROP,             BrOnHasLocalProperty,       OP_BrOnHasProperty)",
          "75: EXDEF2    (BRENVPROP,               BrOnHasEnvProperty,         OP_BrOnHasEnvProperty)",
          "76:   DEF2    (BRENVPROP,               BrOnHasLocalEnvProperty,    OP_BrOnHasEnvProperty)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   DEF2_WMS(A1toA1Mem,               Decr_A,                     JavascriptMath::Decrement)",
          "104:   DEF2_WMS(A1toA1Mem,               Neg_A,                      JavascriptMath::Negate)",
          "105:   DEF2_WMS(A1toA1Mem,               Not_A,                      JavascriptMath::Not)",
          "106:   DEF2_WMS(A1toA1Mem,               Typeof,                     JavascriptOperators::Typeof)",
          "107:   DEF2_WMS(A1toA1Mem,               Delete_A,                   JavascriptOperators::Delete)",
          "108:   DEF2_WMS(GET_ELEM_IMem,           TypeofElem,                 JavascriptOperators::TypeofElem)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: EXDEF2_WMS(A1toA1Mem,               Typeof_ReuseLoc,            JavascriptOperators::Typeof)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:   DEF2_WMS(CMMem,                   CmSrNeq_A,                  JavascriptOperators::NotStrictEqual)",
          "135:   DEF2_WMS(FALLTHROUGH,             BeginSwitch,                /* Common case with Ld_A */)",
          "136:   DEF2_WMS(FALLTHROUGH,             InitConst,                  /* Common case with Ld_A */)",
          "137:   DEF2_WMS(A1toA1_ALLOW_STACK,      Ld_A,                       OP_Ld_A)",
          "138:   DEF2_WMS(INNERtoA1,               LdInnerScope,               OP_Ld_A)",
          "139:   DEF2_WMS(XXtoA1,                  LdLocalObj,                 OP_LdLocalObj)",
          "140: EXDEF2_WMS(XXtoA1,                  LdParamObj,                 OP_LdParamObj)",
          "141: EXDEF2_WMS(A1toA1_ALLOW_STACK,      UnwrapWithObj,              JavascriptOperators::OP_UnwrapWithObj)",
          "142: EXDEF2_WMS(A2toXX,                  SetComputedNameVar,         JavascriptOperators::OP_SetComputedNameVar)",
          "143:   DEF2_WMS(A1toXX_ALLOW_STACK,      ChkUndecl,                  OP_ChkUndecl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:   DEF2_WMS(FALLTHROUGH,             Ld_A_ReuseLoc,              /* Common case with Ld_A */)",
          "141: EXDEF2_WMS(XXtoA1,                  LdLocalObj_ReuseLoc,        OP_LdLocalObj)",
          "144: EXDEF2_WMS(FALLTHROUGH,             UnwrapWithObj_ReuseLoc,     /* Common case with UnwrapWithObj */)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:   DEF2_WMS(CUSTOM_L_Arg,            ArgOut_A,                   OP_ArgOut_A)",
          "159:   DEF3_WMS(CUSTOM_L_Arg2,           ProfiledArgOut_A,           PROFILEDOP(OP_ProfiledArgOut_A, OP_ArgOut_A), ProfiledArg)",
          "161:   DEF3_WMS(CUSTOM_L_Value,          LdFld,                      OP_GetProperty, ElementCP)",
          "162:   DEF3_WMS(CUSTOM_L_Value,          LdLocalFld,                 OP_GetLocalProperty, ElementP)",
          "163: EXDEF3_WMS(CUSTOM_L_Value,          LdSuperFld,                 OP_GetSuperProperty, ElementC2)",
          "164:   DEF3_WMS(CUSTOM_L_Value,          LdFldForTypeOf,             OP_GetPropertyForTypeOf, ElementCP)",
          "165: EXDEF3_WMS(CUSTOM_L_Value,          LdRootFldForTypeOf,         OP_GetRootPropertyForTypeOf, ElementRootCP)",
          "166:   DEF3_WMS(CUSTOM_L_Value,          LdFldForCallApplyTarget,    OP_GetProperty, ElementCP)",
          "167:   DEF3_WMS(CUSTOM_L_Value,          ProfiledLdFld,              PROFILEDOP(OP_ProfiledGetProperty, OP_GetProperty), ElementCP)",
          "168:   DEF3_WMS(CUSTOM_L_Value,          ProfiledLdLocalFld,         PROFILEDOP(OP_ProfiledGetLocalProperty, OP_GetLocalProperty), ElementP)",
          "169: EXDEF3_WMS(CUSTOM_L_Value,          ProfiledLdSuperFld,         PROFILEDOP(OP_ProfiledGetSuperProperty, OP_GetSuperProperty), ElementC2)",
          "170:   DEF3_WMS(CUSTOM_L_Value,          ProfiledLdFldForTypeOf,     PROFILEDOP(OP_ProfiledGetPropertyForTypeOf, OP_GetPropertyForTypeOf), ElementCP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   DEF2_WMS(FALLTHROUGH,             LdFld_ReuseLoc,             /* Common case with LdFld */)",
          "167:   DEF2_WMS(FALLTHROUGH,             LdLocalFld_ReuseLoc,        /* Common case with LdLocalFld */)",
          "173:   DEF2_WMS(FALLTHROUGH,             ProfiledLdFld_ReuseLoc,     /* Common case with ProfiledLdFld */)",
          "175:   DEF2_WMS(FALLTHROUGH,             ProfiledLdLocalFld_ReuseLoc,/* Common case with ProfiledLdLocalFld */)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:   DEF3_WMS(CUSTOM_L_Value,          LdRootMethodFld,            OP_GetRootMethodProperty, ElementRootCP)",
          "180:   DEF3_WMS(CUSTOM_L_Value,          ProfiledLdRootMethodFld,    PROFILEDOP(OP_ProfiledGetRootMethodProperty, OP_GetRootMethodProperty), ElementRootCP)",
          "181:   DEF3_WMS(CUSTOM_L_Value,          DeleteFld,                  OP_DeleteFld, ElementC)",
          "182: EXDEF3_WMS(CUSTOM_L_Value,          DeleteLocalFld,             OP_DeleteLocalFld, ElementU)",
          "183:   DEF3_WMS(CUSTOM_L_Value,          DeleteRootFld,              OP_DeleteRootFld, ElementC)",
          "184:   DEF3_WMS(CUSTOM_L_Value,          DeleteFldStrict,            OP_DeleteFldStrict, ElementC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: EXDEF3_WMS(CUSTOM_L_Value,          DeleteFld_ReuseLoc,         OP_DeleteFld, ElementC)",
          "191: EXDEF2_WMS(FALLTHROUGH,             DeleteLocalFld_ReuseLoc,    /* Common case with DeleteLocalFld */)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231:   DEF3_WMS(GET_ELEM_INNERSLOTNonVar,LdInnerSlot,                OP_LdInnerSlot, ElementSlotI2)",
          "232: EXDEF3_WMS(GET_ELEM_INNERSLOTNonVar,LdInnerObjSlot,             OP_LdInnerObjSlot, ElementSlotI2)",
          "233:   DEF3_WMS(GET_ELEM_ENVSLOTNonVar,  LdEnvSlot,                  OP_LdEnvSlot, ElementSlotI2)",
          "235: EXDEF3_WMS(GET_ELEM_ENVSLOTNonVar,  LdEnvObjSlot,               OP_LdEnvObjSlot, ElementSlotI2)",
          "236: EXDEF3_WMS(GET_ELEM_ENVSLOTNonVar,  LdModuleSlot,               OP_LdModuleSlot, ElementSlotI2)",
          "237: EXDEF2_WMS(SET_ELEM_ENVSLOTNonVar,  StModuleSlot,               OP_StModuleSlot)",
          "",
          "[Removed Lines]",
          "234:   DEF3_WMS(GET_ELEM_ENVSLOTNonVar,  LdEnvObj,                   OP_LdEnvObj, ElementSlotI1)",
          "",
          "[Added Lines]",
          "244: EXDEF2_WMS(FALLTHROUGH,             LdEnvObj_ReuseLoc,          /* LdEnvObj */)",
          "245: EXDEF3_WMS(GET_ELEM_ENVSLOTNonVar,  LdEnvObj,                   OP_LdEnvObj, ElementSlotI1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   DEF2_WMS(XXtoA1Mem,               LdNaN,                      JavascriptOperators::OP_LdNaN)",
          "298:   DEF2_WMS(XXtoA1Mem,               LdInfinity,                 JavascriptOperators::OP_LdInfinity)",
          "299:   DEF2_WMS(XXtoA1Mem,               LdTrue,                     JavascriptBoolean::OP_LdTrue)",
          "300:   DEF2_WMS(XXtoA1Mem,               LdFalse,                    JavascriptBoolean::OP_LdFalse)",
          "301:   EXDEF2_WMS(XXtoA1Mem,             LdChakraLib,                JavascriptOperators::OP_LdChakraLib)",
          "302:   DEF2_WMS(A1I1toA1Mem,             LdThis,                     JavascriptOperators::OP_GetThisNoFastPath)",
          "303: EXDEF2_WMS(XXtoA1Mem,               LdHomeObj,                  OP_LdHomeObj)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   DEF2_WMS(XXtoA1Mem,               LdTrue_ReuseLoc,            JavascriptBoolean::OP_LdTrue)",
          "313:   DEF2_WMS(XXtoA1Mem,               LdFalse_ReuseLoc,           JavascriptBoolean::OP_LdFalse)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "371:   DEF3    (CUSTOM_L_R0,             LdPropIds,                  OP_LdPropIds, Auxiliary)",
          "372:   DEF3    (CUSTOM,                  InitCachedFuncs,            OP_InitCachedFuncs, AuxNoReg)",
          "373:   DEF2_WMS(LOCALI1toA1,             GetCachedFunc,              OP_GetCachedFunc)",
          "375:   DEF2    (EMPTY,                   CommitScope,                OP_CommitScope)",
          "376:   DEF2_WMS(A1I2toXXNonVar_FuncBody, NewInnerScopeSlots,         OP_NewInnerScopeSlots)",
          "377:   DEF3_WMS(CUSTOM,                  CloneInnerScopeSlots,       OP_CloneInnerScopeSlots, Unsigned1)",
          "",
          "[Removed Lines]",
          "374:   DEF2_WMS(EnvU1toXX,               InvalCachedScope,           JavascriptOperators::OP_InvalidateCachedScope)",
          "",
          "[Added Lines]",
          "387: EXDEF2_WMS(EnvU1toXX,               InvalCachedScope,           JavascriptOperators::OP_InvalidateCachedScope)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "398:   DEF2_WMS(A2NonVarToA1Reg,         ResumeYieldStar,            OP_ResumeYield)",
          "399: EXDEF2    (W1,                      RuntimeTypeError,           JavascriptExceptionOperators::OP_RuntimeTypeError)",
          "400: EXDEF2    (W1,                      RuntimeReferenceError,      JavascriptExceptionOperators::OP_RuntimeReferenceError)",
          "402: EXDEF3_WMS(CUSTOM,                  ClearAttributes,            OP_ClearAttributes, ElementU)",
          "403:   DEF3_WMS(CUSTOM,                  ApplyArgs,                  OP_ApplyArgs, Reg5)",
          "404: #ifdef ENABLE_SCRIPT_DEBUGGING",
          "",
          "[Removed Lines]",
          "401:   DEF3    (CUSTOM_L_R0,             SpreadArrayLiteral,         OP_SpreadArrayLiteral, Reg2Aux)",
          "",
          "[Added Lines]",
          "414: EXDEF3    (CUSTOM_L_R0,             SpreadArrayLiteral,         OP_SpreadArrayLiteral, Reg2Aux)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8570:             this->m_functionBody->GetReferencedPropertyId(propertyIdIndex), scriptContext);",
          "8571:     }",
          "8574:     {",
          "8575:         Var instance = OP_LdFrameDisplaySlot(envInstance, slotIndex);",
          "8577:             this->m_functionBody->GetReferencedPropertyId(propertyIdIndex), scriptContext);",
          "8578:     }",
          "",
          "[Removed Lines]",
          "8573:     BOOL InterpreterStackFrame::OP_BrOnNoEnvProperty(Var envInstance, int32 slotIndex, uint propertyIdIndex, ScriptContext* scriptContext)",
          "8576:         return !JavascriptOperators::OP_HasProperty(instance,",
          "",
          "[Added Lines]",
          "8573:     BOOL InterpreterStackFrame::OP_BrOnHasEnvProperty(Var envInstance, int32 slotIndex, uint propertyIdIndex, ScriptContext* scriptContext)",
          "8576:         return JavascriptOperators::OP_HasProperty(instance,",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.h||lib/Runtime/Language/InterpreterStackFrame.h": [
          "File: lib/Runtime/Language/InterpreterStackFrame.h -> lib/Runtime/Language/InterpreterStackFrame.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:         BOOL OP_BrNotUndecl_A(Var aValue);",
          "486:         BOOL OP_BrOnHasProperty(Var argInstance, uint propertyIdIndex, ScriptContext* scriptContext);",
          "487:         BOOL OP_BrOnNoProperty(Var argInstance, uint propertyIdIndex, ScriptContext* scriptContext);",
          "489:         BOOL OP_BrOnClassConstructor(Var aValue);",
          "490:         BOOL OP_BrOnBaseConstructorKind(Var aValue);",
          "",
          "[Removed Lines]",
          "488:         BOOL OP_BrOnNoEnvProperty(Var envInstance, int32 slotIndex, uint propertyIdIndex, ScriptContext* scriptContext);",
          "",
          "[Added Lines]",
          "488:         BOOL OP_BrOnHasEnvProperty(Var envInstance, int32 slotIndex, uint propertyIdIndex, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      }
    }
  ]
}