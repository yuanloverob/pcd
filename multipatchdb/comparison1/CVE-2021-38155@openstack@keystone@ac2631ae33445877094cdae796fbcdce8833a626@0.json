{
  "cve_id": "CVE-2021-38155",
  "cve_desc": "OpenStack Keystone 10.x through 16.x before 16.0.2, 17.x before 17.0.1, 18.x before 18.0.1, and 19.x before 19.0.1 allows information disclosure during account locking (related to PCI DSS features). By guessing the name of an account and failing to authenticate multiple times, any unauthenticated actor could both confirm the account exists and obtain that account's corresponding UUID, which might be leveraged for other unrelated attacks. All deployments enabling security_compliance.lockout_failure_attempts are affected.",
  "repo": "openstack/keystone",
  "patch_hash": "ac2631ae33445877094cdae796fbcdce8833a626",
  "patch_info": {
    "commit_hash": "ac2631ae33445877094cdae796fbcdce8833a626",
    "repo": "openstack/keystone",
    "commit_url": "https://github.com/openstack/keystone/commit/ac2631ae33445877094cdae796fbcdce8833a626",
    "files": [
      "keystone/notifications.py",
      "keystone/tests/unit/common/test_notifications.py",
      "keystone/tests/unit/identity/test_backend_sql.py",
      "releasenotes/notes/bug-1688137-e4203c9a728690a7.yaml"
    ],
    "message": "Hide AccountLocked exception from end users\n\nThis change hides the AccountLocked exception from being returned\nto the end user to hide sensitive information that a potential\nmalicious person could gain insight from.\n\nThe notification handler catches the AccountLocked exception as\nbefore, but after sending the audit notification, it instead\nbubbles up Unauthorized rather than AccountLocked.\n\nCo-Authored-By: Samuel de Medeiros Queiroz <samueldmq@gmail.com>\n\nChange-Id: Id51241989b22c52810391f3e8e1cadbf8613d873\nRelated-Bug: #1688137",
    "before_after_code_files": [
      "keystone/notifications.py||keystone/notifications.py",
      "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
      "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
    ]
  },
  "patch_diff": {
    "keystone/notifications.py||keystone/notifications.py": [
      "File: keystone/notifications.py -> keystone/notifications.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "580:                                          taxonomy.OUTCOME_FAILURE,",
      "581:                                          target, self.event_type,",
      "582:                                          reason=audit_reason)",
      "583:                 raise",
      "584:             except Exception:",
      "585:                 # For authentication failure send a CADF event as well",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "583:                 if isinstance(ex, exception.AccountLocked):",
      "584:                     raise exception.Unauthorized",
      "",
      "---------------"
    ],
    "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py": [
      "File: keystone/tests/unit/common/test_notifications.py -> keystone/tests/unit/common/test_notifications.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "802:         password = uuid.uuid4().hex",
      "803:         new_password = uuid.uuid4().hex",
      "804:         expected_responses = [AssertionError, AssertionError, AssertionError,",
      "806:         user_ref = unit.new_user_ref(domain_id=self.domain_id,",
      "807:                                      password=password)",
      "808:         user_ref = PROVIDERS.identity_api.create_user(user_ref)",
      "",
      "[Removed Lines]",
      "805:                               exception.AccountLocked]",
      "",
      "[Added Lines]",
      "805:                               exception.Unauthorized]",
      "",
      "---------------"
    ],
    "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py": [
      "File: keystone/tests/unit/identity/test_backend_sql.py -> keystone/tests/unit/identity/test_backend_sql.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "613:             )",
      "614:             # test locking out user after max failed attempts",
      "615:             self._fail_auth_repeatedly(self.user['id'])",
      "617:                               PROVIDERS.identity_api.authenticate,",
      "618:                               user_id=self.user['id'],",
      "619:                               password=uuid.uuid4().hex)",
      "",
      "[Removed Lines]",
      "616:             self.assertRaises(exception.AccountLocked,",
      "",
      "[Added Lines]",
      "616:             self.assertRaises(exception.Unauthorized,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "642:         with self.make_request():",
      "643:             # lockout user",
      "644:             self._fail_auth_repeatedly(self.user['id'])",
      "646:                               PROVIDERS.identity_api.authenticate,",
      "647:                               user_id=self.user['id'],",
      "648:                               password=uuid.uuid4().hex)",
      "",
      "[Removed Lines]",
      "645:             self.assertRaises(exception.AccountLocked,",
      "",
      "[Added Lines]",
      "645:             self.assertRaises(exception.Unauthorized,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "661:             with self.make_request():",
      "662:                 # lockout user",
      "663:                 self._fail_auth_repeatedly(self.user['id'])",
      "665:                                   PROVIDERS.identity_api.authenticate,",
      "666:                                   user_id=self.user['id'],",
      "667:                                   password=uuid.uuid4().hex)",
      "",
      "[Removed Lines]",
      "664:                 self.assertRaises(exception.AccountLocked,",
      "",
      "[Added Lines]",
      "664:                 self.assertRaises(exception.Unauthorized,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "687:             with self.make_request():",
      "688:                 # lockout user",
      "689:                 self._fail_auth_repeatedly(self.user['id'])",
      "691:                                   PROVIDERS.identity_api.authenticate,",
      "692:                                   user_id=self.user['id'],",
      "693:                                   password=uuid.uuid4().hex)",
      "",
      "[Removed Lines]",
      "690:                 self.assertRaises(exception.AccountLocked,",
      "",
      "[Added Lines]",
      "690:                 self.assertRaises(exception.Unauthorized,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "697:                 # repeat failed auth the max times",
      "698:                 self._fail_auth_repeatedly(self.user['id'])",
      "699:                 # test user account is locked",
      "701:                                   PROVIDERS.identity_api.authenticate,",
      "702:                                   user_id=self.user['id'],",
      "703:                                   password=uuid.uuid4().hex)",
      "",
      "[Removed Lines]",
      "700:                 self.assertRaises(exception.AccountLocked,",
      "",
      "[Added Lines]",
      "700:                 self.assertRaises(exception.Unauthorized,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ab4eb27be4c13c9bab2b3ea700f00a190521bf8",
      "candidate_info": {
        "commit_hash": "8ab4eb27be4c13c9bab2b3ea700f00a190521bf8",
        "repo": "openstack/keystone",
        "commit_url": "https://github.com/openstack/keystone/commit/8ab4eb27be4c13c9bab2b3ea700f00a190521bf8",
        "files": [
          "keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py",
          "releasenotes/notes/bug-1688137-e4203c9a728690a7.yaml"
        ],
        "message": "Hide AccountLocked exception from end users\n\nThis change hides the AccountLocked exception from being returned\nto the end user to hide sensitive information that a potential\nmalicious person could gain insight from.\n\nThe notification handler catches the AccountLocked exception as\nbefore, but after sending the audit notification, it instead\nbubbles up Unauthorized rather than AccountLocked.\n\nCo-Authored-By: Samuel de Medeiros Queiroz <samueldmq@gmail.com>\n\nChange-Id: Id51241989b22c52810391f3e8e1cadbf8613d873\nRelated-Bug: #1688137\n(cherry picked from commit ac2631ae33445877094cdae796fbcdce8833a626)",
        "before_after_code_files": [
          "keystone/notifications.py||keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ],
          "candidate": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ]
        }
      },
      "candidate_diff": {
        "keystone/notifications.py||keystone/notifications.py": [
          "File: keystone/notifications.py -> keystone/notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:                                          taxonomy.OUTCOME_FAILURE,",
          "581:                                          target, self.event_type,",
          "582:                                          reason=audit_reason)",
          "583:                 raise",
          "584:             except Exception:",
          "585:                 # For authentication failure send a CADF event as well",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:                 if isinstance(ex, exception.AccountLocked):",
          "584:                     raise exception.Unauthorized",
          "",
          "---------------"
        ],
        "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py": [
          "File: keystone/tests/unit/common/test_notifications.py -> keystone/tests/unit/common/test_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         password = uuid.uuid4().hex",
          "803:         new_password = uuid.uuid4().hex",
          "804:         expected_responses = [AssertionError, AssertionError, AssertionError,",
          "806:         user_ref = unit.new_user_ref(domain_id=self.domain_id,",
          "807:                                      password=password)",
          "808:         user_ref = PROVIDERS.identity_api.create_user(user_ref)",
          "",
          "[Removed Lines]",
          "805:                               exception.AccountLocked]",
          "",
          "[Added Lines]",
          "805:                               exception.Unauthorized]",
          "",
          "---------------"
        ],
        "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py": [
          "File: keystone/tests/unit/identity/test_backend_sql.py -> keystone/tests/unit/identity/test_backend_sql.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:             )",
          "577:             # test locking out user after max failed attempts",
          "578:             self._fail_auth_repeatedly(self.user['id'])",
          "580:                               PROVIDERS.identity_api.authenticate,",
          "581:                               user_id=self.user['id'],",
          "582:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "579:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "579:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605:         with self.make_request():",
          "606:             # lockout user",
          "607:             self._fail_auth_repeatedly(self.user['id'])",
          "609:                               PROVIDERS.identity_api.authenticate,",
          "610:                               user_id=self.user['id'],",
          "611:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "608:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "608:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "624:             with self.make_request():",
          "625:                 # lockout user",
          "626:                 self._fail_auth_repeatedly(self.user['id'])",
          "628:                                   PROVIDERS.identity_api.authenticate,",
          "629:                                   user_id=self.user['id'],",
          "630:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "627:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "627:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "650:             with self.make_request():",
          "651:                 # lockout user",
          "652:                 self._fail_auth_repeatedly(self.user['id'])",
          "654:                                   PROVIDERS.identity_api.authenticate,",
          "655:                                   user_id=self.user['id'],",
          "656:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "653:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "653:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660:                 # repeat failed auth the max times",
          "661:                 self._fail_auth_repeatedly(self.user['id'])",
          "662:                 # test user account is locked",
          "664:                                   PROVIDERS.identity_api.authenticate,",
          "665:                                   user_id=self.user['id'],",
          "666:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "663:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "663:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4649fe6bfc749ab48ec1905ca4dc2fc667914021",
      "candidate_info": {
        "commit_hash": "4649fe6bfc749ab48ec1905ca4dc2fc667914021",
        "repo": "openstack/keystone",
        "commit_url": "https://github.com/openstack/keystone/commit/4649fe6bfc749ab48ec1905ca4dc2fc667914021",
        "files": [
          "keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py",
          "releasenotes/notes/bug-1688137-e4203c9a728690a7.yaml"
        ],
        "message": "Hide AccountLocked exception from end users\n\nThis change hides the AccountLocked exception from being returned\nto the end user to hide sensitive information that a potential\nmalicious person could gain insight from.\n\nThe notification handler catches the AccountLocked exception as\nbefore, but after sending the audit notification, it instead\nbubbles up Unauthorized rather than AccountLocked.\n\nCo-Authored-By: Samuel de Medeiros Queiroz <samueldmq@gmail.com>\n\nChange-Id: Id51241989b22c52810391f3e8e1cadbf8613d873\nRelated-Bug: #1688137\n(cherry picked from commit ac2631ae33445877094cdae796fbcdce8833a626)",
        "before_after_code_files": [
          "keystone/notifications.py||keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ],
          "candidate": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ]
        }
      },
      "candidate_diff": {
        "keystone/notifications.py||keystone/notifications.py": [
          "File: keystone/notifications.py -> keystone/notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:                                          taxonomy.OUTCOME_FAILURE,",
          "581:                                          target, self.event_type,",
          "582:                                          reason=audit_reason)",
          "583:                 raise",
          "584:             except Exception:",
          "585:                 # For authentication failure send a CADF event as well",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:                 if isinstance(ex, exception.AccountLocked):",
          "584:                     raise exception.Unauthorized",
          "",
          "---------------"
        ],
        "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py": [
          "File: keystone/tests/unit/common/test_notifications.py -> keystone/tests/unit/common/test_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         password = uuid.uuid4().hex",
          "803:         new_password = uuid.uuid4().hex",
          "804:         expected_responses = [AssertionError, AssertionError, AssertionError,",
          "806:         user_ref = unit.new_user_ref(domain_id=self.domain_id,",
          "807:                                      password=password)",
          "808:         user_ref = PROVIDERS.identity_api.create_user(user_ref)",
          "",
          "[Removed Lines]",
          "805:                               exception.AccountLocked]",
          "",
          "[Added Lines]",
          "805:                               exception.Unauthorized]",
          "",
          "---------------"
        ],
        "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py": [
          "File: keystone/tests/unit/identity/test_backend_sql.py -> keystone/tests/unit/identity/test_backend_sql.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:             )",
          "614:             # test locking out user after max failed attempts",
          "615:             self._fail_auth_repeatedly(self.user['id'])",
          "617:                               PROVIDERS.identity_api.authenticate,",
          "618:                               user_id=self.user['id'],",
          "619:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "616:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "616:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:         with self.make_request():",
          "643:             # lockout user",
          "644:             self._fail_auth_repeatedly(self.user['id'])",
          "646:                               PROVIDERS.identity_api.authenticate,",
          "647:                               user_id=self.user['id'],",
          "648:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "645:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "645:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "661:             with self.make_request():",
          "662:                 # lockout user",
          "663:                 self._fail_auth_repeatedly(self.user['id'])",
          "665:                                   PROVIDERS.identity_api.authenticate,",
          "666:                                   user_id=self.user['id'],",
          "667:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "664:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "664:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "687:             with self.make_request():",
          "688:                 # lockout user",
          "689:                 self._fail_auth_repeatedly(self.user['id'])",
          "691:                                   PROVIDERS.identity_api.authenticate,",
          "692:                                   user_id=self.user['id'],",
          "693:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "690:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "690:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:                 # repeat failed auth the max times",
          "698:                 self._fail_auth_repeatedly(self.user['id'])",
          "699:                 # test user account is locked",
          "701:                                   PROVIDERS.identity_api.authenticate,",
          "702:                                   user_id=self.user['id'],",
          "703:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "700:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "700:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b573ae7d1c20e0ebfbde79bbe7538a09589c75d",
      "candidate_info": {
        "commit_hash": "1b573ae7d1c20e0ebfbde79bbe7538a09589c75d",
        "repo": "openstack/keystone",
        "commit_url": "https://github.com/openstack/keystone/commit/1b573ae7d1c20e0ebfbde79bbe7538a09589c75d",
        "files": [
          "keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py",
          "releasenotes/notes/bug-1688137-e4203c9a728690a7.yaml"
        ],
        "message": "Hide AccountLocked exception from end users\n\nThis change hides the AccountLocked exception from being returned\nto the end user to hide sensitive information that a potential\nmalicious person could gain insight from.\n\nThe notification handler catches the AccountLocked exception as\nbefore, but after sending the audit notification, it instead\nbubbles up Unauthorized rather than AccountLocked.\n\nCo-Authored-By: Samuel de Medeiros Queiroz <samueldmq@gmail.com>\n\nChange-Id: Id51241989b22c52810391f3e8e1cadbf8613d873\nRelated-Bug: #1688137\n(cherry picked from commit ac2631ae33445877094cdae796fbcdce8833a626)",
        "before_after_code_files": [
          "keystone/notifications.py||keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ],
          "candidate": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ]
        }
      },
      "candidate_diff": {
        "keystone/notifications.py||keystone/notifications.py": [
          "File: keystone/notifications.py -> keystone/notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:                                          taxonomy.OUTCOME_FAILURE,",
          "581:                                          target, self.event_type,",
          "582:                                          reason=audit_reason)",
          "583:                 raise",
          "584:             except Exception:",
          "585:                 # For authentication failure send a CADF event as well",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:                 if isinstance(ex, exception.AccountLocked):",
          "584:                     raise exception.Unauthorized",
          "",
          "---------------"
        ],
        "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py": [
          "File: keystone/tests/unit/common/test_notifications.py -> keystone/tests/unit/common/test_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         password = uuid.uuid4().hex",
          "803:         new_password = uuid.uuid4().hex",
          "804:         expected_responses = [AssertionError, AssertionError, AssertionError,",
          "806:         user_ref = unit.new_user_ref(domain_id=self.domain_id,",
          "807:                                      password=password)",
          "808:         user_ref = PROVIDERS.identity_api.create_user(user_ref)",
          "",
          "[Removed Lines]",
          "805:                               exception.AccountLocked]",
          "",
          "[Added Lines]",
          "805:                               exception.Unauthorized]",
          "",
          "---------------"
        ],
        "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py": [
          "File: keystone/tests/unit/identity/test_backend_sql.py -> keystone/tests/unit/identity/test_backend_sql.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:             )",
          "577:             # test locking out user after max failed attempts",
          "578:             self._fail_auth_repeatedly(self.user['id'])",
          "580:                               PROVIDERS.identity_api.authenticate,",
          "581:                               user_id=self.user['id'],",
          "582:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "579:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "579:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605:         with self.make_request():",
          "606:             # lockout user",
          "607:             self._fail_auth_repeatedly(self.user['id'])",
          "609:                               PROVIDERS.identity_api.authenticate,",
          "610:                               user_id=self.user['id'],",
          "611:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "608:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "608:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "624:             with self.make_request():",
          "625:                 # lockout user",
          "626:                 self._fail_auth_repeatedly(self.user['id'])",
          "628:                                   PROVIDERS.identity_api.authenticate,",
          "629:                                   user_id=self.user['id'],",
          "630:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "627:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "627:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "650:             with self.make_request():",
          "651:                 # lockout user",
          "652:                 self._fail_auth_repeatedly(self.user['id'])",
          "654:                                   PROVIDERS.identity_api.authenticate,",
          "655:                                   user_id=self.user['id'],",
          "656:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "653:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "653:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660:                 # repeat failed auth the max times",
          "661:                 self._fail_auth_repeatedly(self.user['id'])",
          "662:                 # test user account is locked",
          "664:                                   PROVIDERS.identity_api.authenticate,",
          "665:                                   user_id=self.user['id'],",
          "666:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "663:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "663:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f510c806de3e20cdedd55291cd58dafa59398bec",
      "candidate_info": {
        "commit_hash": "f510c806de3e20cdedd55291cd58dafa59398bec",
        "repo": "openstack/keystone",
        "commit_url": "https://github.com/openstack/keystone/commit/f510c806de3e20cdedd55291cd58dafa59398bec",
        "files": [
          "keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py",
          "releasenotes/notes/bug-1688137-e4203c9a728690a7.yaml"
        ],
        "message": "Hide AccountLocked exception from end users\n\nThis change hides the AccountLocked exception from being returned\nto the end user to hide sensitive information that a potential\nmalicious person could gain insight from.\n\nThe notification handler catches the AccountLocked exception as\nbefore, but after sending the audit notification, it instead\nbubbles up Unauthorized rather than AccountLocked.\n\nCo-Authored-By: Samuel de Medeiros Queiroz <samueldmq@gmail.com>\n\nChange-Id: Id51241989b22c52810391f3e8e1cadbf8613d873\nRelated-Bug: #1688137\n(cherry picked from commit ac2631ae33445877094cdae796fbcdce8833a626)",
        "before_after_code_files": [
          "keystone/notifications.py||keystone/notifications.py",
          "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
          "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ],
          "candidate": [
            "keystone/notifications.py||keystone/notifications.py",
            "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py",
            "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py"
          ]
        }
      },
      "candidate_diff": {
        "keystone/notifications.py||keystone/notifications.py": [
          "File: keystone/notifications.py -> keystone/notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:                                          taxonomy.OUTCOME_FAILURE,",
          "581:                                          target, self.event_type,",
          "582:                                          reason=audit_reason)",
          "583:                 raise",
          "584:             except Exception:",
          "585:                 # For authentication failure send a CADF event as well",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:                 if isinstance(ex, exception.AccountLocked):",
          "584:                     raise exception.Unauthorized",
          "",
          "---------------"
        ],
        "keystone/tests/unit/common/test_notifications.py||keystone/tests/unit/common/test_notifications.py": [
          "File: keystone/tests/unit/common/test_notifications.py -> keystone/tests/unit/common/test_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         password = uuid.uuid4().hex",
          "803:         new_password = uuid.uuid4().hex",
          "804:         expected_responses = [AssertionError, AssertionError, AssertionError,",
          "806:         user_ref = unit.new_user_ref(domain_id=self.domain_id,",
          "807:                                      password=password)",
          "808:         user_ref = PROVIDERS.identity_api.create_user(user_ref)",
          "",
          "[Removed Lines]",
          "805:                               exception.AccountLocked]",
          "",
          "[Added Lines]",
          "805:                               exception.Unauthorized]",
          "",
          "---------------"
        ],
        "keystone/tests/unit/identity/test_backend_sql.py||keystone/tests/unit/identity/test_backend_sql.py": [
          "File: keystone/tests/unit/identity/test_backend_sql.py -> keystone/tests/unit/identity/test_backend_sql.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:             )",
          "614:             # test locking out user after max failed attempts",
          "615:             self._fail_auth_repeatedly(self.user['id'])",
          "617:                               PROVIDERS.identity_api.authenticate,",
          "618:                               user_id=self.user['id'],",
          "619:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "616:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "616:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:         with self.make_request():",
          "643:             # lockout user",
          "644:             self._fail_auth_repeatedly(self.user['id'])",
          "646:                               PROVIDERS.identity_api.authenticate,",
          "647:                               user_id=self.user['id'],",
          "648:                               password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "645:             self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "645:             self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "661:             with self.make_request():",
          "662:                 # lockout user",
          "663:                 self._fail_auth_repeatedly(self.user['id'])",
          "665:                                   PROVIDERS.identity_api.authenticate,",
          "666:                                   user_id=self.user['id'],",
          "667:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "664:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "664:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "687:             with self.make_request():",
          "688:                 # lockout user",
          "689:                 self._fail_auth_repeatedly(self.user['id'])",
          "691:                                   PROVIDERS.identity_api.authenticate,",
          "692:                                   user_id=self.user['id'],",
          "693:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "690:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "690:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:                 # repeat failed auth the max times",
          "698:                 self._fail_auth_repeatedly(self.user['id'])",
          "699:                 # test user account is locked",
          "701:                                   PROVIDERS.identity_api.authenticate,",
          "702:                                   user_id=self.user['id'],",
          "703:                                   password=uuid.uuid4().hex)",
          "",
          "[Removed Lines]",
          "700:                 self.assertRaises(exception.AccountLocked,",
          "",
          "[Added Lines]",
          "700:                 self.assertRaises(exception.Unauthorized,",
          "",
          "---------------"
        ]
      }
    }
  ]
}