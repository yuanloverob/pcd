{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb7c24749d397dc6272bf45ac48182224247ca71",
      "candidate_info": {
        "commit_hash": "fb7c24749d397dc6272bf45ac48182224247ca71",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fb7c24749d397dc6272bf45ac48182224247ca71",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java"
        ],
        "message": "PDFBOX-5274: return empty path if no \"space\" path available for \"nbspace\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892787 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         }",
          "170:         if (\"nbspace\".equals(name))",
          "171:         {",
          "172:             return genericFont.getPath(\"space\");",
          "173:         }",
          "174:         return genericFont.getPath(name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:             if (!hasGlyph(\"space\"))",
          "173:             {",
          "174:                 return new GeneralPath();",
          "175:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e6cd42ae13f629996408bfc685b1eb14c8fdf99",
      "candidate_info": {
        "commit_hash": "3e6cd42ae13f629996408bfc685b1eb14c8fdf99",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3e6cd42ae13f629996408bfc685b1eb14c8fdf99",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ],
        "message": "PDFBOX-4892: remove unneeded else statement\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889697 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:             {",
          "906:                 return parseCOSNumber();",
          "907:             }",
          "909:             {",
          "933:             }",
          "934:         }",
          "935:         return null;",
          "",
          "[Removed Lines]",
          "908:             else",
          "913:                 String badString = readString();",
          "914:                 if (badString.isEmpty())",
          "915:                 {",
          "916:                     int peek = seqSource.peek();",
          "918:                     throw new IOException( \"Unknown dir object c='\" + c +",
          "919:                             \"' cInt=\" + (int)c + \" peek='\" + (char)peek",
          "920:                             + \"' peekInt=\" + peek + \" at offset \" + seqSource.getPosition() );",
          "921:                 }",
          "924:                 if(ENDOBJ_STRING.equals(badString) || ENDSTREAM_STRING.equals(badString))",
          "925:                 {",
          "926:                     seqSource.unread(badString.getBytes(ISO_8859_1));",
          "927:                 }",
          "928:                 else",
          "929:                 {",
          "930:                     LOG.warn(\"Skipped unexpected dir object = '\" + badString + \"' at offset \"",
          "931:                             + seqSource.getPosition());",
          "932:                 }",
          "",
          "[Added Lines]",
          "911:             String badString = readString();",
          "912:             if (badString.isEmpty())",
          "914:                 int peek = seqSource.peek();",
          "916:                 throw new IOException(",
          "917:                         \"Unknown dir object c='\" + c + \"' cInt=\" + (int) c + \" peek='\" + (char) peek",
          "918:                                 + \"' peekInt=\" + peek + \" at offset \" + seqSource.getPosition());",
          "919:             }",
          "922:             if (ENDOBJ_STRING.equals(badString) || ENDSTREAM_STRING.equals(badString))",
          "923:             {",
          "924:                 seqSource.unread(badString.getBytes(ISO_8859_1));",
          "925:             }",
          "926:             else",
          "927:             {",
          "928:                 LOG.warn(\"Skipped unexpected dir object = '\" + badString + \"' at offset \"",
          "929:                         + seqSource.getPosition());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9312f4cc3ae25307e4623af2100f86996c2d433",
      "candidate_info": {
        "commit_hash": "f9312f4cc3ae25307e4623af2100f86996c2d433",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f9312f4cc3ae25307e4623af2100f86996c2d433",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
        ],
        "message": "PDFBOX-5229: optimize reading of masked images, by Gunnar Brand; closes #121\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891076 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.awt.Paint;",
          "21: import java.awt.Rectangle;",
          "22: import java.awt.RenderingHints;",
          "23: import java.awt.image.BufferedImage;",
          "24: import java.awt.image.WritableRaster;",
          "25: import java.io.BufferedInputStream;",
          "26: import java.io.ByteArrayInputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.awt.geom.AffineTransform;",
          "24: import java.awt.image.AffineTransformOp;",
          "26: import java.awt.image.DataBuffer;",
          "27: import java.awt.image.ImagingOpException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:             }",
          "478:         }",
          "485:         if (softMask != null)",
          "486:         {",
          "489:         }",
          "490:         else",
          "491:         {",
          "498:         }",
          "500:         if (region == null && subsampling <= cachedImageSubsampling)",
          "",
          "[Removed Lines]",
          "481:         BufferedImage image = SampledImageReader.getRGBImage(this, region, subsampling, getColorKeyMask());",
          "484:         PDImageXObject softMask = getSoftMask();",
          "487:             float[] matte = extractMatte(softMask);",
          "488:             image = applyMask(image, softMask.getOpaqueImage(), true, matte);",
          "493:             PDImageXObject mask = getMask();",
          "494:             if (mask != null && mask.isStencil())",
          "495:             {",
          "496:                 image = applyMask(image, mask.getOpaqueImage(), false, null);",
          "497:             }",
          "",
          "[Added Lines]",
          "485:         final BufferedImage image;",
          "486:         final PDImageXObject softMask = getSoftMask(), mask = getMask();",
          "490:             image = applyMask(SampledImageReader.getRGBImage(this, region, subsampling, getColorKeyMask()),",
          "491:                     softMask.getOpaqueImage(), softMask.getInterpolate(), true, extractMatte(softMask));",
          "492:         }",
          "494:         else if (mask != null && mask.isStencil())",
          "495:         {",
          "496:             image = applyMask(SampledImageReader.getRGBImage(this, region, subsampling, getColorKeyMask()),",
          "497:                     mask.getOpaqueImage(), mask.getInterpolate(), false, null);",
          "501:             image = SampledImageReader.getRGBImage(this, region, subsampling, getColorKeyMask());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:         return SampledImageReader.getRGBImage(this, null);",
          "573:     }",
          "579:     {",
          "580:         if (mask == null)",
          "581:         {",
          "582:             return image;",
          "583:         }",
          "589:         if (mask.getWidth() < width || mask.getHeight() < height)",
          "590:         {",
          "592:         }",
          "595:         {",
          "599:         }",
          "600:         else if (image.getType() != BufferedImage.TYPE_INT_ARGB)",
          "601:         {",
          "605:         }",
          "616:         {",
          "620:             {",
          "623:                 {",
          "626:                     {",
          "631:                     }",
          "632:                 }",
          "634:                 {",
          "636:                 }",
          "637:             }",
          "639:         }",
          "641:     }",
          "644:     {",
          "646:     }",
          "652:     {",
          "653:         BufferedImage image2 = new BufferedImage(width, height, type);",
          "654:         Graphics2D g = image2.createGraphics();",
          "656:         {",
          "657:             g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,",
          "659:             g.setRenderingHint(RenderingHints.KEY_RENDERING,",
          "661:         }",
          "663:         g.dispose();",
          "664:         return image2;",
          "665:     }",
          "",
          "[Removed Lines]",
          "577:     private BufferedImage applyMask(BufferedImage image, BufferedImage mask,",
          "578:                                     boolean isSoft, float[] matte)",
          "585:         int width = image.getWidth();",
          "586:         int height = image.getHeight();",
          "591:             mask = scaleImage(mask, width, height, BufferedImage.TYPE_BYTE_GRAY);",
          "594:         if (mask.getWidth() > width || mask.getHeight() > height)",
          "596:             width = mask.getWidth();",
          "597:             height = mask.getHeight();",
          "598:             image = scaleImage(image, width, height, BufferedImage.TYPE_INT_ARGB);",
          "604:             image = scaleImage(image, width, height, BufferedImage.TYPE_INT_ARGB);",
          "608:         BufferedImage masked = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);",
          "609:         WritableRaster src = image.getRaster();",
          "610:         WritableRaster dest = masked.getRaster();",
          "611:         WritableRaster alpha = mask.getRaster();",
          "613:         int[] alphaRow = new int[width];",
          "614:         int[] rgbaRow = new int[4 * width];",
          "615:         for (int y = 0; y < height; y++)",
          "617:             src.getPixels(0, y, width, 1, rgbaRow);",
          "618:             alpha.getSamples(0, y, width, 1, 0, alphaRow);",
          "619:             for (int x = 0; x < width; x++)",
          "621:                 int offset = x * 4;",
          "622:                 if (isSoft)",
          "624:                     rgbaRow[offset + 3] = alphaRow[x];",
          "625:                     if (matte != null && alphaRow[x] != 0)",
          "627:                         float k = alphaRow[x] / 255f;",
          "628:                         rgbaRow[offset + 0] = clampColor(((rgbaRow[offset + 0] / 255f - matte[0]) / k + matte[0]) * 255f);",
          "629:                         rgbaRow[offset + 1] = clampColor(((rgbaRow[offset + 1] / 255f - matte[1]) / k + matte[1]) * 255f);",
          "630:                         rgbaRow[offset + 2] = clampColor(((rgbaRow[offset + 2] / 255f - matte[2]) / k + matte[2]) * 255f);",
          "633:                 else",
          "635:                     rgbaRow[offset + 3] = 255 - alphaRow[x];",
          "638:             dest.setPixels(0, y, width, 1, rgbaRow);",
          "640:         return masked;",
          "643:     private int clampColor(float color)",
          "645:         return color < 0 ? 0 : (color > 255 ? 255 : Math.round(color));",
          "651:     private BufferedImage scaleImage(BufferedImage image, int width, int height, int type)",
          "655:         if (getInterpolate())",
          "658:                     RenderingHints.VALUE_INTERPOLATION_BICUBIC);",
          "660:                     RenderingHints.VALUE_RENDER_QUALITY);",
          "662:         g.drawImage(image, 0, 0, width, height, 0, 0, image.getWidth(), image.getHeight(), null);",
          "",
          "[Added Lines]",
          "590:     private BufferedImage applyMask(BufferedImage image, BufferedImage mask, boolean interpolateMask,",
          "591:             boolean isSoft, float[] matte)",
          "598:         final int width = Math.max(image.getWidth(), mask.getWidth());",
          "599:         final int height = Math.max(image.getHeight(), mask.getHeight());",
          "606:             mask = scaleImage(mask, width, height, BufferedImage.TYPE_BYTE_GRAY, interpolateMask);",
          "607:         }",
          "608:         else if (mask.getType() != BufferedImage.TYPE_BYTE_GRAY)",
          "609:         {",
          "610:             mask = scaleImage(mask, width, height, BufferedImage.TYPE_BYTE_GRAY, false);",
          "613:         if (image.getWidth() < width || image.getHeight() < height)",
          "615:             image = scaleImage(image, width, height, BufferedImage.TYPE_INT_ARGB, getInterpolate());",
          "619:             image = scaleImage(image, width, height, BufferedImage.TYPE_INT_ARGB, false);",
          "626:         final WritableRaster raster = image.getRaster();",
          "627:         final WritableRaster alpha = mask.getRaster();",
          "628:         if (!isSoft && raster.getDataBuffer().getSize() == alpha.getDataBuffer().getSize())",
          "629:         {",
          "630:             final DataBuffer dst = raster.getDataBuffer();",
          "631:             final DataBuffer src = alpha.getDataBuffer();",
          "632:             for (int i = 0, c = dst.getSize(); c > 0; i++, c--)",
          "633:             {",
          "634:                 dst.setElem(i, dst.getElem(i) & 0xffffff | ~src.getElem(i) << 24);",
          "635:             }",
          "636:         }",
          "637:         else if (matte == null)",
          "639:             final int[] samples = new int[width];",
          "640:             for (int y = 0; y < height; y++)",
          "642:                 alpha.getSamples(0, y, width, 1, 0, samples);",
          "643:                 if (!isSoft)",
          "645:                     for (int x = 0; x < width; x++)",
          "647:                         samples[x] ^= -1;",
          "650:                 raster.setSamples(0, y, width, 1, 3, samples);",
          "651:             }",
          "652:         }",
          "653:         else",
          "654:         {",
          "655:             final int[] alphas = new int[width];",
          "656:             final int[] pixels = new int[4 * width];",
          "667:             final int fraction = 15;",
          "668:             final int factor = 255 << fraction;",
          "669:             final int m0 = Math.round(factor * matte[0]) * 255;",
          "670:             final int m1 = Math.round(factor * matte[1]) * 255;",
          "671:             final int m2 = Math.round(factor * matte[2]) * 255;",
          "672:             final int m0h = m0 / 255 + (1 << fraction - 1);",
          "673:             final int m1h = m1 / 255 + (1 << fraction - 1);",
          "674:             final int m2h = m2 / 255 + (1 << fraction - 1);",
          "675:             for (int y = 0; y < height; y++)",
          "676:             {",
          "677:                 raster.getPixels(0, y, width, 1, pixels);",
          "678:                 alpha.getSamples(0, y, width, 1, 0, alphas);",
          "679:                 for (int x = 0, offset = 0; x < width; x++)",
          "681:                     int a = alphas[x];",
          "682:                     if (a == 0)",
          "683:                     {",
          "684:                         offset += 3;",
          "685:                     }",
          "686:                     else",
          "687:                     {",
          "688:                         pixels[offset] = clampColor(((pixels[offset++] * factor - m0) / a + m0h) >> fraction);",
          "689:                         pixels[offset] = clampColor(((pixels[offset++] * factor - m1) / a + m1h) >> fraction);",
          "690:                         pixels[offset] = clampColor(((pixels[offset++] * factor - m2) / a + m2h) >> fraction);",
          "691:                     }",
          "692:                     pixels[offset++] = a;",
          "694:                 raster.setPixels(0, y, width, 1, pixels);",
          "698:         return image;",
          "701:     private static int clampColor(int color)",
          "703:         return color < 0 ? 0 : color > 255 ? 255 : color;",
          "709:     private static BufferedImage scaleImage(BufferedImage image, int width, int height, int type, boolean interpolate)",
          "711:         final int imgWidth = image.getWidth(), imgHeight = image.getHeight();",
          "713:         boolean largeScale = width * height > 3000 * 3000 * (type == BufferedImage.TYPE_BYTE_GRAY ? 3 : 1);",
          "714:         interpolate &= imgWidth != width || imgHeight != height;",
          "717:         if (interpolate)",
          "718:         {",
          "719:             AffineTransform af = AffineTransform.getScaleInstance((double) width / imgWidth, (double) height / imgHeight);",
          "720:             AffineTransformOp afo = new AffineTransformOp(af, largeScale ? AffineTransformOp.TYPE_BILINEAR : AffineTransformOp.TYPE_BICUBIC);",
          "721:             try",
          "722:             {",
          "723:                 afo.filter(image, image2);",
          "724:                 return image2;",
          "725:             }",
          "726:             catch (ImagingOpException e)",
          "727:             {",
          "728:                 LOG.warn(e.getMessage(), e);",
          "729:             }",
          "730:         }",
          "732:         if (interpolate)",
          "735:                     largeScale ? RenderingHints.VALUE_INTERPOLATION_BILINEAR : RenderingHints.VALUE_INTERPOLATION_BICUBIC);",
          "737:                     largeScale ? RenderingHints.VALUE_RENDER_DEFAULT : RenderingHints.VALUE_RENDER_QUALITY);",
          "739:         g.drawImage(image, 0, 0, width, height, 0, 0, imgWidth, imgHeight, null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "285d664d81aaf39dd65c29910ceb3bb53b409240",
      "candidate_info": {
        "commit_hash": "285d664d81aaf39dd65c29910ceb3bb53b409240",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/285d664d81aaf39dd65c29910ceb3bb53b409240",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java"
        ],
        "message": "PDFBOX-4977: provide format action support capability for AcroForm field\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882237 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "36: import org.apache.pdfbox.pdmodel.font.PDFont;",
          "37: import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
          "38: import org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions;",
          "39: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "40: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     public void setAppearanceValue(String apValue) throws IOException",
          "165:     {",
          "",
          "[Removed Lines]",
          "166:         value = apValue;",
          "",
          "[Added Lines]",
          "167:         value = getFormattedValue(apValue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:                 continue;",
          "196:             }",
          "204:             {",
          "240:             }",
          "243:             defaultAppearance =  acroFormAppearance;",
          "244:         }",
          "245:     }",
          "247:     private static boolean isValidAppearanceStream(PDAppearanceEntry appearance)",
          "248:     {",
          "249:         if (appearance == null)",
          "",
          "[Removed Lines]",
          "198:             PDFormFieldAdditionalActions actions = field.getActions();",
          "202:             if (actions == null || actions.getF() == null ||",
          "203:                 widget.getCOSObject().getDictionaryObject(COSName.AP) != null)",
          "205:                 PDAppearanceDictionary appearanceDict = widget.getAppearance();",
          "206:                 if (appearanceDict == null)",
          "207:                 {",
          "208:                     appearanceDict = new PDAppearanceDictionary();",
          "209:                     widget.setAppearance(appearanceDict);",
          "210:                 }",
          "212:                 PDAppearanceEntry appearance = appearanceDict.getNormalAppearance();",
          "215:                 PDAppearanceStream appearanceStream;",
          "216:                 if (isValidAppearanceStream(appearance))",
          "217:                 {",
          "218:                     appearanceStream = appearance.getAppearanceStream();",
          "219:                 }",
          "220:                 else",
          "221:                 {",
          "222:                     appearanceStream = prepareNormalAppearanceStream(widget);",
          "224:                     appearanceDict.setNormalAppearance(appearanceStream);",
          "226:                 }",
          "234:                 if (widget.getAppearanceCharacteristics() != null || appearanceStream.getContentStream().getLength() == 0)",
          "235:                 {",
          "236:                     initializeAppearanceContent(widget, appearanceStream);",
          "237:                 }",
          "239:                 setAppearanceContent(widget, appearanceStream);",
          "",
          "[Added Lines]",
          "199:             PDAppearanceDictionary appearanceDict = widget.getAppearance();",
          "200:             if (appearanceDict == null)",
          "202:                 appearanceDict = new PDAppearanceDictionary();",
          "203:                 widget.setAppearance(appearanceDict);",
          "204:             }",
          "206:             PDAppearanceEntry appearance = appearanceDict.getNormalAppearance();",
          "209:             PDAppearanceStream appearanceStream;",
          "210:             if (isValidAppearanceStream(appearance))",
          "211:             {",
          "212:                 appearanceStream = appearance.getAppearanceStream();",
          "213:             }",
          "214:             else",
          "215:             {",
          "216:                 appearanceStream = prepareNormalAppearanceStream(widget);",
          "217:                 appearanceDict.setNormalAppearance(appearanceStream);",
          "219:             }",
          "227:             if (widget.getAppearanceCharacteristics() != null || appearanceStream.getContentStream().getLength() == 0)",
          "228:             {",
          "229:                 initializeAppearanceContent(widget, appearanceStream);",
          "232:             setAppearanceContent(widget, appearanceStream);",
          "239:     private String getFormattedValue(String apValue)",
          "240:     {",
          "243:         PDFormFieldAdditionalActions actions = field.getActions();",
          "245:         if (actions != null && actions.getF() != null)",
          "246:         {",
          "247:             if (field.getAcroForm().getScriptingHandler() != null)",
          "248:             {",
          "249:                 ScriptingHandler scriptingHandler = field.getAcroForm().getScriptingHandler();",
          "250:                 return scriptingHandler.format((PDActionJavaScript) field.getActions().getF(), apValue);",
          "251:             }",
          "252:             else",
          "253:             {",
          "254:                 LOG.info(\"Field contains a formatting action but no SriptingHandler has been supplied - formatted value might be incorrect\");",
          "255:                 return apValue;",
          "256:             }",
          "257:         }",
          "258:         return apValue;",
          "259:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     private Map<String, PDField> fieldCache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     private ScriptingHandler scriptingHandler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712:     {",
          "713:         dictionary.setFlag(COSName.SIG_FLAGS, FLAG_APPEND_ONLY, appendOnly);",
          "714:     }",
          "716:     private Matrix resolveTransformationMatrix(PDAnnotation annotation, PDAppearanceStream appearanceStream)",
          "717:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:     public ScriptingHandler getScriptingHandler()",
          "724:     {",
          "725:         return scriptingHandler;",
          "726:     }",
          "733:     public void setScriptingHandler(ScriptingHandler scriptingHandler)",
          "734:     {",
          "735:         this.scriptingHandler = scriptingHandler;",
          "736:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/ScriptingHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.pdfbox.pdmodel.interactive.form;",
          "18: import org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript;",
          "20: public interface ScriptingHandler {",
          "28:     public String keyboard(PDActionJavaScript javaScriptAction, String value);",
          "37:     public String format(PDActionJavaScript javaScriptAction, String value);",
          "46:     public boolean validate(PDActionJavaScript javaScriptAction, String value);",
          "55:     public String calculate(PDActionJavaScript javaScriptAction, String value);",
          "56: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f61383887102bbf27291e0f37d0e1a9d095f6bb",
      "candidate_info": {
        "commit_hash": "8f61383887102bbf27291e0f37d0e1a9d095f6bb",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8f61383887102bbf27291e0f37d0e1a9d095f6bb",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892108 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java -> fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:             first.setLocation(first.getX() - current.getX(), first.getY() - current.getY());",
          "391:             flexPoints.clear();",
          "392:         }",
          "",
          "[Removed Lines]",
          "383:             rrcurveTo(flexPoints.get(1).getX(), flexPoints.get(1).getY(),",
          "384:                       flexPoints.get(2).getX(), flexPoints.get(2).getY(),",
          "385:                       flexPoints.get(3).getX(), flexPoints.get(3).getY());",
          "387:             rrcurveTo(flexPoints.get(4).getX(), flexPoints.get(4).getY(),",
          "388:                       flexPoints.get(5).getX(), flexPoints.get(5).getY(),",
          "389:                       flexPoints.get(6).getX(), flexPoints.get(6).getY());",
          "",
          "[Added Lines]",
          "383:             Point2D.Float p1 = flexPoints.get(1);",
          "384:             Point2D.Float p2 = flexPoints.get(2);",
          "385:             Point2D.Float p3 = flexPoints.get(3);",
          "386:             rrcurveTo(p1.getX(), p1.getY(), p2.getX(), p2.getY(), p3.getX(), p3.getY());",
          "388:             Point2D.Float p4 = flexPoints.get(4);",
          "389:             Point2D.Float p5 = flexPoints.get(5);",
          "390:             Point2D.Float p6 = flexPoints.get(6);",
          "391:             rrcurveTo(p4.getX(), p4.getY(), p5.getX(), p5.getY(), p6.getX(), p6.getY());",
          "",
          "---------------"
        ]
      }
    }
  ]
}