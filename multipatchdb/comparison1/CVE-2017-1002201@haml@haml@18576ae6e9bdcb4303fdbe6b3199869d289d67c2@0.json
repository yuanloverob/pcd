{
  "cve_id": "CVE-2017-1002201",
  "cve_desc": "In haml versions prior to version 5.0.0.beta.2, when using user input to perform tasks on the server, characters like < > \" ' must be escaped properly. In this case, the ' character was missed. An attacker can manipulate the input to introduce additional attributes, potentially executing code.",
  "repo": "haml/haml",
  "patch_hash": "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
  "patch_info": {
    "commit_hash": "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
    "repo": "haml/haml",
    "commit_url": "https://github.com/haml/haml/commit/18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
    "files": [
      "lib/haml/helpers.rb",
      "test/engine_test.rb",
      "test/pretty_engine_test.rb",
      "test/pretty_results/just_stuff.xhtml",
      "test/results/just_stuff.xhtml"
    ],
    "message": "Always escape `'` in Haml::Helpers.#html_escape.\n\nIn some tests, `attr_wrapper` is changed to be ignored.\n\nI'll split its fix to other commis because not Haml::Helpers but\nHaml::AttributeBuilder is responsible for that.",
    "before_after_code_files": [
      "lib/haml/helpers.rb||lib/haml/helpers.rb",
      "test/engine_test.rb||test/engine_test.rb",
      "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
      "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
      "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
    ]
  },
  "patch_diff": {
    "lib/haml/helpers.rb||lib/haml/helpers.rb": [
      "File: lib/haml/helpers.rb -> lib/haml/helpers.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "596:     # Characters that need to be escaped to HTML entities from user input",
      "597:     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#039;' }",
      "601:     # Returns a copy of `text` with ampersands, angle brackets and quotes",
      "602:     # escaped into HTML entities.",
      "",
      "[Removed Lines]",
      "599:     HTML_ESCAPE_REGEX = /[\\\"><&]/",
      "",
      "[Added Lines]",
      "599:     HTML_ESCAPE_REGEX = /['\"><&]/",
      "",
      "---------------"
    ],
    "test/engine_test.rb||test/engine_test.rb": [
      "File: test/engine_test.rb -> test/engine_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1127:   def test_attr_wrapper",
      "1128:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
      "1129:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
      "1132:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
      "1133:   end",
      "",
      "[Removed Lines]",
      "1130:     assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1131:     assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "[Added Lines]",
      "1130:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1131:     assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1534:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
      "1535:         :hyphenate_data_attrs => false))",
      "1538:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
      "1539:         :hyphenate_data_attrs => false)) #'",
      "1540:   end",
      "",
      "[Removed Lines]",
      "1537:     assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "[Added Lines]",
      "1537:     assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1698:   def test_new_attribute_parsing",
      "1699:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
      "1700:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
      "1702:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
      "1704:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
      "1705:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
      "1706:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
      "",
      "[Removed Lines]",
      "1701:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1703:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "[Added Lines]",
      "1701:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1703:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1713:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
      "1714:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
      "1719:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
      "1720:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
      "",
      "[Removed Lines]",
      "1716:     assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1717:     assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "[Added Lines]",
      "1716:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1717:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "---------------"
    ],
    "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
      "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1129:   def test_attr_wrapper",
      "1130:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
      "1131:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
      "1134:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
      "1135:   end",
      "",
      "[Removed Lines]",
      "1132:     assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1133:     assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "[Added Lines]",
      "1132:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1133:     assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1527:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
      "1528:         :hyphenate_data_attrs => false))",
      "1531:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
      "1532:         :hyphenate_data_attrs => false)) #'",
      "1533:   end",
      "",
      "[Removed Lines]",
      "1530:     assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "[Added Lines]",
      "1530:     assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1691:   def test_new_attribute_parsing",
      "1692:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
      "1693:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
      "1695:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
      "1697:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
      "1698:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
      "1699:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
      "",
      "[Removed Lines]",
      "1694:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1696:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "[Added Lines]",
      "1694:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1696:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1706:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
      "1707:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
      "1712:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
      "1713:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
      "",
      "[Removed Lines]",
      "1709:     assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1710:     assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "[Added Lines]",
      "1709:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1710:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "---------------"
    ],
    "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml": [
      "File: test/pretty_results/just_stuff.xhtml -> test/pretty_results/just_stuff.xhtml",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
      "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
      "10: Embedded? false!",
      "11: Embedded? true!",
      "12: Embedded? true!",
      "",
      "[Removed Lines]",
      "9: <strong apos=\"Foo's bar!\">Boo!</strong>",
      "",
      "[Added Lines]",
      "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61: <p class='article quux qux' id='article_1'>Blump</p>",
      "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
      "63: Woah inner quotes",
      "65: <p class='dynamic_self_closing' dyn='3' />",
      "66: <body>",
      "67:   hello",
      "",
      "[Removed Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes=\"single '\"></p>",
      "",
      "[Added Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
      "",
      "---------------"
    ],
    "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml": [
      "File: test/results/just_stuff.xhtml -> test/results/just_stuff.xhtml",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
      "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
      "10: Embedded? false!",
      "11: Embedded? true!",
      "12: Embedded? true!",
      "",
      "[Removed Lines]",
      "9: <strong apos=\"Foo's bar!\">Boo!</strong>",
      "",
      "[Added Lines]",
      "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61: <p class='article quux qux' id='article_1'>Blump</p>",
      "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
      "63: Woah inner quotes",
      "65: <p class='dynamic_self_closing' dyn='3' />",
      "66: <body>",
      "67: hello",
      "",
      "[Removed Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes=\"single '\"></p>",
      "",
      "[Added Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34d9ff15b2e5403d1800578c93f4b979f0c609d9",
      "candidate_info": {
        "commit_hash": "34d9ff15b2e5403d1800578c93f4b979f0c609d9",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/34d9ff15b2e5403d1800578c93f4b979f0c609d9",
        "files": [
          "test/engine_test.rb",
          "test/pretty_engine_test.rb"
        ],
        "message": "Drop support for escape_attrs: :always\n\nwhich is not handled and documented.",
        "before_after_code_files": [
          "test/engine_test.rb||test/engine_test.rb",
          "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/haml/haml/pull/902"
        ],
        "olp_code_files": {
          "patch": [
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
          ],
          "candidate": [
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "test/engine_test.rb||test/engine_test.rb": [
          "File: test/engine_test.rb -> test/engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:   end",
          "695:   def test_escape_attrs_always",
          "697: <div class='&quot;&amp;lt;&amp;gt;&amp;amp;&quot;' id='foo'>",
          "698: bar",
          "699: </div>",
          "",
          "[Removed Lines]",
          "696:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => :always))",
          "",
          "[Added Lines]",
          "696:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => true))",
          "",
          "---------------"
        ],
        "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
          "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:   end",
          "697:   def test_escape_attrs_always",
          "699: <div class='&quot;&amp;lt;&amp;gt;&amp;amp;&quot;' id='foo'>",
          "700:   bar",
          "701: </div>",
          "",
          "[Removed Lines]",
          "698:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => :always))",
          "",
          "[Added Lines]",
          "698:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => true))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1dbf817e7bd03f825ad4da943c3b7d80053c63d",
      "candidate_info": {
        "commit_hash": "e1dbf817e7bd03f825ad4da943c3b7d80053c63d",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/e1dbf817e7bd03f825ad4da943c3b7d80053c63d",
        "files": [
          "lib/haml/helpers.rb"
        ],
        "message": "Escape `'` in Haml::Helpers#escape_once too\n\nlike Haml::Helpers#html_escape.",
        "before_after_code_files": [
          "lib/haml/helpers.rb||lib/haml/helpers.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/haml/haml/pull/902"
        ],
        "olp_code_files": {
          "patch": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb"
          ],
          "candidate": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/haml/helpers.rb||lib/haml/helpers.rb": [
          "File: lib/haml/helpers.rb -> lib/haml/helpers.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:       text.gsub(HTML_ESCAPE_REGEX, HTML_ESCAPE)",
          "613:     end",
          "617:     # Escapes HTML entities in `text`, but without escaping an ampersand",
          "618:     # that is already part of an escaped entity.",
          "",
          "[Removed Lines]",
          "615:     HTML_ESCAPE_ONCE_REGEX = /[\\\"><]|&(?!(?:[a-zA-Z]+|#(?:\\d+|[xX][0-9a-fA-F]+));)/",
          "",
          "[Added Lines]",
          "615:     HTML_ESCAPE_ONCE_REGEX = /['\"><]|&(?!(?:[a-zA-Z]+|#(?:\\d+|[xX][0-9a-fA-F]+));)/",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9911547800743f7604fd17cf3785701e2faa7369",
      "candidate_info": {
        "commit_hash": "9911547800743f7604fd17cf3785701e2faa7369",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/9911547800743f7604fd17cf3785701e2faa7369",
        "files": [
          "lib/haml/helpers.rb"
        ],
        "message": "Optimize HTML escape using ERB::Util.html_escape\n\nSee https://github.com/ruby/ruby/pull/1164",
        "before_after_code_files": [
          "lib/haml/helpers.rb||lib/haml/helpers.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/haml/haml/pull/902"
        ],
        "olp_code_files": {
          "patch": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb"
          ],
          "candidate": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/haml/helpers.rb||lib/haml/helpers.rb": [
          "File: lib/haml/helpers.rb -> lib/haml/helpers.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module Haml",
          "2:   # This module contains various helpful methods to make it easier to do various tasks.",
          "3:   # {Haml::Helpers} is automatically included in the context",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: require 'erb'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:     # @param text [String] The string to sanitize",
          "609:     # @return [String] The sanitized string",
          "610:     def html_escape(text)",
          "613:     end",
          "615:     HTML_ESCAPE_ONCE_REGEX = /['\"><]|&(?!(?:[a-zA-Z]+|#(?:\\d+|[xX][0-9a-fA-F]+));)/",
          "",
          "[Removed Lines]",
          "611:       text = text.to_s",
          "612:       text.gsub(HTML_ESCAPE_REGEX, HTML_ESCAPE)",
          "",
          "[Added Lines]",
          "613:       ERB::Util.html_escape(text)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b1976ab1dc3d7b0d3219cd7e9b68a5402c45b01",
      "candidate_info": {
        "commit_hash": "9b1976ab1dc3d7b0d3219cd7e9b68a5402c45b01",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/9b1976ab1dc3d7b0d3219cd7e9b68a5402c45b01",
        "files": [
          "test/pretty_engine_test.rb"
        ],
        "message": "Duplicate tests for ugly mode",
        "before_after_code_files": [
          "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
          ],
          "candidate": [
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
          "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: require 'test_helper'",
          "4: class PrettyEngineTest < Haml::TestCase",
          "5:   # A map of erroneous Haml documents to the error messages they should produce.",
          "6:   # The error messages may be arrays;",
          "7:   # if so, the second element should be the line number that should be reported for the error.",
          "8:   # If this isn't provided, the tests will assume the line number should be the last line of the document.",
          "9:   EXCEPTION_MAP = {",
          "10:     \"!!!\\n  a\"                                             => error(:illegal_nesting_header),",
          "11:     \"a\\n  b\"                                               => error(:illegal_nesting_plain),",
          "12:     \"/ a\\n  b\"                                             => error(:illegal_nesting_content),",
          "13:     \"% a\"                                                  => error(:invalid_tag, '% a'),",
          "14:     \"%p a\\n  b\"                                            => error(:illegal_nesting_line, 'p'),",
          "15:     \"%p=\"                                                  => error(:no_ruby_code, '='),",
          "16:     \"%p~\"                                                  => error(:no_ruby_code, '~'),",
          "17:     \"~\"                                                    => error(:no_ruby_code, '~'),",
          "18:     \"=\"                                                    => error(:no_ruby_code, '='),",
          "19:     \"%p/\\n  a\"                                             => error(:illegal_nesting_self_closing),",
          "20:     \":a\\n  b\"                                              => [error(:filter_not_defined, 'a'), 1],",
          "21:     \":a= b\"                                                => error(:invalid_filter_name, 'a= b'),",
          "22:     \".\"                                                    => error(:illegal_element),",
          "23:     \".#\"                                                   => error(:illegal_element),",
          "24:     \".{} a\"                                                => error(:illegal_element),",
          "25:     \".() a\"                                                => error(:illegal_element),",
          "26:     \".= a\"                                                 => error(:illegal_element),",
          "27:     \"%p..a\"                                                => error(:illegal_element),",
          "28:     \"%a/ b\"                                                => error(:self_closing_content),",
          "29:     \" %p foo\"                                              => error(:indenting_at_start),",
          "30:     \"  %p foo\"                                             => error(:indenting_at_start),",
          "31:     \"- end\"                                                => error(:no_end),",
          "32:     \"%p{:a => 'b',\\n:c => 'd'}/ e\"                         => [error(:self_closing_content), 2],",
          "33:     \"%p{:a => 'b',\\n:c => 'd'}=\"                           => [error(:no_ruby_code, '='), 2],",
          "34:     \"%p.{:a => 'b',\\n:c => 'd'} e\"                         => [error(:illegal_element), 1],",
          "35:     \"%p{:a => 'b',\\n:c => 'd',\\n:e => 'f'}\\n%p/ a\"         => [error(:self_closing_content), 4],",
          "36:     \"%p{:a => 'b',\\n:c => 'd',\\n:e => 'f'}\\n- raise 'foo'\" => [\"foo\", 4],",
          "37:     \"%p{:a => 'b',\\n:c => raise('foo'),\\n:e => 'f'}\"       => [\"foo\", 2],",
          "38:     \"%p{:a => 'b',\\n:c => 'd',\\n:e => raise('foo')}\"       => [\"foo\", 3],",
          "39:     \" \\n\\t\\n %p foo\"                                       => [error(:indenting_at_start), 3],",
          "40:     \"\\n\\n %p foo\"                                          => [error(:indenting_at_start), 3],",
          "41:     \"%p\\n  foo\\n foo\"                                      => [error(:inconsistent_indentation, \"1 space\", \"2 spaces\"), 3],",
          "42:     \"%p\\n  foo\\n%p\\n foo\"                                  => [error(:inconsistent_indentation, \"1 space\", \"2 spaces\"), 4],",
          "43:     \"%p\\n\\t\\tfoo\\n\\tfoo\"                                   => [error(:inconsistent_indentation, \"1 tab\", \"2 tabs\"), 3],",
          "44:     \"%p\\n  foo\\n   foo\"                                    => [error(:inconsistent_indentation, \"3 spaces\", \"2 spaces\"), 3],",
          "45:     \"%p\\n  foo\\n  %p\\n   bar\"                              => [error(:inconsistent_indentation, \"3 spaces\", \"2 spaces\"), 4],",
          "46:     \"%p\\n  :plain\\n     bar\\n   \\t  baz\"                   => [error(:inconsistent_indentation, '\"   \\t  \"', \"2 spaces\"), 4],",
          "47:     \"%p\\n  foo\\n%p\\n    bar\"                               => [error(:deeper_indenting, 2), 4],",
          "48:     \"%p\\n  foo\\n  %p\\n        bar\"                         => [error(:deeper_indenting, 3), 4],",
          "49:     \"%p\\n \\tfoo\"                                           => [error(:cant_use_tabs_and_spaces), 2],",
          "50:     \"%p(\"                                                  => error(:invalid_attribute_list, '\"(\"'),",
          "51:     \"%p(foo=)\"                                             => error(:invalid_attribute_list, '\"(foo=)\"'),",
          "52:     \"%p(foo 'bar')\"                                        => error(:invalid_attribute_list, '\"(foo \\'bar\\')\"'),",
          "53:     \"%p(foo=\\nbar)\"                                        => [error(:invalid_attribute_list, '\"(foo=\"'), 1],",
          "54:     \"%p(foo 'bar'\\nbaz='bang')\"                            => [error(:invalid_attribute_list, '\"(foo \\'bar\\'\"'), 1],",
          "55:     \"%p(foo='bar'\\nbaz 'bang'\\nbip='bop')\"                 => [error(:invalid_attribute_list, '\"(foo=\\'bar\\' baz \\'bang\\'\"'), 2],",
          "56:     \"%p{'foo' => 'bar' 'bar' => 'baz'}\"                    => :compile,",
          "57:     \"%p{:foo => }\"                                         => :compile,",
          "58:     \"%p{=> 'bar'}\"                                         => :compile,",
          "59:     \"%p{'foo => 'bar'}\"                                    => :compile,",
          "60:     \"%p{:foo => 'bar}\"                                     => :compile,",
          "61:     \"%p{:foo => 'bar\\\"}\"                                   => :compile,",
          "62:     # Regression tests",
          "63:     \"foo\\n\\n\\n  bar\"                                       => [error(:illegal_nesting_plain), 4],",
          "64:     \"%p/\\n\\n  bar\"                                         => [error(:illegal_nesting_self_closing), 3],",
          "65:     \"%p foo\\n\\n  bar\"                                      => [error(:illegal_nesting_line, 'p'), 3],",
          "66:     \"/ foo\\n\\n  bar\"                                       => [error(:illegal_nesting_content), 3],",
          "67:     \"!!!\\n\\n  bar\"                                         => [error(:illegal_nesting_header), 3],",
          "68:     \"- raise 'foo'\\n\\n\\n\\nbar\"                             => [\"foo\", 1],",
          "69:     \"= 'foo'\\n-raise 'foo'\"                                => [\"foo\", 2],",
          "70:     \"\\n\\n\\n- raise 'foo'\"                                  => [\"foo\", 4],",
          "71:     \"%p foo |\\n   bar |\\n   baz |\\nbop\\n- raise 'foo'\"     => [\"foo\", 5],",
          "72:     \"foo\\n:ruby\\n  1\\n  2\\n  3\\n- raise 'foo'\"             => [\"foo\", 6],",
          "73:     \"foo\\n:erb\\n  1\\n  2\\n  3\\n- raise 'foo'\"              => [\"foo\", 6],",
          "74:     \"foo\\n:plain\\n  1\\n  2\\n  3\\n- raise 'foo'\"            => [\"foo\", 6],",
          "75:     \"foo\\n:plain\\n  1\\n  2\\n  3\\n4\\n- raise 'foo'\"         => [\"foo\", 7],",
          "76:     \"foo\\n:plain\\n  1\\n  2\\n  3\\#{''}\\n- raise 'foo'\"      => [\"foo\", 6],",
          "77:     \"foo\\n:plain\\n  1\\n  2\\n  3\\#{''}\\n4\\n- raise 'foo'\"   => [\"foo\", 7],",
          "78:     \"foo\\n:plain\\n  1\\n  2\\n  \\#{raise 'foo'}\"             => [\"foo\", 5],",
          "79:     \"= raise 'foo'\\nfoo\\nbar\\nbaz\\nbang\"                   => [\"foo\", 1],",
          "80:     \"- case 1\\n\\n- when 1\\n  - raise 'foo'\"                => [\"foo\", 4],",
          "81:   }",
          "83:   User = Struct.new('User', :id)",
          "84:   class CustomHamlClass < Struct.new(:id)",
          "85:     def haml_object_ref",
          "86:       \"my_thing\"",
          "87:     end",
          "88:   end",
          "89:   PrettyCpkRecord = Struct.new('PrettyCpkRecord', :id) do",
          "90:     def to_key",
          "91:       [*self.id] unless id.nil?",
          "92:     end",
          "93:   end",
          "95:   def use_test_tracing(options)",
          "96:     unless options[:filename]",
          "97:       # use caller method name as fake filename. useful for debugging",
          "98:       i = -1",
          "99:       caller[i+=1] =~ /`(.+?)'/ until $1 and $1.index('test_') == 0",
          "100:       options[:filename] = \"(#{$1})\"",
          "101:     end",
          "102:     options",
          "103:   end",
          "105:   def render(text, options = {}, &block)",
          "106:     options = use_test_tracing(options)",
          "107:     super",
          "108:   end",
          "110:   def engine(text, options = {})",
          "111:     options = use_test_tracing(options)",
          "112:     Haml::Engine.new(text, options)",
          "113:   end",
          "115:   def setup",
          "116:     @old_default_internal = Encoding.default_internal",
          "117:     silence_warnings{Encoding.default_internal = nil}",
          "118:   end",
          "120:   def teardown",
          "121:     silence_warnings{Encoding.default_internal = @old_default_internal}",
          "122:   end",
          "124:   def test_empty_render",
          "125:     assert_equal \"\", render(\"\")",
          "126:   end",
          "128:   def test_flexible_tabulation",
          "129:     assert_equal(\"<p>\\n  foo\\n</p>\\n<q>\\n  bar\\n  <a>\\n    baz\\n  </a>\\n</q>\\n\",",
          "130:                  render(\"%p\\n foo\\n%q\\n bar\\n %a\\n  baz\"))",
          "131:     assert_equal(\"<p>\\n  foo\\n</p>\\n<q>\\n  bar\\n  <a>\\n    baz\\n  </a>\\n</q>\\n\",",
          "132:                  render(\"%p\\n\\tfoo\\n%q\\n\\tbar\\n\\t%a\\n\\t\\tbaz\"))",
          "133:     assert_equal(\"<p>\\n      \\t \\t bar\\n   baz\\n</p>\\n\",",
          "134:                  render(\"%p\\n  :plain\\n        \\t \\t bar\\n     baz\"))",
          "135:   end",
          "137:   def test_empty_render_should_remain_empty",
          "138:     assert_equal('', render(''))",
          "139:   end",
          "141:   def test_attributes_should_render_correctly",
          "142:     assert_equal(\"<div class='atlantis' style='ugly'></div>\", render(\".atlantis{:style => 'ugly'}\").chomp)",
          "143:   end",
          "145:   def test_css_id_as_attribute_should_be_appended_with_underscore",
          "146:     assert_equal(\"<div id='my_id_1'></div>\", render(\"#my_id{:id => '1'}\").chomp)",
          "147:     assert_equal(\"<div id='my_id_1'></div>\", render(\"#my_id{:id => 1}\").chomp)",
          "148:   end",
          "150:   def test_ruby_code_should_work_inside_attributes",
          "151:     assert_equal(\"<p class='3'>foo</p>\", render(\"%p{:class => 1+2} foo\").chomp)",
          "152:   end",
          "154:   def test_class_attr_with_array",
          "155:     assert_equal(\"<p class='a b'>foo</p>\\n\", render(\"%p{:class => %w[a b]} foo\")) # basic",
          "156:     assert_equal(\"<p class='a b css'>foo</p>\\n\", render(\"%p.css{:class => %w[a b]} foo\")) # merge with css",
          "157:     assert_equal(\"<p class='b css'>foo</p>\\n\", render(\"%p.css{:class => %w[css b]} foo\")) # merge uniquely",
          "158:     assert_equal(\"<p class='a b c d'>foo</p>\\n\", render(\"%p{:class => [%w[a b], %w[c d]]} foo\")) # flatten",
          "159:     assert_equal(\"<p class='a b'>foo</p>\\n\", render(\"%p{:class => [:a, :b] } foo\")) # stringify",
          "160:     assert_equal(\"<p>foo</p>\\n\", render(\"%p{:class => [nil, false] } foo\")) # strip falsey",
          "161:     assert_equal(\"<p class='a'>foo</p>\\n\", render(\"%p{:class => :a} foo\")) # single stringify",
          "162:     assert_equal(\"<p>foo</p>\\n\", render(\"%p{:class => false} foo\")) # single falsey",
          "163:     assert_equal(\"<p class='a b html'>foo</p>\\n\", render(\"%p(class='html'){:class => %w[a b]} foo\")) # html attrs",
          "164:   end",
          "166:   def test_id_attr_with_array",
          "167:     assert_equal(\"<p id='a_b'>foo</p>\\n\", render(\"%p{:id => %w[a b]} foo\")) # basic",
          "168:     assert_equal(\"<p id='css_a_b'>foo</p>\\n\", render(\"%p#css{:id => %w[a b]} foo\")) # merge with css",
          "169:     assert_equal(\"<p id='a_b_c_d'>foo</p>\\n\", render(\"%p{:id => [%w[a b], %w[c d]]} foo\")) # flatten",
          "170:     assert_equal(\"<p id='a_b'>foo</p>\\n\", render(\"%p{:id => [:a, :b] } foo\")) # stringify",
          "171:     assert_equal(\"<p>foo</p>\\n\", render(\"%p{:id => [nil, false] } foo\")) # strip falsey",
          "172:     assert_equal(\"<p id='a'>foo</p>\\n\", render(\"%p{:id => :a} foo\")) # single stringify",
          "173:     assert_equal(\"<p>foo</p>\\n\", render(\"%p{:id => false} foo\")) # single falsey",
          "174:     assert_equal(\"<p id='html_a_b'>foo</p>\\n\", render(\"%p(id='html'){:id => %w[a b]} foo\")) # html attrs",
          "175:   end",
          "177:   def test_colon_in_class_attr",
          "178:     assert_equal(\"<p class='foo:bar'>\\n\", render(\"%p.foo:bar/\"))",
          "179:   end",
          "181:   def test_colon_in_id_attr",
          "182:     assert_equal(\"<p id='foo:bar'>\\n\", render(\"%p#foo:bar/\"))",
          "183:   end",
          "185:   def test_dynamic_attributes_with_no_content",
          "186:     assert_equal(<<HTML, render(<<HAML))",
          "187: <p>",
          "188:   <a href='http://haml.info'></a>",
          "189: </p>",
          "190: HTML",
          "191: %p",
          "192:   %a{:href => \"http://\" + \"haml.info\"}",
          "193: HAML",
          "194:   end",
          "196:   def test_attributes_with_to_s",
          "197:     assert_equal(<<HTML, render(<<HAML))",
          "198: <p id='foo_2'></p>",
          "199: <p class='2 foo'></p>",
          "200: <p blaz='2'></p>",
          "201: <p 2='2'></p>",
          "202: HTML",
          "203: %p#foo{:id => 1+1}",
          "204: %p.foo{:class => 1+1}",
          "205: %p{:blaz => 1+1}",
          "206: %p{(1+1) => 1+1}",
          "207: HAML",
          "208:   end",
          "210:   def test_nil_should_render_empty_tag",
          "211:     assert_equal(\"<div class='no_attributes'></div>\",",
          "212:                  render(\".no_attributes{:nil => nil}\").chomp)",
          "213:   end",
          "215:   def test_strings_should_get_stripped_inside_tags",
          "216:     assert_equal(\"<div class='stripped'>This should have no spaces in front of it</div>\",",
          "217:                  render(\".stripped    This should have no spaces in front of it\").chomp)",
          "218:   end",
          "220:   def test_one_liner_should_be_one_line",
          "221:     assert_equal(\"<p>Hello</p>\", render('%p Hello').chomp)",
          "222:   end",
          "224:   def test_one_liner_with_newline_shouldnt_be_one_line",
          "225:     assert_equal(\"<p>\\n  foo\\n  bar\\n</p>\", render('%p= \"foo\\nbar\"').chomp)",
          "226:   end",
          "228:   def test_multi_render",
          "229:     engine = engine(\"%strong Hi there!\")",
          "230:     assert_equal(\"<strong>Hi there!</strong>\\n\", engine.to_html)",
          "231:     assert_equal(\"<strong>Hi there!</strong>\\n\", engine.to_html)",
          "232:     assert_equal(\"<strong>Hi there!</strong>\\n\", engine.to_html)",
          "233:   end",
          "235:   def test_interpolation",
          "236:     assert_equal(\"<p>Hello World</p>\\n\", render('%p Hello #{who}', locals: {who: 'World'}, escape_html: false))",
          "237:     assert_equal(\"<p>\\n  Hello World\\n</p>\\n\", render(\"%p\\n  Hello \\#{who}\", locals: {who: 'World'}, escape_html: false))",
          "238:     assert_equal(\"<p>Hello World</p>\\n\", render('%p Hello #{who}', locals: {who: 'World'}, escape_html: true))",
          "239:     assert_equal(\"<p>\\n  Hello World\\n</p>\\n\", render(\"%p\\n  Hello \\#{who}\", locals: {who: 'World'}, escape_html: true))",
          "240:   end",
          "242:   def test_interpolation_with_instance_var",
          "243:     scope = Object.new",
          "244:     scope.instance_variable_set(:@who, 'World')",
          "246:     assert_equal(\"<p>Hello World</p>\\n\", render('%p Hello #@who', scope: scope, escape_html: false))",
          "247:     assert_equal(\"<p>\\n  Hello World\\n</p>\\n\", render(\"%p\\n  Hello \\#@who\", scope: scope, escape_html: false))",
          "248:     assert_equal(\"<p>Hello World</p>\\n\", render('%p Hello #@who', scope: scope, escape_html: true))",
          "249:     assert_equal(\"<p>\\n  Hello World\\n</p>\\n\", render(\"%p\\n  Hello \\#@who\", scope: scope, escape_html: true))",
          "250:   end",
          "252:   def test_interpolation_with_global",
          "253:     $global_var_for_testing = 'World'",
          "255:     assert_equal(\"<p>Hello World</p>\\n\", render('%p Hello #$global_var_for_testing', escape_html: false))",
          "256:     assert_equal(\"<p>\\n  Hello World\\n</p>\\n\", render(\"%p\\n  Hello \\#$global_var_for_testing\", escape_html: false))",
          "257:     assert_equal(\"<p>Hello World</p>\\n\", render('%p Hello #$global_var_for_testing', escape_html: true))",
          "258:     assert_equal(\"<p>\\n  Hello World\\n</p>\\n\", render(\"%p\\n  Hello \\#$global_var_for_testing\", escape_html: true))",
          "259:   ensure",
          "260:     $global_var_for_testing = nil",
          "261:   end",
          "263:   def test_interpolation_in_the_middle_of_a_string",
          "264:     assert_equal(\"\\\"title 'Title'. \\\"\\n\",",
          "265:                  render(\"\\\"title '\\#{\\\"Title\\\"}'. \\\"\"))",
          "266:   end",
          "268:   def test_interpolation_with_instance_var_in_the_middle_of_a_string",
          "269:     scope = Object.new",
          "270:     scope.instance_variable_set(:@title, 'Title')",
          "272:     assert_equal(\"\\\"title 'Title'. \\\"\\n\",",
          "273:                  render(\"\\\"title '\\#@title'. \\\"\",  :scope => scope))",
          "274:   end",
          "276:   def test_interpolation_with_global_in_the_middle_of_a_string",
          "277:     $global_var_for_testing = 'Title'",
          "279:     assert_equal(\"\\\"title 'Title'. \\\"\\n\",",
          "280:                  render(\"\\\"title '\\#$global_var_for_testing'. \\\"\"))",
          "281:   ensure",
          "282:     $global_var_for_testing = nil",
          "283:   end",
          "285:   def test_interpolation_at_the_beginning_of_a_line",
          "286:     assert_equal(\"<p>2</p>\\n\", render('%p #{1 + 1}'))",
          "287:     assert_equal(\"<p>\\n  2\\n</p>\\n\", render(\"%p\\n  \\#{1 + 1}\"))",
          "288:   end",
          "290:   def test_interpolation_with_instance_var_at_the_beginning_of_a_line",
          "291:     scope = Object.new",
          "292:     scope.instance_variable_set(:@foo, 2)",
          "294:     assert_equal(\"<p>2</p>\\n\", render('%p #@foo', :scope => scope))",
          "295:     assert_equal(\"<p>\\n  2\\n</p>\\n\", render(\"%p\\n  \\#@foo\", :scope => scope))",
          "296:   end",
          "298:   def test_interpolation_with_global_at_the_beginning_of_a_line",
          "299:     $global_var_for_testing = 2",
          "301:     assert_equal(\"<p>2</p>\\n\", render('%p #$global_var_for_testing'))",
          "302:     assert_equal(\"<p>\\n  2\\n</p>\\n\", render(\"%p\\n  \\#$global_var_for_testing\"))",
          "303:   ensure",
          "304:     $global_var_for_testing = nil",
          "305:   end",
          "307:   def test_escaped_interpolation",
          "308:     assert_equal(\"<p>Foo &amp; Bar & Baz</p>\\n\", render('%p& Foo #{\"&\"} Bar & Baz'))",
          "309:   end",
          "311:   def test_nil_tag_value_should_render_as_empty",
          "312:     assert_equal(\"<p></p>\\n\", render(\"%p= nil\"))",
          "313:   end",
          "315:   def test_tag_with_failed_if_should_render_as_empty",
          "316:     assert_equal(\"<p></p>\\n\", render(\"%p= 'Hello' if false\"))",
          "317:   end",
          "319:   def test_static_attributes_with_empty_attr",
          "320:     assert_equal(\"<img alt='' src='/foo.png'>\\n\", render(\"%img{:src => '/foo.png', :alt => ''}\"))",
          "321:   end",
          "323:   def test_dynamic_attributes_with_empty_attr",
          "324:     assert_equal(\"<img alt='' src='/foo.png'>\\n\", render(\"%img{:width => nil, :src => '/foo.png', :alt => String.new}\"))",
          "325:   end",
          "327:   def test_attribute_hash_with_newlines",
          "328:     assert_equal(\"<p a='b' c='d'>foop</p>\\n\", render(\"%p{:a => 'b',\\n   :c => 'd'} foop\"))",
          "329:     assert_equal(\"<p a='b' c='d'>\\n  foop\\n</p>\\n\", render(\"%p{:a => 'b',\\n   :c => 'd'}\\n  foop\"))",
          "330:     assert_equal(\"<p a='b' c='d'>\\n\", render(\"%p{:a => 'b',\\n   :c => 'd'}/\"))",
          "331:     assert_equal(\"<p a='b' c='d' e='f'></p>\\n\", render(\"%p{:a => 'b',\\n   :c => 'd',\\n   :e => 'f'}\"))",
          "332:   end",
          "334:   def test_attr_hashes_not_modified",
          "335:     hash = {:color => 'red'}",
          "336:     assert_equal(<<HTML, render(<<HAML, :locals => {:hash => hash}))",
          "337: <div color='red'></div>",
          "338: <div class='special' color='red'></div>",
          "339: <div color='red'></div>",
          "340: HTML",
          "341: %div{hash}",
          "342: .special{hash}",
          "343: %div{hash}",
          "344: HAML",
          "345:     assert_equal(hash, {:color => 'red'})",
          "346:   end",
          "348:   def test_ugly_semi_prerendered_tags",
          "349:     assert_equal(<<HTML, render(<<HAML, :ugly => true))",
          "350: <p a='2'></p>",
          "351: <p a='2'>foo</p>",
          "352: <p a='2'>",
          "353: <p a='2'>foo</p>",
          "354: <p a='2'>foo",
          "355: bar</p>",
          "356: <p a='2'>foo",
          "357: bar</p>",
          "358: <p a='2'>",
          "359: foo",
          "360: </p>",
          "361: HTML",
          "362: %p{:a => 1 + 1}",
          "363: %p{:a => 1 + 1} foo",
          "364: %p{:a => 1 + 1}/",
          "365: %p{:a => 1 + 1}= \"foo\"",
          "366: %p{:a => 1 + 1}= \"foo\\\\nbar\"",
          "367: %p{:a => 1 + 1}~ \"foo\\\\nbar\"",
          "368: %p{:a => 1 + 1}",
          "369:   foo",
          "370: HAML",
          "371:   end",
          "373:   def test_end_of_file_multiline",
          "374:     assert_equal(\"<p>0</p>\\n<p>1</p>\\n<p>2</p>\\n\", render(\"- for i in (0...3)\\n  %p= |\\n   i |\"))",
          "375:   end",
          "377:   def test_cr_newline",
          "378:     assert_equal(\"<p>foo</p>\\n<p>bar</p>\\n<p>baz</p>\\n<p>boom</p>\\n\", render(\"%p foo\\r%p bar\\r\\n%p baz\\n\\r%p boom\"))",
          "379:   end",
          "381:   def test_textareas",
          "382:     assert_equal(\"<textarea>Foo&#x000A;  bar&#x000A;   baz</textarea>\\n\",",
          "383:                  render('%textarea= \"Foo\\n  bar\\n   baz\"'))",
          "385:     assert_equal(\"<pre>Foo&#x000A;  bar&#x000A;   baz</pre>\\n\",",
          "386:                  render('%pre= \"Foo\\n  bar\\n   baz\"'))",
          "388:     assert_equal(\"<textarea>#{'a' * 100}</textarea>\\n\",",
          "389:                  render(\"%textarea #{'a' * 100}\"))",
          "391:     assert_equal(\"<p>\\n  <textarea>Foo\\n  Bar\\n  Baz</textarea>\\n</p>\\n\", render(<<SOURCE))",
          "392: %p",
          "393:   %textarea",
          "394:     Foo",
          "395:     Bar",
          "396:     Baz",
          "397: SOURCE",
          "398:   end",
          "400:   def test_pre_code",
          "401:     assert_equal(<<HTML, render(<<HAML))",
          "402: <pre><code>Foo&#x000A;  bar&#x000A;    baz</code></pre>",
          "403: HTML",
          "404: %pre",
          "405:   %code",
          "406:     :preserve",
          "407:       Foo",
          "408:         bar",
          "409:           baz",
          "410: HAML",
          "411:   end",
          "413:   def test_boolean_attributes",
          "414:     assert_equal(\"<p bar baz='true' foo='bar'></p>\\n\",",
          "415:                  render(\"%p{:foo => 'bar', :bar => true, :baz => 'true'}\", :format => :html4))",
          "416:     assert_equal(\"<p bar='bar' baz='true' foo='bar'></p>\\n\",",
          "417:                  render(\"%p{:foo => 'bar', :bar => true, :baz => 'true'}\", :format => :xhtml))",
          "419:     assert_equal(\"<p baz='false' foo='bar'></p>\\n\",",
          "420:                  render(\"%p{:foo => 'bar', :bar => false, :baz => 'false'}\", :format => :html4))",
          "421:     assert_equal(\"<p baz='false' foo='bar'></p>\\n\",",
          "422:                  render(\"%p{:foo => 'bar', :bar => false, :baz => 'false'}\", :format => :xhtml))",
          "423:   end",
          "425:   def test_nuke_inner_whitespace_in_loops",
          "426:     assert_equal(<<HTML, render(<<HAML))",
          "427: <ul>foobarbaz</ul>",
          "428: HTML",
          "429: %ul<",
          "430:   - for str in %w[foo bar baz]",
          "431:     = str",
          "432: HAML",
          "433:   end",
          "435:   def test_both_whitespace_nukes_work_together",
          "436:     assert_equal(<<RESULT, render(<<SOURCE))",
          "437: <p><q>Foo",
          "438:   Bar</q></p>",
          "439: RESULT",
          "440: %p",
          "441:   %q><= \"Foo\\\\nBar\"",
          "442: SOURCE",
          "443:   end",
          "445:   def test_nil_option",
          "446:     assert_equal(\"<p foo='bar'></p>\\n\", render('%p{:foo => \"bar\"}', :attr_wrapper => nil))",
          "447:   end",
          "449:   def test_comment_with_crazy_nesting",
          "450:     assert_equal(<<HTML, render(<<HAML))",
          "451: foo",
          "452: bar",
          "453: HTML",
          "454: foo",
          "455: -#",
          "456:   ul",
          "457:     %li{",
          "458:   foo",
          "459: bar",
          "460: HAML",
          "461:   end",
          "463:   # Regression tests",
          "465:   def test_indentation_after_dynamic_attr_hash",
          "466:     assert_equal(<<HTML, render(<<HAML))",
          "467: <html>",
          "468:   <body>",
          "469:     <img src='test'>",
          "470:     foo",
          "471:     bar",
          "472:   </body>",
          "473: </html>",
          "474: HTML",
          "475: %html",
          "476:   %body",
          "477:     %img{:src => 'te'+'st'}",
          "478:     = \"foo\\\\nbar\"",
          "479: HAML",
          "480:   end",
          "482:   def test_whitespace_nuke_with_both_newlines",
          "483:     assert_equal(\"<p>foo</p>\\n\", render('%p<= \"\\nfoo\\n\"'))",
          "484:     assert_equal(<<HTML, render(<<HAML))",
          "485: <p>",
          "486:   <p>foo</p>",
          "487: </p>",
          "488: HTML",
          "489: %p",
          "490:   %p<= \"\\\\nfoo\\\\n\"",
          "491: HAML",
          "492:   end",
          "494:   def test_whitespace_nuke_with_tags_and_else",
          "495:     assert_equal(<<HTML, render(<<HAML))",
          "496: <a>",
          "497:   <b>foo</b>",
          "498: </a>",
          "499: HTML",
          "500: %a",
          "501:   %b<",
          "502:     - if false",
          "503:       = \"foo\"",
          "504:     - else",
          "505:       foo",
          "506: HAML",
          "508:     assert_equal(<<HTML, render(<<HAML))",
          "509: <a>",
          "510:   <b>",
          "511:     foo",
          "512:   </b>",
          "513: </a>",
          "514: HTML",
          "515: %a",
          "516:   %b",
          "517:     - if false",
          "518:       = \"foo\"",
          "519:     - else",
          "520:       foo",
          "521: HAML",
          "522:   end",
          "524:   def test_outer_whitespace_nuke_with_empty_script",
          "525:     assert_equal(<<HTML, render(<<HAML))",
          "526: <p>",
          "527:   foo<a></a></p>",
          "528: HTML",
          "529: %p",
          "530:   foo",
          "531:   = \"  \"",
          "532:   %a>",
          "533: HAML",
          "534:   end",
          "536:   def test_both_case_indentation_work_with_deeply_nested_code",
          "537:     result = <<RESULT",
          "538: <h2>",
          "539:   other",
          "540: </h2>",
          "541: RESULT",
          "542:     assert_equal(result, render(<<HAML))",
          "543: - case 'other'",
          "544: - when 'test'",
          "545:   %h2",
          "546:     hi",
          "547: - when 'other'",
          "548:   %h2",
          "549:     other",
          "550: HAML",
          "551:     assert_equal(result, render(<<HAML))",
          "552: - case 'other'",
          "553:   - when 'test'",
          "554:     %h2",
          "555:       hi",
          "556:   - when 'other'",
          "557:     %h2",
          "558:       other",
          "559: HAML",
          "560:   end",
          "562:   def test_equals_block_with_ugly",
          "563:     assert_equal(\"foo\\n\", render(<<HAML, :ugly => true))",
          "564: = capture_haml do",
          "565:   foo",
          "566: HAML",
          "567:   end",
          "569:   def test_plain_equals_with_ugly",
          "570:     assert_equal(\"foo\\nbar\\n\", render(<<HAML, :ugly => true))",
          "571: = \"foo\"",
          "572: bar",
          "573: HAML",
          "574:   end",
          "576:   def test_inline_if",
          "577:     assert_equal(<<HTML, render(<<HAML))",
          "578: <p>One</p>",
          "579: <p></p>",
          "580: <p>Three</p>",
          "581: HTML",
          "582: - for name in [\"One\", \"Two\", \"Three\"]",
          "583:   %p= name unless name == \"Two\"",
          "584: HAML",
          "585:   end",
          "587:   def test_end_with_method_call",
          "588:     assert_equal(<<HTML, render(<<HAML))",
          "589: 2|3|4",
          "590: b-a-r",
          "591: HTML",
          "592: = [1, 2, 3].map do |i|",
          "593:   - i + 1",
          "594: - end.join(\"|\")",
          "595: = \"bar\".gsub(/./) do |s|",
          "596:   - s + \"-\"",
          "597: - end.gsub(/-$/) do |s|",
          "598:   - ''",
          "599: HAML",
          "600:   end",
          "602:   def test_nested_end_with_method_call",
          "603:     assert_equal(<<HTML, render(<<HAML))",
          "604: <p>",
          "605:   2|3|4",
          "606:   b-a-r",
          "607: </p>",
          "608: HTML",
          "609: %p",
          "610:   = [1, 2, 3].map do |i|",
          "611:     - i + 1",
          "612:   - end.join(\"|\")",
          "613:   = \"bar\".gsub(/./) do |s|",
          "614:     - s + \"-\"",
          "615:   - end.gsub(/-$/) do |s|",
          "616:     - ''",
          "617: HAML",
          "618:   end",
          "620:   def test_silent_end_with_stuff",
          "621:     assert_equal(<<HTML, render(<<HAML))",
          "622: e",
          "623: d",
          "624: c",
          "625: b",
          "626: a",
          "627: HTML",
          "628: - str = \"abcde\"",
          "629: - if true",
          "630:   = str.slice!(-1).chr",
          "631: - end until str.empty?",
          "632: HAML",
          "634:     assert_equal(<<HTML, render(<<HAML))",
          "635: <p>hi!</p>",
          "636: HTML",
          "637: - if true",
          "638:   %p hi!",
          "639: - end if \"foo\".gsub(/f/) do",
          "640:   - \"z\"",
          "641: - end + \"bar\"",
          "642: HAML",
          "643:   end",
          "645:   def test_multiline_with_colon_after_filter",
          "646:     assert_equal(<<HTML, render(<<HAML))",
          "647: Foo",
          "648: Bar",
          "649: HTML",
          "650: :plain",
          "651:   Foo",
          "652: = { :a => \"Bar\",      |",
          "653:     :b => \"Baz\" }[:a] |",
          "654: HAML",
          "655:     assert_equal(<<HTML, render(<<HAML))",
          "657: Bar",
          "658: HTML",
          "659: :plain",
          "660: = { :a => \"Bar\",      |",
          "661:     :b => \"Baz\" }[:a] |",
          "662: HAML",
          "663:   end",
          "665:   def test_multiline_in_filter",
          "666:     assert_equal(<<HTML, render(<<HAML))",
          "667: Foo |",
          "668: Bar |",
          "669: Baz",
          "670: HTML",
          "671: :plain",
          "672:   Foo |",
          "673:   Bar |",
          "674:   Baz",
          "675: HAML",
          "676:   end",
          "678:   def test_curly_brace",
          "679:     assert_equal(<<HTML, render(<<HAML))",
          "680: Foo { Bar",
          "681: HTML",
          "682: == Foo { Bar",
          "683: HAML",
          "684:   end",
          "686:   def test_escape_attrs_false",
          "687:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => false))",
          "688: <div class='<?php echo \"&quot;\" ?>' id='foo'>",
          "689:   bar",
          "690: </div>",
          "691: HTML",
          "692: #foo{:class => '<?php echo \"&quot;\" ?>'}",
          "693:   bar",
          "694: HAML",
          "695:   end",
          "697:   def test_escape_attrs_always",
          "698:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => :always))",
          "699: <div class='\"&amp;lt;&amp;gt;&amp;amp;\"' id='foo'>",
          "700:   bar",
          "701: </div>",
          "702: HTML",
          "703: #foo{:class => '\"&lt;&gt;&amp;\"'}",
          "704:   bar",
          "705: HAML",
          "706:   end",
          "708:   def test_escape_html",
          "709:     html = <<HTML",
          "710: &amp;",
          "711: &",
          "712: &amp;",
          "713: HTML",
          "715:     assert_equal(html, render(<<HAML, :escape_html => true))",
          "716: &= \"&\"",
          "717: != \"&\"",
          "718: = \"&\"",
          "719: HAML",
          "721:     assert_equal(html, render(<<HAML, :escape_html => true))",
          "722: &~ \"&\"",
          "723: !~ \"&\"",
          "724: ~ \"&\"",
          "725: HAML",
          "727:     assert_equal(html, render(<<HAML, :escape_html => true))",
          "728: & \\#{\"&\"}",
          "729: ! \\#{\"&\"}",
          "730: \\#{\"&\"}",
          "731: HAML",
          "733:     assert_equal(html, render(<<HAML, :escape_html => true))",
          "734: &== \\#{\"&\"}",
          "735: !== \\#{\"&\"}",
          "736: == \\#{\"&\"}",
          "737: HAML",
          "739:     tag_html = <<HTML",
          "740: <p>&amp;</p>",
          "741: <p>&</p>",
          "742: <p>&amp;</p>",
          "743: HTML",
          "745:     assert_equal(tag_html, render(<<HAML, :escape_html => true))",
          "746: %p&= \"&\"",
          "747: %p!= \"&\"",
          "748: %p= \"&\"",
          "749: HAML",
          "751:     assert_equal(tag_html, render(<<HAML, :escape_html => true))",
          "752: %p&~ \"&\"",
          "753: %p!~ \"&\"",
          "754: %p~ \"&\"",
          "755: HAML",
          "757:     assert_equal(tag_html, render(<<HAML, :escape_html => true))",
          "758: %p& \\#{\"&\"}",
          "759: %p! \\#{\"&\"}",
          "760: %p \\#{\"&\"}",
          "761: HAML",
          "763:     assert_equal(tag_html, render(<<HAML, :escape_html => true))",
          "764: %p&== \\#{\"&\"}",
          "765: %p!== \\#{\"&\"}",
          "766: %p== \\#{\"&\"}",
          "767: HAML",
          "768:   end",
          "770:   def test_new_attrs_with_hash",
          "771:     assert_equal(\"<a href='#'></a>\\n\", render('%a(href=\"#\")'))",
          "772:   end",
          "774:   def test_silent_script_with_hyphen_case",
          "775:     assert_equal(\"\", render(\"- a = 'foo-case-bar-case'\"))",
          "776:   end",
          "778:   def test_silent_script_with_hyphen_end",
          "779:     assert_equal(\"\", render(\"- a = 'foo-end-bar-end'\"))",
          "780:   end",
          "782:   def test_silent_script_with_hyphen_end_and_block",
          "783:     silence_warnings do",
          "784:       assert_equal(<<HTML, render(<<HAML))",
          "785: <p>foo-end</p>",
          "786: <p>bar-end</p>",
          "787: HTML",
          "788: - (\"foo-end-bar-end\".gsub(/\\\\w+-end/) do |s|",
          "789:   %p= s",
          "790: - end; nil)",
          "791: HAML",
          "792:     end",
          "793:   end",
          "795:   def test_if_without_content_and_else",
          "796:     assert_equal(<<HTML, render(<<HAML))",
          "797: foo",
          "798: HTML",
          "799: - if false",
          "800: - else",
          "801:   foo",
          "802: HAML",
          "804:     assert_equal(<<HTML, render(<<HAML))",
          "805: foo",
          "806: HTML",
          "807: - if true",
          "808:   - if false",
          "809:   - else",
          "810:     foo",
          "811: HAML",
          "812:   end",
          "814:   def test_html_attributes_with_hash",
          "815:     assert_equal(\"<a href='#' rel='top'>Foo</a>\\n\",",
          "816:       render('%a(href=\"#\" rel=\"top\") Foo'))",
          "817:     assert_equal(\"<a href='#'>Foo</a>\\n\",",
          "818:       render('%a(href=\"#\") #{\"Foo\"}'))",
          "820:     assert_equal(\"<a href='#\\\"'></a>\\n\", render('%a(href=\"#\\\\\"\")'))",
          "821:   end",
          "823:   def test_case_assigned_to_var",
          "824:     assert_equal(<<HTML, render(<<HAML))",
          "825: bar",
          "826: HTML",
          "827: - var = case 12",
          "828: - when 1; \"foo\"",
          "829: - when 12; \"bar\"",
          "830: = var",
          "831: HAML",
          "833:     assert_equal(<<HTML, render(<<HAML))",
          "834: bar",
          "835: HTML",
          "836: - var = case 12",
          "837: - when 1",
          "838:   - \"foo\"",
          "839: - when 12",
          "840:   - \"bar\"",
          "841: = var",
          "842: HAML",
          "844:     assert_equal(<<HTML, render(<<HAML))",
          "845: bar",
          "846: HTML",
          "847: - var = case 12",
          "848:   - when 1",
          "849:     - \"foo\"",
          "850:   - when 12",
          "851:     - \"bar\"",
          "852: = var",
          "853: HAML",
          "854:   end",
          "856:   def test_nested_case_assigned_to_var",
          "857:     assert_equal(<<HTML, render(<<HAML))",
          "858: bar",
          "859: HTML",
          "860: - if true",
          "861:   - var = case 12",
          "862:   - when 1; \"foo\"",
          "863:   - when 12; \"bar\"",
          "864:   = var",
          "865: HAML",
          "866:   end",
          "868:   def test_case_assigned_to_multiple_vars",
          "869:     assert_equal(<<HTML, render(<<HAML))",
          "870: bar",
          "871: bip",
          "872: HTML",
          "873: - var, vip = case 12",
          "874: - when 1; [\"foo\", \"baz\"]",
          "875: - when 12; [\"bar\", \"bip\"]",
          "876: = var",
          "877: = vip",
          "878: HAML",
          "879:   end",
          "881:   def test_if_assigned_to_var",
          "882:     assert_equal(<<HTML, render(<<HAML))",
          "883: foo",
          "884: HTML",
          "885: - var = if false",
          "886: - else",
          "887:   - \"foo\"",
          "888: = var",
          "889: HAML",
          "891:     assert_equal(<<HTML, render(<<HAML))",
          "892: foo",
          "893: HTML",
          "894: - var = if false",
          "895: - elsif 12 == 12",
          "896:   - \"foo\"",
          "897: - elsif 14 == 14; \"bar\"",
          "898: - else",
          "899:   - \"baz\"",
          "900: = var",
          "901: HAML",
          "903:     assert_equal(<<HTML, render(<<HAML))",
          "904: foo",
          "905: HTML",
          "906: - var = if false",
          "907:   - \"bar\"",
          "908: - else",
          "909:   - \"foo\"",
          "910: = var",
          "911: HAML",
          "912:   end",
          "914:   def test_case_with_newline_after_case",
          "915:     assert_equal(<<HTML, render(<<HAML))",
          "916: foo",
          "917: HTML",
          "918: - case 1",
          "920:   - when 1",
          "921:     foo",
          "922:   - when 2",
          "923:     bar",
          "924: HAML",
          "926:     assert_equal(<<HTML, render(<<HAML))",
          "927: bar",
          "928: HTML",
          "929: - case 2",
          "931: - when 1",
          "932:   foo",
          "933: - when 2",
          "934:   bar",
          "935: HAML",
          "936:   end",
          "938:   def test_escape_html_with_interpolated_if_statement",
          "939:     assert_equal(<<HTML, render(<<HAML, :escape_html => true))",
          "940: foo,",
          "941: HTML",
          "942: foo\\#{\",\" if true}",
          "943: HAML",
          "944:   end",
          "946:   # HTML escaping tests",
          "948:   def test_ampersand_equals_should_escape",
          "949:     assert_equal(\"<p>\\n  foo &amp; bar\\n</p>\\n\", render(\"%p\\n  &= 'foo & bar'\", :escape_html => false))",
          "950:   end",
          "952:   def test_ampersand_equals_inline_should_escape",
          "953:     assert_equal(\"<p>foo &amp; bar</p>\\n\", render(\"%p&= 'foo & bar'\", :escape_html => false))",
          "954:   end",
          "956:   def test_ampersand_equals_should_escape_before_preserve",
          "957:     assert_equal(\"<textarea>foo&#x000A;bar</textarea>\\n\", render('%textarea&= \"foo\\nbar\"', :escape_html => false))",
          "958:   end",
          "960:   def test_bang_equals_should_not_escape",
          "961:     assert_equal(\"<p>\\n  foo & bar\\n</p>\\n\", render(\"%p\\n  != 'foo & bar'\", :escape_html => true))",
          "962:   end",
          "964:   def test_bang_equals_inline_should_not_escape",
          "965:     assert_equal(\"<p>foo & bar</p>\\n\", render(\"%p!= 'foo & bar'\", :escape_html => true))",
          "966:   end",
          "968:   def test_static_attributes_should_be_escaped",
          "969:     assert_equal(\"<img class='atlantis' style='ugly&amp;stupid'>\\n\",",
          "970:                  render(\"%img.atlantis{:style => 'ugly&stupid'}\"))",
          "971:     assert_equal(\"<div class='atlantis' style='ugly&amp;stupid'>foo</div>\\n\",",
          "972:                  render(\".atlantis{:style => 'ugly&stupid'} foo\"))",
          "973:     assert_equal(\"<p class='atlantis' style='ugly&amp;stupid'>foo</p>\\n\",",
          "974:                 render(\"%p.atlantis{:style => 'ugly&stupid'}= 'foo'\"))",
          "975:     assert_equal(\"<p class='atlantis' style='ugly&#x000A;stupid'></p>\\n\",",
          "976:                 render(\"%p.atlantis{:style => \\\"ugly\\\\nstupid\\\"}\"))",
          "977:   end",
          "979:   def test_dynamic_attributes_should_be_escaped",
          "980:     assert_equal(\"<img alt='' src='&amp;foo.png'>\\n\",",
          "981:                  render(\"%img{:width => nil, :src => '&foo.png', :alt => String.new}\"))",
          "982:     assert_equal(\"<p alt='' src='&amp;foo.png'>foo</p>\\n\",",
          "983:                  render(\"%p{:width => nil, :src => '&foo.png', :alt => String.new} foo\"))",
          "984:     assert_equal(\"<div alt='' src='&amp;foo.png'>foo</div>\\n\",",
          "985:                  render(\"%div{:width => nil, :src => '&foo.png', :alt => String.new}= 'foo'\"))",
          "986:     assert_equal(\"<img alt='' src='foo&#x000A;.png'>\\n\",",
          "987:                  render(\"%img{:width => nil, :src => \\\"foo\\\\n.png\\\", :alt => String.new}\"))",
          "988:   end",
          "990:   def test_string_double_equals_should_be_esaped",
          "991:     assert_equal(\"<p>4&&lt;</p>\\n\", render(\"%p== \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "992:     assert_equal(\"<p>4&<</p>\\n\", render(\"%p== \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "993:   end",
          "995:   def test_escaped_inline_string_double_equals",
          "996:     assert_equal(\"<p>4&&lt;</p>\\n\", render(\"%p&== \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "997:     assert_equal(\"<p>4&&lt;</p>\\n\", render(\"%p&== \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "998:   end",
          "1000:   def test_unescaped_inline_string_double_equals",
          "1001:     assert_equal(\"<p>4&<</p>\\n\", render(\"%p!== \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1002:     assert_equal(\"<p>4&<</p>\\n\", render(\"%p!== \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1003:   end",
          "1005:   def test_escaped_string_double_equals",
          "1006:     assert_equal(\"<p>\\n  4&&lt;\\n</p>\\n\", render(\"%p\\n  &== \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1007:     assert_equal(\"<p>\\n  4&&lt;\\n</p>\\n\", render(\"%p\\n  &== \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1008:   end",
          "1010:   def test_unescaped_string_double_equals",
          "1011:     assert_equal(\"<p>\\n  4&<\\n</p>\\n\", render(\"%p\\n  !== \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1012:     assert_equal(\"<p>\\n  4&<\\n</p>\\n\", render(\"%p\\n  !== \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1013:   end",
          "1015:   def test_string_interpolation_should_be_esaped",
          "1016:     assert_equal(\"<p>4&&lt;</p>\\n\", render(\"%p \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1017:     assert_equal(\"<p>4&<</p>\\n\", render(\"%p \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1018:   end",
          "1020:   def test_escaped_inline_string_interpolation",
          "1021:     assert_equal(\"<p>4&&lt;</p>\\n\", render(\"%p& \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1022:     assert_equal(\"<p>4&&lt;</p>\\n\", render(\"%p& \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1023:   end",
          "1025:   def test_unescaped_inline_string_interpolation",
          "1026:     assert_equal(\"<p>4&<</p>\\n\", render(\"%p! \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1027:     assert_equal(\"<p>4&<</p>\\n\", render(\"%p! \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1028:   end",
          "1030:   def test_escaped_string_interpolation",
          "1031:     assert_equal(\"<p>\\n  4&&lt;\\n</p>\\n\", render(\"%p\\n  & \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1032:     assert_equal(\"<p>\\n  4&&lt;\\n</p>\\n\", render(\"%p\\n  & \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1033:   end",
          "1035:   def test_escaped_string_interpolation_with_no_space",
          "1036:     assert_equal(\"&lt;br&gt;\\n\", render('&#{\"<br>\"}'))",
          "1037:     assert_equal(\"<span>&lt;br&gt;</span>\\n\", render('%span&#{\"<br>\"}'))",
          "1038:   end",
          "1040:   def test_unescaped_string_interpolation",
          "1041:     assert_equal(\"<p>\\n  4&<\\n</p>\\n\", render(\"%p\\n  ! \\#{2+2}&\\#{'<'}\", :escape_html => true))",
          "1042:     assert_equal(\"<p>\\n  4&<\\n</p>\\n\", render(\"%p\\n  ! \\#{2+2}&\\#{'<'}\", :escape_html => false))",
          "1043:   end",
          "1045:   def test_unescaped_string_interpolation_with_no_space",
          "1046:     assert_equal(\"<br>\\n\", render('!#{\"<br>\"}'))",
          "1047:     assert_equal(\"<span><br></span>\\n\", render('%span!#{\"<br>\"}'))",
          "1048:   end",
          "1050:   def test_scripts_should_respect_escape_html_option",
          "1051:     assert_equal(\"<p>\\n  foo &amp; bar\\n</p>\\n\", render(\"%p\\n  = 'foo & bar'\", :escape_html => true))",
          "1052:     assert_equal(\"<p>\\n  foo & bar\\n</p>\\n\", render(\"%p\\n  = 'foo & bar'\", :escape_html => false))",
          "1053:   end",
          "1055:   def test_inline_scripts_should_respect_escape_html_option",
          "1056:     assert_equal(\"<p>foo &amp; bar</p>\\n\", render(\"%p= 'foo & bar'\", :escape_html => true))",
          "1057:     assert_equal(\"<p>foo & bar</p>\\n\", render(\"%p= 'foo & bar'\", :escape_html => false))",
          "1058:   end",
          "1060:   def test_script_ending_in_comment_should_render_when_html_is_escaped",
          "1061:     assert_equal(\"foo&amp;bar\\n\", render(\"= 'foo&bar' #comment\", :escape_html => true))",
          "1062:   end",
          "1064:   def test_script_with_if_shouldnt_output",
          "1065:     assert_equal(<<HTML, render(<<HAML))",
          "1066: <p>foo</p>",
          "1067: <p></p>",
          "1068: HTML",
          "1069: %p= \"foo\"",
          "1070: %p= \"bar\" if false",
          "1071: HAML",
          "1072:   end",
          "1074:   # Options tests",
          "1076:   def test_filename_and_line",
          "1077:     begin",
          "1078:       render(\"\\n\\n = abc\", :filename => 'test', :line => 2)",
          "1079:     rescue Exception => e",
          "1080:       assert_kind_of Haml::SyntaxError, e",
          "1081:       assert_match(/test:4/, e.backtrace.first)",
          "1082:     end",
          "1084:     begin",
          "1085:       render(\"\\n\\n= 123\\n\\n= nil[]\", :filename => 'test', :line => 2)",
          "1086:     rescue Exception => e",
          "1087:       assert_kind_of NoMethodError, e",
          "1088:       backtrace = e.backtrace",
          "1089:       backtrace.shift if rubinius?",
          "1090:       assert_match(/test:6/, backtrace.first)",
          "1091:     end",
          "1092:   end",
          "1094:   def test_stop_eval",
          "1095:     assert_equal(\"\", render(\"= 'Hello'\", :suppress_eval => true))",
          "1096:     assert_equal(\"\", render(\"- haml_concat 'foo'\", :suppress_eval => true))",
          "1097:     assert_equal(\"<div id='foo' yes='no'>\\n\", render(\"#foo{:yes => 'no'}/\", :suppress_eval => true))",
          "1098:     assert_equal(\"<div id='foo'>\\n\", render(\"#foo{:yes => 'no', :call => a_function() }/\", :suppress_eval => true))",
          "1099:     assert_equal(\"<div>\\n\", render(\"%div[1]/\", :suppress_eval => true))",
          "1100:     assert_equal(\"\", render(\":ruby\\n  Kernel.puts 'hello'\", :suppress_eval => true))",
          "1101:   end",
          "1103:   def test_doctypes",
          "1104:     assert_equal('<!DOCTYPE html>',",
          "1105:       render('!!!', :format => :html5).strip)",
          "1106:     assert_equal('<!DOCTYPE html>', render('!!! 5').strip)",
          "1107:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',",
          "1108:       render('!!! strict', :format => :xhtml).strip)",
          "1109:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',",
          "1110:       render('!!! frameset', :format => :xhtml).strip)",
          "1111:     assert_equal('<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">',",
          "1112:       render('!!! mobile', :format => :xhtml).strip)",
          "1113:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',",
          "1114:       render('!!! basic', :format => :xhtml).strip)",
          "1115:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',",
          "1116:       render('!!! transitional', :format => :xhtml).strip)",
          "1117:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',",
          "1118:       render('!!!', :format => :xhtml).strip)",
          "1119:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">',",
          "1120:       render('!!! strict', :format => :html4).strip)",
          "1121:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">',",
          "1122:       render('!!! frameset', :format => :html4).strip)",
          "1123:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">',",
          "1124:       render('!!! transitional', :format => :html4).strip)",
          "1125:     assert_equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">',",
          "1126:       render('!!!', :format => :html4).strip)",
          "1127:   end",
          "1129:   def test_attr_wrapper",
          "1130:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1131:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1132:     assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "1134:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1135:   end",
          "1137:   def test_autoclose_option",
          "1138:     assert_equal(\"<flaz foo='bar'>\\n\", render(\"%flaz{:foo => 'bar'}\", :autoclose => [\"flaz\"]))",
          "1139:     assert_equal(<<HTML, render(<<HAML, :autoclose => [/^flaz/]))",
          "1140: <flaz>",
          "1141: <flaznicate>",
          "1142: <flan></flan>",
          "1143: HTML",
          "1144: %flaz",
          "1145: %flaznicate",
          "1146: %flan",
          "1147: HAML",
          "1148:   end",
          "1150:   def test_attrs_parsed_correctly",
          "1151:     assert_equal(\"<p boom=>biddly='bar =&gt; baz'></p>\\n\", render(\"%p{'boom=>biddly' => 'bar => baz'}\"))",
          "1152:     assert_equal(\"<p foo,bar='baz, qux'></p>\\n\", render(\"%p{'foo,bar' => 'baz, qux'}\"))",
          "1153:     assert_equal(\"<p escaped='quo&#x000A;te'></p>\\n\", render(\"%p{ :escaped => \\\"quo\\\\nte\\\"}\"))",
          "1154:     assert_equal(\"<p escaped='quo4te'></p>\\n\", render(\"%p{ :escaped => \\\"quo\\#{2 + 2}te\\\"}\"))",
          "1155:   end",
          "1157:   def test_correct_parsing_with_brackets",
          "1158:     assert_equal(\"<p class='foo'>{tada} foo</p>\\n\", render(\"%p{:class => 'foo'} {tada} foo\"))",
          "1159:     assert_equal(\"<p class='foo'>deep {nested { things }}</p>\\n\", render(\"%p{:class => 'foo'} deep {nested { things }}\"))",
          "1160:     assert_equal(\"<p class='bar foo'>{a { d</p>\\n\", render(\"%p{{:class => 'foo'}, :class => 'bar'} {a { d\"))",
          "1161:     assert_equal(\"<p foo='bar'>a}</p>\\n\", render(\"%p{:foo => 'bar'} a}\"))",
          "1163:     foo = []",
          "1164:     foo[0] = Struct.new('PrettyFoo', :id).new",
          "1165:     assert_equal(\"<p class='struct_pretty_foo' id='struct_pretty_foo_new'>New User]</p>\\n\",",
          "1166:                  render(\"%p[foo[0]] New User]\", :locals => {:foo => foo}))",
          "1167:     assert_equal(\"<p class='prefix_struct_pretty_foo' id='prefix_struct_pretty_foo_new'>New User]</p>\\n\",",
          "1168:                  render(\"%p[foo[0], :prefix] New User]\", :locals => {:foo => foo}))",
          "1170:     foo[0].id = 1",
          "1171:     assert_equal(\"<p class='struct_pretty_foo' id='struct_pretty_foo_1'>New User]</p>\\n\",",
          "1172:                  render(\"%p[foo[0]] New User]\", :locals => {:foo => foo}))",
          "1173:     assert_equal(\"<p class='prefix_struct_pretty_foo' id='prefix_struct_pretty_foo_1'>New User]</p>\\n\",",
          "1174:                  render(\"%p[foo[0], :prefix] New User]\", :locals => {:foo => foo}))",
          "1175:   end",
          "1177:   def test_empty_attrs",
          "1178:     assert_equal(\"<p attr=''>empty</p>\\n\", render(\"%p{ :attr => '' } empty\"))",
          "1179:     assert_equal(\"<p attr=''>empty</p>\\n\", render(\"%p{ :attr => x } empty\", :locals => {:x => ''}))",
          "1180:   end",
          "1182:   def test_nil_attrs",
          "1183:     assert_equal(\"<p>nil</p>\\n\", render(\"%p{ :attr => nil } nil\"))",
          "1184:     assert_equal(\"<p>nil</p>\\n\", render(\"%p{ :attr => x } nil\", :locals => {:x => nil}))",
          "1185:   end",
          "1187:   def test_nil_id_with_syntactic_id",
          "1188:     assert_equal(\"<p id='foo'>nil</p>\\n\", render(\"%p#foo{:id => nil} nil\"))",
          "1189:     assert_equal(\"<p id='foo_bar'>nil</p>\\n\", render(\"%p#foo{{:id => 'bar'}, :id => nil} nil\"))",
          "1190:     assert_equal(\"<p id='foo_bar'>nil</p>\\n\", render(\"%p#foo{{:id => nil}, :id => 'bar'} nil\"))",
          "1191:   end",
          "1193:   def test_nil_class_with_syntactic_class",
          "1194:     assert_equal(\"<p class='foo'>nil</p>\\n\", render(\"%p.foo{:class => nil} nil\"))",
          "1195:     assert_equal(\"<p class='bar foo'>nil</p>\\n\", render(\"%p.bar.foo{:class => nil} nil\"))",
          "1196:     assert_equal(\"<p class='bar foo'>nil</p>\\n\", render(\"%p.foo{{:class => 'bar'}, :class => nil} nil\"))",
          "1197:     assert_equal(\"<p class='bar foo'>nil</p>\\n\", render(\"%p.foo{{:class => nil}, :class => 'bar'} nil\"))",
          "1198:   end",
          "1200:   def test_locals",
          "1201:     assert_equal(\"<p>Paragraph!</p>\\n\", render(\"%p= text\", :locals => { :text => \"Paragraph!\" }))",
          "1202:   end",
          "1204:   def test_dynamic_attrs_shouldnt_register_as_literal_values",
          "1205:     assert_equal(\"<p a='b2c'></p>\\n\", render('%p{:a => \"b#{1 + 1}c\"}'))",
          "1206:     assert_equal(\"<p a='b2c'></p>\\n\", render(\"%p{:a => 'b' + (1 + 1).to_s + 'c'}\"))",
          "1207:   end",
          "1209:   def test_dynamic_attrs_with_self_closed_tag",
          "1210:     assert_equal(\"<a b='2'>\\nc\\n\", render(\"%a{'b' => 1 + 1}/\\n= 'c'\\n\"))",
          "1211:   end",
          "1213:   EXCEPTION_MAP.each do |key, value|",
          "1214:     define_method(\"test_exception (#{key.inspect})\") do",
          "1215:       begin",
          "1216:         silence_warnings do",
          "1217:           render(key, :filename => \"(test_exception (#{key.inspect}))\")",
          "1218:         end",
          "1219:       rescue Exception => err",
          "1220:         value = [value] unless value.is_a?(Array)",
          "1221:         expected_message, line_no = value",
          "1222:         line_no ||= key.split(\"\\n\").length",
          "1225:         if expected_message == :compile",
          "1226:           assert_match(/(compile error|syntax error|unterminated string|expecting)/, err.message, \"Line: #{key}\")",
          "1227:         else",
          "1228:           assert_equal(expected_message, err.message, \"Line: #{key}\")",
          "1229:         end",
          "1231:       else",
          "1232:         assert(false, \"Exception not raised for\\n#{key}\")",
          "1233:       end",
          "1234:     end",
          "1235:   end",
          "1237:   def test_exception_line",
          "1238:     render(\"a\\nb\\n!!!\\n  c\\nd\")",
          "1239:   rescue Haml::SyntaxError => e",
          "1240:     assert_equal(\"(test_exception_line):4\", e.backtrace[0])",
          "1241:   else",
          "1242:     assert(false, '\"a\\nb\\n!!!\\n  c\\nd\" doesn\\'t produce an exception')",
          "1243:   end",
          "1245:   def test_exception",
          "1246:     render(\"%p\\n  hi\\n  %a= undefined\\n= 12\")",
          "1247:   rescue Exception => e",
          "1248:     backtrace = e.backtrace",
          "1249:     backtrace.shift if rubinius?",
          "1250:     assert_match(\"(test_exception):3\", backtrace[0])",
          "1251:   else",
          "1252:     # Test failed... should have raised an exception",
          "1253:     assert(false)",
          "1254:   end",
          "1256:   def test_compile_error",
          "1257:     render(\"a\\nb\\n- fee)\\nc\")",
          "1258:   rescue Exception => e",
          "1259:     assert_match(/\\(test_compile_error\\):3:/i, e.message)",
          "1260:     assert_match(/(syntax error|expecting \\$end)/i, e.message)",
          "1261:   else",
          "1262:     assert(false, '\"a\\nb\\n- fee)\\nc\" doesn\\'t produce an exception!')",
          "1263:   end",
          "1265:   def test_unbalanced_brackets",
          "1266:     render('foo #{1 + 5} foo #{6 + 7 bar #{8 + 9}')",
          "1267:   rescue Haml::SyntaxError => e",
          "1268:     assert_equal(Haml::Error.message(:unbalanced_brackets), e.message)",
          "1269:   end",
          "1271:   def test_single_line_comments_are_interpolated",
          "1272:     assert_equal(\"<!-- Hello 2 -->\\n\",",
          "1273:                  render('/ Hello #{1 + 1}'))",
          "1274:   end",
          "1276:   def test_single_line_comments_are_not_interpolated_with_suppress_eval",
          "1277:     assert_equal(\"<!--  -->\\n\",",
          "1278:                  render('/ Hello #{1 + 1}', :suppress_eval => true))",
          "1279:   end",
          "1281:   def test_single_line_comments_with_interpolation_dont_break_tabulation",
          "1282:     assert_equal(\"<!-- Hello 2 -->\\nconcatted\\n\",",
          "1283:                  render(\"/ Hello \\#{1 + 1}\\n- haml_concat 'concatted'\"))",
          "1284:   end",
          "1286:   def test_balanced_conditional_comments",
          "1287:     assert_equal(\"<!--[if !(IE 6)|(IE 7)]> Bracket: ] <![endif]-->\\n\",",
          "1288:                  render(\"/[if !(IE 6)|(IE 7)] Bracket: ]\"))",
          "1289:   end",
          "1291:   def test_downlevel_revealed_conditional_comments",
          "1292:     assert_equal(\"<!--[if !IE]><!--> A comment <!--<![endif]-->\\n\",",
          "1293:                   render(\"/![if !IE] A comment\"))",
          "1294:   end",
          "1296:   def test_downlevel_revealed_conditional_comments_block",
          "1297:     assert_equal(\"<!--[if !IE]><!-->\\n  A comment\\n<!--<![endif]-->\\n\",",
          "1298:                   render(\"/![if !IE]\\n  A comment\"))",
          "1299:   end",
          "1301:   def test_local_assigns_dont_modify_class",
          "1302:     assert_equal(\"bar\\n\", render(\"= foo\", :locals => {:foo => 'bar'}))",
          "1303:     assert_nil(defined?(foo))",
          "1304:   end",
          "1306:   def test_object_ref_with_nil_id",
          "1307:     user = User.new",
          "1308:     assert_equal(\"<p class='struct_user' id='struct_user_new'>New User</p>\\n\",",
          "1309:                  render(\"%p[user] New User\", :locals => {:user => user}))",
          "1310:   end",
          "1312:   def test_object_ref_before_attrs",
          "1313:     user = User.new 42",
          "1314:     assert_equal(\"<p class='struct_user' id='struct_user_42' style='width: 100px;'>New User</p>\\n\",",
          "1315:                  render(\"%p[user]{:style => 'width: 100px;'} New User\", :locals => {:user => user}))",
          "1316:   end",
          "1318:   def test_object_ref_with_custom_haml_class",
          "1319:     custom = CustomHamlClass.new 42",
          "1320:     assert_equal(\"<p class='my_thing' id='my_thing_42' style='width: 100px;'>My Thing</p>\\n\",",
          "1321:                  render(\"%p[custom]{:style => 'width: 100px;'} My Thing\", :locals => {:custom => custom}))",
          "1322:   end",
          "1324:   def test_object_ref_with_multiple_ids",
          "1325:     cpk_record = PrettyCpkRecord.new([42,6,9])",
          "1326:     assert_equal(\"<p class='struct_pretty_cpk_record' id='struct_pretty_cpk_record_42_6_9' style='width: 100px;'>CPK Record</p>\\n\",",
          "1327:                  render(\"%p[cpk_record]{:style => 'width: 100px;'} CPK Record\", :locals => {:cpk_record => cpk_record}))",
          "1328:   end",
          "1330:   def test_non_literal_attributes",
          "1331:     assert_equal(\"<p a1='foo' a2='bar' a3='baz'></p>\\n\",",
          "1332:                  render(\"%p{a2, a1, :a3 => 'baz'}\",",
          "1333:                         :locals => {:a1 => {:a1 => 'foo'}, :a2 => {:a2 => 'bar'}}))",
          "1334:   end",
          "1336:   def test_render_should_accept_a_binding_as_scope",
          "1337:     string = \"This is a string!\"",
          "1338:     string.instance_variable_set(:@var, \"Instance variable\")",
          "1339:     b = string.instance_eval do",
          "1340:       var = \"Local variable\"",
          "1341:       # Silence unavoidable warning; Ruby doesn't know we're going to use this",
          "1342:       # later.",
          "1343:       nil if var",
          "1344:       binding",
          "1345:     end",
          "1347:     assert_equal(\"<p>THIS IS A STRING!</p>\\n<p>Instance variable</p>\\n<p>Local variable</p>\\n\",",
          "1348:                  render(\"%p= upcase\\n%p= @var\\n%p= var\", :scope => b))",
          "1349:   end",
          "1351:   def test_yield_should_work_with_binding",
          "1352:     assert_equal(\"12\\nFOO\\n\", render(\"= yield\\n= upcase\", :scope => \"foo\".instance_eval{binding}) { 12 })",
          "1353:   end",
          "1355:   def test_yield_should_work_with_def_method",
          "1356:     s = \"foo\"",
          "1357:     engine(\"= yield\\n= upcase\").def_method(s, :render)",
          "1358:     assert_equal(\"12\\nFOO\\n\", s.render { 12 })",
          "1359:   end",
          "1361:   def test_render_proc_locals",
          "1362:     proc = engine(\"%p= foo\\n.bar{:baz => baz}= boom\").render_proc(Object.new, :foo, :baz, :boom)",
          "1363:     assert_equal(\"<p>1</p>\\n<div baz='2' class='bar'>3</div>\\n\", proc[:foo => 1, :baz => 2, :boom => 3])",
          "1364:   end",
          "1366:   def test_render_proc_with_binding",
          "1367:     assert_equal(\"FOO\\n\", engine(\"= upcase\").render_proc(\"foo\".instance_eval{binding}).call)",
          "1368:   end",
          "1370:   def test_haml_buffer_gets_reset_even_with_exception",
          "1371:     scope = Object.new",
          "1372:     render(\"- raise Haml::Error\", :scope => scope)",
          "1373:     assert(false, \"Expected exception\")",
          "1374:   rescue Exception",
          "1375:     assert_nil(scope.send(:haml_buffer))",
          "1376:   end",
          "1378:   def test_def_method_haml_buffer_gets_reset_even_with_exception",
          "1379:     scope = Object.new",
          "1380:     engine(\"- raise Haml::Error\").def_method(scope, :render)",
          "1381:     scope.render",
          "1382:     assert(false, \"Expected exception\")",
          "1383:   rescue Exception",
          "1384:     assert_nil(scope.send(:haml_buffer))",
          "1385:   end",
          "1387:   def test_render_proc_haml_buffer_gets_reset_even_with_exception",
          "1388:     scope = Object.new",
          "1389:     proc = engine(\"- raise Haml::Error\").render_proc(scope)",
          "1390:     proc.call",
          "1391:     assert(false, \"Expected exception\")",
          "1392:   rescue Exception",
          "1393:     assert_nil(scope.send(:haml_buffer))",
          "1394:   end",
          "1396:   def test_render_proc_should_raise_haml_syntax_error_not_ruby_syntax_error",
          "1397:     assert_raises(Haml::SyntaxError) do",
          "1398:       Haml::Engine.new(\"%p{:foo => !}\").render_proc(Object.new, :foo).call",
          "1399:     end",
          "1400:   end",
          "1402:   def test_render_should_raise_haml_syntax_error_not_ruby_syntax_error",
          "1403:     assert_raises(Haml::SyntaxError) do",
          "1404:       Haml::Engine.new(\"%p{:foo => !}\").render",
          "1405:     end",
          "1406:   end",
          "1408:   def test_ugly_true",
          "1409:     assert_equal(\"<div id='outer'>\\n<div id='inner'>\\n<p>hello world</p>\\n</div>\\n</div>\\n\",",
          "1410:                  render(\"#outer\\n  #inner\\n    %p hello world\", :ugly => true))",
          "1412:     assert_equal(\"<p>#{'s' * 75}</p>\\n\",",
          "1413:                  render(\"%p #{'s' * 75}\", :ugly => true))",
          "1415:     assert_equal(\"<p>#{'s' * 75}</p>\\n\",",
          "1416:                  render(\"%p= 's' * 75\", :ugly => true))",
          "1417:   end",
          "1419:   def test_remove_whitespace_true",
          "1420:     assert_equal(\"<div id='outer'><div id='inner'><p>hello world</p></div></div>\",",
          "1421:                  render(\"#outer\\n  #inner\\n    %p hello world\", :remove_whitespace => true))",
          "1422:     assert_equal(\"<p>hello world<pre>foo   bar\\nbaz</pre></p>\", render(<<HAML, :remove_whitespace => true))",
          "1423: %p",
          "1424:   hello world",
          "1425:   %pre",
          "1426:     foo   bar",
          "1427:     baz",
          "1428: HAML",
          "1429:     assert_equal(\"<div><span>foo</span> <span>bar</span></div>\",",
          "1430:                  render('%div <span>foo</span> <span>bar</span>', :remove_whitespace => true))",
          "1431:   end",
          "1433:   def test_auto_preserve_unless_ugly",
          "1434:     assert_equal(\"<pre>foo&#x000A;bar</pre>\\n\", render('%pre=\"foo\\nbar\"'))",
          "1435:     assert_equal(\"<pre>foo\\nbar</pre>\\n\", render(\"%pre\\n  foo\\n  bar\"))",
          "1436:     assert_equal(\"<pre>foo\\nbar</pre>\\n\", render('%pre=\"foo\\nbar\"', :ugly => true))",
          "1437:     assert_equal(\"<pre>foo\\nbar</pre>\\n\", render(\"%pre\\n  foo\\n  bar\", :ugly => true))",
          "1438:   end",
          "1440:   def test_xhtml_output_option",
          "1441:     assert_equal \"<p>\\n  <br />\\n</p>\\n\", render(\"%p\\n  %br\", :format => :xhtml)",
          "1442:     assert_equal \"<a />\\n\", render(\"%a/\", :format => :xhtml)",
          "1443:   end",
          "1445:   def test_arbitrary_output_option",
          "1446:     assert_raises_message(Haml::Error, \"Invalid output format :html1\") do",
          "1447:       engine(\"%br\", :format => :html1)",
          "1448:     end",
          "1449:   end",
          "1451:   def test_static_hashes",
          "1452:     assert_equal(\"<a b='a =&gt; b'></a>\\n\", render(\"%a{:b => 'a => b'}\", :suppress_eval => true))",
          "1453:     assert_equal(\"<a b='a, b'></a>\\n\", render(\"%a{:b => 'a, b'}\", :suppress_eval => true))",
          "1454:     assert_equal(\"<a b='a\\tb'></a>\\n\", render('%a{:b => \"a\\tb\"}', :suppress_eval => true))",
          "1455:     assert_equal(\"<a b='a\\#{foo}b'></a>\\n\", render('%a{:b => \"a\\\\#{foo}b\"}', :suppress_eval => true))",
          "1456:     assert_equal(\"<a b='#f00'></a>\\n\", render(\"%a{:b => '#f00'}\", :suppress_eval => true))",
          "1457:   end",
          "1459:   def test_dynamic_hashes_with_suppress_eval",
          "1460:     assert_equal(\"<a></a>\\n\", render('%a{:b => \"a #{1 + 1} b\", :c => \"d\"}', :suppress_eval => true))",
          "1461:   end",
          "1463:   def test_interpolates_instance_vars_in_attribute_values",
          "1464:     scope = Object.new",
          "1465:     scope.instance_variable_set :@foo, 'bar'",
          "1466:     assert_equal(\"<a b='a bar b'></a>\\n\", render('%a{:b => \"a #@foo b\"}', :scope => scope))",
          "1467:   end",
          "1469:   def test_interpolates_global_vars_in_attribute_values",
          "1470:     # make sure the value isn't just interpolated in during template compilation",
          "1471:     engine = Haml::Engine.new('%a{:b => \"a #$global_var_for_testing b\"}')",
          "1472:     $global_var_for_testing = 'bar'",
          "1473:     assert_equal(\"<a b='a bar b'></a>\\n\", engine.to_html)",
          "1474:   ensure",
          "1475:     $global_var_for_testing = nil",
          "1476:   end",
          "1478:   def test_utf8_attrs",
          "1479:     assert_equal(\"<a href='h\u00e9llo'></a>\\n\", render(\"%a{:href => 'h\u00e9llo'}\"))",
          "1480:     assert_equal(\"<a href='h\u00e9llo'></a>\\n\", render(\"%a(href='h\u00e9llo')\"))",
          "1481:   end",
          "1483:   # HTML 4.0",
          "1485:   def test_html_has_no_self_closing_tags",
          "1486:     assert_equal \"<p>\\n  <br>\\n</p>\\n\", render(\"%p\\n  %br\", :format => :html4)",
          "1487:     assert_equal \"<br>\\n\", render(\"%br/\", :format => :html4)",
          "1488:   end",
          "1490:   def test_html_renders_empty_node_with_closing_tag",
          "1491:     assert_equal \"<div class='foo'></div>\\n\", render(\".foo\", :format => :html4)",
          "1492:   end",
          "1494:   def test_html_doesnt_add_slash_to_self_closing_tags",
          "1495:     assert_equal \"<a>\\n\", render(\"%a/\", :format => :html4)",
          "1496:     assert_equal \"<a foo='2'>\\n\", render(\"%a{:foo => 1 + 1}/\", :format => :html4)",
          "1497:     assert_equal \"<meta>\\n\", render(\"%meta\", :format => :html4)",
          "1498:     assert_equal \"<meta foo='2'>\\n\", render(\"%meta{:foo => 1 + 1}\", :format => :html4)",
          "1499:   end",
          "1501:   def test_html_ignores_xml_prolog_declaration",
          "1502:     assert_equal \"\", render('!!! XML', :format => :html4)",
          "1503:   end",
          "1505:   def test_html_has_different_doctype",
          "1506:     assert_equal %{<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\\n},",
          "1507:     render('!!!', :format => :html4)",
          "1508:   end",
          "1510:   # because anything before the doctype triggers quirks mode in IE",
          "1511:   def test_xml_prolog_and_doctype_dont_result_in_a_leading_whitespace_in_html",
          "1512:     refute_match(/^\\s+/, render(\"!!! xml\\n!!!\", :format => :html4))",
          "1513:   end",
          "1515:   # HTML5",
          "1516:   def test_html5_doctype",
          "1517:     assert_equal %{<!DOCTYPE html>\\n}, render('!!!', :format => :html5)",
          "1518:   end",
          "1520:   # HTML5 custom data attributes",
          "1521:   def test_html5_data_attributes_without_hyphenation",
          "1522:     assert_equal(\"<div data-author_id='123' data-biz='baz' data-foo='bar'></div>\\n\",",
          "1523:       render(\"%div{:data => {:author_id => 123, :foo => 'bar', :biz => 'baz'}}\",",
          "1524:         :hyphenate_data_attrs => false))",
          "1526:     assert_equal(\"<div data-one_plus_one='2'></div>\\n\",",
          "1527:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1528:         :hyphenate_data_attrs => false))",
          "1530:     assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",",
          "1531:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1532:         :hyphenate_data_attrs => false)) #'",
          "1533:   end",
          "1535:   def test_html5_data_attributes_with_hyphens",
          "1536:     assert_equal(\"<div data-foo-bar='blip'></div>\\n\",",
          "1537:       render(\"%div{:data => {:foo_bar => 'blip'}}\"))",
          "1538:     assert_equal(\"<div data-baz='bang' data-foo-bar='blip'></div>\\n\",",
          "1539:       render(\"%div{:data => {:foo_bar => 'blip', :baz => 'bang'}}\"))",
          "1540:   end",
          "1542:  def test_html5_arbitrary_hash_valued_attributes_with",
          "1543:     assert_equal(\"<div aria-foo='blip'></div>\\n\",",
          "1544:       render(\"%div{:aria => {:foo => 'blip'}}\"))",
          "1545:     assert_equal(\"<div foo-baz='bang'></div>\\n\",",
          "1546:       render(\"%div{:foo => {:baz => 'bang'}}\"))",
          "1547:  end",
          "1549:   def test_arbitrary_attribute_hash_merging",
          "1550:     assert_equal(%Q{<a aria-baz='qux' aria-foo='bar'></a>\\n}, render(<<-HAML))",
          "1551: - h1 = {:aria => {:foo => :bar}}",
          "1552: - h2 = {:baz => :qux}",
          "1553: %a{h1, :aria => h2}",
          "1554: HAML",
          "1555:   end",
          "1558:   def test_html5_data_attributes_with_nested_hash",
          "1559:     assert_equal(\"<div data-a-b='c'></div>\\n\", render(<<-HAML))",
          "1560: - hash = {:a => {:b => 'c'}}",
          "1561: - hash[:d] = hash",
          "1562: %div{:data => hash}",
          "1563: HAML",
          "1564:   end",
          "1566:   def test_html5_data_attributes_with_nested_hash_and_without_hyphenation",
          "1567:     assert_equal(\"<div data-a_b='c'></div>\\n\", render(<<-HAML, :hyphenate_data_attrs => false))",
          "1568: - hash = {:a => {:b => 'c'}}",
          "1569: - hash[:d] = hash",
          "1570: %div{:data => hash}",
          "1571: HAML",
          "1572:   end",
          "1574:   def test_html5_data_attributes_with_multiple_defs",
          "1575:     # Should always use the more-explicit attribute",
          "1576:     assert_equal(\"<div data-foo='second'></div>\\n\",",
          "1577:       render(\"%div{:data => {:foo => 'first'}, 'data-foo' => 'second'}\"))",
          "1578:     assert_equal(\"<div data-foo='first'></div>\\n\",",
          "1579:       render(\"%div{'data-foo' => 'first', :data => {:foo => 'second'}}\"))",
          "1580:   end",
          "1582:   def test_html5_data_attributes_with_attr_method",
          "1583:     obj = Object.new",
          "1584:     def obj.data_hash",
          "1585:       {:data => {:foo => \"bar\", :baz => \"bang\"}}",
          "1586:     end",
          "1588:     def obj.data_val",
          "1589:       {:data => \"dat\"}",
          "1590:     end",
          "1592:     assert_equal(\"<div data-baz='bang' data-brat='wurst' data-foo='blip'></div>\\n\",",
          "1593:       render(\"%div{data_hash, :data => {:foo => 'blip', :brat => 'wurst'}}\", scope: obj))",
          "1594:     assert_equal(\"<div data-baz='bang' data-foo='blip'></div>\\n\",",
          "1595:       render(\"%div{data_hash, 'data-foo' => 'blip'}\", scope: obj))",
          "1596:     assert_equal(\"<div data-baz='bang' data-foo='bar' data='dat'></div>\\n\",",
          "1597:       render(\"%div{data_hash, :data => 'dat'}\", scope: obj))",
          "1598:     assert_equal(\"<div data-brat='wurst' data-foo='blip' data='dat'></div>\\n\",",
          "1599:       render(\"%div{data_val, :data => {:foo => 'blip', :brat => 'wurst'}}\", scope: obj))",
          "1600:   end",
          "1602:   def test_html5_data_attributes_with_identical_attribute_values",
          "1603:     assert_equal(\"<div data-x='50' data-y='50'></div>\\n\",",
          "1604:       render(\"%div{:data => {:x => 50, :y => 50}}\"))",
          "1605:   end",
          "1607:   def test_xml_doc_using_html5_format_and_mime_type",
          "1608:     assert_equal(<<XML, render(<<HAML, { :format => :html5, :mime_type => 'text/xml' }))",
          "1609: <?xml version='1.0' encoding='utf-8' ?>",
          "1610: <root>",
          "1611:   <element />",
          "1612:   <hr />",
          "1613: </root>",
          "1614: XML",
          "1615: !!! XML",
          "1616: %root",
          "1617:   %element/",
          "1618:   %hr",
          "1619: HAML",
          "1620:   end",
          "1622:   def test_xml_doc_using_html4_format_and_mime_type",
          "1623:     assert_equal(<<XML, render(<<HAML, { :format => :html4, :mime_type => 'text/xml' }))",
          "1624: <?xml version='1.0' encoding='utf-8' ?>",
          "1625: <root>",
          "1626:   <element />",
          "1627:   <hr />",
          "1628: </root>",
          "1629: XML",
          "1630: !!! XML",
          "1631: %root",
          "1632:   %element/",
          "1633:   %hr",
          "1634: HAML",
          "1635:   end",
          "1637:   # New attributes",
          "1639:   def test_basic_new_attributes",
          "1640:     assert_equal(\"<a>bar</a>\\n\", render(\"%a() bar\"))",
          "1641:     assert_equal(\"<a href='foo'>bar</a>\\n\", render(\"%a(href='foo') bar\"))",
          "1642:     assert_equal(\"<a b='c' c='d' d='e'>baz</a>\\n\", render(%q{%a(b=\"c\" c='d' d=\"e\") baz}))",
          "1643:   end",
          "1645:   def test_new_attribute_ids",
          "1646:     assert_equal(\"<div id='foo_bar'></div>\\n\", render(\"#foo(id='bar')\"))",
          "1647:     assert_equal(\"<div id='foo_baz_bar'></div>\\n\", render(\"#foo{:id => 'bar'}(id='baz')\"))",
          "1648:     assert_equal(\"<div id='foo_baz_bar'></div>\\n\", render(\"#foo(id='baz'){:id => 'bar'}\"))",
          "1649:     foo = User.new(42)",
          "1650:     assert_equal(\"<div class='struct_user' id='foo_baz_bar_struct_user_42'></div>\\n\",",
          "1651:       render(\"#foo(id='baz'){:id => 'bar'}[foo]\", :locals => {:foo => foo}))",
          "1652:     assert_equal(\"<div class='struct_user' id='foo_baz_bar_struct_user_42'></div>\\n\",",
          "1653:       render(\"#foo(id='baz')[foo]{:id => 'bar'}\", :locals => {:foo => foo}))",
          "1654:     assert_equal(\"<div class='struct_user' id='foo_baz_bar_struct_user_42'></div>\\n\",",
          "1655:       render(\"#foo[foo](id='baz'){:id => 'bar'}\", :locals => {:foo => foo}))",
          "1656:     assert_equal(\"<div class='struct_user' id='foo_baz_bar_struct_user_42'></div>\\n\",",
          "1657:       render(\"#foo[foo]{:id => 'bar'}(id='baz')\", :locals => {:foo => foo}))",
          "1658:   end",
          "1660:   def test_new_attribute_classes",
          "1661:     assert_equal(\"<div class='bar foo'></div>\\n\", render(\".foo(class='bar')\"))",
          "1662:     assert_equal(\"<div class='bar baz foo'></div>\\n\", render(\".foo{:class => 'bar'}(class='baz')\"))",
          "1663:     assert_equal(\"<div class='bar baz foo'></div>\\n\", render(\".foo(class='baz'){:class => 'bar'}\"))",
          "1664:     foo = User.new(42)",
          "1665:     assert_equal(\"<div class='bar baz foo struct_user' id='struct_user_42'></div>\\n\",",
          "1666:       render(\".foo(class='baz'){:class => 'bar'}[foo]\", :locals => {:foo => foo}))",
          "1667:     assert_equal(\"<div class='bar baz foo struct_user' id='struct_user_42'></div>\\n\",",
          "1668:       render(\".foo[foo](class='baz'){:class => 'bar'}\", :locals => {:foo => foo}))",
          "1669:     assert_equal(\"<div class='bar baz foo struct_user' id='struct_user_42'></div>\\n\",",
          "1670:       render(\".foo[foo]{:class => 'bar'}(class='baz')\", :locals => {:foo => foo}))",
          "1671:   end",
          "1673:   def test_dynamic_new_attributes",
          "1674:     assert_equal(\"<a href='12'>bar</a>\\n\", render(\"%a(href=foo) bar\", :locals => {:foo => 12}))",
          "1675:     assert_equal(\"<a b='12' c='13' d='14'>bar</a>\\n\", render(\"%a(b=b c='13' d=d) bar\", :locals => {:b => 12, :d => 14}))",
          "1676:   end",
          "1678:   def test_new_attribute_interpolation",
          "1679:     assert_equal(\"<a href='12'>bar</a>\\n\", render('%a(href=\"1#{1 + 1}\") bar'))",
          "1680:     assert_equal(\"<a href='2: 2, 3: 3'>bar</a>\\n\", render(%q{%a(href='2: #{1 + 1}, 3: #{foo}') bar}, :locals => {:foo => 3}))",
          "1681:     assert_equal(%Q{<a href='1\\#{1 + 1}'>bar</a>\\n}, render('%a(href=\"1\\#{1 + 1}\") bar'))",
          "1682:   end",
          "1684:   def test_truthy_new_attributes",
          "1685:     assert_equal(\"<a href='href'>bar</a>\\n\", render(\"%a(href) bar\", :format => :xhtml))",
          "1686:     assert_equal(\"<a bar='baz' href>bar</a>\\n\", render(\"%a(href bar='baz') bar\", :format => :html5))",
          "1687:     assert_equal(\"<a href>bar</a>\\n\", render(\"%a(href=true) bar\"))",
          "1688:     assert_equal(\"<a>bar</a>\\n\", render(\"%a(href=false) bar\"))",
          "1689:   end",
          "1691:   def test_new_attribute_parsing",
          "1692:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1693:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1694:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1695:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "1696:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "1697:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1698:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "1699:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
          "1700:     assert_equal(\"<a a='foo'>(b='bar')</a>\\n\", render(\"%a(a='foo')(b='bar')\"))",
          "1701:     assert_equal(\"<a a='foo)bar'>baz</a>\\n\", render(\"%a(a='foo)bar') baz\"))",
          "1702:     assert_equal(\"<a a='foo'>baz</a>\\n\", render(\"%a( a = 'foo' ) baz\"))",
          "1703:   end",
          "1705:   def test_new_attribute_escaping",
          "1706:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1707:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "1709:     assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1710:     assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "1712:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
          "1713:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
          "1714:   end",
          "1716:   def test_multiline_new_attribute",
          "1717:     assert_equal(\"<a a='b' c='d'>bar</a>\\n\", render(\"%a(a='b'\\n  c='d') bar\"))",
          "1718:     assert_equal(\"<a a='b' b='c' c='d' d='e' e='f' f='j'>bar</a>\\n\",",
          "1719:       render(\"%a(a='b' b='c'\\n  c='d' d=e\\n  e='f' f='j') bar\", :locals => {:e => 'e'}))",
          "1720:   end",
          "1722:   def test_new_and_old_attributes",
          "1723:     assert_equal(\"<a a='b' c='d'>bar</a>\\n\", render(\"%a(a='b'){:c => 'd'} bar\"))",
          "1724:     assert_equal(\"<a a='b' c='d'>bar</a>\\n\", render(\"%a{:c => 'd'}(a='b') bar\"))",
          "1725:     assert_equal(\"<a a='b' c='d'>bar</a>\\n\", render(\"%a(c='d'){:a => 'b'} bar\"))",
          "1726:     assert_equal(\"<a a='b' c='d'>bar</a>\\n\", render(\"%a{:a => 'b'}(c='d') bar\"))",
          "1728:     # Old-style always takes precedence over new-style,",
          "1729:     # because theoretically old-style could have arbitrary end-of-method-call syntax.",
          "1730:     assert_equal(\"<a a='b'>bar</a>\\n\", render(\"%a{:a => 'b'}(a='d') bar\"))",
          "1731:     assert_equal(\"<a a='b'>bar</a>\\n\", render(\"%a(a='d'){:a => 'b'} bar\"))",
          "1733:     assert_equal(\"<a a='b' b='c' c='d' d='e'>bar</a>\\n\",",
          "1734:       render(\"%a{:a => 'b',\\n:b => 'c'}(c='d'\\nd='e') bar\"))",
          "1736:     locals = {:b => 'b', :d => 'd'}",
          "1737:     assert_equal(\"<p a='b' c='d'></p>\\n\", render(\"%p{:a => b}(c=d)\", :locals => locals))",
          "1738:     assert_equal(\"<p a='b' c='d'></p>\\n\", render(\"%p(a=b){:c => d}\", :locals => locals))",
          "1739:   end",
          "1741:   # Ruby Multiline",
          "1743:   def test_silent_ruby_multiline",
          "1744:     assert_equal(<<HTML, render(<<HAML))",
          "1745: bar, baz, bang",
          "1746: <p>foo</p>",
          "1747: HTML",
          "1748: - foo = [\"bar\",",
          "1749:          \"baz\",",
          "1750:          \"bang\"]",
          "1751: = foo.join(\", \")",
          "1752: %p foo",
          "1753: HAML",
          "1754:   end",
          "1756:   def test_loud_ruby_multiline",
          "1757:     assert_equal(<<HTML, render(<<HAML))",
          "1758: bar, baz, bang",
          "1759: <p>foo</p>",
          "1760: <p>bar</p>",
          "1761: HTML",
          "1762: = [\"bar\",",
          "1763:    \"baz\",",
          "1764:    \"bang\"].join(\", \")",
          "1765: %p foo",
          "1766: %p bar",
          "1767: HAML",
          "1768:   end",
          "1770:   def test_ruby_multiline_with_punctuated_methods_is_continuation",
          "1771:     assert_equal(<<HTML, render(<<HAML))",
          "1772: bar, , true, bang",
          "1773: <p>foo</p>",
          "1774: <p>bar</p>",
          "1775: HTML",
          "1776: = [\"bar\",",
          "1777:    \"  \".strip!,",
          "1778:    \"\".empty?,",
          "1779:    \"bang\"].join(\", \")",
          "1780: %p foo",
          "1781: %p bar",
          "1782: HAML",
          "1783:   end",
          "1785:   def test_ruby_character_literals_are_not_continuation",
          "1786:     html = \",\\n,\\n<p>foo</p>\\n\"",
          "1787:     assert_equal(html, render(<<HAML))",
          "1788: = ?,",
          "1789: = ?\\,",
          "1790: %p foo",
          "1791: HAML",
          "1792:   end",
          "1794:   def test_escaped_loud_ruby_multiline",
          "1795:     assert_equal(<<HTML, render(<<HAML))",
          "1796: bar&lt;, baz, bang",
          "1797: <p>foo</p>",
          "1798: <p>bar</p>",
          "1799: HTML",
          "1800: &= [\"bar<\",",
          "1801:     \"baz\",",
          "1802:     \"bang\"].join(\", \")",
          "1803: %p foo",
          "1804: %p bar",
          "1805: HAML",
          "1806:   end",
          "1808:   def test_unescaped_loud_ruby_multiline",
          "1809:     assert_equal(<<HTML, render(<<HAML, :escape_html => true))",
          "1810: bar<, baz, bang",
          "1811: <p>foo</p>",
          "1812: <p>bar</p>",
          "1813: HTML",
          "1814: != [\"bar<\",",
          "1815:     \"baz\",",
          "1816:     \"bang\"].join(\", \")",
          "1817: %p foo",
          "1818: %p bar",
          "1819: HAML",
          "1820:   end",
          "1822:   def test_flattened_loud_ruby_multiline",
          "1823:     assert_equal(<<HTML, render(<<HAML))",
          "1824: <pre>bar&#x000A;baz&#x000A;bang</pre>",
          "1825: <p>foo</p>",
          "1826: <p>bar</p>",
          "1827: HTML",
          "1828: ~ \"<pre>\" + [\"bar\",",
          "1829:              \"baz\",",
          "1830:              \"bang\"].join(\"\\\\n\") + \"</pre>\"",
          "1831: %p foo",
          "1832: %p bar",
          "1833: HAML",
          "1834:   end",
          "1836:   def test_loud_ruby_multiline_with_block",
          "1837:     assert_equal(<<HTML, render(<<HAML))",
          "1838: #{%w[far faz fang]}",
          "1839: <p>foo</p>",
          "1840: <p>bar</p>",
          "1841: HTML",
          "1842: = [\"bar\",",
          "1843:    \"baz\",",
          "1844:    \"bang\"].map do |str|",
          "1845:   - str.gsub(\"ba\",",
          "1846:              \"fa\")",
          "1847: %p foo",
          "1848: %p bar",
          "1849: HAML",
          "1850:   end",
          "1852:   def test_silent_ruby_multiline_with_block",
          "1853:     assert_equal(<<HTML, render(<<HAML))",
          "1854: far",
          "1855: faz",
          "1856: fang",
          "1857: <p>foo</p>",
          "1858: <p>bar</p>",
          "1859: HTML",
          "1860: - [\"bar\",",
          "1861:    \"baz\",",
          "1862:    \"bang\"].map do |str|",
          "1863:   = str.gsub(\"ba\",",
          "1864:              \"fa\")",
          "1865: %p foo",
          "1866: %p bar",
          "1867: HAML",
          "1868:   end",
          "1870:   def test_ruby_multiline_in_tag",
          "1871:     assert_equal(<<HTML, render(<<HAML))",
          "1872: <p>foo, bar, baz</p>",
          "1873: <p>foo</p>",
          "1874: <p>bar</p>",
          "1875: HTML",
          "1876: %p= [\"foo\",",
          "1877:      \"bar\",",
          "1878:      \"baz\"].join(\", \")",
          "1879: %p foo",
          "1880: %p bar",
          "1881: HAML",
          "1882:   end",
          "1884:   def test_escaped_ruby_multiline_in_tag",
          "1885:     assert_equal(<<HTML, render(<<HAML))",
          "1886: <p>foo&lt;, bar, baz</p>",
          "1887: <p>foo</p>",
          "1888: <p>bar</p>",
          "1889: HTML",
          "1890: %p&= [\"foo<\",",
          "1891:       \"bar\",",
          "1892:       \"baz\"].join(\", \")",
          "1893: %p foo",
          "1894: %p bar",
          "1895: HAML",
          "1896:   end",
          "1898:   def test_unescaped_ruby_multiline_in_tag",
          "1899:     assert_equal(<<HTML, render(<<HAML, :escape_html => true))",
          "1900: <p>foo<, bar, baz</p>",
          "1901: <p>foo</p>",
          "1902: <p>bar</p>",
          "1903: HTML",
          "1904: %p!= [\"foo<\",",
          "1905:       \"bar\",",
          "1906:       \"baz\"].join(\", \")",
          "1907: %p foo",
          "1908: %p bar",
          "1909: HAML",
          "1910:   end",
          "1912:   def test_ruby_multiline_with_normal_multiline",
          "1913:     assert_equal(<<HTML, render(<<HAML))",
          "1914: foobarbar, baz, bang",
          "1915: <p>foo</p>",
          "1916: <p>bar</p>",
          "1917: HTML",
          "1918: = \"foo\" + |",
          "1919:   \"bar\" + |",
          "1920:   [\"bar\", |",
          "1921:    \"baz\",",
          "1922:    \"bang\"].join(\", \")",
          "1923: %p foo",
          "1924: %p bar",
          "1925: HAML",
          "1926:   end",
          "1928:   def test_ruby_multiline_after_filter",
          "1929:     assert_equal(<<HTML, render(<<HAML))",
          "1930: foo",
          "1931: bar",
          "1932: bar, baz, bang",
          "1933: <p>foo</p>",
          "1934: <p>bar</p>",
          "1935: HTML",
          "1936: :plain",
          "1937:   foo",
          "1938:   bar",
          "1939: = [\"bar\",",
          "1940:    \"baz\",",
          "1941:    \"bang\"].join(\", \")",
          "1942: %p foo",
          "1943: %p bar",
          "1944: HAML",
          "1945:   end",
          "1947:   # Encodings",
          "1949:   def test_utf_8_bom",
          "1950:     assert_equal <<HTML, render(<<HAML)",
          "1951: <div class='foo'>",
          "1952:   <p>baz</p>",
          "1953: </div>",
          "1954: HTML",
          "1955: \\xEF\\xBB\\xBF.foo",
          "1956:   %p baz",
          "1957: HAML",
          "1958:   end",
          "1960:   def test_default_encoding",
          "1961:     assert_equal(Encoding.find(\"utf-8\"), render(<<HAML.encode(\"us-ascii\")).encoding)",
          "1962: %p bar",
          "1963: %p foo",
          "1964: HAML",
          "1965:   end",
          "1967:   def test_fake_ascii_encoding",
          "1968:     assert_encoded_equal(<<HTML.force_encoding(\"ascii-8bit\"), render(<<HAML, :encoding => \"ascii-8bit\"))",
          "1969: <p>b\u00e2r</p>",
          "1970: <p>f\u00f6\u00f6</p>",
          "1971: HTML",
          "1972: %p b\u00e2r",
          "1973: %p f\u00f6\u00f6",
          "1974: HAML",
          "1975:   end",
          "1977:   def test_convert_template_render_proc",
          "1978:     assert_converts_template_properly {|e| e.render_proc.call}",
          "1979:   end",
          "1981:   def test_convert_template_render",
          "1982:     assert_converts_template_properly {|e| e.render}",
          "1983:   end",
          "1985:   def test_convert_template_def_method",
          "1986:     assert_converts_template_properly do |e|",
          "1987:       o = Object.new",
          "1988:       e.def_method(o, :render)",
          "1989:       o.render",
          "1990:     end",
          "1991:   end",
          "1993:   def test_encoding_error",
          "1994:     render(\"foo\\nbar\\nb\\xFEaz\".force_encoding(\"utf-8\"))",
          "1995:     assert(false, \"Expected exception\")",
          "1996:   rescue Haml::Error => e",
          "1997:     assert_equal(3, e.line)",
          "1998:     assert_match(/Invalid .* character/, e.message)",
          "1999:   end",
          "2001:   def test_ascii_incompatible_encoding_error",
          "2002:     template = \"foo\\nbar\\nb_z\".encode(\"utf-16le\")",
          "2003:     template[9] = \"\\xFE\".force_encoding(\"utf-16le\")",
          "2004:     render(template)",
          "2005:     assert(false, \"Expected exception\")",
          "2006:   rescue Haml::Error => e",
          "2007:     assert_equal(3, e.line)",
          "2008:     assert_match(/Invalid .* character/, e.message)",
          "2009:   end",
          "2011:   def test_same_coding_comment_as_encoding",
          "2012:     assert_renders_encoded(<<HTML, <<HAML)",
          "2013: <p>b\u00e2r</p>",
          "2014: <p>f\u00f6\u00f6</p>",
          "2015: HTML",
          "2016: -# coding: utf-8",
          "2017: %p b\u00e2r",
          "2018: %p f\u00f6\u00f6",
          "2019: HAML",
          "2020:   end",
          "2022:   def test_coding_comments",
          "2023:     assert_valid_encoding_comment(\"-# coding: ibm866\")",
          "2024:     assert_valid_encoding_comment(\"-# CodINg: IbM866\")",
          "2025:     assert_valid_encoding_comment(\"-#coding:ibm866\")",
          "2026:     assert_valid_encoding_comment(\"-# CodINg= ibm866\")",
          "2027:     assert_valid_encoding_comment(\"-# foo BAR FAOJcoding: ibm866\")",
          "2028:     assert_valid_encoding_comment(\"-# coding: ibm866 ASFJ (&(&#!$\")",
          "2029:     assert_valid_encoding_comment(\"-# -*- coding: ibm866\")",
          "2030:     assert_valid_encoding_comment(\"-# coding: ibm866 -*- coding: blah\")",
          "2031:     assert_valid_encoding_comment(\"-# -*- coding: ibm866 -*-\")",
          "2032:     assert_valid_encoding_comment(\"-# -*- encoding: ibm866 -*-\")",
          "2033:     assert_valid_encoding_comment('-# -*- coding: \"ibm866\" -*-')",
          "2034:     assert_valid_encoding_comment(\"-#-*-coding:ibm866-*-\")",
          "2035:     assert_valid_encoding_comment(\"-#-*-coding:ibm866-*-\")",
          "2036:     assert_valid_encoding_comment(\"-# -*- foo: bar; coding: ibm866; baz: bang -*-\")",
          "2037:     assert_valid_encoding_comment(\"-# foo bar coding: baz -*- coding: ibm866 -*-\")",
          "2038:     assert_valid_encoding_comment(\"-# -*- coding: ibm866 -*- foo bar coding: baz\")",
          "2039:   end",
          "2041:   def test_different_coding_than_system",
          "2042:     assert_renders_encoded(<<HTML.encode(\"IBM866\"), <<HAML.encode(\"IBM866\"))",
          "2043: <p>\u0442\u0410\u042c</p>",
          "2044: HTML",
          "2045: %p \u0442\u0410\u042c",
          "2046: HAML",
          "2047:   end",
          "2049:   def test_block_spacing",
          "2050:     begin",
          "2051:       assert render(<<-HAML)",
          "2052: - foo = [\"bar\", \"baz\", \"kni\"]",
          "2053: - foo.each do | item |",
          "2054:   = item",
          "2055: HAML",
          "2056:     rescue ::SyntaxError",
          "2057:       flunk(\"Should not have raised syntax error\")",
          "2058:     end",
          "2059:   end",
          "2061:   def test_tracing",
          "2062:     result = render('%p{:class => \"hello\"}', :trace => true, :filename => 'foo').strip",
          "2063:     assert_equal \"<p class='hello' data-trace='foo:1'></p>\", result",
          "2064:   end",
          "2066:   private",
          "2068:   def assert_valid_encoding_comment(comment)",
          "2069:     assert_renders_encoded(<<HTML.encode(\"IBM866\"), <<HAML.encode(\"IBM866\").force_encoding(\"UTF-8\"))",
          "2070: <p>\u0416\u041b\u042b</p>",
          "2071: <p>\u0442\u0410\u042c</p>",
          "2072: HTML",
          "2073: #{comment}",
          "2074: %p \u0416\u041b\u042b",
          "2075: %p \u0442\u0410\u042c",
          "2076: HAML",
          "2077:   end",
          "2079:   def assert_converts_template_properly",
          "2080:     engine = Haml::Engine.new(<<HAML.encode(\"iso-8859-1\"), :encoding => \"macRoman\")",
          "2081: %p b\u00e2r",
          "2082: %p f\u00f6\u00f6",
          "2083: HAML",
          "2084:     assert_encoded_equal(<<HTML.encode(\"macRoman\"), yield(engine))",
          "2085: <p>b\u00e2r</p>",
          "2086: <p>f\u00f6\u00f6</p>",
          "2087: HTML",
          "2088:   end",
          "2090:   def assert_renders_encoded(html, haml)",
          "2091:     result = render(haml)",
          "2092:     assert_encoded_equal html, result",
          "2093:   end",
          "2095:   def assert_encoded_equal(expected, actual)",
          "2096:     assert_equal expected.encoding, actual.encoding",
          "2097:     assert_equal expected, actual",
          "2098:   end",
          "2099: end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0086ec86df3b26012a7b38b532b56b7eb60cbfc",
      "candidate_info": {
        "commit_hash": "d0086ec86df3b26012a7b38b532b56b7eb60cbfc",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/d0086ec86df3b26012a7b38b532b56b7eb60cbfc",
        "files": [
          "lib/haml/helpers.rb",
          "test/engine_test.rb",
          "test/pretty_engine_test.rb",
          "test/pretty_results/just_stuff.xhtml",
          "test/results/just_stuff.xhtml"
        ],
        "message": "Escape `'` to `&#39;` instead of `&#039;`\n\nto unify specification with CGI.escapeHTML.",
        "before_after_code_files": [
          "lib/haml/helpers.rb||lib/haml/helpers.rb",
          "test/engine_test.rb||test/engine_test.rb",
          "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
          "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
          "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb",
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
            "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
            "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
          ],
          "candidate": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb",
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
            "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
            "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
          ]
        }
      },
      "candidate_diff": {
        "lib/haml/helpers.rb||lib/haml/helpers.rb": [
          "File: lib/haml/helpers.rb -> lib/haml/helpers.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:     end",
          "596:     # Characters that need to be escaped to HTML entities from user input",
          "599:     HTML_ESCAPE_REGEX = /['\"><&]/",
          "",
          "[Removed Lines]",
          "597:     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#039;' }",
          "",
          "[Added Lines]",
          "597:     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#39;' }",
          "",
          "---------------"
        ],
        "test/engine_test.rb||test/engine_test.rb": [
          "File: test/engine_test.rb -> test/engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:   def test_attr_wrapper",
          "1128:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1129:     assert_equal(\"<p escaped=\\\"quo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1132:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1133:   end",
          "",
          "[Removed Lines]",
          "1130:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1131:     assert_equal(\"<p escaped=\\\"q&#039;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "[Added Lines]",
          "1130:     assert_equal(\"<p escaped=\\\"quo&#39;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1131:     assert_equal(\"<p escaped=\\\"q&#39;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1534:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1535:         :hyphenate_data_attrs => false))",
          "1538:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1539:         :hyphenate_data_attrs => false)) #'",
          "1540:   end",
          "",
          "[Removed Lines]",
          "1537:     assert_equal(\"<div data-foo='Here&#039;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "[Added Lines]",
          "1537:     assert_equal(\"<div data-foo='Here&#39;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1698:   def test_new_attribute_parsing",
          "1699:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1700:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1702:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "1704:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1705:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "1706:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
          "",
          "[Removed Lines]",
          "1701:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1703:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "[Added Lines]",
          "1701:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1703:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1713:     assert_equal(%Q{<a a='foo &quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1714:     assert_equal(%Q{<a a='foo \\\\&quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "1719:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
          "1720:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
          "",
          "[Removed Lines]",
          "1716:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1717:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "[Added Lines]",
          "1716:     assert_equal(%Q{<a a='foo &#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1717:     assert_equal(%Q{<a a='foo \\\\&#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "---------------"
        ],
        "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
          "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:   def test_attr_wrapper",
          "1130:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1131:     assert_equal(\"<p escaped=\\\"quo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1134:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1135:   end",
          "",
          "[Removed Lines]",
          "1132:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped=\\\"q&#039;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "[Added Lines]",
          "1132:     assert_equal(\"<p escaped=\\\"quo&#39;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped=\\\"q&#39;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1527:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1528:         :hyphenate_data_attrs => false))",
          "1531:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1532:         :hyphenate_data_attrs => false)) #'",
          "1533:   end",
          "",
          "[Removed Lines]",
          "1530:     assert_equal(\"<div data-foo='Here&#039;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "[Added Lines]",
          "1530:     assert_equal(\"<div data-foo='Here&#39;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1691:   def test_new_attribute_parsing",
          "1692:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1693:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1695:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "1697:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1698:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "1699:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
          "",
          "[Removed Lines]",
          "1694:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1696:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "[Added Lines]",
          "1694:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1696:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1706:     assert_equal(%Q{<a a='foo &quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1707:     assert_equal(%Q{<a a='foo \\\\&quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "1712:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
          "1713:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
          "",
          "[Removed Lines]",
          "1709:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1710:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "[Added Lines]",
          "1709:     assert_equal(%Q{<a a='foo &#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1710:     assert_equal(%Q{<a a='foo \\\\&#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "---------------"
        ],
        "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml": [
          "File: test/pretty_results/just_stuff.xhtml -> test/pretty_results/just_stuff.xhtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
          "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
          "10: Embedded? false!",
          "11: Embedded? true!",
          "12: Embedded? true!",
          "",
          "[Removed Lines]",
          "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
          "",
          "[Added Lines]",
          "9: <strong apos='Foo&#39;s bar!'>Boo!</strong>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: <p class='article quux qux' id='article_1'>Blump</p>",
          "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
          "63: Woah inner quotes",
          "65: <p class='dynamic_self_closing' dyn='3' />",
          "66: <body>",
          "67:   hello",
          "",
          "[Removed Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
          "",
          "[Added Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#39;'></p>",
          "",
          "---------------"
        ],
        "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml": [
          "File: test/results/just_stuff.xhtml -> test/results/just_stuff.xhtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
          "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
          "10: Embedded? false!",
          "11: Embedded? true!",
          "12: Embedded? true!",
          "",
          "[Removed Lines]",
          "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
          "",
          "[Added Lines]",
          "9: <strong apos='Foo&#39;s bar!'>Boo!</strong>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: <p class='article quux qux' id='article_1'>Blump</p>",
          "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
          "63: Woah inner quotes",
          "65: <p class='dynamic_self_closing' dyn='3' />",
          "66: <body>",
          "67: hello",
          "",
          "[Removed Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
          "",
          "[Added Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#39;'></p>",
          "",
          "---------------"
        ]
      }
    }
  ]
}