{
  "cve_id": "CVE-2020-11053",
  "cve_desc": "In OAuth2 Proxy before 5.1.1, there is an open redirect vulnerability. Users can provide a redirect address for the proxy to send the authenticated user to at the end of the authentication flow. This is expected to be the original URL that the user was trying to access. This redirect URL is checked within the proxy and validated before redirecting the user to prevent malicious actors providing redirects to potentially harmful sites. However, by crafting a redirect URL with HTML encoded whitespace characters the validation could be bypassed and allow a redirect to any URL provided. This has been patched in 5.1.1.",
  "repo": "oauth2-proxy/oauth2-proxy",
  "patch_hash": "0d5fa211df8ef2449347a56b22c779eb8d894c43",
  "patch_info": {
    "commit_hash": "0d5fa211df8ef2449347a56b22c779eb8d894c43",
    "repo": "oauth2-proxy/oauth2-proxy",
    "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/0d5fa211df8ef2449347a56b22c779eb8d894c43",
    "files": [
      "oauthproxy.go",
      "oauthproxy_test.go"
    ],
    "message": "Merge pull request from GHSA-j7px-6hwj-hpjg",
    "before_after_code_files": [
      "oauthproxy.go||oauthproxy.go",
      "oauthproxy_test.go||oauthproxy_test.go"
    ]
  },
  "patch_diff": {
    "oauthproxy.go||oauthproxy.go": [
      "File: oauthproxy.go -> oauthproxy.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: var (",
      "59:  ErrNeedsLogin = errors.New(\"redirect to login page\")",
      "60: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:  invalidRedirectRegex = regexp.MustCompile(`^/(\\s|\\v)?(/|\\\\)`)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "579: func (p *OAuthProxy) IsValidRedirect(redirect string) bool {",
      "580:  switch {",
      "582:   return true",
      "583:  case strings.HasPrefix(redirect, \"http://\") || strings.HasPrefix(redirect, \"https://\"):",
      "584:   redirectURL, err := url.Parse(redirect)",
      "",
      "[Removed Lines]",
      "581:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !strings.HasPrefix(redirect, \"/\\\\\"):",
      "",
      "[Added Lines]",
      "585:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !invalidRedirectRegex.MatchString(redirect):",
      "",
      "---------------"
    ],
    "oauthproxy_test.go||oauthproxy_test.go": [
      "File: oauthproxy_test.go -> oauthproxy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "322:    Redirect:       \"http://a.sub.anyport.bar:8081/redirect\",",
      "323:    ExpectedResult: true,",
      "324:   },",
      "325:  }",
      "327:  for _, tc := range testCases {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:   {",
      "326:    Desc:           \"openRedirect1\",",
      "327:    Redirect:       \"/\\\\evil.com\",",
      "328:    ExpectedResult: false,",
      "329:   },",
      "330:   {",
      "331:    Desc:           \"openRedirectSpace1\",",
      "332:    Redirect:       \"/ /evil.com\",",
      "333:    ExpectedResult: false,",
      "334:   },",
      "335:   {",
      "336:    Desc:           \"openRedirectSpace2\",",
      "337:    Redirect:       \"/ \\\\evil.com\",",
      "338:    ExpectedResult: false,",
      "339:   },",
      "340:   {",
      "341:    Desc:           \"openRedirectTab1\",",
      "342:    Redirect:       \"/\\t/evil.com\",",
      "343:    ExpectedResult: false,",
      "344:   },",
      "345:   {",
      "346:    Desc:           \"openRedirectTab2\",",
      "347:    Redirect:       \"/\\t\\\\evil.com\",",
      "348:    ExpectedResult: false,",
      "349:   },",
      "350:   {",
      "351:    Desc:           \"openRedirectVerticalTab1\",",
      "352:    Redirect:       \"/\\v/evil.com\",",
      "353:    ExpectedResult: false,",
      "354:   },",
      "355:   {",
      "356:    Desc:           \"openRedirectVerticalTab2\",",
      "357:    Redirect:       \"/\\v\\\\evil.com\",",
      "358:    ExpectedResult: false,",
      "359:   },",
      "360:   {",
      "361:    Desc:           \"openRedirectNewLine1\",",
      "362:    Redirect:       \"/\\n/evil.com\",",
      "363:    ExpectedResult: false,",
      "364:   },",
      "365:   {",
      "366:    Desc:           \"openRedirectNewLine2\",",
      "367:    Redirect:       \"/\\n\\\\evil.com\",",
      "368:    ExpectedResult: false,",
      "369:   },",
      "370:   {",
      "371:    Desc:           \"openRedirectCarriageReturn1\",",
      "372:    Redirect:       \"/\\r/evil.com\",",
      "373:    ExpectedResult: false,",
      "374:   },",
      "375:   {",
      "376:    Desc:           \"openRedirectCarriageReturn2\",",
      "377:    Redirect:       \"/\\r\\\\evil.com\",",
      "378:    ExpectedResult: false,",
      "379:   },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73fc7706bca4c4be241006c7f0ac2bbcaa160ec0",
      "candidate_info": {
        "commit_hash": "73fc7706bca4c4be241006c7f0ac2bbcaa160ec0",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/73fc7706bca4c4be241006c7f0ac2bbcaa160ec0",
        "files": [
          "oauthproxy.go",
          "oauthproxy_test.go"
        ],
        "message": "Figure out final app redirect URL with proxy aware request utils",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/ip\"",
          "25:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/logger\"",
          "26:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/middleware\"",
          "27:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/sessions\"",
          "28:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/upstream\"",
          "30:  \"github.com/oauth2-proxy/oauth2-proxy/v7/providers\"",
          "31: )",
          "",
          "[Removed Lines]",
          "29:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/util\"",
          "",
          "[Added Lines]",
          "27:  requestutil \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/requests/util\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  SetAuthorization     bool",
          "99:  PassAuthorization    bool",
          "100:  PreferEmailToUser    bool",
          "102:  skipAuthPreflight    bool",
          "103:  skipJwtBearerTokens  bool",
          "104:  templates            *template.Template",
          "",
          "[Removed Lines]",
          "101:  ReverseProxy         bool",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   UserInfoPath:      fmt.Sprintf(\"%s/userinfo\", opts.ProxyPrefix),",
          "203:   ProxyPrefix:          opts.ProxyPrefix,",
          "205:   provider:             opts.GetProvider(),",
          "206:   providerNameOverride: opts.ProviderName,",
          "207:   sessionStore:         sessionStore,",
          "",
          "[Removed Lines]",
          "204:   ReverseProxy:         opts.ReverseProxy,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233: func buildPreAuthChain(opts *options.Options) (alice.Chain, error) {",
          "236:  if opts.ForceHTTPS {",
          "237:   _, httpsPort, err := net.SplitHostPort(opts.HTTPSAddress)",
          "",
          "[Removed Lines]",
          "234:  chain := alice.New(middleware.NewScope(opts))",
          "",
          "[Added Lines]",
          "232:  chain := alice.New(middleware.NewScope(opts.ReverseProxy))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "368:  return routes, nil",
          "369: }",
          "375:  if p.redirectURL.Host != \"\" {",
          "376:   return p.redirectURL.String()",
          "",
          "[Removed Lines]",
          "373: func (p *OAuthProxy) GetRedirectURI(host string) string {",
          "",
          "[Added Lines]",
          "371: func (p *OAuthProxy) GetOAuthRedirectURI(host string) string {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "391:  if code == \"\" {",
          "392:   return nil, providers.ErrMissingCode",
          "393:  }",
          "395:  s, err := p.provider.Redeem(ctx, redirectURI, code)",
          "396:  if err != nil {",
          "397:   return nil, err",
          "",
          "[Removed Lines]",
          "394:  redirectURI := p.GetRedirectURI(host)",
          "",
          "[Added Lines]",
          "392:  redirectURI := p.GetOAuthRedirectURI(host)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "420:  cookieDomain := cookies.GetCookieDomain(req, p.CookieDomains)",
          "422:  if cookieDomain != \"\" {",
          "424:   if h, _, err := net.SplitHostPort(domain); err == nil {",
          "425:    domain = h",
          "426:   }",
          "",
          "[Removed Lines]",
          "423:   domain := util.GetRequestHost(req)",
          "",
          "[Added Lines]",
          "421:   domain := requestutil.GetRequestHost(req)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "509:  }",
          "510:  rw.WriteHeader(code)",
          "513:  if err != nil {",
          "514:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "515:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "[Removed Lines]",
          "512:  redirectURL, err := p.GetRedirect(req)",
          "",
          "[Added Lines]",
          "510:  redirectURL, err := p.GetAppRedirect(req)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "568:  return \"\", false",
          "569: }",
          "575:  if err != nil {",
          "577:  }",
          "597:  }",
          "600: }",
          "607:   uri = \"/\"",
          "608:  }",
          "611: }",
          "",
          "[Removed Lines]",
          "573: func (p *OAuthProxy) GetRedirect(req *http.Request) (redirect string, err error) {",
          "574:  err = req.ParseForm()",
          "576:   return",
          "579:  redirect = req.Header.Get(\"X-Auth-Request-Redirect\")",
          "580:  if req.Form.Get(\"rd\") != \"\" {",
          "581:   redirect = req.Form.Get(\"rd\")",
          "582:  }",
          "587:  if redirect == \"\" && isForwardedRequest(req, p.ReverseProxy) {",
          "588:   redirect = p.getRedirectFromForwardHeaders(req)",
          "589:  }",
          "590:  if !p.IsValidRedirect(redirect) {",
          "592:   redirect = req.URL.RequestURI()",
          "594:   if strings.HasPrefix(redirect, fmt.Sprintf(\"%s/\", p.ProxyPrefix)) {",
          "595:    redirect = \"/\"",
          "596:   }",
          "599:  return",
          "603: func (p *OAuthProxy) getRedirectFromForwardHeaders(req *http.Request) string {",
          "604:  uri := util.GetRequestURI(req)",
          "606:  if strings.HasPrefix(uri, fmt.Sprintf(\"%s/\", p.ProxyPrefix)) {",
          "610:  return fmt.Sprintf(\"%s://%s%s\", util.GetRequestProto(req), util.GetRequestHost(req), uri)",
          "",
          "[Added Lines]",
          "579: func (p *OAuthProxy) GetAppRedirect(req *http.Request) (string, error) {",
          "580:  err := req.ParseForm()",
          "582:   return \"\", err",
          "583:  }",
          "587:  type redirectGetter func(req *http.Request) string",
          "588:  for _, rdGetter := range []redirectGetter{",
          "589:   p.getRdQuerystringRedirect,",
          "590:   p.getXAuthRequestRedirect,",
          "591:   p.getXForwardedHeadersRedirect,",
          "592:   p.getURIRedirect,",
          "593:  } {",
          "594:   if redirect := rdGetter(req); redirect != \"\" {",
          "595:    return redirect, nil",
          "596:   }",
          "599:  return \"/\", nil",
          "600: }",
          "602: func isForwardedRequest(req *http.Request) bool {",
          "603:  return requestutil.IsProxied(req) &&",
          "604:   req.Host != requestutil.GetRequestHost(req)",
          "605: }",
          "607: func (p *OAuthProxy) hasProxyPrefix(path string) bool {",
          "608:  return strings.HasPrefix(path, fmt.Sprintf(\"%s/\", p.ProxyPrefix))",
          "609: }",
          "613: func (p *OAuthProxy) getRdQuerystringRedirect(req *http.Request) string {",
          "614:  redirect := req.Form.Get(\"rd\")",
          "615:  if p.IsValidRedirect(redirect) {",
          "616:   return redirect",
          "618:  return \"\"",
          "619: }",
          "623: func (p *OAuthProxy) getXAuthRequestRedirect(req *http.Request) string {",
          "624:  redirect := req.Header.Get(\"X-Auth-Request-Redirect\")",
          "625:  if p.IsValidRedirect(redirect) {",
          "626:   return redirect",
          "627:  }",
          "628:  return \"\"",
          "634: func (p *OAuthProxy) getXForwardedHeadersRedirect(req *http.Request) string {",
          "635:  if !isForwardedRequest(req) {",
          "636:   return \"\"",
          "637:  }",
          "639:  uri := requestutil.GetRequestURI(req)",
          "640:  if p.hasProxyPrefix(uri) {",
          "644:  redirect := fmt.Sprintf(",
          "645:   \"%s://%s%s\",",
          "646:   requestutil.GetRequestProto(req),",
          "647:   requestutil.GetRequestHost(req),",
          "648:   uri,",
          "649:  )",
          "651:  if p.IsValidRedirect(redirect) {",
          "652:   return redirect",
          "653:  }",
          "654:  return \"\"",
          "655: }",
          "661: func (p *OAuthProxy) getURIRedirect(req *http.Request) string {",
          "662:  redirect := requestutil.GetRequestURI(req)",
          "663:  if !p.IsValidRedirect(redirect) {",
          "664:   redirect = req.URL.RequestURI()",
          "665:  }",
          "667:  if p.hasProxyPrefix(redirect) {",
          "668:   return \"/\"",
          "669:  }",
          "670:  return redirect",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "707:  return false",
          "708: }",
          "717: var noCacheHeaders = map[string]string{",
          "718:  \"Expires\":         time.Unix(0, 0).Format(time.RFC1123),",
          "",
          "[Removed Lines]",
          "711: func isForwardedRequest(req *http.Request, reverseProxy bool) bool {",
          "712:  isForwarded := req.Host != util.GetRequestHost(req)",
          "713:  return isForwarded && reverseProxy",
          "714: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "783: func (p *OAuthProxy) SignIn(rw http.ResponseWriter, req *http.Request) {",
          "785:  if err != nil {",
          "786:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "787:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "[Removed Lines]",
          "784:  redirect, err := p.GetRedirect(req)",
          "",
          "[Added Lines]",
          "838:  redirect, err := p.GetAppRedirect(req)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "841: func (p *OAuthProxy) SignOut(rw http.ResponseWriter, req *http.Request) {",
          "843:  if err != nil {",
          "844:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "845:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "[Removed Lines]",
          "842:  redirect, err := p.GetRedirect(req)",
          "",
          "[Added Lines]",
          "896:  redirect, err := p.GetAppRedirect(req)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "864:   return",
          "865:  }",
          "866:  p.SetCSRFCookie(rw, req, nonce)",
          "868:  if err != nil {",
          "869:   logger.Errorf(\"Error obtaining redirect: %v\", err)",
          "870:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "871:   return",
          "872:  }",
          "874:  http.Redirect(rw, req, p.provider.GetLoginURL(redirectURI, fmt.Sprintf(\"%v:%v\", nonce, redirect)), http.StatusFound)",
          "875: }",
          "",
          "[Removed Lines]",
          "867:  redirect, err := p.GetRedirect(req)",
          "873:  redirectURI := p.GetRedirectURI(util.GetRequestHost(req))",
          "",
          "[Added Lines]",
          "921:  redirect, err := p.GetAppRedirect(req)",
          "927:  redirectURI := p.GetOAuthRedirectURI(requestutil.GetRequestHost(req))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "893:   return",
          "894:  }",
          "897:  if err != nil {",
          "898:   logger.Errorf(\"Error redeeming code during OAuth2 callback: %v\", err)",
          "899:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", \"Internal Error\")",
          "",
          "[Removed Lines]",
          "896:  session, err := p.redeemCode(req.Context(), util.GetRequestHost(req), req.Form.Get(\"code\"))",
          "",
          "[Added Lines]",
          "950:  session, err := p.redeemCode(req.Context(), requestutil.GetRequestHost(req), req.Form.Get(\"code\"))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1024:  var session *sessionsapi.SessionState",
          "1026:  getSession := p.sessionChain.Then(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {",
          "1028:  }))",
          "1029:  getSession.ServeHTTP(rw, req)",
          "",
          "[Removed Lines]",
          "1027:   session = middleware.GetRequestScope(req).Session",
          "",
          "[Added Lines]",
          "1081:   session = middlewareapi.GetRequestScope(req).Session",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"github.com/coreos/go-oidc\"",
          "21:  \"github.com/mbland/hmacauth\"",
          "22:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/options\"",
          "23:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/sessions\"",
          "24:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/logger\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/middleware\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1751: func TestGetRedirect(t *testing.T) {",
          "1752:  opts := baseTestOptions()",
          "1755:  err := validation.Validate(opts)",
          "1756:  assert.NoError(t, err)",
          "1757:  require.NotEmpty(t, opts.ProxyPrefix)",
          "",
          "[Removed Lines]",
          "1753:  opts.WhitelistDomains = append(opts.WhitelistDomains, \".example.com\")",
          "1754:  opts.WhitelistDomains = append(opts.WhitelistDomains, \".example.com:8443\")",
          "",
          "[Added Lines]",
          "1754:  opts.WhitelistDomains = append(opts.WhitelistDomains, \".example.com\", \".example.com:8443\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1854:    url:  \"https://oauth.example.com/foo/bar\",",
          "1855:    headers: map[string]string{",
          "1856:     \"X-Auth-Request-Redirect\": \"https://a-service.example.com/foo/bar\",",
          "1860:    },",
          "1861:    reverseProxy:     true,",
          "1862:    expectedRedirect: \"https://a-service.example.com/foo/bar\",",
          "",
          "[Removed Lines]",
          "1857:     \"X-Forwarded-Proto\":       \"\",",
          "1858:     \"X-Forwarded-Host\":        \"\",",
          "1859:     \"X-Forwarded-Uri\":         \"\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1884:    name: \"proxied request with rd query string and some headers set redirects to proxied URL on rd query string\",",
          "1885:    url:  \"https://oauth.example.com/foo/bar?rd=https%3A%2F%2Fa%2Dservice%2Eexample%2Ecom%2Ffoo%2Fbaz\",",
          "1886:    headers: map[string]string{",
          "1891:    },",
          "1892:    reverseProxy:     true,",
          "1893:    expectedRedirect: \"https://a-service.example.com/foo/baz\",",
          "",
          "[Removed Lines]",
          "1887:     \"X-Auth-Request-Redirect\": \"\",",
          "1888:     \"X-Forwarded-Proto\":       \"https\",",
          "1889:     \"X-Forwarded-Host\":        \"another-service.example.com\",",
          "1890:     \"X-Forwarded-Uri\":         \"/seasons/greetings\",",
          "",
          "[Added Lines]",
          "1884:     \"X-Forwarded-Proto\": \"https\",",
          "1885:     \"X-Forwarded-Host\":  \"another-service.example.com\",",
          "1886:     \"X-Forwarded-Uri\":   \"/seasons/greetings\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1901:      req.Header.Add(header, value)",
          "1902:     }",
          "1903:    }",
          "1907:    assert.NoError(t, err)",
          "1908:    assert.Equal(t, tt.expectedRedirect, redirect)",
          "",
          "[Removed Lines]",
          "1904:    proxy.ReverseProxy = tt.reverseProxy",
          "1905:    redirect, err := proxy.GetRedirect(req)",
          "",
          "[Added Lines]",
          "1900:    req = middleware.AddRequestScope(req, &middleware.RequestScope{",
          "1901:     ReverseProxy: tt.reverseProxy,",
          "1902:    })",
          "1903:    redirect, err := proxy.GetAppRedirect(req)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "183cb124a4a2e825f44865aef7c18a29f9536796",
      "candidate_info": {
        "commit_hash": "183cb124a4a2e825f44865aef7c18a29f9536796",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/183cb124a4a2e825f44865aef7c18a29f9536796",
        "files": [
          "CHANGELOG.md",
          "docs/configuration/configuration.md",
          "oauthproxy.go",
          "pkg/apis/options/options.go",
          "pkg/validation/allowlist.go",
          "pkg/validation/allowlist_test.go",
          "pkg/validation/options.go",
          "pkg/validation/options_test.go"
        ],
        "message": "Support HTTP method based allowlists",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "pkg/apis/options/options.go||pkg/apis/options/options.go",
          "pkg/validation/allowlist.go||pkg/validation/allowlist.go",
          "pkg/validation/allowlist_test.go||pkg/validation/allowlist_test.go",
          "pkg/validation/options.go||pkg/validation/options.go",
          "pkg/validation/options_test.go||pkg/validation/options_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  invalidRedirectRegex = regexp.MustCompile(`[/\\\\](?:[\\s\\v]*|\\.{1,2})[/\\\\]`)",
          "49: )",
          "52: type OAuthProxy struct {",
          "53:  CookieSeed     string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: type allowedRoute struct {",
          "53:  method    string",
          "54:  pathRegex *regexp.Regexp",
          "55: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  AuthOnlyPath      string",
          "71:  UserInfoPath      string",
          "73:  redirectURL             *url.URL // the url to receive requests at",
          "74:  whitelistDomains        []string",
          "75:  provider                providers.Provider",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:  allowedRoutes           []*allowedRoute",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:  SetAuthorization        bool",
          "91:  PassAuthorization       bool",
          "92:  PreferEmailToUser       bool",
          "94:  skipAuthPreflight       bool",
          "95:  skipAuthStripHeaders    bool",
          "96:  skipJwtBearerTokens     bool",
          "97:  mainJwtBearerVerifier   *oidc.IDTokenVerifier",
          "98:  extraJwtBearerVerifiers []*oidc.IDTokenVerifier",
          "100:  templates               *template.Template",
          "101:  realClientIPParser      ipapi.RealClientIPParser",
          "102:  trustedIPs              *ip.NetSet",
          "",
          "[Removed Lines]",
          "93:  skipAuthRegex           []string",
          "99:  compiledRegex           []*regexp.Regexp",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:   return nil, fmt.Errorf(\"error initialising upstream proxy: %v\", err)",
          "122:  }",
          "128:  if opts.SkipJwtBearerTokens {",
          "129:   logger.Printf(\"Skipping JWT tokens from configured OIDC issuer: %q\", opts.OIDCIssuerURL)",
          "130:   for _, issuer := range opts.ExtraJwtIssuers {",
          "",
          "[Removed Lines]",
          "124:  for _, u := range opts.GetCompiledRegex() {",
          "125:   logger.Printf(\"compiled skip-auth-regex => %q\", u)",
          "126:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:   }",
          "164:  }",
          "166:  sessionChain := buildSessionChain(opts, sessionStore, basicAuthValidator)",
          "168:  return &OAuthProxy{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  allowedRoutes, err := buildRoutesAllowlist(opts)",
          "168:  if err != nil {",
          "169:   return nil, err",
          "170:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "192:   sessionStore:            sessionStore,",
          "193:   serveMux:                upstreamProxy,",
          "194:   redirectURL:             redirectURL,",
          "195:   whitelistDomains:        opts.WhitelistDomains,",
          "197:   skipAuthPreflight:       opts.SkipAuthPreflight,",
          "198:   skipAuthStripHeaders:    opts.SkipAuthStripHeaders,",
          "199:   skipJwtBearerTokens:     opts.SkipJwtBearerTokens,",
          "200:   mainJwtBearerVerifier:   opts.GetOIDCVerifier(),",
          "201:   extraJwtBearerVerifiers: opts.GetJWTBearerVerifiers(),",
          "203:   realClientIPParser:      opts.GetRealClientIPParser(),",
          "204:   SetXAuthRequest:         opts.SetXAuthRequest,",
          "205:   PassBasicAuth:           opts.PassBasicAuth,",
          "",
          "[Removed Lines]",
          "196:   skipAuthRegex:           opts.SkipAuthRegex,",
          "202:   compiledRegex:           opts.GetCompiledRegex(),",
          "",
          "[Added Lines]",
          "201:   allowedRoutes:           allowedRoutes,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "277:  return msg",
          "278: }",
          "282: func (p *OAuthProxy) GetRedirectURI(host string) string {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288: func buildRoutesAllowlist(opts *options.Options) ([]*allowedRoute, error) {",
          "289:  var routes []*allowedRoute",
          "291:  for _, path := range opts.SkipAuthRegex {",
          "292:   compiledRegex, err := regexp.Compile(path)",
          "293:   if err != nil {",
          "294:    return nil, err",
          "295:   }",
          "296:   routes = append(routes, &allowedRoute{",
          "297:    method:    \"\",",
          "298:    pathRegex: compiledRegex,",
          "299:   })",
          "300:  }",
          "302:  for _, methodPath := range opts.SkipAuthRoutes {",
          "303:   var (",
          "304:    method string",
          "305:    path   string",
          "306:   )",
          "308:   parts := strings.Split(methodPath, \"=\")",
          "309:   if len(parts) == 1 {",
          "310:    method = \"\"",
          "311:    path = parts[0]",
          "312:   } else {",
          "313:    method = strings.ToUpper(parts[0])",
          "314:    path = strings.Join(parts[1:], \"=\")",
          "315:   }",
          "317:   compiledRegex, err := regexp.Compile(path)",
          "318:   if err != nil {",
          "319:    return nil, err",
          "320:   }",
          "321:   routes = append(routes, &allowedRoute{",
          "322:    method:    method,",
          "323:    pathRegex: compiledRegex,",
          "324:   })",
          "325:  }",
          "327:  return routes, nil",
          "328: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "584:  }",
          "585: }",
          "589:  isPreflightRequestAllowed := p.skipAuthPreflight && req.Method == \"OPTIONS\"",
          "591: }",
          "597:    return true",
          "598:   }",
          "599:  }",
          "",
          "[Removed Lines]",
          "588: func (p *OAuthProxy) IsWhitelistedRequest(req *http.Request) bool {",
          "590:  return isPreflightRequestAllowed || p.IsWhitelistedPath(req.URL.Path) || p.IsTrustedIP(req)",
          "594: func (p *OAuthProxy) IsWhitelistedPath(path string) bool {",
          "595:  for _, u := range p.compiledRegex {",
          "596:   if u.MatchString(path) {",
          "",
          "[Added Lines]",
          "638: func (p *OAuthProxy) IsAllowedRequest(req *http.Request) bool {",
          "640:  return isPreflightRequestAllowed || p.isAllowedRoute(req) || p.IsTrustedIP(req)",
          "644: func (p *OAuthProxy) isAllowedRoute(req *http.Request) bool {",
          "645:  for _, route := range p.allowedRoutes {",
          "646:   if (route.method == \"\" || req.Method == route.method) && route.pathRegex.MatchString(req.URL.Path) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "643:  switch path := req.URL.Path; {",
          "644:  case path == p.RobotsPath:",
          "645:   p.RobotsTxt(rw)",
          "647:   p.SkipAuthProxy(rw, req)",
          "648:  case path == p.SignInPath:",
          "649:   p.SignIn(rw, req)",
          "",
          "[Removed Lines]",
          "646:  case p.IsWhitelistedRequest(req):",
          "",
          "[Added Lines]",
          "696:  case p.IsAllowedRequest(req):",
          "",
          "---------------"
        ],
        "pkg/apis/options/options.go||pkg/apis/options/options.go": [
          "File: pkg/apis/options/options.go -> pkg/apis/options/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"crypto\"",
          "5:  \"net/url\"",
          "8:  oidc \"github.com/coreos/go-oidc\"",
          "9:  ipapi \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/ip\"",
          "",
          "[Removed Lines]",
          "6:  \"regexp\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:  UpstreamServers Upstreams `cfg:\",internal\"`",
          "69:  SkipAuthRegex         []string `flag:\"skip-auth-regex\" cfg:\"skip_auth_regex\"`",
          "70:  SkipAuthStripHeaders  bool     `flag:\"skip-auth-strip-headers\" cfg:\"skip_auth_strip_headers\"`",
          "71:  SkipJwtBearerTokens   bool     `flag:\"skip-jwt-bearer-tokens\" cfg:\"skip_jwt_bearer_tokens\"`",
          "72:  ExtraJwtIssuers       []string `flag:\"extra-jwt-issuers\" cfg:\"extra_jwt_issuers\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:  SkipAuthRoutes        []string `flag:\"skip-auth-route\" cfg:\"skip_auth_routes\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:  redirectURL        *url.URL",
          "118:  provider           providers.Provider",
          "119:  signatureData      *SignatureData",
          "120:  oidcVerifier       *oidc.IDTokenVerifier",
          "",
          "[Removed Lines]",
          "117:  compiledRegex      []*regexp.Regexp",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: func (o *Options) GetRedirectURL() *url.URL                        { return o.redirectURL }",
          "128: func (o *Options) GetProvider() providers.Provider                 { return o.provider }",
          "129: func (o *Options) GetSignatureData() *SignatureData                { return o.signatureData }",
          "130: func (o *Options) GetOIDCVerifier() *oidc.IDTokenVerifier          { return o.oidcVerifier }",
          "",
          "[Removed Lines]",
          "127: func (o *Options) GetCompiledRegex() []*regexp.Regexp              { return o.compiledRegex }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135: func (o *Options) SetRedirectURL(s *url.URL)                        { o.redirectURL = s }",
          "137: func (o *Options) SetProvider(s providers.Provider)                 { o.provider = s }",
          "138: func (o *Options) SetSignatureData(s *SignatureData)                { o.signatureData = s }",
          "139: func (o *Options) SetOIDCVerifier(s *oidc.IDTokenVerifier)          { o.oidcVerifier = s }",
          "",
          "[Removed Lines]",
          "136: func (o *Options) SetCompiledRegex(s []*regexp.Regexp)              { o.compiledRegex = s }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:  flagSet.Bool(\"pass-access-token\", false, \"pass OAuth access_token to upstream via X-Forwarded-Access-Token header\")",
          "196:  flagSet.Bool(\"pass-authorization-header\", false, \"pass the Authorization Header to upstream\")",
          "197:  flagSet.Bool(\"set-authorization-header\", false, \"set Authorization response headers (useful in Nginx auth_request mode)\")",
          "200:  flagSet.Bool(\"skip-provider-button\", false, \"will skip sign-in-page to directly reach the next step: oauth/start\")",
          "201:  flagSet.Bool(\"skip-auth-preflight\", false, \"will skip authentication for OPTIONS requests\")",
          "202:  flagSet.Bool(\"ssl-insecure-skip-verify\", false, \"skip validation of certificates presented when using HTTPS providers\")",
          "",
          "[Removed Lines]",
          "198:  flagSet.StringSlice(\"skip-auth-regex\", []string{}, \"bypass authentication for requests path's that match (may be given multiple times)\")",
          "199:  flagSet.Bool(\"skip-auth-strip-headers\", false, \"strips X-Forwarded-* style authentication headers & Authorization header if they would be set by oauth2-proxy for request paths in --skip-auth-regex\")",
          "",
          "[Added Lines]",
          "195:  flagSet.StringSlice(\"skip-auth-regex\", []string{}, \"(DEPRECATED for --skip-auth-route) bypass authentication for requests path's that match (may be given multiple times)\")",
          "196:  flagSet.StringSlice(\"skip-auth-route\", []string{}, \"bypass authentication for requests that match the method & path. Format: method=path_regex OR path_regex alone for all methods\")",
          "197:  flagSet.Bool(\"skip-auth-strip-headers\", false, \"strips `X-Forwarded-*` style authentication headers & `Authorization` header if they would be set by oauth2-proxy for allowlisted requests (`--skip-auth-route`, `--skip-auth-regex`, `--skip-auth-preflight`, `--trusted-ip`)\")",
          "",
          "---------------"
        ],
        "pkg/validation/allowlist.go||pkg/validation/allowlist.go": [
          "File: pkg/validation/allowlist.go -> pkg/validation/allowlist.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package validation",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"os\"",
          "6:  \"regexp\"",
          "7:  \"strings\"",
          "9:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/apis/options\"",
          "10:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/ip\"",
          "11: )",
          "13: func validateAllowlists(o *options.Options) []string {",
          "14:  msgs := []string{}",
          "16:  msgs = append(msgs, validateRoutes(o)...)",
          "17:  msgs = append(msgs, validateRegexes(o)...)",
          "18:  msgs = append(msgs, validateTrustedIPs(o)...)",
          "20:  if len(o.TrustedIPs) > 0 && o.ReverseProxy {",
          "21:   _, err := fmt.Fprintln(os.Stderr, \"WARNING: mixing --trusted-ip with --reverse-proxy is a potential security vulnerability. An attacker can inject a trusted IP into an X-Real-IP or X-Forwarded-For header if they aren't properly protected outside of oauth2-proxy\")",
          "22:   if err != nil {",
          "23:    panic(err)",
          "24:   }",
          "25:  }",
          "27:  return msgs",
          "28: }",
          "31: func validateRoutes(o *options.Options) []string {",
          "32:  msgs := []string{}",
          "33:  for _, route := range o.SkipAuthRoutes {",
          "34:   var regex string",
          "35:   parts := strings.Split(route, \"=\")",
          "36:   if len(parts) == 1 {",
          "37:    regex = parts[0]",
          "38:   } else {",
          "39:    regex = strings.Join(parts[1:], \"=\")",
          "40:   }",
          "41:   _, err := regexp.Compile(regex)",
          "42:   if err != nil {",
          "43:    msgs = append(msgs, fmt.Sprintf(\"error compiling regex /%s/: %v\", regex, err))",
          "44:   }",
          "45:  }",
          "46:  return msgs",
          "47: }",
          "50: func validateRegexes(o *options.Options) []string {",
          "51:  msgs := []string{}",
          "52:  for _, regex := range o.SkipAuthRegex {",
          "53:   _, err := regexp.Compile(regex)",
          "54:   if err != nil {",
          "55:    msgs = append(msgs, fmt.Sprintf(\"error compiling regex /%s/: %v\", regex, err))",
          "56:   }",
          "57:  }",
          "58:  return msgs",
          "59: }",
          "62: func validateTrustedIPs(o *options.Options) []string {",
          "63:  msgs := []string{}",
          "64:  for i, ipStr := range o.TrustedIPs {",
          "65:   if nil == ip.ParseIPNet(ipStr) {",
          "66:    msgs = append(msgs, fmt.Sprintf(\"trusted_ips[%d] (%s) could not be recognized\", i, ipStr))",
          "67:   }",
          "68:  }",
          "69:  return msgs",
          "70: }",
          "",
          "---------------"
        ],
        "pkg/validation/allowlist_test.go||pkg/validation/allowlist_test.go": [
          "File: pkg/validation/allowlist_test.go -> pkg/validation/allowlist_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package validation",
          "3: import (",
          "4:  \"testing\"",
          "6:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/apis/options\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "8: )",
          "10: func Test_validateAllowlists(t *testing.T) {",
          "11:  opts := &options.Options{",
          "12:   SkipAuthRoutes: []string{",
          "13:    \"POST=/foo/bar\",",
          "14:    \"PUT=^/foo/bar$\",",
          "15:   },",
          "16:   SkipAuthRegex: []string{\"/foo/baz\"},",
          "17:   TrustedIPs: []string{",
          "18:    \"10.32.0.1/32\",",
          "19:    \"43.36.201.0/24\",",
          "20:   },",
          "21:  }",
          "22:  assert.Equal(t, []string{}, validateAllowlists(opts))",
          "23: }",
          "25: func Test_validateRoutes(t *testing.T) {",
          "26:  testCases := map[string]struct {",
          "27:   Regexes  []string",
          "28:   Expected []string",
          "29:  }{",
          "30:   \"Valid regex routes\": {",
          "31:    Regexes: []string{",
          "32:     \"/foo\",",
          "33:     \"POST=/foo/bar\",",
          "34:     \"PUT=^/foo/bar$\",",
          "35:     \"DELETE=/crazy/(?:regex)?/[^/]+/stuff$\",",
          "36:    },",
          "37:    Expected: []string{},",
          "38:   },",
          "39:   \"Bad regexes do not compile\": {",
          "40:    Regexes: []string{",
          "41:     \"POST=/(foo\",",
          "42:     \"OPTIONS=/foo/bar)\",",
          "43:     \"GET=^]/foo/bar[$\",",
          "44:     \"GET=^]/foo/bar[$\",",
          "45:    },",
          "46:    Expected: []string{",
          "47:     \"error compiling regex //(foo/: error parsing regexp: missing closing ): `/(foo`\",",
          "48:     \"error compiling regex //foo/bar)/: error parsing regexp: unexpected ): `/foo/bar)`\",",
          "49:     \"error compiling regex /^]/foo/bar[$/: error parsing regexp: missing closing ]: `[$`\",",
          "50:     \"error compiling regex /^]/foo/bar[$/: error parsing regexp: missing closing ]: `[$`\",",
          "51:    },",
          "52:   },",
          "53:  }",
          "55:  for testName, tc := range testCases {",
          "56:   t.Run(testName, func(t *testing.T) {",
          "57:    opts := &options.Options{",
          "58:     SkipAuthRoutes: tc.Regexes,",
          "59:    }",
          "60:    msgs := validateRoutes(opts)",
          "61:    assert.Equal(t, tc.Expected, msgs)",
          "62:   })",
          "63:  }",
          "64: }",
          "66: func Test_validateRegexes(t *testing.T) {",
          "67:  testCases := map[string]struct {",
          "68:   Regexes  []string",
          "69:   Expected []string",
          "70:  }{",
          "71:   \"Valid regex routes\": {",
          "72:    Regexes: []string{",
          "73:     \"/foo\",",
          "74:     \"/foo/bar\",",
          "75:     \"^/foo/bar$\",",
          "76:     \"/crazy/(?:regex)?/[^/]+/stuff$\",",
          "77:    },",
          "78:    Expected: []string{},",
          "79:   },",
          "80:   \"Bad regexes do not compile\": {",
          "81:    Regexes: []string{",
          "82:     \"/(foo\",",
          "83:     \"/foo/bar)\",",
          "84:     \"^]/foo/bar[$\",",
          "85:     \"^]/foo/bar[$\",",
          "86:    },",
          "87:    Expected: []string{",
          "88:     \"error compiling regex //(foo/: error parsing regexp: missing closing ): `/(foo`\",",
          "89:     \"error compiling regex //foo/bar)/: error parsing regexp: unexpected ): `/foo/bar)`\",",
          "90:     \"error compiling regex /^]/foo/bar[$/: error parsing regexp: missing closing ]: `[$`\",",
          "91:     \"error compiling regex /^]/foo/bar[$/: error parsing regexp: missing closing ]: `[$`\",",
          "92:    },",
          "93:   },",
          "94:  }",
          "96:  for testName, tc := range testCases {",
          "97:   t.Run(testName, func(t *testing.T) {",
          "98:    opts := &options.Options{",
          "99:     SkipAuthRegex: tc.Regexes,",
          "100:    }",
          "101:    msgs := validateRegexes(opts)",
          "102:    assert.Equal(t, tc.Expected, msgs)",
          "103:   })",
          "104:  }",
          "105: }",
          "107: func Test_validateTrustedIPs(t *testing.T) {",
          "108:  testCases := map[string]struct {",
          "109:   TrustedIPs []string",
          "110:   Expected   []string",
          "111:  }{",
          "112:   \"Non-overlapping valid IPs\": {",
          "113:    TrustedIPs: []string{",
          "114:     \"127.0.0.1\",",
          "115:     \"10.32.0.1/32\",",
          "116:     \"43.36.201.0/24\",",
          "117:     \"::1\",",
          "118:     \"2a12:105:ee7:9234:0:0:0:0/64\",",
          "119:    },",
          "120:    Expected: []string{},",
          "121:   },",
          "122:   \"Overlapping valid IPs\": {",
          "123:    TrustedIPs: []string{",
          "124:     \"135.180.78.199\",",
          "125:     \"135.180.78.199/32\",",
          "126:     \"d910:a5a1:16f8:ddf5:e5b9:5cef:a65e:41f4\",",
          "127:     \"d910:a5a1:16f8:ddf5:e5b9:5cef:a65e:41f4/128\",",
          "128:    },",
          "129:    Expected: []string{},",
          "130:   },",
          "131:   \"Invalid IPs\": {",
          "132:    TrustedIPs: []string{\"[::1]\", \"alkwlkbn/32\"},",
          "133:    Expected: []string{",
          "134:     \"trusted_ips[0] ([::1]) could not be recognized\",",
          "135:     \"trusted_ips[1] (alkwlkbn/32) could not be recognized\",",
          "136:    },",
          "137:   },",
          "138:  }",
          "140:  for testName, tc := range testCases {",
          "141:   t.Run(testName, func(t *testing.T) {",
          "142:    opts := &options.Options{",
          "143:     TrustedIPs: tc.TrustedIPs,",
          "144:    }",
          "145:    msgs := validateTrustedIPs(opts)",
          "146:    assert.Equal(t, tc.Expected, msgs)",
          "147:   })",
          "148:  }",
          "149: }",
          "",
          "---------------"
        ],
        "pkg/validation/options.go||pkg/validation/options.go": [
          "File: pkg/validation/options.go -> pkg/validation/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"net/http\"",
          "10:  \"net/url\"",
          "11:  \"os\"",
          "13:  \"strings\"",
          "15:  \"github.com/coreos/go-oidc\"",
          "",
          "[Removed Lines]",
          "12:  \"regexp\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:  o.SetRedirectURL(redirectURL)",
          "186:  msgs = append(msgs, validateUpstreams(o.UpstreamServers)...)",
          "196:  msgs = parseProviderInfo(o, msgs)",
          "198:  if len(o.GoogleGroups) > 0 || o.GoogleAdminEmail != \"\" || o.GoogleServiceAccountJSON != \"\" {",
          "",
          "[Removed Lines]",
          "188:  for _, u := range o.SkipAuthRegex {",
          "189:   compiledRegex, err := regexp.Compile(u)",
          "190:   if err != nil {",
          "191:    msgs = append(msgs, fmt.Sprintf(\"error compiling regex=%q %s\", u, err))",
          "192:    continue",
          "193:   }",
          "194:   o.SetCompiledRegex(append(o.GetCompiledRegex(), compiledRegex))",
          "195:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:   })",
          "224:  }",
          "239:  if len(msgs) != 0 {",
          "240:   return fmt.Errorf(\"invalid configuration:\\n  %s\",",
          "",
          "[Removed Lines]",
          "226:  if len(o.TrustedIPs) > 0 && o.ReverseProxy {",
          "227:   _, err := fmt.Fprintln(os.Stderr, \"WARNING: trusting of IPs with --reverse-proxy poses risks if a header spoofing attack is possible.\")",
          "228:   if err != nil {",
          "229:    panic(err)",
          "230:   }",
          "231:  }",
          "233:  for i, ipStr := range o.TrustedIPs {",
          "234:   if nil == ip.ParseIPNet(ipStr) {",
          "235:    msgs = append(msgs, fmt.Sprintf(\"trusted_ips[%d] (%s) could not be recognized\", i, ipStr))",
          "236:   }",
          "237:  }",
          "",
          "[Added Lines]",
          "217:  msgs = append(msgs, validateAllowlists(o)...)",
          "",
          "---------------"
        ],
        "pkg/validation/options_test.go||pkg/validation/options_test.go": [
          "File: pkg/validation/options_test.go -> pkg/validation/options_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"crypto\"",
          "6:  \"io/ioutil\"",
          "7:  \"net/url\"",
          "8:  \"os\"",
          "",
          "[Removed Lines]",
          "5:  \"errors\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  if err != nil {",
          "79:   t.Fatalf(\"failed to create temp file: %v\", err)",
          "80:  }",
          "82:  if err := f.Close(); err != nil {",
          "83:   t.Fatalf(\"failed to close temp file: %v\", err)",
          "84:  }",
          "85:  clientSecretFileName := f.Name()",
          "88:  o := options.NewOptions()",
          "89:  o.Cookie.Secret = cookieSecret",
          "",
          "[Removed Lines]",
          "81:  f.WriteString(\"testcase\")",
          "86:  defer os.Remove(clientSecretFileName)",
          "",
          "[Added Lines]",
          "80:  _, err = f.WriteString(\"testcase\")",
          "81:  if err != nil {",
          "82:   t.Fatalf(\"failed to write to temp file: %v\", err)",
          "83:  }",
          "88:  defer func(t *testing.T) {",
          "89:   if err := os.Remove(clientSecretFileName); err != nil {",
          "90:    t.Fatalf(\"failed to delete temp file: %v\", err)",
          "91:   }",
          "92:  }(t)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  assert.Equal(t, expected, o.GetRedirectURL())",
          "145: }",
          "182: func TestDefaultProviderApiSettings(t *testing.T) {",
          "183:  o := testOptions()",
          "184:  assert.Equal(t, nil, Validate(o))",
          "",
          "[Removed Lines]",
          "147: func TestCompiledRegex(t *testing.T) {",
          "148:  o := testOptions()",
          "149:  regexps := []string{\"/foo/.*\", \"/ba[rz]/quux\"}",
          "150:  o.SkipAuthRegex = regexps",
          "151:  assert.Equal(t, nil, Validate(o))",
          "152:  actual := make([]string, 0)",
          "153:  for _, regex := range o.GetCompiledRegex() {",
          "154:   actual = append(actual, regex.String())",
          "155:  }",
          "156:  assert.Equal(t, regexps, actual)",
          "157: }",
          "159: func TestCompiledRegexError(t *testing.T) {",
          "160:  o := testOptions()",
          "161:  o.SkipAuthRegex = []string{\"(foobaz\", \"barquux)\"}",
          "162:  err := Validate(o)",
          "163:  assert.NotEqual(t, nil, err)",
          "165:  expected := errorMsg([]string{",
          "166:   \"error compiling regex=\\\"(foobaz\\\" error parsing regexp: \" +",
          "167:    \"missing closing ): `(foobaz`\",",
          "168:   \"error compiling regex=\\\"barquux)\\\" error parsing regexp: \" +",
          "169:    \"unexpected ): `barquux)`\"})",
          "170:  assert.Equal(t, expected, err.Error())",
          "172:  o.SkipAuthRegex = []string{\"foobaz\", \"barquux)\"}",
          "173:  err = Validate(o)",
          "174:  assert.NotEqual(t, nil, err)",
          "176:  expected = errorMsg([]string{",
          "177:   \"error compiling regex=\\\"barquux)\\\" error parsing regexp: \" +",
          "178:    \"unexpected ): `barquux)`\"})",
          "179:  assert.Equal(t, expected, err.Error())",
          "180: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337:  assert.Nil(t, o.GetRealClientIPParser())",
          "338: }",
          "379: func TestProviderCAFilesError(t *testing.T) {",
          "380:  file, err := ioutil.TempFile(\"\", \"absent.*.crt\")",
          "381:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "340: func TestIPCIDRSetOption(t *testing.T) {",
          "341:  tests := []struct {",
          "342:   name       string",
          "343:   trustedIPs []string",
          "344:   err        error",
          "345:  }{",
          "346:   {",
          "347:    \"TestSomeIPs\",",
          "348:    []string{\"127.0.0.1\", \"10.32.0.1/32\", \"43.36.201.0/24\", \"::1\", \"2a12:105:ee7:9234:0:0:0:0/64\"},",
          "349:    nil,",
          "350:   }, {",
          "351:    \"TestOverlappingIPs\",",
          "352:    []string{\"135.180.78.199\", \"135.180.78.199/32\", \"d910:a5a1:16f8:ddf5:e5b9:5cef:a65e:41f4\", \"d910:a5a1:16f8:ddf5:e5b9:5cef:a65e:41f4/128\"},",
          "353:    nil,",
          "354:   }, {",
          "355:    \"TestInvalidIPs\",",
          "356:    []string{\"[::1]\", \"alkwlkbn/32\"},",
          "357:    errors.New(",
          "358:     \"invalid configuration:\\n\" +",
          "359:      \"  trusted_ips[0] ([::1]) could not be recognized\\n\" +",
          "360:      \"  trusted_ips[1] (alkwlkbn/32) could not be recognized\",",
          "361:    ),",
          "362:   },",
          "363:  }",
          "365:  for _, tt := range tests {",
          "366:   t.Run(tt.name, func(t *testing.T) {",
          "367:    o := testOptions()",
          "368:    o.TrustedIPs = tt.trustedIPs",
          "369:    err := Validate(o)",
          "370:    if tt.err == nil {",
          "371:     assert.Nil(t, err)",
          "372:    } else {",
          "373:     assert.Equal(t, tt.err.Error(), err.Error())",
          "374:    }",
          "375:   })",
          "376:  }",
          "377: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "111d17efdecd4f716bc49b3ba8755ff2096d8c2c",
      "candidate_info": {
        "commit_hash": "111d17efdecd4f716bc49b3ba8755ff2096d8c2c",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/111d17efdecd4f716bc49b3ba8755ff2096d8c2c",
        "files": [
          "CHANGELOG.md",
          "contrib/oauth2-proxy_autocomplete.sh",
          "docs/configuration/configuration.md",
          "main.go",
          "oauthproxy.go",
          "options.go",
          "options_test.go",
          "pkg/logger/logger.go",
          "realclientip.go",
          "realclientip_test.go"
        ],
        "message": "Implements --real-client-ip-header option. (#503)\n\n* Implements -real-client-ip-header option.\n\n* The -real-client-ip-header determines what HTTP header is used for\n  determining the \"real client IP\" of the remote client.\n* The -real-client-ip-header option supports the following headers:\n  X-Forwarded-For X-ProxyUser-IP and X-Real-IP (default).\n* Introduces new realClientIPParser interface to allow for multiple\n  polymorphic classes to decide how to determine the real client IP.\n* TODO: implement the more standard, but more complex `Forwarded` HTTP\n  header.\n\n* Corrected order of expected/actual in test cases\n\n* Improved error message in getRemoteIP\n\n* Add tests for getRemoteIP and getClientString\n\n* Add comment explaining splitting of header\n\n* Update documentation on -real-client-ip-header w/o -reverse-proxy\n\n* Add PR number in changelog.\n\n* Fix typo repeated word: \"it\"\n\nCo-Authored-By: Joel Speed <Joel.speed@hotmail.co.uk>\n\n* Update extended configuration language\n\n* Simplify the language around dependance on -reverse-proxy\n\nCo-Authored-By: Joel Speed <Joel.speed@hotmail.co.uk>\n\n* Added completions\n\n* Reorder real client IP header options\n\n* Update CHANGELOG.md\n\n* Apply suggestions from code review\n\nCo-authored-by: Isabelle COWAN-BERGMAN <Izzette@users.noreply.github.com>\n\nCo-authored-by: Joel Speed <Joel.speed@hotmail.co.uk>\nCo-authored-by: Henry Jenkins <henry@henryjenkins.name>",
        "before_after_code_files": [
          "contrib/oauth2-proxy_autocomplete.sh||contrib/oauth2-proxy_autocomplete.sh",
          "main.go||main.go",
          "oauthproxy.go||oauthproxy.go",
          "options.go||options.go",
          "options_test.go||options_test.go",
          "pkg/logger/logger.go||pkg/logger/logger.go",
          "realclientip.go||realclientip.go",
          "realclientip_test.go||realclientip_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "contrib/oauth2-proxy_autocomplete.sh||contrib/oauth2-proxy_autocomplete.sh": [
          "File: contrib/oauth2-proxy_autocomplete.sh -> contrib/oauth2-proxy_autocomplete.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:    COMPREPLY=( $(compgen -W \"google azure facebook github keycloak gitlab linkedin login.gov digitalocean\" -- ${cur}) )",
          "21:    return 0",
          "22:    ;;",
          "23:   -@(http-address|https-address|redirect-url|upstream|basic-auth-password|skip-auth-regex|flush-interval|extra-jwt-issuers|email-domain|whitelist-domain|keycloak-group|azure-tenant|bitbucket-team|bitbucket-repository|github-org|github-team|github-repo|github-token|gitlab-group|google-group|google-admin-email|google-service-account-json|client-id|client_secret|banner|footer|proxy-prefix|ping-path|cookie-name|cookie-secret|cookie-domain|cookie-path|cookie-expire|cookie-refresh|cookie-samesite|redist-sentinel-master-name|redist-sentinel-connection-urls|redist-cluster-connection-urls|logging-max-size|logging-max-age|logging-max-backups|standard-logging-format|request-logging-format|exclude-logging-paths|auth-logging-format|oidc-issuer-url|oidc-jwks-url|login-url|redeem-url|profile-url|resource|validate-url|scope|approval-prompt|signature-key|acr-values|jwt-key|pubjwk-url))",
          "24:    return 0",
          "25:    ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   --real-client-ip-header)",
          "24:    COMPREPLY=( $(compgen -W 'X-Real-IP X-Forwarded-For X-ProxyUser-IP' -- ${cur}) )",
          "25:    return 0",
          "26:    ;;",
          "",
          "---------------"
        ],
        "main.go||main.go": [
          "File: main.go -> main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  flagSet.String(\"http-address\", \"127.0.0.1:4180\", \"[http://]<addr>:<port> or unix://<path> to listen on for HTTP clients\")",
          "27:  flagSet.String(\"https-address\", \":443\", \"<addr>:<port> to listen on for HTTPS clients\")",
          "28:  flagSet.Bool(\"reverse-proxy\", false, \"are we running behind a reverse proxy, controls whether headers like X-Real-Ip are accepted\")",
          "29:  flagSet.Bool(\"force-https\", false, \"force HTTPS redirect for HTTP requests\")",
          "30:  flagSet.String(\"tls-cert-file\", \"\", \"path to certificate file\")",
          "31:  flagSet.String(\"tls-key-file\", \"\", \"path to private key file\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  flagSet.String(\"real-client-ip-header\", \"X-Real-IP\", \"Header used to determine the real IP of the client (one of: X-Forwarded-For, X-Real-IP, or X-ProxyUser-IP)\")",
          "",
          "---------------"
        ],
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:  jwtBearerVerifiers   []*oidc.IDTokenVerifier",
          "113:  compiledRegex        []*regexp.Regexp",
          "114:  templates            *template.Template",
          "115:  Banner               string",
          "116:  Footer               string",
          "117: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:  realClientIPParser   realClientIPParser",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   skipJwtBearerTokens:  opts.SkipJwtBearerTokens,",
          "309:   jwtBearerVerifiers:   opts.jwtBearerVerifiers,",
          "310:   compiledRegex:        opts.compiledRegex,",
          "311:   SetXAuthRequest:      opts.SetXAuthRequest,",
          "312:   PassBasicAuth:        opts.PassBasicAuth,",
          "313:   SetBasicAuth:         opts.SetBasicAuth,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   realClientIPParser:   opts.realClientIPParser,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "636:  return false",
          "637: }",
          "648: var noCacheHeaders = map[string]string{",
          "649:  \"Expires\":         time.Unix(0, 0).Format(time.RFC1123),",
          "",
          "[Removed Lines]",
          "639: func getRemoteAddr(req *http.Request) (s string) {",
          "640:  s = req.RemoteAddr",
          "641:  if req.Header.Get(\"X-Real-IP\") != \"\" {",
          "642:   s += fmt.Sprintf(\" (%q)\", req.Header.Get(\"X-Real-IP\"))",
          "643:  }",
          "644:  return",
          "645: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "768: func (p *OAuthProxy) OAuthCallback(rw http.ResponseWriter, req *http.Request) {",
          "772:  err := req.ParseForm()",
          "",
          "[Removed Lines]",
          "769:  remoteAddr := getRemoteAddr(req)",
          "",
          "[Added Lines]",
          "763:  remoteAddr := getClientString(p.realClientIPParser, req, true)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "894:   }",
          "895:  }",
          "898:  if session == nil {",
          "899:   session, err = p.LoadCookiedSession(req)",
          "900:   if err != nil {",
          "",
          "[Removed Lines]",
          "897:  remoteAddr := getRemoteAddr(req)",
          "",
          "[Added Lines]",
          "891:  remoteAddr := getClientString(p.realClientIPParser, req, true)",
          "",
          "---------------"
        ],
        "options.go||options.go": [
          "File: options.go -> options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: type Options struct {",
          "48:  AuthenticatedEmailsFile  string   `flag:\"authenticated-emails-file\" cfg:\"authenticated_emails_file\" env:\"OAUTH2_PROXY_AUTHENTICATED_EMAILS_FILE\"`",
          "49:  KeycloakGroup            string   `flag:\"keycloak-group\" cfg:\"keycloak_group\" env:\"OAUTH2_PROXY_KEYCLOAK_GROUP\"`",
          "",
          "[Removed Lines]",
          "34:  ProxyPrefix      string `flag:\"proxy-prefix\" cfg:\"proxy_prefix\" env:\"OAUTH2_PROXY_PROXY_PREFIX\"`",
          "35:  PingPath         string `flag:\"ping-path\" cfg:\"ping_path\" env:\"OAUTH2_PROXY_PING_PATH\"`",
          "36:  ProxyWebSockets  bool   `flag:\"proxy-websockets\" cfg:\"proxy_websockets\" env:\"OAUTH2_PROXY_PROXY_WEBSOCKETS\"`",
          "37:  HTTPAddress      string `flag:\"http-address\" cfg:\"http_address\" env:\"OAUTH2_PROXY_HTTP_ADDRESS\"`",
          "38:  HTTPSAddress     string `flag:\"https-address\" cfg:\"https_address\" env:\"OAUTH2_PROXY_HTTPS_ADDRESS\"`",
          "39:  ReverseProxy     bool   `flag:\"reverse-proxy\" cfg:\"reverse_proxy\" env:\"OAUTH2_PROXY_REVERSE_PROXY\"`",
          "40:  ForceHTTPS       bool   `flag:\"force-https\" cfg:\"force_https\" env:\"OAUTH2_PROXY_FORCE_HTTPS\"`",
          "41:  RedirectURL      string `flag:\"redirect-url\" cfg:\"redirect_url\" env:\"OAUTH2_PROXY_REDIRECT_URL\"`",
          "42:  ClientID         string `flag:\"client-id\" cfg:\"client_id\" env:\"OAUTH2_PROXY_CLIENT_ID\"`",
          "43:  ClientSecret     string `flag:\"client-secret\" cfg:\"client_secret\" env:\"OAUTH2_PROXY_CLIENT_SECRET\"`",
          "44:  ClientSecretFile string `flag:\"client-secret-file\" cfg:\"client_secret_file\" env:\"OAUTH2_PROXY_CLIENT_SECRET_FILE\"`",
          "45:  TLSCertFile      string `flag:\"tls-cert-file\" cfg:\"tls_cert_file\" env:\"OAUTH2_PROXY_TLS_CERT_FILE\"`",
          "46:  TLSKeyFile       string `flag:\"tls-key-file\" cfg:\"tls_key_file\" env:\"OAUTH2_PROXY_TLS_KEY_FILE\"`",
          "",
          "[Added Lines]",
          "34:  ProxyPrefix        string `flag:\"proxy-prefix\" cfg:\"proxy_prefix\" env:\"OAUTH2_PROXY_PROXY_PREFIX\"`",
          "35:  PingPath           string `flag:\"ping-path\" cfg:\"ping_path\" env:\"OAUTH2_PROXY_PING_PATH\"`",
          "36:  ProxyWebSockets    bool   `flag:\"proxy-websockets\" cfg:\"proxy_websockets\" env:\"OAUTH2_PROXY_PROXY_WEBSOCKETS\"`",
          "37:  HTTPAddress        string `flag:\"http-address\" cfg:\"http_address\" env:\"OAUTH2_PROXY_HTTP_ADDRESS\"`",
          "38:  HTTPSAddress       string `flag:\"https-address\" cfg:\"https_address\" env:\"OAUTH2_PROXY_HTTPS_ADDRESS\"`",
          "39:  ReverseProxy       bool   `flag:\"reverse-proxy\" cfg:\"reverse_proxy\" env:\"OAUTH2_PROXY_REVERSE_PROXY\"`",
          "40:  RealClientIPHeader string `flag:\"real-client-ip-header\" cfg:\"real_client_ip_header\" env:\"OAUTH2_PROXY_REAL_CLIENT_IP_HEADER\"`",
          "41:  ForceHTTPS         bool   `flag:\"force-https\" cfg:\"force_https\" env:\"OAUTH2_PROXY_FORCE_HTTPS\"`",
          "42:  RedirectURL        string `flag:\"redirect-url\" cfg:\"redirect_url\" env:\"OAUTH2_PROXY_REDIRECT_URL\"`",
          "43:  ClientID           string `flag:\"client-id\" cfg:\"client_id\" env:\"OAUTH2_PROXY_CLIENT_ID\"`",
          "44:  ClientSecret       string `flag:\"client-secret\" cfg:\"client_secret\" env:\"OAUTH2_PROXY_CLIENT_SECRET\"`",
          "45:  ClientSecretFile   string `flag:\"client-secret-file\" cfg:\"client_secret_file\" env:\"OAUTH2_PROXY_CLIENT_SECRET_FILE\"`",
          "46:  TLSCertFile        string `flag:\"tls-cert-file\" cfg:\"tls_cert_file\" env:\"OAUTH2_PROXY_TLS_CERT_FILE\"`",
          "47:  TLSKeyFile         string `flag:\"tls-key-file\" cfg:\"tls_key_file\" env:\"OAUTH2_PROXY_TLS_KEY_FILE\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:  signatureData      *SignatureData",
          "140:  oidcVerifier       *oidc.IDTokenVerifier",
          "141:  jwtBearerVerifiers []*oidc.IDTokenVerifier",
          "142: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:  realClientIPParser realClientIPParser",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:  msgs = validateCookieName(o, msgs)",
          "457:  msgs = setupLogger(o, msgs)",
          "459:  if len(msgs) != 0 {",
          "460:   return fmt.Errorf(\"invalid configuration:\\n  %s\",",
          "461:    strings.Join(msgs, \"\\n  \"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:  if o.ReverseProxy {",
          "462:   o.realClientIPParser, err = getRealClientIPParser(o.RealClientIPHeader)",
          "463:   if err != nil {",
          "464:    msgs = append(msgs, fmt.Sprintf(\"real_client_ip_header (%s) not accepted parameter value: %v\", o.RealClientIPHeader, err))",
          "465:   }",
          "466:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "695:  logger.SetStandardTemplate(o.StandardLoggingFormat)",
          "696:  logger.SetAuthTemplate(o.AuthLoggingFormat)",
          "697:  logger.SetReqTemplate(o.RequestLoggingFormat)",
          "700:  excludePaths := make([]string, 0)",
          "701:  excludePaths = append(excludePaths, strings.Split(o.ExcludeLoggingPaths, \",\")...)",
          "",
          "[Removed Lines]",
          "698:  logger.SetReverseProxy(o.ReverseProxy)",
          "",
          "[Added Lines]",
          "707:  logger.SetGetClientFunc(func(r *http.Request) string {",
          "708:   return getClientString(o.realClientIPParser, r, false)",
          "709:  })",
          "",
          "---------------"
        ],
        "options_test.go||options_test.go": [
          "File: options_test.go -> options_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:  o.GCPHealthChecks = true",
          "327:  assert.Equal(t, nil, o.Validate())",
          "328: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: func TestRealClientIPHeader(t *testing.T) {",
          "331:  var o *Options",
          "332:  var err error",
          "333:  var expected string",
          "336:  o = testOptions()",
          "337:  o.RealClientIPHeader = \"X-Real-IP\"",
          "338:  assert.Equal(t, nil, o.Validate())",
          "339:  assert.Nil(t, o.realClientIPParser)",
          "342:  o = testOptions()",
          "343:  o.ReverseProxy = true",
          "344:  o.RealClientIPHeader = \"X-Forwarded-For\"",
          "345:  assert.Equal(t, nil, o.Validate())",
          "346:  assert.NotNil(t, o.realClientIPParser)",
          "349:  o = testOptions()",
          "350:  o.ReverseProxy = true",
          "351:  o.RealClientIPHeader = \"Forwarded\"",
          "352:  err = o.Validate()",
          "353:  assert.NotEqual(t, nil, err)",
          "354:  expected = errorMsg([]string{",
          "355:   \"real_client_ip_header (Forwarded) not accepted parameter value: the http header key (Forwarded) is either invalid or unsupported\",",
          "356:  })",
          "357:  assert.Equal(t, expected, err.Error())",
          "358:  assert.Nil(t, o.realClientIPParser)",
          "361:  o = testOptions()",
          "362:  o.ReverseProxy = true",
          "363:  o.RealClientIPHeader = \"!934invalidheader-23:\"",
          "364:  err = o.Validate()",
          "365:  assert.NotEqual(t, nil, err)",
          "366:  expected = errorMsg([]string{",
          "367:   \"real_client_ip_header (!934invalidheader-23:) not accepted parameter value: the http header key (!934invalidheader-23:) is either invalid or unsupported\",",
          "368:  })",
          "369:  assert.Equal(t, expected, err.Error())",
          "370:  assert.Nil(t, o.realClientIPParser)",
          "371: }",
          "",
          "---------------"
        ],
        "pkg/logger/logger.go||pkg/logger/logger.go": [
          "File: pkg/logger/logger.go -> pkg/logger/logger.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"io\"",
          "7:  \"net/http\"",
          "8:  \"net/url\"",
          "9:  \"os\"",
          "",
          "[Removed Lines]",
          "6:  \"net\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:  Username string",
          "77: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: type GetClientFunc = func(r *http.Request) string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:  stdEnabled     bool",
          "89:  authEnabled    bool",
          "90:  reqEnabled     bool",
          "92:  excludePaths   map[string]struct{}",
          "93:  stdLogTemplate *template.Template",
          "94:  authTemplate   *template.Template",
          "",
          "[Removed Lines]",
          "91:  reverseProxy   bool",
          "",
          "[Added Lines]",
          "93:  getClientFunc  GetClientFunc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:   stdEnabled:     true,",
          "104:   authEnabled:    true,",
          "105:   reqEnabled:     true,",
          "107:   excludePaths:   nil,",
          "108:   stdLogTemplate: template.Must(template.New(\"std-log\").Parse(DefaultStandardLoggingFormat)),",
          "109:   authTemplate:   template.Must(template.New(\"auth-log\").Parse(DefaultAuthLoggingFormat)),",
          "",
          "[Removed Lines]",
          "106:   reverseProxy:   false,",
          "",
          "[Added Lines]",
          "108:   getClientFunc:  func(r *http.Request) string { return r.RemoteAddr },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   username = \"-\"",
          "154:  }",
          "158:  l.mu.Lock()",
          "159:  defer l.mu.Unlock()",
          "",
          "[Removed Lines]",
          "156:  client := GetClient(req, l.reverseProxy)",
          "",
          "[Added Lines]",
          "158:  client := l.getClientFunc(req)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201:   }",
          "202:  }",
          "206:  l.mu.Lock()",
          "207:  defer l.mu.Unlock()",
          "",
          "[Removed Lines]",
          "204:  client := GetClient(req, l.reverseProxy)",
          "",
          "[Added Lines]",
          "206:  client := l.getClientFunc(req)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "252:  return fmt.Sprintf(\"%s:%d\", file, line)",
          "253: }",
          "272: func (l *Logger) FormatTimestamp(ts time.Time) string {",
          "273:  if l.flag&LUTC != 0 {",
          "",
          "[Removed Lines]",
          "256: func GetClient(req *http.Request, reverseProxy bool) string {",
          "257:  client := req.RemoteAddr",
          "258:  if reverseProxy {",
          "259:   if ip := req.Header.Get(\"X-Real-IP\"); ip != \"\" {",
          "260:    client = ip",
          "261:   }",
          "262:  }",
          "264:  if c, _, err := net.SplitHostPort(client); err == nil {",
          "265:   client = c",
          "266:  }",
          "268:  return client",
          "269: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:  l.reqEnabled = e",
          "313: }",
          "317:  l.mu.Lock()",
          "318:  defer l.mu.Unlock()",
          "320: }",
          "",
          "[Removed Lines]",
          "316: func (l *Logger) SetReverseProxy(e bool) {",
          "319:  l.reverseProxy = e",
          "",
          "[Added Lines]",
          "302: func (l *Logger) SetGetClientFunc(f GetClientFunc) {",
          "305:  l.getClientFunc = f",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "392:  std.SetReqEnabled(e)",
          "393: }",
          "399: }",
          "",
          "[Removed Lines]",
          "397: func SetReverseProxy(e bool) {",
          "398:  std.SetReverseProxy(e)",
          "",
          "[Added Lines]",
          "383: func SetGetClientFunc(f GetClientFunc) {",
          "384:  std.SetGetClientFunc(f)",
          "",
          "---------------"
        ],
        "realclientip.go||realclientip.go": [
          "File: realclientip.go -> realclientip.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package main",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"net\"",
          "6:  \"net/http\"",
          "7:  \"strings\"",
          "9:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/logger\"",
          "10: )",
          "12: type realClientIPParser interface {",
          "13:  GetRealClientIP(http.Header) (net.IP, error)",
          "14: }",
          "16: func getRealClientIPParser(headerKey string) (realClientIPParser, error) {",
          "17:  headerKey = http.CanonicalHeaderKey(headerKey)",
          "19:  switch headerKey {",
          "20:  case http.CanonicalHeaderKey(\"X-Forwarded-For\"), http.CanonicalHeaderKey(\"X-Real-IP\"), http.CanonicalHeaderKey(\"X-ProxyUser-IP\"):",
          "21:   return &xForwardedForClientIPParser{header: headerKey}, nil",
          "22:  }",
          "25:  return nil, fmt.Errorf(\"the http header key (%s) is either invalid or unsupported\", headerKey)",
          "26: }",
          "28: type xForwardedForClientIPParser struct {",
          "29:  header string",
          "30: }",
          "38: func (p xForwardedForClientIPParser) GetRealClientIP(h http.Header) (net.IP, error) {",
          "39:  var ipStr string",
          "40:  if realIP := h.Get(p.header); realIP != \"\" {",
          "41:   ipStr = realIP",
          "42:  } else {",
          "43:   return nil, nil",
          "44:  }",
          "48:  if commaIndex := strings.IndexRune(ipStr, ','); commaIndex != -1 {",
          "49:   ipStr = ipStr[:commaIndex]",
          "50:  }",
          "51:  ipStr = strings.TrimSpace(ipStr)",
          "53:  if ipHost, _, err := net.SplitHostPort(ipStr); err == nil {",
          "54:   ipStr = ipHost",
          "55:  }",
          "57:  ip := net.ParseIP(ipStr)",
          "58:  if ip == nil {",
          "59:   return nil, fmt.Errorf(\"unable to parse ip (%s) from %s header\", ipStr, http.CanonicalHeaderKey(p.header))",
          "60:  }",
          "62:  return ip, nil",
          "63: }",
          "66: func getRemoteIP(req *http.Request) (net.IP, error) {",
          "67:  if ipStr, _, err := net.SplitHostPort(req.RemoteAddr); err != nil {",
          "68:   return nil, fmt.Errorf(\"unable to get ip and port from http.RemoteAddr (%s)\", req.RemoteAddr)",
          "69:  } else if ip := net.ParseIP(ipStr); ip != nil {",
          "70:   return ip, nil",
          "71:  } else {",
          "72:   return nil, fmt.Errorf(\"unable to parse ip (%s)\", ipStr)",
          "73:  }",
          "74: }",
          "77: func getClientString(p realClientIPParser, req *http.Request, full bool) (s string) {",
          "78:  var realClientIPStr string",
          "79:  if p != nil {",
          "80:   if realClientIP, err := p.GetRealClientIP(req.Header); err != nil {",
          "81:    logger.Printf(\"Unable to get real client IP: %v\", err)",
          "82:   } else if realClientIP != nil {",
          "83:    realClientIPStr = realClientIP.String()",
          "84:   }",
          "85:  }",
          "87:  var remoteIPStr string",
          "88:  if remoteIP, err := getRemoteIP(req); err == nil {",
          "89:   remoteIPStr = remoteIP.String()",
          "90:  } else {",
          "92:   logger.Printf(\"Unable to get remote IP(?!?!): %v\", err)",
          "93:  }",
          "95:  if !full && realClientIPStr != \"\" {",
          "96:   return realClientIPStr",
          "97:  }",
          "98:  if full && realClientIPStr != \"\" {",
          "99:   return fmt.Sprintf(\"%s (%s)\", remoteIPStr, realClientIPStr)",
          "100:  }",
          "101:  return remoteIPStr",
          "102: }",
          "",
          "---------------"
        ],
        "realclientip_test.go||realclientip_test.go": [
          "File: realclientip_test.go -> realclientip_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package main",
          "3: import (",
          "4:  \"net\"",
          "5:  \"net/http\"",
          "6:  \"reflect\"",
          "7:  \"testing\"",
          "9:  \"github.com/stretchr/testify/assert\"",
          "10: )",
          "12: func TestGetRealClientIPParser(t *testing.T) {",
          "13:  forwardedForType := reflect.TypeOf((*xForwardedForClientIPParser)(nil))",
          "15:  tests := []struct {",
          "16:   header     string",
          "17:   errString  string",
          "18:   parserType reflect.Type",
          "19:  }{",
          "20:   {\"X-Forwarded-For\", \"\", forwardedForType},",
          "21:   {\"X-REAL-IP\", \"\", forwardedForType},",
          "22:   {\"x-proxyuser-ip\", \"\", forwardedForType},",
          "23:   {\"\", \"the http header key () is either invalid or unsupported\", nil},",
          "24:   {\"Forwarded\", \"the http header key (Forwarded) is either invalid or unsupported\", nil},",
          "25:   {\"2#* @##$$:kd\", \"the http header key (2#* @##$$:kd) is either invalid or unsupported\", nil},",
          "26:  }",
          "28:  for _, test := range tests {",
          "29:   p, err := getRealClientIPParser(test.header)",
          "31:   if test.errString == \"\" {",
          "32:    assert.Nil(t, err)",
          "33:   } else {",
          "34:    assert.NotNil(t, err)",
          "35:    assert.Equal(t, test.errString, err.Error())",
          "36:   }",
          "38:   if test.parserType == nil {",
          "39:    assert.Nil(t, p)",
          "40:   } else {",
          "41:    assert.NotNil(t, p)",
          "42:    assert.Equal(t, test.parserType, reflect.TypeOf(p))",
          "43:   }",
          "45:   if xp, ok := p.(*xForwardedForClientIPParser); ok {",
          "46:    assert.Equal(t, http.CanonicalHeaderKey(test.header), xp.header)",
          "47:   }",
          "48:  }",
          "49: }",
          "51: func TestXForwardedForClientIPParser(t *testing.T) {",
          "52:  p := &xForwardedForClientIPParser{header: http.CanonicalHeaderKey(\"X-Forwarded-For\")}",
          "54:  tests := []struct {",
          "55:   headerValue string",
          "56:   errString   string",
          "57:   expectedIP  net.IP",
          "58:  }{",
          "59:   {\"\", \"\", nil},",
          "60:   {\"1.2.3.4\", \"\", net.ParseIP(\"1.2.3.4\")},",
          "61:   {\"10::23\", \"\", net.ParseIP(\"10::23\")},",
          "62:   {\"::1\", \"\", net.ParseIP(\"::1\")},",
          "63:   {\"[::1]:1234\", \"\", net.ParseIP(\"::1\")},",
          "64:   {\"10.0.10.11:1234\", \"\", net.ParseIP(\"10.0.10.11\")},",
          "65:   {\"192.168.10.50, 10.0.0.1, 1.2.3.4\", \"\", net.ParseIP(\"192.168.10.50\")},",
          "66:   {\"nil\", \"unable to parse ip (nil) from X-Forwarded-For header\", nil},",
          "67:   {\"10000.10000.10000.10000\", \"unable to parse ip (10000.10000.10000.10000) from X-Forwarded-For header\", nil},",
          "68:  }",
          "70:  for _, test := range tests {",
          "71:   h := http.Header{}",
          "72:   h.Add(\"X-Forwarded-For\", test.headerValue)",
          "74:   ip, err := p.GetRealClientIP(h)",
          "76:   if test.errString == \"\" {",
          "77:    assert.Nil(t, err)",
          "78:   } else {",
          "79:    assert.NotNil(t, err)",
          "80:    assert.Equal(t, test.errString, err.Error())",
          "81:   }",
          "83:   if test.expectedIP == nil {",
          "84:    assert.Nil(t, ip)",
          "85:   } else {",
          "86:    assert.NotNil(t, ip)",
          "87:    assert.Equal(t, test.expectedIP, ip)",
          "88:   }",
          "89:  }",
          "90: }",
          "92: func TestXForwardedForClientIPParserIgnoresOthers(t *testing.T) {",
          "93:  p := &xForwardedForClientIPParser{header: http.CanonicalHeaderKey(\"X-Forwarded-For\")}",
          "95:  h := http.Header{}",
          "96:  expectedIPString := \"192.168.10.50\"",
          "97:  h.Add(\"X-Real-IP\", \"10.0.0.1\")",
          "98:  h.Add(\"X-ProxyUser-IP\", \"10.0.0.1\")",
          "99:  h.Add(\"X-Forwarded-For\", expectedIPString)",
          "100:  ip, err := p.GetRealClientIP(h)",
          "101:  assert.Nil(t, err)",
          "102:  assert.NotNil(t, ip)",
          "103:  assert.Equal(t, ip, net.ParseIP(expectedIPString))",
          "104: }",
          "106: func TestGetRemoteIP(t *testing.T) {",
          "107:  tests := []struct {",
          "108:   remoteAddr string",
          "109:   errString  string",
          "110:   expectedIP net.IP",
          "111:  }{",
          "112:   {\"\", \"unable to get ip and port from http.RemoteAddr ()\", nil},",
          "113:   {\"nil\", \"unable to get ip and port from http.RemoteAddr (nil)\", nil},",
          "114:   {\"235.28.129.186\", \"unable to get ip and port from http.RemoteAddr (235.28.129.186)\", nil},",
          "115:   {\"90::45\", \"unable to get ip and port from http.RemoteAddr (90::45)\", nil},",
          "116:   {\"192.168.73.165:14976, 10.4.201.15:18453\", \"unable to get ip and port from http.RemoteAddr (192.168.73.165:14976, 10.4.201.15:18453)\", nil},",
          "117:   {\"10000.10000.10000.10000:8080\", \"unable to parse ip (10000.10000.10000.10000)\", nil},",
          "118:   {\"[::1]:48290\", \"\", net.ParseIP(\"::1\")},",
          "119:   {\"10.254.244.165:62750\", \"\", net.ParseIP(\"10.254.244.165\")},",
          "120:  }",
          "122:  for _, test := range tests {",
          "123:   req := &http.Request{RemoteAddr: test.remoteAddr}",
          "125:   ip, err := getRemoteIP(req)",
          "127:   if test.errString == \"\" {",
          "128:    assert.Nil(t, err)",
          "129:   } else {",
          "130:    assert.NotNil(t, err)",
          "131:    assert.Equal(t, test.errString, err.Error())",
          "132:   }",
          "134:   if test.expectedIP == nil {",
          "135:    assert.Nil(t, ip)",
          "136:   } else {",
          "137:    assert.NotNil(t, ip)",
          "138:    assert.Equal(t, test.expectedIP, ip)",
          "139:   }",
          "140:  }",
          "141: }",
          "143: func TestGetClientString(t *testing.T) {",
          "144:  p := &xForwardedForClientIPParser{header: http.CanonicalHeaderKey(\"X-Forwarded-For\")}",
          "146:  tests := []struct {",
          "147:   parser             realClientIPParser",
          "148:   remoteAddr         string",
          "149:   headerValue        string",
          "150:   expectedClient     string",
          "151:   expectedClientFull string",
          "152:  }{",
          "154:   {nil, \"\", \"\", \"\", \"\"},",
          "155:   {p, \"127.0.0.1:11950\", \"\", \"127.0.0.1\", \"127.0.0.1\"},",
          "156:   {p, \"[::1]:28660\", \"99.103.56.12\", \"99.103.56.12\", \"::1 (99.103.56.12)\"},",
          "157:   {nil, \"10.254.244.165:62750\", \"\", \"10.254.244.165\", \"10.254.244.165\"},",
          "159:   {nil, \"[2001:470:26:307:a5a1:1177:2ae3:e9c3]:48290\", \"127.0.0.1\", \"2001:470:26:307:a5a1:1177:2ae3:e9c3\", \"2001:470:26:307:a5a1:1177:2ae3:e9c3\"},",
          "160:  }",
          "162:  for _, test := range tests {",
          "163:   h := http.Header{}",
          "164:   h.Add(\"X-Forwarded-For\", test.headerValue)",
          "165:   req := &http.Request{",
          "166:    Header:     h,",
          "167:    RemoteAddr: test.remoteAddr,",
          "168:   }",
          "170:   client := getClientString(test.parser, req, false)",
          "171:   assert.Equal(t, test.expectedClient, client)",
          "173:   clientFull := getClientString(test.parser, req, true)",
          "174:   assert.Equal(t, test.expectedClientFull, clientFull)",
          "175:  }",
          "176: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8059a812cdd88024eb37d2df6e0aed6cf5a118ca",
      "candidate_info": {
        "commit_hash": "8059a812cdd88024eb37d2df6e0aed6cf5a118ca",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/8059a812cdd88024eb37d2df6e0aed6cf5a118ca",
        "files": [
          "main.go",
          "oauthproxy.go",
          "oauthproxy_test.go",
          "pkg/validation/options.go",
          "pkg/validation/options_test.go",
          "pkg/validation/sessions.go",
          "pkg/validation/sessions_test.go"
        ],
        "message": "Integrate new header injectors with OAuth2 Proxy",
        "before_after_code_files": [
          "main.go||main.go",
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go",
          "pkg/validation/options.go||pkg/validation/options.go",
          "pkg/validation/options_test.go||pkg/validation/options_test.go",
          "pkg/validation/sessions.go||pkg/validation/sessions.go",
          "pkg/validation/sessions_test.go||pkg/validation/sessions_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "main.go||main.go": [
          "File: main.go -> main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"math/rand\"",
          "7:  \"os\"",
          "8:  \"os/signal\"",
          "9:  \"runtime\"",
          "10:  \"syscall\"",
          "11:  \"time\"",
          "14:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/options\"",
          "15:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/logger\"",
          "17:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/validation\"",
          "18: )",
          "",
          "[Removed Lines]",
          "6:  \"net\"",
          "13:  \"github.com/justinas/alice\"",
          "16:  \"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/middleware\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  rand.Seed(time.Now().UnixNano())",
          "91:  s := &Server{",
          "93:   Opts:    opts,",
          "94:   stop:    make(chan struct{}, 1),",
          "95:  }",
          "",
          "[Removed Lines]",
          "66:  chain := alice.New()",
          "68:  if opts.ForceHTTPS {",
          "69:   _, httpsPort, err := net.SplitHostPort(opts.HTTPSAddress)",
          "70:   if err != nil {",
          "71:    logger.Fatalf(\"FATAL: invalid HTTPS address %q: %v\", opts.HTTPAddress, err)",
          "72:   }",
          "73:   chain = chain.Append(middleware.NewRedirectToHTTPS(httpsPort))",
          "74:  }",
          "76:  healthCheckPaths := []string{opts.PingPath}",
          "77:  healthCheckUserAgents := []string{opts.PingUserAgent}",
          "78:  if opts.GCPHealthChecks {",
          "79:   healthCheckPaths = append(healthCheckPaths, \"/liveness_check\", \"/readiness_check\")",
          "80:   healthCheckUserAgents = append(healthCheckUserAgents, \"GoogleHC/1.0\")",
          "81:  }",
          "85:  if opts.Logging.SilencePing {",
          "86:   chain = chain.Append(middleware.NewHealthCheck(healthCheckPaths, healthCheckUserAgents), LoggingHandler)",
          "87:  } else {",
          "88:   chain = chain.Append(LoggingHandler, middleware.NewHealthCheck(healthCheckPaths, healthCheckUserAgents))",
          "89:  }",
          "92:   Handler: chain.Then(oauthproxy),",
          "",
          "[Added Lines]",
          "64:   Handler: oauthproxy,",
          "",
          "---------------"
        ],
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "6:  \"encoding/json\"",
          "7:  \"errors\"",
          "8:  \"fmt\"",
          "",
          "[Removed Lines]",
          "5:  b64 \"encoding/base64\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  PassAuthorization       bool",
          "99:  PreferEmailToUser       bool",
          "100:  skipAuthPreflight       bool",
          "102:  skipJwtBearerTokens     bool",
          "103:  mainJwtBearerVerifier   *oidc.IDTokenVerifier",
          "104:  extraJwtBearerVerifiers []*oidc.IDTokenVerifier",
          "",
          "[Removed Lines]",
          "101:  skipAuthStripHeaders    bool",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:  AllowedGroups           []string",
          "112:  sessionChain alice.Chain",
          "113: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  headersChain alice.Chain",
          "112:  preAuthChain alice.Chain",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:   return nil, err",
          "170:  }",
          "172:  sessionChain := buildSessionChain(opts, sessionStore, basicAuthValidator)",
          "174:  return &OAuthProxy{",
          "175:   CookieName:     opts.Cookie.Name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:  preAuthChain, err := buildPreAuthChain(opts)",
          "173:  if err != nil {",
          "174:   return nil, fmt.Errorf(\"could not build pre-auth chain: %v\", err)",
          "175:  }",
          "177:  headersChain, err := buildHeadersChain(opts)",
          "178:  if err != nil {",
          "179:   return nil, fmt.Errorf(\"could not build headers chain: %v\", err)",
          "180:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:   allowedRoutes:           allowedRoutes,",
          "202:   whitelistDomains:        opts.WhitelistDomains,",
          "203:   skipAuthPreflight:       opts.SkipAuthPreflight,",
          "205:   skipJwtBearerTokens:     opts.SkipJwtBearerTokens,",
          "206:   mainJwtBearerVerifier:   opts.GetOIDCVerifier(),",
          "207:   extraJwtBearerVerifiers: opts.GetJWTBearerVerifiers(),",
          "208:   realClientIPParser:      opts.GetRealClientIPParser(),",
          "218:   SkipProviderButton:      opts.SkipProviderButton,",
          "219:   templates:               templates,",
          "220:   trustedIPs:              trustedIPs,",
          "",
          "[Removed Lines]",
          "204:   skipAuthStripHeaders:    opts.SkipAuthStripHeaders,",
          "209:   SetXAuthRequest:         opts.SetXAuthRequest,",
          "210:   PassBasicAuth:           opts.PassBasicAuth,",
          "211:   SetBasicAuth:            opts.SetBasicAuth,",
          "212:   PassUserHeaders:         opts.PassUserHeaders,",
          "213:   BasicAuthPassword:       opts.BasicAuthPassword,",
          "214:   PassAccessToken:         opts.PassAccessToken,",
          "215:   SetAuthorization:        opts.SetAuthorization,",
          "216:   PassAuthorization:       opts.PassAuthorization,",
          "217:   PreferEmailToUser:       opts.PreferEmailToUser,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "226:   basicAuthValidator:  basicAuthValidator,",
          "227:   displayHtpasswdForm: basicAuthValidator != nil,",
          "228:   sessionChain:        sessionChain,",
          "229:  }, nil",
          "230: }",
          "233:  chain := alice.New(middleware.NewScope())",
          "235:  if opts.SkipJwtBearerTokens {",
          "236:   sessionLoaders := []middlewareapi.TokenToSessionLoader{}",
          "237:   if opts.GetOIDCVerifier() != nil {",
          "",
          "[Removed Lines]",
          "232: func buildSessionChain(opts *options.Options, sessionStore sessionsapi.SessionStore, validator basic.Validator) alice.Chain {",
          "",
          "[Added Lines]",
          "227:   headersChain:        headersChain,",
          "228:   preAuthChain:        preAuthChain,",
          "235: func buildPreAuthChain(opts *options.Options) (alice.Chain, error) {",
          "238:  if opts.ForceHTTPS {",
          "239:   _, httpsPort, err := net.SplitHostPort(opts.HTTPSAddress)",
          "240:   if err != nil {",
          "241:    return alice.Chain{}, fmt.Errorf(\"invalid HTTPS address %q: %v\", opts.HTTPAddress, err)",
          "242:   }",
          "243:   chain = chain.Append(middleware.NewRedirectToHTTPS(httpsPort))",
          "244:  }",
          "246:  healthCheckPaths := []string{opts.PingPath}",
          "247:  healthCheckUserAgents := []string{opts.PingUserAgent}",
          "248:  if opts.GCPHealthChecks {",
          "249:   healthCheckPaths = append(healthCheckPaths, \"/liveness_check\", \"/readiness_check\")",
          "250:   healthCheckUserAgents = append(healthCheckUserAgents, \"GoogleHC/1.0\")",
          "251:  }",
          "255:  if opts.Logging.SilencePing {",
          "256:   chain = chain.Append(middleware.NewHealthCheck(healthCheckPaths, healthCheckUserAgents), LoggingHandler)",
          "257:  } else {",
          "258:   chain = chain.Append(LoggingHandler, middleware.NewHealthCheck(healthCheckPaths, healthCheckUserAgents))",
          "259:  }",
          "261:  return chain, nil",
          "262: }",
          "264: func buildSessionChain(opts *options.Options, sessionStore sessionsapi.SessionStore, validator basic.Validator) alice.Chain {",
          "265:  chain := alice.New()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "264:  return chain",
          "265: }",
          "267: func buildSignInMessage(opts *options.Options) string {",
          "268:  var msg string",
          "269:  if len(opts.Banner) >= 1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: func buildHeadersChain(opts *options.Options) (alice.Chain, error) {",
          "300:  requestInjector, err := middleware.NewRequestHeaderInjector(opts.InjectRequestHeaders)",
          "301:  if err != nil {",
          "302:   return alice.Chain{}, fmt.Errorf(\"error constructing request header injector: %v\", err)",
          "303:  }",
          "305:  responseInjector, err := middleware.NewResponseHeaderInjector(opts.InjectResponseHeaders)",
          "306:  if err != nil {",
          "307:   return alice.Chain{}, fmt.Errorf(\"error constructing request header injector: %v\", err)",
          "308:  }",
          "310:  return alice.New(requestInjector, responseInjector), nil",
          "311: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "685: }",
          "687: func (p *OAuthProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
          "688:  if req.URL.Path != p.AuthOnlyPath && strings.HasPrefix(req.URL.Path, p.ProxyPrefix) {",
          "689:   prepareNoCache(rw)",
          "690:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734:  p.preAuthChain.Then(http.HandlerFunc(p.serveHTTP)).ServeHTTP(rw, req)",
          "735: }",
          "737: func (p *OAuthProxy) serveHTTP(rw http.ResponseWriter, req *http.Request) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "886:  p.addHeadersForProxying(rw, req, session)",
          "888: }",
          "891: func (p *OAuthProxy) SkipAuthProxy(rw http.ResponseWriter, req *http.Request) {",
          "896: }",
          "",
          "[Removed Lines]",
          "887:  rw.WriteHeader(http.StatusAccepted)",
          "892:  if p.skipAuthStripHeaders {",
          "893:   p.stripAuthHeaders(req)",
          "894:  }",
          "895:  p.serveMux.ServeHTTP(rw, req)",
          "",
          "[Added Lines]",
          "937:  p.headersChain.Then(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {",
          "938:   rw.WriteHeader(http.StatusAccepted)",
          "939:  })).ServeHTTP(rw, req)",
          "944:  p.headersChain.Then(p.serveMux).ServeHTTP(rw, req)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "903:  case nil:",
          "905:   p.addHeadersForProxying(rw, req, session)",
          "908:  case ErrNeedsLogin:",
          "910:   if isAjax(req) {",
          "",
          "[Removed Lines]",
          "906:   p.serveMux.ServeHTTP(rw, req)",
          "",
          "[Added Lines]",
          "955:   p.headersChain.Then(p.serveMux).ServeHTTP(rw, req)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "963: func (p *OAuthProxy) addHeadersForProxying(rw http.ResponseWriter, req *http.Request, session *sessionsapi.SessionState) {",
          "1078:  if session.Email == \"\" {",
          "1079:   rw.Header().Set(\"GAP-Auth\", session.User)",
          "1080:  } else {",
          "",
          "[Removed Lines]",
          "964:  if p.PassBasicAuth {",
          "965:   if p.PreferEmailToUser && session.Email != \"\" {",
          "966:    req.SetBasicAuth(session.Email, p.BasicAuthPassword)",
          "967:    req.Header[\"X-Forwarded-User\"] = []string{session.Email}",
          "968:    req.Header.Del(\"X-Forwarded-Email\")",
          "969:   } else {",
          "970:    req.SetBasicAuth(session.User, p.BasicAuthPassword)",
          "971:    req.Header[\"X-Forwarded-User\"] = []string{session.User}",
          "972:    if session.Email != \"\" {",
          "973:     req.Header[\"X-Forwarded-Email\"] = []string{session.Email}",
          "974:    } else {",
          "975:     req.Header.Del(\"X-Forwarded-Email\")",
          "976:    }",
          "977:   }",
          "978:   if session.PreferredUsername != \"\" {",
          "979:    req.Header[\"X-Forwarded-Preferred-Username\"] = []string{session.PreferredUsername}",
          "980:   } else {",
          "981:    req.Header.Del(\"X-Forwarded-Preferred-Username\")",
          "982:   }",
          "983:  }",
          "985:  if p.PassUserHeaders {",
          "986:   if p.PreferEmailToUser && session.Email != \"\" {",
          "987:    req.Header[\"X-Forwarded-User\"] = []string{session.Email}",
          "988:    req.Header.Del(\"X-Forwarded-Email\")",
          "989:   } else {",
          "990:    req.Header[\"X-Forwarded-User\"] = []string{session.User}",
          "991:    if session.Email != \"\" {",
          "992:     req.Header[\"X-Forwarded-Email\"] = []string{session.Email}",
          "993:    } else {",
          "994:     req.Header.Del(\"X-Forwarded-Email\")",
          "995:    }",
          "996:   }",
          "998:   if session.PreferredUsername != \"\" {",
          "999:    req.Header[\"X-Forwarded-Preferred-Username\"] = []string{session.PreferredUsername}",
          "1000:   } else {",
          "1001:    req.Header.Del(\"X-Forwarded-Preferred-Username\")",
          "1002:   }",
          "1004:   if len(session.Groups) > 0 {",
          "1005:    for _, group := range session.Groups {",
          "1006:     req.Header.Add(\"X-Forwarded-Groups\", group)",
          "1007:    }",
          "1008:   } else {",
          "1009:    req.Header.Del(\"X-Forwarded-Groups\")",
          "1010:   }",
          "1011:  }",
          "1013:  if p.SetXAuthRequest {",
          "1014:   rw.Header().Set(\"X-Auth-Request-User\", session.User)",
          "1015:   if session.Email != \"\" {",
          "1016:    rw.Header().Set(\"X-Auth-Request-Email\", session.Email)",
          "1017:   } else {",
          "1018:    rw.Header().Del(\"X-Auth-Request-Email\")",
          "1019:   }",
          "1020:   if session.PreferredUsername != \"\" {",
          "1021:    rw.Header().Set(\"X-Auth-Request-Preferred-Username\", session.PreferredUsername)",
          "1022:   } else {",
          "1023:    rw.Header().Del(\"X-Auth-Request-Preferred-Username\")",
          "1024:   }",
          "1026:   if p.PassAccessToken {",
          "1027:    if session.AccessToken != \"\" {",
          "1028:     rw.Header().Set(\"X-Auth-Request-Access-Token\", session.AccessToken)",
          "1029:    } else {",
          "1030:     rw.Header().Del(\"X-Auth-Request-Access-Token\")",
          "1031:    }",
          "1032:   }",
          "1034:   if len(session.Groups) > 0 {",
          "1035:    for _, group := range session.Groups {",
          "1036:     rw.Header().Add(\"X-Auth-Request-Groups\", group)",
          "1037:    }",
          "1038:   } else {",
          "1039:    rw.Header().Del(\"X-Auth-Request-Groups\")",
          "1040:   }",
          "1041:  }",
          "1043:  if p.PassAccessToken {",
          "1044:   if session.AccessToken != \"\" {",
          "1045:    req.Header[\"X-Forwarded-Access-Token\"] = []string{session.AccessToken}",
          "1046:   } else {",
          "1047:    req.Header.Del(\"X-Forwarded-Access-Token\")",
          "1048:   }",
          "1049:  }",
          "1051:  if p.PassAuthorization {",
          "1052:   if session.IDToken != \"\" {",
          "1053:    req.Header[\"Authorization\"] = []string{fmt.Sprintf(\"Bearer %s\", session.IDToken)}",
          "1054:   } else {",
          "1055:    req.Header.Del(\"Authorization\")",
          "1056:   }",
          "1057:  }",
          "1058:  if p.SetBasicAuth {",
          "1059:   switch {",
          "1060:   case p.PreferEmailToUser && session.Email != \"\":",
          "1061:    authVal := b64.StdEncoding.EncodeToString([]byte(session.Email + \":\" + p.BasicAuthPassword))",
          "1062:    rw.Header().Set(\"Authorization\", \"Basic \"+authVal)",
          "1063:   case session.User != \"\":",
          "1064:    authVal := b64.StdEncoding.EncodeToString([]byte(session.User + \":\" + p.BasicAuthPassword))",
          "1065:    rw.Header().Set(\"Authorization\", \"Basic \"+authVal)",
          "1066:   default:",
          "1067:    rw.Header().Del(\"Authorization\")",
          "1068:   }",
          "1069:  }",
          "1070:  if p.SetAuthorization {",
          "1071:   if session.IDToken != \"\" {",
          "1072:    rw.Header().Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", session.IDToken))",
          "1073:   } else {",
          "1074:    rw.Header().Del(\"Authorization\")",
          "1075:   }",
          "1076:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1082:  }",
          "1083: }",
          "1112: func isAjax(req *http.Request) bool {",
          "1113:  acceptValues := req.Header.Values(\"Accept\")",
          "",
          "[Removed Lines]",
          "1086: func (p *OAuthProxy) stripAuthHeaders(req *http.Request) {",
          "1087:  if p.PassBasicAuth {",
          "1088:   req.Header.Del(\"X-Forwarded-User\")",
          "1089:   req.Header.Del(\"X-Forwarded-Groups\")",
          "1090:   req.Header.Del(\"X-Forwarded-Email\")",
          "1091:   req.Header.Del(\"X-Forwarded-Preferred-Username\")",
          "1092:   req.Header.Del(\"Authorization\")",
          "1093:  }",
          "1095:  if p.PassUserHeaders {",
          "1096:   req.Header.Del(\"X-Forwarded-User\")",
          "1097:   req.Header.Del(\"X-Forwarded-Groups\")",
          "1098:   req.Header.Del(\"X-Forwarded-Email\")",
          "1099:   req.Header.Del(\"X-Forwarded-Preferred-Username\")",
          "1100:  }",
          "1102:  if p.PassAccessToken {",
          "1103:   req.Header.Del(\"X-Forwarded-Access-Token\")",
          "1104:  }",
          "1106:  if p.PassAuthorization {",
          "1107:   req.Header.Del(\"Authorization\")",
          "1108:  }",
          "1109: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:    t.Fatal(err)",
          "496:   }",
          "497:  }))",
          "498:  opts := baseTestOptions()",
          "499:  opts.UpstreamServers = options.Upstreams{",
          "500:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:  basicAuthPassword := \"This is a secure password\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:  }",
          "507:  opts.Cookie.Secure = false",
          "513:  err := validation.Validate(opts)",
          "514:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "508:  opts.PassBasicAuth = true",
          "509:  opts.SetBasicAuth = true",
          "510:  opts.PassUserHeaders = true",
          "511:  opts.PreferEmailToUser = true",
          "512:  opts.BasicAuthPassword = \"This is a secure password\"",
          "",
          "[Added Lines]",
          "510:  opts.InjectRequestHeaders = []options.Header{",
          "511:   {",
          "512:    Name: \"Authorization\",",
          "513:    Values: []options.HeaderValue{",
          "514:     {",
          "515:      ClaimSource: &options.ClaimSource{",
          "516:       Claim: \"email\",",
          "517:       BasicAuthPassword: &options.SecretSource{",
          "518:        Value: []byte(base64.StdEncoding.EncodeToString([]byte(basicAuthPassword))),",
          "519:       },",
          "520:      },",
          "521:     },",
          "522:    },",
          "523:   },",
          "524:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "524:   t.Fatal(err)",
          "525:  }",
          "527:  rw := httptest.NewRecorder()",
          "556:  })",
          "559:  rw = httptest.NewRecorder()",
          "560:  proxy.ServeHTTP(rw, req)",
          "565:  assert.Equal(t, expectedHeader, rw.Body.String())",
          "566:  providerServer.Close()",
          "567: }",
          "624:  opts := baseTestOptions()",
          "664:  }",
          "669:  err := validation.Validate(opts)",
          "670:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "528:  req, _ := http.NewRequest(\"GET\", \"/oauth2/callback?code=callback_code&state=nonce:\", strings.NewReader(\"\"))",
          "529:  req.AddCookie(proxy.MakeCSRFCookie(req, \"nonce\", proxy.CookieExpire, time.Now()))",
          "530:  proxy.ServeHTTP(rw, req)",
          "531:  if rw.Code >= 400 {",
          "532:   t.Fatalf(\"expected 3xx got %d\", rw.Code)",
          "533:  }",
          "534:  cookie := rw.Header().Values(\"Set-Cookie\")[1]",
          "536:  cookieName := proxy.CookieName",
          "537:  var value string",
          "538:  keyPrefix := cookieName + \"=\"",
          "540:  for _, field := range strings.Split(cookie, \"; \") {",
          "541:   value = strings.TrimPrefix(field, keyPrefix)",
          "542:   if value != field {",
          "543:    break",
          "544:   } else {",
          "545:    value = \"\"",
          "546:   }",
          "547:  }",
          "549:  req, _ = http.NewRequest(\"GET\", \"/\", strings.NewReader(\"\"))",
          "550:  req.AddCookie(&http.Cookie{",
          "551:   Name:     cookieName,",
          "552:   Value:    value,",
          "553:   Path:     \"/\",",
          "554:   Expires:  time.Now().Add(time.Duration(24)),",
          "555:   HttpOnly: true,",
          "557:  req.AddCookie(proxy.MakeCSRFCookie(req, \"nonce\", proxy.CookieExpire, time.Now()))",
          "564:  expectedHeader := \"Basic \" + base64.StdEncoding.EncodeToString([]byte(emailAddress+\":\"+opts.BasicAuthPassword))",
          "569: func TestBasicAuthWithEmail(t *testing.T) {",
          "570:  opts := baseTestOptions()",
          "571:  opts.PassBasicAuth = true",
          "572:  opts.PassUserHeaders = false",
          "573:  opts.PreferEmailToUser = false",
          "574:  opts.BasicAuthPassword = \"This is a secure password\"",
          "575:  err := validation.Validate(opts)",
          "576:  assert.NoError(t, err)",
          "578:  const emailAddress = \"john.doe@example.com\"",
          "579:  const userName = \"9fcab5c9b889a557\"",
          "582:  expectedEmailHeader := \"Basic \" + base64.StdEncoding.EncodeToString([]byte(emailAddress+\":\"+opts.BasicAuthPassword))",
          "583:  expectedUserHeader := \"Basic \" + base64.StdEncoding.EncodeToString([]byte(userName+\":\"+opts.BasicAuthPassword))",
          "585:  created := time.Now()",
          "586:  session := &sessions.SessionState{",
          "587:   User:        userName,",
          "588:   Email:       emailAddress,",
          "589:   AccessToken: \"oauth_token\",",
          "590:   CreatedAt:   &created,",
          "591:  }",
          "592:  {",
          "593:   rw := httptest.NewRecorder()",
          "594:   req, _ := http.NewRequest(\"GET\", opts.ProxyPrefix+\"/testCase0\", nil)",
          "595:   proxy, err := NewOAuthProxy(opts, func(email string) bool {",
          "596:    return email == emailAddress",
          "597:   })",
          "598:   if err != nil {",
          "599:    t.Fatal(err)",
          "600:   }",
          "601:   proxy.addHeadersForProxying(rw, req, session)",
          "602:   assert.Equal(t, expectedUserHeader, req.Header[\"Authorization\"][0])",
          "603:   assert.Equal(t, userName, req.Header[\"X-Forwarded-User\"][0])",
          "604:  }",
          "606:  opts.PreferEmailToUser = true",
          "607:  {",
          "608:   rw := httptest.NewRecorder()",
          "609:   req, _ := http.NewRequest(\"GET\", opts.ProxyPrefix+\"/testCase1\", nil)",
          "611:   proxy, err := NewOAuthProxy(opts, func(email string) bool {",
          "612:    return email == emailAddress",
          "613:   })",
          "614:   if err != nil {",
          "615:    t.Fatal(err)",
          "616:   }",
          "617:   proxy.addHeadersForProxying(rw, req, session)",
          "618:   assert.Equal(t, expectedEmailHeader, req.Header[\"Authorization\"][0])",
          "619:   assert.Equal(t, emailAddress, req.Header[\"X-Forwarded-User\"][0])",
          "620:  }",
          "621: }",
          "623: func TestPassUserHeadersWithEmail(t *testing.T) {",
          "625:  err := validation.Validate(opts)",
          "626:  assert.NoError(t, err)",
          "628:  const emailAddress = \"john.doe@example.com\"",
          "629:  const userName = \"9fcab5c9b889a557\"",
          "631:  created := time.Now()",
          "632:  session := &sessions.SessionState{",
          "633:   User:        userName,",
          "634:   Email:       emailAddress,",
          "635:   AccessToken: \"oauth_token\",",
          "636:   CreatedAt:   &created,",
          "637:  }",
          "638:  {",
          "639:   rw := httptest.NewRecorder()",
          "640:   req, _ := http.NewRequest(\"GET\", opts.ProxyPrefix+\"/testCase0\", nil)",
          "641:   proxy, err := NewOAuthProxy(opts, func(email string) bool {",
          "642:    return email == emailAddress",
          "643:   })",
          "644:   if err != nil {",
          "645:    t.Fatal(err)",
          "646:   }",
          "647:   proxy.addHeadersForProxying(rw, req, session)",
          "648:   assert.Equal(t, userName, req.Header[\"X-Forwarded-User\"][0])",
          "649:  }",
          "651:  opts.PreferEmailToUser = true",
          "652:  {",
          "653:   rw := httptest.NewRecorder()",
          "654:   req, _ := http.NewRequest(\"GET\", opts.ProxyPrefix+\"/testCase1\", nil)",
          "656:   proxy, err := NewOAuthProxy(opts, func(email string) bool {",
          "657:    return email == emailAddress",
          "658:   })",
          "659:   if err != nil {",
          "660:    t.Fatal(err)",
          "661:   }",
          "662:   proxy.addHeadersForProxying(rw, req, session)",
          "663:   assert.Equal(t, emailAddress, req.Header[\"X-Forwarded-User\"][0])",
          "665: }",
          "667: func TestPassGroupsHeadersWithGroups(t *testing.T) {",
          "668:  opts := baseTestOptions()",
          "",
          "[Added Lines]",
          "542:  req, _ := http.NewRequest(\"GET\", \"/\", nil)",
          "543:  err = proxy.sessionStore.Save(rw, req, &sessions.SessionState{",
          "544:   Email: emailAddress,",
          "546:  assert.NoError(t, err)",
          "549:  cookie := rw.Header().Values(\"Set-Cookie\")[0]",
          "551:  req, _ = http.NewRequest(\"GET\", \"/\", nil)",
          "552:  req.Header.Set(\"Cookie\", cookie)",
          "558:  expectedHeader := \"Basic \" + base64.StdEncoding.EncodeToString([]byte(emailAddress+\":\"+basicAuthPassword))",
          "563: func TestPassGroupsHeadersWithGroups(t *testing.T) {",
          "565:  opts.InjectRequestHeaders = []options.Header{",
          "566:   {",
          "567:    Name: \"X-Forwarded-Groups\",",
          "568:    Values: []options.HeaderValue{",
          "569:     {",
          "570:      ClaimSource: &options.ClaimSource{",
          "571:       Claim: \"groups\",",
          "572:      },",
          "573:     },",
          "574:    },",
          "575:   },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "681:   AccessToken: \"oauth_token\",",
          "682:   CreatedAt:   &created,",
          "683:  }",
          "839: }",
          "841: type PassAccessTokenTest struct {",
          "",
          "[Removed Lines]",
          "684:  {",
          "685:   rw := httptest.NewRecorder()",
          "686:   req, _ := http.NewRequest(\"GET\", opts.ProxyPrefix+\"/testCase0\", nil)",
          "687:   proxy, err := NewOAuthProxy(opts, func(email string) bool {",
          "688:    return email == emailAddress",
          "689:   })",
          "690:   if err != nil {",
          "691:    t.Fatal(err)",
          "692:   }",
          "693:   proxy.addHeadersForProxying(rw, req, session)",
          "694:   assert.Equal(t, groups, req.Header[\"X-Forwarded-Groups\"])",
          "695:  }",
          "696: }",
          "698: func TestStripAuthHeaders(t *testing.T) {",
          "699:  testCases := map[string]struct {",
          "700:   SkipAuthStripHeaders bool",
          "701:   PassBasicAuth        bool",
          "702:   PassUserHeaders      bool",
          "703:   PassAccessToken      bool",
          "704:   PassAuthorization    bool",
          "705:   StrippedHeaders      map[string]bool",
          "706:  }{",
          "707:   \"Default options\": {",
          "708:    SkipAuthStripHeaders: true,",
          "709:    PassBasicAuth:        true,",
          "710:    PassUserHeaders:      true,",
          "711:    PassAccessToken:      false,",
          "712:    PassAuthorization:    false,",
          "713:    StrippedHeaders: map[string]bool{",
          "714:     \"X-Forwarded-User\":               true,",
          "715:     \"X-Forwared-Groups\":              true,",
          "716:     \"X-Forwarded-Email\":              true,",
          "717:     \"X-Forwarded-Preferred-Username\": true,",
          "718:     \"X-Forwarded-Access-Token\":       false,",
          "719:     \"Authorization\":                  true,",
          "720:    },",
          "721:   },",
          "722:   \"Pass access token\": {",
          "723:    SkipAuthStripHeaders: true,",
          "724:    PassBasicAuth:        true,",
          "725:    PassUserHeaders:      true,",
          "726:    PassAccessToken:      true,",
          "727:    PassAuthorization:    false,",
          "728:    StrippedHeaders: map[string]bool{",
          "729:     \"X-Forwarded-User\":               true,",
          "730:     \"X-Forwared-Groups\":              true,",
          "731:     \"X-Forwarded-Email\":              true,",
          "732:     \"X-Forwarded-Preferred-Username\": true,",
          "733:     \"X-Forwarded-Access-Token\":       true,",
          "734:     \"Authorization\":                  true,",
          "735:    },",
          "736:   },",
          "737:   \"Nothing setting Authorization\": {",
          "738:    SkipAuthStripHeaders: true,",
          "739:    PassBasicAuth:        false,",
          "740:    PassUserHeaders:      true,",
          "741:    PassAccessToken:      true,",
          "742:    PassAuthorization:    false,",
          "743:    StrippedHeaders: map[string]bool{",
          "744:     \"X-Forwarded-User\":               true,",
          "745:     \"X-Forwared-Groups\":              true,",
          "746:     \"X-Forwarded-Email\":              true,",
          "747:     \"X-Forwarded-Preferred-Username\": true,",
          "748:     \"X-Forwarded-Access-Token\":       true,",
          "749:     \"Authorization\":                  false,",
          "750:    },",
          "751:   },",
          "752:   \"Only Authorization header modified\": {",
          "753:    SkipAuthStripHeaders: true,",
          "754:    PassBasicAuth:        false,",
          "755:    PassUserHeaders:      false,",
          "756:    PassAccessToken:      false,",
          "757:    PassAuthorization:    true,",
          "758:    StrippedHeaders: map[string]bool{",
          "759:     \"X-Forwarded-User\":               false,",
          "760:     \"X-Forwared-Groups\":              false,",
          "761:     \"X-Forwarded-Email\":              false,",
          "762:     \"X-Forwarded-Preferred-Username\": false,",
          "763:     \"X-Forwarded-Access-Token\":       false,",
          "764:     \"Authorization\":                  true,",
          "765:    },",
          "766:   },",
          "767:   \"Don't strip any headers (default options)\": {",
          "768:    SkipAuthStripHeaders: false,",
          "769:    PassBasicAuth:        true,",
          "770:    PassUserHeaders:      true,",
          "771:    PassAccessToken:      false,",
          "772:    PassAuthorization:    false,",
          "773:    StrippedHeaders: map[string]bool{",
          "774:     \"X-Forwarded-User\":               false,",
          "775:     \"X-Forwared-Groups\":              false,",
          "776:     \"X-Forwarded-Email\":              false,",
          "777:     \"X-Forwarded-Preferred-Username\": false,",
          "778:     \"X-Forwarded-Access-Token\":       false,",
          "779:     \"Authorization\":                  false,",
          "780:    },",
          "781:   },",
          "782:   \"Don't strip any headers (custom options)\": {",
          "783:    SkipAuthStripHeaders: false,",
          "784:    PassBasicAuth:        true,",
          "785:    PassUserHeaders:      true,",
          "786:    PassAccessToken:      true,",
          "787:    PassAuthorization:    false,",
          "788:    StrippedHeaders: map[string]bool{",
          "789:     \"X-Forwarded-User\":               false,",
          "790:     \"X-Forwared-Groups\":              false,",
          "791:     \"X-Forwarded-Email\":              false,",
          "792:     \"X-Forwarded-Preferred-Username\": false,",
          "793:     \"X-Forwarded-Access-Token\":       false,",
          "794:     \"Authorization\":                  false,",
          "795:    },",
          "796:   },",
          "797:  }",
          "799:  initialHeaders := map[string]string{",
          "800:   \"X-Forwarded-User\":               \"9fcab5c9b889a557\",",
          "801:   \"X-Forwarded-Email\":              \"john.doe@example.com\",",
          "802:   \"X-Forwarded-Groups\":             \"a,b,c\",",
          "803:   \"X-Forwarded-Preferred-Username\": \"john.doe\",",
          "804:   \"X-Forwarded-Access-Token\":       \"AccessToken\",",
          "805:   \"Authorization\":                  \"bearer IDToken\",",
          "806:  }",
          "808:  for name, tc := range testCases {",
          "809:   t.Run(name, func(t *testing.T) {",
          "810:    opts := baseTestOptions()",
          "811:    opts.SkipAuthStripHeaders = tc.SkipAuthStripHeaders",
          "812:    opts.PassBasicAuth = tc.PassBasicAuth",
          "813:    opts.PassUserHeaders = tc.PassUserHeaders",
          "814:    opts.PassAccessToken = tc.PassAccessToken",
          "815:    opts.PassAuthorization = tc.PassAuthorization",
          "816:    err := validation.Validate(opts)",
          "817:    assert.NoError(t, err)",
          "819:    req, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"%s/testCase\", opts.ProxyPrefix), nil)",
          "820:    for header, val := range initialHeaders {",
          "821:     req.Header.Set(header, val)",
          "822:    }",
          "824:    proxy, err := NewOAuthProxy(opts, func(_ string) bool { return true })",
          "825:    assert.NoError(t, err)",
          "826:    if proxy.skipAuthStripHeaders {",
          "827:     proxy.stripAuthHeaders(req)",
          "828:    }",
          "830:    for header, stripped := range tc.StrippedHeaders {",
          "831:     if stripped {",
          "832:      assert.Equal(t, req.Header.Get(header), \"\")",
          "833:     } else {",
          "834:      assert.Equal(t, req.Header.Get(header), initialHeaders[header])",
          "835:     }",
          "836:    }",
          "837:   })",
          "838:  }",
          "",
          "[Added Lines]",
          "594:  proxy, err := NewOAuthProxy(opts, func(email string) bool {",
          "595:   return email == emailAddress",
          "596:  })",
          "597:  assert.NoError(t, err)",
          "600:  rw := httptest.NewRecorder()",
          "601:  req, _ := http.NewRequest(\"GET\", \"/\", nil)",
          "602:  err = proxy.sessionStore.Save(rw, req, session)",
          "603:  assert.NoError(t, err)",
          "606:  cookie := rw.Header().Values(\"Set-Cookie\")[0]",
          "608:  req, _ = http.NewRequest(\"GET\", \"/\", nil)",
          "609:  req.Header.Set(\"Cookie\", cookie)",
          "610:  rw = httptest.NewRecorder()",
          "611:  proxy.ServeHTTP(rw, req)",
          "613:  assert.Equal(t, groups, req.Header[\"X-Forwarded-Groups\"])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "884:  }",
          "886:  patt.opts.Cookie.Secure = false",
          "888:  err := validation.Validate(patt.opts)",
          "889:  if err != nil {",
          "890:   return nil, err",
          "",
          "[Removed Lines]",
          "887:  patt.opts.PassAccessToken = opts.PassAccessToken",
          "",
          "[Added Lines]",
          "662:  if opts.PassAccessToken {",
          "663:   patt.opts.InjectRequestHeaders = []options.Header{",
          "664:    {",
          "665:     Name: \"X-Forwarded-Access-Token\",",
          "666:     Values: []options.HeaderValue{",
          "667:      {",
          "668:       ClaimSource: &options.ClaimSource{",
          "669:        Claim: \"access_token\",",
          "670:       },",
          "671:      },",
          "672:     },",
          "673:    },",
          "674:   }",
          "675:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:  var pcTest ProcessCookieTest",
          "1444:  pcTest.opts = baseTestOptions()",
          "1446:  pcTest.opts.AllowedGroups = []string{\"oauth_groups\"}",
          "1447:  err := validation.Validate(pcTest.opts)",
          "1448:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "1445:  pcTest.opts.SetXAuthRequest = true",
          "",
          "[Added Lines]",
          "1234:  pcTest.opts.InjectResponseHeaders = []options.Header{",
          "1235:   {",
          "1236:    Name: \"X-Auth-Request-User\",",
          "1237:    Values: []options.HeaderValue{",
          "1238:     {",
          "1239:      ClaimSource: &options.ClaimSource{",
          "1240:       Claim: \"user\",",
          "1241:      },",
          "1242:     },",
          "1243:    },",
          "1244:   },",
          "1245:   {",
          "1246:    Name: \"X-Auth-Request-Email\",",
          "1247:    Values: []options.HeaderValue{",
          "1248:     {",
          "1249:      ClaimSource: &options.ClaimSource{",
          "1250:       Claim: \"email\",",
          "1251:      },",
          "1252:     },",
          "1253:    },",
          "1254:   },",
          "1255:   {",
          "1256:    Name: \"X-Auth-Request-Groups\",",
          "1257:    Values: []options.HeaderValue{",
          "1258:     {",
          "1259:      ClaimSource: &options.ClaimSource{",
          "1260:       Claim: \"groups\",",
          "1261:      },",
          "1262:     },",
          "1263:    },",
          "1264:   },",
          "1265:   {",
          "1266:    Name: \"X-Forwarded-Preferred-Username\",",
          "1267:    Values: []options.HeaderValue{",
          "1268:     {",
          "1269:      ClaimSource: &options.ClaimSource{",
          "1270:       Claim: \"preferred_username\",",
          "1271:      },",
          "1272:     },",
          "1273:    },",
          "1274:   },",
          "1275:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1480:  var pcTest ProcessCookieTest",
          "1482:  pcTest.opts = baseTestOptions()",
          "1485:  err := validation.Validate(pcTest.opts)",
          "1486:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "1483:  pcTest.opts.SetXAuthRequest = true",
          "1484:  pcTest.opts.SetBasicAuth = true",
          "",
          "[Added Lines]",
          "1313:  pcTest.opts.InjectResponseHeaders = []options.Header{",
          "1314:   {",
          "1315:    Name: \"X-Auth-Request-User\",",
          "1316:    Values: []options.HeaderValue{",
          "1317:     {",
          "1318:      ClaimSource: &options.ClaimSource{",
          "1319:       Claim: \"user\",",
          "1320:      },",
          "1321:     },",
          "1322:    },",
          "1323:   },",
          "1324:   {",
          "1325:    Name: \"X-Auth-Request-Email\",",
          "1326:    Values: []options.HeaderValue{",
          "1327:     {",
          "1328:      ClaimSource: &options.ClaimSource{",
          "1329:       Claim: \"email\",",
          "1330:      },",
          "1331:     },",
          "1332:    },",
          "1333:   },",
          "1334:   {",
          "1335:    Name: \"X-Auth-Request-Groups\",",
          "1336:    Values: []options.HeaderValue{",
          "1337:     {",
          "1338:      ClaimSource: &options.ClaimSource{",
          "1339:       Claim: \"groups\",",
          "1340:      },",
          "1341:     },",
          "1342:    },",
          "1343:   },",
          "1344:   {",
          "1345:    Name: \"X-Forwarded-Preferred-Username\",",
          "1346:    Values: []options.HeaderValue{",
          "1347:     {",
          "1348:      ClaimSource: &options.ClaimSource{",
          "1349:       Claim: \"preferred_username\",",
          "1350:      },",
          "1351:     },",
          "1352:    },",
          "1353:   },",
          "1354:   {",
          "1355:    Name: \"Authorization\",",
          "1356:    Values: []options.HeaderValue{",
          "1357:     {",
          "1358:      ClaimSource: &options.ClaimSource{",
          "1359:       Claim: \"user\",",
          "1360:       BasicAuthPassword: &options.SecretSource{",
          "1361:        Value: []byte(base64.StdEncoding.EncodeToString([]byte(\"This is a secure password\"))),",
          "1362:       },",
          "1363:      },",
          "1364:     },",
          "1365:    },",
          "1366:   },",
          "1367:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1511:  assert.Equal(t, http.StatusAccepted, pcTest.rw.Code)",
          "1512:  assert.Equal(t, \"oauth_user\", pcTest.rw.Header().Values(\"X-Auth-Request-User\")[0])",
          "1513:  assert.Equal(t, \"oauth_user@example.com\", pcTest.rw.Header().Values(\"X-Auth-Request-Email\")[0])",
          "1515:  assert.Equal(t, expectedHeader, pcTest.rw.Header().Values(\"Authorization\")[0])",
          "1516: }",
          "",
          "[Removed Lines]",
          "1514:  expectedHeader := \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"oauth_user:\"+pcTest.opts.BasicAuthPassword))",
          "",
          "[Added Lines]",
          "1398:  expectedHeader := \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"oauth_user:This is a secure password\"))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1519:  var pcTest ProcessCookieTest",
          "1521:  pcTest.opts = baseTestOptions()",
          "1524:  err := validation.Validate(pcTest.opts)",
          "1525:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "1522:  pcTest.opts.SetXAuthRequest = true",
          "1523:  pcTest.opts.SetBasicAuth = false",
          "",
          "[Added Lines]",
          "1406:  pcTest.opts.InjectResponseHeaders = []options.Header{",
          "1407:   {",
          "1408:    Name: \"X-Auth-Request-User\",",
          "1409:    Values: []options.HeaderValue{",
          "1410:     {",
          "1411:      ClaimSource: &options.ClaimSource{",
          "1412:       Claim: \"user\",",
          "1413:      },",
          "1414:     },",
          "1415:    },",
          "1416:   },",
          "1417:   {",
          "1418:    Name: \"X-Auth-Request-Email\",",
          "1419:    Values: []options.HeaderValue{",
          "1420:     {",
          "1421:      ClaimSource: &options.ClaimSource{",
          "1422:       Claim: \"email\",",
          "1423:      },",
          "1424:     },",
          "1425:    },",
          "1426:   },",
          "1427:   {",
          "1428:    Name: \"X-Auth-Request-Groups\",",
          "1429:    Values: []options.HeaderValue{",
          "1430:     {",
          "1431:      ClaimSource: &options.ClaimSource{",
          "1432:       Claim: \"groups\",",
          "1433:      },",
          "1434:     },",
          "1435:    },",
          "1436:   },",
          "1437:   {",
          "1438:    Name: \"X-Forwarded-Preferred-Username\",",
          "1439:    Values: []options.HeaderValue{",
          "1440:     {",
          "1441:      ClaimSource: &options.ClaimSource{",
          "1442:       Claim: \"preferred_username\",",
          "1443:      },",
          "1444:     },",
          "1445:    },",
          "1446:   },",
          "1447:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1985:   &oidc.Config{ClientID: \"https://test.myapp.com\", SkipExpiryCheck: true})",
          "1987:  test, err := NewAuthOnlyEndpointTest(func(opts *options.Options) {",
          "1991:   opts.SkipJwtBearerTokens = true",
          "1992:   opts.SetJWTBearerVerifiers(append(opts.GetJWTBearerVerifiers(), verifier))",
          "1993:  })",
          "",
          "[Removed Lines]",
          "1988:   opts.PassAuthorization = true",
          "1989:   opts.SetAuthorization = true",
          "1990:   opts.SetXAuthRequest = true",
          "",
          "[Added Lines]",
          "1912:   opts.InjectRequestHeaders = []options.Header{",
          "1913:    {",
          "1914:     Name: \"Authorization\",",
          "1915:     Values: []options.HeaderValue{",
          "1916:      {",
          "1917:       ClaimSource: &options.ClaimSource{",
          "1918:        Claim:  \"id_token\",",
          "1919:        Prefix: \"Bearer \",",
          "1920:       },",
          "1921:      },",
          "1922:     },",
          "1923:    },",
          "1924:    {",
          "1925:     Name: \"X-Forwarded-User\",",
          "1926:     Values: []options.HeaderValue{",
          "1927:      {",
          "1928:       ClaimSource: &options.ClaimSource{",
          "1929:        Claim: \"user\",",
          "1930:       },",
          "1931:      },",
          "1932:     },",
          "1933:    },",
          "1934:    {",
          "1935:     Name: \"X-Forwarded-Email\",",
          "1936:     Values: []options.HeaderValue{",
          "1937:      {",
          "1938:       ClaimSource: &options.ClaimSource{",
          "1939:        Claim: \"email\",",
          "1940:       },",
          "1941:      },",
          "1942:     },",
          "1943:    },",
          "1944:   }",
          "1946:   opts.InjectResponseHeaders = []options.Header{",
          "1947:    {",
          "1948:     Name: \"Authorization\",",
          "1949:     Values: []options.HeaderValue{",
          "1950:      {",
          "1951:       ClaimSource: &options.ClaimSource{",
          "1952:        Claim:  \"id_token\",",
          "1953:        Prefix: \"Bearer \",",
          "1954:       },",
          "1955:      },",
          "1956:     },",
          "1957:    },",
          "1958:    {",
          "1959:     Name: \"X-Auth-Request-User\",",
          "1960:     Values: []options.HeaderValue{",
          "1961:      {",
          "1962:       ClaimSource: &options.ClaimSource{",
          "1963:        Claim: \"user\",",
          "1964:       },",
          "1965:      },",
          "1966:     },",
          "1967:    },",
          "1968:    {",
          "1969:     Name: \"X-Auth-Request-Email\",",
          "1970:     Values: []options.HeaderValue{",
          "1971:      {",
          "1972:       ClaimSource: &options.ClaimSource{",
          "1973:        Claim: \"email\",",
          "1974:       },",
          "1975:      },",
          "1976:     },",
          "1977:    },",
          "1978:   }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2004:   \"Authorization\": {authHeader},",
          "2005:  }",
          "2016:  test.proxy.ServeHTTP(test.rw, test.req)",
          "2017:  if test.rw.Code >= 400 {",
          "2018:   t.Fatalf(\"expected 3xx got %d\", test.rw.Code)",
          "",
          "[Removed Lines]",
          "2008:  expires := time.Unix(1912151821, 0)",
          "2009:  session, err := test.proxy.getAuthenticatedSession(test.rw, test.req)",
          "2010:  assert.NoError(t, err)",
          "2011:  assert.Equal(t, session.User, \"1234567890\")",
          "2012:  assert.Equal(t, session.Email, \"john@example.com\")",
          "2013:  assert.Equal(t, session.ExpiresOn, &expires)",
          "2014:  assert.Equal(t, session.IDToken, goodJwt)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2140:  opts.ClientID = clientID",
          "2141:  opts.ClientSecret = clientSecret",
          "2142:  opts.EmailDomains = []string{\"*\"}",
          "2143:  return opts",
          "2144: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2125:  opts.InjectRequestHeaders = []options.Header{",
          "2126:   {",
          "2127:    Name: \"Authorization\",",
          "2128:    Values: []options.HeaderValue{",
          "2129:     {",
          "2130:      ClaimSource: &options.ClaimSource{",
          "2131:       Claim: \"user\",",
          "2132:       BasicAuthPassword: &options.SecretSource{",
          "2133:        Value: []byte(base64.StdEncoding.EncodeToString([]byte(\"This is a secure password\"))),",
          "2134:       },",
          "2135:      },",
          "2136:     },",
          "2137:    },",
          "2138:   },",
          "2139:   {",
          "2140:    Name: \"X-Forwarded-User\",",
          "2141:    Values: []options.HeaderValue{",
          "2142:     {",
          "2143:      ClaimSource: &options.ClaimSource{",
          "2144:       Claim: \"user\",",
          "2145:      },",
          "2146:     },",
          "2147:    },",
          "2148:   },",
          "2149:   {",
          "2150:    Name: \"X-Forwarded-Email\",",
          "2151:    Values: []options.HeaderValue{",
          "2152:     {",
          "2153:      ClaimSource: &options.ClaimSource{",
          "2154:       Claim: \"email\",",
          "2155:      },",
          "2156:     },",
          "2157:    },",
          "2158:   },",
          "2159:  }",
          "",
          "---------------"
        ],
        "pkg/validation/options.go||pkg/validation/options.go": [
          "File: pkg/validation/options.go -> pkg/validation/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:    \"\\n      use email-domain=* to authorize all email addresses\")",
          "74:  }",
          "80:  if o.OIDCIssuerURL != \"\" {",
          "82:   ctx := context.Background()",
          "",
          "[Removed Lines]",
          "76:  if o.SetBasicAuth && o.SetAuthorization {",
          "77:   msgs = append(msgs, \"mutually exclusive: set-basic-auth and set-authorization-header can not both be true\")",
          "78:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   }",
          "162:  }",
          "168:  if o.SkipJwtBearerTokens {",
          "170:   if len(o.ExtraJwtIssuers) > 0 {",
          "",
          "[Removed Lines]",
          "164:  if o.PreferEmailToUser && !o.PassBasicAuth && !o.PassUserHeaders {",
          "165:   msgs = append(msgs, \"PreferEmailToUser should only be used with PassBasicAuth or PassUserHeaders\")",
          "166:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/validation/options_test.go||pkg/validation/options_test.go": [
          "File: pkg/validation/options_test.go -> pkg/validation/options_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:  assert.Equal(t, \"profile email\", p.Scope)",
          "163: }",
          "188: func TestCookieRefreshMustBeLessThanCookieExpire(t *testing.T) {",
          "189:  o := testOptions()",
          "190:  assert.Equal(t, nil, Validate(o))",
          "",
          "[Removed Lines]",
          "165: func TestPassAccessTokenRequiresSpecificCookieSecretLengths(t *testing.T) {",
          "166:  o := testOptions()",
          "167:  assert.Equal(t, nil, Validate(o))",
          "169:  assert.Equal(t, false, o.PassAccessToken)",
          "170:  o.PassAccessToken = true",
          "171:  o.Cookie.Secret = \"cookie of invalid length-\"",
          "172:  assert.NotEqual(t, nil, Validate(o))",
          "174:  o.PassAccessToken = false",
          "175:  o.Cookie.Refresh = time.Duration(24) * time.Hour",
          "176:  assert.NotEqual(t, nil, Validate(o))",
          "178:  o.Cookie.Secret = \"16 bytes AES-128\"",
          "179:  assert.Equal(t, nil, Validate(o))",
          "181:  o.Cookie.Secret = \"24 byte secret AES-192--\"",
          "182:  assert.Equal(t, nil, Validate(o))",
          "184:  o.Cookie.Secret = \"32 byte secret for AES-256------\"",
          "185:  assert.Equal(t, nil, Validate(o))",
          "186: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/validation/sessions.go||pkg/validation/sessions.go": [
          "File: pkg/validation/sessions.go -> pkg/validation/sessions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  }",
          "18:  msgs := []string{}",
          "30:  }",
          "31:  if o.Cookie.Refresh != time.Duration(0) {",
          "32:   msgs = append(msgs,",
          "33:    \"cookie_refresh > 0 requires oauth tokens in sessions. session_cookie_minimal cannot be set\")",
          "",
          "[Removed Lines]",
          "19:  if o.PassAuthorization {",
          "20:   msgs = append(msgs,",
          "21:    \"pass_authorization_header requires oauth tokens in sessions. session_cookie_minimal cannot be set\")",
          "22:  }",
          "23:  if o.SetAuthorization {",
          "24:   msgs = append(msgs,",
          "25:    \"set_authorization_header requires oauth tokens in sessions. session_cookie_minimal cannot be set\")",
          "26:  }",
          "27:  if o.PassAccessToken {",
          "28:   msgs = append(msgs,",
          "29:    \"pass_access_token requires oauth tokens in sessions. session_cookie_minimal cannot be set\")",
          "",
          "[Added Lines]",
          "19:  for _, header := range append(o.InjectRequestHeaders, o.InjectResponseHeaders...) {",
          "20:   for _, value := range header.Values {",
          "21:    if value.ClaimSource != nil {",
          "22:     if value.ClaimSource.Claim == \"access_token\" {",
          "23:      msgs = append(msgs,",
          "24:       fmt.Sprintf(\"access_token claim for header %q requires oauth tokens in sessions. session_cookie_minimal cannot be set\", header.Name))",
          "25:     }",
          "26:     if value.ClaimSource.Claim == \"id_token\" {",
          "27:      msgs = append(msgs,",
          "28:       fmt.Sprintf(\"id_token claim for header %q requires oauth tokens in sessions. session_cookie_minimal cannot be set\", header.Name))",
          "29:     }",
          "30:    }",
          "31:   }",
          "",
          "---------------"
        ],
        "pkg/validation/sessions_test.go||pkg/validation/sessions_test.go": [
          "File: pkg/validation/sessions_test.go -> pkg/validation/sessions_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: var _ = Describe(\"Sessions\", func() {",
          "15:  const (",
          "20:  )",
          "22:  type cookieMinimalTableInput struct {",
          "",
          "[Removed Lines]",
          "16:   passAuthorizationMsg = \"pass_authorization_header requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "17:   setAuthorizationMsg  = \"set_authorization_header requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "18:   passAccessTokenMsg   = \"pass_access_token requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "19:   cookieRefreshMsg     = \"cookie_refresh > 0 requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "",
          "[Added Lines]",
          "16:   idTokenConflictMsg     = \"id_token claim for header \\\"X-ID-Token\\\" requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "17:   accessTokenConflictMsg = \"access_token claim for header \\\"X-Access-Token\\\" requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "18:   cookieRefreshMsg       = \"cookie_refresh > 0 requires oauth tokens in sessions. session_cookie_minimal cannot be set\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:    },",
          "39:    errStrings: []string{},",
          "40:   }),",
          "42:    opts: &options.Options{",
          "43:     Session: options.SessionOptions{",
          "44:      Cookie: options.CookieStoreOptions{",
          "45:       Minimal: false,",
          "46:      },",
          "47:     },",
          "49:    },",
          "50:    errStrings: []string{},",
          "51:   }),",
          "",
          "[Removed Lines]",
          "41:   Entry(\"No minimal cookie session & passAuthorization\", &cookieMinimalTableInput{",
          "48:     PassAuthorization: true,",
          "",
          "[Added Lines]",
          "40:   Entry(\"No minimal cookie session & request header has access_token claim\", &cookieMinimalTableInput{",
          "47:     InjectRequestHeaders: []options.Header{",
          "48:      {",
          "49:       Name: \"X-Access-Token\",",
          "50:       Values: []options.HeaderValue{",
          "51:        {",
          "52:         ClaimSource: &options.ClaimSource{",
          "53:          Claim: \"access_token\",",
          "54:         },",
          "55:        },",
          "56:       },",
          "57:      },",
          "58:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:    },",
          "60:    errStrings: []string{},",
          "61:   }),",
          "63:    opts: &options.Options{",
          "64:     Session: options.SessionOptions{",
          "65:      Cookie: options.CookieStoreOptions{",
          "66:       Minimal: true,",
          "67:      },",
          "68:     },",
          "70:    },",
          "72:   }),",
          "74:    opts: &options.Options{",
          "75:     Session: options.SessionOptions{",
          "76:      Cookie: options.CookieStoreOptions{",
          "77:       Minimal: true,",
          "78:      },",
          "79:     },",
          "81:    },",
          "83:   }),",
          "85:    opts: &options.Options{",
          "86:     Session: options.SessionOptions{",
          "87:      Cookie: options.CookieStoreOptions{",
          "88:       Minimal: true,",
          "89:      },",
          "90:     },",
          "92:    },",
          "94:   }),",
          "95:   Entry(\"CookieRefresh conflict\", &cookieMinimalTableInput{",
          "96:    opts: &options.Options{",
          "",
          "[Removed Lines]",
          "62:   Entry(\"PassAuthorization conflict\", &cookieMinimalTableInput{",
          "69:     PassAuthorization: true,",
          "71:    errStrings: []string{passAuthorizationMsg},",
          "73:   Entry(\"SetAuthorization conflict\", &cookieMinimalTableInput{",
          "80:     SetAuthorization: true,",
          "82:    errStrings: []string{setAuthorizationMsg},",
          "84:   Entry(\"PassAccessToken conflict\", &cookieMinimalTableInput{",
          "91:     PassAccessToken: true,",
          "93:    errStrings: []string{passAccessTokenMsg},",
          "",
          "[Added Lines]",
          "72:   Entry(\"Request Header id_token conflict\", &cookieMinimalTableInput{",
          "79:     InjectRequestHeaders: []options.Header{",
          "80:      {",
          "81:       Name: \"X-ID-Token\",",
          "82:       Values: []options.HeaderValue{",
          "83:        {",
          "84:         ClaimSource: &options.ClaimSource{",
          "85:          Claim: \"id_token\",",
          "86:         },",
          "87:        },",
          "88:       },",
          "89:      },",
          "90:     },",
          "92:    errStrings: []string{idTokenConflictMsg},",
          "94:   Entry(\"Response Header id_token conflict\", &cookieMinimalTableInput{",
          "101:     InjectResponseHeaders: []options.Header{",
          "102:      {",
          "103:       Name: \"X-ID-Token\",",
          "104:       Values: []options.HeaderValue{",
          "105:        {",
          "106:         ClaimSource: &options.ClaimSource{",
          "107:          Claim: \"id_token\",",
          "108:         },",
          "109:        },",
          "110:       },",
          "111:      },",
          "112:     },",
          "114:    errStrings: []string{idTokenConflictMsg},",
          "116:   Entry(\"Request Header access_token conflict\", &cookieMinimalTableInput{",
          "123:     InjectRequestHeaders: []options.Header{",
          "124:      {",
          "125:       Name: \"X-Access-Token\",",
          "126:       Values: []options.HeaderValue{",
          "127:        {",
          "128:         ClaimSource: &options.ClaimSource{",
          "129:          Claim: \"access_token\",",
          "130:         },",
          "131:        },",
          "132:       },",
          "133:      },",
          "134:     },",
          "136:    errStrings: []string{accessTokenConflictMsg},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:       Minimal: true,",
          "113:      },",
          "114:     },",
          "117:    },",
          "119:   }),",
          "120:  )",
          "",
          "[Removed Lines]",
          "115:     PassAuthorization: true,",
          "116:     PassAccessToken:   true,",
          "118:    errStrings: []string{passAuthorizationMsg, passAccessTokenMsg},",
          "",
          "[Added Lines]",
          "158:     InjectResponseHeaders: []options.Header{",
          "159:      {",
          "160:       Name: \"X-ID-Token\",",
          "161:       Values: []options.HeaderValue{",
          "162:        {",
          "163:         ClaimSource: &options.ClaimSource{",
          "164:          Claim: \"id_token\",",
          "165:         },",
          "166:        },",
          "167:       },",
          "168:      },",
          "169:     },",
          "170:     InjectRequestHeaders: []options.Header{",
          "171:      {",
          "172:       Name: \"X-Access-Token\",",
          "173:       Values: []options.HeaderValue{",
          "174:        {",
          "175:         ClaimSource: &options.ClaimSource{",
          "176:          Claim: \"access_token\",",
          "177:         },",
          "178:        },",
          "179:       },",
          "180:      },",
          "181:     },",
          "183:    errStrings: []string{idTokenConflictMsg, accessTokenConflictMsg},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abeb0236d87969243a6b061c5a601c8daffc424c",
      "candidate_info": {
        "commit_hash": "abeb0236d87969243a6b061c5a601c8daffc424c",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/abeb0236d87969243a6b061c5a601c8daffc424c",
        "files": [
          "CHANGELOG.md",
          "docs/configuration/configuration.md",
          "oauthproxy.go",
          "oauthproxy_test.go",
          "pkg/apis/options/options.go"
        ],
        "message": "Strip X-Forwarded auth headers from whitelisted paths (#624)\n\n* Strip X-Forwarded auth headers from whitelisted paths\n\nFor any paths that match skip-auth-regex, strip normal\nX-Forwarded headers that would be sent based on pass-user-headers\nor pass-access-token settings. This prevents malicious injecting\nof authentication headers through the skip-auth-regex paths in\ncases where the regex might be misconfigured and too open.\nControl this behavior with --skip-auth-strip-headers flag. This\nflag is set to TRUE by default (this is secure by default, but\npotentially breaks some legacy configurations).\n\nOnly x-Forwarded headers stripped, left the Authorization header\nuntouched.\n\n* Strip authorization header if it would be set\n\n* Improve TestStripAuthHeaders test table\n\n* Improve --skip-auth-strip-headers flag documentation",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go",
          "pkg/apis/options/options.go||pkg/apis/options/options.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  PreferEmailToUser       bool",
          "112:  skipAuthRegex           []string",
          "113:  skipAuthPreflight       bool",
          "114:  skipJwtBearerTokens     bool",
          "115:  mainJwtBearerVerifier   *oidc.IDTokenVerifier",
          "116:  extraJwtBearerVerifiers []*oidc.IDTokenVerifier",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:  skipAuthStripHeaders    bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:   whitelistDomains:        opts.WhitelistDomains,",
          "344:   skipAuthRegex:           opts.SkipAuthRegex,",
          "345:   skipAuthPreflight:       opts.SkipAuthPreflight,",
          "346:   skipJwtBearerTokens:     opts.SkipJwtBearerTokens,",
          "347:   mainJwtBearerVerifier:   opts.GetOIDCVerifier(),",
          "348:   extraJwtBearerVerifiers: opts.GetJWTBearerVerifiers(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:   skipAuthStripHeaders:    opts.SkipAuthStripHeaders,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718:  case path == p.RobotsPath:",
          "719:   p.RobotsTxt(rw)",
          "720:  case p.IsWhitelistedRequest(req):",
          "722:  case path == p.SignInPath:",
          "723:   p.SignIn(rw, req)",
          "724:  case path == p.SignOutPath:",
          "",
          "[Removed Lines]",
          "721:   p.serveMux.ServeHTTP(rw, req)",
          "",
          "[Added Lines]",
          "723:   p.SkipAuthProxy(rw, req)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "891:  rw.WriteHeader(http.StatusAccepted)",
          "892: }",
          "896: func (p *OAuthProxy) Proxy(rw http.ResponseWriter, req *http.Request) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897: func (p *OAuthProxy) SkipAuthProxy(rw http.ResponseWriter, req *http.Request) {",
          "898:  if p.skipAuthStripHeaders {",
          "899:   p.stripAuthHeaders(req)",
          "900:  }",
          "901:  p.serveMux.ServeHTTP(rw, req)",
          "902: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1122:  }",
          "1123: }",
          "1127: func (p *OAuthProxy) CheckBasicAuth(req *http.Request) (*sessionsapi.SessionState, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136: func (p *OAuthProxy) stripAuthHeaders(req *http.Request) {",
          "1137:  if p.PassBasicAuth {",
          "1138:   req.Header.Del(\"X-Forwarded-User\")",
          "1139:   req.Header.Del(\"X-Forwarded-Email\")",
          "1140:   req.Header.Del(\"X-Forwarded-Preferred-Username\")",
          "1141:   req.Header.Del(\"Authorization\")",
          "1142:  }",
          "1144:  if p.PassUserHeaders {",
          "1145:   req.Header.Del(\"X-Forwarded-User\")",
          "1146:   req.Header.Del(\"X-Forwarded-Email\")",
          "1147:   req.Header.Del(\"X-Forwarded-Preferred-Username\")",
          "1148:  }",
          "1150:  if p.PassAccessToken {",
          "1151:   req.Header.Del(\"X-Forwarded-Access-Token\")",
          "1152:  }",
          "1154:  if p.PassAuthorization {",
          "1155:   req.Header.Del(\"Authorization\")",
          "1156:  }",
          "1157: }",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:  }",
          "724: }",
          "726: type PassAccessTokenTest struct {",
          "727:  providerServer *httptest.Server",
          "728:  proxy          *OAuthProxy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726: func TestStripAuthHeaders(t *testing.T) {",
          "727:  testCases := map[string]struct {",
          "728:   SkipAuthStripHeaders bool",
          "729:   PassBasicAuth        bool",
          "730:   PassUserHeaders      bool",
          "731:   PassAccessToken      bool",
          "732:   PassAuthorization    bool",
          "733:   StrippedHeaders      map[string]bool",
          "734:  }{",
          "735:   \"Default options\": {",
          "736:    SkipAuthStripHeaders: true,",
          "737:    PassBasicAuth:        true,",
          "738:    PassUserHeaders:      true,",
          "739:    PassAccessToken:      false,",
          "740:    PassAuthorization:    false,",
          "741:    StrippedHeaders: map[string]bool{",
          "742:     \"X-Forwarded-User\":               true,",
          "743:     \"X-Forwarded-Email\":              true,",
          "744:     \"X-Forwarded-Preferred-Username\": true,",
          "745:     \"X-Forwarded-Access-Token\":       false,",
          "746:     \"Authorization\":                  true,",
          "747:    },",
          "748:   },",
          "749:   \"Pass access token\": {",
          "750:    SkipAuthStripHeaders: true,",
          "751:    PassBasicAuth:        true,",
          "752:    PassUserHeaders:      true,",
          "753:    PassAccessToken:      true,",
          "754:    PassAuthorization:    false,",
          "755:    StrippedHeaders: map[string]bool{",
          "756:     \"X-Forwarded-User\":               true,",
          "757:     \"X-Forwarded-Email\":              true,",
          "758:     \"X-Forwarded-Preferred-Username\": true,",
          "759:     \"X-Forwarded-Access-Token\":       true,",
          "760:     \"Authorization\":                  true,",
          "761:    },",
          "762:   },",
          "763:   \"Nothing setting Authorization\": {",
          "764:    SkipAuthStripHeaders: true,",
          "765:    PassBasicAuth:        false,",
          "766:    PassUserHeaders:      true,",
          "767:    PassAccessToken:      true,",
          "768:    PassAuthorization:    false,",
          "769:    StrippedHeaders: map[string]bool{",
          "770:     \"X-Forwarded-User\":               true,",
          "771:     \"X-Forwarded-Email\":              true,",
          "772:     \"X-Forwarded-Preferred-Username\": true,",
          "773:     \"X-Forwarded-Access-Token\":       true,",
          "774:     \"Authorization\":                  false,",
          "775:    },",
          "776:   },",
          "777:   \"Only Authorization header modified\": {",
          "778:    SkipAuthStripHeaders: true,",
          "779:    PassBasicAuth:        false,",
          "780:    PassUserHeaders:      false,",
          "781:    PassAccessToken:      false,",
          "782:    PassAuthorization:    true,",
          "783:    StrippedHeaders: map[string]bool{",
          "784:     \"X-Forwarded-User\":               false,",
          "785:     \"X-Forwarded-Email\":              false,",
          "786:     \"X-Forwarded-Preferred-Username\": false,",
          "787:     \"X-Forwarded-Access-Token\":       false,",
          "788:     \"Authorization\":                  true,",
          "789:    },",
          "790:   },",
          "791:   \"Don't strip any headers (default options)\": {",
          "792:    SkipAuthStripHeaders: false,",
          "793:    PassBasicAuth:        true,",
          "794:    PassUserHeaders:      true,",
          "795:    PassAccessToken:      false,",
          "796:    PassAuthorization:    false,",
          "797:    StrippedHeaders: map[string]bool{",
          "798:     \"X-Forwarded-User\":               false,",
          "799:     \"X-Forwarded-Email\":              false,",
          "800:     \"X-Forwarded-Preferred-Username\": false,",
          "801:     \"X-Forwarded-Access-Token\":       false,",
          "802:     \"Authorization\":                  false,",
          "803:    },",
          "804:   },",
          "805:   \"Don't strip any headers (custom options)\": {",
          "806:    SkipAuthStripHeaders: false,",
          "807:    PassBasicAuth:        true,",
          "808:    PassUserHeaders:      true,",
          "809:    PassAccessToken:      true,",
          "810:    PassAuthorization:    false,",
          "811:    StrippedHeaders: map[string]bool{",
          "812:     \"X-Forwarded-User\":               false,",
          "813:     \"X-Forwarded-Email\":              false,",
          "814:     \"X-Forwarded-Preferred-Username\": false,",
          "815:     \"X-Forwarded-Access-Token\":       false,",
          "816:     \"Authorization\":                  false,",
          "817:    },",
          "818:   },",
          "819:  }",
          "821:  initialHeaders := map[string]string{",
          "822:   \"X-Forwarded-User\":               \"9fcab5c9b889a557\",",
          "823:   \"X-Forwarded-Email\":              \"john.doe@example.com\",",
          "824:   \"X-Forwarded-Preferred-Username\": \"john.doe\",",
          "825:   \"X-Forwarded-Access-Token\":       \"AccessToken\",",
          "826:   \"Authorization\":                  \"bearer IDToken\",",
          "827:  }",
          "829:  for name, tc := range testCases {",
          "830:   t.Run(name, func(t *testing.T) {",
          "831:    opts := baseTestOptions()",
          "832:    opts.SkipAuthStripHeaders = tc.SkipAuthStripHeaders",
          "833:    opts.PassBasicAuth = tc.PassBasicAuth",
          "834:    opts.PassUserHeaders = tc.PassUserHeaders",
          "835:    opts.PassAccessToken = tc.PassAccessToken",
          "836:    opts.PassAuthorization = tc.PassAuthorization",
          "837:    err := validation.Validate(opts)",
          "838:    assert.NoError(t, err)",
          "840:    req, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"%s/testCase\", opts.ProxyPrefix), nil)",
          "841:    for header, val := range initialHeaders {",
          "842:     req.Header.Set(header, val)",
          "843:    }",
          "845:    proxy, err := NewOAuthProxy(opts, func(_ string) bool { return true })",
          "846:    assert.NoError(t, err)",
          "847:    if proxy.skipAuthStripHeaders {",
          "848:     proxy.stripAuthHeaders(req)",
          "849:    }",
          "851:    for header, stripped := range tc.StrippedHeaders {",
          "852:     if stripped {",
          "853:      assert.Equal(t, req.Header.Get(header), \"\")",
          "854:     } else {",
          "855:      assert.Equal(t, req.Header.Get(header), initialHeaders[header])",
          "856:     }",
          "857:    }",
          "858:   })",
          "859:  }",
          "860: }",
          "",
          "---------------"
        ],
        "pkg/apis/options/options.go||pkg/apis/options/options.go": [
          "File: pkg/apis/options/options.go -> pkg/apis/options/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  Upstreams                     []string      `flag:\"upstream\" cfg:\"upstreams\"`",
          "68:  SkipAuthRegex                 []string      `flag:\"skip-auth-regex\" cfg:\"skip_auth_regex\"`",
          "69:  SkipJwtBearerTokens           bool          `flag:\"skip-jwt-bearer-tokens\" cfg:\"skip_jwt_bearer_tokens\"`",
          "70:  ExtraJwtIssuers               []string      `flag:\"extra-jwt-issuers\" cfg:\"extra_jwt_issuers\"`",
          "71:  PassBasicAuth                 bool          `flag:\"pass-basic-auth\" cfg:\"pass_basic_auth\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:  SkipAuthStripHeaders          bool          `flag:\"skip-auth-strip-headers\" cfg:\"skip_auth_strip_headers\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   AzureTenant:                      \"common\",",
          "160:   SetXAuthRequest:                  false,",
          "161:   SkipAuthPreflight:                false,",
          "162:   FlushInterval:                    time.Duration(1) * time.Second,",
          "163:   PassBasicAuth:                    true,",
          "164:   SetBasicAuth:                     false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:   SkipAuthStripHeaders:             false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:  flagSet.Bool(\"pass-authorization-header\", false, \"pass the Authorization Header to upstream\")",
          "203:  flagSet.Bool(\"set-authorization-header\", false, \"set Authorization response headers (useful in Nginx auth_request mode)\")",
          "204:  flagSet.StringSlice(\"skip-auth-regex\", []string{}, \"bypass authentication for requests path's that match (may be given multiple times)\")",
          "205:  flagSet.Bool(\"skip-provider-button\", false, \"will skip sign-in-page to directly reach the next step: oauth/start\")",
          "206:  flagSet.Bool(\"skip-auth-preflight\", false, \"will skip authentication for OPTIONS requests\")",
          "207:  flagSet.Bool(\"ssl-insecure-skip-verify\", false, \"skip validation of certificates presented when using HTTPS providers\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:  flagSet.Bool(\"skip-auth-strip-headers\", false, \"strips X-Forwarded-* style authentication headers & Authorization header if they would be set by oauth2-proxy for request paths in --skip-auth-regex\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}