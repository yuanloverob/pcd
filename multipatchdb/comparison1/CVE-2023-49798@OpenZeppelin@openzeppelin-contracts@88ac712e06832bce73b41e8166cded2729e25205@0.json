{
  "cve_id": "CVE-2023-49798",
  "cve_desc": "OpenZeppelin Contracts is a library for smart contract development. A merge issue when porting the 5.0.1 patch to the 4.9 branch caused a line duplication. In the version of `Multicall.sol` released in `@openzeppelin/contracts@4.9.4` and `@openzeppelin/contracts-upgradeable@4.9.4`, all subcalls are executed twice. Concretely, this exposes a user to unintentionally duplicate operations like asset transfers. The duplicated delegatecall was removed in version 4.9.5. The 4.9.4 version is marked as deprecated. Users are advised to upgrade. There are no known workarounds for this issue.",
  "repo": "OpenZeppelin/openzeppelin-contracts",
  "patch_hash": "88ac712e06832bce73b41e8166cded2729e25205",
  "patch_info": {
    "commit_hash": "88ac712e06832bce73b41e8166cded2729e25205",
    "repo": "OpenZeppelin/openzeppelin-contracts",
    "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/88ac712e06832bce73b41e8166cded2729e25205",
    "files": [
      "contracts/utils/Multicall.sol"
    ],
    "message": "Replace double `functionDelegateCall`",
    "before_after_code_files": [
      "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol"
    ]
  },
  "patch_diff": {
    "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol": [
      "File: contracts/utils/Multicall.sol -> contracts/utils/Multicall.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:         results = new bytes[](data.length);",
      "34:         for (uint256 i = 0; i < data.length; i++) {",
      "36:             results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));",
      "37:         }",
      "38:         return results;",
      "",
      "[Removed Lines]",
      "35:             results[i] = Address.functionDelegateCall(address(this), data[i]);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ccfffe13e815f2e8eba20d3ab16d568557e97dd6",
      "candidate_info": {
        "commit_hash": "ccfffe13e815f2e8eba20d3ab16d568557e97dd6",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/ccfffe13e815f2e8eba20d3ab16d568557e97dd6",
        "files": [
          ".changeset/rude-weeks-beg.md",
          ".changeset/strong-points-invent.md",
          "contracts/metatx/ERC2771Context.sol",
          "contracts/mocks/ERC2771ContextMock.sol",
          "contracts/utils/Context.sol",
          "contracts/utils/Multicall.sol",
          "test/metatx/ERC2771Context.test.js"
        ],
        "message": "Make Multicall context-aware",
        "before_after_code_files": [
          "contracts/metatx/ERC2771Context.sol||contracts/metatx/ERC2771Context.sol",
          "contracts/mocks/ERC2771ContextMock.sol||contracts/mocks/ERC2771ContextMock.sol",
          "contracts/utils/Context.sol||contracts/utils/Context.sol",
          "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol",
          "test/metatx/ERC2771Context.test.js||test/metatx/ERC2771Context.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol"
          ],
          "candidate": [
            "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol"
          ]
        }
      },
      "candidate_diff": {
        "contracts/metatx/ERC2771Context.sol||contracts/metatx/ERC2771Context.sol": [
          "File: contracts/metatx/ERC2771Context.sol -> contracts/metatx/ERC2771Context.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:         return forwarder == _trustedForwarder;",
          "22:     }",
          "31:         } else {",
          "32:             return super._msgSender();",
          "33:         }",
          "34:     }",
          "36:     function _msgData() internal view virtual override returns (bytes calldata) {",
          "39:         } else {",
          "40:             return super._msgData();",
          "41:         }",
          "42:     }",
          "43: }",
          "",
          "[Removed Lines]",
          "24:     function _msgSender() internal view virtual override returns (address sender) {",
          "25:         if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {",
          "28:             assembly {",
          "29:                 sender := shr(96, calldataload(sub(calldatasize(), 20)))",
          "30:             }",
          "37:         if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {",
          "38:             return msg.data[:msg.data.length - 20];",
          "",
          "[Added Lines]",
          "28:     function _msgSender() internal view virtual override returns (address) {",
          "29:         uint256 calldataLength = msg.data.length;",
          "30:         uint256 contextSuffixLength = _contextSuffixLength();",
          "31:         if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {",
          "32:             return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));",
          "39:         uint256 calldataLength = msg.data.length;",
          "40:         uint256 contextSuffixLength = _contextSuffixLength();",
          "41:         if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {",
          "42:             return msg.data[:calldataLength - contextSuffixLength];",
          "51:     function _contextSuffixLength() internal view virtual override returns (uint256) {",
          "52:         return 20;",
          "53:     }",
          "",
          "---------------"
        ],
        "contracts/mocks/ERC2771ContextMock.sol||contracts/mocks/ERC2771ContextMock.sol": [
          "File: contracts/mocks/ERC2771ContextMock.sol -> contracts/mocks/ERC2771ContextMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: pragma solidity ^0.8.9;",
          "5: import \"./ContextMock.sol\";",
          "6: import \"../metatx/ERC2771Context.sol\";",
          "11:     constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {",
          "12:         emit Sender(_msgSender()); // _msgSender() should be accessible during construction",
          "",
          "[Removed Lines]",
          "9: contract ERC2771ContextMock is ContextMock, ERC2771Context {",
          "",
          "[Added Lines]",
          "6: import \"../utils/Multicall.sol\";",
          "10: contract ERC2771ContextMock is ContextMock, ERC2771Context, Multicall {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {",
          "20:         return ERC2771Context._msgData();",
          "21:     }",
          "22: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     function _contextSuffixLength() internal view override(Context, ERC2771Context) returns (uint256) {",
          "25:         return ERC2771Context._contextSuffixLength();",
          "26:     }",
          "",
          "---------------"
        ],
        "contracts/utils/Context.sol||contracts/utils/Context.sol": [
          "File: contracts/utils/Context.sol -> contracts/utils/Context.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     function _msgData() internal view virtual returns (bytes calldata) {",
          "22:         return msg.data;",
          "23:     }",
          "24: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     function _contextSuffixLength() internal view virtual returns (uint256) {",
          "26:         return 0;",
          "27:     }",
          "",
          "---------------"
        ],
        "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol": [
          "File: contracts/utils/Multicall.sol -> contracts/utils/Multicall.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: pragma solidity ^0.8.0;",
          "6: import \"./Address.sol\";",
          "18:     function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {",
          "19:         results = new bytes[](data.length);",
          "20:         for (uint256 i = 0; i < data.length; i++) {",
          "21:             results[i] = Address.functionDelegateCall(address(this), data[i]);",
          "22:         }",
          "23:         return results;",
          "24:     }",
          "",
          "[Removed Lines]",
          "13: abstract contract Multicall {",
          "",
          "[Added Lines]",
          "7: import \"./Context.sol\";",
          "23: abstract contract Multicall is Context {",
          "29:         bytes memory context = msg.sender == _msgSender()",
          "30:             ? new bytes(0)",
          "31:             : msg.data[msg.data.length - _contextSuffixLength():];",
          "36:             results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));",
          "",
          "---------------"
        ],
        "test/metatx/ERC2771Context.test.js||test/metatx/ERC2771Context.test.js": [
          "File: test/metatx/ERC2771Context.test.js -> test/metatx/ERC2771Context.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const { shouldBehaveLikeRegularContext } = require('../utils/Context.behavior');",
          "14: contract('ERC2771Context', function (accounts) {",
          "17:   beforeEach(async function () {",
          "18:     this.forwarder = await MinimalForwarder.new();",
          "",
          "[Removed Lines]",
          "15:   const [, trustedForwarder] = accounts;",
          "",
          "[Added Lines]",
          "15:   const [, trustedForwarder, other] = accounts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:       const data = recipient.contract.methods.msgDataShort().encodeABI();",
          "119:       await expectEvent(receipt, 'DataShort', { data });",
          "120:     });",
          "121:   });",
          "122: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     it('multicall poison attack', async function () {",
          "123:       const attacker = Wallet.generate();",
          "124:       const attackerAddress = attacker.getChecksumAddressString();",
          "125:       const nonce = await this.forwarder.getNonce(attackerAddress);",
          "127:       const msgSenderCall = web3.eth.abi.encodeFunctionCall(",
          "128:         {",
          "129:           name: 'msgSender',",
          "130:           type: 'function',",
          "131:           inputs: [],",
          "132:         },",
          "133:         [],",
          "134:       );",
          "136:       const data = web3.eth.abi.encodeFunctionCall(",
          "137:         {",
          "138:           name: 'multicall',",
          "139:           type: 'function',",
          "140:           inputs: [",
          "141:             {",
          "142:               internalType: 'bytes[]',",
          "143:               name: 'data',",
          "144:               type: 'bytes[]',",
          "145:             },",
          "146:           ],",
          "147:         },",
          "148:         [[web3.utils.encodePacked({ value: msgSenderCall, type: 'bytes' }, { value: other, type: 'address' })]],",
          "149:       );",
          "151:       const req = {",
          "152:         from: attackerAddress,",
          "153:         to: this.recipient.address,",
          "154:         value: '0',",
          "155:         gas: '100000',",
          "156:         data,",
          "157:         nonce: Number(nonce),",
          "158:       };",
          "160:       const signature = await ethSigUtil.signTypedMessage(attacker.getPrivateKey(), {",
          "161:         data: {",
          "162:           types: this.types,",
          "163:           domain: this.domain,",
          "164:           primaryType: 'ForwardRequest',",
          "165:           message: req,",
          "166:         },",
          "167:       });",
          "169:       expect(await this.forwarder.verify(req, signature)).to.equal(true);",
          "171:       const receipt = await this.forwarder.execute(req, signature);",
          "172:       await expectEvent.inTransaction(receipt.tx, ERC2771ContextMock, 'Sender', { sender: attackerAddress });",
          "173:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9b10c8e74f2338cd695b75a59594476509ffd9",
      "candidate_info": {
        "commit_hash": "8c9b10c8e74f2338cd695b75a59594476509ffd9",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8c9b10c8e74f2338cd695b75a59594476509ffd9",
        "files": [
          "contracts/utils/Multicall.sol"
        ],
        "message": "Update docs",
        "before_after_code_files": [
          "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol"
          ],
          "candidate": [
            "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol"
          ]
        }
      },
      "candidate_diff": {
        "contracts/utils/Multicall.sol||contracts/utils/Multicall.sol": [
          "File: contracts/utils/Multicall.sol -> contracts/utils/Multicall.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         results = new bytes[](data.length);",
          "34:         for (uint256 i = 0; i < data.length; i++) {",
          "36:             results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));",
          "37:         }",
          "38:         return results;",
          "",
          "[Removed Lines]",
          "35:             results[i] = Address.functionDelegateCall(address(this), data[i]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}