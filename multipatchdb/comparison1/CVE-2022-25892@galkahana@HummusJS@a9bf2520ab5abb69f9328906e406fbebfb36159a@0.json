{
  "cve_id": "CVE-2022-25892",
  "cve_desc": "The package muhammara before 2.6.1, from 3.0.0 and before 3.1.1; all versions of package hummus are vulnerable to Denial of Service (DoS) when supplied with a maliciously crafted PDF file to be parsed.",
  "repo": "galkahana/HummusJS",
  "patch_hash": "a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "patch_info": {
    "commit_hash": "a9bf2520ab5abb69f9328906e406fbebfb36159a",
    "repo": "galkahana/HummusJS",
    "commit_url": "https://github.com/galkahana/HummusJS/commit/a9bf2520ab5abb69f9328906e406fbebfb36159a",
    "files": [
      "README.md",
      "package.json",
      "src/ObjectByteWriterWithPosition.cpp",
      "src/deps/PDFWriter/CMakeLists.txt",
      "src/deps/PDFWriter/DecryptionHelper.cpp",
      "src/deps/PDFWriter/PDFDocumentHandler.cpp",
      "src/deps/PDFWriter/PDFObject.cpp",
      "src/deps/PDFWriter/PDFObject.h",
      "src/deps/PDFWriter/PDFObjectParser.cpp",
      "src/deps/PDFWriter/PDFObjectParser.h",
      "src/deps/PDFWriter/PDFParser.cpp",
      "tests/AppendPagesTest.js",
      "tests/BasicModificationWithStreams.js"
    ],
    "message": "corrections",
    "before_after_code_files": [
      "src/ObjectByteWriterWithPosition.cpp||src/ObjectByteWriterWithPosition.cpp",
      "src/deps/PDFWriter/DecryptionHelper.cpp||src/deps/PDFWriter/DecryptionHelper.cpp",
      "src/deps/PDFWriter/PDFDocumentHandler.cpp||src/deps/PDFWriter/PDFDocumentHandler.cpp",
      "src/deps/PDFWriter/PDFObject.cpp||src/deps/PDFWriter/PDFObject.cpp",
      "src/deps/PDFWriter/PDFObject.h||src/deps/PDFWriter/PDFObject.h",
      "src/deps/PDFWriter/PDFObjectParser.cpp||src/deps/PDFWriter/PDFObjectParser.cpp",
      "src/deps/PDFWriter/PDFObjectParser.h||src/deps/PDFWriter/PDFObjectParser.h",
      "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp",
      "tests/AppendPagesTest.js||tests/AppendPagesTest.js",
      "tests/BasicModificationWithStreams.js||tests/BasicModificationWithStreams.js"
    ]
  },
  "patch_diff": {
    "src/ObjectByteWriterWithPosition.cpp||src/ObjectByteWriterWithPosition.cpp": [
      "File: src/ObjectByteWriterWithPosition.cpp -> src/ObjectByteWriterWithPosition.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     Local<Value> args[1];",
      "54:     args[0] = anArray;",
      "57:     if(result.IsEmpty())",
      "58:     {",
      "61:     }",
      "62:     else if(result->IsNumber())",
      "63:     {",
      "",
      "[Removed Lines]",
      "56:  Local<Value> result = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args).ToLocalChecked();",
      "59:   THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");",
      "60:   return 0;",
      "",
      "[Added Lines]",
      "55:     MaybeLocal<Value> maybe;",
      "56:     TryCatch try_catch(Isolate::GetCurrent());",
      "58:     maybe = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args);",
      "59:     Local <Value> result;",
      "61:     if (!maybe.ToLocal(&result)) {",
      "62:        try_catch.ReThrow();",
      "63:        return 0;",
      "64:     }",
      "67:         THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");",
      "68:         return 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     }",
      "66:     else",
      "67:     {",
      "70:     }",
      "71: }",
      "",
      "[Removed Lines]",
      "68:   THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");",
      "69:   return 0;",
      "",
      "[Added Lines]",
      "76:         THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");",
      "77:         return 0;",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/DecryptionHelper.cpp||src/deps/PDFWriter/DecryptionHelper.cpp": [
      "File: src/deps/PDFWriter/DecryptionHelper.cpp -> src/deps/PDFWriter/DecryptionHelper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: #include \"InputRC4XcodeStream.h\"",
      "37: #include \"InputAESDecodeStream.h\"",
      "38: #include \"Trace.h\"",
      "39: #include <memory>",
      "41: using namespace std;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #include \"Deletable.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "333:  if (!IsEncrypted() || !CanDecryptDocument() || HasCryptFilterDefinition(mParser, inStream) || !mXcryptStreams)",
      "334:   return NULL;",
      "337:  if (savedEcnryptionKey) {",
      "339:  }",
      "340:  else",
      "341:   return NULL;",
      "",
      "[Removed Lines]",
      "336:  void* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "338:   return CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), mXcryptStreams->IsUsingAES());",
      "",
      "[Added Lines]",
      "337:  IDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "339:   return CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), mXcryptStreams->IsUsingAES());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "346:  if (!IsEncrypted() || !CanDecryptDocument())",
      "347:   return inToWrapStream;",
      "350:  if (!savedEcnryptionKey) {",
      "352:   return inToWrapStream;",
      "",
      "[Removed Lines]",
      "349:  void* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "",
      "[Added Lines]",
      "350:  IDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "354:  XCryptionCommon* xcryption = GetFilterForName(mXcrypts, inCryptName);",
      "356:  if (xcryption && savedEcnryptionKey) {",
      "358:  }",
      "359:  else",
      "360:   return inToWrapStream;",
      "",
      "[Removed Lines]",
      "357:   return CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), xcryption->IsUsingAES());",
      "",
      "[Added Lines]",
      "358:   return CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), xcryption->IsUsingAES());",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "454:   XCryptionCommon* streamCryptFilter = GetCryptForStream((PDFStreamInput*)inObject);",
      "455:   if (streamCryptFilter) {",
      "456:    ByteList* savedKey = new ByteList(streamCryptFilter->GetCurrentObjectKey());",
      "458:   }",
      "459:  }",
      "",
      "[Removed Lines]",
      "457:    inObject->SetMetadata(scEcnryptionKeyMetadataKey, savedKey);",
      "",
      "[Added Lines]",
      "458:    inObject->SetMetadata(scEcnryptionKeyMetadataKey,new Deletable<ByteList>(savedKey));",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/PDFDocumentHandler.cpp||src/deps/PDFWriter/PDFDocumentHandler.cpp": [
      "File: src/deps/PDFWriter/PDFDocumentHandler.cpp -> src/deps/PDFWriter/PDFDocumentHandler.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2032:  if(!readingDecrypted) {",
      "2033:   streamReader = mParser->StartReadingFromStreamForPlainCopying(inStream);",
      "2034:  }",
      "2036:  while (it.MoveNext() && PDFHummus::eSuccess == status)",
      "2037:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2036:  if (streamReader == NULL) {",
      "2037:   TRACE_LOG(\"PDFDocumentHandler::WriteStreamObject, unable to start reading stream object\");",
      "2038:   status = PDFHummus::eFailure;",
      "2039:  }",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/PDFObject.cpp||src/deps/PDFWriter/PDFObject.cpp": [
      "File: src/deps/PDFWriter/PDFObject.cpp -> src/deps/PDFWriter/PDFObject.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"PDFObject.h\"",
      "23: const char* PDFObject::scPDFObjectTypeLabel(int index)",
      "24: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include \"IDeletable.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: PDFObject::~PDFObject(void)",
      "55: {",
      "57:  for (; it != mMetadata.end(); ++it) {",
      "59:  }",
      "60:  mMetadata.clear();",
      "61: }",
      "",
      "[Removed Lines]",
      "56:  StringToVoidP::iterator it = mMetadata.begin();",
      "58:   delete it->second;",
      "",
      "[Added Lines]",
      "57:  StringToIDeletable::iterator it = mMetadata.begin();",
      "59:   it->second->DeleteMe();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:  return mType;",
      "66: }",
      "70:  DeleteMetadata(inKey);",
      "73: }",
      "78:  if (it == mMetadata.end())",
      "79:   return NULL;",
      "",
      "[Removed Lines]",
      "68: void PDFObject::SetMetadata(const std::string& inKey, void* inValue) {",
      "72:  mMetadata.insert(StringToVoidP::value_type(inKey, inValue));",
      "75: void* PDFObject::GetMetadata(const std::string& inKey) {",
      "76:  StringToVoidP::iterator it = mMetadata.find(inKey);",
      "",
      "[Added Lines]",
      "69: void PDFObject::SetMetadata(const std::string& inKey, IDeletable* inValue) {",
      "73:  mMetadata.insert(StringToIDeletable::value_type(inKey, inValue));",
      "76: IDeletable* PDFObject::GetMetadata(const std::string& inKey) {",
      "77:  StringToIDeletable::iterator it = mMetadata.find(inKey);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "81:   return it->second;",
      "82: }",
      "87:  if (it == mMetadata.end())",
      "88:   return NULL;",
      "89:  else {",
      "91:   mMetadata.erase(it);",
      "92:   return result;",
      "93:  }",
      "94: }",
      "96: void PDFObject::DeleteMetadata(const std::string& inKey) {",
      "99: }",
      "",
      "[Removed Lines]",
      "84: void* PDFObject::DetachMetadata(const std::string& inKey) {",
      "85:  StringToVoidP::iterator it = mMetadata.find(inKey);",
      "90:   void* result = it->second;",
      "97:  void* result = DetachMetadata(inKey);",
      "98:  delete result;",
      "",
      "[Added Lines]",
      "85: IDeletable* PDFObject::DetachMetadata(const std::string& inKey) {",
      "86:  StringToIDeletable::iterator it = mMetadata.find(inKey);",
      "91:   IDeletable* result = it->second;",
      "98:  IDeletable* result = DetachMetadata(inKey);",
      "99:  if(result)",
      "100:   result->DeleteMe();",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/PDFObject.h||src/deps/PDFWriter/PDFObject.h": [
      "File: src/deps/PDFWriter/PDFObject.h -> src/deps/PDFWriter/PDFObject.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <string>",
      "26: #include <map>",
      "30: class PDFObject : public RefCountObject",
      "31: {",
      "",
      "[Removed Lines]",
      "28: typedef std::map<std::string, void*> StringToVoidP;",
      "",
      "[Added Lines]",
      "28: class IDeletable;",
      "30: typedef std::map<std::string, IDeletable*> StringToIDeletable;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:   metadata will automatically be deleted when object is released",
      "65:  void DeleteMetadata(const std::string& inKey);",
      "68: private:",
      "69:  EPDFObjectType mType;",
      "71: };",
      "",
      "[Removed Lines]",
      "61:  void SetMetadata(const std::string& inKey,void* inValue); // will automatically delete old data in the same key",
      "62:  void* GetMetadata(const std::string& inKey);",
      "64:  void* DetachMetadata(const std::string& inKey);",
      "70:  StringToVoidP mMetadata;",
      "",
      "[Added Lines]",
      "63:  void SetMetadata(const std::string& inKey,IDeletable* inValue); // will automatically delete old data in the same key",
      "64:  IDeletable* GetMetadata(const std::string& inKey);",
      "66:  IDeletable* DetachMetadata(const std::string& inKey);",
      "72:  StringToIDeletable mMetadata;",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/PDFObjectParser.cpp||src/deps/PDFWriter/PDFObjectParser.cpp": [
      "File: src/deps/PDFWriter/PDFObjectParser.cpp -> src/deps/PDFWriter/PDFObjectParser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "706: void PDFObjectParser::SetParserExtender(IPDFParserExtender* inParserExtender)",
      "707: {",
      "708:  mParserExtender = inParserExtender;",
      "709: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709: }",
      "711: IByteReader* PDFObjectParser::StartExternalRead() {",
      "712:  return mStream;",
      "713: }",
      "715: void PDFObjectParser::EndExternalRead() {",
      "716:  ResetReadState();",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/PDFObjectParser.h||src/deps/PDFWriter/PDFObjectParser.h": [
      "File: src/deps/PDFWriter/PDFObjectParser.h -> src/deps/PDFWriter/PDFObjectParser.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:  std::string DecodeHexString(const std::string inStringToDecode);",
      "67: private:",
      "68:  PDFParserTokenizer mTokenizer;",
      "69:  StringList mTokenBuffer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70:  IByteReader* StartExternalRead();",
      "71:  void EndExternalRead();",
      "",
      "---------------"
    ],
    "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp": [
      "File: src/deps/PDFWriter/PDFParser.cpp -> src/deps/PDFWriter/PDFParser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:   mObjectParser.ResetReadState();",
      "353:   RefCountPtr<PDFObject> anObject(mObjectParser.ParseNewObject());",
      "355:   if(anObject->GetType() == PDFObject::ePDFObjectInteger)",
      "356:   {",
      "357:    mLastXrefPosition = (LongFilePositionType)((PDFInteger*)anObject.GetPtr())->GetValue();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:   if (!anObject) {",
      "356:    status = PDFHummus::eFailure;",
      "357:    TRACE_LOG(\"PDFParser::ParseXrefPosition: Unable to find any object\");",
      "358:    break;",
      "359:   }",
      "",
      "---------------"
    ],
    "tests/AppendPagesTest.js||tests/AppendPagesTest.js": [
      "File: tests/AppendPagesTest.js -> tests/AppendPagesTest.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: describe('AppendPagesTest', function() {",
      "2:  it('should complete without error', function() {",
      "5:   pdfWriter.appendPDFPagesFromPDF(__dirname + '/TestMaterials/Original.pdf');",
      "6:   pdfWriter.appendPDFPagesFromPDF(__dirname + '/TestMaterials/XObjectContent.PDF');",
      "",
      "[Removed Lines]",
      "3:   var pdfWriter = require('../hummus').createWriter(__dirname + '/output/AppendPagesTest.pdf');",
      "",
      "[Added Lines]",
      "1: var hummus = require('../hummus');",
      "2: const expect = require('chai').expect;",
      "6:   var pdfWriter = hummus.createWriter(__dirname + '/output/AppendPagesTest.pdf');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9:   pdfWriter.end();",
      "10:  });",
      "11: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15:  it('should throw an error instead of a crash', () => {",
      "16:   var writerBuffer = new hummus.PDFWStreamForBuffer([]);",
      "17:   var pdfWriter = hummus.createWriter(writerBuffer)",
      "18:   expect(() =>",
      "19:    pdfWriter.appendPDFPagesFromPDF(__dirname + '/TestMaterials/appendbreaks.pdf')",
      "20:   ).to.throw('unable to append')",
      "21:  })",
      "",
      "---------------"
    ],
    "tests/BasicModificationWithStreams.js||tests/BasicModificationWithStreams.js": [
      "File: tests/BasicModificationWithStreams.js -> tests/BasicModificationWithStreams.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: var hummus = require('../hummus');",
      "3: describe('BasicModificationWithStreams', function() {",
      "4:  it('should complete without error', function() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: const chai = require('chai');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:   outStream.close();",
      "20:   inStream.close();",
      "21:  });",
      "22: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  it('null for stream should throw an error and not crash', function () {",
      "25:   var res = new hummus.PDFStreamForResponse(null)",
      "26:   chai.expect(",
      "27:    hummus.createWriter.bind(undefined, res)",
      "28:   ).to.throw(/Cannot read propert.*(write)?.* of null/)",
      "29:  })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1fceac7ae5d76437bb7287a8da130e0f655dc86",
      "candidate_info": {
        "commit_hash": "e1fceac7ae5d76437bb7287a8da130e0f655dc86",
        "repo": "galkahana/HummusJS",
        "commit_url": "https://github.com/galkahana/HummusJS/commit/e1fceac7ae5d76437bb7287a8da130e0f655dc86",
        "files": [
          "hummus.js",
          "package.json"
        ],
        "message": "put back old pre gyp, new one causing trouble",
        "before_after_code_files": [
          "hummus.js||hummus.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/galkahana/HummusJS/pull/464"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hummus.js||hummus.js": [
          "File: hummus.js -> hummus.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var fs = require('fs');",
          "2: var path = require('path');",
          "4: var binding_path = pregyp.find(path.resolve(path.join(__dirname,'./package.json')));",
          "5: var hummus = module.exports = require(binding_path);",
          "6: var EventEmitter = require('events').EventEmitter;",
          "",
          "[Removed Lines]",
          "3: var pregyp = require('@mapbox/node-pre-gyp');",
          "",
          "[Added Lines]",
          "3: var pregyp = require('node-pre-gyp');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e149f862b86dd0e3ac7e810063e31da77334345",
      "candidate_info": {
        "commit_hash": "7e149f862b86dd0e3ac7e810063e31da77334345",
        "repo": "galkahana/HummusJS",
        "commit_url": "https://github.com/galkahana/HummusJS/commit/7e149f862b86dd0e3ac7e810063e31da77334345",
        "files": [
          "src/deps/PDFWriter/Deletable.h",
          "src/deps/PDFWriter/IDeletable.h",
          "tests/SigSeg.js",
          "tests/TestMaterials/BrokenPdfBadHeader.txt"
        ],
        "message": "corrections",
        "before_after_code_files": [
          "src/deps/PDFWriter/Deletable.h||src/deps/PDFWriter/Deletable.h",
          "src/deps/PDFWriter/IDeletable.h||src/deps/PDFWriter/IDeletable.h",
          "tests/SigSeg.js||tests/SigSeg.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/galkahana/HummusJS/pull/464"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/Deletable.h||src/deps/PDFWriter/Deletable.h": [
          "File: src/deps/PDFWriter/Deletable.h -> src/deps/PDFWriter/Deletable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"IDeletable.h\"",
          "3: template <typename T>",
          "4: class Deletable: public IDeletable {",
          "5: public:",
          "6:     Deletable(T* inData);",
          "7:     virtual ~Deletable();",
          "9:     virtual void DeleteMe();",
          "11:     T* operator->();",
          "13:  T* GetPtr();",
          "14: private:",
          "15:     T* mValue;",
          "16: };",
          "18: template <typename T>",
          "19: Deletable<T>::Deletable(T* inValue)",
          "20: {",
          "21:  mValue = inValue;",
          "22: }",
          "24: template <typename T>",
          "25: Deletable<T>::~Deletable()",
          "26: {",
          "27:  delete mValue;",
          "28: }",
          "30: template <typename T>",
          "31: void Deletable<T>::DeleteMe()",
          "32: {",
          "33:  delete this;",
          "34: }",
          "36: template <typename T>",
          "37: T* Deletable<T>::operator->()",
          "38: {",
          "39:  return mValue;",
          "40: }",
          "42: template <typename T>",
          "43: T* Deletable<T>::GetPtr()",
          "44: {",
          "45:  return mValue;",
          "46: }",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/IDeletable.h||src/deps/PDFWriter/IDeletable.h": [
          "File: src/deps/PDFWriter/IDeletable.h -> src/deps/PDFWriter/IDeletable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: class IDeletable {",
          "4:     public:",
          "5:         virtual void DeleteMe() = 0;",
          "6: };",
          "",
          "---------------"
        ],
        "tests/SigSeg.js||tests/SigSeg.js": [
          "File: tests/SigSeg.js -> tests/SigSeg.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var hummus = require('../hummus');",
          "2: const { expect } = require(\"chai\");",
          "4: describe(\"SigSegv test\", function () {",
          "5:   it(\"should read fields correctly\", function () {",
          "6:     expect(() =>",
          "7:         hummus.createReader(",
          "8:         __dirname + \"/TestMaterials/BrokenPdfBadHeader.txt\"",
          "9:       )",
          "10:     ).to.throw();",
          "11:   });",
          "12: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6d762c451ef4de0bcf739bcab8414c1853aef5f",
      "candidate_info": {
        "commit_hash": "d6d762c451ef4de0bcf739bcab8414c1853aef5f",
        "repo": "galkahana/HummusJS",
        "commit_url": "https://github.com/galkahana/HummusJS/commit/d6d762c451ef4de0bcf739bcab8414c1853aef5f",
        "files": [
          "hummus.js"
        ],
        "message": "update to new pre-gyp",
        "before_after_code_files": [
          "hummus.js||hummus.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/galkahana/HummusJS/pull/464"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hummus.js||hummus.js": [
          "File: hummus.js -> hummus.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var fs = require('fs');",
          "2: var path = require('path');",
          "4: var binding_path = pregyp.find(path.resolve(path.join(__dirname,'./package.json')));",
          "5: var hummus = module.exports = require(binding_path);",
          "6: var EventEmitter = require('events').EventEmitter;",
          "",
          "[Removed Lines]",
          "3: var pregyp = require('node-pre-gyp');",
          "",
          "[Added Lines]",
          "3: var pregyp = require('@mapbox/node-pre-gyp');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a571525892f57d361eb7515644e59ed0935384b",
      "candidate_info": {
        "commit_hash": "9a571525892f57d361eb7515644e59ed0935384b",
        "repo": "galkahana/HummusJS",
        "commit_url": "https://github.com/galkahana/HummusJS/commit/9a571525892f57d361eb7515644e59ed0935384b",
        "files": [
          "package-lock.json",
          "package.json",
          "src/deps/PDFWriter/CFFANSIFontWriter.cpp",
          "src/deps/PDFWriter/CFFFileInput.cpp",
          "src/deps/PDFWriter/CMakeLists.txt",
          "src/deps/PDFWriter/DecryptionHelper.cpp",
          "src/deps/PDFWriter/Deletable.h",
          "src/deps/PDFWriter/DocumentContext.cpp",
          "src/deps/PDFWriter/DocumentContext.h",
          "src/deps/PDFWriter/ETokenSeparator.h",
          "src/deps/PDFWriter/IByteReaderWithPosition.h",
          "src/deps/PDFWriter/IDeletable.h",
          "src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp",
          "src/deps/PDFWriter/InputBufferedStream.cpp",
          "src/deps/PDFWriter/InputBufferedStream.h",
          "src/deps/PDFWriter/InputByteArrayStream.cpp",
          "src/deps/PDFWriter/InputByteArrayStream.h",
          "src/deps/PDFWriter/InputFileStream.cpp",
          "src/deps/PDFWriter/InputFileStream.h",
          "src/deps/PDFWriter/InputLZWDecodeStream.cpp",
          "src/deps/PDFWriter/InputLZWDecodeStream.h",
          "src/deps/PDFWriter/InputOffsetStream.cpp",
          "src/deps/PDFWriter/InputOffsetStream.h",
          "src/deps/PDFWriter/InputStringBufferStream.cpp",
          "src/deps/PDFWriter/InputStringBufferStream.h",
          "src/deps/PDFWriter/InputStringStream.cpp",
          "src/deps/PDFWriter/InputStringStream.h",
          "src/deps/PDFWriter/JPEGImageHandler.cpp",
          "src/deps/PDFWriter/JPEGImageHandler.h",
          "src/deps/PDFWriter/ObjectsContext.cpp",
          "src/deps/PDFWriter/ObjectsContext.h",
          "src/deps/PDFWriter/PDFDocumentHandler.cpp",
          "src/deps/PDFWriter/PDFModifiedPage.cpp",
          "src/deps/PDFWriter/PDFObjectParser.cpp",
          "src/deps/PDFWriter/PDFPageInput.cpp",
          "src/deps/PDFWriter/PDFPageInput.h",
          "src/deps/PDFWriter/PDFParser.cpp",
          "src/deps/PDFWriter/PDFParser.h",
          "src/deps/PDFWriter/PDFUsedFont.cpp",
          "src/deps/PDFWriter/PDFWriter.cpp",
          "src/deps/PDFWriter/PDFWriter.h",
          "src/deps/PDFWriter/PrimitiveObjectsWriter.h",
          "src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp",
          "src/deps/PDFWriter/binding.gyp",
          "src/hummus.cpp"
        ],
        "message": "step 1",
        "before_after_code_files": [
          "src/deps/PDFWriter/CFFANSIFontWriter.cpp||src/deps/PDFWriter/CFFANSIFontWriter.cpp",
          "src/deps/PDFWriter/CFFFileInput.cpp||src/deps/PDFWriter/CFFFileInput.cpp",
          "src/deps/PDFWriter/DecryptionHelper.cpp||src/deps/PDFWriter/DecryptionHelper.cpp",
          "src/deps/PDFWriter/DocumentContext.cpp||src/deps/PDFWriter/DocumentContext.cpp",
          "src/deps/PDFWriter/DocumentContext.h||src/deps/PDFWriter/DocumentContext.h",
          "src/deps/PDFWriter/ETokenSeparator.h||src/deps/PDFWriter/ETokenSeparator.h",
          "src/deps/PDFWriter/IByteReaderWithPosition.h||src/deps/PDFWriter/IByteReaderWithPosition.h",
          "src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp||src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp",
          "src/deps/PDFWriter/InputOffsetStream.cpp||src/deps/PDFWriter/InputOffsetStream.cpp",
          "src/deps/PDFWriter/InputOffsetStream.h||src/deps/PDFWriter/InputOffsetStream.h",
          "src/deps/PDFWriter/JPEGImageHandler.cpp||src/deps/PDFWriter/JPEGImageHandler.cpp",
          "src/deps/PDFWriter/JPEGImageHandler.h||src/deps/PDFWriter/JPEGImageHandler.h",
          "src/deps/PDFWriter/ObjectsContext.cpp||src/deps/PDFWriter/ObjectsContext.cpp",
          "src/deps/PDFWriter/ObjectsContext.h||src/deps/PDFWriter/ObjectsContext.h",
          "src/deps/PDFWriter/PDFDocumentHandler.cpp||src/deps/PDFWriter/PDFDocumentHandler.cpp",
          "src/deps/PDFWriter/PDFModifiedPage.cpp||src/deps/PDFWriter/PDFModifiedPage.cpp",
          "src/deps/PDFWriter/PDFObjectParser.cpp||src/deps/PDFWriter/PDFObjectParser.cpp",
          "src/deps/PDFWriter/PDFPageInput.cpp||src/deps/PDFWriter/PDFPageInput.cpp",
          "src/deps/PDFWriter/PDFPageInput.h||src/deps/PDFWriter/PDFPageInput.h",
          "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp",
          "src/deps/PDFWriter/PDFParser.h||src/deps/PDFWriter/PDFParser.h",
          "src/deps/PDFWriter/PDFUsedFont.cpp||src/deps/PDFWriter/PDFUsedFont.cpp",
          "src/deps/PDFWriter/PDFWriter.cpp||src/deps/PDFWriter/PDFWriter.cpp",
          "src/deps/PDFWriter/PDFWriter.h||src/deps/PDFWriter/PDFWriter.h",
          "src/deps/PDFWriter/PrimitiveObjectsWriter.h||src/deps/PDFWriter/PrimitiveObjectsWriter.h",
          "src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp||src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp",
          "src/deps/PDFWriter/binding.gyp||src/deps/PDFWriter/binding.gyp",
          "src/hummus.cpp||src/hummus.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/CFFANSIFontWriter.cpp||src/deps/PDFWriter/CFFANSIFontWriter.cpp": [
          "File: src/deps/PDFWriter/CFFANSIFontWriter.cpp -> src/deps/PDFWriter/CFFANSIFontWriter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  for (; it != inEncodedGlyphs.end(); ++it)",
          "148:  {",
          "149:   std::string glyphName = inFontInfo->GetGlyphName(it->first);",
          "151:  }",
          "",
          "[Removed Lines]",
          "150:   primitiveWriter.WriteName(glyphName.c_str(), eTokenSepratorNone);",
          "",
          "[Added Lines]",
          "150:   primitiveWriter.WriteName(glyphName.c_str(), eTokenSeparatorNone);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/CFFFileInput.cpp||src/deps/PDFWriter/CFFFileInput.cpp": [
          "File: src/deps/PDFWriter/CFFFileInput.cpp -> src/deps/PDFWriter/CFFFileInput.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:  if(status != PDFHummus::eFailure)",
          "1019:  {",
          "1020:   mCurrentDependencies = &ioDependenciesInfo;",
          "1022:  }",
          "1023:  else",
          "1024:   return status;",
          "",
          "[Removed Lines]",
          "1021:   return interpreter.Intepret(*GetGlyphCharString(inFontIndex,inCharStringIndex),this);",
          "",
          "[Added Lines]",
          "1021:   CharString* charString = GetGlyphCharString(inFontIndex,inCharStringIndex);",
          "1022:         if(!charString)",
          "1023:         {",
          "1024:             TRACE_LOG(\"GetGlyphCharString cannot find char string\");",
          "1025:             return PDFHummus::eFailure;",
          "1026:         }",
          "1027:   return interpreter.Intepret(*charString, this);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/DecryptionHelper.cpp||src/deps/PDFWriter/DecryptionHelper.cpp": [
          "File: src/deps/PDFWriter/DecryptionHelper.cpp -> src/deps/PDFWriter/DecryptionHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:    for (; i < filterObjectArray->GetLength(); ++i)",
          "410:    {",
          "411:     PDFObjectCastPtr<PDFName> filterObjectItem(filterObjectArray->QueryObject(i));",
          "413:      break;",
          "414:    }",
          "415:    if (i < filterObjectArray->GetLength()) {",
          "",
          "[Removed Lines]",
          "412:     if (filterObjectItem->GetValue() == \"Crypt\")",
          "",
          "[Added Lines]",
          "412:     if (!filterObjectItem || filterObjectItem->GetValue() == \"Crypt\")",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/DocumentContext.cpp||src/deps/PDFWriter/DocumentContext.cpp": [
          "File: src/deps/PDFWriter/DocumentContext.cpp -> src/deps/PDFWriter/DocumentContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:  mObjectsContext->WriteInteger(inXrefTablePosition,eTokenSeparatorEndLine);",
          "240: }",
          "244: void DocumentContext::WriteFinalEOF()",
          "245: {",
          "",
          "[Removed Lines]",
          "242: static const IOBasicTypes::Byte scEOF[] = {'%','%','E','O','F'};",
          "",
          "[Added Lines]",
          "242: static const IOBasicTypes::Byte scEOF[] = {'%','%','E','O','F'};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:  do",
          "277:  {",
          "280:   inDictionaryContext->WriteKey(scSize);",
          "281:   inDictionaryContext->WriteIntegerValue(mObjectsContext->GetInDirectObjectsRegistry().GetObjectsCount());",
          "285:   if(filePositionResult.first)",
          "286:   {",
          "287:    inDictionaryContext->WriteKey(scPrev);",
          "",
          "[Removed Lines]",
          "284:   BoolAndLongFilePositionType filePositionResult = mTrailerInformation.GetPrev();",
          "",
          "[Added Lines]",
          "284:   BoolAndLongFilePositionType filePositionResult = mTrailerInformation.GetPrev();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:  mTrailerInformation.SetInfoDictionaryReference(infoDictionaryID);",
          "369:  {",
          "370:   infoContext->WriteKey(scTitle);",
          "371:   infoContext->WriteLiteralStringValue(infoDictionary.Title.ToString());",
          "372:  }",
          "375:  {",
          "376:   infoContext->WriteKey(scAuthor);",
          "377:   infoContext->WriteLiteralStringValue(infoDictionary.Author.ToString());",
          "378:  }",
          "381:  {",
          "382:   infoContext->WriteKey(scSubject);",
          "383:   infoContext->WriteLiteralStringValue(infoDictionary.Subject.ToString());",
          "384:  }",
          "387:  {",
          "388:   infoContext->WriteKey(scKeywords);",
          "389:   infoContext->WriteLiteralStringValue(infoDictionary.Keywords.ToString());",
          "390:  }",
          "393:  {",
          "394:   infoContext->WriteKey(scCreator);",
          "395:   infoContext->WriteLiteralStringValue(infoDictionary.Creator.ToString());",
          "396:  }",
          "399:  {",
          "400:   infoContext->WriteKey(scProducer);",
          "401:   infoContext->WriteLiteralStringValue(infoDictionary.Producer.ToString());",
          "402:  }",
          "405:  {",
          "406:   infoContext->WriteKey(scCreationDate);",
          "407:   infoContext->WriteLiteralStringValue(infoDictionary.CreationDate.ToString());",
          "408:  }",
          "411:  {",
          "412:   infoContext->WriteKey(scModDate);",
          "413:   infoContext->WriteLiteralStringValue(infoDictionary.ModDate.ToString());",
          "",
          "[Removed Lines]",
          "368:  if(!infoDictionary.Title.IsEmpty())",
          "374:  if(!infoDictionary.Author.IsEmpty())",
          "380:  if(!infoDictionary.Subject.IsEmpty())",
          "386:  if(!infoDictionary.Keywords.IsEmpty())",
          "392:  if(!infoDictionary.Creator.IsEmpty())",
          "398:  if(!infoDictionary.Producer.IsEmpty())",
          "404:  if(!infoDictionary.CreationDate.IsNull())",
          "410:  if(!infoDictionary.ModDate.IsNull())",
          "",
          "[Added Lines]",
          "368:  if(!infoDictionary.Title.IsEmpty())",
          "374:  if(!infoDictionary.Author.IsEmpty())",
          "380:  if(!infoDictionary.Subject.IsEmpty())",
          "386:  if(!infoDictionary.Keywords.IsEmpty())",
          "392:  if(!infoDictionary.Creator.IsEmpty())",
          "398:  if(!infoDictionary.Producer.IsEmpty())",
          "404:  if(!infoDictionary.CreationDate.IsNull())",
          "410:  if(!infoDictionary.ModDate.IsNull())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "668:         pageContext->WriteRectangleValue(inPage->GetCropBox().second);",
          "669:         cropBox = inPage->GetCropBox().second;",
          "670:     }",
          "672:         cropBox = inPage->GetMediaBox();",
          "676:     if(inPage->GetBleedBox().first && (inPage->GetBleedBox().second != cropBox))",
          "677:     {",
          "678:         pageContext->WriteKey(scBleedBox);",
          "679:         pageContext->WriteRectangleValue(inPage->GetBleedBox().second);",
          "680:     }",
          "683:     if(inPage->GetTrimBox().first && (inPage->GetTrimBox().second != cropBox))",
          "684:     {",
          "685:         pageContext->WriteKey(scTrimBox);",
          "686:         pageContext->WriteRectangleValue(inPage->GetTrimBox().second);",
          "690:     if(inPage->GetArtBox().first && (inPage->GetArtBox().second != cropBox))",
          "691:     {",
          "692:         pageContext->WriteKey(scArtBox);",
          "693:         pageContext->WriteRectangleValue(inPage->GetArtBox().second);",
          "697:  do",
          "698:  {",
          "700:   pageContext->WriteKey(scResources);",
          "701:   result.first = WriteResourcesDictionary(inPage->GetResourcesDictionary());",
          "702:   if(result.first != PDFHummus::eSuccess)",
          "",
          "[Removed Lines]",
          "671:     else",
          "687:     }",
          "694:     }",
          "",
          "[Added Lines]",
          "671:     else",
          "687:     }",
          "694:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "715:    mObjectsContext->StartArray();",
          "716:    for(; it != mAnnotations.end(); ++it)",
          "717:     mObjectsContext->WriteNewIndirectObjectReference(*it);",
          "719:   }",
          "720:   mAnnotations.clear();",
          "",
          "[Removed Lines]",
          "718:    mObjectsContext->EndArray(eTokenSeparatorEndLine);",
          "",
          "[Added Lines]",
          "718:    mObjectsContext->EndArray(eTokenSeparatorEndLine);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "730:     mObjectsContext->StartArray();",
          "731:     while(iterator.MoveNext())",
          "732:      mObjectsContext->WriteNewIndirectObjectReference(iterator.GetItem());",
          "734:     mObjectsContext->EndLine();",
          "735:    }",
          "736:    else",
          "",
          "[Removed Lines]",
          "733:     mObjectsContext->EndArray();",
          "",
          "[Added Lines]",
          "733:     mObjectsContext->EndArray();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "943:         inBoundingBox,",
          "944:         inXStep,",
          "945:         inYStep,",
          "947:         inMatrix);",
          "949: }",
          "",
          "[Removed Lines]",
          "946:         objectID,",
          "",
          "[Added Lines]",
          "946:         objectID,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "997:    mObjectsContext->EndDictionary(groupContext);",
          "998:         }",
          "1003:   ObjectIDType formXObjectResourcesDictionaryID = mObjectsContext->GetInDirectObjectsRegistry().AllocateNewObjectID();",
          "1004:   xobjectContext->WriteNewObjectReferenceValue(formXObjectResourcesDictionaryID);",
          "",
          "[Removed Lines]",
          "1001:   xobjectContext->WriteKey(scResources);",
          "",
          "[Added Lines]",
          "1001:   xobjectContext->WriteKey(scResources);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1021:   aFormXObject =  new PDFFormXObject(this,inFormXObjectID,mObjectsContext->StartPDFStream(xobjectContext),formXObjectResourcesDictionaryID);",
          "1022:  } while(false);",
          "1025: }",
          "",
          "[Removed Lines]",
          "1024:  return aFormXObject;",
          "",
          "[Added Lines]",
          "1024:  return aFormXObject;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1039:  mObjectsContext->StartNewIndirectObject(inFormXObject->GetResourcesDictionaryObjectID());",
          "1040:  WriteResourcesDictionary(inFormXObject->GetResourcesDictionary());",
          "1041:  mObjectsContext->EndIndirectObject();",
          "1044:     PDFFormXObjectToIFormEndWritingTaskListMap::iterator it= mFormEndTasks.find(inFormXObject);",
          "1046:     EStatusCode status = eSuccess;",
          "1047:     if(it != mFormEndTasks.end())",
          "1048:     {",
          "1049:         IFormEndWritingTaskList::iterator itTasks = it->second.begin();",
          "1051:         for(; itTasks != it->second.end() && eSuccess == status; ++itTasks)",
          "1052:             status = (*itTasks)->Write(inFormXObject,mObjectsContext,this);",
          "1055:         for(itTasks = it->second.begin(); itTasks != it->second.end(); ++itTasks)",
          "1056:             delete (*itTasks);",
          "1058:     }",
          "1060:  return status;",
          "1061: }",
          "",
          "[Removed Lines]",
          "1057:         mFormEndTasks.erase(it);",
          "",
          "[Added Lines]",
          "1057:         mFormEndTasks.erase(it);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1092: EStatusCode DocumentContext::EndTiledPatternAndRelease(PDFTiledPattern* inTiledPattern)",
          "1093: {",
          "1094:  EStatusCode status = EndTiledPattern(inTiledPattern);",
          "1097:  return status;",
          "",
          "[Removed Lines]",
          "1095:  delete inTiledPattern;",
          "",
          "[Added Lines]",
          "1095:  delete inTiledPattern;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1136:         {",
          "1137:             resourcesContext->WriteKey(scProcesets);",
          "1138:             mObjectsContext->StartArray();",
          "1140:             {",
          "1141:                 mObjectsContext->WriteName(itProcesets.GetItem());",
          "1143:             while (itProcesets.MoveNext());",
          "1144:             mObjectsContext->EndArray();",
          "1145:             mObjectsContext->EndLine();",
          "",
          "[Removed Lines]",
          "1139:             do",
          "1142:             }",
          "",
          "[Added Lines]",
          "1139:             do",
          "1142:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1189:    }",
          "1190:   }",
          "1193:  }while(false);",
          "1195:  return status;",
          "",
          "[Removed Lines]",
          "1192:   mObjectsContext->EndDictionary(resourcesContext);",
          "",
          "[Added Lines]",
          "1192:   mObjectsContext->EndDictionary(resourcesContext);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1201:            MapIterator<ObjectIDTypeToStringMap> inMapping)",
          "1202: {",
          "1203:     EStatusCode status = eSuccess;",
          "1206:         mResourcesTasks.find(ResourcesDictionaryAndString(inResourcesDictionary,inResourceDictionaryLabel));",
          "1208:     if(inMapping.MoveNext() || itWriterTasks != mResourcesTasks.end())",
          "1209:     {",
          "1210:         do {",
          "1211:             inResourcesCategoryDictionary->WriteKey(inResourceDictionaryLabel);",
          "1212:             DictionaryContext* resourceContext = mObjectsContext->StartDictionary();",
          "1214:             if(!inMapping.IsFinished())",
          "1215:             {",
          "1216:                 do",
          "",
          "[Removed Lines]",
          "1205:     ResourcesDictionaryAndStringToIResourceWritingTaskListMap::iterator itWriterTasks =",
          "",
          "[Added Lines]",
          "1205:     ResourcesDictionaryAndStringToIResourceWritingTaskListMap::iterator itWriterTasks =",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1247:                     break;",
          "1248:                 }",
          "1249:             }",
          "1251:             mObjectsContext->EndDictionary(resourceContext);",
          "1254:         while (false);",
          "1256:     }",
          "1258:     return status;",
          "1259: }",
          "",
          "[Removed Lines]",
          "1253:         }",
          "",
          "[Added Lines]",
          "1253:         }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1263: bool DocumentContext::IsIdentityMatrix(const double* inMatrix)",
          "1264: {",
          "1266:   inMatrix[0] == 1 &&",
          "1267:   inMatrix[1] == 0 &&",
          "1268:   inMatrix[2] == 0 &&",
          "",
          "[Removed Lines]",
          "1265:  return",
          "",
          "[Added Lines]",
          "1265:  return",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1366:                    const ObjectIDTypeList& inCopyAdditionalObjects,",
          "1367:                    const ObjectIDTypeList& inPredefinedFormIDs)",
          "1368: {",
          "1371: }",
          "",
          "[Removed Lines]",
          "1369:  return mPDFDocumentHandler.CreateFormXObjectsFromPDF(inPDFFilePath,inParsingOptions,inPageRange,inPageBoxToUseAsFormBox,inTransformationMatrix,inCopyAdditionalObjects,inPredefinedFormIDs);",
          "",
          "[Added Lines]",
          "1369:  return mPDFDocumentHandler.CreateFormXObjectsFromPDF(inPDFFilePath,inParsingOptions,inPageRange,inPageBoxToUseAsFormBox,inTransformationMatrix,inCopyAdditionalObjects,inPredefinedFormIDs);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1378:                    const ObjectIDTypeList& inCopyAdditionalObjects,",
          "1379:                    const ObjectIDTypeList& inPredefinedFormIDs)",
          "1380: {",
          "1383: }",
          "1384: EStatusCodeAndObjectIDTypeList DocumentContext::AppendPDFPagesFromPDF(const std::string& inPDFFilePath,",
          "",
          "[Removed Lines]",
          "1381:  return mPDFDocumentHandler.CreateFormXObjectsFromPDF(inPDFFilePath,inParsingOptions,inPageRange,inCropBox,inTransformationMatrix,inCopyAdditionalObjects, inPredefinedFormIDs);",
          "",
          "[Added Lines]",
          "1381:  return mPDFDocumentHandler.CreateFormXObjectsFromPDF(inPDFFilePath,inParsingOptions,inPageRange,inCropBox,inTransformationMatrix,inCopyAdditionalObjects, inPredefinedFormIDs);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1386:                    const PDFPageRange& inPageRange,",
          "1387:                    const ObjectIDTypeList& inCopyAdditionalObjects)",
          "1388: {",
          "1390: }",
          "1392: EStatusCode DocumentContext::WriteState(ObjectsContext* inStateWriter,ObjectIDType inObjectID)",
          "",
          "[Removed Lines]",
          "1389:  return mPDFDocumentHandler.AppendPDFPagesFromPDF(inPDFFilePath,inParsingOptions,inPageRange,inCopyAdditionalObjects);",
          "",
          "[Added Lines]",
          "1389:  return mPDFDocumentHandler.AppendPDFPagesFromPDF(inPDFFilePath,inParsingOptions,inPageRange,inCopyAdditionalObjects);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1650:    inStateWriter->WriteNewIndirectObjectReference(pageNodeObjectID);",
          "1651:    kidsObjectIDs.push_back(pageNodeObjectID);",
          "1652:   }",
          "1654:  }",
          "1656:  inStateWriter->EndDictionary(pageTreeDictionary);",
          "",
          "[Removed Lines]",
          "1653:   inStateWriter->EndArray(eTokenSeparatorEndLine);",
          "",
          "[Added Lines]",
          "1653:   inStateWriter->EndArray(eTokenSeparatorEndLine);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1675:  PDFObjectCastPtr<PDFDictionary> documentState(inStateReader->ParseNewObject(inObjectID));",
          "1677:     PDFObjectCastPtr<PDFBoolean> modifiedDocumentExists(documentState->QueryDirectObject(\"mModifiedDocumentIDExists\"));",
          "1680:     if(mModifiedDocumentIDExists)",
          "1681:     {",
          "1682:         PDFObjectCastPtr<PDFHexString> modifiedDocumentExists(documentState->QueryDirectObject(\"mModifiedDocumentID\"));",
          "1683:         mModifiedDocumentID = modifiedDocumentExists->GetValue();",
          "1686:  PDFObjectCastPtr<PDFHexString> newPDFID(documentState->QueryDirectObject(\"mNewPDFID\"));",
          "1688:  if (!!newPDFID)",
          "",
          "[Removed Lines]",
          "1678:     mModifiedDocumentIDExists = modifiedDocumentExists->GetValue();",
          "1684:     }",
          "",
          "[Added Lines]",
          "1678:     mModifiedDocumentIDExists = modifiedDocumentExists->GetValue();",
          "1684:     }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2176:     if(idArray.GetPtr() && idArray->GetLength() == 2)",
          "2177:     {",
          "2178:         PDFObjectCastPtr<PDFHexString> firstID = idArray->QueryObject(0);",
          "2180:             mModifiedDocumentID = firstID->GetValue();",
          "2181:     }",
          "2183:     return eSuccess;",
          "2184: }",
          "",
          "[Removed Lines]",
          "2179:         if(firstID.GetPtr())",
          "",
          "[Added Lines]",
          "2179:         if(firstID != NULL && firstID.GetPtr())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2232:    }",
          "2233:   }",
          "2236:         return eSuccess;",
          "2239: private:",
          "2240:  PDFDocumentCopyingContext* mModifiedDocumentCopyingContext;",
          "2241:  bool mRequiresVersionUpdate;",
          "",
          "[Removed Lines]",
          "2237:     }",
          "",
          "[Added Lines]",
          "2237:     }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2293:             finalPageRoot = originalDocumentPageTreeRoot;",
          "2294:         }",
          "2297:         bool requiresVersionUpdate = IsRequiredVersionHigherThanPDFVersion(inModifiedFileParser,inModifiedPDFVersion);",
          "2299:         if(hasNewPageTreeRoot || requiresVersionUpdate || DoExtendersRequireCatalogUpdate(inModifiedFileParser))",
          "2300:         {",
          "2302:    PDFDocumentCopyingContext* copyingContext = CreatePDFCopyingContext(inModifiedFileParser);",
          "2303:    ModifiedDocCatalogWriterExtension catalogUpdate(copyingContext,requiresVersionUpdate,inModifiedPDFVersion);",
          "2304:             status = WriteCatalogObject(finalPageRoot,&catalogUpdate);",
          "2305:    delete copyingContext;",
          "2306:             if(status != eSuccess)",
          "2307:                 break;",
          "2308:         }",
          "2311:   WriteInfoDictionary();",
          "2316:         if(RequiresXrefStream(inModifiedFileParser))",
          "2317:         {",
          "2318:             status = WriteXrefStream(xrefTablePosition);",
          "",
          "[Removed Lines]",
          "2314:   CopyEncryptionDictionary(inModifiedFileParser);",
          "",
          "[Added Lines]",
          "2303:    if(!copyingContext) {",
          "2304:        status = eFailure;",
          "2305:        break;",
          "2306:    }",
          "2318:   status = CopyEncryptionDictionary(inModifiedFileParser);",
          "2319:         if(status != eSuccess)",
          "2320:             break;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2376:   }",
          "2378:  }while(false);",
          "2382: }",
          "2384: bool DocumentContext::DocumentHasNewPages()",
          "2385: {",
          "2388:     if(!mCatalogInformation.GetCurrentPageTreeNode())",
          "2389:         return false;",
          "2392:     PageTree* pageTreeRoot = mCatalogInformation.GetPageTreeRoot(mObjectsContext->GetInDirectObjectsRegistry());",
          "2394:     bool hasLeafs = false;",
          "2396:     while(hasLeafs == false)",
          "2397:     {",
          "2398:         hasLeafs = pageTreeRoot->IsLeafParent();",
          "2399:         if(pageTreeRoot->GetNodesCount() == 0)",
          "2400:             break;",
          "2402:             pageTreeRoot = pageTreeRoot->GetPageTreeChild(0);",
          "2403:     }",
          "2405:     return hasLeafs;",
          "2406: }",
          "",
          "[Removed Lines]",
          "2380:  return rootObject;",
          "2401:         else",
          "",
          "[Added Lines]",
          "2385:  return rootObject;",
          "2406:         else {",
          "2408:             if (!pageTreeRoot)",
          "2409:                 break;",
          "2410:         }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2462:                 pagesTreeContext->WriteKey(pageTreeIt.GetKey()->GetValue());",
          "2463:                 aCopyingContext.CopyDirectObjectAsIs(pageTreeIt.GetValue());",
          "2464:             }",
          "2466:         }",
          "2468:         aCopyingContext.End();",
          "2471:         pagesTreeContext->WriteKey(scParent);",
          "2472:         pagesTreeContext->WriteNewObjectReferenceValue(newPageRootTreeID);",
          "2474:         mObjectsContext->EndDictionary(pagesTreeContext);",
          "2475:         mObjectsContext->EndIndirectObject();",
          "2478:         mObjectsContext->StartNewIndirectObject(newPageRootTreeID);",
          "2480:         pagesTreeContext = mObjectsContext->StartDictionary();",
          "2483:         pagesTreeContext->WriteKey(scType);",
          "2484:         pagesTreeContext->WriteNameValue(scPages);",
          "2488:         pagesTreeContext->WriteIntegerValue(originalPageTreeKidsCount + newPagesCount);",
          "2491:         pagesTreeContext->WriteKey(scKids);",
          "2492:         mObjectsContext->StartArray();",
          "2494:         mObjectsContext->WriteIndirectObjectReference(originalTreeRoot);",
          "2495:         mObjectsContext->WriteNewIndirectObjectReference(newPagesTree->GetID());",
          "2497:         mObjectsContext->EndArray();",
          "2498:         mObjectsContext->EndLine();",
          "2500:         mObjectsContext->EndDictionary(pagesTreeContext);",
          "2501:         mObjectsContext->EndIndirectObject();",
          "2503:     } while (false);",
          "2507:     if(status == eSuccess)",
          "2508:         return newPageRootTreeID;",
          "2509:     else",
          "2510:         return 0;",
          "2511: }",
          "2513: bool DocumentContext::IsRequiredVersionHigherThanPDFVersion(PDFParser* inModifiedFileParser,EPDFVersion inModifiedPDFVersion)",
          "2514: {",
          "2515:     return (EPDFVersion)((size_t)(inModifiedFileParser->GetPDFLevel() * 10)) < inModifiedPDFVersion;",
          "",
          "[Removed Lines]",
          "2487:         pagesTreeContext->WriteKey(scCount);",
          "",
          "[Added Lines]",
          "2495:         pagesTreeContext->WriteKey(scCount);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2518: bool DocumentContext::DoExtendersRequireCatalogUpdate(PDFParser* inModifiedFileParser)",
          "2519: {",
          "2520:     bool isUpdateRequired = false;",
          "2522:   IDocumentContextExtenderSet::iterator it = mExtenders.begin();",
          "2523:  for(; it != mExtenders.end() && !isUpdateRequired; ++it)",
          "2524:   isUpdateRequired = (*it)->IsCatalogUpdateRequiredForModifiedFile(inModifiedFileParser);",
          "2526:     return isUpdateRequired;",
          "2527: }",
          "2530: {",
          "2532:  RefCountPtr<PDFObject> encrypt(inModifiedFileParser->GetTrailer()->QueryDirectObject(\"Encrypt\"));",
          "2533:  if (encrypt.GetPtr() == NULL)",
          "2536:  if (encrypt->GetType() == PDFObject::ePDFObjectIndirectObjectReference)",
          "2537:  {",
          "",
          "[Removed Lines]",
          "2529: void DocumentContext::CopyEncryptionDictionary(PDFParser* inModifiedFileParser)",
          "2534:   return;",
          "",
          "[Added Lines]",
          "2537: EStatusCode DocumentContext::CopyEncryptionDictionary(PDFParser* inModifiedFileParser)",
          "2542:   return eSuccess;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2540:  }",
          "2541:  else",
          "2542:  {",
          "2544:   mEncryptionHelper.PauseEncryption();",
          "2545:   ObjectIDType encryptionDictionaryID = mObjectsContext->StartNewIndirectObject();",
          "2548:   copyingContext->CopyDirectObjectAsIs(encrypt.GetPtr());",
          "2549:   delete copyingContext;",
          "2550:   mObjectsContext->EndIndirectObject();",
          "",
          "[Removed Lines]",
          "2547:   PDFDocumentCopyingContext* copyingContext = CreatePDFCopyingContext(inModifiedFileParser);",
          "",
          "[Added Lines]",
          "2552:   PDFDocumentCopyingContext* copyingContext = CreatePDFCopyingContext(inModifiedFileParser);",
          "2553:   if(!copyingContext) {",
          "2554:    return eFailure;",
          "2555:   }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2553:   mTrailerInformation.SetEncrypt(encryptionDictionaryID);",
          "2554:  }",
          "2555: }",
          "2557: bool DocumentContext::RequiresXrefStream(PDFParser* inModifiedFileParser)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2567:  return eSuccess;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2560:     if(!inModifiedFileParser->GetTrailer())",
          "2561:         return false;",
          "2563:     PDFObjectCastPtr<PDFName> typeObject = inModifiedFileParser->GetTrailer()->QueryDirectObject(\"Type\");",
          "2565:     if(!typeObject)",
          "2566:         return false;",
          "2568:     return typeObject->GetValue() == \"XRef\";",
          "2571: }",
          "2573: EStatusCode DocumentContext::WriteXrefStream(LongFilePositionType& outXrefPosition)",
          "2574: {",
          "2575:     EStatusCode status = eSuccess;",
          "2578:     {",
          "2579:   mEncryptionHelper.PauseEncryption(); // don't encrypt while writing xref stream",
          "2586:         outXrefPosition = mObjectsContext->GetCurrentPosition();",
          "2587:         mObjectsContext->StartNewIndirectObject();",
          "2589:         DictionaryContext* xrefDictionary = mObjectsContext->StartDictionary();",
          "2591:         xrefDictionary->WriteKey(\"Type\");",
          "2592:         xrefDictionary->WriteNameValue(\"XRef\");",
          "2594:         status = WriteTrailerDictionaryValues(xrefDictionary);",
          "2595:         if(status != eSuccess)",
          "2596:             break;",
          "",
          "[Removed Lines]",
          "2577:     do",
          "",
          "[Added Lines]",
          "2590:     do",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2599:         status = mObjectsContext->WriteXrefStream(xrefDictionary);",
          "2601:   mEncryptionHelper.ReleaseEncryption();",
          "2604:     while (false);",
          "2606:     return status;",
          "2607: }",
          "2609: PDFDocumentCopyingContext* DocumentContext::CreatePDFCopyingContext(PDFParser* inPDFParser)",
          "2610: {",
          "2611:  PDFDocumentCopyingContext* context = new PDFDocumentCopyingContext();",
          "2613:  if(context->Start(inPDFParser,this,mObjectsContext) != PDFHummus::eSuccess)",
          "2614:  {",
          "2615:   delete context;",
          "",
          "[Removed Lines]",
          "2603:     }",
          "",
          "[Added Lines]",
          "2616:     }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2686: void DocumentContext::RegisterFormEndWritingTask(PDFFormXObject* inFormXObject,IFormEndWritingTask* inWritingTask)",
          "2687: {",
          "2689:     mFormEndTasks.find(inFormXObject);",
          "2691:     if(it == mFormEndTasks.end())",
          "2692:     {",
          "2693:         it =mFormEndTasks.insert(PDFFormXObjectToIFormEndWritingTaskListMap::value_type(inFormXObject,IFormEndWritingTaskList())).first;",
          "2694:     }",
          "2697: }",
          "2699: void DocumentContext::RegisterPageEndWritingTask(PDFPage* inPage,IPageEndWritingTask* inWritingTask)",
          "2700: {",
          "2701:     PDFPageToIPageEndWritingTaskListMap::iterator it =",
          "2702:     mPageEndTasks.find(inPage);",
          "2704:     if(it == mPageEndTasks.end())",
          "2705:     {",
          "2706:         it =mPageEndTasks.insert(PDFPageToIPageEndWritingTaskListMap::value_type(inPage,IPageEndWritingTaskList())).first;",
          "2707:     }",
          "2709:     it->second.push_back(inWritingTask);",
          "2710: }",
          "",
          "[Removed Lines]",
          "2688:     PDFFormXObjectToIFormEndWritingTaskListMap::iterator it =",
          "2696:     it->second.push_back(inWritingTask);",
          "",
          "[Added Lines]",
          "2701:     PDFFormXObjectToIFormEndWritingTaskListMap::iterator it =",
          "2709:     it->second.push_back(inWritingTask);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/DocumentContext.h||src/deps/PDFWriter/DocumentContext.h": [
          "File: src/deps/PDFWriter/DocumentContext.h -> src/deps/PDFWriter/DocumentContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:   void WritePageTreeState(ObjectsContext* inStateWriter,ObjectIDType inObjectID,PageTree* inPageTree);",
          "428:   void ReadPageTreeState(PDFParser* inStateReader,PDFDictionary* inPageTreeState,PageTree* inPageTree);",
          "430:         ObjectReference GetOriginalDocumentPageTreeRoot(PDFParser* inModifiedFileParser);",
          "431:         bool DocumentHasNewPages();",
          "432:         ObjectIDType WriteCombinedPageTree(PDFParser* inModifiedFileParser);",
          "433:         bool IsRequiredVersionHigherThanPDFVersion(PDFParser* inModifiedFileParser,EPDFVersion inModifiedPDFVersion);",
          "434:         bool DoExtendersRequireCatalogUpdate(PDFParser* inModifiedFileParser);",
          "436:   bool RequiresXrefStream(PDFParser* inModifiedFileParser);",
          "437:         PDFHummus::EStatusCode WriteXrefStream(LongFilePositionType& outXrefPosition);",
          "438:   HummusImageInformation& GetImageInformationStructFor(const std::string& inImageFile,unsigned long inImageIndex);",
          "439:  };",
          "",
          "[Removed Lines]",
          "435:   void CopyEncryptionDictionary(PDFParser* inModifiedFileParser);",
          "440: }",
          "",
          "[Added Lines]",
          "435:      PDFHummus::EStatusCode CopyEncryptionDictionary(PDFParser* inModifiedFileParser);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/ETokenSeparator.h||src/deps/PDFWriter/ETokenSeparator.h": [
          "File: src/deps/PDFWriter/ETokenSeparator.h -> src/deps/PDFWriter/ETokenSeparator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: {",
          "25:  eTokenSeparatorSpace,",
          "26:  eTokenSeparatorEndLine,",
          "28: };",
          "",
          "[Removed Lines]",
          "27:  eTokenSepratorNone",
          "",
          "[Added Lines]",
          "27:  eTokenSeparatorNone",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/IByteReaderWithPosition.h||src/deps/PDFWriter/IByteReaderWithPosition.h": [
          "File: src/deps/PDFWriter/IByteReaderWithPosition.h -> src/deps/PDFWriter/IByteReaderWithPosition.h"
        ],
        "src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp||src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp": [
          "File: src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp -> src/deps/PDFWriter/IndirectObjectsReferenceRegistry.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:     for(ObjectIDType i = 1; i < inModifiedFileParser->GetXrefSize(); ++i)",
          "311:     {",
          "312:         XrefEntryInput* anEntry = inModifiedFileParser->GetXrefEntry(i);",
          "313:         AppendExistingItem(",
          "314:             anEntry->mType != eXrefEntryDelete ? ObjectWriteInformation::Used : ObjectWriteInformation::Free,",
          "315:                            anEntry->mType != eXrefEntryStreamObject ? anEntry->mRivision:0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:   if(NULL == anEntry)",
          "314:    continue;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/InputOffsetStream.cpp||src/deps/PDFWriter/InputOffsetStream.cpp": [
          "File: src/deps/PDFWriter/InputOffsetStream.cpp -> src/deps/PDFWriter/InputOffsetStream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Source File : InputOffsetStream.cpp",
          "5:    Copyright 2022 Gal Kahana PDFWriter",
          "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
          "8:    you may not use this file except in compliance with the License.",
          "9:    You may obtain a copy of the License at",
          "11:        http://www.apache.org/licenses/LICENSE-2.0",
          "13:    Unless required by applicable law or agreed to in writing, software",
          "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
          "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "16:    See the License for the specific language governing permissions and",
          "17:    limitations under the License.",
          "21: #include \"InputOffsetStream.h\"",
          "24: InputOffsetStream::InputOffsetStream() {",
          "25:     Assign(NULL);",
          "26: }",
          "28: InputOffsetStream::~InputOffsetStream(void) {",
          "29: }",
          "31: InputOffsetStream::InputOffsetStream(IByteReaderWithPosition* inSourceReader) {",
          "32:     Assign(inSourceReader);",
          "33: }",
          "35: void InputOffsetStream::Assign(IByteReaderWithPosition* inReader) {",
          "36:     mSourceStream = inReader;",
          "37:     mOffset = 0;",
          "38: }",
          "40: LongBufferSizeType InputOffsetStream::Read(Byte* inBuffer,LongBufferSizeType inBufferSize) {",
          "41:     if(!mSourceStream)",
          "42:         return 0;",
          "44:     return mSourceStream->Read(inBuffer, inBufferSize);",
          "45: }",
          "47: bool InputOffsetStream::NotEnded() {",
          "48:     if(!mSourceStream)",
          "49:         return true;",
          "51:     return mSourceStream->NotEnded();",
          "52: }",
          "54: void InputOffsetStream::Skip(LongBufferSizeType inSkipSize) {",
          "55:     if(mSourceStream)",
          "56:         mSourceStream->Skip(inSkipSize);",
          "57: }",
          "59: void InputOffsetStream::SetPosition(LongFilePositionType inOffsetFromStart) {",
          "60:     if(mSourceStream)",
          "61:         mSourceStream->SetPosition(mOffset + inOffsetFromStart);",
          "62: }",
          "64: void InputOffsetStream::SetPositionFromEnd(LongFilePositionType inOffsetFromEnd) {",
          "65:     if(mSourceStream)",
          "66:         mSourceStream->SetPositionFromEnd(inOffsetFromEnd);",
          "67: }",
          "69: LongFilePositionType InputOffsetStream::GetCurrentPosition() {",
          "70:     if(!mSourceStream)",
          "71:         return 0;",
          "73:     return mSourceStream->GetCurrentPosition() - mOffset;",
          "74: }",
          "76: IByteReaderWithPosition* InputOffsetStream::GetSourceStream() {",
          "77:     return mSourceStream;",
          "78: }",
          "80: void InputOffsetStream::SetOffset(LongFilePositionType inOffset) {",
          "81:     mOffset = inOffset;",
          "82: }",
          "84: LongFilePositionType InputOffsetStream::GetOffset() {",
          "85:     return mOffset;",
          "86: }",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/InputOffsetStream.h||src/deps/PDFWriter/InputOffsetStream.h": [
          "File: src/deps/PDFWriter/InputOffsetStream.h -> src/deps/PDFWriter/InputOffsetStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Source File : InputOffsetStream.h",
          "5:    Copyright 2022 Gal Kahana PDFWriter",
          "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
          "8:    you may not use this file except in compliance with the License.",
          "9:    You may obtain a copy of the License at",
          "11:        http://www.apache.org/licenses/LICENSE-2.0",
          "13:    Unless required by applicable law or agreed to in writing, software",
          "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
          "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "16:    See the License for the specific language governing permissions and",
          "17:    limitations under the License.",
          "21: #pragma once",
          "23: #include \"EStatusCode.h\"",
          "24: #include \"IByteReaderWithPosition.h\"",
          "26: class InputOffsetStream : public IByteReaderWithPosition",
          "27: {",
          "28: public:",
          "30:   default constructor",
          "32:  InputOffsetStream(void);",
          "35:   Does NOT destroy input stream!",
          "37:  virtual ~InputOffsetStream(void);",
          "40:   Constructor with assigning. see Assign for unassign instructions",
          "42:  InputOffsetStream(IByteReaderWithPosition* inSourceReader);",
          "45:   Assigns a reader stream for reading with offset.",
          "46:         Assignment does not transfer ownership! provided reader should still be deleted after this instance",
          "47:         is deleted! (this is inline say with how the parser treats input streams)",
          "48:         (null can be assigned to clear reference)",
          "50:         Setting a new stream 0s the offset!",
          "52:  void Assign(IByteReaderWithPosition* inReader);",
          "55:  virtual LongBufferSizeType Read(Byte* inBuffer,LongBufferSizeType inBufferSize);",
          "56:  virtual bool NotEnded();",
          "57:  virtual void Skip(LongBufferSizeType inSkipSize);",
          "58:  virtual void SetPosition(LongFilePositionType inOffsetFromStart);",
          "59:  virtual void SetPositionFromEnd(LongFilePositionType inOffsetFromEnd);",
          "60:  virtual LongFilePositionType GetCurrentPosition();",
          "62:  IByteReaderWithPosition* GetSourceStream();",
          "65:     void SetOffset(LongFilePositionType inOffset);",
          "68:     LongFilePositionType GetOffset();",
          "70: private:",
          "71:  IByteReaderWithPosition* mSourceStream;",
          "72:  IOBasicTypes::LongBufferSizeType mOffset;",
          "73: };",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/JPEGImageHandler.cpp||src/deps/PDFWriter/JPEGImageHandler.cpp": [
          "File: src/deps/PDFWriter/JPEGImageHandler.cpp -> src/deps/PDFWriter/JPEGImageHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: {",
          "65:  PDFImageXObject* imageXObject = NULL;",
          "68:  {",
          "70:   BoolAndJPEGImageInformation imageInformationResult = RetrieveImageInformation(inJPGFilePath);",
          "",
          "[Removed Lines]",
          "67:  do",
          "",
          "[Added Lines]",
          "67:  do",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:  } while(false);",
          "84: }",
          "",
          "[Removed Lines]",
          "82:  return imageXObject;",
          "",
          "[Added Lines]",
          "82:  return imageXObject;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     status = PDFHummus::eFailure;",
          "204:     break;",
          "205:    }",
          "207:   if(status != PDFHummus::eSuccess)",
          "208:    break;",
          "211:   PDFStream* imageStream = mObjectsContext->StartUnfilteredPDFStream(imageContext);",
          "",
          "[Removed Lines]",
          "206:   }",
          "",
          "[Added Lines]",
          "206:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:  PDFImageXObject* imageXObject = NULL;",
          "317:  PDFFormXObject* imageFormXObject = NULL;",
          "320:  {",
          "321:   if(!mObjectsContext)",
          "322:   {",
          "",
          "[Removed Lines]",
          "319:  do",
          "",
          "[Added Lines]",
          "319:  do",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "352:  } while(false);",
          "354:  delete imageXObject;",
          "356: }",
          "358: PDFFormXObject* JPEGImageHandler::CreateImageFormXObjectFromImageXObject(PDFImageXObject* inImageXObject,ObjectIDType inFormXObjectID, const JPEGImageInformation& inJPGImageInformation)",
          "",
          "[Removed Lines]",
          "355:  return imageFormXObject;",
          "",
          "[Added Lines]",
          "355:  return imageFormXObject;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "383:    delete formXObject;",
          "384:    formXObject = NULL;",
          "385:    break;",
          "389:  }while(false);",
          "",
          "[Removed Lines]",
          "386:   }",
          "",
          "[Added Lines]",
          "386:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "501: {",
          "502:  PDFImageXObject* imageXObject = NULL;",
          "505:  {",
          "506:   if(!mObjectsContext)",
          "507:   {",
          "",
          "[Removed Lines]",
          "504:  do",
          "",
          "[Added Lines]",
          "504:  do",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "529:  } while(false);",
          "533: }",
          "",
          "[Removed Lines]",
          "531:  return imageXObject;",
          "",
          "[Added Lines]",
          "531:  return imageXObject;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "548:  PDFFormXObject* imageFormXObject = NULL;",
          "549:  PDFImageXObject* imageXObject = NULL;",
          "552:  {",
          "553:   if(!mObjectsContext)",
          "554:   {",
          "",
          "[Removed Lines]",
          "551:  do",
          "",
          "[Added Lines]",
          "551:  do",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "589:  } while(false);",
          "591:  delete imageXObject;",
          "593: }",
          "595: int JPEGImageHandler::GetColorComponents(const JPEGImageInformation& inJPGImageInformation)",
          "596: {",
          "597:  return inJPGImageInformation.ColorComponentsCount;",
          "",
          "[Removed Lines]",
          "592:  return imageFormXObject;",
          "598: }",
          "",
          "[Added Lines]",
          "592:  return imageFormXObject;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/JPEGImageHandler.h||src/deps/PDFWriter/JPEGImageHandler.h": [
          "File: src/deps/PDFWriter/JPEGImageHandler.h -> src/deps/PDFWriter/JPEGImageHandler.h"
        ],
        "src/deps/PDFWriter/ObjectsContext.cpp||src/deps/PDFWriter/ObjectsContext.cpp": [
          "File: src/deps/PDFWriter/ObjectsContext.cpp -> src/deps/PDFWriter/ObjectsContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:  mCompressStreams = inCompressStreams;",
          "379: }",
          "382: {",
          "383:  return mCompressStreams;",
          "384: }",
          "",
          "[Removed Lines]",
          "381: bool ObjectsContext::IsCompressingStreams()",
          "",
          "[Added Lines]",
          "381: bool ObjectsContext::IsCompressingStreams()",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/ObjectsContext.h||src/deps/PDFWriter/ObjectsContext.h": [
          "File: src/deps/PDFWriter/ObjectsContext.h -> src/deps/PDFWriter/ObjectsContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  void StartArray();",
          "",
          "[Removed Lines]",
          "103:  void EndArray(ETokenSeparator inSeparate = eTokenSepratorNone);",
          "",
          "[Added Lines]",
          "103:  void EndArray(ETokenSeparator inSeparate = eTokenSeparatorNone);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFDocumentHandler.cpp||src/deps/PDFWriter/PDFDocumentHandler.cpp": [
          "File: src/deps/PDFWriter/PDFDocumentHandler.cpp -> src/deps/PDFWriter/PDFDocumentHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "596:  if(!sourceObject)",
          "597:  {",
          "598:   XrefEntryInput* xrefEntry = mParser->GetXrefEntry(inSourceObjectID);",
          "601:    mObjectsContext->GetInDirectObjectsRegistry().DeleteObject(inTargetObjectID);",
          "602:    return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "599:   if (xrefEntry->mType == eXrefEntryDelete) {",
          "",
          "[Added Lines]",
          "599:   if ((xrefEntry != NULL) && (xrefEntry->mType == eXrefEntryDelete)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1518:  OutputStringBufferStream aStringBuilder;",
          "1520:  primitiveWriter.SetStreamForWriting(&aStringBuilder);",
          "1523:  return aStringBuilder.ToString().substr(1); // return without initial forward slash",
          "1524: }",
          "",
          "[Removed Lines]",
          "1521:  primitiveWriter.WriteName(inName,eTokenSepratorNone);",
          "",
          "[Added Lines]",
          "1521:  primitiveWriter.WriteName(inName,eTokenSeparatorNone);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1728:   status = traits.CopyToOutputStream(streamReader,(LongBufferSizeType)(it->ResourceTokenPosition - previousContentPosition));",
          "1729:   if(status != PDFHummus::eSuccess)",
          "1730:    break;",
          "1734:   skipper.SkipBy(it->ResourceToken.size() + 1); // skip the resource name in the read stream [include +1 for slash]",
          "",
          "[Removed Lines]",
          "1731:   primitivesWriter.WriteName(inMappedResourcesNames.find(it->ResourceToken)->second,eTokenSepratorNone);",
          "",
          "[Added Lines]",
          "1731:   primitivesWriter.WriteName(inMappedResourcesNames.find(it->ResourceToken)->second,eTokenSeparatorNone);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2034:  }",
          "2036:  if (streamReader == NULL) {",
          "2041:  while (it.MoveNext() && PDFHummus::eSuccess == status)",
          "2042:  {",
          "",
          "[Removed Lines]",
          "2037:   TRACE_LOG(\"PDFDocumentHandler::WriteStreamObject, unable to start reading stream object\");",
          "2038:   status = PDFHummus::eFailure;",
          "2039:  }",
          "",
          "[Added Lines]",
          "2037:                status = PDFHummus::eFailure;",
          "2038:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2053:   return PDFHummus::eFailure;",
          "2054:  }",
          "2057:   mObjectsContext->StartPDFStream(newStreamDictionary) :",
          "2058:   mObjectsContext->StartUnfilteredPDFStream(newStreamDictionary);",
          "2059:  OutputStreamTraits outputTraits(newStream->GetWriteStream());",
          "",
          "[Removed Lines]",
          "2056:  PDFStream* newStream = readingDecrypted ?",
          "",
          "[Added Lines]",
          "2055:  PDFStream* newStream = readingDecrypted ?",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFModifiedPage.cpp||src/deps/PDFWriter/PDFModifiedPage.cpp": [
          "File: src/deps/PDFWriter/PDFModifiedPage.cpp -> src/deps/PDFWriter/PDFModifiedPage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   ObjectIDType pageObjectID = copyingContext->GetSourceDocumentParser()->GetPageObjectID(mPageIndex);",
          "165:   PDFObjectCastPtr<PDFDictionary> pageDictionaryObject = copyingContext->GetSourceDocumentParser()->ParsePage(mPageIndex);",
          "166:   MapIterator<PDFNameToPDFObjectMap>  pageDictionaryObjectIt = pageDictionaryObject->GetIterator();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:   if (!pageDictionaryObject)",
          "167:       return eFailure;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFObjectParser.cpp||src/deps/PDFWriter/PDFObjectParser.cpp": [
          "File: src/deps/PDFWriter/PDFObjectParser.cpp -> src/deps/PDFWriter/PDFObjectParser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "275: static const char scLeftParanthesis = '(';",
          "276: bool PDFObjectParser::IsLiteralString(const std::string& inToken)",
          "277: {",
          "279: }",
          "281: static const char scRightParanthesis = ')';",
          "",
          "[Removed Lines]",
          "278:  return inToken.at(0) == scLeftParanthesis;",
          "",
          "[Added Lines]",
          "278:  return inToken.size() > 0 && inToken.at(0) == scLeftParanthesis;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388: bool PDFObjectParser::IsHexadecimalString(const std::string& inToken)",
          "389: {",
          "392: }",
          "",
          "[Removed Lines]",
          "391:  return (inToken.at(0) == scLeftAngle) && (inToken.size() < 2 || inToken.at(1) != scLeftAngle);",
          "",
          "[Added Lines]",
          "391:  return inToken.size() > 0 && (inToken.at(0) == scLeftAngle) && (inToken.size() < 2 || inToken.at(1) != scLeftAngle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "450: static const char scSlash = '/';",
          "451: bool PDFObjectParser::IsName(const std::string& inToken)",
          "452: {",
          "454: }",
          "456: static const char scSharp = '#';",
          "",
          "[Removed Lines]",
          "453:  return inToken.at(0) == scSlash;",
          "",
          "[Added Lines]",
          "453:  return inToken.size() > 0 && inToken.at(0) == scSlash;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "519: static const char scDot = '.';",
          "520: bool PDFObjectParser::IsNumber(const std::string& inToken)",
          "521: {",
          "525:  if(inToken.at(0) != scPlus && inToken.at(0) != scMinus && inToken.at(0) != scDot && (inToken.at(0) > scNine || inToken.at(0) < scZero))",
          "526:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:  if(inToken.size() < 1)",
          "523:   return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "679: static const char scCommentStart = '%';",
          "680: bool PDFObjectParser::IsComment(const std::string& inToken)",
          "681: {",
          "683: }",
          "685: BoolAndByte PDFObjectParser::GetHexValue(Byte inValue)",
          "",
          "[Removed Lines]",
          "682:  return inToken.at(0) == scCommentStart;",
          "",
          "[Added Lines]",
          "684:  return inToken.size() > 0 && inToken.at(0) == scCommentStart;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFPageInput.cpp||src/deps/PDFWriter/PDFPageInput.cpp": [
          "File: src/deps/PDFWriter/PDFPageInput.cpp -> src/deps/PDFWriter/PDFPageInput.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"PDFName.h\"",
          "27: #include \"ParsedPrimitiveHelper.h\"",
          "29: PDFPageInput::PDFPageInput(PDFParser* inParser,PDFObject* inPageObject):mPageObject(inPageObject)",
          "30: {",
          "31:     mParser = inParser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: using namespace PDFHummus;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     PDFRectangle result;",
          "106:     PDFObjectCastPtr<PDFArray> mediaBox(QueryInheritedValue(mPageObject.GetPtr(),\"MediaBox\"));",
          "108:     {",
          "109:         TRACE_LOG(\"PDFPageInput::GetMediaBox, Exception, pdf page does not have correct media box. defaulting to A4\");",
          "110:         result = PDFRectangle(0,0,595,842);",
          "111:     }",
          "117:     return result;",
          "118: }",
          "",
          "[Removed Lines]",
          "107:     if(!mediaBox || mediaBox->GetLength() != 4)",
          "112:     else",
          "113:     {",
          "114:         SetPDFRectangleFromPDFArray(mediaBox.GetPtr(),result);",
          "115:     }",
          "",
          "[Added Lines]",
          "109:     if(SetPDFRectangleFromPDFArray(mediaBox.GetPtr(),result) != eSuccess)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     PDFRectangle result;",
          "123:     PDFObjectCastPtr<PDFArray> cropBox(QueryInheritedValue(mPageObject.GetPtr(),\"CropBox\"));",
          "126:         result = GetMediaBox();",
          "129:     return result;",
          "130: }",
          "",
          "[Removed Lines]",
          "125:     if(!cropBox || cropBox->GetLength() != 4)",
          "127:     else",
          "128:         SetPDFRectangleFromPDFArray(cropBox.GetPtr(),result);",
          "",
          "[Added Lines]",
          "122:     if(SetPDFRectangleFromPDFArray(cropBox.GetPtr(),result) != eSuccess)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:     PDFRectangle result;",
          "140:     PDFObjectCastPtr<PDFArray> aBox(QueryInheritedValue(mPageObject.GetPtr(),inBoxName));",
          "143:         result = GetCropBox();",
          "146:     return result;",
          "147: }",
          "",
          "[Removed Lines]",
          "142:     if(!aBox || aBox->GetLength() != 4)",
          "144:     else",
          "145:         SetPDFRectangleFromPDFArray(aBox.GetPtr(),result);",
          "",
          "[Added Lines]",
          "137:     if(SetPDFRectangleFromPDFArray(aBox.GetPtr(),result) != eSuccess)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:   return NULL;",
          "176: }",
          "179: {",
          "180:  RefCountPtr<PDFObject> lowerLeftX(inPDFArray->QueryObject(0));",
          "181:  RefCountPtr<PDFObject> lowerLeftY(inPDFArray->QueryObject(1));",
          "182:  RefCountPtr<PDFObject> upperRightX(inPDFArray->QueryObject(2));",
          "183:  RefCountPtr<PDFObject> upperRightY(inPDFArray->QueryObject(3));",
          "185:  outPDFRectangle.LowerLeftX = ParsedPrimitiveHelper(lowerLeftX.GetPtr()).GetAsDouble();",
          "186:  outPDFRectangle.LowerLeftY = ParsedPrimitiveHelper(lowerLeftY.GetPtr()).GetAsDouble();",
          "187:  outPDFRectangle.UpperRightX = ParsedPrimitiveHelper(upperRightX.GetPtr()).GetAsDouble();",
          "188:  outPDFRectangle.UpperRightY = ParsedPrimitiveHelper(upperRightY.GetPtr()).GetAsDouble();",
          "189: }",
          "",
          "[Removed Lines]",
          "178: void PDFPageInput::SetPDFRectangleFromPDFArray(PDFArray* inPDFArray,PDFRectangle& outPDFRectangle)",
          "",
          "[Added Lines]",
          "171: EStatusCode PDFPageInput::SetPDFRectangleFromPDFArray(PDFArray* inPDFArray,PDFRectangle& outPDFRectangle)",
          "173:     if(!inPDFArray || inPDFArray->GetLength() != 4) {",
          "174:         return eFailure;",
          "175:     }",
          "181:  if (!lowerLeftX || !lowerLeftY || !upperRightX || !upperRightY)",
          "182:  {",
          "183:   TRACE_LOG(\"Could not apply pdf rectangle as values are NULL\");",
          "184:   return eFailure;",
          "185:  }",
          "191:     return eSuccess;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFPageInput.h||src/deps/PDFWriter/PDFPageInput.h": [
          "File: src/deps/PDFWriter/PDFPageInput.h -> src/deps/PDFWriter/PDFPageInput.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"PDFRectangle.h\"",
          "34: #include \"PDFObjectCast.h\"",
          "35: #include \"PDFDictionary.h\"",
          "37: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"EStatusCode.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     PDFObjectCastPtr<PDFDictionary> mPageObject;",
          "72:  PDFObject* QueryInheritedValue(PDFDictionary* inDictionary,const std::string& inName);",
          "75:     void AssertPageObjectValid();",
          "76:     PDFRectangle GetBoxAndDefaultWithCrop(const std::string& inBoxName);",
          "",
          "[Removed Lines]",
          "73:     void SetPDFRectangleFromPDFArray(PDFArray* inPDFArray,PDFRectangle& outPDFRectangle);",
          "",
          "[Added Lines]",
          "74:     PDFHummus::EStatusCode SetPDFRectangleFromPDFArray(PDFArray* inPDFArray,PDFRectangle& outPDFRectangle);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp": [
          "File: src/deps/PDFWriter/PDFParser.cpp -> src/deps/PDFWriter/PDFParser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include  <algorithm>",
          "50: using namespace PDFHummus;",
          "52: PDFParser::PDFParser(void)",
          "53: {",
          "55:  mTrailer = NULL;",
          "57:  mPagesObjectIDs = NULL;",
          "58:  mParserExtender = NULL;",
          "59:     mAllowExtendingSegments = true; // Gal 19.9.2013: here's some policy changer. basically i'm supposed to ignore all segments that declare objects past the trailer",
          "",
          "[Removed Lines]",
          "54:  mStream = NULL;",
          "56:  mXrefTable = NULL;",
          "",
          "[Added Lines]",
          "52: #define MAX_XREF_SIZE 9999999999LL",
          "53: #define MAX_HEADER_SCAN_POSITION 1024",
          "55: static const XrefEntryInput scEmptyEntry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: void PDFParser::ResetParser()",
          "71: {",
          "72:  mTrailer = NULL;",
          "75:  delete[] mPagesObjectIDs;",
          "76:  mPagesObjectIDs = NULL;",
          "78:  mCurrentPositionProvider.Assign(NULL);",
          "80:  ObjectIDTypeToObjectStreamHeaderEntryMap::iterator it = mObjectStreamsCache.begin();",
          "",
          "[Removed Lines]",
          "73:  delete[] mXrefTable;",
          "74:  mXrefTable = NULL;",
          "77:  mStream = NULL;",
          "",
          "[Added Lines]",
          "76:  mXrefTable.clear();",
          "79:  mStream.Assign(NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   delete[] it->second;",
          "83:  mObjectStreamsCache.clear();",
          "84:  mDecryptionHelper.Reset();",
          "86: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:  mParsedXrefs.clear();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:  ResetParser();",
          "96:  mObjectParser.SetReadStream(inSourceStream,&mCurrentPositionProvider);",
          "98:  do",
          "",
          "[Removed Lines]",
          "94:  mStream = inSourceStream;",
          "95:  mCurrentPositionProvider.Assign(mStream);",
          "",
          "[Added Lines]",
          "97:  mStream.Assign(inSourceStream);",
          "98:  mCurrentPositionProvider.Assign(&mStream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157: {",
          "158:  PDFParserTokenizer tokenizer;",
          "161:  BoolAndString tokenizerResult = tokenizer.GetNextToken();",
          "163:  if(!tokenizerResult.first)",
          "",
          "[Removed Lines]",
          "160:  tokenizer.SetReadStream(mStream);",
          "",
          "[Added Lines]",
          "163:  tokenizer.SetReadStream(&mStream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:   return PDFHummus::eFailure;",
          "167:  }",
          "170:  {",
          "177: }",
          "179: static const std::string scEOF = \"%%EOF\";",
          "",
          "[Removed Lines]",
          "169:  if(tokenizerResult.second.compare(0,scPDFMagic.size(),scPDFMagic) != 0)",
          "171:   TRACE_LOG1(\"PDFParser::ParseHeaderLine, file does not begin as a PDF file. a PDF file should start with \\\"%%PDF-\\\". file header = %s\",tokenizerResult.second.substr(0, MAX_TRACE_SIZE - 200).c_str());",
          "172:   return PDFHummus::eFailure;",
          "173:  }",
          "175:  mPDFLevel = Double(tokenizerResult.second.substr(scPDFMagic.size()));",
          "176:  return PDFHummus::eSuccess;",
          "",
          "[Added Lines]",
          "172:  do",
          "174:   if(tokenizerResult.second.compare(0,scPDFMagic.size(),scPDFMagic) == 0)",
          "175:   {",
          "176:    mPDFLevel = Double(tokenizerResult.second.substr(scPDFMagic.size()));",
          "177:    mStream.SetOffset(mStream.GetCurrentPosition() - tokenizerResult.second.size() - 1);",
          "178:    return PDFHummus::eSuccess;",
          "179:   }",
          "181:   tokenizerResult = tokenizer.GetNextToken();",
          "182:  } while (tokenizerResult.first && mStream.GetCurrentPosition() < MAX_HEADER_SCAN_POSITION);",
          "184:  TRACE_LOG(\"PDFParser::ParseHeaderLine, file does not begin as a PDF file. a PDF file should contain \\\"%%PDF-\\\" within the first 1024 bytes.\");",
          "185:  return PDFHummus::eFailure;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "190:   if (GoBackTillToken())",
          "191:   {",
          "192:    GoBackTillLineStart();",
          "195:    PDFParserTokenizer aTokenizer;",
          "197:    BoolAndString token = aTokenizer.GetNextToken();",
          "199:    if (token.first && (token.second.substr(0, scEOF.length()) == scEOF))",
          "",
          "[Removed Lines]",
          "193:    mStream->SetPositionFromEnd(GetCurrentPositionFromEnd());",
          "196:    aTokenizer.SetReadStream(mStream);",
          "",
          "[Added Lines]",
          "202:    mStream.SetPositionFromEnd(GetCurrentPositionFromEnd());",
          "205:    aTokenizer.SetReadStream(&mStream);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "304:  }",
          "305:  else",
          "306:  {",
          "311:   LongBufferSizeType readAmount = positionBefore - positionAfter; // check if got to start by testing position",
          "312:   if(readAmount != 0)",
          "314:   mEncounteredFileStart = readAmount < LINE_BUFFER_SIZE;",
          "315:   if(0 == readAmount)",
          "316:    return false;",
          "",
          "[Removed Lines]",
          "307:   mStream->SetPositionFromEnd(mLastReadPositionFromEnd); // last known position that worked.",
          "308:   LongFilePositionType positionBefore = mStream->GetCurrentPosition();",
          "309:   mStream->SetPositionFromEnd(mLastReadPositionFromEnd + LINE_BUFFER_SIZE); // try earlier one",
          "310:   LongFilePositionType positionAfter = mStream->GetCurrentPosition();",
          "313:    readAmount = mStream->Read(mLinesBuffer,readAmount);",
          "",
          "[Added Lines]",
          "316:   mStream.SetPositionFromEnd(mLastReadPositionFromEnd); // last known position that worked.",
          "317:   LongFilePositionType positionBefore = mStream.GetCurrentPosition();",
          "318:   mStream.SetPositionFromEnd(mLastReadPositionFromEnd + LINE_BUFFER_SIZE); // try earlier one",
          "319:   LongFilePositionType positionAfter = mStream.GetCurrentPosition();",
          "322:    readAmount = mStream.Read(mLinesBuffer,readAmount);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "347:   GoBackTillLineStart();",
          "352:   mObjectParser.ResetReadState();",
          "353:   RefCountPtr<PDFObject> anObject(mObjectParser.ParseNewObject());",
          "",
          "[Removed Lines]",
          "350:   mStream->SetPositionFromEnd(GetCurrentPositionFromEnd());",
          "",
          "[Added Lines]",
          "359:   mStream.SetPositionFromEnd(GetCurrentPositionFromEnd());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "371:    }",
          "373:    GoBackTillLineStart();",
          "376:    mObjectParser.ResetReadState();",
          "377:    PDFObjectCastPtr<PDFSymbol> startxRef(mObjectParser.ParseNewObject());",
          "",
          "[Removed Lines]",
          "374:    mStream->SetPositionFromEnd(GetCurrentPositionFromEnd());",
          "",
          "[Added Lines]",
          "383:    mStream.SetPositionFromEnd(GetCurrentPositionFromEnd());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "387:   {",
          "388:    bool foundStartXref = (anObject->GetType() == PDFObject::ePDFObjectSymbol) && (((PDFSymbol*)anObject.GetPtr())->GetValue() == scStartxref);",
          "391:    {",
          "392:     PDFObjectCastPtr<PDFSymbol> startxRef(mObjectParser.ParseNewObject());",
          "393:     foundStartXref = startxRef.GetPtr() && (startxRef->GetValue() == scStartxref);",
          "394:    }",
          "",
          "[Removed Lines]",
          "390:    while(!foundStartXref && mStream->NotEnded())",
          "",
          "[Added Lines]",
          "399:    while(!foundStartXref && mStream.NotEnded())",
          "402:     if(!startxRef)",
          "403:     {",
          "404:      status = PDFHummus::eFailure;",
          "405:         TRACE_LOG(\"PDFParser::ParseXrefPosition, syntax error in reading xref position\");",
          "406:         break;",
          "407:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "427:  do",
          "428:  {",
          "429:   PDFParserTokenizer aTokenizer;",
          "432:   do",
          "433:   {",
          "",
          "[Removed Lines]",
          "430:   aTokenizer.SetReadStream(mStream);",
          "",
          "[Added Lines]",
          "445:   aTokenizer.SetReadStream(&mStream);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "476:   if(status != PDFHummus::eSuccess)",
          "477:    break;",
          "479:   bool hasPrev = mTrailer->Exists(\"Prev\");",
          "480:   if(hasPrev)",
          "481:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:   mParsedXrefs.insert(mLastXrefPosition);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "484:     break;",
          "485:   }",
          "490:   if(status != PDFHummus::eSuccess)",
          "491:    break;",
          "502:   PDFObjectCastPtr<PDFInteger> xrefStmReference(mTrailer->QueryDirectObject(\"XRefStm\"));",
          "503:   if(!xrefStmReference)",
          "504:    break;",
          "507:   if(status != PDFHummus::eSuccess)",
          "508:   {",
          "509:    TRACE_LOG(\"PDFParser::ParseDirectory, failure to parse xref in hybrid mode\");",
          "510:    break;",
          "511:   }",
          "518:  }while(false);",
          "520:  return status;",
          "",
          "[Removed Lines]",
          "487:         XrefEntryInput* extendedTable = NULL;",
          "488:         ObjectIDType extendedTableSize;",
          "489:   status = ParseXrefFromXrefTable(mXrefTable,mXrefSize,mLastXrefPosition,!hasPrev, &extendedTable,&extendedTableSize);",
          "494:         if(extendedTable)",
          "495:         {",
          "496:             mXrefSize = extendedTableSize;",
          "497:             delete[] mXrefTable;",
          "498:             mXrefTable = extendedTable;",
          "499:         }",
          "506:   status = ParseXrefFromXrefStream(mXrefTable,mXrefSize,xrefStmReference->GetValue(),&extendedTable,&extendedTableSize);",
          "512:         if(extendedTable)",
          "513:         {",
          "514:             mXrefSize = extendedTableSize;",
          "515:             delete[] mXrefTable;",
          "516:             mXrefTable = extendedTable;",
          "517:         }",
          "",
          "[Added Lines]",
          "505:         ObjectIDType maybeExtendedTableSize;",
          "506:   status = ParseXrefFromXrefTable(mXrefTable,mXrefSize,mLastXrefPosition,!hasPrev,&maybeExtendedTableSize);",
          "511:   mXrefSize = maybeExtendedTableSize;",
          "519:   status = ParseXrefFromXrefStream(mXrefTable,mXrefSize,xrefStmReference->GetValue(),&maybeExtendedTableSize);",
          "525:   mXrefSize = maybeExtendedTableSize;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "538: EStatusCode PDFParser::InitializeXref()",
          "539: {",
          "541:  return PDFHummus::eSuccess;",
          "542: }",
          "",
          "[Removed Lines]",
          "540:  mXrefTable = new XrefEntryInput[mXrefSize];",
          "",
          "[Added Lines]",
          "548:  mXrefTable.clear(); // probably not required...used to be spot for allocation when wasn't dynamic",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "545: typedef BoxingBaseWithRW<unsigned long> ULong;",
          "546: typedef BoxingBaseWithRW<LongFilePositionType> LongFilePositionTypeBox;",
          "548: static const std::string scXref = \"xref\";",
          "550:                                               ObjectIDType inXrefSize,",
          "551:                                               LongFilePositionType inXrefPosition,",
          "552:              bool inIsFirstXref,",
          "555: {",
          "",
          "[Removed Lines]",
          "549: EStatusCode PDFParser::ParseXrefFromXrefTable(XrefEntryInput* inXrefTable,",
          "553:                                               XrefEntryInput** outExtendedTable,",
          "554:                                               ObjectIDType* outExtendedTableSize)",
          "",
          "[Added Lines]",
          "557: EStatusCode PDFParser::ExtendXrefToSize(XrefEntryInputVector& inXrefTable, ObjectIDType inXrefSize) {",
          "558:  if (inXrefTable.size() >= inXrefSize)",
          "559:   return eSuccess;",
          "561:  if(inXrefSize > MAX_XREF_SIZE) {",
          "562:   TRACE_LOG(\"PDFParser::ExtendXrefToSize, invalid value for section length\");",
          "563:   return eFailure;",
          "564:  }",
          "566:  inXrefTable.insert(inXrefTable.end(), inXrefSize-inXrefTable.size(), scEmptyEntry);",
          "567:  return eSuccess;",
          "568: }",
          "571: EStatusCode PDFParser::ParseXrefFromXrefTable(XrefEntryInputVector& inXrefTable,",
          "575:                                               ObjectIDType* outReadTableSize)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "562:  ObjectIDType firstNonSectionObject;",
          "563:  Byte entry[20];",
          "568:  MovePositionInStream(inXrefPosition);",
          "",
          "[Removed Lines]",
          "567:  tokenizer.SetReadStream(mStream);",
          "",
          "[Added Lines]",
          "588:  tokenizer.SetReadStream(&mStream);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "622:             if(firstNonSectionObject > inXrefSize && mAllowExtendingSegments)",
          "623:             {",
          "625:                 inXrefSize = firstNonSectionObject;",
          "630:             }",
          "633:    while(currentObject < firstNonSectionObject)",
          "634:    {",
          "",
          "[Removed Lines]",
          "624:                 inXrefTable = ExtendXrefTableToSize(inXrefTable,inXrefSize,firstNonSectionObject);",
          "626:                 if(*outExtendedTable)",
          "627:                     delete[] *outExtendedTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "637:      break;",
          "638:     if(currentObject < inXrefSize)",
          "639:     {",
          "640:      inXrefTable[currentObject].mObjectPosition = LongFilePositionTypeBox(std::string((const char*)entry, 10));",
          "641:      inXrefTable[currentObject].mRivision = ULong(std::string((const char*)(entry + 11), 5));",
          "642:      inXrefTable[currentObject].mType = entry[17] == 'n' ? eXrefEntryExisting:eXrefEntryDelete;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:      status = ExtendXrefToSize(inXrefTable, currentObject+1);",
          "660:      if (status != eSuccess)",
          "661:       break;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "659:  do",
          "660:  {",
          "662:   {",
          "663:    TRACE_LOG(\"PDFParser::ReadNextXrefEntry, failed to read xref entry\");",
          "664:    status = PDFHummus::eFailure;",
          "",
          "[Removed Lines]",
          "661:   if (mStream->Read(inBuffer, 1) != 1)",
          "",
          "[Added Lines]",
          "684:   if (mStream.Read(inBuffer, 1) != 1)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "669:   return status;",
          "673:  {",
          "674:   TRACE_LOG(\"PDFParser::ReadNextXrefEntry, failed to read xref entry\");",
          "675:   status = PDFHummus::eFailure;",
          "",
          "[Removed Lines]",
          "672:  if (mStream->Read(inBuffer + 1, 19) != 19)",
          "",
          "[Added Lines]",
          "695:  if (mStream.Read(inBuffer + 1, 19) != 19)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "678:  if ((inBuffer[19] != scLN && inBuffer[19] != scCR) && (inBuffer[18] == scLN || inBuffer[18] == scCR))",
          "679:  {",
          "681:  }",
          "682:  return status;",
          "683: }",
          "694: PDFDictionary* PDFParser::GetTrailer()",
          "695: {",
          "696:  return mTrailer.GetPtr();",
          "",
          "[Removed Lines]",
          "680:   mStream->SetPosition(mStream->GetCurrentPosition() - 1);",
          "685: XrefEntryInput* PDFParser::ExtendXrefTableToSize(XrefEntryInput* inXrefTable,ObjectIDType inOldSize,ObjectIDType inNewSize)",
          "686: {",
          "687:     XrefEntryInput* newTable = new XrefEntryInput[inNewSize];",
          "689:  for(ObjectIDType i = 0; i < inOldSize; ++i)",
          "690:         newTable[i] = inXrefTable[i];",
          "691:     return newTable;",
          "692: }",
          "",
          "[Added Lines]",
          "703:   mStream.SetPosition(mStream.GetCurrentPosition() - 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "704: PDFObject* PDFParser::ParseNewObject(ObjectIDType inObjectId)",
          "705: {",
          "707:  {",
          "708:   return NULL;",
          "709:  }",
          "",
          "[Removed Lines]",
          "706:  if(inObjectId >= mXrefSize)",
          "",
          "[Added Lines]",
          "720:  if(inObjectId >= GetXrefSize())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1040: EStatusCode PDFParser::ParsePreviousXrefs(PDFDictionary* inTrailer)",
          "1041: {",
          "1044:  {",
          "1045:   TRACE_LOG(\"PDFParser::ParsePreviousXrefs, unexpected, prev is not integer\");",
          "1046:   return PDFHummus::eFailure;",
          "1047:  }",
          "1049:  EStatusCode status;",
          "1052:  do",
          "1053:  {",
          "1054:   PDFDictionary* trailerP = NULL;",
          "1056:         XrefEntryInput* extendedTable = NULL;",
          "1059:   if(status != PDFHummus::eSuccess)",
          "1060:    break;",
          "1061:   RefCountPtr<PDFDictionary> trailer(trailerP);",
          "",
          "[Removed Lines]",
          "1042:  PDFObjectCastPtr<PDFInteger> previousPosition(inTrailer->QueryDirectObject(\"Prev\"));",
          "1043:  if(!previousPosition)",
          "1051:  XrefEntryInput* aTable = new XrefEntryInput[mXrefSize];",
          "1057:         ObjectIDType extendedTableSize;",
          "1058:   status = ParsePreviousFileDirectory(previousPosition->GetValue(),aTable,mXrefSize,&trailerP,&extendedTable,&extendedTableSize);",
          "",
          "[Added Lines]",
          "1056:  PDFObjectCastPtr<PDFInteger> previousPositionObject(inTrailer->QueryDirectObject(\"Prev\"));",
          "1057:  if(!previousPositionObject)",
          "1063:  LongFilePositionType previousPosition = previousPositionObject->GetValue();",
          "1065:  if(mParsedXrefs.find(previousPosition) != mParsedXrefs.end()) {",
          "1067:   TRACE_LOG(\"PDFParser::ParsePreviousXrefs, unexpected, previous table position has already been parsed. possible malicious read loop attempt\");",
          "1068:   return PDFHummus::eFailure;",
          "1069:  }",
          "1072:  mParsedXrefs.insert(previousPosition);",
          "1077:  XrefEntryInputVector aTable;",
          "1083:         ObjectIDType readTableSize;",
          "1084:   status = ParsePreviousFileDirectory(previousPosition,aTable,mXrefSize,&trailerP,&readTableSize);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1067:     break;",
          "1068:   }",
          "1082:  }",
          "1083:  while(false);",
          "1086:  return status;",
          "1087: }",
          "1089: EStatusCode PDFParser::ParsePreviousFileDirectory(LongFilePositionType inXrefPosition,",
          "1095: {",
          "1096:  EStatusCode status = PDFHummus::eSuccess;",
          "1098:  MovePositionInStream(inXrefPosition);",
          "1100:  do",
          "",
          "[Removed Lines]",
          "1072:         ObjectIDType newTableSize;",
          "1073:         if(extendedTable)",
          "1074:         {",
          "1075:             newTableSize = extendedTableSize;",
          "1076:             delete[] aTable;",
          "1077:             aTable = extendedTable;",
          "1078:         }",
          "1079:         else",
          "1080:             newTableSize = mXrefSize;",
          "1081:         MergeXrefWithMainXref(aTable,newTableSize);",
          "1085:  delete[] aTable;",
          "1090:            XrefEntryInput* inXrefTable,",
          "1091:            ObjectIDType inXrefSize,",
          "1092:            PDFDictionary** outTrailer,",
          "1093:                                       XrefEntryInput** outExtendedTable,",
          "1094:                                       ObjectIDType* outExtendedTableSize)",
          "",
          "[Added Lines]",
          "1096:         status = MergeXrefWithMainXref(aTable,readTableSize);",
          "1103:                                           XrefEntryInputVector& inXrefTable,",
          "1104:                                           ObjectIDType inXrefSize,",
          "1105:                                           PDFDictionary** outTrailer,",
          "1106:                                           ObjectIDType* outReadTableSize)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1121:    bool hasPrev = trailerDictionary->Exists(\"Prev\");",
          "1124:    if(status != PDFHummus::eSuccess)",
          "1125:    {",
          "1126:     TRACE_LOG1(\"PDFParser::ParseDirectory, failed to parse xref table in %ld\",inXrefPosition);",
          "1127:     break;",
          "1128:    }",
          "",
          "[Removed Lines]",
          "1123:    status = ParseXrefFromXrefTable(inXrefTable,inXrefSize,inXrefPosition,!hasPrev,outExtendedTable,outExtendedTableSize);",
          "1130:             if(*outExtendedTable)",
          "1131:             {",
          "1132:                 inXrefTable = *outExtendedTable;",
          "1133:                 inXrefSize = *outExtendedTableSize;",
          "1134:             }",
          "",
          "[Added Lines]",
          "1137:    status = ParseXrefFromXrefTable(inXrefTable,inXrefSize,inXrefPosition,!hasPrev,outReadTableSize);",
          "1144:    inXrefSize = *outReadTableSize;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1139:    if(xrefStmReference.GetPtr())",
          "1140:    {",
          "1143:     if(status != PDFHummus::eSuccess)",
          "1144:     {",
          "1145:      TRACE_LOG(\"PDFParser::ParseDirectory, failure to parse xref in hybrid mode\");",
          "",
          "[Removed Lines]",
          "1142:     status = ParseXrefFromXrefStream(inXrefTable,inXrefSize,xrefStmReference->GetValue(),outExtendedTable,outExtendedTableSize);",
          "",
          "[Added Lines]",
          "1152:     status = ParseXrefFromXrefStream(inXrefTable,inXrefSize,xrefStmReference->GetValue(),outReadTableSize);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1197:    if(status != PDFHummus::eSuccess)",
          "1198:     break;",
          "1199:   }",
          "",
          "[Removed Lines]",
          "1196:    status = ParseXrefFromXrefStream(inXrefTable,inXrefSize,xrefStream.GetPtr(),outExtendedTable,outExtendedTableSize);",
          "",
          "[Added Lines]",
          "1206:    status = ParseXrefFromXrefStream(inXrefTable,inXrefSize,xrefStream.GetPtr(),outReadTableSize);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1206:  return status;",
          "1207: }",
          "1210: {",
          "1211:     if(inMergedTableSize > mXrefSize)",
          "1214:         mXrefSize = inMergedTableSize;",
          "1220:  {",
          "1221:   if(inTableToMerge[i].mType != eXrefEntryUndefined)",
          "1222:    mXrefTable[i] = inTableToMerge[i];",
          "1223:  }",
          "1224: }",
          "",
          "[Removed Lines]",
          "1209: void PDFParser::MergeXrefWithMainXref(XrefEntryInput* inTableToMerge,ObjectIDType inMergedTableSize)",
          "1212:     {",
          "1213:         XrefEntryInput* newTable = ExtendXrefTableToSize(mXrefTable, mXrefSize, inMergedTableSize);",
          "1215:         delete[] mXrefTable;",
          "1216:         mXrefTable = newTable;",
          "1217:     }",
          "1219:  for(ObjectIDType i = 0; i < mXrefSize; ++i)",
          "",
          "[Added Lines]",
          "1219: EStatusCode PDFParser::MergeXrefWithMainXref(XrefEntryInputVector& inTableToMerge, ObjectIDType inMergedTableSize)",
          "1225:  EStatusCode status = ExtendXrefToSize(mXrefTable, inTableToMerge.size());",
          "1226:  if(status != eSuccess)",
          "1227:   return status;",
          "1229:  for(ObjectIDType i = 0; i < inTableToMerge.size(); ++i) // iterate by input table size which is what we actually want to read from (and not the logical size)",
          "1235:  return eSuccess;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1341:   if(status != PDFHummus::eSuccess)",
          "1342:    break;",
          "1344:   if(mTrailer->Exists(\"Prev\"))",
          "1345:   {",
          "1346:    status = ParsePreviousXrefs(mTrailer.GetPtr());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1357:   mParsedXrefs.insert(mLastXrefPosition);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1349:   }",
          "1351:         XrefEntryInput* extendedTable = NULL;",
          "1354:   if(status != PDFHummus::eSuccess)",
          "1355:    break;",
          "1365:  }while(false);",
          "",
          "[Removed Lines]",
          "1352:         ObjectIDType extendedTableSize;",
          "1353:   status = ParseXrefFromXrefStream(mXrefTable,mXrefSize,xrefStream.GetPtr(),&extendedTable,&extendedTableSize);",
          "1358:         if(extendedTable)",
          "1359:         {",
          "1360:             mXrefSize = extendedTableSize;",
          "1361:             delete[] mXrefTable;",
          "1362:             mXrefTable = extendedTable;",
          "1363:         }",
          "",
          "[Added Lines]",
          "1367:         ObjectIDType readTableSize;",
          "1368:   status = ParseXrefFromXrefStream(mXrefTable,mXrefSize,xrefStream.GetPtr(),&readTableSize);",
          "1373:   mXrefSize = readTableSize;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1369: }",
          "1372:                                                ObjectIDType inXrefSize,",
          "1373:                                                LongFilePositionType inXrefPosition,",
          "1376: {",
          "1377:  EStatusCode status = PDFHummus::eSuccess;",
          "1379:  MovePositionInStream(inXrefPosition);",
          "1381:  do",
          "",
          "[Removed Lines]",
          "1371: EStatusCode PDFParser::ParseXrefFromXrefStream(XrefEntryInput* inXrefTable,",
          "1374:                                                XrefEntryInput** outExtendedTable,",
          "1375:                                                ObjectIDType* outExtendedTableSize)",
          "",
          "[Added Lines]",
          "1381: EStatusCode PDFParser::ParseXrefFromXrefStream(XrefEntryInputVector& inXrefTable,",
          "1384:                                                ObjectIDType* outReadTableSize)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1428:   NotifyIndirectObjectEnd(xrefStream.GetPtr());",
          "1431:  }while(false);",
          "1432:  return status;",
          "1433: }",
          "1440: {",
          "",
          "[Removed Lines]",
          "1430:   status = ParseXrefFromXrefStream(inXrefTable,inXrefSize,xrefStream.GetPtr(),outExtendedTable,outExtendedTableSize);",
          "1435: EStatusCode PDFParser::ParseXrefFromXrefStream(XrefEntryInput* inXrefTable,",
          "1436:                                                ObjectIDType inXrefSize,",
          "1437:                                                PDFStreamInput* inXrefStream,",
          "1438:                                                XrefEntryInput** outExtendedTable,",
          "1439:                                                ObjectIDType* outExtendedTableSize)",
          "",
          "[Added Lines]",
          "1441:   status = ParseXrefFromXrefStream(inXrefTable,inXrefSize,xrefStream.GetPtr(),outReadTableSize);",
          "1446: EStatusCode PDFParser::ParseXrefFromXrefStream(XrefEntryInputVector& inXrefTable,",
          "1447:                                                    ObjectIDType inXrefSize,",
          "1448:                                                    PDFStreamInput* inXrefStream,",
          "1449:                                                    ObjectIDType* outReadTableSize)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1447:  EStatusCode status = PDFHummus::eSuccess;",
          "1451:  IByteReader* xrefStreamSource = CreateInputStreamReader(inXrefStream);",
          "1452:  int* widthsArray = NULL;",
          "",
          "[Removed Lines]",
          "1449:     outExtendedTable = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1503:             ObjectIDType readXrefSize = (ObjectIDType)xrefSize->GetValue();",
          "1504:             if(readXrefSize > inXrefSize)",
          "1505:             {",
          "1506:                 if(mAllowExtendingSegments)",
          "1507:                 {",
          "1509:                     inXrefSize = readXrefSize;",
          "1514:                 }",
          "1515:                 else",
          "1516:                     break;",
          "",
          "[Removed Lines]",
          "1508:                     inXrefTable = ExtendXrefTableToSize(inXrefTable,inXrefSize,readXrefSize);",
          "1510:                     if(*outExtendedTable)",
          "1511:                         delete[] *outExtendedTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1546:      break;",
          "1547:     }",
          "1548:     ObjectIDType objectsCount = (ObjectIDType)segmentValue->GetValue();",
          "1551:                 {",
          "1552:                     if(mAllowExtendingSegments)",
          "1553:                     {",
          "1560:                     }",
          "1561:                     else",
          "1562:                         break;",
          "",
          "[Removed Lines]",
          "1550:     if(startObject +  objectsCount > inXrefSize)",
          "1554:                         inXrefTable = ExtendXrefTableToSize(inXrefTable,inXrefSize,startObject +  objectsCount);",
          "1555:                         inXrefSize = startObject +  objectsCount;",
          "1556:                         if(*outExtendedTable)",
          "1557:                             delete[] *outExtendedTable;",
          "",
          "[Added Lines]",
          "1556:     ObjectIDType readXrefSize = startObject +  objectsCount;",
          "1559:     if(readXrefSize > inXrefSize)",
          "1563:                         inXrefSize = readXrefSize;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1574: void PDFParser::MovePositionInStream(LongFilePositionType inPosition)",
          "1575: {",
          "1577:  mObjectParser.ResetReadState();",
          "1578: }",
          "1581:             ObjectIDType inSegmentStartObject,",
          "1582:             ObjectIDType inSegmentCount,",
          "1583:             IByteReader* inReadFrom,",
          "",
          "[Removed Lines]",
          "1576:  mStream->SetPosition(inPosition);",
          "1580: EStatusCode PDFParser::ReadXrefStreamSegment(XrefEntryInput* inXrefTable,",
          "",
          "[Added Lines]",
          "1581:  mStream.SetPosition(inPosition);",
          "1585: EStatusCode PDFParser::ReadXrefStreamSegment(XrefEntryInputVector& inXrefTable,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1597:  for(; (objectToRead < inSegmentStartObject + inSegmentCount) && PDFHummus::eSuccess == status && inReadFrom->NotEnded();++objectToRead)",
          "1598:  {",
          "1599:   long long entryType;",
          "1600:   status = ReadXrefSegmentValue(inReadFrom,inEntryWidths[0],entryType);",
          "1601:   if(status != PDFHummus::eSuccess)",
          "1602:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1607:   status = ExtendXrefToSize(inXrefTable, objectToRead+1);",
          "1608:   if(status != PDFHummus::eSuccess)",
          "1609:    break;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1758:  }while(false);",
          "1762:  return anObject;",
          "1763: }",
          "",
          "[Removed Lines]",
          "1760:  mObjectParser.SetReadStream(mStream,&mCurrentPositionProvider);",
          "",
          "[Added Lines]",
          "1770:  mObjectParser.SetReadStream(&mStream,&mCurrentPositionProvider);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1846:    break;",
          "1847:   }",
          "1851:   result = WrapWithDecryptionFilter(inStream,result);",
          "",
          "[Removed Lines]",
          "1849:   result = new InputLimitedStream(mStream,lengthObject->GetValue(),false);",
          "",
          "[Added Lines]",
          "1859:   result = new InputLimitedStream(&mStream,lengthObject->GetValue(),false);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2112:    break;",
          "2113:   }",
          "2117:   result = WrapWithDecryptionFilter(inStream, result);",
          "",
          "[Removed Lines]",
          "2115:   result = new InputLimitedStream(mStream, lengthObject->GetValue(), false);",
          "",
          "[Added Lines]",
          "2125:   result = new InputLimitedStream(&mStream, lengthObject->GetValue(), false);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2141:  ResetParser();",
          "2145:  mObjectParser.SetReadStream(inSourceStream,&mCurrentPositionProvider);",
          "2147:  do",
          "",
          "[Removed Lines]",
          "2143:  mStream = inSourceStream;",
          "2144:  mCurrentPositionProvider.Assign(mStream);",
          "",
          "[Added Lines]",
          "2153:  mStream.Assign(inSourceStream);",
          "2154:  mCurrentPositionProvider.Assign(&mStream);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2187: ObjectIDType PDFParser::GetXrefSize()",
          "2188: {",
          "2190: }",
          "2192: XrefEntryInput* PDFParser::GetXrefEntry(ObjectIDType inObjectID)",
          "2193: {",
          "2195: }",
          "2197: LongFilePositionType PDFParser::GetXrefPosition()",
          "",
          "[Removed Lines]",
          "2189:     return mXrefSize;",
          "2194:     return (inObjectID < mXrefSize) ? mXrefTable+inObjectID : NULL;",
          "",
          "[Added Lines]",
          "2199:     return std::min(mXrefSize,mXrefTable.size()); // combine logical and actual...to avoid unnecessary trouble",
          "2204:     return (inObjectID < GetXrefSize()) ? &(mXrefTable[inObjectID]) : NULL;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2202: IByteReaderWithPosition* PDFParser::GetParserStream()",
          "2203: {",
          "2205: }",
          "",
          "[Removed Lines]",
          "2204:     return mStream;",
          "",
          "[Added Lines]",
          "2214:     return &mStream;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFParser.h||src/deps/PDFWriter/PDFParser.h": [
          "File: src/deps/PDFWriter/PDFParser.h -> src/deps/PDFWriter/PDFParser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"AdapterIByteReaderWithPositionToIReadPositionProvider.h\"",
          "31: #include \"DecryptionHelper.h\"",
          "32: #include \"PDFParsingOptions.h\"",
          "34: #include <map>",
          "35: #include <utility>",
          "37: class PDFArray;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"InputOffsetStream.h\"",
          "36: #include <set>",
          "37: #include <vector>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:  EXrefEntryType mType;",
          "64: };",
          "66: struct ObjectStreamHeaderEntry",
          "67: {",
          "68:  ObjectIDType mObjectNumber;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: typedef std::vector<XrefEntryInput> XrefEntryInputVector;",
          "71: typedef std::set<LongFilePositionType> LongFilePositionTypeSet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168: private:",
          "169:  PDFObjectParser mObjectParser;",
          "170:  DecryptionHelper mDecryptionHelper;",
          "172:  AdapterIByteReaderWithPositionToIReadPositionProvider mCurrentPositionProvider;",
          "",
          "[Removed Lines]",
          "171:  IByteReaderWithPosition* mStream;",
          "",
          "[Added Lines]",
          "178:  InputOffsetStream mStream;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:  LongBufferSizeType mLastReadPositionFromEnd;",
          "179:  bool mEncounteredFileStart;",
          "180:  ObjectIDTypeToObjectStreamHeaderEntryMap mObjectStreamsCache;",
          "182:  double mPDFLevel;",
          "183:  LongFilePositionType mLastXrefPosition;",
          "184:  RefCountPtr<PDFDictionary> mTrailer;",
          "187:  unsigned long mPagesCount;",
          "188:  ObjectIDType* mPagesObjectIDs;",
          "189:  IPDFParserExtender* mParserExtender;",
          "",
          "[Removed Lines]",
          "185:  ObjectIDType mXrefSize;",
          "186:  XrefEntryInput* mXrefTable;",
          "",
          "[Added Lines]",
          "188:  LongFilePositionTypeSet mParsedXrefs;",
          "193:  ObjectIDType mXrefSize; // logical size of table (declared). note that mXrefTable keeps its own size() as well.",
          "194:  XrefEntryInputVector mXrefTable;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:  PDFHummus::EStatusCode BuildXrefTableFromTable();",
          "197:  PDFHummus::EStatusCode DetermineXrefSize();",
          "198:  PDFHummus::EStatusCode InitializeXref();",
          "200:                                                   ObjectIDType inXrefSize,",
          "201:                                                   LongFilePositionType inXrefPosition,",
          "202:               bool inIsFirstXref,",
          "206:  PDFHummus::EStatusCode ReadNextXrefEntry(Byte inBuffer[20]);",
          "207:  PDFObject*  ParseExistingInDirectObject(ObjectIDType inObjectID);",
          "208:  PDFHummus::EStatusCode SetupDecryptionHelper(const std::string& inPassword);",
          "",
          "[Removed Lines]",
          "199:  PDFHummus::EStatusCode ParseXrefFromXrefTable(XrefEntryInput* inXrefTable,",
          "203:                                                   XrefEntryInput** outExtendedTable,",
          "204:                                                   ObjectIDType* outExtendedTableSize);",
          "205:     XrefEntryInput* ExtendXrefTableToSize(XrefEntryInput* inXrefTable,ObjectIDType inOldSize,ObjectIDType inNewSize);",
          "",
          "[Added Lines]",
          "207:  PDFHummus::EStatusCode ParseXrefFromXrefTable(XrefEntryInputVector& inXrefTable,",
          "211:                                                   ObjectIDType* outReadTableSize);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210:  PDFHummus::EStatusCode ParsePagesIDs(PDFDictionary* inPageNode,ObjectIDType inNodeObjectID);",
          "211:  PDFHummus::EStatusCode ParsePagesIDs(PDFDictionary* inPageNode,ObjectIDType inNodeObjectID,unsigned long& ioCurrentPageIndex);",
          "212:  PDFHummus::EStatusCode ParsePreviousXrefs(PDFDictionary* inTrailer);",
          "214:  PDFHummus::EStatusCode ParseFileDirectory();",
          "215:  PDFHummus::EStatusCode BuildXrefTableAndTrailerFromXrefStream(long long inXrefStreamObjectID);",
          "218:                                                    ObjectIDType inXrefSize,",
          "219:                                                    PDFStreamInput* inXrefStream,",
          "224:                                                    ObjectIDType inXrefSize,",
          "225:                                                    LongFilePositionType inXrefPosition,",
          "229:           ObjectIDType inSegmentStartObject,",
          "230:           ObjectIDType inSegmentCount,",
          "231:           IByteReader* inReadFrom,",
          "",
          "[Removed Lines]",
          "213:  void MergeXrefWithMainXref(XrefEntryInput* inTableToMerge,ObjectIDType inMergedTableSize);",
          "217:  PDFHummus::EStatusCode ParseXrefFromXrefStream(XrefEntryInput* inXrefTable,",
          "220:                                                    XrefEntryInput** outExtendedTable,",
          "221:                                                    ObjectIDType* outExtendedTableSize);",
          "223:  PDFHummus::EStatusCode ParseXrefFromXrefStream(XrefEntryInput* inXrefTable,",
          "226:                                                    XrefEntryInput** outExtendedTable,",
          "227:                                                    ObjectIDType* outExtendedTableSize);",
          "228:  PDFHummus::EStatusCode ReadXrefStreamSegment(XrefEntryInput* inXrefTable,",
          "",
          "[Added Lines]",
          "219:  PDFHummus::EStatusCode MergeXrefWithMainXref(XrefEntryInputVector& inTableToMerge,ObjectIDType inMergedTableSize);",
          "223:  PDFHummus::EStatusCode ParseXrefFromXrefStream(XrefEntryInputVector& inXrefTable,",
          "226:                                                    ObjectIDType* outReadTableSize);",
          "228:  PDFHummus::EStatusCode ParseXrefFromXrefStream(XrefEntryInputVector& inXrefTable,",
          "231:                                                    ObjectIDType* outReadTableSize);",
          "232:  PDFHummus::EStatusCode ReadXrefStreamSegment(XrefEntryInputVector& inXrefTable,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234:  PDFHummus::EStatusCode ReadXrefSegmentValue(IByteReader* inSource,int inEntrySize,long long& outValue);",
          "235:  PDFHummus::EStatusCode ReadXrefSegmentValue(IByteReader* inSource,int inEntrySize,ObjectIDType& outValue);",
          "236:  PDFHummus::EStatusCode ParsePreviousFileDirectory(LongFilePositionType inXrefPosition,",
          "238:                                           ObjectIDType inXrefSize,",
          "239:                                           PDFDictionary** outTrailer,",
          "242:  PDFObject* ParseExistingInDirectStreamObject(ObjectIDType inObjectId);",
          "243:  PDFHummus::EStatusCode ParseObjectStreamHeader(ObjectStreamHeaderEntry* inHeaderInfo,ObjectIDType inObjectsCount);",
          "244:  void MovePositionInStream(LongFilePositionType inPosition);",
          "",
          "[Removed Lines]",
          "237:                                           XrefEntryInput* inXrefTable,",
          "240:                                           XrefEntryInput** outExtendedTable,",
          "241:                                           ObjectIDType* outExtendedTableSize);",
          "",
          "[Added Lines]",
          "241:                                           XrefEntryInputVector& inXrefTable,",
          "244:                                           ObjectIDType* outReadTableSize);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "259:  bool GoBackTillNonToken();",
          "260:  void GoBackTillLineStart();",
          "261:  bool IsPDFWhiteSpace(IOBasicTypes::Byte inCharacter);",
          "262: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  PDFHummus::EStatusCode ExtendXrefToSize(XrefEntryInputVector& inXrefTable, ObjectIDType inXrefSize);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFUsedFont.cpp||src/deps/PDFWriter/PDFUsedFont.cpp": [
          "File: src/deps/PDFWriter/PDFUsedFont.cpp -> src/deps/PDFWriter/PDFUsedFont.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  if(!mWrittenFont)",
          "70:   mWrittenFont = mFaceWrapper.CreateWrittenFontObject(mObjectsContext,mEmbedFont);",
          "72:  mWrittenFont->AppendGlyphs(inText,outCharactersToUse,outTreatCharactersAsCID,outFontObjectToUse);",
          "74:  return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  if(!mWrittenFont)",
          "72:   return PDFHummus::eFailure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:  if(!mWrittenFont)",
          "110:   mWrittenFont = mFaceWrapper.CreateWrittenFontObject(mObjectsContext,mEmbedFont);",
          "112:  mWrittenFont->AppendGlyphs(inText,outCharactersToUse,outTreatCharactersAsCID,outFontObjectToUse);",
          "114:  return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  if(!mWrittenFont)",
          "113:   return PDFHummus::eFailure;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFWriter.cpp||src/deps/PDFWriter/PDFWriter.cpp": [
          "File: src/deps/PDFWriter/PDFWriter.cpp -> src/deps/PDFWriter/PDFWriter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   return status;",
          "76:  mObjectsContext.SetOutputStream(mOutputFile.GetOutputStream());",
          "79:  if (inPDFCreationSettings.DocumentEncryptionOptions.ShouldEncrypt) {",
          "80:   mDocumentContext.SetupEncryption(inPDFCreationSettings.DocumentEncryptionOptions, thisOrDefaultVersion(inPDFVersion));",
          "",
          "[Removed Lines]",
          "77:  mDocumentContext.SetOutputFileInformation(&mOutputFile);",
          "",
          "[Added Lines]",
          "77:  mDocumentContext.SetOutputFileInformation(&mOutputFile);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  }",
          "87:  mIsModified = false;",
          "89:  return mDocumentContext.WriteHeader(thisOrDefaultVersion(inPDFVersion));",
          "90: }",
          "92: EStatusCode PDFWriter::EndPDF()",
          "93: {",
          "95:  EStatusCode status;",
          "96:  do",
          "97:  {",
          "98:         if(mIsModified)",
          "99:             status = mDocumentContext.FinalizeModifiedPDF(&mModifiedFileParser,mModifiedFileVersion);",
          "101:             status = mDocumentContext.FinalizeNewPDF();",
          "102:   if(status != eSuccess)",
          "103:   {",
          "",
          "[Removed Lines]",
          "100:         else",
          "",
          "[Added Lines]",
          "100:         else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234: PDFImageXObject* PDFWriter::CreateImageXObjectFromJPGFile(const std::string& inJPGFilePath)",
          "235: {",
          "237: }",
          "239: PDFFormXObject* PDFWriter::CreateFormXObjectFromJPGFile(const std::string& inJPGFilePath)",
          "240: {",
          "242: }",
          "244: #ifndef PDFHUMMUS_NO_TIFF",
          "245: PDFFormXObject* PDFWriter::CreateFormXObjectFromTIFFFile(const std::string& inTIFFFilePath,const TIFFUsageParameters& inTIFFUsageParameters)",
          "246: {",
          "248: }",
          "250: PDFFormXObject* PDFWriter::CreateFormXObjectFromTIFFFile(const std::string& inTIFFFilePath,ObjectIDType inFormXObjectID, const TIFFUsageParameters& inTIFFUsageParameters)",
          "",
          "[Removed Lines]",
          "236:  return mDocumentContext.CreateImageXObjectFromJPGFile(inJPGFilePath);",
          "241:  return mDocumentContext.CreateFormXObjectFromJPGFile(inJPGFilePath);",
          "247:  return mDocumentContext.CreateFormXObjectFromTIFFFile(inTIFFFilePath,inTIFFUsageParameters);",
          "",
          "[Added Lines]",
          "236:  return mDocumentContext.CreateImageXObjectFromJPGFile(inJPGFilePath);",
          "241:  return mDocumentContext.CreateFormXObjectFromJPGFile(inJPGFilePath);",
          "247:  return mDocumentContext.CreateFormXObjectFromTIFFFile(inTIFFFilePath,inTIFFUsageParameters);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295: PDFImageXObject* PDFWriter::CreateImageXObjectFromJPGFile(const std::string& inJPGFilePath,ObjectIDType inImageXObjectID)",
          "296: {",
          "298: }",
          "300: PDFFormXObject* PDFWriter::CreateFormXObjectFromJPGFile(const std::string& inJPGFilePath,ObjectIDType inImageXObjectID)",
          "301: {",
          "303: }",
          "",
          "[Removed Lines]",
          "297:  return mDocumentContext.CreateImageXObjectFromJPGFile(inJPGFilePath,inImageXObjectID);",
          "302:  return mDocumentContext.CreateFormXObjectFromJPGFile(inJPGFilePath,inImageXObjectID);",
          "",
          "[Added Lines]",
          "297:  return mDocumentContext.CreateImageXObjectFromJPGFile(inJPGFilePath,inImageXObjectID);",
          "302:  return mDocumentContext.CreateFormXObjectFromJPGFile(inJPGFilePath,inImageXObjectID);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "560:  mObjectsContext.SetOutputStream(inOutputStream);",
          "561:     mIsModified = false;",
          "563:  return mDocumentContext.WriteHeader(thisOrDefaultVersion(inPDFVersion));",
          "564: }",
          "565: EStatusCode PDFWriter::EndPDFForStream()",
          "566: {",
          "567:     EStatusCode status;",
          "569:     if(mIsModified)",
          "570:         status = mDocumentContext.FinalizeModifiedPDF(&mModifiedFileParser,mModifiedFileVersion);",
          "572:         status = mDocumentContext.FinalizeNewPDF();",
          "573:     mModifiedFileParser.ResetParser();",
          "574:  Cleanup();",
          "",
          "[Removed Lines]",
          "571:     else",
          "",
          "[Added Lines]",
          "571:     else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "636: PDFDocumentCopyingContext* PDFWriter::CreatePDFCopyingContext(IByteReaderWithPosition* inPDFStream, const PDFParsingOptions& inOptions)",
          "637: {",
          "639: }",
          "641: EStatusCode PDFWriter::ModifyPDF(const std::string& inModifiedFile,",
          "",
          "[Removed Lines]",
          "638:  return mDocumentContext.CreatePDFCopyingContext(inPDFStream,inOptions);",
          "",
          "[Added Lines]",
          "638:  return mDocumentContext.CreatePDFCopyingContext(inPDFStream,inOptions);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "645:                                             const PDFCreationSettings& inPDFCreationSettings)",
          "646: {",
          "647:     EStatusCode status = eSuccess;",
          "649:     SetupLog(inLogConfiguration);",
          "650:  SetupCreationSettings(inPDFCreationSettings);",
          "653:     {",
          "655:         if(inOptionalAlternativeOutputFile.size() == 0 || (inOptionalAlternativeOutputFile == inModifiedFile))",
          "",
          "[Removed Lines]",
          "652:     do",
          "",
          "[Added Lines]",
          "652:     do",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "680:    mObjectsContext.SetOutputStream(mOutputFile.GetOutputStream());",
          "681:    mObjectsContext.WriteTokenSeparator(eTokenSeparatorEndLine);",
          "682:         }",
          "684:         mDocumentContext.SetOutputFileInformation(&mOutputFile);",
          "687:         mIsModified = true;",
          "688:         status = SetupStateFromModifiedFile(inModifiedFile, thisOrDefaultVersion(inPDFVersion), inPDFCreationSettings);",
          "690:     while (false);",
          "692:     return status;",
          "693: }",
          "",
          "[Removed Lines]",
          "689:     }",
          "",
          "[Added Lines]",
          "689:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "699:                                       EPDFVersion inPDFVersion,",
          "700:                                       const LogConfiguration& inLogConfiguration,",
          "701:                                       const PDFCreationSettings& inPDFCreationSettings)",
          "703:     SetupLog(inLogConfiguration);",
          "704:  SetupCreationSettings(inPDFCreationSettings);",
          "706:     if(!inAppendOnly)",
          "707:     {",
          "",
          "[Removed Lines]",
          "702: {",
          "",
          "[Added Lines]",
          "702: {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "734:  if (inPDFCreationSettings.DocumentEncryptionOptions.ShouldEncrypt)",
          "735:   parsingOptions.Password = inPDFCreationSettings.DocumentEncryptionOptions.UserPassword;",
          "738:     {",
          "739:         status = mModifiedFileParser.StartPDFParsing(inModifiedSourceStream, parsingOptions);",
          "740:         if(status != eSuccess)",
          "743:         mObjectsContext.SetupModifiedFile(&mModifiedFileParser);",
          "745:         status = mDocumentContext.SetupModifiedFile(&mModifiedFileParser);",
          "746:         if(status != eSuccess)",
          "747:             break;",
          "749:   if (mModifiedFileParser.IsEncrypted() && mModifiedFileParser.IsEncryptionSupported()) {",
          "750:    mDocumentContext.SetupEncryption(&mModifiedFileParser);",
          "751:    if (!mDocumentContext.SupportsEncryption()) {",
          "",
          "[Removed Lines]",
          "737:     do",
          "741:             break;",
          "",
          "[Added Lines]",
          "737:     do",
          "741:             break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "755:   }",
          "757:         mModifiedFileVersion = thisOrDefaultVersion(inPDFVersion);",
          "759:     while (false);",
          "761:     return status;",
          "762: }",
          "764: EStatusCode PDFWriter::SetupStateFromModifiedFile(const std::string& inModifiedFile,EPDFVersion inPDFVersion, const PDFCreationSettings& inPDFCreationSettings)",
          "765: {",
          "766:     EStatusCode status;",
          "768:     do",
          "769:     {",
          "770:         status = mModifiedFile.OpenFile(inModifiedFile);",
          "771:         if(status != eSuccess)",
          "772:             break;",
          "774:         status = SetupStateFromModifiedStream(mModifiedFile.GetInputStream(), thisOrDefaultVersion(inPDFVersion), inPDFCreationSettings);",
          "775:     }",
          "776:     while(false);",
          "778:     return status;",
          "779: }",
          "",
          "[Removed Lines]",
          "758:     }",
          "",
          "[Added Lines]",
          "758:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "791: PDFDocumentCopyingContext* PDFWriter::CreatePDFCopyingContextForModifiedFile()",
          "792: {",
          "794: }",
          "796: DoubleAndDoublePair PDFWriter::GetImageDimensions(const std::string& inImageFile,unsigned long inImageIndex, const PDFParsingOptions& inParsingOptions)",
          "",
          "[Removed Lines]",
          "793:  return mDocumentContext.CreatePDFCopyingContext(&mModifiedFileParser);",
          "",
          "[Added Lines]",
          "793:  return mDocumentContext.CreatePDFCopyingContext(&mModifiedFileParser);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "911:  delete copyingContext;",
          "913:  return status;",
          "",
          "[Removed Lines]",
          "914: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFWriter.h||src/deps/PDFWriter/PDFWriter.h": [
          "File: src/deps/PDFWriter/PDFWriter.h -> src/deps/PDFWriter/PDFWriter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  bool EmbedFonts;",
          "61:  EncryptionOptions DocumentEncryptionOptions;",
          "65:   EmbedFonts = inEmbedFonts;",
          "66:  }",
          "",
          "[Removed Lines]",
          "63:  PDFCreationSettings(bool inCompressStreams, bool inEmbedFonts,EncryptionOptions inDocumentEncryptionOptions = EncryptionOptions::DefaultEncryptionOptions()):DocumentEncryptionOptions(inDocumentEncryptionOptions){",
          "64:   CompressStreams = inCompressStreams;",
          "",
          "[Added Lines]",
          "63:  PDFCreationSettings(bool inCompressStreams, bool inEmbedFonts,EncryptionOptions inDocumentEncryptionOptions = EncryptionOptions::DefaultEncryptionOptions()):DocumentEncryptionOptions(inDocumentEncryptionOptions){",
          "64:   CompressStreams = inCompressStreams;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:  void Reset();",
          "103:     PDFHummus::EStatusCode ModifyPDF(const std::string& inModifiedFile,",
          "104:                                      EPDFVersion inPDFVersion,",
          "105:                                      const std::string& inOptionalAlternativeOutputFile,",
          "106:                                      const LogConfiguration& inLogConfiguration = LogConfiguration::DefaultLogConfiguration(),",
          "108:     PDFHummus::EStatusCode ModifyPDFForStream(",
          "109:                                     IByteReaderWithPosition* inModifiedSourceStream,",
          "110:                                     IByteWriterWithPosition* inModifiedDestinationStream,",
          "111:                                     bool inAppendOnly,",
          "112:                                     EPDFVersion inPDFVersion,",
          "113:                                     const LogConfiguration& inLogConfiguration = LogConfiguration::DefaultLogConfiguration(),",
          "115:                                     );",
          "118:  PDFHummus::EStatusCode Shutdown(const std::string& inStateFilePath);",
          "119:  PDFHummus::EStatusCode ContinuePDF(const std::string& inOutputFilePath,",
          "",
          "[Removed Lines]",
          "107:                                      const PDFCreationSettings& inPDFCreationSettings = PDFCreationSettings(true,true));",
          "114:                                     const PDFCreationSettings& inPDFCreationSettings = PDFCreationSettings(true,true)",
          "",
          "[Added Lines]",
          "107:                                      const PDFCreationSettings& inPDFCreationSettings = PDFCreationSettings(true,true));",
          "114:                                     const PDFCreationSettings& inPDFCreationSettings = PDFCreationSettings(true,true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:  PDFDocumentCopyingContext* CreatePDFCopyingContext(",
          "256:   const PDFParsingOptions& inOptions = PDFParsingOptions::DefaultPDFParsingOptions());",
          "257:  PDFDocumentCopyingContext* CreatePDFCopyingContext(",
          "259:   const PDFParsingOptions& inOptions = PDFParsingOptions::DefaultPDFParsingOptions());",
          "262:     PDFDocumentCopyingContext* CreatePDFCopyingContextForModifiedFile();",
          "",
          "[Removed Lines]",
          "255:   const std::string& inPDFFilePath,",
          "258:   IByteReaderWithPosition* inPDFStream,",
          "",
          "[Added Lines]",
          "255:   const std::string& inPDFFilePath,",
          "258:   IByteReaderWithPosition* inPDFStream,",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PrimitiveObjectsWriter.h||src/deps/PDFWriter/PrimitiveObjectsWriter.h": [
          "File: src/deps/PDFWriter/PrimitiveObjectsWriter.h -> src/deps/PDFWriter/PrimitiveObjectsWriter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  void WriteNull(ETokenSeparator inSeparate = eTokenSeparatorSpace);",
          "54:  void StartArray();",
          "57:     IByteWriter* GetWritingStream();",
          "",
          "[Removed Lines]",
          "55:  void EndArray(ETokenSeparator inSeparate = eTokenSepratorNone);",
          "",
          "[Added Lines]",
          "55:  void EndArray(ETokenSeparator inSeparate = eTokenSeparatorNone);",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp||src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp": [
          "File: src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp -> src/deps/PDFWriter/TrueTypeEmbeddedFontWriter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:  TableEntry* tableEntry = mTrueTypeInput.GetTableEntry(\"head\");",
          "419:  LongFilePositionType startTableOffset;",
          "420:  OutputStreamTraits streamCopier(&mFontFileStream);",
          "421:  LongFilePositionType endOfStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:  if (!tableEntry) {",
          "420:   return PDFHummus::eFailure;",
          "421:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:  TableEntry* tableEntry = mTrueTypeInput.GetTableEntry(\"hhea\");",
          "488:  LongFilePositionType startTableOffset;",
          "489:  OutputStreamTraits streamCopier(&mFontFileStream);",
          "490:  LongFilePositionType endOfStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:  if (!tableEntry) {",
          "492:   return PDFHummus::eFailure;",
          "493:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "558:  TableEntry* tableEntry = mTrueTypeInput.GetTableEntry(\"maxp\");",
          "559:  LongFilePositionType startTableOffset;",
          "560:  OutputStreamTraits streamCopier(&mFontFileStream);",
          "561:  LongFilePositionType endOfStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:  if (!tableEntry) {",
          "566:   return PDFHummus::eFailure;",
          "567:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "604:  TableEntry* tableEntry = mTrueTypeInput.GetTableEntry(\"glyf\");",
          "605:  LongFilePositionType startTableOffset = mFontFileStream.GetCurrentPosition();",
          "606:  UIntVector::const_iterator it = inSubsetGlyphIDs.begin();",
          "607:  OutputStreamTraits streamCopier(&mFontFileStream);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:  if (!tableEntry) {",
          "615:   return PDFHummus::eFailure;",
          "616:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "708:  TableEntry* tableEntry = mTrueTypeInput.GetTableEntry(inTableName);",
          "709:  LongFilePositionType startTableOffset;",
          "710:  OutputStreamTraits streamCopier(&mFontFileStream);",
          "711:  LongFilePositionType endOfStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721:  if (!tableEntry) {",
          "722:   return PDFHummus::eFailure;",
          "723:  }",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/binding.gyp||src/deps/PDFWriter/binding.gyp": [
          "File: src/deps/PDFWriter/binding.gyp -> src/deps/PDFWriter/binding.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:                    }",
          "13:                 }]",
          "14:             ],",
          "15:             'dependencies': [",
          "16:                '<(module_root_dir)/src/deps/LibAesgm/binding.gyp:libaesgm',",
          "17:                '<(module_root_dir)/src/deps/FreeType/binding.gyp:freetype',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:            'msvs_settings':",
          "16:    {",
          "17:     'VCCLCompilerTool':",
          "18:     {",
          "19:      'AdditionalOptions':",
          "20:       [",
          "21:       '/std:c++17',",
          "22:       ]",
          "23:     }",
          "24:    },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:                'InputFlateDecodeStream.cpp',",
          "76:                'InputLZWDecodeStream.cpp',",
          "77:                'InputLimitedStream.cpp',",
          "78:                'InputPFBDecodeStream.cpp',",
          "79:                'InputPredictorPNGOptimumStream.cpp',",
          "80:                'InputPredictorTIFFSubStream.cpp',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:                'InputOffsetStream.cpp',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:                'InputFile.h',",
          "242:                'InputFileStream.h',",
          "243:                'InputLZWDecodeStream.h',",
          "244:                'InputFlateDecodeStream.h',",
          "245:                'InputLimitedStream.h',",
          "246:                'InputPFBDecodeStream.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:                'InputOffsetStream.h',",
          "",
          "---------------"
        ],
        "src/hummus.cpp||src/hummus.cpp": [
          "File: src/hummus.cpp -> src/hummus.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     EXPORTS_SET(exports,NEW_SYMBOL(\"eTokenSeparatorSpace\"),NEW_NUMBER(eTokenSeparatorSpace))",
          "634:     EXPORTS_SET(exports,NEW_SYMBOL(\"eTokenSeparatorEndLine\"),NEW_NUMBER(eTokenSeparatorEndLine))",
          "638:     EXPORTS_SET(exports,NEW_SYMBOL(\"eXrefEntryExisting\"),NEW_NUMBER(eXrefEntryExisting))",
          "",
          "[Removed Lines]",
          "635:     EXPORTS_SET(exports,NEW_SYMBOL(\"eTokenSepratorNone\"),NEW_NUMBER(eTokenSepratorNone))",
          "",
          "[Added Lines]",
          "635:     EXPORTS_SET(exports,NEW_SYMBOL(\"eTokenSeparatorNone\"),NEW_NUMBER(eTokenSeparatorNone))",
          "",
          "---------------"
        ]
      }
    }
  ]
}