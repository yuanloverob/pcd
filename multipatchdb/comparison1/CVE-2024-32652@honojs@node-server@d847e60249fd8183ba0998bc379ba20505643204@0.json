{
  "cve_id": "CVE-2024-32652",
  "cve_desc": "The adapter @hono/node-server allows you to run your Hono application on Node.js. Prior to 1.10.1, the application hangs when receiving a Host header with a value that `@hono/node-server` can't handle well. Invalid values are those that cannot be parsed by the `URL` as a hostname such as an empty string, slashes `/`, and other strings. The version 1.10.1 includes the fix for this issue.",
  "repo": "honojs/node-server",
  "patch_hash": "d847e60249fd8183ba0998bc379ba20505643204",
  "patch_info": {
    "commit_hash": "d847e60249fd8183ba0998bc379ba20505643204",
    "repo": "honojs/node-server",
    "commit_url": "https://github.com/honojs/node-server/commit/d847e60249fd8183ba0998bc379ba20505643204",
    "files": [
      "src/listener.ts",
      "test/listener.test.ts"
    ],
    "message": "fix: catch ERR_INVALID_URL error in listener (#162)",
    "before_after_code_files": [
      "src/listener.ts||src/listener.ts",
      "test/listener.test.ts||test/listener.test.ts"
    ]
  },
  "patch_diff": {
    "src/listener.ts||src/listener.ts": [
      "File: src/listener.ts -> src/listener.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:   ) => {",
      "160:     let res",
      "173:     try {",
      "174:       res = fetchCallback(req, { incoming, outgoing } as HttpBindings) as",
      "175:         | Response",
      "176:         | Promise<Response>",
      "",
      "[Removed Lines]",
      "164:     const req = newRequest(incoming)",
      "167:     outgoing.on('close', () => {",
      "168:       if (incoming.destroyed) {",
      "169:         req[getAbortController]().abort()",
      "170:       }",
      "171:     })",
      "",
      "[Added Lines]",
      "165:       const req = newRequest(incoming)",
      "168:       outgoing.on('close', () => {",
      "169:         if (incoming.destroyed) {",
      "170:           req[getAbortController]().abort()",
      "171:         }",
      "172:       })",
      "",
      "---------------"
    ],
    "test/listener.test.ts||test/listener.test.ts": [
      "File: test/listener.test.ts -> test/listener.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import { GlobalRequest, Request as LightweightRequest } from '../src/request'",
      "5: import { GlobalResponse, Response as LightweightResponse } from '../src/response'",
      "7: describe('Error handling - sync fetchCallback', () => {",
      "8:   const fetchCallback = jest.fn(() => {",
      "9:     throw new Error('thrown error')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: describe('Invalid request', () => {",
      "8:   const requestListener = getRequestListener(jest.fn())",
      "9:   const server = createServer(async (req, res) => {",
      "10:     await requestListener(req, res)",
      "12:     if (!res.writableEnded) {",
      "13:       res.writeHead(500, { 'Content-Type': 'text/plain' })",
      "14:       res.end('error handler did not return a response')",
      "15:     }",
      "16:   })",
      "18:   it('Should return server error for a request w/o host header', async () => {",
      "19:     const res = await request(server).get('/').set('Host', '').send()",
      "20:     expect(res.status).toBe(500)",
      "21:   })",
      "23:   it('Should return server error for a request invalid host header', async () => {",
      "24:     const res = await request(server).get('/').set('Host', 'a b').send()",
      "25:     expect(res.status).toBe(500)",
      "26:   })",
      "27: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ba26b944572d2c92551fd9aeac1349a335f3b3f5",
      "candidate_info": {
        "commit_hash": "ba26b944572d2c92551fd9aeac1349a335f3b3f5",
        "repo": "honojs/node-server",
        "commit_url": "https://github.com/honojs/node-server/commit/ba26b944572d2c92551fd9aeac1349a335f3b3f5",
        "files": [
          "package.json",
          "src/listener.ts",
          "test/server.test.ts",
          "tsconfig.json"
        ],
        "message": "fix:  memory leak by AbortController (#172)\n\n* test: add test for memory leak by AbortController\n\n* chore: update tsconfig.json for test/**/*.ts\n\n* refactor: check request error by `incoming.errored` instead of `incoming.destroyed`\n\n* refactor: add reason to abort controller by text\n\nDue to the nodejs implementation, passing an object to `abort()` will cause a memory leak, so pass a string",
        "before_after_code_files": [
          "src/listener.ts||src/listener.ts",
          "test/server.test.ts||test/server.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/listener.ts||src/listener.ts"
          ],
          "candidate": [
            "src/listener.ts||src/listener.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/listener.ts||src/listener.ts": [
          "File: src/listener.ts -> src/listener.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:       outgoing.on('close', () => {",
          "183:         }",
          "184:       })",
          "",
          "[Removed Lines]",
          "181:         if (incoming.destroyed) {",
          "182:           req[getAbortController]().abort()",
          "",
          "[Added Lines]",
          "181:         if (incoming.errored) {",
          "182:           req[getAbortController]().abort(incoming.errored.toString())",
          "",
          "---------------"
        ],
        "test/server.test.ts||test/server.test.ts": [
          "File: test/server.test.ts -> test/server.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { poweredBy } from 'hono/powered-by'",
          "9: import { stream } from 'hono/streaming'",
          "10: import request from 'supertest'",
          "12: import { GlobalResponse, Response as LightweightResponse } from '../src/response'",
          "13: import { createAdaptorServer } from '../src/server'",
          "14: import type { HttpBindings } from '../src/types'",
          "",
          "[Removed Lines]",
          "11: import { GlobalRequest, Request as LightweightRequest } from '../src/request'",
          "",
          "[Added Lines]",
          "11: import { GlobalRequest, Request as LightweightRequest, getAbortController } from '../src/request'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796:     })",
          "797:   })",
          "798: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800: describe('Memory leak test', () => {",
          "801:   let counter = 0",
          "802:   const registry = new FinalizationRegistry(() => {",
          "803:     counter--",
          "804:   })",
          "805:   const app = new Hono()",
          "806:   const server = createAdaptorServer(app)",
          "808:   let onAbort: () => void",
          "809:   let reqReadyResolve: () => void",
          "810:   let reqReadyPromise: Promise<void>",
          "812:   app.use(async (c, next) => {",
          "813:     counter++",
          "815:     registry.register((c.req.raw as any)[getAbortController](), 'abortController')",
          "816:     await next()",
          "817:   })",
          "818:   app.get('/', (c) => c.text('Hello! Node!'))",
          "819:   app.post('/', async (c) => c.json(await c.req.json()))",
          "820:   app.get('/abort', async (c) => {",
          "821:     c.req.raw.signal.addEventListener('abort', () => onAbort())",
          "822:     reqReadyResolve?.()",
          "823:     await new Promise(() => {}) // never resolve",
          "824:   })",
          "826:   beforeEach(() => {",
          "827:     counter = 0",
          "828:     reqReadyPromise = new Promise<void>((r) => {",
          "829:       reqReadyResolve = r",
          "830:     })",
          "831:   })",
          "833:   afterAll(() => {",
          "834:     server.close()",
          "835:   })",
          "837:   it('Should not have memory leak - GET /', async () => {",
          "838:     await request(server).get('/')",
          "839:     global.gc?.()",
          "840:     await new Promise((resolve) => setTimeout(resolve, 10))",
          "841:     expect(counter).toBe(0)",
          "842:   })",
          "844:   it('Should not have memory leak - POST /', async () => {",
          "845:     await request(server).post('/').set('Content-Type', 'application/json').send({ foo: 'bar' })",
          "846:     global.gc?.()",
          "847:     await new Promise((resolve) => setTimeout(resolve, 10))",
          "848:     expect(counter).toBe(0)",
          "849:   })",
          "851:   it('Should not have memory leak - GET /abort', async () => {",
          "852:     const abortedPromise = new Promise<void>((resolve) => {",
          "853:       onAbort = resolve",
          "854:     })",
          "856:     const req = request(server)",
          "857:       .get('/abort')",
          "858:       .end(() => {})",
          "859:     await reqReadyPromise",
          "860:     req.abort()",
          "861:     await abortedPromise",
          "862:     await new Promise((resolve) => setTimeout(resolve, 10))",
          "864:     global.gc?.()",
          "865:     await new Promise((resolve) => setTimeout(resolve, 10))",
          "866:     expect(counter).toBe(0)",
          "867:   })",
          "868: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f1b09031d2d29862f2ef9228c58c0f9023c9b7f",
      "candidate_info": {
        "commit_hash": "4f1b09031d2d29862f2ef9228c58c0f9023c9b7f",
        "repo": "honojs/node-server",
        "commit_url": "https://github.com/honojs/node-server/commit/4f1b09031d2d29862f2ef9228c58c0f9023c9b7f",
        "files": [
          "src/listener.ts",
          "src/request.ts",
          "test/listener.test.ts",
          "test/request.test.ts"
        ],
        "message": "fix: Avoid error if connection is aborted before internal request object is created (#221)\n\n* test: add test for request abort without requestCache\n\nCo-authored-by: Hironao OTSUBO <motemen@gmail.com>\n\n* fix: Avoid error if connection is aborted before internal request object is created\n\nAt this time, since the user is not listening for abort events, so we should return immediately.\n\n---------\n\nCo-authored-by: Hironao OTSUBO <motemen@gmail.com>",
        "before_after_code_files": [
          "src/listener.ts||src/listener.ts",
          "src/request.ts||src/request.ts",
          "test/listener.test.ts||test/listener.test.ts",
          "test/request.test.ts||test/request.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/listener.ts||src/listener.ts",
            "test/listener.test.ts||test/listener.test.ts"
          ],
          "candidate": [
            "src/listener.ts||src/listener.ts",
            "test/listener.test.ts||test/listener.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/listener.ts||src/listener.ts": [
          "File: src/listener.ts -> src/listener.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { IncomingMessage, ServerResponse, OutgoingHttpHeaders } from 'node:http'",
          "2: import type { Http2ServerRequest, Http2ServerResponse } from 'node:http2'",
          "3: import {",
          "5:   newRequest,",
          "6:   Request as LightweightRequest,",
          "7:   toRequestError,",
          "",
          "[Removed Lines]",
          "4:   getAbortController,",
          "",
          "[Added Lines]",
          "4:   abortControllerKey,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:       outgoing.on('close', () => {",
          "190:         if (incoming.errored) {",
          "192:         } else if (!outgoing.writableFinished) {",
          "194:         }",
          "195:       })",
          "",
          "[Removed Lines]",
          "191:           req[getAbortController]().abort(incoming.errored.toString())",
          "193:           req[getAbortController]().abort('Client connection prematurely closed.')",
          "",
          "[Added Lines]",
          "190:         const abortController = req[abortControllerKey] as AbortController | undefined",
          "191:         if (!abortController) {",
          "192:           return",
          "193:         }",
          "196:           req[abortControllerKey].abort(incoming.errored.toString())",
          "198:           req[abortControllerKey].abort('Client connection prematurely closed.')",
          "",
          "---------------"
        ],
        "src/request.ts||src/request.ts": [
          "File: src/request.ts -> src/request.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: const requestCache = Symbol('requestCache')",
          "97: const incomingKey = Symbol('incomingKey')",
          "98: const urlKey = Symbol('urlKey')",
          "100: export const getAbortController = Symbol('getAbortController')",
          "102: const requestPrototype: Record<string | symbol, any> = {",
          "",
          "[Removed Lines]",
          "99: const abortControllerKey = Symbol('abortControllerKey')",
          "",
          "[Added Lines]",
          "99: export const abortControllerKey = Symbol('abortControllerKey')",
          "",
          "---------------"
        ],
        "test/listener.test.ts||test/listener.test.ts": [
          "File: test/listener.test.ts -> test/listener.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:       }",
          "275:     }",
          "276:   )",
          "277: })",
          "279: describe('overrideGlobalObjects', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   it('should handle request abort without requestCache', async () => {",
          "279:     const fetchCallback = async () => {",
          "281:       await new Promise(() => {}) // never resolve",
          "282:     }",
          "283:     const requestListener = getRequestListener(fetchCallback)",
          "284:     const server = createServer(requestListener)",
          "285:     const req = request(server).post('/abort').timeout({ deadline: 1 })",
          "286:     await expect(req).rejects.toHaveProperty('timeout')",
          "287:   })",
          "",
          "---------------"
        ],
        "test/request.test.ts||test/request.test.ts": [
          "File: test/request.test.ts -> test/request.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   Request as LightweightRequest,",
          "6:   GlobalRequest,",
          "7:   getAbortController,",
          "8:   RequestError,",
          "9: } from '../src/request'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   abortControllerKey,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:       expect(z).not.toBe(y)",
          "82:     })",
          "84:     it('Should throw error if host header contains path', async () => {",
          "85:       expect(() => {",
          "86:         newRequest({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     it('should be able to safely check if an AbortController has been initialized by referencing the abortControllerKey', async () => {",
          "86:       const req = newRequest({",
          "87:         headers: {",
          "88:           host: 'localhost',",
          "89:         },",
          "90:         rawHeaders: ['host', 'localhost'],",
          "91:         url: '/foo.txt',",
          "92:       } as IncomingMessage)",
          "94:       expect(req[abortControllerKey]).toBeUndefined() // not initialized, do not initialize internal request object automatically",
          "96:       expect(req[getAbortController]()).toBeDefined()",
          "97:       expect(req[abortControllerKey]).toBeDefined() // initialized",
          "98:     })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "306d98f02a8671a0a1fb91ac8fe7e281690c05af",
      "candidate_info": {
        "commit_hash": "306d98f02a8671a0a1fb91ac8fe7e281690c05af",
        "repo": "honojs/node-server",
        "commit_url": "https://github.com/honojs/node-server/commit/306d98f02a8671a0a1fb91ac8fe7e281690c05af",
        "files": [
          "src/index.ts",
          "src/listener.ts",
          "src/request.ts",
          "src/server.ts",
          "test/listener.test.ts",
          "test/request.test.ts"
        ],
        "message": "feat: validate incoming host header (#163)\n\n* feat(request): add RequestError class and its utility function\n\n* fix: return 400 if host header is missing or contains invalid characters\n\n* feat: validate incoming host header\n\n* test: add tests for invalid host header\n\n* feat: use options.hostname as default hostname for request",
        "before_after_code_files": [
          "src/index.ts||src/index.ts",
          "src/listener.ts||src/listener.ts",
          "src/request.ts||src/request.ts",
          "src/server.ts||src/server.ts",
          "test/listener.test.ts||test/listener.test.ts",
          "test/request.test.ts||test/request.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/listener.ts||src/listener.ts",
            "test/listener.test.ts||test/listener.test.ts"
          ],
          "candidate": [
            "src/listener.ts||src/listener.ts",
            "test/listener.test.ts||test/listener.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export { serve, createAdaptorServer } from './server'",
          "2: export { getRequestListener } from './listener'",
          "3: export type { HttpBindings, Http2Bindings } from './types'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: export { RequestError } from './request'",
          "",
          "---------------"
        ],
        "src/listener.ts||src/listener.ts": [
          "File: src/listener.ts -> src/listener.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { IncomingMessage, ServerResponse, OutgoingHttpHeaders } from 'node:http'",
          "2: import type { Http2ServerRequest, Http2ServerResponse } from 'node:http2'",
          "4: import { cacheKey, getInternalBody, Response as LightweightResponse } from './response'",
          "5: import type { CustomErrorHandler, FetchCallback, HttpBindings } from './types'",
          "6: import { writeFromReadableStream, buildOutgoingHttpHeaders } from './utils'",
          "",
          "[Removed Lines]",
          "3: import { getAbortController, newRequest, Request as LightweightRequest } from './request'",
          "",
          "[Added Lines]",
          "3: import {",
          "4:   getAbortController,",
          "5:   newRequest,",
          "6:   Request as LightweightRequest,",
          "7:   toRequestError,",
          "8: } from './request'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: const regBuffer = /^no$/i",
          "11: const regContentType = /^(application\\/json\\b|text\\/(?!event-stream\\b))/i",
          "13: const handleFetchError = (e: unknown): Response =>",
          "14:   new Response(null, {",
          "15:     status:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: const handleRequestError = (): Response =>",
          "19:   new Response(null, {",
          "20:     status: 400,",
          "21:   })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: export const getRequestListener = (",
          "141:   fetchCallback: FetchCallback,",
          "142:   options: {",
          "143:     errorHandler?: CustomErrorHandler",
          "144:     overrideGlobalObjects?: boolean",
          "145:   } = {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     hostname?: string",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:     incoming: IncomingMessage | Http2ServerRequest,",
          "158:     outgoing: ServerResponse | Http2ServerResponse",
          "159:   ) => {",
          "162:     try {",
          "168:       outgoing.on('close', () => {",
          "",
          "[Removed Lines]",
          "160:     let res",
          "165:       const req = newRequest(incoming)",
          "",
          "[Added Lines]",
          "172:     let res, req: any",
          "177:       req = newRequest(incoming, options.hostname)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181:     } catch (e: unknown) {",
          "182:       if (!res) {",
          "183:         if (options.errorHandler) {",
          "185:           if (!res) {",
          "186:             return",
          "187:           }",
          "188:         } else {",
          "189:           res = handleFetchError(e)",
          "190:         }",
          "",
          "[Removed Lines]",
          "184:           res = await options.errorHandler(e)",
          "",
          "[Added Lines]",
          "196:           res = await options.errorHandler(req ? e : toRequestError(e))",
          "200:         } else if (!req) {",
          "201:           res = handleRequestError()",
          "",
          "---------------"
        ],
        "src/request.ts||src/request.ts": [
          "File: src/request.ts -> src/request.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import { Readable } from 'node:stream'",
          "7: import type { TLSSocket } from 'node:tls'",
          "9: export const GlobalRequest = global.Request",
          "10: export class Request extends GlobalRequest {",
          "11:   constructor(input: string | Request, options?: RequestInit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: export class RequestError extends Error {",
          "10:   static name = 'RequestError'",
          "11:   constructor(",
          "12:     message: string,",
          "13:     options?: {",
          "14:       cause?: unknown",
          "15:     }",
          "16:   ) {",
          "17:     super(message, options)",
          "18:   }",
          "19: }",
          "21: export const toRequestError = (e: unknown): RequestError => {",
          "22:   if (e instanceof RequestError) {",
          "23:     return e",
          "24:   }",
          "25:   return new RequestError((e as Error).message, { cause: e })",
          "26: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: })",
          "112: Object.setPrototypeOf(requestPrototype, Request.prototype)",
          "115:   const req = Object.create(requestPrototype)",
          "116:   req[incomingKey] = incoming",
          "118:     `${",
          "119:       incoming instanceof Http2ServerRequest ||",
          "120:       (incoming.socket && (incoming.socket as TLSSocket).encrypted)",
          "121:         ? 'https'",
          "122:         : 'http'",
          "127:   return req",
          "128: }",
          "",
          "[Removed Lines]",
          "114: export const newRequest = (incoming: IncomingMessage | Http2ServerRequest) => {",
          "117:   req[urlKey] = new URL(",
          "123:     }://${incoming instanceof Http2ServerRequest ? incoming.authority : incoming.headers.host}${",
          "124:       incoming.url",
          "125:     }`",
          "126:   ).href",
          "",
          "[Added Lines]",
          "133: export const newRequest = (",
          "134:   incoming: IncomingMessage | Http2ServerRequest,",
          "135:   defaultHostname?: string",
          "136: ) => {",
          "140:   const host =",
          "141:     (incoming instanceof Http2ServerRequest ? incoming.authority : incoming.headers.host) ||",
          "142:     defaultHostname",
          "143:   if (!host) {",
          "144:     throw new RequestError('Missing host header')",
          "145:   }",
          "146:   const url = new URL(",
          "152:     }://${host}${incoming.url}`",
          "153:   )",
          "157:   if (url.hostname.length !== host.length && url.hostname !== host.replace(/:\\d+$/, '')) {",
          "158:     throw new RequestError('Invalid host header')",
          "159:   }",
          "161:   req[urlKey] = url.href",
          "",
          "---------------"
        ],
        "src/server.ts||src/server.ts": [
          "File: src/server.ts -> src/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: export const createAdaptorServer = (options: Options): ServerType => {",
          "7:   const fetchCallback = options.fetch",
          "8:   const requestListener = getRequestListener(fetchCallback, {",
          "9:     overrideGlobalObjects: options.overrideGlobalObjects,",
          "10:   })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:     hostname: options.hostname,",
          "",
          "---------------"
        ],
        "test/listener.test.ts||test/listener.test.ts": [
          "File: test/listener.test.ts -> test/listener.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { createServer } from 'node:http'",
          "2: import request from 'supertest'",
          "3: import { getRequestListener } from '../src/listener'",
          "5: import { GlobalResponse, Response as LightweightResponse } from '../src/response'",
          "7: describe('Invalid request', () => {",
          "16:   })",
          "21:   })",
          "26:   })",
          "27: })",
          "",
          "[Removed Lines]",
          "4: import { GlobalRequest, Request as LightweightRequest } from '../src/request'",
          "8:   const requestListener = getRequestListener(jest.fn())",
          "9:   const server = createServer(async (req, res) => {",
          "10:     await requestListener(req, res)",
          "12:     if (!res.writableEnded) {",
          "13:       res.writeHead(500, { 'Content-Type': 'text/plain' })",
          "14:       res.end('error handler did not return a response')",
          "15:     }",
          "18:   it('Should return server error for a request w/o host header', async () => {",
          "19:     const res = await request(server).get('/').set('Host', '').send()",
          "20:     expect(res.status).toBe(500)",
          "23:   it('Should return server error for a request invalid host header', async () => {",
          "24:     const res = await request(server).get('/').set('Host', 'a b').send()",
          "25:     expect(res.status).toBe(500)",
          "",
          "[Added Lines]",
          "4: import { GlobalRequest, Request as LightweightRequest, RequestError } from '../src/request'",
          "8:   describe('default error handler', () => {",
          "9:     const requestListener = getRequestListener(jest.fn())",
          "10:     const server = createServer(requestListener)",
          "12:     it('Should return server error for a request w/o host header', async () => {",
          "13:       const res = await request(server).get('/').set('Host', '').send()",
          "14:       expect(res.status).toBe(400)",
          "15:     })",
          "17:     it('Should return server error for a request invalid host header', async () => {",
          "18:       const res = await request(server).get('/').set('Host', 'a b').send()",
          "19:       expect(res.status).toBe(400)",
          "20:     })",
          "23:   describe('custom error handler', () => {",
          "24:     const requestListener = getRequestListener(jest.fn(), {",
          "25:       errorHandler: (e) => {",
          "26:         if (e instanceof RequestError) {",
          "27:           return new Response(e.message, { status: 400 })",
          "28:         } else {",
          "29:           return new Response('unknown error', { status: 500 })",
          "30:         }",
          "31:       },",
          "32:     })",
          "33:     const server = createServer(requestListener)",
          "35:     it('Should return server error for a request w/o host header', async () => {",
          "36:       const res = await request(server).get('/').set('Host', '').send()",
          "37:       expect(res.status).toBe(400)",
          "38:     })",
          "40:     it('Should return server error for a request invalid host header', async () => {",
          "41:       const res = await request(server).get('/').set('Host', 'a b').send()",
          "42:       expect(res.status).toBe(400)",
          "43:     })",
          "45:     it('Should return server error for host header with path', async () => {",
          "46:       const res = await request(server).get('/').set('Host', 'a/b').send()",
          "47:       expect(res.status).toBe(400)",
          "48:     })",
          "51:   describe('default hostname', () => {",
          "52:     const requestListener = getRequestListener(() => new Response('ok'), {",
          "53:       hostname: 'example.com',",
          "54:     })",
          "55:     const server = createServer(requestListener)",
          "57:     it('Should return 200 for a request w/o host header', async () => {",
          "58:       const res = await request(server).get('/').set('Host', '').send()",
          "59:       expect(res.status).toBe(200)",
          "60:     })",
          "62:     it('Should return server error for a request invalid host header', async () => {",
          "63:       const res = await request(server).get('/').set('Host', 'a b').send()",
          "64:       expect(res.status).toBe(400)",
          "65:     })",
          "",
          "---------------"
        ],
        "test/request.test.ts||test/request.test.ts": [
          "File: test/request.test.ts -> test/request.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   Request as LightweightRequest,",
          "5:   GlobalRequest,",
          "6:   getAbortController,",
          "7: } from '../src/request'",
          "9: Object.defineProperty(global, 'Request', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:   RequestError,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:       expect(req.url).toBe('http://localhost/foo.txt')",
          "41:     })",
          "44:       const req = newRequest({",
          "45:         headers: {",
          "47:         },",
          "49:       } as IncomingMessage)",
          "50:       expect(req).toBeInstanceOf(global.Request)",
          "52:     })",
          "54:     it('should generate only one `AbortController` per `Request` object created', async () => {",
          "55:       const req = newRequest({",
          "56:         headers: {",
          "58:         },",
          "60:         url: '/foo.txt',",
          "61:       } as IncomingMessage)",
          "62:       const req2 = newRequest({",
          "63:         headers: {",
          "65:         },",
          "67:         url: '/foo.txt',",
          "68:       } as IncomingMessage)",
          "",
          "[Removed Lines]",
          "43:     it('Should resolve double dots in host header', async () => {",
          "46:           host: 'localhost/..',",
          "48:         url: '/foo.txt',",
          "51:       expect(req.url).toBe('http://localhost/foo.txt')",
          "57:           host: 'localhost/..',",
          "59:         rawHeaders: ['host', 'localhost/..'],",
          "64:           host: 'localhost/..',",
          "66:         rawHeaders: ['host', 'localhost/..'],",
          "",
          "[Added Lines]",
          "44:     it('Should accept hostname and port in host header', async () => {",
          "47:           host: 'localhost:8080',",
          "49:         url: '/static/../foo.txt',",
          "52:       expect(req.url).toBe('http://localhost:8080/foo.txt')",
          "58:           host: 'localhost',",
          "60:         rawHeaders: ['host', 'localhost'],",
          "65:           host: 'localhost',",
          "67:         rawHeaders: ['host', 'localhost'],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:       expect(z).not.toBe(x)",
          "79:       expect(z).not.toBe(y)",
          "80:     })",
          "81:   })",
          "83:   describe('GlobalRequest', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     it('Should throw error if host header contains path', async () => {",
          "84:       expect(() => {",
          "85:         newRequest({",
          "86:           headers: {",
          "87:             host: 'localhost/..',",
          "88:           },",
          "89:           url: '/foo.txt',",
          "90:         } as IncomingMessage)",
          "91:       }).toThrow(RequestError)",
          "92:     })",
          "94:     it('Should throw error if host header is empty', async () => {",
          "95:       expect(() => {",
          "96:         newRequest({",
          "97:           headers: {",
          "98:             host: '',",
          "99:           },",
          "100:           url: '/foo.txt',",
          "101:         } as IncomingMessage)",
          "102:       }).toThrow(RequestError)",
          "103:     })",
          "105:     it('Should throw error if host header contains query parameter', async () => {",
          "106:       expect(() => {",
          "107:         newRequest({",
          "108:           headers: {",
          "109:             host: 'localhost?foo=bar',",
          "110:           },",
          "111:           url: '/foo.txt',",
          "112:         } as IncomingMessage)",
          "113:       }).toThrow(RequestError)",
          "114:     })",
          "",
          "---------------"
        ]
      }
    }
  ]
}