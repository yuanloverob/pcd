{
  "cve_id": "CVE-2021-44528",
  "cve_desc": "A open redirect vulnerability exists in Action Pack >= 6.0.0 that could allow an attacker to craft a \"X-Forwarded-Host\" headers in combination with certain \"allowed host\" formats can cause the Host Authorization middleware in Action Pack to redirect users to a malicious website.",
  "repo": "rails/rails",
  "patch_hash": "aecba3c301b80e9d5a63c30ea1b287bceaf2c107",
  "patch_info": {
    "commit_hash": "aecba3c301b80e9d5a63c30ea1b287bceaf2c107",
    "repo": "rails/rails",
    "commit_url": "https://github.com/rails/rails/commit/aecba3c301b80e9d5a63c30ea1b287bceaf2c107",
    "files": [
      "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "actionpack/test/dispatch/host_authorization_test.rb"
    ],
    "message": "Fix invalid forwarded host vulnerability\n\nPrior to this commit, it was possible to pass an unvalidated host\nthrough the `X-Forwarded-Host` header. If the value of the header\nwas prefixed with a invalid domain character (for example a `/`),\nit was always accepted as the actual host of that request.\n\nSince this host is used for all url helpers, an attacker could change\ngenerated links and redirects. If the header is set to\n`X-Forwarded-Host: //evil.hacker`, a redirect will be send to\n`https:////evil.hacker/`. Browsers will ignore these four slashes\nand redirect the user.\n\n[CVE-2021-44528]",
    "before_after_code_files": [
      "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
    ]
  },
  "patch_diff": {
    "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
      "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         def sanitize_string(host)",
      "53:           if host.start_with?(\".\")",
      "55:           else",
      "56:             /\\A#{Regexp.escape host}\\z/i",
      "57:           end",
      "",
      "[Removed Lines]",
      "54:             /\\A(.+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
      "",
      "[Added Lines]",
      "54:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     end",
      "104:     private",
      "109:       def authorized?(request)",
      "113:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
      "114:       end",
      "",
      "[Removed Lines]",
      "105:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
      "106:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
      "107:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
      "110:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
      "111:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
      "",
      "[Added Lines]",
      "106:         origin_host = request.get_header(\"HTTP_HOST\")",
      "107:         forwarded_host = request.x_forwarded_host&.split(/,\\s?/)&.last",
      "",
      "---------------"
    ],
    "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
      "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "155:     assert_match \"Blocked host: 127.0.0.1\", response.body",
      "156:   end",
      "158:   test \"does not consider IP addresses in X-FORWARDED-HOST spoofed when disabled\" do",
      "159:     @app = ActionDispatch::HostAuthorization.new(App, nil)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "158:   test \"blocks requests with spoofed relative X-FORWARDED-HOST\" do",
      "159:     @app = ActionDispatch::HostAuthorization.new(App, [\"www.example.com\"])",
      "161:     get \"/\", env: {",
      "162:       \"HTTP_X_FORWARDED_HOST\" => \"//randomhost.com\",",
      "163:       \"HOST\" => \"www.example.com\",",
      "164:       \"action_dispatch.show_detailed_exceptions\" => true",
      "165:     }",
      "167:     assert_response :forbidden",
      "168:     assert_match \"Blocked host: //randomhost.com\", response.body",
      "169:   end",
      "171:   test \"forwarded secondary hosts are allowed when permitted\" do",
      "172:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
      "174:     get \"/\", env: {",
      "175:       \"HTTP_X_FORWARDED_HOST\" => \"example.com, my-sub.domain.com\",",
      "176:       \"HOST\" => \"domain.com\",",
      "177:     }",
      "179:     assert_response :ok",
      "180:     assert_equal \"Success\", body",
      "181:   end",
      "183:   test \"forwarded secondary hosts are blocked when mismatch\" do",
      "184:     @app = ActionDispatch::HostAuthorization.new(App, \"domain.com\")",
      "186:     get \"/\", env: {",
      "187:       \"HTTP_X_FORWARDED_HOST\" => \"domain.com, evil.com\",",
      "188:       \"HOST\" => \"domain.com\",",
      "189:       \"action_dispatch.show_detailed_exceptions\" => true",
      "190:     }",
      "192:     assert_response :forbidden",
      "193:     assert_match \"Blocked host: evil.com\", response.body",
      "194:   end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "191:     assert_match \"Blocked host: sub.domain.com\", response.body",
      "192:   end",
      "194:   test \"forwarded hosts are allowed when permitted\" do",
      "195:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
      "197:     get \"/\", env: {",
      "199:       \"HOST\" => \"domain.com\",",
      "200:     }",
      "",
      "[Removed Lines]",
      "198:       \"HTTP_X_FORWARDED_HOST\" => \"sub.domain.com\",",
      "",
      "[Added Lines]",
      "232:   test \"sub-sub domains should not be permitted\" do",
      "233:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
      "235:     get \"/\", env: {",
      "236:       \"HOST\" => \"secondary.sub.domain.com\",",
      "237:       \"action_dispatch.show_detailed_exceptions\" => true",
      "238:     }",
      "240:     assert_response :forbidden",
      "241:     assert_match \"Blocked host: secondary.sub.domain.com\", response.body",
      "242:   end",
      "248:       \"HTTP_X_FORWARDED_HOST\" => \"my-sub.domain.com\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "203:     assert_equal \"Success\", body",
      "204:   end",
      "206:   test \"exclude matches allow any host\" do",
      "207:     @app = ActionDispatch::HostAuthorization.new(App, \"only.com\", exclude: ->(req) { req.path == \"/foo\" })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:   test \"lots of NG hosts\" do",
      "257:     ng_hosts = [",
      "258:       \"hacker%E3%80%82com\",",
      "259:       \"hacker%00.com\",",
      "260:       \"www.theirsite.com@yoursite.com\",",
      "261:       \"hacker.com/test/\",",
      "262:       \"hacker%252ecom\",",
      "263:       \".hacker.com\",",
      "264:       \"/\\/\\/hacker.com/\",",
      "265:       \"/hacker.com\",",
      "266:       \"../hacker.com\",",
      "267:       \".hacker.com\",",
      "268:       \"@hacker.com\",",
      "269:       \"hacker.com\",",
      "270:       \"hacker.com%23@example.com\",",
      "271:       \"hacker.com/.jpg\",",
      "272:       \"hacker.com\\texample.com/\",",
      "273:       \"hacker.com/example.com\",",
      "274:       \"hacker.com\\@example.com\",",
      "275:       \"hacker.com/example.com\",",
      "276:       \"hacker.com/\"",
      "277:     ]",
      "279:     @app = ActionDispatch::HostAuthorization.new(App, \"example.com\")",
      "281:     ng_hosts.each do |host|",
      "282:       get \"/\", env: {",
      "283:         \"HTTP_X_FORWARDED_HOST\" => host,",
      "284:         \"HOST\" => \"example.com\",",
      "285:         \"action_dispatch.show_detailed_exceptions\" => true",
      "286:       }",
      "288:       assert_response :forbidden",
      "289:       assert_match \"Blocked host: #{host}\", response.body",
      "290:     end",
      "291:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "970d3b2e7387c34663988b0db222d045c34c59c1",
      "candidate_info": {
        "commit_hash": "970d3b2e7387c34663988b0db222d045c34c59c1",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/970d3b2e7387c34663988b0db222d045c34c59c1",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Fix invalid forwarded host vulnerability\n\nPrior to this commit, it was possible to pass an unvalidated host\nthrough the `X-Forwarded-Host` header. If the value of the header\nwas prefixed with a invalid domain character (for example a `/`),\nit was always accepted as the actual host of that request.\n\nSince this host is used for all url helpers, an attacker could change\ngenerated links and redirects. If the header is set to\n`X-Forwarded-Host: //evil.hacker`, a redirect will be send to\n`https:////evil.hacker/`. Browsers will ignore these four slashes\nand redirect the user.\n\n[CVE-2021-44528]",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         def sanitize_string(host)",
          "54:           if host.start_with?(\".\")",
          "56:           else",
          "57:             /\\A#{Regexp.escape host}\\z/i",
          "58:           end",
          "",
          "[Removed Lines]",
          "55:             /\\A(.+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "[Added Lines]",
          "55:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     end",
          "122:     private",
          "127:       def authorized?(request)",
          "131:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "132:       end",
          "",
          "[Removed Lines]",
          "123:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
          "124:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
          "125:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
          "128:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
          "129:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
          "",
          "[Added Lines]",
          "124:         origin_host = request.get_header(\"HTTP_HOST\")",
          "125:         forwarded_host = request.x_forwarded_host&.split(/,\\s?/)&.last",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     assert_match \"Blocked host: 127.0.0.1\", response.body",
          "168:   end",
          "170:   test \"does not consider IP addresses in X-FORWARDED-HOST spoofed when disabled\" do",
          "171:     @app = ActionDispatch::HostAuthorization.new(App, nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   test \"blocks requests with spoofed relative X-FORWARDED-HOST\" do",
          "171:     @app = ActionDispatch::HostAuthorization.new(App, [\"www.example.com\"])",
          "173:     get \"/\", env: {",
          "174:       \"HTTP_X_FORWARDED_HOST\" => \"//randomhost.com\",",
          "175:       \"HOST\" => \"www.example.com\",",
          "176:       \"action_dispatch.show_detailed_exceptions\" => true",
          "177:     }",
          "179:     assert_response :forbidden",
          "180:     assert_match \"Blocked host: //randomhost.com\", response.body",
          "181:   end",
          "183:   test \"forwarded secondary hosts are allowed when permitted\" do",
          "184:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "186:     get \"/\", env: {",
          "187:       \"HTTP_X_FORWARDED_HOST\" => \"example.com, my-sub.domain.com\",",
          "188:       \"HOST\" => \"domain.com\",",
          "189:     }",
          "191:     assert_response :ok",
          "192:     assert_equal \"Success\", body",
          "193:   end",
          "195:   test \"forwarded secondary hosts are blocked when mismatch\" do",
          "196:     @app = ActionDispatch::HostAuthorization.new(App, \"domain.com\")",
          "198:     get \"/\", env: {",
          "199:       \"HTTP_X_FORWARDED_HOST\" => \"domain.com, evil.com\",",
          "200:       \"HOST\" => \"domain.com\",",
          "201:       \"action_dispatch.show_detailed_exceptions\" => true",
          "202:     }",
          "204:     assert_response :forbidden",
          "205:     assert_match \"Blocked host: evil.com\", response.body",
          "206:   end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:     assert_match \"Blocked host: sub.domain.com\", response.body",
          "206:   end",
          "208:   test \"forwarded hosts are allowed when permitted\" do",
          "209:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "211:     get \"/\", env: {",
          "213:       \"HOST\" => \"domain.com\",",
          "214:     }",
          "",
          "[Removed Lines]",
          "212:       \"HTTP_X_FORWARDED_HOST\" => \"sub.domain.com\",",
          "",
          "[Added Lines]",
          "246:   test \"sub-sub domains should not be permitted\" do",
          "247:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "249:     get \"/\", env: {",
          "250:       \"HOST\" => \"secondary.sub.domain.com\",",
          "251:       \"action_dispatch.show_detailed_exceptions\" => true",
          "252:     }",
          "254:     assert_response :forbidden",
          "255:     assert_match \"Blocked host: secondary.sub.domain.com\", response.body",
          "256:   end",
          "262:       \"HTTP_X_FORWARDED_HOST\" => \"my-sub.domain.com\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:     assert_equal \"Success\", body",
          "218:   end",
          "220:   test \"exclude matches allow any host\" do",
          "221:     @app = ActionDispatch::HostAuthorization.new(App, \"only.com\", exclude: ->(req) { req.path == \"/foo\" })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:   test \"lots of NG hosts\" do",
          "271:     ng_hosts = [",
          "272:       \"hacker%E3%80%82com\",",
          "273:       \"hacker%00.com\",",
          "274:       \"www.theirsite.com@yoursite.com\",",
          "275:       \"hacker.com/test/\",",
          "276:       \"hacker%252ecom\",",
          "277:       \".hacker.com\",",
          "278:       \"/\\/\\/hacker.com/\",",
          "279:       \"/hacker.com\",",
          "280:       \"../hacker.com\",",
          "281:       \".hacker.com\",",
          "282:       \"@hacker.com\",",
          "283:       \"hacker.com\",",
          "284:       \"hacker.com%23@example.com\",",
          "285:       \"hacker.com/.jpg\",",
          "286:       \"hacker.com\\texample.com/\",",
          "287:       \"hacker.com/example.com\",",
          "288:       \"hacker.com\\@example.com\",",
          "289:       \"hacker.com/example.com\",",
          "290:       \"hacker.com/\"",
          "291:     ]",
          "293:     @app = ActionDispatch::HostAuthorization.new(App, \"example.com\")",
          "295:     ng_hosts.each do |host|",
          "296:       get \"/\", env: {",
          "297:         \"HTTP_X_FORWARDED_HOST\" => host,",
          "298:         \"HOST\" => \"example.com\",",
          "299:         \"action_dispatch.show_detailed_exceptions\" => true",
          "300:       }",
          "302:       assert_response :forbidden",
          "303:       assert_match \"Blocked host: #{host}\", response.body",
          "304:     end",
          "305:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd6a64fef1d0f7f40a8d4b046da882e83163299c",
      "candidate_info": {
        "commit_hash": "fd6a64fef1d0f7f40a8d4b046da882e83163299c",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/fd6a64fef1d0f7f40a8d4b046da882e83163299c",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Fix invalid forwarded host vulnerability\n\nPrior to this commit, it was possible to pass an unvalidated host\nthrough the `X-Forwarded-Host` header. If the value of the header\nwas prefixed with a invalid domain character (for example a `/`),\nit was always accepted as the actual host of that request.\n\nSince this host is used for all url helpers, an attacker could change\ngenerated links and redirects. If the header is set to\n`X-Forwarded-Host: //evil.hacker`, a redirect will be send to\n`https:////evil.hacker/`. Browsers will ignore these four slashes\nand redirect the user.\n\n[CVE-2021-44528]",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         def sanitize_string(host)",
          "48:           if host.start_with?(\".\")",
          "50:           else",
          "51:             /\\A#{Regexp.escape host}\\z/i",
          "52:           end",
          "",
          "[Removed Lines]",
          "49:             /\\A(.+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "[Added Lines]",
          "49:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     end",
          "88:     private",
          "93:       def authorized?(request)",
          "97:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "98:       end",
          "",
          "[Removed Lines]",
          "89:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
          "90:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
          "91:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
          "94:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
          "95:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
          "",
          "[Added Lines]",
          "90:         origin_host = request.get_header(\"HTTP_HOST\")",
          "91:         forwarded_host = request.x_forwarded_host&.split(/,\\s?/)&.last",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     assert_match \"Blocked host: 127.0.0.1\", response.body",
          "156:   end",
          "158:   test \"does not consider IP addresses in X-FORWARDED-HOST spoofed when disabled\" do",
          "159:     @app = ActionDispatch::HostAuthorization.new(App, nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   test \"blocks requests with spoofed relative X-FORWARDED-HOST\" do",
          "159:     @app = ActionDispatch::HostAuthorization.new(App, [\"www.example.com\"])",
          "161:     get \"/\", env: {",
          "162:       \"HTTP_X_FORWARDED_HOST\" => \"//randomhost.com\",",
          "163:       \"HOST\" => \"www.example.com\",",
          "164:       \"action_dispatch.show_detailed_exceptions\" => true",
          "165:     }",
          "167:     assert_response :forbidden",
          "168:     assert_match \"Blocked host: //randomhost.com\", response.body",
          "169:   end",
          "171:   test \"forwarded secondary hosts are allowed when permitted\" do",
          "172:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "174:     get \"/\", env: {",
          "175:       \"HTTP_X_FORWARDED_HOST\" => \"example.com, my-sub.domain.com\",",
          "176:       \"HOST\" => \"domain.com\",",
          "177:     }",
          "179:     assert_response :ok",
          "180:     assert_equal \"Success\", body",
          "181:   end",
          "183:   test \"forwarded secondary hosts are blocked when mismatch\" do",
          "184:     @app = ActionDispatch::HostAuthorization.new(App, \"domain.com\")",
          "186:     get \"/\", env: {",
          "187:       \"HTTP_X_FORWARDED_HOST\" => \"domain.com, evil.com\",",
          "188:       \"HOST\" => \"domain.com\",",
          "189:       \"action_dispatch.show_detailed_exceptions\" => true",
          "190:     }",
          "192:     assert_response :forbidden",
          "193:     assert_match \"Blocked host: evil.com\", response.body",
          "194:   end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:     assert_match \"Blocked host: sub.domain.com\", response.body",
          "192:   end",
          "194:   test \"forwarded hosts are allowed when permitted\" do",
          "195:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "197:     get \"/\", env: {",
          "199:       \"HOST\" => \"domain.com\",",
          "200:     }",
          "",
          "[Removed Lines]",
          "198:       \"HTTP_X_FORWARDED_HOST\" => \"sub.domain.com\",",
          "",
          "[Added Lines]",
          "232:   test \"sub-sub domains should not be permitted\" do",
          "233:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "235:     get \"/\", env: {",
          "236:       \"HOST\" => \"secondary.sub.domain.com\",",
          "237:       \"action_dispatch.show_detailed_exceptions\" => true",
          "238:     }",
          "240:     assert_response :forbidden",
          "241:     assert_match \"Blocked host: secondary.sub.domain.com\", response.body",
          "242:   end",
          "248:       \"HTTP_X_FORWARDED_HOST\" => \"my-sub.domain.com\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:     assert_response :forbidden",
          "225:     assert_match \"Blocked host: sub-example.com\", response.body",
          "226:   end",
          "227: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   test \"lots of NG hosts\" do",
          "279:     ng_hosts = [",
          "280:       \"hacker%E3%80%82com\",",
          "281:       \"hacker%00.com\",",
          "282:       \"www.theirsite.com@yoursite.com\",",
          "283:       \"hacker.com/test/\",",
          "284:       \"hacker%252ecom\",",
          "285:       \".hacker.com\",",
          "286:       \"/\\/\\/hacker.com/\",",
          "287:       \"/hacker.com\",",
          "288:       \"../hacker.com\",",
          "289:       \".hacker.com\",",
          "290:       \"@hacker.com\",",
          "291:       \"hacker.com\",",
          "292:       \"hacker.com%23@example.com\",",
          "293:       \"hacker.com/.jpg\",",
          "294:       \"hacker.com\\texample.com/\",",
          "295:       \"hacker.com/example.com\",",
          "296:       \"hacker.com\\@example.com\",",
          "297:       \"hacker.com/example.com\",",
          "298:       \"hacker.com/\"",
          "299:     ]",
          "301:     @app = ActionDispatch::HostAuthorization.new(App, \"example.com\")",
          "303:     ng_hosts.each do |host|",
          "304:       get \"/\", env: {",
          "305:         \"HTTP_X_FORWARDED_HOST\" => host,",
          "306:         \"HOST\" => \"example.com\",",
          "307:         \"action_dispatch.show_detailed_exceptions\" => true",
          "308:       }",
          "310:       assert_response :forbidden",
          "311:       assert_match \"Blocked host: #{host}\", response.body",
          "312:     end",
          "313:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0fccfb9a3097a9c4260c791f1a40b128517e7815",
      "candidate_info": {
        "commit_hash": "0fccfb9a3097a9c4260c791f1a40b128517e7815",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/0fccfb9a3097a9c4260c791f1a40b128517e7815",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Fix invalid forwarded host vulnerability\n\nPrior to this commit, it was possible to pass an unvalidated host\nthrough the `X-Forwarded-Host` header. If the value of the header\nwas prefixed with a invalid domain character (for example a `/`),\nit was always accepted as the actual host of that request.\n\nSince this host is used for all url helpers, an attacker could change\ngenerated links and redirects. If the header is set to\n`X-Forwarded-Host: //evil.hacker`, a redirect will be send to\n`https:////evil.hacker/`. Browsers will ignore these four slashes\nand redirect the user.\n\n[CVE-2021-44528]",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         def sanitize_string(host)",
          "54:           if host.start_with?(\".\")",
          "56:           else",
          "57:             /\\A#{Regexp.escape host}\\z/i",
          "58:           end",
          "",
          "[Removed Lines]",
          "55:             /\\A(.+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "[Added Lines]",
          "55:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     end",
          "122:     private",
          "127:       def authorized?(request)",
          "131:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "132:       end",
          "",
          "[Removed Lines]",
          "123:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
          "124:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
          "125:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
          "128:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
          "129:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
          "",
          "[Added Lines]",
          "124:         origin_host = request.get_header(\"HTTP_HOST\")",
          "125:         forwarded_host = request.x_forwarded_host&.split(/,\\s?/)&.last",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     assert_match \"Blocked host: 127.0.0.1\", response.body",
          "168:   end",
          "170:   test \"does not consider IP addresses in X-FORWARDED-HOST spoofed when disabled\" do",
          "171:     @app = ActionDispatch::HostAuthorization.new(App, nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   test \"blocks requests with spoofed relative X-FORWARDED-HOST\" do",
          "171:     @app = ActionDispatch::HostAuthorization.new(App, [\"www.example.com\"])",
          "173:     get \"/\", env: {",
          "174:       \"HTTP_X_FORWARDED_HOST\" => \"//randomhost.com\",",
          "175:       \"HOST\" => \"www.example.com\",",
          "176:       \"action_dispatch.show_detailed_exceptions\" => true",
          "177:     }",
          "179:     assert_response :forbidden",
          "180:     assert_match \"Blocked host: //randomhost.com\", response.body",
          "181:   end",
          "183:   test \"forwarded secondary hosts are allowed when permitted\" do",
          "184:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "186:     get \"/\", env: {",
          "187:       \"HTTP_X_FORWARDED_HOST\" => \"example.com, my-sub.domain.com\",",
          "188:       \"HOST\" => \"domain.com\",",
          "189:     }",
          "191:     assert_response :ok",
          "192:     assert_equal \"Success\", body",
          "193:   end",
          "195:   test \"forwarded secondary hosts are blocked when mismatch\" do",
          "196:     @app = ActionDispatch::HostAuthorization.new(App, \"domain.com\")",
          "198:     get \"/\", env: {",
          "199:       \"HTTP_X_FORWARDED_HOST\" => \"domain.com, evil.com\",",
          "200:       \"HOST\" => \"domain.com\",",
          "201:       \"action_dispatch.show_detailed_exceptions\" => true",
          "202:     }",
          "204:     assert_response :forbidden",
          "205:     assert_match \"Blocked host: evil.com\", response.body",
          "206:   end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:     assert_match \"Blocked host: sub.domain.com\", response.body",
          "206:   end",
          "208:   test \"forwarded hosts are allowed when permitted\" do",
          "209:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "211:     get \"/\", env: {",
          "213:       \"HOST\" => \"domain.com\",",
          "214:     }",
          "",
          "[Removed Lines]",
          "212:       \"HTTP_X_FORWARDED_HOST\" => \"sub.domain.com\",",
          "",
          "[Added Lines]",
          "246:   test \"sub-sub domains should not be permitted\" do",
          "247:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "249:     get \"/\", env: {",
          "250:       \"HOST\" => \"secondary.sub.domain.com\",",
          "251:       \"action_dispatch.show_detailed_exceptions\" => true",
          "252:     }",
          "254:     assert_response :forbidden",
          "255:     assert_match \"Blocked host: secondary.sub.domain.com\", response.body",
          "256:   end",
          "262:       \"HTTP_X_FORWARDED_HOST\" => \"my-sub.domain.com\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:     assert_equal \"Success\", body",
          "218:   end",
          "220:   test \"exclude matches allow any host\" do",
          "221:     @app = ActionDispatch::HostAuthorization.new(App, \"only.com\", exclude: ->(req) { req.path == \"/foo\" })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:   test \"lots of NG hosts\" do",
          "271:     ng_hosts = [",
          "272:       \"hacker%E3%80%82com\",",
          "273:       \"hacker%00.com\",",
          "274:       \"www.theirsite.com@yoursite.com\",",
          "275:       \"hacker.com/test/\",",
          "276:       \"hacker%252ecom\",",
          "277:       \".hacker.com\",",
          "278:       \"/\\/\\/hacker.com/\",",
          "279:       \"/hacker.com\",",
          "280:       \"../hacker.com\",",
          "281:       \".hacker.com\",",
          "282:       \"@hacker.com\",",
          "283:       \"hacker.com\",",
          "284:       \"hacker.com%23@example.com\",",
          "285:       \"hacker.com/.jpg\",",
          "286:       \"hacker.com\\texample.com/\",",
          "287:       \"hacker.com/example.com\",",
          "288:       \"hacker.com\\@example.com\",",
          "289:       \"hacker.com/example.com\",",
          "290:       \"hacker.com/\"",
          "291:     ]",
          "293:     @app = ActionDispatch::HostAuthorization.new(App, \"example.com\")",
          "295:     ng_hosts.each do |host|",
          "296:       get \"/\", env: {",
          "297:         \"HTTP_X_FORWARDED_HOST\" => host,",
          "298:         \"HOST\" => \"example.com\",",
          "299:         \"action_dispatch.show_detailed_exceptions\" => true",
          "300:       }",
          "302:       assert_response :forbidden",
          "303:       assert_match \"Blocked host: #{host}\", response.body",
          "304:     end",
          "305:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}