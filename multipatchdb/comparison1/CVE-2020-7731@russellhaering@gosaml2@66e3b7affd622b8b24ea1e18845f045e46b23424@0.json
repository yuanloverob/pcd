{
  "cve_id": "CVE-2020-7731",
  "cve_desc": "This affects all versions <0.7.0 of package github.com/russellhaering/gosaml2. There is a crash on nil-pointer dereference caused by sending malformed XML signatures.",
  "repo": "russellhaering/gosaml2",
  "patch_hash": "66e3b7affd622b8b24ea1e18845f045e46b23424",
  "patch_info": {
    "commit_hash": "66e3b7affd622b8b24ea1e18845f045e46b23424",
    "repo": "russellhaering/gosaml2",
    "commit_url": "https://github.com/russellhaering/gosaml2/commit/66e3b7affd622b8b24ea1e18845f045e46b23424",
    "files": [
      "decode_response.go",
      "decode_response_test.go"
    ],
    "message": "Merge pull request #90 from michaelschiff/issue/59\n\nFix: Crash on nil-pointer dereference with malformed input",
    "before_after_code_files": [
      "decode_response.go||decode_response.go",
      "decode_response_test.go||decode_response_test.go"
    ]
  },
  "patch_diff": {
    "decode_response.go||decode_response.go": [
      "File: decode_response.go -> decode_response.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:  signedAssertions := 0",
      "205:  unsignedAssertions := 0",
      "206:  validateAssertion := func(ctx etreeutils.NSContext, unverifiedAssertion *etree.Element) error {",
      "208:    return fmt.Errorf(\"found assertion with unexpected parent element: %s\", unverifiedAssertion.Parent().Tag)",
      "209:   }",
      "",
      "[Removed Lines]",
      "207:   if unverifiedAssertion.Parent() != el {",
      "",
      "[Added Lines]",
      "207:   parent := unverifiedAssertion.Parent()",
      "208:   if parent == nil {",
      "209:    return fmt.Errorf(\"parent is nil\")",
      "210:   }",
      "211:   if parent != el {",
      "",
      "---------------"
    ],
    "decode_response_test.go||decode_response_test.go": [
      "File: decode_response_test.go -> decode_response_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:  \"bytes\"",
      "19:  \"crypto/tls\"",
      "20:  \"crypto/x509\"",
      "21:  \"encoding/pem\"",
      "22:  \"io/ioutil\"",
      "23:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:  \"encoding/base64\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:  rtvalidator \"github.com/mattermost/xml-roundtrip-validator\"",
      "30: )",
      "33: -----BEGIN CERTIFICATE-----",
      "34: MIIDODCCAiCgAwIBAgIUQH54kyyeacU69J2iwz9bzeLmMaswDQYJKoZIhvcNAQEL",
      "35: BQAwHTEbMBkGA1UEAwwSY29sbGVnZS5jY2N0Y2EuZWR1MB4XDTE1MDYwNDIyMTAz",
      "",
      "[Removed Lines]",
      "32: const idpCert = `",
      "",
      "[Added Lines]",
      "33: const (",
      "34:  idpCert = `",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "52: -----END CERTIFICATE-----",
      "53: `",
      "56: -----BEGIN CERTIFICATE-----",
      "57: MIIDPDCCAiQCCQDydJgOlszqbzANBgkqhkiG9w0BAQUFADBgMQswCQYDVQQGEwJVUzETMB",
      "58: EGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEQMA4GA1UEChMH",
      "",
      "[Removed Lines]",
      "55: const oktaCert = `",
      "",
      "[Added Lines]",
      "57:  oktaCert = `",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "73: -----END CERTIFICATE-----",
      "74: `",
      "76: func testEncryptedAssertion(t *testing.T, validateEncryptionCert bool) {",
      "77:  var err error",
      "78:  cert, err := tls.LoadX509KeyPair(\"./testdata/test.crt\", \"./testdata/test.key\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  oktaCert2 = `",
      "79: -----BEGIN CERTIFICATE-----",
      "80: MIIDpDCCAoygAwIBAgIGAWxzAwX1MA0GCSqGSIb3DQEBCwUAMIGSMQswCQYDVQQGEwJVUzETMBEG",
      "81: A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU",
      "82: MBIGA1UECwwLU1NPUHJvdmlkZXIxEzARBgNVBAMMCmRldi05MDUyNTExHDAaBgkqhkiG9w0BCQEW",
      "83: DWluZm9Ab2t0YS5jb20wHhcNMTkwODA4MjA1MzMzWhcNMjkwODA4MjA1NDMzWjCBkjELMAkGA1UE",
      "84: BhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNV",
      "85: BAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRMwEQYDVQQDDApkZXYtOTA1MjUxMRwwGgYJ",
      "86: KoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA",
      "87: m+ZZF6aEG6ehLLIV6RPA+i1z6ss3HBG2bZD3efwKCDDXYUkp59AE7JsjVHMtpJPHhzHuScuHDMlu",
      "88: HmkBQTW7j9XpnaRn8SfZXkwlCUHTo+HAC9lwbQxO4d4wnwgnm6FAjm1I/gbfFAobd8BR9pDxHuXE",
      "89: MQ0DtQu/W3WbDUrz/bhSxPJAoVy2koQn9G0y3unm7eRwYWHeuW6GdPWV2szTtDS0c3qtUXVF5Ugg",
      "90: iQYlwQu6xkfy4l8iGJL7ETa2BmJzwCFecMIct87SqNhYQwCBH54MBaHcaSsCKyimNvMY9B7RmC+H",
      "91: 4+awePPA1q3R/UQ3Pfom8mx6yDdKIWqlkG3MsQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAiURCZ",
      "92: P4oJWcf1o5nm4yG15UH01g/S6Y4OUWMi6BFJy9fCrJ0h/2BZKi68SQ0uMAbdK6anxCzq3Rr5MSzW",
      "93: OWPQ1Zljn3LGPsiTFdFca/GVRen5IYQ7Dr2Mvhtm+QVscEY9TDjtETbTAHEVEjwXmB21wtdIhizv",
      "94: sQS7wz0A8LV+Atpbev45RiV6COmB6T6vJuFQ7ZsDZMSHZriTYiETTJvHBGd7PtbCxYNc6LRB2JDb",
      "95: wlekRhVEjR0UhnM+nn2sqqbv7tDEPs63lZSDXCnR1PhscHrEuQ04rHI3OL0gCULVQFvJrj85IAZF",
      "96: 1QQuGUK8ozfOyFpQWAJUW71INnF/SLWv",
      "97: -----END CERTIFICATE-----",
      "98: `",
      "100:  badInput = `<saml2:Assertion ID=\"id1684056077776386493060641\"IssueInstant=\"2019-08-12T12:00:52.718Z\"Version=\"2.0\"xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"><saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"xmlns=\"\">http://www.okta.com/exk133onomIuOW98z357</l><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/><ds:Reference URI=\"#id1684056077776386493060641\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"><ec:InclusiveNamespaces PrefixList=\"xs\"xmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/></m></s><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/><ds:DigestValue>dC1cm0pLLjIWZC6G2Pmf0JogmqHztp9W1euXPd/TUHo=</e></e></o><ds:SignatureValue>YRSCFLIkIgjbbYLyfCIc8jsP2MUJPjn+nYWRdlVIDdXtYXXxklYqdBXQsxDwNcsOAIGS75PeVGryml3oBkUDg/MfK7z/fFPLXX7c7xgh7/DBAFlSXbwlJQxuXQ5eZcGesgG6nYRwU1hpW+yN7C2ODN9KHi5TUdiEhvy8vdlFSfxdy4Mn68nG/UZBqmHHIZdRG2/Hpcs29YyaVVZUCZ0w22b7zsPuOXHuStOSTQ6isxI2R268+ZNKERYaNMCAGX4zNlT3mHBV0NnZkbO3wmlOfKksL+Qx7L64xFc3PaervxWuPqh2FoWpTCqFdliLdvUfFDszKXJKhO0bj1U0aSrdzg==</e><s><s><s></X></X></o></e><saml2:Subject xmlns=\"\"><saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">steven.james.johnstone@gmail.com</l><saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"><saml2:SubjectConfirmationData InResponseTo=\"_40a419f5-5c1c-43d0-5834-5caf268a5f01\"NotOnOrAfter=\"2019-08-12T12:05:52.718Z\"Recipient=\"https://127.0.0.1/login\"/></l></l><saml2:Conditions NotBefore=\"2019-08-12T11:55:52.718Z\"NotOnOrAfter=\"2019-08-12T12:05:52.718Z\"xmlns=\"\"><saml2:AudienceRestriction><saml2:Audience>37a8eec1ce19687d132fe29051dca629d164e2c4958ba141d5f4133a33f0688f.jazznetworks.com</l></l></l><saml2:AuthnStatement AuthnInstant=\"2019-08-12T12:00:52.718Z\"SessionIndex=\"_40a419f5-5c1c-43d0-5834-5caf268a5f01\"xmlns=\"\"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</l></l></l><saml2:AttributeStatement xmlns=\"\"><saml2:Attribute Name=\"FirstName\"NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\"><saml2:AttributeValue xmlns=\"\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:type=\"xs:string\">Steven</l></l><saml2:Attribute Name=\"LastName\"NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\"><saml2:AttributeValue xmlns=\"\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:type=\"xs:string\">Johnstone</l></l><saml2:Attribute Name=\"Email\"NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\"><saml2:AttributeValue xmlns=\"\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:type=\"xs:string\">steven.james.johnstone@gmail.com`",
      "101: )",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "156:  _, _, err := parseResponse([]byte(doubleColonAssertionInjectionAttackResponse))",
      "157:  require.Error(t, err)",
      "158: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "185: }",
      "187: func TestMalFormedInput(t *testing.T) {",
      "188:  block, _ := pem.Decode([]byte(oktaCert2))",
      "189:  idpCert, err := x509.ParseCertificate(block.Bytes)",
      "190:  require.NoError(t, err, \"couldn't parse okta cert pem block\")",
      "192:  certStore := dsig.MemoryX509CertificateStore{",
      "193:   Roots: []*x509.Certificate{idpCert},",
      "194:  }",
      "196:  sp := &SAMLServiceProvider{",
      "197:   Clock: dsig.NewFakeClock(clockwork.NewFakeClockAt(time.Date(2019, 8, 12, 12, 00, 52, 718, time.UTC))),",
      "198:   AssertionConsumerServiceURL: \"https://saml2.test.astuart.co/sso/saml2\",",
      "199:   SignAuthnRequests:           true,",
      "200:   IDPCertificateStore:         &certStore,",
      "201:   ValidateEncryptionCert:      true,",
      "202:  }",
      "203:  base64Input := base64.StdEncoding.EncodeToString([]byte(badInput))",
      "204:  _, err = sp.RetrieveAssertionInfo(base64Input)",
      "205:  require.Errorf(t, err, \"parent is nil\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb19d9bb845c6b9354b7c3b6022f997e1644ef4b",
      "candidate_info": {
        "commit_hash": "fb19d9bb845c6b9354b7c3b6022f997e1644ef4b",
        "repo": "russellhaering/gosaml2",
        "commit_url": "https://github.com/russellhaering/gosaml2/commit/fb19d9bb845c6b9354b7c3b6022f997e1644ef4b",
        "files": [
          "decode_response.go"
        ],
        "message": "fixes panic on malformed input",
        "before_after_code_files": [
          "decode_response.go||decode_response.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/russellhaering/gosaml2/pull/90"
        ],
        "olp_code_files": {
          "patch": [
            "decode_response.go||decode_response.go"
          ],
          "candidate": [
            "decode_response.go||decode_response.go"
          ]
        }
      },
      "candidate_diff": {
        "decode_response.go||decode_response.go": [
          "File: decode_response.go -> decode_response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  signedAssertions := 0",
          "204:  unsignedAssertions := 0",
          "205:  validateAssertion := func(ctx etreeutils.NSContext, unverifiedAssertion *etree.Element) error {",
          "207:    return fmt.Errorf(\"found assertion with unexpected parent element: %s\", unverifiedAssertion.Parent().Tag)",
          "208:   }",
          "",
          "[Removed Lines]",
          "206:   if unverifiedAssertion.Parent() != el {",
          "",
          "[Added Lines]",
          "206:   parent := unverifiedAssertion.Parent()",
          "207:   if parent == nil {",
          "208:    return fmt.Errorf(\"parent is nil\")",
          "209:   }",
          "210:   if parent != el {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4c721f06b3f4a6c3219af067ea17f2b2ddac5f8",
      "candidate_info": {
        "commit_hash": "b4c721f06b3f4a6c3219af067ea17f2b2ddac5f8",
        "repo": "russellhaering/gosaml2",
        "commit_url": "https://github.com/russellhaering/gosaml2/commit/b4c721f06b3f4a6c3219af067ea17f2b2ddac5f8",
        "files": [
          "decode_response_test.go"
        ],
        "message": "adds failing unit test caused by malformed assertion",
        "before_after_code_files": [
          "decode_response_test.go||decode_response_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/russellhaering/gosaml2/pull/90"
        ],
        "olp_code_files": {
          "patch": [
            "decode_response_test.go||decode_response_test.go"
          ],
          "candidate": [
            "decode_response_test.go||decode_response_test.go"
          ]
        }
      },
      "candidate_diff": {
        "decode_response_test.go||decode_response_test.go": [
          "File: decode_response_test.go -> decode_response_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  \"bytes\"",
          "18:  \"crypto/tls\"",
          "19:  \"crypto/x509\"",
          "20:  \"encoding/pem\"",
          "21:  \"io/ioutil\"",
          "22:  \"testing\"",
          "23:  \"time\"",
          "25:  \"github.com/jonboulle/clockwork\"",
          "26:  \"github.com/russellhaering/goxmldsig\"",
          "27:  \"github.com/stretchr/testify/require\"",
          "29: )",
          "32: -----BEGIN CERTIFICATE-----",
          "33: MIIDODCCAiCgAwIBAgIUQH54kyyeacU69J2iwz9bzeLmMaswDQYJKoZIhvcNAQEL",
          "34: BQAwHTEbMBkGA1UEAwwSY29sbGVnZS5jY2N0Y2EuZWR1MB4XDTE1MDYwNDIyMTAz",
          "",
          "[Removed Lines]",
          "28:  rtvalidator \"github.com/mattermost/xml-roundtrip-validator\"",
          "31: const idpCert = `",
          "",
          "[Added Lines]",
          "20:  \"encoding/base64\"",
          "27:  rtvalidator \"github.com/mattermost/xml-roundtrip-validator\"",
          "32: const (",
          "33:  idpCert = `",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: -----END CERTIFICATE-----",
          "52: `",
          "55: -----BEGIN CERTIFICATE-----",
          "56: MIIDPDCCAiQCCQDydJgOlszqbzANBgkqhkiG9w0BAQUFADBgMQswCQYDVQQGEwJVUzETMB",
          "57: EGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEQMA4GA1UEChMH",
          "",
          "[Removed Lines]",
          "54: const oktaCert = `",
          "",
          "[Added Lines]",
          "56:  oktaCert = `",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: -----END CERTIFICATE-----",
          "73: `",
          "75: func testEncryptedAssertion(t *testing.T, validateEncryptionCert bool) {",
          "76:  var err error",
          "77:  cert, err := tls.LoadX509KeyPair(\"./testdata/test.crt\", \"./testdata/test.key\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     oktaCert2 = `",
          "78: -----BEGIN CERTIFICATE-----",
          "79: MIIDpDCCAoygAwIBAgIGAWxzAwX1MA0GCSqGSIb3DQEBCwUAMIGSMQswCQYDVQQGEwJVUzETMBEG",
          "80: A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU",
          "81: MBIGA1UECwwLU1NPUHJvdmlkZXIxEzARBgNVBAMMCmRldi05MDUyNTExHDAaBgkqhkiG9w0BCQEW",
          "82: DWluZm9Ab2t0YS5jb20wHhcNMTkwODA4MjA1MzMzWhcNMjkwODA4MjA1NDMzWjCBkjELMAkGA1UE",
          "83: BhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNV",
          "84: BAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRMwEQYDVQQDDApkZXYtOTA1MjUxMRwwGgYJ",
          "85: KoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA",
          "86: m+ZZF6aEG6ehLLIV6RPA+i1z6ss3HBG2bZD3efwKCDDXYUkp59AE7JsjVHMtpJPHhzHuScuHDMlu",
          "87: HmkBQTW7j9XpnaRn8SfZXkwlCUHTo+HAC9lwbQxO4d4wnwgnm6FAjm1I/gbfFAobd8BR9pDxHuXE",
          "88: MQ0DtQu/W3WbDUrz/bhSxPJAoVy2koQn9G0y3unm7eRwYWHeuW6GdPWV2szTtDS0c3qtUXVF5Ugg",
          "89: iQYlwQu6xkfy4l8iGJL7ETa2BmJzwCFecMIct87SqNhYQwCBH54MBaHcaSsCKyimNvMY9B7RmC+H",
          "90: 4+awePPA1q3R/UQ3Pfom8mx6yDdKIWqlkG3MsQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAiURCZ",
          "91: P4oJWcf1o5nm4yG15UH01g/S6Y4OUWMi6BFJy9fCrJ0h/2BZKi68SQ0uMAbdK6anxCzq3Rr5MSzW",
          "92: OWPQ1Zljn3LGPsiTFdFca/GVRen5IYQ7Dr2Mvhtm+QVscEY9TDjtETbTAHEVEjwXmB21wtdIhizv",
          "93: sQS7wz0A8LV+Atpbev45RiV6COmB6T6vJuFQ7ZsDZMSHZriTYiETTJvHBGd7PtbCxYNc6LRB2JDb",
          "94: wlekRhVEjR0UhnM+nn2sqqbv7tDEPs63lZSDXCnR1PhscHrEuQ04rHI3OL0gCULVQFvJrj85IAZF",
          "95: 1QQuGUK8ozfOyFpQWAJUW71INnF/SLWv",
          "96: -----END CERTIFICATE-----",
          "97: `",
          "98:  badInput = `<saml2:Assertion ID=\"id1684056077776386493060641\"IssueInstant=\"2019-08-12T12:00:52.718Z\"Version=\"2.0\"xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"><saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"xmlns=\"\">http://www.okta.com/exk133onomIuOW98z357</l><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/><ds:Reference URI=\"#id1684056077776386493060641\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"><ec:InclusiveNamespaces PrefixList=\"xs\"xmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/></m></s><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/><ds:DigestValue>dC1cm0pLLjIWZC6G2Pmf0JogmqHztp9W1euXPd/TUHo=</e></e></o><ds:SignatureValue>YRSCFLIkIgjbbYLyfCIc8jsP2MUJPjn+nYWRdlVIDdXtYXXxklYqdBXQsxDwNcsOAIGS75PeVGryml3oBkUDg/MfK7z/fFPLXX7c7xgh7/DBAFlSXbwlJQxuXQ5eZcGesgG6nYRwU1hpW+yN7C2ODN9KHi5TUdiEhvy8vdlFSfxdy4Mn68nG/UZBqmHHIZdRG2/Hpcs29YyaVVZUCZ0w22b7zsPuOXHuStOSTQ6isxI2R268+ZNKERYaNMCAGX4zNlT3mHBV0NnZkbO3wmlOfKksL+Qx7L64xFc3PaervxWuPqh2FoWpTCqFdliLdvUfFDszKXJKhO0bj1U0aSrdzg==</e><s><s><s></X></X></o></e><saml2:Subject xmlns=\"\"><saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">steven.james.johnstone@gmail.com</l><saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"><saml2:SubjectConfirmationData InResponseTo=\"_40a419f5-5c1c-43d0-5834-5caf268a5f01\"NotOnOrAfter=\"2019-08-12T12:05:52.718Z\"Recipient=\"https://127.0.0.1/login\"/></l></l><saml2:Conditions NotBefore=\"2019-08-12T11:55:52.718Z\"NotOnOrAfter=\"2019-08-12T12:05:52.718Z\"xmlns=\"\"><saml2:AudienceRestriction><saml2:Audience>37a8eec1ce19687d132fe29051dca629d164e2c4958ba141d5f4133a33f0688f.jazznetworks.com</l></l></l><saml2:AuthnStatement AuthnInstant=\"2019-08-12T12:00:52.718Z\"SessionIndex=\"_40a419f5-5c1c-43d0-5834-5caf268a5f01\"xmlns=\"\"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</l></l></l><saml2:AttributeStatement xmlns=\"\"><saml2:Attribute Name=\"FirstName\"NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\"><saml2:AttributeValue xmlns=\"\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:type=\"xs:string\">Steven</l></l><saml2:Attribute Name=\"LastName\"NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\"><saml2:AttributeValue xmlns=\"\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:type=\"xs:string\">Johnstone</l></l><saml2:Attribute Name=\"Email\"NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\"><saml2:AttributeValue xmlns=\"\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:type=\"xs:string\">steven.james.johnstone@gmail.com`",
          "99: )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:  _, _, err := parseResponse([]byte(doubleColonAssertionInjectionAttackResponse))",
          "156:  require.Error(t, err)",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: }",
          "185: func TestMalFormedInput(t *testing.T) {",
          "186:  block, _ := pem.Decode([]byte(oktaCert2))",
          "187:  idpCert, err := x509.ParseCertificate(block.Bytes)",
          "188:  require.NoError(t, err, \"couldn't parse okta cert pem block\")",
          "190:  certStore := dsig.MemoryX509CertificateStore{",
          "191:   Roots: []*x509.Certificate{idpCert},",
          "192:  }",
          "194:  sp := &SAMLServiceProvider{",
          "195:   Clock: dsig.NewFakeClock(clockwork.NewFakeClockAt(time.Date(2019, 8, 12, 12, 00, 52, 718, time.UTC))),",
          "196:   AssertionConsumerServiceURL: \"https://saml2.test.astuart.co/sso/saml2\",",
          "197:   SignAuthnRequests:           true,",
          "198:   IDPCertificateStore:         &certStore,",
          "199:   ValidateEncryptionCert:      true,",
          "200:  }",
          "201:  base64Input := base64.StdEncoding.EncodeToString([]byte(badInput))",
          "202:  _, err = sp.RetrieveAssertionInfo(base64Input)",
          "203:  require.Errorf(t, err, \"parent is nil\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95dc90a15256e686c4fe1c11f0c5ae9b20bb0429",
      "candidate_info": {
        "commit_hash": "95dc90a15256e686c4fe1c11f0c5ae9b20bb0429",
        "repo": "russellhaering/gosaml2",
        "commit_url": "https://github.com/russellhaering/gosaml2/commit/95dc90a15256e686c4fe1c11f0c5ae9b20bb0429",
        "files": [
          "decode_response_test.go"
        ],
        "message": "formatting",
        "before_after_code_files": [
          "decode_response_test.go||decode_response_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/russellhaering/gosaml2/pull/90"
        ],
        "olp_code_files": {
          "patch": [
            "decode_response_test.go||decode_response_test.go"
          ],
          "candidate": [
            "decode_response_test.go||decode_response_test.go"
          ]
        }
      },
      "candidate_diff": {
        "decode_response_test.go||decode_response_test.go": [
          "File: decode_response_test.go -> decode_response_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  \"time\"",
          "26:  \"github.com/jonboulle/clockwork\"",
          "28:  \"github.com/russellhaering/goxmldsig\"",
          "29:  \"github.com/stretchr/testify/require\"",
          "30: )",
          "32: const (",
          "",
          "[Removed Lines]",
          "27:  rtvalidator \"github.com/mattermost/xml-roundtrip-validator\"",
          "",
          "[Added Lines]",
          "29:  rtvalidator \"github.com/mattermost/xml-roundtrip-validator\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: -----END CERTIFICATE-----",
          "75: `",
          "78: -----BEGIN CERTIFICATE-----",
          "79: MIIDpDCCAoygAwIBAgIGAWxzAwX1MA0GCSqGSIb3DQEBCwUAMIGSMQswCQYDVQQGEwJVUzETMBEG",
          "80: A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU",
          "",
          "[Removed Lines]",
          "77:     oktaCert2 = `",
          "",
          "[Added Lines]",
          "77:  oktaCert2 = `",
          "",
          "---------------"
        ]
      }
    }
  ]
}