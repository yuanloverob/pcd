{
  "cve_id": "CVE-2021-21413",
  "cve_desc": "isolated-vm is a library for nodejs which gives you access to v8's Isolate interface. Versions of isolated-vm before v4.0.0 have API pitfalls which may make it easy for implementers to expose supposed secure isolates to the permissions of the main nodejs isolate. Reference objects allow access to the underlying reference's full prototype chain. In an environment where the implementer has exposed a Reference instance to an attacker they would be able to use it to acquire a Reference to the nodejs context's Function object. Similar application-specific attacks could be possible by modifying the local prototype of other API objects. Access to NativeModule objects could allow an attacker to load and run native code from anywhere on the filesystem. If combined with, for example, a file upload API this would allow for arbitrary code execution. This is addressed in v4.0.0 through a series of related changes.",
  "repo": "laverdet/isolated-vm",
  "patch_hash": "2646e6c1558bac66285daeab54c7d490ed332b15",
  "patch_info": {
    "commit_hash": "2646e6c1558bac66285daeab54c7d490ed332b15",
    "repo": "laverdet/isolated-vm",
    "commit_url": "https://github.com/laverdet/isolated-vm/commit/2646e6c1558bac66285daeab54c7d490ed332b15",
    "files": [
      "CHANGELOG.md",
      "README.md",
      "isolated-vm.d.ts",
      "src/isolate/strings.h",
      "src/module/reference_handle.cc",
      "src/module/reference_handle.h",
      "tests/reference.js"
    ],
    "message": "Don't invoke accessors or proxies via Reference functions",
    "before_after_code_files": [
      "isolated-vm.d.ts||isolated-vm.d.ts",
      "src/isolate/strings.h||src/isolate/strings.h",
      "src/module/reference_handle.cc||src/module/reference_handle.cc",
      "src/module/reference_handle.h||src/module/reference_handle.h",
      "tests/reference.js||tests/reference.js"
    ]
  },
  "patch_diff": {
    "isolated-vm.d.ts||isolated-vm.d.ts": [
      "File: isolated-vm.d.ts -> isolated-vm.d.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:   | Context",
      "10:   | Script",
      "11:   | ExternalCopy<any>",
      "12:   | Copy<any>",
      "13:   | Reference<any>",
      "14:   | Dereference<any>",
      "15:   | Module",
      "16:   | typeof import(\"isolated-vm\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:   | Callback<any>",
      "17:   | ((...args: any[]) => any)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "285:  export class Reference<T = any> {",
      "286:   private __ivm_reference: T;",
      "",
      "[Removed Lines]",
      "287:   constructor(value: T, options?: { inheritUnsafe?: boolean });",
      "",
      "[Added Lines]",
      "289:   constructor(value: T, options?: { unsafeInherit?: boolean });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "335:    deleteIgnored(property: keyof T): void;",
      "341:   get<Options extends TransferOptions, Key extends keyof T>(",
      "343:   getSync<Options extends TransferOptions, Key extends keyof T>(",
      "353:   set<Options extends TransferOptions, Key extends keyof T>(",
      "355:   setIgnored<Options extends TransferOptions, Key extends keyof T>(",
      "356:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): void;",
      "357:   setSync<Options extends TransferOptions, Key extends keyof T>(",
      "",
      "[Removed Lines]",
      "334:    delete(property: keyof T): Promise<boolean>;",
      "336:    deleteSync(property: keyof T): boolean;",
      "342:    property: Key, options?: Options): ResultTypeAsync<Options & AsReference, T[Key]>;",
      "344:    property: Key, options?: Options): ResultTypeSync<Options & AsReference, T[Key]>;",
      "354:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): Promise<boolean>;",
      "358:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): boolean;",
      "",
      "[Added Lines]",
      "336:    delete(property: keyof T): Promise<void>;",
      "338:    deleteSync(property: keyof T): void;",
      "346:    property: Key, options?: Options): ResultTypeAsync<Options & FallbackReference, T[Key]>;",
      "348:    property: Key, options?: Options): ResultTypeSync<Options & FallbackReference, T[Key]>;",
      "354:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): Promise<void>;",
      "358:    property: Key, value: ArgumentType<Options, T[Key]>, options?: Options): void;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "366:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "367:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
      "368:    options?: Options",
      "370:   applyIgnored<Options extends ReferenceApplyOptions>(",
      "371:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "373:    options?: Options",
      "374:   ): void;",
      "375:   applySync<Options extends ReferenceApplyOptions>(",
      "376:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "377:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
      "378:    options?: Options",
      "",
      "[Removed Lines]",
      "369:   ): ResultTypeBidirectionalAsync<Options & ApplyAsReference, ApplyResult<T>>;",
      "372:    arguments?: ArgumentsTypeBidirectional<Options & ApplyAsReference, ApplyArguments<T>>,",
      "379:   ): ResultTypeBidirectionalSync<Options & ApplyAsReference, ApplyResult<T>>;",
      "",
      "[Added Lines]",
      "369:   ): ResultTypeBidirectionalAsync<Options & FallbackReference, ApplyResult<T>>;",
      "372:    arguments?: ArgumentsTypeBidirectional<Options & FallbackReference, ApplyArguments<T>>,",
      "379:   ): ResultTypeBidirectionalSync<Options & FallbackReference, ApplyResult<T>>;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "392:    receiver?: ArgumentType<Options['arguments'], ApplyArgumentThis<T>>,",
      "393:    arguments?: ArgumentsTypeBidirectional<Options, ApplyArguments<T>>,",
      "394:    options?: Options",
      "396:  }",
      "",
      "[Removed Lines]",
      "395:   ): ResultTypeBidirectionalSync<Options & ApplyAsReference, ApplyResult<T>>;",
      "",
      "[Added Lines]",
      "395:   ): ResultTypeBidirectionalSync<Options & FallbackReference, ApplyResult<T>>;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "707:  type AsCopy = { copy: true };",
      "708:  type AsExternal = { externalCopy: true };",
      "709:  type AsReference = { reference: true };",
      "710:  type ApplyAsReference = { result: AsReference };",
      "711:  type WithTransfer = AsCopy | AsExternal | AsReference;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:  type FallbackReference = { _reference: true };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "727:   Options extends AsReference ? Reference<Result> :",
      "728:   Result extends Transferable ? Result :",
      "729:   Result extends void ? void :",
      "730:   Transferable;",
      "731:  type ResultTypeAsync<Options extends TransferOptions, Result = any> = Promise<ResultTypeBase<Options, Result>>;",
      "732:  type ResultTypeSync<Options extends TransferOptions, Result = any> = CheckPromise<Options, ResultTypeBase<Options, Result>>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "731:   Options extends FallbackReference ? Reference<Result> :",
      "",
      "---------------"
    ],
    "src/isolate/strings.h||src/isolate/strings.h": [
      "File: src/isolate/strings.h -> src/isolate/strings.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:   String function{\"function\"};",
      "59:   String global{\"global\"};",
      "60:   String ignored{\"ignored\"};",
      "62:   String inspector{\"inspector\"};",
      "63:   String isolateIsDisposed{\"Isolate is disposed\"};",
      "64:   String isolatedVm{\"isolated-vm\"};",
      "",
      "[Removed Lines]",
      "61:   String inheritUnsafe{\"inheritUnsafe\"};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:   String transferList{\"transferList\"};",
      "83:   String transferOut{\"transferOut\"};",
      "84:   String undefined{\"undefined\"};",
      "86:   String does_zap_garbage{\"does_zap_garbage\"};",
      "87:   String externally_allocated_size{\"externally_allocated_size\"};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:   String unsafeInherit{\"unsafeInherit\"};",
      "",
      "---------------"
    ],
    "src/module/reference_handle.cc||src/module/reference_handle.cc": [
      "File: src/module/reference_handle.cc -> src/module/reference_handle.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "127: }",
      "129: auto ReferenceHandle::New(Local<Value> value, MaybeLocal<Object> options) -> unique_ptr<ReferenceHandle> {",
      "131:  return std::make_unique<ReferenceHandle>(value, inherit);",
      "132: }",
      "",
      "[Removed Lines]",
      "130:  auto inherit = ReadOption<bool>(options, StringTable::Get().inheritUnsafe, false);",
      "",
      "[Added Lines]",
      "130:  auto inherit = ReadOption<bool>(options, StringTable::Get().unsafeInherit, false);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "426: }",
      "432:  public:",
      "447:     throw RuntimeTypeError(\"Invalid `key`\");",
      "448:    }",
      "449:   }",
      "451:   void Phase2() final {",
      "465:     }",
      "472:   }",
      "474:   auto Phase3() -> Local<Value> final {",
      "",
      "[Removed Lines]",
      "431: class GetRunner : public ThreePhaseTask {",
      "433:   GetRunner(",
      "434:    const ReferenceHandle& that,",
      "435:    Local<Value> key_handle,",
      "436:    MaybeLocal<Object> maybe_options,",
      "437:    bool inherit",
      "438:   ) :",
      "439:     context{that.context},",
      "440:     reference{that.reference},",
      "441:     options{maybe_options, inherit ?",
      "442:      TransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
      "443:     inherit{inherit} {",
      "444:    that.CheckDisposed();",
      "445:    key = ExternalCopy::CopyIfPrimitive(key_handle);",
      "446:    if (!key) {",
      "452:    Local<Context> context_handle = Deref(context);",
      "453:    Context::Scope context_scope{context_handle};",
      "454:    Local<Value> key_inner = key->CopyInto();",
      "455:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
      "456:    bool allow = [&]() {",
      "457:     if (!inherit) {",
      "458:      if (key_inner->IsName()) {",
      "459:       return Unmaybe(object->HasRealNamedProperty(context_handle, key_inner.As<Name>()));",
      "460:      } else if (key_inner->IsNumber()) {",
      "461:       return Unmaybe(object->HasRealIndexedProperty(context_handle, HandleCast<uint32_t>(key_inner)));",
      "462:      } else {",
      "463:       return false;",
      "464:      }",
      "466:     return true;",
      "467:    }();",
      "468:    Local<Value> value = allow ?",
      "469:     Unmaybe(object->Get(context_handle, key_inner)) :",
      "470:     Undefined(Isolate::GetCurrent()).As<Value>();",
      "471:    ret = TransferOut(value, options);",
      "",
      "[Added Lines]",
      "431: class AccessorRunner : public ThreePhaseTask {",
      "433:   AccessorRunner(ReferenceHandle& target, Local<Value> key_handle) :",
      "434:   context{target.context},",
      "435:   target{target.reference},",
      "436:   key{ExternalCopy::CopyIfPrimitive(key_handle)} {",
      "437:    target.CheckDisposed();",
      "438:    if (!key || (!key_handle->IsName() && !key_handle->IsUint32())) {",
      "440:    } else if (target.type_of != decltype(target.type_of)::Object) {",
      "441:     throw RuntimeTypeError(\"Reference is not an object\");",
      "442:    }",
      "443:   }",
      "445:  protected:",
      "446:   auto GetTargetAndAlsoCheckForProxy() -> Local<Object> {",
      "447:    auto object = Local<Object>::Cast(Deref(target));",
      "448:    if (HasProxy(object)) {",
      "449:     throw RuntimeTypeError(\"Object is or has proxy\");",
      "450:    }",
      "451:    return object;",
      "452:   }",
      "454:   auto GetKey(Local<Context> context) -> Local<Name> {",
      "455:    auto key_inner = key->CopyInto();",
      "456:    return (key_inner->IsString() || key_inner->IsSymbol()) ?",
      "457:     key_inner.As<Name>() : Unmaybe(key_inner->ToString(context)).As<Name>();",
      "458:   }",
      "460:   RemoteHandle<Context> context;",
      "462:  private:",
      "463:   static auto HasProxy(Local<Object> object) -> bool {",
      "464:    if (object->IsProxy()) {",
      "465:     return true;",
      "466:    } else {",
      "467:     auto proto = object->GetPrototype();",
      "468:     if (proto->IsNullOrUndefined()) {",
      "469:      return false;",
      "470:     } else {",
      "471:      return HasProxy(proto.As<Object>());",
      "472:     }",
      "476:   RemoteHandle<Value> target;",
      "477:   unique_ptr<ExternalCopy> key;",
      "478: };",
      "483: class GetRunner final : public AccessorRunner {",
      "484:  public:",
      "485:   GetRunner(ReferenceHandle& target, Local<Value> key_handle, MaybeLocal<Object> maybe_options) :",
      "486:   AccessorRunner{target, key_handle},",
      "487:   options{maybe_options, target.inherit ?",
      "488:    TransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
      "489:   inherit{target.inherit} {}",
      "493:    auto* isolate = Isolate::GetCurrent();",
      "494:    auto context = Deref(this->context);",
      "495:    Context::Scope context_scope{context};",
      "496:    auto name = GetKey(context);",
      "497:    auto object = GetTargetAndAlsoCheckForProxy();",
      "500:    ret = TransferOut([&]() {",
      "501:     if (inherit) {",
      "503:      auto target = object;",
      "504:      do {",
      "505:       if (Unmaybe(target->HasOwnProperty(context, name))) {",
      "506:        if (Unmaybe(target->HasRealNamedCallbackProperty(context, name))) {",
      "507:         throw RuntimeTypeError(\"Property is getter\");",
      "508:        }",
      "509:        return Unmaybe(target->GetRealNamedProperty(context, name));",
      "510:       }",
      "511:       auto next = target->GetPrototype();",
      "512:       if (next->IsNullOrUndefined()) {",
      "513:        return Undefined(isolate).As<Value>();",
      "514:       }",
      "515:       target = next.As<Object>();",
      "516:      } while (true);",
      "517:     } else if (!Unmaybe(object->HasOwnProperty(context, name))) {",
      "518:      return Undefined(isolate).As<Value>();",
      "519:     } else if (Unmaybe(object->HasRealNamedCallbackProperty(context, name))) {",
      "520:      throw RuntimeTypeError(\"Property is getter\");",
      "521:     } else {",
      "522:      return Unmaybe(object->Get(context, name));",
      "524:    }(), options);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "476:   }",
      "478:  private:",
      "482:   unique_ptr<Transferable> ret;",
      "483:   TransferOptions options;",
      "484:   bool inherit;",
      "485: };",
      "486: template <int async>",
      "487: auto ReferenceHandle::Get(Local<Value> key_handle, MaybeLocal<Object> maybe_options) -> Local<Value> {",
      "489: }",
      "495:  public:",
      "496:   DeleteRunner(ReferenceHandle& that, Local<Value> key_handle) :",
      "506:   void Phase2() final {",
      "511:   }",
      "513:   auto Phase3() -> Local<Value> final {",
      "515:   }",
      "522: };",
      "523: template <int async>",
      "524: auto ReferenceHandle::Delete(Local<Value> key_handle) -> Local<Value> {",
      "",
      "[Removed Lines]",
      "479:   unique_ptr<ExternalCopy> key;",
      "480:   RemoteHandle<Context> context;",
      "481:   RemoteHandle<Value> reference;",
      "488:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options, inherit);",
      "494: class DeleteRunner : public ThreePhaseTask {",
      "497:     key{ExternalCopy::CopyIfPrimitive(key_handle)},",
      "498:     context{that.context},",
      "499:     reference{that.reference} {",
      "500:    that.CheckDisposed();",
      "501:    if (!key) {",
      "502:     throw RuntimeTypeError(\"Invalid `key`\");",
      "503:    }",
      "504:   }",
      "507:    Local<Context> context_handle = Deref(context);",
      "508:    Context::Scope context_scope{context_handle};",
      "509:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
      "510:    result = Unmaybe(object->Delete(context_handle, key->CopyInto()));",
      "514:    return Boolean::New(Isolate::GetCurrent(), result);",
      "517:  private:",
      "518:   unique_ptr<ExternalCopy> key;",
      "519:   RemoteHandle<Context> context;",
      "520:   RemoteHandle<Value> reference;",
      "521:   bool result = false;",
      "",
      "[Added Lines]",
      "538:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options);",
      "544: class DeleteRunner final : public AccessorRunner {",
      "547:   AccessorRunner{that, key_handle} {}",
      "550:    auto context = Deref(this->context);",
      "551:    Context::Scope context_scope{context};",
      "552:    auto object = GetTargetAndAlsoCheckForProxy();",
      "553:    if (!Unmaybe(object->Delete(context, GetKey(context)))) {",
      "554:     throw RuntimeTypeError(\"Delete failed\");",
      "555:    }",
      "559:    return Undefined(Isolate::GetCurrent());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "532:  public:",
      "533:   SetRunner(",
      "534:    ReferenceHandle& that,",
      "",
      "[Removed Lines]",
      "531: class SetRunner : public ThreePhaseTask {",
      "",
      "[Added Lines]",
      "570: class SetRunner final : public AccessorRunner {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "536:    Local<Value> val_handle,",
      "537:    MaybeLocal<Object> maybe_options",
      "538:   ) :",
      "549:   void Phase2() final {",
      "558:   }",
      "560:   auto Phase3() -> Local<Value> final {",
      "562:   }",
      "564:  private:",
      "566:   unique_ptr<Transferable> val;",
      "570: };",
      "571: template <int async>",
      "572: auto ReferenceHandle::Set(Local<Value> key_handle, Local<Value> val_handle, MaybeLocal<Object> maybe_options) -> Local<Value> {",
      "",
      "[Removed Lines]",
      "539:     key{ExternalCopy::CopyIfPrimitive(key_handle)},",
      "540:     val{TransferOut(val_handle, TransferOptions{maybe_options})},",
      "541:     context{that.context},",
      "542:     reference{that.reference} {",
      "543:    that.CheckDisposed();",
      "544:    if (!key) {",
      "545:     throw RuntimeTypeError(\"Invalid `key`\");",
      "546:    }",
      "547:   }",
      "550:    Local<Context> context_handle = Deref(context);",
      "551:    Context::Scope context_scope{context_handle};",
      "552:    Local<Value> key_inner = key->CopyInto();",
      "553:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
      "555:    Unmaybe(object->Delete(context_handle, key_inner));",
      "556:    Local<Value> val_inner = val->TransferIn();",
      "557:    did_set = Unmaybe(object->Set(context_handle, key_inner, val_inner));",
      "561:    return Boolean::New(Isolate::GetCurrent(), did_set);",
      "565:   unique_ptr<ExternalCopy> key;",
      "567:   RemoteHandle<Context> context;",
      "568:   RemoteHandle<Value> reference;",
      "569:   bool did_set = false;",
      "",
      "[Added Lines]",
      "578:   AccessorRunner{that, key_handle},",
      "579:   val{TransferOut(val_handle, TransferOptions{maybe_options})} {}",
      "582:    auto context = Deref(this->context);",
      "583:    Context::Scope context_scope{context};",
      "584:    auto name = GetKey(context);",
      "585:    auto object = GetTargetAndAlsoCheckForProxy();",
      "587:    Unmaybe(object->Delete(context, name));",
      "588:    auto val_inner = val->TransferIn();",
      "589:    if (!Unmaybe(object->CreateDataProperty(context, GetKey(context), val_inner))) {",
      "590:     throw RuntimeTypeError(\"Set failed\");",
      "591:    }",
      "595:    return Undefined(Isolate::GetCurrent());",
      "",
      "---------------"
    ],
    "src/module/reference_handle.h||src/module/reference_handle.h": [
      "File: src/module/reference_handle.h -> src/module/reference_handle.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: class ReferenceData {",
      "16:  public:",
      "17:   enum class TypeOf { Null, Undefined, Number, String, Boolean, Object, Function };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  friend class AccessorRunner;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41: class ReferenceHandle : public TransferableHandle, public detail::ReferenceData {",
      "42:  friend class ApplyRunner;",
      "43:  friend class CopyRunner;",
      "44:  friend class GetRunner;",
      "47:  public:",
      "48:   using TypeOf = detail::ReferenceData::TypeOf;",
      "",
      "[Removed Lines]",
      "45:  friend class DeleteRunner;",
      "46:  friend class SetRunner;",
      "",
      "[Added Lines]",
      "45:  friend class AccessorRunner;",
      "",
      "---------------"
    ],
    "tests/reference.js||tests/reference.js": [
      "File: tests/reference.js -> tests/reference.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const ivm = require('isolated-vm');",
      "9: {",
      "14: }",
      "15: {",
      "20: }",
      "22: console.log('pass');",
      "",
      "[Removed Lines]",
      "2: const { strictEqual } = require('assert');",
      "4: const foo = { foo: 1 };",
      "5: const bar = Object.create(foo);",
      "6: bar.bar = 2;",
      "7: const etc = Object.create(bar);",
      "8: etc.etc = bar;",
      "10:  const ref = new ivm.Reference(etc);",
      "11:  strictEqual(ref.getSync('bar'), undefined);",
      "12:  strictEqual(ref.getSync('etc').getSync('foo'), undefined);",
      "13:  strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "16:  const ref = new ivm.Reference(etc, { inheritUnsafe: true });",
      "17:  strictEqual(ref.getSync('bar'), 2);",
      "18:  strictEqual(ref.getSync('etc').getSync('foo'), 1);",
      "19:  strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "",
      "[Added Lines]",
      "1: 'use strict';",
      "3: const { strictEqual, throws } = require('assert');",
      "4: let trap = false;",
      "8:  const foo = { foo: 1 };",
      "9:  const bar = Object.create(foo);",
      "10:  bar.bar = 2;",
      "11:  const etc = Object.create(bar);",
      "12:  etc.etc = bar;",
      "14:  {",
      "16:   const ref = new ivm.Reference(etc);",
      "17:   strictEqual(ref.getSync('bar'), undefined);",
      "18:   strictEqual(ref.getSync('etc').getSync('foo'), undefined);",
      "19:   strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "20:   ref.setSync('prop', 1);",
      "21:   strictEqual(ref.getSync('prop'), 1);",
      "22:   ref.deleteSync('prop');",
      "23:   strictEqual(ref.getSync('prop'), undefined);",
      "24:  }",
      "26:  {",
      "28:   const ref = new ivm.Reference(etc, { unsafeInherit: true });",
      "29:   strictEqual(ref.getSync('bar'), 2);",
      "30:   strictEqual(ref.getSync('etc').getSync('foo'), 1);",
      "31:   strictEqual(ref.getSync('etc').getSync('bar'), 2);",
      "32:   ref.getSync('etc').setSync('prop', 1);",
      "33:   ref.setSync('prop', 2);",
      "34:   strictEqual(ref.getSync('prop'), 2);",
      "35:   ref.deleteSync('prop');",
      "36:   strictEqual(ref.getSync('prop'), 1);",
      "37:  }",
      "38: }",
      "40: {",
      "42:  let setter = 0;",
      "43:  const foo = {",
      "44:   get str() { trap = true; return 'got' },",
      "45:   set str(_) { trap = true },",
      "46:  };",
      "47:  Object.defineProperty(foo, 0, {",
      "48:   get() { trap = true; return 'got' },",
      "49:   set() { trap = true },",
      "50:  });",
      "52:  {",
      "54:   const ref = new ivm.Reference(foo);",
      "55:   throws(() => ref.getSync('str'));",
      "56:   throws(() => ref.getSync(0));",
      "57:   throws(() => ref.setSync(0, undefined));",
      "58:  }",
      "60:  {",
      "62:   const ref = new ivm.Reference(Object.create(foo), { unsafeInherit: true });",
      "63:   throws(() => ref.getSync('str'));",
      "64:   ref.setSync('str', undefined);",
      "65:   throws(() => ref.getSync(0));",
      "66:  }",
      "67: }",
      "69: {",
      "71:  const val = { prop: 1 };",
      "72:  const prox = new Proxy(val, {",
      "73:   get() { trap = true },",
      "74:     set() { trap = true },",
      "75:     getOwnPropertyDescriptor() { trap = true },",
      "76:     getPrototypeOf() { trap = true },",
      "77:     has() { trap = true },",
      "78:     ownKeys() { trap = true },",
      "79:  });",
      "80:  const inherited = Object.create(prox);",
      "82:  {",
      "84:   const ref = new ivm.Reference(prox);",
      "85:   throws(() => ref.getSync('prop'));",
      "86:  }",
      "88:  {",
      "90:   const ref = new ivm.Reference(inherited);",
      "91:   throws(() => ref.getSync('prop'),);",
      "92:  }",
      "94:  {",
      "96:   const ref = new ivm.Reference(inherited, { unsafeInherit: true });",
      "97:   throws(() => ref.getSync('prop'));",
      "98:  }",
      "103:  const val = [ 1, 2, 3 ];",
      "104:  Object.defineProperty(val, 1, { get() { trap = true; return 'got' }});",
      "105:  const ref = new ivm.Reference(val);",
      "106:  strictEqual(ref.getSync(0), 1);",
      "107:  throws(() => ref.getSync(1));",
      "110: {",
      "112:  const val = new Uint8Array([ 1, 2, 3 ]);",
      "113:  const ref = new ivm.Reference(val);",
      "114:  strictEqual(ref.getSync(0), 1);",
      "115: }",
      "117: if (trap) {",
      "118:  console.log('fail');",
      "119: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb5cc102da2fde8b14b75f4679ef59da8ee1d5b2",
      "candidate_info": {
        "commit_hash": "eb5cc102da2fde8b14b75f4679ef59da8ee1d5b2",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/eb5cc102da2fde8b14b75f4679ef59da8ee1d5b2",
        "files": [
          "src/module/context_handle.cc",
          "src/module/module_handle.cc",
          "src/module/reference_handle.cc",
          "src/module/reference_handle.h",
          "tests/reference.js"
        ],
        "message": "Fix module namespace reference",
        "before_after_code_files": [
          "src/module/context_handle.cc||src/module/context_handle.cc",
          "src/module/module_handle.cc||src/module/module_handle.cc",
          "src/module/reference_handle.cc||src/module/reference_handle.cc",
          "src/module/reference_handle.h||src/module/reference_handle.h",
          "tests/reference.js||tests/reference.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/module/reference_handle.cc||src/module/reference_handle.cc",
            "src/module/reference_handle.h||src/module/reference_handle.h",
            "tests/reference.js||tests/reference.js"
          ],
          "candidate": [
            "src/module/reference_handle.cc||src/module/reference_handle.cc",
            "src/module/reference_handle.h||src/module/reference_handle.h",
            "tests/reference.js||tests/reference.js"
          ]
        }
      },
      "candidate_diff": {
        "src/module/context_handle.cc||src/module/context_handle.cc": [
          "File: src/module/context_handle.cc -> src/module/context_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  if (global_reference) {",
          "70:   ref = Deref(global_reference);",
          "71:  } else {",
          "73:   global_reference = RemoteHandle<v8::Object>(ref);",
          "74:  }",
          "75:  Unmaybe(This()->CreateDataProperty(isolate->GetCurrentContext(), StringTable::Get().global, ref));",
          "",
          "[Removed Lines]",
          "72:   ref = ClassHandle::NewInstance<ReferenceHandle>(global.GetSharedIsolateHolder(), global, context, ReferenceHandle::TypeOf::Object);",
          "",
          "[Added Lines]",
          "72:   ref = ClassHandle::NewInstance<ReferenceHandle>(global.GetSharedIsolateHolder(), global, context, ReferenceHandle::TypeOf::Object, false, false);",
          "",
          "---------------"
        ],
        "src/module/module_handle.cc||src/module/module_handle.cc": [
          "File: src/module/module_handle.cc -> src/module/module_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  if (!info->global_namespace) {",
          "428:   throw RuntimeGenericError(\"Module has not been instantiated.\");",
          "429:  }",
          "431: }",
          "433: } // namespace ivm",
          "",
          "[Removed Lines]",
          "430:  return ClassHandle::NewInstance<ReferenceHandle>(info->handle.GetSharedIsolateHolder(), info->global_namespace, info->context_handle, ReferenceHandle::TypeOf::Object);",
          "",
          "[Added Lines]",
          "430:  return ClassHandle::NewInstance<ReferenceHandle>(info->handle.GetSharedIsolateHolder(), info->global_namespace, info->context_handle, ReferenceHandle::TypeOf::Object, true, false);",
          "",
          "---------------"
        ],
        "src/module/reference_handle.cc||src/module/reference_handle.cc": [
          "File: src/module/reference_handle.cc -> src/module/reference_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   RemoteHandle<Value>(value),",
          "83:   RemoteHandle<Context>(Isolate::GetCurrent()->GetCurrentContext()),",
          "84:   InferTypeOf(value),",
          "85:   inherit} {}",
          "87: ReferenceData::ReferenceData(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  RemoteHandle<Value> reference,",
          "90:  RemoteHandle<Context> context,",
          "91:  TypeOf type_of,",
          "92:  bool inherit",
          "93: ) :",
          "94:  isolate{std::move(isolate)},",
          "95:  reference{std::move(reference)},",
          "96:  context{std::move(context)},",
          "97:  type_of{type_of},",
          "98:  inherit{inherit} {}",
          "100: } // namespace detail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  bool accessors,",
          "100:  accessors{accessors},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:   AccessorRunner{target, key_handle},",
          "487:   options{maybe_options, target.inherit ?",
          "488:    TransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
          "489:   inherit{target.inherit} {}",
          "491:   void Phase2() final {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:   accessors{target.accessors},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:     if (inherit) {",
          "503:      auto target = object;",
          "508:        }",
          "517:     } else if (!Unmaybe(object->HasOwnProperty(context, name))) {",
          "518:      return Undefined(isolate).As<Value>();",
          "520:      throw RuntimeTypeError(\"Property is getter\");",
          "523:     }",
          "524:    }(), options);",
          "525:   }",
          "",
          "[Removed Lines]",
          "504:      do {",
          "505:       if (Unmaybe(target->HasOwnProperty(context, name))) {",
          "506:        if (Unmaybe(target->HasRealNamedCallbackProperty(context, name))) {",
          "507:         throw RuntimeTypeError(\"Property is getter\");",
          "509:        return Unmaybe(target->GetRealNamedProperty(context, name));",
          "510:       }",
          "511:       auto next = target->GetPrototype();",
          "512:       if (next->IsNullOrUndefined()) {",
          "513:        return Undefined(isolate).As<Value>();",
          "514:       }",
          "515:       target = next.As<Object>();",
          "516:      } while (true);",
          "519:     } else if (Unmaybe(object->HasRealNamedCallbackProperty(context, name))) {",
          "521:     } else {",
          "522:      return Unmaybe(object->Get(context, name));",
          "",
          "[Added Lines]",
          "508:      if (!accessors) {",
          "509:       do {",
          "510:        if (Unmaybe(target->HasOwnProperty(context, name))) {",
          "511:         if (Unmaybe(target->HasRealNamedCallbackProperty(context, name))) {",
          "512:          throw RuntimeTypeError(\"Property is getter\");",
          "513:         }",
          "514:         return Unmaybe(target->GetRealNamedProperty(context, name));",
          "516:        auto next = target->GetPrototype();",
          "517:        if (next->IsNullOrUndefined()) {",
          "518:         return Undefined(isolate).As<Value>();",
          "519:        }",
          "520:        target = next.As<Object>();",
          "521:       } while (true);",
          "522:      }",
          "525:     } else if (!accessors && Unmaybe(object->HasRealNamedCallbackProperty(context, name))) {",
          "528:     return Unmaybe(object->Get(context, name));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "531:  private:",
          "532:   unique_ptr<Transferable> ret;",
          "533:   TransferOptions options;",
          "534:   bool inherit;",
          "535: };",
          "536: template <int async>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:   bool accessors;",
          "",
          "---------------"
        ],
        "src/module/reference_handle.h||src/module/reference_handle.h": [
          "File: src/module/reference_handle.h -> src/module/reference_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:    RemoteHandle<v8::Value> reference,",
          "24:    RemoteHandle<v8::Context> context,",
          "25:    TypeOf type_of,",
          "27:   );",
          "29:  protected:",
          "",
          "[Removed Lines]",
          "26:    bool inherit = false",
          "",
          "[Added Lines]",
          "26:    bool accessors,",
          "27:    bool inherit",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   RemoteHandle<v8::Value> reference;",
          "32:   RemoteHandle<v8::Context> context;",
          "33:   TypeOf type_of;",
          "34:   bool inherit;",
          "35: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   bool accessors;",
          "",
          "---------------"
        ],
        "tests/reference.js||tests/reference.js": [
          "File: tests/reference.js -> tests/reference.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  const val = { prop: 1 };",
          "72:  const prox = new Proxy(val, {",
          "73:   get() { trap = true },",
          "79:  });",
          "80:  const inherited = Object.create(prox);",
          "",
          "[Removed Lines]",
          "74:     set() { trap = true },",
          "75:     getOwnPropertyDescriptor() { trap = true },",
          "76:     getPrototypeOf() { trap = true },",
          "77:     has() { trap = true },",
          "78:     ownKeys() { trap = true },",
          "",
          "[Added Lines]",
          "74:   set() { trap = true },",
          "75:   getOwnPropertyDescriptor() { trap = true },",
          "76:   getPrototypeOf() { trap = true },",
          "77:   has() { trap = true },",
          "78:   ownKeys() { trap = true },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c95b3da54258ce8993fc7ed475fe18e7f321c72c",
      "candidate_info": {
        "commit_hash": "c95b3da54258ce8993fc7ed475fe18e7f321c72c",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/c95b3da54258ce8993fc7ed475fe18e7f321c72c",
        "files": [
          "README.md",
          "isolated-vm.d.ts",
          "src/isolate/generic/handle_cast.h",
          "src/isolate/strings.h",
          "src/module/reference_handle.cc",
          "src/module/reference_handle.h",
          "src/module/transferable.cc",
          "src/module/transferable.h"
        ],
        "message": "Disallow access to inherited properties on Reference. Adds option to allow them",
        "before_after_code_files": [
          "isolated-vm.d.ts||isolated-vm.d.ts",
          "src/isolate/generic/handle_cast.h||src/isolate/generic/handle_cast.h",
          "src/isolate/strings.h||src/isolate/strings.h",
          "src/module/reference_handle.cc||src/module/reference_handle.cc",
          "src/module/reference_handle.h||src/module/reference_handle.h",
          "src/module/transferable.cc||src/module/transferable.cc",
          "src/module/transferable.h||src/module/transferable.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "isolated-vm.d.ts||isolated-vm.d.ts",
            "src/isolate/strings.h||src/isolate/strings.h",
            "src/module/reference_handle.cc||src/module/reference_handle.cc",
            "src/module/reference_handle.h||src/module/reference_handle.h"
          ],
          "candidate": [
            "isolated-vm.d.ts||isolated-vm.d.ts",
            "src/isolate/strings.h||src/isolate/strings.h",
            "src/module/reference_handle.cc||src/module/reference_handle.cc",
            "src/module/reference_handle.h||src/module/reference_handle.h"
          ]
        }
      },
      "candidate_diff": {
        "isolated-vm.d.ts||isolated-vm.d.ts": [
          "File: isolated-vm.d.ts -> isolated-vm.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:  export class Reference<T = any> {",
          "294:   private __ivm_reference: T;",
          "",
          "[Removed Lines]",
          "295:   constructor(value: T);",
          "",
          "[Added Lines]",
          "295:   constructor(value: T, options?: { inheritUnsafe?: boolean });",
          "",
          "---------------"
        ],
        "src/isolate/generic/handle_cast.h||src/isolate/generic/handle_cast.h": [
          "File: src/isolate/generic/handle_cast.h -> src/isolate/generic/handle_cast.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  ParamIncorrect::Throw(\"a 32-bit number\");",
          "102: }",
          "104: inline auto HandleCastImpl(v8::Local<v8::Value> value, const HandleCastArguments& /*arguments*/, HandleCastTag<v8::Local<v8::Number>> /*tag*/) {",
          "105:  if (value->IsNumber()) {",
          "106:   return value.As<v8::Number>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: inline auto HandleCastImpl(v8::Local<v8::Value> value, const HandleCastArguments& /*arguments*/, HandleCastTag<v8::Local<v8::Uint32>> /*tag*/) {",
          "105:  if (value->IsUint32()) {",
          "106:   return value.As<v8::Uint32>();",
          "107:  }",
          "108:  ParamIncorrect::Throw(\"a 32-bit number\");",
          "109: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:  return value->Value();",
          "197: }",
          "199: inline auto HandleCastImpl(v8::Local<v8::Value> value, const HandleCastArguments& arguments, HandleCastTag<std::string> /*tag*/) {",
          "200:  return HandleCast<std::string>(HandleCast<v8::Local<v8::String>>(value, arguments), arguments);",
          "201: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: inline auto HandleCastImpl(v8::Local<v8::Value> value, const HandleCastArguments& arguments, HandleCastTag<uint32_t> /*tag*/) {",
          "207:  return HandleCast<uint32_t>(HandleCast<v8::Local<v8::Uint32>>(value, arguments), arguments);",
          "208: }",
          "210: inline auto HandleCastImpl(v8::Local<v8::Uint32> value, const HandleCastArguments& /*arguments*/, HandleCastTag<uint32_t> /*tag*/) {",
          "211:  return value->Value();",
          "212: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:  return v8::Integer::New(arguments.isolate, value);",
          "215: }",
          "217: inline auto HandleCastImpl(const char* value, const HandleCastArguments& arguments, HandleCastTag<v8::Local<v8::String>> /*tag*/) {",
          "218:  return Unmaybe(v8::String::NewFromUtf8(arguments.isolate, value, v8::NewStringType::kNormal));",
          "219: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: inline auto HandleCastImpl(uint32_t value, const HandleCastArguments& arguments, HandleCastTag<v8::Local<v8::Integer>> /*tag*/) {",
          "233:  return v8::Integer::NewFromUnsigned(arguments.isolate, value);",
          "234: }",
          "",
          "---------------"
        ],
        "src/isolate/strings.h||src/isolate/strings.h": [
          "File: src/isolate/strings.h -> src/isolate/strings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   String function{\"function\"};",
          "59:   String global{\"global\"};",
          "60:   String ignored{\"ignored\"};",
          "61:   String inspector{\"inspector\"};",
          "62:   String isolateIsDisposed{\"Isolate is disposed\"};",
          "63:   String isolatedVm{\"isolated-vm\"};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   String inheritUnsafe{\"inheritUnsafe\"};",
          "",
          "---------------"
        ],
        "src/module/reference_handle.cc||src/module/reference_handle.cc": [
          "File: src/module/reference_handle.cc -> src/module/reference_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: namespace detail {",
          "86: ReferenceData::ReferenceData(",
          "87:  shared_ptr<IsolateHolder> isolate,",
          "88:  RemoteHandle<Value> reference,",
          "89:  RemoteHandle<Context> context,",
          "91: ) :",
          "92:  isolate{std::move(isolate)},",
          "93:  reference{std::move(reference)},",
          "94:  context{std::move(context)},",
          "97: } // namespace detail",
          "",
          "[Removed Lines]",
          "80: ReferenceData::ReferenceData(Local<Value> value) :",
          "81:  isolate{IsolateEnvironment::GetCurrentHolder()},",
          "82:  reference{RemoteHandle<Value>(value)},",
          "83:  context{RemoteHandle<Context>(Isolate::GetCurrent()->GetCurrentContext())},",
          "84:  type_of{InferTypeOf(value)} {}",
          "90:  TypeOf type_of",
          "95:  type_of{type_of} {}",
          "",
          "[Added Lines]",
          "80: ReferenceData::ReferenceData(Local<Value> value, bool inherit) : ReferenceData{",
          "81:   IsolateEnvironment::GetCurrentHolder(),",
          "82:   RemoteHandle<Value>(value),",
          "83:   RemoteHandle<Context>(Isolate::GetCurrent()->GetCurrentContext()),",
          "84:   InferTypeOf(value),",
          "85:   inherit} {}",
          "91:  TypeOf type_of,",
          "92:  bool inherit",
          "97:  type_of{type_of},",
          "98:  inherit{inherit} {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  ));",
          "124: }",
          "128: }",
          "130: auto ReferenceHandle::TransferOut() -> unique_ptr<Transferable> {",
          "",
          "[Removed Lines]",
          "126: auto ReferenceHandle::New(Local<Value> value) -> unique_ptr<ReferenceHandle> {",
          "127:  return std::make_unique<ReferenceHandle>(value);",
          "",
          "[Added Lines]",
          "129: auto ReferenceHandle::New(Local<Value> value, MaybeLocal<Object> options) -> unique_ptr<ReferenceHandle> {",
          "130:  auto inherit = ReadOption<bool>(options, StringTable::Get().inheritUnsafe, false);",
          "131:  return std::make_unique<ReferenceHandle>(value, inherit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:   GetRunner(",
          "430:    const ReferenceHandle& that,",
          "431:    Local<Value> key_handle,",
          "433:   ) :",
          "434:     context{that.context},",
          "435:     reference{that.reference},",
          "437:    that.CheckDisposed();",
          "438:    key = ExternalCopy::CopyIfPrimitive(key_handle);",
          "439:    if (!key) {",
          "",
          "[Removed Lines]",
          "432:    MaybeLocal<Object> maybe_options",
          "436:     options{maybe_options, TransferOptions::Type::Reference} {",
          "",
          "[Added Lines]",
          "436:    MaybeLocal<Object> maybe_options,",
          "437:    bool inherit",
          "441:     options{maybe_options, inherit ?",
          "442:      TransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
          "443:     inherit{inherit} {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:    Context::Scope context_scope{context_handle};",
          "447:    Local<Value> key_inner = key->CopyInto();",
          "448:    Local<Object> object = Local<Object>::Cast(Deref(reference));",
          "450:    ret = TransferOut(value, options);",
          "451:   }",
          "",
          "[Removed Lines]",
          "449:    Local<Value> value = Unmaybe(object->Get(context_handle, key_inner));",
          "",
          "[Added Lines]",
          "456:    bool allow = [&]() {",
          "457:     if (!inherit) {",
          "458:      if (key_inner->IsName()) {",
          "459:       return Unmaybe(object->HasRealNamedProperty(context_handle, key_inner.As<Name>()));",
          "460:      } else if (key_inner->IsNumber()) {",
          "461:       return Unmaybe(object->HasRealIndexedProperty(context_handle, HandleCast<uint32_t>(key_inner)));",
          "462:      } else {",
          "463:       return false;",
          "464:      }",
          "465:     }",
          "466:     return true;",
          "467:    }();",
          "468:    Local<Value> value = allow ?",
          "469:     Unmaybe(object->Get(context_handle, key_inner)) :",
          "470:     Undefined(Isolate::GetCurrent()).As<Value>();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:   RemoteHandle<Value> reference;",
          "461:   unique_ptr<Transferable> ret;",
          "462:   TransferOptions options;",
          "463: };",
          "464: template <int async>",
          "465: auto ReferenceHandle::Get(Local<Value> key_handle, MaybeLocal<Object> maybe_options) -> Local<Value> {",
          "467: }",
          "",
          "[Removed Lines]",
          "466:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options);",
          "",
          "[Added Lines]",
          "484:   bool inherit;",
          "488:  return ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options, inherit);",
          "",
          "---------------"
        ],
        "src/module/reference_handle.h||src/module/reference_handle.h": [
          "File: src/module/reference_handle.h -> src/module/reference_handle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  public:",
          "17:   enum class TypeOf { Null, Undefined, Number, String, Boolean, Object, Function };",
          "20:   ReferenceData(",
          "21:    std::shared_ptr<IsolateHolder> isolate,",
          "22:    RemoteHandle<v8::Value> reference,",
          "23:    RemoteHandle<v8::Context> context,",
          "25:   );",
          "27:  protected:",
          "",
          "[Removed Lines]",
          "19:   explicit ReferenceData(v8::Local<v8::Value> value);",
          "24:    TypeOf type_of",
          "",
          "[Added Lines]",
          "19:   explicit ReferenceData(v8::Local<v8::Value> value, bool inherit = false);",
          "24:    TypeOf type_of,",
          "25:    bool inherit = false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   RemoteHandle<v8::Value> reference;",
          "30:   RemoteHandle<v8::Context> context;",
          "31:   TypeOf type_of;",
          "32: };",
          "34: } // namespace detail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   bool inherit;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   explicit ReferenceHandle(Args&&... args) : ReferenceData{std::forward<Args>(args)...} {}",
          "51:   static auto Definition() -> v8::Local<v8::FunctionTemplate>;",
          "53:   auto TransferOut() -> std::unique_ptr<Transferable> final;",
          "55:   auto Deref(v8::MaybeLocal<v8::Object> maybe_options) -> v8::Local<v8::Value>;",
          "",
          "[Removed Lines]",
          "52:   static auto New(v8::Local<v8::Value> value) -> std::unique_ptr<ReferenceHandle>;",
          "",
          "[Added Lines]",
          "54:   static auto New(v8::Local<v8::Value> value, v8::MaybeLocal<v8::Object> options)",
          "55:    -> std::unique_ptr<ReferenceHandle>;",
          "",
          "---------------"
        ],
        "src/module/transferable.cc||src/module/transferable.cc": [
          "File: src/module/transferable.cc -> src/module/transferable.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:    case TransferOptions::Type::ExternalCopy:",
          "219:     return std::make_unique<ExternalCopyHandle::ExternalCopyTransferable>(ExternalCopy::Copy(value));",
          "221:    case TransferOptions::Type::Reference:",
          "222:     return std::make_unique<ReferenceHandleTransferable>(value);",
          "223:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:    case TransferOptions::Type::DeepReference:",
          "222:     return std::make_unique<ReferenceHandleTransferable>(value, true);",
          "",
          "---------------"
        ],
        "src/module/transferable.h||src/module/transferable.h": [
          "File: src/module/transferable.h -> src/module/transferable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: class TransferOptions {",
          "19:  public:",
          "22:   TransferOptions() = default;",
          "23:   explicit TransferOptions(Type fallback) : fallback{fallback} {};",
          "",
          "[Removed Lines]",
          "20:   enum class Type { None, Copy, ExternalCopy, Reference };",
          "",
          "[Added Lines]",
          "20:   enum class Type { None, Copy, ExternalCopy, Reference, DeepReference };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbc04fa28741dd3d44d015cfa7067f163aaccdf9",
      "candidate_info": {
        "commit_hash": "bbc04fa28741dd3d44d015cfa7067f163aaccdf9",
        "repo": "laverdet/isolated-vm",
        "commit_url": "https://github.com/laverdet/isolated-vm/commit/bbc04fa28741dd3d44d015cfa7067f163aaccdf9",
        "files": [
          "src/isolate/environment.h",
          "src/isolate/generic/handle_cast.h",
          "src/isolate/generic/read_option.h",
          "src/isolate/strings.h",
          "src/module/isolate_handle.cc"
        ],
        "message": "Hopefully fix leaky string table\n\nI guess v8::Eternal<> is copyable which created a lot of issues here.\nThe fix attempted in e64473c6de wasn't adequate at all.\n\nSee #227",
        "before_after_code_files": [
          "src/isolate/environment.h||src/isolate/environment.h",
          "src/isolate/generic/handle_cast.h||src/isolate/generic/handle_cast.h",
          "src/isolate/generic/read_option.h||src/isolate/generic/read_option.h",
          "src/isolate/strings.h||src/isolate/strings.h",
          "src/module/isolate_handle.cc||src/module/isolate_handle.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isolate/strings.h||src/isolate/strings.h"
          ],
          "candidate": [
            "src/isolate/strings.h||src/isolate/strings.h"
          ]
        }
      },
      "candidate_diff": {
        "src/isolate/environment.h||src/isolate/environment.h": [
          "File: src/isolate/environment.h -> src/isolate/environment.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:  return HandleConvert{eternal.Get(env.isolate)}.value;",
          "359: }",
          "362:  return Executor::GetCurrentEnvironment()->string_table;",
          "363: }",
          "",
          "[Removed Lines]",
          "361: inline auto StringTable::Get() {",
          "",
          "[Added Lines]",
          "361: inline auto StringTable::Get() -> auto& {",
          "",
          "---------------"
        ],
        "src/isolate/generic/handle_cast.h||src/isolate/generic/handle_cast.h": [
          "File: src/isolate/generic/handle_cast.h -> src/isolate/generic/handle_cast.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: template <class Type, class Value>",
          "65: }",
          "",
          "[Removed Lines]",
          "63: auto HandleCast(Value value, HandleCastArguments arguments = {}) -> Type {",
          "64:  return HandleCastImpl(value, arguments, HandleCastTag<Type>{});",
          "",
          "[Added Lines]",
          "63: auto HandleCast(Value&& value, HandleCastArguments arguments = {}) -> Type {",
          "64:  return HandleCastImpl(std::forward<Value>(value), arguments, HandleCastTag<Type>{});",
          "",
          "---------------"
        ],
        "src/isolate/generic/read_option.h||src/isolate/generic/read_option.h": [
          "File: src/isolate/generic/read_option.h -> src/isolate/generic/read_option.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: struct ParamRequired : std::exception {};",
          "10: template <class Type, class Property, class Default>",
          "12:  HandleCastArguments arguments;",
          "14:  try {",
          "15:   v8::Local<v8::Object> options;",
          "16:   if (maybe_options.ToLocal(&options)) {",
          "",
          "[Removed Lines]",
          "11: inline auto ReadOptionImpl(v8::MaybeLocal<v8::Object> maybe_options, Property property, Default default_fn) {",
          "13:  auto property_handle = HandleCast<v8::Local<v8::String>>(property, arguments);",
          "",
          "[Added Lines]",
          "11: inline auto ReadOptionImpl(v8::MaybeLocal<v8::Object> maybe_options, Property&& property, Default default_fn) {",
          "13:  auto property_handle = HandleCast<v8::Local<v8::String>>(std::forward<Property>(property), arguments);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: } // namespace detail",
          "37: template <class Type, class Options, class Property>",
          "40: }",
          "42: template <class Type, class Options, class Property>",
          "45: }",
          "47: }",
          "",
          "[Removed Lines]",
          "38: auto ReadOption(Options options, Property property) {",
          "39:  return detail::ReadOptionImpl<Type>(options, property, []() { throw detail::ParamRequired(); });",
          "43: auto ReadOption(Options options, Property property, Type default_value) {",
          "44:  return detail::ReadOptionImpl<Type>(options, property, [&]() { return std::move(default_value); });",
          "",
          "[Added Lines]",
          "38: auto ReadOption(Options options, Property&& property) {",
          "39:  return detail::ReadOptionImpl<Type>(options, std::forward<Property>(property), []() { throw detail::ParamRequired(); });",
          "43: auto ReadOption(Options options, Property&& property, Type default_value) {",
          "44:  return detail::ReadOptionImpl<Type>(options, std::forward<Property>(property), [&]() { return std::move(default_value); });",
          "",
          "---------------"
        ],
        "src/isolate/strings.h||src/isolate/strings.h": [
          "File: src/isolate/strings.h -> src/isolate/strings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   class String {",
          "11:    public:",
          "12:     String(const char* value) : value{value} {} // NOLINT(hicpp-explicit-conversions)",
          "14:     operator v8::Local<v8::Name>() { // NOLINT(hicpp-explicit-conversions)",
          "15:      return v8::Local<v8::String>{*this}.As<v8::Name>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     String(const String&) = delete;",
          "14:     String(String&&) = delete;",
          "15:     ~String() = default;",
          "16:     auto operator=(const String&) = delete;",
          "17:     auto operator=(String&&) = delete;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     v8::Eternal<v8::String> handle;",
          "37:   };",
          "87: };",
          "89: inline auto HandleCastImpl(",
          "",
          "[Removed Lines]",
          "39:   static auto Get();",
          "42:   String arguments = \"arguments\";",
          "43:   String boolean = \"boolean\";",
          "44:   String cachedData = \"cachedData\";",
          "45:   String cachedDataRejected = \"cachedDataRejected\";",
          "46:   String code = \"code\";",
          "47:   String colonSpace = \": \";",
          "48:   String columnOffset = \"columnOffset\";",
          "49:   String copy = \"copy\";",
          "50:   String externalCopy = \"externalCopy\";",
          "51:   String filename = \"filename\";",
          "52:   String function = \"function\";",
          "53:   String global = \"global\";",
          "54:   String inspector = \"inspector\";",
          "55:   String isolateIsDisposed = \"Isolate is disposed\";",
          "56:   String isolatedVm = \"isolated-vm\";",
          "57:   String lineOffset = \"lineOffset\";",
          "58:   String message = \"message\";",
          "59:   String name = \"name\";",
          "60:   String null = \"null\";",
          "61:   String number = \"number\";",
          "62:   String object = \"object\";",
          "63:   String produceCachedData = \"produceCachedData\";",
          "64:   String promise = \"promise\";",
          "65:   String reference = \"reference\";",
          "66:   String release = \"release\";",
          "67:   String result = \"result\";",
          "68:   String snapshot = \"snapshot\";",
          "69:   String stack = \"stack\";",
          "70:   String string = \"string\";",
          "71:   String timeout = \"timeout\";",
          "72:   String transferIn = \"transferIn\";",
          "73:   String transferList = \"transferList\";",
          "74:   String transferOut = \"transferOut\";",
          "75:   String undefined = \"undefined\";",
          "77:   String does_zap_garbage = \"does_zap_garbage\";",
          "78:   String externally_allocated_size = \"externally_allocated_size\";",
          "79:   String heap_size_limit = \"heap_size_limit\";",
          "80:   String malloced_memory = \"malloced_memory\";",
          "81:   String peak_malloced_memory = \"peak_malloced_memory\";",
          "82:   String total_available_size = \"total_available_size\";",
          "83:   String total_heap_size = \"total_heap_size\";",
          "84:   String total_heap_size_executable = \"total_heap_size_executable\";",
          "85:   String total_physical_size = \"total_physical_size\";",
          "86:   String used_heap_size = \"used_heap_size\";",
          "",
          "[Added Lines]",
          "44:   static auto Get() -> auto&;",
          "47:   String arguments{\"arguments\"};",
          "48:   String boolean{\"boolean\"};",
          "49:   String cachedData{\"cachedData\"};",
          "50:   String cachedDataRejected{\"cachedDataRejected\"};",
          "51:   String code{\"code\"};",
          "52:   String colonSpace{\": \"};",
          "53:   String columnOffset{\"columnOffset\"};",
          "54:   String copy{\"copy\"};",
          "55:   String externalCopy{\"externalCopy\"};",
          "56:   String filename{\"filename\"};",
          "57:   String function{\"function\"};",
          "58:   String global{\"global\"};",
          "59:   String inspector{\"inspector\"};",
          "60:   String isolateIsDisposed{\"Isolate is disposed\"};",
          "61:   String isolatedVm{\"isolated-vm\"};",
          "62:   String lineOffset{\"lineOffset\"};",
          "63:   String message{\"message\"};",
          "64:   String name{\"name\"};",
          "65:   String null{\"null\"};",
          "66:   String number{\"number\"};",
          "67:   String object{\"object\"};",
          "68:   String produceCachedData{\"produceCachedData\"};",
          "69:   String promise{\"promise\"};",
          "70:   String reference{\"reference\"};",
          "71:   String release{\"release\"};",
          "72:   String result{\"result\"};",
          "73:   String snapshot{\"snapshot\"};",
          "74:   String stack{\"stack\"};",
          "75:   String string{\"string\"};",
          "76:   String timeout{\"timeout\"};",
          "77:   String transferIn{\"transferIn\"};",
          "78:   String transferList{\"transferList\"};",
          "79:   String transferOut{\"transferOut\"};",
          "80:   String undefined{\"undefined\"};",
          "82:   String does_zap_garbage{\"does_zap_garbage\"};",
          "83:   String externally_allocated_size{\"externally_allocated_size\"};",
          "84:   String heap_size_limit{\"heap_size_limit\"};",
          "85:   String malloced_memory{\"malloced_memory\"};",
          "86:   String peak_malloced_memory{\"peak_malloced_memory\"};",
          "87:   String total_available_size{\"total_available_size\"};",
          "88:   String total_heap_size{\"total_heap_size\"};",
          "89:   String total_heap_size_executable{\"total_heap_size_executable\"};",
          "90:   String total_physical_size{\"total_physical_size\"};",
          "91:   String used_heap_size{\"used_heap_size\"};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: }",
          "94: } // namespace ivm",
          "",
          "[Removed Lines]",
          "96: #include \"environment.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/module/isolate_handle.cc||src/module/isolate_handle.cc": [
          "File: src/module/isolate_handle.cc -> src/module/isolate_handle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:   Isolate* isolate = Isolate::GetCurrent();",
          "314:   Local<Context> context = isolate->GetCurrentContext();",
          "315:   Local<Object> ret = Object::New(isolate);",
          "317:   Unmaybe(ret->Set(context, strings.total_heap_size, Number::New(isolate, heap.total_heap_size())));",
          "318:   Unmaybe(ret->Set(context, strings.total_heap_size_executable, Number::New(isolate, heap.total_heap_size_executable())));",
          "319:   Unmaybe(ret->Set(context, strings.total_physical_size, Number::New(isolate, heap.total_physical_size())));",
          "",
          "[Removed Lines]",
          "316:   auto strings = StringTable::Get();",
          "",
          "[Added Lines]",
          "316:   auto& strings = StringTable::Get();",
          "",
          "---------------"
        ]
      }
    }
  ]
}