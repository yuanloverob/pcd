{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26dc1b30e8f35b26b57a23b659d8f31f9b8492f0",
      "candidate_info": {
        "commit_hash": "26dc1b30e8f35b26b57a23b659d8f31f9b8492f0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/26dc1b30e8f35b26b57a23b659d8f31f9b8492f0",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java"
        ],
        "message": "[AMBARI-24562] Protect the ClusterConfig resource so that only authorized users may have read-only access the data",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java||ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.io.PrintWriter;",
          "34: import java.util.ArrayList;",
          "35: import java.util.Arrays;",
          "36: import java.util.HashMap;",
          "37: import java.util.HashSet;",
          "38: import java.util.LinkedList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.util.EnumSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: import org.apache.ambari.server.controller.spi.SystemException;",
          "65: import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;",
          "66: import org.apache.ambari.server.controller.utilities.PropertyHelper;",
          "67: import org.apache.ambari.server.state.ClientConfigFileDefinition;",
          "68: import org.apache.ambari.server.state.Cluster;",
          "69: import org.apache.ambari.server.state.Clusters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: import org.apache.ambari.server.security.authorization.RoleAuthorization;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:   ClientConfigResourceProvider(@Assisted AmbariManagementController managementController) {",
          "145:     super(Resource.Type.ClientConfig, propertyIds, keyPropertyIds, managementController);",
          "146:     gson = new Gson();",
          "147:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     setRequiredGetAuthorizations(EnumSet.of(RoleAuthorization.HOST_VIEW_CONFIGS, RoleAuthorization.SERVICE_VIEW_CONFIGS, RoleAuthorization.CLUSTER_VIEW_CONFIGS));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   }",
          "161:   @Override",
          "163:           throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {",
          "165:     Set<Resource> resources = new HashSet<>();",
          "",
          "[Removed Lines]",
          "162:   public Set<Resource> getResources(Request request, Predicate predicate)",
          "",
          "[Added Lines]",
          "166:   public Set<Resource> getResourcesAuthorized(Request request, Predicate predicate)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     testCreateResources(TestAuthenticationFactory.createAdministrator());",
          "271:   }",
          "274:   public void testCreateResourcesAsClusterAdministrator() throws Exception {",
          "275:     testCreateResources(TestAuthenticationFactory.createClusterAdministrator());",
          "276:   }",
          "",
          "[Removed Lines]",
          "273:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "273:   @Test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:     testCreateResourcesWithGroups(TestAuthenticationFactory.createAdministrator());",
          "332:   }",
          "335:   public void testCreateResourcesWithGroupsAsClusterAdministrator() throws Exception {",
          "336:     testCreateResourcesWithGroups(TestAuthenticationFactory.createClusterAdministrator());",
          "337:   }",
          "",
          "[Removed Lines]",
          "334:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "334:   @Test",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:     testCreateGlobalTarget(TestAuthenticationFactory.createAdministrator());",
          "408:   }",
          "411:   public void testCreateGlobalTargetAsClusterAdministrator() throws Exception {",
          "412:     testCreateGlobalTarget(TestAuthenticationFactory.createClusterAdministrator());",
          "413:   }",
          "",
          "[Removed Lines]",
          "410:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "410:   @Test",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "473:     testCreateResourceWithRecipientArray(TestAuthenticationFactory.createAdministrator());",
          "474:   }",
          "477:   public void testCreateResourceWithRecipientArrayAsClusterAdministrator() throws Exception {",
          "478:     testCreateResourceWithRecipientArray(TestAuthenticationFactory.createClusterAdministrator());",
          "479:   }",
          "",
          "[Removed Lines]",
          "476:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "476:   @Test",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "537:     testCreateResourceWithAlertStates(TestAuthenticationFactory.createAdministrator());",
          "538:   }",
          "541:   public void testCreateResourceWithAlertStatesAsClusterAdministrator() throws Exception {",
          "542:     testCreateResourceWithAlertStates(TestAuthenticationFactory.createClusterAdministrator());",
          "543:   }",
          "",
          "[Removed Lines]",
          "540:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "540:   @Test",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "604:     testUpdateResources(TestAuthenticationFactory.createAdministrator());",
          "605:   }",
          "608:   public void testUpdateResourcesAsClusterAdministrator() throws Exception {",
          "609:     testUpdateResources(TestAuthenticationFactory.createClusterAdministrator());",
          "610:   }",
          "",
          "[Removed Lines]",
          "607:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "607:   @Test",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "679:     testUpdateResourcesWithGroups(TestAuthenticationFactory.createAdministrator());",
          "680:   }",
          "683:   public void testUpdateResourcesWithGroupsAsClusterAdministrator() throws Exception {",
          "684:     testUpdateResourcesWithGroups(TestAuthenticationFactory.createClusterAdministrator());",
          "685:   }",
          "",
          "[Removed Lines]",
          "682:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "682:   @Test",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "761:     testDeleteResources(TestAuthenticationFactory.createAdministrator());",
          "762:   }",
          "765:   public void testDeleteResourcesAsClusterAdministrator() throws Exception {",
          "766:     testDeleteResources(TestAuthenticationFactory.createClusterAdministrator());",
          "767:   }",
          "",
          "[Removed Lines]",
          "764:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "764:   @Test",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "829:     testOverwriteDirective(TestAuthenticationFactory.createAdministrator());",
          "830:   }",
          "833:   public void testOverwriteDirectiveAsClusterAdministrator() throws Exception {",
          "834:     testOverwriteDirective(TestAuthenticationFactory.createClusterAdministrator());",
          "835:   }",
          "",
          "[Removed Lines]",
          "832:   @Test(expected = AuthorizationException.class)",
          "",
          "[Added Lines]",
          "832:   @Test",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.controller.spi.SystemException;",
          "57: import org.apache.ambari.server.controller.utilities.PredicateBuilder;",
          "58: import org.apache.ambari.server.controller.utilities.PropertyHelper;",
          "59: import org.apache.ambari.server.stack.StackManager;",
          "60: import org.apache.ambari.server.state.ClientConfigFileDefinition;",
          "61: import org.apache.ambari.server.state.Cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.security.TestAuthenticationFactory;",
          "60: import org.apache.ambari.server.security.authorization.AuthorizationException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: import org.apache.ambari.server.state.ValueAttributesInfo;",
          "77: import org.apache.ambari.server.utils.StageUtils;",
          "78: import org.easymock.EasyMock;",
          "79: import org.junit.Assert;",
          "80: import org.junit.Test;",
          "81: import org.junit.runner.RunWith;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: import org.junit.After;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: import org.powermock.api.mockito.PowerMockito;",
          "84: import org.powermock.core.classloader.annotations.PrepareForTest;",
          "85: import org.powermock.modules.junit4.PowerMockRunner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: import org.springframework.security.core.Authentication;",
          "90: import org.springframework.security.core.context.SecurityContextHolder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: @RunWith(PowerMockRunner.class)",
          "91: @PrepareForTest({ClientConfigResourceProvider.class, StageUtils.class})",
          "92: public class ClientConfigResourceProviderTest {",
          "93:   @Test",
          "94:   public void testCreateResources() throws Exception {",
          "95:     Resource.Type type = Resource.Type.ClientConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   @After",
          "99:   public void clearAuthentication() {",
          "100:     SecurityContextHolder.getContext().setAuthentication(null);",
          "101:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:   }",
          "167:   @Test",
          "169:     Resource.Type type = Resource.Type.ClientConfig;",
          "171:     AmbariManagementController managementController = createNiceMock(AmbariManagementController.class);",
          "",
          "[Removed Lines]",
          "168:   public void testGetResources() throws Exception {",
          "",
          "[Added Lines]",
          "178:   public void testGetResourcesForAdministrator() throws Exception {",
          "179:     testGetResources(TestAuthenticationFactory.createAdministrator());",
          "180:   }",
          "182:   @Test",
          "183:   public void testGetResourcesForClusterAdministrator() throws Exception {",
          "184:     testGetResources(TestAuthenticationFactory.createClusterAdministrator());",
          "185:   }",
          "187:   @Test",
          "188:   public void testGetResourcesForClusterOperator() throws Exception {",
          "189:     testGetResources(TestAuthenticationFactory.createClusterOperator());",
          "190:   }",
          "192:   @Test",
          "193:   public void testGetResourcesForServiceAdministrator() throws Exception {",
          "194:     testGetResources(TestAuthenticationFactory.createServiceAdministrator());",
          "195:   }",
          "197:   @Test",
          "198:   public void testGetResourcesForServiceOperator() throws Exception {",
          "199:     testGetResources(TestAuthenticationFactory.createServiceOperator());",
          "200:   }",
          "202:   @Test",
          "203:   public void testGetResourcesForClusterUser() throws Exception {",
          "204:     testGetResources(TestAuthenticationFactory.createClusterUser());",
          "205:   }",
          "207:   @Test(expected = AuthorizationException.class)",
          "208:   public void testGetResourcesForNoRoleUser() throws Exception {",
          "209:     testGetResources(TestAuthenticationFactory.createNoRoleUser());",
          "210:   }",
          "212:   @Test",
          "213:   public void testGetResourcesFromCommonServicesForAdministrator() throws Exception {",
          "214:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createAdministrator());",
          "215:   }",
          "217:   @Test",
          "218:   public void testGetResourcesFromCommonServicesForClusterAdministrator() throws Exception {",
          "219:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createClusterAdministrator());",
          "220:   }",
          "222:   @Test",
          "223:   public void testGetResourcesFromCommonServicesForClusterOperator() throws Exception {",
          "224:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createClusterOperator());",
          "225:   }",
          "227:   @Test",
          "228:   public void testGetResourcesFromCommonServicesForServiceAdministrator() throws Exception {",
          "229:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createServiceAdministrator());",
          "230:   }",
          "232:   @Test",
          "233:   public void testGetResourcesFromCommonServicesForServiceOperator() throws Exception {",
          "234:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createServiceOperator());",
          "235:   }",
          "237:   @Test",
          "238:   public void testGetResourcesFromCommonServicesForClusterUser() throws Exception {",
          "239:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createClusterUser());",
          "240:   }",
          "242:   @Test(expected = AuthorizationException.class)",
          "243:   public void testGetResourcesFromCommonServicesForNoRoleUser() throws Exception {",
          "244:     testGetResourcesFromCommonServices(TestAuthenticationFactory.createNoRoleUser());",
          "245:   }",
          "247:   @Test",
          "248:   public void testDeleteResources() throws Exception {",
          "249:     Resource.Type type = Resource.Type.ClientConfig;",
          "251:     AmbariManagementController managementController = createMock(AmbariManagementController.class);",
          "254:     replay(managementController);",
          "256:     ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(",
          "257:         type,",
          "258:         managementController);",
          "260:     Predicate predicate = new PredicateBuilder().property(",
          "261:         ClientConfigResourceProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HDFS_CLIENT\").toPredicate();",
          "262:     try {",
          "263:       provider.deleteResources(new RequestImpl(null, null, null, null), predicate);",
          "264:       Assert.fail(\"Expected an UnsupportedOperationException\");",
          "265:     } catch (SystemException e) {",
          "267:     }",
          "270:     verify(managementController);",
          "271:   }",
          "273:   private void testGetResources(Authentication authentication) throws Exception {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "370:         runtime, process);",
          "371:     PowerMock.replayAll();",
          "373:     Set<Resource> resources = provider.getResources(request, predicate);",
          "374:     assertFalse(resources.isEmpty());",
          "375:     assertFalse(newFile.exists());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:     SecurityContextHolder.getContext().setAuthentication(authentication);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "381:     PowerMock.verifyAll();",
          "382:   }",
          "386:     Resource.Type type = Resource.Type.ClientConfig;",
          "388:     AmbariManagementController managementController = createNiceMock(AmbariManagementController.class);",
          "",
          "[Removed Lines]",
          "384:   @Test",
          "385:   public void testGetResourcesFromCommonServices() throws Exception {",
          "",
          "[Added Lines]",
          "491:   private void testGetResourcesFromCommonServices(Authentication authentication) throws Exception {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "553:         runtime, process);",
          "554:     PowerMock.replayAll();",
          "556:     Set<Resource> resources = provider.getResources(request, predicate);",
          "557:     assertFalse(resources.isEmpty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     SecurityContextHolder.getContext().setAuthentication(authentication);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "564:   }",
          "593: }",
          "",
          "[Removed Lines]",
          "567:   @Test",
          "568:   public void testDeleteResources() throws Exception {",
          "569:     Resource.Type type = Resource.Type.ClientConfig;",
          "571:     AmbariManagementController managementController = createMock(AmbariManagementController.class);",
          "574:     replay(managementController);",
          "576:     ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(",
          "577:         type,",
          "578:         managementController);",
          "580:     Predicate predicate = new PredicateBuilder().property(",
          "581:         ClientConfigResourceProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"HDFS_CLIENT\").toPredicate();",
          "582:     try {",
          "583:       provider.deleteResources(new RequestImpl(null, null, null, null), predicate);",
          "584:       Assert.fail(\"Expected an UnsupportedOperationException\");",
          "585:     } catch (SystemException e) {",
          "587:     }",
          "590:     verify(managementController);",
          "591:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java||ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java -> ambari-server/src/test/java/org/apache/ambari/server/security/TestAuthenticationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     return createAmbariUserAuthentication(1, name, Collections.singleton(createViewUserGrantedAuthority(viewResourceId)));",
          "96:   }",
          "98:   private static GrantedAuthority createAdministratorGrantedAuthority() {",
          "99:     return new AmbariGrantedAuthority(createAdministratorPrivilegeEntity());",
          "100:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   public static Authentication createNoRoleUser() {",
          "99:     return createNoRoleUser(\"noRoleUser\", 4L);",
          "100:   }",
          "102:   public static Authentication createNoRoleUser(String name, Long clusterResourceId) {",
          "103:     return createAmbariUserAuthentication(1, name, Collections.emptySet());",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:     permissionEntity.setResourceType(createResourceTypeEntity(ResourceType.CLUSTER));",
          "175:     permissionEntity.setPrincipal(createPrincipalEntity(2L));",
          "176:     permissionEntity.addAuthorizations(EnumSet.of(",
          "210:         RoleAuthorization.SERVICE_VIEW_STATUS_INFO,",
          "211:         RoleAuthorization.SERVICE_VIEW_OPERATIONAL_LOGS,",
          "213:         RoleAuthorization.SERVICE_MANAGE_AUTO_START,",
          "214:         RoleAuthorization.CLUSTER_MANAGE_AUTO_START,",
          "216:     return permissionEntity;",
          "217:   }",
          "",
          "[Removed Lines]",
          "177:         RoleAuthorization.CLUSTER_MANAGE_CREDENTIALS,",
          "178:         RoleAuthorization.CLUSTER_MODIFY_CONFIGS,",
          "179:         RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS,",
          "180:         RoleAuthorization.CLUSTER_TOGGLE_ALERTS,",
          "181:         RoleAuthorization.CLUSTER_MANAGE_ALERTS,",
          "182:         RoleAuthorization.CLUSTER_TOGGLE_KERBEROS,",
          "183:         RoleAuthorization.CLUSTER_UPGRADE_DOWNGRADE_STACK,",
          "184:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "185:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "186:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "187:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "188:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "189:         RoleAuthorization.HOST_ADD_DELETE_COMPONENTS,",
          "190:         RoleAuthorization.HOST_ADD_DELETE_HOSTS,",
          "191:         RoleAuthorization.HOST_TOGGLE_MAINTENANCE,",
          "192:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "193:         RoleAuthorization.HOST_VIEW_METRICS,",
          "194:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "195:         RoleAuthorization.SERVICE_ADD_DELETE_SERVICES,",
          "196:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "197:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "198:         RoleAuthorization.SERVICE_ENABLE_HA,",
          "199:         RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS,",
          "200:         RoleAuthorization.SERVICE_MODIFY_CONFIGS,",
          "201:         RoleAuthorization.SERVICE_MOVE,",
          "202:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "203:         RoleAuthorization.SERVICE_RUN_SERVICE_CHECK,",
          "204:         RoleAuthorization.SERVICE_START_STOP,",
          "205:         RoleAuthorization.SERVICE_TOGGLE_ALERTS,",
          "206:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "207:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "208:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "209:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "212:         RoleAuthorization.CLUSTER_RUN_CUSTOM_COMMAND,",
          "215:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA));",
          "",
          "[Added Lines]",
          "187:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "188:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "189:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "190:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "191:         RoleAuthorization.SERVICE_TOGGLE_ALERTS,",
          "192:         RoleAuthorization.SERVICE_START_STOP,",
          "193:         RoleAuthorization.SERVICE_SET_SERVICE_USERS_GROUPS,",
          "194:         RoleAuthorization.SERVICE_RUN_SERVICE_CHECK,",
          "195:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "196:         RoleAuthorization.SERVICE_MOVE,",
          "197:         RoleAuthorization.SERVICE_MODIFY_CONFIGS,",
          "198:         RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS,",
          "200:         RoleAuthorization.SERVICE_MANAGE_ALERTS,",
          "201:         RoleAuthorization.SERVICE_ENABLE_HA,",
          "202:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "203:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "204:         RoleAuthorization.SERVICE_ADD_DELETE_SERVICES,",
          "205:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "206:         RoleAuthorization.HOST_VIEW_METRICS,",
          "207:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "208:         RoleAuthorization.HOST_TOGGLE_MAINTENANCE,",
          "209:         RoleAuthorization.HOST_ADD_DELETE_HOSTS,",
          "210:         RoleAuthorization.HOST_ADD_DELETE_COMPONENTS,",
          "211:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "212:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "213:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "214:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "215:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "216:         RoleAuthorization.CLUSTER_UPGRADE_DOWNGRADE_STACK,",
          "217:         RoleAuthorization.CLUSTER_TOGGLE_KERBEROS,",
          "218:         RoleAuthorization.CLUSTER_TOGGLE_ALERTS,",
          "219:         RoleAuthorization.CLUSTER_RUN_CUSTOM_COMMAND,",
          "220:         RoleAuthorization.CLUSTER_MODIFY_CONFIGS,",
          "221:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA,",
          "222:         RoleAuthorization.CLUSTER_MANAGE_CREDENTIALS,",
          "223:         RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS,",
          "225:         RoleAuthorization.CLUSTER_MANAGE_ALERTS,",
          "226:         RoleAuthorization.CLUSTER_MANAGE_ALERT_NOTIFICATIONS",
          "227:     ));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:     permissionEntity.setResourceType(createResourceTypeEntity(ResourceType.CLUSTER));",
          "223:     permissionEntity.setPrincipal(createPrincipalEntity(3L));",
          "224:     permissionEntity.addAuthorizations(EnumSet.of(",
          "236:         RoleAuthorization.SERVICE_VIEW_STATUS_INFO,",
          "239:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "243:         RoleAuthorization.SERVICE_RUN_SERVICE_CHECK,",
          "244:         RoleAuthorization.SERVICE_MODIFY_CONFIGS,",
          "247:         RoleAuthorization.HOST_ADD_DELETE_HOSTS,",
          "249:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "253:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA,",
          "258:     return permissionEntity;",
          "259:   }",
          "",
          "[Removed Lines]",
          "225:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "226:         RoleAuthorization.HOST_ADD_DELETE_COMPONENTS,",
          "227:         RoleAuthorization.HOST_VIEW_METRICS,",
          "228:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "229:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "230:         RoleAuthorization.SERVICE_MANAGE_ALERTS,",
          "231:         RoleAuthorization.SERVICE_ENABLE_HA,",
          "232:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "233:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "234:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "235:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "237:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "238:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "240:         RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS,",
          "241:         RoleAuthorization.SERVICE_TOGGLE_ALERTS,",
          "242:         RoleAuthorization.SERVICE_MOVE,",
          "245:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "246:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "248:         RoleAuthorization.SERVICE_START_STOP,",
          "250:         RoleAuthorization.HOST_TOGGLE_MAINTENANCE,",
          "251:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "252:         RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS,",
          "254:         RoleAuthorization.SERVICE_VIEW_OPERATIONAL_LOGS,",
          "255:         RoleAuthorization.SERVICE_MANAGE_AUTO_START,",
          "256:         RoleAuthorization.CLUSTER_MANAGE_AUTO_START,",
          "257:         RoleAuthorization.CLUSTER_MANAGE_CREDENTIALS));",
          "",
          "[Added Lines]",
          "238:         RoleAuthorization.SERVICE_VIEW_OPERATIONAL_LOGS,",
          "239:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "240:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "242:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "243:         RoleAuthorization.SERVICE_START_STOP,",
          "245:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "246:         RoleAuthorization.SERVICE_MOVE,",
          "248:         RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS,",
          "249:         RoleAuthorization.SERVICE_MANAGE_AUTO_START,",
          "250:         RoleAuthorization.SERVICE_ENABLE_HA,",
          "251:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "252:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "253:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "254:         RoleAuthorization.HOST_VIEW_METRICS,",
          "255:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "256:         RoleAuthorization.HOST_TOGGLE_MAINTENANCE,",
          "258:         RoleAuthorization.HOST_ADD_DELETE_COMPONENTS,",
          "259:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "260:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "261:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "262:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "265:         RoleAuthorization.CLUSTER_MANAGE_CREDENTIALS,",
          "266:         RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS,",
          "267:         RoleAuthorization.CLUSTER_MANAGE_AUTO_START",
          "268:     ));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:     permissionEntity.setResourceType(createResourceTypeEntity(ResourceType.CLUSTER));",
          "265:     permissionEntity.setPrincipal(createPrincipalEntity(4L));",
          "266:     permissionEntity.addAuthorizations(EnumSet.of(",
          "290:         RoleAuthorization.SERVICE_VIEW_STATUS_INFO,",
          "291:         RoleAuthorization.SERVICE_VIEW_OPERATIONAL_LOGS,",
          "292:         RoleAuthorization.SERVICE_MANAGE_AUTO_START,",
          "294:     return permissionEntity;",
          "295:   }",
          "",
          "[Removed Lines]",
          "267:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "268:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "269:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "270:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "271:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "272:         RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS,",
          "273:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "274:         RoleAuthorization.HOST_VIEW_METRICS,",
          "275:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "276:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "277:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "278:         RoleAuthorization.SERVICE_ENABLE_HA,",
          "279:         RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS,",
          "280:         RoleAuthorization.SERVICE_MODIFY_CONFIGS,",
          "281:         RoleAuthorization.SERVICE_MOVE,",
          "282:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "283:         RoleAuthorization.SERVICE_RUN_SERVICE_CHECK,",
          "284:         RoleAuthorization.SERVICE_START_STOP,",
          "285:         RoleAuthorization.SERVICE_TOGGLE_ALERTS,",
          "286:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "287:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "288:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "289:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "293:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA));",
          "",
          "[Added Lines]",
          "280:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "281:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "282:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "283:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "284:         RoleAuthorization.SERVICE_START_STOP,",
          "285:         RoleAuthorization.SERVICE_RUN_SERVICE_CHECK,",
          "286:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "287:         RoleAuthorization.SERVICE_MODIFY_CONFIGS,",
          "288:         RoleAuthorization.SERVICE_MANAGE_CONFIG_GROUPS,",
          "290:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "291:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "292:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "293:         RoleAuthorization.HOST_VIEW_METRICS,",
          "294:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "295:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "296:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "297:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "298:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "299:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "300:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA,",
          "301:         RoleAuthorization.CLUSTER_MANAGE_CONFIG_GROUPS",
          "302:     ));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300:     permissionEntity.setResourceType(createResourceTypeEntity(ResourceType.CLUSTER));",
          "301:     permissionEntity.setPrincipal(createPrincipalEntity(5L));",
          "302:     permissionEntity.addAuthorizations(EnumSet.of(",
          "305:         RoleAuthorization.SERVICE_VIEW_STATUS_INFO,",
          "307:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "308:         RoleAuthorization.SERVICE_START_STOP,",
          "311:         RoleAuthorization.SERVICE_RUN_SERVICE_CHECK,",
          "314:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "318:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "319:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA",
          "320:     ));",
          "321:     return permissionEntity;",
          "",
          "[Removed Lines]",
          "303:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "304:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "306:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "309:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "310:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "312:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "313:         RoleAuthorization.HOST_VIEW_METRICS,",
          "315:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "316:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "317:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "",
          "[Added Lines]",
          "313:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "314:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "316:         RoleAuthorization.SERVICE_TOGGLE_MAINTENANCE,",
          "319:         RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND,",
          "320:         RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION,",
          "321:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "323:         RoleAuthorization.HOST_VIEW_METRICS,",
          "324:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "326:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "327:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "328:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "329:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "327:     permissionEntity.setResourceType(createResourceTypeEntity(ResourceType.CLUSTER));",
          "328:     permissionEntity.setPrincipal(createPrincipalEntity(6L));",
          "329:     permissionEntity.addAuthorizations(EnumSet.of(",
          "332:         RoleAuthorization.SERVICE_VIEW_STATUS_INFO,",
          "334:         RoleAuthorization.SERVICE_VIEW_ALERTS,",
          "337:         RoleAuthorization.HOST_VIEW_STATUS_INFO,",
          "341:         RoleAuthorization.CLUSTER_VIEW_STATUS_INFO,",
          "342:         RoleAuthorization.CLUSTER_MANAGE_USER_PERSISTED_DATA",
          "343:     ));",
          "344:     return permissionEntity;",
          "345:   }",
          "",
          "[Removed Lines]",
          "330:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "331:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "333:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "335:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "336:         RoleAuthorization.HOST_VIEW_METRICS,",
          "338:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "339:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "340:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "",
          "[Added Lines]",
          "342:         RoleAuthorization.SERVICE_VIEW_METRICS,",
          "343:         RoleAuthorization.SERVICE_VIEW_CONFIGS,",
          "345:         RoleAuthorization.SERVICE_COMPARE_CONFIGS,",
          "347:         RoleAuthorization.HOST_VIEW_METRICS,",
          "348:         RoleAuthorization.HOST_VIEW_CONFIGS,",
          "350:         RoleAuthorization.CLUSTER_VIEW_STACK_DETAILS,",
          "351:         RoleAuthorization.CLUSTER_VIEW_METRICS,",
          "352:         RoleAuthorization.CLUSTER_VIEW_CONFIGS,",
          "353:         RoleAuthorization.CLUSTER_VIEW_ALERTS,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "116fa4c8653be425a10fa7c31d217577fed7055a",
      "candidate_info": {
        "commit_hash": "116fa4c8653be425a10fa7c31d217577fed7055a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/116fa4c8653be425a10fa7c31d217577fed7055a",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java"
        ],
        "message": "AMBARI-25409. Support basic auth for repositories. (#3118)\n\n* AMBARI-25409. Support basic auth for repositories. (mpapirkovskyy)\n\n* AMBARI-25409. Support basic auth for repositories. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java||ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java||ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java||ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java||ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java||ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/CommandRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.ambari.server.orm.entities.RepoDefinitionEntity;",
          "28: import org.apache.ambari.server.state.RepositoryInfo;",
          "29: import org.apache.ambari.server.state.stack.RepoTag;",
          "30: import org.apache.commons.lang.StringUtils;",
          "31: import org.apache.commons.lang.builder.ToStringBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:           .append(\"distribution\", m_distribution)",
          "350:           .append(\"components\", m_components)",
          "351:           .append(\"id\", m_repoId)",
          "353:           .append(\"applicableServices\", (m_applicableServices != null? StringUtils.join(m_applicableServices, \",\") : \"\"))",
          "354:           .toString();",
          "355:     }",
          "",
          "[Removed Lines]",
          "352:           .append(\"baseUrl\", m_baseUrl)",
          "",
          "[Added Lines]",
          "353:           .append(\"baseUrl\", URLCredentialsHider.hideCredentials(m_baseUrl))",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: import org.apache.ambari.server.topology.Setting;",
          "239: import org.apache.ambari.server.utils.SecretReference;",
          "240: import org.apache.ambari.server.utils.StageUtils;",
          "241: import org.apache.commons.collections.CollectionUtils;",
          "242: import org.apache.commons.collections.MapUtils;",
          "243: import org.apache.commons.io.IOUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4506:           IOUtils.readLines(usp.readFrom(spec));",
          "4507:         } catch (IOException ioe) {",
          "4508:           e = ioe;",
          "4510:           if (LOG.isDebugEnabled()) {",
          "4511:             errorMessage += ioe;",
          "4512:           } else {",
          "",
          "[Removed Lines]",
          "4509:           errorMessage = \"Could not access base url . \" + request.getBaseUrl() + \" . \";",
          "",
          "[Added Lines]",
          "4510:           errorMessage = String.format(\"Could not access base url '%s'\",",
          "4511:                                        URLCredentialsHider.hideCredentials(request.getBaseUrl()));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java||ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.controller;",
          "21: public class RepositoryRequest extends OperatingSystemRequest {",
          "23:   private String repoId;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   @Override",
          "105:   public String toString() {",
          "107:         + \", verify=\" + verify + \", getOsType()=\" + getOsType()",
          "108:         + \", getRepositoryVersionId()=\" + getRepositoryVersionId()",
          "109:         + \", getStackVersion()=\" + getStackVersion() + \", getStackName()=\"",
          "",
          "[Removed Lines]",
          "106:     return \"RepositoryRequest [repoId=\" + repoId + \", baseUrl=\" + baseUrl",
          "",
          "[Added Lines]",
          "108:     return \"RepositoryRequest [repoId=\" + repoId + \", baseUrl=\" + URLCredentialsHider.hideCredentials(baseUrl)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.ambari.server.controller.spi.SystemException;",
          "45: import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;",
          "46: import org.apache.ambari.server.controller.utilities.PropertyHelper;",
          "47: import org.apache.commons.lang.BooleanUtils;",
          "49: public class RepositoryResourceProvider extends AbstractControllerResourceProvider {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:         setResourceProperty(resource, REPOSITORY_REPO_NAME_PROPERTY_ID, response.getRepoName(), requestedIds);",
          "179:         setResourceProperty(resource, REPOSITORY_DISTRIBUTION_PROPERTY_ID, response.getDistribution(), requestedIds);",
          "180:         setResourceProperty(resource, REPOSITORY_COMPONENTS_PROPERTY_ID, response.getComponents(), requestedIds);",
          "182:         setResourceProperty(resource, REPOSITORY_OS_TYPE_PROPERTY_ID, response.getOsType(), requestedIds);",
          "183:         setResourceProperty(resource, REPOSITORY_REPO_ID_PROPERTY_ID, response.getRepoId(), requestedIds);",
          "184:         setResourceProperty(resource, REPOSITORY_MIRRORS_LIST_PROPERTY_ID, response.getMirrorsList(), requestedIds);",
          "186:         setResourceProperty(resource, REPOSITORY_UNIQUE_PROPERTY_ID, response.isUnique(), requestedIds);",
          "187:         setResourceProperty(resource, REPOSITORY_TAGS_PROPERTY_ID, response.getTags(), requestedIds);",
          "188:         setResourceProperty(resource, REPOSITORY_APPLICABLE_SERVICES_PROPERTY_ID, response.getApplicableServices(), requestedIds);",
          "",
          "[Removed Lines]",
          "181:         setResourceProperty(resource, REPOSITORY_BASE_URL_PROPERTY_ID, response.getBaseUrl(), requestedIds);",
          "185:         setResourceProperty(resource, REPOSITORY_DEFAULT_BASE_URL_PROPERTY_ID, response.getDefaultBaseUrl(), requestedIds);",
          "",
          "[Added Lines]",
          "182:         setResourceProperty(resource, REPOSITORY_BASE_URL_PROPERTY_ID, URLCredentialsHider.hideCredentials(response.getBaseUrl()), requestedIds);",
          "186:         setResourceProperty(resource, REPOSITORY_DEFAULT_BASE_URL_PROPERTY_ID, URLCredentialsHider.hideCredentials(response.getDefaultBaseUrl()), requestedIds);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: import org.apache.ambari.server.state.repository.ManifestServiceInfo;",
          "65: import org.apache.ambari.server.state.repository.VersionDefinitionXml;",
          "66: import org.apache.ambari.server.state.stack.upgrade.RepositoryVersionHelper;",
          "67: import org.apache.commons.collections.CollectionUtils;",
          "68: import org.apache.commons.lang.ObjectUtils;",
          "69: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:       for (RepoDefinitionEntity repositoryEntity : os.getRepoDefinitionEntities()) {",
          "479:         String baseUrl = repositoryEntity.getBaseUrl();",
          "480:         if (!skipUrlCheck && os.isAmbariManaged() && existingRepoUrls.contains(baseUrl)) {",
          "482:                   \"Setting up base urls that contain the same versions of components will cause stack upgrade to fail.\");",
          "483:         }",
          "484:       }",
          "",
          "[Removed Lines]",
          "481:           throw new AmbariException(\"Base url \" + baseUrl + \" is already defined for another repository version. \" +",
          "",
          "[Added Lines]",
          "482:           throw new AmbariException(\"Base url \" + URLCredentialsHider.hideCredentials(baseUrl) +",
          "483:                                       \" is already defined for another repository version. \" +",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.ambari.server.configuration.ComponentSSLConfiguration;",
          "39: import org.apache.ambari.server.controller.utilities.StreamProvider;",
          "40: import org.apache.commons.io.IOUtils;",
          "41: import org.apache.http.HttpStatus;",
          "42: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "41: import org.apache.commons.codec.binary.Base64;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   public static final String COOKIE = \"Cookie\";",
          "51:   private static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";",
          "52:   private static final String NEGOTIATE = \"Negotiate\";",
          "53:   private static final Logger LOG = LoggerFactory.getLogger(URLStreamProvider.class);",
          "55:   private boolean setupTruststoreForHttps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:   private static final String AUTHORIZATION = \"Authorization\";",
          "56:   private static final String BASIC_AUTH = \"Basic %s\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:   public HttpURLConnection processURL(String spec, String requestMethod, byte[] body, Map<String, List<String>> headers)",
          "176:           throws IOException {",
          "177:     if (LOG.isDebugEnabled()) {",
          "179:     }",
          "181:     HttpURLConnection connection = (spec.startsWith(\"https\") && this.setupTruststoreForHttps) ?",
          "184:     AppCookieManager appCookieManager = getAppCookieManager();",
          "186:     String appCookie = appCookieManager.getCachedAppCookie(spec);",
          "187:     if (appCookie != null) {",
          "191:       if (headers == null || headers.isEmpty()) {",
          "",
          "[Removed Lines]",
          "178:       LOG.debug(\"readFrom spec:{}\", spec);",
          "182:             getSSLConnection(spec) : getConnection(spec);",
          "188:       LOG.debug(\"Using cached app cookie for URL:{}\", spec);",
          "",
          "[Added Lines]",
          "182:       LOG.debug(\"readFrom spec:{}\", URLCredentialsHider.hideCredentials(spec));",
          "185:     URL url = new URL(spec);",
          "187:             getSSLConnection(spec) : getConnection(url);",
          "193:       LOG.debug(\"Using cached app cookie for URL:{}\", URLCredentialsHider.hideCredentials(spec));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:       connection.getOutputStream().write(body);",
          "216:     }",
          "218:     int statusCode = connection.getResponseCode();",
          "219:     if (statusCode == HttpStatus.SC_UNAUTHORIZED ) {",
          "220:       String wwwAuthHeader = connection.getHeaderField(WWW_AUTHENTICATE);",
          "221:       if (LOG.isInfoEnabled()) {",
          "223:       }",
          "224:       if (wwwAuthHeader != null &&",
          "225:         wwwAuthHeader.trim().startsWith(NEGOTIATE)) {",
          "226:         connection = spec.startsWith(\"https\") ?",
          "228:         appCookie = appCookieManager.getAppCookie(spec, true);",
          "229:         connection.setRequestProperty(COOKIE, appCookie);",
          "230:         connection.setConnectTimeout(connTimeout);",
          "",
          "[Removed Lines]",
          "222:         LOG.info(\"Received WWW-Authentication header:\" + wwwAuthHeader + \", for URL:\" + spec);",
          "227:            getSSLConnection(spec) : getConnection(spec);",
          "",
          "[Added Lines]",
          "223:     if (url.getUserInfo() != null) {",
          "224:       String basicAuth = String.format(BASIC_AUTH, new String(new Base64().encode(url.getUserInfo().getBytes())));",
          "225:       connection.setRequestProperty(AUTHORIZATION, basicAuth);",
          "226:     }",
          "232:         LOG.info(\"Received WWW-Authentication header:\" + wwwAuthHeader + \", for URL:\" +",
          "233:                    URLCredentialsHider.hideCredentials(spec));",
          "238:            getSSLConnection(spec) : getConnection(url);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:       } else {",
          "239:         return connection;",
          "240:       }",
          "241:     } else {",
          "244:         if (statusCode == HttpStatus.SC_NOT_FOUND || statusCode == HttpStatus.SC_FORBIDDEN){",
          "246:         }",
          "247:         return connection;",
          "248:     }",
          "",
          "[Removed Lines]",
          "238:         LOG.error(\"Unsupported WWW-Authentication header:\" + wwwAuthHeader+ \", for URL:\" + spec);",
          "245:           LOG.error(String.format(\"Received HTTP %s response from URL: %s\", statusCode, spec));",
          "",
          "[Added Lines]",
          "249:         LOG.error(\"Unsupported WWW-Authentication header:\" + wwwAuthHeader+ \", for URL:\" +",
          "250:                     URLCredentialsHider.hideCredentials(spec));",
          "257:           LOG.error(String.format(\"Received HTTP %s response from URL: %s\", statusCode,",
          "258:                                   URLCredentialsHider.hideCredentials(spec)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:   }",
          "",
          "[Removed Lines]",
          "282:   protected HttpURLConnection getConnection(String spec) throws IOException {",
          "283:     return (HttpURLConnection) new URL(spec).openConnection();",
          "",
          "[Added Lines]",
          "295:   protected HttpURLConnection getConnection(URL url) throws IOException {",
          "296:     return (HttpURLConnection) url.openConnection();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "293:           if (trustStorePath == null || trustStorePassword == null) {",
          "294:             String msg =",
          "297:             LOG.error(msg);",
          "298:             throw new IllegalStateException(msg);",
          "",
          "[Removed Lines]",
          "295:                 String.format(\"Can't get secure connection to %s.  Truststore path or password is not set.\", spec);",
          "",
          "[Added Lines]",
          "308:                 String.format(\"Can't get secure connection to %s.  Truststore path or password is not set.\",",
          "309:                               URLCredentialsHider.hideCredentials(spec));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.ambari.annotations.ExperimentalFeature;",
          "28: import org.apache.ambari.server.controller.RepositoryResponse;",
          "29: import org.apache.ambari.server.state.stack.RepoTag;",
          "30: import org.apache.commons.lang.StringUtils;",
          "32: import com.google.common.base.Function;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:     return \"[ repoInfo: \"",
          "197:         + \", osType=\" + osType",
          "198:         + \", repoId=\" + repoId",
          "200:         + \", repoName=\" + repoName",
          "201:         + \", distribution=\" + distribution",
          "202:         + \", components=\" + components",
          "",
          "[Removed Lines]",
          "199:         + \", baseUrl=\" + baseUrl",
          "",
          "[Added Lines]",
          "200:         + \", baseUrl=\" + URLCredentialsHider.hideCredentials(baseUrl)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:     }",
          "468:   }",
          "",
          "[Removed Lines]",
          "482:   @Deprecated",
          "483:   public String getRepoInfo(Cluster cluster, ServiceComponent component, Host host) throws SystemException {",
          "484:     final JsonArray jsonList = getBaseUrls(cluster, component, host);",
          "485:     final RepositoryVersionEntity rve = getRepositoryVersionEntity(cluster, component);",
          "487:     if (null == rve || null == jsonList) {",
          "488:       return \"\";",
          "489:     }",
          "491:     final JsonArray result = new JsonArray();",
          "493:     for (JsonElement e : jsonList) {",
          "494:       JsonObject obj = e.getAsJsonObject();",
          "496:       String repoId = obj.has(\"repoId\") ? obj.get(\"repoId\").getAsString() : null;",
          "497:       String repoName = obj.has(\"repoName\") ? obj.get(\"repoName\").getAsString() : null;",
          "498:       String baseUrl = obj.has(\"baseUrl\") ? obj.get(\"baseUrl\").getAsString() : null;",
          "499:       String osType = obj.has(\"osType\") ? obj.get(\"osType\").getAsString() : null;",
          "501:       if (null == repoId || null == baseUrl || null == osType || null == repoName) {",
          "502:         continue;",
          "503:       }",
          "505:       for (RepoOsEntity ose : rve.getRepoOsEntities()) {",
          "506:         if (ose.getFamily().equals(osType) && ose.isAmbariManaged()) {",
          "507:           for (RepoDefinitionEntity re : ose.getRepoDefinitionEntities()) {",
          "508:             if (re.getRepoName().equals(repoName) &&",
          "509:               !re.getBaseUrl().equals(baseUrl)) {",
          "510:               obj.addProperty(\"baseUrl\", re.getBaseUrl());",
          "511:             }",
          "512:           }",
          "513:           result.add(e);",
          "514:         }",
          "515:       }",
          "516:     }",
          "517:     return result.toString();",
          "518:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java||ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java -> ambari-server/src/main/java/org/apache/ambari/server/utils/URLCredentialsHider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.utils;",
          "21: import java.net.MalformedURLException;",
          "22: import java.net.URL;",
          "24: import org.apache.commons.lang3.StringUtils;",
          "29: public class URLCredentialsHider {",
          "30:   public static final String INVALID_URL = \"invalid_url\";",
          "31:   public static final String HIDDEN_USER = \"****\";",
          "32:   public static final String HIDDEN_CREDENTIALS = HIDDEN_USER + \":\" + HIDDEN_USER;",
          "34:   public static String hideCredentials(String urlString) {",
          "35:     if (StringUtils.isEmpty(urlString)) {",
          "36:       return urlString;",
          "37:     }",
          "38:     URL url;",
          "39:     try {",
          "40:       url = new URL(urlString);",
          "41:     } catch (MalformedURLException e) {",
          "43:       return INVALID_URL;",
          "44:     }",
          "45:     String userInfo = url.getUserInfo();",
          "46:     if (StringUtils.isNotEmpty(userInfo)) {",
          "47:       if (userInfo.contains(\":\")) {",
          "48:         return urlString.replaceFirst(userInfo, HIDDEN_CREDENTIALS);",
          "49:       } else {",
          "50:         return urlString.replaceFirst(userInfo, HIDDEN_USER);",
          "51:       }",
          "52:     }",
          "53:     return urlString;",
          "54:   }",
          "55: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/URLStreamProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import static org.easymock.EasyMock.verify;",
          "27: import java.net.HttpURLConnection;",
          "28: import java.util.Collections;",
          "29: import java.util.HashMap;",
          "30: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.net.URL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         withConstructor(Integer.TYPE, Integer.TYPE, String.class, String.class, String.class).",
          "48:         withArgs(1000, 1000, \"path\", \"password\", \"type\").",
          "49:         addMockedMethod(\"getAppCookieManager\").",
          "51:         createMock();",
          "53:     expect(urlStreamProvider.getAppCookieManager()).andReturn(appCookieManager).anyTimes();",
          "56:     Map<String, List<String>> headerMap = new HashMap<>();",
          "57:     headerMap.put(\"Header1\", Collections.singletonList(\"value\"));",
          "58:     headerMap.put(\"Cookie\", Collections.singletonList(\"FOO=bar\"));",
          "62:     connection.setConnectTimeout(1000);",
          "63:     connection.setReadTimeout(1000);",
          "",
          "[Removed Lines]",
          "50:         addMockedMethod(\"getConnection\", String.class).",
          "54:     expect(urlStreamProvider.getConnection(\"spec\")).andReturn(connection);",
          "60:     expect(appCookieManager.getCachedAppCookie(\"spec\")).andReturn(\"APPCOOKIE=abcdef\");",
          "",
          "[Added Lines]",
          "51:         addMockedMethod(\"getConnection\", URL.class).",
          "54:     String fakeURL = \"http://fakehost\";",
          "55:     URL url = new URL(fakeURL);",
          "58:     expect(urlStreamProvider.getConnection(url)).andReturn(connection);",
          "64:     expect(appCookieManager.getCachedAppCookie(fakeURL)).andReturn(\"APPCOOKIE=abcdef\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     replay(urlStreamProvider, connection, appCookieManager);",
          "73:     verify(urlStreamProvider, connection, appCookieManager);",
          "74:   }",
          "",
          "[Removed Lines]",
          "71:     Assert.assertEquals(connection, urlStreamProvider.processURL(\"spec\", \"GET\", (String) null, headerMap));",
          "",
          "[Added Lines]",
          "75:     Assert.assertEquals(connection, urlStreamProvider.processURL(fakeURL, \"GET\", (String) null, headerMap));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         withConstructor(Integer.TYPE, Integer.TYPE, String.class, String.class, String.class).",
          "81:         withArgs(1000, 1000, null, null, null).",
          "82:         addMockedMethod(\"getAppCookieManager\").",
          "84:         createMock();",
          "86:     Map<String, List<String>> headerMap = new HashMap<>();",
          "",
          "[Removed Lines]",
          "83:         addMockedMethod(\"getConnection\", String.class).",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java||ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/utils/URLCredentialsHiderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.utils;",
          "21: import org.junit.Assert;",
          "22: import org.junit.Test;",
          "24: public class URLCredentialsHiderTest {",
          "26:   @Test",
          "27:   public void testHideUserInfo() {",
          "29:     String testURL1 = \"http://user01:pass@host:8443/api/v1\";",
          "30:     Assert.assertEquals(String.format(\"http://%s@host:8443/api/v1\", URLCredentialsHider.HIDDEN_CREDENTIALS),",
          "31:                         URLCredentialsHider.hideCredentials(testURL1));",
          "33:     String testURL2 = \"http://user01@host:8443/api/v1\";",
          "34:     Assert.assertEquals(String.format(\"http://%s@host:8443/api/v1\",",
          "35:                                       URLCredentialsHider.HIDDEN_USER),",
          "36:                         URLCredentialsHider.hideCredentials(testURL2));",
          "38:     String invalidURL = \"htt://user01:pass@host:8443/api/v1\";",
          "39:     Assert.assertEquals(URLCredentialsHider.INVALID_URL, URLCredentialsHider.hideCredentials(invalidURL));",
          "40:   }",
          "41: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13bc515d0c934f0ed6b6f502b5cc731983114ff8",
      "candidate_info": {
        "commit_hash": "13bc515d0c934f0ed6b6f502b5cc731983114ff8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/13bc515d0c934f0ed6b6f502b5cc731983114ff8",
        "files": [
          "ambari-web/app/controllers/main/host/details.js",
          "ambari-web/test/controllers/main/host/details_test.js"
        ],
        "message": "AMBARI-25182. Add 'hadoop.kms.authentication.zk-dt-secret-manager.enable' property during multiple Ranger KMS",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js",
          "ambari-web/test/controllers/main/host/details_test.js||ambari-web/test/controllers/main/host/details_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1450:           notHaValue: 'true',",
          "1451:           haValue: 'false'",
          "1452:         },",
          "1453:         {",
          "1454:           name: 'hadoop.kms.cache.timeout.ms',",
          "1455:           notHaValue: '600000',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1453:         {",
          "1454:           name: 'hadoop.kms.authentication.zk-dt-secret-manager.enable',",
          "1455:           notHaValue: 'false',",
          "1456:           haValue: 'true'",
          "1457:         },",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/main/host/details_test.js||ambari-web/test/controllers/main/host/details_test.js": [
          "File: ambari-web/test/controllers/main/host/details_test.js -> ambari-web/test/controllers/main/host/details_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3445:             properties: {",
          "3446:               'kms-site': {",
          "3447:                 'hadoop.kms.cache.enable': 'true',",
          "3448:                 'hadoop.kms.cache.timeout.ms': '600000',",
          "3449:                 'hadoop.kms.current.key.cache.timeout.ms': '30000',",
          "3450:                 'hadoop.kms.authentication.signer.secret.provider': 'random',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3448:                 'hadoop.kms.authentication.zk-dt-secret-manager.enable': 'false',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3478:             properties: {",
          "3479:               'kms-site': {",
          "3480:                 'hadoop.kms.cache.enable': 'false',",
          "3481:                 'hadoop.kms.cache.timeout.ms': '0',",
          "3482:                 'hadoop.kms.current.key.cache.timeout.ms': '0',",
          "3483:                 'hadoop.kms.authentication.signer.secret.provider': 'zookeeper',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3482:                 'hadoop.kms.authentication.zk-dt-secret-manager.enable': 'true',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf4028dd3cfda495798334b100c9064e2c52f18",
      "candidate_info": {
        "commit_hash": "6cf4028dd3cfda495798334b100c9064e2c52f18",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6cf4028dd3cfda495798334b100c9064e2c52f18",
        "files": [
          "ambari-web/app/controllers/main/service/reassign/step4_controller.js"
        ],
        "message": "[AMBARI-24779] Move Namenode operation fails as it tries to install and start ZKFailoverController on non-HA cluster.",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/reassign/step4_controller.js||ambari-web/app/controllers/main/service/reassign/step4_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/reassign/step4_controller.js||ambari-web/app/controllers/main/service/reassign/step4_controller.js": [
          "File: ambari-web/app/controllers/main/service/reassign/step4_controller.js -> ambari-web/app/controllers/main/service/reassign/step4_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     var dependenciesToInstall = App.StackServiceComponent.find(componentName)",
          "122:         .get('dependencies')",
          "123:         .filter(function (component) {",
          "125:         })",
          "126:         .mapProperty('componentName');",
          "127:     this.set('dependentHostComponents', dependenciesToInstall);",
          "",
          "[Removed Lines]",
          "124:           return !(component.scope == 'host' ? hostInstalledComponents : clusterInstalledComponents).contains(component.componentName) && (installedServices.contains(component.serviceName));",
          "",
          "[Added Lines]",
          "124:           return !(component.scope == 'host' ? hostInstalledComponents : clusterInstalledComponents).contains(component.componentName) && (installedServices.contains(component.serviceName))",
          "125:             && (componentName === 'NAMENODE' ? App.get('isHaEnabled'): true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afbbb73db5a4f2adad2dd4e0e777f7c5109b2099",
      "candidate_info": {
        "commit_hash": "afbbb73db5a4f2adad2dd4e0e777f7c5109b2099",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/afbbb73db5a4f2adad2dd4e0e777f7c5109b2099",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java"
        ],
        "message": "AMBARI-25433. Ambari should add login and password to urls populated from VDF (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.UnsupportedEncodingException;",
          "22: import java.net.MalformedURLException;",
          "23: import java.net.URI;",
          "24: import java.net.URL;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.net.URISyntaxException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:       } else {",
          "582:         URLStreamProvider provider = new URLStreamProvider(connectTimeout, readTimeout,",
          "583:             ComponentSSLConfiguration.instance());",
          "585:         stream = provider.readFrom(definitionUrl);",
          "586:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:         provider.setSetupTruststoreForHttps(false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:     entity.setStack(stackEntity);",
          "624:     }",
          "626:     List<RepositoryInfo> repos = holder.xml.repositoryInfo.getRepositories(credentials);",
          "",
          "[Removed Lines]",
          "618:     String credentials;",
          "619:     try {",
          "620:       URL url = new URL(holder.url);",
          "621:       credentials = url.getUserInfo();",
          "622:     } catch (MalformedURLException e) {",
          "623:       throw new AmbariException(String.format(\"Could not parse url %s\", holder.url), e);",
          "",
          "[Added Lines]",
          "620:     String credentials = null;",
          "621:     if (holder.url != null) {",
          "622:       try {",
          "623:         URI uri = new URI(holder.url);",
          "624:         credentials = uri.getUserInfo();",
          "625:       } catch (URISyntaxException e) {",
          "626:         throw new AmbariException(String.format(\"Could not parse url %s\", holder.url), e);",
          "627:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}