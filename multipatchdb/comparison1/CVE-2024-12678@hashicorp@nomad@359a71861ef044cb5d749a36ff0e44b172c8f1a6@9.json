{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2869d246eb0994c245139345aa63ddde26aea38c",
      "candidate_info": {
        "commit_hash": "2869d246eb0994c245139345aa63ddde26aea38c",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/2869d246eb0994c245139345aa63ddde26aea38c",
        "files": [
          "command/agent/event_endpoint.go",
          "website/content/api-docs/events.mdx"
        ],
        "message": "update ndjson links due to domain expiry/resale\n\nCo-authored-by: Jamie Finnigan <jfinnigan@hashicorp.com>",
        "before_after_code_files": [
          "command/agent/event_endpoint.go||command/agent/event_endpoint.go",
          "website/content/api-docs/events.mdx||website/content/api-docs/events.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/event_endpoint.go||command/agent/event_endpoint.go": [
          "File: command/agent/event_endpoint.go -> command/agent/event_endpoint.go"
        ],
        "website/content/api-docs/events.mdx||website/content/api-docs/events.mdx": [
          "File: website/content/api-docs/events.mdx -> website/content/api-docs/events.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: This endpoint streams a server's backlog of events as well as new events as they occur.",
          "15: The stream will be kept alive until the connection is closed. The format of the response",
          "21: | Method | Path               | Produces           |",
          "22: | ------ | ------------------ | ------------------ |",
          "",
          "[Removed Lines]",
          "16: body will be valid [ndjson](http://ndjson.org/). This means splitting the streaming",
          "17: response at every `\\n` character will guarantee each message is a valid JSON object.",
          "18: Note that each JSON object may include multiple events (high server activity) or no",
          "19: events (heartbeating to keep the connection open).",
          "",
          "[Added Lines]",
          "16: body will be valid [ndjson](https://github.com/ndjson/ndjson-spec). This means splitting",
          "17: the streaming response at every `\\n` character will guarantee each message is a valid",
          "18: JSON object. Note that each JSON object may include multiple events (high server",
          "19: activity) or no events (heartbeating to keep the connection open).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bce6e7f10957766a331ac5866011b685f725b797",
      "candidate_info": {
        "commit_hash": "bce6e7f10957766a331ac5866011b685f725b797",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/bce6e7f10957766a331ac5866011b685f725b797",
        "files": [
          ".release/security-scan.hcl"
        ],
        "message": "sec: Remove yamux suppression as vuln has been revoked (#25050)\n\nbackport of commit 4fbacee328a0860cf604cb01dd09ca8ac32607bf \n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          ".release/security-scan.hcl||.release/security-scan.hcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".release/security-scan.hcl||.release/security-scan.hcl": [
          "File: .release/security-scan.hcl -> .release/security-scan.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   triage {",
          "30:     suppress {",
          "31:       vulnerabilities = [",
          "35:       ]",
          "36:     }",
          "37:   }",
          "",
          "[Removed Lines]",
          "32:         \"GO-2025-3408\",         // github.com/hashicorp/yamux@v0.1.2 TODO(jrasell): remove when dep updated.",
          "33:         \"GHSA-29qp-crvh-w22m \", // github.com/hashicorp/yamux@v0.1.2 TODO(jrasell): remove when dep updated.",
          "34:         \"GO-2022-0635\",         // github.com/aws/aws-sdk-go@v1.55.6 TODO(jrasell): remove when dep updated.",
          "",
          "[Added Lines]",
          "32:         \"GO-2022-0635\", // github.com/aws/aws-sdk-go@v1.55.6 TODO(jrasell): remove when dep updated.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d405415aad99f016b0f1da9e65cc3ce88a8fbf30",
      "candidate_info": {
        "commit_hash": "d405415aad99f016b0f1da9e65cc3ce88a8fbf30",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/d405415aad99f016b0f1da9e65cc3ce88a8fbf30",
        "files": [
          ".changelog/24363.txt",
          "e2e/scaling/input/namespace_default_system.nomad",
          "e2e/scaling/scaling.go",
          "nomad/job_endpoint.go",
          "nomad/job_endpoint_test.go",
          "nomad/structs/structs.go"
        ],
        "message": "backport of commit 1f944196d994bff14d7bb73a29bd59dede08f315 (#24476)\n\nCo-authored-by: Juana De La Cuesta <juanita.delacuestamorales@hashicorp.com>",
        "before_after_code_files": [
          "e2e/scaling/input/namespace_default_system.nomad||e2e/scaling/input/namespace_default_system.nomad",
          "e2e/scaling/scaling.go||e2e/scaling/scaling.go",
          "nomad/job_endpoint.go||nomad/job_endpoint.go",
          "nomad/job_endpoint_test.go||nomad/job_endpoint_test.go",
          "nomad/structs/structs.go||nomad/structs/structs.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ],
          "candidate": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ]
        }
      },
      "candidate_diff": {
        "e2e/scaling/input/namespace_default_system.nomad||e2e/scaling/input/namespace_default_system.nomad": [
          "File: e2e/scaling/input/namespace_default_system.nomad -> e2e/scaling/input/namespace_default_system.nomad",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) HashiCorp, Inc.",
          "2: # SPDX-License-Identifier: BUSL-1.1",
          "4: job \"system_job\" {",
          "5:   type = \"system\"",
          "7:   group \"system_job_group\" {",
          "9:     task \"system_task\" {",
          "10:       driver = \"docker\"",
          "12:       config {",
          "13:         image = \"busybox:1\"",
          "15:         command = \"/bin/sh\"",
          "16:         args    = [\"-c\", \"sleep 15000\"]",
          "17:       }",
          "19:       env {",
          "20:         version = \"1\"",
          "21:       }",
          "22:     }",
          "23:   }",
          "24: }",
          "",
          "---------------"
        ],
        "e2e/scaling/scaling.go||e2e/scaling/scaling.go": [
          "File: e2e/scaling/scaling.go -> e2e/scaling/scaling.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"github.com/hashicorp/nomad/e2e/framework\"",
          "12:  \"github.com/hashicorp/nomad/helper/pointer\"",
          "13:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "14: )",
          "16: type ScalingE2ETest struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  \"github.com/hashicorp/nomad/nomad/structs\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   \"Nomad e2e testing\", false, nil, &aWriteOpts)",
          "166:  f.NoError(err)",
          "167: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: func (tc *ScalingE2ETest) TestScalingBasicWithSystemSchedule(f *framework.F) {",
          "172:  t := f.T()",
          "173:  nomadClient := tc.Nomad()",
          "178:  jobID := \"test-scaling-\" + uuid.Generate()[0:8]",
          "179:  e2eutil.RegisterAndWaitForAllocs(t, nomadClient, \"scaling/input/namespace_default_system.nomad\", jobID, \"\")",
          "181:  jobs := nomadClient.Jobs()",
          "182:  initialAllocs, _, err := jobs.Allocations(jobID, true, nil)",
          "183:  f.NoError(err)",
          "185:  nodeStubList, _, err := nomadClient.Nodes().List(&api.QueryOptions{Namespace: \"default\"})",
          "186:  f.NoError(err)",
          "190:  numberOfNodes := len(nodeStubList)",
          "192:  f.Equal(numberOfNodes, len(initialAllocs))",
          "193:  allocIDs := e2eutil.AllocIDsFromAllocationListStubs(initialAllocs)",
          "196:  e2eutil.WaitForAllocsNotPending(t, nomadClient, allocIDs)",
          "199:  testMeta := map[string]interface{}{\"scaling-e2e-test\": \"value\"}",
          "200:  scaleResp, _, err := tc.Nomad().Jobs().Scale(jobID, \"system_job_group\", pointer.Of(3),",
          "201:   \"Nomad e2e testing\", false, testMeta, nil)",
          "203:  f.Error(err)",
          "204:  f.Nil(scaleResp)",
          "207:  jobs = nomadClient.Jobs()",
          "208:  allocs1, _, err := jobs.Allocations(jobID, true, nil)",
          "209:  f.NoError(err)",
          "211:  f.Equal(len(initialAllocs), len(allocs1))",
          "213:  for i, a := range allocs1 {",
          "214:   f.Equal(a.ID, initialAllocs[i].ID)",
          "215:  }",
          "218:  testMeta = map[string]interface{}{\"scaling-e2e-test\": \"value\"}",
          "219:  scaleResp, _, err = tc.Nomad().Jobs().Scale(jobID, \"system_job_group\", pointer.Of(0),",
          "220:   \"Nomad e2e testing\", false, testMeta, nil)",
          "221:  f.NoError(err)",
          "222:  f.NotEmpty(scaleResp.EvalID)",
          "225:  stopedAllocs, _, err := jobs.Allocations(jobID, false, nil)",
          "226:  f.NoError(err)",
          "228:  f.Equal(numberOfNodes, len(filterAllocsByDesiredStatus(structs.AllocDesiredStatusStop, stopedAllocs)))",
          "229:  f.Equal(numberOfNodes, len(stopedAllocs))",
          "232:  testMeta = map[string]interface{}{\"scaling-e2e-test\": \"value\"}",
          "233:  scaleResp, _, err = tc.Nomad().Jobs().Scale(jobID, \"system_job_group\", pointer.Of(1),",
          "234:   \"Nomad e2e testing\", false, testMeta, nil)",
          "235:  f.NoError(err)",
          "236:  f.NotEmpty(scaleResp.EvalID)",
          "239:  e2eutil.WaitForAllocsNotPending(t, nomadClient, allocIDs)",
          "242:  allocs, _, err := jobs.Allocations(jobID, true, nil)",
          "243:  f.NoError(err)",
          "244:  f.Equal(numberOfNodes*2, len(allocs))",
          "246:  f.Equal(numberOfNodes, len(filterAllocsByDesiredStatus(structs.AllocDesiredStatusStop, allocs)))",
          "247:  f.Equal(numberOfNodes, len(filterAllocsByDesiredStatus(structs.AllocDesiredStatusRun, allocs)))",
          "250:  _, _, err = tc.Nomad().Jobs().Deregister(jobID, true, nil)",
          "251:  f.NoError(err)",
          "252:  f.NoError(tc.Nomad().System().GarbageCollect())",
          "253: }",
          "255: func filterAllocsByDesiredStatus(status string, allocs []*api.AllocationListStub) []*api.AllocationListStub {",
          "256:  res := []*api.AllocationListStub{}",
          "258:  for _, a := range allocs {",
          "259:   if a.DesiredStatus == status {",
          "260:    res = append(res, a)",
          "261:   }",
          "262:  }",
          "264:  return res",
          "265: }",
          "",
          "---------------"
        ],
        "nomad/job_endpoint.go||nomad/job_endpoint.go": [
          "File: nomad/job_endpoint.go -> nomad/job_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1027:  if job == nil {",
          "1028:   return structs.NewErrRPCCoded(404, fmt.Sprintf(\"job %q not found\", args.JobID))",
          "1029:  }",
          "1032:  }",
          "",
          "[Removed Lines]",
          "1030:  if job.Type == structs.JobTypeSystem {",
          "1031:   return structs.NewErrRPCCoded(http.StatusBadRequest, `cannot scale jobs of type \"system\"`)",
          "",
          "[Added Lines]",
          "1031:  if job.Type == structs.JobTypeSystem && *args.Count > 1 {",
          "1032:   return structs.NewErrRPCCoded(http.StatusBadRequest, `jobs of type \"system\" can only be scaled between 0 and 1`)",
          "",
          "---------------"
        ],
        "nomad/job_endpoint_test.go||nomad/job_endpoint_test.go": [
          "File: nomad/job_endpoint_test.go -> nomad/job_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8271:  mockSystemJob := mock.SystemJob()",
          "8272:  must.NoError(t, state.UpsertJob(structs.MsgTypeTestSetup, 10, nil, mockSystemJob))",
          "8274:  scaleReq := &structs.JobScaleRequest{",
          "8275:   JobID: mockSystemJob.ID,",
          "8276:   Target: map[string]string{",
          "8277:    structs.ScalingTargetGroup: mockSystemJob.TaskGroups[0].Name,",
          "8278:   },",
          "8280:   WriteRequest: structs.WriteRequest{",
          "8281:    Region:    DefaultRegion,",
          "8282:    Namespace: mockSystemJob.Namespace,",
          "8283:   },",
          "8284:  }",
          "8286:  must.ErrorContains(t, msgpackrpc.CallWithCodec(codec, \"Job.Scale\", scaleReq, &resp),",
          "8288: }",
          "8290: func TestJobEndpoint_Scale_BatchJob(t *testing.T) {",
          "",
          "[Removed Lines]",
          "8279:   Count: pointer.Of(int64(13)),",
          "8285:  var resp structs.JobRegisterResponse",
          "8287:   `400,cannot scale jobs of type \"system\"`)",
          "",
          "[Added Lines]",
          "8280:   Count: pointer.Of(int64(0)),",
          "8287:  resp := structs.JobRegisterResponse{}",
          "8288:  err := msgpackrpc.CallWithCodec(codec, \"Job.Scale\", scaleReq, &resp)",
          "8289:  must.NoError(t, err)",
          "8292:  scaleReq.Count = pointer.Of(int64(-5))",
          "8294:  resp = structs.JobRegisterResponse{}",
          "8295:  must.ErrorContains(t, msgpackrpc.CallWithCodec(codec, \"Job.Scale\", scaleReq, &resp),",
          "8296:   `400,scaling action count can't be negative`)",
          "8299:  scaleReq.Count = pointer.Of(int64(1))",
          "8301:  resp = structs.JobRegisterResponse{}",
          "8302:  err = msgpackrpc.CallWithCodec(codec, \"Job.Scale\", scaleReq, &resp)",
          "8303:  must.NoError(t, err)",
          "8306:  scaleReq.Count = pointer.Of(int64(13))",
          "8308:  resp = structs.JobRegisterResponse{}",
          "8310:   `400,jobs of type \"system\" can only be scaled between 0 and 1`)",
          "",
          "---------------"
        ],
        "nomad/structs/structs.go||nomad/structs/structs.go": [
          "File: nomad/structs/structs.go -> nomad/structs/structs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7055:   tg.EphemeralDisk = DefaultEphemeralDisk()",
          "7056:  }",
          "7062:  if tg.Scaling != nil {",
          "7063:   tg.Scaling.Canonicalize(job, tg, nil)",
          "7064:  }",
          "",
          "[Removed Lines]",
          "7058:  if job.Type == JobTypeSystem && tg.Count == 0 {",
          "7059:   tg.Count = 1",
          "7060:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a1fa848b56f3394b5eb21a1d46c18bcc3f036b4",
      "candidate_info": {
        "commit_hash": "3a1fa848b56f3394b5eb21a1d46c18bcc3f036b4",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/3a1fa848b56f3394b5eb21a1d46c18bcc3f036b4",
        "files": [
          "website/content/api-docs/acl/policies.mdx",
          "website/content/docs/commands/acl/policy/apply.mdx"
        ],
        "message": "Backport of docs: clarify workload-associated policy parameters into release/1.9.x (#24891)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "website/content/api-docs/acl/policies.mdx||website/content/api-docs/acl/policies.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "website/content/api-docs/acl/policies.mdx||website/content/api-docs/acl/policies.mdx": [
          "File: website/content/api-docs/acl/policies.mdx -> website/content/api-docs/acl/policies.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: - `Rules` `(string: <required>)` - Specifies the Policy rules in HCL or JSON format.",
          "87:   Policies][concepts_workload_identity_acl] for more information.",
          "100: ### Sample Payload",
          "",
          "[Removed Lines]",
          "85: - `JobACL` `(JobACL: <optional>)` - Associates the policy with a given",
          "86:   namespace, job, group, or task. Refer to [Workload Associated ACL",
          "89:   - `Namespace` `(string: <optional>)` - The namespace to attach the policy.",
          "90:     Required if `JobID` is set.",
          "92:   - `JobID` `(string: <optional>)` - The job to attach to the policy. Required",
          "93:     if `Group` is set.",
          "95:   - `Group` `(string: <optional>)` - The group to attach to the policy.",
          "96:     Required if `Task` is set.",
          "98:   - `Task` `(string: <optional>)` - The task to attach to the policy.",
          "",
          "[Added Lines]",
          "85: - `JobACL` `(JobACL: <optional>)` - Associates the policy with a given job,",
          "86:   group, or task. Refer to [Workload Associated ACL",
          "89:   - `Namespace` `(string: <optional>)` - Attach the policy to the job in this",
          "90:     namespace.  Required if `JobID` is set.",
          "92:   - `JobID` `(string)` - Attach the policy to this job. Required to use `JobACL`.",
          "94:   - `Group` `(string: <optional>)` - Attach the policy to this group within the",
          "95:     job.  Required if `Task` is set.",
          "97:   - `Task` `(string: <optional>)` - Attach the policy to this task within the job.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8d778e7a8797e05805f4df846fefe64d2c36998",
      "candidate_info": {
        "commit_hash": "c8d778e7a8797e05805f4df846fefe64d2c36998",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/c8d778e7a8797e05805f4df846fefe64d2c36998",
        "files": [
          ".changelog/24522.txt",
          "e2e/csi/input/plugin-aws-ebs-controller.nomad",
          "e2e/csi/input/plugin-aws-ebs-nodes.nomad",
          "nomad/structs/node.go",
          "nomad/structs/node_test.go"
        ],
        "message": "Backport of Fix CSITopology matching logic for csi storage driver into release/1.9.x (#24539)\n\nCo-authored-by: Yucong Sun <sunyucong@gmail.com>",
        "before_after_code_files": [
          "e2e/csi/input/plugin-aws-ebs-controller.nomad||e2e/csi/input/plugin-aws-ebs-controller.nomad",
          "e2e/csi/input/plugin-aws-ebs-nodes.nomad||e2e/csi/input/plugin-aws-ebs-nodes.nomad",
          "nomad/structs/node.go||nomad/structs/node.go",
          "nomad/structs/node_test.go||nomad/structs/node_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "e2e/csi/input/plugin-aws-ebs-controller.nomad||e2e/csi/input/plugin-aws-ebs-controller.nomad": [
          "File: e2e/csi/input/plugin-aws-ebs-controller.nomad -> e2e/csi/input/plugin-aws-ebs-controller.nomad",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:       driver = \"docker\"",
          "27:       config {",
          "30:         args = [",
          "31:           \"controller\",",
          "",
          "[Removed Lines]",
          "28:         image = \"public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.5.1\"",
          "",
          "[Added Lines]",
          "28:         image = \"public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.33.0\"",
          "",
          "---------------"
        ],
        "e2e/csi/input/plugin-aws-ebs-nodes.nomad||e2e/csi/input/plugin-aws-ebs-nodes.nomad": [
          "File: e2e/csi/input/plugin-aws-ebs-nodes.nomad -> e2e/csi/input/plugin-aws-ebs-nodes.nomad",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:       driver = \"docker\"",
          "24:       config {",
          "27:         args = [",
          "28:           \"node\",",
          "",
          "[Removed Lines]",
          "25:         image = \"public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.5.1\"",
          "",
          "[Added Lines]",
          "25:         image = \"public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.33.0\"",
          "",
          "---------------"
        ],
        "nomad/structs/node.go||nomad/structs/node.go": [
          "File: nomad/structs/node.go -> nomad/structs/node.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  return maps.Equal(t.Segments, o.Segments)",
          "69: }",
          "71: func (t *CSITopology) MatchFound(o []*CSITopology) bool {",
          "72:  if t == nil || o == nil || len(o) == 0 {",
          "73:   return false",
          "74:  }",
          "76:  for _, other := range o {",
          "78:    return true",
          "79:   }",
          "80:  }",
          "",
          "[Removed Lines]",
          "77:   if t.Equal(other) {",
          "",
          "[Added Lines]",
          "71: func (t *CSITopology) Contains(o *CSITopology) bool {",
          "72:  if t == nil || o == nil {",
          "73:   return t == o",
          "74:  }",
          "76:  for k, ov := range o.Segments {",
          "77:   if tv, ok := t.Segments[k]; !ok || tv != ov {",
          "78:    return false",
          "79:   }",
          "80:  }",
          "82:  return true",
          "83: }",
          "91:   if t.Contains(other) {",
          "",
          "---------------"
        ],
        "nomad/structs/node_test.go||nomad/structs/node_test.go": [
          "File: nomad/structs/node_test.go -> nomad/structs/node_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   })",
          "164:  }",
          "165: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: func TestCSITopology_Contains(t *testing.T) {",
          "168:  ci.Parallel(t)",
          "170:  cases := []struct {",
          "171:   name     string",
          "172:   this     *CSITopology",
          "173:   other    *CSITopology",
          "174:   expected bool",
          "175:  }{",
          "176:   {",
          "177:    name: \"AWS EBS pre 1.27 behavior\",",
          "178:    this: &CSITopology{",
          "179:     Segments: map[string]string{",
          "180:      \"topology.ebs.csi.aws.com/zone\": \"us-east-1a\",",
          "181:     },",
          "182:    },",
          "183:    other: &CSITopology{",
          "184:     Segments: map[string]string{",
          "185:      \"topology.ebs.csi.aws.com/zone\": \"us-east-1a\",",
          "186:     },",
          "187:    },",
          "188:    expected: true,",
          "189:   },",
          "190:   {",
          "191:    name: \"AWS EBS post 1.27 behavior\",",
          "192:    this: &CSITopology{",
          "193:     Segments: map[string]string{",
          "194:      \"topology.kubernetes.io/zone\":   \"us-east-1a\",",
          "195:      \"topology.ebs.csi.aws.com/zone\": \"us-east-1a\",",
          "196:      \"kubernetes.io/os\":              \"linux\",",
          "197:     },",
          "198:    },",
          "199:    other: &CSITopology{",
          "200:     Segments: map[string]string{",
          "201:      \"topology.kubernetes.io/zone\": \"us-east-1a\",",
          "202:     },",
          "203:    },",
          "204:    expected: true,",
          "205:   },",
          "206:   {",
          "207:    name: \"other contains invalid segment value for matched key\",",
          "208:    this: &CSITopology{",
          "209:     Segments: map[string]string{",
          "210:      \"topology.kubernetes.io/zone\":   \"us-east-1a\",",
          "211:      \"topology.ebs.csi.aws.com/zone\": \"us-east-1a\",",
          "212:      \"kubernetes.io/os\":              \"linux\",",
          "213:     },",
          "214:    },",
          "215:    other: &CSITopology{",
          "216:     Segments: map[string]string{",
          "217:      \"topology.kubernetes.io/zone\": \"us-east-1a\",",
          "218:      \"kubernetes.io/os\":            \"windows\",",
          "219:     },",
          "220:    },",
          "221:    expected: false,",
          "222:   },",
          "223:   {",
          "224:    name: \"other contains invalid segment key\",",
          "225:    this: &CSITopology{",
          "226:     Segments: map[string]string{",
          "227:      \"topology.kubernetes.io/zone\": \"us-east-1a\",",
          "228:     },",
          "229:    },",
          "230:    other: &CSITopology{",
          "231:     Segments: map[string]string{",
          "232:      \"topology.kubernetes.io/zone\": \"us-east-1a\",",
          "233:      \"kubernetes.io/os\":            \"linux\",",
          "234:     },",
          "235:    },",
          "236:    expected: false,",
          "237:   },",
          "238:   {",
          "239:    name: \"other is nil\",",
          "240:    this: &CSITopology{",
          "241:     Segments: map[string]string{",
          "242:      \"topology.kubernetes.io/zone\": \"us-east-1a\",",
          "243:     },",
          "244:    },",
          "245:    other:    nil,",
          "246:    expected: false,",
          "247:   },",
          "248:  }",
          "250:  for _, tc := range cases {",
          "251:   t.Run(tc.name, func(t *testing.T) {",
          "252:    must.Eq(t, tc.expected, tc.this.Contains(tc.other))",
          "253:   })",
          "254:  }",
          "256: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}