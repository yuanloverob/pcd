{
  "cve_id": "CVE-2023-50944",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.\u00a0This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "8d76538d6e105947272b000581c6fabec20146b1",
  "patch_info": {
    "commit_hash": "8d76538d6e105947272b000581c6fabec20146b1",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/8d76538d6e105947272b000581c6fabec20146b1",
    "files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ],
    "message": "Check DAG read permission before accessing DAG code (#36257)\n\n(cherry picked from commit 30ea37e0d247ce54c2d25b115e807fdb0074d795)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py||airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_source_endpoint.py -> airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: from __future__ import annotations",
      "19: from http import HTTPStatus",
      "21: from flask import Response, current_app, request",
      "22: from itsdangerous import BadSignature, URLSafeSerializer",
      "24: from airflow.api_connexion import security",
      "26: from airflow.api_connexion.schemas.dag_source_schema import dag_source_schema",
      "27: from airflow.auth.managers.models.resource_details import DagAccessEntity",
      "28: from airflow.models.dagcode import DagCode",
      "31: @security.requires_access_dag(\"GET\", DagAccessEntity.CODE)",
      "33:     \"\"\"Get source code using file token.\"\"\"",
      "34:     secret_key = current_app.config[\"SECRET_KEY\"]",
      "35:     auth_s = URLSafeSerializer(secret_key)",
      "36:     try:",
      "37:         path = auth_s.loads(file_token)",
      "39:     except (BadSignature, FileNotFoundError):",
      "40:         raise NotFound(\"Dag source not found\")",
      "",
      "[Removed Lines]",
      "25: from airflow.api_connexion.exceptions import NotFound",
      "32: def get_dag_source(*, file_token: str) -> Response:",
      "38:         dag_source = DagCode.code(path)",
      "",
      "[Added Lines]",
      "20: from typing import TYPE_CHECKING",
      "26: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
      "28: from airflow.api_connexion.security import get_readable_dags",
      "30: from airflow.models.dag import DagModel",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "34: if TYPE_CHECKING:",
      "35:     from sqlalchemy.orm import Session",
      "39: @provide_session",
      "40: def get_dag_source(*, file_token: str, session: Session = NEW_SESSION) -> Response:",
      "46:         dag_ids = session.query(DagModel.dag_id).filter(DagModel.fileloc == path).all()",
      "47:         readable_dags = get_readable_dags()",
      "48:         # Check if user has read access to all the DAGs defined in the file",
      "49:         if any(dag_id[0] not in readable_dags for dag_id in dag_ids):",
      "50:             raise PermissionDenied()",
      "51:         dag_source = DagCode.code(path, session=session)",
      "",
      "---------------"
    ],
    "airflow/models/dagcode.py||airflow/models/dagcode.py": [
      "File: airflow/models/dagcode.py -> airflow/models/dagcode.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         return cls.code(fileloc)",
      "179:     @classmethod",
      "181:         \"\"\"Return source code for this DagCode object.",
      "183:         :return: source code as string",
      "184:         \"\"\"",
      "187:     @staticmethod",
      "188:     def _get_code_from_file(fileloc):",
      "",
      "[Removed Lines]",
      "180:     def code(cls, fileloc) -> str:",
      "185:         return cls._get_code_from_db(fileloc)",
      "",
      "[Added Lines]",
      "180:     @provide_session",
      "181:     def code(cls, fileloc, session: Session = NEW_SESSION) -> str:",
      "186:         return cls._get_code_from_db(fileloc, session)",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_source_endpoint.py -> tests/api_connexion/endpoints/test_dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))",
      "36: EXAMPLE_DAG_FILE = os.path.join(\"airflow\", \"example_dags\", \"example_bash_operator.py\")",
      "39: @pytest.fixture(scope=\"module\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: EXAMPLE_DAG_ID = \"example_bash_operator\"",
      "38: TEST_DAG_ID = \"latest_only\"",
      "39: NOT_READABLE_DAG_ID = \"latest_only_with_trigger\"",
      "40: TEST_MULTIPLE_DAGS_ID = \"dataset_produces_1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:         role_name=\"Test\",",
      "46:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_CODE)],  # type: ignore",
      "47:     )",
      "48:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "50:     yield app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "53:         TEST_DAG_ID,",
      "54:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "55:     )",
      "56:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "57:         EXAMPLE_DAG_ID,",
      "58:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "59:     )",
      "60:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "61:         TEST_MULTIPLE_DAGS_ID,",
      "62:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "63:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     def test_should_respond_200_text(self, url_safe_serializer):",
      "81:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "82:         dagbag.sync_to_db()",
      "87:         response = self.client.get(",
      "88:             url, headers={\"Accept\": \"text/plain\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "89:         )",
      "",
      "[Removed Lines]",
      "83:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "84:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "86:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "99:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "100:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "102:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     def test_should_respond_200_json(self, url_safe_serializer):",
      "96:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "97:         dagbag.sync_to_db()",
      "102:         response = self.client.get(",
      "103:             url, headers={\"Accept\": \"application/json\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "104:         )",
      "",
      "[Removed Lines]",
      "98:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "99:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "101:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "114:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "115:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "117:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "110:     def test_should_respond_406(self, url_safe_serializer):",
      "111:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "112:         dagbag.sync_to_db()",
      "116:         response = self.client.get(",
      "117:             url, headers={\"Accept\": \"image/webp\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "118:         )",
      "",
      "[Removed Lines]",
      "113:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "115:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "129:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "131:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "151:             environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"},",
      "152:         )",
      "153:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:     def test_should_respond_403_not_readable(self, url_safe_serializer):",
      "172:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "173:         dagbag.sync_to_db()",
      "174:         dag: DAG = dagbag.dags[NOT_READABLE_DAG_ID]",
      "176:         response = self.client.get(",
      "177:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "178:             headers={\"Accept\": \"text/plain\"},",
      "179:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "180:         )",
      "181:         read_dag = self.client.get(",
      "182:             f\"/api/v1/dags/{NOT_READABLE_DAG_ID}\",",
      "183:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "184:         )",
      "185:         assert response.status_code == 403",
      "186:         assert read_dag.status_code == 403",
      "188:     def test_should_respond_403_some_dags_not_readable_in_the_file(self, url_safe_serializer):",
      "189:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "190:         dagbag.sync_to_db()",
      "191:         dag: DAG = dagbag.dags[TEST_MULTIPLE_DAGS_ID]",
      "193:         response = self.client.get(",
      "194:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "195:             headers={\"Accept\": \"text/plain\"},",
      "196:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "197:         )",
      "199:         read_dag = self.client.get(",
      "200:             f\"/api/v1/dags/{TEST_MULTIPLE_DAGS_ID}\",",
      "201:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "202:         )",
      "203:         assert response.status_code == 403",
      "204:         assert read_dag.status_code == 200",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "185c9ff1b8db124e0b644b85da6499519a3a06d5",
      "candidate_info": {
        "commit_hash": "185c9ff1b8db124e0b644b85da6499519a3a06d5",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/185c9ff1b8db124e0b644b85da6499519a3a06d5",
        "files": [
          "airflow/www/static/css/main.css"
        ],
        "message": "Increase width of execution_date input in trigger.html (#36278)\n\n(cherry picked from commit aed3c922402121c64264654f8dd77dbfc0168cbb)",
        "before_after_code_files": [
          "airflow/www/static/css/main.css||airflow/www/static/css/main.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/css/main.css||airflow/www/static/css/main.css": [
          "File: airflow/www/static/css/main.css -> airflow/www/static/css/main.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: }",
          "148: input#execution_date {",
          "149:   margin-bottom: 0;",
          "150: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:   width: 220px;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "812794a15a902790ca8700a0ad2027f51caa748f",
      "candidate_info": {
        "commit_hash": "812794a15a902790ca8700a0ad2027f51caa748f",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/812794a15a902790ca8700a0ad2027f51caa748f",
        "files": [
          ".github/workflows/ci.yml",
          "airflow/providers/google/marketing_platform/hooks/analytics.py",
          "airflow/providers/google/marketing_platform/hooks/analytics_admin.py",
          "airflow/providers/google/marketing_platform/links/__init__.py",
          "airflow/providers/google/marketing_platform/links/analytics_admin.py",
          "airflow/providers/google/marketing_platform/operators/analytics.py",
          "airflow/providers/google/marketing_platform/operators/analytics_admin.py",
          "airflow/providers/google/provider.yaml",
          "docs/apache-airflow-providers-google/operators/marketing_platform/analytics.rst",
          "docs/apache-airflow-providers-google/operators/marketing_platform/analytics_admin.rst",
          "generated/provider_dependencies.json",
          "tests/providers/google/marketing_platform/hooks/test_analytics_admin.py",
          "tests/providers/google/marketing_platform/links/__init__.py",
          "tests/providers/google/marketing_platform/links/test_analytics_admin.py",
          "tests/providers/google/marketing_platform/operators/test_analytics_admin.py",
          "tests/system/providers/google/marketing_platform/example_analytics_admin.py"
        ],
        "message": "Implement Google Analytics Admin (GA4) operators (#36276)\n\n(cherry picked from commit f28643b7bdc90a61ec5bd12f8505772cd8c3bf7f)",
        "before_after_code_files": [
          "airflow/providers/google/marketing_platform/hooks/analytics.py||airflow/providers/google/marketing_platform/hooks/analytics.py",
          "airflow/providers/google/marketing_platform/hooks/analytics_admin.py||airflow/providers/google/marketing_platform/hooks/analytics_admin.py",
          "airflow/providers/google/marketing_platform/links/__init__.py||airflow/providers/google/marketing_platform/links/__init__.py",
          "airflow/providers/google/marketing_platform/links/analytics_admin.py||airflow/providers/google/marketing_platform/links/analytics_admin.py",
          "airflow/providers/google/marketing_platform/operators/analytics.py||airflow/providers/google/marketing_platform/operators/analytics.py",
          "airflow/providers/google/marketing_platform/operators/analytics_admin.py||airflow/providers/google/marketing_platform/operators/analytics_admin.py",
          "tests/providers/google/marketing_platform/hooks/test_analytics_admin.py||tests/providers/google/marketing_platform/hooks/test_analytics_admin.py",
          "tests/providers/google/marketing_platform/links/__init__.py||tests/providers/google/marketing_platform/links/__init__.py",
          "tests/providers/google/marketing_platform/links/test_analytics_admin.py||tests/providers/google/marketing_platform/links/test_analytics_admin.py",
          "tests/providers/google/marketing_platform/operators/test_analytics_admin.py||tests/providers/google/marketing_platform/operators/test_analytics_admin.py",
          "tests/system/providers/google/marketing_platform/example_analytics_admin.py||tests/system/providers/google/marketing_platform/example_analytics_admin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/providers/google/marketing_platform/hooks/analytics.py||airflow/providers/google/marketing_platform/hooks/analytics.py": [
          "File: airflow/providers/google/marketing_platform/hooks/analytics.py -> airflow/providers/google/marketing_platform/hooks/analytics.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: from typing import Any",
          "22: from googleapiclient.discovery import Resource, build",
          "23: from googleapiclient.http import MediaFileUpload",
          "25: from airflow.providers.google.common.hooks.base_google import GoogleBaseHook",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import warnings",
          "26: from airflow.exceptions import AirflowProviderDeprecationWarning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     def __init__(self, api_version: str = \"v3\", *args, **kwargs):",
          "32:         super().__init__(*args, **kwargs)",
          "33:         self.api_version = api_version",
          "34:         self._conn = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         warnings.warn(",
          "36:             f\"The `{type(self).__name__}` class is deprecated, please use \"",
          "37:             f\"`GoogleAnalyticsAdminHook` instead.\",",
          "38:             AirflowProviderDeprecationWarning,",
          "39:             stacklevel=1,",
          "40:         )",
          "",
          "---------------"
        ],
        "airflow/providers/google/marketing_platform/hooks/analytics_admin.py||airflow/providers/google/marketing_platform/hooks/analytics_admin.py": [
          "File: airflow/providers/google/marketing_platform/hooks/analytics_admin.py -> airflow/providers/google/marketing_platform/hooks/analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: \"\"\"",
          "19: Hooks for Google Analytics (GA4) Admin service.",
          "21: .. spelling:word-list::",
          "23:     DataStream",
          "24:     ListAccountsPager",
          "25:     ListGoogleAdsLinksPager",
          "26: \"\"\"",
          "27: from __future__ import annotations",
          "29: from typing import TYPE_CHECKING, Sequence",
          "31: from google.analytics.admin_v1beta import (",
          "32:     AnalyticsAdminServiceClient,",
          "33:     DataStream,",
          "34:     Property,",
          "35: )",
          "36: from google.api_core.gapic_v1.method import DEFAULT, _MethodDefault",
          "38: from airflow.providers.google.common.consts import CLIENT_INFO",
          "39: from airflow.providers.google.common.hooks.base_google import GoogleBaseHook",
          "41: if TYPE_CHECKING:",
          "42:     from google.analytics.admin_v1beta.services.analytics_admin_service.pagers import (",
          "43:         ListAccountsPager,",
          "44:         ListGoogleAdsLinksPager,",
          "45:     )",
          "46:     from google.api_core.retry import Retry",
          "49: class GoogleAnalyticsAdminHook(GoogleBaseHook):",
          "50:     \"\"\"Hook for Google Analytics 4 (GA4) Admin API.\"\"\"",
          "52:     def __init__(self, *args, **kwargs) -> None:",
          "53:         super().__init__(*args, **kwargs)",
          "54:         self._conn: AnalyticsAdminServiceClient | None = None",
          "56:     def get_conn(self) -> AnalyticsAdminServiceClient:",
          "57:         if not self._conn:",
          "58:             self._conn = AnalyticsAdminServiceClient(",
          "59:                 credentials=self.get_credentials(), client_info=CLIENT_INFO",
          "60:             )",
          "61:         return self._conn",
          "63:     def list_accounts(",
          "64:         self,",
          "65:         page_size: int | None = None,",
          "66:         page_token: str | None = None,",
          "67:         show_deleted: bool | None = None,",
          "68:         retry: Retry | _MethodDefault = DEFAULT,",
          "69:         timeout: float | None = None,",
          "70:         metadata: Sequence[tuple[str, str]] = (),",
          "71:     ) -> ListAccountsPager:",
          "72:         \"\"\"Get list of accounts in Google Analytics.",
          "74:         .. seealso::",
          "75:             For more details please check the client library documentation:",
          "76:             https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/accounts/list",
          "78:         :param page_size: Optional, number of results to return in the list.",
          "79:         :param page_token: Optional. The next_page_token value returned from a previous List request, if any.",
          "80:         :param show_deleted: Optional. Whether to include soft-deleted (ie: \"trashed\") Accounts in the results.",
          "81:         :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "82:             will not be retried.",
          "83:         :param timeout: Optional. The timeout for this request.",
          "84:         :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "86:         :returns: List of Google Analytics accounts.",
          "87:         \"\"\"",
          "88:         request = {\"page_size\": page_size, \"page_token\": page_token, \"show_deleted\": show_deleted}",
          "89:         client = self.get_conn()",
          "90:         return client.list_accounts(request=request, retry=retry, timeout=timeout, metadata=metadata)",
          "92:     def create_property(",
          "93:         self,",
          "94:         analytics_property: Property | dict,",
          "95:         retry: Retry | _MethodDefault = DEFAULT,",
          "96:         timeout: float | None = None,",
          "97:         metadata: Sequence[tuple[str, str]] = (),",
          "98:     ) -> Property:",
          "99:         \"\"\"Create Google Analytics property.",
          "101:         .. seealso::",
          "102:             For more details please check the client library documentation:",
          "103:             https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/properties/create",
          "105:         :param analytics_property: The property to create. Note: the supplied property must specify its",
          "106:             parent.",
          "107:         :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "108:             will not be retried.",
          "109:         :param timeout: Optional. The timeout for this request.",
          "110:         :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "112:         :returns: Created Google Analytics property.",
          "113:         \"\"\"",
          "114:         client = self.get_conn()",
          "115:         return client.create_property(",
          "116:             request={\"property\": analytics_property},",
          "117:             retry=retry,",
          "118:             timeout=timeout,",
          "119:             metadata=metadata,",
          "120:         )",
          "122:     def delete_property(",
          "123:         self,",
          "124:         property_id: str,",
          "125:         retry: Retry | _MethodDefault = DEFAULT,",
          "126:         timeout: float | None = None,",
          "127:         metadata: Sequence[tuple[str, str]] = (),",
          "128:     ) -> Property:",
          "129:         \"\"\"Soft delete Google Analytics property.",
          "131:         .. seealso::",
          "132:             For more details please check the client library documentation:",
          "133:             https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/properties/delete",
          "135:         :param property_id: ID of the Property to soft-delete. Format: properties/{property_id}.",
          "136:         :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "137:             will not be retried.",
          "138:         :param timeout: Optional. The timeout for this request.",
          "139:         :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "141:         :returns: Resource message representing Google Analytics property.",
          "142:         \"\"\"",
          "143:         client = self.get_conn()",
          "144:         request = {\"name\": f\"properties/{property_id}\"}",
          "145:         return client.delete_property(request=request, retry=retry, timeout=timeout, metadata=metadata)",
          "147:     def create_data_stream(",
          "148:         self,",
          "149:         property_id: str,",
          "150:         data_stream: DataStream | dict,",
          "151:         retry: Retry | _MethodDefault = DEFAULT,",
          "152:         timeout: float | None = None,",
          "153:         metadata: Sequence[tuple[str, str]] = (),",
          "154:     ) -> DataStream:",
          "155:         \"\"\"Create Google Analytics data stream.",
          "157:         .. seealso::",
          "158:             For more details please check the client library documentation:",
          "159:             https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/properties.dataStreams/create",
          "161:         :param property_id: ID of the parent property for the data stream.",
          "162:         :param data_stream: The data stream to create.",
          "163:         :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "164:             will not be retried.",
          "165:         :param timeout: Optional. The timeout for this request.",
          "166:         :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "168:         :returns: Created Google Analytics data stream.",
          "169:         \"\"\"",
          "170:         client = self.get_conn()",
          "171:         return client.create_data_stream(",
          "172:             request={\"parent\": f\"properties/{property_id}\", \"data_stream\": data_stream},",
          "173:             retry=retry,",
          "174:             timeout=timeout,",
          "175:             metadata=metadata,",
          "176:         )",
          "178:     def delete_data_stream(",
          "179:         self,",
          "180:         property_id: str,",
          "181:         data_stream_id: str,",
          "182:         retry: Retry | _MethodDefault = DEFAULT,",
          "183:         timeout: float | None = None,",
          "184:         metadata: Sequence[tuple[str, str]] = (),",
          "185:     ) -> None:",
          "186:         \"\"\"Delete Google Analytics data stream.",
          "188:         .. seealso::",
          "189:             For more details please check the client library documentation:",
          "190:             https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/properties.dataStreams/delete",
          "192:         :param property_id: ID of the parent property for the data stream.",
          "193:         :param data_stream_id: The data stream id to delete.",
          "194:         :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "195:             will not be retried.",
          "196:         :param timeout: Optional. The timeout for this request.",
          "197:         :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "198:         \"\"\"",
          "199:         client = self.get_conn()",
          "200:         return client.delete_data_stream(",
          "201:             request={\"name\": f\"properties/{property_id}/dataStreams/{data_stream_id}\"},",
          "202:             retry=retry,",
          "203:             timeout=timeout,",
          "204:             metadata=metadata,",
          "205:         )",
          "207:     def list_google_ads_links(",
          "208:         self,",
          "209:         property_id: str,",
          "210:         page_size: int | None = None,",
          "211:         page_token: str | None = None,",
          "212:         retry: Retry | _MethodDefault = DEFAULT,",
          "213:         timeout: float | None = None,",
          "214:         metadata: Sequence[tuple[str, str]] = (),",
          "215:     ) -> ListGoogleAdsLinksPager:",
          "216:         \"\"\"Get list of Google Ads links.",
          "218:         .. seealso::",
          "219:             For more details please check the client library documentation:",
          "220:             https://googleapis.dev/python/analyticsadmin/latest/admin_v1beta/analytics_admin_service.html#google.analytics.admin_v1beta.services.analytics_admin_service.AnalyticsAdminServiceAsyncClient.list_google_ads_links",
          "222:         :param property_id: ID of the parent property.",
          "223:         :param page_size: Optional, number of results to return in the list.",
          "224:         :param page_token: Optional. The next_page_token value returned from a previous List request, if any.",
          "225:         :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "226:             will not be retried.",
          "227:         :param timeout: Optional. The timeout for this request.",
          "228:         :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "230:         :returns: List of Google Analytics accounts.",
          "231:         \"\"\"",
          "232:         client = self.get_conn()",
          "233:         request = {\"parent\": f\"properties/{property_id}\", \"page_size\": page_size, \"page_token\": page_token}",
          "234:         return client.list_google_ads_links(request=request, retry=retry, timeout=timeout, metadata=metadata)",
          "",
          "---------------"
        ],
        "airflow/providers/google/marketing_platform/links/__init__.py||airflow/providers/google/marketing_platform/links/__init__.py": [
          "File: airflow/providers/google/marketing_platform/links/__init__.py -> airflow/providers/google/marketing_platform/links/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "",
          "---------------"
        ],
        "airflow/providers/google/marketing_platform/links/analytics_admin.py||airflow/providers/google/marketing_platform/links/analytics_admin.py": [
          "File: airflow/providers/google/marketing_platform/links/analytics_admin.py -> airflow/providers/google/marketing_platform/links/analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "17: from __future__ import annotations",
          "19: from typing import TYPE_CHECKING, ClassVar",
          "21: from airflow.models import BaseOperator, BaseOperatorLink, XCom",
          "23: if TYPE_CHECKING:",
          "24:     from airflow.models.taskinstancekey import TaskInstanceKey",
          "25:     from airflow.utils.context import Context",
          "28: BASE_LINK = \"https://analytics.google.com/analytics/web/\"",
          "31: class GoogleAnalyticsBaseLink(BaseOperatorLink):",
          "32:     \"\"\"Base class for Google Analytics links.",
          "34:     :meta private:",
          "35:     \"\"\"",
          "37:     name: ClassVar[str]",
          "38:     key: ClassVar[str]",
          "39:     format_str: ClassVar[str]",
          "41:     def get_link(self, operator: BaseOperator, *, ti_key: TaskInstanceKey) -> str:",
          "42:         if conf := XCom.get_value(key=self.key, ti_key=ti_key):",
          "43:             res = BASE_LINK + \"#/\" + self.format_str.format(**conf)",
          "44:             return res",
          "45:         return \"\"",
          "48: class GoogleAnalyticsPropertyLink(GoogleAnalyticsBaseLink):",
          "49:     \"\"\"Helper class for constructing Google Analytics Property Link.\"\"\"",
          "51:     name = \"Data Analytics Property\"",
          "52:     key = \"data_analytics_property\"",
          "53:     format_str = \"p{property_id}/\"",
          "55:     @staticmethod",
          "56:     def persist(",
          "57:         context: Context,",
          "58:         task_instance: BaseOperator,",
          "59:         property_id: str,",
          "60:     ):",
          "61:         task_instance.xcom_push(",
          "62:             context,",
          "63:             key=GoogleAnalyticsPropertyLink.key,",
          "64:             value={\"property_id\": property_id},",
          "65:         )",
          "",
          "---------------"
        ],
        "airflow/providers/google/marketing_platform/operators/analytics.py||airflow/providers/google/marketing_platform/operators/analytics.py": [
          "File: airflow/providers/google/marketing_platform/operators/analytics.py -> airflow/providers/google/marketing_platform/operators/analytics.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from __future__ import annotations",
          "21: import csv",
          "22: from tempfile import NamedTemporaryFile",
          "23: from typing import TYPE_CHECKING, Any, Sequence",
          "25: from airflow.models import BaseOperator",
          "26: from airflow.providers.google.cloud.hooks.gcs import GCSHook",
          "27: from airflow.providers.google.marketing_platform.hooks.analytics import GoogleAnalyticsHook",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import warnings",
          "26: from airflow.exceptions import AirflowProviderDeprecationWarning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     \"\"\"",
          "35:     Lists all accounts to which the user has access.",
          "37:     .. seealso::",
          "38:         Check official API docs:",
          "39:         https://developers.google.com/analytics/devguides/config/mgmt/v3/mgmtReference/management/accounts/list",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     .. seealso::",
          "40:         This operator is deprecated, please use",
          "41:         :class:`~airflow.providers.google.marketing_platform.operators.analytics_admin.GoogleAnalyticsAdminListAccountsOperator`:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         impersonation_chain: str | Sequence[str] | None = None,",
          "72:     ) -> None:",
          "73:         super().__init__(**kwargs)",
          "75:         self.api_version = api_version",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         warnings.warn(",
          "80:             f\"The `{type(self).__name__}` operator is deprecated, please use \"",
          "81:             f\"`GoogleAnalyticsAdminListAccountsOperator` instead.\",",
          "82:             AirflowProviderDeprecationWarning,",
          "83:             stacklevel=1,",
          "84:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     \"\"\"",
          "91:     Returns a web property-Google Ads link to which the user has access.",
          "93:     .. seealso::",
          "94:         Check official API docs:",
          "95:         https://developers.google.com/analytics/devguides/config/mgmt/v3/mgmtReference/management/webPropertyAdWordsLinks/get",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     .. seealso::",
          "107:         This operator is deprecated, please use",
          "108:         :class:`~airflow.providers.google.marketing_platform.operators.analytics_admin.GoogleAnalyticsAdminGetGoogleAdsLinkOperator`:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     ):",
          "134:         super().__init__(**kwargs)",
          "136:         self.account_id = account_id",
          "137:         self.web_property_ad_words_link_id = web_property_ad_words_link_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:         warnings.warn(",
          "153:             f\"The `{type(self).__name__}` operator is deprecated, please use \"",
          "154:             f\"`GoogleAnalyticsAdminGetGoogleAdsLinkOperator` instead.\",",
          "155:             AirflowProviderDeprecationWarning,",
          "156:             stacklevel=1,",
          "157:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:     \"\"\"",
          "159:     Lists webProperty-Google Ads links for a given web property.",
          "161:     .. seealso::",
          "162:         Check official API docs:",
          "163:         https://developers.google.com/analytics/devguides/config/mgmt/v3/mgmtReference/management/webPropertyAdWordsLinks/list#http-request",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     .. seealso::",
          "185:         This operator is deprecated, please use",
          "186:         :class:`~airflow.providers.google.marketing_platform.operators.analytics_admin.GoogleAnalyticsAdminListGoogleAdsLinksOperator`:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "198:     ) -> None:",
          "199:         super().__init__(**kwargs)",
          "201:         self.account_id = account_id",
          "202:         self.web_property_id = web_property_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:         warnings.warn(",
          "228:             f\"The `{type(self).__name__}` operator is deprecated, please use \"",
          "229:             f\"`GoogleAnalyticsAdminListGoogleAdsLinksOperator` instead.\",",
          "230:             AirflowProviderDeprecationWarning,",
          "231:             stacklevel=1,",
          "232:         )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "221:     \"\"\"",
          "222:     Take a file from Cloud Storage and uploads it to GA via data import API.",
          "224:     :param storage_bucket: The Google cloud storage bucket where the file is stored.",
          "225:     :param storage_name_object: The name of the object in the desired Google cloud",
          "226:           storage bucket. (templated) If the destination points to an existing",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:     .. seealso::",
          "258:         This operator is deprecated, please use",
          "259:         :class:`~airflow.providers.google.marketing_platform.operators.analytics_admin.GoogleAnalyticsAdminCreateDataStreamOperator`:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "266:         impersonation_chain: str | Sequence[str] | None = None,",
          "268:     ) -> None:",
          "269:         super().__init__(**kwargs)",
          "270:         self.storage_bucket = storage_bucket",
          "271:         self.storage_name_object = storage_name_object",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:         warnings.warn(",
          "307:             f\"The `{type(self).__name__}` operator is deprecated, please use \"",
          "308:             f\"`GoogleAnalyticsAdminCreateDataStreamOperator` instead.\",",
          "309:             AirflowProviderDeprecationWarning,",
          "310:             stacklevel=1,",
          "311:         )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "317:     \"\"\"",
          "318:     Deletes previous GA uploads to leave the latest file to control the size of the Data Set Quota.",
          "320:     :param account_id: The GA account Id (long) to which the data upload belongs.",
          "321:     :param web_property_id: The web property UA-string associated with the upload.",
          "322:     :param custom_data_source_id: The id to which the data import belongs.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:     .. seealso::",
          "364:         This operator is deprecated, please use",
          "365:         :class:`~airflow.providers.google.marketing_platform.operators.analytics_admin.GoogleAnalyticsAdminDeleteDataStreamOperator`:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "348:         impersonation_chain: str | Sequence[str] | None = None,",
          "350:     ) -> None:",
          "351:         super().__init__(**kwargs)",
          "353:         self.account_id = account_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:         warnings.warn(",
          "399:             f\"The `{type(self).__name__}` operator is deprecated, please use \"",
          "400:             f\"`GoogleAnalyticsAdminDeleteDataStreamOperator` instead.\",",
          "401:             AirflowProviderDeprecationWarning,",
          "402:             stacklevel=1,",
          "403:         )",
          "",
          "---------------"
        ],
        "airflow/providers/google/marketing_platform/operators/analytics_admin.py||airflow/providers/google/marketing_platform/operators/analytics_admin.py": [
          "File: airflow/providers/google/marketing_platform/operators/analytics_admin.py -> airflow/providers/google/marketing_platform/operators/analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: \"\"\"This module contains Google Analytics 4 (GA4) operators.\"\"\"",
          "19: from __future__ import annotations",
          "21: from typing import TYPE_CHECKING, Any, Sequence",
          "23: from google.analytics.admin_v1beta import (",
          "24:     Account,",
          "25:     DataStream,",
          "26:     GoogleAdsLink,",
          "27:     Property,",
          "28: )",
          "29: from google.api_core.gapic_v1.method import DEFAULT, _MethodDefault",
          "31: from airflow.exceptions import AirflowNotFoundException",
          "32: from airflow.providers.google.cloud.operators.cloud_base import GoogleCloudBaseOperator",
          "33: from airflow.providers.google.marketing_platform.hooks.analytics_admin import GoogleAnalyticsAdminHook",
          "34: from airflow.providers.google.marketing_platform.links.analytics_admin import GoogleAnalyticsPropertyLink",
          "36: if TYPE_CHECKING:",
          "37:     from google.api_core.retry import Retry",
          "38:     from google.protobuf.message import Message",
          "40:     from airflow.utils.context import Context",
          "43: class GoogleAnalyticsAdminListAccountsOperator(GoogleCloudBaseOperator):",
          "44:     \"\"\"",
          "45:     Lists all accounts to which the user has access.",
          "47:     .. seealso::",
          "48:         For more information on how to use this operator, take a look at the guide:",
          "49:         :ref:`howto/operator:GoogleAnalyticsAdminListAccountsOperator`",
          "51:     :param page_size: Optional, number of results to return in the list.",
          "52:     :param page_token: Optional. The next_page_token value returned from a previous List request, if any.",
          "53:     :param show_deleted: Optional. Whether to include soft-deleted (ie: \"trashed\") Accounts in the results.",
          "54:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "55:             will not be retried.",
          "56:     :param timeout: Optional. The timeout for this request.",
          "57:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "58:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "59:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "60:         credentials, or chained list of accounts required to get the access_token",
          "61:         of the last account in the list, which will be impersonated in the request.",
          "62:         If set as a string, the account must grant the originating account",
          "63:         the Service Account Token Creator IAM role.",
          "64:         If set as a sequence, the identities from the list must grant",
          "65:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "66:         account from the list granting this role to the originating account (templated).",
          "67:     \"\"\"",
          "69:     template_fields: Sequence[str] = (",
          "70:         \"gcp_conn_id\",",
          "71:         \"impersonation_chain\",",
          "72:         \"page_size\",",
          "73:         \"page_token\",",
          "74:     )",
          "76:     def __init__(",
          "77:         self,",
          "79:         page_size: int | None = None,",
          "80:         page_token: str | None = None,",
          "81:         show_deleted: bool | None = None,",
          "82:         retry: Retry | _MethodDefault = DEFAULT,",
          "83:         timeout: float | None = None,",
          "84:         metadata: Sequence[tuple[str, str]] = (),",
          "85:         gcp_conn_id: str = \"google_cloud_default\",",
          "86:         impersonation_chain: str | Sequence[str] | None = None,",
          "88:     ) -> None:",
          "89:         super().__init__(**kwargs)",
          "90:         self.page_size = page_size",
          "91:         self.page_token = page_token",
          "92:         self.show_deleted = show_deleted",
          "93:         self.retry = retry",
          "94:         self.timeout = timeout",
          "95:         self.metadata = metadata",
          "96:         self.gcp_conn_id = gcp_conn_id",
          "97:         self.impersonation_chain = impersonation_chain",
          "99:     def execute(",
          "100:         self,",
          "101:         context: Context,",
          "102:     ) -> Sequence[Message]:",
          "103:         hook = GoogleAnalyticsAdminHook(",
          "104:             gcp_conn_id=self.gcp_conn_id,",
          "105:             impersonation_chain=self.impersonation_chain,",
          "106:         )",
          "107:         self.log.info(",
          "108:             \"Requesting list of Google Analytics accounts. \"",
          "109:             f\"Page size: {self.page_size}, page token: {self.page_token}\"",
          "110:         )",
          "111:         accounts = hook.list_accounts(",
          "112:             page_size=self.page_size,",
          "113:             page_token=self.page_token,",
          "114:             show_deleted=self.show_deleted,",
          "115:             retry=self.retry,",
          "116:             timeout=self.timeout,",
          "117:             metadata=self.metadata,",
          "118:         )",
          "119:         accounts_list: Sequence[Message] = [Account.to_dict(item) for item in accounts]",
          "120:         n = len(accounts_list)",
          "121:         self.log.info(\"Successful request. Retrieved %s item%s.\", n, \"s\" if n > 1 else \"\")",
          "122:         return accounts_list",
          "125: class GoogleAnalyticsAdminCreatePropertyOperator(GoogleCloudBaseOperator):",
          "126:     \"\"\"",
          "127:     Creates property.",
          "129:     .. seealso::",
          "130:         For more information on how to use this operator, take a look at the guide:",
          "131:         :ref:`howto/operator:GoogleAnalyticsAdminCreatePropertyOperator`",
          "133:     :param analytics_property: The property to create. Note: the supplied property must specify its parent.",
          "134:         For more details see: https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/properties#Property",
          "135:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "136:         will not be retried.",
          "137:     :param timeout: Optional. The timeout for this request.",
          "138:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "139:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "140:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "141:         credentials, or chained list of accounts required to get the access_token",
          "142:         of the last account in the list, which will be impersonated in the request.",
          "143:         If set as a string, the account must grant the originating account",
          "144:         the Service Account Token Creator IAM role.",
          "145:         If set as a sequence, the identities from the list must grant",
          "146:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "147:         account from the list granting this role to the originating account (templated).",
          "148:     \"\"\"",
          "150:     template_fields: Sequence[str] = (",
          "151:         \"gcp_conn_id\",",
          "152:         \"impersonation_chain\",",
          "153:         \"analytics_property\",",
          "154:     )",
          "155:     operator_extra_links = (GoogleAnalyticsPropertyLink(),)",
          "157:     def __init__(",
          "158:         self,",
          "160:         analytics_property: Property | dict[str, Any],",
          "161:         retry: Retry | _MethodDefault = DEFAULT,",
          "162:         timeout: float | None = None,",
          "163:         metadata: Sequence[tuple[str, str]] = (),",
          "164:         gcp_conn_id: str = \"google_cloud_default\",",
          "165:         impersonation_chain: str | Sequence[str] | None = None,",
          "167:     ) -> None:",
          "168:         super().__init__(**kwargs)",
          "169:         self.analytics_property = analytics_property",
          "170:         self.retry = retry",
          "171:         self.timeout = timeout",
          "172:         self.metadata = metadata",
          "173:         self.gcp_conn_id = gcp_conn_id",
          "174:         self.impersonation_chain = impersonation_chain",
          "176:     def execute(",
          "177:         self,",
          "178:         context: Context,",
          "179:     ) -> Message:",
          "180:         hook = GoogleAnalyticsAdminHook(",
          "181:             gcp_conn_id=self.gcp_conn_id,",
          "182:             impersonation_chain=self.impersonation_chain,",
          "183:         )",
          "184:         self.log.info(\"Creating a Google Analytics property.\")",
          "185:         prop = hook.create_property(",
          "186:             analytics_property=self.analytics_property,",
          "187:             retry=self.retry,",
          "188:             timeout=self.timeout,",
          "189:             metadata=self.metadata,",
          "190:         )",
          "191:         self.log.info(\"The Google Analytics property %s was created successfully.\", prop.name)",
          "192:         GoogleAnalyticsPropertyLink.persist(",
          "193:             context=context,",
          "194:             task_instance=self,",
          "195:             property_id=prop.name.lstrip(\"properties/\"),",
          "196:         )",
          "198:         return Property.to_dict(prop)",
          "201: class GoogleAnalyticsAdminDeletePropertyOperator(GoogleCloudBaseOperator):",
          "202:     \"\"\"",
          "203:     Soft-delete property.",
          "205:     .. seealso::",
          "206:         For more information on how to use this operator, take a look at the guide:",
          "207:         :ref:`howto/operator:GoogleAnalyticsAdminDeletePropertyOperator`",
          "209:     :param property_id: The id of the Property to soft-delete.",
          "210:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "211:         will not be retried.",
          "212:     :param timeout: Optional. The timeout for this request.",
          "213:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "214:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "215:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "216:         credentials, or chained list of accounts required to get the access_token",
          "217:         of the last account in the list, which will be impersonated in the request.",
          "218:         If set as a string, the account must grant the originating account",
          "219:         the Service Account Token Creator IAM role.",
          "220:         If set as a sequence, the identities from the list must grant",
          "221:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "222:         account from the list granting this role to the originating account (templated).",
          "223:     \"\"\"",
          "225:     template_fields: Sequence[str] = (",
          "226:         \"gcp_conn_id\",",
          "227:         \"impersonation_chain\",",
          "228:         \"property_id\",",
          "229:     )",
          "231:     def __init__(",
          "232:         self,",
          "234:         property_id: str,",
          "235:         retry: Retry | _MethodDefault = DEFAULT,",
          "236:         timeout: float | None = None,",
          "237:         metadata: Sequence[tuple[str, str]] = (),",
          "238:         gcp_conn_id: str = \"google_cloud_default\",",
          "239:         impersonation_chain: str | Sequence[str] | None = None,",
          "241:     ) -> None:",
          "242:         super().__init__(**kwargs)",
          "243:         self.property_id = property_id",
          "244:         self.retry = retry",
          "245:         self.timeout = timeout",
          "246:         self.metadata = metadata",
          "247:         self.gcp_conn_id = gcp_conn_id",
          "248:         self.impersonation_chain = impersonation_chain",
          "250:     def execute(",
          "251:         self,",
          "252:         context: Context,",
          "253:     ) -> Message:",
          "254:         hook = GoogleAnalyticsAdminHook(",
          "255:             gcp_conn_id=self.gcp_conn_id,",
          "256:             impersonation_chain=self.impersonation_chain,",
          "257:         )",
          "258:         self.log.info(\"Deleting a Google Analytics property.\")",
          "259:         prop = hook.delete_property(",
          "260:             property_id=self.property_id,",
          "261:             retry=self.retry,",
          "262:             timeout=self.timeout,",
          "263:             metadata=self.metadata,",
          "264:         )",
          "265:         self.log.info(\"The Google Analytics property %s was soft-deleted successfully.\", prop.name)",
          "266:         return Property.to_dict(prop)",
          "269: class GoogleAnalyticsAdminCreateDataStreamOperator(GoogleCloudBaseOperator):",
          "270:     \"\"\"",
          "271:     Creates Data stream.",
          "273:     .. seealso::",
          "274:         For more information on how to use this operator, take a look at the guide:",
          "275:         :ref:`howto/operator:GoogleAnalyticsAdminCreateDataStreamOperator`",
          "277:     :param property_id: ID of the parent property for the data stream.",
          "278:     :param data_stream: The data stream to create.",
          "279:         For more details see: https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/properties.dataStreams#DataStream",
          "280:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "281:         will not be retried.",
          "282:     :param timeout: Optional. The timeout for this request.",
          "283:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "284:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "285:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "286:         credentials, or chained list of accounts required to get the access_token",
          "287:         of the last account in the list, which will be impersonated in the request.",
          "288:         If set as a string, the account must grant the originating account",
          "289:         the Service Account Token Creator IAM role.",
          "290:         If set as a sequence, the identities from the list must grant",
          "291:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "292:         account from the list granting this role to the originating account (templated).",
          "293:     \"\"\"",
          "295:     template_fields: Sequence[str] = (",
          "296:         \"gcp_conn_id\",",
          "297:         \"impersonation_chain\",",
          "298:         \"property_id\",",
          "299:         \"data_stream\",",
          "300:     )",
          "302:     def __init__(",
          "303:         self,",
          "305:         property_id: str,",
          "306:         data_stream: DataStream | dict,",
          "307:         retry: Retry | _MethodDefault = DEFAULT,",
          "308:         timeout: float | None = None,",
          "309:         metadata: Sequence[tuple[str, str]] = (),",
          "310:         gcp_conn_id: str = \"google_cloud_default\",",
          "311:         impersonation_chain: str | Sequence[str] | None = None,",
          "313:     ) -> None:",
          "314:         super().__init__(**kwargs)",
          "315:         self.property_id = property_id",
          "316:         self.data_stream = data_stream",
          "317:         self.retry = retry",
          "318:         self.timeout = timeout",
          "319:         self.metadata = metadata",
          "320:         self.gcp_conn_id = gcp_conn_id",
          "321:         self.impersonation_chain = impersonation_chain",
          "323:     def execute(",
          "324:         self,",
          "325:         context: Context,",
          "326:     ) -> Message:",
          "327:         hook = GoogleAnalyticsAdminHook(",
          "328:             gcp_conn_id=self.gcp_conn_id,",
          "329:             impersonation_chain=self.impersonation_chain,",
          "330:         )",
          "331:         self.log.info(\"Creating a Google Analytics data stream.\")",
          "332:         data_stream = hook.create_data_stream(",
          "333:             property_id=self.property_id,",
          "334:             data_stream=self.data_stream,",
          "335:             retry=self.retry,",
          "336:             timeout=self.timeout,",
          "337:             metadata=self.metadata,",
          "338:         )",
          "339:         self.log.info(\"The Google Analytics data stream %s was created successfully.\", data_stream.name)",
          "340:         return DataStream.to_dict(data_stream)",
          "343: class GoogleAnalyticsAdminDeleteDataStreamOperator(GoogleCloudBaseOperator):",
          "344:     \"\"\"",
          "345:     Deletes Data stream.",
          "347:     .. seealso::",
          "348:         For more information on how to use this operator, take a look at the guide:",
          "349:         :ref:`howto/operator:GoogleAnalyticsAdminDeleteDataStreamOperator`",
          "351:     :param property_id: ID of the property which is parent for the data stream.",
          "352:     :param data_stream_id: ID of the data stream to delete.",
          "353:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "354:         will not be retried.",
          "355:     :param timeout: Optional. The timeout for this request.",
          "356:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "357:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "358:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "359:         credentials, or chained list of accounts required to get the access_token",
          "360:         of the last account in the list, which will be impersonated in the request.",
          "361:         If set as a string, the account must grant the originating account",
          "362:         the Service Account Token Creator IAM role.",
          "363:         If set as a sequence, the identities from the list must grant",
          "364:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "365:         account from the list granting this role to the originating account (templated).",
          "366:     \"\"\"",
          "368:     template_fields: Sequence[str] = (",
          "369:         \"gcp_conn_id\",",
          "370:         \"impersonation_chain\",",
          "371:         \"property_id\",",
          "372:         \"data_stream_id\",",
          "373:     )",
          "375:     def __init__(",
          "376:         self,",
          "378:         property_id: str,",
          "379:         data_stream_id: str,",
          "380:         retry: Retry | _MethodDefault = DEFAULT,",
          "381:         timeout: float | None = None,",
          "382:         metadata: Sequence[tuple[str, str]] = (),",
          "383:         gcp_conn_id: str = \"google_cloud_default\",",
          "384:         impersonation_chain: str | Sequence[str] | None = None,",
          "386:     ) -> None:",
          "387:         super().__init__(**kwargs)",
          "388:         self.property_id = property_id",
          "389:         self.data_stream_id = data_stream_id",
          "390:         self.retry = retry",
          "391:         self.timeout = timeout",
          "392:         self.metadata = metadata",
          "393:         self.gcp_conn_id = gcp_conn_id",
          "394:         self.impersonation_chain = impersonation_chain",
          "396:     def execute(",
          "397:         self,",
          "398:         context: Context,",
          "399:     ) -> None:",
          "400:         hook = GoogleAnalyticsAdminHook(",
          "401:             gcp_conn_id=self.gcp_conn_id,",
          "402:             impersonation_chain=self.impersonation_chain,",
          "403:         )",
          "404:         self.log.info(\"Deleting a Google Analytics data stream (id %s).\", self.data_stream_id)",
          "405:         hook.delete_data_stream(",
          "406:             property_id=self.property_id,",
          "407:             data_stream_id=self.data_stream_id,",
          "408:             retry=self.retry,",
          "409:             timeout=self.timeout,",
          "410:             metadata=self.metadata,",
          "411:         )",
          "412:         self.log.info(\"The Google Analytics data stream was deleted successfully.\")",
          "413:         return None",
          "416: class GoogleAnalyticsAdminListGoogleAdsLinksOperator(GoogleCloudBaseOperator):",
          "417:     \"\"\"",
          "418:     Lists all Google Ads links associated with a given property.",
          "420:     .. seealso::",
          "421:         For more information on how to use this operator, take a look at the guide:",
          "422:         :ref:`howto/operator:GoogleAnalyticsAdminListGoogleAdsLinksOperator`",
          "424:     :param property_id: ID of the parent property.",
          "425:     :param page_size: Optional, number of results to return in the list.",
          "426:     :param page_token: Optional. The next_page_token value returned from a previous List request, if any.",
          "427:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "428:         will not be retried.",
          "429:     :param timeout: Optional. The timeout for this request.",
          "430:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "431:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "432:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "433:         credentials, or chained list of accounts required to get the access_token",
          "434:         of the last account in the list, which will be impersonated in the request.",
          "435:         If set as a string, the account must grant the originating account",
          "436:         the Service Account Token Creator IAM role.",
          "437:         If set as a sequence, the identities from the list must grant",
          "438:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "439:         account from the list granting this role to the originating account (templated).",
          "440:     \"\"\"",
          "442:     template_fields: Sequence[str] = (",
          "443:         \"gcp_conn_id\",",
          "444:         \"impersonation_chain\",",
          "445:         \"property_id\",",
          "446:         \"page_size\",",
          "447:         \"page_token\",",
          "448:     )",
          "450:     def __init__(",
          "451:         self,",
          "453:         property_id: str,",
          "454:         page_size: int | None = None,",
          "455:         page_token: str | None = None,",
          "456:         retry: Retry | _MethodDefault = DEFAULT,",
          "457:         timeout: float | None = None,",
          "458:         metadata: Sequence[tuple[str, str]] = (),",
          "459:         gcp_conn_id: str = \"google_cloud_default\",",
          "460:         impersonation_chain: str | Sequence[str] | None = None,",
          "462:     ) -> None:",
          "463:         super().__init__(**kwargs)",
          "464:         self.property_id = property_id",
          "465:         self.page_size = page_size",
          "466:         self.page_token = page_token",
          "467:         self.retry = retry",
          "468:         self.timeout = timeout",
          "469:         self.metadata = metadata",
          "470:         self.gcp_conn_id = gcp_conn_id",
          "471:         self.impersonation_chain = impersonation_chain",
          "473:     def execute(",
          "474:         self,",
          "475:         context: Context,",
          "476:     ) -> Sequence[Message]:",
          "477:         hook = GoogleAnalyticsAdminHook(",
          "478:             gcp_conn_id=self.gcp_conn_id,",
          "479:             impersonation_chain=self.impersonation_chain,",
          "480:         )",
          "481:         self.log.info(",
          "482:             \"Requesting list of Google Ads links accounts for the property_id %s, \"",
          "483:             \"page size %s, page token %s\",",
          "484:             self.property_id,",
          "485:             self.page_size,",
          "486:             self.page_token,",
          "487:         )",
          "488:         google_ads_links = hook.list_google_ads_links(",
          "489:             property_id=self.property_id,",
          "490:             page_size=self.page_size,",
          "491:             page_token=self.page_token,",
          "492:             retry=self.retry,",
          "493:             timeout=self.timeout,",
          "494:             metadata=self.metadata,",
          "495:         )",
          "496:         ads_links_list: Sequence[Message] = [GoogleAdsLink.to_dict(item) for item in google_ads_links]",
          "497:         n = len(ads_links_list)",
          "498:         self.log.info(\"Successful request. Retrieved %s item%s.\", n, \"s\" if n > 1 else \"\")",
          "499:         return ads_links_list",
          "502: class GoogleAnalyticsAdminGetGoogleAdsLinkOperator(GoogleCloudBaseOperator):",
          "503:     \"\"\"",
          "504:     Gets a Google Ads link associated with a given property.",
          "506:     .. seealso::",
          "507:         For more information on how to use this operator, take a look at the guide:",
          "508:         :ref:`howto/operator:GoogleAnalyticsAdminGetGoogleAdsLinkOperator`",
          "510:     :param property_id: Parent property id.",
          "511:     :param google_ads_link_id: Google Ads link id.",
          "512:     :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests",
          "513:         will not be retried.",
          "514:     :param timeout: Optional. The timeout for this request.",
          "515:     :param metadata: Optional. Strings which should be sent along with the request as metadata.",
          "516:     :param gcp_conn_id: The connection ID to use when fetching connection info.",
          "517:     :param impersonation_chain: Optional. Service account to impersonate using short-term",
          "518:         credentials, or chained list of accounts required to get the access_token",
          "519:         of the last account in the list, which will be impersonated in the request.",
          "520:         If set as a string, the account must grant the originating account",
          "521:         the Service Account Token Creator IAM role.",
          "522:         If set as a sequence, the identities from the list must grant",
          "523:         Service Account Token Creator IAM role to the directly preceding identity, with first",
          "524:         account from the list granting this role to the originating account (templated).",
          "525:     \"\"\"",
          "527:     template_fields: Sequence[str] = (",
          "528:         \"gcp_conn_id\",",
          "529:         \"impersonation_chain\",",
          "530:         \"google_ads_link_id\",",
          "531:     )",
          "533:     def __init__(",
          "534:         self,",
          "536:         property_id: str,",
          "537:         google_ads_link_id: str,",
          "538:         retry: Retry | _MethodDefault = DEFAULT,",
          "539:         timeout: float | None = None,",
          "540:         metadata: Sequence[tuple[str, str]] = (),",
          "541:         gcp_conn_id: str = \"google_cloud_default\",",
          "542:         impersonation_chain: str | Sequence[str] | None = None,",
          "544:     ) -> None:",
          "545:         super().__init__(**kwargs)",
          "546:         self.property_id = property_id",
          "547:         self.google_ads_link_id = google_ads_link_id",
          "548:         self.retry = retry",
          "549:         self.timeout = timeout",
          "550:         self.metadata = metadata",
          "551:         self.gcp_conn_id = gcp_conn_id",
          "552:         self.impersonation_chain = impersonation_chain",
          "554:     def execute(",
          "555:         self,",
          "556:         context: Context,",
          "557:     ) -> Message:",
          "558:         hook = GoogleAnalyticsAdminHook(",
          "559:             gcp_conn_id=self.gcp_conn_id,",
          "560:             impersonation_chain=self.impersonation_chain,",
          "561:         )",
          "562:         self.log.info(",
          "563:             \"Requesting the Google Ads link with id %s for the property_id %s\",",
          "564:             self.google_ads_link_id,",
          "565:             self.property_id,",
          "566:         )",
          "567:         ads_links = hook.list_google_ads_links(",
          "568:             property_id=self.property_id,",
          "569:             retry=self.retry,",
          "570:             timeout=self.timeout,",
          "571:             metadata=self.metadata,",
          "572:         )",
          "573:         find_link = (item for item in ads_links if item.name.split(\"/\")[-1] == self.google_ads_link_id)",
          "574:         if ads_link := next(find_link, None):",
          "575:             self.log.info(\"Successful request.\")",
          "576:             return GoogleAdsLink.to_dict(ads_link)",
          "577:         raise AirflowNotFoundException(",
          "578:             f\"Google Ads Link with id {self.google_ads_link_id} and property id {self.property_id} not found\"",
          "579:         )",
          "",
          "---------------"
        ],
        "tests/providers/google/marketing_platform/hooks/test_analytics_admin.py||tests/providers/google/marketing_platform/hooks/test_analytics_admin.py": [
          "File: tests/providers/google/marketing_platform/hooks/test_analytics_admin.py -> tests/providers/google/marketing_platform/hooks/test_analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: from unittest import mock",
          "22: from airflow.providers.google.marketing_platform.hooks.analytics_admin import GoogleAnalyticsAdminHook",
          "23: from tests.providers.google.cloud.utils.base_gcp_mock import mock_base_gcp_hook_default_project_id",
          "25: GCP_CONN_ID = \"test_gcp_conn_id\"",
          "26: IMPERSONATION_CHAIN = [\"ACCOUNT_1\", \"ACCOUNT_2\", \"ACCOUNT_3\"]",
          "27: TEST_PROPERTY_ID = \"123456789\"",
          "28: TEST_PROPERTY_NAME = f\"properties/{TEST_PROPERTY_ID}\"",
          "29: TEST_DATASTREAM_ID = \"987654321\"",
          "30: TEST_DATASTREAM_NAME = f\"properties/{TEST_PROPERTY_ID}/dataStreams/{TEST_DATASTREAM_ID}\"",
          "31: ANALYTICS_HOOK_PATH = \"airflow.providers.google.marketing_platform.hooks.analytics_admin\"",
          "34: class TestGoogleAnalyticsAdminHook:",
          "35:     def setup_method(self):",
          "36:         with mock.patch(",
          "37:             \"airflow.providers.google.common.hooks.base_google.GoogleBaseHook.__init__\",",
          "38:             new=mock_base_gcp_hook_default_project_id,",
          "39:         ):",
          "40:             self.hook = GoogleAnalyticsAdminHook(GCP_CONN_ID)",
          "42:     @mock.patch(\"airflow.providers.google.common.hooks.base_google.GoogleBaseHook.__init__\")",
          "43:     def test_init(self, mock_base_init):",
          "44:         GoogleAnalyticsAdminHook(",
          "45:             GCP_CONN_ID,",
          "46:             impersonation_chain=IMPERSONATION_CHAIN,",
          "47:         )",
          "48:         mock_base_init.assert_called_once_with(",
          "49:             GCP_CONN_ID,",
          "50:             impersonation_chain=IMPERSONATION_CHAIN,",
          "51:         )",
          "53:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.CLIENT_INFO\")",
          "54:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_credentials\")",
          "55:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.AnalyticsAdminServiceClient\")",
          "56:     def test_get_conn(self, mock_client, get_credentials, mock_client_info):",
          "57:         mock_credentials = mock.MagicMock()",
          "58:         get_credentials.return_value = mock_credentials",
          "60:         result = self.hook.get_conn()",
          "62:         mock_client.assert_called_once_with(credentials=mock_credentials, client_info=mock_client_info)",
          "63:         assert self.hook._conn == result",
          "65:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_conn\")",
          "66:     def test_list_accounts(self, mock_get_conn):",
          "67:         list_accounts_expected = mock.MagicMock()",
          "68:         mock_list_accounts = mock_get_conn.return_value.list_accounts",
          "69:         mock_list_accounts.return_value = list_accounts_expected",
          "70:         mock_page_size, mock_page_token, mock_show_deleted, mock_retry, mock_timeout, mock_metadata = (",
          "71:             mock.MagicMock() for _ in range(6)",
          "72:         )",
          "74:         request = {",
          "75:             \"page_size\": mock_page_size,",
          "76:             \"page_token\": mock_page_token,",
          "77:             \"show_deleted\": mock_show_deleted,",
          "78:         }",
          "80:         list_accounts_received = self.hook.list_accounts(",
          "81:             page_size=mock_page_size,",
          "82:             page_token=mock_page_token,",
          "83:             show_deleted=mock_show_deleted,",
          "84:             retry=mock_retry,",
          "85:             timeout=mock_timeout,",
          "86:             metadata=mock_metadata,",
          "87:         )",
          "88:         mock_list_accounts.assert_called_once_with(",
          "89:             request=request, retry=mock_retry, timeout=mock_timeout, metadata=mock_metadata",
          "90:         )",
          "91:         assert list_accounts_received == list_accounts_expected",
          "93:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_conn\")",
          "94:     def test_create_property(self, mock_get_conn):",
          "95:         property_expected = mock.MagicMock()",
          "97:         mock_create_property = mock_get_conn.return_value.create_property",
          "98:         mock_create_property.return_value = property_expected",
          "99:         mock_property, mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(4))",
          "101:         property_created = self.hook.create_property(",
          "102:             analytics_property=mock_property, retry=mock_retry, timeout=mock_timeout, metadata=mock_metadata",
          "103:         )",
          "105:         request = {\"property\": mock_property}",
          "106:         mock_create_property.assert_called_once_with(",
          "107:             request=request, retry=mock_retry, timeout=mock_timeout, metadata=mock_metadata",
          "108:         )",
          "109:         assert property_created == property_expected",
          "111:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_conn\")",
          "112:     def test_delete_property(self, mock_get_conn):",
          "113:         property_expected = mock.MagicMock()",
          "114:         mock_delete_property = mock_get_conn.return_value.delete_property",
          "115:         mock_delete_property.return_value = property_expected",
          "116:         mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(3))",
          "118:         property_deleted = self.hook.delete_property(",
          "119:             property_id=TEST_PROPERTY_ID,",
          "120:             retry=mock_retry,",
          "121:             timeout=mock_timeout,",
          "122:             metadata=mock_metadata,",
          "123:         )",
          "124:         request = {\"name\": TEST_PROPERTY_NAME}",
          "125:         mock_delete_property.assert_called_once_with(",
          "126:             request=request,",
          "127:             retry=mock_retry,",
          "128:             timeout=mock_timeout,",
          "129:             metadata=mock_metadata,",
          "130:         )",
          "131:         assert property_deleted == property_expected",
          "133:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_conn\")",
          "134:     def test_create_data_stream(self, mock_get_conn):",
          "135:         data_stream_expected = mock.MagicMock()",
          "136:         mock_create_data_stream = mock_get_conn.return_value.create_data_stream",
          "137:         mock_create_data_stream.return_value = data_stream_expected",
          "138:         mock_data_stream, mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(4))",
          "140:         data_stream_created = self.hook.create_data_stream(",
          "141:             property_id=TEST_PROPERTY_ID,",
          "142:             data_stream=mock_data_stream,",
          "143:             retry=mock_retry,",
          "144:             timeout=mock_timeout,",
          "145:             metadata=mock_metadata,",
          "146:         )",
          "148:         request = {\"parent\": TEST_PROPERTY_NAME, \"data_stream\": mock_data_stream}",
          "149:         mock_create_data_stream.assert_called_once_with(",
          "150:             request=request, retry=mock_retry, timeout=mock_timeout, metadata=mock_metadata",
          "151:         )",
          "152:         assert data_stream_created == data_stream_expected",
          "154:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_conn\")",
          "155:     def test_delete_data_stream(self, mock_get_conn):",
          "156:         mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(3))",
          "158:         self.hook.delete_data_stream(",
          "159:             property_id=TEST_PROPERTY_ID,",
          "160:             data_stream_id=TEST_DATASTREAM_ID,",
          "161:             retry=mock_retry,",
          "162:             timeout=mock_timeout,",
          "163:             metadata=mock_metadata,",
          "164:         )",
          "166:         request = {\"name\": TEST_DATASTREAM_NAME}",
          "167:         mock_get_conn.return_value.delete_data_stream.assert_called_once_with(",
          "168:             request=request,",
          "169:             retry=mock_retry,",
          "170:             timeout=mock_timeout,",
          "171:             metadata=mock_metadata,",
          "172:         )",
          "174:     @mock.patch(f\"{ANALYTICS_HOOK_PATH}.GoogleAnalyticsAdminHook.get_conn\")",
          "175:     def test_list_ads_links(self, mock_get_conn):",
          "176:         mock_page_size, mock_page_token, mock_retry, mock_timeout, mock_metadata = (",
          "177:             mock.MagicMock() for _ in range(5)",
          "178:         )",
          "180:         self.hook.list_google_ads_links(",
          "181:             property_id=TEST_PROPERTY_ID,",
          "182:             page_size=mock_page_size,",
          "183:             page_token=mock_page_token,",
          "184:             retry=mock_retry,",
          "185:             timeout=mock_timeout,",
          "186:             metadata=mock_metadata,",
          "187:         )",
          "189:         request = {\"parent\": TEST_PROPERTY_NAME, \"page_size\": mock_page_size, \"page_token\": mock_page_token}",
          "190:         mock_get_conn.return_value.list_google_ads_links.assert_called_once_with(",
          "191:             request=request, retry=mock_retry, timeout=mock_timeout, metadata=mock_metadata",
          "192:         )",
          "",
          "---------------"
        ],
        "tests/providers/google/marketing_platform/links/__init__.py||tests/providers/google/marketing_platform/links/__init__.py": [
          "File: tests/providers/google/marketing_platform/links/__init__.py -> tests/providers/google/marketing_platform/links/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "",
          "---------------"
        ],
        "tests/providers/google/marketing_platform/links/test_analytics_admin.py||tests/providers/google/marketing_platform/links/test_analytics_admin.py": [
          "File: tests/providers/google/marketing_platform/links/test_analytics_admin.py -> tests/providers/google/marketing_platform/links/test_analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: from unittest import mock",
          "22: from airflow.providers.google.marketing_platform.links.analytics_admin import (",
          "23:     BASE_LINK,",
          "24:     GoogleAnalyticsPropertyLink,",
          "25: )",
          "27: TEST_PROPERTY_ID = \"123456789\"",
          "28: TEST_PROJECT_ID = \"test_project\"",
          "29: TEST_CONF_GOOGLE_ADS_LINK = {\"property_id\": TEST_PROJECT_ID}",
          "30: ANALYTICS_LINKS_PATH = \"airflow.providers.google.marketing_platform.links.analytics_admin\"",
          "33: class TestGoogleAnalyticsPropertyLink:",
          "34:     @mock.patch(f\"{ANALYTICS_LINKS_PATH}.XCom\")",
          "35:     def test_get_link(self, mock_xcom):",
          "36:         mock_ti_key = mock.MagicMock()",
          "37:         mock_xcom.get_value.return_value = TEST_CONF_GOOGLE_ADS_LINK",
          "38:         url_expected = f\"{BASE_LINK}#/p{TEST_PROJECT_ID}/\"",
          "40:         link = GoogleAnalyticsPropertyLink()",
          "41:         url = link.get_link(operator=mock.MagicMock(), ti_key=mock_ti_key)",
          "43:         mock_xcom.get_value.assert_called_once_with(key=link.key, ti_key=mock_ti_key)",
          "44:         assert url == url_expected",
          "46:     @mock.patch(f\"{ANALYTICS_LINKS_PATH}.XCom\")",
          "47:     def test_get_link_not_found(self, mock_xcom):",
          "48:         mock_ti_key = mock.MagicMock()",
          "49:         mock_xcom.get_value.return_value = None",
          "51:         link = GoogleAnalyticsPropertyLink()",
          "52:         url = link.get_link(operator=mock.MagicMock(), ti_key=mock_ti_key)",
          "54:         mock_xcom.get_value.assert_called_once_with(key=link.key, ti_key=mock_ti_key)",
          "55:         assert url == \"\"",
          "57:     def test_persist(self):",
          "58:         mock_context = mock.MagicMock()",
          "59:         mock_task_instance = mock.MagicMock()",
          "61:         GoogleAnalyticsPropertyLink.persist(",
          "62:             context=mock_context,",
          "63:             task_instance=mock_task_instance,",
          "64:             property_id=TEST_PROPERTY_ID,",
          "65:         )",
          "67:         mock_task_instance.xcom_push.assert_called_once_with(",
          "68:             mock_context,",
          "69:             key=GoogleAnalyticsPropertyLink.key,",
          "70:             value={\"property_id\": TEST_PROPERTY_ID},",
          "71:         )",
          "",
          "---------------"
        ],
        "tests/providers/google/marketing_platform/operators/test_analytics_admin.py||tests/providers/google/marketing_platform/operators/test_analytics_admin.py": [
          "File: tests/providers/google/marketing_platform/operators/test_analytics_admin.py -> tests/providers/google/marketing_platform/operators/test_analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "17: from __future__ import annotations",
          "19: from unittest import mock",
          "21: import pytest",
          "23: from airflow.exceptions import AirflowNotFoundException",
          "24: from airflow.providers.google.marketing_platform.operators.analytics_admin import (",
          "25:     GoogleAnalyticsAdminCreateDataStreamOperator,",
          "26:     GoogleAnalyticsAdminCreatePropertyOperator,",
          "27:     GoogleAnalyticsAdminDeleteDataStreamOperator,",
          "28:     GoogleAnalyticsAdminDeletePropertyOperator,",
          "29:     GoogleAnalyticsAdminGetGoogleAdsLinkOperator,",
          "30:     GoogleAnalyticsAdminListAccountsOperator,",
          "31:     GoogleAnalyticsAdminListGoogleAdsLinksOperator,",
          "32: )",
          "34: GCP_CONN_ID = \"google_cloud_default\"",
          "35: IMPERSONATION_CHAIN = [\"ACCOUNT_1\", \"ACCOUNT_2\", \"ACCOUNT_3\"]",
          "36: TEST_GA_GOOGLE_ADS_PROPERTY_ID = \"123456789\"",
          "37: TEST_GA_GOOGLE_ADS_LINK_ID = \"987654321\"",
          "38: TEST_GA_GOOGLE_ADS_LINK_NAME = (",
          "39:     f\"properties/{TEST_GA_GOOGLE_ADS_PROPERTY_ID}/googleAdsLinks/{TEST_GA_GOOGLE_ADS_LINK_ID}\"",
          "40: )",
          "41: TEST_PROPERTY_ID = \"123456789\"",
          "42: TEST_PROPERTY_NAME = f\"properties/{TEST_PROPERTY_ID}\"",
          "43: TEST_DATASTREAM_ID = \"987654321\"",
          "44: TEST_DATASTREAM_NAME = f\"properties/{TEST_PROPERTY_ID}/dataStreams/{TEST_DATASTREAM_ID}\"",
          "45: ANALYTICS_PATH = \"airflow.providers.google.marketing_platform.operators.analytics_admin\"",
          "48: class TestGoogleAnalyticsAdminListAccountsOperator:",
          "49:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "50:     @mock.patch(f\"{ANALYTICS_PATH}.Account.to_dict\")",
          "51:     def test_execute(self, account_to_dict_mock, hook_mock):",
          "52:         list_accounts_returned = (mock.MagicMock(), mock.MagicMock(), mock.MagicMock())",
          "53:         hook_mock.return_value.list_accounts.return_value = list_accounts_returned",
          "55:         list_accounts_serialized = [mock.MagicMock(), mock.MagicMock(), mock.MagicMock()]",
          "56:         account_to_dict_mock.side_effect = list_accounts_serialized",
          "58:         mock_page_size, mock_page_token, mock_show_deleted, mock_retry, mock_timeout, mock_metadata = (",
          "59:             mock.MagicMock() for _ in range(6)",
          "60:         )",
          "62:         retrieved_accounts_list = GoogleAnalyticsAdminListAccountsOperator(",
          "63:             task_id=\"test_task\",",
          "64:             page_size=mock_page_size,",
          "65:             page_token=mock_page_token,",
          "66:             show_deleted=mock_show_deleted,",
          "67:             retry=mock_retry,",
          "68:             timeout=mock_timeout,",
          "69:             metadata=mock_metadata,",
          "70:             gcp_conn_id=GCP_CONN_ID,",
          "71:             impersonation_chain=IMPERSONATION_CHAIN,",
          "72:         ).execute(context=None)",
          "74:         hook_mock.assert_called_once()",
          "75:         hook_mock.return_value.list_accounts.assert_called_once_with(",
          "76:             page_size=mock_page_size,",
          "77:             page_token=mock_page_token,",
          "78:             show_deleted=mock_show_deleted,",
          "79:             retry=mock_retry,",
          "80:             timeout=mock_timeout,",
          "81:             metadata=mock_metadata,",
          "82:         )",
          "83:         account_to_dict_mock.assert_has_calls([mock.call(item) for item in list_accounts_returned])",
          "84:         assert retrieved_accounts_list == list_accounts_serialized",
          "87: class TestGoogleAnalyticsAdminCreatePropertyOperator:",
          "88:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsPropertyLink\")",
          "89:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "90:     @mock.patch(f\"{ANALYTICS_PATH}.Property.to_dict\")",
          "91:     def test_execute(self, property_to_dict_mock, hook_mock, _):",
          "92:         property_returned = mock.MagicMock()",
          "93:         hook_mock.return_value.create_property.return_value = property_returned",
          "95:         property_serialized = mock.MagicMock()",
          "96:         property_to_dict_mock.return_value = property_serialized",
          "98:         mock_property, mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(4))",
          "100:         property_created = GoogleAnalyticsAdminCreatePropertyOperator(",
          "101:             task_id=\"test_task\",",
          "102:             analytics_property=mock_property,",
          "103:             retry=mock_retry,",
          "104:             timeout=mock_timeout,",
          "105:             metadata=mock_metadata,",
          "106:             gcp_conn_id=GCP_CONN_ID,",
          "107:             impersonation_chain=IMPERSONATION_CHAIN,",
          "108:         ).execute(context=None)",
          "110:         hook_mock.assert_called_once()",
          "111:         hook_mock.return_value.create_property.assert_called_once_with(",
          "112:             analytics_property=mock_property,",
          "113:             retry=mock_retry,",
          "114:             timeout=mock_timeout,",
          "115:             metadata=mock_metadata,",
          "116:         )",
          "117:         property_to_dict_mock.assert_called_once_with(property_returned)",
          "118:         assert property_created == property_serialized",
          "121: class TestGoogleAnalyticsAdminDeletePropertyOperator:",
          "122:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "123:     @mock.patch(f\"{ANALYTICS_PATH}.Property.to_dict\")",
          "124:     def test_execute(self, property_to_dict_mock, hook_mock):",
          "125:         property_returned = mock.MagicMock()",
          "126:         hook_mock.return_value.delete_property.return_value = property_returned",
          "128:         property_serialized = mock.MagicMock()",
          "129:         property_to_dict_mock.return_value = property_serialized",
          "131:         mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(3))",
          "133:         property_deleted = GoogleAnalyticsAdminDeletePropertyOperator(",
          "134:             task_id=\"test_task\",",
          "135:             gcp_conn_id=GCP_CONN_ID,",
          "136:             impersonation_chain=IMPERSONATION_CHAIN,",
          "137:             property_id=TEST_PROPERTY_ID,",
          "138:             retry=mock_retry,",
          "139:             timeout=mock_timeout,",
          "140:             metadata=mock_metadata,",
          "141:         ).execute(context=None)",
          "143:         hook_mock.assert_called_once()",
          "144:         hook_mock.return_value.delete_property.assert_called_once_with(",
          "145:             property_id=TEST_PROPERTY_ID,",
          "146:             retry=mock_retry,",
          "147:             timeout=mock_timeout,",
          "148:             metadata=mock_metadata,",
          "149:         )",
          "150:         property_to_dict_mock.assert_called_once_with(property_returned)",
          "151:         assert property_deleted == property_serialized",
          "154: class TestGoogleAnalyticsAdminCreateDataStreamOperator:",
          "155:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "156:     @mock.patch(f\"{ANALYTICS_PATH}.DataStream.to_dict\")",
          "157:     def test_execute(self, data_stream_to_dict_mock, hook_mock):",
          "158:         data_stream_returned = mock.MagicMock()",
          "159:         hook_mock.return_value.create_data_stream.return_value = data_stream_returned",
          "161:         data_stream_serialized = mock.MagicMock()",
          "162:         data_stream_to_dict_mock.return_value = data_stream_serialized",
          "164:         mock_parent, mock_data_stream, mock_retry, mock_timeout, mock_metadata = (",
          "165:             mock.MagicMock() for _ in range(5)",
          "166:         )",
          "168:         data_stream_created = GoogleAnalyticsAdminCreateDataStreamOperator(",
          "169:             task_id=\"test_task\",",
          "170:             property_id=TEST_PROPERTY_ID,",
          "171:             data_stream=mock_data_stream,",
          "172:             retry=mock_retry,",
          "173:             timeout=mock_timeout,",
          "174:             metadata=mock_metadata,",
          "175:             gcp_conn_id=GCP_CONN_ID,",
          "176:             impersonation_chain=IMPERSONATION_CHAIN,",
          "177:         ).execute(context=None)",
          "179:         hook_mock.assert_called_once()",
          "180:         hook_mock.return_value.create_data_stream.assert_called_once_with(",
          "181:             property_id=TEST_PROPERTY_ID,",
          "182:             data_stream=mock_data_stream,",
          "183:             retry=mock_retry,",
          "184:             timeout=mock_timeout,",
          "185:             metadata=mock_metadata,",
          "186:         )",
          "187:         data_stream_to_dict_mock.assert_called_once_with(data_stream_returned)",
          "188:         assert data_stream_created == data_stream_serialized",
          "191: class TestGoogleAnalyticsAdminDeleteDataStreamOperator:",
          "192:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "193:     def test_execute(self, hook_mock):",
          "194:         mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(3))",
          "196:         GoogleAnalyticsAdminDeleteDataStreamOperator(",
          "197:             task_id=\"test_task\",",
          "198:             gcp_conn_id=GCP_CONN_ID,",
          "199:             impersonation_chain=IMPERSONATION_CHAIN,",
          "200:             property_id=TEST_PROPERTY_ID,",
          "201:             data_stream_id=TEST_DATASTREAM_ID,",
          "202:             retry=mock_retry,",
          "203:             timeout=mock_timeout,",
          "204:             metadata=mock_metadata,",
          "205:         ).execute(context=None)",
          "207:         hook_mock.assert_called_once()",
          "208:         hook_mock.return_value.delete_data_stream.assert_called_once_with(",
          "209:             property_id=TEST_PROPERTY_ID,",
          "210:             data_stream_id=TEST_DATASTREAM_ID,",
          "211:             retry=mock_retry,",
          "212:             timeout=mock_timeout,",
          "213:             metadata=mock_metadata,",
          "214:         )",
          "217: class TestGoogleAnalyticsAdminListGoogleAdsLinksOperator:",
          "218:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "219:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAdsLink.to_dict\")",
          "220:     def test_execute(self, ads_link_to_dict_mock, hook_mock):",
          "221:         list_ads_links_returned = (mock.MagicMock(), mock.MagicMock(), mock.MagicMock())",
          "222:         hook_mock.return_value.list_google_ads_links.return_value = list_ads_links_returned",
          "224:         list_ads_links_serialized = [mock.MagicMock(), mock.MagicMock(), mock.MagicMock()]",
          "225:         ads_link_to_dict_mock.side_effect = list_ads_links_serialized",
          "227:         mock_page_size, mock_page_token, mock_show_deleted, mock_retry, mock_timeout, mock_metadata = (",
          "228:             mock.MagicMock() for _ in range(6)",
          "229:         )",
          "231:         retrieved_ads_links = GoogleAnalyticsAdminListGoogleAdsLinksOperator(",
          "232:             task_id=\"test_task\",",
          "233:             property_id=TEST_PROPERTY_ID,",
          "234:             page_size=mock_page_size,",
          "235:             page_token=mock_page_token,",
          "236:             retry=mock_retry,",
          "237:             timeout=mock_timeout,",
          "238:             metadata=mock_metadata,",
          "239:             gcp_conn_id=GCP_CONN_ID,",
          "240:             impersonation_chain=IMPERSONATION_CHAIN,",
          "241:         ).execute(context=None)",
          "243:         hook_mock.assert_called_once()",
          "244:         hook_mock.return_value.list_google_ads_links.assert_called_once_with(",
          "245:             property_id=TEST_PROPERTY_ID,",
          "246:             page_size=mock_page_size,",
          "247:             page_token=mock_page_token,",
          "248:             retry=mock_retry,",
          "249:             timeout=mock_timeout,",
          "250:             metadata=mock_metadata,",
          "251:         )",
          "252:         ads_link_to_dict_mock.assert_has_calls([mock.call(item) for item in list_ads_links_returned])",
          "253:         assert retrieved_ads_links == list_ads_links_serialized",
          "256: class TestGoogleAnalyticsAdminGetGoogleAdsLinkOperator:",
          "257:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "258:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAdsLink\")",
          "259:     def test_execute(self, mock_google_ads_link, hook_mock):",
          "260:         mock_ad_link = mock.MagicMock()",
          "261:         mock_ad_link.name = TEST_GA_GOOGLE_ADS_LINK_NAME",
          "262:         list_ads_links = hook_mock.return_value.list_google_ads_links",
          "263:         list_ads_links.return_value = [mock_ad_link]",
          "264:         mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(3))",
          "266:         GoogleAnalyticsAdminGetGoogleAdsLinkOperator(",
          "267:             task_id=\"test_task\",",
          "268:             property_id=TEST_GA_GOOGLE_ADS_PROPERTY_ID,",
          "269:             google_ads_link_id=TEST_GA_GOOGLE_ADS_LINK_ID,",
          "270:             gcp_conn_id=GCP_CONN_ID,",
          "271:             impersonation_chain=IMPERSONATION_CHAIN,",
          "272:             retry=mock_retry,",
          "273:             timeout=mock_timeout,",
          "274:             metadata=mock_metadata,",
          "275:         ).execute(context=None)",
          "277:         hook_mock.assert_called_once()",
          "278:         hook_mock.return_value.list_google_ads_links.assert_called_once_with(",
          "279:             property_id=TEST_PROPERTY_ID,",
          "280:             retry=mock_retry,",
          "281:             timeout=mock_timeout,",
          "282:             metadata=mock_metadata,",
          "283:         )",
          "284:         mock_google_ads_link.to_dict.assert_called_once_with(mock_ad_link)",
          "286:     @mock.patch(f\"{ANALYTICS_PATH}.GoogleAnalyticsAdminHook\")",
          "287:     def test_execute_not_found(self, hook_mock):",
          "288:         list_ads_links = hook_mock.return_value.list_google_ads_links",
          "289:         list_ads_links.return_value = []",
          "290:         mock_retry, mock_timeout, mock_metadata = (mock.MagicMock() for _ in range(3))",
          "292:         with pytest.raises(AirflowNotFoundException):",
          "293:             GoogleAnalyticsAdminGetGoogleAdsLinkOperator(",
          "294:                 task_id=\"test_task\",",
          "295:                 gcp_conn_id=GCP_CONN_ID,",
          "296:                 impersonation_chain=IMPERSONATION_CHAIN,",
          "297:                 property_id=TEST_GA_GOOGLE_ADS_PROPERTY_ID,",
          "298:                 google_ads_link_id=TEST_GA_GOOGLE_ADS_LINK_ID,",
          "299:                 retry=mock_retry,",
          "300:                 timeout=mock_timeout,",
          "301:                 metadata=mock_metadata,",
          "302:             ).execute(context=None)",
          "304:         hook_mock.assert_called_once()",
          "305:         hook_mock.return_value.list_google_ads_links.assert_called_once_with(",
          "306:             property_id=TEST_PROPERTY_ID,",
          "307:             retry=mock_retry,",
          "308:             timeout=mock_timeout,",
          "309:             metadata=mock_metadata,",
          "310:         )",
          "",
          "---------------"
        ],
        "tests/system/providers/google/marketing_platform/example_analytics_admin.py||tests/system/providers/google/marketing_platform/example_analytics_admin.py": [
          "File: tests/system/providers/google/marketing_platform/example_analytics_admin.py -> tests/system/providers/google/marketing_platform/example_analytics_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Licensed to the Apache Software Foundation (ASF) under one",
          "2: # or more contributor license agreements.  See the NOTICE file",
          "3: # distributed with this work for additional information",
          "4: # regarding copyright ownership.  The ASF licenses this file",
          "5: # to you under the Apache License, Version 2.0 (the",
          "6: # \"License\"); you may not use this file except in compliance",
          "7: # with the License.  You may obtain a copy of the License at",
          "8: #",
          "9: #   http://www.apache.org/licenses/LICENSE-2.0",
          "10: #",
          "11: # Unless required by applicable law or agreed to in writing,",
          "12: # software distributed under the License is distributed on an",
          "13: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: # KIND, either express or implied.  See the License for the",
          "15: # specific language governing permissions and limitations",
          "16: # under the License.",
          "17: \"\"\"",
          "18: Example Airflow DAG that shows how to use Google Analytics (GA4) Admin Operators.",
          "20: This DAG relies on the following OS environment variables",
          "25: In order to run this test, make sure you followed steps:",
          "26: 1. Login to https://analytics.google.com",
          "27: 2. In the settings section create an account and save its ID in the variable GA_ACCOUNT_ID.",
          "28: 3. In the settings section go to the Property access management page and add your service account email with",
          "29: Editor permissions. This service account should be created on behalf of the account from the step 1.",
          "30: 4. Make sure Google Analytics Admin API is enabled in your GCP project.",
          "31: 5. Create Google Ads account and link it to your Google Analytics account in the GA admin panel.",
          "32: 6. Associate the Google Ads account with a property, and save this property's id in the variable",
          "33: GA_GOOGLE_ADS_PROPERTY_ID.",
          "34: \"\"\"",
          "35: from __future__ import annotations",
          "37: import json",
          "38: import logging",
          "39: import os",
          "40: from datetime import datetime",
          "42: from google.analytics import admin_v1beta as google_analytics",
          "44: from airflow.decorators import task",
          "45: from airflow.models import Connection",
          "46: from airflow.models.dag import DAG",
          "47: from airflow.operators.bash import BashOperator",
          "48: from airflow.providers.google.marketing_platform.operators.analytics_admin import (",
          "49:     GoogleAnalyticsAdminCreateDataStreamOperator,",
          "50:     GoogleAnalyticsAdminCreatePropertyOperator,",
          "51:     GoogleAnalyticsAdminDeleteDataStreamOperator,",
          "52:     GoogleAnalyticsAdminDeletePropertyOperator,",
          "53:     GoogleAnalyticsAdminGetGoogleAdsLinkOperator,",
          "54:     GoogleAnalyticsAdminListAccountsOperator,",
          "55:     GoogleAnalyticsAdminListGoogleAdsLinksOperator,",
          "56: )",
          "57: from airflow.settings import Session",
          "58: from airflow.utils.trigger_rule import TriggerRule",
          "60: ENV_ID = os.environ.get(\"SYSTEM_TESTS_ENV_ID\")",
          "61: DAG_ID = \"example_google_analytics_admin\"",
          "63: CONNECTION_ID = f\"connection_{DAG_ID}_{ENV_ID}\"",
          "64: ACCOUNT_ID = os.environ.get(\"GA_ACCOUNT_ID\", \"123456789\")",
          "65: PROPERTY_ID = \"{{ task_instance.xcom_pull('create_property')['name'].split('/')[-1] }}\"",
          "66: DATA_STREAM_ID = \"{{ task_instance.xcom_pull('create_data_stream')['name'].split('/')[-1] }}\"",
          "67: GA_GOOGLE_ADS_PROPERTY_ID = os.environ.get(\"GA_GOOGLE_ADS_PROPERTY_ID\", \"123456789\")",
          "68: GA_ADS_LINK_ID = \"{{ task_instance.xcom_pull('list_google_ads_links')[0]['name'].split('/')[-1] }}\"",
          "70: log = logging.getLogger(__name__)",
          "72: with DAG(",
          "73:     DAG_ID,",
          "74:     schedule=\"@once\",  # Override to match your needs,",
          "75:     start_date=datetime(2021, 1, 1),",
          "76:     catchup=False,",
          "77:     tags=[\"example\", \"analytics\"],",
          "78: ) as dag:",
          "80:     @task",
          "81:     def setup_connection(**kwargs) -> None:",
          "82:         connection = Connection(",
          "83:             conn_id=CONNECTION_ID,",
          "84:             conn_type=\"google_cloud_platform\",",
          "85:         )",
          "86:         conn_extra_json = json.dumps(",
          "87:             {",
          "88:                 \"scope\": \"https://www.googleapis.com/auth/analytics.edit,\"",
          "89:                 \"https://www.googleapis.com/auth/analytics.readonly\",",
          "90:             }",
          "91:         )",
          "92:         connection.set_extra(conn_extra_json)",
          "94:         session = Session()",
          "95:         if session.query(Connection).filter(Connection.conn_id == CONNECTION_ID).first():",
          "96:             log.warning(\"Connection %s already exists\", CONNECTION_ID)",
          "97:             return None",
          "99:         session.add(connection)",
          "100:         session.commit()",
          "102:     setup_connection_task = setup_connection()",
          "104:     # [START howto_marketing_platform_list_accounts_operator]",
          "105:     list_accounts = GoogleAnalyticsAdminListAccountsOperator(",
          "106:         task_id=\"list_account\",",
          "107:         gcp_conn_id=CONNECTION_ID,",
          "108:         show_deleted=True,",
          "109:     )",
          "110:     # [END howto_marketing_platform_list_accounts_operator]",
          "112:     # [START howto_marketing_platform_create_property_operator]",
          "113:     create_property = GoogleAnalyticsAdminCreatePropertyOperator(",
          "114:         task_id=\"create_property\",",
          "115:         analytics_property={",
          "116:             \"parent\": f\"accounts/{ACCOUNT_ID}\",",
          "117:             \"display_name\": \"Test display name\",",
          "118:             \"time_zone\": \"America/Los_Angeles\",",
          "119:         },",
          "120:         gcp_conn_id=CONNECTION_ID,",
          "121:     )",
          "122:     # [END howto_marketing_platform_create_property_operator]",
          "124:     # [START howto_marketing_platform_create_data_stream_operator]",
          "125:     create_data_stream = GoogleAnalyticsAdminCreateDataStreamOperator(",
          "126:         task_id=\"create_data_stream\",",
          "127:         property_id=PROPERTY_ID,",
          "128:         data_stream={",
          "129:             \"display_name\": \"Test data stream\",",
          "130:             \"web_stream_data\": {",
          "131:                 \"default_uri\": \"www.example.com\",",
          "132:             },",
          "133:             \"type_\": google_analytics.DataStream.DataStreamType.WEB_DATA_STREAM,",
          "134:         },",
          "135:         gcp_conn_id=CONNECTION_ID,",
          "136:     )",
          "137:     # [END howto_marketing_platform_create_data_stream_operator]",
          "139:     # [START howto_marketing_platform_delete_data_stream_operator]",
          "140:     delete_data_stream = GoogleAnalyticsAdminDeleteDataStreamOperator(",
          "141:         task_id=\"delete_datastream\",",
          "142:         property_id=PROPERTY_ID,",
          "143:         data_stream_id=DATA_STREAM_ID,",
          "144:         gcp_conn_id=CONNECTION_ID,",
          "145:     )",
          "146:     # [END howto_marketing_platform_delete_data_stream_operator]",
          "148:     # [START howto_marketing_platform_delete_property_operator]",
          "149:     delete_property = GoogleAnalyticsAdminDeletePropertyOperator(",
          "150:         task_id=\"delete_property\",",
          "151:         property_id=PROPERTY_ID,",
          "152:         gcp_conn_id=CONNECTION_ID,",
          "153:     )",
          "154:     # [END howto_marketing_platform_delete_property_operator]",
          "155:     delete_property.trigger_rule = TriggerRule.ALL_DONE",
          "157:     # [START howto_marketing_platform_list_google_ads_links]",
          "158:     list_google_ads_links = GoogleAnalyticsAdminListGoogleAdsLinksOperator(",
          "159:         task_id=\"list_google_ads_links\",",
          "160:         property_id=GA_GOOGLE_ADS_PROPERTY_ID,",
          "161:         gcp_conn_id=CONNECTION_ID,",
          "162:     )",
          "163:     # [END howto_marketing_platform_list_google_ads_links]",
          "165:     # [START howto_marketing_platform_get_google_ad_link]",
          "166:     get_ad_link = GoogleAnalyticsAdminGetGoogleAdsLinkOperator(",
          "167:         task_id=\"get_ad_link\",",
          "168:         property_id=GA_GOOGLE_ADS_PROPERTY_ID,",
          "169:         google_ads_link_id=GA_ADS_LINK_ID,",
          "170:         gcp_conn_id=CONNECTION_ID,",
          "171:     )",
          "172:     # [END howto_marketing_platform_get_google_ad_link]",
          "174:     delete_connection = BashOperator(",
          "175:         task_id=\"delete_connection\",",
          "176:         bash_command=f\"airflow connections delete {CONNECTION_ID}\",",
          "177:         trigger_rule=TriggerRule.ALL_DONE,",
          "178:     )",
          "180:     (",
          "181:         # TEST SETUP",
          "182:         setup_connection_task",
          "183:         # TEST BODY",
          "184:         >> list_accounts",
          "185:         >> create_property",
          "186:         >> create_data_stream",
          "187:         >> delete_data_stream",
          "188:         >> delete_property",
          "189:         >> list_google_ads_links",
          "190:         >> get_ad_link",
          "191:         # TEST TEARDOWN",
          "192:         >> delete_connection",
          "193:     )",
          "194:     from tests.system.utils.watcher import watcher",
          "196:     # This test needs watcher in order to properly mark success/failure",
          "197:     # when \"tearDown\" task with trigger rule is part of the DAG",
          "198:     list(dag.tasks) >> watcher()",
          "200: from tests.system.utils import get_test_run  # noqa: E402",
          "202: # Needed to run the example DAG with pytest (see: tests/system/README.md#run_via_pytest)",
          "203: test_run = get_test_run(dag)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "408e2d2fe7578030bb3ca9df7f2ace4b654d67f8",
      "candidate_info": {
        "commit_hash": "408e2d2fe7578030bb3ca9df7f2ace4b654d67f8",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/408e2d2fe7578030bb3ca9df7f2ace4b654d67f8",
        "files": [
          "setup.cfg"
        ],
        "message": "Ignore MyPy error introduced by the new Apache Beam (#36607)\n\nThe new Apache Beam 2.53.0 introduced a MyPy error that breaks\nour MyPy checks.\n\nThis is captured in https://github.com/apache/beam/issues/29927\nbut until it is addressed we need to ignore it.\n\n(cherry picked from commit 0c10ddb3c6e9d8cbc1592d1e0bf5532c5ed4dfa9)",
        "before_after_code_files": [
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "236: [mypy-referencing.*]",
          "237: # Referencing has some old type annotations that are not compatible with new versions of mypy",
          "238: ignore_errors = True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: [mypy-apache_beam.*]",
          "242: # Beam has some old type annotations and they introduced an error recently with bad signature of",
          "243: # a function. This is captured in https://github.com/apache/beam/issues/29927",
          "244: # and we should remove this exclusion when it is fixed.",
          "245: ignore_errors = True",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b71d3882e944eecd64b5c4bf5fb42a3707496387",
      "candidate_info": {
        "commit_hash": "b71d3882e944eecd64b5c4bf5fb42a3707496387",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b71d3882e944eecd64b5c4bf5fb42a3707496387",
        "files": [
          "airflow/utils/event_scheduler.py"
        ],
        "message": "Avoid using dict as default value in call_regular_interval (#36608)\n\n(cherry picked from commit 9f275cf8900baac4e66eab3c5e8a1462a22f5ccc)",
        "before_after_code_files": [
          "airflow/utils/event_scheduler.py||airflow/utils/event_scheduler.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/utils/event_scheduler.py||airflow/utils/event_scheduler.py": [
          "File: airflow/utils/event_scheduler.py -> airflow/utils/event_scheduler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         delay: float,",
          "32:         action: Callable,",
          "33:         arguments=(),",
          "35:     ):",
          "36:         \"\"\"Call a function at (roughly) a given interval.\"\"\"",
          "",
          "[Removed Lines]",
          "34:         kwargs={},",
          "",
          "[Added Lines]",
          "34:         kwargs=None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:             # Good enough for now",
          "44:             self.enter(delay, 1, repeat, args, kwargs)",
          "",
          "[Removed Lines]",
          "46:         self.enter(delay, 1, repeat, arguments, kwargs)",
          "",
          "[Added Lines]",
          "46:         self.enter(delay, 1, repeat, arguments, kwargs or {})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4afcb7fda79c03eb66ed3e7188c9646a77ce7f2b",
      "candidate_info": {
        "commit_hash": "4afcb7fda79c03eb66ed3e7188c9646a77ce7f2b",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4afcb7fda79c03eb66ed3e7188c9646a77ce7f2b",
        "files": [
          "airflow/models/dagrun.py"
        ],
        "message": "Remove dot value (#36712)\n\nThe update_state function in the DagRun class fails as ever since an update was made to Airflow, the state of the DagRun is returned as a string instead of an actual DagRunState. However, should this be fixed in the future, this change would still not affect anything since the state is called as a string here, which would return the value without needing to specify \".value\" anyway.\n\nCo-authored-by: fuat.cakici <fuat.cakici@knab.nl>\n(cherry picked from commit dfa695a48ec53f97b9443205d00d06ce0c67271d)",
        "before_after_code_files": [
          "airflow/models/dagrun.py||airflow/models/dagrun.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/models/dagrun.py||airflow/models/dagrun.py": [
          "File: airflow/models/dagrun.py -> airflow/models/dagrun.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:         duration = self.end_date - self.start_date",
          "1045:         timer_params = {\"dt\": duration, \"tags\": self.stats_tags}",
          "1049:     @provide_session",
          "1050:     def verify_integrity(self, *, session: Session = NEW_SESSION) -> None:",
          "",
          "[Removed Lines]",
          "1046:         Stats.timing(f\"dagrun.duration.{self.state.value}.{self.dag_id}\", **timer_params)",
          "1047:         Stats.timing(f\"dagrun.duration.{self.state.value}\", **timer_params)",
          "",
          "[Added Lines]",
          "1046:         Stats.timing(f\"dagrun.duration.{self.state}.{self.dag_id}\", **timer_params)",
          "1047:         Stats.timing(f\"dagrun.duration.{self.state}\", **timer_params)",
          "",
          "---------------"
        ]
      }
    }
  ]
}